

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Minimize Memory Allocations for New TreeView Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130697">
<META NAME="KBModify" CONTENT="1995/05/30">
<META NAME="KBCreate" CONTENT="1995/05/25">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  You can use the new TreeView Common Control to display a hierarchical list of items. This new control is available for Win32-based applications running under Windows NT or Windows 95. Applications typically use this control to display a list of ite...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAOE,QAMN,QATX,QBCF,QBW6,QAHV,QAJH,QACI,QA9N,QAJQ,QBXS,QBWP,QBBI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Minimize Memory Allocations for New TreeView Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130697</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK)
   versions 3.51 and 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use the new TreeView Common Control to display a hierarchical list
of items. This new control is available for Win32-based applications
running under Windows NT or Windows 95. Applications typically use this
control to display a list of items like directories or files on a given
drive. Each node in a TreeView control allocates about 40 bytes. If the
TreeView control displays a lot of items, applications can easily consume
large amounts of memory, which slows down other applications.
<P>
Below are some techniques applications can use to minimize memory
allocations for TreeView controls.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
TreeView controls maintain internal data structures for every node added to
the control. This data structure along with image lists associated with
items and text strings for items can drain the physical memory available on
the system.
<P>
Applications that need to display thousands of items or nodes in the
TreeView control can be more proficient about memory allocations by doing
the following:

<OL><P><LI>When inserting an item into a TreeView control, ensure that the pszText
   member of the TV_ITEM is not the actual string that needs to be
   displayed, but is the value LPSTR_TEXTCALLBACK. If a string pointer is
   passed, the control stores that string internally by allocating memory
   for it. When this flag is specified, the parent window of the control is
   responsible for storing the name (string). The string in most cases can
   be generated dynamically. In this case, the TreeView control sends the
   parent window a TVN_GETDISPINFO notification message when it needs the
   item text for displaying, sorting, or editing and sends a
   TVN_SETDISPINFO notification message when the item text changes.

<P><LI>Fill the TreeView nodes on demand. One way to really minimize memory
   usage in a TreeView control is to fill in only the visible nodes. The
   TV_ITEM struct's cChildren member can be put to good use for this
   purpose. This is used as a flag to indicate whether the item has
   associated child items. It is 1 if the item has one or more child items;
   otherwise, it is 0 (zero). When inserting visible items into the
   TreeView control, set this cChildren member to 1 if that node will have
   child items under it. Do not insert the child items. When the user
   clicks the node, the application receives a TVN_ITEMEXPANDING with
   NM_TREEVIEW.action set to TVE_EXPAND. Insert the child items at that
   point. Then when the user clicks the same node again (to collapse the
   node), the applciation receives a TVN_ITEMEXPANDED with
   NM_TREEVIEW.action set to TVE_COLLAPSE. At that time, collapse the node
   and all its child items by calling TreeView_Expand (hWndTrevview, hItem,
   TVE_COLLAPSE|TVE_COLLAPSERESET). This frees up the memory used up by all
   the children or child items.

<P><LI>If the application uses different icons for each child item in the
   TreeView control, specify the I_IMAGECALLBACK value for the iImage and
   iSeletedImage members of the TV_ITEM Structure. This way, the control
   doesn't have to store these images for every child item - thereby
   reducing the memory requirements for the control as a whole.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 usage user styles<BR>
KBCategory: kbprg<BR>
KBSubcategory: TreeView<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

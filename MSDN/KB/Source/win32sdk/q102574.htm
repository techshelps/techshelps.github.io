

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XTYP_EXECUTE and its Return Value Limitations </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102574">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/08/04">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  A DDEML client application can use the XTYP_EXECUTE transaction to cause a server to execute a command or a series of commands. To do this, the client creates a buffer that contains the command string, and passes either a pointer to this buffer or ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QARL,QAGI,QBV8,QAB9,QDL9,QBWO,QBWN,QAYY,QAH6,QAJH,QALW,QBW7,QAI5,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XTYP_EXECUTE and its Return Value Limitations</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102574</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A DDEML client application can use the XTYP_EXECUTE transaction to
cause a server to execute a command or a series of commands. To do
this, the client creates a buffer that contains the command string,
and passes either a pointer to this buffer or a data handle
identifying the buffer, to the DdeClientTransaction() call.
<P>
If the server application generates data as a result of executing the
command it received from the client, the return value from the
DdeClientTransaction() call does not provide a means for the client to
access this data.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For an XTYP_EXECUTE transaction, the DdeClientTransaction() function
returns TRUE to indicate success, or FALSE to indicate failure. In
most cases, this provides inadequate information to the client
regarding the actual result of the XTYP_EXECUTE command.
<P>
Likewise, the functionality that DDEML was supposed to provide through
the lpuResult parameter of the DdeClientTransaction() function upon
return is currently not supported, and may not be supported in future
versions of DDEML. The lpuResult parameter was initially designed to
provide the client application access to the server's actual return
value (for example, DDE_FACK if it processed the execute, DDE_FBUSY if
it was too busy to process the execute, or DDE_FNOTPROCESSED if it
denied the execute).
<P>
In cases where the server application generates data as a result of an
execute command, the client has no means to get to that data, nor does
it have a means to determine the status of that execute command
through the DdeClientTransaction() call.
<P>
An example of this might be one where the DDEML client application
specifies a command to a server application such as "OpenFile
&lt;FileName&gt;" to open a file, or "DIR C:\WINDOWS" to get a list of files
in a given directory.
<P>
There are two ways that the client application can work around this
limitation and gain access to the data generated from the
XTYP_EXECUTE command:
<P>
<P><h3>Method 1</h3>
 
<P>
The client can issue an XTYP_REQUEST transaction (with the item name
set to "ExecuteResult", for example) immediately after its
XTYP_EXECUTE transaction call returns successfully. The server can
then return a data handle in response to this request, out of the data
generated from executing the command.
<P>
<P><h3>Method 2</h3>
 
<P>
The client can establish an ADVISE loop with the server (with
topic!item name appropriately set to Execute!Result, for example) just
before issuing the XTYP_EXECUTE transaction. As soon as the server
then executes the command, it can immediately update the advise link
by calling DdePostAdvise(), and return a data handle out of the data
generated from executing the command. The client then receives the
data handle in its callback function, as an XTYP_ADVDATA transaction.
<P>
Note that these workarounds apply only if one has access to the server
application's code. Third-party server applications that provide no
means to modify their code as described above can't obtain any data
generated by the application as a result of an XTYP_EXECUTE back to
the client.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrDde<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

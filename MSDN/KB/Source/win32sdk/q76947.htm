

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending Standard Windows Controls Through Superclassing </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q76947 ">
<META NAME="KBModify" CONTENT="1995/11/29">
<META NAME="KBCreate" CONTENT="1991/10/03">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  A Windows-based application can extend the behavior of a standard Windows control by using the technique of superclassing. An application can superclass a standard Windows control by retrieving its window class information, modifying the fields of ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABB,QAHT,QDL9,QBWO,QBWN,QABA,QABO,QA7O,QBWQ,QAOE,QAMN,QALG,QAB5,QASR,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Extending Standard Windows Controls Through Superclassing</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q76947 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A Windows-based application can extend the behavior of a standard Windows
control by using the technique of superclassing. An application can
superclass a standard Windows control by retrieving its window class
information, modifying the fields of the WNDCLASS structure, and
registering a new class. For example, to associate status information with
each button control in an application, the buttons can be superclassed to
provide a number of window extra bytes.
<P>
This article describes a technique to access the WNDCLASS structure
associated with the standard "button" class.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following five steps are necessary to register a new class that
uses some information from the standard windows "button" class:

<OL><P><LI>Call GetClassInfo() to fill the WNDCLASS structure.

<P><LI>Save the cbWndExtra value in a global variable.

<P><LI>Add the desired number of bytes to the existing cbWndExtra value.

<P><LI>Change the lpszClassName field.

<P><LI>Call RegisterClass() to register the new class.
<P>
</OL>The first step will fill the WNDCLASS structure with the data that was used
when the class was originally registered. In this example, the second step
is necessary so that when the "new" extra bytes are accessed, the original
extra bytes are not destroyed. Please note that it is NOT safe to assume
that the original cbWndExtra value was zero. When accessing the "new" extra
bytes, it is necessary to use the original value of cbWndExtra as the base
for any new data stored in the extra bytes. The third step allocates the
new extra bytes. The fourth step specifies the new name of the class to be
registered, and the final step actually registers the new class.
<P>
Any new class created in this manner MUST have a unique class name.
Typically, this name would be similar but not identical to the original
class. For example, to superclass a button, an appropriate class name might
be "superbutton." There is no conflict with class names used by other
applications as long as the CS_GLOBALCLASS class style is not specified.
The standard Windows "button" class remains unchanged and can still be used
by the application as normal. In addition, once a new class has been
registered, any number of controls can be created and destroyed with no
extra coding effort. The superclass is simply another class in the pool of
classes that can be used when creating a window.
<P>
The sample code below demonstrates this procedure:
<P>
BOOL DefineSuperButtonClass(void)
{
<PRE>#define MYEXTRABYTES 8

   HWND     hButton;
   WNDCLASS wc;
   static char pszClassName[] = "superbutton";

   GetClassInfo(NULL, "button", (LPWNDCLASS)&amp;wc);

   iStdButtonWndExtra = wc.cbWndExtra;   // Save this in a global

   wc.cbWndExtra += MYEXTRABYTES;

   wc.lpszClassName= pszClassName;

   return(RegisterClass((LPWNDCLASS)&amp;wc));
</PRE></OL>}
<P>
It is important to note that the lpszClassName, lpszMenuName, and hInstance
fields in the WNDCLASS structure are NOT returned by the GetClassInfo()
function. Please refer to page 4-153 of the "Microsoft Windows Software
Development Kit Reference Volume 1" for more information. Also, each time a
new class is registered, scarce system resources are used. If it is
necessary to alter many different standard classes, the GetProp(),
SetProp(), and RemoveProp() functions should be used as an alternative
approach to associating extra information with standard Windows controls.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

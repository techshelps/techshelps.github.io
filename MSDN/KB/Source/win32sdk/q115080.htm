

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Convert a Linear Address to a Flat Offset on Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115080">
<META NAME="KBModify" CONTENT="1997/06/10">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="kbprg W32s kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Win32s flat code and data selectors are not zero-based. Linear addresses retrieved through a VxD can be used in a Win32-based application running under Win32s, after one small change is made.  In addition, there are two Universal Thunk APIs that ar...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAC2,QAR5,QBW4,QBWD,QABA,QA2O,QAGI,QAA3,QBVV,QBE7,QBE6,QAZB,QBSO,QA7H,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Convert a Linear Address to a Flat Offset on Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115080</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
<PRE>  - Microsoft Win32s, versions 1.1, 1.15, 1.2, 1.3, 1.30c
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Win32s flat code and data selectors are not zero-based. Linear addresses
retrieved through a VxD can be used in a Win32-based application running
under Win32s, after one small change is made.
<P>
In addition, there are two Universal Thunk APIs that are used to convert
segmented addresses to flat addresses and vice versa.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Linear Address to Flat Address</h3>
 
<P>
Win32s does not base linear addresses at 0, so that exceptions will be
generated when null pointers are dereferenced. Therefore, an access
violation occurs when:

<OL><P><LI>a 16-bit DLL calls a VxD to retrieve a linear address (the VxD got
   the address by translating a physical address to a linear address)
   through DPMI function 0800h (map physical to linear).

<P><LI>the 16-bit DLL returns the address to a Win32-based application through
   the Universal Thunk.

<P><LI>the Win32-based application uses this linear address.
<P>
</OL>In order to convert a linear address (based at 0) to a flat offset, add
the base to the linear address. To do this, get the offset through
GetThreadSelectorEntry() with the DS or CS and then subtract that base from
the linear address that was returned by the VxD.
<P>
<P><h3>Segmented Address to Flat Address</h3>
 
<P>
The following Win32s Universal Thunk APIs are used for address
translation:

<UL><LI>UTSelectorOffsetToLinear (segmented address to flat address)

<LI>UTLinearToSelectorOffset (flat address to segmented address)
<P>
</UL>NOTE: In the nested function call
<P>
<PRE>   UTLinearToSelectorOffset( UTSelectorOffsetToLinear( x ) );

</PRE></OL>where x is a segmented address, you may not necessarily get the original
value of x back. It is by design that the sel:off pair may be different.
If the memory was allocated by a 16-bit application, Win32s does not
have x in its LinearAddress-&gt;selector translation tables. Therefore,
when UTLinearToSelectorOffset() is called, new selectors are created.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: gpf gp-fault<BR>
Keywords            : kbprg W32s kbprg<BR>
Version             : 1.1 1.15 1.2 1.3 1.3c<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Understanding CreateProcess and Command-line Arguments </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175986">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1997/10/30">
<META NAME="Keywords" CONTENT="BseCon BseProcThrd">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article explains the relationship between the ApplicationName and CommandLine parameters of the CreateProcess() API, specifically to clarify any issues that arise when you use both parameters.  MORE INFORMATION  The first two parameters of the...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHE,QAH6,QAH7,QAD7,QBWP,QAJH,QDL9,QBWO,QBWN,QAY5,QBVV,QAJQ,QAPN,QAGI,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Understanding CreateProcess and Command-line Arguments</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175986</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT, versions 3.51, 4.0
   - Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains the relationship between the ApplicationName and
CommandLine parameters of the CreateProcess() API, specifically to clarify
any issues that arise when you use both parameters.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The first two parameters of the CreateProcess API are ApplicationName and
CommandLine. The behavior of these parameters differs depending upon
whether you are creating a 32-bit process or a 16-bit executable.
<P>
<P><h3>Behavior of CreateProcess() When Creating a 32-bit Process</h3>
 
<P>
Case 1:
<P>
If the ApplicationName parameter is passed and the CommandLine parameter is
NULL, then the ApplicationName parameter is also used as the CommandLine.
This does not mean that you can pass additional command-line parameters in
ApplicationName string. For example, the following call will fail with a
"File Not Found" error:
<P>
<PRE>  CreateProcess( "c:\\MyApp.exe Param1 Param2", NULL, ... )

</PRE>Case 2:
<P>
On the other hand, if the CommandLine parameter is non-NULL and the
ApplicationName parameter is NULL, then the API attempts to extract the
application name from the CommandLine parameter.
<P>
Case 3:
<P>
The flexibility of the CreateProcess() function (and a possible point of
confusion) arises when you pass a valid string pointer to both the
ApplicationName and CommandLine parameters. This allows you to specify the
application to be executed as well as the complete command line that is
passed to the application. One might assume that the command line passed to
the created application is a composite of the ApplicationName and
CommandLine parameters, but this is not the case. As a result, a process
created by CreateProcess can receive a value other than its .exe name as
its "argv[0]" parameter. The following is an example of a call to
CreateProcess that produces this "abnormal" behavior:
<P>
<PRE>  CreateProcess( "c:\\MyApp.exe", "Param1 Param2 Param3", ...)

</PRE>MyApp's arguments will be as follow:
<P>
<PRE>  argv[0] == "Param1"
  argv[1] == "Param2"
  argv[2] == "Param3"

</PRE>NOTE: ANSI specifications require that argv[0] should be equal to the
application name, but CreateProcess gives the calling application the
flexibility to override this rule for 32-bit processes.
<P>
<P><h3>Behavior of CreateProcess When Executing a 16-bit .exe</h3>
 
<P>
CreateProcess() does enforce the ANSI specification for parameters passed
to 16-bit applications. This raises a potentially confusing inconsistency
between the way CreateProcess works from one application to the next and
requires you to know whether the application that you are spawning is a 16-
bit or 32-bit executable file. To further complicate the issue,
CreateProcess is implemented slightly differently in Windows 95 and Windows
NT.
<P>
Windows NT Behavior:
<P>
If the first "parameter" in the CommandLine is not exactly the same as the
ApplicationName string, then it replaces it before executing the
application. For example if the ApplicationName and CommandLine parameters
are as follows:
<P>
<PRE>   CreateProcess( "c:\\MyApp16.exe", "Param1 Param2 Param3", ...)

</PRE>Then, the command line arguments that the application sees are as follows:
<P>
<PRE>  argv[0] == "c:\MyApp16.exe"
  argv[1] == "Param2"
  argv[2] == "Param3"

</PRE>Windows 95 Behavior:
<P>
If the first "parameter" in the CommandLine is not exactly the same as the
ApplicationName string, then CreateProcess fails with a file not found
error. As a result, there is no reason to pass anything but NULL as the
ApplicationName argument to CreateProcess in Windows 95 if you are
executing a 16-bit application.
 
<PRE>Keywords          : BseCon BseProcThrd
Version           : WINNT:3.51,4.0
Platform          : winnt
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling CRT Output Routines from a GUI Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105305">
<META NAME="KBModify" CONTENT="1997/01/08">
<META NAME="KBCreate" CONTENT="1993/10/17">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  To use C Run-time output routines, such as printf(), from a GUI application, it is necessary to create a console. The Win32 application programming interface (API) AllocConsole() creates the console. The CRT routine setvbuf() removes buffering so t...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIJ,QAY2,QAJH,QABB,QAGI,QBVV,QAKD,QAH4,QAEF,QAJQ,QA5A,QAUS,QAR4,QAB9,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calling CRT Output Routines from a GUI Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105305</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.1, 3.5, 3.51, 4.00
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To use C Run-time output routines, such as printf(), from a GUI
application, it is necessary to create a console. The Win32 application
programming interface (API) AllocConsole() creates the console. The CRT
routine setvbuf() removes buffering so that output is visible immediately.
<P>
This method works if the GUI application is run from the command line or
from File Manager. However, this method does not work if the application is
started from the Program Manager or via the "start" command. The following
code shows how to work around this problem:
<P>
<PRE>   int hCrt;
   FILE *hf;

   AllocConsole();
   hCrt = _open_osfhandle(
             (long) GetStdHandle(STD_OUTPUT_HANDLE),
             _O_TEXT
          );
   hf = _fdopen( hCrt, "w" );
   *stdout = *hf;
   i = setvbuf( stdout, NULL, _IONBF, 0 );

</PRE>This code opens up a new low-level CRT handle to the correct console output
handle, associates a new stream with that low-level handle, and replaces
stdout with that new stream. This process takes care of functions that use
stdout, such as printf(), puts(), and so forth. Use the same procedure for
stdin and stderr.
<P>
Note that this code does not correct problems with handles 0, 1, and 2. In
fact, due to other complications, it is not possible to correct this, and
therefore it is necessary to use stream I/O instead of low-level I/O.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a GUI application is started with the "start" command, the three
standard OS handles STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, and
STD_ERROR_HANDLE are all "zeroed out" by the console initialization
routines. These three handles are replaced by valid values when the GUI
application calls AllocConsole(). Therefore, once this is done, calling
GetStdHandle() will always return valid handle values. The problem is that
the CRT has already completed initialization before your application gets a
chance to call AllocConsole(); the three low I/O handles 0, 1, and 2 have
already been set up to use the original zeroed out OS handles, so all CRT
I/O is sent to invalid OS handles and CRT output does not appear in the
console. Use the workaround described above to eliminate this problem.
<P>
In the case of starting the GUI application from the command line without
the "start" command, the standard OS handles are NOT correctly zeroed out,
but are incorrectly inherited from CMD.EXE. When the application's CRT
initializes, the three low I/O handles 0, 1, and 2 are initialized to use
the three handle numbers that the application inherits from CMD.EXE. When
the application calls AllocConsole(), the console initialization routines
attempt to replace what the console initialization believes to be invalid
standard OS handle values with valid handle values from the new console. By
coincidence, because the console initialization routines tend to give out
the same three values for the standard OS handles, the console
initilization will replace the standard OS handle values with the same
values that were there before--the ones inherited from CMD.EXE. Therefore,
CRT I/O works in this case.
<P>
It is important to realize that the ability to use CRT routines from a GUI
application run from the command line was not by design so this may not
work in future versions of Windows NT or Windows. In a future version, you
may need the workaround not just for applications started on the command
line with "start &lt;application name&gt;", but also for applications started on
the command line with "application name".
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95 CRT redirect std handles<BR>
KBCategory: kbprg<BR>
KBSubcategory: BseMisc BseCon
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

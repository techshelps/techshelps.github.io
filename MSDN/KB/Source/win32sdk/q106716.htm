

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using SendMessageTimeout() in a Multithreaded Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106716">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/11/14">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  SendMessageTimeout() is new to the Win32 application programming interface (API). The function sends a message to a window and does not return until either the window procedure processes the message or the timeout occurs.  MORE INFORMATION  This ar...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEV,QAUD,QAYC,QDL9,QBWO,QBWN,QAHE,QAY5,QAJQ,QAB9,QAH6,QAH4,QBWQ,QAGQ,QBJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using SendMessageTimeout() in a Multithreaded Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106716</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
SendMessageTimeout() is new to the Win32 application programming interface
(API). The function sends a message to a window and does not return until
either the window procedure processes the message or the timeout occurs.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This article uses the following scenario to illustrate the behavior of this
function:
<P>
Suppose that Win1 and Win2 are created by the same application and
that the following code is included in their window procedures:
<P>
<PRE>   &lt;WindowProc for window Win1&gt;
      ...
      case &lt;xxx&gt;:
         ...
         SendMessageTimeout(      hWnd2,   // window handle
                              WM_USER+1,   // message to send
                                 wParam,   // first message parameter
                                 lParam,   // second message parameter
                            SMTO_NORMAL,   // flag *
                                    100,   // timeout (in milliseconds)
                                   &amp;ret ); // return value
        ...
         break;

      case WM_USER+2:
        &lt;time-consuming procedure&gt;
         break;

</PRE>* Note that the SMTO_NORMAL flag indicates that the calling thread can
process other requests while waiting for the API to return.
<P>
<PRE>   &lt;WindowProc for window Win2&gt;
      ...
      case WM_USER+1:
         ...
         SendMessage(     hWnd1,    // window handle
                      WM_USER+2,    // message to send
                         wParam,    // first message parameter
                         lParam );  // second message parameter
         OtherStuff();
         ...
         break;

</PRE>If Win1 executes this SendMessageTimeout() and Win2 uses SendMessage() to
send a message to Win1, Win1 can process the message because SMTO_NORMAL
was specified. If the SendMessageTimeout() expires while the execution is
currently in the window procedure for Win1, the state of the system will
depend on who owns the windows.
<P>
If both windows were created by the same thread, the timeout is not used
and the process proceeds exactly as if SendMessage() was being used. If the
windows are owned by different threads, the results can be unpredictable,
because the timeout is restarted whenever a message or some other system
event is received and processed. In other words, the receipt by Win1 of
WM_USER+2 causes the timeout to restart after the message is processed. If
the function executed by Win2, OtherStuff(), then uses up more than 100
milliseconds without awakening the thread that created Win1, the original
SendMessageTimeout() will timeout and return. The OtherStuff() function
continues to completion but any value that was to be returned to Win1 will
be lost. Note that the code paths will always complete.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrMisc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Set MCI Wave Audio Recording Format </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152180">
<META NAME="KBModify" CONTENT="1996/06/10">
<META NAME="KBCreate" CONTENT="1996/06/06">
<META NAME="Keywords" CONTENT="kbmm kbsound kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  All parameters in the MCI_WAVE_SET_PARMS struct that apply to recording wave audio should be set at the same time. If some recording parameters are set at one time and the balance of the recording parameters are set at a later time, recording will ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QA5V,QABA,QAJZ,QBAO,QAPF,QACJ,QDL9,QBWO,QBWN,QAHE,QAB4,QBI8,QAI4,QAYS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Set MCI Wave Audio Recording Format</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 10, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152180</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK), version 3.1

<LI>Microsoft Win32 Software Development Kit for
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Pegasus (Beta) 1.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
All parameters in the MCI_WAVE_SET_PARMS struct that apply to recording
wave audio should be set at the same time. If some recording parameters are
set at one time and the balance of the recording parameters are set at a
later time, recording will proceed at a default setting of 8-bits per
sample, mono, and 11-kHz sampling.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The members of the MCI_WAVE_SET_PARMS struct that pertain to recording are
wFormatTag, wBitsPerSample, nChannels, nSamplesPerSec, nAvgBytesPerSec, and
nBlockAlign. All of these should be set in a single call to mciSendCommand
in order to achieve recording under the desired settings.
<P>
Because nBlockAlign is usually computed using information from
wBitsPerSample and nChannels, it may not seem necessary to set any members
other than wFormatTag, wBitsPerSample, and nChannels in conjunction with
the setting of nBlockAlign. Leaving the other two pertinent members,
nSamplesPerSec and nAvgBytesPerSec, to be set later, however, results in an
error message at both the initial setting and the later setting of
parameters. The error message states "The parameter is out of range for the
specified command." Recording will then proceed at a default setting of
8-bits per sample, mono, and 11-kHz sampling.
<P>
Following is a sample of setting all the recording members of the
MCI_WAVE_SET_PARMS struct properly at once to get the desired 16-bit stereo
recording accomplished at 44-kHz sampling:
<P>
<PRE>   //#include &lt;mmsystem.h&gt; at the beginning of the program.
   //Link with mmsystem.lib for 16-bit code, or
   //link with winmm.lib for 32-bit code.

   MCI_WAVE_SET_PARMS set_parms;
   MCI_OPEN_PARMS          open_parms;
   DWORD                            dwReturn;
   UINT                                 wave_device_id;
   char                                  buffer[128];

   // Open the wave audio device.
   open_parms.lpstrDeviceType = "waveaudio";
   open_parms.lpstrElementName = "";

   if (dwReturn = mciSendCommand( 0, MCI_OPEN, MCI_OPEN_TYPE |
         MCI_OPEN_ELEMENT, (DWORD) (LPVOID) &amp;open_parms))
   {
       mciGetErrorString(dwReturn, buffer, sizeof (buffer));
       MessageBox( NULL, buffer, "MCI_OPEN",
              MB_ICONEXCLAMATION | MB_OK);
   }
   else
   {
       MessageBox( NULL, "Open Succeeded", "MCI_OPEN",
              MB_ICONEXCLAMATION | MB_OK);
   }

   // Note the wave audio device ID
   wave_device_id = open_parms.wDeviceID;

   // Set PCM format of recording.
   set_parms.wFormatTag = WAVE_FORMAT_PCM;
   set_parms.wBitsPerSample = 16;
   set_parms.nChannels = 2;
   set_parms.nSamplesPerSec = 44100;
   set_parms.nAvgBytesPerSec = ((set_parms.wBitsPerSample)/8) *
                               set_parms.nChannels *
                               set_parms.nSamplesPerSec;
   set_parms.nBlockAlign = ((set_parms.wBitsPerSample)/8) *
                               set_parms.nChannels;

   if (dwReturn = mciSendCommand( wave_device_id, MCI_SET, MCI_WAIT |
                                   MCI_WAVE_SET_FORMATTAG |
                                   MCI_WAVE_SET_BITSPERSAMPLE |
                                   MCI_WAVE_SET_CHANNELS |
                                   MCI_WAVE_SET_SAMPLESPERSEC |

                                   MCI_WAVE_SET_AVGBYTESPERSEC |
                                   MCI_WAVE_SET_BLOCKALIGN,
                                   (DWORD)(LPVOID)&amp;set_parms))
   {
       mciGetErrorString(dwReturn, buffer, sizeof(buffer));
       MessageBox( NULL, buffer, "MCI_SET",
              MB_ICONEXCLAMATION | MB_OK);
   }
   else
   {
       MessageBox( NULL, "MCI_WAVE_SET Succeeded", "MCI_SET",
              MB_ICONEXCLAMATION | MB_OK);
   }

   //Close the wave device.
   if (dwReturn = mciSendCommand( wave_device_id, MCI_CLOSE,
              (DWORD)NULL, (DWORD)NULL))
   {
       mciGetErrorString(dwReturn, buffer, sizeof (buffer));
       MessageBox( NULL, buffer, "MCI_CLOSE",
              MB_ICONEXCLAMATION | MB_OK);
   }
   else
   {
       MessageBox( NULL, "MCI_CLOSE Succeeded", "MCI_CLOSE",
              MB_ICONEXCLAMATION | MB_OK);
   }

</PRE>Following is behavior that will result in a default recording of 8-bits per
sample, mono, and 11-kHz sampling, because the settings of the recording
parameters are done in two parts:
<P>
<PRE>   // Set PCM format recording, Part 1.
   set_parms.wFormatTag = WAVE_FORMAT_PCM;
   set_parms.wBitsPerSample = 16;
   set_parms.nChannels = 2;
   set_parms.nBlockAlign = ((set_parms.wBitsPerSample)/8) *
                               set_parms.nChannels;

   if (dwReturn = mciSendCommand( wave_device_id, MCI_SET, MCI_WAIT |
                                   MCI_WAVE_SET_FORMATTAG |
                                   MCI_WAVE_SET_BITSPERSAMPLE |
                                   MCI_WAVE_SET_CHANNELS |
                                   MCI_WAVE_SET_BLOCKALIGN,
                                   (DWORD)(LPVOID)&amp;set_parms))
   {
       mciGetErrorString(dwReturn, buffer, sizeof(buffer));
       MessageBox( NULL, buffer, "MCI_WAVE_SET_1", MB_OK);
   }
   else
    }
       MessageBox( NULL, "MCI_WAVE_SET-1 Succeeded", "MCI_SET",
                                   MB_OK);
    }

    // Set PCM format recording, Part 2.
    set_parms.nSamplesPerSec = 44100;
    set_parms.nAvgBytesPerSec = ((set_parms.wBitsPerSample)/8) *
                                set_parms.nChannels *
                                set_parms.nSamplesPerSec;

    if (dwReturn = mciSendCommand( wave_device_id, MCI_SET, MCI_WAIT |
                                    MCI_WAVE_SET_SAMPLESPERSEC |
                                    MCI_WAVE_SET_AVGBYTESPERSEC,
                                    (DWORD)(LPVOID)&amp;set_parms))
    {
        mciGetErrorString(dwReturn, buffer, sizeof(buffer));
        MessageBox( NULL, buffer, "MCI_WAVE_SET_2", MB_OK);
    }
    else
    {
        MessageBox( NULL, "MCI_WAVE_SET_2 Succeeded", "MCI_SET",
                                    MB_OK);
    }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.11 4.00 3.51<BR>
KBCategory: kbmm kbsound kbhowto<BR>
KBSubcategory: MMWave
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 10, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

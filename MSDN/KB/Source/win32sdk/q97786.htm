

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Default Stack in Win32-Based Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97786 ">
<META NAME="KBModify" CONTENT="1996/12/20">
<META NAME="KBCreate" CONTENT="1993/04/21">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  By default, space is reserved for applications in the following manner:     1 megabyte (MB) reserved (total virtual address space for the stack)     1 page committed (total physical memory allocated when stack is                      created)     N...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBW6,QABA,QAWH,QADP,QAJQ,QBBI,QBW5,QAGF,QBQU,QBJQ,QBWP,QBXI,QBVV,QAUQ,QAMJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Default Stack in Win32-Based Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 20, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97786 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.1, 3.5, 3.51, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, space is reserved for applications in the following manner:
<P>
<PRE>   1 megabyte (MB) reserved (total virtual address space for the stack)

   1 page committed (total physical memory allocated when stack is
                     created)

   Note: The -stack linker option can be used to modify both of these
         values.

</PRE>The default stack size is taken from the process default reserve stack
size.
<P>
The operating system will grow the stack as needed by committing 1 page
blocks (4K on an x86 machine) out of the reserved stack memory. Once all of
the reserved memory has been committed, Windows NT will attempt to continue
to grow the stack into the memory adjacent to the memory reserved for the
stack, as shown in the following example on an x86 machine:
<P>
<PRE>   |&lt;--- Total 1 MB for stack ---&gt;|&lt;--- Adjacent memory ---&gt;|
   --------------------------------------------------------
   |       |                      |                         |
   |  4K   |   1020K  ...         |       ...               |
   |       |                      |                         |
   --------------------------------------------------------

</PRE>However, once the stack grows to the point that the adjacent area is not
free (and this may happen as soon as the reserved 1 MB has been committed),
the stack cannot grow any farther. Therefore, it is very risky to rely on
this memory being free. Applications should take care to reserve all the
memory that will be needed by increasing the amount of memory reserved for
the stack.
<P>
In other cases, it may be desirable to reduce the amount of memory reserved
for the stack.
<P>
The /STACK option in the linker and the STACKSIZE statement in the DEF file
can be used to change both the amount of reserved memory and the amount of
committed memory. The syntax for each method is shown below:
<P>
<PRE>   /STACK:[reserve][,commit]

   STACKSIZE [reserve][,commit]

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Each new thread gets its own stack space of committed and reserved memory.
CreateThread() has a stacksize parameter, which is the commit size. If a
new size is not specified in the CreateThread() call, the new thread
takes on the same stack size as the thread that created it, whether that be
the default value, a value defined in the DEF file, or by the linker
switch. If the commit size specified is larger than the default process
stack size, the stack size is set to the commit size. When specifying a
stack size of 0, the commit size is taken from the process default commit.
<P>
The system handles committing more reserved stack space when needed, but
cannot reserve or commit more than the total amount initially reserved (or
committed if no additional is reserved). Remember that the only resource
consumed by reserving space is addresses in your process. No memory or
pagefile space is allocated. When the memory is actually committed, both
memory and pagefile resources are allocated. There is no harm in reserving
a large area if it might be needed.
<P>
As always, automatic variables are placed on the stack. All other static
data is located in the process address space. Because they are static, they
do not need to be managed like heap memory.
<P>
Note that under Win32s 1.2 and earlier, stacks are limited to a maximum of
128K (this limit has been increased with Win32s 1.25a). The same stack is
used on the 16-bit side of a Universal Thunk (UT). A 16:16 pointer is
created and it points to the top of the 32-bit stack. The selector base is
set in such a way that the 16-bit code is allocated at least an 8K stack.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: BseMm<BR>
Additional reference words: 3.10 3.50 3.51 4.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 20, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using cChildren Member of TV_ITEM to Add Speed &amp; Use Less RAM </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131278">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/06/07">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The cChildren member of the TV_ITEM structure is used to denote the number of child items associated with a treeview item. When used correctly, the cChildren member helps an application go faster and use less memory.  Applications may specify I_CHI...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA9N,QACI,QAKC,QAJH,QBCF,QAUD,QAH4,QBC6,QALQ,QAEV,QBBI,QAG8,QAEF,QAIS,QBSO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using cChildren Member of TV_ITEM to Add Speed &amp; Use Less RAM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131278</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The cChildren member of the TV_ITEM structure is used to denote the number
of child items associated with a treeview item. When used correctly, the
cChildren member helps an application go faster and use less memory.
<P>
Applications may specify I_CHILDRENCALLBACK for this member, instead of
passing the actual number of child items. To retrieve the actual number of
child items associated with a treeview item, I_CHILDRENCALLBACK causes the
treeview to send a TVN_GETDISPINFO notification when the item needs to be
redrawn.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In a treeview with the TVS_HASBUTTONS style, specify a nonzero value for
the cChildren member to add the appropriate plus or minus (+/-) button (to
denote expand or collapse) to the left of the treeview item, without having
to insert each of the child items to the treeview. Specifying a zero value
indicates that the particular item does not have any child items associated
with it.
<P>
An application that does not use the cChildren member of the TV_ITEM
structure when inserting items to the treeview has to insert each of the
child items associated with that treeview item in order for the +/- button
to show up.
<P>
Using the cChildren member, therefore, helps to speed up an application
and reduce memory requirements by allowing the application to fill the tree
on demand.
<P>
Applications such as the Explorer, WinHelp, and RegEdit, which display huge
hierarchical structures, take advantage of this feature by initially
inserting only the visible items of the tree. The child items associated
with a particular item are not inserted until the user clicks the parent
item to expand it. At that point, the treeview's parent window receives a
TVN_ITEMEXPANDING notification message, and the application inserts the
child items for that parent item:
<P>
<PRE>   // WM_NOTIFY message handler
   LRESULT MsgNotifyTreeView(HWND hwnd,
                             UINT uMessage,
                             WPARAM wparam,
                             LPARAM lparam)
   {

       LPNMHDR  lpnmhdr = (LPNMHDR)lparam;

       // Just before the parent item gets EXPANDED,
       // add the children.

       if (lpnmhdr-&gt;code == TVN_ITEMEXPANDING)
       {
           LPNM_TREEVIEW lpNMTreeView;
           TV_ITEM   tvi;

           lpNMTreeView = (LPNM_TREEVIEW)lparam;
           tvi = lpNMTreeView-&gt;itemNew;

           if ((tvi.lParam == PARENT_NODE) &amp;&amp;
               (lpNMTreeView-&gt;action == TVE_EXPAND))
           {

               // Fill in the TV_ITEM struct
               // and call TreeView_InsertItem() for each child item.

           }
        }

        return DefWindowProc(hwnd, uMessage, wparam, lparam);
   }

</PRE>When the user clicks the same parent item to collapse it, the application
removes all the child items from the tree by using TreeView_Expand
(,,TVE_COLLAPSE | TVE_COLLAPSERESET). The TVN_ITEMEXPANDED notification
message is a good place to do this:
<P>
<PRE>   // WM_NOTIFY message handler
   LRESULT MsgNotifyTreeView(HWND hwnd,
                             UINT uMessage,
                             WPARAM wparam,
                             LPARAM lparam)
   {

       LPNMHDR  lpnmhdr = (LPNMHDR)lparam;

       // Just before the parent item is COLLAPSED,
       // remove the children.

       if (lpnmhdr-&gt;code == TVN_ITEMEXPANDED)
       {

           LPNM_TREEVIEW lpNMTreeView;
           TV_ITEM       tvi2;


           lpNMTreeView = (LPNM_TREEVIEW)lparam;
           tvi2 = lpNMTreeView-&gt;itemNew;


           // Do a TVE_COLLAPSERESET on the parent to minimize memory use.

           if ((lpNMTreeView-&gt;action == TVE_COLLAPSE) &amp;&amp;
               (tvi2.lParam == PARENT_NODE))
           {
                TreeView_Expand (ghWndTreeView,
                                 tvi2.hItem,
                                 TVE_COLLAPSE | TVE_COLLAPSERESET);
           }
      }
      return DefWindowProc(hwnd, uMessage, wparam, lparam);
   }

</PRE>Applications that dynamically change the number of child items associated
with a particular treeview item may specify I_CHILDRENCALLBACK for the
cChildren member of its TV_ITEM structure when it is inserted into the
tree. Thereafter, when that treeview item needs to be redrawn, the
treeview sends a TVN_GETDISPINFO to its parent window to retrieve the
actual number of child items and display the +/- button to the left of
the treeview item, as appropriate.
<P>
An application that uses I_CHILDRENCALLBACK may process the TVN_GETDISPINFO
notification as follows:
<P>
<PRE>   // WM_NOTIFY message handler
   LRESULT MsgNotifyTreeView(HWND hwnd,
                             UINT uMessage,
                             WPARAM wparam,
                             LPARAM lparam)
   {

       LPNMHDR  lpnmhdr = (LPNMHDR)lparam;

       if (lpnmhdr-&gt;code == TVN_GETDISPINFO)
       {
          TV_DISPINFO FAR *lptvdi;

          lptvdi = (TV_DISPINFO FAR *)lparam;

       if ((lptvdi-&gt;item.mask &amp; TVIF_CHILDREN) &amp;&amp;
</PRE>(lptvdi-&gt;item.lParam == PARENT_NODE))
<PRE>          lptvdi-&gt;item.cChildren = 1;

       }

      return DefWindowProc(hwnd, uMessage, wparam, lparam);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 95 Common Control performance speed up<BR>
KBCategory: kbui kbcode<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

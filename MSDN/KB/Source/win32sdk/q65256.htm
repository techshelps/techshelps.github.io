

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Changing How Pop-Up Menus Respond to Mouse Actions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q65256 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1990/08/28">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The TrackPopupMenu function allows an application to receive input from a menu that is displayed anywhere within the application's client area. This article demonstrates how to change the menu's default behavior for mouse selections.  MORE INFORMAT...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAQ7,QDL9,QBWO,QBWN,QAF0,QALS,QAEV,QAGI,QBDT,QBWR,QAYC,QAJH,QAY5,QALG,QA28 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Changing How Pop-Up Menus Respond to Mouse Actions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q65256 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.0 and 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The TrackPopupMenu function allows an application to receive input
from a menu that is displayed anywhere within the application's client
area. This article demonstrates how to change the menu's default
behavior for mouse selections.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The default action for floating pop-up menus maintained with
TrackPopupMenu is as follows:

<OL><P><LI>If the menu is displayed in response to a keystroke, the pop-up
   menu is visible until the user selects a menu item or presses ESC.

<P><LI>If the menu is displayed in response to a WM_*BUTTONUP message, it
   acts as if it were displayed in response to a keystroke.
<P>
</OL>NOTE: In the context of this article, the * in the WM_*BUTTONUP and
WM_*BUTTONDOWN messages can be L (left mouse button), M (middle mouse
button), or R (right mouse button).
<P>
An application can change the behavior of a floating pop-up menu
displayed in response to a WM_*BUTTONDOWN message to keep it visible
after the mouse button is released. However, when an application uses
the techniques described below, it changes the menu's user interface.
Specifically, to change menu selections with the mouse, the user must
first release the mouse button and then press it again. Dragging the
mouse between items with the button down, without releasing the button
at least once, will not change the selection.
<P>
To cause a floating pop-up menu to remain visible after it is
displayed in response to a WM_*BUTTONDOWN message, follow these four
steps:

<OL><P><LI>In the application, allocate a 256 byte buffer to hold the key
   state.

<P><LI>Call the GetKeyboardState function with a far pointer to the buffer
   to retrieve the keyboard state.

<P><LI>Set the keyboard state for the VK_*BUTTON index in the keyboard
   state array to 0.

<P><LI>Call SetKeyboardState with a far pointer to the buffer to register
   the change with Windows.
<P>
</OL>The keyboard state array is 256 bytes. Each byte represents the state
of a particular virtual key. The value 0 indicates that the key is up,
and the value 1 indicates that the key is down. The array is indexed
by the VK_ values listed in Appendix A of the "Microsoft Windows
Software Development Kit Reference Volume 2" for version 3.0.
<P>
The code fragment below changes the state of the VK_LBUTTON to 0 (up)
during the processing of a WM_LBUTTONDOWN message. This causes
TrackPopupMenu to act as if the menu were displayed as the result of a
WM_LBUTTONUP message or of a keystroke. Therefore, the menu remains
visible even after the mouse button is released and the WM_LBUTTONUP
message is received. Items on this menu can be selected with the mouse
or the keyboard.
<P>
<PRE>   switch (iMessage)
      {
   case WM_LBUTTONDOWN:
      static BYTE rgbKeyState[256];

      GetKeyboardState(rgbKeyState);
      rgbKeyState[VK_LBUTTON] = 0;      // 0==UP, 1==DOWN
      SetKeyboardState(rgbKeyState);

      // Create the pop-up menu and call TrackPopupMenu.
      break;
      }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrMen<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

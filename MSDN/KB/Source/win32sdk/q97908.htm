

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging DLLs Using WinDbg </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97908 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/04/25">
<META NAME="Keywords" CONTENT="kbtool">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes the process of debugging dynamic-link libraries (DLLs) under WinDbg. As a further example, debugging File Manager extensions under Windows NT is discussed in the  More Information  section in this article.  MORE INFORMATION  ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBXS,QBWP,QBVV,QAJH,QBWS,QAIJ,QAHE,QBBI,QAY2,QANE,QAKR,QAGI,QDNN,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Debugging DLLs Using WinDbg</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97908 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK), versions 3.1, 3.5,
   3.51, and 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes the process of debugging dynamic-link libraries
(DLLs) under WinDbg. As a further example, debugging File Manager
extensions under Windows NT is discussed in the "More Information" section
in this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The application and the DLL must be built with certain compiler and linker
switches so that debugging information is included. These switches can be
found in the $(cdebug) and $(ldebug) macros, respectively, which are
defined in NTWIN32.MAK.
<P>
NOTE: It is important to disable optimization with -Od or locals will not
be available in the locals window and line numbers may not match the
source.
<P>
The application is loaded into WinDbg either by specifying "windbg
&lt;filename&gt;" on the command prompt or by starting WinDbg from the program
group and specifying &lt;filename&gt; in the Program Open dialog box (from the
Program menu, choose Open). Note that &lt;filename&gt; is the name of the
application, not the DLL. It is not necessary to specify the name of the
DLL to be debugged.
<P>
The DLL is loaded either when execution of the application begins or
dynamically through a call to LoadLibrary(). In the first case, simply
press F8 to begin execution. All DLLs and symbolic information are loaded.
To trace through the DLL code, breakpoints can be set in the DLL using a
variety of methods:

<UL><LI>From the Debug menu, choose Breakpoints. The dialog box is Program Open.
<P>
   -or-

<LI>Open the source file and use F9 or the "hand" button on the toolbar.
<P>
   -or-

<LI>Go to the Command window and type:
<P>
<P><PRE>       bp[#] &lt;Options&gt;
</PRE><P>
   &lt;Options&gt;:
<P>
<PRE>      addr          break at address
      @line         break at line

</PRE></UL>In the case that the DLL is dynamically loaded, pressing F8 causes all
other DLLs and symbolic information to load. The same methods described
above can be used to set breakpoints; however, the user will get a dialog
box indicating that the breakpoint was not instantiated. After the call to
LoadLibrary() has been executed, all breakpoints are instantiated (it is
possible to note the color change if the DLL source window is open) and
will behave as expected.
<P>
To set a breakpoint in a DLL that is not loaded, specify the context when
setting the breakpoint. The syntax for a context specifier is:
<P>
<PRE>   {proc, module, exe}addr

   -or-

   {proc, module, exe}@line

</PRE>Example: {func, module.c, app.exe}0x50987. The first two parameters are
optional, so {,,app.exe}0x50987 or {,,app.exe}func could be used instead.
<P>
For example, assume that we are trying to debug a File Manager extension
under Windows NT that has been built with full debugging information. The
procedure to debug the extension is as follows:

<OL><P><LI>Open a Command window.
</OL>2. Start WinDbg WINFILE.
3. Set a breakpoint on FmExtensionProc().
4. At the Command window, type "g" and press ENTER. The debugger will
<PRE>   continue executing the program form the point where it stopped
   (which could be from the beginning, at the breakpoint, and so on).

</PRE></OL>WinDbg will start WINFILE and when FmExtensionProc() is executed, WinDbg
will break into the WINFILE process.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95<BR>
KBCategory: kbtool<BR>
KBSubcategory: TlsWindbg<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

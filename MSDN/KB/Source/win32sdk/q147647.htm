

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: GetTextExtentPoint Fails in App Based on Windows/Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147647">
<META NAME="KBModify" CONTENT="1996/03/02">
<META NAME="KBCreate" CONTENT="1996/02/28">
<META NAME="Keywords" CONTENT="kbprg kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  GetTextExtentPoint fails when all of the following conditions are present:   - You have either a 16-bit application running under Windows 3.1 or a    32-bit application running under Win32s.   - The application uses GetTextExtentPoint().   - The st...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QAKP,QAB4,QAJH,QBWS,QBWP,QAAP,QAVX,QATX,QAH4,QAVW,QAGQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: GetTextExtentPoint Fails in App Based on Windows/Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147647</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) version 3.1
<LI>Microsoft Win32 Application Programming Interface included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.30c
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
GetTextExtentPoint fails when all of the following conditions are present:

<UL><LI>You have either a 16-bit application running under Windows 3.1 or a
   32-bit application running under Win32s.

<LI>The application uses GetTextExtentPoint().

<LI>The string buffer parameter has been allocated with GlobalAlloc() or has
   been reallocated with GlobalReAlloc().

<LI>The string size is an exact multiple of 32 bytes.
<P>
</UL>Under Win32s, GetLastError returns an error 87 (Invalid Parameter). The
debug version of Windows 3.1 displays a Fatal Exit code 0x700A with this
error message:
<P>
<PRE>   GetTextExtentPoint - Invalid string

</PRE><h2>CAUSE</h2>
 
<P>
As stated earlier, this problem occurs only when the allocated size of the
string is an exact multiple of 32 bytes.
<P>
This is a bug in Microsoft Windows 3.1 that causes ramifications in a
16-bit application running under Windows 3.1. A 16-bit application running
under Windows NT 3.51 will have the same problem, but it will run without
any problems under Windows 95.
<P>
This bug is not specific to Win32s. However, because Win32s runs under the
Windows environment, a 32-bit application running under Windows 3.1 by way
of Win32s will also exhibit this problem. However, a 32-bit application
running under Windows NT or Windows 95 will not exhibit this problem.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Note that GetTextExtentPoint() will succeed if you pass a string constant
that has a size that is a multiple of 32. For example, the following will
work:
<P>
<PRE>   GetTextExtentPoint(hDC, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 32, &amp;size);

</PRE><h3>Sample Code to Reproduce Problem</h3>
 
<P>
Note that error checking is not implemented in the following code.
<P>
<PRE> HGLOBAL hMem;
 HDC hDC;
 SIZE size;
 int blksize, i;
 char szMsg[256];
 LPSTR lpBuf;

  blksize=32;
  #ifdef WIN32
    SetLastError(0);
  #endif

  hDC = GetDC(hWnd);
  hMem = GlobalAlloc(GHND, blksize);
  lpBuf = (LPSTR) GlobalLock(hMem);
  for (i=0; i&lt;blksize; i++)
    lpBuf[i] = 't';

  if (!GetTextExtentPoint(hDC, lpBuf, blksize, &amp;size))
  {
     #ifdef WIN32
       wsprintf(szMsg, "GetTextExtentPoint Error %d\r\n", GetLastError());
     #else
       wsprintf(szMsg, "GetTextExtentPoint Error\r\n);
     #endif
     MessageBox(NULL, szMsg, "Test", MB_OK);
  }
  GlobalUnlock(hMem);

  #ifdef WIN32
    SetLastError(0);
  #endif

  hMem = GlobalReAlloc(hMem, 2*blksize, GMEM_ZEROINIT);
  lpBuf = (LPSTR) GlobalLock(hMem);
  for (i=0; i&lt;blksize; i++)
    lpBuf[blksize+i] = 'T';

  if (!GetTextExtentPoint(hDC, lpBuf, 2*blksize, &amp;size))
  {
     #ifdef WIN32
       wsprintf(szMsg, "GetTextExtentPoint Error %d\r\n", GetLastError());
     #else
       wsprintf(szMsg, "GetTextExtentPoint Error \r\n");
     #endif
     MessageBox(NULL, szMsg, "Test", MB_OK);
  }

  GlobalUnlock(hMem);
  if (hMem) GlobalFree(hMem);
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: win32s gdi 1.30c 4.00 3.10 3.51<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: w32s kbgdi<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

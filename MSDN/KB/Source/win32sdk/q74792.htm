

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making a List Box Item Unavailable for Selection </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74792 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1991/07/30">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  In the Microsoft Windows graphical environment, an application can use a list box to enumerate options. However, there are circumstances in which one or more options may not be appropriate. The application can change the appearance of items in a li...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QADO,QAOD,QDL9,QBWO,QBWN,QATX,QAG9,QAGX,QAKR,QBXS,QA4P,QBVV,QA28,QATJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Making a List Box Item Unavailable for Selection</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74792 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Microsoft Windows graphical environment, an application can use
a list box to enumerate options. However, there are circumstances in
which one or more options may not be appropriate. The application can
change the appearance of items in a list box and prevent the user from
selecting one of these items by using the techniques discussed below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Changing the Appearance of a List Box Item</h3>
 
<P>
To dim (gray) a particular item in a list box, use an owner-draw list
box as follows:

<OL><P><LI>Create a list box that has the LBS_OWNERDRAW and LBS_HASSTRINGS
   styles.

<P><LI>Use the following code to process the WM_MEASUREITEM message:
<P>
   case WM_MEASUREITEM:
<P><PRE>      ((MEASUREITEMSTRUCT FAR *)(lParam))-&gt;itemHeight = wItemHeight;
      break;
</PRE><P>
   wItemHeight is the height of a character in the list box font.

<P><LI>Use the following code to process the WM_DRAWITEM message:
<P>
<PRE>   #define PHDC (pDIS-&gt;hDC)
   #define PRC  (pDIS-&gt;rcItem)

   DRAWITEMSTRUCT FAR *pDIS;

      ...

   case WM_DRAWITEM:
      pDIS = (DRAWITEMSTRUCT FAR *)lParam;

      /* Draw the focus rectangle for an empty list box or an
         empty combo box to indicate that the control has the
         focus
       */
      if ((int)(pDIS-&gt;itemID) &lt; 0)
      {
         switch(pDIS-&gt;CtlType)
         {
            case ODT_LISTBOX:
               if ((pDIS-&gt;itemAction) &amp; (ODA_FOCUS))
                  DrawFocusRect (PHDC, &amp;PRC);
               break;

            case ODT_COMBOBOX:
               if ((pDIS-&gt;itemState) &amp; (ODS_FOCUS))
                  DrawFocusRect (PHDC, &amp;PRC);
               break;
         }
         return TRUE;
      }

      /* Get the string */
      switch(pDIS-&gt;CtlType)
      {
         case ODT_LISTBOX:
            SendMessage ( pDIS-&gt;hwndItem,
                          LB_GETTEXT,
                          pDIS-&gt;itemID,
                          (LPARAM)(LPSTR)szBuf);
            break;

         case ODT_COMBOBOX:
            SendMessage ( pDIS-&gt;hwndItem,
                          CB_GETLBTEXT,
                          pDIS-&gt;itemID,
                          (LPARAM)(LPSTR)szBuf);
            break;
      }

      if (*szBuf == '!')   // This string is disabled
      {
         hbrGray = CreateSolidBrush (GetSysColor
                                       (COLOR_GRAYTEXT));
         GrayString ( PHDC,
                      hbrGray,
                      NULL,
                      (LPARAM)(LPSTR)(szBuf + 1),
                      0,
                      PRC.left,
                      PRC.top,
                      0,
                      0);
         DeleteObject (hbrGray);

         /* SPECIAL CASE - Need to draw the focus rectangle if
            there is no current selection in the list box, the
            1st item in the list box is disabled, and the 1st
            item has gained or lost the focus
          */
         if (pDIS-&gt;CtlType == ODT_LISTBOX)
         {
            if (SendMessage ( pDIS-&gt;hwndItem,
                              LB_GETCURSEL,
                              0,
                              0L) == LB_ERR)
               if ( (pDIS-&gt;itemID == 0) &amp;&amp;
                    ((pDIS-&gt;itemAction) &amp; (ODA_FOCUS)))
                  DrawFocusRect (PHDC, &amp;PRC);
         }
      }

      else  // This string is enabled
      {
         if ((pDIS-&gt;itemState) &amp; (ODS_SELECTED))
         {
            /* Set background and text colors for selected
               item */
            crBack = GetSysColor (COLOR_HIGHLIGHT);
            crText = GetSysColor (COLOR_HIGHLIGHTTEXT);
         }
         else
         {
            /* Set background and text colors for unselected
               item */
            crBack = GetSysColor (COLOR_WINDOW);
            crText = GetSysColor (COLOR_WINDOWTEXT);
         }

         // Fill item rectangle with background color
         hbrBack = CreateSolidBrush (crBack);
         FillRect (PHDC, &amp;PRC, hbrBack);
         DeleteObject (hbrBack);

         // Set current background and text colors
         SetBkColor (PHDC, crBack);
         SetTextColor (PHDC, crText);

         // TextOut uses current background and text colors
         TextOut ( PHDC,
                   PRC.left,
                   PRC.top,
                   szBuf,
                   lstrlen(szBuf));

         /* If enabled item has the input focus, call
            DrawFocusRect to set or clear the focus
            rectangle */
         if ((pDIS-&gt;itemState) &amp; (ODS_FOCUS))
            DrawFocusRect (PHDC, &amp;PRC);
      }

      return TRUE;

</PRE></OL>Strings that start with "!" are displayed dimmed. The exclamation mark
character is not displayed.
<P>
<P><h3>Preventing Selection</h3>
 
<P>
To prevent a dimmed string from being selected, create the list box
with the LBS_NOTIFY style. Then use the following code in the list
box's parent window procedure to process the LBN_SELCHANGE
notification:
<P>
<PRE>  case WM_COMMAND:

    switch (wParam)
      {

       ...

      case IDD_LISTBOX:
        if (LBN_SELCHANGE == HIWORD(lParam))
          {
          idx = (int)SendDlgItemMessage(hDlg, wParam,
                        LB_GETCURSEL, 0, 0L);
          SendDlgItemMessage(hDlg, wParam, LB_GETTEXT, idx,
                        (LONG)(LPSTR)szBuf);
          if ('!' == *szBuf)
            {
            // Calculate an alternate index here
            // (not shown in this example).

            // Then set the index.
            SendDlgItemMessage(hDlg, wParam, LB_SETCURSEL, idx, 0L);
            }
          }
        break;

       ...

      }
   break;

</PRE>When the user attempts to select a dimmed item, the alternate index
calculation moves the selection to an available item.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95 listbox<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Print a Document </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139652">
<META NAME="KBModify" CONTENT="1998/03/04">
<META NAME="KBCreate" CONTENT="1995/11/14">
<META NAME="Keywords" CONTENT="GdiPrn kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes each of the seven steps required to print a document to a printer in Windows programming. Note that while Windows CE version 2.0 and later do provide printing support, you need to consider the following caveats:   - Windows C...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOX,QAY5,QAUD,QACT,QAB5,QAB9,QBV8,QAAP,QAB4,QDL9,QBWO,QBWN,QBWQ,QAA1,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Print a Document</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139652</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:
<P>
- Microsoft Win32 Application Programming Interface (API)
<PRE>  included with:
   - Microsoft Windows NT versions 3.5, 3.51
   - Microsoft Windows 95
   - Windows CE version 2.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes each of the seven steps required to print a document
to a printer in Windows programming. Note that while Windows CE version 2.0
and later do provide printing support, you need to consider the following
caveats:

<UL><LI>Windows CE provides no support for spooling or printing multiple copies.

<LI>Some PRINTDLG structure members have different names in Windows CE.

<LI>You need to use the PD_RETURNDEFAULTDC flag instead of PD_RETURNDEFAULT
   PD_RETURNDC.
<P>
</UL><h2>MORE INFORMATION</h2>
 

<OL><P><LI>Obtain a Printer Device Context. To draw graphics or text on the printer
   device, an application needs to obtain a printer device context. The
   PrintDlg() function can be used to obtain the printer DC. PrintDlg() can
   display a Print Dialog box to allow the user to select a printer, or it
   can return information about the default printer. In addition to other
   information about the printer, PrintDlg() will return a printer device
   context in the PRINTDLG structure when PD_RETURNDC is specified as one
   of the flags. This device context matches the selections the user made
   in the dialog box. The GetPrinterDC function in the sample code at the
   end of this article illustrates the use of PrintDlg() to obtain a
   printer DC.
<P>
   If you want to create a printer DC without displaying the Print dialog
   box, then you need to specify PD_RETURNDEFAULT | PD_RETURNDC flags as
   shown in the sample code in this article. The PD_RETURNDEFAULT flag is
   used to retrieve information about the default printer without
   displaying the Print dialog box. PD_RETURNDC flag is used to direct
   PrintDlg to automatically create a device or information context for the
   printer.

<P><LI>Set Up the Abort Function. An application must use the SetAbortProc
   function to set the application-defined abort function that allows a
   print job to be canceled during spooling. In the AbortProc function, the
   abort procedure can check the error code to see if an error occurred
   while printing. The error code is zero if no error has occurred.

<P><LI>Use StartDoc() to Start the Print Job. The StartDoc function starts a
   print job. A DOCINFO structure is initialized and passed to the StartDoc
   function. It is a good idea to initialize the DOCINFO structure by
   filling it with zeros. For more information, please see the following
   article in the Microsoft Knowledge Base:
<P>
<P><PRE>      ARTICLE-ID: <B><A HREF="../WIN32SDK/Q135119.htm">Q135119</A></B>
<PRE></PRE>      TITLE     : PRB: StartDoc() Fails with Non-Zeroed DOCINFO

   The InitDocStruct function illustrated later in this article performs
   this initialization.

</PRE><P><LI>Call StartPage(). The StartPage function prepares the printer driver to
   accept data. For example:
<P>
<P><PRE>      StartPage( hDC );
</PRE>
<P><LI>Draw on the Device Context. Draw graphics or text on the printer device.
   For example, DrawStuff() illustrates how to draw text on the printer DC.

<P><LI>Call EndPage(). The EndPage function informs the device that the
   application has finished writing to a page. This function is typically
   used to direct the device driver to advance to a new page. To print
   multiple pages, Steps 4, 5, and 6 must be used for every page of the
   document as in this example:
<P>
<P><PRE>      for( i = START_PAGE; i &lt;= END_PAGE; i++)
<PRE></PRE>        {
          StartPage();
          DrawStuff();
          EndPage();
        }

</PRE><P><LI>Call EndDoc(). The EndDoc function ends a print job. For additional
   information on this topic, please refer to the Win32 SDK documentation
   Overviews section.
<P>
</OL><h3>Sample Code</h3>
 
<P>
The following PrintStuff() function illustrates the printing process:
<P>
<PRE>   /*==============================================*/
   /* Sample code :  Typical printing process      */
   /* =============================================*/
   
   void PrintStuff( HWND hWndParent )
   {
       HDC        hDC;
       DOCINFO    di;
   
       // Need a printer DC to print to.
       hDC = GetPrinterDC();
   
       // Did you get a good DC?
       if( !hdc)
       {
           MessageBox(NULL, "Error creating DC", "Error",
                                       MB_APPLMODAL | MB_OK );
           return;
       }
   
       // You always have to use an AbortProc().
       if( SetAbortProc( hDC, AbortProc ) == SP_ERROR )
       {
           MessageBox( NULL, "Error setting up AbortProc",
                                       "Error", MB_APPLMODAL | MB_OK);
           return;
       }
   
       // Init the DOCINFO and start the document.
       InitDocStruct( &amp;di, "MyDoc");
       StartDoc( hDC, &amp;di );
   
       // Print one page.
       StartPage( hDC );
       DrawStuff( hDC );
       EndPage( hDC );
   
       // Indicate end of document.
       EndDoc( hDC );
   
       // Clean up
       DeleteDC( hDC );
   }
   
   /*===============================*/
   /* Obtain printer device context */
   /* ==============================*/
   HDC GetPrinterDC(void)
   {
       PRINTDLG pdlg;
   
       // Initialize the PRINTDLG structure.
       memset( &amp;pdlg, 0, sizeof( PRINTDLG ) );
       pdlg.lStructSize = sizeof( PRINTDLG );
       // Set the flag to return printer DC.
       pdlg.Flags = PD_RETURNDEFAULT | PD_RETURNDC;
   
       // Invoke the printer dialog box.
       PrintDlg( &amp;pdlg );
       // hDC member of the PRINTDLG structure contains
       // the printer DC.
       return pdlg.hDC;
   }
   
   /*===============================*/
   /* The Abort Procudure           */
   /* ==============================*/
   BOOL CALLBACK AbortProc( HDC hDC, int Error )
   {
       MSG   msg;
       while( PeekMessage( &amp;msg, NULL, 0, 0, PM_REMOVE ) )
       {
           TranslateMessage( &amp;msg );
           DispatchMessage( &amp;msg );
       }
       return TRUE;
   }
   
   /*===============================*/
   /* Initialize DOCINFO structure  */
   /* ==============================*/
   void InitDocStruct( DOCINFO* di, char* docname)
   {
       // Always zero it before using it.
       memset( di, 0, sizeof( DOCINFO ) );
       // Fill in the required members.
       di-&gt;cbSize = sizeof( DOCINFO );
       di-&gt;lpszDocName = docname;
   }
   
   /*===============================*/
   /* Drawing on the DC             */
   /* ==============================*/
   void DrawStuff( HDC hdc)
   {
       // This is the function that does draws on a given DC.
       // You are printing text here.
       TextOut(hdc, 0,0, "Test Printing", lstrlen( "Test Printing" ) );
   }
</PRE></OL> 
<PRE>Keywords          : GdiPrn kbcode
Version           : WINNT:3.5,3.51;WIN95
Platform          : Win95 winnt
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: How to Create &amp; Play Enhanced Metafiles in Win32 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q145999">
<META NAME="KBModify" CONTENT="1997/10/29">
<META NAME="KBCreate" CONTENT="1996/02/12">
<META NAME="Keywords" CONTENT="GdiMeta kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The Win32 SDK introduces a new type of metafile known as an enhanced metafile. These new metafiles address developer's need for device independence without requiring a separate code path, which was a requirement of the older style metafiles.  This ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH2,QAB5,QAK4,QAPF,QAPG,QAGI,QAY2,QAI4,QA5V,QAMV,QAH6,QAJG,QANX,QA5A,QAB3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: How to Create &amp; Play Enhanced Metafiles in Win32</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q145999</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK), version 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Win32 SDK introduces a new type of metafile known as an enhanced
metafile. These new metafiles address developer's need for device
independence without requiring a separate code path, which was a
requirement of the older style metafiles.
<P>
This article and the accompanying sample (ENMETA.EXE) show you how to
properly create and play enhanced metafiles scaled or to original size. The
sample also supports the clipboard and reads and writes Aldus placeable
metafiles as well as regular 16-bit Windows metafiles.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Enmeta.exe">Enmeta.exe</A> <I>(size: 90736 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h3>Creating the Enhanced Metafile</h3>
 
<P>
An enhanced metafile is created with a call to CreateEnhMetaFile().
CreateEnhMetaFile() is declared as follows:
<P>
HDC CreateEnhMetaFile( HDC hdcRef, LPCTSTR lpFilename,
<PRE>                       CONST RECT *lpRect, LPCTSTR lpDescription );

</PRE>Following are the parameters to this call:
<P>
hdcRef is a reference DC and provides some crucial reference information
for the construction of the metafile. The resolutions in both pixels and
millimeters are taken from this device, and all font metrics are based on
this DC. For the best possible reproduction on all output devices, it is a
good idea to choose a high resolution device for the reference device.
Otherwise, some grainyness may appear if the output device is of
considerably higher resolution than the reference device.
<P>
lpFileName is the name of the file that will contain the metafile. If this
parameter is NULL, the metafile is a memory metafile and is not stored on
disk.
<P>
lpRect is a rectangle that specifies the dimensions in 0.01 mm units of the
virtual metafile device. This rectangle is stored in the metafile and can
be retrieved at play time to determine the desired real size of the output.
Although no clipping is performed for this rectangle, some metafile players
may presume that the image in the metafile fits in the rectangle.
<P>
lpDescription simply provides a way to store the name of the application
that created the metafile as well as a description of the contents in the
form of two NULL-terminated strings, terminated with an additional NULL as
in this example:
<P>
<PRE>   App\0Description\0\0

</PRE>App is the name of the application that created the metafile and
Description is a description of the image.
<P>
<P><h3>The Metafile Device</h3>
 
<P>
The metafile device has a real size defined by the lpRect parameter in 0.01
mm units. The number of device units on the metafile can be determined by
using the pixel/mm ratio of the reference DC and the metafile device size
given in the lpRect parameter. For example:
<P>
MetaPixelsX = MetaWidthMM * MetaPixels / (MetaMM * 100);
<P>
where MetaPixelsX = number of pixels on the X axis
<PRE>      MetaWidthMM = metafile width in 0.01mm units
      MetaPixels  = width in pixels of the reference device
      MetaMM      = width in millimeters of the reference device

</PRE>A similar calculation can be used to determine the number of pixels in the
Y direction of the metafile device.
<P>
Note that although the metafile device has a real size, it does not clip
output to that region. It is entirely possible to record drawing commands
that have output outside of the metafile device surface.
<P>
<P><h3>Playing the Enhanced Metafile</h3>
 
<P>
The metafile device provides only half of the mapping from metafile space
to target device space. The other half is provided by the RECT passed to
the PlayEnhMetaFile() call. It specifies a play rectangle in which to play
the metafile and is specified in logical coordinates on the target device
context. The metafile device rectangle is mapped to this play rectangle.
This provides the scalability of enhanced metafiles; adjusting the play
rectangle adjusts the size of the output. No clipping is performed on the
play rectangle.
<P>
So, neither the metafile device nor the play rectangle perform clipping.
This means that if any drawing commands were recorded to occur outside the
metafile device, they will be shown outside the play rectangle when the
metafile is played. This mapping is illustrated in the Sample1.emf sample
enhanced metafile.
<P>
If the goal is to play the metafile at its true size, the size of the
original metafile device can be determined by a call to
GetEnhMetaFileHeader(). This call fills in an ENHMETAHEADER structure, of
which the rclFrame member specifies the metafile device rectangle in 0.01
mm units. That rectangle can be translated into logical units for the
target DC and used as the lpRect parameter for PlayEnhMetaFile(). The
PlayEnhMetaFileAtOriginalSize() function in the sample demonstrates this.
<P>
<P><h3>Mapping Modes</h3>
 
<P>
During the recording of the metafile, the mapping mode, window extents and
origin, and viewport extents and origin combine to map logical units to
device units on the metafile device. As with a normal DC, the window
extents and origin define the logical space, while the viewport extents and
origin are relative to the metafile device units described above.
<P>
For example: The following code creates an enhanced metafile that is
dwInchesX wide by dwInchesY tall with dwDPI logical dots per inch (DPI):
<P>
HDC MyCreateEnhMetaFile( LPTSTR szFileName,  // Metafile filename
<PRE>                         DWORD dwInchesX,    // Width in inches
                         DWORD dwInchesY,    // Height in inches
                         DWORD dwDPI )       // DPI (logical units)
{
    RECT   Rect = { 0, 0, 0, 0 };
    TCHAR   szDesc[] = "AppName\0Image Description\0\0";
    HDC      hMetaDC, hScreenDC;
    float   PixelsX, PixelsY, MMX, MMY;

    // dwInchesX x dwInchesY in .01mm units
    SetRect( &amp;Rect, 0, 0, dwInchesX*2540, dwInchesY*2540 );

    // Get a Reference DC
    hScreenDC = GetDC( NULL );

    // Get the physical characteristics of the reference DC
    PixelsX = (float)GetDeviceCaps( hScreenDC, HORZRES );
    PixelsY = (float)GetDeviceCaps( hScreenDC, VERTRES );
    MMX = (float)GetDeviceCaps( hScreenDC, HORZSIZE );
    MMY = (float)GetDeviceCaps( hScreenDC, VERTSIZE );

    // Create the Metafile
    hMetaDC = CreateEnhMetaFile(hScreenDC, szFileName, &amp;Rect, szDesc);
    // Release the reference DC
    ReleaseDC( NULL, hScreenDC );
    // Did you get a good metafile?
    if( hMetaDC == NULL )
        return NULL;

    // Anisotropic mapping mode
    SetMapMode( hMetaDC, MM_ANISOTROPIC );
    // Set the Windows extent
    SetWindowExtEx( hMetaDC, dwInchesX*dwDPI, dwInchesY*dwDPI, NULL );


    // Set the viewport extent to reflect
    // dwInchesX" x dwInchesY" in device units
    SetViewportExtEx( hMetaDC,
                      (int)((float)dwInchesX*25.4f*PixelsX/MMX),
                      (int)((float)dwInchesY*25.4f*PixelsY/MMY),
                      NULL );
    return hMetaDC;
</PRE>}
<P>
Note that clipping is not performed by the window extents, viewport
extents, or the metafile device. It is possible to draw beyond the window
extents, which will map beyond the viewport extents. Those numbers provide
only a ratio of logical units to metafile device units. Further, it is
possible to have viewport extents that extend beyond the metafile surface.
The drawing is not clipped to the metafile surface. This mapping is
illustrated in the Sample2.emf sample enhanced metafile.
<P>
<P><h3>Palettes in Enhanced Metafiles</h3>
 
<P>
The SelectPalette() API can be used to record a palette into an enhanced
metafile. That palette can then be retrieved at play-time via the
GetEnhMetaFilePaletteEntries() API. This allows the player to faithfully
reproduce palletized images and properly respond to palette messages. The
GetEnhancedMetafilePalette() function in the sample demonstrates extracting
a palette from an enhanced metafile.
<P>
Note that if multiple palettes were used in recording the metafile, the
palette entries retrieved by GetEnhMetaFilePaletteEntries() will include
all the entries from all the palettes. If this includes more entries than
the current display can reproduce, it is the player's responsibility to
choose a subset of those colors from which to create the actual palette to
be used during playback.
<P>
 
<PRE>Keywords          : GdiMeta kbcode
Version           : WIN3X:4.0;WINNT:3.51;
Platform          : NT WINDOWS
Issue type        : kbfile
Solution Type     : kbsample</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

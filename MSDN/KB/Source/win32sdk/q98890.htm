

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Debugging a service </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98890 ">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1993/05/18">
<META NAME="Keywords" CONTENT="BseDebug BseSync kbtool">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The steps in this article illustrate how to debug a service under Windows NT using WinDbg and the interactive debugger included with Microsoft Visual C++ 4.x. WinDbg ships with the Win32 Software Development Kit (SDK). For illustration purposes, th...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACK,QANE,QAIJ,QBWP,QBWS,QASR,QAPF,QBJZ,QBXT,QA5V,QAX3,QARL,QAIB,QAB4,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Debugging a service</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98890 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.51, 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The steps in this article illustrate how to debug a service under Windows
NT using WinDbg and the interactive debugger included with Microsoft Visual
C++ 4.x. WinDbg ships with the Win32 Software Development Kit (SDK). For
illustration purposes, these procedures use the SERVICE sample, which is
built with debugging information by default. This sample is located in:
<P>
<PRE>   Mstools\Samples\Win32\Winnt\Service

</PRE>There are two techniques for debugging a service. The first technique
involves adding a DebugBreak() statement to the service's code and letting
the Just-in-time(JIT) debugging feature of Windows NT spawn the debugger
when the service executes the DebugBreak(). The second technique involves
attaching the debugger to the service while it is running.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Preparation</h3>
 

<OL><P><LI>Build the sample.

<P><LI>Install the Simple service with the following command:
<P>
<P><PRE>      simple -install
</PRE><P>
   You receive a message indicating whether you were successful.

<P><LI>Use the Control Panel's Services application to start the Simple
   service or you can also use:
<P>
<P><PRE>      sc start simpleservice
</PRE><P>
   Sc.exe is located in Mstools\Bin.

<P><LI>This step is needed for Technique 2: Use PView to get the process ID
   (PID) for the Simple service. For example, if PView shows the process as
   simple(0xD5), the PID is 0xD5. If you're using Microsoft Visual C++ 4.X,
   convert the PID from hexadecimal to decimal. For example, 0xD5 is 213 in
   decimal.
<P>
</OL><h3>Technique 1</h3>
 
<P>
To specify Microsoft Visual C++ 4.X as your Just-in-time debugger:

<OL><P><LI>On the tools menu, click options.

<P><LI>Click the debug tag, and select the Just-in-time debugging option.
<P>
</OL>To specify Windbg as your Just-in-time debugger, please refer to the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q103861.htm">Q103861</A></B>
   TITLE     : Choosing the Debugger That the System Will Spawn

</PRE></OL>If the service is running in any account other than the LocalSystem, the
DebugBreak() technique will not work correctly. If the service account
belongs to the administrator's group, the following error message appears
when you are running Microsoft Visual C++ 4.X on Windows NT 4.0:
<P>
<PRE>   Runtime error!

   Program: &lt;MSDevDir\bin&gt;\MSDEV.exe

   abnormal program termination

</PRE>This error does not occur on Windows NT 3.51.
<P>
If the spawned debugger is Windbg, the debugger will appear to have
correctly attached to the service but you will notice a painting problem
with the application.
<P>
If the service account does not belong to the administrator's group, the
following error message appears on both Microsoft Visual C++ 4.X and
Windbg:
<P>
<PRE>   Initialization of the dynamic link library
   &lt;system&gt;\system32\USER32.dll failed.  The process is
   terminating abnormally.

</PRE>These errors occur because the service account does not have the proper
security access to the interactive windowstation and desktop. The easiest
solution to the problems is to apply a NULL dacl to the interactive
windowstation and desktop, "winsta0\\default" such that you can debug a
service that is running in an account other than the LocalSystem.
<P>
<P><h3>Sample Code</h3>
 
<P>
The following sample code applies a NULL dacl to the interactive
windowstation and desktop objects. This application should be executed
before debugging the service. Once the debugging session has been
completed, the DACLs for the interactive windowstation and desktop objects
can be reset by logging off and then logging on again.
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;

   void main(void)
   {
        HDESK                hdesk   = NULL;
        HWINSTA              hwinsta = NULL;
        SECURITY_DESCRIPTOR  sd;
        SECURITY_INFORMATION si      = DACL_SECURITY_INFORMATION;

        __try
             {
             //
             // Obtain a handle to the interactive windowstation.
             //
             hwinsta = OpenWindowStation("winsta0", FALSE, WRITE_DAC);
             if (hwinsta == NULL)
                  __leave;

             //
             // Obtain a handle to the interactive desktop.
             //
             hdesk = OpenDesktop("default", 0, FALSE,
                   WRITE_DAC | DESKTOP_WRITEOBJECTS | DESKTOP_READOBJECTS);
             if (hdesk == NULL)
                  __leave;

             //
             // Create a null dacl.
             //
             if (!InitializeSecurityDescriptor(&amp;sd,
                  SECURITY_DESCRIPTOR_REVISION))
                  __leave;

             if (!SetSecurityDescriptorDacl(&amp;sd, TRUE, (PACL) NULL, FALSE))
                  __leave;

             //
             // Apply NULL dacl to the windowstation and desktop objects.
             //
             if (!SetUserObjectSecurity(hwinsta, &amp;si, &amp;sd))
                  __leave;

             if (!SetUserObjectSecurity(hdesk, &amp;si, &amp;sd))
                  __leave;
             }
        __finally
             {
             if (hdesk != NULL)
                  CloseDesktop(hdesk);

             if (hwinsta != NULL)
                  CloseWindowStation(hwinsta);
             }
   }

</PRE>If you are using Windbg as your Just-in-time debugger, you need to either
include the path of the service's debug symbols in the system's environment
variables or make a call to SetCurrentDirectory() in the service so that
the debugger is able to find the debug symbols for the service.

<OL><P><LI>Follow steps 1-5 in the "Preparation" section of this article. Include
   a DebugBreak() statement in the service's code that is before line 223
   in Simple.c.

<P><LI>Once the service has been started, a system dialog box appears.
   Choose the cancel button to debug the service. The system does now
   spawn the debugger.

<P><LI>Press the F5 key (a go command) to debug the service.

<P><LI>Follow steps 4-8 in the "Debugging a Service with WinDbg" or steps 3-6
   in the "Debugging a Service with MSVC++". Note that if you are using
   WinDbg step 4 will break on line 245 instead of line 256.
<P>
</OL><h3>Technique 2</h3>
 
<P>
Debugging a Service with WinDbg:

<OL><P><LI>Follow steps 1-5 in the "Preparation" section of this article.

<P><LI>At a command prompt, go to the directory containing the sample
   executable and type:
<P>
<P><PRE>      start WinDbg
</PRE><P>
   to start WinDbg in its own command shell.

<P><LI>Open a command window in WinDbg and type:
<P>
<P><PRE>      .attach &lt;PID&gt;
</PRE>
<P><LI>In WinDbg, on the File menu, click Open, and open the source file
   (Simple.c).

<P><LI>Set breakpoints at lines 223, 245, 256, and 271.

<P><LI>Type "g" (a go command) in the WinDbg command window or press the F5 key
   to restart after the thread that WinDbg uses to do the .attach
   terminates.

<P><LI>At the command prompt, start the client by typing:
<P>
<P><PRE>      client [-pipe &lt;pipename&gt;] [-string &lt;string&gt;]
</PRE><P>
   For example: client -pipe \\.\pipe\simple -string "franki"

<P><LI>Press the F5 key (a go command) to debug the service. The breakpoint hit
   will be on line 256. Press the F5 key again to go to the next
   breakpoint. Keep pressing F5 until line 223 waits again for a client to
   connect. Try connecting another client and repeat the same steps.
<P>
</OL>Debugging a Service with MSVC++:

<OL><P><LI>Follow steps 1-5 in the "Preparation" section of this article.

<P><LI>At a command prompt, go to the directory containing the sample and type:
<P>
<P><PRE>      MSDEV /P &lt;PID&gt;
</PRE><P>
   where &lt;PID&gt; is the Process ID value you retrieved in step 4.

<P><LI>In MSVC++, on the File menu, click Open, and open the source file
   (Simple.c).

<P><LI>Set breakpoints at lines 223, 245, 256, and 271. The lines will change
   color at this point.

<P><LI>At the command prompt, start the client by typing:
<P>
<P><PRE>      client [-pipe &lt;pipename&gt;] [-string &lt;string&gt;]
</PRE><P>
   For example: client -pipe \\.\pipe\simple -string "franki"

<P><LI>Press the F5 key (a go command) to debug the service. The breakpoint hit
   will be on line 256. Press the F5 key again to go to the next
   breakpoint. Keep pressing F5 until line 223 waits again for a client to
   connect. Try connecting another client and repeat the same steps.
<P>
</OL>Exiting Windbg or MSVC++ will kill the service, which must be restarted
manually either with the Control Panel or SC.EXE.
<P>
NOTE: The "System Account" and the "LocalSystem Account" are the same
account.
 
<PRE>Keywords          : BseDebug BseSync kbtool
Version           : 3.51 4.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

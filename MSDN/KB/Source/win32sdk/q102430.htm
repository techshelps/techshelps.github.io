

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Debugging 32-bit Applications under Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102430">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1993/08/03">
<META NAME="Keywords" CONTENT="W32s W32sThunk kbprg kbtool">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Debugging Win32-based applications under Windows 3.1 with Win32s can be difficult because the debugging tools are complex to use and the process is not well documented. This article presents several strategies and choices for debugging Win32s appli...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QAVX,QBFY,QDL9,QBWQ,QBWO,QBWN,QAJH,QA56,QA55,QANN,QAB5,QBVV,QBWS,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Debugging 32-bit Applications under Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102430</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32s, versions 1.25, 1.3, 1.30a, 1.3c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Debugging Win32-based applications under Windows 3.1 with Win32s can be
difficult because the debugging tools are complex to use and the process is
not well documented. This article presents several strategies and choices
for debugging Win32s applications. Note that you can not use any 16-bit
debuggers to debug a Win32s application, even if the Win32s application is
thunking down to the 16-bit side using Universal Thunks.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Before you start to debug a Win32-based application under Win32s, make sure
that it runs correctly under Windows NT. Use either the WinDbg or NTSD
debugger that ships with the Win32 Software Development Kit (SDK) or the
Visual C++ debugger, to track down any problems.
<P>
Once you have debugged your application under Windows NT platform, you have
several choices to debug under Windows 3.1 platform with Win32s. The
following is a list, in increasing order of difficulty and complexity of
debugging.

<OL><P><LI>Use the Debugging Libraries for Windows 3.1 and Win32s
</OL> 
<P>
First install the debugging libraries for Windows 3.1 and run Windows. Note
that the D2N.BAT and N2D.BAT files shipped with Windows 3.1 Software
Development Kit (SDK) or Visual C++ 16-bit Edition version 1.5x compilers
provide a way to switch between the retail and debug kernels of Windows.
For more information on installing the Windows 3.1 debugging libraries,
please refer to the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../WIN16SDK/Q86263.htm">Q86263</A></B>
   TITLE: Redirecting Debugging Information Under Windows 3.0, 3.1

</PRE></OL>From a Windows MS-DOS box, install the debug version of Win32s by using the
SWITCH.BAT file shipped with your Win32s product. Run the W32SDBWIN.EXE
application that is shipped with Win32s, and choose the appropriate
Win32sDebug trace flags carefully (or set the Win32sDebug flags
appropriately in the WIN.INI file). Note that selecting too many will
generate more information than you may care to see and selecting too few
may cause you to miss important information and warnings. Run the DBWIN
debug application to capture the diagnostic trace output from Windows and
Win32s debugging libraries.
<P>
Run your Win32-based application and watch for any warnings or errors that
are displayed in the DBWIN application window. Note that to indicate that
you have installed the debug Win32s files, the string "Debug Win32s
&lt;version number&gt;" will be displayed at the bottom-right corner of your
monitor when your Win32s application is running.

<OL><P><LI>Use CodeView for Win32s (if available)
</OL> 
<P>
If you have Microsoft Visual C++ 32-bit Edition version 1.0, CodeView for
Win32s (CVW32S.EXE) is an additional option. CodeView for Win32s is a
user-level debugger. Remote debugging is not necessary, therefore, CodeView
for Win32s does not require a second machine. CVW32S does not come with
Visual C++ 2.0 and later, it is available only with Visual C++ version 1.0.
You can still use CVW32S.EXE with later versions of Visual C++, if you link
with /PDB:none and /INCREMENTAL:no and if you do not use new features such
as templates or C++ exception handling.

<OL><P><LI>Remotely Debug the Win32s Application Using Remote WinDBG
</OL> 
<P>
If the debugging libraries described in option 1 above do not help you
track down the problem in your Win32-based application, you will have to
debug your application under a 32-bit debugger. Unfortunately, there is no
32-bit debugger that works under Win32s except for CodeView for Win32s
described above.
<P>
One option is to remotely debug your application using the remote WinDbg
(WDBG32S.EXE) tool (or use the kernel debugger described below). Remote
debugging method requires two machines: a Win32s machine to run the Win32-
based application and the remote debugger, WDBG32S.EXE and a Windows NT
machine to run the WinDbg debugger.
<P>
Note that remote debugging with WinDBG only works on Windows NT versions
3.51 and earlier, not on Windows NT version 4.0. For more information on
how to use the remote WinDBG component under Win32s, please refer to the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../WIN32SDK/Q133061.htm">Q133061</A></B>
   TITLE: How to Remotely Debug a Win32s Application

</PRE><P><LI>Remotely Debug the Win32s Application Using the Visual C++ Debugger
</OL> 
<P>
You can also remotely debug your Win32-based application using the Remote
Debug Monitor tool (MSVCMON.EXE) that only ships with the Win32s files that
are included with Visual 32-bit Edition versions 2.x and 4.x. In this
method, the MSVCMON.EXE runs on the target Win32s machine while
communicating with the Visual C++ debugger running on the host Windows NT
machine. The Visual C++ controls the execution of the Win32-based program
you are debugging on your target machine.
<P>
Note that remote debugging with the Visual C++ debugger and MSVCMON tool
will only work on Visual C++ 32-bit Edition version 4.1 and earlier, but
not on Visual C++ version 4.2. For more information on this method, please
refer to the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../VISUALC/Q131058.htm">Q131058</A></B>
   TITLE: Tips for Remote Debugging with Visual C++ 2.x and 4.0

</PRE><P><LI>Use a Low-level Debugger like WDEB386 that Ships with Windows
</OL> 
<P>
WDEB386 is a powerful system-level debugger that can be used for debugging
Win32-based applications, but the tool and the method are complicated to
use. In general, use this method under Win32s only if you have to debug a
Win32-based application that implements Universal Thunks. Application-level
debuggers, such as the Microsoft Visual C++ debugger, CodeView for Windows,
and WinDBG, cannot trace through thunks because they consist of both 32-bit
and 16-bit code.
<P>
The major drawbacks to using a system-level debugger like WDEB386.EXE are
that you need to know Intel x86 assembly language, know how Intel x86
microprocessors work, and remember many debugger commands. For more
information on WDWB386, please refer to the documentation of the Win16 or
Win32 SDK products. In addition, the Microsoft Knowledge Base contains
several articles on how to use WDEB386 efficientlon. To find them, query on
the following keywords:
<P>
<PRE>   wdeb386 debug tips install

</PRE></OL><h2>REFERENCES</h2>
 
<P>
You can use most of the information provided in this article for debugging
Win32s applications that implement Universal Thunks. For additional
information on thunks, refer to the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   TITLE: Debugging Universal Thunks
   ARTICLE ID: <B><A HREF="../WIN32SDK/Q105756.htm">Q105756</A></B>

</PRE>For general information on debugging under Win32s, please see the "Win32s
Programmer's Reference" that is included with the Win32 SDK.
 
<PRE>Keywords          : W32s W32sThunk kbprg kbtool
Version           : 1.25 1.30 1.30a 1.30c
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

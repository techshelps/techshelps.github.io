

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Design Multithreaded Applications to Avoid Deadlock </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126768">
<META NAME="KBModify" CONTENT="1995/09/25">
<META NAME="KBCreate" CONTENT="1995/03/01">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Debugging a multithreaded application that deadlocks is challenging because the debugger cannot identify for you which thread owns which resource. You would have to track this information in your code. Because it is difficult to debug a deadlock si...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIM,QAUQ,QAGI,QAH4,QAJH,QDIZ,QA0N,QAJQ,QAH8,QAHT,QBQU,QDL9,QBWO,QBWN,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Design Multithreaded Applications to Avoid Deadlock</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 25, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126768</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Debugging a multithreaded application that deadlocks is challenging because
the debugger cannot identify for you which thread owns which resource. You
would have to track this information in your code. Because it is difficult
to debug a deadlock situation, it is important to design your application
to avoid deadlock.
<P>
This article is a brief introduction to a very complex topic. There are
references at the bottom of this article for additional information.
<P>
The key point to keep in mind when designing a multithreaded program is
that resources must always be requested in the same order.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Win32 API provides WaitForSingleObject() and WaitForMultipleObjects()
for requesting resources with handles. You would use a different method to
request other resources, depending on the resource type.
<P>
Many deadlocks occur because resources are not requested in the same order
by the application threads. For example:

<UL><LI>Thread 1 holds resource A and wants resource B.

<LI>Thread 2 holds resource B and wants resource A.
<P>
</UL>Both threads block forever, resulting in deadlock. There are many other
possible scenarios.
<P>
To avoid this problem, identify all of your application's critical
resources and order them from least precious to most precious. Design your
code such that if a thread needs several resources, it requests them in
order, starting with the least precious resource. Resources should be freed
in the reverse order and as soon as it is possible. This is not a
requirement to avoid deadlock, but it is good practice.
<P>
In the example given above, suppose that resource B is more precious than
resource A. Here's how the code would resolve the situation:

<UL><LI>Thread 2 already holds B, but because it wants A, it releases
   B and waits for A.

<LI>Thread 1 grabs B, then begins the task. It releases A when possible.

<LI>Thread 2 grabs A and waits for B.

<LI>Thread 1 finishes the task, then releases B.

<LI>Thread 2 grabs B, finishes the task, then releases A, then releases B.
<P>
</UL>The reason you should request the least precious resource first is that it
doesn't matter as much if you hold it longer while waiting to acquire all
the resources that you need. If the resource is precious, you want to hold
it for the smallest amount of time possible, so other threads can use it.
<P>
<P><h2>REFERENCES</h2>
 
<P>
MSDN Development Library, "Detecting Deadlocks in Multithreaded Win32
Applications", by Ruediger Asche.
<P>
For more information, refer to a good book on operating system design.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.50 4.00 95  race condition<BR>
KBCategory: kbprg<BR>
KBSubcategory: BseProcThrd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 25, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

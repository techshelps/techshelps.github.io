

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32s 1.30c Bug List at the Time of Its Release </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148862">
<META NAME="KBModify" CONTENT="1997/04/07">
<META NAME="KBCreate" CONTENT="1996/03/25">
<META NAME="Keywords" CONTENT="W32s kbbuglist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article lists all the known bugs in Win32s version 1.30c at the time of its release.  MORE INFORMATION   - Incorrect context at EXIT_PROCESS_DEBUG_EVENT.   - DEBUG_EVENT.RIP_INFO is not supported.   - Progman is restored when the debugger appl...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAAP,QBWP,QBVV,QAH4,QAB4,QALW,QAY2,QA01,QAGB,QDL9,QBWQ,QBWO,QBWN,QAKP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Win32s 1.30c Bug List at the Time of Its Release</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148862</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.30c
WINDOWS
kbprg kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32s version 1.3c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists all the known bugs in Win32s version 1.30c at the time
of its release.
<P>
<P><h2>MORE INFORMATION</h2>
 

<UL><LI>Incorrect context at EXIT_PROCESS_DEBUG_EVENT.

<LI>DEBUG_EVENT.RIP_INFO is not supported.

<LI>Progman is restored when the debugger application exits.

<LI>Problem with journaling hooks on Win32s when using MSTest.

<LI>OLE: need try/except at 32-bit entrypoints.

<LI>EXCEPTION_RECORD: The number of params and Info array is always zero.

<LI>Frame: Access Violation in PackFindData@8 (FindFirstFile looking
   for Arrow.pcx).

<LI>CVW32s: int 3 disables the receipt of bp for DbgBreakpoint.

<LI>CVW32s: Machine deadlock with the debugger, div0.exe, and FatalAppExit.

<LI>CVW32s: Ubrowse.exe runs on Windows NT but not Win32s example.

<LI>cvw/win32s: restart of MFC application fails.

<LI>cvw/w32s: exception; procterm; l; g; async stop doesn't stop.

<LI>EM_GETWORDBREAKPROC return code is incorrect. If an application sends
   the EM_GETWORDBREAKPROC message to an edit control, it will receive
   the address of a 32-&gt;16 callback thunk with no code on the other
   end of the stub.

<LI>Dialog procs should return BOOL not DWORD.

<LI>The DDE message thunks force the fAckReq bit to 1 if WM_DDE_DATA is sent
   with it set to 0. This forces the client to post the WM_DDE_ACK message
   so that the thunk layer can know when to free up data allocated for
   thunking the WM_DDE_DATA message. The server isn't expecting the ACK in
   this case. The thunk layer will recognize the forced ACK, however the
   code to consume it has not been implemented yet.

<LI>Int 3 cannot be trapped by way of SEH on Win32s.

<LI>Win32's CreateFile() opens files in cooked mode as opposed to raw mode.

<LI>Some time functions, such as ctime(), return values that are off by
   nine hours. This happens when the TZ environment variable is not
   defined. When TZ is defined and set to 0, these time functions return
   the correct value. The time offset is determined by the TZ environment
   variable, and when it is not defined, a default of -9 is used.

<LI>Microsoft Test script Mantapp.mst detects stack overflow when the test
   runs out of memory the second time.

<LI>_lopen gives the wrong error code when the file does not exist. _lopen
   fails with error code 87 instead of error code 2 (ERROR_FILE_NOT_FOUND).
   Win32s is unable to determine from the return value provided by Windows
   if the call failed due to the file not being there.

<LI>Cannot run ReadProcessMemory() on memory that has hardware bp set on it.

<LI>UT Diagram in the Programmers Reference is incorrect.

<LI>CRT: getdcwd/getcwd does not work on Win32s.

<LI>An exception in the DLL termination routine causes the system to quit.

<LI>PlayMetaFileRecord/EnumMetaFile contains incorrect lpHTable.

<LI>A Windbg assertion occurs on the HOST machine.

<LI>PlaySound() with SND_RESOURCE doesn't work correctly.

<LI>File mapping rounded to a whole number of pages (a multiple of 256
   instead of 4096). The workaround is to use SetFilePointer() and
   SetEndOfFile() after closing the mapping handles, but before closing
   the file.

<LI>chdrive() and SetCurrentDirectory() fail on the PCNFS drive.

<LI>Microsoft Excel bapco Microsoft Test script does not run to completion.

<LI>Dynamic dialog boxes under Win32s: An ANSI Win32 application loads a
   dialog box resource directly from its executable through LoadResource(),
   traverses the dialog box template, and renders its controls into another
   dialog box. The application then displays the dialog box, which
   repositions some of its controls during WM_INITDIALOG. In Windows NT,
   the controls rearrange as intended, but in Win32s, they appear
   misaligned by 50 pixels or so.

<LI>GetExitCodeProcess() does not return exit codes for 16-bit Windows-based
   applications.

<LI>The CRT function system() does not work the way it did in Windows NT.

<LI>There is a limitation in how NCB memory needs to be allocated on Win32s.
   The Win31 netbios VxD expects the memory to be allocated from the Win31
   memory space to lock that specific memory page. If the memory is
   allocated from somewhere else such as from the Win32s sparse area, the
   memory allocation will fail. In this specific case, allocate a buffer
   using GlobalAlloc(), memcpy in it the data retrieved, and call Netbios.

<LI>biSizeImage field of BITMAPINFOHEADER is zero. GetDIBits() is not
   placing the correct value for this field into the buffer.

<LI>Only the first CBT hook gets messages.

<LI>Registry functions return incorrect result code. Registry functions
   such as RegCreateKey() return incorrect results upon failure. The
   Windows 3.1 return code is returned, not the Windows NT return code.
   The functions that return correct results are: RegQueryValueA() and
   RegQueryValueExA()

<LI>General protection (GP) fault in WinExec() 16-bit application context.

<LI>Bad handles from CreateProcess16() if the child doesn't yield.

<LI>GlobalReAlloc(x,y,GMEM_MOVEABLE) returns the wrong handle type.

<LI>GMEM_SHARE memory must be freed explicitly.

<LI>RestartThread() writes to the debuggee stack.

<LI>The memory for CallBack frames is allocated once. The allocation size is
   64K. In most cases, this is too large, and in some extreme cases this
   64K may be exhausted.

<LI>GetShortPathName() does not check the correctness of the path.

<LI>CreateDirectory() handles errors differently in Windows NT from the way
   it handles errors in Win32s. Under Windows NT, all failures (directory
   already exists, no space left on device, and so on) are handled
   correctly. Under Win32s, all errors are handled identically (error #5,
   "Access is denied").

<LI>SetCurrentDirctory() gives different error codes on Windows NT from what
   it gives on Win32s. SetCurrentDirectory() works differently under
   Win32s. For example, if there is no floppy disk in drive B, and
   SetCurrentDirectory() is called with "b:\" under Windows NT, error
   #21 is returned ("The device is not ready") while under Win32s, error
   #161 is returned ("The specified path is invalid").

<LI>signal(SIGINT, SIGABRT, SIGTERM) needs instance data.

<LI>FindText() leaks memory and may cause a general protection (GP) fault.

<LI>spawnl doesn't pass parameters to an MS-DOS-based application.

<LI>Win32s does not support forwarded exports.

<LI>module management APIs missing ANSI to OEM translation.

<LI>GetIconInfo()'s piconinfo-&gt;fIcon member is always set to 1.

<LI>PlaySound() with SND_NOWAIT doesn't work correctly.

<LI>FormatMessage() doesn't set the last error.

<LI>Createfile(), when used on a write-protected floppy disk, fails.
   GetLastError() returns 2 instead of 19.

<LI>Win32app cannot be browsed if the same application is running.

<LI>Setup doesn't create backup files for some of the OLE files.

<LI>winhlp32:Compare macro does not display windows side by side.

<LI>MEASUREITEMSTRUCT and DRAWITEMSTRUCT are missing fields in menus.

<LI>HeapValidate() fails on a new heap. HeapValidate() is not supported
   in the retail version of Win32s. GetLastError() returns
   ERROR_CALL_NOT_IMPLEMENTED. HeapValidate() is supported only in the
   debug version of Win32s and in both the retail and debug versions of
   Windows NT.
<P>
   Other new heap APIs that are not supported in Win32s are:
<P>
   HeapCompact()
   HeapCreateTags()
   HeapExtend()
   HeapLock()
   HeapQueryTag()
   HeapSummary()
   HeapUnlock()
   HeapUsage()
   HeapWalk()
<P>
   All these APIs, including HeapValidate, are documented as not
   supported on Win32s and Windows 95.

<LI>winhlp32:delete of annotation in popup causes unh exception.

<LI>GrayString() with a NULL callback address causes a Fatal Exit in the
   debug version of Windows.

<LI>SetEnvironment does not handle various errors correctly

<LI>winhlp32:PopupContext macro produces incorrect error message.

<LI>winhlp32:PC macro with non-help file doens't work correctly.

<LI>winhlp32:PopupID with non-existing context string doesn't work
   correctly.

<LI>A file opened as GENERIC_READ only can still be written to.

<LI>CreateFile does not update attributes when file is opened for the
   second time.

<LI>PrintDlg Error - Print Dialog succeeds with NULL hPrintTemplate
   and PD_ENABLEPRINT.

<LI>PrintDlg Error - Print Dialog succeeds with NULL hSetupTemplate
   and PD_ENABLESETUPTEMPLATE

<LI>PrintDlg Error - Print Dialog succeeds with NULL hInstance.

<LI>PrintDlg Error - If the From value is greater than the To value in the
   Print dialog, it still returns SUCCESS instead of an error value.

<LI>PrintDlg Error - If the From or To entry is empty in the Print dialog,
   it still returns SUCCESS instead of an error value.

<LI>winhlp32 doesn't play .avi files.

<LI>winhlp32:new highlight feature is not consistent.

<LI>winhlp32:System error on write protected medium.

<LI>winhlp32:bitmap in Shed.hlp does not print correctly.

<LI>winhlp32:winword produces error when attempting to print from a
   secondary window.

<LI>winhlp32:Clicks go through File Manager.

<LI>Mplay32.exe of Windows NT 3.1 does not run on Win32s.

<LI>winhlp32:Window title does not change back.

<LI>winhlp32:kicked out of help after opening non-helpfile.

<LI>SearchPath() doesn't find file if Path is empty. NULL for lpszPath
   is fine, but an lpszPath = "" will not work the same as on Windows NT.

<LI>VerLanguageNameA() is not exported by Version.dll.

<LI>Low level wave in win32s (WAVEHDR.dwBytesRecorded) is set to zero.

<LI>MoveFile fails on Novell client 4.0 when the source is a local file
   and the target is a remote file.

<LI>SetWindowLong (GWL_USERDATA) causes a warning from the debug version of
   Windows when the window is destroyed

<LI>Setting a word break function on an edit control causes a general
   protection (GP) fault.

<LI>Tooltips does not appear in Edit controls

<LI>WinHelp doesn't handle the HELP_TCARD parameter properly.

<LI>WM_CHOOSEFONT_GETLOGFONT does not work correctly.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.30c bugs buglist<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: W32s<BR>
Keywords            : W32s kbbuglist kbprg<BR>
Version             : 1.30c<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

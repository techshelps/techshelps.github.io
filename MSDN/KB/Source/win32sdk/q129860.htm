

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Built-In Printing Features from a Rich Edit Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129860">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The Rich Edit control contains built-in printing features that can be used to send formatted text to the printer with minimal effort from the programmer.  MORE INFORMATION  Printing from a Rich Edit control involves the use of the standard printing...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOX,QAEV,QATX,QAMB,QAYC,QAHP,QAA1,QAJQ,QAB5,QDI2,QABA,QAKD,QAHE,QAIJ,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Built-In Printing Features from a Rich Edit Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129860</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Rich Edit control contains built-in printing features that can be used
to send formatted text to the printer with minimal effort from the
programmer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Printing from a Rich Edit control involves the use of the standard printing
APIs and two Rich Edit control messages, EM_FORMATRANGE and EM_DISPLAYBAND.
The EM_FORMATRANGE message can be used by itself or used in combination
with the EM_DISPLAYBAND message. Included below at the end of this article
is a code sample which demonstrates the usage of these messages.
<P>
<P><h3>EM_FORMATRANGE</h3>
 
<P>
This message is used to format the text for the printer DC and can
optionally send the output to the printer.
<P>
The wParam parameter for this message is a Boolean value that indicates
whether or not the text should be rendered (printed) to the printer. A zero
value only formats the text, while a nonzero value formats the text and
renders it to the printer.
<P>
The lParam parameter for this message is a pointer to the FORMATRANGE
structure. This structure needs to be filled out before sending the message
to the control.
<P>
<P><h3>FORMATRANGE Members</h3>
 
<P>
HDC   hdc - Contains the device context (DC) to render to if the wParam
parameter is nonzero. The output is actually sent to this DC.
<P>
HDC   hdcTarget - Contains the device context to format for, which is
usually the same as the hdc member but can be different. For example, if
you create a print preview module, the hdc member is the DC of the window
in which the output is viewed, and the hdcTarget member is the DC for the
printer.
<P>
RECT rc - Contains the area to render to. This member contains the
rectangle that the text is formatted to fit in, and subsequently printed
in. It also contains the margins, room for headers and footers, and so
forth. The rc.bottom member may be changed after the message is sent. If it
is changed, it must indicate the largest rectangle that can fit within the
bounds of the original rectangle and still contain the specified text
without printing partial lines. It may be necessary to reset this value
after each page is printed. These dimensions are given in TWIPS.
<P>
RECT  rcPage - Contains the entire area of the rendering device. This area
can be obtained using the GetDeviceCaps() function. These dimensions are
given in TWIPS.
<P>
<PRE>CHARRANGE   chrg - Contains the range of characters to be printed. Set
</PRE>chrg.cpMin to 0 and chrg.cpMax to -1 to print all characters.
<P>
The return value from EM_FORMATRANGE is the index of the first character on
the next page. If you are printing multiple pages, you should set
chrg.cpMin to this value before the next EM_FORMATRANGE message is sent.
<P>
When printing is complete, this message must be sent to the control with
wParam = 0 and lParam = NULL to free the information cache by the control.
<P>
<P><h3>EM_DISPLAYBAND</h3>
 
<P>
If you use 0 for the wParam parameter in the EM_FORMATRANGE message, then
you can use the EM_DISPLAYBAND message to send the output to the printer.
<P>
The wParam parameter for this message is not used and should be 0.
<P>
The lParam parameter for this message is a pointer to a RECT structure.
This RECT structure is the area to display to and is usually the same as
the rc member of the FORMATRANGE structure used in the EM_FORMATRANGE
message but can be different. For example, the rectangles are not the same
if you are printing on a certain portion of a page or built-in margins are
being used.
<P>
This message should only be used after a previous EM_FORMATRANGE message.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>void Print(HDC hPrinterDC, HWND hRTFWnd)
   {
   FORMATRANGE fr;
   int         nHorizRes = GetDeviceCaps(hPrinterDC, HORZRES),
               nVertRes = GetDeviceCaps(hPrinterDC, VERTRES),
               nLogPixelsX = GetDeviceCaps(hPrinterDC, LOGPIXELSX),
               nLogPixelsY = GetDeviceCaps(hPrinterDC, LOGPIXELSY);
   LONG        lTextLength;   // Length of document.
   LONG        lTextPrinted;  // Amount of document printed.

   // Ensure the printer DC is in MM_TEXT mode.
   SetMapMode ( hPrinterDC, MM_TEXT );

   // Rendering to the same DC we are measuring.
   ZeroMemory(&amp;fr, sizeof(fr));
   fr.hdc = fr.hdcTarget = hPrinterDC;

   // Set up the page.
   fr.rcPage.left     = fr.rcPage.top = 0;
   fr.rcPage.right    = (nHorizRes/nLogPixelsX) * 1440;
   fr.rcPage.bottom   = (nVertRes/nLogPixelsY) * 1440;

   // Set up 1" margins all around.
   fr.rc.left   = fr.rcPage.left + 1440;  // 1440 TWIPS = 1 inch.
   fr.rc.top    = fr.rcPage.top + 1440;
   fr.rc.right  = fr.rcPage.right - 1440;
   fr.rc.bottom = fr.rcPage.bottom - 1440;

   // Default the range of text to print as the entire document.
   fr.chrg.cpMin = 0;
   fr.chrg.cpMax = -1;

   // Set up the print job (standard printing stuff here).
   ZeroMemory(&amp;di, sizeof(di));
   di.cbSize = sizeof(DOCINFO);
   if (*szFileName)
      di.lpszDocName = szFileName;
   else
      {
      di.lpszDocName = "(Untitled)";

      // Do not print to file.
      di.lpszOutput = NULL;
      }

   // Start the document.
   StartDoc(hPrinterDC, &amp;di);

   // Find out real size of document in characters.
   lTextLength = SendMessage ( hRTFWnd, WM_GETTEXTLENGTH, 0, 0 );

   do
      {
      // Start the page.
      StartPage(hPrinterDC);

      // Print as much text as can fit on a page. The return value is the
      // index of the first character on the next page. Using TRUE for the
      // wParam parameter causes the text to be printed.

</PRE>#ifdef USE_BANDING
<P>
<PRE>      lTextPrinted = SendMessage(hRTFWnd,
                                 EM_FORMATRANGE,
                                 FALSE,
                                 (LPARAM)&amp;fr);
      SendMessage(hRTFWnd, EM_DISPLAYBAND, 0, (LPARAM)&amp;fr.rc);

</PRE>#else
<P>
<PRE>      lTextPrinted = SendMessage(hRTFWnd,
                                 EM_FORMATRANGE,
                                 TRUE,
                                 (LPARAM)&amp;fr);

</PRE>#endif
<P>
<PRE>      // Print last page.
      EndPage(hPrinterDC);

      // If there is more text to print, adjust the range of characters to
      // start printing at the first character of the next page.
      if (lTextPrinted &lt; lTextLength)
         {
         fr.chrg.cpMin = lTextPrinted;
         fr.chrg.cpMax = -1;
         }
      }
   while (lTextPrinted &lt; lTextLength);

   // Tell the control to release cached information.
   SendMessage(hRTFWnd, EM_FORMATRANGE, 0, (LPARAM)NULL);

   EndDoc (hPrinterDC);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.30 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCtl W32s<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

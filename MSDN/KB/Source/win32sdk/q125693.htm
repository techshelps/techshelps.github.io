

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: AngleArc in Windows 3.1, Win32s, and Windows 95 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125693">
<META NAME="KBModify" CONTENT="1998/03/05">
<META NAME="KBCreate" CONTENT="1995/02/01">
<META NAME="Keywords" CONTENT="GdiMisc kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  In Windows version 3.1, Win32s, and Windows 95, you may want to use the functionality provided by the Win32 API AngleArc(). AngleArc() is only supported on Windows NT.  MORE INFORMATION  The AngleArc() function draws a line segment and an arc. The ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QAIJ,QDL9,QBWO,QBWN,QA4Q,QBWQ,QBHI,QAD3,QBXT,QA5V,QAIB,QAII V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: AngleArc in Windows 3.1, Win32s, and Windows 95</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125693</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P><PRE>    - Microsoft Windows 95
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Windows version 3.1, Win32s, and Windows 95, you may want to use the
functionality provided by the Win32 API AngleArc(). AngleArc() is only
supported on Windows NT.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The AngleArc() function draws a line segment and an arc. The line segment
is drawn from the current position to the beginning of the arc. The arc is
drawn along the perimeter of a circle with the given radius and center. The
length of the arc is defined by the given start and sweep angles. The
starting point of the sweep is determined by measuring counterclockwise
from the x-axis of the circle by the number of degrees in the start angle.
The ending point is similarly located by measuring counterclockwise from
the starting point by the number of degrees in the sweep angle.
<P>
The code below provides two possible ways of getting functionality similar
to that of the AngleArc() function. While both of these methods will work
on any Windows platform, the second (AngleArc2) will be substantially
faster due to the fact that it uses the Arc() function to draw the sweep
rather than calculating each of the segments on the perimeter of the arc.
<P>
NOTE: One limitation of the second method is that if the sweep angle is
greater than 360 degrees, the arc will not be swept multiple times. In most
cases this will not be a problem but in certain cases (constructing paths,
for example) this can be a problem.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
<PRE>   BOOL AngleArc1(HDC hdc, int X, int Y, DWORD dwRadius,
                  float fStartDegrees, float fSweepDegrees)
   {
     float fCurrentAngle;         // Current angle in radians
     float fStepAngle = 0.03f;  // The sweep increment value in radians
     float fStartRadians;       // Start angle in radians
     float fEndRadians;         // End angle in radians
     int ix, iy;                // Current point on arc
     float fTwoPi = 2.0f * 3.141592f;

     /* Get the starting and ending angle in radians */
     if (fSweepDegrees &gt; 0.0f) {
       fStartRadians = ((fStartDegrees / 360.0f) * fTwoPi);
       fEndRadians = (((fStartDegrees + fSweepDegrees) / 360.0f) *
              fTwoPi);
     } else {
       fStartRadians = (((fStartDegrees + fSweepDegrees)  / 360.0f) *
             fTwoPi);
       fEndRadians =  ((fStartDegrees / 360.0f) * fTwoPi);
     }

     /* Calculate the starting point for the sweep via */
     /* polar -&gt; cartesian conversion */
     ix = X + (int)((float)dwRadius * (float)cos(fStartRadians));
     iy = Y - (int)((float)dwRadius * (float)sin(fStartRadians));

     /* Draw a line to the starting point */
     LineTo(hdc, ix, iy);

     /* Calculate and draw the sweep */
     for (fCurrentAngle = fStartRadians;
          fCurrentAngle &lt;= fEndRadians;
          fCurrentAngle += fStepAngle) {

       /* Calculate the current point in the sweep via */
       /* polar -&gt; cartesian conversion */
       ix = X + (int)((float)dwRadius * (float)cos(fCurrentAngle));
       iy = Y - (int)((float)dwRadius * (float)sin(fCurrentAngle));

       /* Draw a line segment to current point */
       LineTo(hdc, ix, iy);
     }

     return TRUE;
   }

</PRE><h3>Sample Code 2</h3>
 
<P>
<PRE>   BOOL AngleArc2(HDC hdc, int X, int Y, DWORD dwRadius,
                  float fStartDegrees, float fSweepDegrees)
   {
     int iXStart, iYStart;  // End point of starting radial line.
     int iXEnd, iYEnd;       // End point of ending radial line.
     float fStartRadians;   // Start angle in radians.
     float fEndRadians;     // End angle in radians.
     BOOL bResult;            // Function result.
     float fTwoPi = 2.0f * 3.141592f;
   
     /* Get the starting and ending angle in radians. */
     if (fSweepDegrees &gt; 0.0f) {
       fStartRadians = ((fStartDegrees / 360.0f) * fTwoPi);
       fEndRadians = (((fStartDegrees + fSweepDegrees) / 360.0f) * fTwoPi);
     }   else {
       fStartRadians = (((fStartDegrees + fSweepDegrees)  / 360.0f) *
                          fTwoPi);
       fEndRadians =  ((fStartDegrees / 360.0f) * fTwoPi);
     }
   
     /* Calculate a point on the starting radial line via */
     /* polar -&gt; cartesian conversion. */
     iXStart = X + (int)((float)dwRadius * (float)cos(fStartRadians));
     iYStart = Y - (int)((float)dwRadius * (float)sin(fStartRadians));
   
     /* Calculate a point on the ending radial line via */
     /* polar -&gt; cartesian conversion. */
     iXEnd = X + (int)((float)dwRadius * (float)cos(fEndRadians));
     iYEnd = Y - (int)((float)dwRadius * (float)sin(fEndRadians));
   
     /* Draw a line to the starting point. */
     if (fSweepDegrees &gt; 0.0f)
      LineTo(hdc, iXStart, iYStart);
     else
      LineTo(hdc, iXEnd, iYEnd);
   
     /* Draw the arc. */
     bResult = Arc(hdc, X - dwRadius, Y - dwRadius,
                        X + dwRadius, Y + dwRadius,
                        iXStart, iYStart,
                        iXEnd, iYEnd);
   
     /* Move to the ending point. Arc() will not do this and ArcTo() */
     /* will not work on Win32s or Win16. */
     if (fSweepDegrees &lt; 0.0f)
      MoveToEx(hdc, iXStart, iYStart, NULL);
     else
      MoveToEx(hdc, iXEnd, iYEnd, NULL);
   
     return bResult;
   }
</PRE> 
<PRE>Keywords          : GdiMisc kbcode
Platform          : Win95 WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

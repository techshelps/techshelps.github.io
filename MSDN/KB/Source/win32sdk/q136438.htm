

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Win32 SDK Version 3.51 Bug List - GDI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136438">
<META NAME="KBModify" CONTENT="1997/06/23">
<META NAME="KBCreate" CONTENT="1995/09/07">
<META NAME="Keywords" CONTENT="GdiMisc kbgraphic kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article lists the bugs in the Win32 API implemented in Windows NT version 3.51 that were known at the time the product was released.  MORE INFORMATION   - GetBitmapBits( ) returns different values from Windows 3.1.   - PolyBezier() call with c...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAH4,QAAP,QBVV,QAB4,QALW,QAGI,QAKP,QAJ6,QBXS,QAOX,QDIX,QADF,QABI,QABH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Win32 SDK Version 3.51 Bug List - GDI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136438</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists the bugs in the Win32 API implemented in Windows NT
version 3.51 that were known at the time the product was released.
<P>
<P><h2>MORE INFORMATION</h2>
 

<UL><LI>GetBitmapBits( ) returns different values from Windows 3.1.

<LI>PolyBezier() call with certain coordinates hangs the GDI.

<LI>MoveToEx() and LineTo() do not give an error when the delta is
   greater than 2^27.

<LI>DrawText() ignores a single space if it is followed by "\r\n".

<LI>The insertion pointer is set to a wrong place if Alt+0146 is entered
   twice in a multiple-line edit box with Arial font.

<LI>Use of Far East fonts causes csrss to grow very large.

<LI>ScaleWindowExtEx() and ScaleViewportExt() do not fail when the
   denominator parameter is zero.

<LI>CreateDC() returns error code 126 (ERROR_MOD_NOT_FOUND) on a printer
   with no access right. The call should return error code 5
   (ERROR_ACCESS_DENIED).

<LI>SetDIBits() succeeds when HBITMAP parameter is a handle to region, pen,
   or font.

<LI>GetObject() does not check the cbBuffer parameter for negative values.

<LI>UnrealizeObject() returns TRUE when passed an invalid handle.

<LI>EndDoc() reports success when given an information context (IC).

<LI>glGet() does not return an error when called between glBegin and glEnd.

<LI>EnumPrintProcessors() fails for a remote server.

<LI>GetPrintProcessorDirectory() does not return the UNC path.

<LI>EnumMonitors() fails on a remote server.

<LI>Job Priority can be set without Manage Documents permission.

<LI>StartDocPrinter() sets the wrong error code on failure.

<LI>StartDocPrinter() after StartDocPrinter(), with no EndDocPrinter()
   in between, does not fail. This is because no state checking is
   performed.

<LI>WritePrinter() should fail after EndDocPrinter().

<LI>WritePrinter() should fail after AbortPrinter().

<LI>WritePrinter() returns the wrong error code after AddJob().

<LI>SetPrinter does not fail with an invalid level of 1.

<LI>EnumPrinters() returns remote printers when only local printers are
   requested.

<LI>AddPrintProcessor() fails with pPath set to a path.

<LI>WritePrinter() does not dispatch the last cleanup bytes to printer.

<LI>AddPrinter() does not set an error code if pPrinter is NULL.

<LI>ScheduleJob() does not fail if there is no spool file.

<LI>If you send WritePrinter() a server handle, the wrong error code is
   returned.

<LI>The wrong error code is returned when AddMonitor() is called with the
   path to an invalid monitor.

<LI>AddPrinter() succeeds with an unknown data type.

<LI>If you send ScheduleJob() an invalid job ID, the wrong error code is
   returned.

<LI>JOB_INFO_2 time is never set.

<LI>ScheduleJob() fails on a deleted job with no spool file.

<LI>RemoteOpenPrinter() sometimes does not open printers.

<LI>OpenPrintProcessor() failure results in an application hang.

<LI>Cannot set or get the security descriptor for a pIniJob.

<LI>ClosePrinter() cleanup code doesn't keep states correctly.

<LI>AddPrinter with port == NUL returns ERROR_UNKNOWN_PRINTER.

<LI>EnumPrinters(NULL, PRINTER_ENUM_REMOTE) does not work.

<LI>There is no default printer if AddPrinterConnection() is called.

<LI>Rundown does not clean up StartDocPrinter() print jobs.

<LI>DeletePrinter() returns wrong type.

<LI>JOB_INFO_2 PagesPrinted should match Windows 95 when pages is zero.

<LI>There is no security check against the job during OpenPrinter().

<LI>There is ambiguity during OpenPrinter() for printers with same name.

<LI>Character '4' may be printed at upper-left of PCL seperator page.

<LI>SetJob(), GetJob(), and EnumJobs() do not set or return a security
   descriptor.

<LI>DeletePrinterConnection() on a share name returns TRUE but does not
   delete the connection.

<LI>Creating large Perpetua fonts (lfHeight &gt; 1500) can cause the system to
   fail.

<LI>DCIOpenProvider() fails on some video cards. Not all cards support DCI.

<LI>WinWatchDidStatusChange() and WinWatchGetClipList() can be called only
   from within the DCIBeginAccess() / DCIEndAccess() pair.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : GdiMisc kbgraphic kbbuglist<BR>
Version             : 3.51<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

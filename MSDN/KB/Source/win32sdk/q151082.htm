

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Password Change Filtering &amp; Notification in Windows NT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151082">
<META NAME="KBModify" CONTENT="1997/02/27">
<META NAME="KBCreate" CONTENT="1996/05/16">
<META NAME="Keywords" CONTENT="BseSecurity kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes the password change package facility that can be used to receive notification of password changes and can provide control over password quality.  The password change notification can be used to synchronize foreign account dat...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAWK,QBWP,QAUD,QAY5,QAGI,QAHT,QA8W,QBG2,QAPN,QATX,QBV8,QALW,QAB9,QAKD,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Password Change Filtering &amp; Notification in Windows NT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151082</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS NT
kbprg kbcode kbhowto
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK), version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes the password change package facility that can be
used to receive notification of password changes and can provide control
over password quality.
<P>
The password change notification can be used to synchronize foreign account
databases. Password change notification functionality is available on
Windows NT 3.51 and later.
<P>
The password filter can provide strict control over the quality or strength
of new passwords, and the PasswordFilter routine can indicate whether the
new password is appropriate. Password filter functionality is only
available on Windows NT 4.0 systems with Service Pack 2 installed.
<P>
NOTE: Other potential uses for this facility exist but are not discussed in
this article.
<P>
CAUTION: Take great care when dealing with passwords in clear text (non-
encrypted text). Sending passwords over the network in clear text could
compromise security on the network because network "sniffers" can watch for
such password traffic. Zeroing memory used to store passwords is
recommended prior to freeing the memory. It is assumed that the reader of
this article knows how to deal with password information in a secure
manner.
<P>
The interface to this functionality may be subject to change in a future
release of Windows NT.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Considerations that Apply to Password Change Events</h3>
 

<OL><P><LI>All buffers passed into the notification and filter routines should be
   treated as read-only. Writing any data to these buffers may cause
   undefined behavior.

<P><LI>The notification and filter routines should be thread-safe. Use
   critical sections or other synchronization techniques to protect data
   where appropriate.

<P><LI>The InitializeChangeNotify function is called when the password notify
   DLL is loaded. If this function returns FALSE, the DLL is unloaded. This
   function is provided to allow for password notify specific
   initialization that allows the password DLL to be used for other
   purposes.

<P><LI>The PasswordFilter function is called when a password change has
   been requested. Such password-change events take place during account
   creation, administrative password over-ride, and user-specified password
   changes. If this function returns TRUE, the password is considered valid
   and the system continues to evaluate the password through any other
   password-change packages installed on the system. If this function
   returns FALSE, the password is considered invalid, and
   ERROR_ILL_FORMED_PASSWORD (1324) is returned to the source of the
   password change request.

<P><LI>The PasswordChangeNotify function is called after successful filtering
   of the provided passwords and storage of the new password. The return
   value from PasswordChangeNotify is currently unused. For the current
   release of Windows NT, PasswordChangeNotify should always return
   STATUS_SUCCESS (0x00000000L).

<P><LI>Notification and filtering only take place on the computer that houses
   the updated account. Keep this in mind when dealing with domain-user
   accounts. Notification on domain accounts only takes place on the
   Primary domain controller for the domain. Notification packages should
   be installed on all BDCs in a domain, in addition to the PDC, to allow
   notifications to continue in the event of server role changes.

<P><LI>The following registry entry, of type REG_MULTI_SZ, must be configured
   appropriately for this facility to be used:
<P>
<P><PRE>      HKEY_LOCAL_MACHINE\
       SYSTEM\
       CurrentControlSet\
       Control\
       Lsa\
       Notification Packages (value of type REG_MULTI_SZ)
</PRE><P>
   Notification Packages contains a list of DLLs to be loaded and notified
   of password changes and password change requests. If this value
   does not exist in the registry, it must be created.

<P><LI>The following functions comprise the password change package:
<P>
   - InitializeChangeNotify
   - PasswordFilter
   - PasswordChangeNotify
<P>
   Each function is optional and must be declared NTAPI or WINAPI to insure
   proper calling convention. Each function used must appear in the .DEF
   file used to build the DLL.

<P><LI>Unhandled exceptions encountered in these functions cause security
   related failures system-wide; structured exception handling should be
   used when appropriate.

<P><LI>The caller of the password-change function blocks until each function
   has completed. When appropriate, move lengthy processing to a separate
   thread prior to returning from PasswordChangeNotify or PasswordFilter.

<P><LI>The PasswordChangeNotify, PasswordFilter, and InitializeChangeNotify
   functions run in the security context of the Local System account.

<P><LI>The loading of notification packages is an auditable event through
   enabling of AuditCategorySystem "Restart, Shutdown, and System" audit
   event type.

<P><LI>Password change notification and password filters only support password
   changes initiated from Windows 95 and Windows NT clients. Password
   changes initiated by 16-bit Windows clients do not generate password
   notification events because they use a different password change
   protocol that cannot support password notification.
<P>
</OL><h3>Microsoft Provided Password Filter DLL</h3>
 
<P>
System administrators who wish to increase password strength without having
to write their own filter may use the password filter supplied by Microsoft
along with Service Pack 2 for Windows NT 4.0. This filter, PASSFILT.DLL,
will need to be copied to %system root%\SYSTEM32 after Service Pack 2 is
installed on the system. To enable the filter follow steps 6 and 7 above.
<P>
PASSFILT.DLL implements the following password policy:

<OL><P><LI>Passwords must be at least six (6) characters long.

<P><LI>Passwords must contain characters from at least three (3) of the
   following four (4) classes:
<P>
<PRE>   Description                            Examples
   English Upper Case Letters             A, B, C, ... Z
   English Lower Case Letters             a, b, c, ... z
   Westernized Arabic Numerals            0, 1, 2, ... 9
   Non-alphanumeric ("Special characters") E.g., punctuation symbols.

</PRE><P><LI>Passwords may not contain your user name or any part of your full name.
<P>
</OL><h3>Sample Code</h3>
 
<P>
<PRE>   /*++

   Copyright (c) 1995, 1996  Microsoft Corporation

   Module Name:

       pswdntfy.c

   Abstract:

       This module illustrates how to implement password change
       notification and password filtering in Windows NT 4.0.

       Password change notification is useful for synchronization of
       non-Windows NT account databases.

       Password change filtering is useful for enforcing quality or
       strength of passwords in an Windows NT account database.

       This sample illustrates one approach to enforcing additional
       password quality.

   Author:

       Scott Field (sfield)    14-May-96

   --*/

   #include &lt;windows.h&gt;
   #include "ntsecapi.h" // \mstools\samples\win32\winnt\security\include\

   #ifndef STATUS_SUCCESS
   #define STATUS_SUCCESS  ((NTSTATUS)0x00000000L)
   #endif

   NTSTATUS
   NTAPI
   PasswordChangeNotify(
       PUNICODE_STRING UserName,
       ULONG RelativeId,
       PUNICODE_STRING Password
       )
   /*++

   Routine Description:

       This (optional) routine is notified of a password change.

   Arguments:

       UserName - Name of user whose password changed

       RelativeId - RID of the user whose password changed

       NewPassword - Cleartext new password for the user

   Return Value:

       STATUS_SUCCESS only - errors from packages are ignored.

   --*/
   {

   #ifdef DEBUG
       WCHAR String[ 256 ];

       swprintf(String,
           L"Password for account %.*ls (rid 0x%x) changed to %.*ls\n",
           UserName-&gt;Length / sizeof(WCHAR),
           UserName-&gt;Buffer,
           RelativeId,
           Password-&gt;Length / sizeof(WCHAR),
           Password-&gt;Buffer
           );

       OutputDebugStringW( String );

       ZeroMemory(String, sizeof(String));
   #endif

       return STATUS_SUCCESS;
   }

   BOOL
   NTAPI
   PasswordFilter(
       PUNICODE_STRING UserName,
       PUNICODE_STRING FullName,
       PUNICODE_STRING Password,
       BOOL SetOperation
       )
   /*++

   Routine Description:

       This (optional) routine is notified of a password change.

   Arguments:

       UserName - Name of user whose password changed

       FullName - Full name of the user whose password changed

       NewPassword - Cleartext new password for the user

       SetOperation - TRUE if the password was SET rather than CHANGED

   Return Value:

       TRUE if the specified Password is suitable (complex, long, etc).
        The system will continue to evaluate the password update request
        through any other installed password change packages.

       FALSE if the specified Password is unsuitable. The password change
        on the specified account will fail.

   --*/
   {
       BOOL bComplex = FALSE; // assume the password in not complex enough
       DWORD cchPassword;
       PWORD CharType;
       DWORD i;
       DWORD dwNum = 0;
       DWORD dwUpper = 0;
       DWORD dwLower = 0;

       //
       // check if the password is complex enough for our liking by
       // checking that at least two of the four character types are
       // present.
       //

       CharType = HeapAlloc(GetProcessHeap(), 0, Password-&gt;Length);
       if(CharType == NULL) return FALSE;

       cchPassword = Password-&gt;Length / sizeof(WCHAR);

       if(GetStringTypeW(
           CT_CTYPE1,
           Password-&gt;Buffer,
           cchPassword,
           CharType
           )) {

           for(i = 0 ; i &lt; cchPassword ; i++) {

               //
               // keep track of what type of characters we have encountered
               //

               if(CharType[i] &amp; C1_DIGIT) {
                   dwNum = 1;
                   continue;
               }

               if(CharType[i] &amp; C1_UPPER) {
                   dwUpper = 1;
                   continue;
               }

               if(CharType[i] &amp; C1_LOWER) {
                   dwLower = 1;
                   continue;
               }

               if(!(CharType[i] &amp; (C1_ALPHA | C1_DIGIT) )) {

                   //
                   // any other character types make the password complex
                   //

                   dwNum = 2;

                   break;
               }
           } // for

           //
           // Indicate whether we encountered enough password complexity
           //

           if( (dwNum + dwUpper + dwLower) &gt;= 2 )
               bComplex = TRUE;

           ZeroMemory( CharType, Password-&gt;Length );
       } // if

       HeapFree(GetProcessHeap(), 0, CharType);

       return bComplex;
   }

   BOOL
   NTAPI
   InitializeChangeNotify(
       void
       )
   /*++

   Routine Description:

       This (optional) routine is called when the password change package
       is loaded.

   Arguments:

   Return Value:

       TRUE if initialization succeeded.

       FALSE if initialization failed. This DLL will be unloaded by the
        system.

   --*/
   {

   #ifdef DEBUG
       OutputDebugString( TEXT("Initialize Change Notify called!\n") );
   #endif

       //
       // initialize any critical sections associated with password change
       // events, etc.
       //

       return TRUE;
   }

   /********

   pswdntfy.def
   ------------

   LIBRARY pswdntfy

   EXPORTS
       InitializeChangeNotify
       PasswordChangeNotify
       PasswordFilter

   ********/
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode kbhowto<BR>
KBSubcategory: BseSecurity<BR>
Additional reference words: 4.00 password notification authenticate sync<BR>
Keywords            : BseSecurity kbcode kbhowto kbprg<BR>
Version             : 4.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

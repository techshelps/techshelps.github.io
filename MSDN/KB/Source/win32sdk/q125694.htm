

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Find Out Which Listview Column Was Right-Clicked </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125694">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/02/01">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  You can use the technique described in this article to find out which column was clicked after right-clicking the listview column header.  MORE INFORMATION  LVN_COLUMNCLICK notifies a listview's parent window when a column is clicked using the left...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAE1,QAQ7,QBC9,QBC8,QANO,QDMN,QA7O,QAUD,QAMN,QAH6,QAB5,QAH4,QABI,QAOE,QAEV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Find Out Which Listview Column Was Right-Clicked</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125694</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use the technique described in this article to find out which
column was clicked after right-clicking the listview column header.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
LVN_COLUMNCLICK notifies a listview's parent window when a column is
clicked using the left mouse button, but no such notification occurs when a
column is clicked with the right mouse button.
<P>
Windows 95 sends an NM_RCLICK notification to the listview's parent window
when a column is clicked with the right mouse button, but the message sent
does not contain any information as to which column was clicked, especially
if the window is sized so that the listview is scrolled to the right.
<P>
The correct way to determine which column was clicked with the right mouse
button, regardless of whether the listview is scrolled, is to send the
header control an HDM_HITTEST message, which returns the index of the
column that was clicked in the iItem member of the HD_HITTESTINFO struct.
In sending this message, make sure the point passed in the HD_HITTESTINFO
structure is relative to the header control's client coordinates. Do not
pass it a point relative to the listview's client coordinates; if you do,
it will return an incorrect column index value.
<P>
The header control in this case turns out to be a child of the listview
control of LVS_REPORT style.
<P>
The following code demonstrates this method. Note that while the code
processes the NM_RCLICK notification on a WM_NOTIFY message, you also
process the WM_CONTEXTMENU message, which is also received as a
notification when the user clicks the right mouse button.
<P>
case WM_NOTIFY:
{
<PRE>    if ((((LPNMHDR)lparam)-&gt;code == NM_RCLICK))
    {
       HWND hChildWnd;
       POINT pointScreen, pointLVClient, pointHeader;
       DWORD dwpos;

       dwPos = GetMessagePos();

       pointScreen.x = LOWORD (dwPos);
       pointScreen.y = HIWORD (dwPos);

       pointLVClient = pointScreen;

       // Convert the point from screen to client coordinates,
       // relative to the listview
       ScreenToClient (ghwndLV, &amp;pointLVClient);

       // Because the header turns out to be a child of the
       // listview control, we obtain its handle here.
       hChildWnd = ChildWindowFromPoint (ghwndLV, pointLVClient);

       // NULL hChildWnd means R-CLICKED outside the listview.
       // hChildWnd == ghwndLV means listview got clicked: NOT the
       // header.
       if ((hChildWnd) &amp;&amp; (hChildWnd != ghwndLV))
       {
          char szClass [50];

          // Verify that this window handle is indeed the header
          // control's by checking its classname.
          GetClassName (hChildWnd, szClass, 50);
          if (!lstrcmp (szClass, "SysHeader32"))
          {
             HD_HITTESTINFO hdhti;
        char szBuffer [80];

             // Transform to client coordinates
             // relative to HEADER control, NOT the listview!
             // Otherwise, incorrect column number is returned.

             pointHeader = pointScreen;
             ScreenToClient (hChildWnd, &amp;pointHeader);

             hdhti.pt = pointHeader;
             SendMessage (hChildWnd,
                          HDM_HITTEST,
                          (WPARAM)0,
                          (LPARAM) (HD_HITTESTINFO FAR *)&amp;hdhti);
            wsprintf (szBuffer, "Column %d got clicked.\r\n", hdhti.iItem);

            MessageBox (NULL, szBuffer, "Test", MB_OK);
          }
       }
    }
    return 0L;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbui kbcode<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Modify the Width of the Drop Down List in a Combo Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131845">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/06/21">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The Windows combo box contains a list box (of the ComboLBox class) within it. In the standard combo box, this list box has exactly the same width as the combo box. However, you can make the width of the list box wider or narrower than the width of ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QBV3,QAEV,QA7O,QAOE,QAMN,QAB5,QDL9,QBWO,QBWN,QAHP,QAYC,QANX,QAE1,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Modify the Width of the Drop Down List in a Combo Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131845</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) version 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Windows combo box contains a list box (of the ComboLBox class) within
it. In the standard combo box, this list box has exactly the same width as
the combo box. However, you can make the width of the list box wider or
narrower than the width of the combo box. You may have seen combo box lists
like this in Microsoft Word and Microsoft Excel. This article shows by
example how to subclass a standard combo box class to achieve this
functionality.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The combo box in Windows is actually a combination of two or more controls;
that's why it's called a "combo" box. For more information about the parts
of a combo box and how they relate to each other, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q65881.htm">Q65881</A></B>
   TITLE     : The Parts of a Windows Combo Box and How They Relate

</PRE>To make the combo box list wider or narrower, you need the handle of the
list box control within the combo box. This task is difficult because the
list box is actually a child of the desktop window (for CBS_DROPDOWN and
CBS_DROPDOWNLIST styles). If it were a child of the ComboBox control,
dropping down the list box would clip it to the parent, and it wouldn't
display.
<P>
A combo box receives WM_CTLCOLOR messages for its component controls when
they need to be painted. This allows the combo box to specify a color for
these controls. The HIWORD of the lParam in this message is the type of the
control. In case of the combo box, Windows sends it a WM_CTLCOLOR message
with the HIWORD set to CTLCOLOR_LISTBOX when the list box control needs to
be painted. The LOWORD of the lParam contains the handle of the list box
control.
<P>
In 32-bit Windows, the WM_CTLCOLOR message has been replaced with multiple
messages, one for each type of control (WM_CTLCOLORBTN). For more
information about this, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN16SDK/Q81707.htm">Q81707</A></B>
   TITLE     : WM_CTLCOLOR Processing for Combo Boxes of All Styles

</PRE>Once you obtain the handle to the list box control window, you can resize
the control by using the MoveWindow API.
<P>
The following code sample demonstrates how to do this. This sample assumes
that you have placed the combo box control in a dialog box.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// Global declarations.

LRESULT CALLBACK NewComboProc (HWND hWnd,   UINT message,   WPARAM
   wParam, LPARAM lParam ); // prototype for the combo box subclass proc

HANDLE hInst;                     // Current app instance
BOOL bFirst;                      // a flag

// Dialog procedure for the dialog containing the combo box.

</PRE>BOOL __export CALLBACK DialogProc(HWND hDlg, UINT message, WPARAM wParam,
<PRE>            LPARAM lParam)
{
    FARPROC lpfnNewComboProc;

    switch (message)
    {
    case WM_INITDIALOG:

   bFirst = TRUE;       // set flag here - see below for usage

   // subclass the combo box

   lpfnOldComboProc = (FARPROC ) SetWindowLong (
               GetDlgItem ( hDlg, IDC_COMBO1 ),
               GWL_WNDPROC,
               (LONG)NewComboProc );
   break;

     case WM_DESTROY:
   (FARPROC ) SetWindowLong (    GetDlgItem ( hDlg, IDC_COMBO1 ),
               GWL_WNDPROC,
               (LONG)lpfnOldComboProc );
   break;
     default:
        break;
     }

     return FALSE;

</PRE>} // end dialog proc
<P>
<P>
<P>
<PRE>// Combobox subclass proc.

LRESULT CALLBACK NewComboProc (HWND hWnd,   UINT message,   WPARAM
            wParam, LPARAM lParam );

{
   static HWND hwndList;
   static RECT rectList;

</PRE>#ifdef WIN16
<PRE>   if (  WM_CTLCOLOR  == message)  // combo controls are to be painted.
</PRE>#else
<PRE>   if ( WM_CTLCOLORLISTBOX == message ) // 32 bits has new message.
</PRE>#endif
<PRE>   {
      // is this message for the list box control in the combo?
</PRE>#ifdef WIN16
<PRE>      if ( CTLCOLOR_LISTBOX==HIWORD (lParam )   ) // need only for 16 bits
      {
</PRE>#endif
<PRE>         // Do only the very first time, get the list
         // box handle and the list box rectangle.
         // Note the use of GetWindowRect, as the parent
         // of the list box is the desktop window

         if ( bFirst )
         {
</PRE>#ifdef WIN16
<PRE>            hwndList = LOWORD (lParam );
</PRE>#else
<PRE>            hwndList = (HWND) lParam ;     // HWND is 32 bits
</PRE>#endif
<PRE>            GetWindowRect ( hwndList, &amp;rectList );
                       bFirst = FALSE;
         }

         // Resize listbox window cx by 50 ( use your size here )

         MoveWindow ( hwndList, rectList.left, rectList.top,
         ( rectList.right - rectList.left + 50 ),
         rectList.bottom - rectList.top, TRUE );
</PRE>#ifdef WIN16
<PRE>      }
</PRE>#endif
<PRE>   }

   // Call original combo box procedure to handle other combo messages.

   return CallWindowProc ( lpfnOldComboProc, hWnd, message,
</PRE>wParam, lParam  );
}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.20 3.10 3.50 4.00 95<BR>
KBCategory: kbui kbcode<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

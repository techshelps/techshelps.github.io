

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling the Caret Color </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q84054 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1992/04/29">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  When an application creates a custom caret using a bitmap, it is possible to specify white or black for the caret color. In the case of Windows running on a monochrome display, the application can cause the caret to be the color of the display (whi...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QAPG,QBB2,QDL9,QBWO,QBWN,QABX,QBWQ,QAPW,QALX,QAJH,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Controlling the Caret Color</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q84054 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When an application creates a custom caret using a bitmap, it is
possible to specify white or black for the caret color. In the case of
Windows running on a monochrome display, the application can cause the
caret to be the color of the display (white, green, amber, and so
forth, as appropriate). However, because the caret color is determined
by Windows at run time based on the hardware installed, the
application cannot guarantee what color will be used under all
circumstances. This article provides information about using color in
a custom caret.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To create a caret, first create a bitmap with the desired pattern. To
display the caret, Windows exclusive-ORs (XORs) and takes the opposite
of the result (the NOT of the result) of the bitmap with the
background of the client window. Therefore, to create a white caret,
create a bitmap that when XOR'd with the window background will have
an opposite value that will create a white color. It is when the caret
blinks that Windows uses the reverse of the bitmap XOR'd with the
background to draw the caret; this creates the white blink seen on the
screen.
<P>
The bitmap for the caret cannot use a color palette. Windows does not
use the color values from the palette in its calculations but the
indices into the palette. While it is possible to use palette indices
successfully, perfect symmetry of the colors in the palette is
required. This is unlikely. For each color in the palette, its exact
opposite color must be in the palette, in the exactly opposite index
position.
<P>
However, when the application creates bitmaps itself, it has complete
control over the bits. Therefore, the application can create the
perfect counterpart that corresponds to the window background color.
If the application uses this information to create the caret bitmap,
when Windows creates the caret, it can choose the closest color
available in the system palette.
<P>
Therefore, to create a white caret (or a black one, if the screen has
too many light elements), the task is straightforward. Windows always
reserves a few colors in the system palette and makes them available
to all applications. On a color display, these colors include black
and white. On a monochrome display, these colors are whatever the
monochrome color elements are.
<P>
Because black and white (or the monochrome screen colors) are always
available, the application simply creates a bitmap that, when XOR'd
with the screen background color, produces black or white.
The technique involves one main principle: background XOR background =
FALSE. Anything XOR'd with itself returns FALSE, which in bitmap terms
maps to the color black.
<P>
The process of creating a caret from the background color involves the
four steps discussed below:

<OL><P><LI>Create a pattern brush the same as the window background

<P><LI>Select the pattern brush into a memory display context (DC)

<P><LI>Use the PATCOPY option of the PatBlt function to copy the brush
   pattern into the caret bitmap.

<P><LI>Specify the caret bitmap in a call to the CreateCaret function.
<P>
</OL>When this caret is XOR'd with the background, black will result. When
the caret blinks, and is therefore displayed, Windows computes the
opposite of the caret and XOR's this value into the background. This
yields NOT(background XOR background) = NOT(FALSE) = TRUE which
corresponds to WHITE.  The first background represents the caret
bitmap and the second is the current background color of the window.
<P>
Note that half the time the custom bitmap is displayed (when the caret
"blinks") the other half of the time the background is displayed,
(between "blinks").
<P>
If the background color is light gray or lighter [RGB values
(128, 128, 128) through (255, 255, 255)], then a black caret is
usually desired. The process of creating a black caret is just as
straightforward. Modify step 1 of the process given above to
substitute the inverse of the background for the background bitmap.
When the caret blinks, it will show black. The equation that
corresponds to this case is NOT(inverse of background XOR background)
= NOT(TRUE) = FALSE which corresponds to BLACK.
<P>
To change the caret color to something other than black or white
requires considerably more work, with much less reliable results
because the application must solve the following equation:
<P>
<PRE>   NOT(caret XOR background) = desired_color on the
                               "blink" of the caret.

</PRE></OL>where the value for the caret color must be determined given the
desired color. A series of raster operations is required to solve this
type of equation. (For more information on raster operations, see
chapter 11 of the "Microsoft Windows [3.0] Software Development Kit
Reference, Volume 2" or pages 573-585 of the "Microsoft Windows [3.1]
Software Development Kit Programmer's Reference, Volume 3: Messages,
Structures, and Macros.")
<P>
Even after solving this equation, the color actually displayed is
controlled by Windows and the colors in the current system palette.
With colors other than black or white, an exact match for the desired
color may not be available. In that case, Windows will provide the
closest match possible. Because the palette is a dynamic entity and
can be modified at will, it is impossible to guarantee a particular
result color in all cases. The colors black and white should be safe
most of the time because it is quite unusual for an application to
modify the reserved system colors. Even when an application does
change the system palette, it most likely retains a true black and a
true white.
<P>
As long as a black and white remain in the palette (which is usually
the case), this algorithm will provide a white or black caret.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCrt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

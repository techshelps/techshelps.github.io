

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling a Win32 DLL from a Win16 App on Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97785 ">
<META NAME="KBModify" CONTENT="1997/04/07">
<META NAME="KBCreate" CONTENT="1993/04/21">
<META NAME="Keywords" CONTENT="W32s W32sThunk kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  A Windows version 3.1 application can call a Win32 dynamic-link library (DLL) under Win32s using Universal Thunks.  The following are required components (in addition to the Windows 3.1 application and the Win32 DLL):   - A 16-bit DLL that provides...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QDNN,QAA1,QDI2,QA7H,QANG,QBC9,QBC8,QANO,QAJH,QAIF,QAH4,QDL9,QBWQ,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calling a Win32 DLL from a Win16 App on Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97785 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.10 1.20 1.30 1.30a 1.30c
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32s versions 1.1, 1.2, 1.30, 1.30a, and 1.30c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A Windows version 3.1 application can call a Win32 dynamic-link library
(DLL) under Win32s using Universal Thunks.
<P>
The following are required components (in addition to the Windows 3.1
application and the Win32 DLL):

<UL><LI>A 16-bit DLL that provides the same entry points as the Win32 DLL.
   This serves as the 16-bit end for the Universal Thunk. The
   programmer must also include code that will detect whether the
   32-bit side is loaded.

<LI>A Win32 DLL that sets up the Universal Thunk. This serves as the
   32-bit end of the Universal Thunk. This DLL is supported only under
   Win32s.

<LI>A Win32 EXE that loads the 32-bit DLL described above.
<P>
</UL>NOTE: Universal Thunks were designed to work with a Win32-based application
calling a 16-bit DLL. The method described here has limitations. Because
the application is 16-bit, no 32-bit context is created, so certain calls
will not work from the Win32 DLL. For example, the first time you call
malloc() or new() from a DLL entrypoint called by the 16-bit application,
the system will hang. This is because MSVCRT20.DLL is using TLS to store C
Run-time state information and there is no TLS set up.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following diagram illustrates how the pieces fit together:
<P>
<PRE>                      -----------     -----------     ---------
                     | Win32 EXE |--&gt;| Win32 DLL |&lt;-&gt;|  Win32  |
    32-bit           |   (stub)  |   |    (UT)   |   |   DLL   |
                      -----------     -----------     ---------
                              /|\      /|\
              -----------------|--------|-------------------------
                               |       \|/
                ---------     ------------
               | Win 3.1 |&lt;-&gt;| 16-bit DLL |
    16-bit     |   app.  |   |   (UT)     |
                ---------     ------------

</PRE>The load order is as follows: The Windows 3.1 application loads the 16-bit
DLL. The 16-bit DLL checks to see whether the 32-bit side has been
initialized. If it has not been initialized, then the DLL spawns the 32-bit
EXE (stub), which then loads the 32-bit DLL that sets up the Universal
Thunks with the 16-bit DLL. Once all of the components are loaded and
initialized, when the Windows 3.x application calls an entry point in the
16-bit DLL, the 16-bit DLL uses the 32-bit Universal Thunk callback to pass
the data over to the 32-bit side. Once the call has been received on the
32-bit side, the proper Win32 DLL entry point can be called.
<P>
Note that the components labeled Win32 DLL (UT) and Win32 DLL in the
diagram above can be contained in the same Win32 DLL. Remember that the
code in the Win32 DLL (UT) portion isn't supported under Windows NT, so
this code must be special-cased if the DLLs are combined.
<P>
For more information on Universal Thunks, please see the "Win32s
Programmer's Reference" and the documentation for the UTRegister() API.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: W32s<BR>
Additional reference words: 1.10 1.20 1.30 1.30a 1.30c reverse universal<BR>
thunk rut<BR>
Keywords            : W32s W32sThunk kbprg<BR>
Version             : 1.10 1.20 1.30 1.30a 1.30c<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

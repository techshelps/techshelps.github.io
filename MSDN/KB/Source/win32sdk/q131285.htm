

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use LVIF_DI_SETITEM on an LVN_GETDISPINFO Notification </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131285">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/06/07">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Windows 95 provides two flags, LVIF_DI_SETITEM and TVIF_DI_SETITEM, for the listview and treeview controls respectively. When set, these flags instruct Windows to start storing information for that particular item previously set as a callback item....">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QAHE,QAA1,QAYY,QBC9,QBC8,QANO,QBWQ,QAJH,QDI2,QA7O,QATX,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use LVIF_DI_SETITEM on an LVN_GETDISPINFO Notification</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131285</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Windows 95 provides two flags, LVIF_DI_SETITEM and TVIF_DI_SETITEM, for the
listview and treeview controls respectively. When set, these flags instruct
Windows to start storing information for that particular item previously
set as a callback item.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows 95 introduces the concept of callback items for the new listview
and treeview common controls. A callback item is a listview or treeview
item for which the application, not the control, stores the text, icon, or
any appropriate information about the item. If the application already
maintains this information anyway, setting up callback items could decrease
the memory requirements of the control. Callback items are just as useful
for items that display constantly changing information. Setting these items
up as callback items allows the application to display the most current
values appropriate for that item.
<P>
Take for example a SPY application that displays information in a
hierarchical form (or a treeview) about the window being browsed or spied
on. One of the things it displays is the window rectangle, or the
dimensions of the window.
<P>
Because the user could resize this window at any time, this particular item
is a good candidate for a callback item because it displays constantly
changing information.
<P>
The application defines a callback item by specifying LPSTR_TEXTCALLBACK
for the pszText member of the TV_ITEM structure. Whenever the item needs to
be displayed, Windows requests the callback information by sending the
treeview's parent a TVN_GETDISPINFO notification in the form of a WM_NOTIFY
message. The parent window then fills the pszText member of the TV_ITEM
structure as the following sample code demonstrates:
<P>
<PRE>   LRESULT MsgNotify(HWND   hwnd,
                     UINT   uMessage,
                     WPARAM wparam,
                     LPARAM lparam)
   {
       TV_DISPINFO *ptvdi = (TV_DISPINFO *)lparam;

       switch (ptvdi-&gt;hdr.code)
       {
          case TVN_GETDISPINFO:

            if (ptvdi.mask &amp; TVIF_TEXT)
            {
               RECT  rect;
               char  szBuf [30];

               GetWindowRect (hWndToBrowse, &amp;rect);

               // where FormatRectText formats the rect information
               // in a nice &lt;WindowRect: (x,y):cx,cy&gt; format
               // and stores it in szBuf.
               FormatRectText (&amp;rect, szBuf, sizeof (szBuf));

               lstrcpy (ptvdi.pszText, szBuf);
            }
            :

           default: break;

        }
   return 0;
   }

</PRE>At a certain point, the application may determine during run time, that the
window dimensions will no longer change. At this point, there may be no
reason for this particular treeview item to remain as a callback item. This
time, you need to process the TVN_GETDISPINFO message in a slightly
different manner, specifying the TVIF_DI_SETITEM flag as demonstrated in
the following code:
<P>
<PRE>   case TVN_GETDISPINFO:

      if (ptvdi.mask &amp; TVIF_TEXT)
      {
         RECT  rect;
         char  szBuf [30];

         GetWindowRect (hWndToBrowse, &amp;rect);

        // where FormatRectText formats the rect information
        // in a nice &lt;WindowRect: (x,y):cx,cy&gt; format
        // and stores it in szBuf.
         FormatRectText (&amp;rect, szBuf, sizeof (szBuf));

         lstrcpy (ptvdi.pszText, szBuf);
         plvdi-&gt;item.mask = plvdi-&gt;item.mask | TVIF_DI_SETITEM;
      }

</PRE>By ORing the mask with TVIF_DI_SETITEM, you instruct Windows to start
storing text information for the particular treeview item. At that point,
the application stops receiving a TVN_GETDISPINFO notification whenever the
item needs to be redrawn. This works almost as well as calling
TreeView_SetItem() on the item and replacing pszText's value with
LPSTR_TEXTCALLBACK to the appropriate string.
<P>
The same holds true for listview controls when the mask is ORed with the
LVIF_DI_SETITEM flag. However, note that setting the LVIF_DI_SETITEM flag
for listviews works only for the first column of text (iSubItem ==0).
<P>
If an application specifies LPSTR_TEXTCALLBACK therefore for a column
other than 0 in report view, LVIF_DI_SETITEM does not store the text
information for that listview item column.
<P>
For more information on other members of the LV_ITEM and TV_ITEM structures
that can be set up for callback, refer to the documentation on LV_DISPINFO
and TV_DISPINFO structures.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 1.30 I_IMAGECALLBACK win95<BR>
I_CHILDRENCALLBACK<BR>
KBCategory: kbui kbcode<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing a Pointer to a Member Function to the Win32 API </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102352">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/08/03">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Many of the Win32 application programming interfaces (APIs) call for a callback routine. One example is the lpStartAddr argument of CreateThread():     HANDLE CreateThread(lpsa, cbStack, lpStartAddr, lpvThreadParm,       fdwCreate, lpIDThread)     ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAO2,QAO3,QBV8,QAB9,QAH7,QAH6,QAD7,QAUQ,QAPN,QAHE,QAIS,QDL9,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Passing a Pointer to a Member Function to the Win32 API</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102352</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.1, 3.5, and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Many of the Win32 application programming interfaces (APIs) call for a
callback routine. One example is the lpStartAddr argument of
CreateThread():
<P>
<PRE>   HANDLE CreateThread(lpsa, cbStack, lpStartAddr, lpvThreadParm,
      fdwCreate, lpIDThread)

   LPSECURITY_ATTRIBUTES lpsa;    /* Address of thread security attrs */
   DWORD cbStack;                    /* Initial thread stack size*/
   LPTHREAD_START_ROUTINE lpStartAddr; /* Address of thread function */
   LPVOID lpvThreadParm;       /* Argument for new thread*/
   DWORD fdwCreate;               /* Creation flags*/
   LPDWORD lpIDThread;               /* Address of returned thread ID */

</PRE>When attempting to use a member function as the thread function, the
following error is generated:
<P>
<PRE>   error C2643: illegal cast from pointer to member

</PRE>The problem is that the function expects a C-style callback, not a pointer
to a member function. A major difference is that member functions are
called with a hidden argument called the "this" pointer. In addition, the
format of the pointer isn't simply the address of the first machine
instruction, as a C pointer is. This is particularly true for virtual
functions.
<P>
If you want to use a member function as a callback, you can use a static
member function. Static member functions do not receive the "this" pointer
and their addresses correspond to an instruction to execute.
<P>
Static member functions can only access static data, and therefore to
access nonstatic class members, the function needs an object or a pointer
to an object. One solution is to pass in the "this" pointer as an argument
to the member function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This situation occurs with callback functions of other types as well, such
as:
<P>
<PRE>   DLGPROC                  GRAYSTRINGPROC
   EDITWORDBREAKPROC        LINEDDAPROC
   ENHMFENUMPROC            MFENUMPROC
   ENUMRESLANGPROC          PROPENUMPROC
   ENUMRESNAMEPROC          PROPENUMPROCEX
   ENUMRESTYPEPROC          TIMERPROC
   FONTENUMPROC             WNDENUMPROC
   GOBJENUMPROC

</PRE>For more information on C++ callbacks, please see the May 1993 issue of the
"Windows Tech Journal."
<P>
The following sample demonstrates how to use a static member function as a
thread function, and pass in the "this" pointer as an argument.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>#include &lt;windows.h&gt;

</PRE>class A
{
public:
<PRE>   int x;
   int y;

   A() { x = 0; y = 0; }

   static StartRoutine( A * );   // Compiles clean, includes "this" pointer
};

void main( )
</PRE>{
<PRE>   A a;

   DWORD dwThreadID;

   CreateThread( NULL,
      0,
      (LPTHREAD_START_ROUTINE)(a.StartRoutine),
      &amp;a,                        // Pass "this" pointer to static member fn
      0,
      &amp;dwThreadID
   );
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95<BR>
KBCategory: kbprg<BR>
KBSubcategory: BseMisc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

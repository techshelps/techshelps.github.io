

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Getting Floppy Drive Information </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115828">
<META NAME="KBModify" CONTENT="1997/02/20">
<META NAME="KBCreate" CONTENT="1994/06/05">
<META NAME="Keywords" CONTENT="kbprg kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  To get the media type(s) supported by a floppy drive, it is necessary to call CreateFile() to get a handle to the drive and then DeviceIoControl() to get the information. However, if there is no floppy disk in the floppy drive, the following messag...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGX,QAC9,QALG,QAFV,QA01,QAYS,QAGI,QAI4,QAH4,QAFK,QANE,QACI,QDNO,QDNL,QA9N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Getting Floppy Drive Information</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 20, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115828</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.1 and 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To get the media type(s) supported by a floppy drive, it is necessary to
call CreateFile() to get a handle to the drive and then DeviceIoControl()
to get the information. However, if there is no floppy disk in the floppy
drive, the following message box may appear when CreateFile() is called for
drive A (\\.\a:):
<P>
<PRE>   There is no disk in the drive. Please insert a disk into drive A:

</PRE>When calling CreateFile(), be sure to use 0 for the access mode and
FILE_SHARE_READ for the share mode so that the user will not be prompted to
insert a floppy disk:
<P>
<PRE>   CreateFile(
      szFileName,
      0,
      FILE_SHARE_READ,
      NULL,
      OPEN_ALWAYS,
      0,
      NULL
   );

</PRE>Another way to avoid the message box prompt is to put
<P>
<PRE>   SetErrorMode( SEM_FAILCRITICALERRORS );

</PRE>before the call to CreateFile().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code is based on the code in the FLOPPY SDK sample,
but it simply displays the media type(s) supported by floppy drive A. The
code demonstrates one way to retrieve the supported media without requiring
you to insert a floppy disk in the drive.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;
   #include &lt;winioctl.h&gt;

   DISK_GEOMETRY SupportedGeometry[20];
   DWORD SupportedGeometryCount;

   VOID
   GetSupportedGeometrys( HANDLE hDisk )
   {
      DWORD ReturnedByteCount;

      if( DeviceIoControl(
             hDisk,
             IOCTL_DISK_GET_MEDIA_TYPES,
             NULL,
             0,
             SupportedGeometry,
             sizeof(SupportedGeometry),
             &amp;ReturnedByteCount,
             NULL
         ))
         SupportedGeometryCount = ReturnedByteCount /
                                  sizeof(DISK_GEOMETRY);

      else SupportedGeometryCount = 0;
   }

   VOID
   PrintGeometry( PDISK_GEOMETRY lpGeometry )
   {
      LPSTR MediaType;

      switch ( lpGeometry-&gt;MediaType ) {
         case F5_1Pt2_512:
            MediaType = "5.25, 1.2MB,  512 bytes/sector";
            break;
         case F3_1Pt44_512:
            MediaType = "3.5,  1.44MB, 512 bytes/sector";
            break;
         case F3_2Pt88_512:
            MediaType = "3.5,  2.88MB, 512 bytes/sector";
            break;
         case F3_20Pt8_512:
            MediaType = "3.5,  20.8MB, 512   bytes/sector";
            break;
         case F3_720_512:
            MediaType = "3.5,  720KB,  512 bytes/sector";
            break;
         case F5_360_512:
            MediaType = "5.25, 360KB,  512 bytes/sector";
            break;
         case F5_320_512:
            MediaType = "5.25, 320KB,  512 bytes/sector";
            break;
         case F5_320_1024:
            MediaType = "5.25, 320KB,  1024 bytes/sector";
            break;
         case F5_180_512:
            MediaType = "5.25, 180KB,  512 bytes/sector";
            break;
         case F5_160_512:
            MediaType = "5.25, 160KB,  512  bytes/sector";
            break;
         case RemovableMedia:
            MediaType = "Removable media other than floppy";
            break;
         case FixedMedia:
            MediaType = "Fixed hard disk media";
            break;
         default:
            MediaType = "Unknown";
            break;
      }
      printf("    Media Type %s\n", MediaType );
      printf("    Cylinders %d, Tracks/Cylinder %d, Sectors/Track %d\n",
             lpGeometry-&gt;Cylinders.LowPart, lpGeometry-&gt;TracksPerCylinder,
             lpGeometry-&gt;SectorsPerTrack
            );
   }

   void main( int argc, char *argv[], char *envp[] )
   {
      HANDLE hDrive;
      UINT i;

      hDrive = CreateFile(
                      "\\\\.\\a:",
                      0,
                      FILE_SHARE_READ,
                      NULL,
                      OPEN_ALWAYS,
                      0,
                      NULL
                      );
      if ( hDrive == INVALID_HANDLE_VALUE )
      {
         printf( "Open failed: %d\n", GetLastError() );
         ExitProcess(1);
      }

      GetSupportedGeometrys( hDrive );

      printf( "\nDrive A supports the following disk geometries\n" );
      for( i=0; i&lt;SupportedGeometryCount; i++ )
      {
          printf("\n");
          PrintGeometry( &amp;SupportedGeometry[i] );
      }
      printf("\n");
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: BseMisc<BR>
Additional reference words: 3.10 3.50<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 20, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: MIDL compiler structure packing problems </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136500">
<META NAME="KBModify" CONTENT="1996/05/03">
<META NAME="KBCreate" CONTENT="1995/09/10">
<META NAME="Keywords" CONTENT="kbnetwork kbbuglist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  An RPC application that uses stub code generated by MIDL throws memory exceptions, causes a general protection (GP) fault, or overwrites memory in the data heap. The RPC application is using a structure or union in the IDL file.  CAUSE =====  The /...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAOT,QBGA,QBFY,QAKP,QAEB,QABI,QAR4,QAKJ,QBV8,QABA,QAIC,QABG,QBKN,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: MIDL compiler structure packing problems</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 3, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136500</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 SDK, versions 3.1, 3.5, 3.51, and 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An RPC application that uses stub code generated by MIDL throws memory
exceptions, causes a general protection (GP) fault, or overwrites memory in
the data heap. The RPC application is using a structure or union in the IDL
file.
<P>
<P><h2>CAUSE</h2>
 
<P>
The /Zp (packing) option of the MIDL compiler does not affect the size of
the structure; MIDL always uses a packing of 1. However, the /Zp option of
the C compiler does increase the size of the structure. Because MIDL
assumes a packing of one, it generates code that allocates less memory
than what is actually needed.
<P>
You can verify the behavior of the MIDL compiler by searching your client
stub code for _StubMsg.pfnAllocate. This call is present only with semi-
interpreted stubs (the default MIDL option, /Os). Try compiling your IDL
file with different /Zp settings, and notice that the memory allocated by
_StubMsg.pfnAllocate is unchanged, though it should change to accommodate
packing space.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are three solutions to correct this problem:

<OL><P><LI>Use MIDL's /Oi option.
<P>
   -or-

<P><LI>Use #pragma pack(1) in the stub code to use a packing of 1.
<P>
   -or-

<P><LI>Pad your interface declaration to match the padding done by the C
   compiler.
<P>
</OL>Please see MORE INFORMATION for details.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in MIDL 2.00.0102 for the
Win32 SDK. This problem has been fixed in MIDL 3.0, now shipping with
Windows NT 4.0 beta SDK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Fully interpreted stubs (MIDL option /Oi) use another approach for
parameter marshaling, and this alternative approach does not have the
problem with the packing. The stub code produced with /Oi is slightly
slower, but for most applications the loss is negligible. If you decide to
use the /Oi option, make sure your remote procedures are declared as
__stdcall.  Refer to the MIDL documentation for more information on /Oi.
<P>
If you are not interested in using the /Oi option, you can manually pad
your interface declaration. To manually pad your interface declaration,
you must first determine the packing used by the C compiler. Visual C++
2.x for the x86 uses a packing of 4 by default. Otherwise, the packing is
specified by /Zp or #pramga pack(). Each element must start on a multiple
of the packing size.
<P>
The following example shows how to pad a structure with a packing of 4.
<P>
<PRE>   typedef struct   // This struct goes in the C code
   {
      char c;
      long l;
   } PADDED_BY_COMPILER_STRUCT;

   typedef struct   // This struct goes in the IDL file
   {
      char c;
      char pad[3];  // Add 3 bytes to align the next field on byte 4
      long l;
   } MANUALLY_PADDED_IDL_STRUCT;

</PRE></OL>Another alternative is to wrap the stub code generated by MIDL with
<P>
<PRE>   #pragma pack(1)

</PRE>Each time MIDL generates the stub code, you must insert #pragma pack
statements into the server stub.
<P>
For example:
<P>
<PRE>   /* File created by MIDL compiler version 2.00.0102 */
   /* at Fri Aug 18 13:48:23 1995
    */
   //@@MIDL_FILE_HEADING(  )

   #pragma pack(1)         // Added to fix MIDL pack problem

   #include &lt;string.h&gt;
   #include "bug.h"

   ... code generated by MIDL ...

   #pragma pack()          // Added to revert to default packing
</PRE> 
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.50 4.00 95 2.00.0102<BR>
KBCategory: kbnetwork kbbuglist kbtool<BR>
KBSubcategory: NtwkRpc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 3, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

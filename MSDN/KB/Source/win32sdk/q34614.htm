

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Lines with a Nonstandard Pattern </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q34614 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1988/08/22">
<META NAME="Keywords" CONTENT="kbgraphic">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The Microsoft Windows graphical environment provides six predefined pens for drawing dotted, dashed, and solid lines. However, an application cannot draw fine gray lines, such as those on a Microsoft Excel spreadsheet, with these pens. This article...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QANO,QBC9,QBC8,QBXT,QA5V,QAIB,QAY5,QBWQ,QBV8,QAB9,QAH4,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating Lines with a Nonstandard Pattern</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q34614 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Windows graphical environment provides six predefined
pens for drawing dotted, dashed, and solid lines. However, an
application cannot draw fine gray lines, such as those on a Microsoft
Excel spreadsheet, with these pens. This article describes how to
create such lines.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An application can use the LineDDA function to produce any type of
patterned line. Based on the endpoints of a line, LineDDA calculates
each point on the line and calls an application-defined callback
function for each point. The callback function is free to use the
calculated points in any manner desired. An application can draw a
gray line similar to those used in Excel by calling the the SetPixel
function in the callback function to draw every other point.
<P>
For example, the following code calculates all points on the line from
coordinates (30, 40) to (100, 100). Then it calls the function pointed
to by the lpfnLineProc variable with the points and the handle to a
device context (hDC) as parameters:
<P>
<PRE>   LineDDA(30, 40, 100, 100, lpfnLineProc, (LPSTR)hDC);

</PRE>For more information on this function, see pages 4-272 and 4-273 of
the "Microsoft Windows Software Development Kit Reference, Volume 1"
for Windows 3.0 or pages 568 and 569 of the "Microsoft Windows
Software Development Kit: Programmer's Reference, Volume 2: Functions"
for Windows 3.1. Charles Petzold's book "Programming Windows 3"
(Microsoft Press, 1990) demonstrates using the LineDDA function in a
programming example on pages 593 through 598.
<P>
The following code fragment draws 50 random Excel-style lines. Note
that the LineProc function must be listed as an EXPORT in the module
definition (DEF) file:
<P>
<PRE>   case WM_PAINT:
      {
      HDC hDC;
      int nIndex;
      PAINTSTRUCT ps;

      hDC = BeginPaint(hWnd, &amp;ps);

      for (nIndex = 0; nIndex &lt; 50; nIndex++)
         LineDDA(rand() / 110, rand() / 110, rand() / 110,
                 rand() / 110, lpfnLineProc, (LPSTR)hDC);

      EndPaint(hWnd, &amp;ps);
      break;
      }

void FAR PASCAL LineProc(x, y, lpData)
</PRE>short x, y;
LPSTR lpData;
{
<PRE>   static short nTemp = 0;

   if (nTemp == 1)
      SetPixel((HDC)lpData, x, y, 0L);

   nTemp = (nTemp + 1) % 2;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95<BR>
KBCategory: kbgraphic<BR>
KBSubcategory: GdiDrw<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: FILE_FLAG_WRITE_THROUGH and FILE_FLAG_NO_BUFFERING </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99794 ">
<META NAME="KBModify" CONTENT="1997/11/26">
<META NAME="KBCreate" CONTENT="1993/06/08">
<META NAME="Keywords" CONTENT="BseFileio">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The FILE_FLAG_WRITE_THROUGH flag for CreateFile() causes any writes made to that handle to be written directly to the file without being buffered. The data is cached (stored in the disk cache); however, it is still written directly to the file. Thi...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH7,QBVV,QAD7,QAH6,QAGI,QBF0,QBFN,QAYY,QDL9,QBWO,QBWN,QA8T,QAHE,QAB5,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: FILE_FLAG_WRITE_THROUGH and FILE_FLAG_NO_BUFFERING</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99794 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.1, 3.5, 3.51, 4.0
   - Microsoft Windows 95 version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The FILE_FLAG_WRITE_THROUGH flag for CreateFile() causes any writes made to
that handle to be written directly to the file without being buffered. The
data is cached (stored in the disk cache); however, it is still written
directly to the file. This method allows a read operation on that data to
satisfy the read request from cached data (if it's still there), rather
than having to do a file read to get the data. The write call doesn't
return until the data is written to the file. This applies to remote writes
as well--the network redirector passes the FILE_FLAG_WRITE_THROUGH flag to
the server so that the server knows not to satisfy the write request until
the data is written to the file.
<P>
The FILE_FLAG_NO_BUFFERING takes this concept one step further and
eliminates all read-ahead file buffering and disk caching as well, so that
all reads are guaranteed to come from the file and not from any system
buffer or disk cache. When using FILE_FLAG_NO_BUFFERING, disk reads and
writes must be done on sector boundaries, and buffer addresses must be
aligned on disk sector boundaries in memory.
<P>
These restrictions are necessary because the buffer that you pass to the
read or write API is used directly for I/O at the device level; at that
level, your buffer addresses and sector sizes must satisfy any processor
and media alignment restrictions of the hardware you are running on.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Windows 95 CDFS (CD-ROM File System) does not support the
FILE_FLAG_NO_BUFFERING flag for CreateFile(). While a Windows 95 FSD, such
as VFAT, may implement it, FILE_FLAG_NO_BUFFERING is not a required flag
for file system drivers, and it is not supported by CDFS.
<P>
This code fragment demonstrates how to sector-align data in a buffer and
pass it to CreateFile():
<P>
<PRE>  char buf[2 * SECTOR_SIZE - 1], *p;

  p = (char *) ((DWORD) (buf + SECTOR_SIZE - 1) &amp; ~(SECTOR_SIZE - 1));
  h = CreateFile(argv[1], GENERIC_READ | GENERIC_WRITE,
      FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CREATE_ALWAYS,
      FILE_ATTRIBUTE_NORMAL | FILE_FLAG_NO_BUFFERING, NULL);
  WriteFile(h, p, SECTOR_SIZE, &amp;dwWritten, NULL);

</PRE>The pointer p is sector-aligned and points within the buffer.
<P>
If you have a situation where you want to flush all open files on the
current logical drive, this can be done by:
<P>
<PRE>   hFile = CreateFile("\\\\.\\c:", ....);
   FlushFileBuffers(hFile);

</PRE>This method causes all buffered write data for all open files on the C:
partition to be flushed and written to the disk. Note that any buffering
done by anything other than the system is not affected by this flush; any
possible file buffering that the C Run-time is doing on files opened with C
Run-time routines is unaffected.
<P>
When opening a remote file over the network, the server always caches and
ignores the no buffering flag specified by the client. This is by design.
The redirector and server cannot properly implement the full semantics of
FILE_FLAG_NO_BUFFERING over the network. In particular, the requirement for
sector-sized, sector-aligned I/O cannot be met. Therefore, when a Win32-
based application asks for FILE_FLAG_NO_BUFFERING, the redirector and
server treat this as a request for FILE_FLAG_WRITE_THROUGH. The file is not
cached at the client, writes go directly to the server and to the disk on
the server, and the read/write sizes on the network are exactly what the
application asks for. However, the file is cached on the server.
<P>
Not caching the client can have a different effect, depending on the type
of I/O. You eliminate the cache hits or read ahead, but you also may reduce
the size of transmits and receives. In general, for sequential I/O, it is a
good idea to cache on the client. For small, random access I/O, it is often
best not to cache.
 
<PRE>Keywords          : BseFileio
Version           : winnt:3.1,3.5,3.51,4.0;
Platform          : Win95 winnt
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

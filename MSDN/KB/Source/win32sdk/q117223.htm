

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Byte-Range File Locking Deadlock Condition </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117223">
<META NAME="KBModify" CONTENT="1997/04/18">
<META NAME="KBCreate" CONTENT="1994/06/22">
<META NAME="Keywords" CONTENT="BseMisc kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  It is possible for a thread in a multithreaded Win32-based application to block while doing a LockFile() or LockFileEx() API call, even when the region of the file the thread has requested is not locked by another thread.  NOTE: If performance-moni...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUQ,QAGI,QABT,QAJQ,QDIT,QBVV,QAJ6,QDMR,QBCH,QALS,QALG,QAK7,QAJH,QAA8,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Byte-Range File Locking Deadlock Condition</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117223</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.1, 3.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
It is possible for a thread in a multithreaded Win32-based application to
block while doing a LockFile() or LockFileEx() API call, even when the
region of the file the thread has requested is not locked by another
thread.
<P>
NOTE: If performance-monitoring tools (such as PERFMON) are used to examine
the status of existing threads and the Thread State indicates that the
thread is waiting and the Thread Wait Reason shows that it is the executive
that the thread is waiting on, this is probably not an indication that a
deadlock has occurred, because threads are often in this state for other
reasons. Also, if the Thread State indicates that the thread is not
waiting, then a deadlock has probably not occurred.
<P>
<P><h2>CAUSE</h2>
 
<P>
There is a small window of time during which a multithreaded application is
vulnerable to this condition. Specifically, if one thread (call it Thread1)
is in the process of unlocking a currently locked byte range within a file
while a second thread (Thread2) is in the process of obtaining a lock on
that same byte range using the same file handle and without specifying the
flag LOCKFILE_FAIL_IMMEDIATELY, Thread1 can block, waiting for the region
to become available. Ordinarily, when unlocking takes place, blocked
threads are released; but in this critical window of time, it is possible
for Thread2 to unlock the byte range without Thread1 being released. Thus,
Thread1 never resumes operation despite the fact that there is no apparent
fault in the logic of the program.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The deadlock condition described above can only come about if multiple
threads are concurrently doing synchronous I/O using the same file handle.
<P>
To avoid the problem, you have three options:

<UL><LI>Each thread can obtain its own handle to the file either through the use
   of the DuplicateHandle() API or through multiple calls to the
   CreateFile() API.
<P>
   -or-

<LI>The threads can perform asynchronous I/O. This also requires the
   application developer to provide some form of explicit synchronization
   to coordinate access to the file by the threads.
<P>
   -or-

<LI>The threads can specify LOCKFILE_FAIL_IMMEDIATELY and then loop until a
   retry succeeds if the lock request fails. This option is the least
   desirable because it incurs significant CPU use overhead.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about threads, files, and file handles, see the
following sections in the "Win32 SDK Programmer's Reference," volume 2,
part 3, "System Services":

<UL><LI>Chapter 43.1.6, "Synchronizing Execution of Multiple Threads"

<LI>Chapter 45.2.2, "Reading, Writing, and Locking Files"

<LI>Chapter 48.3, "Kernel Objects"
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : BseMisc kbprg<BR>
Version             : 3.10 3.50<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

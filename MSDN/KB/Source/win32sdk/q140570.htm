

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Moving Files That Are Currently in Use </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140570">
<META NAME="KBModify" CONTENT="1997/04/11">
<META NAME="KBCreate" CONTENT="1995/12/04">
<META NAME="Keywords" CONTENT="BseFileio kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Sometimes Win32 applications need to delete, rename, or move files that are currently being used by the system. One common example is that setup programs need to remove themselves from the user's hard disk when they are finished setting up a softwa...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEF,QANJ,QACI,QA9N,QAFI,QAUJ,QBXB,QATJ,QAGB,QBWP,QAGC,QDKD,QAJH,QBCT,QAJP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Moving Files That Are Currently in Use</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140570</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows 95
   - Microsoft Windows NT versions 3.51, 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sometimes Win32 applications need to delete, rename, or move files that are
currently being used by the system. One common example is that setup
programs need to remove themselves from the user's hard disk when they are
finished setting up a software package. Sometimes, they also need to move
device drivers that are currently being used by the system. Applications
need help from the operating system to delete or move these files.
<P>
Windows 95 and Windows NT each provide a unique method for helping
applications to remove, replace, or rename files and directories that are
in use. Although the two platforms differ in how they implement these
methods, both share an overall strategy where the application specifies
which files to process, and the system processes them when it reboots. This
article explains how applications can use the method provided by each
Windows platform.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Moving Files in Windows NT</h3>
 
<P>
Win32-based applications running on Windows NT should use MoveFileEx() with
the MOVEFILE_DELAY_UNTIL_REBOOT flag to move, replace, or delete files and
directories currently being used. The next time the system is rebooted, the
Windows NT bootup program will move, replace, or delete the specified files
and directories.
<P>
To move or replace a file or directory that is in use, an application must
specify both a source and destination path on the same volume (for example,
drive C:). If the destination path is an existing file, it will be
overwritten. If the destination path is an existing directory, it will not
be overwritten and both the source and destination paths will remain
unchanged. Here is an example call to move or replace a file or move a
directory:
<P>
<PRE>   // Move szSrcFile to szDstFile next time system is rebooted
   MoveFileEx(szSrcFile, szDstFile, MOVEFILE_DELAY_UNTIL_REBOOT);

</PRE>To delete a file or directory, the application must set the destination
path to NULL. If the source path is a directory, it will be removed only if
it is empty. Note that if you must use MoveFileEx() to remove files from a
directory, you must reboot the computer before you can call MoveFileEx() to
remove the directory. Here is an example of how to delete a file or empty a
directory:
<P>
<PRE>   // Delete szSrcFile next time system is rebooted
   MoveFileEx(szSrcFile, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);

</PRE><h3>Moving Files in Windows 95</h3>
 
<P>
Windows 95 does not implement MoveFileEx(), but does provide an alternate
way for all Win32-based, 16-bit Windows-based, and MS-DOS-based
applications to move, replace, or delete files (but not directories) that
are currently in use. This capability is implemented through the [rename]
section of a file named Wininit.ini. If Wininit.ini is present in the
Windows directory, Wininit.exe processes it when the system boots. Once
Wininit.ini has been processed, Wininit.exe renames it to Wininit.bak.
<P>
The syntax of the [rename] section is:
<P>
<PRE>   DestinationFileName=SourceFileName

</PRE>DestinationFileName and SourceFileName must reside on the same volume and
be short (8.3) file names because Wininit.ini is processed before the
protected mode disk system is loaded, and long file names are only
available when the protected mode disk system is running. Destination and
source files specified in Wininit.ini with long file names are ignored.
<P>
The [rename] section can have multiple lines with one file per line. To
delete a file, specify NUL as the DestinationFileName. Here are some entry
examples:
<P>
<PRE>   [rename]
   NUL=C:\TEMP.TXT
   C:\NEW_DIR\EXISTING.TXT=C:\EXISTING.TXT
   C:\NEW_DIR\NEWNAME.TXT=C:\OLDNAME.TXT
   C:\EXISTING.TXT=C:\TEMP\NEWFILE.TXT

</PRE>The first line causes Temp.txt to be deleted. The second causes
Existing.txt to be moved to a new directory. The third causes Oldname.txt
to be moved and renamed. The fourth causes an existing file to be
overwritten by Newfile.txt.
<P>
Applications should not use WritePrivateProfileString() to write entries to
the [rename] section because there can be multiple lines with the same
DestinationFileName, especially if DestinationFileName is "NUL." Instead,
they should add entries by parsing Wininit.ini and appending the entries to
the end of the [rename] section.
<P>
NOTE: Always use a case-insensitive search to parse Wininit.ini because the
title of the [rename] section and the file names inside it may have any
combination of uppercase and lowercase letters.
<P>
Applications that use Wininit.ini should check for its existence in the
Windows directory. If Wininit.ini is present, then another application has
written to it since the system was last restarted. Therefore, the
application should open it and add entries to the [rename] section. If
Wininit.ini isn't present, the application should create it and add to the
[rename] section. Doing so ensures that entries from other applications
won't be deleted accidentally by your application.
<P>
To undo a file rename operation before the system is rebooted, you must
remove the corresponding line from the [rename] section of the Wininit.ini
file.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 95 update install setup<BR>
Keywords            : BseFileio kbprg<BR>
Version             : 3.51 4.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

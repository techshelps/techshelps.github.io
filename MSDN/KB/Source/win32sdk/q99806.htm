

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mirroring Main Menu with TrackPopupMenu() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99806 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/06/08">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  A developer may want to use TrackPopupMenu() to display the same menu that is used by the main window. TrackPopupMenu() takes a pop-up menu, while GetMenu() and LoadMenu() both return handles to top level menus, and therefore you cannot use the men...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAF0,QAMA,QBWR,QDL9,QBWO,QBWN,QAUD,QAJQ,QAVI,QBFY,QAH4,QAEF,QBSO,QBQU,QBJZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Mirroring Main Menu with TrackPopupMenu()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99806 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A developer may want to use TrackPopupMenu() to display the same menu
that is used by the main window. TrackPopupMenu() takes a pop-up menu,
while GetMenu() and LoadMenu() both return handles to top level menus,
and therefore you cannot use the menus returned from these functions
with TrackPopupMenu(). To "mirror" the main menu, you must create
pop-up menus with the same strings, style, and IDs as the main menu.
To do this, use the following Windows APIs:
<P>
<PRE>   GetMenu()
   CreatePopupMenu()
   GetMenuState()
   GetMenuString()
   GetSubMenu()
   AppendMenu()

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The following code displays the same menu as the main window when the
right mouse button is clicked:
<P>
<PRE>// In the main window procedure...

    case WM_RBUTTONDOWN:
    {

           HMENU hMenu;            // The handle to the main menu.
           int nMenu;              // The index of the menu item.
           POINT pt;             // The point to display the track menu.
           HMENU hMenuOurs;        // The pop-up menu that we are creating.
           UINT nID;             // The ID of the menu.
           UINT uMenuState;        // The menu state.
           HMENU hSubMenu;        // A submenu.
           char szBuf[128];        // A buffer to store the menu string.

// Get the main menu.
           hMenu = GetMenu(hWnd);
           nMenu = 0;

// Create a pop-up menu.
           hMenuOurs = CreatePopupMenu();

// Get menu state will return the style of the menu
// in the lobyte of the unsigned int. Return value
// of -1 indicates the menu does not exist, and we
// have finished creating our pop up.
           while ((uMenuState =
              GetMenuState(hMenu,nMenu,MF_BYPOSITION)) != -1)
           {
                if (uMenuState != -1)
                {
// Get the menu string.
              GetMenuString(hMenu,nMenu, szBuf,128,MF_BYPOSITION);
                    if (LOBYTE(uMenuState) &amp; MF_POPUP) // It's a pop-up
</PRE>menu.
<PRE>                    {
                        hSubMenu = GetSubMenu(hMenu,nMenu);
                           AppendMenu(hMenuOurs,
                    LOBYTE(uMenuState),hSubMenu,szBuf);
                    }
                    else  // Is a menu item, get the ID.
                    {
                        nID = GetMenuItemID(hMenu,nMenu);
                        AppendMenu(hMenuOurs,LOBYTE(uMenuState),nID,szBuf);

                    }
                    nMenu++;  // Get the next item.
                }
        }
        pt = MAKEPOINT(lParam);
// TrackPopupMenu expects screen coordinates.
        ClientToScreen(hWnd,&amp;pt);
           TrackPopupMenu(hMenuOurs,
          TPM_LEFTALIGN|TPM_RIGHTBUTTON,
          pt.x,pt.y,0,hWnd,NULL);

// Because we are using parts of the main menu in our
// pop-up menu, we can't just delete the pop-up menu, because
// that would also delete the main menu. So we must
// go through the pop-up menu and remove all the items.
        while (RemoveMenu(hMenuOurs,0,MF_BYPOSITION))
            ;

// Destroy the pop-up menu.
        DestroyMenu(hMenuOurs);
    }
    break;

</PRE>If the menu is never dynamically modified, then the menu hMenuOurs
could be made static and created inside the WM_CREATE message, and
destroyed in the WM_DESTROY message.
<P>
To see how this function works, paste this code into the MENU sample
application shipped with both Microsoft Visual C/C++ and Microsoft
C/C++ version 7.0 in the file MENU.C in the MenuWndProc() function.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 3.51 4.00 95  popup<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrMen<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

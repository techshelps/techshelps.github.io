

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Select a Listview Item Programmatically in Windows 95 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131284">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/06/07">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Selecting a listview item in Windows 95 is not as easy as selecting a list box item was in Windows version 3.1. To select a list box item in Windows version 3.1, an application sends an LB_SETCURSEL or LB_SETSEL to a single- or multiple-selection l...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA2Q,QDL9,QBWO,QBWN,QBWQ,QBVR,QAH4,QAG2,QAGI,QAJH,QAML,QALS,QAH6,QBWS,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Select a Listview Item Programmatically in Windows 95</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131284</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.3
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Selecting a listview item in Windows 95 is not as easy as selecting a list
box item was in Windows version 3.1. To select a list box item in Windows
version 3.1, an application sends an LB_SETCURSEL or LB_SETSEL to a single-
or multiple-selection list box respectively. To select a listview item in
Windows 95, an application sends an LVM_SETITEMSTATE message or calls the
ListView_SetItemState() macro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An application can force a selection of a listview item. You might want the
application to do this when a user clicks a column other than the first
column of a listview of multiple subitems or columns.
<P>
Currently, a listview item is selected only when the user clicks the first
column of that item. However, you many want the application to select the
item regardless of which column in the listview is clicked.
<P>
Windows 95 does not provide a separate message or function to set the
current selection in a listview. Instead, it defines item states or LVIS_*
values that determine the listview item's appearance and functionality.
LVIS_FOCUSED and LVIS_SELECTED in particular are the states that determine
a listview item's selection state.
<P>
To select a listview item programmatically, an application sets the
listview item's state as follows:
<P>
<PRE>   ListView_SetItemState (hWndListView,         // handle to listview
                          iWhichItem,         // index to listview item
                          LVIS_FOCUSED | LVIS_SELECTED, // item state
                          0x000F);                      // mask

</PRE>Note that the last parameter passed to this macro is a mask specifying
which bits are about to change. LVIS_FOCUSED and LVIS_SELECTED are defined
in &lt;commctrl.h&gt; as 0x0001 and 0x0002 respectively, so you need to set the
last four bits of the mask.
<P>
The same principle applies to selecting a treeview item programmatically.
The only difference is that an application sends a TVM_SETITEM message or
calls the TreeView_SetItem() macro.
<P>
Because listviews allow multiple selection by default, you can program an
application to select multiple items by simulating a CTRL keydown (or SHIFT
keydown event) prior to setting the item state. For example, the following
code simulates the pressing of the CTRL key:
<P>
<PRE>   BYTE  pbKeyState [256];

   GetKeyboardState ((LPBYTE)&amp;pbKeyState);
   pbKeyState[VK_CONTROL] |= 0x80;
   SetKeyboardState ((LPBYTE)&amp;pbKeyState);

</PRE>Note that if an application simulates a keypress, it must also be
responsible for releasing it by resetting the appropriate bit. For example,
the following code simulates the release of a CTRL key:
<P>
<PRE>   BYTE  pbKeyState [256];

   GetKeyboardState ((LPBYTE)&amp;pbKeyState);
   pbKeyState[VK_CONTROL] = 0;
   SetKeyboardState ((LPBYTE)&amp;pbKeyState);

</PRE>Similarly, retrieving the currently selected item in a listview control
in Windows 95 is not as easy as sending an LB_GETCURSEL message to a
listbox control was in Windows version 3.1.
<P>
For listviews, call the ListView_GetNextItem() function with the
LVNI_SELECTED flag specified:
<P>
<PRE>   iCurSel = ListView_GetNextItem (ghwndLV, -1, LVNI_SELECTED);

</PRE>For treeviews, retrieve the currently selected item by calling the
TreeView_GetNextItem() function  with the TVGN_CARET flag
specified or by calling the TreeView_GetSelection() macro directly:
<P>
<PRE>   iCurSel = TreeView_GetNextItem (ghwndTV, NULL, TVGN_CARET);
      or
   iCurSel = TreeView_GetSelection (ghwndTV);
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 1.30<BR>
KBCategory: kbui kbcode<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

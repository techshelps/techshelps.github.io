

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Share Data Between Different Mappings of a DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125677">
<META NAME="KBModify" CONTENT="1998/03/17">
<META NAME="KBCreate" CONTENT="1995/02/01">
<META NAME="Keywords" CONTENT="BseMisc">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Under certain circumstances, 32-bit DLLs might have to share data with other 32-bit DLLs loaded by a different application or with different mappings of the same DLL. Because 32-bit DLLs are mapped into the calling process's address space, which is...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3A,QAYY,QA0K,QAY4,QAC2,QAYL,QAJQ,QAJH,QBXT,QDNN,QAHT,QBW5,QAH4,QAR5,QA5V V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Share Data Between Different Mappings of a DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125677</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
   - Microsoft Windows NT versions 3.51, 4.0
<P>
   - Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Under certain circumstances, 32-bit DLLs might have to share data with
other 32-bit DLLs loaded by a different application or with different
mappings of the same DLL. Because 32-bit DLLs are mapped into the calling
process's address space, which is private, sharing data with other DLLs
mapped into the address spaces of different applications involves creating
shared data section(s) or using memory mapped files. This article discusses
the former -- creating shared data sections by using the #pragma statement.
Typically, system-wide hooks installed in a DLL need to share some common
data among different mappings.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Each Win32-based application runs in its own private address space. If a 32-
bit application installs a system-wide hook with the hook callback function
in a DLL, this DLL is mapped into the address space of every application
for which the hook event occurred.
<P>
Every application that the DLL gets mapped into, gets its own set of
variables (data). Often there will be a scenario where hook callback
functions mapped into different application or process address spaces need
to share some data variables -- such as HHOOK or a Window Handle -- among
all mappings of the DLL.
<P>
Because each application's address space is private, DLLs with hook
callback functions mapped into one application's address spaces cannot
share data (variables) with other hook callback functions mapped into a
different application's address space unless a shared data SECTION exists
in the DLL.
<P>
Every 32-bit DLL (or EXE) is composed of a collection of sections. By
convention, each section name begins with a period. (The period is not
required.) These sections can have the following attributes: READ,
WRITE, SHARED, and EXECUTE.
<P>
DLLs that need to share data among different mappings can use the #pragma
pre-processor command in the DLL source file to create a shared data
section that contains the data to be shared.
<P>
The following sample code shows by example how to define a named-data
section (.shared) in a DLL.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   #pragma data_seg(".shared")
   int iSharedVar = 0;
   #pragma data_seg()

</PRE>The first line directs the compiler to place all the data declared in this
section into the .shared data segment. Therefore, the iSharedVar variable
is stored in the .shared segment. By default, data is not shared. Note that
you must initialize all data in the named section. The data_seg pragma
applies only to initialized data. The third line, #pragma data_seg(),
resets allocation to the default data section.
<P>
If one application makes any changes to variables in the shared data
section, all mappings of this DLL will reflect the same changes, so you
need to be careful when dealing with shared data in applications or DLLs.
<P>
You must also tell the linker that the variables in the section you defined
are to be shared by modifying your .DEF file to include a SECTIONS section
or by specifying /SECTION:.shared,RWS in your link line. Here's an example
SECTIONS section:
<P>
<PRE>   SECTIONS
   .shared   READ WRITE SHARED

</PRE>Alternatively, some compilers allow you to set the linker switch in your
code so that if your file is ever copied to another project, the linker
switch goes with it. To do this, include the following line in your code
preferably near the #pragma data_seg(".shared") line:
<P>
<PRE>   #pragma comment(linker, "/SECTION:.shared,RWS")

</PRE>Be careful not to include any extraneous spaces inside the quotation marks
because this may cause the linker to misinterpret the directive. In the
case of a typical hook DLL, the HHOOK, HINSTDLL, and other variables can go
into the shared data section.
<P>
<P><h2>REFERERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q100634.htm">Q100634</A></B>
   TITLE     : HOWTO: Specify Shared and Nonshared Data in a DLL

   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q100292.htm">Q100292</A></B>
   TITLE     : PRB: Data Section Names Limited to Eight Characters
</PRE> 
<PRE>Keywords          : BseMisc
Version           : WIN95; WINNT:3.51,4.0;
Platform          : Win95 winnt
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Implementing Multiple Threads in an OpenGL Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128122">
<META NAME="KBModify" CONTENT="1996/08/05">
<META NAME="KBCreate" CONTENT="1995/03/27">
<META NAME="Keywords" CONTENT="kbgraphic kbfile kbcode kbwebcontent">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  It is possible to create multiple threads in an OpenGL application and have each thread call OpenGL functions to draw an image. You might want to do this when multiple objects need to be drawn at the same time or when you want to have certain threa...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAUQ,QAIF,QDJU,QAJZ,QAMA,QAB5,QBSO,QBRD,QAXQ,QAPF,QAVI,QA4F,QAMJ,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Implementing Multiple Threads in an OpenGL Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 5, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128122</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.1, 3.5, and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is possible to create multiple threads in an OpenGL application and have
each thread call OpenGL functions to draw an image. You might want to do
this when multiple objects need to be drawn at the same time or when you
want to have certain threads perform the rendering of specific types of
objects.
<P>
This article explains how to obtain GLTHREAD, a sample that demonstrates
how to implement multiple threads in an OpenGL application. The main
process default thread creates two threads that each draw a
three-dimensional wave on the main window. The first thread draws a wave on
the left side of the screen. The second thread draws a wave on the right
side of the screen. Both objects are drawn simultaneously, demonstrating
OpenGL's ability to handle multiple threads.
<P>
<P><h3>How to Get the GLTHREAD Sample</h3>
 
<P>
Download GLTHREAD.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/GLTHREAD.EXE">GLTHREAD.EXE</A> <I>(size: 28232 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/GLTHREAD.EXE">GLTHREAD.EXE</A> <I>(size: 28232 bytes)</I> 
</PRE><P>
</UL>MORE INFORMATION
 
<P>
When implementing multiple threads in any type of application, it is
important to have adequate communication between threads. In OpenGL, it is
important for two threads to know what the other thread is doing. For
example, it is common practice to clear the display window before drawing
an OpenGL scene. If both threads are called to draw portions of a scene and
they both try to call glClear before drawing, one thread's object may get
erased by another thread's call to glClear.
<P>
The GLTHREAD sample assigns the glClear function to a single thread, and
ensures that the other thread does not perform any drawing until glClear
has been called. When a menu command message is sent to the main window,
the application calls CreateThread twice to create two threads. Each thread
calls GetDC(hwndMain) to obtain its own device context to the main window.
<P>
Then, each thread calls GLTHREAD's bSetupPixelFormat function to set up the
pixel format and calls wglCreateContext to create a new OpenGL Rendering
Context. Now, each thread has its own Rendering Context and both can call
wglMakeCurrent to make its new OpenGL rendering context its (the calling
thread's) current rendering context.
<P>
All subsequent OpenGL calls made by the thread are drawn on the device
identified by the HDC returned from each thread's call to GetDC(). Now,
because only one thread should call glClear, GLTHREAD has thread number one
call it. The second thread is created "suspended" so it does nothing until
a call to ResumeThread is made. After thread one has called glClear, it
enables thread two to resume by calling ResumeThread with a handle to the
second thread.
<P>
The procedure in the main thread that created the two other threads waits
until both threads are finished before returning from the processing of the
menu command message that is sent when the user selects the "Draw Waves"
menu selection from the "Test Threads" menu. It will use the
WaitForMultipleObjects function to do this.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95  GDI GRAPHICS THREADS<BR>
KBCategory: kbgraphic kbfile kbcode kbwebcontent<BR>
KBSubcategory: codesam GdiDrwOpenGL
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 5, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

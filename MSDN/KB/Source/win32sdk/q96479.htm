

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Retrieval in a DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96479 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/03/18">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  When a function in a dynamic-link library (DLL) retrieves messages on behalf of a calling application, the following must be addressed:   - The application and the DLL may be re-entered.  - The application can terminate while in the DLL's message r...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAEV,QAUD,QAYC,QAY5,QAJH,QAIF,QALW,QDL9,QBWO,QBWN,QDNN,QBV8,QAB9,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Message Retrieval in a DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96479 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When a function in a dynamic-link library (DLL) retrieves messages on
behalf of a calling application, the following must be addressed:

<UL><LI>The application and the DLL may be re-entered.
<LI>The application can terminate while in the DLL's message retrieval
   loop.
<LI>The DLL must allow the application to preprocess any messages that
   may be retrieved.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following concerns arise when a function in a DLL retrieves
messages by calling GetMessage or PeekMessage:

<UL><LI>When the DLL function retrieves, translates, and dispatches
   messages, the calling application and the DLL function may be re-
   entered. This is because message retrieval can cause the calling
   application to respond to user input while waiting for the DLL
   function to return. The DLL function can return a reentrancy error
   code if this happens. To prevent reentrancy, disable windows and
   menu-items, or use a filter in the GetMessage or PeekMessage call
   to retrieve specific messages.

<LI>The application can terminate while execution is in the DLL
   function's message retrieval loop. The WM_QUIT message retrieved by
   the DLL must be re-posted and the DLL function must return to the
   calling application. This allows the calling application's message
   retrieval loop to retrieve WM_QUIT and terminate.

<LI>When the DLL retrieves messages, it must allow the calling
   application to preprocess the messages (to call
   TranslateAccelerator, IsDialogMessage, and so forth) if required.
   This is be done by using CallMsgFilter to call any WH_MSGFILTER
   hook that the application may have installed.
<P>
</UL>The following code shows a message retrieval loop in a DLL function
that waits for a PM_COMPLETE message to signal the end of processing:
<P>
while (notDone)
{
<PRE>   GetMessage(&amp;msg, NULL, 0, 0);

   // PM_COMPLETE is a WM_USER message that is posted when
   // the DLL function has completed.
   if (msg.message == PM_COMPLETE)
   {
      Clean up and set result variables;
      return COMPLETED_CODE;
   }
   else if (msg.message == WM_QUIT)  // If application has terminated...
   {
      // Repost WM_QUIT message and return so that calling
      // application's message retrieval loop can exit.
      PostQuitMessage(msg.wParam);
      return APP_QUIT_CODE;
   }

   // The calling application can install a WH_MSGFILTER hook and
   // preprocess messages when the nCode parameter of the hook
   // callback function is MSGF_MYHOOK. This allows the calling
   // application to call TranslateAccelerator, IsDialogMessage, etc.
   if (!CallMsgFilter(&amp;msg, MSGF_MYHOOK))
   {
      TranslateMessage(&amp;msg);
      DispatchMessage(&amp;msg);
   }

   :
   :
</PRE>}
<P>
Define MSGF_HOOK to a value greater than or equal to MSGF_USER defined
in WINDOWS.H to prevent collision with values used by Windows.
<P>
<P><h3>Preprocessing Messages in the Calling Application</h3>
 
<P>
The calling application can install a WH_MSGFILTER hook to preprocess
messages retrieved by the DLL. It is not required for the calling
application to install such a hook if it does not want to preprocess
messages.
<P>
<PRE>   lpfnMsgFilterProc = MakeProcInstance((FARPROC)MsgFilterHookFunc,
                                          ghInst);
   hookprocOld = SetWindowsHook(WH_MSGFILTER, lpfnMsgFilterProc);
   // Call the function in the DLL.
   DLLfunction();
   UnhookWindowsHook(WH_MSGFILTER, lpfnMsgFilterProc);
   FreeProcInstance(lpfnMsgFilterProc);

</PRE>MsgFilterHookFunc is the hook callback function:
<P>
LRESULT CALLBACK MsgFilterHookFunc(int nCode, WPARAM wParam,
<PRE>                                   LPARAM lParam)
{
   if (nCode &lt; 0)
      return DefHookProc(nCode, wParam, lParam, &amp;hookprocOld);

   // If CallMsgFilter is being called by the DLL.
   if (nCode == MSGF_MYHOOK)
   {
      Preprocess message (call TranslateAccelerator,
          IsDialogMessage etc.);
      return 0L if the DLL is to call TranslateMessage and
          DispatchMessage. Return 1L if TranslateMessage and
          DispatchMessage are not to be called.
   }
   else return 0L;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 3.51 4.00 95  yield<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrMsg<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

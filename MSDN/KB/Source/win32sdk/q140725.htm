

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: Incorrect DialogBoxIndirect() Code in Win32 SDK Docs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140725">
<META NAME="KBModify" CONTENT="1997/04/07">
<META NAME="KBCreate" CONTENT="1995/12/06">
<META NAME="Keywords" CONTENT="UsrDlgs kbcode kbdocerr kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT=" Note: This docerr is fixed in Windows NT version 4.0 beta documents.   The Win32 SDK documentation demonstrates how to create a template in memory for a modal dialog box by using DialogBoxIndirect() in a section called  Creating a Template in Memory...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBWP,QAUD,QA01,QAB5,QA7O,QAOE,QAMN,QAD7,QAMB,QBE7,QBE6,QA5D,QAI4,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: Incorrect DialogBoxIndirect() Code in Win32 SDK Docs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140725</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>4.00    | 3.51
</PRE>WINDOWS | WINDOWS NT
kbprg kbdocerr kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) for:
<P>
<P><PRE>    - Window 95
    - Windows NT version 3.51
</UL></PRE> 
<P>
Note: This docerr is fixed in Windows NT version 4.0 beta documents.
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Win32 SDK documentation demonstrates how to create a template in memory
for a modal dialog box by using DialogBoxIndirect() in a section called
"Creating a Template in Memory." The code included in this section of the
documentation has problems in Windows 95 and Windows NT version 3.51, which
may cause the dialog box to come up with only one control or may cause
DialogBoxIndirect() to return -1, indicating failure.
<P>
The same problems occur if the call to DialogBoxIndirect() is replaced with
CreateDialogIndirect().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are four problems with the DialogBoxIndirect() code. The corrected
code appears at the end of this article.

<OL><P><LI>The code was intended to bring up a modal dialog box that contains a
   static control (an OK button) and a Help button. However, because of two
   conflicting lines of code that were supposed to set the DLGTEMPLATE
   struct's cdit member to the number of controls in the dialog box, the
   system is made to think there is only one control in the dialog.
<P>
   lpdt-&gt;cdit = 3;  // number of controls
   lpdt-&gt;cdit = 1;
<P>
   As is, the code works when pasted into an application, although the
   dialog box comes up with only the OK button and the other two controls
   are not shown. The second line should be removed because the dialog box
   actually contains three controls, not one. However, doing this while
   leaving the rest of the code as is causes no dialog box to come up and
   DialogBoxIndirect() returns -1 as a result of two other problems
   described in this article.

<P><LI>The DLGTEMPLATE structure passed to the DialogBoxIndirect or
   CreateDialogIndirect() functions is followed by one or more
   DLGITEMTEMPLATE structures. These DLGITEMTEMPLATE structures need to
   be DWORD aligned. Calling the following lpwAlign() function will do just
   that:
<P>
<PRE>   /*
      Helper routine.  Take an input pointer, return closest
      pointer that is aligned on a DWORD (4 byte) boundary.
   */
   LPWORD lpwAlign ( LPWORD lpIn)
   {
      ULONG ul;

      ul = (ULONG) lpIn;
      ul +=3;
      ul &gt;&gt;=2;
      ul &lt;&lt;=2;
      return (LPWORD) ul;
   }


</PRE><P><LI>The help button and the static control have identical (x,y) coordinates
   as well as width and height (cx,cy):
<P>
   lpdit-&gt;x  = 55; lpdit-&gt;y  = 10;
   lpdit-&gt;cx = 40; lpdit-&gt;cy = 20;
<P>
   This causes the static control to overlap the help button. You need to
   adjust these values accordingly so that they both show up in the dialog
   box. The following code shows how the modified code looks like so far.
   Note the calls to the lpwAlign function each time  a DLGITEMTEMPLATE
   structure is added. This works fine in Windows NT version 3.51.
<P>
<PRE>   #define ID_HELP   150
   #define ID_TEXT   200
   LRESULT DisplayMyMessage(HINSTANCE hinst, HWND hwndOwner,
      LPSTR lpszMessage)
   {

    HGLOBAL hgbl;
    LPDLGTEMPLATE lpdt;
    LPDLGITEMTEMPLATE lpdit;
    LPWORD lpw;
    LPWSTR lpwsz;
    LRESULT ret;

    hgbl = GlobalAlloc(GMEM_ZEROINIT, 1024);
    if (!hgbl)
        return -1;

    lpdt = (LPDLGTEMPLATE)GlobalLock(hgbl);

    // Define a dialog box.

    lpdt-&gt;style = WS_POPUP | WS_BORDER | WS_SYSMENU
                | DS_MODALFRAME | WS_CAPTION;
    lpdt-&gt;cdit = 3;  // number of controls
//  lpdt-&gt;cdit = 1;  // COMMENTED OUT -- unnecessary code

    lpdt-&gt;x  = 10;  lpdt-&gt;y  = 10;
    lpdt-&gt;cx = 100; lpdt-&gt;cy = 100;

    lpw = (LPWORD) (lpdt + 1);
    *lpw++ = 0;   // no menu
    *lpw++ = 0;   // predefined dialog box class (by default)

    lpwsz = (LPWSTR) lpw;
    lstrcpyW(lpwsz, L"My Message");  // dialog title (Unicode)
    lpw = (LPWORD) (lpwsz + lstrlenW(lpwsz) + 1);

    //-----------------------
    // Define an OK button.
    //-----------------------
    lpw = lpwAlign (lpw);
    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 10; lpdit-&gt;y  = 70;
    lpdit-&gt;cx = 80; lpdit-&gt;cy = 20;
    lpdit-&gt;id = IDOK;  // OK button identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0080;    // button class

    lpwsz = (LPWSTR) lpw;
    lstrcpyW(lpwsz, L"OK");  // button label (Unicode)
    lpw = (LPWORD) (lpwsz + lstrlenW(lpwsz) + 1);
    *lpw++ = 0;              // no creation data

    //-----------------------
    // Define a Help button.
    //-----------------------
    lpw = lpwAlign (lpw);

    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 55; lpdit-&gt;y  = 10;
    lpdit-&gt;cx = 40; lpdit-&gt;cy = 20;
    lpdit-&gt;id = ID_HELP;    // Help button identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0080;                 // button class atom
    lpwsz = (LPWSTR) lpw;
    lstrcpyW(lpwsz, L"Help");        // button label (Unicode)
    lpw = (LPWORD) (lpwsz + lstrlenW(lpwsz) + 1);
    *lpw++ = 0;                      // no creation data

    //-----------------------
    // Define a static text control.
    //-----------------------
    lpw = lpwAlign (lpw);

    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 10; lpdit-&gt;y  = 10;    // Changed this from (55,10)
    lpdit-&gt;cx = 40; lpdit-&gt;cy = 20;
    lpdit-&gt;id = ID_TEXT;  // text identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | SS_LEFT;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0082;                         // static class

    for (lpwsz = (LPWSTR)lpw;
        *lpwsz++ = (WCHAR) *lpszMessage++;
        );
    lpw = (LPWORD)lpwsz;
    *lpw++ = 0;                              // no creation data

    GlobalUnlock(hgbl);
    ret = DialogBoxIndirect(hinst,
                            (LPDLGTEMPLATE) hgbl,
                            hwndOwner, (DLGPROC) DialogProc);
    GlobalFree(hgbl);

    return ret;
   }


</PRE><P><LI>As previously stated, this modified code works fine in Windows NT 3.51.
   In Windows 95, however, the dialog box and the controls come up, but
   with no text for the help and OK buttons or for the dialog box.
<P>
   Notice how the text in the code copies the text onto the memory block
   using lstrcpyW(), which is not implemented in Windows 95, so it returns
   ERROR_NOT_IMPLEMENTED. To generate Unicode strings in Windows 95, the
   application must use MultiByteToWideChar().
<P>
   Following is the modified code that works in Windows 95:
<P>
<PRE>   #define ID_HELP   150
   #define ID_TEXT   200
   LRESULT DisplayMyMessage(HINSTANCE hinst, HWND hwndOwner,
      LPSTR lpszMessage)
   {

    HGLOBAL hgbl;
    LPDLGTEMPLATE lpdt;
    LPDLGITEMTEMPLATE lpdit;
    LPWORD lpw;
    LPWSTR lpwsz;
    LRESULT ret;
    hgbl = GlobalAlloc(GMEM_ZEROINIT, 1024);
    if (!hgbl)
        return -1;

    lpdt = (LPDLGTEMPLATE)GlobalLock(hgbl);

    // Define a dialog box.

    lpdt-&gt;style = WS_POPUP | WS_BORDER | WS_SYSMENU
                   | DS_MODALFRAME | WS_CAPTION;
    lpdt-&gt;cdit = 3;  // number of controls
    lpdt-&gt;x  = 10;  lpdt-&gt;y  = 10;
    lpdt-&gt;cx = 100; lpdt-&gt;cy = 100;

    lpw = (LPWORD) (lpdt + 1);
    *lpw++ = 0;   // no menu
    *lpw++ = 0;   // predefined dialog box class (by default)

    lpwsz = (LPWSTR) lpw;
    nchar = 1+ MultiByteToWideChar (CP_ACP, 0, "My Dialog", -1, lpwsz, 50);
    lpw   += nchar;

    //-----------------------
    // Define an OK button.
    //-----------------------
    lpw = lpwAlign (lpw);

    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 10; lpdit-&gt;y  = 70;
    lpdit-&gt;cx = 80; lpdit-&gt;cy = 20;
    lpdit-&gt;id = IDOK;  // OK button identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0080;    // button class

    lpwsz = (LPWSTR) lpw;
    nchar = 1+MultiByteToWideChar (CP_ACP, 0, "OK", -1, lpwsz, 50);
    lpw   += nchar;
    *lpw++ = 0;              // no creation data

    //-----------------------
    // Define a Help button.
    //-----------------------
    lpw = lpwAlign (lpw);

    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 55; lpdit-&gt;y  = 10;
    lpdit-&gt;cx = 40; lpdit-&gt;cy = 20;
    lpdit-&gt;id = 101; //ID_HELP;    // Help button identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0080;                 // button class atom


    lpwsz = (LPWSTR) lpw;
    nchar = 1+MultiByteToWideChar (CP_ACP, 0, "Help", -1, lpwsz, 50);
    lpw   += nchar;
    *lpw++ = 0;                      // no creation data

    //-----------------------
    // Define a static text control.
    //-----------------------
    lpw = lpwAlign (lpw);

    lpdit = (LPDLGITEMTEMPLATE) lpw;
    lpdit-&gt;x  = 10; lpdit-&gt;y  = 10;
    lpdit-&gt;cx = 40; lpdit-&gt;cy = 20;
    lpdit-&gt;id = 200; //ID_TEXT;  // text identifier
    lpdit-&gt;style = WS_CHILD | WS_VISIBLE | SS_LEFT;

    lpw = (LPWORD) (lpdit + 1);
    *lpw++ = 0xFFFF;
    *lpw++ = 0x0082;                         // static class

    for (lpwsz = (LPWSTR)lpw;
        *lpwsz++ = (WCHAR) *lpszMessage++;
       );

    lpw = (LPWORD)lpwsz;
    *lpw++ = 0;                              // no creation data

    GlobalUnlock(hgbl);
    ret = DialogBoxIndirect(hinst,
                            (LPDLGTEMPLATE) hgbl,
                            hwndOwner,
                            (DLGPROC) DialogProc);
    GlobalFree(hgbl);

    return ret;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbprg kbdocerr kbcode<BR>
KBSubcategory: UsrDlgs<BR>
Keywords            : UsrDlgs kbcode kbdocerr kbprg<BR>
Version             : 4.00    | 3.51<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

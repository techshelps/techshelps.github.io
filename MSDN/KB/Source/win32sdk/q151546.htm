

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Change Passwords Programmatically in Windows NT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151546">
<META NAME="KBModify" CONTENT="1996/10/21">
<META NAME="KBCreate" CONTENT="1996/05/24">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes how to change passwords on accounts in Windows NT programmatically. Net function calls are used to accomplish this task.  MORE INFORMATION  There are several considerations that apply to changing passwords:   - Net function c...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAWK,QA9A,QAGI,QBWP,QBW3,QAY5,QAUJ,QBG2,QAUD,QAH6,QAI4,QAIF,QAXB,QAMA,QAHD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Change Passwords Programmatically in Windows NT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 21, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151546</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) for Windows NT,
   versions 3.51, 4.00
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to change passwords on accounts in Windows NT
programmatically. Net function calls are used to accomplish this task.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are several considerations that apply to changing passwords:

<UL><LI>Net function calls are Unicode only. All strings passed to and
   returned by these functions are in Unicode form.

<LI>When targeting a domain controller for account update operations, be
   sure to target the primary domain controller for the domain. The account
   settings are replicated by the primary domain controller to each backup
   domain controller as appropriate. The NetGetDCName() function
   call can be used to get the primary domain controller computer name from
   a domain name.

<LI>If the caller is an administrator or account operator on the target
   machine/domain, the NetUserSetInfo() function call at info-level
   1003 can be used to override the existing password. The caller does not
   need to know the existing password. Note that passwords can be provided
   for accounts during account creation time using NetUserAdd().

<LI>If the caller is a non-administrator on the target machine/domain, the
   NetUserChangePassword() function call can be used to override the
   existing password. In order for this call to succeed, the caller must
   supply the correct current password. NetUserChangePassword() behaves
   differently than other Net function calls with respect to the first
   parameter that specifies either a domain name or machine name. If this
   parameter is set to NULL, the domain name of the caller is used. Keep
   this in mind if you intend to change passwords on accounts outside the
   domain of the logged-on caller. You should explicitly provide the target
   domain name.
<P>
</UL><h3>Sample Code</h3>
 
<P>
<PRE>/*++

</PRE>Module Name:
<P>
<PRE>    chngpass.c

</PRE>Abstract:
<P>
<PRE>   This sample changes the password for an arbitrary user on an arbitrary
   target machine.

   When targeting a domain controller for account update operations,
   be sure to target the primary domain controller for the domain.
   The account settings are replicated by the primary domain controller
   to each backup domain controller as appropriate. The NetGetDCName()
   function call can be used to get the primary domain controller
   computer name from a domain name.

   Username is argv[1]
   new password is argv[2]
   optional target machine (or domain name) is argv[3]
   optional old password is argv[4]. This allows non-admin password
   changes.

   Note that admin or account operator privilege is required on the
   target machine unless argv[4] is present and represents the correct
   current password.

   NetUserSetInfo() at info-level 1003 is appropriate for administrative
   override of an existing password.

   NetUserChangePassword() allows for an arbitrary user to override
   an existing password providing that the current password is confirmed.

   Link with netapi32.lib

</PRE>--*/
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;

   #include &lt;lm.h&gt;

   #define RTN_OK 0
   #define RTN_USAGE 1
   #define RTN_ERROR 13

   void
   DisplayErrorText(
       DWORD dwLastError
       );

   //
   // Unicode entry point and argv
   //

   int
   __cdecl
   wmain(
       int argc,
       wchar_t *argv[]
       )
   {
       LPWSTR          wUserName;
       LPWSTR          wComputerName = NULL; // default to local machine
       LPWSTR          wOldPassword;
       LPWSTR          wNewPassword;
       USER_INFO_1003  pi1003;
       NET_API_STATUS  nas;

       if( argc &lt; 3 ) {
           fprintf(stderr, "Usage: %ls &lt;user&gt; &lt;new_password&gt; "
                           "[\\\\machine | domain] [old_password]\n",
                           argv[0]);
           return RTN_USAGE;
       }

       //
       // process command line arguments
       //

       wUserName = argv[1];
       wNewPassword = argv[2];

       if( argc &gt;= 4 &amp;&amp; *argv[3] != L'\0' ) {

           //
           // obtain target machine name, if appropriate,
           // always in Unicode, as that is what the API takes.
           //

           if(argv[3][0] == L'\\' &amp;&amp; argv[3][1] == L'\\') {

               //
               // target specified machine name
               //

               wComputerName = argv[3];
           }
           else {

               //
               // the user specified a domain name. Look up the PDC.
               // This is done in both password change cases to ensure the
               // same computer is targeted for the update operation.
               //

               nas = NetGetDCName(
                   NULL,
                   argv[3],
                   (LPBYTE *)&amp;wComputerName
                   );

               if(nas != NERR_Success) {
                   DisplayErrorText( nas );
                   return RTN_ERROR;
               }
           }
       }

       if(argc == 5) {
           wOldPassword = argv[4];
       } else {
           wOldPassword = NULL;
       }

       if(wOldPassword == NULL) {

           //
           // administrative over-ride of existing password
           //

           pi1003.usri1003_password = wNewPassword;

           nas = NetUserSetInfo(
                   wComputerName,  // computer name
                   wUserName,      // username
                   1003,           // info level
                   (LPBYTE)&amp;pi1003,     // new info
                   NULL
                   );
       } else {

           //
           // allows user to change their own password
           //

           nas = NetUserChangePassword(
                   wComputerName,
                   wUserName,
                   wOldPassword,
                   wNewPassword
                   );
       }

       if(wComputerName != NULL &amp;&amp; wComputerName != argv[3]) {

           //
           // a buffer was allocated for the PDC name. Free it.
           //

           NetApiBufferFree(wComputerName);
       }

       if(nas != NERR_Success) {
           DisplayErrorText( nas );
           return RTN_ERROR;
       }

       return RTN_OK;
   }

   void
   DisplayErrorText(
       DWORD dwLastError
       )
   {
       HMODULE hModule = NULL; // default to system source
       LPSTR MessageBuffer;
       DWORD dwBufferLength;
       DWORD dwFormatFlags;

       dwFormatFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER |
                       FORMAT_MESSAGE_IGNORE_INSERTS |
                       FORMAT_MESSAGE_FROM_SYSTEM ;

       //
       // if dwLastError is in the network range, load the message source
       //
       if(dwLastError &gt;= NERR_BASE &amp;&amp; dwLastError &lt;= MAX_NERR) {
           hModule = LoadLibraryEx(
               TEXT("netmsg.dll"),
               NULL,
               LOAD_LIBRARY_AS_DATAFILE
               );

           if(hModule != NULL)
               dwFormatFlags |= FORMAT_MESSAGE_FROM_HMODULE;
       }

       //
       // call FormatMessage() to allow for message text to be acquired
       // from the system or the supplied module handle.
       //
       if(dwBufferLength = FormatMessageA(
           dwFormatFlags,
           hModule, // module to get message from (NULL == system)
           dwLastError,
           MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language
           (LPSTR) &amp;MessageBuffer,
           0,
           NULL
           ))
       {
           DWORD dwBytesWritten;

           //
           // Output message string on stderr
           //
           WriteFile(
               GetStdHandle(STD_ERROR_HANDLE),
               MessageBuffer,
               dwBufferLength,
               &amp;dwBytesWritten,
               NULL
               );

           //
           // free the buffer allocated by the system
           //
           LocalFree(MessageBuffer);
       }

       //
       // if you loaded a message source, unload it.
       //
       if(hModule != NULL)
           FreeLibrary(hModule);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.51 4.00 password<BR>
KBCategory: kbprg kbhowto<BR>
KBSubcategory: NtwkMisc BseSecurity CodeSam
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 21, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

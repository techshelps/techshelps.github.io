

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Look Up Current User Name and Domain Name </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q155698">
<META NAME="KBModify" CONTENT="1997/06/16">
<META NAME="KBCreate" CONTENT="1996/09/05">
<META NAME="Keywords" CONTENT="BseSecurity codesam kbprg NtwkLmapi kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes programmatic approaches to obtaining the user name and domain name of the calling user. Platform specific differences are also described in this article.  MORE INFORMATION  The calling user typically represents the interactiv...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBWP,QBWF,QAGU,QAUD,QAH4,QBWO,QDL9,QBWQ,QBWN,QAIF,QAUJ,QA9A,QDIT,QALW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Look Up Current User Name and Domain Name</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q155698</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK)
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes programmatic approaches to obtaining the user name
and domain name of the calling user. Platform specific differences are also
described in this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The calling user typically represents the interactively logged on user, but
this may not be the case in Windows NT because Windows NT allows multiple
security contexts, potentially representing multiple users. A similar
scenario may exist when one or more threads in a process are impersonating
a client, such as through the ImpersonateNamedPipeClient() Win32 API call.
Another example of this scenario occurs when querying the user name and
domain name in a service. A service running in the local system account
will have a domain name of NT AUTHORITY and a user name of SYSTEM.
<P>
<P><h3>Obtaining User Name</h3>
 
<P>
If only the user name is required, the GetUserName() API call can be used
to retrieve the username of the caller. This Win32 API call works on
Windows NT and Windows 95.
<P>
In Windows NT, the GetUserName() API first checks to see if the calling
thread has a specific access token, which is typically the result of an
impersonation call. In this case, the user name associated with the
impersonation is returned by GetUserName(). Otherwise, the user name
associated with the calling process is returned.
<P>
<P><h3>Obtaining User Name and Domain Name</h3>
 
<P>
In order to obtain the domain name associated with the current user,
different approaches are required depending on the operating system where
the code is expected to run.
<P>
<P><h3>Windows NT</h3>
 
<P>
The following code illustrates how to obtain the user name and domain name
associated with the calling thread or process by using Win32 security API
for Windows NT:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;lmcons.h&gt;     // DNLEN, UNLEN
   #include &lt;tchar.h&gt;

   BOOL
   GetUserAndDomainName(
       LPTSTR UserName,
       LPDWORD cchUserName,
       LPTSTR DomainName,
       LPDWORD cchDomainName
       );

   #define RTN_OK 0
   #define RTN_ERROR 13

   int
   __cdecl
   main(
       void
       )
   {
       TCHAR User[UNLEN + 1];
       TCHAR Domain[DNLEN + 1];
       DWORD cchUser = UNLEN;
       DWORD cchDomain = DNLEN;

       if(GetUserAndDomainName(User, &amp;cchUser, Domain, &amp;cchDomain)) {
           _tprintf(TEXT("%s\\%s\n"), Domain, User);
           return RTN_OK;
       } else {
           printf("GetUserAndDomainName error! (rc=%lu)\n",
                  GetLastError());
           return RTN_ERROR;
       }
   }

   BOOL
   GetUserAndDomainName(
       LPTSTR UserName,
       LPDWORD cchUserName,
       LPTSTR DomainName,
       LPDWORD cchDomainName
       )
   {
       HANDLE hToken;

       #define MY_BUFSIZE 512  // highly unlikely to exceed 512 bytes
       UCHAR InfoBuffer[ MY_BUFSIZE ];
       DWORD cbInfoBuffer = MY_BUFSIZE;
       SID_NAME_USE snu;

       BOOL bSuccess;

       if(!OpenThreadToken(
           GetCurrentThread(),
           TOKEN_QUERY,
           TRUE,
           &amp;hToken
           )) {

           if(GetLastError() == ERROR_NO_TOKEN) {

               //
               // attempt to open the process token, since no thread token
               // exists
               //

               if(!OpenProcessToken(
                   GetCurrentProcess(),
                   TOKEN_QUERY,
                   &amp;hToken
                   )) return FALSE;

           } else {

               //
               // error trying to get thread token
               //

               return FALSE;
           }
       }

       bSuccess = GetTokenInformation(
           hToken,
           TokenUser,
           InfoBuffer,
           cbInfoBuffer,
           &amp;cbInfoBuffer
           );

       if(!bSuccess) {
           if(GetLastError() == ERROR_INSUFFICIENT_BUFFER) {

               //
               // alloc buffer and try GetTokenInformation() again
               //

               CloseHandle(hToken);
               return FALSE;

           } else {

               //
               // error getting token info
               //

               CloseHandle(hToken);
               return FALSE;
           }
       }

       CloseHandle(hToken);

       return LookupAccountSid(
           NULL,
           ((PTOKEN_USER)InfoBuffer)-&gt;User.Sid,
           UserName,
           cchUserName,
           DomainName,
           cchDomainName,
           &amp;snu
           );
   }

</PRE><h3>Windows 95 and Windows (16bit)</h3>
 
<P>
In Windows 95, there is no 32-bit function for obtaining the domain name
associated with the logged on user. However, it is possible to obtain the
user name and domain name by calling the 16-bit LAN Manager function
NetWkstaGetInfo() at info-level 10. This function is exported by the 16-bit
Netapi.dll. The header files and libraries associated with the LAN Manager
API calls can be found in the 16-bit LAN Manager SDK, or the Windows for
Workgroups SDK, found in the MSDN L2 SDK kits.
<P>
For additional information on how to call 16-bit code from 32-bit
code, please see the following article(s) in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q155763.htm">Q155763</A></B>
   TITLE     : HOWTO: Call 16-bit Code from 32-bit Code on Windows 95

</PRE>The following code fragment illustrates the call to NetWkstaGetInfo().
<P>
<PRE>   #include &lt;windows.h&gt;

   #include &lt;netcons.h&gt;
   #include &lt;wksta.h&gt;
   #include &lt;neterr.h&gt;

       #define BUFFER_SIZE 512

       unsigned short cbTotalAvail;
       char buf[ BUFFER_SIZE + 1 ];

       struct wksta_info_10 far *wi10 = (struct wksta_info_10 far *)buf;
       unsigned short nas;

       nas = NetWkstaGetInfo(
               NULL,
               10,
               (char far *)wi10,
               BUFFER_SIZE,
               &amp;cbTotalAvail
               );

       if( nas == NERR_Succes ) {

           //
           // success, use
           // wi10-&gt;wki10_logon_domain (contains logon domain name)
           // wi10-&gt;wki10_username (contains user name)
           //

       } else {

           //
           // error occurred
           //
       }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: username domain 3.1 3.5 3.51 4.0<BR>
Keywords            : BseSecurity codesam kbprg NtwkLmapi kbhowto kbprg<BR>
Version             : 3.1 3.5 3.51 4.0<BR>
Platform            : NT Win95 WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

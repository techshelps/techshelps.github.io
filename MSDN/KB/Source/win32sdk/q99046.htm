

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Draw a Custom Window Caption </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99046 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/05/20">
<META NAME="Keywords" CONTENT="kbui kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Microsoft Windows draws captions in the caption bar (or title bar) for all eligible windows in the system. Applications need to specify only the WS_CAPTION style to take advantage of this facility. The current version of Microsoft Windows, however,...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QDL9,QBWO,QBWN,QAIB,QAXQ,QBWQ,QAGQ,QATX,QAEV,QAE5,QBWP,QAH4,QAJH,QAIA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Draw a Custom Window Caption</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99046 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Windows draws captions in the caption bar (or title bar) for all
eligible windows in the system. Applications need to specify only the
WS_CAPTION style to take advantage of this facility. The current version of
Microsoft Windows, however, imposes three significant restrictions on the
captions. An application that does not want to be tied by any of these
restrictions may want to draw its own caption. This article lists the
restrictions and the steps required to draw a window caption.
<P>
These restrictions also apply to Windows NT, but there are a few
differences for Windows 95.
<P>
It is important to note that an application should not draw its own caption
unless it has very good reasons to do so. A window caption is a user
interface object, and rendering it in ways different from other windows in
the system may obstruct the user's conceptual grasp of the Microsoft
Windows user interface.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Windows and Windows NT</h3>
 
<P>
The three important restrictions imposed by Microsoft Windows version 3.1
and Microsoft Windows NT on the caption for a window are:
<P>
- It consists of text only; graphics are not allowed.
- All text is centered and drawn with the system font.
- The length of the displayed caption is limited to 78 characters
<PRE>  even when there is space on the caption bar to accommodate extra
  characters.

</PRE>An application can essentially render its own caption consisting of any
graphic and text with the standard graphics and text primitives by painting
on the nonclient area of the window. The application should draw in
response to the WM_NCPAINT, WM_NCACTIVATE, WM_SETTEXT, and WM_SYSCOMMAND
messages. When processing these messages, an application should first pass
on the message to DefWindowProc() for default processing, then render its
caption before returning from the message. This ensures that Microsoft
Windows can properly draw the nonclient area. Because drawing the caption
is part of DefWindowProc()'s nonclient area processing, an application
should specify an empty window title to avoid any Windows-initiated drawing
in the caption bar. The following steps indicate the computations needed to
determine the caption drawing area:

<OL><P><LI>Get the current window's rectangle using GetWindowRect(). This
   includes client plus nonclient areas and is in screen coordinates.

<P><LI>Get a device context (DC) to the window using GetWindowDC().

<P><LI>Compute the origin and dimensions of the caption bar. One needs to
   account for the window decorations (frame, border) and window
   bitmaps (min/max/system boxes). Remember that different window
   styles will result in different decorations and a different number of
   min/max/system boxes. Use GetSystemMetrics() to compute the
   dimensions of the frame, border, and the system bitmap dimensions.

<P><LI>Render the caption within the boundaries of the rectangle computed
   in step 3. Remember that the user can change the caption bar color
   any time by using the Control Panel. Some components of the caption,
   particularly text backgrounds, may need to be changed based on the
   current caption bar color. Use GetSysColor to determine the current
   color.
<P>
</OL>The following code sample draws a left-justified caption for a window
(the code sample applies only to the case where the window is active):
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   case WM_NCACTIVATE:
      if ((BOOL)wParam == FALSE)
      {
         DefWindowProc( hWnd, message, wParam, lParam );
      // Add code here to draw caption when window is inactive.

         return TRUE;
      }
      // Fall through if wParam == TRUE, i.e., window is active.

      case WM_NCPAINT:
      // Let Windows do what it usually does. Let the window caption
      // be empty to avoid any Windows-initiated caption bar drawing

         DefWindowProc( hWnd, message, wParam, lParam );
         hDC = GetWindowDC( hWnd );
         GetWindowRect( hWnd, (LPRECT)&amp;rc2 );

      // Compute the caption bar's origin. This window has a system box
      // a minimize box, a maximize box, and has a resizeable frame

         x = GetSystemMetrics( SM_CXSIZE ) +
             GetSystemMetrics( SM_CXBORDER ) +
             GetSystemMetrics( SM_CXFRAME );
         y = GetSystemMetrics( SM_CYFRAME );
         rc1.left = x;
         rc1.top = y;

      // 2*x gives twice the bitmap+border+frame size. Since there are
      // only two bitmaps, two borders, and one frame at the end of the
      // caption bar, subtract a frame to account for this.

         rc1.right = rc2.right - rc2.left - 2*x -
                     GetSystemMetrics( SM_CXFRAME );
         rc1.bottom = GetSystemMetrics( SM_CYSIZE );

      // Render the caption. Use the active caption color as the text
      // background.

         SetBkColor( hDC, GetSysColor(COLOR_ACTIVECAPTION) );
         DrawText( hDC, (LPSTR)"Left Justified Caption", -1,
                 (LPRECT)&amp;rc1, DT_LEFT );
        ReleaseDC( hWnd, hDC );
        break;

</PRE></OL><h3>Windows 95</h3>
 
<P>
On Windows 95, the text is not centered and the user can choose the Font.
In addition, your application might want to monitor the WM_WININICHANGED
message, because the user can change titlebar widths, and so forth,
dynamically. When this happens, the application should take the new system
metrics into account, and force a window redraw.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 minimum maximum<BR>
KbCategory: kbui kbcode<BR>
KbSubCategory: UsrPnt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

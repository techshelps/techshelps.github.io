

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use MCI to Play AVI/WAVE Files from Memory </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q155360">
<META NAME="KBModify" CONTENT="1998/01/23">
<META NAME="KBCreate" CONTENT="1996/08/27">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  MCI (Media Control Interface) provides a high-level interface to play multimedia files (or  device elements  as defined in MCI). By default, MCI WAVE/AVI drivers (MCIAVI and MCIWAVE) use mmioOpen to open a file. If the file name contains a  +  char...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAVX,QAVW,QAGX,QAKR,QAHE,QAB9,QAFI,QAYA,QALW,QBQU,QBQS,QARW,QADC,QBW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use MCI to Play AVI/WAVE Files from Memory</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q155360</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK)
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
MCI (Media Control Interface) provides a high-level interface to play
multimedia files (or "device elements" as defined in MCI). By default, MCI
WAVE/AVI drivers (MCIAVI and MCIWAVE) use mmioOpen to open a file. If the
file name contains a "+" character, mmioOpen will look for a custom
procedure as identified by the three-character file extension to handle the
reading and writing of a file. This technique can be applied to allow MCI
to play WAVE/AVI files that are already loaded into memory.
<P>
The following steps demonstrate this approach. We use "MEY" as the file
extension in this example:

<OL><P><LI>Install a custom MMIO procedure as follows:
<P>
<P><PRE>      mmioInstallIOProc(mmioFOURCC('M', 'E', 'Y', ' '), (LPMMIOPROC)IOProc,
<PRE></PRE>            MMIO_INSTALLPROC | MMIO_GLOBALPROC);

   Note that IOProc is the name of the custom procedure.

</PRE><P><LI>Use the MCI open command except to add a plus sign (+) at the end of a
   file name. For instance,
<P>
<P><PRE>      open test.MEY+ type waveaudio (or avivideo) alias test
</PRE><P>
   Because there is a "+" character in the file name, mmioOpen will not
   open any files. Instead, the custom mmio procedure is identified.
   Subsequently, all the I/O messages are routed to that procedure.

<P><LI>Then, we can use usual MCI command.  For instance:
<P>
<P><PRE>      play test
      close test
</PRE>
<P><LI>When done with this custom mmio procedure, we should remove it by
<P>
<P><PRE>      mmioInstallIOProc(mmioFOURCC('M', 'E', 'Y', ' '), NULL,
      MMIO_REMOVEPROC);
</PRE><P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
The following is sample code for the custom mmio procedure IOProc. Here you
assume that the WAVE/AVI file has been loaded into memory and pointed to by
lpData. Also the variable fileSize records the file length in bytes:
<P>
<PRE>   static char * lpData;
   static long fileSize;
   LRESULT CALLBACK IOProc(LPMMIOINFO lpMMIOInfo, UINT uMessage, LPARAM
   lParam1, LPARAM lParam2)
   {
      static BOOL alreadyOpened = FALSE;

      switch (uMessage) {
         case MMIOM_OPEN:
            if (alreadyOpened)
               return 0;
       alreadyOpened = TRUE;
   
       lpMMIOInfo-&gt;lDiskOffset = 0;
       return 0;
   
         case MMIOM_CLOSE:
            return 0;
   
         case MMIOM_READ:
       memcpy((void *)lParam1, lpData+lpMMIOInfo-&gt;lDiskOffset,
   lParam2);
            lpMMIOInfo-&gt;lDiskOffset += lParam2;
   
            return (lParam2);
   
         case MMIOM_SEEK:
            switch (lParam2) {
               case SEEK_SET:
                  lpMMIOInfo-&gt;lDiskOffset = lParam1;
                  break;
   
               case SEEK_CUR:
                  lpMMIOInfo-&gt;lDiskOffset += lParam1;
   
               case SEEK_END:
                  lpMMIOInfo-&gt;lDiskOffset = fileSize - 1 - lParam1;
                  break;
            }
            return lpMMIOInfo-&gt;lDiskOffset;
   
         default:
           return -1; // Unexpected msgs.  For instance, we do not
                                // process MMIOM_WRITE in this sample
     }// end of switch
   }//end of IOProc
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: audio video playback<BR>
Version           : 4.0, 3.51<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Various Ways to Access Submenus and Menu Items </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71454 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1991/04/18">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  In calls to Microsoft Windows functions that create, modify, and destroy menus, an application can access an individual menu item by either its position or its item ID. A pop-up menu must be accessed by its position because it does not have a menu-...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVI,QAGI,QAF0,QDL9,QBWO,QBWN,QACI,QA4H,QAHE,QAJP,QAY5,QBJZ,QBW7,QAI5,QA1S V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Various Ways to Access Submenus and Menu Items</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71454 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.0 and 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In calls to Microsoft Windows functions that create, modify, and destroy
menus, an application can access an individual menu item by either its
position or its item ID. A pop-up menu must be accessed by its position
because it does not have a menu-item ID.
<P>
Specifically, when an application calls the EnableMenuItem() function to
enable, disable, or dim (gray) an individual menu item, the application can
specify either the MF_BYPOSITION or the MF_BYCOMMAND flag in the wEnable
parameter. When the application calls EnableMenuItem() to access a pop-up
menu, it must specify the MF_BYPOSITION flag.
<P>
The information below provides examples of the following:

<UL><LI>Retrieving a menu handle for a submenu
<LI>Accessing a submenu
<LI>Accessing a menu item
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following resource-file menu template provides the basis for the source
code examples in this article. The template describes a top-level menu with
two pop-up submenus. One of the submenus contains a third, nested submenu.
<P>
<PRE>   GenericMenu MENU
   BEGIN
      POPUP "&amp;Help"
      BEGIN
         MENUITEM "&amp;About Generic...", IDM_ABOUT
      END

      POPUP "&amp;Test"
      BEGIN
         POPUP "&amp;Nested"
         BEGIN
            MENUITEM "&amp;1 Beep", IDM_1BEEP
            MENUITEM "&amp;2 Beeps", IDM_2BEEPS
         END
      END
   END


</PRE><h3>Retrieving the Handle to a Submenu</h3>
 
<P>
Code such as the following can be used to obtain handles to the menus:
<P>
<PRE>   HMENU hMainMenu, hHelpPopup, hTestPopup, hNestedPopup;

   &lt;other program lines&gt;

   hMainMenu = GetMenu(hWnd);
   hHelpPopup = GetSubMenu(hMainMenu, 0);
   hTestPopup = GetSubMenu(hMainMenu, 1);
   hNestedPopup = GetSubMenu(hTestPopup, 0);

</PRE>The second parameter of the GetSubMenu() function, nPos, is the position
of the desired submenu. Positions are numbered starting at zero for
the first menu item.
<P>
<P>
<P><h3>Disabling a Submenu</h3>
 
<P>
The following call disables and dims the nested pop-up menu:
<P>
<PRE>   EnableMenuItem (hTestPopup, 0, MF_BYPOSITION | MF_GRAYED);

</PRE>The following call disables and dims the Test pop-up menu:
<P>
<PRE>   EnableMenuItem (hMainMenu, 1, MF_BYPOSITION | MF_GRAYED);

</PRE>The second parameter of the EnableMenuItem() function, wIDEnabledItem, is
the position of the submenu. As above, positions are numbered starting at
zero. Note that the call must specify the MF_BYPOSITION flag because a pop-
up menu does not have a menu-item ID.
<P>
<P>
<P><h3>Disabling a Menu Item</h3>
 
<P>
The 1 Beep menu item can be disabled and dimmed by using any one of
the following calls:
<P>
<PRE>   EnableMenuItem(hMainMenu, IDM_1BEEP, MF_BYCOMMAND | MF_GRAYED);
   EnableMenuItem(hTestPopup, IDM_1BEEP, MF_BYCOMMAND | MF_GRAYED);
   EnableMenuItem(hNestedPopup, IDM_1BEEP, MF_BYCOMMAND | MF_GRAYED);
   EnableMenuItem(hNestedPopup, 0, MF_BYPOSITION | MF_GRAYED);

</PRE>A menu item can be specified by either by its menu-item ID value (using the
MF_BYCOMMAND flag) or by its position (using the MF_BYPOSITION) flag. If
the application specifies the menu-item ID value, Windows must walk the
menu structure and search for a menu item with the correct ID. This implies
the each menu-item ID value must be unique for a given menu.
<P>
<P>
<P><h3>Other Windows Menu Functions</h3>
 
<P>
Although the EnableMenuItem() function is used in the example above, the
same general approach is used for all Windows menu functions; access
pop-up menus by position, and access menu items by position or menu-
item ID.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95  dimmed unavailable<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrMen<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

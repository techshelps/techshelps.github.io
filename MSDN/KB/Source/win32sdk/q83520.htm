

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Overview of Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83520 ">
<META NAME="KBModify" CONTENT="1997/01/15">
<META NAME="KBCreate" CONTENT="1992/04/14">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The following is intended as a general introduction to Win32s. More information can be found in the  Win32s Programmer's Reference  and by querying for Knowledge Base articles on  Win32s .  MORE INFORMATION  General Overview  The Win32 API consists...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBWO,QBWP,QDL9,QBWQ,QBWN,QAH4,QAIF,QAUD,QDIT,QAJH,QBV8,QAJQ,QAY2,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>General Overview of Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 15, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83520 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32s versions 1.1, 1.2, 1.3, 1.30c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is intended as a general introduction to Win32s. More
information can be found in the "Win32s Programmer's Reference" and by
querying for Knowledge Base articles on "Win32s".
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>General Overview</h3>
 
<P>
The Win32 API consists of the Window 3.1 (Win16) API, with types stretched
to 32 bits, plus the addition of APIs which offer new functionality, like
threads, security, services, and virtual memory. Applications developed
using the Win32 API are called "Win32-based applications".
<P>
Win32s is a set of DLLs and a VxD which allow Win32-based applications to
run on top of Windows or Windows for Workgroups version 3.1. Win32s
supports a subset of the Win32 API, some directly (like memory management)
and some through thunks to the 16-bit systems (particularly GDI and User).
Win32s contains function stubs for the APIs that are not supported, which
return ERROR_NOT_IMPLEMENTED. Win32s also includes 4 new APIs which support
the Universal Thunk (UT). For details on which API are supported under
Win32s, refer to the individual API entries in the help file "Win32 API
Reference." Among the new features gained from Win32 are structured
exception handling (SEH), FP emulation, memory-mapped files, named shared
memory, and sparse memory.
<P>
Win32-based applications running on Windows 3.1 will generally be faster
than their Win16 equivalents on Windows 3.1, particularly if they are
memory or floating-point intensive. The actual speed improvement varies
with each application, because it depends on how often you cross the thunk
layer. Each call which uses a thunk is no more than 10 percent slower than
a direct call.
<P>
<P><h3>Binary Compatibility</h3>
 
<P>
Win32s offers binary compatibility for Win32-based applications on Windows
3.1 and Windows NT.
<P>
When you call a Win32 API, two options should be allowed:

<UL><LI>Option A: Your code should allow for a successful return from the
   function call.

<LI>Option B: Your code should allow for an unsuccessful return from
   the function call.
<P>
</UL>For example, if the application is running under Windows 3.1 and a call is
made to one of the supported APIs, then the call returns successfully and
option A is executed. If the call is made while running under Windows NT,
the call again returns successfully and option A should be executed.
However, if running under Windows 3.1 and a Win32 API function is called
that is unsupported, then an error code is returned and option B should be
executed.
<P>
If, for example, option A were using a CreateThread() call, then option B
would be alternative code, which would handle the task using a single-
thread solution.
<P>
<P><h3>Programming Issues</h3>
 
<P>
Win32-based applications cannot use MS-DOS and BIOS interrupts; therefore,
the Win32s VxD has Win32 entries for each Interrupt 21 and the BIOS calls.
<P>
The Win32s DLLs may thunk to Win16 when a Win32 application makes a call.
The 32-bit parameters are copied from the 32-bit stack to a 16-bit stack
and the 16-bit entry point is called. The Win32 application has a 128K
stack. When switching to the 16-bit side via UT, the same stack is used,
and a 16:16 stack pointer is created which points to the top of the stack.
The selector base is set so that there is at least an 8K stack for the
16-bit code.
<P>
There are other semantic difference between Windows 3.1 and Win32. Windows
3.1 will run applications for Win32 nonpreemptively in a single, shared
address space, while Windows NT runs them preemptively in separate address
spaces. It is therefore important that you test your Win32-based
application on both Windows 3.1 and Windows NT.
<P>
If you need to call routines that reside in a 16-bit DLL or Windows from
32-bit code, you can do this using the Win32s Universal Thunk or other
client-server techniques. For a description of UT, please see the
"Win32s Programmer's Reference" and the sample UTSAMPLE.
<P>
DDE, OLE, WM_COPYDATA, the clipboard, metafiles, and bitmaps can be used
between 16-bit Windows-based and Win32-based applications on both Windows
3.1 and Windows NT. RPC is not supported from Win32-based applications.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: W32s<BR>
Additional reference words: 1.10 1.20 1.30 1.30c<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 15, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

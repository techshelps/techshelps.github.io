

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Types of Thunking Available in Win32 Platforms </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125710">
<META NAME="KBModify" CONTENT="1997/04/07">
<META NAME="KBCreate" CONTENT="1995/02/02">
<META NAME="Keywords" CONTENT="BseThunks SubSys W32sThunk kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Neither Windows NT, Windows 95, or Win32s allow direct mixing of 16-bit code and 32-bit code in the same process. All these platforms support some sort of an IPC mechanism, such as DDE, RPC, OLE, named pipes, and WM_COPYDATA, that you can use for c...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QBWP,QDL9,QBWO,QBWN,QBWQ,QAIF,QAUD,QAY5,QAJH,QAO3,QAO2,QAB9,QAHT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Types of Thunking Available in Win32 Platforms</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125710</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.30 4.00 | 3.50 3.51 4.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5, 3.51, 4.0
    - Microsoft Windows 95 version 4.0
    - Microsoft Win32s version 1.30a, 1.30c
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Neither Windows NT, Windows 95, or Win32s allow direct mixing of 16-bit
code and 32-bit code in the same process. All these platforms support some
sort of an IPC mechanism, such as DDE, RPC, OLE, named pipes, and
WM_COPYDATA, that you can use for communication between 16-bit code
and 32-bit code. However, there are occasions when it is necessary to call
a function in 32-bit code from 16-bit code or vice versa.
<P>
Thunks allow code on one side of the 16-32 process boundary to call into
code on the other side of the boundary. Each Win32 platform employs one or
more thunking mechanisms. This table summarizes the thunking mechanisms
provided by the different Win32 platforms.
<P>
<PRE>                   +-Win32s-+-Windows 95-+-Windows NT-+
   Generic Thunk   |        |      X     |      X     |
                   +--------+------------+------------+
   Universal Thunk |    X   |            |            |
                   +--------+------------+------------+
   Flat Thunk      |        |      X     |            |
                   +--------+------------+------------+

</PRE>Generic Thunks allow a 16-bit Windows-based application to load and call
a Win32-based DLL on Windows NT and Windows 95.
<P>
Windows 95 also supports a thunk compiler and the Flat Thunks mechanism,
that allows a Win32-based application to load and call a 16-bit DLL or
a 16-bit application to load and call a Win32-based DLL.
<P>
Win32s Universal Thunks (UT) allow a Win32-based application running under
Windows 3.1 to load and call a 16-bit DLL. You can also use UT to allow
a 16-bit Windows-based application to call a 32-bit DLL under Win32s, but
this isn't officially supported. Certain things do not work on the 32-bit
side because the app was loaded within the context of a 16-bit Windows-
based application.
<P>
This article describes the types of thunking mechanisms available on each
Win32 platform.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Windows NT</h3>
 
<P>
Windows NT supports Generic Thunks, which allow 16-bit code to call
into 32-bit code. Generic Thunks must be initiated from a 16-bit
Windows-based application. Once the thunk is established, the 32-bit code
can make a callback to the 16-bit code using WOWCallback16(). The generic
thunk is implemented by using a set of API functions that are exported by
the WOWKERNEL and WOW32.DLL.
<P>
In Windows NT, 16-bit Windows-based applications are executed in a
subsystem (or environment) called WOW (Windows On Win32). Each application
runs as a thread in a VDM (virtual DOS machine).
<P>
Using generic thunks is like explicitly loading a DLL. The five major APIs
used in generic thunking are: LoadLibraryEx32W(), FreeLibrary32W(),
GetProcAddress32W(), CallProc32W(), or CallProcEx32W(). Their functionality
is very similar to LoadLibraryEx(), FreeLibrary(), GetProcAddress(),and
calling the function through a function pointer. The Win32-based DLL called
by the thunk is loaded into the VDM address space. The following is a
example of thunking a call to GetVersionEx():
<P>
<PRE>      void FAR PASCAL __export MyGetVersionEx(OSVERSIONINFO *lpVersionInfo)
      {
         HINSTANCE32 hKernel32;
         FARPROC lpGetVersionEx;

         // Load KERNEL32.DLL
         if (!(hKernel32 = LoadLibraryEx32W("KERNEL32.DLL", NULL, NULL)))
         {
            MessageBox(NULL, "LoadLibraryEx32W Failed", "DLL16", MB_OK);
            return;
         }

         // Get the address of GetVersionExA in KERNEL32.DLL
         if (!(lpGetVersionEx =
               GetProcAddress32W( hKernel32, "GetVersionExA")))
         {
            MessageBox(NULL, "GetProcAddress32W Failed", "DLL16", MB_OK);
            return;
         }
         lpVersionInfo-&gt;dwOSVersionInfoSize = sizeof(OSVERSIONINFO);

         // Call GetVersionExA
         CallProc32W(lpVersionInfo, lpGetVersionEx, 1, 1);

         // Free KERNEL32.DLL
         if (!FreeLibrary32W(hKernel32))
         {
            MessageBox(NULL, "FreeLibrary32W Failed", "DLL16", MB_OK);
            return;
         }
         return;
      }

</PRE><h3>Win32s</h3>
 
<P>
All 16-bit Windows-based and Win32-based applications run in a single
address space in Win32s. The mechanism that is provided for accessing 16-
bit code from 32-bit code is called the Universal Thunk. The Universal
Thunks mechanism consists of 4 APIs. The major APIs, UTRegister() and
UTUnRegister(), are exported by KERNEL32. The prototype for UTRegister()
is:
<P>
<PRE>      BOOL UTRegister(HANDLE hModule,          // Win32-based DLL handle
                      LPCTSTR lpsz16BITDLL,    // 16-bit DLL to call
                      LPCTSTR lpszInitName,    // thunk initialization
                                               // procedure
                      LPCTSTR lpszProcName,    // thunk procedure
                      UT32PROC *ppfn32Thunk,   // pointer to thunk
                                               // procedure
                      FARPROC pfnUT32CallBack, // optional callback
                      LPVOID lpBuff);          // shared memory buffer

</PRE>NOTES: lpszInitName, pfnUT32CallBack, and lpBuff are optional parameters.
The value for ppfn32Thunk is the returned value of the 32-bit function
pointer to the thunk procedure. The buffer lpBuff is a globally allocated
shared memory buffer that is available to the 16-bit initialization routine
via a 16-bit selelctor:offset pointer.
<P>
The function pointer returned in ppfn32Thunk has the following syntax:
<P>
<PRE>      WORD (*ppfn32Thunk)(lpBuff, dwUserDefined, *lpTranslationList);

</PRE>where lpBuff is the pointer to the shared data area, dwUserDefined is
available for application use (it is most commonly used as a switch
for multiple thunked functions), and lpTranslationList is an array of flat
pointers within lpBuff that are to be translated into selector:offset
pointers.
<P>
This method is not portable to other platforms.
<P>
<P><h3>Windows 95</h3>
 
<P>
Thunking in Windows 95 allows 16-bit code to call 32-bit code and vice-
versa using a mechanism called Flat Thunks. Flat Thunks under Windows 95
uses the thunk compiler and other components that are included with the
Win32 SDK. To use the thunk compiler, you need to create a thunk script,
which is the function prototype with additional information about input and
output variables. NOTE: These thunks are not portable to other platforms.
<P>
The thunk compiler produces a single assembly language file. This single
assembly language file should be assembled using two different flags -
DIS_32 and -DIS_16 to produce a 16-bit and 32-bit object files. These
object modules should be liked to their respective 16-bit and 32-bit DLL's.
There are no special APIs used, all you have to do is call the function.
<P>
In addition to Flat Thunks, Windows 95 supports the Windows NT Generic
Thunk mechanism. Generic thunks are recommended for portability between
Windows 95 and Windows NT.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on Generic Thunks, see GENTHUNK.TXT on the Win32 SDK
CD-ROM (under the \MSTOOLS\DOCS\MISC directory), and refer to the following
Microsoft Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q104009.htm">Q104009</A></B>
   TITLE     :Generic Thunks: Calling a Win32 DLL from a Win16 Application

</PRE>For more information on the Universal Thunk, see the "Win32s Programmer's
Reference" and the UTSAMP sample on the Win32 SDK CD.
<P>
For more information on Flat Thunks and the Thunk compiler under
Windows 95, Universal Thunk, refer to the Win32 SDK documentation under the
section "Programming and Tools Guides, Programmer's Guide to Windows 95,
Using Windows 95 Features, Thunk Compiler".
<P>
In addition, you can query the Microsoft Knowledge Base with the
appropriate keywords on each thunk mechanism to find further information.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: SubSys  BseThunks<BR>
Additional reference words: 1.30 1.30c 3.50 3.51 4.00<BR>
Keywords            : BseThunks SubSys W32sThunk kbprg<BR>
Version             : 1.30 4.00 | 3.50 3.51 4.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

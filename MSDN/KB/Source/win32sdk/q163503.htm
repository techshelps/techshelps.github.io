

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Getting Notification of CD-ROM Insertion or Removal </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q163503">
<META NAME="KBModify" CONTENT="1997/02/12">
<META NAME="KBCreate" CONTENT="1997/02/11">
<META NAME="Keywords" CONTENT="kbprg kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Some Win32 applications need to know when the user inserts or removes a compact disc from a CD-ROM drive without polling for media changes. Windows 95 and Windows NT provide a way to notify these applications through the WM_DEVICECHANGE message. Th...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABI,QAPN,QBXM,QAO4,QAEF,QABH,QA9N,QAEV,QACI,QAB5,QAC9,QDL9,QBWO,QBWN,QDLP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Getting Notification of CD-ROM Insertion or Removal</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q163503</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT version 4.0
   - Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Some Win32 applications need to know when the user inserts or removes a
compact disc from a CD-ROM drive without polling for media changes. Windows
95 and Windows NT provide a way to notify these applications through the
WM_DEVICECHANGE message. This article explains how to handle the
WM_DEVICECHANGE message to detect CD-ROM media changes.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows 95 and Windows NT send all top-level windows a WM_DEVICECHANGE
message when new devices or media are added and become available, and when
existing devices or media are removed. Each WM_DEVICECHANGE message has an
event associated with it to describe the change, and a structure that
provides detailed information about the change.
<P>
The structure consists of an event-independent header followed by an event-
dependent structure. The event-dependent part of the structure describes
which device the event applies to. To use this structure, applications must
first determine the event type and the device type. Then, they can use the
correct structure to take appropriate action.
<P>
When the user inserts a new compact disc into a drive, applications get a
WM_DEVICECHANCE message with a DBT_DEVICEARRIVAL event. The application
must check the event to make sure that the type of device arriving is a
volume (DBT_DEVTYP_VOLUME) and that the event's media flag (DBTF_MEDIA) is
set.
<P>
When the user removes a compact disc from a CD-ROM drive, applications will
get a WM_DEVICECHANCE message with a DBT_DEVICEREMOVECOMPLETE event. As
with DBT_DEVICEARRIVAL above, the application must check the event to make
sure that the device being removed is a volume and that the event's media
flag is set.
<P>
<P><h3>Sample Code</h3>
 
<P>
The following code demonstrates how to use the WM_DEVICECHANGE message to
check for compact disc insertion or removal.
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;dbt.h&gt;

   char FirstDriveFromMask (ULONG unitmask);  //prototype


   /*----------------------------------------------------------------------
   Main_OnDeviceChange (hwnd, wParam, lParam)

   Description
      Handles WM_DEVICECHANGE messages sent to the application's
      top-level window.
   ----------------------------------------------------------------------*/

   void Main_OnDeviceChange (HWND hwnd, WPARAM wParam, LPARAM lParam)
   {

      PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;
      char szMsg[80];


      switch(wParam)
      {
      case DBT_DEVICEARRIVAL:
         // See if a CD-ROM was inserted into a drive.
         if (lpdb -&gt; dbch_devicetype == DBT_DEVTYP_VOLUME)
         {
            PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;

            if (lpdbv -&gt; dbcv_flags &amp; DBTF_MEDIA)
            {
               wsprintf (szMsg, "Drive %c: arrived\n",
                         FirstDriveFromMask(lpdbv -&gt;dbcv_unitmask));

               MessageBox (hwnd, szMsg, "WM_DEVICECHANGE", MB_OK);
            }
         }
        break;


     case DBT_DEVICEREMOVECOMPLETE:
        // See if a CD-ROM was removed from a drive.
        if (lpdb -&gt; dbch_devicetype == DBT_DEVTYP_VOLUME)
        {
           PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;

           if (lpdbv -&gt; dbcv_flags &amp; DBTF_MEDIA)
           {
              wsprintf (szMsg, "Drive %c: was removed\n",
                        FirstDriveFromMask(lpdbv -&gt;dbcv_unitmask));

              MessageBox (hwnd, szMsg, "WM_DEVICECHANGE", MB_OK);
           }
        }
        break;

     default:
        /*
           Other WM_DEVICECHANGE notifications get sent for other devices
           or reasons; we don't care about them here.  If they were
           important, we would check for them and act accordingly.
        */
         ;
      }
   }


   /*----------------------------------------------------------------------
   FirstDriveFromMask (unitmask)

      Finds the first valid drive letter from a mask of drive letters. The
      mask must be in the format bit 0 = A, bit 1 = B, bit 3 = C, etc.

      A valid drive letter is defined when the corresponding bit is set to
      1.

      Returns the drive letter that was first found.
   ----------------------------------------------------------------------*/
   char FirstDriveFromMask (ULONG unitmask)
   {
      char i;

      for (i = 0; i &lt; 26; ++i)
      {
         if (unitmask &amp; 0x1)
            break;
         unitmask = unitmask &gt;&gt; 1;
      }

      return (i + 'A');
   }

</PRE>Although this sample code only checks for volume arrivals due to the
insertion of new media, it can be extended to get notification of other
hardware events for other types too. To do so, you have to add cases for
other device events and handle different device types for each event.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Win32 SDK documentation, "System Messages" chapter
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode kbhowto<BR>
KBSubcategory: BseFileio<BR>
Additional reference words: 4.00 95 notify notification cdrom CD-ROM detect
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

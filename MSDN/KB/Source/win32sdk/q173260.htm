

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Synchronization Failure When Debugging </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q173260">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1997/08/28">
<META NAME="Keywords" CONTENT="BseDebug BseEvtLog BseMisc">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Threads waiting on a synchronization object may not be released (for example, by PulseEvent() or a SetEvent()/ResetEvent() combination) while you are debugging an application under Windows NT.  CAUSE =====  This symptom is an anomaly related to the...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO4,QAVX,QAGI,QBVV,QAUQ,QADN,QAPN,QBWP,QAX1,QAKP,QAIF,QAX6,QBDM,QAZM,QAZL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Synchronization Failure When Debugging</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q173260</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Threads waiting on a synchronization object may not be released (for
example, by PulseEvent() or a SetEvent()/ResetEvent() combination) while
you are debugging an application under Windows NT.
<P>
<P><h2>CAUSE</h2>
 
<P>
This symptom is an anomaly related to the debug environment under Win32. It
will only occur under a Win32 debugger, including any version of the Visual
C++ debugger and WinDBG.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Placing Sleep(0) before the PulseEvent() or SetEvent()/ResetEvent() calls
will probably avoid this problem, but this is not guaranteed either.
Unfortunately, there is no guaranteed workaround for this situation.
<P>
<P><h2>STATUS</h2>
 
<P>
Note that this symptom is not a bug, but rather a side effect of debugging
under Windows NT. There are no current plans to change this behavior. It is
also important to note that this anomaly will not occur outside of a debug
environment.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
PulseEvent() may fail to release a thread waiting on an event object while
the application is running in a debug environment. This is true regardless
of whether or not the code is compiled with debug information. This is also
regardless of whether the debuggee is executed by the "go" command or by
being "single stepped."
<P>
The problem is more likely to occur if more than one thread is waiting on
the same event. Failure to release the waiting thread becomes more likely
still if there are debug events occurring in these threads, such as those
caused by OutputDebugString(). Placing a call to OutputDebugString()
directly before a call to PulseEvent() is an effective way of regularly
causing a waiting thread not to wake up in the debug environment.
<P>
This happens because the Win32 debug environment commonly suspends threads.
When this happens, it pulls the thread out of its current state and causes
it to wait on a "suspend" event. This sort of suspend happens internally on
each and every debug event. When resumed, the threads are put back into
their previous wait state. If the PulseEvent() occurs while a thread is in
a debug suspended state, the pulse is lost for that thread. This is also
true of a thread suspended by the application using SuspendThread().
<P>
This behavior is not limited to PulseEvent(). Waiting threads are
susceptible to the "debug suspend" in other scenarios as well, including a
quick SetEvent()/ResetEvent() pair.
<P>
As mentioned above, one possible workaround to this problem is to put a
Sleep(0) call before any PulseEvent() or SetEvent() call. This solves the
problem in most cases, because it gives threads being resumed an
opportunity to start waiting again.
<P>
It is important to note that this anomaly will not occur outside of a debug
environment.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: resume timeout debugging debugger debugee<BR>
Keywords          : BseDebug BseEvtLog BseMisc<BR>
Version           : WINDOWS NT:4.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

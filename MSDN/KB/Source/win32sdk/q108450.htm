

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MultiByteToWideChar() Codepages CP_ACP/CP_OEMCP </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108450">
<META NAME="KBModify" CONTENT="1998/01/15">
<META NAME="KBCreate" CONTENT="1993/12/12">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  MultiByteToWideChar() maps a character string to a wide-character string. The declaration of this application programming interface (API) is as follows:     int MultiByteToWideChar(uCodePage, dwFlags, lpMultiByteStr,       cchMultiByte, lpWideCharS...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAWP,QBWP,QDJS,QATY,QATZ,QAGI,QATX,QDIT,QDIR,QAKC,QABA,QBXS,QBVV,QBC6,QA4Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>MultiByteToWideChar() Codepages CP_ACP/CP_OEMCP</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 15, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108450</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 3.50
WINDOWS NT
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) for Windows NT
   versions 3.1 and 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
MultiByteToWideChar() maps a character string to a wide-character string.
The declaration of this application programming interface (API) is as
follows:
<P>
<PRE>   int MultiByteToWideChar(uCodePage, dwFlags, lpMultiByteStr,
      cchMultiByte, lpWideCharStr, cchWideChar)

   UINT uCodePage;         /* codepage                        */
   DWORD dwFlags;          /* character-type options           */
   LPCSTR lpMultiByteStr;  /* address of string to map         */
   int cchMultiByte;       /* number of characters in string   */
   LPWSTR lpWideCharStr;   /* address of wide-character buffer */
   int cchWideChar;        /* size of wide-character buffer    */

</PRE>The first parameter, uCodePage, specifies the codepage to be used when
performing the conversion. This discussion applies to the first parameter
of WideCharToMultiByte() as well. The codepage can be any valid codepage
number. It is a good idea to check this number with IsValidCodepage(), even
though MultiByteToWideChar() returns an error if an invalid codepage is
used. The codepage may also be one of the following values:
<P>
<PRE>   CP_ACP       ANSI codepage
   CP_OEMCP     OEM (original equipment manufacturer) codepage

</PRE>CP_ACP instructs the API to use the currently set default Windows ANSI
codepage. CP_OEMCP instructs the API to use the currently set default OEM
codepage.
<P>
If Win32 ANSI APIs are used to get filenames from a Windows NT system, use
CP_ACP when converting the string. Windows NT retrieves the name from the
physical device and translates the OEM name into Unicode. The Unicode name
is translated into ANSI if an ANSI API is called, then it can be translated
back into Unicode with MultiByteToWideChar().
<P>
If filenames are being retrieved from a file that is OEM encoded, use
CP_OEMCP instead.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When an application calls an ANSI function, the FAT/HPFS file systems will
call AnsiToOem(); however, if an ANSI character does not exist in an OEM
codepage, the filename will not be representable. In these cases,
SetFileApisToOEM() should be called to prevent this problem by setting a
group of the Win32 APIs to use the OEM codepage instead of the ANSI
codepage.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50<BR>
KBCategory: kbprg<BR>
KBSubcategory: KBIntlDev<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 15, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

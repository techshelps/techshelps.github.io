

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC: SetBkColor() Does Not Support Dithered Colors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69885 ">
<META NAME="KBModify" CONTENT="1998/03/04">
<META NAME="KBCreate" CONTENT="1991/03/06">
<META NAME="Keywords" CONTENT="GdiDrw kbdocerr">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The syntax for the SetBkColor function is documented in the Microsoft Windows Software Development Kit (SDK) as follows:     DWORD SetBkColor(HDC hDC, COLORREF crColor);  SetBkColor sets the current background color of the specified device context ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QAPG,QANF,QAHP,QDL9,QBWO,QBWN,QATX,QAMB,QAB5,QBBI,QAGI,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOC: SetBkColor() Does Not Support Dithered Colors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69885 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1, 3.0
<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P><PRE>    - Microsoft Windows NT versions 3.5, 3.51
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The syntax for the SetBkColor function is documented in the Microsoft
Windows Software Development Kit (SDK) as follows:
<P>
<PRE>   DWORD SetBkColor(HDC hDC, COLORREF crColor);

</PRE>SetBkColor sets the current background color of the specified device
context (DC) to the color that the crColor parameter references, or to
the nearest physical color if the device cannot represent the RGB
color value that the crColor parameter specifies. In other words,
SetBkColor cannot be used to set the background to a dithered color
and defaults to the physical color that is closest to the requested
crColor value.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This behavior can cause unexpected results for an application that
changes the background color of a control to a color that cannot be
represented by a color provided by the display device.
<P>
Specifically, when an application specifies a dithered color for the
background of an edit control, and specifies the same color for the
text background, Windows paints the control in two distinct colors.
<P>
For example, using the standard VGA display driver, the following
call, in which COLOR_INACTIVEBORDER is a green/gray specified by
RGB(64, 128, 128), sets the background color to gray (RGB(128, 128,
128)) rather than the dithered green/gray that is desired:
<P>
<PRE>   SetBkColor(wParam, GetSysColor(COLOR_INACTIVEBORDER));

</PRE>To illustrate, if the application uses the function call while
processing the WM_CTLCOLOR message to change the color of an edit
control, the window background is painted green/gray, and the text
background defaults to the nearest physical color, which is gray. This
produces a gray rectangle inside a green/gray rectangle rather than
the desired green/gray for the entire edit control.
<P>
This behavior can also occur with other controls such as option
buttons and list boxes. However, an application can avoid this problem
by using the SetBkMode function to set the background mode to
TRANSPARENT. This allows the dithered brush pattern to show through
beneath the text to achieve the desired results. That solution is not
practical with a multiline edit control because if text is inserted,
and the background mode has been set to TRANSPARENT, the text that is
pushed to the right by the inserted text leaves its image behind. The
result is text superimposed on top of other text, which quickly
becomes unreadable.
<P>
To partially work around this situation for a multiline edit control,
use the GetNearestColor function to determine the nearest physical
color to the desired color, as in the code fragment below. In this
case, the entire edit control is gray:
<P>
<PRE>   case WM_CREATE:
      {
      HDC hDC;
      hDC = GetDC(hWnd);
      hGrayBrush = CreateSolidBrush(GetNearestColor(hDC,
            RGB(64, 128, 128)));
      ReleaseDC(hWnd, hDC);
      hWndEdit = CreateWindow( ... ES_MULTILINE ... );
      }
      break;

   case WM_CTLCOLOR:
         if (HIWORD(lParam) == CTLCOLOR_EDIT)
         // Use the following line instead of the two above for
         // 32-bit Windows
         // case WM_CTLCOLOREDIT:
         {
         // The following call creates the nearest physical
         // color; therefore, it will be the same as the
         // hGrayBrush created above.
         SetBkColor(wParam, RGB(64, 128, 128));
         SetTextColor(wParam, RGB(255, 0, 0)); // red text
         return (DWORD)hGrayBrush;
         }
      else
        return DefWindowProc(hWnd, identifier, wParam, lParam);
      break;
</PRE> 
Keywords          : GdiDrw kbdocerr</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Win32 SDK Version 3.5 Bug List - WinDbg Debugger </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122681">
<META NAME="KBModify" CONTENT="1994/11/29">
<META NAME="KBCreate" CONTENT="1994/11/09">
<META NAME="Keywords" CONTENT="kbtool kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The following is a list of bugs in the WinDbg debugger that were known at the time of the release of the Win32 SDK version 3.5.  MORE INFORMATION   - Enter rgbGlobal, s in watch window (note: rgbGlobal is defined as a    character array). The varia...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVV,QAB9,QBV8,QBXS,QAY5,QAAP,QAH4,QAKM,QAB4,QATL,QATK,QAGI,QABA,QAML,QAKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Win32 SDK Version 3.5 Bug List - WinDbg Debugger</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 29, 1994</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122681</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK), version 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is a list of bugs in the WinDbg debugger that were known
at the time of the release of the Win32 SDK version 3.5.
<P>
<P><h2>MORE INFORMATION</h2>
 

<UL><LI>Enter rgbGlobal, s in watch window (note: rgbGlobal is defined as a
   character array). The variable is displayed as a character string and
   an array that can be expanded. When expanding the array, the value of
   each element is "CAN0026: Error: bad format string."

<LI>REP and REPE are the same prefix codes. REPE is to be used for string
   comparisons and REP for all other instructions. WinDbg always uses REP.

<LI>Type information defined in a DLL is not available when the current
   context is another DLL or an EXE.

<LI>Breakpoint message classes do not match class list in SPY.

<LI>C++ expresssion evaluator doesn't handle default function arguments.
   This is because the compiler does not include them in the debug
   information.

<LI>Locals window updates on radix change.

<LI>Evaluation of a function with breakpoints returns an incomplete result.

<LI>The Memory Window can't be scrolled up before the starting address.

<LI>Locals window collapses expanded structures on change of scope, such
   as stepping into a block (not a new function).

<LI>The value of array members cannot be changed.

<LI>The expression evaluator does not handle casting from a class to a
   primitive data type.

<LI>Remove Last in Quickwatch only works once when multiple items are added
   to the watch list in a single quickwatch session.

<LI>The return value type is not reported for ?&lt;FuncName&gt;.

<LI>Function evaluation reports "Error: function requires implicit
   conversion" for a function taking a structure (not a pointer to
   a structure).

<LI>Watch window shift-key selection is not consistent: sometimes all
   characters from the beginning of the expression to the caret position
   are selected, sometimes 2 characters are selected.

<LI>User DLLs dialog silently discards edits after picking a DLL and
   changing the radio button from suppress to load.

<LI>Information windows don't maintain color after structure expansion.

<LI>WinDbg disassembles F2 66 F0 F0 AF as "repne lock lock sca" not
   "repne lock lock scasw".

<LI>Breakpoints may not work correctly in multithreaded apps in areas not
   protected by critical sections.

<LI>Choosing Stop Debugging and Restart causes memory leak (100K per
   iteration).

<LI>Combo box in dialog for browsing symbol files is too narrow to show
   the *.dbg.

<LI>Debug.Watch does not set default watch expression to the selection
   made in the source window.

<LI>If you set a conditional breakpoint, you step over it with an F10, and
   the condition is not currently satisfied, the program will run to
   completion, rather than stepping.

<LI>Long expression (?arg00+arg01+...+arg31) causes debuggee to run to
   termination.

<LI>?&lt;function returning near pointer&gt; displays segment.

<LI>Windbg hangs if exited during aedebug start.

<LI>A vararg function evaluation fails on Mips and Alpha.

<LI>Private members may not be evaluatable.

<LI>First Command Window prompt after connecting to target machine for
   kernel debugging is "&gt;", not "KDx86&gt;", "KDMIPS&gt;", or "KDALPHA&gt;".

<LI>Context expression evaluation of item up the callstack cannot be
   evaluated and causes CXX0036: Error: bad context {...} specification.

<LI>Alpha: Disassembly of RS, RC, RPCC, FETCH, and FETCH_M instructions
   displays no operand.

<LI>Help file says "u" command is for unfreezing a thread. The "u" command
   is for unassemble; it is the "z" command that is used for unfreezing a
   thread.

<LI>Automatic forward searching not done by breakpoint dialog. Otherwise,
   when setting a breakpoint on a line that does not contain executable
   code, the breakpoint is set on the next executable line.

<LI>Automatic forward searching not done when modules are loaded. Otherwise,
   when setting a breakpoint on a line that does not contain executable
   code, the breakpoint is set on the next executable line.

<LI>OK button not always active on Set Process dialog.

<LI>Alpha: Large enumerated value not displayed correctly (16-bits instead
   of 32-bits).

<LI>The Delete button in User DLLs dialog is always active.

<LI>?Spinlock::Spinlock should display the prototype for the function, but
   it causes CXX0046: Error: argument list required for member function.

<LI>Flat callstack displayed debugging 16-bit Windows-based application.

<LI>File menu Save_All is not enabled consistently on all platforms.

<LI>Page up/down goes farther than scroll thumb in the Memory Window.

<LI>Page up/down doesn't move scroll thumb in Memory Window.

<LI>Disassembler option "Display Symbols" ignored on Alpha.

<LI>Ppcodes always displayed in lower case in MIPS disasembly, even if
   "Uppercase symbols and opcodes" is checked.

<LI>Create several workspaces for a single program, choose Delete from the
   Program menu, and select several of the workspaces. WinDbg locks up
   when you select OK.

<LI>Deleting the last debugger DLL causes an access violation.

<LI>Bad caret movement when editing Memory Window with ASCII format.

<LI>Calls window not updated if the current thread is changed with the
   Set Thread dialog. The Calls window is updated if the Command window is
   used to set the current thread.

<LI>Thread-specific translations of segment registers is not done. The
   segment register is translated using thread 0's descriptor table.

<LI>When stepping over a function which contains a breakpoint, execution
   halts, but there is no message indicating that a breakpoint was hit.

<LI>Value of "this" pointer is incorrect in a virtual function in a derived
   class.

<LI>Based pointers in flat segments are displayed as a 16-bit value, not a
   32-bit value. In addition, nothing happens when you click the expansion
   button.

<LI>WINDBG won't set a breakpoint on code placed in memory and then
   executed.

<LI>Windbg does not know about all exceptions that can occur while
   debugging 16-bit code.

<LI>Alpha: CVTxx instructions disassembled with 3 operands, instead of
   only 2 operands. The first operand is wrong, the second operand would be
   the correct first operand, and the third operand would be the correct
   second operand.

<LI>!help &lt;str&gt; reports that there is no help available.

<LI>Set a breakpoint on a function call which spans multiple source lines,
   but don't set the breakpoint on the last line. Save the information and
   leave the debugger. When you restart WinDbg with the saved information,
   WinDbg cannot resolve the breakpoint.

<LI>Alpha: Cannot step through call through a function pointer.

<LI>Commands sxeld and sxdld cause the debugger to stop when a DLL is
   loaded.

<LI>If there are no symbols loaded, double-clicking a symbol in the call
   stack produces a disassembly window with a starting address of 0.

<LI>The following context operators cause "CXX0036: Error: bad context {...}
   specification":
<P>
<P><PRE>      ?{,functest.c,functest.exe}count
      ?{,functest.c,}count
</PRE><P>
   The following context operators cause "CXX0017: Error: symbol not
   found":
<P><PRE>      ?{,,functest.exe}count
      ?{,,}count
</PRE>
<LI>When the current instruction is "cmp dword ptr [esp+18],01", the
   register window shows a calculation based on [esp], rather than
   [esp+18].

<LI>WinDbg displays only the first letter of a 'const WCHAR *const'
   variable. Casting the variable to a WCHAR * in the Watch window
   works around the problem.

<LI>Run windbg -g cmd.exe and invoke a batch file that repeatedly invokes
   another command; WinDbg will leak memory.

<LI>x86: f2a6 is disassembled as "repnee cmpsb", not "repne cmpsb",
   f2a7 is disassembled as "repnee cmpsb", not "repne cmpsd",
   f2ae is disassembled as "repnee scasb", not "repne scasb",
   f2af is disassembled as "repnee scasd", not "repne scasd",
   f0a6 is disassembled as "locke cmpsb", not "lock cmpsb",
   f0af is disassembled as "locke scasd", not "lock scasd",
   f32ea6 is disassembled as "rep cmpsb", not "repe cmpsb",
   f326a7 is disassembled as "rep cmpsd", not "repe cmpsd",
   f32ea7 is disassembled as "rep cmpsd", not "repe cmpsd",
   f366a7 is disassembled as "rep cmpsw", not "repe cmpsw",
   f36665a7 is disassembled as "rep cmpsw", not "repe cmpsw",
   f326ae is disassembled as "rep scasb", not "repe scasb",
   f365af is disassembled as "rep scasd", not "repe scasd",
   f33eaf is disassembled as "rep scasd", not "repe scasd",
   f3f0af is disassembled as "rep locke scasw", not "repe lock scasw",
   f366af is disassembled as "rep scasw", not "repe scasw",
   f36636af is disassembled as "rep scasw", not "repe scasw".

<LI>dc doesn't accept the '&amp;' prefix for an address specifier.

<LI>CXX0004: Error: syntax error on reference to float array. For
   example, the error is produced by "g .115;?Pf[8], where Pf is
   declared float Pf[11].

<LI>If you have a DLL built with multiple files with the same name (that
   live in different source directories), you cannot set a break point in
   2nd file with same name.

<LI>Error "CXX0034: Error: types incompatable with operator" accessing
   members, member functions, and overloaded operators of base classes
   and virtual base classes or a derived class.

<LI>Alpha: WinDbg doesn't display floating part of a float constant.

<LI>Crash dumps fail because of bad symbol lookup. This breaks !process
   when kernel debugging as well.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.50<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: TlsWindbg<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 29, 1994</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Message Broadcasting Process Causes Deadlock </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175332">
<META NAME="KBModify" CONTENT="1997/10/21">
<META NAME="KBCreate" CONTENT="1997/10/17">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  A deadlock results when a process waits on the handle of another process that broadcasts a message.  CAUSE =====  This occurs when the waiting process is waiting in the thread that processes the messages sent to the window (the main window thread)....">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEV,QAYC,QAUQ,QAGI,QAUD,QA2O,QAMA,QABA,QAJH,QAIF,QDL9,QBWO,QBWN,QBVV,QA9Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Message Broadcasting Process Causes Deadlock</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175332</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.51, 4.0
   - Microsoft Windows 95
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A deadlock results when a process waits on the handle of another process
that broadcasts a message.
<P>
<P><h2>CAUSE</h2>
 
<P>
This occurs when the waiting process is waiting in the thread that
processes the messages sent to the window (the main window thread).
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To prevent this deadlock situation the waiting process can wait in a
separate thread, leaving the main window thread free to process window
messages, or use the MsgWaitForMultipleObjects() API in conjunction with
the dispatching messages.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To receive notification when a process has terminated, a Win32 application
may call WaitForSingleObject() and specify the process handle of the
application to be waited on. Normally, this will cause the waiting process
to block until the application being waited on terminates. Then
WaitForSingleObject() will return WAIT_OBJECT_0 and the waiting process
will continue to execute.
<P>
Sometimes applications broadcast messages to some or all other windows on
the system. In this event the above method will cause a deadlock situation
if the waiting application is not free to process messages. If the waiting
application is waiting in its thread that processes window messages, then
no messages can be processed until the wait is complete. If the process
waited on calls SendMessage() and broadcasts a message to the window of the
waiting process, then a deadlock results. The SendMessage() will not return
until the message is processed, and the waiting process cannot dispatch the
message until its WaitForSingleObject() call returns. For a description of
a common OLE manifestation of this problem, please refer to the following
Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OLEPROG/Q136885.htm">Q136885</A></B>
   TITLE     : INFO: OLE Threads Must Dispatch Messages

</PRE>To prevent this deadlock, the waiting application should wait in a separate
thread, thus freeing the main thread to process messages. When the process
that is being waited on completes and WaitForSingleObject() returns, the
waiting thread can notify the main thread by sending a user-defined message
to the message queue of the main window. The main thread will interpret the
user-defined message as completion of the waited-on process. For more
information about user-defined messages, please refer to the following
Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q86835.htm">Q86835</A></B>
   TITLE     : HOWTO: Define Private Messages for Application Use

</PRE>Another way to avoid this problem is to have the waiting thread call
MsgWaitForMultipleObjects() in a loop, which calls DispachMessage() when a
message needs to be processed. For an example of this technique see the
Knowledge Base article referenced above on the OLE problem (<B><A HREF="../OLEPROG/Q136885.htm">Q136885</A></B>).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Setup<BR>
Version           : WINNT:3.51,4.0;<BR>
Platform          : Win95 winnt<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Method for Sending Text to the Clipboard </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q35100 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1988/09/01">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Sending text to the Clipboard is usually a cumbersome process of allocating and locking global memory, copying the text to that memory, and sending the Clipboard the memory handle. This method involves many pointers and handles and makes the entire...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QATX,QAEF,QA9N,QAMB,QANH,QAH6,QA7O,QAOE,QAMN,QAB5,QASB,QAY2,QBQC,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Method for Sending Text to the Clipboard</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q35100 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.0 and 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sending text to the Clipboard is usually a cumbersome process of
allocating and locking global memory, copying the text to that memory,
and sending the Clipboard the memory handle. This method involves many
pointers and handles and makes the entire process difficult to use and
understand.
<P>
Clipboard I/O is easily accomplished with an edit control. If a
portion of text is highlighted, an application can send the edit
control a WM_COPY or WM_CUT message to copy or cut the selected text
to the Clipboard. In the same manner, text can be pasted from the
Clipboard by sending a WM_PASTE message to an edit control.
<P>
The following example demonstrates how to use an edit control
transparently within an application to simplify sending and retrieving
text from the Clipboard. Note that this code will not be as fast as
setting or getting the Clipboard data explicitly, but it is easier
from a programming standpoint, especially if the text to be sent is
already in an edit control. Note also that the presence of the edit
window will occupy some additional memory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For simplified Clipboard I/O, do the following:

<OL><P><LI>Declare a global HWND, hEdit, which will be the handle to the edit
   control.

<P><LI>In WinMain, use CreateWindow() to create a child window edit
   control. Use the style WS_CHILD, and give the control dimensions
   large enough to hold the most text that may be sent to or received
   from the Clipboard. CreateWindow() returns the handle to the edit
   control that should be saved in hEdit.

<P><LI>When a Cut or Copy command is invoked, use SetWindowText() to place
   the desired string in the edit control, then use SendMessage() to
   select the text and copy or cut it to the Clipboard.

<P><LI>When a Paste command is invoked, use SetWindowText() to clear the
   edit control, then use SendMessage() to paste text from the
   Clipboard. Finally, use GetWindowText() to copy the text in the
   edit control to a string buffer.
<P>
</OL>The actual coding for this procedure is as follows:
<P>
<PRE>    .
    .
    .

    #define ID_ED    100
    HWND       hEdit;

    .
    .
    .
    /* In WinMain: hWnd is assumed to be the handle of the parent window,
*/
    /* hInstance is the instance handle of the parent.
*/
    /* The "EDIT" class name is required for this method to work. ID_ED
*/
    /* is an ID number for the control, used by Get/SetDlgItemText.
*/

    hEdit=CreateWindow("EDIT",
                       NULL,
                       WS_CHILD | BS_LEFTTEXT,
                       10, 15, 270, 10,
                       hWnd,
                       ID_ED,
                       hInstance,
                       NULL);


    .
    .
    .

    /* In the procedure receiving CUT, COPY, and PASTE commands:         */
    /* Note that the COPY and CUT cases perform the same actions, only   */
    /* the CUT case clears out the edit control.                         */

    /* Get the string length */
    short    nNumChars=strlen(szText);

    case CUT:
        /* First, set the text of the edit control to the desired string */
        SetWindowText(hEdit, szText);

        /* Send a message to the edit control to select the string */
        SendMessage(hEdit, EM_SETSEL, 0, MAKELONG(0, nNumChars));

        /* Cut the selected text to the clipboard */
        SendMessage(hEdit, WM_CUT, 0, 0L);
        break;

    case COPY:
        /* First, set the text of the edit control to the desired string */
        SetWindowText(hEdit, szText);

        /* Send a message to the edit control to select the string */
        SendMessage(hEdit, EM_SETSEL, 0, MAKELONG(0, nNumChars));

        /* Copy the text to the clipboard */
        SendMessage(hEdit, WM_COPY, 0, 0L);
        break;


    case IDM_PASTE:
        /* Check if there is text available */
        if (IsClipboardFormatAvailable(CF_TEXT))
            {
            /* Clear the edit control */
            SetWindowText(hEdit, "\0");

            /* Paste the text in the clipboard to the edit control */
            SendMessage(hEdit, WM_PASTE, 0, 0L);

            /* Get the test from the edit control into a string.    */
            /* nNumChars represents the number of characters to get */
            /* from the edit control.                               */
            GetWindowText(hEdit, szText, nNumChars);
            }
        else
            MessageBeep(0); /* Beep on illegal request */
        break;
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrClp<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Export Data from a DLL or an Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90530 ">
<META NAME="KBModify" CONTENT="1996/12/16">
<META NAME="KBCreate" CONTENT="1992/10/18">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  It is possible for a Win32-based application to be able to address DLL global variables directly by name from within the executable. This is done by exporting global data names in a way that is similar to the way you export a DLL function name. Use...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAYL,QAKJ,QA4Q,QAYY,QA7H,QANG,QAY2,QAB4,QAH4,QDL9,QBWO,QBWN,QACJ,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Export Data from a DLL or an Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 16, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90530 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P><PRE>    - Microsoft Windows NT versions 3.1, 3.5, 3.51, 4.0
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is possible for a Win32-based application to be able to address DLL
global variables directly by name from within the executable. This is done
by exporting global data names in a way that is similar to the way you
export a DLL function name. Use the following steps to declare and utilize
exported global data.

<OL><P><LI>Define the global variables in the DLL code. For example:
<P>
<P><PRE>      int i = 1;
      int *j = 2;
      char *sz = "WBGLMCMTP";
</PRE>
<P><LI>Export the variables in the module-definition (DEF) file. With the 3.1
   SDK linker, use of the CONSTANT keyword is required, as shown below:
<P>
   EXPORTS
<P><PRE>      i  CONSTANT
      j  CONSTANT
      sz CONSTANT
</PRE><P>
   With the 3.5 SDK linker or the Visual C++ linker, use of the DATA
   keyword is required, as shown below
<P>
   EXPORTS
<P><PRE>      i  DATA
      j  DATA
      sz DATA
</PRE><P>
   Otherwise, you will receive the warning
<P>
<P><PRE>      warning LNK4087: CONSTANT keyword is obsolete; use DATA
</PRE><P>
   Alternately, with Visual C++, you can export the variables with:
<P>
<P><PRE>      _declspec( dllexport ) int i;
      _declspec( dllexport ) int *j;
      _declspec( dllexport ) char *sz;
</PRE>
<P><LI>If you are using the 3.1 SDK, declare the variables in the modules that
   will use them (note that they must be declared as pointers because a
   pointer to the variable is exported, not the variable itself):
<P>
<P><PRE>      extern int *i;
      extern int **j;
      extern char **sz;
</PRE><P>
   If you are using the 3.5 SDK or Visual C++ and are using DATA, declare
   the variables with _declspec( dllimport ) to avoid having to manually
   perform the extra level of indirection:
<P>
<P><PRE>      _declspec( dllimport ) int i;
      _declspec( dllimport ) int *j;
      _declspec( dllimport ) char *sz;
</PRE>
<P><LI>If you did not use _declspec( dllimport ) in step 3, use the values by
   dereferencing the pointers declared:
<P>
<P><PRE>      printf( "%d", *i );
      printf( "%d", **j );
      printf( "%s", *sz );
</PRE><P>
   It may simplify things to use #defines instead; then the variables can
   be used exactly as defined in the DLL:
<P>
<P><PRE>      #define i *i
      #define j *j
      #define sz *sz
</PRE><P>
<P><PRE>      extern int i;
      extern int *j;
      extern char *sz;
</PRE><P>
<P><PRE>      printf( "%d", i );
      printf( "%d", *j );
      printf( "%s", sz );
</PRE><P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
NOTE: This technique can also be used to export a global variable from an
application so that it can be used in a DLL.
<P>
<P><h2>REFERENCE</h2>
 
<P>
For more information on the use of EXPORTS and CONSTANT in the Module
Definition File (DEF) file for the 3.1 SDK, see Chapter 4 of the Win32 SDK
"Tools" manual.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbhowto<BR>
KBSubcategory: BseDll<BR>
Additional reference words: 3.10 3.50 4.00 95<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 16, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use a Program to Calculate Print Margins </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122037">
<META NAME="KBModify" CONTENT="1995/05/25">
<META NAME="KBCreate" CONTENT="1994/10/25">
<META NAME="Keywords" CONTENT="kbprint kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The Windows Software Development Kit (SDK) does not provide a function to calculate printer margins directly. An application can calculate this information using a combination of printer escapes and calls to the GetDeviceCaps() function in Windows ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBWP,QDL9,QBWO,QBWN,QAGB,QAOX,QBWQ,QAE5,QAH4,QABI,QAIF,QBE7,QBE6,QBC9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use a Program to Calculate Print Margins</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 25, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122037</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
<LI>Microsoft Win32 SDK, versions 3.1, 3.5, 3.51, and 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Windows Software Development Kit (SDK) does not provide a function to
calculate printer margins directly. An application can calculate this
information using a combination of printer escapes and calls to the
GetDeviceCaps() function in Windows or by using GetDeviceCaps() in Windows
NT. This article discusses those functions and provides code fragments as
illustrations.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An application can determine printer margins as follows:

<OL><P><LI>Calculate the left and top margins
<P>
   a. Determine the upper left corner of the printable area by using the
<P><PRE>      GETPRINTINGOFFSET printer escape in Windows or by calling
      GetDeviceCaps() with the PHYSICALOFFSETX and PHYSICALOFFSETY
      indices in Windows NT. For example:
</PRE><P>
<P><PRE>      // Init our pt struct in case escape not supported
      pt.x = 0; pt.y = 0;
</PRE><P>
<P><PRE>      // In Windows NT, the following 2 calls replace GETPRINTINGOFFSET:
      // pt.x = GetDeviceCaps(hPrnDC, PHYSICALOFFSETX);
      // pt.y = GetDeviceCaps(hPrnDC, PHYSICALOFFSETY);
</PRE><P>
<P><PRE>      // In Windows, use GETPRINTINGOFFSET to fill the POINT struct
      // Drivers are not required to support the GETPRINTINGOFFSET escape,
      // so call the QUERYESCSUPPORT printer escape to make sure
      // it is supported.
      Escape (hPrnDC, GETPRINTINGOFFSET, NULL, NULL, (LPPOINT) &amp;pt);
</PRE><P>
   b. Determine the number of pixels required to yield the desired margin
<P><PRE>      (x and y offsets) by calling GetDeviceCaps() using the LOGPIXELSX and
      LOGPIXELSY flags.
</PRE><P>
<P><PRE>      // Figure out how much you need to offset output. Note the
      // use of the "max" macro. It is possible that you are asking for
      // margins that are not possible on this printer. For example, the HP
      // LaserJet has a 0.25" unprintable area so we cannot get margins of
      // 0.1".
</PRE><P>
<P><PRE>      xOffset = max (0, GetDeviceCaps (hPrnDC, LOGPIXELSX) *
<PRE></PRE>                        nInchesWeWant - pt.x);

      yOffset = max (0, GetDeviceCaps (hPrnDC, LOGPIXELSY) *
                        nInchesWeWant - pt.y);

   // When doing all the output, you can either offset it by the above
   // values or call SetViewportOrg() to set the point (0,0) at
   // the margin offset you calculated.

   SetViewportOrg (hPrnDC, xOffset, yOffset);
   ... all other output here ...

</PRE><P><LI>calculate the bottom and right margins
<P>
   a. Obtain the total size of the physical page (including printable and
<P><PRE>      unprintable areas) by using the GETPHYSPAGESIZE printer escape in
      Windows or by calling GetDeviceCaps() with the PHYSICALWIDTH and
      PHYSICALHEIGHT indices in Windows NT.
</PRE><P>
   b. Determine the number of pixels required to yield the desired right
<P><PRE>      and bottom margins by calling GetDeviceCaps using the LOGPIXELSX and
      LOGPIXELSY flags.
</PRE><P>
   c. Calculate the size of the printable area with GetDeviceCaps() using
<P><PRE>      the HORZRES and VERTRES flags.
</PRE><P>
   The following code fragment illustrates steps 2a through 2c:
<P>
<PRE>   // In Windows NT, the following 2 calls replace GETPHYSPAGESIZE
   // pt.x = GetDeviceCaps(hPrnDC, PHYSICALWIDTH);
   // pt.y = GetDeviceCaps(hPrnDC, PHYSICALHEIGHT);

   // In Windows, use GETPHYSPAGESIZE to fill the POINT struct
   // Drivers are not required to support the GETPHYSPAGESIZE escape,
   // so call the QUERYESCSUPPORT printer escape to make sure
   // it is supported.
   Escape (hPrnDC, GETPHYSPAGESIZE, NULL, NULL, (LPPOINT) &amp;pt);

   xOffsetOfRightMargin = xOffset +
                          GetDeviceCaps (hPrnDC, HORZRES) -
                          pt.x -
                          GetDeviceCaps (hPrnDC, LOGPIXELSX) *
                          wInchesWeWant;

   yOffsetOfBottomMargin = yOffset +
                           GetDeviceCaps (hPrnDC, VERTRES) -
                           pt.y -
                           GetDeviceCaps (hPrnDC, LOGPIXELSY) *
                           wInchesWeWant;

</PRE></OL>NOTE: Now, you can clip all output to the rectangle bounded by xOffset,
yOffset, xOffsetOfRightMargin, and yOffsetOfBottomMargin.
<P>
For further information about margins, query in the Microsoft Knowledge
Base by using these words:
<P>
<PRE>   GETPHYSPAGESIZE and GETPRINTINGOFFSET and GetDeviceCaps
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95<BR>
KBCategory: kbprint kbprg kbcode<BR>
KBSubcategory: GdiPrn<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 25, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

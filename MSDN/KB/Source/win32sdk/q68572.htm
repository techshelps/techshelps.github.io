

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Caret Position &amp; Line Numbers in Multiline Edit Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q68572 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1991/01/22">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article explains how to determine the position (row and column) of the caret and the line number of the first visible line of text in a multiline edit control.  MORE INFORMATION  Edit controls process several messages that return information r...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QAKC,QAIB,QA5V,QBXT,QBC6,QAUD,QACI,QBB2,QAG8,QAKD,QAJP,QAGI,QA7O,QAB5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Caret Position &amp; Line Numbers in Multiline Edit Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q68572 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.0 and 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to determine the position (row and column) of the
caret and the line number of the first visible line of text in a multiline
edit control.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Edit controls process several messages that return information relevant to
the position of the caret within the control. These messages help an
application determine the line number of the caret relative to the number
of lines of text in the control.
<P>
Once the line number is known, the application can compute the caret's
character position within that line and the line number of the first
visible line of text in the control.
<P>
An edit control must be subclassed in order to track the caret position
because the position changes with mouse clicks and keystrokes. The subclass
procedure must process the WM_KEYDOWN and WM_LBUTTONDOWN messages, and
compute the caret position upon receipt of each message.
<P>
The remainder of this article describes three procedures:

<UL><LI>Finding the line number of the caret position
<LI>Finding the column number of the caret position
<LI>Finding the line number of the first visible line
<P>
</UL>Note that you may replace any mention of the SendMessage API in this
article with the SendDlgItemMessage function. Also note that the term
return value refers to the value returned by the SendMessage or the
SendDlgItemMessage function.
<P>
<P><h3>Finding the Line Number of the Caret Position</h3>
 
<P>
Perform the following two steps:

<OL><P><LI>Send the EM_GETSEL message to the edit control. The high-order word
   of the return value is the character position of the caret relative
   to the first character in the control.

<P><LI>Send the EM_LINEFROMCHAR message to the edit control and specify the
   value returned from step 1 as wParam. Add 1 to the return value to
   get the line number of the caret position because Windows numbers
   the lines starting at zero.
<P>
</OL><h3>Finding the Column Number of the Caret Position</h3>
 
<P>
Perform the following three steps:

<OL><P><LI>Send the EM_GETSEL message to the edit control. The high-order word
   of the return value is the character position of the caret relative
   to the first character in the control.

<P><LI>Send the EM_LINEINDEX message with wParam set to -1. The value
   returned is the count of characters that precede the first
   character in the line containing the caret.

<P><LI>Subtract the value returned in step 2 from the value in step 1 and
   add 1 because Windows numbers the columns starting at zero. This
   result is the column number of the caret position.
<P>
</OL><h3>Finding the Line Number of the First Visible Line</h3>
 
<P>
Windows 3.1 and later define the EM_GETFIRSTVISIBLELINE message, which an
application can send to a single line or a multiline edit control. For
single line edit controls, this value returned for the message is the
offset of the first visible character. For multiline edit controls,
the value returned is the number of the first visible line.
<P>
Under Windows 95, it would be more efficient to use a combination of
GetCaretPos() and EM_CHARFROMPOS.
<P>
If an application must be compatible with Windows 3.0, it can perform
the following 10-step procedure:

<OL><P><LI>Follow steps 1 and 2 of "Finding the Line Number of the Caret
   Position," presented above, and save the line number.

<P><LI>Call the GetCaretPos function to fill a POINT structure with the
   caret's coordinates relative to the client area of the edit
   control. (The client area is inside the border.)

<P><LI>Call the GetDC function using the handle to the edit control to
   retrieve a handle to a device context for the edit control. Store
   this handle in a variable named hDC.

<P><LI>Send the WM_GETFONT message to the edit control. The return value
   is a handle to the font used by the edit control. If the value
   returned is NULL, proceed to step 6 because the control is using
   the system default font.

<P><LI>Call the SelectObject function to select the font used by the edit
   control into hDC. Do not call the SelectObject function if
   WM_GETFONT returned NULL in step 4. Save the value returned by
   SelectObject in the hOldFont variable.

<P><LI>Call the GetTextMetrics function with hDC to fill a TEXTMETRIC
   data structure with information about the font used by the edit
   control (the font which is selected into hDC). The field of
   interest is tmHeight.

<P><LI>While the vertical coordinate of the caret is greater than the
   value of tmHeight, subtract tmHeight from the vertical coordinate
   and subtract 1 from the line number of the caret from step 1.

<P><LI>Repeat step 7 until the vertical coordinate of the caret is less
   than or equal to tmHeight.

<P><LI>Call SelectObject to select hOldFont back into hDC. Then call
   ReleaseDC to return the display context to the system.

<P><LI>The value remaining in the line number variable is the line number
   of the first visible line in the edit control.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 4.00 95 caretpos<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCrt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

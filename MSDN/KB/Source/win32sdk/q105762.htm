

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Share Memory Between 32-Bit and 16-Bit Code on Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105762">
<META NAME="KBModify" CONTENT="1997/06/10">
<META NAME="KBCreate" CONTENT="1993/10/24">
<META NAME="Keywords" CONTENT="kbprg W32s W32sThunk">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article discusses many of the issues involved in sharing memory across the process boundary under Win32s.  MORE INFORMATION  Memory allocated by a Win32-based application using GlobalAlloc() can be shared with a 16-bit Windows-based applicatio...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAD7,QAH7,QAH6,QBW6,QAH4,QAW9,QBVV,QA3A,QAYV,QAJH,QABN,QAC2,QAJQ,QA7H,QA2O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Share Memory Between 32-Bit and 16-Bit Code on Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105762</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Win32s versions 1.30, 1.30a, 1.30c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses many of the issues involved in sharing memory across
the process boundary under Win32s.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Memory allocated by a Win32-based application using GlobalAlloc() can be
shared with a 16-bit Windows-based application on Win32s. If the memory is
allocated with GMEM_MOVEABLE, then GlobalAlloc() returns a handle and not a
pointer. The 16-bit Windows-based application can use the low word of this
handle. The high word is all zeros. Make sure to lock the handle using
GlobalLock() in the 16-bit Windows-based application to get a pointer.
<P>
NOTE: GlobalAlloc (GMEM_FIXED...) is not the same as
GlobalFix(GlobalAlloc(GMEM_MOVEABLE...)). GMEM_FIXED will allocate locked
pages, which is most often not what you want.
<P>
Memory allocated by a 16-bit Windows-based application via GlobalAlloc()
must be fixed via GlobalFix() and translated before it can be passed to a
Win32-based application. Whenever a Windows object is passed to a
Win32-based application by its 32-bit address, the memory must be fixed,
because the address is computed from the selector base only once. If
Windows moves the memory, the linear address used by the Win32-based
application will no longer be valid.
<P>
If you are using the Universal Thunk, you can also pass a buffer from a
Win32-based application to a 16-bit dynamic-link library (DLL) in the
UTRegister() call. The address is translated for you. Another alternative
is the translation list passed to the callable stubs. Addresses passed in
the translation list will be translated during the thunking process. For
more information on the Universal Thunk, please see the "Win32 Programmer's
Reference."
<P>
NOTE: The ability to share global memory handles under Win32s is a result
of the implementation of Windows 3.1, in which all applications run in the
same address space. This is not true of existing Win32 platforms and will
not be true of future Win32 platforms.
<P>
Allocating memory with GlobalAlloc() gets you tiled selectors. However, you
can only tile 255 selectors at a time and there is an overall limit of 8192
selectors in the system. If you allocate memory using new, malloc(),
HeapAlloc(), LocalAlloc() or VirtualAlloc, your allocated memory does not
automatically get you tiled selectors. However, because you don't
automatically get tiled selectors, whenever you pass memory to 16-bit code,
selectors must be synthesized for you. There's currently a limit of 256
selectors that Win32s maintains for select synthesis. Also note that each
block of memory that you pass is limited to 32K in size due to the way that
Win32s tiles selectors.
<P>
REFERENCES:
 
<P>
For more information on the limitations of sharing memory between 16-bit
and 32-bit code under Win32s, please refer to the following Knowledge Base
articles:
<P>
<PRE>  ARTICLE ID: <B><A HREF="../WIN32SDK/Q126708.htm">Q126708</A></B>
  TITLE     : HOWTO: Pass Large Memory Block Through Win32s Universal Thunk

  ARTICLE ID: <B><A HREF="../WIN32SDK/Q100833.htm">Q100833</A></B>
  TITLE     : INFO: Win32s Translated Pointers Guaranteed for 32K
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg W32s W32sThunk<BR>
Version             : 1.3 1.3a 1.3c<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

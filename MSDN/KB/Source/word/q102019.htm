

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD: Shell Command Doesn't Wait for Application to Finish </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102019">
<META NAME="KBModify" CONTENT="1997/07/30">
<META NAME="KBCreate" CONTENT="1993/07/27">
<META NAME="Keywords" CONTENT="kbmacroexample kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  When you use the Shell command to run another program from a WordBasic macro, Word does not wait for the shelled program to finish running before it processes the rest of the macro.  MORE INFORMATION  WordBasic macro processing is considered  async...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAIH,QAFF,QAVX,QAVW,QBV8,QAB9,QAJH,QA4Q,QAY5,QDL9,QBWO,QBWN,QAMH,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD: Shell Command Doesn't Wait for Application to Finish</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102019</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 2.0, 2.0a, 2.0a-CD, 2.0b,
   2.0c, 6.0, 6.0a, 6.0c
<LI>Microsoft Word for Windows 95, versions 7.0, 7.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use the Shell command to run another program from a WordBasic
macro, Word does not wait for the shelled program to finish running
before it processes the rest of the macro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
WordBasic macro processing is considered "asynchronous." This means that
macro commands are executed independently of any timing process, such as
a clock. Macros do not wait for a shelled program to finish before
executing the next command. This can cause problems in your macro,
particularly if the subsequent commands rely on processing performed
by the shelled program.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT
YOUR OWN RISK. Microsoft provides this macro code "as is" without
warranty of any kind, either express or implied, including but not
limited to the implied warranties of merchantability and/or fitness
for a particular purpose.
<P>
<P><h3>Word versions 7.0, 7.0a</h3>
 
<P>
When you use Word 7.x with Windows 95 or Windows NT, the following macro
will test to see if an application is still running and won't continue on
until the test application has finished running:
<P>
<PRE>   Sub MAIN
      test = AppIsRunning("app string")
         While test = - 1
            test = AppIsRunning("app string")
         Wend
      MsgBox "app has quit"
   End Sub

</PRE><h3>Word versions 2.0, 6.0</h3>
 
<P>
The following WordBasic user-defined function, WaitShell(), uses the
Windows function GetModuleUsage() to determine if the shelled
application has terminated. If the WinExec() function is successful in
starting the program, it returns a module handle which identifies the
instance of the loaded application. When the application is no longer
running, the module handle will be invalid and GetModuleUsage() will
return a value of 0. WaitShell() loops until the module handle is
invalid, at which point the remaining macro commands are executed.
<P>
<PRE>   Declare Function WinExec Lib "kernel"(lpszCmdLine$, fuCmdShow As \
   Integer) As Integer
   Declare Sub Yield Lib "kernel"()
   Declare Function GetModuleUsage Lib "kernel"(hInst As Integer) As \
   Integer

   Sub MAIN
      WaitShell("MYPROG.EXE")
      MsgBox "Done."
   End Sub

   Sub WaitShell(szAppToRun$)
      hInst = WinExec(szAppToRun$, 1)
      While GetModuleUsage(hInst) &gt; 0
         Yield   'Waiting
      Wend
   End Sub

   Declare Function GetModuleUsage Lib "Kernel"(hModule As Integer) \
   As Integer
   Declare Function WinExec Lib "kernel"(lpszCmdLine$, fuCmdShow As \
   Integer) As Integer
   Declare Sub WaitMessage Lib "User"()

   Sub MAIN
      WaitShell("MYPROG.EXE")  'MYPROG.EXE is any program to run
      MsgBox "Done."
   End Sub

   Sub WaitShell(szAppToRun$)
      hMod = WinExec(szAppToRun$, 1)
      If(hMod &gt; 32) Then
         While(GetModuleUsage(hMod))
            WaitMessage()
         Wend
      Else
         MsgBox "Unable to start the Application"
      End If
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
"Microsoft Windows Programmer's Reference," volume 2: Functions, pages
404, 979, and 983
<P>
Kbcategory: kbusage kbmacro
KBSubcategory: kbwordvba

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 2.0 2.0a 2.0a-cd 2.0b 2.0c 6.0c<BR>
winword 7.0 word95 word7 word6 winword winword2 yield doevents pause
<P>

Keywords          : kbmacroexample kbmacro<BR>
Version           : 2.x 6.0 6.0a 6.0c 7.0 7.0a<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

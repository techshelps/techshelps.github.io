

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WinWord: WordBasic Shell Command Doesn't Return Success Value </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q89785 ">
<META NAME="KBModify" CONTENT="1997/07/30">
<META NAME="KBCreate" CONTENT="1992/09/30">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="--   The WordBasic Shell command does not return any value indicating whether or not it was successful in starting an application in a Microsoft Word for Windows macro.  STATUS ======  Microsoft has confirmed this to be a problem in the Word for Wind...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QAIH,QAH4,QBWQ,QAUD,QAB9,QBV8,QA5E,QAAP,QAGQ,QBVV,QAB4,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WinWord: WordBasic Shell Command Doesn't Return Success Value</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q89785 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 1.0, 1.1, 1.1a, 2.0, 2.0a,
   2.0a-CD, 2.0b, 2.0c, 6.0, 6.0a, 6.0c
<LI>Microsoft Word for Windows 95, versions 7.0, 7.0a
</UL> 
 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The WordBasic Shell command does not return any value indicating whether or
not it was successful in starting an application in a Microsoft Word for
Windows macro.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Word for Windows
version's listed above. This problem was corrected in Word 97 for Windows
<P>
The suggested workaround macro that uses a Winexec API call does not work
in Word version 7.0. The names and locations of many Windows 3.x operating
system routines (often referred to as API calls) changed in Windows 95 and
Windows NT. You must update macros that declare Windows 3.x API calls to
declare the correct routines in Windows 95 or Windows NT. Windows 3.x API
function libraries are documented in the Microsoft Windows 3.1 Software
Development Kit. Windows 95 and Windows NT function libraries are
documented in the "Microsoft Win32 Software Development Kit."
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You can work around this limitation of the WordBasic Shell command by
directly calling the Windows API WinExec command from a Word for Windows
macro. The WinExec command, similar to the Shell command, is used by
Windows-based programs to start other programs. However, this command
differs in that it returns a value indicating the successful completion of
the command.
<P>
The syntax of the WinExec API call is as follows
<P>
<PRE>   WORD WinExec(lpCmdLine, nCmdShow)

</PRE>where "lpCmdLine" is a string that contains the command line (file name
plus optional parameters) for the program to be executed, and "nCmdShow"
specifies how a Windows program is to be appear when executed. This
parameter can be set to one of the following:
<P>
<PRE>   0 = Hides the window and passes activation to another window.
   1 = Activates and displays a window. If the window is minimized or
       maximized, it is restored.
   2 = Activates the window and displays it as an icon.
   3 = Activates the window and displays it maximized.
   4 = Displays window in most recent size and position. Active window
       remains active.
   5 = Activates a window and displays it in its current size and
       position.
   6 = Minimizes the window and activates the top level window in the
       window manager's list.
   7 = Displays the window as an icon and the active window remains
       active.
   8 = Displays the window in its current state and the active window
       remains active.

</PRE>The return value specifies whether or not the function was successful. A
return value less than 32 indicates that an error has occurred. The
following describes the error values returned by the WinExec function:
<P>
<PRE>   0  = Out of memory.
   2  = File not found.
   3  = Path not found.
   5  = Attempt to dynamically link to a task.
   6  = Library requires separate data segments for each task.
   10 = Incorrect Windows version.
   11 = Invalid .exe file (non-Windows .exe or error in .exe image).
   12 = OS/2 application.
   13 = DOS 3.0 application.
   14 = Unknown .exe type.
   15 = Attempt in protected mode to load an .exe file created for an
        earlier version of Windows.
   16 = Attempt to load a second instance of an .exe containing multiple
        writable data segments.
   17 = Attempt in large-frame EMS mode to load a second instance of an
        application that links to certain non-shareable DLLs already
        in use.
   18 = Attempt in real mode to load an application marked for
        protected mode only.

</PRE><h3>Using WinExec in a WordBasic Macro</h3>
 
<P>
The WordBasic Declare statement for the WinExec function is as follows:
<P>
<PRE>   Word 7.0
   --------


   Declare Function WinExec Lib "Kernel32"(lpLine As String, \
   nShow As Integer) As Integer

   Word 6.0
   --------

   Declare Function WinExec Lib "Kernel"(lpLine As String, \
   nShow As Integer) As Integer

</PRE>The following macro demonstrates how to use WinExec to start Microsoft
Excel and recover from a possible error:
<P>
<PRE>   Sub MAIN
   x = WinExec("c:\winapps\excel40\Excel", 8)
   If x &lt; 32 Then
       Goto WinExecError
   Else
       MsgBox "Excel was launched successfully!"
   End If
   Goto ByeMAIN

   WinExecError:
   Select Case x
       Case 0
           MsgBox "Out of memory"
       Case 2, 3
           MsgBox "File or path not found"
       Case 10
           MsgBox "Incorrect Windows version"
       Case 15
           MsgBox "Attempted to run older Windows EXE"
       Case Else
           MsgBox "Other fatal WinExec error"
   End Select
   ByeMAIN:
   End Sub

</PRE>WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this macro code "as is" without warranty of any
kind, either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The WordBasic Shell command is used in a Word for Windows macro to start
other programs in Microsoft Windows. The syntax of the Shell command is as
follows:
<P>
<PRE>   Shell App$, [,WindowStyle]

</PRE>This command does not return any value indicating the successful execution
of App$, which makes it difficult for the macro to determine how to proceed
(or if it can proceed if the program could not be started). Further,
WordBasic provides no mechanism for trapping execution problems using the
On Error facility.
<P>
The following macro illustrates this problem by attempting to run a program
that does not exist or that cannot be found on the MS-DOS path:
<P>
<PRE>   Sub MAIN
   Shell "noapp"
   MsgBox "I'm still running!"
   End Sub

</PRE>Word for Windows responds with the following message when it fails to
find the program named "noapp":
<P>
<PRE>   Word cannot find or run the application

</PRE>The macro then continues running as if no error occurred, even if error
trapping has been activated.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Using WordBasic," by WexTech Systems and Microsoft, pages 284-285
<P>
"Microsoft Windows Programmer's Reference," pages 4-458, 4-459
<P>
Kbcategory: kbusage kbmacro
KBSubcategory:

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 6.0 6.0a 6.0c launch 1.0 1.10 1.10a<BR>
2.0<BR>
word6 winword 7.0 word95 word7 winword winword2 2.0a 2.0a-CD 2.0b
<P>

Version           : 1.x 2.x 6.0 6.0a 6.0c 7.0 7.<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD6X: Handling Cross-Platform Differences in WordBasic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128944">
<META NAME="KBModify" CONTENT="1998/02/05">
<META NAME="KBCreate" CONTENT="1995/04/16">
<META NAME="Keywords" CONTENT="macword ntword winword word6 kbappnote kbfile kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  Microsoft Product Supports Services offers an Application Note called  Handling Cross-Platform Differences in WordBasic  (XD1155). This document describes differences that you should address when you are creating macros that will run in Microsoft W...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QBWP,QDO9,QDL9,QBWO,QBWN,QAH4,QAB9,QBWQ,QBV8,QDO7,QAY5,QAUD,QBPM,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD6X: Handling Cross-Platform Differences in WordBasic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128944</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, version 6.0
<LI>Microsoft Word for the Macintosh, version 6.0
<LI>Microsoft Word for Windows NT, version 6.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Product Supports Services offers an Application Note called
"Handling Cross-Platform Differences in WordBasic" (XD1155). This document
describes differences that you should address when you are creating macros
that will run in Microsoft Word under the Macintosh, Microsoft Windows, and
Microsoft Windows NT operating systems. This reference contains advanced
material about programming macros in WordBasic and is intended for the
advanced Word user.
<P>
<P>
<P><h3>Windows/MS-DOS</h3>
 
<P>
<PRE>You can find <A HREF="http://support.microsoft.com/download/support/mslfiles/XD1155.EXE">XD1155.EXE</A> <I>(size: 35894 bytes)</I> 
                       , a self-extracting file, on the following
</PRE>services:

<UL><LI>Microsoft's World Wide Web Site on the Internet
<P><PRE>      On the www.microsoft.com home page, click the Support icon.
      Click Knowledge Base, and select the product.
      Enter  XD1155.EXE, and click GO!
      Open the article, and click the button to download the file.
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the Softlib/Mslfiles folder.
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/XD1155.EXE">XD1155.EXE</A> <I>(size: 35894 bytes)</I> 
</PRE>
<LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (425) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/XD1155.EXE">XD1155.EXE</A> <I>(size: 35894 bytes)</I> 
</PRE><P>
</UL>For additional information about downloading, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online
               Services


</PRE><h3>Macintosh</h3>
 
<P>
The following file is available for download from the Microsoft Software 
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/XD1155.HQX">XD1155.HQX</A> <I>(size: 50848 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>For additional information about downloading, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online
               Services

</PRE><h2>THE TEXT OF XD1155</h2>
 
<P>
 
<PRE>  Microsoft(R) Product Support Services Application Note (Text File)
       XD1155: HANDLING CROSS-PLATFORM DIFFERENCES IN WORDBASIC
</PRE> 
<PRE>                                                   Revision Date: 3/95
                                                      No Disk Included

</PRE>The following information applies to Microsoft Word, version 6.0.
<P>
<PRE> ---------------------------------------------------------------------
| INFORMATION PROVIDED IN THIS DOCUMENT AND ANY SOFTWARE THAT MAY     |
| ACCOMPANY THIS DOCUMENT (collectively referred to as an Application |
| Note) IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER      |
| EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED      |
| WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR       |
| PURPOSE. The user assumes the entire risk as to the accuracy and    |
| the use of this Application Note. This Application Note may be      |
| copied and distributed subject to the following conditions: 1) All  |
| text must be copied without modification and all pages must be      |
| included; 2) If software is included, all files on the disk(s)      |
| must be copied without modification (the MS-DOS(R)  utility         |
| diskcopy is appropriate for this purpose);  3) All components of    |
| this Application Note must be distributed together;  and  4) This   |
| Application Note may not be distributed for profit.                 |
|                                                                     |
| Copyright (C) 1995 Microsoft Corporation.  All Rights Reserved.     |
| Microsoft, MS-DOS, and Windows are registered trademarks and        |
| Windows NT is a trademark of Microsoft Corporation.                 |
| Apple, Mac, and Macintosh are registered trademarks and PowerTalk   |
| and QuickDraw are trademarks of Apple Computer, Inc.                |
 --------------------------------------------------------------------

</PRE><h2>INTRODUCTION</h2>
 
<P>
This Application Note describes differences that you should address
when you are creating macros that will run in Microsoft Word under the
Macintosh(R), Microsoft Windows, and Microsoft Windows NT(TM)
operating systems. This reference contains advanced material about
programming macros in WordBasic and is intended for the advanced Word
user.
<P>
The information in this Application Note applies to Microsoft Word
versions 6.0, 6.0a, and 6.0c for Windows, Microsoft Word version 6.0
for the Macintosh, and Microsoft Word version 6.0 for Windows NT.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT
YOUR OWN RISK. Microsoft provides this macro code "as is" without
warranty of any kind, either express or implied, including but not
limited to the implied warranties of merchantability and/or fitness
for a particular purpose.
<P>
<P><h2>PLATFORM DIFFERENCES IN WORDBASIC</h2>
 
<P>
When you are writing cross-platform macros, consider whether the
platform requires different system-specific functionality in
WordBasic. A different parameter or an entirely different command may
be necessary for the macro to run on both the Macintosh and the
Windows operating systems.
<P>
Most Word for Windows macros work correctly in Word for the Macintosh
and Word for Windows NT without modification. However, areas of a
macro that deal with operating-system-specific areas may require minor
revision.
<P>
Areas that may require extra attention include:
<P>
<PRE>    - Specifying filenames and paths
    - Using settings files
    - Working with DDE
    - Calling external routines or libraries

</PRE><h2>DETERMINING THE CURRENT OPERATING SYSTEM</h2>
 
<P>
AppInfo$()
<P>
A cross-platform macro should determine the current operating system,
or platform, if the macro contains platform-specific commands.
Otherwise, the macro may return a WordBasic error when run on a
different operating system.
<P>
The WordBasic AppInfo$(1) function will identify which platform is
being used when the macro is run. AppInfo$(1) will return the
following strings for each platform:
<P>
<PRE>   Platform      Return Value
   -----------------------------

   Macintosh     "Macintosh xxx"
   Windows       "Windows xxx"
   Windows NT    "Windows NT xxx"

</PRE>In the return values listed above, "xxx" represents the version number
of the operating system being used.
<P>
You can store the string returned by the function in a variable that
can be used to determine which WordBasic commands to execute later in
the macro.
<P>
The following sample macro illustrates how to use the AppInfo$(1)
function:
<P>
<PRE>   Sub MAIN
        REM Determine Platform
        REM ------------------
        PlatformVar = 0
        If Instr(AppInfo$(1), "Macintosh") &lt;&gt; 0 Then
             Platformvar = 1
        ElseIf Instr(AppInfo$(1), "Windows NT") &lt;&gt; 0 Then
             PlatformVar = 2
        End If
        REM Remainder of Macro
        REM ------------------
        Select Case PlatformVar
        Case 0
             REM WORD FOR WINDOWS COMMANDS GO HERE
        Case 1
             REM WORD FOR MACINTOSH COMMANDS GO HERE
        Case 2
             REM WORD FOR WINDOWS NT COMMANDS GO HERE
        Case Else
             Print "Invalid value"
   End Select
   End Sub

</PRE>The Instr() function determines which string AppInfo$(1) is returning
and sets the PlatformVar variable appropriately. If "Macintosh" is
returned, PlatformVar is set to 1. If "Windows NT" is returned,
PlatformVar is set to 2. Because PlatformVar is initially set to 0,
the "Windows" platform corresponds to a value of 0. The If statements
then evaluate which WordBasic commands to execute based on whether
PlatformVar is set to 0, 1, or 2.
<P>
<P><h2>TIPS FOR CREATING CROSS-PLATFORM MACROS</h2>
 
<P>
Choose one platform for writing and editing cross-platform macros and
use it consistently. Avoid editing macros on more than one platform if
you are developing macros in a version of Word that does not recognize
WordBasic commands supported by Word on another platform. For example,
if you write a macro in Word 6.0a for Windows, and then the macro is
moved to Word 6.0 for the Macintosh, edited, and moved back to Word
for Windows and edited, Word for Windows will remove Macintosh-
specific commands from the macro. This situation occurs because Word
6.0 and 6.0a for Windows don't recognize the Macintosh commands. For
more information, please see the sections regarding converting cross-
platform macros in this Application Note.
<P>
If you are writing the macro in a version of Word that does not
recognize WordBasic commands supported by Word on another platform,
test a copy of the macro on the other platform. Note any changes that
are required for the macro to run correctly and then add the commands
to the original.
<P>
Decide whether to distribute the macro in an execute-only format. If
the macro is formatted as execute-only, it cannot be edited. Use the
MacroCopy statement with the ExecuteOnly parameter set to 1. Because
the action cannot be reversed, be sure to make a copy of the macro
before setting it to execute-only.
<P>
<P><h2>OPENING FILES</h2>
 
<P>
Files$()
<P>
The Files$() WordBasic function returns the first filename that
matches the file specification parameter. In Windows, the file
specification can contain the MS-DOS wildcard characters (the asterisk
and question mark); on the Macintosh, the MacID$ command is used to
specify files of a certain type.
<P>
The following Word for Windows example returns the first file ending
in ".doc" in the current directory:
<P>
<PRE>   a$ = Files$("*.doc")

</PRE>The following Word for the Macintosh example returns the first file
that has the Word 6.0 for the Macintosh document file type:
<P>
<PRE>   a$ = Files$(MacID$("W6BN"))

</PRE>Note that the Macintosh example uses MacID$, a Macintosh-specific
WordBasic command that converts an application signature or file type
to a value that can be used with other commands, including Files$().
To determine the file type, use a resource editor program (for
example, ResEdit). The file type for Word 5.1 for the Macintosh
documents is "WDBN." The file type for Microsoft Excel 5.0 for the
Macintosh spreadsheets is "XLS5."
<P>
<P><h2>OPENING MORE THAN ONE FILE AT A TIME</h2>
 
<P>
FileOpen
<P>
Word for Windows and Word for Windows NT support opening more than one
file at a time with a single FileOpen command. For example, to open
the two files, FIRST.DOC and SECOND.DOC, use the following FileOpen
command:
<P>
<PRE>   FileOpen .Name = "FIRST.DOC SECOND.DOC"

</PRE>Word for the Macintosh will open only one file per FileOpen command.
Therefore, you must expand the above FileOpen command to two commands,
as in this example:
<P>
<PRE>   FileOpen .Name = "First"
   FileOpen .Name = "Second"

</PRE><h2>LONG FILENAMES AND SPACES</h2>
 
<P>
Both Word for the Macintosh and Word for Windows NT support the use of
long filenames, including those with one or more spaces.
<P>
To open a document whose name contains spaces and to prevent Word for
Windows NT from treating the name as separate document names, you must
enclose the entire name in quotation marks by adding the quotation
mark character, CHR$(34), to the beginning and end of the long
filename. The following WordBasic macro command opens a single
document called "FIRST.DOC SECOND.DOC":
<P>
<PRE>   FileOpen .Name = Chr$(34) + "FIRST.DOC SECOND.DOC" + Chr$(34)

</PRE>Word for the Macintosh allows quotation marks to be used as part of
the filename. Because the Macintosh version of the FileOpen command
accepts only one filename, you must explicitly omit the quotation mark
characters [that is, CHR$(34)]. The Macintosh version of the FileOpen
command above would look like this:
<P>
<PRE>   FileOpen .Name = "First Second"

</PRE><h2>USING SETTINGS FILES</h2>
 
<P>
In Windows, Word settings are stored in a text file called
WINWORD6.INI. On the Macintosh, settings are stored in a file called
Word Settings (6). In Windows NT, Word settings are stored in the
Windows NT Registry. Use the SetPrivateProfileString command and
GetPrivateProfileString$() function to change or retrieve settings in
the WINWORD6.INI file, Word Settings (6) file, or the Windows NT
Registry.
<P>
The GetPrivateProfileString$() function is used differently depending
upon the platform. The syntax for GetPrivateProfileString$() is
<P>
<PRE>   GetPrivateProfileString$(Section$,KeyName$,Filename$)

</PRE>where Section$ is the name of the section in the settings file,
KeyName$ is the key whose setting will be retrieved, and Filename$ is
the path and filename for the settings file.
<P>
The following examples show how to retrieve the DOC-PATH setting for
each platform:
<P>
Windows
<P>
<PRE>   a$ = GetPrivateProfileString$("Microsoft Word","DOC-
   PATH","WINWORD6.INI")

</PRE>Macintosh
<P>
<PRE>   a$ = GetPrivateProfileString$("Microsoft Word", "DOC-PATH","Word
   Settings (6)")

</PRE>Windows NT
<P>
<PRE>   a$ =GetPrivateProfileString$("HKEY_CURRENT_USER\Software\
   Microsoft\Word\6.0\Options","DOC-PATH","")

</PRE>On Windows and the Macintosh, do not specify a path for the settings
file because this path defaults to a particular location for those
operating systems. Windows keeps the WINWORD6.INI file in the Windows
directory. The Macintosh keeps the Word Settings (6) file in the
Preferences folder in the System folder. If you specify the path to
the settings file, an empty string will be returned when the macro
attempts to read a setting and the file is not located where precisely
specified. In Word for NT, the path to the key in the Registry is the
first parameter in parenthesis.
<P>
<P><h2>USING WORD ADD-IN LIBRARIES AND WINDOWS DYNAMIC-LINK LIBRARIES</h2>
 
<P>
In Word 6.0, routines stored in external libraries can be called as
functions or subroutines by WordBasic macros. In Word for Windows and
Word for Windows NT, the libraries can be either Word add-ins (WLLs)
or Windows dynamic-link libraries (DLLs), or they can be executable
files (.EXEs). In Word for the Macintosh, only routines in WLLs can be
called. The Declare statement specifies the name of the routine, the
library file in which it is stored, and any argument types the routine
takes.
<P>
When a Word for Windows macro is converted to Word for the Macintosh,
any Declare statements that refer to DLLs will return the WordBasic
error 543, "Unable to open specified library." This error occurs
because the Windows libraries (USER.EXE, KRNL386.EXE, and GDI.EXE) do
not exist on the Macintosh.
<P>
When you convert a Word for Windows macro to Word for Windows NT, make
sure that any Declare statements use 32-bit conventions. If the
function being called is a Windows API function, there are some
general rules you can use to determine the 32-bit Windows NT
equivalent API function. For the most accurate information, consult
the "Microsoft Win32 Software Developer's Kit."
<P>
<P><h3>Rule 1: Use the 32-bit version of the DLL.</h3>
 
<P>
The name of the DLL containing the function typically has "32"
appended to the end of the name. For instance, the equivalent of
"kernel" in Windows 3.x is "kernel32" in Windows NT. However, there
are exceptions to this rule.
<P>
<P><h3>Rule 2: Use the ANSI version of the function.</h3>
 
<P>
Functions that use strings are typically available in two versions:
ANSI and Unicode. Word for Windows NT is an ANSI application and must,
therefore, use ANSI application programming interface (API) functions.
The ANSI version of API functions have an "A" appended to the end of
the function name. For instance, the Windows 3.x function
GetWindowsDirectory is GetWindowsDirectoryA under Windows NT.
<P>
<P><h3>Rule 3: Integer parameters are 32-bit.</h3>
 
<P>
For all functions under Windows 3.x that use the type Integer, Windows
NT uses Long.
<P>
<P><h3>Rule 4: Function names are case sensitive.</h3>
 
<P>
Unlike in Windows, DLL functions in Windows NT are case sensitive. For
the Declare statement to work, the case of the function name must
exactly match the actual case of the function name.
<P>
The following two examples
<P><h3>demonstrate the use of the four rules above:</h3>
 
<P>
Declare statement for use with Word under Windows 3.x:
<P>
<PRE>   Declare Function getwindowsdirectory Lib "Kernel"(WinDir As
   String, nSize As Integer) As Integer

</PRE>Declare statement for use with Word for Windows NT:
<P>
<PRE>   Declare Function GetWindowsDirectoryA Lib "Kernel32"(WinDir
   As String, nSize As Long) As Long

</PRE>When you are experimenting with external routines, be sure to save
your work often. An invalid argument passed to a routine could result
in unpredictable behavior in Word or in other applications.
<P>
For more information regarding standard Windows function libraries
such as GDI.EXE and USER.EXE, see the "Microsoft Windows Programmer's
Reference, Volume 2." For a list of the appropriate module and library
for each function, see "Volume 1." Windows NT functions are documented
in the "Microsoft Win32 Programmer's Reference, Volume 3" and "Volume
4."
<P>
In addition, the "Microsoft Word Developer's Kit, Second Edition,"
contains tools for creating add-ins that interact directly with Word
using the Microsoft Word application programming interface (Word API).
<P>
<P><h2>WORKING WITH DYNAMIC DATA EXCHANGE (DDE)</h2>
 
<P>
DDE is a protocol WordBasic can use to extract information from other
applications or to send commands to other applications. When a client
application (the application requesting information or sending
commands) begins a DDE conversation, it must specify the name of the
application (the server) and the subject of the conversation (the
topic).
<P>
Below are the DDE application names for Microsoft Word:
<P>
Windows:
<P>
<PRE>     "WinWord" or "WordDocument"

</PRE>Windows NT:
<P>
<PRE>     "WinWord" or "MSWord" or "WordDocument"

</PRE>Macintosh:
<P>
<PRE>     "WinWord" or "MSWord"

</PRE>The instructions used to initiate DDE conversations are the same in
Windows and on the Macintosh, but because DDE application names are
usually different on different platforms, separate instructions are
necessary for each platform. Use MacID$() to specify an application on
the Macintosh if you use AppIsRunning() and Shell instructions when
you are initiating a DDE conversation.
<P>
The following example initiates a DDE conversation with Microsoft
Excel for the Macintosh or Microsoft Excel for Windows. In this
example the DDERequest$() command is used to get a list of the
currently supported topics, which are then inserted into the current
document.
<P>
<PRE>        Sub MAIN
             REM First Determine Platform
             PlatformVar = 0
             If Instr(AppInfo$(1), "Macintosh") &lt;&gt; 0 Then
                  Platformvar = 1
             ElseIf Instr(AppInfo$(1), "Windows NT") &lt;&gt; 0 Then
                  PlatformVar = 2
             End If

             REM Then Perform the Commands

        Select Case PlatformVar

             REM The Mac Commands:

     Case 1
     If AppIsRunning(MacID$("XCEL")) = 0 Then
          Shell MacID$("XCEL"), 4
     End If
        chan = DDEInitiate("Excel", "System")
        topics$ = DDERequest$(chan, "Topics")
        Insert topics$

             REM The Windows and Windows NT Commands:

        Case 0, 2
        If AppIsRunning("Excel") = 0 Then
             Shell "c:\EXCEL5\EXCEL.EXE", 4
        End If
        chan = DDEInitiate("Excel", "System")
        topics$ = DDERequest$(chan, "Topics")
        Insert topics$
        Case Else
   End Select

   End Sub

  NOTE: When an application runs on more than one platform, the same
  application may have a different application name in Windows and on
  the Macintosh. Because of these differences, it is better to use OLE
  automation for macros that will run on more than one platform. OLE
  automation is another protocol that allows an application to share
  data with or control another application. For more information
  regarding OLE automation, please see the "Microsoft Word Developer's
  Kit, Second Edition" pages 181 through 190.

</PRE><h2>CONVERTING CROSS-PLATFORM MACROS</h2>
 
<P>
<P><h3>Word 6.0, 6.0a, 6.0c for Windows --&gt; Word 6.0 for the Macintosh</h3>
 
<P>
A macro created in Word version 6.0, 6.0a, or 6.0c for Windows that
contains Macintosh-specific WordBasic commands will return the
following error when run in Word 6.0 for the Macintosh unless you
"dirty" the macro first:
<P>
<PRE>   WordBasic Error 124, "Unknown Command, Subroutine, or Function"

</PRE>A macro is considered "dirty" if it has been changed since it was last
saved. To avoid the WordBasic Error 124 message in this case and
enable the Macintosh-specific commands, transfer the template to the
Macintosh operating environment, and (before you run the macro) open
the macro in Word 6.0 for the Macintosh. Edit the macro by inserting a
space or adding a comment, and then close and save the macro.
<P>
After you edit and save (that is, dirty) the macro in Word for the
Macintosh, the Macintosh-specific commands should run without error.
Dirtying the macro in Word for the Macintosh is necessary only once.
Ideally, you should dirty the macro once prior to distributing the
macro to other Macintosh Word users.
<P>
Macintosh-specific commands are those WordBasic commands that are
available only on the Macintosh platform. The following example
contains the Macintosh-specific command MacID$().
<P>
<PRE>   Sub Main
   a$ = MacID$("TEXT")
   End Sub

</PRE><h3>Word 6.0 or 6.0a for Windows &lt;--&gt; Word 6.0 for the Macintosh</h3>
 
<P>
If you create a macro in Word for the Macintosh and copy the template
that contains the macro to Word 6.0 or 6.0a for Windows, Word
permanently removes the Macintosh-specific WordBasic commands from the
macro when you edit and save the macro in Word 6.0 or 6.0a for
Windows. Word does not restore the Macintosh commands when you
transfer the macro back to the Macintosh platform, and as a result,
the macro will not run correctly on the Macintosh.
<P>
The following Macintosh Word 6.0 macro contains a Macintosh-specific
function named MacID$.
<P>
<PRE>   Sub MAIN
   a$ = MacID$("TEXT")
   End Sub.

</PRE>If you open, edit, and save changes to the above cross-platform macro
in Word 6.0 or 6.0a for Windows, the macro will appear as shown below
when reopened in Word 6.0 for the Macintosh:
<P>
<PRE>   Sub MAIN
   a$ = ("TEXT")
   End Sub

  NOTE: The Macintosh-specific command MacID$ was deleted.

</PRE><h3>Word 6.0c for Windows &lt;--&gt; Word 6.0 for the Macintosh</h3>
 
<P>
Word 6.0c for Windows does not delete unknown (Macintosh-specific)
commands from your Word for the Macintosh macros when you transfer
them to Word 6.0c for Windows. Word 6.0c will instead display
"Unrecognized_Statement" in place of the Macintosh commands.
<P>
If you create the following macro in Word 6.0 for the Macintosh
<P>
<PRE>   Sub Main
   a$ = MacID$("TEXT")
   End Sub

</PRE>and open the template that contains the macro in Word 6.0c for
Windows, the macro will appear as follows:
<P>
<PRE>   Sub Main
   a$ = Unrecognized_Statement33134("TEXT")
   End Sub

</PRE>The "33134" number is the token identification number for the "MacID$"
command. Word 6.0c for Windows does not delete any unrecognized
Macintosh WordBasic commands.
<P>
If you transfer the template that contains the macro back to Word 6.0
for the Macintosh, you must dirty the macro in Word for the Macintosh.
In other words, you must open the macro in Word for the Macintosh,
make a small change such as adding a space, and save the macro. This
action changes the token IDs back to the Macintosh-specific WordBasic
commands, such as MacID$(). Dirtying the macro in Macintosh Word is
necessary only once. Ideally, you should dirty the macro once before
distributing the macro to other Word for the Macintosh users.
<P>
<P><h3>Word 6.0 for Windows NT &lt;--&gt; Word 6.0 for the Macintosh</h3>
 
<P>
Note that Macintosh-specific WordBasic statements and functions are
recognized by Word 6.0 for Windows NT.
<P>
DETERMINING WHETHER QUICKDRAW(TM) IS INSTALLED
 
<P>
GetSystemInfo$()
<P>
QuickDraw GX is Apple(R)'s new version of QuickDraw, which is the
language the Macintosh uses to draw images to the screen. If
installed, QuickDraw GX provides the means for Word 6.0 to access
different Page Setup options available under QuickDraw GX.
<P>
When you write a macro that contains Macintosh-specific commands
referring to QuickDraw GX, such as FileMacPageSetupGX or
FileCustomMacPageSetupGX, the macro must first determine whether
QuickDraw GX is installed.
<P>
You can use the GetSystemInfo$(519) function to determine whether
QuickDraw GX is installed on the system under which the macro is
running. The return value of GetSystemInfo$(519) is "Yes" if QuickDraw
GX is installed and "No" if it is not. The following macro illustrates
one way the GetSystemInfo$(519) function can be used:
<P>
<PRE>   Sub MAIN
        If GetSystemInfo$(519) = "Yes" Then
             MsgBox "QuickDraw GX is installed on this system."
        Else
             Msgbox "QuickDraw GX is not installed on this system."
        End If
   End Sub

</PRE><h2>STATEMENTS AND FUNCTIONS USED ONLY ON THE MACINTOSH</h2>
 
<P>
The following table lists WordBasic statements and functions that are
valid only when Word is running on the Macintosh. A WordBasic
statement or function that is only available in Word for Macintosh
will generate an "Unknown command" error if run on the Windows
platform.
<P>
<P><h3>Word for the Macintosh Statements and Functions</h3>
 
<P>
EditCreatePublisher
EditPublishOptions
EditSubscribeOptions
EditSubscribeTo
EditFindBorder
EditFindFrame
EditFindTabs
EditReplaceBorder
EditReplaceFrame
EditReplaceTabs
FileCustomMacPageSetupGX
FileDocumentLayout
FileMacPageSetup
FileMacPageSetupGX
ListCommands
Outline
Outline()
Shadow
Shadow()
MacScript
MacScript$()
MountVolume
AOCEAddRecipient
AOCEAuthenticateUser()
AOCEClearMailerField
AOCECountRecipients()
AOCEGetRecipient$()
AOCEGetSender$()
AOCEGetSubject$()
AOCESendMail
AOCESetSubject
FileAOCEAddMailer
FileAOCEDeleteMailer
FileAOCEExpandMailer
FileAOCEForwardMail
FileAOCENextLetter
FileAOCEReplyAllMail
FileAOCEReplyMail
FileAOCESendMail
FilePrintOneCopy
FileQuit
ShowClipboard
<P>
Note on QuickDraw GX: QuickDraw GX must be installed in order to use
the FileCustomMacPageSetupGX, and FileMacPageSetupGX commands.
QuickDraw is the language the Mac(R) uses to draw images to the screen
and interpret print files. QuickDraw GX is Apple's new optional
version of QuickDraw included with System Software 7.5. If installed,
QuickDraw GX provides the means for Word 6.0 to access different Page
Setup options.
<P>
Note on PowerTalk(TM) and AOCE: The WordBasic Apple Open Collaboration
Environment (AOCE) commands require that PowerTalk be installed on
your Macintosh. PowerTalk is the client software for AOCE technology.
It is integrated into Apple's System 7 Pro and 7.5 operating systems.
AOCE facilitates collaboration among users through electronic mail,
voice mail, and fax messages.
<P>
<P><h2>STATEMENTS AND FUNCTIONS USED ONLY IN WINDOWS AND WINDOWS NT</h2>
 
<P>
The following table lists WordBasic statements and functions that are
valid only when Word is running under Windows or Windows NT. The
commands listed below are not available and generate "Unknown Command"
errors when run under Word for the Macintosh.
<P>
<P><h3>Word for Windows and Windows NT Statements and Functions</h3>
 
<P>
AppHide
AppMaximize
AppMaximize()
AppMinimize
AppMinimize()
AppMove
AppRestore
AppRestore()
AppSendMessage
AppShow
AppSize
AppWindowHeight
AppWindowHeight()
AppWindowPosLeft
AppWindowPosLeft()
AppWindowPosTop
AppWindowPosTop()
AppWindowWidth
AppWindowWidth()
Connect
ControlRun
Environ$()
ExitWindows
FilePrintSetup
HelpWordPerfectHelp
HelpWordPerfectHelpOptions
MicrosoftAccess
MicrosoftPublisher
MicrosoftSchedule
RunPrin(((TM)))anager
ToggleScribbleMode
<P>
<P><h2>MISCELLANEOUS WORDBASIC ISSUES</h2>
 
<P>
<P><h3>Using the GetProfileString$() function returns an invalid path setting</h3>
 
<P>
Using the GetProfileString$() function to return a path setting in the
Word Settings (6) file results in a path that contains "garbage"
characters or symbols (that is, corruption).
<P>
To avoid having the function return unusable information, use the
GetPrivateProfileString$() function. For example:
<P>
<PRE>   Sub MAIN
   a$=GetPrivateProfileString$("Microsoft Word", "USER-DOT-PATH",
      "Word Settings (6)")
   MsgBox a$
   End Sub

</PRE>Note that the GetPrivateProfileString$() function requires that the
settings file name be specified. In this case it is Word Settings (6).
When retrieving values from the Word Settings (6) file with the
GetPrivateProfileString$() function, do not specify a path for the
Word Settings (6) parameter because this path defaults to the
Preferences folder in the System folder.
<P>
Using WordBasic commands to control the size or position of a custom
<P><h3>dialog box returns WordBasic Error 135 in Word 6.0 for the Macintosh</h3>
 
<P>
The following commands, which control the size or position of user
dialog boxes in Word 6.0 for Windows, are not available in Word 6.0
for the Macintosh and return errors:
<P>
AppSize
AppMove
AppWindowHeight
AppWindowWidth
AppWindowPosTop
AppWindowPosLeft
<P>
The AppSize command is used to control the height and width of a
custom dynamic dialog box by placing the dialog box in the case
structure of a dialog box function. (The case structure defines which
dialog box functions will be performed based on the user's input, or
action.)
<P>
The following AppSize command refers to the dialog box title, Title$,
as defined earlier in the initialization of the dialog box; and the
numbers refer to the width and height of the dialog box.
<P>
<PRE>   AppSize Title$ 300,400

</PRE><h3>The DlgFocus statement does not work in Word 6.0 for the Macintosh</h3>
 
<P>
The DlgFocus statement, which is used within a dialog box function to
set the focus on a dialog box control (for example, a push button)
while the dialog box is displayed, does not work in Word 6.0 for the
Macintosh.
<P>
When a dialog box control has the focus, it is active and responds to
keyboard input. Push buttons with the focus appear to have a darker
ring around them.
<P>
The command does not return a WordBasic error when the macro is run,
but the focus is not set to the desired control.
<P>
In the following example, the DlgFocus statement in Case 1 of the
dialog box function sets the focus to the control specified by
MyControl1. This statement sets the focus correctly in Word 6.0 for
Windows.
<P>
<PRE>   Sub Main
   Begin Dialog UserDialog 320, 144, "Microsoft Word", .MyDlgFunction
        OKButton 10, 6, 88, 21
        CancelButton 10, 30, 88, 21
        PushButton 57, 101, 88, 21, "Mybutton", .MyControl1
   End Dialog
   Dim dlg As UserDialog
   x = Dialog(dlg)
   End Sub

   Function MyDlgFunction(identifier$, action, suppvalue)
   Select Case action
        Case 1
             DlgFocus "MyControl1"
        Case Else
   End Select
   End Function

</PRE><h3>Word for the Macintosh doesn't support selected SendKeys keystrokes</h3>
 
<P>
The Word 6.0 for the Macintosh WordBasic macro language fails to send
certain noncharacter keystrokes when using the SendKeys statement. Due
to a system limitation, the full set of keystrokes are not supported
on the Macintosh. See online Help in Word for a list of keystrokes
that are supported.
<P>
<P><h3>Word for the Macintosh doesn't display underlined access keys</h3>
 
<P>
When you create a user dialog box with WordBasic and run the macro
that contains the dialog box in Word for the Macintosh, designated
access keys (or shortcut keys) do not appear with an underline.
However, although the characters are not underlined, the access keys
do, in fact, work as expected. After the user presses the COMMAND
key for a moment, an underline will appear under the specified
characters. (It is not necessary to "turn on" the underline in
Word 6.0 for Windows; the access keys are always underlined.)
<P>
NOTE: You can add access keys to a dialog box to allow quick access to
items from the keyboard. When an access key is defined for an item in
a user dialog box, the user can press COMMAND + the specified
character to select or clear a check box, pull down a list, or choose
a command button. You can specify the access letter in the WordBasic
Dialog Editor by typing an ampersand in front of the letter in the
Text$ box; for example,  "C&amp;heck Box" in line 6 of the macro below
will display an underscored "h" in the dialog box.
<P>
To automatically display shortcut keys in a dialog box upon running a
macro (without the user having to first press the COMMAND key), add a
MenuMode statement to the macro. To see how to add the MenuMode
statement, see the example below.
<P>
<PRE>   Sub MAIN
   MenuMode
   Begin Dialog UserDialog 320,144, "Microsoft Word"
        OKButton 10, 6, 88, 21
        CancelButton 10, 30, 88, 21
        CheckBox 150, 84, 100, 18, "C&amp;heck Box", .CheckBox1
   End Dialog
   Dim dlg As UserDialog
   n = Dialog(dlg)
   End Sub

</PRE><h3>WordBasic sort order and table ANSI sort order are not the same</h3>
 
<P>
WordBasic uses a different ANSI character sort order than that used by
the Sort Text command on the Table menu in Word.
<P>
Furthermore, the ANSI character sort order differs between Word for
the Macintosh and Word for Windows, both for WordBasic and for the
Sort Text command. In other words, there are four different ANSI
character sort orders.
<P>
The specific sort order of ANSI characters is relevant when you write
WordBasic macros that compare items based on their sort order. The
sort order is predictable for alphabetic and numeric characters (for
example, A comes before B, 3 comes before 4, and so forth). However,
the sort order for the remaining characters is not predictable, so a
sort order list is helpful. For example, to determine whether "!" is
greater or less than "?", you must refer to a sort order list (or run
a SortArray macro to sort the characters).
<P>
The following macro determines the WordBasic sort order of ANSI
characters and inserts into the open document each character followed
by a tab and the corresponding ASCII code value.
<P>
<PRE>   Sub MAIN

        REM Construct a 2 variable array
        Dim c$(255), a(255)
        For i = 1 To 255
             c$(i) = Chr$(i)
             a(i) = I
        Next i
        REM Compares 2 characters at a time to determine sort order
        For i = 1 To 254
        For j = i + 1 To 255
        If c$(i) &gt; c$(j) Then

        REM If 1st var &gt; than 2nd var compared then switch them
             temp$ = c$(i)
             c$(i) = c$(j)
             c$(j) = temp$
             temp = a(i)
             a(i) = a(j)
             a(j) = temp

        REM Inserts the characters and their values in a document
             Print i, j
        EndIf

        Next j
        Next i
        For i = 1 To 255
             Insert c$(i) + Chr$(9) + Str$(a(i))
             InsertPara
        Next i

        End Sub

</PRE>To determine the table sort order, select the characters that have
been inserted into a document as a result of the above macro, convert
the tab-delimited text to a two-column table, and sort on the first
column.
<P>
Certain GetSystemInfo$() function types
<P><h3>are different when used in Word for Windows NT</h3>
 
<P>
Using the following function types with GetSystemInfo$() in Word for
Windows NT return an empty string:

<UL><LI>Type 23. With Word for Windows, type 23 returns the MS-DOS version
   number. With Word for Windows NT, type 23 returns an empty string
   because Windows NT does not run with MS-DOS.

<LI>Type 25. With Word for Windows, type 25 returns the percent of
   system resources available. With Word for Windows NT, type 23
   returns an empty string because Windows NT does not have resource
   restrictions as Windows does.

<LI>Type 27. With Word for Windows, type 27 returns the mode under
   which Windows is running: "standard" or "386 enhanced."  With Word
   for Windows NT, type 27 returns an empty string because Windows
   mode Windows NT does not have a standard or 386 enhanced mode as
   Windows 3.x does.
<P>
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words:<BR>
Keywords          : macword ntword winword word6 kbappnote kbfile kbmacro<BR>
Version           : MACINTOSH: 6.0; WINDOWS:6.0<BR>
Platform          : MACINTOSH WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

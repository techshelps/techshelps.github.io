

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use Named WordBasic Arguments in OLE Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120979">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1994/09/23">
<META NAME="Keywords" CONTENT="kbmerge kbinterop kbmacro kbole kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  This article describes how to create a routine in Microsoft Visual Basic for Applications that uses named and position arguments to send commands to Word for Windows using OLE Automation. For example, you can send OLE Automation commands to Word fr...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAIH,QA5F,QALI,QAH4,QAMA,QDME,QDO7,QAPN,QA9Q,QAJH,QA2K,QAPF,QBWS,QBVP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use Named WordBasic Arguments in OLE Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120979</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 6.0, 6.0a, 6.0c
<LI>Microsoft Word for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, versions 5.0, 5.0a
<LI>Microsoft Visual Basic, Applications Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to create a routine in Microsoft Visual Basic
for Applications that uses named and position arguments to send
commands to Word for Windows using OLE Automation. For example, you can
send OLE Automation commands to Word from a Microsoft Excel Visual Basic
for Applications macro to perform a print merge operation in Word (see the
"Sample Visual Basic for Applications Module to Run Mail Merge in Word"
section at the end of this article).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The syntax for named arguments in Visual Basic, Applications Edition, is
similar to the WordBasic syntax in Word for Windows. You can see the
similarities in the following sample WordBasic and Visual Basic for
Applications syntax, both of which start a new Word document based on the
LETTER1.DOT template:
<P>
<PRE>   WordBasic Syntax
   ----------------

   FileNew .Template = "C:\WINWORD\TEMPLATE\LETTER1.DOT", .NewTemplate = 0

   Visual Basic, Applications Edition, Syntax
   ------------------------------------------

   .FileNew Template := "c:\winword\template\letter1.dot", NewTemplate := 0

</PRE>NOTE: The syntax differences are small but significant. In Visual Basic for
Applications, the Word command is preceded by a period (.), there is no
period (.) before the command arguments, and a colon (:) appears before the
equal sign (=). If your Visual Basic for Applications syntax is incorrect,
the following error message may occur:
<P>
<PRE>   Object doesn't support this property or method.

</PRE><h3>Sample Visual Basic for Applications Module and WordBasic Macro</h3>
 
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this macro code "as is" without warranty of any
kind, either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
The following sample Visual Basic for Applications module uses OLE
Automation to send named arguments to Word and create a new document:
<P>
<PRE>Sub Test()
</PRE>Dim Word As Object
Set Word = CreateObject("word.basic")
With Word
<PRE>  .FileNewDefault
  .Insert "This text appears here because of OLE Automation."
  .StartOfLine 1
  .FormatFont Points:="12", SmallCaps:=1, Font:="Courier New", Bold:=1
  .StartOfDocument
  .FormatParagraph Alignment:=1, WidowControl:=0
</PRE>End With
<PRE>End Sub

</PRE>NOTE: Word should be active before you run this Visual Basic for
Applications module. If Word is not running, you will not see the result in
Word because when OLE Automation starts Word, OLE closes Word after the
Visual Basic for Applications module runs.
<P>
The following is the WordBasic macro equivalent of the above Visual Basic
for Applications module:
<P>
<PRE>Sub MAIN
</PRE>FileNewDefault
Insert "This text appears here because of OLE Automation."
StartOfLine 1
FormatFont .Points = "12", .SmallCaps = 1, .Font = "Courier New", .Bold = 1
StartOfDocument
FormatParagraph .Alignment = 1, .WidowControl = 0
<PRE>End Sub

</PRE><h3>Sample Visual Basic for Applications Module to Run Mail Merge in Word</h3>
 
<P>
For the following mail merge example to work, you need to have Word 6.x
running with a main mail merge document open.
<P>
<PRE>Sub Print_Merge()
</PRE>Set wordobject = CreateObject("word.document.6")
Set wordbasic = wordobject.Application.wordbasic
<PRE>    With wordbasic
         .MailMerge CheckErrors:=1, Destination:=0, MergeRecords:=0,
</PRE>From:="", To:="", Suppression:=0, MailMerge:=1, MailSubject:="",
MailAsAttachment:=0, MailAddress:=""
<PRE>    End With
End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
"Microsoft Word Developer's Kit," version 6.0, Microsoft Press, 1994,
pages 174-182
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory:   kbmacro <BR>
KBSubcategory: kbmacro kbmerge<BR>
Additional reference words: winword 6.0 6.0a 6.0c   7.0 word95<BR>
word7 word6<BR>
Keywords          : kbmerge kbinterop kbmacro kbole kbmacro<BR>
Version           : 6.0 6.0a 6.0c 7.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting 16-Bit WordBasic Macros to 32-Bit WordBasic Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120767">
<META NAME="KBModify" CONTENT="1998/02/05">
<META NAME="KBCreate" CONTENT="1994/09/19">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  Most Word for Windows macros work correctly in Word for Windows NT without modification. However, areas of a macro that deal with operating-system- specific areas may require minor revision.  The following WordBasic commands either behave somewhat ...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QAIH,QDL9,QBWQ,QBWO,QBWN,QAB9,QAY5,QBV8,QDO7,QAH4,QAUJ,QABA,QAPF,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Porting 16-Bit WordBasic Macros to 32-Bit WordBasic Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120767</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows NT, version 6.0
<LI>Microsoft Word for Windows 95, version 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Most Word for Windows macros work correctly in Word for Windows NT without
modification. However, areas of a macro that deal with operating-system-
specific areas may require minor revision.
<P>
The following WordBasic commands either behave somewhat differently or
require special consideration when being used with Word for Windows NT:
<P>
<PRE>   Declare
   ExitWindows
   FileOpen
   GetPrivateProfileString$() and SetPrivateProfileString
   GetProfileString$() and SetProfileString
   GetSystemInfo$()
   Shell
   ToolsAdvancedSettings

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Declare</h3>
 
<P>
Because Word for Windows NT is a 32-bit application, any Declare statements
must use 32-bit conventions.
<P>
If the function being called is a Windows API function, some general rules
can be used to determine what the 32-bit equivalent API function is. For
the most accurate information, however, it is best to consult a Win32 SDK
guide.
<P>
Rule 1: Use the 32-bit version of the DLL.
<P>
<PRE>       The name of the DLL containing the function typically has "32"
       appended to the end of the name. For instance, the equivalent of
       "kernel" in Windows 3.x is "kernel32" in Windows NT. However, there
       are exceptions to this.

</PRE>Rule 2: Use the ANSI version of the function.
<P>
<PRE>       Functions that use strings are typically available in two versions:
       ANSI and Unicode. Word for Windows NT is an ANSI application and
       must, therefore, use ANSI API functions. The ANSI version of API
       functions have an "A" appended to the end of the function name. For
       instance, the Windows 3.x function "GetWindowsDirectory" is
       "GetWindowsDirectoryA" under Windows NT.

</PRE>Rule 3: Integer parameters are 32-bit.
<P>
<PRE>       For all functions under Windows 3.x that use the type Integer,
       Windows NT uses Long.

</PRE>Rule 4: Function names are case sensitive.
<P>
<PRE>       Unlike Windows, DLL functions in Windows NT are case sensitive. For
       the Declare statement to work, the case of the function name must
       match the actual case of the function name exactly.

       The following examples demonstrate the use of the three rules
       above:

          Declare statement for use with Word under Windows 3.x:

             Declare Function getwindowsdirectory Lib "Kernel"(WinDir As
             String, nSize As Integer) As Integer

          Declare statement for use with Word for Windows NT:

              Declare Function GetWindowsDirectoryA Lib "Kernel32"(WinDir
              As String, nSize As Long) As Long

</PRE><h3>ExitWindows</h3>
 
<P>
In Windows, the ExitWindows WordBasic command ends the current Windows
session and exits back to MS-DOS. Executing the ExitWindows WordBasic
command in Word for Windows NT logs the current user off and returns to the
Windows NT Welcome screen.
<P>
<P><h3>FileOpen</h3>
 
<P>
Word for Windows NT supports the use of long filenames, including those
with one or more spaces. In Word for Windows and Word for Windows NT, the
FileOpen command supports the ability to open more than one document at the
same time by separating the two document names with spaces.
<P>
To open documents that contain spaces and not have Word for Windows NT
assume they are separate document names, the entire name must be enclosed
in quotation marks.
<P>
The following WordBasic macro command opens two documents simultaneously,
one called "FIRST.DOC" and one called "SECOND.DOC":
<P>
<PRE>   FileOpen "FIRST.DOC SECOND.DOC"

</PRE>This WordBasic macro command opens a single document called "FIRST.DOC
SECOND.DOC":
<P>
<PRE>   FileOpen Chr$(34) + "FIRST.DOC SECOND.DOC" + Chr$(34)

</PRE>If the macro being written uses a string variable to store the macro name
and it is not known at design time whether the filename will contain
spaces, the string should have quotation marks added to it, or the FileOpen
command should include the Chr$(34) functions, as shown in the example
below:
<P>
<PRE>   FileOpen Chr$(34) + TheFileName$ + Chr$(34)

</PRE>This guarantees that the file will always be successfully opened, whether
it contains spaces or not.
<P>
<P><h3>GetPrivateProfileString$() and SetPrivateProfileString</h3>
 
<P>
GetPrivateProfileString$() and SetPrivateProfileString support the same
functionality in Word for Windows NT as they do in Word for Windows.
However, new functionality was added so that these commands can also
support the Windows NT Registry.
<P>
If the final parameter, the INI filename, is blank, Word for Windows NT
assumes that the section parameter is a full path to a Windows NT Registry
Key. The second parameter, key name, is used as the value name.
<P>
Because Word for Windows NT settings are stored in the Registry, any
WordBasic application-private INI functions that previously used the
WINWORD6.INI file need to be modified to work with the settings as they
exist in the Registry.
<P>
For example, consider the following macro command that determines the
workgroup path in Word for Windows:
<P>
<PRE>   x$ = GetPrivateProfileString$("Microsoft Word", "WORKGROUP-DOT-PATH",
    "WINWORD6.INI")

</PRE>An equivalent function in Word for Windows NT is as follows:
<P>
<PRE>   x$ = GetPrivateProfileString$("HKEY_CURRENT_USER\Software\Microsoft\
   Word\6.0\Options", "WORKGROUP-DOT-PATH", "")

</PRE><h3>GetProfileString$() and SetProfileString</h3>
 
<P>
GetProfileString$() and SetProfileString in Word for Windows NT both
function the same as they do in Word for Windows. However, in Windows NT,
the settings the macro may read or set are not located in INI files.
<P>
In Word for Windows NT, you should use GetPrivateProfileString$() and
SetPrivateProfileString instead of GetProfileString$() and SetProfileString
to get or set Word settings. GetPrivateProfileString$() and
SetPrivateProfileString access the Windows NT Registry, where the Word
settings are located under Windows NT.
<P>
<P><h3>GetSystemInfo$()</h3>
 
<P>
The following GetSystemInfo$() function types are different when used in
Word for Windows NT:
<P>
<PRE>  Type  Description                 Difference
  ----  --------------------------  --------------------------------------

   23   MS-DOS Version Number       Since Windows NT does not run with
                                    MS-DOS, this function returns an empty
                                    string instead of a version number.

   25   Available Resources         Windows NT does have resource
                                    restrictions as Windows does. Calling
                                    this function with Word for Windows NT
                                    will return an empty string.

   27   Windows Mode                Windows NT does not have a Standard or
                                    386 Enhanced Mode as Windows 3.x does.
                                    Calling this function with Word for
                                    Windows NT will return an empty string.

</PRE><h3>Shell</h3>
 
<P>
Like FileOpen, the Shell WordBasic command now supports long filenames. If
the program being launched by the Shell command contains spaces in its
filename, quotation marks must be included around the name, but not around
any command line parameters, if included.
<P>
For example, assume the name of the program to be launched is "Example
Executable.exe" and needs the command-line parameters "/c test". The Shell
command necessary to perform this action would be as follows:
<P>
<PRE>   Shell Chr$(34) + "Example Executable" + Chr$(34) + " /c test"

</PRE><h3>ToolsAdvancedSettings</h3>
 
<P>
ToolsAdvancedSettings can be used to modify Word-related settings in the
WINWORD6.INI and WIN.INI files with Word for Windows. Under Word for
Windows NT, this command still modifies settings in those INI files.
However, since Word for Windows NT does not use those INI files to store
its settings, any settings made with this command are ignored. Word for
Windows NT settings are stored in the Windows NT Registry instead.
<P>
To modify or query Word for Windows NT Registry settings, use
SetPrivateProfileString or GetPrivateProfileString$() instead.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information about similar issues in Microsoft Excel, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q131525.htm">Q131525</A></B>
   TITLE     :"Can't Run Macro That Calls 16-bit DLL in 32-bit MS Excel"
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage kbmacro kbenv<BR>
KBSubcategory:<BR>
Additional reference words: winword 6.0 ntword wordnt 16-bit 16 bit<BR>
convert macro word7 6.0a 6.0c 7.0 word95 word6<BR>
Version           : 6.0 7.0<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

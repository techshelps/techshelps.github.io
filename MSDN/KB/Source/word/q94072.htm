

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Gregorian and Julian Date Functions to Use in WinWord Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94072 ">
<META NAME="KBModify" CONTENT="1997/07/30">
<META NAME="KBCreate" CONTENT="1992/12/23">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  The Word for Windows WordBasic macro language contains no date functions to handle such complex date calculations as conversion between Gregorian and Julian dates. This article offers a set of functions that convert between Gregorian and Julian dat...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGJ,QAY5,QACE,QAH4,QAB9,QBV8,QAKC,QAFF,QAUD,QAIH,QAKD,QBC6,QAG8,QAGX,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Gregorian and Julian Date Functions to Use in WinWord Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94072 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 2.0, 2.0a, 2.0a-CD, 2.0b, 2.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Word for Windows WordBasic macro language contains no date functions to
handle such complex date calculations as conversion between Gregorian and
Julian dates. This article offers a set of functions that convert between
Gregorian and Julian dates.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Gregorian calendar system describes dates as days, months, and years.
The Julian number system describes a date as an integer. You can use a
Julian date to perform complex date calculations, such as the following:

<UL><LI>What is the date 50 days from today?

<LI>How many days are there between two dates?

<LI>What day of the week is your birthday in the year 2000?
<P>
</UL>You can use the functions and subroutine provided below in WordBasic macros
to perform such calculations.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this macro code "as is" without warranty of any
kind, either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
The macro code below contains the following functions and subroutine:
<P>
<P><h3>Functions</h3>
 
<P>
<PRE>   CalToJulian    Converts Gregorian date to Julian number
   LongInt        Performs INT function for large values
   LongMod        Performs MOD function for large values
   WeekDay$       Returns day of week in text format


</PRE><h3>Subroutine</h3>
 
<P>
<PRE>   SubRoutine: JulianToCal    Converts Julian number to Gregorian date

</PRE>To use these functions and subroutine, copy the macro code below into
your macro or into a macro that serves as a WordBasic function and
subroutine library. You can then call the functions or subroutine from
within your macro, or from your macro library. For more information on
using functions and subroutines, see pages 54-60 in "Using WordBasic."
<P>
Note: To successfully use these functions, you must set the MM/DD/YYYY date
format. To do this, use the International option in Windows Control Panel
or add the following line to the [Microsoft Word 2.0] section of your
Windows WIN.INI file:
<P>
<PRE>   DATEFORMAT=MM/DD/YYYY

</PRE>The sample macro below checks for a "DATEFORMAT=" string in your WIN.INI
file. If the string exists, the macro resets it to the correct format. If
the string does not exist, the macro creates the setting using the
SetProfileString macro command.
<P>
<P><h3>Sample Macro Using the Date Functions</h3>
 
<P>
<PRE>Sub MAIN

' The formulas in this macro accurately convert any Gregorian date
' between 3/1/0 and 12/31/9999 to its Julian day number. The
' reverse calculation (from Julian day number to Gregorian) seems to
' have no top end limit.
' The four variables rDay, rMonth, rYear, and wDay must be defined.
' You must allocate a memory location to these variables before passing
' them to the JulianToCal subroutine to obtain consistent results.

</PRE>Dim rDay, rMonth, rYear, wDay
<PRE>'******************************************************************
'   This routine sets dateformat to proper format. See routine at
'   end of macro, which returns dateformat back to original format.

</PRE>App$ = "Microsoft Word 2.0"
Item$ = "DateFormat"
Item2$ = "DateBak"
dFormat$ = GetProfileString$(App$, Item$)
SetProfileString App$, Item2$, dFormat$
SetProfileString App$, Item$, "MM/DD/YYYY"
<PRE>'******************************************************************

</PRE>On Error Goto Abort  'error trapping
<P>
<PRE>'  Gets number of days to be used in calculation.
</PRE>dNum$ = InputBox$("Enter number of days to calculate from today.",\
"Days in Future", "1")
<P>
<PRE>tDay$ = Date$()                        'Gets current Date
rDay = Val(Mid$(tDay$, 4, 2))          'Parses date for day value
rMonth = Val(Left$(tDay$, 2))          'Parses date for month value
rYear = Val("19" + Right$(tDay$, 2))   'Parses date for year value
                                       'Assumes value is 19xx

' Calls function CalToJulian, which returns the Julian day number
' for the Gregorian date value given as arguments. Date value must
' be in the following format:
' rDay   (2 digits)
' rMonth (2 digits)
' rYear  (4 digits)   Note. If rYear is 2 digits, the Julian will be
' calculated incorrectly.

</PRE>jNum = CalToJulian(rDay, rMonth, rYear)
<P>
<PRE>jNum2 = jNum + Val(dNum$)   'Julian # for today's date+number of days

' This calls the subroutine to convert a Julian day number back to the
' Gregorian date using the undocumented feature of passing multiple
' variables as arguments to the subroutine. When completed, returns
' the variables even if they have changed. This works even if the
' subroutine is in a separate macro. Word passes parameters to
' subroutines and functions "by reference".

</PRE>Call JulianToCal(jNum2, rDay, rMonth, rYear, wDay) ' Sets the variable
<PRE>'                                  that is passed to the message box.
</PRE>mText$ = dNum$ + " days from today it will be " + WeekDay$(wDay) + \
Str$(rMonth) + " -" + Str$(rDay) + " -" + Str$(rYear) + "."
<PRE>' Prints the message that shows the results of the calculations.

</PRE>MsgBox mText$
Goto Done
<PRE>Abort: :                      'error trapping
</PRE>MsgBox "Macro aborted!"
Done:
<PRE>'*****************************************************************
'   This routine returns dateformat back to original format
</PRE>dFormat$ = GetProfileString$(App$, Item2$)
SetProfileString App$, Item$, dFormat$
<PRE>'*****************************************************************

End Sub
'__________________________________________________________________
'*********************DATE FUNCTIONS AND SUBROUTINE ***************
'__________________________________________________________________
' This is the function that converts a Gregorian date to the
' equivalent Julian day number. It consists of two equations. The
' first sets the value of y, the second sets the value returned by the
' function. The second formula requires the LongInt function because
' 32,676 (2-bytes) is the maximum size the INT function can handle.

</PRE>Function CalToJulian(tday, tmonth, tyear)
y = tyear +(tmonth - 2.85) / 12
CalToJulian = LongInt(LongInt(LongInt(367 * y) - LongInt(y) - 0.75 *\
LongInt(y) + tday)- 0.75 * LongInt(y / 100)) + 1721115
End Function
<P>
<PRE>' This is the subroutine that converts a Julian day number to the
' equivalent Gregorian date. It consists of 11 formulas of which 9
' are used to calculate the date. The values rDay, rMonth, rYear,
' and wDay are computed, and then returned as values to the routine
' that called them.
' The last equation, wDay = LongMod((jdn+1), 7), returns a value for
' the week day where Sunday = 0, Monday = 1, Tuesday = 3, . . . ,
' Saturday = 6. It requires the LongMod function because 32,676
' (2-bytes) is the max size that the MOD function can handle.

Sub JulianToCal(jdn, rDay, rMonth, rYear, wDay)
</PRE>N = jdn - 1721119
C = LongInt((N - 0.2) / 36524.25)
N1 = N + C - LongInt(C / 4)
Y1 = LongInt((N1 - 0.2) / 365.25)
N2 = N1 - LongInt( 365.25 * Y1)
M1 = LongInt((N2 - 0.5) / 30.6)
rDay = LongInt(N2 - 30.6 * M1 + 0.5)
If M1 &gt; 9 Then
<PRE>  rYear = Y1 + 1
  rMonth = M1 - 9
</PRE>Else
<PRE>  rYear = Y1
  rMonth = M1 + 3
</PRE>EndIf
wDay = LongMod((jdn + 1), 7)
<PRE>End Sub

' This is the LongInt function mentioned above.
</PRE>Function LongInt(TempVal)
TempStr = InStr(Str$(TempVal), ".")
LongInt = Val(Left$(Str$(TempVal), TempStr - 1))
End Function
<P>
<PRE>' This is the LongMod function mentioned above.
</PRE>Function LongMod(num, div)
tNum = num / div
LongMod = num -(LongInt(tNum) * div)
End Function
<PRE>' This is a function that returns the day of the week in text for
' nicer output.

</PRE>Function WeekDay$(num)
Select Case num
Case 0
<PRE>  WeekDay$ = "Sunday"
</PRE>Case 1
<PRE>  WeekDay$ = "Monday"
</PRE>Case 2
<PRE>  WeekDay$ = "Tuesday"
</PRE>Case 3
<PRE>  WeekDay$ = "Wednesday"
</PRE>Case 4
<PRE>  WeekDay$ = "Thursday"
</PRE>Case 5
<PRE>  WeekDay$ = "Friday"
</PRE>Case 6
<PRE>  WeekDay$ = "Saturday"
</PRE>Case Else
End Select
End Function
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Using WordBasic," by WexTech Systems and Microsoft, pages 54-60, 227,
293-294
<P>
"Microsoft Press Computer Dictionary," copyright 1991, pages 164, 200
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbmacro<BR>
KBSubcategory:
<P>

Additional query words: 2.0 2.0a 2.0a-CD 2.0b 2.0c winword2<BR>
winword<BR>
Version           : 2.0 2.0a 2.0a-CD 2.0b 2.0c<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

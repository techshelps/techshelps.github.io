

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD:Macro to Determine If Application Is Running </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94973 ">
<META NAME="KBModify" CONTENT="1998/02/02">
<META NAME="KBCreate" CONTENT="1993/01/28">
<META NAME="Keywords" CONTENT="kbmacroexample kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  In Word, you may need to determine if a program is running. When you write  WordBasic macros that communicate with other applications (through dynamic  data exchange [DDE]), this determination is often necessary because prior  to starting a DDE con...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAIH,QAH4,QBWS,QAY5,QADK,QAFF,QAJH,QARM,QAUJ,QAB9,QDL9,QBWQ,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD:Macro to Determine If Application Is Running</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94973 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 2.0, 2.0a, 2.0a-CD 2.0b, 2.0c,
   6.0, 6.0a, 6.0c
<LI>Word for the Macintosh, versions 6.0, 6.0.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Word, you may need to determine if a program is running. When you write 
WordBasic macros that communicate with other applications (through dynamic 
data exchange [DDE]), this determination is often necessary because prior 
to starting a DDE conversation using the WordBasic DDEInitiate command, the 
application you intend to communicate with must be running.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Word 6.0 includes an AppIsRunning() function that can be used to determine
if an application is already running. The AppIsRunning() function returns
-1 if the specified application is running or returns 0 (zero) if it is
not.
<P>
For example, the following Word 6.0 sample macro determines if File
Manager is running. If the application is running, File Manager is
activated, and if not, WINFILE.EXE (File Manager) is started.
<P>
<P><h3>Word for Windows</h3>
 
<P>
<PRE>   Sub MAIN
      If AppIsRunning("File Manager") Then
         AppActivate "File Manager"
      Else
         Shell "WINFILE.EXE"
      End If
   End Sub

</PRE><h3>Word for the Macintosh</h3>
 
<P>
<PRE>   Sub Main
      If AppIsRunning(MacID$("ttxt")) Then
         AppActivate MacID$("ttxt")
      Else
         Shell MacID$("ttxt")
      End If
   End Sub

</PRE>In Word version 2.x for Windows you can call GetModuleHandle in the
Windows Kernel dynamic-link library (DLL) to determine if an application
is running. The following Word 2.x macro example demonstrates the use of
the Windows GetModuleHandle function to determine if Microsoft Excel is
already running.
<P>
This macro checks to see if Microsoft Excel is running. The macro uses
AppActivate to switch the focus to the Microsoft Excel application. If the
application is not running, the Shell statement runs EXCEL.EXE. If the
EXCEL directory is not in your MS-DOS path, you can indicate a full path
to the Microsoft Excel executable file (Shell "C:\Excel\Excel.exe").
<P>
<PRE>   Declare Function IsAppLoaded Lib "kernel"(name$) As Integer Alias \
   "GetModuleHandle"

   Sub Main
      If IsAppLoaded("EXCEL") = 0 Then
         Shell "Excel.exe"
      Else
         AppActivate "Microsoft Excel"
      End If
   End Sub

</PRE>The GetModuleHandle function uses the module name for the application to
determine if an application is running. The module name for an application
is usually the name of the executable file.
<P>
<PRE>   Module Name       Program .EXE Filename
   -----------       ---------------------

   Excel             EXCEL.EXE

   Msmail            MSMAIL.EXE

   Msaccess          MSACCESS.EXE

</PRE>IsAppLoaded is an alias for the GetModuleHandle function. Any name can be
used in place of the IsAppLoaded alias used in the above macro Declare
statement.
<P>
The following macro example demonstrates the use of the Windows
GetModuleHandle function to determine if Microsoft Access is already
running.
<P>
<PRE>   Declare Function IsAppLoaded Lib "kernel"(name$) As Integer Alias \
   "GetModuleHandle"

   Sub Main
      If IsAppLoaded("msaccess") = 0 Then
         Shell "msaccess.exe"
      Else
         AppActivate "Microsoft Access"
      End If
   End Sub

</PRE>The following Word 2.x macro example uses the Windows GetModuleHandle
function to determine if Microsoft Excel is already running. If Excel is
already running, Word initiates a DDE conversation with Excel in order to
maximize the Excel application window.
<P>
<PRE>   Declare Function isapploaded Lib "KERNEL"(name$) As Integer Alias \
   "GetModuleHandle"

   Sub MAIN
      If IsAppLoaded("Excel") = 0 Then
         Shell "Excel.exe", 3 'Microsoft Excel must be on the MS-DOS path
      Else
         ChanNum1 = DDEInitiate("Excel", "system")
         DDEExecute ChanNum1, "[APP.MAXIMIZE()]"
         DDETerminate ChanNum1
      End If
   End Sub

</PRE>WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT
YOUR OWN RISK. Microsoft provides this macro code "as is" without
warranty of any kind, either express or implied, including but not
limited to the implied warranties of merchantability and/or fitness
for a particular purpose.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: winword2 GetModuleHandle winword word6 running<BR>
loaded macword isapploaded declare dll dde<BR>
Keywords          : kbmacroexample kbmacro<BR>
Version           : WINDOWS:2.x,6.0,6.0a,6.0c; MACINTOSH:6.0,6.0.1<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto kbinfo<BR>
Solution Type     : kbworkaround<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

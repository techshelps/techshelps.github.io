

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use OLE Automation with Word 6.0/7.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161547">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1996/12/30">
<META NAME="Keywords" CONTENT="kbinterop kbole kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  This article provides an overview of using OLE Automation with the versions of Word for Windows listed at the beginning of this article.  NOTE: Throughout this article, examples utilizing OLE Automation assume that the following lines of Visual Bas...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QAPN,QBS0,QA9Q,QAHE,QA2K,QA5F,QDO7,QDL9,QBWQ,QBWO,QBWN,QAUJ,QBBI,QAVX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use OLE Automation with Word 6.0/7.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161547</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows versions 7.0, 7.0a
<LI>Microsoft Word for Windows, versions 6.0, 6.0a, 6.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an overview of using OLE Automation with the versions
of Word for Windows listed at the beginning of this article.
<P>
NOTE: Throughout this article, examples utilizing OLE Automation assume
that the following lines of Visual Basic code have been used to initiate
the OLE Automation session:
<P>
<PRE>   Dim WBO As Object                       'Declare an object variable
   Set WBO = CreateObject("Word.Basic")    'Set the object pointer

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Word versions 6.x and 7.x can be OLE Automation servers. Word makes
available a single object, Word.Basic, allowing you to issue WordBasic
commands from another application to control actions in Word. If you wish
to use WordBasic to control other applications, you must use DDE.
<P>
<P><h3>General Example</h3>
 
<P>
The following Visual Basic example creates and uses a WordBasic OLE object:
<P>
<PRE>Sub WordExample ()
   Dim WBO As Object                    'Declare an object variable
   Set WBO = CreateObject("Word.Basic") 'Set the object pointer
   WBO.FileNew                          'Create a new File in Word
   WBO.Bold                             'Make the Font Bold
   WBO.FontSize 24                      'Make the Font 24 point in size
   WBO.CenterPara                       'Center Text on page
   WBO.Insert "Automation's Great!"     'Insert some text
   WBO.FilePrintDefault                 'Print the current document
   WBO.FileClose 2                      'Close file without saving.
   Set WBO = Nothing                    'Clear the object pointer.
End Sub

</PRE>The CreateObject function launches Word if it is not already running.
Otherwise it uses the currently-active instance of Word.
<P>
The Set WBO = Nothing statement exits Word if Word was launched by the
CreateObject statement.
<P>
OLE Automation cannot invoke the FileExit method of WordBasic. Because
OLE Automation cannot start a new instance of Word after the initial
instance, OLE Automation assumes that the user started Word and the user
is responsible for exiting the application.
<P>
<P><h3>Using Named and Positional Arguments</h3>
 
<P>
There are generally two ways of sending commands when using OLE Automation,
using either Named or Positional arguments. Positional arguments have many
drawbacks: all arguments for a command have to be used, the arguments have
to be in the proper order, and your code is generally less readable.
The following example uses positional arguments:
<P>
<PRE>   WBO.FormatFont ,,,,,,,,,,,,,,,,True  'Format selection as bold.

</PRE>Named arguments allow you to specify only those arguments you wish to use.
They can be in any order and, because the arguments are named, the code is
generally more readable. For example:
<P>
<PRE>   WBO.FormatFont Bold:=True            'Format selection as bold.

</PRE>It is generally better to use named arguments whenever possible. However,
Visual Basic 3.0 for Windows supports using only positional arguments.
<P>
Many of the WordBasic commands documented in Word's Help or in the Word
Developer's Kit do not have the arguments listed in the correct order,
because WordBasic itself uses named arguments and isn't particular about
the order in which the arguments are used.
<P>
Microsoft has made available a file, Position.txt, that lists all the
WordBasic commands and their arguments in the correct order. However, you
must be sure you are using the correct version of this file. The version
in the first and second edition of the Word Developer's Kit is designed
for Word 6.x and the Position.txt file included in the third edition of
the Word Developer's Kit is designed for Word for Windows version 7.x.
<P>
Programmers using Visual Basic 4.0 should use named arguments to avoid
concerns about argument positions.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WORD/Q105534.htm">Q105534</A></B>
   TITLE     : OLE: Visual Basic 3.0 Does Not Support Named Arguments

   ARTICLE-ID: <B><A HREF="../vbapps/Q112733.htm">Q112733</A></B>
   TITLE     : POSITION.HLP File for VB OLE Automation w/ Word for Windows

</PRE><h3>General Syntax for Named Arguments</h3>
 
<P>
WordBasic (without using OLE Automation) arguments are preceded with a
period. This is how the commands are documented in all references about
WordBasic. Consider the following example:
<P>
<PRE>   EditBook .Name="test", .Add

</PRE>OLE Automation does not use the same type of syntax. Because OLE Automation
is programmed in another application, you must use that application's
syntax for passing OLE Automation arguments. Visual Basic, for example,
does not use periods before argument names, and a colon must be used before
the equal sign (:=). The following sample OLE Automation syntax using
Visual Basic or Visual Basic for Applications is typical:
<P>
<PRE>   WBO.EditBookmark Name:="test", Add:=True

</PRE><h3>Syntax for Using String Functions</h3>
 
<P>
The syntax of WordBasic functions that return strings includes a dollar
sign ($) to indicate the return type. Visual Basic version 3.0 and other
applications, such as Microsoft Access for Windows version 7.0 may require
that these functions be enclosed in square brackets ([]). The following
example returns the text stored in the bookmark MyBookMark:
<P>
<PRE>   MyVar = WBO.[GetBookMark$]("MyBookMark")  'Return text from bookmark

</PRE>Without using the square brackets, Visual Basic version 3.0 returns the
error, Bad Parameter.
<P>
<P><h3>Using Boolean Arguments</h3>
 
<P>
Many WordBasic commands use arguments to specify actions, which usually
equate to buttons in a Word dialog box. To use these arguments, you
must pass a Boolean value of True. For example, the EditBookmark command
has multiple actions you can specify (Add, Delete, and GoTo). In
WordBasic, the most commonly used syntax would be:
<P>
<PRE>   EditBookmark .Name="test", .Add

</PRE>However, the following syntax is also valid:
<P>
<PRE>   EditBookmark .Name="test", .Add=True

</PRE>When using OLE Automation, you must specify the Boolean value. Using named
arguments with OLE Automation, the command would be:
<P>
<PRE>   WBO.EditBookmark Name:="test", Add:=True

</PRE>Using positional arguments, the command would be:
<P>
<PRE>   WBO.EditBookmark "test", , True

</PRE><h3>Background Processing</h3>
 
<P>
Word performs some actions in the background, including printing, auto-
saving, and spelling. The background printing option, in particular, can
cause problems when using OLE Automation to print from Word. Background
printing should be turned off when using OLE Automation.
<P>
To turn background printing off, click Options on the Tools menu. Then
click the Print tab, and click to clear the checkbox for background
printing. Or, you can use the following code to do this through OLE
Automation prior to printing:
<P>
<PRE>   WBO.ToolsOptionsPrint Background:=0

</PRE>For example, when background printing is on, setting WBO=Nothing may cause
the print job to be canceled. If you encounter this problem, you can also
work around it by making the Word object variable's scope local to the form
rather than to the Sub procedure.
<P>
<P><h3>CreateObject Fails</h3>
 
<P>
The CreateObject function could cause an error under any of the following
circumstances:

<UL><LI>Word is not registered in the Windows Reg.dat file.

<LI>Windows is low on system resources.

<LI>Your user-defined Normal.dot template and/or automatically loading
   macros in Word could run automatic actions that might conflict with
   your requested OLE Automation commands.

<LI>The OLE server application is not found. With Windows version 3.1,
   object linking and embedding (OLE) clients look for a server
   application in the following order:
<P>
<P><PRE>      1. The location specified in the Windows Reg.dat file.
      2. The location specified in the Win.ini file.
      3. The Windows folder.
      4. The Windows\System folder.
      5. The location specified in the MS-DOS PATH environment variable
<PRE></PRE>         (specified in the Autoexec.bat file).
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory:   kbmacro<BR>
KBSubcategory:<BR>
Additional query words: 6.0 7.0 winword word7 word95<BR>
Keywords          : kbinterop kbole kbmacro<BR>
Version           : 6.0 6.0a 6.0c 7.0 7.0a<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

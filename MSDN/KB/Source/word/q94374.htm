

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD: Passing Parameters "By Reference" and "By Value" </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94374 ">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1993/01/05">
<META NAME="Keywords" CONTENT="kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  By default, Word passes parameters to subroutines or functions  by reference.  To pass a variable  by value,  enclose the variable in parentheses when you make the call to the subroutine or function.  MORE INFORMATION  Word 97 for Windows or Word 9...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAD7,QAH7,QAH6,QAYL,QAKD,QAFF,QAIH,QA5F,QAMA,QBS0,QA01,QAGI,QAY5,QAB3,QAHE P1 T2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD: Passing Parameters "By Reference" and "By Value"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94374 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 1.0, 1.1, 1.1a, 2.0, 2.0a,
   2.0a-CD, 2.0b, 2.0c, 6.0, 6.0a, 6.0c
<LI>Microsoft Word for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Word 97 for Windows
<LI>Word for the Macintosh, versions 6.0, 6.0.1, 6.0.1a
<LI>Microsoft Word 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, Word passes parameters to subroutines or functions "by
reference." To pass a variable "by value," enclose the variable in
parentheses when you make the call to the subroutine or function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Word 97 for Windows or Word 98 Macintosh Edition</h3>
 
<P>
For more information about passing a variable "by value," while in the
Visual Basic for Applications Editor, click the Office Assistant, type
"Passing Arguments Efficiently" (without the quotation marks), click
Search, and then click to view "Passing Arguments Efficiently."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Visual Basic Help is not installed on your
computer, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office
               Program or Component

</PRE><h3>Passing a Variable "By Reference"</h3>
 
<P>
When you pass a variable "by reference," the subroutine or function can
change the value of that variable. This change affects the value in the
subroutine as well as the variable in the calling routine.
<P>
Consider the following example:
<P>
<PRE>   Sub MAIN
      a$ = "By Value!"
      TestSub a$
      MsgBox a$
   End Sub

   Sub TestSub(b$)
      b$ = "By Reference!"
   End Sub

</PRE>When you run this macro, the message box displays "By Reference!".
<P>
The variable a$ is passed to the subroutine TestSub where the variable is
referenced by b$. Since the value of a$ is being passed "by reference," a$
and b$ actually point to, or share, the same data information. When b$ is
assigned a new value, a$ will change as well.
<P>
<P><h3>Passing a Variable "By Value"</h3>
 
<P>
When a variable is passed "by value," the subroutine or function gets a
copy of the information. If the subroutine or function assigns a new value
to the variable, the change affects only the copy of the information and
not the original that was passed to the subroutine or function.
<P>
Consider the following example:
<P>
<PRE>   Sub MAIN
      a$ = "By Value!"
      TestSub (a$)
      MsgBox a$
   End Sub

   Sub TestSub(b$)
      b$ = "By Reference!"
   End Sub

</PRE>The only difference from the previous example is that parentheses appear
around the argument a$, which is being passed to the subroutine TestSub.
However, when the macro runs, the message box displays "By Value!". In
TestSub, b$ gets a copy of what was in a$. a$ and b$ do not share the same
value; instead they have identical copies of the data.
<P>
NOTE: There is only one case in which the macro passes parameters "by
reference" when they are enclosed in parentheses. If you run a subroutine
and precede the subroutine name with the WordBasic Call statement, the
macro passes all parameters "by reference," even though the parameters are
enclosed in parentheses.
<P>
For example, if you call the TestSub subroutine in the above macro with
the following syntax, the message box displays "By Reference!", even
though you enclosed the variable in parentheses:
<P>
<PRE>   Call TestSub(a$)

</PRE><h3>Examples: Passing Values "By Reference" And "By Value"</h3>
 
<P>
Consider the following function:
<P>
<PRE>   Function TestFunct(x$, y$)
      x$ = "New X Value!"
      y$ = "New Y Value!"
   End Function

</PRE>Below is a table of calls to the TestFunct function that indicates
whether the macro passes the values "by reference" or "by value."
<P>
<PRE>                             a$        b$
</PRE> 
<PRE>z = TestFunct(a$, b$)        by ref    by ref
z = TestFunct((a$), (b$))    by val    by val
z = TestFunct((a$), b$)      by val    by ref
z = TestFunct(a$, (b$))      by ref    by val


</PRE><h3>How WordBasic Differs from Other Microsoft Basic Languages</h3>
 
<P>
WordBasic passes variables "by reference" and "by value" in a
different manner than most Microsoft Basic programming language
applications (such as Microsoft Visual Basic, Microsoft QuickBasic,
and Microsoft Professional Basic).
<P>
In WordBasic, the caller is responsible for using parentheses to
determine whether information passes "by reference" or "by value." By
contrast, other Microsoft Basic languages make this distinction in
subroutines and functions using the BYVAL keyword in the parameter
list of the declaration.
<P>
By default, other Microsoft Basic languages pass variables "by reference"
(this is the same as WordBasic). If you precede the variable with "BYVAL"
(without the quotation marks) in the subroutine or function declaration,
the values pass "by value."
<P>
Consider the following Visual Basic subroutine:
<P>
<PRE>   Sub TestSub(a$, BYVAL b$)
      a$ = "New a$ value!"
      b$ = "New b$ value!"
   End Sub

</PRE>If you use the following syntax to call this subroutine, the first
message box displays "Old a$", and the second displays "New b$ value!":
<P>
<PRE>   a$ = "Old a$"
   b$ = "Old b$"
   TestSub a$, b$
   MsgBox a$
   MsgBox b$
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: winword2 VB QB winword 7.0 word95 Word98 macword<BR>
word7 word6 word8 word97 8.0<BR>
Keywords          : kbmacro<BR>
Version           : 2.x 6.0 6.0a 6.0c 7.0 7.0a 97 98<BR>
Platform          : MACINTOSH WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD: OLE: Visual Basic 3.0 Does Not Support Named Arguments </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105534">
<META NAME="KBModify" CONTENT="1998/02/11">
<META NAME="KBCreate" CONTENT="1993/10/20">
<META NAME="Keywords" CONTENT="kbwordvba winword word6 word7 word8 word95 word97 kbinterop kbole kbmacro">
<META NAME="KBArea" CONTENT="Support; KB; word, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  When you use a Microsoft Visual Basic 3.0 application, you cannot call a Visual Basic for Applications or WordBasic instruction using named arguments. Instead, you must identify these arguments by position using commas as placeholders.  NOTE: Visua...">
<META NAME="Product" CONTENT="Word">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAIH,QAPN,QA5F,QAHE,QAYB,QAMA,QAB9,QACI,QBJZ,QAMB,QAUJ,QATX,QDL9,QBWQ P1 T2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD: OLE: Visual Basic 3.0 Does Not Support Named Arguments</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 11, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105534</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word for Windows, versions 6.0, 6.0a, 6.0c
<LI>Microsoft Word for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Word 97 for Windows
<LI>Microsoft Access for Windows, version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use a Microsoft Visual Basic 3.0 application, you cannot call a
Visual Basic for Applications or WordBasic instruction using named
arguments. Instead, you must identify these arguments by position using
commas as placeholders.
<P>
NOTE: Visual Basic 4.0 supports named arguments.
<P>
<P><h3>Word 97 Visual Basic for Applications</h3>
 
<P>
The following example shows the Visual Basic for Applications syntax as it
might appear in a Visual Basic for Applications macro in Word.
<P>
<PRE>   Documents.Open FileName:="""table calculation.doc""", _
   ConfirmConversions:= False, ReadOnly:=False, AddToRecentFiles:=False, _
   PasswordDocument:="", PasswordTemplate:="", Revert:=False, _
   WritePasswordDocument:="", WritePasswordTemplate:="", _
   Format:=wdOpenFormatAuto

</PRE><h3>Syntax for the above example</h3>
 
<P>
expression.Open(FileName, ConfirmConversions, ReadOnly, AddToRecentFiles,
PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument,
WritePasswordTemplate, Format)
<P>
To use this instruction in a Visual Basic 3.0 procedure, you would write:
<P>
<PRE>   WordObj.Documents.Open "C:\Test.doc", False, False, False,,, False,,, 0

</PRE><h3>WordBasic</h3>
 
<P>
The following example shows the WordBasic syntax as it might appear in a
Word macro. The instruction opens the document as a read-only file and adds
the name to the MRU (Most Recently Used) list on the File menu.
<P>
<PRE>   FileOpen .Name = "D:\Winword\Mydoc.doc", .ReadOnly = 1, AddtoMru = 1

</PRE>To use this instruction in a Visual Basic procedure, you would write:
<P>
<PRE>   WordObj.FileOpen "D:\Winword\Mydoc.doc", , 1, 1

</PRE>WordObj is an object variable that refers to WordBasic (the complete Visual
Basic procedure is included below). The extra comma after the
file name is a placeholder for the ConfirmConversions parameter.
<P>
WordBasic parameter syntax:
<P>
<PRE>   FileOpen .Name = text [, .ConfirmConversions = number]
    [, .ReadOnly = number] [, .AddToMru = number] [, .PasswordDoc = text]
    [, .PasswordDot = text] [, .Revert = number]
    [, .WritePasswordDoc = text] [, .WritePasswordDot = text]

</PRE>The following Visual Basic procedure opens a Word Document as read-only
with the file name appearing on the MRU (Most Recently Used) list
on the File menu.
<P>
<PRE>   Sub Command1_Click ()
      Dim WordObj As Object
      Set WordObj = CreateObject("Word.Basic")
      WordObj.FileOpen "D:\WINWORD\MYDOC.DOC", , 1, 1
   End Sub

</PRE><h2>MORE INFORMATION</h2>
 
<P>
If you want to leave out an argument, you must indicate the missing
argument with a comma. Trailing commas at the end of an instruction can be
omitted. In the example above, it is not necessary to add additional commas
after the final argument.
<P>
<P><h3>WordBasic</h3>
 
<P>
Most WordBasic statements that correspond to dialog boxes and
the positioning of the arguments is documented in the WordBasic Help
topics. However, the WordBasic statements for some dialog box tabs
include arguments that are irrelevant or that have no effect. Since
these arguments are irrelevant, they are not documented in WordBasic
Help. However, the Visual Basic 16-bit or 32-bit OLE Automation programmer
needs to be aware of these arguments so that he or she can correctly
specify arguments by position.
<P>
For a listing of these statements and the correct order of the
arguments, look to the Position.txt text file. This file is included
on the disk included with the Word Developer's Kit (located in the
Wrdbasic directory).
<P>
Position.hlp is a Windows Help File version that is available
from the Microsoft Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Position.exe">Position.exe</A> <I>(size: 47167 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ole automation word basic object container<BR>
position<BR>
Keywords          : kbwordvba winword word6 word7 word8 word95 word97 kbinterop kbole kbmacro<BR>
Version           : 6.0 6.0a 6.0c 7.0 7.0a 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 11, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

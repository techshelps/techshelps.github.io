

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: DLL to Read and Write RTF with Active Messaging </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172038">
<META NAME="KBModify" CONTENT="1997/11/21">
<META NAME="KBCreate" CONTENT="1997/07/28">
<META NAME="Keywords" CONTENT="kbcode ActMsg EMAPI">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  When writing an Active Messaging client, it would be useful to be able to use rich text formatting (RTF) in the body of the messages that are created. However, the Active Messaging Libraries provide access only to the plain text version of the body...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAEV,QAYC,QBS0,QBXS,QAV5,QAMB,QA4H,QAYL,QAPF,QA3Z,QA3Y,QAY5,QDNN,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: DLL to Read and Write RTF with Active Messaging</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172038</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
<LI>Collaboration Data Objects (CDO), version 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When writing an Active Messaging client, it would be useful to be able to
use rich text formatting (RTF) in the body of the messages that are
created. However, the Active Messaging Libraries provide access only to the
plain text version of the body of the message, giving no control over the
font characteristics of the message body.
<P>
This sample contains a DLL with functions that may be called from an Active
Messaging client to read and write RTF text of a message.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Mapirtf.exe">Mapirtf.exe</A> <I>(size: 109180 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Below are the contents of the Readme.txt file for this sample.
<P>
<P><h3>MAPIRTF Sample</h3>
 
<P>
This sample illustrates how use Extended MAPI to allow RTF-formatting in a
message created by Active Messaging.
<P>
<P><h3>Files</h3>
 
The self-extracting executable, Mapirtf.exe, contains the following
files:

<UL><LI>Readme.txt: Contains information about the sample
<LI>Mapirtf.dll: The release version of the DLL
<LI>Mapirtfd.dll: The debug version of the DLL
<LI>Vbmaprtf.exe: Microsoft Visual Basic Active Messaging client
<LI>Vbmaprtf.pdb: Debug symbols for Vbmaprtf.exe
<LI>CSource Folder: Contains the source file and Microsoft Visual C++
   version 5.0 workspace and project files for Mapirtf(d).dll
<LI>VBSource Folder: Contains the Microsoft Visual Basic version 5.0
   project, form, and module files for Vbmaprtf.exe
<P>
<P>
</UL><h3>General</h3>
 
<P>
The files Mapirtf.dll (release version) and Mapirtfd.dll (debug
version) contain the following functions:

<UL><LI>"Writertf" writes RTF-formatted text to a message created by
   Active Messaging, when passed the profile name, entry ID of
   the message, entry ID of the message store, and the RTF text.

<LI>"Readrtf" reads RTF-formatted text from a message when passed
   the profile name, entry ID of the message, entry ID of the
   message store, and a string variable to which to store the text.
<P>
</UL><h3>How to Use</h3>
 
<P>
Before use, the DLL files should be placed in the Windows\System
directory (for Windows 95) or the Winnt\System32 directory (for
Windows NT.
<P>
In Visual Basic, declare the functions as follows:
<P>
<PRE>    ' For the Debug version of the DLL, remark the following lines
    Public Declare Function WriteRTF _
        Lib "mapirtf.dll" _
        Alias "writertf" (ByVal ProfileName As String, _
                          ByVal MessageID As String, _
                          ByVal StoreID As String, _
                          ByVal cText As String) _
        As Integer

    Public Declare Function ReadRTF _
        Lib "mapirtf.dll" _
        Alias "readrtf" (ByVal ProfileName As String, _
                       ByVal SrcMsgID As String, _
                         ByVal SrcStoreID As String, _
                   ByRef MsgRTF As String) _
        As Integer

    ' For the Debug version of the DLL, un-remark the following lines
    'Public Declare Function WriteRTF _
        Lib "mapirtfd.dll" _
        Alias "writertf" (ByVal ProfileName As String, _
                          ByVal MessageID As String, _
                          ByVal StoreID As String, _
                          ByVal cText As String) _
        As Integer

    'Public Declare Function ReadRTF _
        Lib "mapirtfd.dll" _
        Alias "readrtf" (ByVal ProfileName As String, _
                       ByVal SrcMsgID As String, _
                         ByVal SrcStoreID As String, _
                   ByRef MsgRTF As String) _
        As Integer

</PRE><h3>Sample Code</h3>
 
<P>
The following sample code assumes that you have already declared the DLL
function as described above. For a more complete example, please see the
Visual Basic project accompanying this sample.

<UL><LI>WriteRTF Sample. (This code assumes you already have a variable
   called cRTF defined which contains RTF-formatted text.)
<P>
<P><PRE>    Sub SendRTF()
      Dim objSession, objMessage, objMessageFilter As Object
      Dim MessageID As String
      Dim bRet As Integer
</PRE><P>
<P><PRE>      Set objSession = CreateObject("MAPI.Session")
      objSession.Logon
</PRE><P>
<P><PRE>      ' Create a new message
      Set objMessage = objSession.Outbox.Messages.Add
      objMessage.Update
      MessageID = objMessage.ID
</PRE><P>
<P><PRE>      bRet = WriteRTF(objSession.Name, objMessage.ID, _
<PRE></PRE>                      objMessage.StoreID, cRTF)

      If Not bRet = 0 Then
         MsgBox "RTF Not Written Successfully"
      End If

      ' Because the object has changed, we must re-create
      ' our Message object variable
      ' First clear our current variable
      Set objMessage = Nothing
      ' Next set a filter on the outbox for our Message ID
      Set objMessageFilter = objSession.Outbox.Messages.Filter
      objMessageFilter.Fields(ActMsgPR_ENTRYID) = MessageID
      ' Get our message
      Set objMessage = objSession.Outbox.Messages.GetFirst
      ' Clear the filter we have set
      Set objMessageFilter = Nothing

      ' Send the Message
      objMessage.Send ShowDialog:=True
      objSession.Logoff
    End Sub

</PRE><LI>ReadRTF Sample.
<P>
<P><PRE>    Sub ReadRTF()
      Dim objSession, objMessage, objMessageFilter As Object
      Dim MessageID, cRTF As String
      Dim bRet As Integer
</PRE><P>
<P><PRE>      Set objSession = CreateObject("MAPI.Session")
      objSession.Logon
</PRE><P>
<P><PRE>      ' Read the first message in the Inbox
      Set objMessage = objSession.Inbox.Messages(1)
      objMessage.Update  ' to get a permanent Entry ID
      MessageID = objMessage.ID
</PRE><P>
<P><PRE>      ' We must initialize the string variable we are passing
      ' to a string of the maximum length we want to read
      cRTF = Space(500)
      bRet = ReadRTF(objSession.Name, objMessage.ID, _
<PRE></PRE>                      objMessage.StoreID, cRTF)

      If Not bRet = 0 Then
         MsgBox "RTF Not Written Successfully"
      Else
         MsgBox "RTF Text: " &amp; Chr(13) &amp; cRTF
      End If

      Set objMessage = Nothing
      objSession.Logoff
      Set objSession = Nothing
    End Sub

</PRE></UL><h2>REFERENCES</h2>
 
<P>
For additional information about Collaboration Data Objects versus Active
Messaging, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q176916.htm">Q176916</A></B>
   TITLE     : INFO: Active Messaging and Collaboration Data Objects (CDO)

</PRE> 
<PRE>Keywords          : kbcode ActMsg EMAPI
Version           : WINDOWS:1.0,1.1
Platform          : WINDOWS
Issue type        : kbfile
Solution Type     : kbsample</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

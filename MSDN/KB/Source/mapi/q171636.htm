

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Adding a Delegate to Exchange Server Messaging Service </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171636">
<META NAME="KBModify" CONTENT="1997/08/11">
<META NAME="KBCreate" CONTENT="1997/07/18">
<META NAME="Keywords" CONTENT="EDKAPI EMAPI">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  The following details the process of adding a Delegate to the Exchange Messaging Service. Delegates are the users that show up in the  Additional Mailboxes  section on the  Advanced  tab of the Exchange Server Properties.  This process is the progr...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QACK,QAIF,QAPN,QAYC,QAUD,QAJQ,QAV5,QAK9,QAI4,QAA1,QAYZ,QAM4,QABN,QDI2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Adding a Delegate to Exchange Server Messaging Service</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171636</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Exchange Development Kit (EDK)
<LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
<LI>Microsoft Exchange Server, versions 4.0, 5.0
<LI>Microsoft Exchange Windows 95 client, version 5.0
<LI>Microsoft Exchange Windows NT client, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following details the process of adding a Delegate to the Exchange
Messaging Service. Delegates are the users that show up in the "Additional
Mailboxes" section on the "Advanced" tab of the Exchange Server Properties.
<P>
This process is the programmatic equivalent to:

<OL><P><LI>Launching the mail applet from the control panel.

<P><LI>Selecting a profile that has the "Microsoft Exchange Server" service
   installed.

<P><LI>Pulling up the properties for "Microsoft Exchange Server".

<P><LI>Selecting the "Advanced" tab.

<P><LI>Adding an additional mailbox to open.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
To accomplish this programmatically, you need to do the following:

<OL><P><LI>Start a MAPI Session by calling MAPILogonEx.

<P><LI>Call IMAPISession::AdminServices to get an IMsgServiceAdmin pointer for
   making changes to message services. The call should look something
   like the following:
<P>
<P><PRE>      hr = m_lpSession-&gt;AdminServices(0, &amp;m_lpServiceAdmin);
</PRE>
<P><LI>Call IMsgServiceAdmin::GetMsgServiceTable to provide access to the
   message service table, a listing of the message services in the
   profile. This call should look something like the following:
<P>
<P><PRE>      hr = m_lpServiceAdmin-&gt;GetMsgServiceTable(0, &amp;m_lpMsgSvcTable);
</PRE>
<P><LI>Now that you have a table of all of the Messaging Services, you need to
   find the Exchange Server Service. You do this by first calling
   SetColumns to specify that you only want to see PR_DISPLAY_NAME and
   PR_SERVICE_UID in the table. Next, you create a restriction that
   specifies the
<P>
<P><PRE>      PR_SERVICE_NAME = "MSEMS"
</PRE><P>
   and call FindRow with this restriction. Then, you call QueryRows() to
   get a pointer to the returned SRowSet. At this point, you should have a
   single row that contains the Exchange Server PR_DISPLAY_NAME and
   PR_SERVICE_UID properties. You will need to store the PR_SERVICE_UID
   because you will need it later. Here is a sample of what this process
   looks like:
<P>
<PRE>      HRESULT      hr = NOERROR;
      static       SRestriction sres;
      SPropValue     spv;
      LPSRowSet   lpRows = NULL;

      static SizedSPropTagArray(2, Columns) =   {2, {PR_DISPLAY_NAME,
                                                     PR_SERVICE_UID}};

      // Restrict the columns to just PR_DISPLAY_NAME &amp; PR_ENTRYID
      hr = m_lpMsgSvcTable-&gt;SetColumns((LPSPropTagArray)&amp;Columns, 0);

      if (FAILED(hr))
      {
           goto cleanup;
      }

      // Set up a restriction for the Exchange Server Service.
      sres.rt = RES_PROPERTY;
      sres.res.resProperty.relop = RELOP_EQ;
      sres.res.resProperty.ulPropTag = PR_SERVICE_NAME;
      sres.res.resProperty.lpProp = &amp;spv;

      spv.ulPropTag = PR_SERVICE_NAME;
      spv.Value.lpszA = "MSEMS";

      // Call FindRow with that restriction
      hr = m_lpMsgSvcTable-&gt;FindRow(&amp;sres, BOOKMARK_BEGINNING, 0);

      if (SUCCEEDED(hr))
      {
         // We have found the Service.  Go get it.
         LPSPropValue   lpProp  =   NULL;

         hr = m_lpMsgSvcTable-&gt;QueryRows(1, 0, &amp;lpRows);

         if (FAILED(hr))
         {
            goto cleanup;
         }

         // It would not make sense to have more than one row returned in
         // this case.
         if (lpRows-&gt;cRows != 1)
         {
            hr = (E_FAIL);
            goto cleanup;
         }

         // We know that the 2nd row has the Service UID.
         // See SetColumns() (above).
         lpProp = &amp;lpRows-&gt;aRow[0].lpProps[1];

         if (lpProp-&gt;ulPropTag != PR_SERVICE_UID)
         {
            hr = (E_FAIL);
            goto cleanup;
         }

         // Copy the UID into our member.
         memcpy(&amp;m_ServiceUID.ab, lpProp-&gt;Value.bin.lpb,
                lpProp-&gt;Value.bin.cb);

      }
      cleanup:
         return hr;

</PRE><P><LI>Using the Service UID obtained from step 4, call
   IMsgServiceAdmin::AdminProviders to obtain a pointer that will provide
   access to the Exchange Server Service administration object. This looks
   like the following:
<P>
<P><PRE>      hr = m_lpServiceAdmin-&gt;AdminProviders(&amp;m_ServiceUID,0,
<PRE></PRE>                                            &amp;m_lpProviderAdmin);

</PRE><P><LI>Now call the IProviderAdmin::CreateProvider method to add the
   "EMSDelegate" provider. You also need to specify an array of properties
   that you need to set for the newly added provider. In this case, you
   will need to add the following properties:
<P>
<P><PRE>      PR_PROFILE_TYPE
      PR_DISPLAY_NAME
      PR_PROFILE_MAILBOX
      PR_PROFILE_SERVER
      PR_PROFILE_SERVER_DN
</PRE><P>
</OL>This process should look something like:
<P>
<PRE>   {
      HRESULT      hr;

      UINT      cprops = 0;  // incremented by the MACRO SetLPSZ
      SPropValue   propT[5];       // Number of props
      const TCHAR   szSection[] = TEXT("EMSDelegate");

      // TODO: Change the hard-coded values that are used below to see
      // this work.
      SetLPUL(propT, cprops, PR_PROFILE_TYPE, PROFILE_DELEGATE);
      SetLPSZ(propT, cprops, PR_DISPLAY_NAME, "Mailbox - My Name");
      SetLPSZ(propT, cprops, PR_PROFILE_MAILBOX,
              "/o=MSGTEAM/ou=MSGSite1/cn=Recipients/cn=email");
      SetLPSZ(propT, cprops, PR_PROFILE_SERVER, "MYSERVER");
      SetLPSZ(propT, cprops, PR_PROFILE_SERVER_DN,
        "/o=MSGTEAM/ou=MSGSite1/cn=Configuration/cn=Servers/cn=MYSERVER");

      // Create the provider section
      hr = m_lpProviderAdmin-&gt;CreateProvider((LPTSTR)szSection, 5, propT,
                                             0, 0, &amp;m_ServiceUID);

      return hr;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: EMSDelegate Mailboxes<BR>
Keywords          : EDKAPI EMAPI<BR>
Version           : WINDOWS:1.0,5.0; WINDOWS NT:4.0,<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

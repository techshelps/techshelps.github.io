

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Creating a Custom Recipient Progammatically </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165931">
<META NAME="KBModify" CONTENT="1997/08/06">
<META NAME="KBCreate" CONTENT="1997/03/26">
<META NAME="Keywords" CONTENT="EDKAPI">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  Creating a custom recipient programmatically requires the use of the DAPI functions. Using DAPIStart to create a DAPI session is the first step to making this work. Once the session is created, use DAPIWrite to send the custom recipient information...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABI,QAR2,QABH,QAUJ,QAI4,QAJX,QAH4,QAEF,QADR,QBW6,QBXR,QAVX,QAVW,QAKD,QAIC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Creating a Custom Recipient Progammatically</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165931</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Exchange Software Development Kit (SDK)
<LI>Extended Messaging Application Programming Interface (MAPI), version
   1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Creating a custom recipient programmatically requires the use of the DAPI
functions. Using DAPIStart to create a DAPI session is the first step to
making this work. Once the session is created, use DAPIWrite to send the
custom recipient information to the Exchange Server.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This example is not a complete program. It assumes that MAPIInitialize has
been called. The additional include files required to make this code work
are Dapi.h and Edk.h.

<OL><P><LI>Populate the DAPIParms structure. This structure must be created in
   order to call DAPIStart:
<P>
<P><PRE>      sDAPIParms.pszDSAName = "EXCHANGE_SERVER";
      sDAPIParms.pszBasePoint = NULL;
      sDAPIParms.pszContainer = NULL;
      sDAPIParms.pszNTDomain = "EXCHANGE_SERVER";
      sDAPIParms.dwFlags = DAPI_MODIFY_REPLACE_PROPERTIES;
      sDAPIParms.dwDAPISignature = DAPI_SIGNATURE;
</PRE>
<P><LI>Create a DAPI session using the DAPIStart function. Check the value
   returned to make sure you have a DAPI session created:
<P>
<P><PRE>      pDAPIEvent = DAPIStart(
<PRE></PRE>                &amp;hDAPISession,
                &amp;sDAPIParms);

      if (pDAPIEvent != NULL)
         goto cleanup;

</PRE><P><LI>Allocate memory for the DAPI_ENTRY structure that will store the custom
   recipient information. Check for the success of the memory allocation
   and clear the memory:
<P>
<P><PRE>      hr = MAPIAllocateBuffer(sizeof(DAPI_ENTRY), (LPVOID*) &amp;pValues);
      if (FAILED(hr))
<PRE></PRE>         {
         goto cleanup;
         }
      ZeroMemory(pValues, sizeof(DAPI_ENTRY));

</PRE><P><LI>Allocate memory for the DAPI_ENTRY structure that will store the header
   information for the recipient properties. Check for the success of the
   memory allocation and clear the memory:
<P>
<P><PRE>      hr = MAPIAllocateBuffer(sizeof(DAPI_ENTRY), (LPVOID*) &amp;pAttributes);
      if (FAILED(hr))
<PRE></PRE>        {
        goto cleanup;
        }
      ZeroMemory(pAttributes, sizeof(DAPI_ENTRY));

</PRE><P><LI>Set the attributes to set for the custom recipient. The memory is
   cleared and then the values are set:
<P>
<P><PRE>      pAttributes-&gt;unAttributes = 1;
      pAttributes-&gt;ulEvalTag = TEXT_LINE;
</PRE><P>
<P><PRE>      hr = MAPIAllocateMore(
<PRE></PRE>        cDAPIArrayElements * sizeof(ATT_VALUE),
        pAttributes,
        (LPVOID*) &amp;pAttributes-&gt;rgEntryValues);
      if (FAILED(hr))
         {
         goto cleanup;
         }
      ZeroMemory(
        pAttributes-&gt;rgEntryValues,
        cDAPIArrayElements * sizeof(ATT_VALUE));
      pAttributes-&gt;rgEntryValues[0].DapiType = DAPI_TEXT;
      pAttributes-&gt;rgEntryValues[0].Value.pszValue = "Obj-Class,
         E-mail address,Directory Name,Alias Name,obj-container,
         Display name,First Name,Last Name";
      pAttributes-&gt;rgEntryValues[0].size =
         strlen(pAttributes-&gt;rgEntryValues[0].Value.pszValue);

</PRE><P><LI>Fill the DAPI_ENTRY structure with the values to create the custom
   recipient:
<P>
<P><PRE>      pValues-&gt;unAttributes = 1;
      pValues-&gt;ulEvalTag = TEXT_LINE;
</PRE><P>
<P><PRE>      hr = MAPIAllocateMore(
<PRE></PRE>           cDAPIArrayElements * sizeof(ATT_VALUE),
           pValues,
           (LPVOID*) &amp;pValues-&gt;rgEntryValues);
      if (FAILED(hr))
        {
        goto cleanup;
        }
      ZeroMemory(
           pValues-&gt;rgEntryValues,
           cDAPIArrayElements * sizeof(ATT_VALUE));
      pValues-&gt;rgEntryValues[0].DapiType = DAPI_TEXT;
      pValues-&gt;rgEntryValues[0].Value.pszValue =
          "Remote,SMTP:USER1@cate.com,usertest,usertest,Recipients,
          User Test,User,Test";
      pValues-&gt;rgEntryValues[0].size =
          strlen(pValues-&gt;rgEntryValues[0].Value.pszValue);

</PRE><P><LI>Write the data to the Exchange directory. To determine if the write
   was successful, check the value of DAPIEvent and the USN:
<P>
<P><PRE>      ulNewUSN = 0;
      pDAPIEvent = DAPIWrite(
<PRE></PRE>                   hDAPISession,
                   dwWriteFlags,
                   pAttributes,
                   pValues,
                   &amp;ulNewUSN,
                   NULL,
                   NULL);

</PRE><P><LI>Release the memory allocated to the DAPI_ENTRY structures:
<P>
<P><PRE>      MAPIFREEBUFFER(pValues);
      MAPIFREEBUFFER(pAttributes);
</PRE>
<P><LI>End the DAPI session:
<P>
<P><PRE>      DAPIEnd(hDAPISession);
</PRE><P>
</OL>NOTE: This example can run from a machine other than an Exchange Server. In
order to accomplish this, the following DLLs must be present on the
machine: Dapi.dll, Exchmem.dll, and Libxds.dll. If errors referring to the
$first name$ occur when trying to run the code, install the Exchange
Administrator on the machine and the errors should disappear.
<P>
 
<PRE>Keywords          : EDKAPI
Version           : 1.0
Platform          : WINDOWS
Issue type        : kbhowto
Solution Type     : kbcode</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

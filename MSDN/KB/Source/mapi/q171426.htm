

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Resolving a Recipient Using IAddrBook::ResolveName </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171426">
<META NAME="KBModify" CONTENT="1997/11/24">
<META NAME="KBCreate" CONTENT="1997/07/16">
<META NAME="Keywords" CONTENT="EMAPI">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  This article demonstrates code necessary to effectively call the IAddrBook::ResolveName method to retrieve a valid recipient given a specific display name.  MORE INFORMATION  The ResolveName method takes a long pointer to a string as input that rep...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAGI,QAD2,QAI4,QAUJ,QAPN,QBXB,QAR2,QBW6,QARM,QBXS,QBCF,QBWQ,QALW,QAKJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Resolving a Recipient Using IAddrBook::ResolveName</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171426</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
   on the following platforms: NT, Win95, x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates code necessary to effectively call the
IAddrBook::ResolveName method to retrieve a valid recipient given a
specific display name.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The ResolveName method takes a long pointer to a string as input that
represents the display name and passes back a fully qualified pointer to an
LPADRLIST array that can be used in other calls that require such a
parameter or pieces thereof:
<P>
<PRE>   HRESULT ResolveName ( LPSTR lpszDisplayName LPADRLIST *lpAdrList
   LPADRBOOK pAddrBook)
   {
       HRESULT hRes = S_OK;
       ULONG   ulUIParam = 0;
       ULONG   cbEID = 0L;
       LPBYTE   lpEID = NULL;
       LPADRLIST pAdrList = NULL;


       // Allocate memory for new SRowSet structure.
       hRes = MAPIAllocateBuffer(CbNewSRowSet(1),(LPVOID*) &amp;pAdrList);

       // If memory allocation fails, quit.
       if ( FAILED ( hRes ) )
         return hRes;

       // Zero out allocated memory.
       ZeroMemory ( pAdrList, CbNewSRowSet(1));

       // Allocate memory for SPropValue structure that indicates what
       // recipient properties will be set. To resolve a name that
       // already exists in the Address book, this will always be 1.
       hRes = MAPIAllocateBuffer( 1 * sizeof(SPropValue),
                          (LPVOID*) &amp;(pAdrList-&gt;aEntries[0].rgPropVals));

       // If memory allocation fails, quit.
       if ( FAILED ( hRes ) )
         return hRes;

       // Zero out allocated memory.
       ZeroMemory ( pAdrList -&gt; aEntries[0].rgPropVals,
                     1 * sizeof(SPropValue) );

       // Resolve name will take as many entries in the ADRLIST as you
       // want to resolve, but each entry (ADRENTRY) can have only one
       // property previously set by the client - this is usually
       // PR_DISPLAY_NAME.

       // How many recipients to resolve.
       pAdrList-&gt;cEntries = 1;

       // As far as I can tell this must always be 1L and will always
       // equal the multiplier in the MAPIAllocateBuffer call above.
       pAdrList-&gt;aEntries[0].cValues = 1L;

       // Set the SPropValue members == the desired values. This should
       // be PR_DISPLAY_NAME. You can substitute a display name with an
       // alias to search for. You can search by alias and display names
       // interchangeably in most address books.

       pAdrList-&gt;aEntries[0].rgPropVals[0].ulPropTag = PR_DISPLAY_NAME;
       pAdrList-&gt;aEntries[0].rgPropVals[0].Value.lpszA =  lpszDisplayName;

       // pAdrList-&gt;aEntries[0].rgPropVals[1].ulPropTag = PR_ENTRYID;

       // ResolveName is kind enough to redimension this array for us and
       // give back a fully filled out ADRLIST and ADRENTRY structures.

       hRes = m_pAddrBook -&gt; ResolveName ( (ULONG) m_hWnd,
                                            0L, NULL, pAdrList );

       if ( SUCCEEDED ( hRes ) )
           *lpAdrList = pAdrList;

       return hRes;


</PRE>It is important to note that when calling IAddrBook::ResolveName, it is
necessary to allocate memory for only one property in the rgPropVals member
of the aEntries member of the ADRLIST parameter. Trying to set or allocate
memory larger than one property can have unexpected results. In most cases
ResolveName simply returns MAPI_E_INVALID_PARAMETER, but under certain
conditions, it can result in access violations.
<P>
 
<PRE>Keywords          : EMAPI
Version           : WINDOWS:1.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

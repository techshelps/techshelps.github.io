

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Modifying Settings of MS Exchange Transport Provider </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170225">
<META NAME="KBModify" CONTENT="1997/12/02">
<META NAME="KBCreate" CONTENT="1997/06/17">
<META NAME="Keywords" CONTENT="kbcode EMAPI ExchExt MAPIIXP">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  This article explains how to programmatically change the values of the Microsoft Exchange Transport Provider and review those changes after they have been committed.  MORE INFORMATION  Changing the settings for the Microsoft Exchange Server service...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWB,QACK,QAPN,QDJ2,QAGI,QAI4,QAEV,QBBS,QDIZ,QAGB,QAYC,QDJ3,QBW4,QAXC,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Modifying Settings of MS Exchange Transport Provider</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170225</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to programmatically change the values of the
Microsoft Exchange Transport Provider and review those changes after they
have been committed.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Changing the settings for the Microsoft Exchange Server service provider
can be broken into two phases: creating and configuring a profile and
modifying some or all of the settings of the Microsoft Exchange Server
service provider.
<P>
<P><h3>Creating and Configuring a Profile</h3>
 
<P>
First follow the steps listed below to create and configure a profile.
(These steps can be found on the Microsoft Developer Network (MSDN) in the
article "Creating and Configuring a Profile.")

<OL><P><LI>Read the header file for each service. Understand what properties you
   need to configure and what values you will use.

<P><LI>Call the MAPIAdminProfiles function to obtain an IProfAdmin interface.
   Call the CreateProfile method to create your profile, and the
   AdminServices method to obtain an IMsgServiceAdmin interface.

<P><LI>Add message services to the profile. Refer to the previous guidelines
   for the order you should use. For each service, use the IMsgServiceAdmin
   interface to do the following :
<P>
<P><PRE>    a. Call the CreateMsgService method.
    b. Obtain the MAPIUID structure of the service you just created:
       1. Call the GetMsgServiceTable method to obtain an IMAPITable
<PRE></PRE>          interface.
       2. Call the HrQueryAllRows function to retrieve all rows from the
          table.
       3. Get the PR_SERVICE_UID column from the last row. This is the
          MAPIUID structure of the last service added. You may wish to
          check with an assertion that other properties of the service are
          as you expect.
    c. Call the ConfigureMsgService method, passing the MAPIUID structure
       of the service you just created and a property value array with its
       configuration properties.
       - If you must make configuration calls that require an IMAPISession
       interface, such as IMAPISession::SetDefaultStore, IAddrBook::SetPAB,
       or IAddrBook::SetABSearchPath, pass the MAPI_NO_MAIL flag to the
       MAPILogonEx function.
       - To make your profile temporary, call the IProfAdmin::DeleteProfile
       method immediately after logging on to the profile. It will be
       deleted after you log off, and will not be visible to other
       applications in the meantime.

</PRE></OL><h3>Modifying Settings of Service Provider</h3>
 
<P>
The steps above helped you to create and configure a generic profile. In
the second phase you will modify some or all of the settings of the
Microsoft Exchange Server service provider. (These steps can also be found
on MSDN in the article "Creating a Profile through MAPI.")
<P>
When you reach the step in which the MAPI
IMsgServiceAdmin::ConfigureMsgService method is called, specify the
following information in the lpProps parameter. This parameter is a pointer
to an SPropValue structure containing the values of the properties to
display to the user in the property sheet.

<UL><LI>Home Server of the application's mailbox. Use the property tag
   PR_PROFILE_HOME_SERVER. This property is defined in EDKMDB.H.

<LI>Name of the application's mailbox, using the property tag
   PR_PROFILE_MAILBOX. This property is defined in EDKMDB.H.
<P>
</UL><h3>Summary</h3>
 
<P>
Following the steps above you should have code that is comparable to the
pseudo-code below.
<P>
(NOTE: The following pseudo-code uses PR_UNRESOLVE_XXX properties to
configure the profile. Using the properties mentioned above generally fail
to configure the service as expected.)

<UL><LI>Get IProfAdmin interface pointer with MAPIAdminProfiles()

<LI>Create a new profile with IProfAdmin::CreateProfile()

<LI>Get IMsgServiceAdmin interface pointer with IProfAdmin::AdminServices()

<LI>Add a message service to the newly created profile with
   IMsgServiceAdmin::CreateMsgService()

<LI>Get the message service table of the Message service with
   IMsgServiceAdmin::GetMsgServiceTable()

<LI>Get the row from the message service table which represents the
   Microsoft Exchange Server service provider (MSEMS) with HrQueryAllRows()

<LI>Set the values for PR_PROFILE_UNRESOLVED_NAME and
   PR_PROFILE_UNRESOLVED_SERVER with
   IMSgServiceAdmin::ConfigureMsgService()

<LI>Logon to a new MAPI session using the new profile with MAPILogonEx()

<LI>Release and reuse IMsgService and IMAPITable objects

<LI>Get new IMsgServiceAdmin interface pointer

<LI>Get the Message service table

<LI>Find the row that represents the MSEMS message service

<LI>Open the property sheet for the service with
   IMsgServiceAdmin::ConfigureMsgService
<P>
</UL><h3>Sample Code</h3>
 
<P>
Following is one possible implementation of the pseudo-code. It is only a
sample, but it meets the design goals of changing various settings of the
Microsoft Exchange Service Provider and displaying the results of those
changes:
<P>
<PRE>    HRESULT ChangeMSESPSettings ( LPSTR lpszProfile, HWND hWnd )
    {
      HRESULT hRes = S_OK;

      LPPROFADMIN       pProfAdmin = NULL;
      LPSERVICEADMIN    pSvcAdmin = NULL;
      LPMAPITABLE       pMsgSvcTable = NULL;
      LPSRowSet         pRows = NULL;
      SPropValue        rgval[2];
      LPMAPISESSION     pSession = NULL;
      SRestriction      sres;
      SPropValue        pSvcProps;

      enum {iSvcName, iSvcUID, cptaSvc};
      SizedSPropTagArray (cptaSvc, sptCols) = { cptaSvc,
                                                PR_SERVICE_NAME,
                                                PR_SERVICE_UID };

      for ( int i = 0; i &lt; 2; i++)
         ZeroMemory ( &amp;rgval[i], sizeof ( SPropValue ) );

      //  Get IProfAdmin interface pointer
      if ( FAILED ( hRes = MAPIAdminProfiles ( 0L, &amp;pProfAdmin ) ) )
         goto Quit;

      //   Create a new profile -- IProfAdmin::CreateProfile()
      //   If the attempt to create the profile fails, remove the profile
      if ( FAILED ( hRes = pProfAdmin -&gt; CreateProfile ( lpszProfile,
                                                         "",
                                                         (ULONG)hWnd,
                                                         0L ) ) )
      {
         hRes = pProfAdmin -&gt; DeleteProfile ( lpszProfile, 0L );
         goto Quit;
      }
      // Get IMsgServiceAdmin interface pointer
      if ( FAILED ( hRes = GetAdminService ( &amp;pSvcAdmin, NULL ) ) )
         goto Quit;

      // Add a message service to the newly created profile
      if (FAILED(hRes = pSvcAdmin-&gt;CreateMsgService ( "MSEMS",
                                                      "Microsoft Exchange",
                                                      (ULONG)hWnd,
                                                      0L ) ) )
         goto Quit;

      // Get the message service table of the Message service
      if ( FAILED ( hRes = pSvcAdmin-&gt;GetMsgServiceTable(0L,
                                                         &amp;pMsgSvcTable) ) )
         goto Quit;

      // Get the row from the message service table which represents the
      // Microsoft Exchange Server service provider

      sres.rt = RES_CONTENT;
      sres.res.resContent.ulFuzzyLevel = FL_FULLSTRING;
      sres.res.resContent.ulPropTag = PR_SERVICE_NAME;
      sres.res.resContent.lpProp = &amp;pSvcProps;

      pSvcProps.ulPropTag = PR_SERVICE_NAME;
      pSvcProps.Value.lpszA = "MSEMS";

      if ( FAILED ( hRes = HrQueryAllRows ( pMsgSvcTable,
                                            (LPSPropTagArray)&amp;sptCols,
                                            &amp;sres,
                                            NULL,
                                            0,
                                            &amp;pRows ) ) )
         goto Quit;

      // Set the values for PR_PROFILE_UNRESOLVED_NAME and
      // PR_PROFILE_UNRESOLVED_SERVER

      rgval[0].ulPropTag = PR_PROFILE_UNRESOLVED_NAME;
      rgval[0].Value.lpszA = "&lt;user name&gt;";

      rgval[1].ulPropTag = PR_PROFILE_UNRESOLVED_SERVER;
      rgval[1].Value.lpszA = "&lt;server name&gt;";

      if ( FAILED ( hRes = pSvcAdmin -&gt; ConfigureMsgService(
           (LPMAPIUID) pRows -&gt; aRow-&gt;lpProps[iSvcUID].Value.bin.lpb,
           0, NULL, 2, rgval ) ) )
      hRes = pProfAdmin -&gt; DeleteProfile ( lpszProfile, 0L );

      // Logon to a new MAPI session using new profile -- MAPILogonEx()
      if ( SUCCEEDED ( hRes = MAPILogonEx ( ( ULONG )hWnd,
                                            lpszProfile,
                                            "",
                                            MAPI_NEW_SESSION |
                                            MAPI_NO_MAIL, &amp;pSession ) ) )
      {
         // Release and reuse IMsgService and IMAPITable
         // objects.
         pSvcAdmin -&gt; Release ( );
         pMsgSvcTable -&gt; Release ( );
         FreeProws ( pRows );

         pSvcAdmin = NULL;
         pMsgSvcTable = NULL;
         pRows = NULL;

         // Get new IMsgServiceAdmin interface pointer
         hRes = pSession -&gt; AdminServices ( 0L, &amp;pSvcAdmin );

         // Get the Message service table
         if(FAILED(hRes = pSvcAdmin-&gt;GetMsgServiceTable ( 0L,
                                                       &amp;pMsgSvcTable ) ) )
             goto Quit;

         // Find the row that represents the MSEMS message service
         if ( FAILED ( hRes = HrQueryAllRows (pMsgSvcTable,
                                              (LPSPropTagArray)&amp;sptCols,
                                              &amp;sres,
                                              NULL,
                                              0,
                                              &amp;pRows ) ) )
             goto Quit;

         // Open the property sheet for the service
         if ( FAILED ( hRes = pSvcAdmin -&gt; ConfigureMsgService(
           (LPMAPIUID) pRows -&gt; aRow -&gt; lpProps[iSvcUID].Value.bin.lpb,
            0,
            SERVICE_UI_ALLOWED |
            SERVICE_UI_ALWAYS,
            5,
            rgval) ) )

             goto Quit;
    }

    Quit:
      if ( hRes )
        hRes = pProfAdmin -&gt; DeleteProfile ( lpszProfile, 0L );

      if ( pMsgSvcTable )
      {
         FreeProws( pRows );
         pRows = NULL;
         pMsgSvcTable -&gt; Release ( );
         pMsgSvcTable = NULL;
      }

      if ( m_pProfAdmin )
      {
         if ( hRes == MAPI_E_NO_ACCESS )
            pProfAdmin -&gt; DeleteProfile ( lpszProfile, 0L );
      }

      if ( pSvcAdmin )
      {
         pSvcAdmin -&gt; Release ( );
         pSvcAdmin = NULL;
      }

      if ( pSession )
      {
         pSession -&gt; Logoff ( (ULONG)m_hWnd, MAPI_LOGOFF_SHARED, 0L );
         pSession -&gt; Release ( );
         pSession = NULL;
      }

      return hRes;
    }
     STDMETHODIMP GetAdminService ( LPSERVICEADMIN * lppSvcAdmin,
        LPMAPISESSION m_pSession)
     {
        HRESULT hRes = S_OK;
        LPSERVICEADMIN lpSvcAdmin = NULL;

        If(NULL!=m_pSession)
        hRes = m_pSession -&gt; AdminServices ( 0L, &amp;lpSvcAdmin );
        else
        hRes = MAPIAdminProfiles(0L, &amp;lpSvcAdmin)

        if ( SUCCEEDED ( hRes ) )
           *lppSvcAdmin = lpSvcAdmin;

        return hRes;
     }


</PRE>This code results in the messaging service property sheet for Microsoft
Exchange Server service provider being displayed with the server and
mailbox properties set for the profile.
<P>
 
<PRE>Keywords          : kbcode EMAPI ExchExt MAPIIXP
Version           : WINDOWS:1.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Save Message to MSG Compound File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171907">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1997/07/24">
<META NAME="Keywords" CONTENT="EMAPI XCLN">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  This article contains code that demonstrates how to save a message to a compound document--specifically an .msg file--that is readable by any client that supports the .msg file format.  MORE INFORMATION  The function below takes a valid message obj...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABD,QABE,QAUR,QAI4,QA4S,QA4R,QAPN,QAEV,QAFI,QA6A,QAU7,QAYC,QARL,QAH4,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Save Message to MSG Compound File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171907</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
<LI>Microsoft Exchange Windows 3.x client, versions 4.0, 5.0
<LI>Microsoft Exchange Windows NT client, versions 4.0, 5.0
   on the following platforms: NT, x86
<LI>Microsoft Exchange Windows 95 client, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article contains code that demonstrates how to save a message to a
compound document--specifically an .msg file--that is readable by any
client that supports the .msg file format.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The function below takes a valid message object as an in parameter and uses
its properties to create a duplicate of the message and save it to a
compound file using the .msg format. The subject line of the message is
used as the file name of the new file.
<P>
NOTE: Special characters in the subject line of the in parameter of this
function can cause unexpected results. While code can be written to avoid
special characters in the subject line, it is not germane to the topic and
such code is intentionally left out:
<P>
<PRE>    #define INITGUID
    #include &lt;objbase.h&gt;

    #define USES_IID_IMessage

    #include &lt;mapix.h&gt;
    #include &lt;mapitags.h&gt;
    #include &lt;mapidefs.h&gt;
    #include &lt;mapiutil.h&gt;
    #include &lt;mapiguid.h&gt;
    #include &lt;imessage.h&gt;

    // {00020D0B-0000-0000-C000-000000000046}
    DEFINE_GUID(CLSID_MailMessage,
    0x00020D0B,
    0x0000, 0x0000, 0xC0, 0x00, 0x0, 0x00, 0x0, 0x00, 0x00, 0x46);

    HRESULT SaveToMSG ( LPMESSAGE pMessage )
    {
        HRESULT hRes = S_OK;
        LPSPropValue pSubject = NULL;
        LPSTORAGE pStorage = NULL;
        LPMSGSESS pMsgSession =  NULL;
        LPMESSAGE pIMsg = NULL;
        SizedSPropTagArray ( 7, excludeTags );
        char szPath[_MAX_PATH];
        char strAttachmentFile[_MAX_PATH];
        LPWSTR lpWideCharStr = NULL;
        ULONG cbStrSize = 0L;

        // create the file name in the directory where "TMP" is defined
        // with subject as the filename and ".msg" extension.

        // get temp file directory
        GetTempPath(_MAX_PATH, szPath);

        // get subject line of message to copy. This will be used as the
        // new file name.
        HrGetOneProp( pMessage, PR_SUBJECT, &amp;pSubject );

        // fuse path, subject, and suffix into one string
        strcpy ( strAttachmentFile, szPath );
        strcat ( strAttachmentFile, pSubject-&gt;Value.lpszA  );
        strcat ( strAttachmentFile, ".msg");

        // get memory allocation function
        LPMALLOC pMalloc = MAPIGetDefaultMalloc();

        // Convert new file name to WideChar
        cbStrSize = MultiByteToWideChar (CP_ACP,
                                         MB_PRECOMPOSED,
                                         strAttachmentFile,
                                         -1, lpWideCharStr, 0);

        MAPIAllocateBuffer ( cbStrSize * sizeof(WCHAR),
                                (LPVOID *)&amp;lpWideCharStr );

        MultiByteToWideChar (CP_ACP,
                             MB_PRECOMPOSED,
                             strAttachmentFile,
                             -1, lpWideCharStr, cbStrSize );

        // create compound file
        hRes = ::StgCreateDocfile(lpWideCharStr,
                                  STGM_READWRITE |
                                  STGM_TRANSACTED |
                                  STGM_CREATE, 0, &amp;pStorage);

        // Open an IMessage session.
        hRes = ::OpenIMsgSession(pMalloc, 0, &amp;pMsgSession);

        // Open an IMessage interface on an IStorage object
        hRes = ::OpenIMsgOnIStg(pMsgSession,
                                MAPIAllocateBuffer,
                                MAPIAllocateMore,
                                MAPIFreeBuffer,
                                pMalloc,
                                NULL,
                                pStorage,
                                NULL, 0, 0, &amp;pIMsg);

        // write the CLSID to the IStorage instance - pStorage. This will
        // only work with clients that support this compound document type
        // as the storage medium. If the client does not support
        // CLSID_MailMessage as the compound document, you will have to use
        // the CLSID that it does support.
        hRes = WriteClassStg(pStorage, CLSID_MailMessage );

        // Specify properties to exclude in the copy operation. These are
        // the properties that Exchange excludes to save bits and time.
        // Should not be necessary to exclude these, but speeds the process
        // when a lot of messages are being copied.
        excludeTags.cValues = 7;
        excludeTags.aulPropTag[0] = PR_ACCESS;
        excludeTags.aulPropTag[1] = PR_BODY;
        excludeTags.aulPropTag[2] = PR_RTF_SYNC_BODY_COUNT;
        excludeTags.aulPropTag[3] = PR_RTF_SYNC_BODY_CRC;
        excludeTags.aulPropTag[4] = PR_RTF_SYNC_BODY_TAG;
        excludeTags.aulPropTag[5] = PR_RTF_SYNC_PREFIX_COUNT;
        excludeTags.aulPropTag[6] = PR_RTF_SYNC_TRAILING_COUNT;

        // copy message properties to IMessage object opened on top of
        // IStorage.
        hRes = pMessage-&gt;CopyTo(0, NULL,
                                (LPSPropTagArray)&amp;excludeTags,
                                NULL, NULL,
                                (LPIID)&amp;IID_IMessage,
                                pIMsg, 0, NULL );

        // save changes to IMessage object.
        pIMsg -&gt; SaveChanges ( KEEP_OPEN_READWRITE );

        // save changes in storage of new doc file
        hRes = pStorage -&gt; Commit(STGC_DEFAULT);

        // free objects and clean up memory
        MAPIFreeBuffer ( lpWideCharStr );
        pStorage-&gt;Release();
        pIMsg-&gt;Release();
        CloseIMsgSession ( pMsgSession );

        pStorage = NULL;
        pIMsg = NULL;
        pMsgSession = NULL;
        lpWideCharStr = NULL;

        return hRes;
    }

 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : EMAPI XCLN<BR>
Version             : WINDOWS:1.0,4.0,5.0; WINDOWS NT:<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Access Message Property Not Exposed by Active Messaging </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174211">
<META NAME="KBModify" CONTENT="1998/01/27">
<META NAME="KBCreate" CONTENT="1997/09/23">
<META NAME="Keywords" CONTENT="ActMsg">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  Active Messaging is a set of wrappers around Extended MAPI objects. In many cases Active Messaging exposes only a small subset of the properties actually present on the underlying Extended MAPI object.  This article provides a sample demonstrating ...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAKJ,QBS0,QAYC,QAV5,QAEV,QAW6,QAH6,QAMB,QAH4,QAFF,QBXS,QA62,QBWA,QAL7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Access Message Property Not Exposed by Active Messaging</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174211</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Collaboration Data Objects (CDO), version 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Active Messaging is a set of wrappers around Extended MAPI objects. In many
cases Active Messaging exposes only a small subset of the properties
actually present on the underlying Extended MAPI object.
<P>
This article provides a sample demonstrating how to access these unexposed
properties.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Please note that while most properties can be exposed using their Property
Tags, not all of them are usable by Visual Basic. Some fields require
certain forms of data that Visual Basic cannot supply (such as a structure
containing an array or structures).

<OL><P><LI>Open a new Project in Visual Basic.

<P><LI>Add a Reference to the file Olemsg32.dll. (If it is not on your system
   in either the system or system32 subdirectory, the Active Messaging
   Library is not installed.)

<P><LI>Paste the following code sample into a new Visual Basic Form containing
   three Command Buttons:
<P>
<P><PRE>      Public objSession As MAPI.Session
      Public objMsg As Message
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>          'Dim objects, then create and logon to session
          Set objSession = CreateObject("MAPI.Session")
          objSession.Logon "MyProfileNameHere"
      End Sub

      Private Sub Command1_Click()
          'This sample assumes you have at least one msg in your Inbox
          Set objMsg = objSession.Inbox.Messages.GetFirst()

          'This is where we &gt;&gt;look at&lt;&lt; unexposed properties by referencing
          'them via their Property Tag. First, we will just look at one by
          'referencing a constant defined in Olemsg32.dll. Then we look at
          'the same property by referencing the Property Tag value. Note:
          'The constants are specific to the 32-bit Active Messaging
          'Library.
          MsgBox "Class (using Constant): " &amp; _
            objMsg.Fields(ActMsgPR_MESSAGE_CLASS)
          MsgBox "Class (using PropTag): " &amp; _
            objMsg.Fields(&amp;H1A001E)
          MsgBox "Flags (using Constant): " &amp; _
            objMsg.Fields(ActMsgPR_MESSAGE_FLAGS)
          MsgBox "Flags (using PropTag): " &amp; _
            objMsg.Fields(&amp;HE070003)
      End Sub

      Private Sub Command2_Click()
          'NOTE: The code sample in Command2_Click demonstrates how to send
          'messages on behalf of another user.  It must be noted here, that
          'this process will fail unless the user has given you permission
          'to do this on their Exchange Server Account.

          'Sending on behalf of another user
          '---------------------------------
          'You can also use Property Tags to expose unexposed properties of
          'a newly created Message to add functionality supported by the
          'underlying MAPI subsystem that is not directly supported by
          'Active Messaging. For example, the following code will enable
          'you to send a message on another users behalf (aka - "Sent
          'Representing"):

          'Dim new Message and Recip objects
          Dim objMessage As Message
          Dim objRecip As Recipient

          'Add a new Message to the Outbox
          Set objMessage = objSession.Outbox.Messages.Add

          'Get a new valid AddressEntry object
          '  &gt;&gt;for the person you will send on behalf of&lt;&lt;
          Set objRecip = objMessage.Recipients.Add
          objRecip.Name = "JoeManager"
          objRecip.Type = 1
          objRecip.Resolve

          'Add the needed fields to the new Message then populate with
          'values from "JoeManager's" AddressEntry object.
          '
          'As noted above under Command1_Click, you may use either the
          'PropTag or the declared constant. The "table" below shows the
          'PropTag, and the Active Messaging constant. The name each of
          'the underlying MAPI field(s) corresponds to is the same as
          'the constant name less the leading "ActMsg".
          '-------------------------------------------------------------
          '&amp;H64001E ActMsgPR_SENT_REPRESENTING_ADDRTYPE
          '&amp;H65001E ActMsgPR_SENT_REPRESENTING_EMAIL_ADDRESS
          '&amp;H410102 ActMsgPR_SENT_REPRESENTING_ENRTYID
          '&amp;H42001E ActMsgPR_SENT_REPRESENTING_NAME
          '&amp;H3B0102 ActMsgPR_SENT_REPRESENTING_SEARCH_KEY

          'As such, the following code is valid in either of
          'the two following formats:
          'objMessage.Fields.Add &amp;H64001E, _
          '  objRecip.AddressEntry.Type
          'objMessage.Fields.Add &amp;H65001E, _
          '  objRecip.AddressEntry.Address
          'objMessage.Fields.Add &amp;H410102, _
          '  objRecip.AddressEntry.ID
          'objMessage.Fields.Add &amp;H42001E, _
          '  objRecip.AddressEntry.Name
          'objMessage.Fields.Add &amp;H3B0102, _
          '  objRecip.AddressEntry.Fields(&amp;H300B0102).Value
          'or
          objMessage.Fields.Add _
            ActMsgPR_SENT_REPRESENTING_ADDRTYPE, _
            objRecip.AddressEntry.Type
          objMessage.Fields.Add _
            ActMsgPR_SENT_REPRESENTING_EMAIL_ADDRESS, _
            objRecip.AddressEntry.Address
          objMessage.Fields.Add _
            ActMsgPR_SENT_REPRESENTING_ENRTYID, _
            objRecip.AddressEntry.ID
          objMessage.Fields.Add _
            ActMsgPR_SENT_REPRESENTING_NAME, _
            objRecip.AddressEntry.Name
          objMessage.Fields.Add _
            ActMsgPR_SENT_REPRESENTING_SEARCH_KEY, _
            objRecip.AddressEntry.Fields(&amp;H300B0102).Value

          'Now remove JoeManger from the Recip collection.
          'All we needed was his AddressEntry object.
          objMessage.Recipients.Delete
          Set objRecip = Nothing

          'Continue with remaining messaging functionality of your app.
          Set objRecip = objMessage.Recipients.Add
          objRecip.Name = "MyRecip"   'Who you are actually sending to
          objRecip.Type = 1
          objRecip.Resolve

          objMessage.Subject = "This is the subject"
          objMessage.Text = "This is the message body."
          objMessage.Send
      End Sub

      Private Sub Command3_Click()
          'Cleanup and logoff
          objSession.Logoff
          Unload Me
      End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For information on obtaining these libraries, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q171440.htm">Q171440</A></B>
   TITLE     : INFO: Where to Acquire the Active Messaging Libraries


</PRE>For additional information about Collaboration Data Objects versus Active
Messaging, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q176916.htm">Q176916</A></B>
   TITLE     : INFO: Active Messaging and Collaboration Data Objects (CDO)

</PRE>For additional information on how to use Property Tags to access unexposed
properties, plus an extensive listing of available Property Tag constants
and values see the Microsoft Developer Network Library (July 1997 or
later).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: PR_SENT_REPRESENTING
<P>

Keywords          : ActMsg<BR>
Version           : WINDOWS:1.1<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Build a VB/Messaging Application to Run from a Service </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177851">
<META NAME="KBModify" CONTENT="1998/01/06">
<META NAME="KBCreate" CONTENT="1997/12/09">
<META NAME="Keywords" CONTENT="kbcode ActMsg">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  This article provides sample code demonstrating how to create a Visual Basic based Messaging application using Collaboration Data Objects (previously named Active Messaging) that runs as a service under Windows NT version 4.0.  MORE INFORMATION  Th...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBWS,QBXS,QBWP,QACK,QAPN,QAL4,QAY2,QBTX,QAH4,QABI,QAYC,QAJH,QAMB,QAV5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Build a VB/Messaging Application to Run from a Service</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177851</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Collaboration Data Objects (CDO), versions 1.1, 1.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides sample code demonstrating how to create a Visual
Basic based Messaging application using Collaboration Data Objects
(previously named Active Messaging) that runs as a service under Windows NT
version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This application is dependent on the Collaboration Data Objects (CDO)
library being referenced by the Visual Basic project.
Since this application is being built with the intent to run as a service,
it is built in a code module (not a form). In addition, you should select
the Unattended Execution check box on the General tab of the Project
Properties dialog box. Selecting this check box indicates that the project
is intended to run without user interaction. Unattended projects have no
interface elements. Any run time functions like messages that normally
result in user interaction are written to an event log.
<P>
This article is divided into three primary sections:

<UL><LI>Method 1: How to write a Visual Basic CDO Application that can be run
   from the Windows NT Schedule Service.

<LI>Method 2: How to write a Visual Basic CDO Application that can be run
   from the Windows NT Schedule Service indirectly using the SU utility
   from the Windows NT Resource Kit.

<LI>Method 3: How to write and register as a Service a Visual Basic
   Application that uses CDO.
<P>
</UL><h3>Method 1</h3>
 
<P>
Paste the following code into a new BAS Module. Make sure that the
Collaboration Data Objects (CDO) library is currently referenced by the
project. Build the executable and follow the directions in the code
comments below:
<P>
<PRE>   Sub Main()
    ' How to write a Visual Basic Active Messaging App that can be run
    ' from the Windows NT Schedule Service.
    ' ----------------------------------------------------------------
    ' To demonstrate this functionality, the Schedule Service MUST be
    ' run in the context of a USER ACCOUNT (not the system account.)
    ' To set the Schedule Service Context:
    '   - From the Control Panel select the Services icon
    '   - Scroll down and single click the Schedule Service
    '   - Single click the Startup button
    '   - Select "This Account", and enter YOURDOMAIN\YOURACCOUNT
    '   - It is also suggested that Startup be Manual
    '
    ' With this done, choose the Start button (you should see a dialog box
    ' indicating success). Close the Control Panel.
    '
    ' Now you need to schedule the application to execute. To do this:
    '   - From the Start Menu choose Run
    '   - At the prompt, enter "AT HH:MM PATH\MYEXE.EXE" where
    '   * HH:MM is the time the application is to execute. This is a 24
    '   hour clock, and time is based on the system clock.
    '   * PATH\MYEXE.EXE is path and filename of your EXE.
    '
    SendScheduledMsg
   End Sub

   Sub SendScheduledMsg()
    'Setup variables for use
    Dim objSession As MAPI.Session
    Dim objMsg As Message
    Dim objRecip As Recipient

    'Create Session and Logon
    Set objSession = CreateObject("mapi.session")
    objSession.Logon _
          nomail:=True, _
          profileinfo:="YOURSERVER" &amp; vbLf &amp; "YOURMAILBOX"

    'Create new Message and set properties.
    Set objMsg = _
     objSession.Outbox.Messages.Add( _
       Subject:="This is a Message Sent From a Scheduled Service", _
       Text:="This is a test")

    'Add a Recipient.
     Set objRecip = objMsg.Recipients.Add(Name:="YourRecipsEmailName")
     objRecip.Resolve

    'Send the Message and Logoff.
    objMsg.Send
    objSession.Logoff

    'Cleanup
    Set objRecip = Nothing
    Set objMsg = Nothing
    Set objSession = Nothing
   End Sub

</PRE><h3>Method 2</h3>
 
<P>
Paste the following code into a new BAS Module. Make sure that the
Collaboration Data Objects (CDO) library is currently referenced by the
project. Build the executable. Follow the directions in the code comments
below:
<P>
<PRE>   Sub Main()
    'How to write a Visual Basic CDO Application that can be run
    'from the Windows NT Schedule Service indirectly using the SU
    'utility from the Windows NT Resource Kit.
    '----------------------------------------------------------------
    'To demonstrate this functionality, the Schedule Service can be
    'run in the context of the SYSTEM or USER ACCOUNT. However, while
    'using this option the context will most likely be system.
    'To set the Schedule Service Context:
    '   - From the Control Panel select the Services icon
    '   - Scroll down and single click the Schedule Service
    '   - Single click the Startup button
    '   - Under Log On As, select "System Account."
    '   - It is also suggested that Startup be Manual, and that
    '     service interaction with the Desktop be disallowed.
    '
    'With this done choose the Start button (you should see a dialog box
    'indicating success). Close Control Panel.
    '
    'Now you need to schedule the SU utility to execute. To do this:
    '   - From the Start Menu choose Run
    '   - At the prompt, enter "AT HH:MM PATH\MYBAT.BAT" where
    '     * HH:MM is the time the application is to execute. This is a 24
    '     hour clock, and time is based on the system clock.
    '     * PATH\MYBAT.BAT is the path and filename of a batch file that
    '     sets values of system variables needed by SU, then launches
    '     SU itself. The batch file needs to contain the following
    '     information:
    '
    '        set SU_COMMANDLINE=MyVBexe.exe
    '        set SU_DOMAIN=MyDomain
    '        set SU_PASSWORD=MyDomainPassword
    '        su.exe MyDomainAcctName
    '
    'Please note that this is only one way to start SU. The Su.txt file
    'that accompanies Su.exe documents several alternate methods of
    'launching the SU utility. Please see Su.txt for additional
    'information.
    '
    SendScheduledMsg
   End Sub

   Sub SendScheduledMsg()
    'Setup variables for use.
    Dim objSession As MAPI.Session
    Dim objMsg As Message
    Dim objRecip As Recipient

   'Create Session and Logon
    Set objSession = CreateObject("mapi.session")

   'The following Logon designates a specific ProfileName. The
   'Microsoft Knowledge Base article that describes how to search
   'the HKEY_CURENT_USER hive (which was loaded by SU) of the system
   'registry for the default profile in case a specific profile name
   'is either unknown of intentionally not designated is listed in the
   'REFERENCES section.
   '

   '
   objSession.Logon _
     profileName:="ValidProfileNameForUserAccountNamedInBatchFile", _
     nomail:=True

   'Create new Message and set properties
   Set objMsg = _
   objSession.Outbox.Messages.Add( _
     Subject:="This is a Message Sent From a Scheduled Service", _
     Text:="This is a test")

   'Add a Recipient
   Set objRecip = objMsg.Recipients.Add(Name:="YourRecipsEmailName")
   objRecip.Resolve

   'Send the Message and Logoff
   objMsg.Send
   objSession.Logoff

   'Cleanup
    Set objRecip = Nothing
    Set objMsg = Nothing
    Set objSession = Nothing
   End Sub

</PRE><h3>Method 3</h3>
 
<P>
How to write and register as a Service a Visual Basic Application that uses
Collaboration Data Objects (CDO).
<P>
The author prefaces this section with a precautionary warning that this
method is not supported and is not typically programmatically sound. This
process, using MAPI functionality in the example, is documented in the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../URJump.htm">Q169571</A></B>
   TITLE     : INFO: Running Visual Basic Applications as Windows NT
               Services

</PRE><h2>REFERENCES</h2>
 
<P>
For information on where to acquire the most recent version of this library
tested for client-side use, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q171440.htm">Q171440</A></B>
   TITLE     : INFO: Where to Acquire the Active Messaging Libraries

</PRE>For additional information about Collaboration Data Objects versus Active
Messaging, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q176916.htm">Q176916</A></B>
   TITLE     : INFO: Active Messaging and Collaboration Data Objects (CDO)

   ARTICLE-ID: <B><A HREF="../MAPI/Q171422.htm">Q171422</A></B>
   TITLE     : Logging on to Active Messaging Session w/Default Profile
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ActMsg Active Messaging<BR>
Keywords          : kbcode ActMsg<BR>
Version           : WINDOWS:1.1,1.2<BR>
Platform          : WINDOWS winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

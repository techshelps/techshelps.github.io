

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create, Move, or Rename a Folder Using MAPI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180232">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1998/01/30">
<META NAME="Keywords" CONTENT="EMAPI">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  From time to time you may need to create, move, or rename a folder programmatically. This is done primarily through the IMAPIFolder and the IMAPIProp interfaces. The code example below walks you through the process of creating, moving, and renaming...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAFI,QAI4,QANJ,QAH4,QA9N,QAUJ,QAEF,QACI,QBVV,QBXR,QDOL,QAPF,QAUD,QAO3,QAO2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create, Move, or Rename a Folder Using MAPI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180232</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Extended Messaging Application Programming Interface (MAPI), version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
From time to time you may need to create, move, or rename a folder
programmatically. This is done primarily through the IMAPIFolder and the
IMAPIProp interfaces. The code example below walks you through the process
of creating, moving, and renaming a folder.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>General Steps (Applies to all three tasks)</h3>
 

<OL><P><LI>Create a MAPI Session.

<P><LI>Get a pointer to the message store.
<P>
   NOTE: While the example below uses the private information store, the
   same logic and code can be used against the public information store.

<P><LI>Create, move, or rename a folder.

<P><LI>Log off and Release the session.
<P>
<P>
</OL><h3>Creating a Folder</h3>
 

<OL><P><LI>Create a pointer to the parent of the new folder. For example, if the
   new folder should be a subfolder to the mailbox, create a pointer to the
   top of the information store. If the new folder should be a subfolder of
   the Inbox, create a pointer to the Inbox.

<P><LI>Using the IMAPIFolder::CreateFolder, add the folder to the folder
   hierarchy.
<P>
</OL><h3>Moving a Folder</h3>
 

<OL><P><LI>Create a pointer to the folder that becomes the new parent of the folder
   being moved.

<P><LI>Using HrMAPIFindFolderEx(), retrieve the count of bytes and entry id of
   the folder you wish to move.

<P><LI>IMAPIFolder::CopyFolder with the entry id and count of bytes returned in
   the step above and FOLDER_MOVE in the ulFlags parameter moves the
   folder.
<P>
</OL><h3>Renaming a folder</h3>
 

<OL><P><LI>Using HrMAPIFindFolderEx(), retrieve the count of bytes and entry id of
   the folder you wish to rename.

<P><LI>Open the folder so that the properties of the folder can be changed.

<P><LI>Use HrSetOneProp() to change the PR_DISPLAY_NAME of the folder.
<P>
<P>
</OL><h3>Code Example</h3>
 
<P>
The code example below demonstrates these three actions:

<UL><LI>Creating a folder.

<LI>Moving a folder.

<LI>Renaming a folder.
<P>
 The additional library files required to compile the code are:

<LI>Edkguid.lib
<LI>Addrlkup.lib
<LI>Edkutils.lib
<LI>Edkdebug.lib
<LI>Version.lib
<LI>Msvcrt.lib
<LI>Mapi32.lib
<LI>Edkmapi.lib
<P>
<PRE>   /**********************  Begin Code Example **************** /
   #include &lt;Windows.h&gt;
   #include &lt;edk.h&gt;
   #include &lt;stdio.h&gt;

   int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR pszCmd,
                      int nCmdShow)
   {
     ULONG         cbEIDStore = 0;
     LPENTRYID      lpEIDStore = NULL;
     ULONG         cbEIDFolder = 0;
     LPENTRYID      lpEIDFolder = NULL;
     LPMAPISESSION   lpSession =   NULL;
     LPMDB         lpStore = NULL;
     LPMAPIFOLDER   lpFolder = NULL;
     LPMAPIFOLDER   lpNewFolder = NULL;
     LPMAPIFOLDER   lpDestFolder = NULL;
     HRESULT         hr = NULL;
     ULONG         ulUIParam =   0;
     SPropValue      spvMsg;
     LPCIID         lpInterface = NULL;
     ULONG         ulFlags = MAPI_BEST_ACCESS;
     ULONG         ulObjType = 0;
      hr = MAPIInitialize(NULL);
     if (FAILED(hr))
     {
        MessageBox(NULL,"MAPIInitialize failed",NULL,MB_OK);
        return 1;
     }
     hr = MAPILogonEx(0, "", NULL,
                MAPI_LOGON_UI | MAPI_NEW_SESSION |  MAPI_EXTENDED |
                MAPI_NO_MAIL ,
                &amp;lpSession);
      if (FAILED(hr))
     {
        MessageBox(NULL,"MAPI Logon failed",NULL,MB_OK);
        goto cleanup;
     }
      hr = HrMAPIFindDefaultMsgStore(lpSession, &amp;cbEIDStore, &amp;lpEIDStore);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Message Store Not Found",NULL,MB_OK);
        goto cleanup;
     }
      hr = lpSession-&gt;OpenMsgStore(ulUIParam, cbEIDStore,
                                  lpEIDStore, lpInterface,
                                  ulFlags, &amp;lpStore);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Message Store Not Opened",NULL,MB_OK);
        goto cleanup;
     }
      hr = HrMAPIOpenFolderEx(lpStore, '\\',
                        "\\Top of Information Store\\Inbox",
                        &amp;lpFolder);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Folder Not Opened",NULL,MB_OK);
        goto cleanup;
     }
      //  Creates new folder under the Inbox.
      hr = lpFolder-&gt;CreateFolder(FOLDER_GENERIC, "Created Folder",
                                 "Folder Comment", NULL,
                                 OPEN_IF_EXISTS,
                                 &amp;lpNewFolder);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Folder Not Created",NULL,MB_OK);
        goto cleanup;
     }
      // Moves the folder to the main folder tree.
      hr = HrMAPIOpenFolderEx(lpStore, '\\',
                            "\\Top of Information Store",
                            &amp;lpDestFolder);
      if (FAILED(hr))
     {
         MessageBox(NULL,
              "Top of Information Store Not Opened",NULL,MB_OK);
         goto cleanup;
     }
      hr = HrMAPIFindFolderEx(lpStore, '\\',
                    "\\Top of Information Store\\Inbox\\Created Folder",
                    &amp;cbEIDFolder,
                    &amp;lpEIDFolder);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Folder Not Found",NULL,MB_OK);
        goto cleanup;
     }
      hr = lpFolder-&gt;CopyFolder(  cbEIDFolder, lpEIDFolder, NULL,
                                lpDestFolder, NULL,
                                NULL,
                                NULL,
                                FOLDER_MOVE | COPY_SUBFOLDERS);
      //  Finds folder so that it can be opened and renamed.
      hr = HrMAPIFindFolderEx(lpStore, '\\',
                    "\\Top of Information Store\\Created Folder",
                    &amp;cbEIDFolder, &amp;lpEIDFolder);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Folder Not Found",NULL,MB_OK);
        goto cleanup;
     }
      hr = lpStore-&gt;OpenEntry(cbEIDFolder, lpEIDFolder,
                             NULL, MAPI_BEST_ACCESS,
                             &amp;ulObjType,
                             (LPUNKNOWN FAR *)&amp;lpFolder);
      if (FAILED(hr))
     {
        MessageBox(NULL,"Folder Could Not Be Opened",NULL,MB_OK);
        goto cleanup;
     }
      spvMsg.ulPropTag = PR_DISPLAY_NAME;
      spvMsg.Value.lpszA = "Renamed Folder";

      hr = HrSetOneProp(lpFolder, &amp;spvMsg);

      if (FAILED(hr))
      {
         MessageBox(NULL,"Folder Could Not Be Renamed",NULL,MB_OK);
         goto cleanup;
      }

    cleanup:

      if (lpSession)
      {
         lpSession-&gt;Logoff(0, 0, 0);
         ULRELEASE(lpSession);
      }
      MAPIUninitialize();
      return 0;
    }

</PRE></OL> 
<PRE>Keywords          : EMAPI
Version           : WINDOWS:1.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

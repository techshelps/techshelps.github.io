

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Set and Clear an Active Messaging MessageFilter via VC++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171429">
<META NAME="KBModify" CONTENT="1997/11/21">
<META NAME="KBCreate" CONTENT="1997/07/16">
<META NAME="Keywords" CONTENT="kbcode ActMsg">
<META NAME="KBArea" CONTENT="Support; KB; mapi">
<META NAME="Description" CONTENT="  Changes to the Active Messaging MessageFilter properties appear to have no effect.  MORE INFORMATION  The following code sample shows how to activate, then deactivate an Active Messaging MessageFilter via Visual C++.  The key to successfully shutti...">
<META NAME="Product" CONTENT="mapi">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAEV,QAYC,QAO3,QAO2,QA6A,QAI4,QAW6,QAV5,QAFI,QA5M,QA4S,QA4R,QAH4,QA62 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Set and Clear an Active Messaging MessageFilter via VC++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171429</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Collaboration Data Objects (CDO), version 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Changes to the Active Messaging MessageFilter properties appear to have no
effect.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code sample shows how to activate, then deactivate an Active
Messaging MessageFilter via Visual C++.
<P>
The key to successfully shutting or altering the MessageFilter is to be
sure to destroy any reference that is made to any object related to the
MessageFilter (also known as Folder:MessagesCollection:MessageFilter).
<P>
<P><h3>Code Sample:</h3>
 
<P>
<PRE>   /**********************************************************/
   // MSGFILTER.CPP
   // -------------
   // This program demonstrates how the Active Messaging v1.1
   // MessageFilter works via VC++. This sample requires VC++
   // version 5.0 or higher.
   /**********************************************************/

   #import &lt;olemsg32.dll&gt; no_namespace

   #include &lt;assert.h&gt;
   #include &lt;stdio.h&gt;
   #include &lt;tchar.h&gt;

   void dump_com_error(_com_error &amp;e)
   {
       _tprintf(_T("Oops - hit an error!\n"));
       _tprintf(_T("\a\tCode = %08lx\n"), e.Error());
       _tprintf(_T("\a\tCode meaning = %s\n"), e.ErrorMessage());
       _bstr_t bstrSource(e.Source());
       _bstr_t bstrDescription(e.Description());
       _tprintf(_T("\a\tSource = %s\n"), (LPCTSTR) bstrSource);
       _tprintf(_T("\a\tDescription = %s\n"), (LPCTSTR) bstrDescription);
    }

   // If this is placed in the scope of the smart pointers, they must be
   // explicitly Release(d) before CoUninitialize() is called.  If any
   // reference count is non-zero, a protection fault will occur.
   struct StartOle {
      StartOle() { CoInitialize(NULL); }
      ~StartOle() { CoUninitialize(); }
   } _inst_StartOle;

   void main()
   {
   try
      {
          // Create a MAPI.Session pointer
          SessionPtr pSession("MAPI.Session");

          // Logon using the specified profile
          pSession-&gt;Logon("YourValidProfileNameHere");

          // Create pointer to the Inbox Folder
          FolderPtr pFolder = pSession-&gt;Inbox;

          // Create pointer to the Messages Collection
          MessagesPtr pMessages = pFolder-&gt;Messages;

          // Get the first Message object before filter is applied
          MessagePtr pAMessage = pMessages-&gt;GetFirst();

          // Process contents of Folder
          while (pAMessage != NULL)
          {
              // Display Properties
              MessageBoxW (NULL,pAMessage-&gt;Subject.bstrVal,NULL,MB_OK);

              // Get next Message
              pAMessage = NULL;
              pAMessage = pMessages-&gt;GetNext();
          }

          // Destroy the reference to the to the Inbox, Messages
          // Collection, and Message then reaquire them
          pFolder = NULL;
          pMessages = NULL;
          pAMessage = NULL;

          // Aquire pointer to the Inbox Folder
          pFolder = pSession-&gt;Inbox;

          // Aquire pointer to the Messages Collection
          pMessages = pFolder-&gt;Messages;

          // Acquire pointer and set properties of the MessageFilter
          MessageFilterPtr pMsgFilt = pMessages-&gt;Filter;
          pMsgFilt-&gt;Unread = (bool)TRUE;

          // Get the first Message object after filter is applied
          pAMessage = pMessages-&gt;GetFirst();

          // Process contents of Folder
          while (pAMessage != NULL)
          {
              // Display Properties
              MessageBoxW (NULL,pAMessage-&gt;Subject.bstrVal,NULL,MB_OK);

              // Get next Message
              pAMessage = NULL;
              pAMessage = pMessages-&gt;GetNext();
          }

          // Destroy the reference to the Inbox, Messages Collection,
          // MessageFilter, and Message then reaquire them
          pFolder = NULL;
          pMessages = NULL;
          pMsgFilt = NULL;
          pAMessage = NULL;

          // GetFirst() without a filter in place
          // Aquire pointer to the Inbox Folder
          pFolder = pSession-&gt;Inbox;

          // Aquire pointer to the Messages Collection
          pMessages = pFolder-&gt;Messages;

          // Get the first Message object after filter is unapplied
          pAMessage = pMessages-&gt;GetFirst();

          // Process contents of Folder
          while (pAMessage != NULL)
          {
              // Display Properties
              MessageBoxW (NULL,pAMessage-&gt;Subject.bstrVal,NULL,MB_OK);

              // Get next Message
              pAMessage = NULL;
              pAMessage = pMessages-&gt;GetNext();
          }

          // Logoff of the MAPI Session
          pSession-&gt;Logoff();
      }
      catch (_com_error &amp;e)
      {
          dump_com_error(e);
      }
   }

</PRE><h2>REFERENCES</h2>
 
<P>
For additional information about Collaboration Data Objects versus Active
Messaging, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../MAPI/Q176916.htm">Q176916</A></B>
   TITLE     : INFO: Active Messaging and Collaboration Data Objects (CDO)

</PRE> 
<PRE>Keywords          : kbcode ActMsg
Version           : WINDOWS:1.1
Platform          : WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

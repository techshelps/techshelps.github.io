

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Outer Join with Three or More Data Tables </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100069">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1993/06/15">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When two data tables are joined through a SELECT-SQL statement, only those records that have entries in both the parent and child databases are included in the resulting data table. If it is necessary to also include parent records that do not have...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBPJ,QDNB,QA5V,QAY2,QA2Q,QAZV,QA7O,QA7N,QAG2,QAL3,QBWS,QBXS,QAX6,QADX,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Outer Join with Three or More Data Tables</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100069</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a
<LI>Microsoft FoxPro for Windows, versions 2.5 2.5a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When two data tables are joined through a SELECT-SQL statement, only
those records that have entries in both the parent and child databases
are included in the resulting data table. If it is necessary to also
include parent records that do not have corresponding child entries,
an outer join is performed.
<P>
A SQL outer join creates one data table that includes parent records--both
those with and those without corresponding child records--and fields from
both the parent and child databases.
<P>
Using an outer join, you can create one final result set from three or more
databases (where the second and subsequent databases are each children of
the parent) that includes fields from all databases regardless of whether
the parent has records in any one or more of the child databases. The
procedure for creating this single result set is detailed below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To create one result set from three databases, where one database is the
parent and the two other databases are children of the same parent, do the
following:

<OL><P><LI>Using the CUSTOMER database located in the GOODIES\TUTORIAL subdirectory
   in the main FoxPro directory or in the SAMPLES\DATA directory in Visual
   FoxPro, create the following sample data set:
<P>
<P><PRE>      USE customer
      COPY TO child1 NEXT 100
      SKIP -10
      COPY TO child2 NEXT 50
</PRE><P>
   The parent file will now have 100 children in CHILD1 and 50 different
   children in CHILD2. For several customer numbers, child records will
   exist both in CHILD1 and CHILD2.

<P><LI>Determine which fields are needed from the parent and each child.

<P><LI>Perform an outer join between the parent (CUSTOMER) and the first child
   (CHILD1). Store the results in a cursor so you don't have to eliminate
   temporary files later.
<P>
<P><PRE>      SELECT customer.cno, child1.company ;
<PRE></PRE>          FROM customer, child1 ;
          WHERE customer.cno = child1.cno;
       UNION ;
       SELECT customer.cno, "" FROM customer ;
          WHERE customer.cno not in ;
          (SELECT child1.cno FROM child1 ;
          WHERE customer.cno = child1.cno ) ;
          INTO CURSOR oj1

   NOTE: The placeholder for CHILD1.COMPANY is critical, since this field
   would otherwise be blank whenever there was not a match between the
   parent and child. This would result in a huge output data set, since an
   attempt would be made to join each blank CHILD1.COMPANY field with each
   CUSTOMER.CNO record. Use a placeholder for any field in the child
   database that was selected in the first half of the outer join command.

</PRE><P><LI>Perform an outer join of the parent and CHILD2:
<P>
<P><PRE>      SELECT customer.cno, child2.contact, child2.lat ;
<PRE></PRE>          FROM customer, child2 ;
          WHERE customer.cno = child2.cno ;
       UNION ;
       SELECT customer.cno, "", 0 FROM customer;
          WHERE customer.cno not in ;
          (SELECT child2.cno FROM child2 ;
          WHERE customer.cno = child2.cno ) ;
          INTO CURSOR oj2

</PRE><P><LI>Repeat the outer join for each child. (NOTE: Capacity will be limited by
   the number of available file handles, open work areas, free disk space,
   and RAM.)

<P><LI>Perform a join of each of the temporary data sets that were created in
   steps 3 through 5:
<P>
<P><PRE>      SELECT * ;
<PRE></PRE>         FROM oj1,oj2 ;
         WHERE oj1.cno = oj2.cno ;
         INTO CURSOR ojfinal

</PRE><P><LI>Optionally close each cursor that was created through joining the parent
   with each child:
<P>
<P><PRE>      SELECT child1
      USE
      SELECT child2
      USE
</PRE>
<P><LI>Use a BROWSE command to examine the results:
<P>
<P><PRE>      SELECT ojfinal
      BROWSE
</PRE><P>
</OL>Examine the results. OJFINAL should contain the same number of records as
exist in CUSTOMER.DBF. All records should contain an entry in the CNO
field. One hundred records should contain an entry in the COMPANY field.
Fifty records should contain entries in the CONTACT and LAT fields. The
COMPANY, CONTACT, and LAT fields should be blank in the majority of output
records.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information, see "SELECT-SQL" in the FoxPro 2.0 "Commands &amp;
Functions" manual or in the FoxPro 2.5 "Language Reference" manual, or
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q89181.htm">Q89181</A></B>
   TITLE     : Outer Join Syntax Example for SELECT-SQL Statement
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00 FoxDos FoxWin 2.50 2.50a<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgSql<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

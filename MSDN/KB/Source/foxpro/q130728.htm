

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE Controls Available in Visual FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130728">
<META NAME="KBModify" CONTENT="1997/08/13">
<META NAME="KBCreate" CONTENT="1995/11/06">
<META NAME="Keywords" CONTENT="FxinteropOle kbcode kbinterop kbole">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The Professional Edition of Visual FoxPro has up to four OLE controls available in .OCX files depending on which Windows platform is being use. This article describes each of those controls and gives tips for using them. OLE controls covered are:  ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QAPN,QAIB,QA9Q,QAHV,QAEV,QAL7,QAYC,QBBI,QAYS,QDJ9,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OLE Controls Available in Visual FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 13, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130728</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbole kbinterop kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Professional Edition of Visual FoxPro has up to four OLE controls
available in .OCX files depending on which Windows platform is being use.
This article describes each of those controls and gives tips for using
them. OLE controls covered are:
<P>
<PRE>  - MSCOMM32.OCX for communications
  - MSMAPI32.OCX for MAPI (Messaging Application Program Interface)
  - MSOUTL32.OCX for outlining
  - PICCLP32.OCX for picture clip

</PRE>This article summarizes information available as many smaller help topics
about OLE controls in the Visual FoxPro Professional Reference Help file.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>OLE Controls Overview</h3>
 
<P>
The Visual FoxPro OLE Container control lets you add OLE controls (.OCX
files) to your applications. Depending on your Windows platform (Windows
version 3.1, Windows for Workgroups, Windows NT, or Windows 95) up to four
OLE controls are installed with Visual FoxPro in your WINDOWS\SYSTEM
directory.
<P>
<P><h3>Event, Method, or Property May Apply to OLE Container (Form) or OLE Control</h3>
 
<P>
It's important to note that many events, methods, and properties that need
to be set for OLE controls apply to the OLE Container control in which the
OLE control is placed rather than directly to the OLE control itself.
Others apply directly to the control.
<P>
For example, the MAPI DownLoadMail property applies directly the MAPI OLE
control, but the MAPI DocumentFile property applies to the container that
the MAPI OLE object is in. Therefore, these properties for the MAPI OLE
control are referenced in this manner:
<P>
<PRE>  SomeForm.DocumentFile
  SomeMAPIControl.DownLoadMail

</PRE><h3>Code Sample for OLE Control</h3>
 
<P>
The following code sample shows how an OLE container can be added to a form
and used to modify a Microsoft Excel file from Visual FoxPro:
<P>
* The following example adds an OLE Container control to a form, and uses
* the OleClass and DocumentFile properties to specify Microsoft Excel as
* the OLE server and a Microsoft Excel worksheet as the file to edit.
*
* The DocumentFile property specifies a worksheet named BOOK1.XLS in
* the EXCEL directory on drive C. This example will not work if
* the file and directory specified in the DocumentFile property do not
* exist; It may be necessary to modify the DocumentFile property to
* specify an existing directory and worksheet file.
*
* The DoVerb method is used to activate the worksheet for editing.
<P>
frmMyForm = CREATEOBJECT('Form')  &amp;&amp; Create a Form
frmMyForm.Closable = .F. &amp;&amp; Disable the Control menu box
<P>
frmMyForm.AddObject('cmdCommand1','cmdMyCmdBtn')  &amp;&amp; Add command button
frmMyForm.AddObject("oleObject","oleExcelObject")  &amp;&amp; Add OLE object
<P>
frmMyForm.cmdCommand1.Visible=.T. &amp;&amp; Display the Quit command button
<P>
frmMyForm.oleObject.Visible=.T. &amp;&amp; Display the OLE control
frmMyForm.oleObject.Height = 50  &amp;&amp; Specify OLE control height
<P>
frmMyForm.Show  &amp;&amp; Display the Form
<P>
frmMyForm.oleObject.DoVerb(-1)  &amp;&amp; -1 for Edit
<P>
READ EVENTS  &amp;&amp; Start event processing
<P>
DEFINE CLASS oleExcelObject as OLEControl
<PRE>  OleClass ="Excel.Sheet"  &amp;&amp; Server name
  DocumentFile = "C:\EXCEL\BOOK1.XLS"  &amp;&amp; This file must exist
</PRE>ENDDEFINE
<P>
DEFINE CLASS cmdMyCmdBtn AS CommandButton  &amp;&amp; Create command button
<PRE>  Caption = '\&lt;Quit'  &amp;&amp; Caption on the command button
  Cancel = .T. &amp;&amp; Default Cancel command button (Esc)
  Left = 125  &amp;&amp; Specify command button column
  Top = 210  &amp;&amp; Specify command button row
  Height = 25  &amp;&amp; Specify command button height

  PROCEDURE Click
    CLEAR EVENTS  &amp;&amp; Stop event processing and close form

</PRE>ENDDEFINE
<P>
* End of Sample Code for OLE Control.
<P>
<P><h3>Communications Control (MSCOMM32.OCX)</h3>
 
<P>
The Communications control, MSCOMM32.OCX, provides serial communications
for your application by allowing the transmission and reception of data
through a serial port. The Communications control is installed only if you
are running Windows NT or Windows 95.
<P>
<PRE>   Syntax: MSComm

</PRE>The Communications control provides the following two ways to handle
communications:
<P>
<PRE>  - Use event-driven communications to handle serial port interactions. In
    many situations, you want to be notified the moment an event takes
    place, such as when a character arrives or a change occurs in the
    Carrier Detect (CD) or Request To Send (RTS) lines. In such cases, you
    can use the Communications control's OnComm event to trap and handle
    these communication events. The OnComm event also detects and handles
    communications errors.

    -or-

  - Poll for events and errors by checking the value of the CommEvent
    property after each critical function of your program. This may be
    the best method if your application is small and self-contained.
    For example, if you are writing a simple phone dialer, it may not make
    sense to generate an event after receiving every character, because the
    only characters you plan to receive are the OK response from the modem.

</PRE>Each Communications control you use corresponds to one serial port. If
you need to access more than one serial port in your application, you must
use more than one Communications control. The port address and interrupt
address can be changed from the Windows Control Panel.
<P>
When you create and distribute applications that use the Communications
control, you should install MSCOMM32.OCX in the customer's WINDOWS\SYSTEM
subdirectory.
<P>
The following example, from the Visual FoxPro Help file, shows how to
perform basic serial port communications:
<P>
<PRE>   * Use COM1.
   Comm1.CommPort = 1
   * 9600 baud, no parity, 8 data, and 1 stop bit.
   Comm1.Settings = "9600,N,8,1"
   * Tell the control to read entire buffer when Input is used.
   Comm1.InputLen = 0
   * Open the port.
   Comm1.PortOpen = .T.
   * Send the attention command to the modem.
   Comm1.Output = "AT" + CHR(13)
   * Wait for data to come back to the serial port.
   DO WHILE Comm1.InBufferCount &lt;= 2
     * Read the "OK" response data in the serial port.
     InString = Comm1.Input
   ENDDO
   * Close the serial port.
   Comm1.PortOpen = .F.

</PRE><h3>MAPI Control (MSMAPI32.OCX)</h3>
 
<P>
The messaging application program interface (MAPI) control, MSMAPI32.OCX,
allows you to create a mail-enabled Visual FoxPro application. The MAPI
controls are installed only if you are running Windows NT or Windows 95.
<P>
The MAPI controls are invisible at run time. In addition, there are no
events for the controls. To use them, you must specify the appropriate
methods. For these controls to work, MAPI services must be present. MAPI
services are provided in Microsoft Mail electronic mail system for
Microsoft Windows, version 3.0 or later.
<P>
<P><h3>MAPI Session and MAPI Messages OLE Controls</h3>
 
<P>
There are two OLE controls (MAPI Session and MAPI Messages) you can create
with MSMAPI32.OCX. The MAPI Session control establishes a MAPI session, and
the MAPI Messages control allows the user to perform a variety of messaging
system functions.
<P>
<P><h3>MAPI Session Control</h3>
 
<P>
The MAPI Session control signs on and establishes a MAPI session, and it
signs off from a MAPI session.
<P>
<PRE>   Syntax: MapiSession

</PRE>After a sign-on is successful, the SessionID property contains the handle
to the MAPI session. The session handle must then be passed to the MAPI
Messages control or an error results when using the MAPI Messages
control. Be sure to use the MAPI Session control to sign off from any
messaging session you initiate with a sign-on action.
<P>
<P><h3>MAPI Messages Control</h3>
 
<P>
After a messaging session is established by using the MAPI Session control,
the MAPI Messages control performs a variety of messaging system functions.
<P>
<PRE>   Syntax: MapiMessages

</PRE>With the MAPI Messages control, you can:

<UL><LI>Access messages currently in the inbox.
<LI>Compose a new message.
<LI>Add and delete message recipients and attachments.
<LI>Send messages, with or without a supporting user interface.
<LI>Save, copy, and delete messages.
<LI>Display the Address Book dialog box.
<LI>Display the Details dialog box.
<LI>Access attachments, including OLE automation attachments.
<LI>Resolve a recipient name during addressing.
<LI>Perform reply, reply-all, and forward actions on messages.
<P>
</UL>Most of the properties of the MAPI Messages control can be categorized into
four functional areas: address book, file attachment, message, and
recipient properties. The file attachment, message, and recipient
properties are controlled by the AttachmentIndex, MsgIndex, and RecipIndex
properties, respectively.
<P>
For example, as the index value changes in the MsgIndex property, all other
messages, file attachments, and recipient properties change to reflect the
characteristics of the specified message. The set of message and recipient
properties works the same way. The address book properties specify the
appearance of the Address Book dialog box.
<P>
When using the MAPI Messages control, you need to keep track of two
buffers, the read buffer and the compose buffer.
<P>
The read buffer is made up of an indexed set of messages fetched from a
user's inbox. The MsgIndex property is used to access individual messages
within this set, starting with a value of 0 for the first message and
incrementing by one for each message through the end of the set. The
message set is built using the Fetch method.
<P>
The set includes all messages of type FetchMsgType and is sorted as
specified by the FetchSorted property. Previously read messages can be
included or left out of the message set with the FetchUnreadOnly property.
Messages in the read buffer can't be altered by the user, but can be copied
to the compose buffer for alteration.
<P>
Messages can be created or edited in the compose buffer. The compose buffer
is the active buffer when the MsgIndex property is set to - 1. Many of the
messaging actions are valid only within the compose buffer, such as sending
messages, sending messages with a dialog box, saving messages, or deleting
recipients and attachments.
<P>
<P><h3>Outline Control (MSOUTL32.OCX)</h3>
 
<P>
The Outline control, MSOUTL32.OCX, is a special type of list box that
allows you to display items in a list hierarchically. This is useful for
showing directories and files in a file system, which is the technique used
by the Windows File Manager.
<P>
<PRE>   Syntax: Outline

</PRE>Each item in the Outline control can have subordinate items, which are
visually represented by indentation levels. When an item is expanded, its
subordinate items are visible; when an item is collapsed, its subordinate
items are hidden. Items in the Outline control can also display graphical
elements to provide visual cues about the state of the item.
<P>
<P><h3>Visual Elements of Outline Control</h3>
 
<P>
The Outline control can display graphics and text for each item in a list.
For examples that use plus/minus pictures and text or examples that use
tree lines, type pictures, and text, please see the Visual FoxPro Help
file.
<P>
An item in an outline can have each of the following graphical elements:

<UL><LI>Tree lines: Vertical and horizontal lines that link items with
   subordinate items. A tree line generates Expand and Collapse events.

<LI>Indentation: An item's level of subordination. Each level of
   indentation is a level of subordination you specify with the Indent
   property.

<LI>Plus/minus sign: Indicates whether subordinate items are visible or
   hidden. When the plus sign is clicked, subordinate items become visible
   and a minus sign replaces the plus sign. When the minus sign is
   clicked, the subordinate items are hidden and a plus sign replaces the
   minus sign.

<LI>Type pictures: Indicates the state of an item. Type pictures typically
   show whether an item with subordinate items can be expanded or
   collapsed. For example, a picture of a closed folder indicates that
   items in the folder can be expanded. The state of an item is user-
   defined. The type picture generates PictureClick and PictureDblClick
   events.

<LI>Text: The string displayed for an item. Each graphical element can be a
   hot-spot graphic. Clicking a hot spot triggers a special set of
   events. Use the Style property to display all, some, or none of the
   graphical elements for each item in the Outline control.
<P>
</UL>NOTE: You can't select an item by clicking a graphical element in the
Outline control. To select an item in an Outline Control, you must click or
double-click the text.
<P>
You can use the keyboard to select items in an Outline control's list. The
following table lists the keys and their actions.
<P>
<PRE>Keyboard Key   Action
</PRE> 
<P>
<PRE>LEFT ARROW     Moves the focus to the parent item, if the current item is
               subordinate.

RIGHT ARROW    Moves the focus to the first subordinate item, if visible.

UP ARROW       Moves the focus to the previous item, if any.

DOWN ARROW     Moves the focus to the next item, if any.

HOME           Moves the focus to the first item in the list.

END            Moves the focus to the last item that is visible.

PAGE UP        Moves the focus back one page, or to the first item
               currently displayed.

PAGE DOWN      Moves the focus forward one page, or to the last item
               currently displayed.

PLUS (+)       Expand an item that has subordinate items.

MINUS (-)      Collapse an item that has subordinate items.

</PRE>Step-by-Step Process to display Outline Control Properties Dialog Box
 

<OL><P><LI>Create a form or open an existing one in the Form Designer.

<P><LI>From the Form Controls toolbox, choose the OLE Container Control
   button and place an OLE container control on the form.
<P>
   The Insert Object dialog box appears.

<P><LI>In the Insert Object dialog box, choose Insert Control.

<P><LI>From the Control Type list, select Outline Control.

<P><LI>Choose OK.
<P>
   The Outline control appears on the form.

<P><LI>With the mouse, right-click the Outline control to display the
   shortcut menu.

<P><LI>From the shortcut menu, choose Properties.
<P>
   The Outline Control Properties dialog box appears.
<P>
</OL><h3>Outline Control Properties Tabs</h3>
 
<P>
Outline Control Properties tabs that specify style properties and general
characteristics of the Outline control are:

<UL><LI>Pictures: Specifies picture properties for the Outline control.

<LI>Fonts: Specifies the font, font style, font size, and other properties
   for the Outline control.

<LI>Colors: Specifies background and foreground colors for the Outline
   control.
<P>
</UL><h3>Picture Clip Control (PICCLP32.OCX)</h3>
 
<P>
The Picture Clip control, PICCLP32.OCX, allows you to select an area of a
source bitmap, and then display the image of that area in a form. Picture
Clip controls are invisible at run time.
<P>
<PRE>   Syntax: PictureClip

</PRE></OL>The Picture Clip control provides an efficient mechanism for storing
multiple picture resources. Instead of using multiple bitmaps or icons,
create a source bitmap that contains all the images required by OLE
controls in your application. When you need to access an individual image,
use the Picture Clip control to select the region in the source bitmap that
contains that image.
<P>
For example, you could use this control to store all the images needed for
your application. It is much more efficient to store all of the images in a
single Picture Clip control than it is to store each image as a separate
file. To do this, you first need to create a source bitmap that contains
all of the images.
<P>
The picture object reference the Picture Clip control creates from the
source bitmap can only be used by other OLE controls. For example, it can
be used for the PictureOpen and PictureClosed properties in the Outline
control. Visual FoxPro controls and objects cannot use the picture object
reference the Picture Clip control creates.
<P>
You can use the Random Access method or the Enumerated Access method to
specify the clipping region in the source bitmap as follows:

<UL><LI>Use the Random Access method to select any portion of the source bitmap
   as the clipping region. Specify the upper-left corner of the clipping
   region by using the ClipX and ClipY properties. The ClipHeight and
   ClipWidth properties determine the area of the clipping region. This
   method is useful when you want to view a portion of a bitmap.
<P>
   -or-

<LI>Use the Enumerated Access method to divide the source bitmap into a
   specified number of rows and columns. The result is a uniform matrix of
   picture cells numbered 0, 1, 2, and so on. You can access individual
   cells by using the GraphicCell property. This method is useful when the
   source bitmap contains a palette of images that you want to access
   individually.
<P>
</UL>To load the source bitmap into the Picture Clip control, use the Picture
property. You can only load bitmap (.BMP) files into the Picture Clip
control.
<P>
NOTE: When you create and distribute applications that use the Picture Clip
control, you should install PICCLP32.OCX in the user's Microsoft
WINDOWS\SYSTEM subdirectory.
<P>
PicClip Control Properties Dialog Box
 
<P>
The PicClip Control Properties dialog box specifies properties for the
PicClip control, which is an OLE container control that allows you to
select an area of a source bitmap and display that area in a form. To
display the PicClip Control Properties dialog box, follow these steps:

<OL><P><LI>Create a form or class, or open an existing form or class in the Form
   Designer.

<P><LI>From the Form Controls toolbox, choose the OLE Container Control
   button and place an OLE container control on the form. The Insert Object
   dialog box appears.

<P><LI>In the Insert Object dialog box, choose Insert Control.

<P><LI>From the Control Type list, select PicClip Control.

<P><LI>Choose OK. The PicClip control appears on the form.

<P><LI>With the mouse, right click the PicClip control to display the
   shortcut menu.

<P><LI>From the shortcut menu, choose Properties. The PicClip Control
   Properties dialog box appears.
<P>
</OL><h3>PicClip Control Properties Tabs</h3>
 
<P>
The PicClip Control Properties tabs are:

<UL><LI>Rows/Cols: Specifies the number of rows and columns in the PicClip
   control.

<LI>Pictures: Specifies a picture for the PicClip control.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbole kbinterop kbcode<BR>
KBSubcategory: FxinteropOle<BR>
Keywords          : FxinteropOle kbcode kbinterop kbole<BR>
Version           : 3.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 13, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

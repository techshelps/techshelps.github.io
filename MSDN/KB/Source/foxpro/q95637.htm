

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Return Field to Original Value After Failed VALID </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q95637 ">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1993/02/18">
<META NAME="Keywords" CONTENT="kbenv kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The @ ... GET VALID clause allows field-level validation of input during data entry.  When invalid data is typed in a GET field, the invalid data remains in the field after the validation routine is performed. You can reset the GET field to its ori...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QA7O,QA7N,QAYL,QBFM,QAUD,QAKD,QAXC,QBWJ,QAPN,QABA,QAB9,QAJ2,QALW,QBQU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Return Field to Original Value After Failed VALID</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q95637 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for MS-DOS, versions 1.02, 2.0, 2.5, and 2.5a
<LI>Microsoft FoxPro for Windows, versions 2.5 and 2.5a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The @ ... GET VALID clause allows field-level validation of input
during data entry.
<P>
When invalid data is typed in a GET field, the invalid data remains in
the field after the validation routine is performed. You can reset the
GET field to its original value if the validation routine fails by
using a combination of the WHEN and VALID clauses on the GET command.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To restore a database field to its initial value after a failed VALID
clause, the original value must be stored to a memory variable upon
moving the insertion point to the GET field. If the input fails the
VALID routine, the WHEN clause must restore the initial value from
this memory variable to the database field. The following code
demonstrates this procedure.
<P>
If the FoxPro version 2.0 screen generator is being used, the DATEWHEN code
snippet is entered in the WHEN procedure section and the DATEVAL code
snippet is entered in the VALID procedure section of the field. The
variable named ISDATEVAL would be initialized in the setup code of the
screen. The DATEWHEN procedure would never return .F., since the
following code is not intended to prohibit data entry in the IDATE
field. For the purpose of this example, the invoice date (IDATE) field
cannot contain a date that is more than five days before the current
system date.
<P>
*****************************************************************
*   Setup Code
*****************************************************************
PUBLIC m.idate, isdateval
USE invoices
<P>
* Initialize a variable that tells whether the date entered in
* the IDATE field is valid or not. This variable will be used
* in the procedure named DATEWHEN.
<P>
isdateval=.T.
<P>
*****************************************************************
*   GETS &amp; READ
*****************************************************************
<P>
@ 10,10 GET idate WHEN datewhen() VALID dateval()
READ CYCLE
<P>
*****************************************************************
*   WHEN routine
*****************************************************************
<P>
PROCEDURE datewhen
<P>
*****************************************************************
* Check to see if GET is a result of a failed VALID or inputting
* new value. If this is a new entry, store current value to memory
* variable. If not, put original value back in field.
*****************************************************************
<P>
<PRE>   IF isdateval
      m.idate = idate
   ELSE
      REPLACE idate WITH m.idate
   ENDIF
   isdateval=.T.
   SHOW GETS

</PRE>*****************************************************************
*   VALID routine
*****************************************************************
<P>
PROCEDURE dateval
<PRE>   IF idate &lt; date()-5
      isdateval=.F.
      DO datewhen IN sys(16,1)    &amp;&amp; Force the WHEN clause
      RETURN .F.                    &amp;&amp; in the calling program.
   ELSE
      isdateval=.T.
   ENDIF
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00 FoxDos FoxWin 1.02 2.00 2.50 2.50a<BR>
.spr initial<BR>
value<BR>
false<BR>
KBCategory: kbenv kbprg<BR>
KBSubcategory: FxenvMemory<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Leaving Routine in ON ERROR in FoxBASE+ or FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88884 ">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1992/09/03">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  You can use the following methods to leave the routine specified in an ON ERROR command:   - Use the RETURN TO MASTER command to return to the highest level    program. For example, if the Run menu pad is present on the FoxPro    system menu bar (F...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAUD,QAH4,QAB9,QA5V,QBV8,QBXT,QAIB,QAKP,QBBI,QALW,QAVI,QAJH,QA5E V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Leaving Routine in ON ERROR in FoxBASE+ or FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88884 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxBASE+ for MS-DOS, versions 1.21 and 2.1
<LI>Microsoft FoxPro for MS-DOS, versions 1.0, 1.01, 1.02, 2.0, 2.5,
   and 2.5a
<LI>Microsoft FoxPro for Windows, versions 2.5 and 2.5a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use the following methods to leave the routine specified in an
ON ERROR command:

<UL><LI>Use the RETURN TO MASTER command to return to the highest level
   program. For example, if the Run menu pad is present on the FoxPro
   system menu bar (FOXSTART.APP was executed on startup), the RETURN
   TO MASTER command returns control to FOXSTART.APP.

<LI>Use the RETURN command to return to the program that had the error
   and continue execution on the next line. For example, the RETURN
   command terminates execution of a program or a user-defined
   function (UDF) and returns control to either the calling program,
   the highest level calling program, another program, or the Command
   window.
<P>
   Using a RETURN command at the end of a program or a user-defined
   function is optional because an implicit RETURN command
   automatically follows the last statement in a program file. Private
   memory variables are released when the RETURN command is executed.

<LI>Use the RETRY command to return to the program that had the error
   and execute the line that had the error. For example, the RETRY
   command returns control to the calling program and reexecutes the
   last line that was executed in that program. The RETRY command is
   similar to the RETURN command except that the RETURN command causes
   the next line in the calling program to be executed rather than
   reexecuting the most recently executed line. RETRY is especially
   useful in error-handling routines or when a set of commands should
   be repeated until a certain condition is true.
<P>
   In FoxPro/LAN (the networked version of FoxPro), the RETRY command
   is frequently used to repeat a command until a record or file
   becomes available for use. The SET REPROCESS command can be used to
   control the number of times a command is repeated when it is unable
   to access a record or a file. In most network situations, the SET
   REPROCESS command is preferred.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The ON ERROR command traps errors that occur during program execution.
When an error occurs, the trap is triggered and the specified command
is executed. An ON ERROR routine may be deactivated by issuing another
ON ERROR command that does not specify a command to run.
<P>
If the command specified in the ON ERROR command is DO &lt;program&gt;,
specifying the ERROR(), LINENO(), MESSAGE(), and PROGRAM() functions
as parameters passes the cause of the error, the line number where the
error occurred, the error message, and the name of the program that
had the error to the error handling function. This information can be
valuable during the process of debugging an application.
<P>
After the ON ERROR routine completes, program execution resumes on the
line immediately following the line that causes the error. However, if
the specified command is DO &lt;program&gt; and the &lt;program&gt; ends with a
RETRY command, execution resumes on the line on which the error
occurred.
<P>
In FoxPro/LAN, an ON ERROR routine may be used to trap for errors
created when a command that attempts to lock a record or a file is
unsuccessful. If an ON ERROR routine is not in effect, FoxPro displays
an error message that indicates why the record lock or file lock is
unsuccessful (for example, "Record is in use by another"). If an ON
ERROR routine is in effect, FoxPro does not display an error message
and it executes the ON ERROR routine. Note that an unsuccessful lock
attempt by the explicit locking functions [FLOCK(), LOCK(), and
RLOCK()] does not trigger an ON ERROR routine or cause an error
message to be displayed. Instead, these functions return a logical
truth value (.F. or .T.) to indicate the failure or success of the
lock attempt.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   ON ERROR DO errhand WITH ;
      ERROR(), MESSAGE(), MESSAGE(1), PROGRAM(), LINENO()

   *** The next line should cause an error. ***

   USE nodatabase

   PROCEDURE errhand
   PARAMETER merror, mess, mess1, mprog, mlineno
   ? 'Error number: ' + LTRIM(STR(merror))
   ? 'Error message: ' + mess
   ? 'Line of code with error: ' + mess1
   ? 'Line number of error: ' + LTRIM(STR(mlineno))
   ? 'Program with error: ' + mprog
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00  FoxDos FoxWin 1.00 1.01 1.02 2.00<BR>
2.50 2.50a<BR>
1.21 2.10 | 2.50 2.50a fox base plus 1.x 2.x<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

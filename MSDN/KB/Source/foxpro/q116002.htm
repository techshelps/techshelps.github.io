

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Contents of the Fox/Win and Fox/DOS 2.6 LCK Readme File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116002">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1994/06/09">
<META NAME="Keywords" CONTENT="kbreadme kbsetup">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Below is the complete FoxPro Library Construction Kit (LCK) for Windows and MS-DOS README.TXT file. This file is found on Disk 1 of the LCK.  MORE INFORMATION                         README.TXT ******************************************************...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QAUD,QAPN,QAA1,QBHQ,QAPF,QBWA,QA5V,QBC9,QBC8,QAO4,QANO,QDI2,QAH4,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Contents of the Fox/Win and Fox/DOS 2.6 LCK Readme File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116002</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro Library Construction Kit, version 2.6
<LI>Microsoft FoxPro for Windows, version 2.6
<LI>Microsoft FoxPro for MS-DOS, version 2.6
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Below is the complete FoxPro Library Construction Kit (LCK) for Windows and
MS-DOS README.TXT file. This file is found on Disk 1 of the LCK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<PRE>                       README.TXT
</PRE>**********************************************************
<PRE>  Microsoft(R) FoxPro(R) Version 2.6 Professional Edition
  Library Construction Kit for Windows(TM) and MS-DOS(R)

    (C)1994 Microsoft Corporation. All Rights Reserved.

  This file contains additions and corrections to the
  FoxPro Library Construction Kit Developer's Guide.
</PRE>**********************************************************
<P>
 
CONTENTS
 
<P>
Part   Description
----   -----------
<PRE> 1     Installation
 2     Additions to LCK Developer's Guide Since Printing
 3     Corrections to LCK Developer's Guide Since Printing
</PRE> 
<P>
<P>
 
Part 1: Installation
 
<P>
<P><h3>Installing the Professional Edition of FoxPro 2.6</h3>
 
The Professional Edition of FoxPro 2.6 includes the
following kits:
<P>
Distribution Kit
Connectivity Kit
Library Construction Kit
WorkGroup Extensions (FoxPro for Windows only)
<P>
To install the Professional Edition of FoxPro, first install
the main FoxPro product, then follow the installation
instructions included with each individual kit.  The order
in which the kits are installed does not matter.
 
<P>
<P>
 
Part 2: Additions to LCK Developer's Guide Since Printing
 
In the LCK Developer's Guide, references to FoxPro 2.5
should be read as references to FoxPro 2.6.
 
<P>
The EXAMPLES directory contains a FoxPro database with all
the example code that is used in the manual.  Simply
search for the function with example code you wish to
copy and then extract the code from the memo field. You
are free to use this code in your own applications.
 
<P>
The following function has been added:
<P>
WHANDLE _WMainWindow( )
<P>
Description:
_WMainWindow( ) returns the WHANDLE of the main FoxPro
window in FoxPro for Windows or of the FoxPro desktop
in FoxPro for MS-DOS.
<P>
Example:
The following example writes a message to the main FoxPro
window in FoxPro for Windows or to the FoxPro desktop in
FoxPro for MS-DOS.
<P>
FoxPro Code:
<P>
<PRE>   SET LIBRARY TO WMAIN
   = EXWMAIN()

</PRE>C Code:
<P>
<PRE>   #include &lt;pro_ext.h&gt;

   void FAR example(ParamBlk FAR *parm)
   {
        WHANDLE wh = _WMainWindow();
        _WPutStr(wh, "\nThis is the main FoxPro window or desktop.");
   }

   FoxInfo myFoxInfo[] = {
        {"EXWMAIN", example, 0, ""},
   };

   FoxTable _FoxTable = {
      (FoxTable FAR *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
   };
</PRE> 
<P>
<P>
 
Part 3: Corrections to LCK Developer's Guide Since
<PRE>        Printing
</PRE> 
<P>
Page 2: In the Reverse.C example:
<P>
The comment "/* Check to see if we can allocate the memory
needed. */" is missing the end comment marker */.
<P>
The three-line comment "Since this routine doesn't call
any functions that cause memory reorganization . . .
prior to de-referencing them (_HandToPtr)" is missing the
single line comment marker // in the second and third
lines.
<P>
This statement:
<P>
<PRE>   for (i = 0; i &lt;&lt; parm-&gt;p[0].val.ev_length; i++)
            *(out_string--) = *(in_string++);

</PRE>should be:
<P>
<PRE>   for (i = 0; i &lt; parm-&gt;p[0].val.ev_length; i++)
            *(out_string--) = *(in_string++);

</PRE>Change the "&lt;&lt;" in the original example to "&lt;".
 
<P>
Page 5: The Value Structure Fields table should include
the General FoxPro data type.  The applicable fields and
their values are listed below:
<P>
val.ev_type = 'G'
val.ev_width = FCHAN
val.ev_long = length of general field
val.ev_real = offset of general field
 
<P>
Page 6: The data type FPFI, a FAR pointer to a function
returning Int, is mistakenly listed as "FPDI".
 
<P>
Page 7: In addition to the Point, Rect and EventRec data
structures, PointP and RectP should be included. PointP
and RectP are identical to Point and Rect except that
Point and Rect coordinates are in rows and columns while
PointP and RectP coordinates are in pixels.
 
<P>
Page 12: The example
<P>
<PRE>    if (parm-&gt;p[0].val.ev_type='C'
                x=parm-&gt;p[0].val.ev_length

</PRE>should be:
<P>
<PRE>   if (parm-&gt;p[0].val.ev_type=='C')
                x=parm-&gt;p[0].val.ev_length;

</PRE>Use an expression ==, a closed parenthesis at the end of
the first line, and a semicolon at the end of the second
line.
 
<P>
Page 22: When compiling a .PLB library in Microsoft C7 or
Visual C/C++, you need to use the following command line:
<P>
CL /O /ALw /Zp /GW
<P>
When linking a .PLB library in Microsoft C7 or C8, you
need to use the /NOE and /NONULLS switches.
<P>
Leaving out /NOE can cause redefinition errors. Leaving
out /NONULLS will cause FoxPro not to recognize the .PLB
as a valid library.
 
<P>
Page 25: The section heading for the makefile on this page
is incorrect. It should say "Microsoft C/C++ Makefile for
MS-DOS" instead of "WATCOM C Makefile for MS-DOS."
 
<P>
Page 26: The  makefile on this page should have the
<P><h3>following section heading: "WATCOM C Makefile for MS-DOS."</h3>
 
<P>
Page 39: The example doesn't work as intended in all
cases. To have it work, you need to change the following
line:
<P>
<PRE>   (( char FAR *) _HandToPtr(p1.ev_handle))[p1.ev_length] = '\0';

</PRE>to:
<P>
<PRE>   (( char FAR *) _HandToPtr(p0.ev_handle))[p0.ev_length - 1] = '\0';
   (( char FAR *) _HandToPtr(p1.ev_handle))[p1.ev_length - 1] = '\0';
</PRE> 
<P>
Page 85: The following information applies to the
_DBSeek( ) function: The struct Value passed to _DBSeek( )
(via a pointer) must be of ev_type == 'N' when seeking a
numeric field even if that field has 0 decimal digits.
If the struct Value has an ev_type of 'I', _DBSeek( )will
return the internal error number -302, "Data type
mismatch."
 
<P>
Page 109: The struct EDENV documented with _EdGetEnv( ) isn't
correct. The actual structure from PRO_EXT.H appears
as follows:
<P>
NOTE:  (R) indicates that this member is read-only and
<PRE>       can't be set using _EdSetEnv( ).

       (B) indicates that these members takes on one of
       two Boolean values: 1 = true or 0 = false.


</PRE>typedef struct
{
<PRE>   char            filename[MAXFILENAME]; // (R)
   EDPOS           length;       // # of bytes in text. (R)
   unsigned short  lenLimit;    // Max allowable length. 0 = infinite.

   unsigned short  dirty,        // Has the file been changed? (R, B)
                   autoIndent,   // Auto indent? (B)
                   backup,       // Make backup files? (B)
                   addLineFeeds, // Add line feeds when saving? (B)
                 autoCompile, // Shall we auto compile this thing? (B)
                   addCtrlZ,     // Add end of file ctrl-z? (B)
                   savePrefs,    // Save edit preferences? (B)
                   dragAndDrop,  // Allow drag-and-drop. (B)
                   readOnly,     // 0 = not r/o, 1 = file is r/o,
                                 // 2 = file is r/w, opened r/o,
                                 // 3 = file is r/o, opened r/o. (R)
                   status,       // Display status bar? (B)
                   lockPrefs,    // Can update the preferences ? (B)
                   insertMode;   // (B)

   short   wrap;       // If &lt; 0, new line at Return only.
   EDPOS   selStart;   // Selection start. (R)
   EDPOS   selEnd;     // Selection end. (R)
   EDPOS   selAnchor;  // Selection anchor point. (R)
   short   justMode;   // Justification (0=left, 1=right, 2=center).
   short   tabWidth;   // TAB size in spaces.

   char    fontName[MAXFONTNAME];
   short   fontSize;
   short   fontStyle; // 0=plain, 1=bold, 2 = italic, 3 = bold italic.
   short   kind; // Kind of editor session; EDCOMMAND, EDPROGRAM, etc.
                 // defined in pro_ext.h. (R)
</PRE>} EDENV;
 
<P>
Page 122: The syntax for _EdOpenFile() is missing the
"mode" argument.  It should read:
<P>
<PRE>   _EdOpenFile(TEXT *filename, int mode)

   TEXT *filename;      /* File to open. */
   int mode;            /* Mode option. */

</PRE>The following Mode options are available:
FO_READONLY, FO_WRITEONLY, FO_READWRITE.
 
<P>
Page 315: zoomEvent is a FoxPro for MS-DOS event.  You
can't trap for this event in FoxPro for Windows.
 
<P>
In an EventHandler in the FoxPro for Windows Library
Construction Kit, if you make a call to FoxPro which
generates another event, the original event record may be
changed.  This won't happen in the FoxPro for MS-DOS
Library Construction Kit. The following example
illustrates this:
<P>
<PRE>#include &lt;pro_ext.h&gt;

int         g_eventid = 0;         // Our event handler.

</PRE>FAR EventHandler(WHandle theWindow, EventRec FAR *ev)
{
<PRE>        Point     pt;
    switch (ev-&gt;what)              // Determine the event type.
    {
        case keyDownEvent:
                        if (theWindow == _WMainWindow())
                                return NO;
                        else
                        {
                                pt.h = 35;
                                pt.v = 10;

                    // This causes the event handler to be re-entered.
                                _WSize(theWindow, pt);
                        }
                        _PutStr("\nDone with the keyDownEvent");
                        break;

                case sizeEvent:
                        _PutStr("\nSize Event received.");
                        break;

                        default:
                        return NO;
        }
        return NO;
}

</PRE>FAR EventExit()
{
<PRE>    _DeActivateHandler(g_eventid);    // Get rid of our event handler.
}


</PRE>FAR Quotes(ParamBlk FAR *parm)
{
<PRE>    //  Set up our event handler.
    g_eventid = _ActivateHandler(EventHandler);
</PRE>}
<P>
<P>
FoxInfo myFoxInfo[] = {
<PRE>    {"QUOTES", Quotes, 0, ""},
    {"EVENTEXIT", EventExit, CALLONUNLOAD, ""}
</PRE>};
<P>
FoxTable _FoxTable = {
<PRE>    (FoxTable FAR *)0, sizeof(myFoxInfo) / sizeof(FoxInfo), myFoxInfo
</PRE>};
 
<P>
<PRE>                      =================
                      End of README.TXT
                      =================
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxDos FoxWin 2.60 lck<BR>
KBCategory: kbreadme kbsetup<BR>
KBSubcategory: FxotherReadme<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

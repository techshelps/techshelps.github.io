

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use a Custom Method as a User-Defined Function (UDF) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136010">
<META NAME="KBModify" CONTENT="1995/08/31">
<META NAME="KBCreate" CONTENT="1995/08/30">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article gives details about how to create and use custom methods.  In FoxPro version 2.x, you can define procedures and functions in the cleanup code of FoxPro version 2.x screens. Forms in Visual FoxPro don't have an analogous place for defin...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAH4,QAB9,QAUD,QAY5,QBE7,QBE6,QBV8,QAG8,QARW,QBXS,QBWS,QBT6,QBV4,QAB6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use a Custom Method as a User-Defined Function (UDF)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 31, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136010</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article gives details about how to create and use custom methods.
<P>
In FoxPro version 2.x, you can define procedures and functions in the
cleanup code of FoxPro version 2.x screens. Forms in Visual FoxPro don't
have an analogous place for defining procedures and functions, so you can:

<UL><LI>Put cleanup code in a procedure file contained in the Project Manager,
   and issue a SET PROCEDURE TO statement.
<P>
   -or-

<LI>Create functions and procedures as custom methods of the form. These
   custom methods can then be referenced the same as any other method of
   the form or other object.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Custom methods can be coded to behave as functions behave; that is, they
can return a value simply by ending the code definition with RETURN x
where x is the name of a variable whose value is set in the method.
<P>
Custom methods should not begin with the PROCEDURE or FUNCTION command,
which is normally used to indicate that a procedure or function is being
defined, nor should they end with ENDPROC or ENDFUNC.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Create a new form, and add two text boxes (Text1 and Text2) and two
   command buttons (Command1 and Command2).

<P><LI>Add the Customer and Orders tables from the Testdata database to the
   data environment of the form.

<P><LI>Set the ControlSource for the Text1 box to:
<P>
   customer.cust_id

<P><LI>Set the ReadOnly property for the Text1 box to True (.T.).

<P><LI>Leave the ControlSource property for the Text2 box blank.

<P><LI>On the Form menu, click New Method. Enter Custcount as the name of the
   new method.

<P><LI>Change the caption of the Command1 button to "Count orders," and enter
   the following code in the Click event procedure:
<P>
   nNum = thisform.custcount()
   thisform.text2.value = nNum
   thisform.refresh

<P><LI>Change the caption of the Command2 button to Skip, and enter the
   following code in the Click event procedure:
<P>
   skip
   thisform.refresh

<P><LI>Enter the following code for the Custcount custom method:
<P>
   x = 0
   select orders
   go top
   count to x for orders.cust_id = thisform.text1.value
   select customer
   return x
<P>
</OL>When you click the Count orders button, the Custcount custom method is
called to count how many orders exist in the Orders table for the current
record in the Customer table. This number is returned to the Count orders
button.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgClassoop<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 31, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

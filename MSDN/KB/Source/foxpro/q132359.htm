

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example of Polymorphism in Visual FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132359">
<META NAME="KBModify" CONTENT="1995/07/28">
<META NAME="KBCreate" CONTENT="1995/07/09">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article provides an example that illustrates the concept of polymorphism in Visual FoxPro.  MORE INFORMATION  The object-oriented programming approach focuses on objects as the basis for application building. Objects are instances of classes, ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAOX,QAW6,QAUD,QAYL,QAPF,QAH4,QABO,QA56,QA55,QAEF,QA2O,QAY5,QAY2,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Example of Polymorphism in Visual FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 28, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132359</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an example that illustrates the concept of
polymorphism in Visual FoxPro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The object-oriented programming approach focuses on objects as the basis
for application building. Objects are instances of classes, which contain a
description of related data and procedures. The Visual FoxPro language has
been extended to use object-oriented programming (OOP). One of the concepts
used in OOP is polymorphism.
<P>
In OOP terms, polymorphism represents the ability to resolve a reference to
an object's method at run time. Specifically, different objects could make
a call to a Draw or Print method, and these methods would act differently
with each object; the process can take different forms behind a common
interface. One of the benefits of polymorphism is that because the
interface is common to objects, any object is able to respond differently
to some common set of tasks, and objects are independent of each other.
<P>
The following code sample illustrates how polymorphism can be implemented
in Visual FoxPro. It uses a reference to a Print routine. All of the
objects inherit a Print method, which can be called from any document, and
print in a different way depending on the document that called the Print
method. To execute this code, copy and paste it into a program (.PRG) file,
and then run the .PRG file.
<P>
<P><h3>Code Sample</h3>
 
<P>
*-- Note:  All Print methods output to active window for demo.
<PRE>   CLEAR
   ? 'Example :'
   DO PolyExample
   RETURN

</PRE>*-- All objects in this example are derived from the same ancestor, the
*-- File class.
*-- Polymorphism is demonstrated here by sending the Print method to three
*-- independent objects: a document, a spreadsheet, and a file. The Print
*-- method is performed for each object instance, demonstrating how each
*-- instance knows what action to perform.
<P>
<PRE>   PROCEDURE PolyExample
   PRIVATE oMyFile1,oMyFile2,oMyFile3
   oMyFile1=CREATEOBJECT('File')
   oMyFile1.SetFileName('TEST1.TXT')
   oMyFile1.Print

   oMyFile2=CREATEOBJECT('DocumentFile')
   oMyFile2.SetFileName('TEST2.DOC')
   oMyFile2.Print

   oMyFile3=CREATEOBJECT('SpreadsheetFile')   &amp;&amp; Creates the third object
   oMyFile3.SetFileName('TEST3.XLS')
   oMyFile3.Print
   RETURN

</PRE>*-- Base File class.
*-- Instance variable cFileName is protected for encapsulation.
*-- SetFileName(&lt;expC&gt;) method updates instance variable cFileName.
*-- Print method prints file based on instance variable cFileName.
DEFINE CLASS File AS Custom
<P>
<PRE>   PROTECTED cFileName

   FUNCTION SetFileName
   PARAMETERS lcNewFileName
   this.cFileName=lcNewFileName
   ENDFUNC

   FUNCTION Print           &amp;&amp; performs the Print method for a File object
   IF EMPTY(this.cFileName)
      RETURN .F.
   ENDIF
   ? 'Print File: '+this.cFileName
   ENDFUNC

   ENDDEFINE

</PRE>*-- DocumentFile class derived from File class.
*-- Print method prints file based on instance variable cFileName. It
*-- overwrites Print method defined in the File class.
<P>
<PRE>   DEFINE CLASS DocumentFile AS File

   FUNCTION Print
     IF EMPTY(this.cFileName)
      RETURN .F.
     ENDIF
     ? 'Document File: '+this.cFileName
   ENDFUNC

   ENDDEFINE

</PRE>*-- SpreadsheetFile class derived from File class.
<P>
DEFINE CLASS SpreadsheetFile AS File
<P>
<PRE>   FUNCTION Print
   IF EMPTY(this.cFileName)
      RETURN .F.
   ENDIF
   ? 'Spreadsheet File: '+this.cFileName
   ENDFUNC

   ENDDEFINE
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 message VFoxWin<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgClassoop<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 28, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

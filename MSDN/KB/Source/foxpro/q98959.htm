

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Updated FOXTOOLS.WRI File for FoxPro for Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98959 ">
<META NAME="KBModify" CONTENT="1996/12/02">
<META NAME="KBCreate" CONTENT="1993/05/18">
<META NAME="Keywords" CONTENT="kbreadme kbinterop kbtool kbprg kbref">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Below is the complete text of the updated FOXTOOLS.WRI file for FoxPro for Windows. This file describes the extra functions provided in FOXTOOLS.FLL, and is located in the FOXPROW\GOODIES\FOXTOOLS subdirectory.  MORE INFORMATION                    ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QALW,QAY5,QBFY,QAWI,QAPF,QAB9,QBV8,QAFI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Updated FOXTOOLS.WRI File for FoxPro for Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 2, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98959 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for Windows, versions 2.5 and 2.5a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Below is the complete text of the updated FOXTOOLS.WRI file for FoxPro for
Windows. This file describes the extra functions provided in FOXTOOLS.FLL,
and is located in the FOXPROW\GOODIES\FOXTOOLS subdirectory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<PRE>                             FOXTOOLS.FLL
                             ============

</PRE><h3>RegFn and CallFn</h3>
 
<P>
These notes describe a FoxPro API library that allows FoxPro programs to
call any Windows DLL functions that meet the following requirements:

<OL><P><LI>Take the following arguments: integer, long, float, double,
   string/buffer. These may be passed by reference or by value.

<P><LI>The following return types are supported: integer, long, float, double,
   string/buffer. These are returned by value only.
<P>
</OL>A surprising number of Windows API functions meet these criteria.
<P>
Two FLL functions are used provide this functionality:
<P>
<PRE>   RegFn() - Registers a function and the arguments it takes
   CallFn() - Calls a registered function

</PRE></OL><h3>RegFn(FunctionName, ArgTypes, ReturnType, DLLName) returns FnHandle</h3>
 
<P>
If successful, RegFn returns a number which can be used to reference the
function in future calls to CallFn.
<P>
Returns -1 if the library couldn't be opened, and will additionally bring
up a message box. These cannot be disabled.
<P>
The first argument is the name or the ordinal value of the function to be
registered.
<P>
The second argument is a string of characters which describe what arguments
the function will accept. The following values are allowed:
<P>
<PRE>   I - Integer
   L - Long
   C - String of characters
   F - Floating point number
   D - Double precision floating point number

</PRE>Each argument type may be preceded by an @ to indicate that the argument is
passed by reference. The default is to pass arguments by value.
<P>
The third argument is the return type of the function. The values allowed
are the same as given above for the argument except that return by
reference is not allowed.
<P>
The fourth argument gives the name of the DLL library that contains the
function. This is optional if the function name (and not an ordinal number)
is supplied in the first argument. In this case all previously loaded
libraries are searched in the reverse order that they were loaded. If the
function is not found then the standard Windows libraries are searched
(i.e., USER.EXE, KRNL386.EXE, and GDI.EXE). If the DLL is in one of the
usual places, then it doesn't have to contain the path. See the Windows SDK
function LoadLibrary() for exact details about where it looks.
<P>
The same function can be registered more than once. This allows functions
that take different arguments to be used by declaring them again with
different argument types.
<P>
Many functions that accept string parameters assign a special meaning to a
NULL string. You can pass a NULL pointer to a function expecting a string
by passing a 0 in place of the string.
<P>
<P><h3>CallFN(FnNum, Arg1, Arg2, ....) returns value from FnNum</h3>
 
<P>
Takes at least one argument, a function handle from a previous call to
RegFn. Must pass as many arguments as were declared when the function was
declared or an error occurs.
<P>
All arguments must match their declared type as follows:
<P>
<PRE>   F, D - Must be a floating point number
   I, L - Must be an integral number
   C - Must be a string passed by value, or 0 (zero). If 0, a null
   pointer is passed.

</PRE>Returns the value that the function returned, using the type declared by
ReturnType in RegFn call.
<P>
<P><h3>For More Information About Windows DLLs</h3>
 
<P>
The functionality of this FLL is limited mostly by your imagination and
your knowledge of the Windows API. Despite the seemingly stringent
restrictions, a surprising amount can be done just using the Windows API
alone. Look in the directory FOXPROW\GOODIES\FOXTOOLS for some example
programs that use these functions.
<P>
The Windows DLL functions are documented in the books that come with the
Windows Software Development Kit. The Windows SDK is also included with
Microsoft C/C++ 7.0 and Visual C++. These books are also available
separately at many technical bookstores.
<P>
<P><h3>Unsupported Functions</h3>
 
<P>
WARNING: The following functions provided in FOXTOOLS.FLL are not supported
by Microsoft Technical Support either electronically or via telephone. They
were developed for internal use by some of the FoxPro tools, and although
these functions have been around for a while, none of them have been
through a true test cycle to test their use in other programs. However, we
understand that as developers it is important to get tools as soon as
possible, even if they are not fully supported, so we have included the
following documentation. Note that these functions may not be supported in
future versions of FoxPro.
<P>
ADDBS(&lt;ExpC1&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns &lt;ExpC1&gt; with a backslash appended if needed.
<PRE>Example:    ? ADDBS("C:")  (returns: C:\)
            ? ADDBS("C:\") (returns: C:\)

</PRE>CLEANPATH(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Will return a corrected filename (best guess) for an
<PRE>            invalid filename. Removes spaces, invalid characters,
            duplicate backslashes, etc.
Example:    ? CLEANPATH("THISISALONGFILE")
            (returns: THISISAL) &lt;--- Eight Characters
            ? CLEANPATH("C:D:\\THISISALONGFILE")
            (returns: D:\THISISAL)

</PRE>DRIVETYPE(&lt;ExpC&gt;)
<PRE>Returns:    Numeric
</PRE>Description:Returns the type of drive passed in &lt;ExpC&gt;.
<PRE>            0 - No type
            2 - Floppy Disk
            3 - Hard Disk
            4 - Removable / Network Drive
Example:    ? DRIVETYPE("C:") (returns 3)

</PRE>DEFAULTEXT(&lt;ExpC1&gt;, &lt;ExpC2&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns &lt;ExpC1&gt; with new extension, if it didn't already
<PRE>            have one.
            &lt;ExpC1&gt; - File name (With or without a path or extension)
            &lt;ExpC2&gt; - Extension (Without a period)
Example:    ? DEFAULTEXT("C:\DOS\SETVER", "FLL")
            (returns: C:\DOS\SETVER.FLL)
            ? DEFAULTEXT("C:\DOS\SETVER.TXT", "FLL")
            (returns: C:\DOS\SETVER.TXT)

</PRE>FORCEEXT(&lt;ExpC1&gt;, &lt;ExpC2&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns string with old extension replaced with new
<PRE>            extension.
            &lt;ExpC1&gt; - File name (With or without a path or extension)
            &lt;ExpC2&gt; - Extension (Without a period)
Example:    ? FORCEEXT("C:\FOXPROW\FOXTOOLS.FLL", "DLL")
            (returns: C:\FOXPROW\FOXTOOLS.DLL)

</PRE>FORCEPATH(&lt;ExpC1&gt;, &lt;ExpC2&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns &lt;ExpC1&gt; with its path changed to &lt;ExpC2&gt;.
<PRE>            &lt;ExpC1&gt; - File Name (With or without a path)
            &lt;ExpC2&gt; - Path
Example:    ? FORCEPATH("C:\DOS\SETVER.EXE", "C:\FOXPROW")
            (returns: C:\FOXPROW\SETVER.EXE)

</PRE>FOXTOOLVER()
<PRE>Returns:    Character
</PRE>Description:Returns the version number of the FOXTOOLS.FLL library.
<PRE>Example:    ? FOXTOOLVER()

</PRE>JUSTDRIVE(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns the drive letter from a complete path.
<PRE>Example:    ? JUSTDRIVE("C:\FOXPROW\FOXPROW.EXE")
            (returns: C:)

</PRE>JUSTEXT(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns the three letter extension from a complete path.
<PRE>Example:    ? JUSTEXT("C:\FOXPROW\FOXPROW.EXE")
            (returns: EXE)

</PRE>JUSTFNAME(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns the file name from a complete path.
<PRE>Example:    ? JUSTFNAME("C:\FOXPROW\FOXPROW.EXE")
            (returns: FOXPROW.EXE)

</PRE>JUSTPATH(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns the pathname from a complete path.
<PRE>Example:    ? JUSTPATH("C:\FOXPROW\FOXPROW.EXE")
            (returns: C:\FOXPROW)

</PRE>JUSTSTEM(&lt;ExpC&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns the stem name (first eight characters of file
<PRE>            name) from a complete path.
Example:    ? JUSTSTEM("C:\FOXPROW\FOXTOOLS.FLL") (returns: FOXTOOLS)

</PRE>MAINHWND()
<PRE>Returns:    Numeric
</PRE>Description:Returns a Windows handle (HWND) to the main FoxPro
<PRE>            window.
Example:    ? MAINHWND()

</PRE>MKDIR(&lt;ExpC&gt;)
<PRE>Returns:    Numeric
</PRE>Description:Creates a directory specified by &lt;ExpC&gt;. This function
<PRE>            will not check for valid length and format of directory
            string. &lt;see example below&gt;.
            The return value is 0 for successful, 1 for not-successful
            and 6 for "directory already exists". This function is
            only available in FoxTools version 1.01 or later.
Example:    ? MKDIR("C:\TEST")
            (returns: 0 - Creates directory C:\TEST)
            ? MKDIR("C:\THISISTOOLONG")
            (returns: 0 - Creates directory C:\THISISTO)
            ? MKDIR("C:\THIS IS WRONG")
            (returns: 0 - Creates directory C:\THIS IS - NOTE THE
            INVALID SPACE IS ALLOWED!)
            ? MKDIR("C:\   THISIS WRONG")
            (returns: 1 - Invalid beginning space for directory name)

</PRE>MSGBOX(&lt;ExpC1&gt;, &lt;ExpC2&gt;, &lt;ExpN&gt;)
<PRE>Returns:    Numeric
            One of the following:
            idok       1
            idcancel   2
            idabort    3
            idretry    4
            idignore   5
            idyes      6
            idno       7

</PRE>Description:Displays a modal dialog box centered in Windows.
<PRE>            &lt;ExpC1&gt;   - Contents in dialog box
            &lt;ExpC2&gt;   - Title of dialog box window
            &lt;ExpN&gt;    - Type of dialog box as follows:
            MB_OK                  0
            MB_OKCANCEL            1
            MB_ABORTRETRYIGNORE    2
            MB_YESNOCANCEL         3
            MB_YESNO               4
            MB_RETRYCANCEL         5

            MB_ICONHAND            16
            MB_ICONQUESTION        32
            MB_ICONEXCLAMATION     48
            MB_ICONASTERISK        64

            MB_ICONINFORMATION     MB_ICONASTERISK
            MB_ICONSTOP            MB_ICONHAND
Example:    test = MSGBOX("This is the contents of the window." ;
            "This is the title", ;
            MB_ICONQUESTION+MB_YESNO)
            (This example assumes your program contains #define
            statements to associate MB_ICONQUESTION and MB_YESNO with
            their appropriate values shown above).

</PRE>NEXTWORD(&lt;ExpC1&gt;, &lt;ExpN&gt;[,&lt;ExpC2&gt;])
<PRE>Returns:    Character
</PRE>Description:Returns the next word in &lt;ExpC1&gt; beginning at character
<PRE>            &lt;ExpN&gt; and ending just before any character in optional
            &lt;ExpC2&gt; or the end of the &lt;ExpC1&gt; string. Default for
            &lt;ExpC2&gt; is space, tab and carriage return.
Example:    ? NEXTWORD("This is a test of FoxTools", 12)
            (returns: est)
            ? NEXTWORD("One,Two,Three,Four,Five", 12,",")
            (returns: ee)

</PRE>REDUCE(&lt;ExpC1&gt;, &lt;ExpC2&gt;)
<PRE>Returns:    Character
</PRE>Description:Removes repetitive values in a string. Usually used to
<PRE>            remove groups of spaces in a string and replace it with
            one space.
            &lt;ExpC1&gt; - Character string to change
            &lt;ExpC2&gt; - Characters to search for
Example:    ? REDUCE("This is       lots of spaces", " ")
            (returns: This is lots of spaces)
            ? REDUCE("Repeat characters AAAA and delete", "A")
            (returns: Repe t ch r cters   nd delete)

</PRE>RMDIR(&lt;ExpC&gt;)
<PRE>Returns:    Numeric
</PRE>Description:Deletes a directory specified by &lt;ExpC&gt;. Does not check
<PRE>            for valid directory name. (See Example). Returns 0 if
            successful and 1 if not-successful. This function is only
            available in FoxTools version 1.01 or later.
Example:    ? RMDIR("C:\THIS IS WRONG")
            (returns: 0 - If directory was removed)

</PRE>STRFILTER(&lt;ExpC1&gt;, &lt;ExpC2&gt;)
<PRE>Returns:    Character
</PRE>Description:Returns only characters specified in &lt;ExpC2&gt;. This
<PRE>            function is case sensitive.
            &lt;ExpC1&gt; - Character string to search
            &lt;ExpC2&gt; - Characters to search for
Example:    ? STRFILTER("This is FoxTools", "T")    (returns: TT)

</PRE>VALIDPATH(&lt;ExpC1&gt;)
<PRE>Returns:    Logical
</PRE>Description:Checks for a valid MS-DOS filename and/or path syntax.
<PRE>            This function is not foolproof and can sometimes think a
            file has a valid name when it doesn't. However, it will
            not reject as invalid a valid name.
            NOTE: Does not check to see if it exists
Example:    ? VALIDPATH("C:\OKPATH") (returns: .T.)
            ? VALIDPATH("C:\THISISVERYLONG") (returns: .F.)

</PRE>WORDNUM(&lt;ExpC1&gt;, &lt;ExpN&gt;[,&lt;ExpC2&gt;])
<PRE>Returns:    Character
</PRE>Description:Returns the &lt;ExpN&gt; word in &lt;ExpC&gt; delimited by any
<PRE>            character in optional &lt;ExpC2&gt;.
            The default for &lt;ExpC2&gt; is a space, tab and carriage
            return.
Example:    ? WORDNUM("This is a test of FoxTools", 4)
            (returns: test)
            ? WORDNUM("One,Two:Three,Four,Five", 4, ":,")
            (returns: Four)

</PRE>WORDS(&lt;ExpC1&gt;[,&lt;ExpC2&gt;])
<PRE>Returns:    Numeric
</PRE>Description:Returns the number of words in &lt;ExpC&gt; delimited by any
<PRE>            character in optional &lt;ExpC2&gt;. The default for &lt;ExpC2&gt;
            is a space, tab and carriage return.
Example:    ? WORDS("This is a test of FoxTools") (returns: 6)


</PRE><h3>Windows Clipboard Functions</h3>
 
<P>
These functions map to the Windows SDK functions that are similarly
named. We strongly recommend that you don't use these unless you know
exactly what you're doing!  The FoxPro system variable _CLIPTEXT is
the recommended way of accessing the Windows clipboard.
<P>
CLOSECLIP()
<PRE>Returns:    Logical
</PRE>Description:Closes the clipboard opened previously with OPENCLIP.
<PRE>            Returns .T. if successful.
Example:    ? CLOSECLIP() (returns: .T.)

</PRE>COUNTCLIPF()
<PRE>Returns:    Numeric
</PRE>Description:The COUNTCLIP function retrieves the number of different
<PRE>            data formats currently in the clipboard.
Example:    ? COUNTCLIP() (returns: 0)

</PRE>EMPTYCLIP()
<PRE>Returns:    Logical
</PRE>Description:The EMPTYCLIP function empties the clipboard and frees
<PRE>            handles to data in the clipboard. It then assigns
            ownership of the clipboard to the window that currently
            has the clipboard open.
Example:    ? EMPTYCLIP() (returns: .F.)

</PRE>ENUMCLIPFM(&lt;ExpN&gt;)
<PRE>Returns:    Numeric
</PRE>Description:The ENUMCLIPFM function enumerates the formats found in a
<PRE>            list of available formats that belong to the clipboard.
            Each call to this function specifies a known available
            format; the function returns the format that appears next
            in the list.

</PRE>GETCLIPDAT(&lt;ExpN&gt;)
<PRE>Returns:    Logical
</PRE>Description:Unknown function... best explanation as follows:
<PRE>            The GetClipDat function retrieves a handle of the current
            clipboard data having a specified format in &lt;ExpN&gt;.
            &lt;ExpN&gt; contains the following defines:
            cf_Text         =  1
            cf_Bitmap       =  2
            cf_MetaFilePict =  3
            cf_SYLK         =  4
            cf_DIF          =  5
            cf_TIFF         =  6
            cf_OEMText      =  7
            cf_DIB          =  8
            cf_Palette      =  9

</PRE>GETCLIPFMT(&lt;ExpN&gt;)
<PRE>Returns:    Unknown (Character?)
</PRE>Description:Unknown function... best explanation as follows:
<PRE>            The GetClipFmt function retrieves the name of a registered
            clipboard format.

</PRE>ISCLIPFMT(&lt;ExpN&gt;)
<PRE>Returns:    Logical
</PRE>Description:Returns the format of the available contents of the
<PRE>            clipboard.
            &lt;ExpN&gt; is as follows:
            cf_Text         =  1
            cf_Bitmap       =  2
            cf_MetaFilePict =  3
            cf_SYLK         =  4
            cf_DIF          =  5
            cf_TIFF         =  6
            cf_OEMText      =  7
            cf_DIB          =  8
            cf_Palette      =  9
Example:    Copy text to clipboard
            ? ISCLIPFMT(cf_Text) (returns: .T.)

</PRE>OPENCLIP(&lt;ExpN&gt;)
<PRE>Returns:    Logical
</PRE>Description:The OPENCLIP function opens the clipboard. Other
<PRE>            applications will not be able to modify the clipboard
            until the CLOSECLIP function is called. &lt;ExpN&gt; is the
            handle of the window ... 0 is acceptable.
            &lt;&lt;&lt; ALMOST ALL CLIP FUNCTIONS RELY ON OPENING THE
            CLIPBOARD PRIOR TO USE &gt;&gt;&gt;
Example:    ? OPENCLIP(0)
            (returns: .T.)

</PRE>REGCLIPFMT(&lt;ExpC&gt;)
<PRE>Returns:    Numeric
            The return value indicates the newly registered format. If
            the identical format name has been registered before,
            even by a different application, the format's reference
            count is incremented (increased by one) and the same
            value is returned as when the format was originally
            registered. The return value is zero if the format cannot
            be registered.
</PRE>Description:The REGCLIPFMT function registers a new clipboard format.
<PRE>            The registered format can be used in subsequent clipboard
            functions as a valid format in which to render data, and
            it will appear in the clipboard's list of formats. &lt;ExpC&gt;
            is a string that names the new format.
Example:    ? REGCLIPFMT("MyRegClip")

</PRE>SETCLIPDAT(&lt;ExpN&gt;, &lt;ExpC&gt;)
<PRE>Returns:    Logical
</PRE>Description:The SETCLIPDAT function sets the data in the clipboard.
<PRE>Example:    ? SETCLIPDAT(1, "Test") (returns: .T.)

</PRE><h3>Editor and Window Functions</h3>
 
<P>
A group of functions starting with _Ed... and _W... map to editor and
window functions that are exposed in the FoxPro version 2.5 Library
Construction Kit (a separate product that allows you to extend FoxPro using
the C programming language). See the documentation in that product for
details of these functions.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxWin 2.50 2.50a<BR>
KBCategory: kbreadme kbinterop kbtool kbprg kbref<BR>
KBSubcategory: FxprgFoxtools<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 2, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

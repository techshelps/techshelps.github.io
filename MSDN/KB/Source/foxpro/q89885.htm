

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using LOAD and CALL with FoxPro for MS-DOS </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q89885 ">
<META NAME="KBModify" CONTENT="1995/04/17">
<META NAME="KBCreate" CONTENT="1992/10/05">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The text below describes the correct way to use a binary (.BIN) routine in FoxPro. The process is somewhat different from that used with Microsoft FoxBASE+ where an application can determine the length of a string parameter by searching for a null ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QATX,QAHE,QBQU,QAYL,QAH6,QAVX,QAVW,QAH7,QAD7,QAIF,QAKD,QAWN,QAKC,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using LOAD and CALL with FoxPro for MS-DOS</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q89885 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a, 2.5b, 2.6
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below describes the correct way to use a binary (.BIN) routine in
FoxPro. The process is somewhat different from that used with Microsoft
FoxBASE+ where an application can determine the length of a string
parameter by searching for a null character. Because FoxPro allows null
characters as part of a string, the technique used in FoxPro is different.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Calling Conventions</h3>
 
<P>
The DS:BX register pair provides the location of the passed parameter.
If the parameter has the character data type, DS:BX points to a null-
terminated character string. However, because a null character may be
present in a FoxPro character string (as indicated above), finding a
null character does not definitively denote the end of the string. If
an application anticipates using embedded null characters, place the
length of the string at the beginning of the string, as follows:
<P>
<PRE>   param = CHR(LEN("StringToPass"))+"StringToPass"
   CALL test WITH param

</PRE>The CHR() function stores the length of the string in one character.
This method works for strings up to 255 characters long. The STR()
function can be used in place of the CHR() function.
<P>
If the parameter has the numeric data type, DS:BX points to an IEEE
double-precision (8 byte) floating-point number.
<P>
If the parameter has the logical data type, DS:BX points to an 8-bit
number that represents .F. with the value 0 and represents .T. with
the value 1.
<P>
FoxPro can pass only one parameter to a binary routine. If more
parameters are required, concatenate the parameters into a string and
pass the string to the binary routine. The binary routine parses the
string into its constituent parameters.
<P>
<P><h3>Changing the Value of the Parameter</h3>
 
<P>
The parameter of a binary routine may be either the result of an
expression or the contents of a memory variable. If the parameter is
generated by an expression, such as one of the following
<P>
<PRE>   CALL test WITH REPLICATE("Hello",2) + "Goodbye"

   -or-

   CALL test WITH x*(y+z)

</PRE>the DS register is set equal to the SS register. In other words, the
result of the expression is stored in the FoxPro stack segment. It is
neither useful nor advisable for a called routine to change the value
of an expression passed as a parameter.
<P>
However, if the parameter is the contents of a memory variable, such
as the following
<P>
<PRE>   x = "Hello"
   CALL test WITH x

</PRE>the DS register does not equal the SS register. The routine may safely
change the value of a memory variable. The updated value will be
immediately available to the FoxPro application that called the routine.
However, a binary routine cannot change the length of a character variable
in the calling application. Placing a null character in the string does not
shorten the variable, and adding characters to the end of a string can
corrupt the FoxPro string pool.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxDos 2.00 2.50 2.50a 2.50b 2.60<BR>
KBCategory: kbprg<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

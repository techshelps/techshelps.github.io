

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Read Fields in a Table from the LCK </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123975">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1994/12/14">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article explains how to read the contents of a field in a table using the Library Construction Kit (LCK).  MORE INFORMATION  When you write a C program using the Library Construction Kit, you may sometimes need to know the value of a field in ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7N,QA7O,QAKD,QAUJ,QAH4,QBBI,QAY5,QATX,QAGI,QAIC,QBV8,QBCF,QAB9,QARM,QAKC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Read Fields in a Table from the LCK</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123975</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, version 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to read the contents of a field in a table using
the Library Construction Kit (LCK).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When you write a C program using the Library Construction Kit, you may
sometimes need to know the value of a field in a table. To find that value,
follow these steps:

<OL><P><LI>Call the _NameTableIndex() function. It returns a name table index that
   corresponds to the field name.

<P><LI>Call the _FindVar() function. It uses the name table index to fill a
   Locator structure with information about the field.

<P><LI>Call the _Load() function. It uses the information in the Locator
   structure to place values for the field in a Value structure.

<P><LI>Refer to the Value structure. It contains the contents of the field
   initialized in Step 3. For more information on the nature of a Locator
   and Value structure, please see the "Data Structures" section in the
   Microsoft FoxPro Library Construction Kit documentation.
<P>
</OL><h3>Example</h3>
 
<P>
The following code sample illustrates the concepts explained above. This
code can be compiled into an FLL for use with FoxPro for Windows, a PLB for
use with FoxPro for MS-DOS, or an MLB for use with FoxPro for Macintosh.
This code creates a function called ReadDb.
<P>
The syntax for the ReadDb() function is:
<P>
<PRE>   ReadDb(&lt;expN&gt;,&lt;expC&gt;)

    - expN is the work area in which the table is located. If a work area
      of 0 is specified, ReadDb() will search all works areas to find the
      specified field.

    - expC is the field whose value this function should display.

</PRE></OL>For example, if a table located in work area 1 has a character field named
flda, you could use the following ReadDb function to find the value of the
field:
<P>
<PRE>   = ReadDb(1,"flda")

</PRE><h3>Code Sample</h3>
 
<P>
<PRE>#include &lt;pro_ext.h&gt;

void FAR ReadDb(ParamBlk FAR *parm)
</PRE>{
<P>
<PRE>  char FAR * fldname ;    // name of field
  char FAR * fldtxt ;     // contents of field
  NTI nti;                // for _NameTableIndex
  Locator loc;            // a locator structure
  Value val ;             // a value structure

  // Increase the size of the handle to the character string
  // containing the field name so it can be null terminated.

  if (!_SetHandSize(parm-&gt;p[1].val.ev_handle, parm-&gt;p[1].val.ev_length +
</PRE>1))
<P>
<PRE>  {
    _Error(182); // "Insufficient memory"
  }

  // Lock the handle to the character string containing
  // the name of the field.

  _HLock(parm-&gt;p[1].val.ev_handle) ;

  // Establish a pointer to the character string containing
  // the name of the field.

  fldname = (char FAR *) _HandToPtr(parm-&gt;p[1].val.ev_handle) ;

  // Null terminate the character string containing the
  // name of the field.

  fldname[parm-&gt;p[1].val.ev_length] = '\0' ;

  // Get nti value for the field.

  nti = _NameTableIndex(fldname) ;

  // Unlock the handle to the character string containing
  // the name of the field.

  _HUnLock(parm-&gt;p[1].val.ev_handle) ;

  if (nti == -1)
  {
    // This should not happen if a valid field name was passed.

    _PutStr("\nNameTableIndex Failure") ;
  }
  else
  {
    // Fill locator structure with information about the field:

    // Note that the second parameter to the _FindVar() function
    // is the first parameter that was passed to this function.
    // The first parameter to this function is a numeric value
    // specified the work area in which the field is located.

    if (! _FindVar(nti, (int) parm-&gt;p[0].val.ev_long, &amp;loc))
    {

      // This should not happen if a valid field name was passed.

      _PutStr("\nFindVar Failure") ;

    }
    else
    {

      // Fill a value structure with field values.

      _Load(&amp;loc,&amp;val) ;

      // This code is written to support fields that are of
      // type character only.

      if (val.ev_type == 'C')
      {

        // Create a null-terminated string which contains the
        // text in the specified field.

        if (!_SetHandSize(val.ev_handle, val.ev_length + 1))
        {
          _Error(182); // "Insufficient memory"
        }

        _HLock(val.ev_handle) ;
        fldtxt = (char FAR *) _HandToPtr(val.ev_handle) ;
        fldtxt[val.ev_length] = '\0' ;

        // Display the values on the screen.


        _PutStr("\n") ;
        _PutStr(fldtxt) ;

        // Unlock the handle to the text.

        _HUnLock(val.ev_handle) ;
      }
      else
      {
        _PutStr("\nThe specified field is not of type Character.") ;

      }
    }
  }
</PRE>}
<P>
FoxInfo myFoxInfo[] =
{
<PRE>     {"READDB", (FPFI) ReadDb, 2, "I,C"},
</PRE>};
<P>
FoxTable _FoxTable =
{
<PRE>     (FoxTable FAR *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
</PRE>};
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00  FoxWin 2.60a<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxsetupAdmin<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Make Auto-Increment Keys in Wizard-Generated Screens </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126404">
<META NAME="KBModify" CONTENT="1997/03/18">
<META NAME="KBCreate" CONTENT="1995/02/22">
<META NAME="Keywords" CONTENT="FxprgGeneral kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  While other database applications have a native field type (known as a Counter type) that is defined to automatically increment a counter, the implementation of such field behavior in FoxPro is left to the application developer.  This article shows...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA7O,QA7N,QAML,QBXS,QAM9,QALX,QAKC,QDMH,QAEF,QAGB,QAH4,QAGC,QBWS,QBC6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Make Auto-Increment Keys in Wizard-Generated Screens</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126404</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.60a 3.00 | 2.60a  | 2.60a
<PRE>WINDOWS    | MS-DOS | MACINTOSH
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, version 2.6a
<LI>Microsoft FoxPro for MS-DOS, version 2.6a
<LI>Microsoft FoxPro for Macintosh, version 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
While other database applications have a native field type (known as a
Counter type) that is defined to automatically increment a counter, the
implementation of such field behavior in FoxPro is left to the application
developer.
<P>
This article shows by example one method you can use to programmatically
increment a key field when a new record is added. It gives you the changes
necessary to add a counter field to a screen previously generated by the
Screen Wizard.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In FoxPro, the developer has control over the treatment of key values in
records. The developer can decide at the design stage how keys will be
generated and handled in the application.
<P>
Considerations such as the following should enter into consideration:

<UL><LI>Methods of maintaining referential integrity.

<LI>Whether or not to recycle deleted keys.

<LI>Implications of collision-handling when appending records in a
   multi-user environment.
<P>
</UL>All these factors are affected by the method you choose.
<P>
<P><h3>Creating a Unique Key</h3>
 
<P>
In most cases, you can create a unique key from the data itself by using a
Social Security number or a combination of a phone number and name. If this
type of data does not exist in the record, a combination of system
functions may be used to create a unique key, such as SYS(1), which
produces the Julian day number concatenated with SYS(2), which returns the
number of seconds elapsed since midnight. Obviously, this method will work
only if it can be guaranteed that no more than one record will be created
per second, a consideration that may not be valid in a multiuser
application. For more information about this, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q106708.htm">Q106708</A></B>
   TITLE     : How to Generate Unique Key Field Values

</PRE><h3>Using a Counter Field as the Unique Key</h3>
 
<P>
In many cases, a simple counter field, incremented when a new record is
added, is adequate to ensure a unique key for each record in the database.
<P>
<P><h3>Adding Counter Field to Screen Previously Generated by Screen Wizard</h3>
 
<P>
The example given in this article is intended for a single-user system
only. As the next available key is stored in memory prior to actually
creating the record, the original last key is not changed. In a multiuser
environment any number of sessions could receive the same last key, causing
records which should be unique to share the same key.
<P>
You'd need to create a different scheme for multiuser applications. For
example, a function could handle requests for obtaining the next key and
deny any other requests until the new record is written. The application
would then need to increment the key immediately (before the record is
written), which means it would not be visible on the screen during data
entry.
<P>
In situations where deleted records are purged to archive files, the 'last
record' method would not be appropriate. If the last record is deleted, the
next record added is given the same key as the deleted one. To ensure that
current records will not have duplicate archived keys, use a separate table
to hold the highest key value.
<P>
In a multiuser environment, you could lock the key table and the data
table, update both tables using the next value, add the new record to the
data table, and then unlock the key table for use by the next new record.
<P>
As previously mentioned, adding records should be handled by a single
procedure to avoid collisions. The procedure should check a flag field to
see if it is set, which would indicate that the procedure is currently in
use. If the procedure is not in use, set the flag and execute the
procedure. If the procedure is called from another session while the flag
is set, the application should ignore the request and try again later. Once
the procedure has added the record and updated the key, it should reset the
flag to allow more records to be added.
<P>
<P><h3>Step-by-Step Example for Single-User Applications</h3>
 
<P>
In this example, the key is of character type, and no records are in the
database that is associated with the screen.
<P>
The modifications made in this example can be applied to existing screens,
and will still work if there are already records in the database. However,
if a key field does not yet exist, add one by following this procedure:

<OL><P><LI>In the Command window, enter:
<P>
   MODIFY STRUCTURE

<P><LI>Add a field with an appriate name (such as KEY) to the field list,
   allowing as many characters as necessary to hold the maximum records
   anticipated. For example, four characters would allow up to 9,999 keys.

<P><LI>Choose OK, and make the changes permanent.

<P><LI>In the Command window, enter the following to assign key values:
<P>
<PRE>   REPLACE ALL key WITH RECNO()   &amp;&amp; If the KEY field is numeric

   -or-

   REPLACE ALL key WITH TRANSFORM(RECNO(),'L@ 9999') &amp;&amp; If KEY is character

</PRE></OL>The following steps illustrate an automatically incrementing counter field
where each record added to an invoice database must have as its invoice
number the value of the previous invoice plus one. Because this is for
illustration only, the instructions accept defaults for screen generation
and assumes that the sample database to be the only one open.
<P>
To follow this example exactly as written, copy the INVOICES.DBF file from
the Tutorial directory to the FoxPro home directory. Once copied, Choose
File, Open... and select the new INVOICES.DBF in the FoxPro home directory.
From the Command window, issue the command:
<P>
<PRE>   ZAP

</PRE>Then choose Yes to remove all the records from INVOICES.DBF.
<P>
NOTE: The comments contained in the code below are optional, and as such
may be omitted for brevity.

<OL><P><LI>Run Screen Wizard to create a new screen (Run, Wizards, Screen).

<P><LI>Choose Finish, Modify with Design tool, then Finish again.

<P><LI>Double-click the 'ino' field.

<P><LI>Change the Field radio button from Input (Get) to Output (Say).

<P><LI>Change the format to 9999 if using FoxPro for Windows or FoxPro for
   Macintosh, and select the Leading Zeros check box under Editing Options
   when the Numeric radio button is selected.

<P><LI>Select the Refresh Output Field check box. Then choose OK.

<P><LI>Press CTRL+S (or CMD+N in FoxPro for Macintosh), or click Open All
   Snippets from the Screen menu pad

<P><LI>While in the Setup window, press CTRL+F or choose Find from the Edit
   menu.

<P><LI>Type the following in the Look for... field, and then choose the Find
   button:
<P>
   APPEND BLANK

<P><LI>While the line is highlighted, overwrite it with the following:
<P>
<PRE>    DO btn_val WITH 'ADD'   &amp;&amp; added for counter field

</PRE><P><LI>Press CTRL+END to go to the end of the code, or scroll down.

<P><LI>In a new line below SCATTER MEMVAR MEMO, add this code:
<P>
<P><PRE>    * section added for counter field
<PRE></PRE>    IF RECCOUNT()=0   &amp;&amp; no records in dbf
       m.ino=1        &amp;&amp; initial invoice number
    ENDIF
    * end of added section

</PRE><P><LI>Close or minimize the Setup window.

<P><LI>To clean up, press Ctrl+F, and look for the following keyed in
<P><PRE>    exactly as:
</PRE><P>
<P><PRE>    equal_sign-spacebar-apostrophe-ADD-apostrophe
    = 'ADD'
</PRE>
<P><LI>Insert the following code on below the 'ADD' line:
<P>
<P><PRE>    * section added code for counter field
<PRE></PRE>    IF RECCOUNT()&lt;&gt;0        &amp;&amp; file has records, so process
       ord=ORDER()          &amp;&amp; store current index order (if any)
       SET ORDER TO         &amp;&amp; use file in natural order
       SET DELETED OFF      &amp;&amp; find last record even if deleted
       GO BOTTOM            &amp;&amp; go to the last record
       nxt=ino+1            &amp;&amp; next number stored to variable nxt
       SET DELETED ON       &amp;&amp; reset hiding deleted records
       SET ORDER TO (ord)   &amp;&amp; restore database order(if any)
       SCATTER MEMVAR MEMO BLANK   &amp;&amp; &lt;&lt; original existing line
       m.ino=nxt            &amp;&amp; store the new number
    ENDIF
    * end of added section

</PRE><P><LI>Close and save the Cleanup code snippet.

<P><LI>Choose Program, Generate, and then DO INVOICES.SPR.

<P><LI>When prompted, choose Yes to add a new record. Note that the invoice
<P><PRE>    number is now 0001. Save the record. Continue to add and save records.
    Then delete the last record. Add a new record. Note that the invoice
    number is the next one in the series and that the deleted invoice is
    removed from the series. Do not save the record; choose Cancel instead.
    Add another record, and note that the same number is still available.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00  FoxWin FoxDos FoxMac 2.60a<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgGeneral<BR>
Keywords            : FxprgGeneral kbprg<BR>
Version             : 2.60a 3.00 | 2.60a  | 2.60a<BR>
Platform            : MACINTOSH MS-DOS WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

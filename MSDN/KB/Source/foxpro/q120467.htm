

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Allocate Global Memory from Within the LCK </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120467">
<META NAME="KBModify" CONTENT="1995/08/28">
<META NAME="KBCreate" CONTENT="1994/09/12">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  It may be necessary to allocate global memory within an FLL. To do this, use the following Windows API functions: GlobalAlloc(), GlobalLock(), GlobalUnlock(), and GlobalFree().  MORE INFORMATION  To use Windows global memory, follow these steps:  1...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBW6,QANG,QA7H,QAGI,QAH4,QDL9,QBWQ,QBWO,QBWN,QACJ,QBSO,QAHC,QAI4,QAWH,QDMW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Allocate Global Memory from Within the LCK</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120467</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro Library Construction Kit for Windows,
   version 2.5x, 2.6, 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It may be necessary to allocate global memory within an FLL. To do this,
use the following Windows API functions: GlobalAlloc(), GlobalLock(),
GlobalUnlock(), and GlobalFree().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To use Windows global memory, follow these steps:

<OL><P><LI>Use the GlobalAlloc() Windows API function to request the memory. The
   global heap is limited only by the systems memory, so you can request
   any amount of memory. GlobalAlloc() allocates memory in multiples of 32.
   For example, if you request 50 bytes, GlobalAlloc() will allocate 64
   bytes.

<P><LI>To use the allocated memory, lock the memory block with GlobalLock(). If
   GlobalLock() is successful, it returns a far pointer to the starting
   point of the allocated memory block. This pointer can be used in
   conjunction with the LCK to write to the specified location.

<P><LI>When you no longer need the global memory block, unlock and release it
   by using GlobalUnlock() and GlobalFree().
<P>
</OL><h3>Example Code</h3>
 
<P>
The following program passes a string to the FLL and allocates enough
global memory for the string.
<P>
Fox Code:
<P>
<PRE>   SET LIBRARY TO MEMALLOC.FLL
   =MEMALLOC('THIS IS A TEST')

</PRE></OL>C Code:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;pro_ext.h&gt;

   static      HANDLE      hMem;
   char      FAR     *pmem;
   DWORD        before;
   LPSTR     lpstr;

   void PutLong(long v,int width)
   {
   Value val;
   val.ev_long  = v;
   val.ev_width = width;
   val.ev_type  = 'I';
   _PutValue(&amp;val);
   }

   void MemAlloc(ParamBlk FAR *parm)
   {
   before = GetFreeSpace(0);
   _PutStr("Total memory avaiable in the Global Heap before memory
      allocation = "); PutLong(before,10);
   if(hMem = GlobalAlloc(GMEM_MOVEABLE, parm-&gt;p[0].val.ev_length))
   {
      _PutStr("\nAmount of memory allocated =");
      PutLong((before-GetFreeSpace(0)),3);
      lpstr=GlobalLock(hMem);
      lstrcpy(lpstr,(LPSTR)_HandToPtr(parm-&gt;p[0].val.ev_handle));
      GlobalUnlock(hMem);
      GlobalFree(hMem);
   }
   _PutStr("\nAmount of memory after hMem is is release = ");
   PutLong(GetFreeSpace(0),10);
   }

   FoxInfo myFoxInfo[]={
      {"MEMALLOC",(FPFI)MemAlloc,1,"C"},
   };

   FoxTable _FoxTable={
      (FoxTable FAR*)0, sizeof(myFoxInfo) / sizeof(FoxInfo), myFoxInfo
   };
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxWin 2.50 2.50a 2.50b 2.60 2.60a LCK API<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxtoolLck<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How FoxPro Passes Parameters to Subroutines </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101025">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1993/07/01">
<META NAME="Keywords" CONTENT="kbenv kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  By default, FoxPro passes parameters to procedures (subroutines called with a DO              command) by reference and parameters to functions [subroutines called with a =            () or ?            () command] by value. The information below d...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAD7,QAH7,QAH6,QAHE,QAKD,QAFF,QABA,QAB9,QAH4,QAGI,QAB3,QAJ2,QAY5,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How FoxPro Passes Parameters to Subroutines</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101025</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5 and 2.5a
<LI>Microsoft FoxPro for MS-DOS, versions 1.02, 2.0, 2.5, and 2.5a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, FoxPro passes parameters to procedures (subroutines called
with a DO &lt;subroutine&gt; command) by reference and parameters to
functions [subroutines called with a =&lt;subroutine&gt;() or ?&lt;subroutine&gt;()
command] by value. The information below describes how parameters are
passed to subroutines.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When parameters are passed by value, a copy of the original variable
is made in the routine. The variable declared in the subroutine is a
different variable from the original variable. When control is passed
back to the calling program, the variables declared in the routine are
released and the value of the original variable is not changed.
<P>
When parameters are passed by reference, a reference to the original
variable is made in the routine. Any change made to the variable in
the subroutine is reflected in the calling program.
<P>
<P><h3>Passing Parameters to User-Defined Functions</h3>
 
<P>
By default, parameters are passed by value to user-defined functions.
In essence, any change made to the variables declared as parameters in
the subroutine will not affect the original variables in the calling
program. For example:
<P>
<PRE>   * Main program
   CLEAR
   mvar1=1
   mvar2=2
   mvar3=ADDIT(mvar1)   &amp;&amp; Passing mvar1 as a parameter: by value
   ?
   ?"Value of memory variables after the routine is executed"
   DISP MEMO LIKE m*
   ?
   ?"The value of mvar1 is unchanged"

   FUNCTION ADDIT
   PARAMETER mpar1
   mpar1=mpar1+1    &amp;&amp; Copy of mvar1 is incremented
   mvar3=mpar1+1     &amp;&amp; Variable to be returned to the calling program.
   ?"Value of memory variables in the routine"
   DISPLAY MEMORY LIKE m* &amp;&amp; mvar1=1 and mpar1=1
   RETURN mvar3      &amp;&amp; Value returned to the calling program mvar3

</PRE>To pass a parameter by reference to a user-defined function, use the
at sign (@) before the variable passed. For example:
<P>
<PRE>   mvar3=ADDIT(@mvar1)

</PRE>To change the default and pass all the parameters by reference, use
SET UDFPARMS command. For example:
<P>
<PRE>  SET UDFPARMS TO REFERENCE

</PRE><h3>Passing Parameters to Procedures</h3>
 
<P>
By default, FoxPro passes parameters by reference to procedures. Any
changes made to variables in the subroutine will be made to the
original variable. Additionally, FoxPro hides the original variables
passed as parameters in the subroutine. For example:
<P>
<PRE>   * Main program
   CLEAR
   mvar1=1
   mvar2=2
   DO ADDIT WITH mvar1  &amp;&amp; Passing mvar1 as a parameter by reference
   ?
   ?"Value of memory variables after the routine is executed"
   DISPLAY MEMORY LIKE m*
   ?
   ?"The value of mvar1 is modified"

   PROCEDURE  ADDIT
   PARAMETER mpar1
   mpar1=mpar1+1            &amp;&amp; Reference to mvar1 is incremented
   ?"Value of memory variables in the routine"
   DISPLAY MEMORY LIKE m*   &amp;&amp; mvar1=2 and mpar1= @mvar1

</PRE>To pass a parameter to a procedure by value, use parentheses around
the variable. For example:
<P>
<PRE>   DO ADDIT WITH (mvar1)

</PRE><h2>REFERENCES</h2>
 
<P>
"Language Reference," version 2.5, page L3-1012
<P>
"Using FoxPro Version 2," Slater and Arnott, pages 613-614, Que, 1992
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00  FoxDos FoxWin 1.02 2.00 2.50<BR>
2.50a 2.x array<BR>
KBCategory: kbenv kbprg<BR>
KBSubcategory: FxenvMemory<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Change the Default Source of Printer Programmatically </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157629">
<META NAME="KBModify" CONTENT="1997/12/22">
<META NAME="KBCreate" CONTENT="1996/10/15">
<META NAME="Keywords" CONTENT="FxprgGeneral FxprintDriver kbhowto kbprint">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  To set the default source (upper/lower tray) of a printer programmatically under Windows 95 and Windows NT 4.0, use the SetPrinter() Win32 API function.  Note that the SetPrinter() API call is platform-dependent and works only on Windows 95 and Win...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOX,QAUD,QACT,QBWP,QABA,QDL9,QBWQ,QBWO,QBWN,QA4Q,QABL,QA56,QA55,QAK6,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Change the Default Source of Printer Programmatically</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157629</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.00b 5.00
WINDOWS
kbprint kbhowto
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To set the default source (upper/lower tray) of a printer programmatically
under Windows 95 and Windows NT 4.0, use the SetPrinter() Win32 API
function.
<P>
Note that the SetPrinter() API call is platform-dependent and works only on
Windows 95 and Windows NT 4.0. (It does not work on earlier versions of
Windows NT or on a 16-bit platform.)
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To set or change the default source of printer under Windows 95 and Windows
NT 4.0, call the following:
<P>
<PRE>   SetPrinter(HANDLE hPrinter, DWORD dwLevel, LPBYTE lpbPrinter, DWORD
</PRE>dwCommand)
<P>
Obtain the hPrinter parameter from OpenPrinter() as a handle that
identifies the desired printer. Set the dwLevel parameter to 2, and point
lpbPrinter to the PRINTER_INFO_2 structure. Set the dwCommand parameter to
0. Fill out the PRINTER_INFO_2 structure appropriately.
<P>
There are few ways of changing the (upper/lower) printer tray dynamically.
The most common is to use PCL printer commands. To do this, insert the
escape sequence in the file, along with the content you are trying to
print. Unfortunately, this method makes it difficult to work with Visual
FoxPro since you are limited by the printer's settings (you need to know
the designated printer beforehand), and the reports in Visual FoxPro use
the printer driver internally once the printing job is established.
<P>
The following sample program illustrates the contents of the .dll file
written in Microsoft Visual C++ 4.0. It shows a way to retrieve a handle
identifying the specified printer or print server.
<P>
NOTE: This sample program illustrates many Microsoft Visual C++ commands.
The use of these commands is beyond the scope of Microsoft FoxPro Product
Support. Users with substantial experience using API routines should be
able to write the following sample .dll file. For this sample to work, you
need a .def file to export the chgbin function.
<P>
Sample Program (DLL to Change the Default Source of Printer)
 
<P>
<PRE>#include "stdio.h"
#include &lt;windows.h&gt;

</PRE>BOOL APIENTRY DllMain(HANDLE hInst, DWORD ul_reason_being_called, LPVOID
lpReserved)
{
<PRE>     return 1;
     UNREFERENCED_PARAMETER(hInst);
     UNREFERENCED_PARAMETER(ul_reason_being_called);
     UNREFERENCED_PARAMETER(lpReserved);
</PRE>}
<P>
<P>
<PRE>#define ErrReturn   if (GetLastError()) {ClosePrinter(hPrinter);
</PRE>printf("error"); return -1;}
<P>
short FindID(LPPRINTER_INFO_2 pPrinter, int flg);
<P>
BOOL MyFreeMem(LPVOID pMem)
{
<PRE>   return VirtualFree(pMem, 0, MEM_RELEASE);
</PRE>}
<P>
<PRE>#define UPPER_BIN 1
#define LOWER_BIN 2


int APIENTRY chgbin(char *ptrname, int flg)
</PRE>{
<PRE>   HANDLE   hPrinter = NULL;
   DWORD    cbBuf;
   DWORD    pcbNeeded = 0;
   LPTSTR   pPrintername;
   short    nSource;

   pPrintername = ptrname;

   PRINTER_DEFAULTS pd;
   ZeroMemory(&amp;pd, sizeof(pd));
   pd.DesiredAccess = PRINTER_ALL_ACCESS;

   int result1 = OpenPrinter(pPrintername,&amp;hPrinter, &amp;pd);
   ErrReturn;
   int result = GetPrinter(hPrinter, 2, NULL, 0, &amp;pcbNeeded);
   DWORD Error = GetLastError( );

    if( Error == ERROR_INSUFFICIENT_BUFFER )
    {
   BOOL  bRet = FALSE;
                HANDLE  hMem = NULL;
   LPPRINTER_INFO_2  pPrinter;

        hMem = GlobalAlloc(GHND, pcbNeeded);
        if (hMem) pPrinter = (LPPRINTER_INFO_2)GlobalLock(hMem);
        cbBuf = pcbNeeded;
   DWORD cbNeeded;
   if (GetPrinter(hPrinter, 2, (LPBYTE)pPrinter, pcbNeeded, &amp;cbNeeded))
   {
      if ((nSource = FindID(pPrinter,flg)) &lt; 0) return -1;

      pPrinter-&gt;pDevMode-&gt;dmDefaultSource = nSource;
      pPrinter-&gt;pDevMode-&gt;dmFields = DM_DEFAULTSOURCE;

      DocumentProperties(NULL,hPrinter,pPrintername,pPrinter-
</PRE>&gt;pDevMode,pPrinter-&gt;pDevMode,
<PRE>            DM_IN_BUFFER|DM_OUT_BUFFER);
      SetPrinter(hPrinter,2,(unsigned char *)pPrinter,0);

      MyFreeMem(pPrinter);
      ClosePrinter(hPrinter);
   }
    }

    Error = GetLastError( );
    return 0;
</PRE>}
<P>
<P>
typedef struct _tagDevCaps
{
<PRE>   TCHAR    pPrinterName[80];
   TCHAR    pPort[80];
   WORD  wCurCap;
   WORD    wCurPlatForm;
   HINSTANCE hDriver;   //only used if on Win32s;
   DWORD  (CALLBACK* pfnDevCaps) (
      LPTSTR    pDevice,   // address of device-name string
      LPTSTR    pPort,  // address of port-name string
      UINT      fwCapability, // device capability to query
      LPTSTR    pOutput,   // address of the output
      LPDEVMODE pDevMode   // address of structure with device data
   );
</PRE>} DEVCAPS;
<P>
LPVOID MyAllocMem(DWORD cb)
{
<PRE>   return VirtualAlloc(NULL, cb, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
</PRE>}
<P>
<PRE>#define MAX_AMOUNT      256
#define MAX_BINS   16

</PRE>short FindID(LPPRINTER_INFO_2 pPrinter, int flg)
{
<PRE>   DEVCAPS MyDevCaps;
   MyDevCaps.hDriver = NULL;
   MyDevCaps.pfnDevCaps = NULL;
   BOOL bRet = FALSE;

   lstrcpy(MyDevCaps.pPrinterName,  pPrinter-&gt;pPrinterName);
   lstrcpy(MyDevCaps.pPort,  pPrinter-&gt;pPortName);
   MyDevCaps.pfnDevCaps = (LPFNDEVCAPS)&amp;DeviceCapabilities;

   DWORD       dwBufSize = 0;
   BOOL        bResult = 1;
   WORD FAR    *pawBinList;

   if (MyDevCaps.pfnDevCaps)
   {
       // get number of bins
       dwBufSize = MyDevCaps.pfnDevCaps ((LPTSTR )MyDevCaps.pPrinterName,
</PRE>(LPTSTR )MyDevCaps.pPort, (WORD)DC_BINS,
<PRE>                                   (LPTSTR )NULL, (LPDEVMODE)NULL);

       pawBinList = (WORD FAR *)MyAllocMem(dwBufSize* (sizeof(WORD)));

       // fill buffer with bin list
       MyDevCaps.pfnDevCaps ((LPTSTR )MyDevCaps.pPrinterName, (LPTSTR
</PRE>)MyDevCaps.pPort, (WORD)DC_BINS,
<PRE>                       (LPTSTR )pawBinList, (LPDEVMODE)NULL);

       // display bin info
       // protects from bad drivers

        if ((dwBufSize &gt; 0) &amp;&amp; (dwBufSize &lt; MAX_AMOUNT))
        {
      for (int i=0; i&lt; (int)dwBufSize;i++)
      {
           if (pawBinList[i] &lt; MAX_AMOUNT)
           {
                    if (pawBinList[i] &lt; MAX_BINS)
          {
                 if (flg == UPPER_BIN &amp;&amp; pawBinList[i] == UPPER_BIN)
            return (pawBinList[i]);
              else if (flg == LOWER_BIN &amp;&amp; pawBinList[i] == LOWER_BIN)
            return (pawBinList[i]);
          }
           }
      }
        }
       // clean up
       MyFreeMem(pawBinList);

       return (-1);
   }
   return (-1);
</PRE>}
<P>
<P>
<P><h3>In the FoxPro Application</h3>
 
<P>
<PRE>   DECLARE integer chgbin IN c:\bin.DLL STRING, INTEGER

   ** 1 = Upper   2 = Lower
   retval = chgbin("HP LaserJet 4Si MX",2)

   USE CUSTOMER
   LIST TO PRINT


</PRE><h3>Sample Program (Notes)</h3>
 

<UL><LI>To create a .dll file in Visual C++, please refer to Help in
   Microsoft Visual C++ 4.0.

<LI>The Chgbin.dll should be in the same directory as your project, or
   should be in the path of the Windows Win32 directory.
<P>
</UL>WARNING: Any use by you of the code provided in this article is at your own
risk. Microsoft provides this code "as is" without warranty of any kind,
either expressed or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
The function chgbin takes two parameters. The first parameter takes the
actual printer name. You could get the printer name from FoxPro by using
the APRINTER() function, which retrieves all the existing drivers in the
current windows operating system. The second parameter is a flag that tells
the chgbin function how to set the upper/lower tray. The numeric value 1
indicates that the upper tray should be used, and the numeric value 2
indicates that the lower tray is being used.
<P>
This DLL does not work properly if the printer is a network printer. The
network printer cannot be configured programmatically since multiple users
need to access the printer at the same time. In order to solve this
problem, you need to add a local printer driver and force the local driver
to print to a file (where the file is redirected to network printer
address). In this way, the printer driver can have its own settings, which
can be used by a FoxPro application to refer to the network printer.
<P>
It is highly recommended to change the setting back to its default (or
previous setting) once the program is terminated since other applications
might use the same driver.
<P>
Visual FoxPro stores the printer and bin to use inside the .frx file for
reports. So changing the paper source for the Printer Driver in Windows
does not cause the Report to print to a different paper source.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about Changing the default printer source, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q133163.htm">Q133163</A></B>
   TITLE     : How to Control Printer Attributes for a Report at Run Time
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprint kbhowto<BR>
KBSubcategory: FxprintDriver FxprgGeneral<BR>
Additional reference words: 3.00 3.00b 5.00 kbdse VFoxWin<BR>
Keywords          : FxprgGeneral FxprintDriver kbhowto kbprint<BR>
Version           : 3.00 3.00b 5.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

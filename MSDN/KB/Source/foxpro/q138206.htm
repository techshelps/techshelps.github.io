

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why "A"="" Is Not the Same as ""="A" </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138206">
<META NAME="KBModify" CONTENT="1997/08/13">
<META NAME="KBCreate" CONTENT="1995/10/15">
<META NAME="Keywords" CONTENT="FxprgGeneral vfoxwin kbcode kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When using the single equal sign (=) to test for a match between a string variable and an empty string, different results are obtained depending on which side of the equal sign the empty string (  ) is placed. This is unlike string comparison routi...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAG7,QALX,QAH4,QAJQ,QAVX,QAVW,QAM9,QBVV,QAY5,QAUD,QBFY,QAL3,QAHH,QAA7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Why "A"="" Is Not the Same as ""="A"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 13, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138206</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using the single equal sign (=) to test for a match between a string
variable and an empty string, different results are obtained depending on
which side of the equal sign the empty string ("") is placed. This is
unlike string comparison routines that do not test first for length, such
as the double equal sign (==) operator in Visual FoxPro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code that follows is an example of how a string comparison routine
might be written in the C programming language. Although this is not the
exact code used by the architects of Visual FoxPro, it has been written in
order to explain why a comparison between a string to an empty or null
string might result in a true or false, depending on which side of the
equal sign the null string appears.
<P>
<PRE>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int mycompare( char *, char * );        /* declare compare function  */

</PRE>main()
<PRE>   {
   char a1[]="Test", a2[]="";   /* data to compare */

   /* Call the compare function    */
   printf("%c\n", mycompare(a1,a2)?'T':'F' );

   /* Call the compare function, switching the addresses of the data */
   printf("%c\n", mycompare(a2,a1)?'T':'F' );
   }  /* end of main program */

   mycompare( char * c1, char * c2)
   {
   /* This is an example of C source code to compare two 'strings'   */
   /* in memory. The starting addresses of the two strings already   */
   /* in memory is passed to this function and assigned to local     */
   /* variables designated by "star" (meaning 'pointer to' or        */
   /* 'address of') c1 and "star" c2                                 */

   /* Create a local variable to hold the length of the string, loop */
   /* counter, and the result                                        */
   int iLen, iCounter, iResult;

   /* get the size of the string being compared to the primary string*/
   iLen = strlen( c2 );

   /* initially set the result to true (non-zero)                    */
   iResult = 1;

   for ( iCounter=0; iCounter &lt; iLen; iCounter++)
   /* A standard C 'for' loop. The first element of any C array is    */
   /* element zero, not element one, so you start the counter at zero.*/
   /* Now, the array in memory actually contains the 'string' plus    */
   /* an additional ASCII zero terminating character. You must        */
   /* subtract one from the length to get the actual length of the    */
   /* string being compared, thus iLen-1. Even so, because the loop   */
   /* counter begins at zero and the strlen function returns the      */
   /* actual length of the string, you loop as long as the counter    */
   /* is less than the length.                                        */
      {
      if ( *(c1+iCounter) != *(c2+iCounter) )
         if (iResult)
            iResult = 0;
      }

   /* This code goes through and compares both strings character     */
   /* by character until the end of string 2, pointed to by          */
   /* *(c2+iCounter, is reached. During this time, if the characters */
   /* do not match and the result is not already false, the result   */
   /* is set to false.                                               */

   /* But what happens if iLen-1 is already zero because the string  */
   /* is empty?  You never enter the loop and iResult remains set    */
   /* to 1 (true). This is returned by the function, thus            */
   /* "Test"="" is true. However, when you reverse the data, iLen-1  */
   /* contains the length of the string being compared. You enter    */
   /* the For loop and iResult is set to false when comparing the    */
   /* first character.                                               */

   return iResult;
   }  /* end of mycompare() function */

</PRE> 
<PRE>Keywords          : FxprgGeneral vfoxwin kbcode kbcode kbhowto
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 13, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

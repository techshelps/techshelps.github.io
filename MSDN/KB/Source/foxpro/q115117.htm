

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Return Matched Values from Two-Dimensional Arrays </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115117">
<META NAME="KBModify" CONTENT="1995/06/27">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Using the ASCAN() function to search an array poses no difficulty when you are performing simple lookups on one-dimensional arrays. When you are matching a value to an element in the first column of a two-dimensional array, another value within the...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALS,QAUD,QAKD,QAE1,QACI,QAHH,QDMN,QAJP,QA5V,QAJQ,QAUJ,QAKC,QALW,QAY5,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Return Matched Values from Two-Dimensional Arrays</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115117</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6
<LI>Microsoft FoxPro for MS-DOS, versions 2.5, 2.5a, 2.5b, 2.6
<LI>Microsoft FoxPro for Macintosh, versions 2.5b, 2.5c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using the ASCAN() function to search an array poses no difficulty when you
are performing simple lookups on one-dimensional arrays. When you are
matching a value to an element in the first column of a two-dimensional
array, another value within the same row can be returned easily with a
statement using the same function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the following sample code, a fictional tax table array is referenced by
matching the state abbreviation and returning its proper name as well as
the sales-tax percentage for that particular state.
<P>
<PRE>   * Returns full name of state and tax rate in formatted string
   DIMENSION a_Tax(4,3)
   a_Tax[1,1]='NC'
   a_Tax[1,2]='North Carolina'
   a_Tax[1,3]=6.75
   a_Tax[2,1]='TX'
   a_Tax[2,2]='Texas'
   a_Tax[2,3]=0.00
   a_Tax[3,1]='WA'
   a_Tax[3,2]='Washington'
   a_Tax[3,3]=5.00
   a_Tax[4,1]='WV'
   a_Tax[4,2]='West Virginia'
   a_Tax[4,3]=4.25
   * Alternatively, the state information could have been stored in a
   * database; USEing the STATE database and issuing either
   *   SELECT &lt;field_list|*&gt; FROM state INTO ARRAY a_Tax
   * or
   *   COPY [FIELDS &lt;field_list&gt;] TO ARRAY a_Tax

   state='WA'

   name =a_Tax[ASCAN(a_Tax,state)+1]

   tax  =ALLTRIM(STR(a_Tax[ASCAN(a_Tax,state)+2],5,2))
   * This could be done in three lines, but one is more efficient:
   * pos =ASCAN(a_Tax,state) &amp;&amp; position of matching state abbreviation
   * ntax=a_Tax[pos+2] &amp;&amp; tax for state (numeric value)
   * ctax=ALLTRIM(STR(a_Tax(ntax),5,2)) &amp;&amp; converts numeric to character

   ? 'The sales tax for ' + name + ' is ' + tax + '%.'

</PRE>This program results in the following output:
<P>
<PRE>   The sales tax for Washington is 5.00%.

</PRE><h3>How It Works</h3>
 
<P>
The ASCAN() function returns the relative position of the element that
matches the value being searched for. Even though the array is dimensioned
with three columns, it can be referenced as if it were a single column.
This means the second column of each row can be found one position past the
first column of each row, while the third column can be found two positions
past the first column.
<P>
ASCAN(a_Tax,state):
<P>
In this example, the a_Tax array is first scanned to find "WA", and its
position within the array is returned as the number 7. As can be seen
graphically from the above array assignments, the elements can be thought
of as existing in a linear format, allowing each to be referenced in
sequential order.
<P>
ASCAN(a_Tax,state)+1:
<P>
By adding a numeric offset that corresponds to the position of each column
past the first column, the values from those columns in the matching row
can be extracted. Since the second column is one position past the column,
adding 1 to the result of the previous ASCAN() now evaluates to 8, which is
the position for the proper name of the array row.
<P>
a_Tax[ASCAN(a_Tax,state)+1]:
<P>
Referencing the array with this expression as the element number returns
the proper name that matches the state abbreviation.
<P>
In the case of the third column, adding 2 to the offset returns the numeric
value for the tax percentage. Using the same method, any number of columns
can be addressed by adding the offset of the desired column.
<P>
a_Tax[ASCAN(a_Tax,state)+2]:
<P>
This expression references the tax rate found in the third column of the
row in which the matching state abbreviation is found.
<P>
STR(a_Tax[ASCAN(a_Tax,state)+2],5,2):
<P>
Because the tax rate is numeric and the intent is to present it in a
character string, the STR function converts it to character type having
five positions with two decimals (including the decimal point).
<P>
ALLTRIM(STR(a_Tax[ASCAN(a_Tax,state)+2],5,2)):
<P>
The ALLTRIM() function ensures that all spaces that would be produced with
single-digit rates are removed so that the string can be formatted to
include one space before and after the rate.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxMac FoxDos FoxWin 2.50 2.50a 2.50b 2.60<BR>
2.50c<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

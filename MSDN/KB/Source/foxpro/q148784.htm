

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use UDF() to Modify Default Scientific Notation Format </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148784">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/03/22">
<META NAME="Keywords" CONTENT="FxprgGeneral kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The default formatting that Visual FoxPro applies to numbers requiring scientific notation does not conform to a standard that many customers expect. You can use the user-defined function (UDF) in this article to address this issue.  MORE INFORMATI...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBB2,QAKD,QAUD,QDNG,QAKC,QABA,QAYV,QAEF,QABB,QACI,QAE5,QAI4,QDL9,QBWQ,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use UDF() to Modify Default Scientific Notation Format</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148784</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.5x 2.60 2.60a | 2.5x 2.60 2.60a 3.00 3.00b | 2.5x 2.60a | 2.60
<PRE>MS-DOS               | WINDOWS                    | MACINTOSH  | UNIX
</PRE>kbprg kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a, 2.5b, 2.6, 2.6a
<LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
<LI>Microsoft FoxPro for Macintosh, versions 2.5b, 2.5c, 2.6a
<LI>Microsoft FoxPro for UNIX version 2.6
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The default formatting that Visual FoxPro applies to numbers requiring
scientific notation does not conform to a standard that many customers
expect. You can use the user-defined function (UDF) in this article to
address this issue.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following program is a UDF() that can process a numeric value into the
standard format expected by many customers who have expressed a need for an
alternative format for scientific notation:
<P>
<P>
<PRE>PARAMETERS   nPassedVal

* Program:   Num2sci.prg
*
* Purpose:   Convert FoxPro formatted numeric values requiring scientific
*            notation to the frequently requested n.nnnE+n format.
* Syntax:    NUM2SCI(nExpression)
</PRE>* Arguments: nExpression is the numeric value to convert to the alternative
<PRE>*            format.
* Returns:   Character

</PRE>* Important notes about minimum and maximum ranges FoxPro will address:
* -------------------------------------------------------------------------
* SET DECIMALS makes no difference to any of this functionality.
* FoxPro will round values beginning at the fifteenth decimal place.
* Margin of error at 15 decimals or more is 3.410910030699E-15.
* The maximums for the STR() function are: STR(n,25,18).
*
* Any value of n.nE+19 or greater will resolve to scientific notation.
*
*   Ex: ALLTRIM(STR(1.234567890e+18,25,18))
<PRE>*       Resolves to: "1234567890000000000.00000"
</PRE>*   Ex: ALLTRIM(STR(1.234567890e+19,25,18))
<PRE>*       Resolves to: ".1234567890000004000E+20"
*
</PRE>* Any value passed with n.nE-16 or lower will resolve to equal zero.
*
*   Ex: ALLTRIM(STR(1.234567890e-15,25,18))
<PRE>*       Resolves to: "0.000000000000001000"
</PRE>*   Ex: ALLTRIM(STR(1.234567890e-16,25,18))
<PRE>*       Resolves to: "0.000000000000000000"
*
</PRE>* These are limitations in FoxPro that cannot be changed. This procedure,
* and therefore any data it processes, is limited to working within these
* constraints.
*
* -------------------------------------------------------------------------
<P>
* Stage 1: Convert to character
cConvStage1 = UPPER(ALLTRIM(STR(nPassedVal,25,18)))
* Find initial location of decimal point
nDecimalLoc = ATC(".", cConvStage1)
* Find 'E' beginning notation
<PRE>nExpLoc     = RAT("E", cConvStage1)

IF nExpLoc = 0                           &amp;&amp; No notation in resolved value.
  * Remove trailing zeros from character value
  DO WHILE SUBSTR(cConvStage1,LEN(cConvStage1),1) = '0'
    cConvStage1 = SUBSTR(cConvStage1,1,LEN(cConvStage1)-1)
  ENDDO
  cRetVal = SUBSTR(cConvStage1,1)    &amp;&amp; Return entire number included.
</PRE>decimals
ELSE
* Stage 2: Value deconstruction and element reformatting
* Swap positions of first two characters
<PRE>  cConvStage2a = SUBSTR(cConvStage1,2,1)+"."
  * Portion between the decimal and the 'E'
  cConvStage2b = SUBSTR(cConvStage1,3,nExpLoc-3)
  * Decrement notation by 1
  cConvStage2c = "E+"+ALLTRIM(STR(VAL(SUBSTR(cConvStage1,nExpLoc+2))-1))

  * process portion between decimal and the 'E' to remove trailing Zeros
  DO WHILE SUBSTR(cConvStage2b,LEN(cConvStage2b),1) = '0'
    cConvStage2b = SUBSTR(cConvStage2b,1,LEN(cConvStage2b)-1)
  ENDDO

  * Stage 3: Value reconstruction
  cRetVal = cConvStage2a+cConvStage2b+cConvStage2c
</PRE>ENDIF
RETURN cRetVal
<P>
To convert the value back to numeric, use the VAL() function against the
character data NUM2SCI() returned.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.50 2.60 2.60a 3.00 3.00b FoxWin FoxMac<BR>
FoxUnix FoxDos VFoxWin<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: FxprgGeneral<BR>
Keywords          : FxprgGeneral kbcode kbhowto kbprg<BR>
Version           : 2.00 2.5x 2.60 2.60a | 2.5x 2.60<BR>
Platform          : MACINTOSH MS-DOS UNIX WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

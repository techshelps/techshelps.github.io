

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Obtain Physical &amp; Virtual Memory with API Function Call </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177372">
<META NAME="KBModify" CONTENT="1997/12/04">
<META NAME="KBCreate" CONTENT="1997/11/26">
<META NAME="Keywords" CONTENT="FxprgGeneral vfoxwin kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Sometimes it is useful to know the amount of physical and virtual memory available to Windows and applications running in Windows. This is accomplished under Win32 from Visual FoxPro for Windows by calling the GlobalMemoryStatus() application progr...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALG,QBW6,QBWQ,QDL9,QBWO,QBWN,QAKC,QBWP,QAWH,QAUD,QAH4,QA59,QAC2,QAGI,QA3U V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Obtain Physical &amp; Virtual Memory with API Function Call</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177372</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0, 5.0a
   on the following platforms: NT, Win95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sometimes it is useful to know the amount of physical and virtual memory
available to Windows and applications running in Windows. This is
accomplished under Win32 from Visual FoxPro for Windows by calling the
GlobalMemoryStatus() application program interface (API) function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GlobalMemoryStatus() is passed a MEMORYSTATUS structure that is defined
as follows:
<P>
<PRE>   DWORD dwLength;          // Size of (MEMORYSTATUS).
   DWORD dwMemoryLoad;      // Percent of memory in use.
   DWORD dwTotalPhys;       // Bytes of physical memory.
   DWORD dwAvailPhys;       // Free physical memory file.
   DWORD dwTotalPageFile;   // Bytes of paging file.
   DWORD dwAvailPageFile;   // Free bytes of paging file.
   DWORD dwTotalVirtual;    // User bytes of address space.
   DWORD dwAvailVirtual;    // Free user bytes.

</PRE>To obtain the current memory statistics, create a program in Visual FoxPro
and type the following code:
<P>
<PRE>   * Declare API function to retrieve memory information.
   DECLARE GlobalMemoryStatus IN Win32API STRING @MemStat

   #DEFINE CR CHR(13)

   * long2str is passed a dwLength of 32; since structure is 32 bytes long.
   * long2str is appended to a 28 byte blank buffer; a total of 32 bytes.
   m.stru = long2str(32) + REPLICATE(CHR(0), 28)
   =GlobalMemoryStatus(@m.stru)

   * dwLength is 4 bytes, start extracting members at byte 5.
   * Each member is 4 bytes long.
   m.memoryload    = str2long(SUBSTR(m.stru, 5, 4))
   m.totalphys     = str2long(SUBSTR(m.stru, 9, 4))
   m.availphys     = str2long(SUBSTR(m.stru, 13, 4))
   m.totalpagefile = str2long(SUBSTR(m.stru, 17, 4))
   m.availpagefile = str2long(SUBSTR(m.stru, 21, 4))
   m.totalvirtual  = str2long(SUBSTR(m.stru, 25, 4))
   m.availvirtual  = str2long(SUBSTR(m.stru, 29, 4))

   =MESSAGEBOX("Percent memory in use: " + STR(m.memoryload) + CR + ;
   "Bytes of physical memory present: " + STR(m.totalphys) + CR + ;
   "Bytes available physical memory: " + STR(m.availphys) + CR + ;
   "Bytes of paging file: " + STR(m.totalpagefile) + CR + ;
   "Bytes available paging file: " + STR(m.availpagefile) + CR + ;
   "Total virtual memory: " + STR(m.totalvirtual) + CR + ;
   "Available bytes virtual memory: " + STR(m.availvirtual), ;
    0 + 64 + 0, ;
   "GlobalMemoryStatus() results")


   *******************************************************************
   FUNCTION long2str
   *******************************************************************
   * passed : 32-bit non-negative numeric value (m.longval).
   * returns : ASCII character representation of passed value in
   *           low-high format (m.retstr).
   * example :
   *    m.long = 999999
   *    m.longstr = long2str(m.long)

   PARAMETERS m.longval

   PRIVATE i, m.retstr

   m.retstr = ""
   FOR i = 24 TO 0 STEP -8
   m.retstr = CHR(INT(m.longval/(2^i))) + m.retstr
   m.longval = MOD(m.longval, (2^i))
   NEXT
   RETURN m.retstr

   *******************************************************************
   FUNCTION str2long
   *******************************************************************
   * passed:  4-byte character string (m.longstr) in low-high ASCII format.
   * returns: Long integer value.
   *
   * example:
   *   m.longstr = "1111"
   *   m.longval = str2long(m.longstr)

   PARAMETERS m.longstr

   PRIVATE i, m.retval

   m.retval = 0
   FOR i = 0 TO 24 STEP 8
   m.retval = m.retval + (ASC(m.longstr) * (2^i))
   m.longstr = RIGHT(m.longstr, LEN(m.longstr) - 1)
   NEXT
   RETURN m.retval
   * End of GlobalMemoryStatus code

</PRE>The results from the program are listed below.
<P>
The "Percent memory in use" figure has nothing to do with the percentage of
virtual memory in use at the time. In Microsoft documentation it is defined
as "a measure of how busy the memory management system is." It can be
calculated as 50 percent of the ratio of the committed (requested for use
by an application) memory pages to the physical (actual RAM) memory pages
managed by Windows 95.
<P>
The "Bytes of physical memory present" figure is the amount of physical RAM
minus any holes in the upper memory area (UMA), used by adapters, and so
forth.
<P>
The "Bytes of available physical memory" figure shows how much of this
physical memory is available.
<P>
The "Bytes of paging file" figure is the size of the current paging file.
This figure represents the number of bytes in the paging file that are
uncommitted to any process.
<P>
The "Total Virtual Memory" figure indicates the size of the process'
address space. Under Windows 95, this figure is exactly 4 MB short of being
2 GB. Under Windows 95 every process has a 2 GB private address space and
the lower 4 MB of this address space is protected. Under Windows NT, this
figure would always be 128 KB short of 2 GB, since Windows NT protects the
64 KB at the start and end of the process' 2 GB private address space.
<P>
All of these figures would be exactly the same, no matter which process
called GlobalMemoryStatus() except the "Available virtual memory" figure.
To calculate this value, GlobalMemoryStatus() adds up all the free regions
in the process' address space. This number can shrink and grow, but
indicates that Visual FoxPro for Windows has reserved approximately 9 MB of
its 2 GB address space at the moment the program was executing.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Advanced Windows: the Developer's Guide to the Win32 API for Windows NT
3.5 and Windows 95," Jeffrey Richter, chapters 4-6, Microsoft, 1995
<P>
"Windows 95 System Programming Secrets," Matt Pietrek, IDG Books Worldwide,
1995
<P>
Visual C++ Help; search on: GlobalMemoryStatus
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: API physical memory virtual memory<BR>
Keywords          : FxprgGeneral vfoxwin kbcode<BR>
Version           : WINDOWS:3.0,3.0b,5.0,5.0a<BR>
Platform          : WINDOWS winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

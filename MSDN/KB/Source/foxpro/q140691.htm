

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Manipulate &amp; Sort Character Arrays in the API </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140691">
<META NAME="KBModify" CONTENT="1995/12/11">
<META NAME="KBCreate" CONTENT="1995/12/05">
<META NAME="Keywords" CONTENT="kbtool kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article gives an example showing how to manipulate FoxPro character arrays in the API. The function mysort in this example takes a one- dimensional array of character information and sorts it using the Machine collation sequence. The sorting m...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAKD,QA6E,QAY5,QAOK,QAA7,QAML,QAB4,QAAP,QAKC,QBV8,QAB9,QAB6,QACI,QBHQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Manipulate &amp; Sort Character Arrays in the API</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 11, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140691</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article gives an example showing how to manipulate FoxPro character
arrays in the API. The function mysort in this example takes a one-
dimensional array of character information and sorts it using the Machine
collation sequence. The sorting mechanism that is used is a simple select
sort. This function requires a one-dimensional array of character values.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Xbase component is very simple. It creates a one-dimensional array and
then populates it with a non-ordered list of names. Then it displays the
array, it calls the sort function from the Library, and displays the array
again in sorted order.
<P>
<P><h3>Xbase Code Sample</h3>
 
*
*Begin Program code
*
CLEAR
SET LIBRARY TO MYSORT.FLL
DIMENSION marray(5)
STORE "ZACH" TO marray(1)
STORE "CHRIS" TO marray(2)
STORE "ANDY" TO marray(3)
STORE "TERRY" TO marray(4)
STORE "BOB" TO marray(5)
DISPLAY MEMORY LIKE ma*
=mysort(@marray)
DISPLAY MEMORY LIKE ma*
*
*End Program code
<P>
The C code used in the library routines is also fairly simple. The main
function in the library (the one registered in Visual FoxPro) is mysort.
Mysort simply receives an array reference and fills a Locator structure to
point to that array. Then it determines if the array is one or two
dimensional by using the _ALen() function. Then the _ALen() function is
used to determine the number of elements in the array and to set the max
value for the last element.
<P>
SelectSort is a recursive function that receives a pointer to the array and
a short that determines the imposed end of the array. SelectSort calls
itself until the imposed end of the array is the first element.
<P>
FindMax receives a pointer to the array and the number of the imposed last
element. It assumes that the first element has the maximum value in the
array and compares it to the remaining elements to find a higher value.
FindMax returns the position of the element with the highest value. The
values are compared using the StrCmp() function on the dereferenced
pointers to the array elements.
<P>
Exchange receives a pointer to the array and two short values representing
two array elements to swap positions. This function uses _Load() to fill
value structures for both elements then uses _Store() to place those values
into the other position in the array.
<P>
<P><h3>C Code Sample</h3>
 
<P>
<PRE>#include &lt;pro_ext.h&gt;

void Exchange(Locator FAR Exloc, short x_sub, short y_sub)
</PRE>{
<PRE>   Value FAR      tmpValx, tmpValy;
   int            Exerrcode;

   Exloc.l_sub1=x_sub;
   if (Exerrcode = _Load(&amp;Exloc, &amp;tmpValx))
      _Error(Exerrcode);
   else
   {
      Exloc.l_sub1=y_sub;
      if (Exerrcode = _Load(&amp;Exloc, &amp;tmpValy))
         _Error(Exerrcode);
      else
      {
         Exloc.l_sub1=x_sub;
         if (Exerrcode=_Store(&amp;Exloc, &amp;tmpValy))
             _Error(Exerrcode);
         Exloc.l_sub1=y_sub;
         if (Exerrcode=_Store(&amp;Exloc, &amp;tmpValx))
             _Error(Exerrcode);
      }
   }
   _FreeHand(tmpValy.ev_handle);
   _FreeHand(tmpValx.ev_handle);
    }

</PRE>short FindMax(Locator FAR Findloc, short MaxPos)
{
<PRE>   int         loop, max, result, errcode;
   Value FAR   MaxVal, Candidate;

   max=1;
   Findloc.l_sub2=1;
   for (loop=2; loop&lt;=MaxPos; loop++)
   {
      Findloc.l_sub1=max;
      if (errcode= _Load(&amp;Findloc, &amp;MaxVal))
         _Error(errcode);
       else
      {
         Findloc.l_sub1=loop;
         if (errcode= _Load(&amp;Findloc, &amp;Candidate))
            _Error(errcode);
          else
          {
            _HLock(MaxVal.ev_handle);
            _HLock(Candidate.ev_handle);
            result =
 _StrCmp(_HandToPtr(MaxVal.ev_handle),_HandToPtr(Candidate.ev_handle));
            if (result &lt; 0)
            {
               max=loop;
            }
            _HUnLock(MaxVal.ev_handle);
            _HUnLock(Candidate.ev_handle);
            _FreeHand(MaxVal.ev_handle);
            _FreeHand(Candidate.ev_handle);
         }
      }
   }
   return max;
</PRE>}
<P>
<PRE>void SelectSort(Locator FAR SSloc, short LastPos)
</PRE>{
<PRE>   int      max;

   if (LastPos &gt; 1)
   {
      max=FindMax(SSloc,LastPos);
      Exchange(SSloc,(short)max,LastPos);
      SelectSort(SSloc,(short)(LastPos-1));
   }
</PRE>}
<P>
<PRE>void MySort(ParamBlk FAR *pblk)
</PRE>{
<PRE>   Locator FAR      loc;
   int              max;

   loc = pblk-&gt;p[0].loc;

   if (_ALen(pblk-&gt;p[0].loc.l_NTI,AL_SUBSCRIPT2) == 0)
      loc.l_subs = 1;
   else
      loc.l_subs = 2;

   max=_ALen(pblk-&gt;p[0].loc.l_NTI,AL_ELEMENTS);

   SelectSort(loc,(short)max);

</PRE>}
<P>
FoxInfo myFoxInfo[] = {
<PRE>   {"MYSORT", (FPFI) MySort, 1, "R"},
</PRE>};
FoxTable _FoxTable = {
<PRE>   (FoxTable FAR *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
</PRE>};
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbtool kbhowto kbcode<BR>
KBSubcategory: FxtoolLck<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 11, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use AppleScript Scripts to Return Values to FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108622">
<META NAME="KBModify" CONTENT="1996/05/21">
<META NAME="KBCreate" CONTENT="1993/12/14">
<META NAME="Keywords" CONTENT="kb3rdparty kbtool kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The AppleScript language supports a RETURN statement that allows the author of a script to send a result back to the calling procedure. The calling procedure can be a FoxPro program, command, or procedure. Examples are provided below.  NOTE: AppleS...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDNQ,QAUD,QAKD,QAB9,QALW,QDO9,QAY2,QAYL,QAH4,QBV8,QBWI,QAPF,QAGI,QAE1,QAKC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use AppleScript Scripts to Return Values to FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 21, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108622</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Macintosh, version 3.0b
<LI>Microsoft FoxPro for Macintosh, version 2.5b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The AppleScript language supports a RETURN statement that allows the author
of a script to send a result back to the calling procedure. The calling
procedure can be a FoxPro program, command, or procedure. Examples are
provided below.
<P>
NOTE: AppleScript is manufactured by a vendor independent of Microsoft; we
make no warranty, implied or otherwise, regarding this product's
performance or reliability.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A script, which is a series of one or more commands supported by the
AppleScript language, is analogous to a procedure written in Microsoft
FoxPro or some other high-level language. Like procedures, a script can
communicate with a calling program by returning a value to it. To run a
script from within Microsoft FoxPro for Macintosh, use the following
command syntax:
<P>
<PRE>  RUNSCRIPT &lt;AppleScript&gt; [TO &lt;variable&gt; | &lt;field&gt;]

</PRE>If the script terminates with a RETURN statement, that value is returned to
FoxPro and stored in the optional parameter to the RUNSCRIPT command.
<P>
The following example is an elementary AppleScript script that simply
returns a Boolean, or logical, value:
<P>
<PRE>   return TRUE

</PRE>The following example illustrates how FoxPro for Macintosh can store a
value to a variable named retVal from an AppleScript script named MyScript:
<P>
<PRE>   RUNSCRIPT HD:Scripts:MyScript TO retVal

</PRE>Although AppleScript supports a variety of extended types, or classes, such
as lists, records, and aliases, FoxPro transforms them into simple
character expressions when storing them.
<P>
Since only a single value can be returned from an AppleScript script and
FoxPro for Macintosh does not support the passing of parameters to an
AppleScript script, a character expression delimited with commas or some
other value is recommended. Since AppleScript supports the list as a
standard class, it makes sense to take advantage of it to build a list of
return values. For example, the following AppleScript returns multiple
values to the calling program by building a list object:
<P>
<PRE>   set theList to {"First"}
   set theList to theList &amp; "Second"
   return theList

</PRE>If you save the script, name it MyScript2, and invoke it issuing the
following command in the FoxPro Command window:
<P>
<PRE>   RUNSCRIPT MyScript2 TO retVal

</PRE>The list is returned to FoxPro as a character string delimited with commas.
In this case, the character expression "First, Last" is returned, and the
individual values can be returned using FoxPro's arsenal of string-
manipulation functions such as SUBSTR() and AT(). The following FoxPro code
snippet extracts the elements from retVal and stores the individual values
to new variables:
<P>
<PRE>   var1 = SUBSTR(retVal,1,AT(',',retVal)-1)
   var2 = SUBSTR(retVAL,AT(',',retVal)+3)

</PRE>For more information about AppleScript, including a detailed explanation of
the language and its supported types, see the "AppleScript Developer's Kit"
from Apple Computer.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: vFoxMac 3.00b FoxMac 2.50b<BR>
KBCategory: kb3rdparty kbtool kbprg<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 21, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

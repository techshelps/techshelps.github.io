

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use the GetVolumeInformation API Call </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139547">
<META NAME="KBModify" CONTENT="1995/11/16">
<META NAME="KBCreate" CONTENT="1995/11/13">
<META NAME="Keywords" CONTENT="kbprg kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The Win32API set offers a rich collection of features that were not available to previous versions of FoxPro for Windows. This article shows by example how to call the Win32API GetVolumeInformation function.  MORE INFORMATION  The GetVolumeInformat...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAFI,QAHE,QAKD,QAH4,QAGI,QAUJ,QA7T,QBXS,QALW,QAKC,QBVV,QA4Q,QAPF,QBW5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use the GetVolumeInformation API Call</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 16, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139547</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Win32API set offers a rich collection of features that were not
available to previous versions of FoxPro for Windows. This article shows by
example how to call the Win32API GetVolumeInformation function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GetVolumeInformation function returns information about a file system
and volume whose root directory is specified in the call. While there are
several common file systems (such as NTFS, FAT, and CDFS), new file systems
may be in development that can affect things such as storage requirements
for applications, so calling GetVolumeInformation may provide valuable
information that you can use in your application. You can also use some of
the information returned by this call to calculate disk space and file
sizes. The following code shows how to declare and use this API call.
<P>
<P><h3>Code Sample</h3>
 
<P>
**---------------------------------------------------------------**
<PRE>** Program: Getvol.prg                                           **
** Purpose: Demonstrates how to declare and use the Win32        **
**          GetVolumeInformation API.                           **
</PRE>**---------------------------------------------------------------**
PUBLIC lpRootPathName, ;
<PRE>        lpVolumeNameBuffer, ;
        nVolumeNameSize, ;
        lpVolumeSerialNumber, ;
        lpMaximumComponentLength, ;
        lpFileSystemFlags, ;
        lpFileSystemNameBuffer, ;
        nFileSystemNameSize

lpRootPathName           = "E:\"      &amp;&amp; Drive and directory path
lpVolumeNameBuffer       = SPACE(256) &amp;&amp; lpVolumeName return buffer
nVolumeNameSize          = 256        &amp;&amp; Size of/lpVolumeNameBuffer
lpVolumeSerialNumber     = 0          &amp;&amp; lpVolumeSerialNumber buffer
</PRE>lpMaximumComponentLength = 256
<PRE>lpFileSystemFlags        = 0
lpFileSystemNameBuffer   = SPACE(256)
nFileSystemNameSize      = 256

</PRE>DECLARE INTEGER GetVolumeInformation IN Win32API AS GetVolInfo ;
<PRE>        STRING  @lpRootPathName, ;
        STRING  @lpVolumeNameBuffer, ;
        INTEGER nVolumeNameSize, ;
        INTEGER @lpVolumeSerialNumber, ;
        INTEGER @lpMaximumComponentLength, ;
        INTEGER @lpFileSystemFlags, ;
        STRING  @lpFileSystemNameBuffer, ;
        INTEGER nFileSystemNameSize

</PRE>RetVal=GetVolInfo(@lpRootPathName, @lpVolumeNameBuffer, ;
<PRE>                  nVolumeNameSize, @lpVolumeSerialNumber, ;
                  @lpMaximumComponentLength, @lpFileSystemFlags, ;
                  @lpFileSystemNameBuffer, nFileSystemNameSize)

</PRE>**---------------------------------------------------------------**
<PRE>** Return code values for file system flags. Return codes are    **
** shown in parentheses.                                         **
</PRE>**---------------------------------------------------------------**
<PRE>** FS_CASE_SENSITIVE     If this flag is set, the file system    **
**                       supports case-sensitive file names      **
**                       (0001h).                                **
**                                                               **
** FS_CASE_IS_PRESERVED  If this flag is set, the file system    **
**                       preserves the case of file names when   **
**                       it places a name on disk (0002h).       **
**                                                               **
** FS_UNICODE_ON_DISK    If this flag is set, the file system    **
**                       supports Unicode in file names as they  **
**                       appear on disk (0004h).                 **
**                                                               **
** FS_PERSISTENT_ACLS    If this flag is set, the file system    **
**                       preserves and enforces ACLs. For        **
**                       example, NTFS preserves and enforces    **
**                       ACLs, but HPFS and FAT do not (0008h)   **
**                                                               **
** FS_FILE_COMPRESSION   The file system supports file-based     **
**                       compression (0010h)                     **
**                                                               **
** FS_VOL_IS_COMPRESSED  The specified volume is a compressed    **
**                       volume; for example, a DoubleSpace      **
**                       volume (8000h)                          **
</PRE>**---------------------------------------------------------------**
<PRE>** The following information is pertinent to several of the      **
** listed flags:                                                 **
</PRE>**---------------------------------------------------------------**
** The FS_VOL_IS_COMPRESSED flag is the only indicator of volume-**
<PRE>** based compression. The file system name is not altered to     **
** indicate compression. This flag comes back set on a Double-   **
</PRE>** Space volume, for example. With volume-based compression, an  **
<PRE>** entire volume is either compressed or not compressed.         **
**                                                               **
</PRE>** The FS_FILE_COMPRESSION flag indicates whether a file system  **
** supports file-based compression. With file-based compression, **
<PRE>** individual files can be compressed or not compressed.         **
**                                                               **
** The FS_FILE_COMPRESSION and FS_VOL_IS_COMPRESSED flags are    **
** mutually exclusive; both bits cannot come back set.           **
</PRE>**---------------------------------------------------------------**
<PRE>** Note that the return value can be a combination of the        **
** individual return values. For example, a return value of 6    **
** indicates that case is preserved (FS_CASE_IS_PRESERVED) and   **
** the file system supports UNICODE in file names                **
** (FS_UNICODE_ON_DISK).                                         **
</PRE>**---------------------------------------------------------------**
<P>
DEFINE WINDOW ShowInfo FROM 0,0 TO 10,70 ;
<PRE>                       FLOAT CLOSE ;
                       TITLE "Drive Information for " + ;
                       ALLTRIM(lpRootPathName) ;
                       FONT "Courier",10

</PRE>ACTIVATE WINDOW ShowInfo
MOVE WINDOW ShowInfo CENTER
<P>
**--------------------------------------------------------------**
** Because several of the return values are padded with a null  **
<PRE>** terminator, you will need to strip off the null terminator   **
** in order to get the correct value, which is what is done     **
** using the LEFT, ALLTRIM, and LEN functions.                  **
</PRE>**--------------------------------------------------------------**
<PRE>@ 0,1 SAY "Drive &amp; path name            : " + ;
   ALLTRIM(lpRootPathName)

@ 1,1 SAY "Volume name                  : " + ;
   LEFT(ALLTRIM(lpVolumeNameBuffer),LEN(ALLTRIM(lpVolumeNameBuffer))-1)

@ 2,1 SAY "Max #/chars in vol name      : " + ;
   ALLTRIM(STR(nVolumeNameSize))

@ 3,1 SAY "Volume Serial #              : " + ;
   ALLTRIM(STR(lpVolumeSerialNumber))

</PRE>@ 4,1 SAY "Max #/chars in dir/file names: " + ;
<PRE>   ALLTRIM(STR(lpMaximumComponentLength))

@ 5,1 SAY "File System Flags            : " + ;
   ALLTRIM(STR(lpFileSystemFlags))

@ 6,1 SAY "File System type             : " + ;
   LEFT(ALLTRIM(lpFileSystemNameBuffer), ;
   LEN(ALLTRIM(lpFileSystemNameBuffer))-1)

@ 7,1 SAY "File Sys Name Size           : " + ;
   ALLTRIM(STR(nFileSystemNameSize))

</PRE>** ----------------------------&lt; End Code &gt;-------------------------- **
<P>
If this code is run on an NTFS partition, the following would be typical
output:
<P>
<PRE>Drive &amp; Path name             : E:\
Volume name                   : Scratch
Max #/chars in vol name       : 256
Volume Serial #               : 484847074
</PRE>Max #/chars in dir/file names : 255
<PRE>File System Flags             : 31
File System Type              : NTFS
File System Name Size         : 256

</PRE>The File System Flags value of 31 is a combination of the following file
system attributes:
<P>
<PRE>Flag                      Hex Value   Decimal Value
</PRE> 
<PRE>FS_CASE_SENSITIVE             1             1
FS_CASE_IS_PRESERVED          2             2
FS_UNICODE_ON_DISK            4             4
FS_PERSISTENT_ACLS            8             8
FS_FILE_COMPRESSION          10            16
</PRE> 
<PRE>Total return value:                        31

</PRE>The value returned for the serial number is the decimal notation of the
hexadecimal value displayed when you use a DIR command. In the information
shown previously in this article, the value that is displayed by the DIR
command for this drive is 1CE6-2DE2 (hexadecimal), which corresponds to the
serial number 484847074.
<P>
For additional information on this API function, please see search for
GetVolumeInformation in the Win32API Help file. Note that this help file is
available only on the compact disc version of Visual FoxPro; this help file
is not shipped with the disk version. For more information, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q139172.htm">Q139172</A></B>
   TITLE     : PRB: Visual FoxPro CD-ROM Compact Disc Includes Extra Files

</PRE>For information about the DECLARE - DLL command, please refer to the Visual
FoxPro Help file.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin drive volume disk attributes<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 16, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

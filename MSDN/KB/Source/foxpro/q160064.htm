

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Convert VBA to FoxPro for OLE Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q160064">
<META NAME="KBModify" CONTENT="1996/11/27">
<META NAME="KBCreate" CONTENT="1996/11/27">
<META NAME="Keywords" CONTENT="kbinterop kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  In order to perform OLE Automation with an application that uses Visual Basic for Applications (VBA), it is important to understand how to convert the VBA syntax for each command or function into a syntax that may be used in Visual FoxPro. Below is...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAIH,QAPN,QAYL,QBS0,QA5F,QAB9,QAW6,QAHE,QAEO,QBV8,QA56,QA55,QBFY,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Convert VBA to FoxPro for OLE Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 27, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q160064</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In order to perform OLE Automation with an application that uses Visual
Basic for Applications (VBA), it is important to understand how to convert
the VBA syntax for each command or function into a syntax that may be used
in Visual FoxPro. Below is a list of a few of the most common Visual Basic
for Applications (VBA) commands that may be used to perform OLE Automation
from Visual FoxPro to Microsoft Excel or Microsoft Word along with the
appropriate syntax for use in Visual FoxPro.
<P>
Since this list is very limited, it may be helpful to understand some of
the points of converting VBA to FoxPro:

<OL><P><LI>Use parentheses to surround the list of parameters.

<P><LI>Do not use Named parameters. Instead, just pass the value of the
   parameter in its specified position in the list.

<P><LI>You may use FoxPro variables and fields as parameters just as you would
   in FoxPro commands, as long as they are of the correct type.

<P><LI>If you are having problems getting a statement or method to work, make
</OL>sure that it works as written from within a module of the application
(Microsoft Excel or Microsoft Word). If it is available, you may also want
to try the statement from Visual Basic.
<P>
For a description of the methods and statements listed, along with
information about the use of specific parameters, please see the respective
Visual Basic Reference file for Microsoft Word or Microsoft Excel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>General Notes</h3>
 
<P>
Variables and parameters are prefixed by a single character indicating the
type of the variable or parameter as follows:

<UL><LI>c   Character
<LI>n   Numeric
<LI>o   Object
<LI>l   Logical
<P>
</UL>Some portions of certain commands may be optional. These portions are
enclosed by brackets [].
<P>
VBA has many built-in constants that may be used. However, FoxPro does not
know the values of these constants. To use them in FoxPro, you need to
define them as constants in the scope of your FoxPro program or form, or
replace them with their appropriate values.
<P>
<P><h3>Object Variables</h3>
 
<P>
oWord is the variable used to reference Microsoft WordBasic objects,
created with the following command:
<P>
<PRE>   oWord = CREATEOBJECT("Word.Basic")

</PRE></OL>oXL is the variable used to reference Microsoft Excel application objects,
created with the following command:
<P>
<PRE>   oXL = CREATEOBJECT("Excel.Application")

</PRE>oXLSheet is the variable used to reference Microsoft Excel worksheet
objects, created with one of the following command:
<P>
<PRE>   oXLSheet = CREATEOBJECT("Excel.Sheet")

   -or-

   oXLSheet = oXL.ActiveSheet

</PRE>oXLBooks is the variable used to reference Microsoft Excel Workbooks
Collection objects, created with the following command:
<P>
<PRE>   oXLBooks = oXL.Workbooks

</PRE>oXLWkBook is the variable used to reference Microsoft Excel workbook
objects, created with the following command:
<P>
<PRE>   oXLWkBook = oXL.ActiveWorkBook

</PRE><h3>Directory/File Management Statements</h3>
 
<P>
Add Method (Microsoft Excel)
<P>
<PRE>   Syntax:

   oXLBooks.Add([cTemplate])
   oXLSheet.Add([cBefore [, cAfter [,nCount [, nType]]]])
   oXLSheet.Add([oBefore [, oAfter [,nCount [, nType]]]])

</PRE>Cells Method (Microsoft Excel)
<P>
<PRE>   Syntax:

   oXL.Cells([nRowIndex [, nColumnIndex]])
   oXLSheet.Cells([nRowIndex [, nColumnIndex]])

</PRE>ChDir Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.ChDir(cPath)

   Example:

   oWord.ChDir("C:\MY DOCUMENTS")

</PRE>Close Method (Microsoft Excel)
<P>
<PRE>   Syntax:

   oXLBooks.Close()
   oXLWkBook.Close([lSaveChanges [, cFileName [, lRouteWorkbook]]])

</PRE>FileClose Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.FileClose([nSave])

</PRE>FileCloseAll Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.FileCloseAll([nSave])

</PRE>FileNew Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.FileNew([cTemplate [, nNewTemplate]])

   Example:

   oWord.FileNew("C:\MY DOCUMENTS\MYTEMPLATE.DOT")

</PRE>FileNewDefault Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.FileNewDefault()

</PRE>FileOpen Method (Microsoft Word)
<P>
<PRE>   Syntax:

   oWord.FileOpen(cName [, nConfirmConversions [, nReadOnly ;
      [, nAddToMru [, cPasswordDoc [, cPasswordDot [, nRevert ;
      [, cWritePasswordDoc [, cWritePasswordDot]]]]]]]])

   Example:

   oWord.FileOpen("C:\MY DOCUMENTS\MYWORD.DOC")

</PRE>Open Method (Microsoft Excel)
<P>
<PRE>   Syntax:

   oXLBooks.Open(cFileName [, nUpdateLinks [, lReadOnly [, nFormat ;
      [, cPassword [, cWriteResPassword [, lIgnoreReadOnlyRecommended ;
      [, nOrigin [, cDelimiter [, lEditable [, lNotify ;
      [, nConverter]]]]]]]]]]])

   Example:

   oXLBooks.Open("C:\MY DOCUMENTS\MYSHEET.XLS")

</PRE>Value Property (Microsoft Excel)
<P>
<PRE>   Syntax:

   object.Value = NewValue

   Example:

   oXL.ActiveWindow.ActiveCell.Value = "Hello"
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbinterop kbhowto<BR>
KBSubcategory: FxinteropExcel FxinteropOle FxinteropWinword<BR>
Additional reference words: 3.00 3.00b 5.00 kbdsd vfoxwin
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 27, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

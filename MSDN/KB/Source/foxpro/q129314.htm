

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCATTER &amp; GATHER Commands Have a New NAME Argument </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129314">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/04/24">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The SCATTER and GATHER commands have a new argument (NAME             ) that enables the Object Oriented Programming (OOP) features of Visual FoxPro. This article shows by example how to use this new argument.  MORE INFORMATION  SCATTER Command  SC...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAUJ,QAW6,QAUD,QBV8,QAB9,QA7O,QA7N,QA9V,QA9U,QA9T,QAJQ,QARM,QA5V,QAKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SCATTER &amp; GATHER Commands Have a New NAME Argument</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129314</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The SCATTER and GATHER commands have a new argument (NAME &lt;ObjectName&gt;)
that enables the Object Oriented Programming (OOP) features of Visual
FoxPro. This article shows by example how to use this new argument.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>SCATTER Command</h3>
 
<P>
SCATTER NAME &lt;ObjectName&gt; creates a row or record type of object with
properties that have the same name as the fields in the table. The values
of the properties are initialized to the same value as that of the fields
in the table. General and memo field types do not have a property created
for them in the object.
<P>
The syntax for the SCATTER command is:
<P>
SCATTER
<PRE>  [FIELDS &lt;FieldNameList&gt;
  | FIELDS LIKE &lt;Skeleton&gt; | FIELDS EXCEPT &lt;Skeleton&gt;][MEMO]
  TO &lt;ArrayName&gt; | TO &lt;ArrayName&gt; BLANK | MEMVAR | MEMVAR BLANK
  | NAME &lt;ObjectName&gt;

</PRE><h3>GATHER Command</h3>
 
<P>
GATHER NAME &lt;ObjectName&gt; writes a row or record of values from the object
to the table where the object properties have names that are identical to
the table field names.
<P>
The syntax for the GATHER command is:
<P>
GATHER FROM &lt;ArrayName&gt; | MEMVAR | NAME &lt;ObjectName&gt;
<PRE>  [FIELDS &lt;FieldList&gt; | FIELDS LIKE &lt;Skeleton&gt;
  | FIELDS EXCEPT &lt;Skeleton&gt;]
  [MEMO]

</PRE><h3>Code Sample</h3>
 
<P>
The following code defines a custom class that uses the SCATTER and GATHER
commands with their object argument, NAME. The code demonstrates:

<UL><LI>How to create the class.
<LI>How to instantiate the object from the class.
<LI>How to use SCATTER NAME and GATHER NAME to read and write to a table
   through an object.
<LI>How to send messages to the object to access properties of the object.
<P>
</UL>* Program start.
* The following three commands close files and set up the environment
* to send output to the Visual FoxPro main screen.
<P>
ACTIVATE SCREEN
CLEAR
CLOSE DATABASES
<P>
* The next three commands create a new table and add two new records
* with values.
<P>
CREATE TABLE test1 (Name C(10), Age N(3))
INSERT INTO test1 (Name,Age) ;
<PRE>                VALUES ('John Doe',43)
</PRE>INSERT INTO test1 (Name,Age) ;
<PRE>                VALUES ('Jane Smith',29)
</PRE>CLOSE DATABASES
<P>
* The following command creates a new object 'oTable' from the custom
* class 'Table' defined at the end of this program. It uses the table
* 'test1' that was just made. The object 'oRow' is automatically
* created during the creation of oTable from the SCATTER NAME &lt;object&gt;
* command and has a property created for each field in the table.
<P>
oTable=CREATEOBJECT('Table','test1')
LIST
<P>
* The following command sends a message to the object oTable to run the
* method Next which moves the record pointer in the table ahead one.
<P>
oTable.Next()
<P>
* The next two commands send messages to assign new values to the
* properties of oTable.oRow.
<P>
oTable.oRow.Name='New Name'
oTable.oRow.Age=1
<P>
* Note that the following command is calling the user defined Gather
* function or method which then calls the GATHER NAME command.
<P>
oTable.Gather()
<P>
* The following sends a message to object oTable to run the method Previous
* and assign new values to properties before writing them to the
* table 'test1.dbf' with GATHER NAME command.
<P>
oTable.Previous()
oTable.oRow.Name='VFP'
oTable.oRow.Age=0
oTable.Gather()
LIST
RETURN
<P>
***************************
<PRE>*** Class Definition    ***
</PRE>***************************
<P>
DEFINE CLASS Table AS Custom
<P>
* The keyword PROTECTED scopes the methods, properties and
* objects making them only accessible to methods in the
* current class definition.
<P>
PROTECTED cFileName
cFileName=''
oRow=''
<P>
* The Init event runs each time a new object is instantiated
* from its class.
<P>
PROTECTED FUNCTION Init(tcFileName)
<PRE>   * tcFileName: second parameter of CreateObject command,
   * which is the name of the file to open.
   SELECT 0
   * Open the file in the next available workarea.
   this.Open(tcFileName)
   * Note that the following command is calling the user
   * defined Scatter method, which then calls the
   * SCATTER NAME command.
   this.Scatter()
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Open(tcf)
<PRE>   * tcf: the filename to open.
   USE (tcf)
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Close
<PRE>   USE
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Next
<PRE>   IF NOT EOF()
      SKIP
   ENDIF
   IF EOF() AND NOT BOF()
      SKIP -1
   ENDIF
   this.Scatter()
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Previous
<PRE>   IF NOT BOF()
      SKIP -1
   ENDIF
   this.Scatter()
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Scatter
<P>
<PRE>   * SCATTER NAME &lt;objectname&gt;
   * In Visual FoxPro only, creates an object
   * the properties of which have the same names as
   * the fields in the table. The values of each
   * of the object's properties are the contents
   * of the fields in the table.

   SCATTER NAME this.oRow MEMO
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Gather
<P>
<PRE>   * GATHER NAME &lt;objectname&gt;
   * Specifies an object the properties of which
   * have the same names as fields in the table.
   * The contents of each field are replaced by
   * the value of the property with the same
   * names as the fields.

   GATHER NAME this.oRow MEMO
   RETURN .T.
</PRE>ENDFUNC
<P>
FUNCTION Destroy
<PRE>   this.Close()
   RETURN .T.
</PRE>ENDFUNC
<P>
ENDDEFINE
* End of code sample
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Fill an Array Used as the Rowsource of a Combo Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129159">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/04/19">
<META NAME="Keywords" CONTENT="kbtool kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When you define a list or combo box from an array, you should first declare the array as a property of the form. This causes the array to be visible to the form object, so the list or combo box can access it. You can then populate the array within ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAE1,QBVR,QBCF,QAKC,QAM3,QBC6,QBCE,QAO4,QADK,QAY2,QAG8,QAI2,QBWS,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Fill an Array Used as the Rowsource of a Combo Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129159</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you define a list or combo box from an array, you should first declare
the array as a property of the form. This causes the array to be visible to
the form object, so the list or combo box can access it. You can then
populate the array within one of the methods of the form. This article
describes two techniques that can be used to populate the array and view
its elements in a list box or a combo box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the Form Designer, you can declare an array as a property of a form by
choosing Form New Property from the System Menu. For more information about
declaring and referencing the array declared as a member of a form, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q128737.htm">Q128737</A></B>
   TITLE     : How to Declare Arrays on Forms

</PRE>When a list box or combo box is initialized, it lists its elements from the
source specified with the RowSource and RowSourceType properties. The
number of elements displayed in the list is evaluated at definition time.
If the RowSourceType is 5-Array, and if the array is not dimensioned at the
time the list is defined, only one element will show. The number of
elements displayed in the list is not automatically evaluated when a change
is made to the array. Therefore, if the array is populated after the
control is initialized, the number of elements in the list has to be
reevaluated.
<P>
Following are two methods you can use to populate an array used as the
rowsource of a list box. They ensure that all of the elements of the array
are visible, even when it is populated after the list box control has been
initialized.
<P>
<P><h3>Method One: Fill the Array in the Load Event Handler</h3>
 
<P>
The Load event of a form is executed before the objects are initialized.
When the list or combo box controls are initialized, the array contains
elements and the NUMBEROFELEMENTS property of the list box is calculated to
accommodate all of the elements of the list. Here's an example:

<OL><P><LI>Declare the array atest(5) from the Form, New Property menu.

<P><LI>In the method for the LOAD event of the form, type:
<P>
   SELECT Cust_ID FROM SYS(2004)+"SAMPLES\DATA\CUSTOMER";
<P><PRE>      INTO ARRAY thisform.atest
</PRE>
<P><LI>Place a Combo box on the form, and modify the following properties:
<P>
   RowSourceType=5-Array
   Rowsource='Thisform.atest'

<P><LI>Save and run the Form. The list displays 90 elements.
<P>
</OL><h3>Method Two: Populate the Array in the Init Event Handler</h3>
 
<P>
It is possible to place the code that initializes the array in the Init
event handler of the control or the Init of the Form. However, in both
cases, the array is filled after the number of elements for the list has
been set. Because it is not dynamically evaluated, it is necessary to
reevaluate the number of elements of the list to size it appropriately.
<P>
Use the REQUERY method to re-query the source of the combo box. It will
adjust the number of elements displayed in the list. You can also manually
set the number of elements of the list by setting the NumberOfElements
property of the list. The following example illustrates this behavior. To
run the example, copy and paste the code in a program file. When the form
is displayed, the list shows only one element. Click the Fill the list
button to view the elements of the array in the list.
<P>
<PRE>   ofrm1 = CREATEOBJECT('frm1')
   ofrm1.show
   READ EVENTS

</PRE></OL>***********************
** Class definitions **
***********************
<P>
<PRE>   DEFINE CLASS frm1 AS form
   DIMENSION ATEST(1)
   ADD OBJECT lsttest AS lstarray
   ADD OBJECT cmdtest AS cmdquit
   ADD OBJECT cmdquery AS cmdrequery
   Caption = "Press the Button to See Elements in List"
    PROCEDURE INIT
    * Fills the array that is the source of the list box
    DIMENSION this.atest(4)
    THIS.ATEST(1)="Apples"
    THIS.ATEST(2)="Oranges"
    THIS.ATEST(3)="Peach"
    THIS.ATEST(4)="Kiwi"
   ENDPROC
   ENDDEFINE

   DEFINE CLASS lstarray AS listbox

   Height = 85
   Left = 84
   Top = 60
   * Defines the list as a list from an array
   PROCEDURE INIT
     This.RowSource = 'THIS.PARENT.Atest'
     This.RowSourceType =5
   ENDPROC
   ENDDEFINE

   DEFINE CLASS cmdquit AS Commandbutton
   Top=150
   Left=49
   Caption= "Quit"

   PROCEDURE click
   RELEASE Thisform
   CLEAR EVENTS
   ENDDEFINE

   DEFINE CLASS cmdrequery as COMMANDBUTTON
   Top=150
   Left=144
   Caption= "Fill the list"
   * The Click method goes through the controls of the form and refreshes
   * the list.

   PROCEDURE Click
   NumberofControls=This.parent.controlcount
   FOR I=1 to numberofcontrols
    IF this.parent.controls(i).BaseClass="Listbox"
      THIS.PARENT.controls(i).Requery
    ENDIF
    ENDFOR
   THISFORM.REFRESH

   ENDPROC
   ENDDEFINE

</PRE>NOTE: You can use the REQUERY method to refresh a list or a combo box when
the underlying data source is modified.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00  VFoxWin<BR>
KBCategory: kbtool kbcode<BR>
KBSubcategory: FxtoolFormdes<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

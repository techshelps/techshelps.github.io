

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Convert Object Color Values to RGB Equivalents </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140848">
<META NAME="KBModify" CONTENT="1995/12/12">
<META NAME="KBCreate" CONTENT="1995/12/07">
<META NAME="Keywords" CONTENT="kbprg kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article lists a function (Dec2RGB) that you can use to determine which color values have been chosen in an application that allows custom color settings.  MORE INFORMATION  When colors are assigned through the Property Sheet, they are displaye...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QAKD,QAPG,QAKC,QANY,QAPN,QAUD,QAHH,QALW,QAY5,QAJQ,QAB9,QAW6,QAH4,QADK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Convert Object Color Values to RGB Equivalents</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 12, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140848</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists a function (Dec2RGB) that you can use to determine which
color values have been chosen in an application that allows custom color
settings.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When colors are assigned through the Property Sheet, they are displayed in
the sheet as individual red, green, and blue (RGB) values -- separated by
commas. However, the actual value assigned to the object internally is the
decimal equivalent of a hexadecimal number that has the individual red,
green, and blue values encoded positionally.
<P>
Evaluating a color property does not display the RGB values; instead it
displays the decimal number. An example of this number can be seen by
typing the following statement in the Command window:
<P>
<PRE>   ? _SCREEN.BACKCOLOR

</PRE>Each color can be set within a range of 0 to 255, so it is difficult to
determine from a single decimal value the color the user chose. With the
exception of black (0), it is hard to distinguish all the potential colors
ranging up to white (16777215). The individual colors can be parsed to
compare with other color settings to avoid potential problems due to
extremes in contrast, and reset other colors in the interface to
accommodate the custom settings.
<P>
The function in this article converts the number to hexadecimal, extracts
the individual RGB values, then converts the results for each value to
decimal and returns the result as a string in the expected RGB format.
<P>
The value that FoxPro assigns to an object's color property consists of a
double word in hexadecimal notation. The first byte of the first word is
ignored. The remaining three bytes indicate the individual red, green, and
blue values in the following format:
<P>
<PRE>   [XX][BB][GG][RR]

</PRE>Note that the blue and red values are reversed when encoded, and must be
manipulated to be presented in the expected RGB format.
<P>
The first section of the function converts the decimal value to hexadecimal
by factoring the next highest exponent of 2 contained within the decimal
value, and so on until the remaining factor is 1.
<P>
Once converted, the resulting string is parsed and the first and third
bytes are swapped so that they are in Red-Green-Blue order.
<P>
The final section reverts the hexadecimal value of each pair back to a
decimal value between 0 and 255, representing the intensity of the color
that it indicates. The colors values are then concatenated and returned to
the calling program in the RGB format.
<P>
The code may be used as a method within a class or form, or as a function
within a .prg or procedure file.
<P>
<P><h3>Dec2RGB Function Code</h3>
 
<P>
***********************************************************************
*
* Dec2RGB function: returns separate RGB values from object color value
*
* Usage:
<PRE>*         RGB = Dec2RGB(&lt;Decimal Color&gt;) &amp;&amp; such as _SCREEN.BACKCOLOR
*          ? RGB = "192, 192, 192"       &amp;&amp; color is light gray if true
*
</PRE>* FUNCTION dec2rgb
LPARAMETERS tnDec
IF tnDec &lt; 0
<PRE>     WAIT WINDOW 'Must be a positive value'
     RETURN ""
</PRE>ENDIF
lTalk=IIF(SET('TALK')='ON',.T.,.F.)
SET TALK OFF
<P>
* Determine the hexadecimal equivalent of the decimal parameter passed
lcHex = ""
<PRE>lnFactor = 24          &amp;&amp; set up factor value one exponent greater than
used

</PRE>FOR lnPos = 6 TO 1 STEP -1
<PRE>     lnFactor = lnFactor - 4     &amp;&amp; decrement factorial
     lnExp = 2 ^ lnFactor        &amp;&amp; extrapolate next least power of two
     FOR lnOrd = 15 TO 1 STEP -1
          IF tnDec &lt; lnExp            &amp;&amp; no value greater than current one,
               lcHex = lcHex + "0"    &amp;&amp; so store a zero in this position
               EXIT                   &amp;&amp; go back for the next value
          ENDIF
          IF tnDec &gt;= lnExp * lnOrd  &amp;&amp; is value greater than or equal to?
               * find the matching hex value from its ordinal position
               lcHex = lcHex + SUBSTR('123456789ABCDEF', lnOrd, 1)
               EXIT
          ENDIF
     ENDFOR
     tnDec = tnDec % lnExp     &amp;&amp; leave remainder of exponential division
</PRE>ENDFOR
<P>
* reverse the order of the individual color indicators
lcHex = RIGHT(lcHex, 2) + SUBSTR(lcHex, 3, 2) + LEFT(lcHex, 2)
<P>
* convert the pairs into decimal values
<PRE>lnPick = 2          &amp;&amp; offset to determine which pair to convert
lcRGB = ["]     &amp;&amp; start of string delineator

</PRE>* parse each color indicator and convert to decimal
FOR lnColor = 1 TO 3
<PRE>     lcHue = SUBSTR(lcHex, (lnPick * lnColor) - 1, 2) &amp;&amp; pull out color
     lnMSB = ASC(LEFT(lcHue, 1))     &amp;&amp; "Most Significant Bit"
     lnLSB = ASC(RIGHT(lcHue, 1))     &amp;&amp; "Least Significant Bit"

     * subtract appropriate value from each to get decimal equivalent
     lnMSB = lnMSB - IIF(lnMSB &gt; 57, 55, 48)
     lnLSB = lnLSB - IIF(lnLSB &gt; 57, 55, 48)

     * then add decimals together
     lcRGB = lcRGB + TRANSFORM( lnMSB * 16 + lnLSB, '999') + ", "
</PRE>ENDFOR
lcRGB = LEFT(lcRGB, LEN(lcRGB) - 2) + ["]  &amp;&amp; replace last comma with quote
RETURN lcRGB
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 HLS HBS vfp hex VFoxWin<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 12, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparing Visual FoxPro to Other Programming Languages </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130456">
<META NAME="KBModify" CONTENT="1995/12/15">
<META NAME="KBCreate" CONTENT="1995/05/21">
<META NAME="Keywords" CONTENT="kbinterop kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Most programming languages have similar features. If you are familiar with one programming language, you can easily translate this knowledge to another language. This article compares how BASIC, C/C++, Pascal and Visual FoxPro implement the basic p...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAMA,QA5F,QA56,QA55,QAMB,QAGX,QBWI,QAYL,QAH7,QAH6,QAD7,QAKD,QAPN,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Comparing Visual FoxPro to Other Programming Languages</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 15, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130456</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Most programming languages have similar features. If you are familiar
with one programming language, you can easily translate this knowledge to
another language. This article compares how BASIC, C/C++, Pascal and Visual
FoxPro implement the basic programming constructs in the following areas:

<UL><LI>Dealing with case sensitivity.
<LI>Declarating variables.
<LI>Adding comments.
<LI>Storing values to variables (assignment statements).
<LI>Structuring IF, CASE, FOR and WHILE statements.
<LI>Passing parameters by value and by reference.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Dealing with Case Sensitivity</h3>
 
<P>
Only C/C++ is a case-sensitive programming language.

<UL><LI>BASIC          not case sensitive
<LI>C/C++          case sensitive
<LI>Pascal         not case sensitive
<LI>Visual FoxPro  not case sensitive
<P>
</UL><h3>Declaring Variables</h3>
 
<P>
When you assign a value to a variable (other than an array) that does not
exist, Visual FoxPro implicitly declares it. (Arrays must be declared using
the DIMENSION command). Languages that require explicit declaration of
variables return an error.

<UL><LI>BASIC          Variables can be implicitly declared
<LI>C/C++          Variables must be explicitly declared
<LI>Pascal         Variables must be explicitly declared
<LI>Visual FoxPro  Variables are implicitly declared
<P>
</UL><h3>Adding Comments</h3>
 
<P>
Each language has its own format for adding comments to programs. Visual
FoxPro has different formats for whole line comments and for comments on
partial lines.

<UL><LI>BASIC          ' comment
<LI>C/C++          // comment
<PRE>                  /* comment block */
</PRE><LI>Pascal         { comment block }
<LI>Visual FoxPro  * full-line comment
<LI>Visual FoxPro  &amp;&amp; partial-line comment
<P>
</UL><h3>Storing Values to Variables (Assignment Statements)</h3>
 
<P>
Pascal requires a colon in the assignment statement.

<UL><LI>BASIC          nVal = 7
<LI>C/C++          nVal = 7
<LI>Pascal         nVal := 7
<LI>Visual FoxPro  nVal = 7
<PRE>                  STORE 7 TO nVal

</PRE></UL>NOTE: In Visual FoxPro, you can also assign values to fields in a table by
using the REPLACE command.
<P>
<P><h3>Structuring IF Statements</h3>
 
<P>
Each language offers equivalent IF functionality.

<UL><LI>BASIC          If nCnt &lt; nMax Then
<PRE>                     nTot = nTot * nCnt
                     nCnt = nCnt + 1
                  End If

</PRE><LI>C/C++          if(nCnt &lt; nMax) {
<PRE>                     nTot *= nCnt;
                     nCnt++;
                  }

</PRE><LI>Pascal         if nCnt &lt; nMax then
<PRE>                     begin
                     nTot:=nTot * nCnt;
                     nCnt:=nCnt   + 1;
                  end

</PRE><LI>Visual FoxPro  IF nCnt &lt; nMax
<PRE>                     nTot = nTot * nCnt
                     nCnt = nCnt + 1
                  ENDIF

</PRE></UL><h3>Structuring CASE Statements</h3>
 
<P>
Only Pascal does not offer ranges in CASE statements.

<UL><LI>BASIC          Select Case n
<PRE>                     Case 0
                        Print 'Zero'
                     Case Is &gt; 0
                        Print 'Pos'
                     Case Else
                        Print 'Neg'
                  End Select

</PRE><LI>C/C++          switch(n) {
<PRE>                     case 0:
                        printf("Zero\n");
                        break;
                     case 1:
                        printf("One\n");
                        break;
                     default:
                        printf("?\n");}

</PRE><LI>Pascal         case n of
<PRE>                     0: writeln("Zero");
                     1: writeln("One");
                  end

</PRE><LI>Visual FoxPro  DO CASE
<PRE>                     CASE n = 0
                        ? 'Zero'
                     CASE n &gt; 0
                        ? 'Pos'
                     OTHERWISE
                        ? 'Neg'
                   ENDCASE

</PRE></UL><h3>Structuring FOR Loops</h3>
 
<P>
Each language offers a FOR statement. C/C++ has the most flexibility for
expressions.

<UL><LI>BASIC          For n = 1 to 10
<PRE>                     Print n
                  Next n

</PRE><LI>C/C++          for(n=1; n&lt;11; n++)
<PRE>                     printf("%d\n",n);

</PRE><LI>Pascal         for n := 1 to 10 do
<PRE>                     writeln(n);

</PRE><LI>Visual FoxPro  FOR n = 1 TO 10
<PRE>                     ? n
                  ENDFOR | NEXT

</PRE></UL><h3>Structuring WHILE Loops</h3>
 
<P>
Each language offers equivalent WHILE loop functionality.

<UL><LI>BASIC          While n &lt; 100
<PRE>                     n = n + n
                  Wend

</PRE><LI>C/C++          while(n &lt; 100)
<PRE>                     n += n;

</PRE><LI>Pascal         while n &lt; 100 do
<PRE>                     n := n + n;

</PRE><LI>Visual FoxPro  DO WHILE n &lt; 100
<PRE>                     n = n + n
                  ENDDO

</PRE></UL>Passing Parameters by Value
 
<P>
Each language permits passing parameters by value.

<UL><LI>BASIC          ABC ByVal X
<LI>C/C++          ABC(X);
<LI>Pascal         procedure ABC (x:integer);
<LI>Visual FoxPro  =ABC(X)
<P>
</UL><h3>Passing Arguments by Reference</h3>
 
<P>
You can pass parameters by reference two ways in Visual FoxPro.

<UL><LI>BASIC            ABC X

<LI>C/C++            ABC(&amp;VAR);

<LI>Pascal           procedure ABC
<PRE>                    var x:integer);

</PRE><LI>Visual FoxPro    =ABC(@X)
<PRE>                    DO ABC WITH X

</PRE></UL>NOTE: By default, Visual FoxPro passes variables by value. However, you may
use the SET UDFPARMS command to specify whether FoxPro passes parameters by
value or by reference.
<P>
Syntax: SET UDFPARMS TO &lt;VALUE&gt; or &lt;REFERENCE&gt;
<P>
For more information on the SET UDFPARMS command, please see the "SET
UDFPARMS" topic in Visual FoxPro Help file.
<P>
For more programming language comparisons, please see the "Visual FoxPro
and Other Programming Lauguages" topic in the Visual FoxPro Help file.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.00b<BR>
KBCategory: kbinterop<BR>
KBSubcategory: FxinteropGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 15, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

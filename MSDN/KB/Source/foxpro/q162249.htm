

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Creating a Toolbar Containing a ComboBox </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162249">
<META NAME="KBModify" CONTENT="1997/02/10">
<META NAME="KBCreate" CONTENT="1997/01/16">
<META NAME="Keywords" CONTENT="kbusage kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  A ToolBar is a class that is meant to be used with a variety of different forms. Because of this, a ToolBar's ComboBox, which shows a list of items relevant to the data shown on a particular form, generally will not be populated until the ToolBar t...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAF0,QAH4,QBV3,QANS,QBJZ,QBWS,QAHP,QAW6,QAB5,QA7O,QAOE,QAMN,QAO4,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Creating a Toolbar Containing a ComboBox</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162249</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A ToolBar is a class that is meant to be used with a variety of different
forms. Because of this, a ToolBar's ComboBox, which shows a list of items
relevant to the data shown on a particular form, generally will not be
populated until the ToolBar that contains it is bound to that form.
<P>
This article presents approaches to placing a ComboBox in a ToolBar, and
several different methods of populating a ComboBox.
<P>
Two of the ComboBoxes in Example 2 do not work, but they are intentionally
included to demonstrate that an object that is instantiated before the
object that contains it cannot be defined as having data from its container
as its RowSource. A ComboBox in a ToolBar is instantiated before the
ToolBar, which is instantiated before the formset (which ultimately
contains the ToolBar) is instantiated. The data shown in the ComboBox must
be defined from within the methods of the ComboBox, or placed there by
events that happen after the ComboBox is instantiated.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Here are two different examples. The first defines the objects visually,
and the second defines them within a program.
<P>
<P><h3>Example 1</h3>
 
<P>
This example shows you how to create a ToolBar with 3 ComboBoxes through
the user interface by using the class designer and the form designer. Two
of the ComboBoxes are populated within methods of the containing ToolBar.
The third is populated from the Init event of the formset that uses the
ToolBar.
<P>
In Visual FoxPro, create the ToolBar as follows:

<OL><P><LI>On the File menu, click New. Select Class, and choose New File.

<P><LI>The New Class dialog box appears. Enter the following:
<P>
    Class Name:  tbrTest
<PRE>    Based On:    Toolbar
    Store In:    Test.VCX

    Click OK.

</PRE><P><LI>The Class Designer appears on the Visual FoxPro desktop. Be sure the
    Forms Control ToolBar is visible. If not, select Forms Control Toolbar
    from the View menu so that particular option has a checkmark at the
    left.
<P>
    Add a three ComboBox controls to the ToolBar. Leave the default
    control names so that tbrTest contains controls named Combo1, Combo2,
    and Combo3.

<P><LI>On the Class menu, select New Property. Enter "aArray2(10,1)" (without
    the quotes) as the Name. Click Add, and then click Close.

<P><LI>If the Properties window is not visible, go to the View menu and click
    Properties.
<P>
    Select tbrTest in the Object list at the top. Double-click "Init
    Event" in the list of properties. The Edit window for the Init Event
    of tbrTest appears. Enter the following code:
<P>
    ** ToolBar tbrTest Init event
    ** aArray2 is dimensioned as a new property of the
    ** tbrTest ToolBar class.
    THIS.aArray2(1) = "Newspapers"
    THIS.aArray2(2) = "Magazines"
    THIS.aArray2(3) = "Radio"
    THIS.aArray2(4) = "Television"
    THIS.aArray2(5) = "Cable"
    THIS.aArray2(6) = "Direct Mail"
    THIS.aArray2(7) = "the Internet"
    THIS.aArray2(8) = "Billboards"
    THIS.aArray2(9) = "Telemarketing"
    THIS.aArray2(10) = "Word-of-mouth"
<P>
    ** The next 3 lines populate Combo2 using the AddItem method.
    i = 0
    FOR i = 1 to ALEN(THIS.aArray2)
    THIS.Combo2.AddItem(This.aArray2(i))
    NEXT
<P>
    ** The next 3 lines populate Combo3 using the properties
    ** of that ComboBox.
<PRE>    THIS.Combo3.RowSourcetype = 5    &amp;&amp; Type Array
    THIS.Combo3.RowSource = "THIS.Parent.aArray2"

    ** The code uses the string at the right in the line above
    ** in the Requery method of the Combo as the RowSource
    ** for the Combo.
    THIS.Combo3.Requery
    ******** End of tbrTest Init Event ********

</PRE><P><LI>On the File menu, click Close and then click Yes to save the file.

<P><LI>On the File menu, click New. Click Form and select New File.

<P><LI>On the Forms Control ToolBar, click View Classes (usually the #2
    control on the Forms Control ToolBar). Click Add, and then select the
    class library you specified in step 2.

<P><LI>An abbreviated controls ToolBar appears. The tbrTest ToolBar appears as
    three tiny command buttons arrayed in a horizontal row. (If there are
    several similar controls, the tooltip will identify tbrTest.) Select
    tbrTest and place it by clicking on the form. Click Yes to create a
    form set object.

<P><LI>In the Properties window, select the Formset1 object in the ComboBox
    at the top.

<P><LI>Select New Property from the Form menu. Enter "aArray1(10,1)" (without
    the quotes) as the name. Click Add, then click Close.

<P><LI>In the Properties window for the Formset, set the Name property to
    "frsTest" (without the quotes).

<P><LI>In the Properties window, double-click the Init Event line. When the
    edit window for frsTest.Init appears, enter the following code:
<P>
    *** Init event code for formset frsTest ***
    IF TYPE("THIS.form1") = "O" &amp;&amp; Ensures the form is instantiated.
      THIS.tbrTest.left = THIS.form1.left
      THIS.tbrTest.top = THIS.form1.top - (THIS.tbrTest.height + 25)
    ENDIF
    THIS.aArray1(1) = "This is 1"
    THIS.aArray1(2) = "This is 2"
    THIS.aArray1(3) = "This is 3"
    THIS.aArray1(4) = "This is 4"
    THIS.aArray1(5) = "This is 5"
    THIS.tbrTest.Combo1.AddItem(THIS.aArray1(5))
    THIS.tbrTest.Combo1.AddItem(THIS.aArray1(4))
    THIS.tbrTest.Combo1.AddItem(THIS.aArray1(3))
    THIS.tbrTest.Combo1.AddItem(THIS.aArray1(2))
    THIS.tbrTest.Combo1.AddItem(THIS.aArray1(1))
    *** End if frsTest Init event code ***

<P><LI>Press Ctrl+W to save the code in the edit window. On the File menu,
    click Save As. Specify frsTest as the name of the .scx file.
<P>
    Run the form by clicking the red exclamation point tool on the Visual
    FoxPro main ToolBar. You should see an empty form, with the tbrTest
    ToolBar immediately above that form. Each Combo should show the list
    of information the above code provided.
<P>
</OL><h3>Example 2</h3>
 
<P>
This example shows you how to create a ToolBar programmatically, and then
use it on a formset that is created programmatically. Enter the following
code into a new program named tbrTest:
<P>
<PRE>   *************************************************
   ** tbrTest.prg
   **   Sample program to populate ComboBoxes in
   **   a ToolBar.
   *************************************************

   DIMENSION aFifthArray(10,1)
   aFifthArray(1) = "Boston"
   aFifthArray(2) = "Providence"
   aFifthArray(3) = "New Haven"
   aFifthArray(4) = "Armonk"
   aFifthArray(5) = "Grand Central"

   Dimension aSixthArray(10,1)
   aSixthArray(1) = "James"
   aSixthArray(2) = "Charles"
   aSixthArray(3) = "Hudson"
   aSixthArray(4) = "Rapahoneck"
   aSixthArray(5) = "Catawba"
   aSixthArray(6) = "Susquehanna"
   aSixthArray(7) = "Cooper"
   aSixthArray(8) = "Pee Dee"
   aSixthArray(9) = "Neuss"
   aSixthArray(10) = "Ohio"

   MyFormset = CREATEOBJECT("FormSet")
   WITH MyFormset
      .AddObject("tbrTools1", "tbrTest")
      .AddObject("Myform", "form1")
      WITH .myform
         .AddObject("quitter", "cmdClose")
         WITH .Quitter
           .top = 150
           .left = 200
           .visible = .T.
         ENDWITH
         .top = 100
         .left = 10
         .visible = .T.
      ENDWITH
      WITH .tbrTools1
         .top = myformset.myform.top - 60
         .Left = myformset.myform.left
         .visible = .T.
         WITH .Combo5
            .AddItem(aFifthArray(1))
            .AddItem(aFifthArray(2))
            .AddItem(aFifthArray(3))
            .AddItem(aFifthArray(4))
            .AddItem(aFifthArray(5))
         ENDWITH
         WITH .Combo6
            .RowSourcetype = 5
            .RowSource = "aSixthArray"
            .Requery
         ENDWITH
      ENDWITH
   ENDWITH

   READ EVENTS


   DEFINE CLASS form1 AS FORM
      Height = 100
      Width = 500
      Top = 100
      Left = 10
      ADD OBJECT cmdQuit as cmdClose
   ENDDEFINE

   DEFINE CLASS cmdClose AS CommandButton
      Height = 29
      Width = 50
      Caption = "\&lt;Close"

      PROCEDURE Click
        ThisFormSet.Release
        CLEAR EVENTS
     ENDPROC
   ENDDEFINE

   DEFINE CLASS tbrTest AS TOOLBAR
      ADD OBJECT Combo1 AS COMBOBOX
      ADD OBJECT Combo2 AS COMBOBOX
      ADD OBJECT Combo3 AS COMBOBOX
      ADD OBJECT Combo4 AS COMBOBOX
      ADD OBJECT Combo5 AS COMBOBOX
      ADD OBJECT Combo6 AS COMBOBOX

   * Start of the class defInition: one ToolBar with 6 ComboBoxes.

      Left = 1
      Top  = 1
      Width = 575
      Caption = "Test ToolBar #2"
      Combo1.Height = 27
      Combo1.Width = 82
      Combo2.Height = 27
      Combo2.Width = 82
      Combo3.Height = 27
      Combo3.Width = 82
      Combo4.Height = 27
      Combo4.Width = 82
      Combo5.Height = 27
      Combo5.Width = 82
      Combo6.Height = 27
      Combo6.Width = 82

   PROCEDURE Load
   * ComboBox2 does not exist at Load time.
      Dimension gaArray1(10,1)
      gaArray1(1) = "Arkansas"
      gaArray1(2) = "Colorado"
      gaArray1(3) = "Delaware"
      gaArray1(4) = "Georgia"
      THIS.Combo2.AddItem(This.gaArray1(1))
      THIS.Combo2.AddItem(This.gaArray1(2))
      THIS.Combo2.AddItem(This.gaArray1(3))
      THIS.Combo2.AddItem(This.gaArray1(4))
   ENDPROC

   * Sets properties of the controls.
   * Notice that there are no Top or Left property settings for
   * controls on a ToolBar. Controls on a ToolBar are automatically
   * positioned in the order they are added.

   PROCEDURE Activate
   * ComboBox1 is populated within the activate procedure of the ToolBar.
      THIS.Combo1.AddItem("This is item 1")
      THIS.Combo1.AddItem("This is item 2")
      THIS.Combo1.AddItem("This is item 3")
      THIS.Combo1.AddItem("There are no more")

   * ComboBox2 is populated from array elements declared
   * and populated in the Load event of the ToolBar, but this code is
   * run before the ToolBar is loaded, so it causes the error "Property
   * 'GARALPHARRAY' is not found."
   *THIS.Combo2.AddItem(This.gaArray1(1))
   *THIS.Combo2.AddItem(This.gaArray1(2))
   *THIS.Combo2.AddItem(This.gaArray1(3))
   *THIS.Combo2.AddItem(This.gaArray1(4))

   * The following code depends upon the formset having a
   * gaSomeArray() defined and populated, but it suffers from the same
   * problem as the code immediately above, and causes the error
   * "Property 'GASOMEARRAY' is not found."
   *THIS.Combo3.AddItem(THISFORMSET.gaSomeArray(1))
   *THIS.Combo3.AddItem(THISFORMSET.gaSomeArray(2))
   *THIS.Combo3.AddItem(THISFORMSET.gaSomeArray(3))
   *THIS.Combo3.AddItem(THISFORMSET.gaSomeArray(4))

   DIMENSION gaArray4(10,1)
   gaArray4(1) = "Seattle"
   gaArray4(2) = "Portland"
   gaArray4(3) = "San Francisco"
   gaArray4(4) = "Los Angeles"
   gaArray4(5) = "San Diego"

   THIS.Combo4.AddItem(gaArray4(1))
   THIS.Combo4.AddItem(gaArray4(2))
   THIS.Combo4.AddItem(gaArray4(3))
   THIS.Combo4.AddItem(gaArray4(4))
   THIS.Combo4.AddItem(gaArray4(5))

   * ComboBox5 is populated from program code run after the
   * formset is loaded, Initialized, and populated, from an
   * array declared and Initialized before the formset is
   * created.

   ENDDEFINE    &amp;&amp; End of ToolBar class defInition

</PRE></OL>(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by Chris Jensen, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage kbhowto kbcode<BR>
KBSubcategory: FxprgClassoop FxprgGeneral FxprgToolbar vfoxwin<BR>
Additional reference words: 5.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

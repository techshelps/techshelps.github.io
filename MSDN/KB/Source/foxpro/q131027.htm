

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Encapsulate Data in the Form Builder </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131027">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/06/02">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  In a true object-oriented programming paradigm, data used in a form is encapsulated from the underlying form. This hides the names of the tables and fields from the form. By using this approach, a table or field name could change before the form is...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7O,QAH4,QAPN,QAB9,QAOE,QAMN,QABO,QAB5,QAUJ,QAHE,QA2Q,QAY2,QAK6,QAI2,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Encapsulate Data in the Form Builder</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131027</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In a true object-oriented programming paradigm, data used in a form is
encapsulated from the underlying form. This hides the names of the tables
and fields from the form. By using this approach, a table or field name
could change before the form is run, and the form should still function
properly. As a result, the form does not need to know specific information
about the data tables. The tables can change independent of any form.
<P>
This article describes one way to encapsulate data from the form.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code in this article includes a custom class definition
(clMyData) and a subclass (clcustomer) built from this custom class. The
program is saved in a file named DATAENC.PRG.
<P>
To use this approach, add several lines of code to the form's Init
procedure. If the form is part of a formset, place the code in the Init of
the formset instead.
<P>
<PRE>   * SET PROCEDURE to file containing class definition

   IF !$DATAENC"$SET("PROCEDURE")
      SET PROCEDURE TO dataenc ADDITIVE
   ENDIF

   * Declare public variables to hold instantiations of custom classes
   PUBLIC oMyData, oCustomer

   * Instantiate each class
   oMyData = CREATEOBJECT("clMyData")
   oCustomer = CREATEOBJECT("clCustomer")

</PRE><h3>Program Logic</h3>
 
<P>
The custom class (clMyData) examines the form being loaded. It uses the
form's control array to itemize all of the controls on the form. If a
control is a container (for example, a command button group or a page
frame), the program itemizes all controls within the container as well.
<P>
After identifying all controls on the form, the program replaces the
original rowsource property specified when the form was designed. The
replacement value for each control is specified in the subclass
(clCustomer).
<P>
A subclass similar to clCustomer is created for each table used in the
form. The subclass method DIFFERS creates a two-column array, with one row
for each field contained in the table. The first column of the array
contains the design-time rowsource. The second column of the array contains
the run-time rowsource, usually the field name from a table.
<P>
This array is passed to the parent class and used in the GETDIFFERS method
to dynamically change the rowsource properties of all applicable controls
at runtime. The form file on disk is never changed.
<P>
All method code required to do the conversion is included in the parent
class. Only one method in the subclass needs to be edited to add an
additional table to the form.
<P>
The class listed in this article is a simple example. It could easily be
expanded to handle additional functionality, such as building select
statements for list boxes.
<P>
<P><h3>Code Sample</h3>
 
<P>
*******  Begin code example
<P>
***************************************************************************
<PRE>* Class Name   : clMyData
</PRE>* Parent Class : Custom
<PRE>* Subclasses   :
</PRE>***************************************************************************
<P>
Define Class clMyData as Custom
<P>
***************************************************************************
*   Properties
***************************************************************************
<P>
<PRE>   lIsFormSet = .t. &amp;&amp; logical - is this a formset?
   nNumberofForms=1    &amp;&amp; number of forms
   flag = .f.

</PRE>***************************************************************************
<P>
PROCEDURE OpenTables
<P>
<PRE>   Parameters pDBC, pTable
   * Called from each subclass to open needed dbcs and dbfs
   * Set buffering
   SET MULTILOCKS ON

   * Open tables
   IF !DBUSED(pDBC)
      OPEN DATA (pDBC)
   ENDIF
   IF !USED(pTable)
      USE (pTable) IN 0
   ELSE
      SELECT (pTable)
   ENDIF
   =CURSORSETPROP("Buffering",5,(pTable))

   * Populate first object
   THIS.GETINFO(pTable, @pArray)

</PRE>***************************************************************************
* This is called once in each subclass to create a unique array name
<P>
PROCEDURE DIFFERS
<P>
<PRE>   PARAMETERS pTable
   aDiffers = SUBSTR(SYS(2015),3,10)
   PUBLIC &amp;adiffers(1,2)
   RETURN aDiffers

   * Place control source property for form in first column
   * Place  fields which make this field in second column

</PRE>***************************************************************************
* The following procedure is called by the subclass one time for each
* field in the data table
<P>
PROCEDURE POPDIFFERS
PARAMETERS pArrayName, pControlSource,  pInputExpr
<P>
<PRE>   iCurrentRow = ALEN((pArrayName),1)
   cArrayName = pArrayName + "(iCurrentRow,"
   &amp;cArrayName.1) = pControlSource
   &amp;cArrayName.2) = pInputType

   nNewSize  = iCurrentRow + 1
   DIMENSION &amp;pArrayName.(nNewsize, 2)
</PRE>***************************************************************************
<P>
PROCEDURE INIT
<P>
<PRE>   * Figure out if part of a formset by trying to generate
   * an error number 1938 and setting HighestClass appropriately

   temp = thisformset.name

   * Cycle through all of the controls on the current form and find the
   * current control source where needed.
   * Then, the init of each subclass will refer to this cursor later on
   * to update the control source properties

   CREATE CURSOR curMyProps (cName c(75), source c(75))
   CREATE CURSOR curContainers (cName c(75))
   IF lIsFormset
   nNumberofForms = _screen.FORMCOUNT
      FOR i = 1 to nNumberofForms
         HighestClass = "_SCREEN.FORMS(" + alltrim(str(i)) +")"
         this.allforms(highestclass)
      NEXT i
   ELSE
      HIGHESTClass = "THISFORM"
      THIS.AllForms(HighestClass)
   ENDIF

</PRE>ENDPROC
<P>
***************************************************************************
* The following procedure is executed 1 time for each form
* by the class init method
<P>
PROCEDURE AllForms
PARAMETERS HighestClass
<PRE>   iNumControls = &amp;highestclass..controlcount
   this.enumerate(HighestClass, iNumControls)
   DO WHILE .T.
      SELECT * from curContainers into CURSOR TEMP
      IF _tally = 0
         EXIT
      ENDIF
         SET SAFETY OFF
         CREATE CURSOR curContainers (cName c(75))
         SELECT TEMP
      SCAN
         HighestClass = alltrim(cName)
         iNumControls = &amp;HighestClass..ControlCount
         this.enumerate(HighestClass, iNumControls)
      ENDSCAN
   ENDDO

</PRE>ENDPROC
<P>
***************************************************************************
* The following procedure figures out which controls exist on the container
<P>
PROCEDURE enumerate
Parameters HighestClass, iNumControls
<P>
<PRE>   FOR i = 1 TO iNumControls
      IF &amp;highestclass..baseclass != "Commandgroup"
          cCurControlBase = &amp;highestclass..controls(i).baseclass
          cCurControl = UPPER(highestclass + "." + ;
             &amp;highestclass..controls(i).name)
          cCurControlSource = ;
             UPPER(&amp;highestclass..controls(i).controlsource)
       ELSE
         cCurControlBase = &amp;highestclass..buttons(i).baseclass
         cCurControl = UPPER(highestclass + "." + ;
             &amp;highestclass..buttons(i).name)
          cCurControlSource = ;
             UPPER(&amp;highestclass..buttons(i).controlsource)
       ENDIF
      IF  cCurControlBase = "Textbox" ;
         OR cCurControlBase = "Check box" ;
         OR cCurControlBase = "Commandbutton" ;
         OR cCurControlBase = "Optionbutton" ;
         OR cCurControlBase = "Spinner" ;
         OR cCurControlBase = "Column" ;
         OR cCurControlBase = "EditBox"
         SELECT CurMyProps
         APPEND BLANK
         REPLACE cName WITH cCurControl
         REPLACE source WITH cCurControlSource
      ELSE
         IF cCurControlBase = "Page" ;
            OR cCurControlBase = "PageFrame";
            OR cCurControlBase = "Form" ;
            OR cCurControlBase = "Grid" ;
            OR cCurControlBase = "Toolbar"

            SELECT curContainers
            APPEND BLANK
            REPLACE cName with cCurControl
         ENDIF
      ENDIF
   NEXT i

</PRE>ENDPROC
<P>
***************************************************************************
* This procedure changes the rowsource in the cursor
<P>
PROCEDURE UpdateCursor
Parameters pArray, cTableName
<P>
<PRE>   SELECT curMyProps
   =cursorsetprop("Buffering",1,(cTableName))
   FOR i = 1 TO ALEN((pArray),1)
      cNewSource = &amp;pArray.(i,2)
      cOldSource = &amp;pArray.(i,1)
      REPLACE source WITH cNewSource ;
        FOR ALLTRIM(source) = UPPER(cOldSource)
   ENDFOR
   SCAN
      cNewName = alltrim(cName)
      &amp;cNewName..controlsource = alltrim(source)
   ENDSCAN

</PRE>***************************************************************************
<P>
PROCEDURE error
Parameters pErrorNum, p3, p4
<PRE>   IF pErrorNum = 1938
      lIsFormSet = .F.
   ENDIF

</PRE>***************************************************************************
<P>
PROCEDURE destroy
<PRE>   PARAMETERS pArrayName
   RELEASE (pArrayName)

</PRE>***************************************************************************
<P>
ENDDEFINE &amp;&amp; End Definition of clMyData
<P>
***************************************************************************
* END CLASS DEFINITION
***************************************************************************
<P>
***************************************************************************
<PRE>* Class Name   : clCUSTOMER
</PRE>* Parent Class : clMyData
<PRE>* Subclasses   :
</PRE>***************************************************************************
<P>
Define Class clCUSTOMER as clMyData
<P>
***************************************************************************
*   Properties
***************************************************************************
<P>
<PRE>   cTableName = "CUSTOMER"  &amp;&amp;Name of the .dbf file
   cDBCName   = "POES"      &amp;&amp;Name of the .DBC file
   cMyArray   = ""

</PRE>***************************************************************************
<P>
PROCEDURE INIT
<PRE>   clMyData::OpenTables(THIS.cDBCName, THIS.cTableName)
   cMyArray = clMyData::Differs()
   clMyData::PopDifferS(cMyArray,"FullName","customer.c_Name")
   clMyData::PopDifferS(cMyArray,"SSN","customer.c_SSN")
   clMyData::PopDifferS(cMyArray,"STREET","customer.c_STREET")
   clMyData::PopDifferS(cMyArray,"CITY","customer.c_CITY")
   clMyData::PopDifferS(cMyArray,"STATE","customer.C_STATE")
   clMyData::PopDifferS(cMyArray,"ZIP","customer.c_ZIP")
   clMyData::PopDifferS(cMyArray,"PHONE","customer.c_PHONE")
   clMyData::PopDifferS(cMyArray,"CCN","customer.c_CCN")
   this.parentPopDifferS(cMyArray,"CCEXP","customer.c_CCEXP")

   clMyData::UpdateCursor(cMyArray, this.cTableName)
   PUBLIC aCustomer(1,2)
   SELECT c_ssn, c_name FROM CUSTOMER INTO ARRAY aCustomer

</PRE>**********************************************************************
<P>
ENDDEFINE &amp;&amp; End Definition of clCustomer
<P>
***************************************************************************
* END CLASS DEFINITION
***************************************************************************
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgClassoop<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use a UDF in Index with the Trim Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129889">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When creating an index key, it is important to remember that the index keys will have a fixed length even if the length of the field contents are varying lengths. FoxPro does not create or use variable-length keys. Index keys are padded with spaces...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QA28,QA5V,QAH7,QAVX,QAVW,QAY5,QAD7,QAH6,QAUJ,QAB9,QAEF,QBV8,QA7O,QA7N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use a UDF in Index with the Trim Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129889</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5x, 2.6x
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5x, 2.6x
<LI>Microsoft FoxPro for Macintosh, versions 2.5x, 2.6a
<LI>Microsoft FoxPro for UNIX, version 2.6
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When creating an index key, it is important to remember that the index keys
will have a fixed length even if the length of the field contents are
varying lengths. FoxPro does not create or use variable-length keys. Index
keys are padded with spaces to a constant size (the length of the field in
the table structure).
<P>
You can use a User-Defined Function (UDF) in an index expression. For
example, you can order the records based on a partial field (for example,
the street name in an address field). When a UDF is used to create an index
key, the UDF is called twice to initiate the process before the records are
processed. Then it is called once for each record in the table.
<P>
This article shows by example how to use a UDF in an index expression with
the four trim functions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The four trim functions, TRIM(), ALLTRIM(), RTRIM(), and LTRIM() are
ignored during the first two passes through the UDF. Then they are used to
generate the index keys. However, note that the resulting key is still
padded with blanks to the constant length of the field in the index. It is
still a fixed-length index.
<P>
When tracing the UDF through the TRACE WINDOW, the first two passes through
the code, as the index is built, calculate the key expressions so all the
functions for removing blanks are ignored. The remaining passes through the
UDF build the actual index keys. During this phase of building the index
keys, the trim functions operate as expected within the UDF.
<P>
<P><h3>Sample Code</h3>
 
<P>
This sample code creates a table (TEST.DBF) and a text file (UDFINDEX.TXT)
containing output that shows the values of the record number and the
string's length, using the ALLTRIM function. It also creates a second index
and list to compare with the first list, showing that the ALLTRIM function
did work in the UDF index. Notice the placement of the record with the name
"Joe Brown."
<P>
*Beginning of program.
<P>
SET ALTERNATE TO udfindex.txt
SET ALTERNATE ON
CLEAR
CREATE TABLE test (name C(30))
INSERT INTO test (name) VALUES ("John Doe")
INSERT INTO test (name) VALUES ("Jane Smith")
INSERT INTO test (name) VALUES ("  Joe Brown")
INSERT INTO test (name) VALUES ("Mary Green")
CLEAR
PUBLIC n
n=1
<PRE>     ? "THIS FILE IS OUTPUT FROM A PROGRAM SHOWING THE USE OF ALLTRIM IN A"
     ? "UDF USED TO BUILD AN INDEX KEY."
     ?
</PRE>INDEX ON strtrim(name) TAG testtag
m.name=test.name
* Note that the memory variable created from the field is again 30
* characters long. It has been padded with spaces to a constant length.
<PRE>     ?
     ?
     ? "FoxPro will pad the key to the size of the field, making a fixed"
     ? "length key."
     ?
     ? "*** The length of the new memory variable using the UDF index is ";
       +STR(LEN(m.name))
</PRE>* Note that the leading spaces are ignored in this output showing that
* ALLTRIM is working.
<PRE>     ?
     ?
     ? "Below is the list of records indexed using ALLTRIM in the UDF."
     ?
</PRE>LIST
INDEX ON name TAG name
* Note that the leading spaces are not ignored in this list.
<PRE>     ?
     ? "Below is a list of records indexed without removing the leading"
     ? "spaces."
     ?
</PRE>LIST
SET ALTERNATE OFF
CLOSE ALL
MODIFY FILE udfindex.txt
<P>
FUNCTION strtrim
PARAMETER strin
<PRE>     ? REPLICATE(CHR(45),80)
</PRE>IF LEN(ALLTRIM(strin)) = LEN(strin)
<PRE>   * Note output from the following command:  ALLTRIM is ignored.
   ? "On pass " +ALLTRIM(STR(n))+" the ALLTRIM function IS NOT in effect."
</PRE>ELSE
<PRE>   ? "On pass " +ALLTRIM(STR(n))+" the ALLTRIM function IS in effect."
</PRE>ENDIF
? "   Record number is: "+ALLTRIM(STR(RECNO()))
N=N+1
? "   The trimmed string's length is: "+ALLTRIM(STR(LEN(ALLTRIM(strin))))
IF n = 3
<PRE>     ?
     ? REPLICATE(CHR(42),60)
     ? "*  Notice in the first two iterations, the last record is  *"
     ? "*  evaluated in the UDF strtrim(), not the first record.  *"
     ? REPLICATE(CHR(42),60)
     ?
</PRE>ENDIF
RETURN ALLTRIM(strin)
<P>
* End of program.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin FoxWin FoxMac FoxDos  2.00<BR>
2.50 2.50a 2.50b 2.50c 2.60 2.60a 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgTable<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Pause Program Execution During a RUN Command </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110117">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1994/01/13">
<META NAME="Keywords" CONTENT="kbprg kbinterop kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When the RUN command is used to execute an MS-DOS command in an MS-DOS session window under 16-bit versions of Microsoft Windows (Windows versions 3.x), execution of the FoxPro program that issued the RUN command will continue immediately after the...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWS,QAB9,QAH4,QBV8,QAMH,QBWQ,QBJZ,QAFI,QBVV,QAGQ,QA50,QBXB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Pause Program Execution During a RUN Command</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110117</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5x, 2.6x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When the RUN command is used to execute an MS-DOS command in an MS-DOS
session window under 16-bit versions of Microsoft Windows (Windows versions
3.x), execution of the FoxPro program that issued the RUN command will
continue immediately after the RUN command is issued. This article
describes an approach that can be used to cause program execution to "wait"
until the MS-DOS command has finished executing.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The RUN command creates a virtual MS-DOS session under Microsoft Windows.
When the RUN command is executed in a FoxPro program, it causes this
virtual MS-DOS session to be created, then passes the appropriate commands
to the MS-DOS environment. FoxPro has no control over the virtual MS-DOS
session; it is a separate process that is under the control of Microsoft
Windows. Since it is a separate process, any lines following the RUN
command in a FoxPro program will be executed as soon as the RUN command has
finished creating the MS-DOS session. In many cases, this is not a problem.
In some cases, however, you may want to cause execution of the FoxPro
program to stop until the MS-DOS commands have finished executing. This
article demonstrates how to call the Windows API function FindWindow() to
determine whether or not the MS-DOS session is active and uses a loop to
prevent program execution from continuing until the commands executed in
the MS-DOS session are finished and the MS-DOS session is therefore
terminated.
<P>
Before using the code sample provided in this article, you must create a
special program information file (PIF).
<P>
NOTE: The following steps can also be used to check if a Windows
application has finished running. Omit the sections that pertain to using a
PIF file and running a batch file. Then, instead of running the PIF file,
run the Windows-based application. Be sure to assign the appropriate
mWindow and mClassName values for the Windows-based application.
<P>
NOTE: If you have Microsoft Visual C++ for Windows, you can use the Spy
utility to determine the class name for a particular window.
<P>
<P><h3>Creating a PIF File to Be Used by the Sample Code</h3>
 
<P>
NOTE: These instructions assume that you have not modified the FOXRUN.PIF
file that ships with FoxPro for Windows. If you have modified this file,
you may need to reinstall FoxPro for Windows in order to obtain a copy of
the default FOXRUN.PIF file that ships with FoxPro for Windows.

<OL><P><LI>Load the PIF Editor, as follows:
<P>
   a. In Program Manager, choose Run from the File menu.
   b. In the Command Line box, type "pifedit" (without the quotation
<P><PRE>      marks), and then choose OK.
</PRE>
<P><LI>Load FOXRUN.PIF, as follows:
<P>
   a. From the File menu, choose Open.
   b. In the File Name box, type "\FOXPROW\FOXRUN.PIF" (without the
<P><PRE>      quotation marks), and then press ENTER.
</PRE><P>
<P><PRE>      NOTE: "FOXPROW" is the default name of your FoxPro for Windows
      directory. If your FoxPro for Windows directory is not "FOXPROW",
      substitute the directory name of the directory in which FoxPro for
      Windows is located.
</PRE>
<P><LI>Edit FOXRUN.PIF, as follows:
<P>
   a. Make sure the Window Title box says "FoxPro Run Command."
   b. Select the Close Window On Exit check box.
   c. In the Program Filename box, type "mybatch.bat" (without the
<P><PRE>      quotation marks).
</PRE>
<P><LI>Save the modified FOXRUN.PIF to a new filename, as follows:
<P>
   a. From the File menu, choose Save As.
   b. In the File Name box, type "\FOXPROW\MYRUN.PIF" (without the
<P><PRE>      quotation marks), and then press ENTER.
</PRE><P>
<P><PRE>      NOTE: If your FoxPro for Windows directory is not "FOXPROW",
      substitute the directory name of the directory in which FoxPro for
      Windows is located.
</PRE>
<P><LI>Quit the PIF Editor by choosing Exit from the File menu.
<P>
</OL>After you have created the PIF file, save the following code sample in a
file called MYRUN.PRG, and then type "DO MYRUN" (without the quotation
marks) in the Command window.
<P>
<PRE>   PROCEDURE myrun

   CLEAR

   * This line calls the procedure "makebat", which creates a batch
   * file to execute MS-DOS commands. This functionality is
   * included in this sample so that a full-functioned demonstration
   * can be provided. In practice, the line "DO makebat" and the
   * procedure "makebat" are not necessary. In normal usage, you
   * would create a batch file that performs the required actions
   * and include it with the application.

   DO makebat

   * We need FOXTOOLS.FLL to make calls to the Microsoft Windows API

   SET LIBRARY TO SYS(2004)+"FOXTOOLS.FLL"

   * Register the FindWindow function

   FindWindow = REGFN("FindWindow","@C@C","I")

   * The text assigned to the memory variable "mWindow" is the
   * title of the window created by the PIF file. You can change
   * the title of this window by changing the text in the Window
   * Title field (see instructions for editing the PIF file). If
   * you change the contents of the Window Title field in the PIF
   * file, the same window title should be assigned to the mWindow
   * variable below. mClassName should be "tty"

   mWindow    = "FoxPro Run Command"
   mClassName = "tty"

   * The PIF file should be contained in the FoxPro for Windows
   * directory. We do not know what directory this program may be
   * running from. The use of SYS(2004) ensures that this program
   * will find the PIF file. In actual practice, macro substitution
   * can be avoided if the path to the PIF file is known. For
   * example:  RUN /n \path\myrun.pif

   mFile = sys(2004)+"myrun.pif"
   RUN /n &amp;mFile

   * Get the handle to the window titled "FoxPro Run Command".
   * This window is opened when the RUN command is executed.

   mWindowHandle = CALLFN(FindWindow,@mClassName,@mWindow)

   * This loop prevents program execution from continuing until
   * the RUN command is finished. When the RUN command is finished,
   * the FoxPro Run Command window will disappear. When this occurs,
   * the handle (mWindowHandle) will be 0. While the Window exists,
   * the value of mWindowHandle will not be 0. Inside a loop, we
   * continuously call FindWindow until a 0 is returned, indicating
   * that the RUN command has finished execution.

   DO WHILE mWindowHandle &lt;&gt; 0

       * In actual usage, the following line can be removed. It is
       * included here to provide visual feedback.

        ? "The RUN Command is executing.  Window handle is:";
   +LTRIM(STR(mWindowHandle))

        mWindowHandle = CALLFN(FindWindow,@mClassName,@mWindow)

        = INKEY(1)

   ENDDO

   * In actual usage, the following line can be removed. It is
   * included here to provide visual feedback.

   ? "The RUN Command is finished"

   * The FOXTOOLS library is no longer needed

   SET LIBRARY TO

   RETURN

   PROCEDURE makebat

      * This procedure is used to create a text file (batch file)
      * that will be used by the .PIF file to execute MS-DOS
      * commands.

      DELETE FILE mybatch.bat

        h = FCREATE("Mybatch.BAT")
        = FWRITE(h,"CHKDSK"+CHR(13)+CHR(10))
        = FWRITE(h,"DIR"+CHR(13)+CHR(10))
        = FWRITE(h,"DIR"+CHR(13)+CHR(10))
        = FCLOSE(h)

   RETURN
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxWin VFoxWin 2.50 2.50a 2.50b 2.60 2.60a 3.00<BR>
sdk pause 3.0 3.1 3.11<BR>
KBCategory: kbprg kbinterop kbcode<BR>
KBSubcategory: FxprgFoxtools<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

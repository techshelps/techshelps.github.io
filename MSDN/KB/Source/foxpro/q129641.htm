

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Alternative to SCATTER and GATHER in the New VFP Model </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129641">
<META NAME="KBModify" CONTENT="1996/10/18">
<META NAME="KBCreate" CONTENT="1995/05/01">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  In FoxPro versions 2.x, many developers used the SCATTER and GATHER commands to edit data in memory variables. These commands allowed the developer to verify the contents of each field before placing the data in the .DBF file, and resolved some rec...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAUR,QBXS,QAPF,QA7O,QA7N,QAYY,QAU7,QAGU,QAKR,QAH4,QAJZ,QA56,QA55,QAX1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Alternative to SCATTER and GATHER in the New VFP Model</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129641</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 5.0
<LI>Microsoft Visual FoxPro for Macintosh, version 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In FoxPro versions 2.x, many developers used the SCATTER and GATHER
commands to edit data in memory variables. These commands allowed the
developer to verify the contents of each field before placing the data in
the .DBF file, and resolved some record locking issues.
<P>
Visual FoxPro has added a data buffering feature that can be used as an
alternative approach to using SCATTER and GATHER in your programs. Data
buffering provides the following benefits to you as a developer:

<UL><LI>When you use buffering, you can automatically access the validation
   rules for fields and records that have been entered into the data base
   container. When you use memory variables, you cannot automatically
   access these rules.

<LI>You can determine when a record is locked (prior to editing, or after
   editing and before saving) to handle contention for record locks in a
   multiuser environment. In this respect, the buffering features
   eliminate the need for READ NOLOCK.

<LI>Table buffering allows you to save edits for multiple records in memory
   at the same time. For example, you can keep all of the line items for an
   invoice in memory and write them at one time if the user chooses to save
   the invoice.

<LI>Visual FoxPro provides several new functions to assist you in applying
   or discarding updates to a table, and in verifying data integrity in a
   multiuser environment.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example for Implementing Buffering in a Form</h3>
 
<P>
You can easily implement buffering in a form as an alternative to scatter
and gather. The following example walks you through the process of creating
a table with validation on a specific field and designing a form that uses
buffering to enforce this validation on a form.

<OL><P><LI>In the Command window, issue this command:
<P>
   SET DEFAULT TO \VFP\SAMPLES\MAINSAMP\DATA

<P><LI>Create a new form.

<P><LI>From the View menu, choose Data Environment. From the Data Environment
   menu, choose Add Table. Add an existing .DBF to the data environment.
   To take advantage of field or record level validation, you must make the
   .DBF part of a database container and must have validation rules defined
   in the .DBC file.

<P><LI>Drag one or more fields from the data environment window to the form.

<P><LI>Set the Form.BufferMode property to 2 for Optimistic Buffering. This
   will set optimistic table buffering for any grids bound to data and
   optimistic row buffering for all other controls bound to a data source.

<P><LI>Add a command group to the form. Set the ButtonCount property to 2. Set
   the caption of the first button to "Save" and the caption of the second
   button to "Cancel."

<P><LI>To allow users to save changes to the table, add the following code to
   the command1.click method:
<P>
   lUpdated = TABLEUPDATE()
   IF !lUpdated
<P><PRE>      =MESSAGEBOX("Update failed", 64)
</PRE>   ENDIF
   THISFORM.REFRESH

<P><LI>To allow users to cancel changes to the table, add the following code to
   the command2.click button:
<P>
   iRecords = TABLEREVERT()
   =MESSAGEBOX("Changes to " + STR(iRecords, 2) + " were discarded", 64)
   THISFORM.REFRESH

<P><LI>Save and run the form.
<P>
</OL><h3>Additional Considerations</h3>
 
<P>
You probably will want to add the following additional features to your
form:

<UL><LI>Navigation buttons to allow movement between records.

<LI>An on error handling routine to handle error 109, "Record in use by
   another."

<LI>An expansion of step 7 to allow for common scenarios that would cause
   the tableupdate() function to fail. Possible reasons for failure include
   an inability to lock the record and the possibility that another user
   modified the record while the current user was editing it.
<P>
</UL>You do not need to write individual field-level validation routines for any
table that is part of a database container (DBC). The form automatically
accesses any validation rules or triggers contained in the DBC. The user
won't be able to move the pointer (cursor) off of an offending field until
a valid value is placed in the field.
<P>
You do not need to write code to save the initial values of each field. The
CURVAL(), OLDVAL(), and GETFLDSTATE() functions can be useful in handling
situations where a different user has modified the current record.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Refer to the Visual FoxPro "Professional Features Guide" and "Developers
Guide" for more information on buffering and developing forms.
<P>
For additional information on setting buffering in your application, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q128205.htm">Q128205</A></B>
   TITLE     : How to Set Buffering Mode in Visual FoxPro
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 VFoxMac 3.00b 3.00 VFoxWin<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Error Generated Through Interface Clears READ EVENTS </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143284">
<META NAME="KBModify" CONTENT="1996/01/31">
<META NAME="KBCreate" CONTENT="1996/01/30">
<META NAME="Keywords" CONTENT="kbprg kbprb">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  If an error is generated through the interface at a time when program execution is halted on a READ EVENTS, selecting Ignore from the dialog clears the READ EVENTS. Alternately, having an ON ERROR routine without a RETRY causes the same behavior.  ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAO4,QAAP,QAB4,QAEF,QAPN,QA5V,QBFN,QAJX,QADR,QAB9,QAUR,QACI,QAKP,QBXT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Error Generated Through Interface Clears READ EVENTS</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 31, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143284</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0 and 3.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If an error is generated through the interface at a time when program
execution is halted on a READ EVENTS, selecting Ignore from the dialog
clears the READ EVENTS. Alternately, having an ON ERROR routine without a
RETRY causes the same behavior.
<P>
<P><h2>CAUSE</h2>
 
<P>
If an error occurs, selecting Ignore moves program execution to the next
line of code. If an ON ERROR routine is used, execution also resumes at the
next line of code if no RETRY command is issued.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Conditionally execute a RETRY after testing for which line of code is
active when the error occurs.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior and Resolution</h3>
 
<P>
This example uses the Customer table from the \VFP\samples\data\Testdata
database. The READ EVENTS is placed in a procedure by itself. A RETRY is
conditionally executed within the error handler when an error occurs and
the program name passed to the error handler is the procedure containing
the READ EVENTS.

<OL><P><LI>Create a new program containing the following code, and name it
   Readtest.prg.
<P>
   *  Begin READTEST.PRG
   *
<P>
   SET EXCLUSIVE OFF
   ON ERROR DO errhand WITH ;
<P><PRE>      ERROR(), MESSAGE(), MESSAGE(1), PROGRAM(), LINENO()
</PRE><P>
   * The following DO FORM allows the form to be cleared if the program
   * ends since the variable oReadTest loses scope
<P>
   DO FORM ReadTest NAME oReadTest LINKED
<PRE>   =Read_Events()       &amp;&amp; Call procedure to invoke READ EVENTS
   ON ERROR

   PROCEDURE ErrHand
   PARAMETER nErrorNum, cErr_Msg, cErr_Msg1, cErr_Prog, nErr_Line

   * Display error number
   WAIT WINDOW "Error # "+ALLTRIM(STR(nErrorNum))+ ;
               " In "+ALLTRIM(cErr_Prog) TIMEOUT 1

   IF UPPER(cErr_Prog)='READ_EVENTS'   &amp;&amp; Check for program/procedure
   *   RETRY           &amp;&amp; Remove * to make error not clear READ EVENTS
   ENDIF

   ENDPROC

   PROCEDURE Read_Events
      READ EVENTS
   ENDPROC

   *  End READTEST.PRG

</PRE><P><LI>Create a new form. Add the Customer table to the Data Environment of the
   form. Then create a grid by dragging the Customer table from the Data
   Environment of the form. Set the ColumnCount of the grid to 5.

<P><LI>Place the following code in the Destroy event procedure code for the
   form:
<P>
<PRE>   =TABLEREVERT(.T.)      &amp;&amp; Do not save changes
   CLEAR EVENTS

</PRE><P><LI>Set the BufferMode of the form to 1 - Pessimistic.

<P><LI>Add a command button to the form, and place the following code in its
   Click event procedure code:
<P>
   THISFORM.Release

<P><LI>Change the Caption property of the command button to Close.

<P><LI>On the File menu, click Save, and save the form as Readtest.scx.

<P><LI>Run the Readtest.prg program. Make a change to the first record in the
   grid.

<P><LI>Start another instance of Visual FoxPro. Run the program in the new
   instance. Make a change to the first record in the grid. The WAIT window
   will be displayed with error number 109. The form will be released
   because the variable oReadTest is released (goes out of scope).

<P><LI>Go back to the first instance of Visual FoxPro, and close the form.

<P><LI>Edit Readtest.prg, and remove the * from the RETRY command in the
<P><PRE>    ErrHand procedure.
</PRE>
<P><LI>Repeat steps 8 and 9. The form will not be exited in the second
<P><PRE>    instance of Visual FoxPro. The RETRY causes program execution to remain
    on the READ EVENTS command.
</PRE><P>
</OL>Notes:

<UL><LI>The READ EVENTS is placed alone in a separate procedure because this is
   the only way to reliably determine the line of code currently executing.
   MESSAGE(1) will not return the line of code within an .exe file or show
   whether the source code is present or accessible when the program is
   run.

<LI>The error that occurs is "Record is in use by another user." This is
   caused by the attempt to lock a record in the second instance which is
   already locked in the first instance due to the Pessimistic buffering
   scheme.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.00b VFoxWin<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: FxprgRead<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 31, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

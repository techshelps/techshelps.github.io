

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use the GETPEM() Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143205">
<META NAME="KBModify" CONTENT="1996/01/30">
<META NAME="KBCreate" CONTENT="1996/01/28">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The GETPEM() function introduced in Visual FoxPro 3.0b returns the current value for a property or the program code for an event or a method. It can be used as a debugging tool. Because the GETPEM() function can operate on classes, it is useful to ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAUD,QAH4,QABO,QAGI,QBV8,QAB9,QAY5,QAO4,QAKD,QBT6,QAMB,QBV4,QBVV,QAYL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use the GETPEM() Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143205</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The GETPEM() function introduced in Visual FoxPro 3.0b returns the current
value for a property or the program code for an event or a method. It can
be used as a debugging tool. Because the GETPEM() function can operate on
classes, it is useful to create applications that extend the Visual FoxPro
interface. This article highlights some of the functionality of GETPEM().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Syntax</h3>
 
<P>
The syntax of GETPEM() is as follows:
<P>
<PRE>   GETPEM(oObjectName | cClassName, cProperty | cEvent | cMethod)

</PRE>GETPEM receives either an object name or a class name as a first parameter.
This means that the GETPEM() function does not require an instance of the
class to return a value. In the following example, GETPEM is called to
return the value of a property. The first time GETPEM is used, the first
parameter is an object name. The second GETPEM verifies the value of the
Caption property at the class level.
<P>
<PRE>   oObjRef=CreateObject('myform')
   oObjRef.Show
   oObjRef.Caption="Testing the New Function"
   ?'Caption of the Object: '
   ??GETPEM(oObjref,'Caption')
   ?'Caption in the Class: '
   ??GETPEM('myform','Caption')
   =Messagebox('Press Any Key to Clear')

   DEFINE CLASS myform as Form
     Caption="Testing GETPEM"
   ENDDEFINE

</PRE>Note that the first parameter does not require quotation marks when it is a
variable that references an object. However, if the first parameter is the
name of a class, and you do not type quotation marks, the error "Variable
&lt;var&gt; is not Found" is returned.
<P>
<P><h3>Using GETPEM with Visual FoxPro Base Classes or User Defined Classes</h3>
 
<P>
GETPEM can return the value of a property of a base class. For example, to
determine the default font of a text box, you can use the following
command:
<P>
<PRE>   ?GETPEM('TextBox','FontName')

</PRE>You can use this to determine default attributes of objects before you
modify them. To return a value on a user defined class, GETPEM requires
that the class be cached in memory. It does not, however, require that an
instance of the class actually exist. To have a class cached in memory, you
need to create an instance of the user defined class. You can then release
this instance. For example:
<P>
<PRE>   oTool1=CREATEOBJECT('ToolBar')
   oTool1=.NULL.

</PRE>A CLEAR ALL or CLEAR CLASS ClassName would release the class from memory.
Note that GETPEM does not search a Visual Class Library (VCX) opened with
the SET CLASSLIB command. You also need to create an instance of the class
and release it when you search a class defined in a VCX.
<P>
<P><h3>Calling GETPEM at design time</h3>
 
<P>
The GETPEM() function can be called at design time or at run time. The
following step-by-step example shows how you can use GETPEM with SYS(1270)
to return the value of a property. By using SYS(1270), you don't need to
make an explicit call to a variable reference.

<OL><P><LI>In the Command window, type
<P>
<P><PRE>     ON KEY LABEL F7 WAIT WINDOW GETPEM(SYS(1270),'Class')
</PRE>
<P><LI>Create a form, and place a command button and text box on the form.

<P><LI>Position the mouse pointer over one control, and press the F7 key. A
   window displays the class name of the control.
<P>
</OL><h3>Using GETPEM to Return Event Code</h3>
 
<P>
The GETPEM function is also useful to return method or event code. Although
you cannot write method code at run time, you can use GETPEM to help you
debug an application. The following example prints the code of a method
that generates an error.

<OL><P><LI>Create a form.

<P><LI>Add a command button to a form.

<P><LI>In the Click event of the button, add this code:
<P>
<PRE>   RELAESE THISFORM   &amp;&amp; error that calls the event handler

</PRE><P><LI>In the Error event handler of the button, type:
<P>
   LPARAMETERS nError, cMethod, nLine
   ACTIVATE SCREEN
   ?'ERROR'+ALLTRIM(STR(nError))+'IN LINE'+ALLTRIM(STR(nLine))+':'
   ?GETPEM(THIS,cMethod)

<P><LI>Save and run the form. When the form is displayed, click the command
   button. It contains an error that calls the Error event. The method code
   is then printed to the screen.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00b debug trace builder wizard<BR>
KBCategory: kbprg kbhowto<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create a Mover Dialog Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137123">
<META NAME="KBModify" CONTENT="1995/11/21">
<META NAME="KBCreate" CONTENT="1995/09/20">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  A mover dialog box is an object you can use to move items from one list object to another to make selections from available choices. FoxPro does not have a mover dialog box option to choose when making a screen, but you can use the techniques prese...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAXC,QBE7,QBE6,QBXS,QA4P,QAEF,QA01,QACI,QBVR,QA2Q,QAI4,QAYL,QAGB,QAEB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create a Mover Dialog Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137123</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
<LI>Microsoft FoxPro for MS-DOS, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A mover dialog box is an object you can use to move items from one list
object to another to make selections from available choices. FoxPro does
not have a mover dialog box option to choose when making a screen, but you
can use the techniques presented in this article to simulate a mover dialog
box in FoxPro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This example of a mover dialog box can be created once but used over and
over throughout all of your applications. The GENSCRN generated code will
be a procedure that accepts three parameters: cTitle, acChoices and
acSelected.

<UL><LI>cTitle is a character expression that will be used for the window title
   of the dialog box.

<LI>acChoices is a one-dimensional array of character values representing
   the available choices from which the user may select.

<LI>acSelected is a one-dimensional array, the same size as acChoices, but
   initialized with null characters (SPACE(0)) that will contain a list of
   the selected choices.
<P>
</UL>When the Mover Dialog Box is run, it will determine if any choices have
already been placed in the "selected list" and mark those choices as
unavailable in the list of choices. As items are selected from the list of
choices, they will become unavailable, unless that item is moved back.
<P>
<P><h3>Steps to Create Mover Dialog Box</h3>
 

<OL><P><LI>Create a screen in FoxPro. On the left side of the screen, create a
   list box for the variable m.nChoice from an array called acChoices.
   This list box should only take up the left 2/5's of the screen. In the
   Valid Code Snippet, place this code:
<P>
   IF m.nChoice # 0
<P><PRE>      IF LEFT(acChoices[m.nChoice],1) # "\"
<PRE></PRE>         m.nSelected = m.nSelected + 1
         m.nSelect = m.nSelected
         acSelected[m.nSelected] = acChoices[m.nChoice]
         acChoices[m.nChoice] = "\" + acChoices[m.nChoice]
         SHOW GETS
         SHOW GET nAction, 1 ENABLED
         SHOW GET nAction, 2 ENABLED
         IF m.nSelected = 0
            SHOW GET nAction, 3 DISABLED
            SHOW GET nAction, 4 DISABLED
         ELSE
            SHOW GET nAction, 3 ENABLED
            SHOW GET nAction, 4 ENABLED
         ENDIF
      ENDIF
   ENDIF

</PRE><P><LI>On the right side of the screen, create another list box for the
   variable m.nSelect from an array called acSelected. This list box
   should only take up the right 2/5's of the screen. In the Valid Code
   Snippet, place this code:
<P>
   IF m.nSelect # 0
<P><PRE>      IF ! EMPTY(acSelected[m.nSelect])
<PRE></PRE>         m.Value = acSelected[m.nSelect]
         m.nSelected = m.nSelected - 1
         =ADEL(acSelected,m.nSelect)
         acSelected[ALEN(acSelected)] = ""
         x = ASCAN(acChoices,"\"+m.Value)
         acChoices[x] = substr(acChoices[x],2)
         SHOW GETS
         SHOW GET nAction, 1 ENABLED
         SHOW GET nAction, 2 ENABLED
         IF m.nSelected = 0
            SHOW GET nAction, 3 DISABLED
            SHOW GET nAction, 4 DISABLED
         ELSE
            SHOW GET nAction, 3 ENABLED
            SHOW GET nAction, 4 ENABLED
         ENDIF
      ENDIF
   ENDIF

</PRE><P><LI>In the middle of the screen, create a vertical, four-button push button
   set for the variable nAction. The buttons should be labeled: Select,
   Select All, Deselect, Deselect All. In the Valid Code Snippet, place
   this code:
<P>
   DO CASE
<P><PRE>      CASE nAction = 1  &amp;&amp; Select one
<PRE></PRE>         IF m.nChoice # 0
            IF LEFT(acChoices[m.nChoice],1) # "\"
               m.nSelected = m.nSelected + 1
               m.nSelect = m.nSelected
               acSelected[m.nSelected] = acChoices[m.nChoice]
               acChoices[m.nChoice] = "\" + acChoices[m.nChoice]
               SHOW GETS
               IF m.nSelected = ALEN(acSelected)
                  SHOW GET nAction, 1 DISABLED
                  SHOW GET nAction, 2 DISABLED
               ELSE
                  SHOW GET nAction, 1 ENABLED
                  SHOW GET nAction, 2 ENABLED
               ENDIF
               SHOW GET nAction, 3 ENABLED
               SHOW GET nAction, 4 ENABLED
            ENDIF
         ENDIF
      CASE nAction = 2  &amp;&amp; Select All
         =ACOPY(laChoices, acSelected)
         =ACOPY(laChoices, acChoices)
         FOR x = 1 to ALEN(acChoices)
            acChoices[x] = "\" + acChoices[x]
         ENDFOR
         m.nSelected = ALEN(acChoices)
         m.nSelect = 1
         m.nChoice = 1
         SHOW GETS
         SHOW GET nAction, 1 DISABLED
         SHOW GET nAction, 2 DISABLED
         SHOW GET nAction, 3 ENABLED
         SHOW GET nAction, 4 ENABLED
      CASE nAction = 3  &amp;&amp; Deselect one
         IF m.nSelect # 0
            IF ! EMPTY(acSelected[m.nSelect])
               m.Value = acSelected[m.nSelect]
               m.nSelected = m.nSelected - 1
               =ADEL(acSelected,m.nSelect)
               acSelected[ALEN(acSelected)] = ""
               x = ASCAN(acChoices,"\"+m.Value)
               acChoices[x] = SUBSTR(acChoices[x],2)
               SHOW GETS
               SHOW GET nAction, 1 ENABLED
               SHOW GET nAction, 2 ENABLED
               IF m.nSelected = 0
                  SHOW GET nAction, 3 DISABLED
                  SHOW GET nAction, 4 DISABLED
               ELSE
                  SHOW GET nAction, 3 ENABLED
                  SHOW GET nAction, 4 ENABLED
               ENDIF
            ENDIF
         ENDIF
      CASE nAction = 4  &amp;&amp; Deselect All
         =ACOPY(laChoices, acChoices)
         STORE "" TO acSelected
         m.nSelected = 0
         m.nSelect = 0
         m.nChoice = 0
         SHOW GETS
         SHOW GET nAction, 1 ENABLED
         SHOW GET nAction, 2 ENABLED
         SHOW GET nAction, 3 DISABLED
         SHOW GET nAction, 4 DISABLED
   ENDCASE

</PRE><P><LI>At the bottom of the screen, create a centered, horizontal, two-button
   push button set for the variable m.nResult. The buttons should be
   labeled: OK and Cancel. The "Terminate READ On Selection" check box
   should also be selected. In the Valid Code Snippet, place this code:
<P>
   IF m.nResult = 2
<P><PRE>      =ACOPY(laChoices, acChoices)
      =ACOPY(laSelected, acSelected)
</PRE>   ENDIF

<P><LI>In the Screen Setup Code Snippet, place this code:
<P>
   #SECTION1
   Parameters cTitle, acChoices, acSelected
<P>
   Private nChoices, nSelected, nChoice, nSelect, nAction, nResult, x
   STORE 0 TO nChoices, nSelected, nAction, nResult
<P>
   =ACOPY(acChoices, laChoices)
   =ACOPY(acSelected, laSelected)
<P>
   FOR x = 1 TO ALEN(acChoices)
<P><PRE>      nChoices = nChoices + IIF(EMPTY(acChoices[x]),0,1)
      IF ASCAN(acSelected,acChoices[x]) # 0
<PRE></PRE>         acChoices[x] = "\" + acChoices[x]
      ENDIF
   ENDFOR

   FOR x = 1 TO ALEN(acSelected)
      nSelected = nSelected + IIF(EMPTY(acSelected[x]),0,1)
   ENDFOR

</PRE><P><LI>In the "On Screen Entry (When)" Code Snippet, place this code:
<P>
   IF m.nSelected = 0
<P><PRE>      SHOW GET nAction, 3 DISABLED
      SHOW GET nAction, 4 DISABLED
</PRE>   ELSE
<P><PRE>      SHOW GET nAction, 3 ENABLED
      SHOW GET nAction, 4 ENABLED
</PRE>   ENDIF
   RETURN .t.

<P><LI>Under the Screen Layout dialog box, enter the screen title as &amp;cTitle.
   and enter the screen name as Selector. Select the Position - Center
   check box so that the dialog box will always be centered on the screen.

<P><LI>Save the screen as Mover.Scx and generate the screen program. You may
   use the following as a test program:
<P>
   CLEAR
   ? "loading customer names ..."
   USE c:\fpw26\tutorial\customer
   SET FILTER TO recno()%10 = 0
   COPY TO ARRAY aChoices FIELD company
   ASORT(aChoices)
   USE
   CLEAR
   DIMENSION aSelected[ ALEN(aChoices,1) ]
   aSelected = SPACE(0)
   DO mover.spr WITH "Select Company", aChoices, aSelected
   CLEAR
   ? "You chose:"
   FOR x = 1 TO ALEN(aSelected)
<P><PRE>      IF ! EMPTY(aSelected[x])
<PRE></PRE>         ? x, aSelected[x]
      ENDIF
   ENDFOR
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.50 2.50a 2.50b 2.60 2.60a FoxWin FoxDos<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgGeneral<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

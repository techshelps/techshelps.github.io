

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Append Records from Any Delimited File with Memo Data </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140294">
<META NAME="KBModify" CONTENT="1998/03/20">
<META NAME="KBCreate" CONTENT="1995/11/28">
<META NAME="Keywords" CONTENT="FxtoolGeneral kbcode kbhowto kbtool">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article shows by example how to append records from any delimited ASCII text file into a predefined FoxPro table or .dbf file.  The intent of the program listed in this article is twofold. The first is to address the inability of the APPEND co...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBRZ,QBBI,QA5V,QA7O,QA7N,QAY2,QBVV,QAGX,QAHE,QAEF,QDI1,QAZZ,QAK6,QDNG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Append Records from Any Delimited File with Memo Data</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 20, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140294</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.5x 2.60 2.60a 3.00 | 2.5x 2.60 2.60a | 2.5x 2.60a
<PRE>WINDOWS              | MS-DOS          | MACINTOSH
</PRE>kbtool kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
<LI>Microsoft FoxPro for MS-DOS, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
<LI>Microsoft FoxPro for Macintosh, versions 2.5b, 2.5c, 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by example how to append records from any delimited
ASCII text file into a predefined FoxPro table or .dbf file.
<P>
The intent of the program listed in this article is twofold. The first is
to address the inability of the APPEND command to read data into a memo
field. The second is to provide a wider range of support for source file
formats that the APPEND command does not support.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Here's an excerpt from the Visual FoxPro APPEND FROM Help Topic:
<P>
<PRE>   A delimited file is an ASCII text file in which each record ends with a
   carriage return and linefeed. Field contents are by default assumed to
   be separated from each other by commas, and character field values to be
   additionally delimited by double quotation marks."

</PRE>The program listed in this article does not require linefeeds after the
carriage return, nor does it require that character data be delimited by
double quotation marks. Also, files do not have to be terminated with an
end-of-file marker (^Z), but the program will work fine if the end-of-file
marker is present. This flexibility is necessary because many applications
do not export their data in a format suitable for FoxPro's APPEND FROM
command.
<P>
Numeric, Float, Double, Integer, Currency, Date, and Memo fields from
delimited files can be imported if the data is in proper format. The date
format defaults to mm/dd/yy. Including the century portion of a date is
optional. FoxPro will import a date, such as 12/25/95, that doesn't include
the century assuming the date is in the twentieth century.
<P>
Date delimiters can be any non-numeric character except the delimiter that
separates the fields in the delimited file. Dates in other formats can be
imported if their format matches a date format available in SET DATE. To
import dates that are not in the default format, issue SET DATE with the
proper date format before using the program listed in this article
(Appendm.prg). To test if a date format can be successfully imported, use
it with CTOD(). If the date is acceptable to CTOD(), the date will import
properly.
<P>
Character strings with a length in excess of 10,000 characters have been
tested and work fine when imported into a memo field.
<P>
NOTE: Do not use a delimiting character that appears in the actual data.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
*******************************************************************
*
* Appendm.prg
*
* Purpose:
*
*   Append records from any delimited ASCII text file into a
*   predefined FoxPro table or .dbf file. The intent of this program
*   is twofold. The first is to address the inability of the
*   APPEND command to read in data into a memo field. The second
*   is to provide a wider range of support for source file formats.
*
* Syntax:
*
*   DO AppendM [WITH &lt;expC1&gt;, &lt;expC2&gt;[, &lt;expC3&gt;[, &lt;expC4&gt;]]]
*
* Parameters:
*
*  &lt;expC1&gt;
*
*   Specify the full name of the ASCII text file to append from
*   with extension. If this parameter is used, then &lt;expC2&gt; and
*   optionally &lt;expC3&gt; must be specified also. If this parameter
*   is not specified, the user will be prompted for the file.
*
*  &lt;expC2&gt;
*
*   Specify the field-delimiting character. This parameter must
*   be used if &lt;expC1&gt; is specified. If &lt;expC1&gt; is not specified,
*   this parameter is ignored.
*
<PRE>*     Samples:    ','    = COMMA
*                 CHR(9) = TAB
*
</PRE>*  &lt;expC3&gt;
*
*   Specify the character field delimiting character. Use the
*   null string ("") for none. This parameter is optional if
*   &lt;expC1&gt; is specified. If &lt;expC1&gt; is not specified, this
*   parameter is ignored.
*
*  &lt;expC4&gt;
*
*   Specify the name of the table or .dbf file to append to. If the
*   extension is not specified, .dbf is assumed. If a table or .dbf
*   file is open in the current work area, this parameter will be
*   ignored and the open table will be used.
*
* Examples:
*
*   For full prompting:
*
*      DO AppendM
*
*   For a source file with comma-delimited fields and double-quotation-
*   mark delimited character fields:
*
*      DO AppendM WITH 'SRCFILE.TXT', ',', '"'
*
*   For a source file with tab-delimited fields and no character
*   field delimiter:
*
*      DO AppendM WITH 'SRCFILE.TXT', CHR(9)
*
*   For a source file with comma-delimited fields and double-quotation-
*   mark delimited character fields with the current work area unused:
*
*      DO AppendM WITH 'SRCFILE.TXT', ',', '"', 'DESTFILE.DBF'
*
* Notes:
*
*  Before using this program, ensure that the target table or
*  .dbf file is structured to accept the data from the source
*  file, and ensure that the source file is in ASCII file format.
*
*  Each record in the source file must be terminated with a
*  carriage return (CR). Linefeeds (LF) following a CR are
*  also supported. The program will address text files with
*  any field delimiters. Character data fields may optionally be
*  delimited. An end-of-file marker (^Z) is supported but not
*  required.
*
*******************************************************************
PARAMETERS cTextFile, cFieldDelim, cChrFldDelim, cTableFile
<P>
IF TYPE( "cTextFile" ) = 'L'
<PRE>   cTextFile = ''
</PRE>ENDIF
IF TYPE( "cFieldDelim" ) = 'L'
<PRE>   cFieldDelim = ''
</PRE>ENDIF
IF TYPE( "cChrFldDelim" ) = 'L'
<PRE>   cChrFldDelim = ''
</PRE>ENDIF
IF TYPE( "cTableFile" ) = 'L'
<PRE>   cTableFile = ''
</PRE>ENDIF
<P>
*
*  Attempt to get and/or open the table or .dbf file
*  If successful, continue; otherwise, Return
*
IF USED()
<PRE>   cDBF_File = ALIAS()
</PRE>ELSE
<PRE>   IF EMPTY( cTableFile )
      cDBF_File = GETFILE( 'DBF', 'Append to:')
   ELSE
      IF !FILE( cTableFile ) AND !FILE( cTableFile + '.DBF' )
         cDBF_File = GETFILE( 'DBF', 'Append to:')
      ELSE
         cDBF_File = cTableFile
      ENDIF
   ENDIF
   IF !EMPTY( cDBF_File )
      USE (cDBF_File)
   ELSE
      ?? CHR(7)
      WAIT WINDOW "No Table/DBF Selected to Append To!"
      RETURN
   ENDIF
</PRE>ENDIF
<P>
*
*  Attempt to get ASCII text file
*  If successful, continue; otherwise, Return
*
IF EMPTY( cTextFile )
<PRE>   cTXT_File = GETFILE( 'TXT', 'Source:')
</PRE>ELSE
<PRE>   IF !FILE( cTextFile )
      cTXT_File = GETFILE( 'TXT', 'Source:')
   ELSE
      cTXT_File = cTextFile
   ENDIF
</PRE>ENDIF
IF EMPTY( cTXT_File )
<PRE>   ?? CHR(7)
   WAIT WINDOW "No Text File Selected to Append From!"
   RETURN
</PRE>ENDIF
<P>
*
*  Verify Delimiting Characters. If successful,
*  continue; otherwise, Return
*
IF EMPTY( cTextFile )
<PRE>   DEFINE WINDOW wGetDelims ;
      FROM 1,1 TO 15,60 ;
      TITLE "Delimiters" ;
      NOCLOSE NOFLOAT NOGROW NOMDI NOMINIMIZE NOSHADOW NOZOOM
   MOVE WINDOW wGetDelims CENTER
   ACTIVATE WINDOW wGetDelims NOSHOW
   CLEAR
   @3,10 SAY "Press the Field Delimiting Character"
   @5,10 SAY "ie.. COMMA = &lt;,&gt; or TAB = &lt;TAB KEY&gt;"
   @7,29 say "" COLOR I
   ACTIVATE WINDOW wGetDelims
   nFieldDelim = INKEY(0,'S')
   IF nFieldDelim = 9 or nFieldDelim &gt; 32 and nFieldDelim &lt; 127
      cFieldDelim = CHR( nFieldDelim )
   ENDIF
   @3,5 SAY "Press the Character Field Delimiting Character"
   @5,6 SAY "Typically DOUBLE-QUOTE, Press ENTER for None"
   @7,29 say "" COLOR I
   nChrFldDelim = INKEY(0,'S')
   CLEAR
   IF nChrFldDelim &gt; 32 and nChrFldDelim &lt; 127
      cChrFldDelim =CHR( nChrFldDelim )
      ELSE
        cChrFldDelim = ""    &amp;&amp; No delimiter
   ENDIF
   DEACTIVATE WINDOW wGetDelims NOSHOW
   RELEASE WINDOW wGetDelims
</PRE>ENDIF
<P>
IF LEN( cFieldDelim ) = 0
<PRE>   ?? CHR(7)
   WAIT WINDOW "No Field Delimiting character Specified!"
   RETURN
</PRE>ENDIF
<P>
*
*  Attempt to open text file with low-level handle.
*  If the test is successful, continue; otherwise,
*  report reason for failure.
*
nFileHandle = FOPEN( cTXT_File )
IF nFileHandle &lt; 0
<PRE>   DO ErrHand WITH FERROR(), cTXT_File
   RETURN .F.
</PRE>ENDIF
*
*  Create an array of database structure.
*  Determine number of records in array for
*  loop counting.
*
=AFIELDS( aStructure )
nRows = ALEN( aStructure, 1 )
<P>
*
*  Begin DO WHILE loop and continue until end of
*  file marker is reached in text file.
*
<P>
nFileSize = FSEEK( nFileHandle, 0, 2 )
= FSEEK( nFileHandle, 0, 0 )
nBytesRead = 0
RecsApnd = 0
lChrFldDelimFlag = LEN(cChrFldDelim ) # 0
WAIT WINDOW ' Records Appended: ' + LTRIM( STR( RecsApnd )) + ;
<PRE>  CHR(13) + ' Percent Completed: ' + ;
  LTRIM( STR( nBytesRead/nFileSize*100)) NOWAIT
</PRE>DO WHILE !FEOF( nFileHandle )
<PRE>   APPEND BLANK
   FOR i = 1 TO nRows
      cFieldData = ReadField( cFieldDelim, cChrFldDelim )
      DO CASE
         CASE aStructure[i,2] $ "NY"
           REPLACE &amp;aStructure[i,1] WITH VAL( cFieldData )
         CASE aStructure[i,2] = "D"
            REPLACE &amp;aStructure[i,1] WITH CTOD( cFieldData )
          OTHERWISE
            REPLACE &amp;aStructure[i,1] WITH cFieldData
      ENDCASE
        WAIT WINDOW ' Records Appended: ' + LTRIM( STR( RecsApnd )) + ;
        CHR(13) + ' Percent Completed: ' +;
        LTRIM( STR( nBytesRead/nFileSize*100 )) NOWAIT
   ENDFOR
   RecsApnd = RecsApnd + 1
</PRE>ENDDO
=FCLOSE( nFileHandle )
WAIT WINDOW ' Records Appended: ' + LTRIM( STR( RecsApnd )) + ;
<PRE>  CHR(13) + ' Percent Completed: ' + ;
  LTRIM( STR( nBytesRead/nFileSize*100)) NOWAIT
</PRE>RETURN
<P>
FUNCTION ReadField
PARAMETER cFieldDelim, cChrFldDelim
cAccumText = ""
lFldDelimFlag = .F.
DO WHILE !lFldDelimFlag AND !FEOF( nFileHandle )
<PRE>   cSingle = FREAD( nFileHandle, 1 )
   nBytesRead = nBytesRead + 1
   IF cSingle = cFieldDelim OR cSingle = CHR(13) OR ;
      IIF( lChrFldDelimFlag, cSingle = cChrFldDelim, .F. )

      IF cSingle = CHR(13)
         cSingle = FREAD( nFileHandle, 1 )
         nBytesRead = nBytesRead + 1
         IF cSingle = CHR(10)
            cSingle = FREAD( nFileHandle, 1 )
            nBytesRead = nBytesRead + 1
            IF !(cSingle = CHR(26) OR ASC(cSingle) = 0)
               =FSEEK( nFileHandle, -1, 1 )
               nBytesRead = nBytesRead - 1
            ENDIF
         ELSE
            IF !(cSingle = CHR(26) OR ASC(cSingle) = 0)
              =FSEEK( nFileHandle, -1, 1 )
              nBytesRead = nBytesRead - 1
            ENDIF
         ENDIF
         lFldDelimFlag = .T.
      ENDIF
      IF cSingle = cFieldDelim
         lFldDelimFlag = .T.
      ENDIF
      cSingle = ""
   ELSE
      cAccumText = cAccumText + cSingle
   ENDIF
</PRE>ENDDO
RETURN cAccumText
<P>
PROCEDURE ErrHand
PARAMETERS nError, cFileName
DO CASE
CASE nError = 2
<PRE>   cReason = "File not found: " + cFileName
</PRE>CASE nError = 4
<PRE>   cReason = "Unable to open ' + cFileName + '. Too many files open"
</PRE>CASE nError = 5
<PRE>   cReason = "File access denied: " + cFileName
</PRE>CASE nError = 6
<PRE>   cReason = "Error: Invalid file handle given"
</PRE>CASE nError = 8
<PRE>   cReason = "Error: Out of memory"
</PRE>CASE nError = 25
<PRE>   cReason = "Seek error (can't seek before start of file)"
</PRE>CASE nError = 29
<PRE>   cReason = "Error: Disk is full"
</PRE>CASE nError = 31
<PRE>   cReason = "Error opening file: " + cFileName
</PRE>ENDCASE
?? CHR(7)
WAIT WINDOW cReason
RETURN
<P>
*EOF Appendm.prg
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin FoxDos FoxWin FoxMac 2.50 2.50a<BR>
2.50b 2.50c 2.60 2.60a<BR>
KBCategory: kbtool kbhowto kbcode<BR>
KBSubcategory: FxtoolGeneral<BR>
Keywords          : FxtoolGeneral kbcode kbhowto kbtool<BR>
Version           : 2.5x 2.60 2.60a 3.00 | 2.5x 2.60<BR>
Platform          : MACINTOSH MS-DOS WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 20, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

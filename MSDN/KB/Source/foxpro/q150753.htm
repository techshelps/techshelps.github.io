

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create a "Windows-type" Incremental Search Box in VFP </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150753">
<META NAME="KBModify" CONTENT="1996/05/16">
<META NAME="KBCreate" CONTENT="1996/05/08">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Although the default List Box control has basic incremental search capabilities, the list box must have focus for the function to work. Its functionality differs from the implementation found in other Windows applications, such as the Search option...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QBT6,QBV4,QAE1,QABL,QAHP,QAPN,QAGX,QAA7,QAY4,QAUD,QATX,QBLX,QAO4,QAEB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create a "Windows-type" Incremental Search Box in VFP</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 16, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150753</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows versions 3.0, 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although the default List Box control has basic incremental search
capabilities, the list box must have focus for the function to work. Its
functionality differs from the implementation found in other Windows
applications, such as the Search option of Help, where the string to be
searched for is entered into a text box above a list box that displays the
first matching item as each character is entered.
<P>
This article describes how to create a technique that allows a list box to
searched incrementally, regardless of its RowSource type.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>Create a new form in Form Designer.

<P><LI>In the Data Environment, add Samples\Data\Customer.DBF.

<P><LI>In the form, add a text box, and below it, add a list box.

<P><LI>Set the list box RowSource Type as 6-Fields, RowSource as Company.

<P><LI>In the InteractiveChange event of the text box, enter the following:
<P>
<PRE>   LOCAL nIndex, oList      &amp;&amp; prevent conflict with other variables
   oList = thisform.List1   &amp;&amp; create object reference to list box

   FOR nIndex = 1 TO oList.ListCount   &amp;&amp; loop through each item

      * compare the item in the list with the string entered
      IF UPPER( oList.ListItem(nIndex) ) = UPPER( ALLTRIM( this.Value ) )
         oList.ListIndex = nIndex   &amp;&amp; select this item if matched
         EXIT               &amp;&amp; drop out of loop
      ENDIF

   ENDFOR

   oList.Refresh       &amp;&amp; update the display to show selected item

</PRE></OL>Make corrections by backspacing over the incorrect characters, or by
positioning the pointer in front of the character to be edited with the
mouse. The list box then displays the item that contains the remaining
characters within the text box.
<P>
NOTE: Performance is effected by the number of records and the position of
the item to be found within the list. Performance is improved by dividing
the list into portions and substituting variables in the FOR statement
which lowers the number of items to compare the text string with. In this
example, the list is divided into quarters:
<P>
<PRE>   LOCAL cVal, cLen, c1st, c2nd, c3rd, n1st, n2nd, n3rd, nTop, nEnd, ;
         nMax, oList
   oList = Thisform.List1
   * 1st = 1 to n2nd-1
   nMax = oList.ListCount
   n1st = INT( nMax * .25 ) &amp;&amp; 1st quarter
   n2nd = INT( nMax * .50 ) &amp;&amp; 2nd quarter
   n3rd = INT( nMax * .75 ) &amp;&amp; 3rd quarter
   c1st = UPPER( oList.ListItem[ n1st ] )   &amp;&amp; avoids case sensitivity
   c2nd = UPPER( oList.ListItem[ n2nd ] )   &amp;&amp;   when list contains
   c3rd = UPPER( oList.ListItem[ n3rd ] )   &amp;&amp;   mixed case entries
   cVal = ALLTRIM( UPPER( this.Value ) )    &amp;&amp; first character caps
   cLen = LEN( cVal )

   DO CASE
     CASE cVal &lt;= LEFT( c1st, cLen )
       nTop = 1
       nEnd = n1st
     CASE cVal &lt;= LEFT( c2nd, cLen )
       nTop = n1st + 1
       nEnd = n2nd
     CASE cVal &lt;= LEFT( c3rd, cLen )
       nTop = n2nd + 1
       nEnd = n3rd
     OTHERWISE
       nTop = n3rd + 1
       nEnd = nMax
   ENDCASE

   FOR nIndex = nTop TO nEnd   &amp;&amp; loop through each item within range
      IF UPPER( oList.ListItem[ nIndex ] ) = cVal
         oList.ListIndex = nIndex   &amp;&amp; select this item if matched
         EXIT                  &amp;&amp; drop out of loop
      ENDIF
   ENDFOR

   oList.Refresh               &amp;&amp; update the display to show selected item

</PRE>If the list is extensive and requires a large number of divisions, create
an array as a property of the form, and assign the character and numeric
division boundaries once in the Init event of the form instead of each time
in the InteractiveChange event of the form. In the following example, the
list is divided into sections:
<P>
<PRE>   Create the following two new Form properties: cLimit[9] and nLimit[9]

   In the Init event of the form, enter:

      LOCAL nDx, nMax
      oLst = this.List1  &amp;&amp; object reference to this form''''''''s list box
      nMax = oLst.ListCount     &amp;&amp; divide into tenths

   FOR nDx = 1 TO 9

      * assign number at each tenth boundary (used as index into list)
      this.nLimit[ nDx ] = INT( nMax * ( .10 * nDx ) )

      * assign list item found at this position in the list
      this.cLimit[ nDx ] = UPPER( oLst.ListItem[ this.nLimit[ nDx ] ] )

   ENDFOR

</PRE>In the InteractiveChange event of the text box, enter:
<P>
<PRE>   LOCAL cVal, cLen, nTop, nEnd, nIdx, nDex, oLst
   oLst = thisform.list1
   cVal = ALLTRIM( UPPER( this.Value ) )
   cLen = LEN( cVal )

   * if not found in the sections checked, default to the last section
   nTop = thisform.nLimit[ 9 ] + 1  &amp;&amp; i.e., one past the end of the 9th
   nEnd = oLst.ListCount            &amp;&amp;    section to the end of the list

   IF cVal &lt;= LEFT( thisform.cLimit[ 1 ], cLen ) &amp;&amp; compare to 1st element
      nTop = 1
      nEnd = thisform.nLimit[1]
   ELSE
      FOR nIdx = 2 TO 9  &amp;&amp; loop through the remaining section limits
         IF cVal &lt;= LEFT( thisform.cLimit[ nIdx ], cLen )
            nTop = thisform.nLimit[ nIdx - 1 ] + 1 &amp;&amp; previous end plus 1
            nEnd = thisform.nLimit[ nIdx ]  &amp;&amp; limit of current section
            EXIT      &amp;&amp; drop out of loop since section is found
         ENDIF
      ENDFOR
   ENDIF

   * the remaining code is the same structure as in the previous example
   FOR nDex = nTop TO nEnd   &amp;&amp; loop through each item with range

      IF UPPER( oLst.ListItem[ nDex ] ) = cVal
         oLst.ListIndex = nDex
         EXIT
      ENDIF
   ENDFOR

   oLst.Refresh
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.00b VFoxWin<BR>
KBCategory: kbprg kbhowto<BR>
KBSubcategory: FxprgClassoop
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 16, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

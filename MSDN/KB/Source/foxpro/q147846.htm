

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Different Ways to Gain Access to Items in the ListBox Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147846">
<META NAME="KBModify" CONTENT="1996/10/17">
<META NAME="KBCreate" CONTENT="1996/03/01">
<META NAME="Keywords" CONTENT="kbprg kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  You can gain access to an item in a list box or combo box by referencing its position in the list (index) or its unique identification number (itemid). This article describes how the index method differs from the itemid method and gives the propert...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QA28,QAE1,QAPN,QAEF,QA2Q,QAKC,QAY2,QAPF,QBC6,QAH4,QAJQ,QDH6,QBVV,QA9N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Different Ways to Gain Access to Items in the ListBox Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 17, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147846</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can gain access to an item in a list box or combo box by referencing
its position in the list (index) or its unique identification number
(itemid). This article describes how the index method differs from the
itemid method and gives the properties and methods related to each method.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Although all of this information also applies to lists with multiple
columns, the examples in this article use one-dimensional lists only.
<P>
Following are some general and property definitions. For a more complete
definition of these properties, please see the Help menu.
<P>
<PRE>General       Definition
</PRE> 
<PRE>Item          an element of a list.
Index         a unique number assigned by you or by the system to an item.
Itemid        a unique number used to reference an item in a list.

Property      Definition
</PRE> 
<PRE>List          an array used to gain access to items in index order.
ListItem      an array used to gain access to items in itemid order.
ListIndex     the index of the selected item in a list.
ListItemId    the itemid of the selected item in a list.
ListCount     the number of items in a list.
NewIndex      the index of the item most recently added to the list.
NewItemId     the itemid of the item most recently added to the list.
Sorted        whether or not the items in a list are sorted alphabetically.
MultiSelect   whether or not a user can select multiple items.
MoverBars     allows movement of items in the list.
ItemData      uses an index to reference an internal array to store
              auxiliary data for an item.
ItemIdData    uses an itemid to reference an internal array to store
              auxiliary data for an item.

</PRE><h3>Methods</h3>
 
<P>
The following methods receive either the value of the index or the itemid.
For a method that receives the index as a parameter, there is always an
equivalent method that receives the itemid as a parameter. There is,
however, no method that can receive both the index and the itemid. Note
that all of the following methods work reliably only when the RowSource
property is set to 0-None.

<OL><P><LI>Adding items to lists
<P>
<P><PRE>    - AddItem adds items to a list and receives as an optional parameter a
      valid index for the new item. The index is useful only when the list
      is not sorted (Sorted = .f.), which is the default. You can't specify
      an index larger than ListCount.
</PRE><P>
<P><PRE>      For example, if you have a list called List1 on a form, you can add
      items by using this code:
</PRE><P>
<PRE>         thisform.List1.AddItem('A') adds 'A' to the list
         thisform.List1.AddItem('B',3) adds 'B' to the list at index 3

      The resulting list would be as follows.

             Item      Index   ItemId
               A         1       1
               Z         2       2
               C         3       3

    - AddListItem adds items to a list and receives a valid itemid as an
      optional parameter. The itemid can range from 1 to 32767. For
      example, use the following code to add 'a' to the list:

         thisform.List1.AddListItem('a')

      Use the following code to add 'b' to the list with an itemid of 14:

         thisform.List1.AddListItem('b',14)

      The resulting list would be as follows.

           Item      Index     ItemId
             A        1          1
             B        2         14

</PRE><P><LI>Removing items from lists
<P>
<P><PRE>    - RemoveItem deletes an item from a list by its index number. For
      example, use the following syntax to remove the second item in a
      list:
</PRE><P>
<P><PRE>      thisform.List1.RemoveItem(2) removes the second item in a list.
</PRE><P>
<P><PRE>    - RemoveListItem deletes an item from a list by its itemid number. For
      example, to remove the item with an itemid of 342, type this command:
</PRE><P>
<P><PRE>      thisform.List1.RemoveListItem(342)
</PRE>
<P><LI>Converting from Index to Itemid
<P>
   If you know the index of an item and need to know its corresponding
   itemid, you can call IndexToItemId to convert an index of an item to its
   corresponding itemid.
<P>
   If you know the itemid of an item and need to know its corresponding
   index, you can call ItemIdToIndex to convert an itemid of an item to its
   corresponding index.

<P><LI>The ItemData and ItemIdData Array
<P>
   ItemData and ItemIdData both use the same array, but they use two
   different methods. This array is different from the list array and
   can store long integers (1 to 2,147,483,647). It can be used to store
   data that you do not want in a list, but need as a reference to link to
   the data. The array is also populated when the AddItem and AddListItem
   methods add items to a list. The array elements are initially zero and
   are not reinitialized when items are removed with the RemoveItem and
   RemoveListItem methods.
<P>
   For example, use the following syntax to assign a value to the itemdata
   array for the last element added to the list:
<P>
   thisform.List1.AddItem('b')
   thisform.List1.ItemData(thisform.List1.NewIndex) = 1253

<P><LI>Multi-Select Lists
<P>
   By setting the MultiSelect property to true (.T.), you can manually
   select more than one item in the list. You can then use the Selected
   property of the list to determine which items in the list are selected.
<P>
   For example:
<P>
<P><PRE>      FOR I=1 TO thisform.List1.ListCount
<PRE></PRE>        IF thisform.List1.Selected(I)
            =MESSAGEBOX("Item: "+ALLTRIM(thisform.List1.List(I))+ ;
            " is selected.")
        ENDIF
      NEXT

   If the MultiSelect property is false, the ListIndex and the ListItemId
   properties return the selected item.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 3.00 3.00b VFoxWin combobox<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: FxprgClassoop<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 17, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

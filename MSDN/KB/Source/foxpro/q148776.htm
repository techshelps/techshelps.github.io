

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use the New API Functions in Visual FoxPro Version 3.0b </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148776">
<META NAME="KBModify" CONTENT="1996/03/27">
<META NAME="KBCreate" CONTENT="1996/03/22">
<META NAME="Keywords" CONTENT="kbtool kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The update release of Visual FoxPro version 3.0b included a number of new Object manipulation API functions:     _FreeObject()    _GetObjectProperty()    _SetObjectProperty()    _ObjectCmp()    _ObjectReference()    _ObjectRelease()    _WGetObjectC...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAPN,QAW6,QAGI,QAH4,QAKD,QAY5,QAI4,QALW,QBV8,QAB9,QASR,QAEF,QAIF,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use the New API Functions in Visual FoxPro Version 3.0b</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 27, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148776</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0 and 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The update release of Visual FoxPro version 3.0b included a number of new
Object manipulation API functions:
<P>
<PRE>   _FreeObject()
   _GetObjectProperty()
   _SetObjectProperty()
   _ObjectCmp()
   _ObjectReference()
   _ObjectRelease()
   _WGetObjectClientWindow()
   _WGetObjectWindow()

</PRE>This article gives a brief description of each of these functions followed
by sample code that shows how to call and implement each one.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Brief Description of Each Function</h3>
 
<P>
<PRE>   _FreeObject() - releases an object from the Visual FoxPro API data pool.

   _GetObjectProperty() - returns a property value for an object.

   _ObjectCmp() - compares the properties of two objects and returns 0 if
   their properties and property values are identical.

   _ObjectReference() - Increments the reference count of an object.

   _ObjectRelease() - Decrements the reference count of an object.

   _SetObjectProperty() - Sets a property for an object.

   _WGetObjectClientWindow() - Returns the handle of the client window in
   which the specified object is contained.

   _WGetObjectWindow() - Returns the handle of the frame window in which
   the specified object is contained.

</PRE><h3>Uses for the Functions</h3>
 
<P>
The use of some of these object functions may not be immediately apparent.
The _FreeObject(), _ObjectReference(), and _ObjectRelease() functions can
be thought of as similar to the memory locking functions.
<P>
To be sure that the object reference is valid between calls, you can call
ObjectReference(), like _HLock, to tell Visual FoxPro not to alter this
object in memory. Then when you're finished, you can call ObjectRelease()
as you can call HUnLock(). To get rid of the object reference entirely, you
can call FreeObject() in a comparable manner to FreeHand().
<P>
The following sample code demonstrates an FLL that uses all of these new
functions. There is a section of C code listed first that you can use to
build the FLL. That section is followed by a section of FoxPro code to test
the functionality of your new FLL.
<P>
<P><h3>C Source Code for FLL</h3>
 
<P>
Build the following code as you would for any other FLL. If you need help,
see the Professional Features Guide Chapter 11 and the Microsoft
KnowledgeBase.
<P>
<PRE>// Following is the C code to create a single FLL that
// showcases how to call each of the new object functions.

// include the library construction header file
#include &lt;pro_ext.h&gt;

</PRE>far changeWTitle (ParamBlk FAR *parm)
{
<PRE>  WHandle wh;
  if (parm-&gt;p[0].val.ev_type=='O')
  {
     wh=_WGetObjectWindow(&amp;parm-&gt;p[0].val);
   _WSetTitle(wh, "Changed Title");
  }
  return(0);
</PRE>}
<P>
far getoTop(ParamBlk FAR *parm)
{
<PRE>  Value val;

  _MemFill(&amp;val, 0, sizeof(Value));   // Clear out our return value
  val.ev_length = 0;         // Assume a bad return.

 if (parm-&gt;p[0].val.ev_type == 'O')
 {
     _GetObjectProperty(&amp;val, &amp;parm-&gt;p[0].val, "TOP");
 }
 _RetVal(&amp;val);
 return(0);
</PRE>}
<P>
far changeoTop(ParamBlk FAR *parm)
{
<PRE>  Value val;
  int   status;

  _MemFill(&amp;val, 0, sizeof(Value));   // Clear out return value
  val.ev_type = 'L';
  val.ev_length = 0;         // Assume a bad return

 if (parm-&gt;p[0].val.ev_type == 'O')
 {
     if (!(status= _SetObjectProperty(&amp;parm-&gt;p[0].val,
        "TOP", &amp;parm-&gt;p[1].val, 0)))
   val.ev_length = 1;      // succeeded
 }
 _RetVal(&amp;val);
 return(0);
</PRE>}
<P>
far compare(ParamBlk FAR *parm)
{
<P>
<PRE> if (parm-&gt;p[0].val.ev_type == 'O' &amp;&amp; parm-&gt;p[1].val.ev_type == 'O')
 {

     _RetInt((long) _ObjectCmp(&amp;parm-&gt;p[0].val, &amp;parm-&gt;p[1].val),5);
 }
 return(0);
</PRE>}
<P>
far changeCWTitle(ParamBlk FAR *parm)
{
<PRE>   WHandle   wh;
   if (parm-&gt;p[0].val.ev_type == 'O')      // Check for 'O' as in Oscar
   {
      wh =  _WGetObjectClientWindow(&amp;parm-&gt;p[0].val);
      _WSetTitle(wh,  "Changed Title");
   }
 return(0);
</PRE>}
<P>
far ofree(Value *val1)
{
<P>
<PRE> if (val1-&gt;ev_type=='O')
 {
     _FreeObject(val1);
    return(0);
 }

 return(1);
</PRE>}
<P>
far objref(ParamBlk FAR *parm)
{
<PRE>// This function shows how to keep an object reference around.
// You would call this with a child object. It gets a ref
// to the parent, increment the reference, change the
// value of a property, then release the ref and free the object.

   Value setval,getval;
   char returnstr[80];
   _MemFill(&amp;setval,0,sizeof(Value));
   _MemFill(&amp;getval,0,sizeof(Value));
   setval.ev_type='I';
   setval.ev_long=70;

 if (parm-&gt;p[0].val.ev_type == 'O')
 {
     if (! _GetObjectProperty(&amp;getval, &amp;parm-&gt;p[0].val, "PARENT"))
    {
       _ObjectReference(&amp;getval); //increment the Ref Count of the object
      strcpy(returnstr,"Increment Refcount, ");
      if (!(_SetObjectProperty(&amp;getval, "TOP", &amp;setval,0)))
      {
        strcat(returnstr,"Set the top to 70, ");
      }
      _ObjectRelease(&amp;getval);
      strcat(returnstr,"Release reference, ");
      if (!ofree(&amp;getval))
      {
         strcat(returnstr,"Freed the object\n");
      }
   _RetChar(returnstr);
    }
</PRE>}
return(0);
}
<P>
<PRE>// The FoxInfo structure registers the function
</PRE>FoxInfo myFoxInfo[] = {
<PRE>   {"CHANGEWTITLE",(FPFI) changeWTitle, 1, "O"},
   {"OGETTOP", (FPFI) getoTop, 1, "O"},
   {"OSETTOP", changeoTop, 2, "O?"},
   {"CHANGECWTITLE", changeCWTitle, 1, "O"},
   {"OCOMPARE", compare, 2, "OO"},
   {"OMOVEPARENT",objref,1,"O"},
</PRE>};
<P>
<PRE>// the FoxTable structure
</PRE>FoxTable _FoxTable = {
<PRE>   (FoxTable  *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
</PRE>};
<P>
<P><h3>FoxPro Code Component</h3>
 
<P>
When you have entered the code and successfully built it into a DLL, you
can save that file to your Visual FoxPro default directory as Newapi.fll.
Then use the following FoxPro code to call and test the function.
<P>
SET LIBRARY TO NEWAPI.FLL
<P>
PUBLIC x
x=CreateObject('myform')
x.Show
<P>
Define Class myform as form
<PRE>   add object command1 as commandbutton
   add object command2 as commandbutton
   add object command3 as commandbutton
   add object command4 as commandbutton
   add object command5 as commandbutton
   add object spintop as spinner
   command1.caption="Change FrameWindow Title of _screen"
   command2.caption="Set .TOP of this button to this value:"
   command3.caption="Display .TOP value of the form"
   command4.caption="Move the form and test Obj Ref"
   command5.caption="Change Window Title of this Form"
   spintop.value=10

   proc init
      for i=1 to thisform.controlcount-1
         with thisform.controls(i)
            .visible=.t.
            if pemstatus(thisform.controls(i),'autosize',5)
               .autosize=.t.
               .autosize=.f.
               .width=260
               .left=10
            ENDIF
            if i&gt;1
               .top=thisform.controls(i-1).height*(i-1)+10*(i-1)
            ENDIF
         endwith
      endfor
      with this
         .spintop.top=.command2.top
         .spintop.height=.command2.height
         .spintop.width=50
         .spintop.left=.command2.left+.command2.width+10
         .spintop.value=.command2.top
   endproc

   proc command1.click
      =changewtitle(_screen); // change the form title
   endproc
   proc command2.click
      =OSetTop(this,this.parent.spintop.value)
   endproc
   proc command3.click
      val=OGetTop(thisform)
      =messagebox(str(val))
   endproc
   proc command4.click
      =messagebox(OMOVEPARENT(this))

   endproc
   proc command5.click
      =CHANGECWTITLE(thisform)
   endproc

</PRE>enddefine
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.00b VFoxWin<BR>
KBCategory: kbtool kbhowto kbcode<BR>
KBSubcategory: FxtoolLck<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 27, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Build a Custom Combo Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q155013">
<META NAME="KBModify" CONTENT="1997/01/10">
<META NAME="KBCreate" CONTENT="1996/08/20">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When using a large table or cursor (over 500 records) as the RowSource for a Combo Box, you may start to see a slow down in the Combo Box performance. This article shows how to create a control that has the basic Combo Box functionality but does no...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAH4,QAW6,QAUD,QBT6,QBXS,QBV4,QAHP,QARR,QAO4,QAMR,QACI,QA7R,QAU3,QAUR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Build a Custom Combo Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q155013</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using a large table or cursor (over 500 records) as the RowSource for
a Combo Box, you may start to see a slow down in the Combo Box performance.
This article shows how to create a control that has the basic Combo Box
functionality but does not have the same performance slow down that the
standard Combo Box has when working with a large table.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The fastest control for working with a large number of records is the Grid.
However, there are times when there is not enough space on a form for a
grid or when the developer needs the functionality of a Combo Box but
without the performance overhead that the standard Combo Box has. The
following example shows how to create a custom Combo Box using a Grid, Text
Box, and Command Button. If you are not familiar with creating or using
visual classes, please see chapter 10 of the Microsoft Visual FoxPro
Developer's Guide.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Create a new class named NewPopup based on a Container, and save it in
   Mylib.

<P><LI>Add the following new properties and methods to the NewPopup container:
<P>
   cSearchString as a Property
   tOutTime as a Property
   Pop as a Method
   Search as a Method

<P><LI>Set the following properties for the NewPopup container:
<P>
   Width = 128
   Height = 185
   BackStyle = 0
   BorderWidth = 0
   tOutTime = .NULL.

<P><LI>Add a Text Box to the container and set the following properties:
<P>
   Height = 26
   Left = 2
   ReadOnly = .T. &amp;&amp; If you want to be able to edit the data in
<PRE>                  ** the text box leave this property set to .F.
   Top = 2
   Width = 111

</PRE><P><LI>Enter the following code in the KeyPress Event for Text1:
<P>
   IF nKeyCode = 160
<P><PRE>      This.Parent.Command1.Click()
      ** Makes the grid appear when you press the ALT+DOWNARROW key
</PRE>   ENDIF

<P><LI>Add a Command Button to the container and set the following properties:
<P>
   Top = 2
   Left = 112
   Height = 26
   Width = 13
   FontBold = .F.
   FontName = Wingdings
   FontSize = 6
   Caption = ALT + 0234
   ** When you hold down the ALT key and press the NUMBER keys, it
   ** inserts a down arrow character for the Caption

<P><LI>Enter the following code in the Click Event for Command1:
<P>
   This.Parent.Grid1.Visible = .T. &amp;&amp; Make the Grid visible
   This.Parent.Zorder(0)
   ** Places the container in front of other objects
   This.Parent.Grid1.Column1.Text1.SetFocus
   IF !ISNULL(This.Parent.tOutTime)
<P><PRE>     KEYBOARD '{Enter}'
     ** Forces the Grid to Activate
     ** Without this, the grid would not work properly when you
     ** enter it the second time.
</PRE>   ENDIF

<P><LI>Add a Grid to the container and set the following properties:
<P>
   ColumnCount = 1
   DeleteMark = .F.
   GridLines  = 0
   GridLineWidth = 0
   HeaderHeight = 0
   Height = 156
   Left = 2
   MousePointer = 1
   ReadOnly = .F.
   RecordMark = .F.
   ScrollBars = 2
   Top = 27
   Visible = .F.
   Width = 123

<P><LI>Enter the following code in the AfterRowColChange Event of Grid1:
<P>
   This.Parent.Text1.Value = This.Column1.Text1.Value

<P><LI>Set the following properties for Column1 in Grid1:
<P>
<P><PRE>    Width = 124
    Sparse = .F.
</PRE>
<P><LI>Set the following properties for Text1 in Column1 of Grid1:
<P>
<P><PRE>    BorderStyle = 0
    Format = K
    HideSelection = .F.
    MousePointer = 1
    SpecialEffect = 1
</PRE>
<P><LI>Enter the following code in the Click Event of Text1 in Column1 of
<P><PRE>    Grid1:
</PRE><P>
<P><PRE>    This.Parent.Parent.Parent.Pop()
</PRE>
<P><LI>Enter the following code in the KeyPress Event of Text1 in Column1 of
<P><PRE>    Grid1:
</PRE><P>
<P><PRE>    IF nKeyCode = 13  &amp;&amp; Then hit the ENTER key
       This.Parent.Parent.Parent.Pop()
    ENDIF
    IF (nKeyCode &gt; 48 AND nKeyCode &lt; 58) OR ;
       (nKeyCode &gt; 64 AND nKeyCode &lt; 123)
       ** Calls the search method if you hit a letter or numeric key
       This.Parent.Parent.Parent.Search(nKeyCode)
    ENDIF
</PRE>
<P><LI>Enter the following code in the GotFocus Event of the NewPopup
<P><PRE>    Container:
</PRE><P>
<P><PRE>    SET BELL OFF
</PRE>
<P><LI>Enter the following code in the Init Event of the NewPopUp Container:
<P>
<P><PRE>    This.Grid1.HeaderHeight = 0
    ** When you modify an instance of the class in a Form and modify
    ** some of the grid setting, it will change the HeaderHeight property
    ** back to a default size. This line of code will set the
    ** HeaderHeight back to 0 at run time
    This.Zorder(1)
    ** Moves the container behind any controls that it may be on top of
    nFieldlen = FSIZE(This.Grid1.Column1.ControlSource)
    ** resize the grid based on the field size and font
    IF This.Width &lt; (nFieldlen * ;
       FONTMETRIC(6,This.Grid1.FontName,This.Grid1.FontSize,"B"))+12
</PRE><P>
<P><PRE>       This.Width = (nFieldlen * ;
<PRE></PRE>         FONTMETRIC(6,This.Grid1.FontName,This.Grid1.FontSize,"B"))+12

       This.Grid1.Width = (nFieldlen * ;
         FONTMETRIC(6,This.Grid1.FontName,This.Grid1.FontSize,"B"))+10

       This.Grid1.Column1.Width = (nFieldlen * ;
         FONTMETRIC(6,This.Grid1.FontName,This.Grid1.FontSize,"B"))
    ENDIF

</PRE><P><LI>Enter the following code in the LostFocus Event of the NewPopUp
<P><PRE>    Container:
</PRE><P>
<P><PRE>    SET BELL ON
    This.Grid1.Visible = .F.
    This.ZOrder(1)
    ** Moves the container behind any object it is over
</PRE>
<P><LI>Enter the following code in the Pop Method of the NewPopUp
<P><PRE>    Container:
</PRE><P>
<P><PRE>    This.Text1.SetFocus
    This.Grid1.Visible = .F.
    This.ZOrder(1)
    ** Moves the container behind any object it is over
</PRE>
<P><LI>Enter the following code in the Search Method of the NewPopUp
<P><PRE>    Container:
</PRE><P>
<P><PRE>    **Does an incremental search of the table in the grid
    LPARAMETERS nKeyPress
    cField = This.Grid1.Column1.ControlSource
    nRecord=RECNO()
    tInTime = DateTime()
    IF !ISNULL(This.tOutTime)
</PRE><P>
<P><PRE>      IF (tInTime - This.tOutTime)&lt;= 1
       This.cSearchString = This.cSearchString + CHR(nKeyPress)
<PRE></PRE>        LOCATE FOR UPPER(LEFT(&amp;cField,LEN(This.cSearchString))) = ;
          UPPER(This.cSearchString)
      ELSE
        This.cSearchString=""
        This.cSearchString = CHR(nKeyPress)
        LOCATE FOR UPPER(LEFT(&amp;cField,1)) = UPPER(This.cSearchString)
      ENDIF

      IF FOUND()
        This.Grid1.Refresh()
      ELSE
        GO nRecord
        This.Grid1.Refresh()
      ENDIF

    ELSE

      This.cSearchString=""
      This.cSearchString = CHR(nKeyPress)
      LOCATE FOR UPPER(LEFT(&amp;cField,1)) = UPPER(This.cSearchString)

      IF FOUND()
        This.Grid1.Refresh()
      ELSE
        GO nRecord
        This.Grid1.Refresh()
      ENDIF

    ENDIF
    This.tOutTime = DateTime()

</PRE><P><LI>Save and close the class.

<P><LI>Create a form and add the NewPopUp container to the form.

<P><LI>Set the RowSource of the Grid1 in the NewPopUp container to the table
<P><PRE>    of your choice.
</PRE>
<P><LI>Set the ControlSource of Column1 of Grid1 in the NewPopUp container.

<P><LI>Save and run the Form. Click the Command Button to display the Grid,
<P><PRE>    and then type the first letter of something you wish to find. Make a
    selection by either clicking on your choice or using the ARROW key
    to highlight your choice and then pressing the ENTER key. You will see
    the Grid disappear and the value of your choice appear in the text box.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbhowto<BR>
KBSubcategory: FxprgClassoop<BR>
Additional reference words: 3.00 3.00b kbdsd VFoxWin combobox
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

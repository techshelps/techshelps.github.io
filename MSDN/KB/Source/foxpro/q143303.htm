

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Some OLE Control Events Do Not Fire in Visual FoxPro 3.0b </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143303">
<META NAME="KBModify" CONTENT="1997/02/26">
<META NAME="KBCreate" CONTENT="1996/01/30">
<META NAME="Keywords" CONTENT="FxinteropOle kbinterop kbprb">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Under certain circumstances, user code attached to events of OLE Controls may not execute. In particular, if you click a control while user code of another control is running, the OLE control seems to get the focus. However, the user code associate...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAO4,QA56,QA55,QA7O,QAB5,QAOE,QAMN,QAGI,QAH4,QA9Q,QBWS,QBVV,QAIF,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Some OLE Control Events Do Not Fire in Visual FoxPro 3.0b</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143303</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00b
WINDOWS
kbinterop kbprb
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Under certain circumstances, user code attached to events of OLE Controls
may not execute. In particular, if you click a control while user code of
another control is running, the OLE control seems to get the focus.
However, the user code associated with the Click event is not called. This
article explains why this behavior may happen.
<P>
<P><h2>CAUSE</h2>
 
<P>
Visual FoxPro regularly calls the Windows API PeekMessage to handle
function keys and ON KEY LABEL. Calling PeekMessage yields Visual FoxPro
processing and allows the OLE control to trigger the event. However, the
firing of the event fails, and this behavior is not handled by the OLE
control.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In xBase a user has the ability to assign commands to Hot-Keys, or ON KEY
LABEL (OKL).The command associated with OKLs is called as soon as the key
is pressed, no matter what is happening in Visual FoxPro. In the following
example program, pressing the F5 key stops the execution of the program and
immediately calls the statement assigned to the OKL. Once the OKL command
is completed, Visual FoxPro resumes the program.
<P>
<PRE>   ON KEY LABEL F5 ?MESSAGEBOX("Hello World")

   FOR i = 1 TO 1000000
   ENDFOR

</PRE>To support this behavior, Visual FoxPro calls the Application Program
Interface (API) PeekMessage() between each execution of a command. In the
previous case, Visual FoxPro calls PeekMessage between the FOR command and
the ENDFOR command. Visual FoxPro also calls PeekMessage() when it is
executing a query or indexing a big table because users may press the ESC
key to interrupt and halt the command. If Visual FoxPro didn't call
PeekMessage, it wouldn't see the key until it's too late.
<P>
Calling PeekMessage yields Visual FoxPro processing and gives an OLE
control a chance to look at its message queue and trigger events. However,
at that time, Visual FoxPro does not handle the firing of an event because
it is looking for key messages that are defined with OKLs. Visual FoxPro
thus fails the firing of the control event.
<P>
Visual FoxPro fails the firing of the event in two different situations.

<OL><P><LI>Visual FoxPro is currently handling an event. As Visual FoxPro begins
   to handle an event, it calls the FreezeEvents method on the OLE control
   that fired the event. Once the event has been handled, Visual FoxPro
   indicates that the container is accepting events from the control.

<P><LI>Visual FoxPro sees that the event was fired while it was executing
   user code (the FOR loop above.) At this point, Visual FoxPro tells the
   control that it failed the event but it does not call the FreezeEvents
   method.
<P>
   Visual FoxPro does not inform the control when to activate the event.
   So, if an event fails while Visual FoxPro is executing user code, the
   OLE control that placed the event in a queue cannot refire the event.
<P>
</OL><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Create a new form.

<P><LI>Place an OLE Container control on the form. When the Insert object
   dialog box appears, follow these steps:
<P>
   a. Click Insert control.
   b. In the Control Type list box, click Outline control.

<P><LI>Place the following code in the Init event of the OLE control:
<P>
   THIS.Additem('Apples')
   THIS.Additem('Oranges')
   THIS.Additem('Bananas')
   THIS.Additem('Lemons')
   THIS.Indent(2)=2

<P><LI>Place the following code in the MouseDown and the Click events:
<P>
   *MouseDown
   =MESSAGEBOX("This is the MouseDown event")
<P>
   *Click
   =MESSAGEBOX("This is the Click event")

<P><LI>Place a command button on the form, and in its Click event, type:
<P>
   ACTIVATE SCREEN
   FOR i=1 TO 1000
   ?i
   ENDFOR

<P><LI>Save the form, and run it. When the window appears, click the command
   button. While the FOR loop is running, click the word Oranges in the
   Outline control. It appears as though the Outline is getting the focus,
   but the code associated with the Click event is not executed.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbinterop kbprb<BR>
KBSubcategory: FxinteropOle<BR>
Additional reference words: 3.00b ActiveX OCX<BR>
Keywords            : FxinteropOle kbinterop kbprb<BR>
Version             : 3.00b<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A General Description of FPATH and Its Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115416">
<META NAME="KBModify" CONTENT="1995/06/27">
<META NAME="KBCreate" CONTENT="1994/05/25">
<META NAME="Keywords" CONTENT="kbinterop kbtool kbprg kbref">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This a general guideline of the functions contained within the FPATH library. FPATH is a library of string-handling routines for manipulating MS- DOS strings, filenames, and pathnames.  This information was taken from the FPATH.C file, which is dis...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QATX,QALW,QA6V,QAKC,QBC6,QAY5,QALG,QAG8,QBBI,QAHE,QALQ,QAUJ,QBV8,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>A General Description of FPATH and Its Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115416</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a, 2.5b, 2.6
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This a general guideline of the functions contained within the FPATH
library. FPATH is a library of string-handling routines for manipulating MS-
DOS strings, filenames, and pathnames.
<P>
This information was taken from the FPATH.C file, which is distributed with
the FoxPro Library Construction Kit.
<P>
FPATH itself should be compiled with the large memory model.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following information of the individual functions is laid out in the
following manner:
<P>
<PRE>   &lt;function name&gt;  // &lt;Brief description&gt;
   ---------------------------------------
   &lt;General description of functionality&gt;

   Usage: &lt;Syntax&gt;
   Returns: &lt;Return value of function&gt;

</PRE><h3>JUSTFNAME  // just file name (stem+ext)</h3>
 
This function returns the filename portion of a file/path name.
<P>
<PRE>Usage:   justfname(pathname)
</PRE>Returns: string
<P>
<P><h3>JUSTSTEM  // just stem name</h3>
 
This function returns the stem portion of a file/path name.
<P>
<PRE>Usage:   juststem(pathname)
</PRE>Returns: string
<P>
<P><h3>JUSTEXT  // just file extension</h3>
 
This function returns the extension of a file/path name.
<P>
<PRE>Usage:   justext(pathname)
</PRE>Returns: string
<P>
<P><h3>JUSTPATH  // just path name (no file name)</h3>
 
This function returns the path portion of a file/path name.
<P>
<PRE>Usage:   justpath(pathname)
</PRE>Returns: string
<P>
<P><h3>JUSTDRIVE  // just drive designation</h3>
 
This function returns the drive designation of a file/path name.
<P>
<PRE>Usage:   justdrive(pathname)
</PRE>Returns: string
<P>
<P><h3>FORCEEXT  // force file extension to ...</h3>
 
This function returns parameter 1 with the extension changed to
parameter 2. If there isn't an extension on parameter 1 already, it adds
one.
<P>
<P>
<PRE>Usage:   forcetext(pathname,extension)
</PRE>Returns: string
<P>
<PRE>DEFAULTEXT   // give file a default extension
</PRE> 
This function adds parameter 2 as the extension of parameter 1, but
only if parameter 1 does not have an extension. If it does, this
function simply returns parameter 1.
<P>
<PRE>Usage:   defaultext(pathname,extension)
</PRE>Returns: string
<P>
<PRE>ADDBS   // add a backslash if one is needed
</PRE> 
Add a trailing backslash to a path name, unless there is already one
there or the string is empty. Returns a pathname.
<P>
<PRE>Usage:   addbs(pathname)
</PRE>Returns: string
<P>
<P><h3>VALIDPATH  // is this a valid path/file name?</h3>
 
Returns TRUE if the filename passed as a parameter is a valid MS-DOS
file name.
<P>
<PRE>Usage:   validpath(pathname)
</PRE>Returns: boolean
<P>
<P><h3>CLEANPATH  // clean up a file/path name</h3>
 
Returns a cleaned-up file and path name, stripping out invalid chars,
eliminating duplicate backslash chars, making sure there aren't too
many colons, etc.
<P>
<PRE>Usage:   cleanpath(pathname)
</PRE>Returns: string
<P>
<P><h3>REDUCE  // reduce white space to single blank</h3>
 
Reduce multiple white space characters to a single space and trims all
leading and trailing white space. If the optional second parameter is
non-zero, quoted strings will be unaffected.
<P>
<PRE>Usage:   reduce(string,[skipquotes])
</PRE>Returns: string
<P>
<P><h3>STRFILTER  // filter out anything that isn't in second string</h3>
 
Filter out any characters that aren't in filt_str.
<P>
<PRE>Usage:   strfilter(string,filt_str)
</PRE>Returns: string
<P>
<PRE>WORDS   // number of words in string
</PRE> 
Counts the number of words in a string.  Words are delimited by
characters in the break string, or by DFTBREAK characters if no break
string is specified.
<P>
<PRE>Usage:   words(string,[break])
</PRE>Returns: int
<P>
<P><h3>WORDNUM  // word number i from string</h3>
 
Returns the "index-th" word in a string, delimited by the break string.
If no break string is specified, the function uses spaces, tabs and
commas to delimit words.
<P>
<PRE>Usage:   wordnum(string,index,[break])
</PRE>Returns: string
<P>
<P><h3>NEXTWORD  // next word from string</h3>
 
Returns the next word in a string, beginning with the index specified
by the second parameter. It skips break characters from the index
position forward. It accepts an optional third parameter containing
a string of break characters. If no break string is specified, only
white space characters are break characters.
<P>
<PRE>Usage:   nextword(string,index,[break])
</PRE>Returns: string
<P>
<P><h3>FCTNPARM  // function parameter i</h3>
 
Returns the specified parameter in a string of function parameters,
accounting for nested parentheses, etc.
<P>
<PRE>Usage:   fctnparm(string,index)
</PRE>Returns: string
Auns: string
<P>
<PRE>BXOR    // xor two numbers
</PRE> 
This routine returns the bitwise "exclusive or" of byte1 and byte2.
<P>
<PRE>Usage:   bxor(byte1,byte2)
</PRE>Returns: int
<P>
<P><h3>BOR    // or two numbers</h3>
 
This routine returns the bitwise "inclusive or" of byte1 and byte2.
<P>
<PRE>Usage:   bor(byte1,byte2)
</PRE>Returns: int
<P>
<P><h3>BAND   // and two numbers</h3>
 
This routine returns the bitwise "and" of byte1 and byte2.
<P>
<PRE>Usage:   band(byte1,byte2)
</PRE>Returns: int
<P>
<P><h3>BNOT   // not a number</h3>
 
This routine returns the ones' compliment of byte1.
<P>
<PRE>Usage:   bnot(byte1)
</PRE>Returns: int
<P>
<P><h3>BSHR  // shift a number right</h3>
 
This routine returns byte1 shifted right by num positions, or by one
position if num is not specified. As bytes are shifted, the new bytes
on the left are zero-filled.
<P>
<PRE>Usage:   bshr(byte1,num)
</PRE>Returns: int
<P>
<P><h3>BSHL   // shift a number left</h3>
 
This routine returns byte1 shifted left by num positions, or by one
position if num is not specified. As bytes are shifted, the new bytes
on the right are filled with 0.
<P>
<PRE>Usage:   bshl(byte1,num)
</PRE>Returns: int
<P>
<PRE>DBL2NUM   // convert 8-byte double to Fox num
</PRE> 
This routine returns a FoxPro numeric variable corresponding to the
double (8-byte) number passed to it as a character string. It is
useful for converting data written by other applications into FoxPro
format.
<P>
<PRE>Usage:   dbl2num(8 bytes)
</PRE>Returns: floating point number
<P>
<PRE>NUM2DBL   // convert Fox num to 8-byte double
</PRE> 
This routine returns a double (8 byte) number corresponding to the
FoxPro numeric variable passed to it. It is useful for converting data
written by other applications into FoxPro format. The double number is
returned in a character string.
<P>
<PRE>Usage:   dbl2num(8 bytes)
</PRE>Returns: String, via value structure
<P>
<PRE>FLOAT2NUM   // convert 6-byte float to Fox num
</PRE> 
This routine returns a FoxPro numeric variable corresponding to the
real (6-byte) number passed to it as a character string. It is useful
for converting data written by other applications into FoxPro format.
<P>
<PRE>Usage:   float2num(6 bytes)
</PRE>Returns: floating point number
<P>
<PRE>LONG2NUM    // convert 4-byte float to Fox num
</PRE> 
This routine returns a FoxPro numeric variable corresponding to the
long int (4-byte) number passed to it as a character string. It is
useful for converting data written by other applications into FoxPro
format.
<P>
<PRE>Usage:   long2num (4 bytes)
</PRE>Returns: floating point number
<P>
<PRE>INT2NUM   // convert 2-byte float to Fox num
</PRE> 
This routine returns a FoxPro numeric variable corresponding to the
<PRE>int (2-byte) number passed to it as a character string. It is useful
</PRE>for converting data written by other applications into FoxPro format.
<P>
<PRE>Usage:   int2num (2 bytes)
</PRE>Returns: floating point number
<P>
<PRE>FPATHTEST   // testing function
</PRE> 
Tests for internal fpath functions
This is information was taken from the FPATH.C file which is
distributed with the FoxPro Library Construction Kit.
<P>
This is a library of string handling routines for manipulating MS-DOS
strings, filenames and pathnames. It should be compiled with the Large
memory model.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxDos FoxWin 2.00 2.50 2.50a 2.50b 2.60 lck<BR>
KBCategory: kbinterop kbtool kbprg kbref<BR>
KBSubcategory: FxtoolLck<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

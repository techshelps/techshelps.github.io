

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Macro Subst, Name Expr, and EVALUATE() Runtime Evaluation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125046">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/01/19">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article describes and explains the differences in behavior between the three Runtime Evaluation tools provided by the FoxPro language:  *  (macro substitution),  ()  (name expression), and the  EVALUATE()  function.  MORE INFORMATION  The  Lan...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QABH,QAKD,QADK,QAB9,QAY5,QAUD,QAUJ,QABI,QAY2,QBV8,QBWS,QABG,QA2Q,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Macro Subst, Name Expr, and EVALUATE() Runtime Evaluation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125046</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, version 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes and explains the differences in behavior between the
three Runtime Evaluation tools provided by the FoxPro language: "&amp;" (macro
substitution), "()" (name expression), and the "EVALUATE()" function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The "Language Reference" guide specifies that EVALUATE() and name
expressions should be used instead of macro substitution because they run
faster. However, it does not explain why this is so.
<P>
<P><h3>Macro Substitution</h3>
 
<P>
Macro substitution is just what it is called. A runtime "macro" is built
into the tokenized code to evaluate the expression at runtime. The compiler
inserts some compiling-linking code into the application, and when the code
is run, on-the-fly compilation and linking takes place to tokenize the
expression before executing it. This is highly inefficient for two reasons:

<UL><LI>It increases the size of applications because the mini-compiler code has
   to be built for each expression to evaluate.

<LI>It decreases execution speed because of the overhead incurred by the
   on-the-fly compilation.
<P>
</UL>Macro substitution is still supported for backwards compatibility purposes,
and because it is still popular with many xBase developers. The only
situation where macro substitution is still required is when the expression
to evaluate contains the command to be executed, in whole or in part, as in
the following code examples:

<UL><LI>cClauses=" * FROM CUSTOMER WHERE cno='A'"
   SELECT &amp;cClauses

<LI>cResetMenu="SET SYSMENU TO DEFAULT"
   &amp;cResetMenu
<P>
</UL>Name Expression
 
<P>
This is the preferred method for referencing FoxPro components that can be
named, like windows, menus, popups, and files (including screens, menus,
and reports) in the commands that run them, as in the following examples:

<UL><LI>cWindowName="test"
   DEFINE WINDOW (cWindowName) FROM 1,1 TO 20,50 SYSTEM

<LI>cScreen="Myscreen.spr"
   DO (cScreen)

<LI>cReport="Myreport.frx"
   REPORT FORM (cReport) PREVIEW ENVIRONMENT
<P>
</UL>Name expression compilation is optimized and does not require the creation
of any "lookup" code, which makes it much more efficient than macro
substitution. However, the limited scope of name expressions (they can only
be used to evaluate variables used to name FoxPro components) required that
another tool be used for evaluation of variables under other circumstances.
<P>
<P><h3>EVALUATE()</h3>
 
<P>
This function is, like every FoxPro function and command, built into the
language library and therefore more efficient than macro substitutions
because there is no need for on-the-fly compilation. EVALUATE() can be used
to return the values of expressions anywhere in the code, except when name
expressions are required (see above). Typically, this function is used to
retrieve sorting, filtering, or querying information from the user at
runtime, as the following example illustrates:
<P>
<PRE>   cCondition="CNO='A'"
   @ 2,2 SAY "Type filter condition for appending records or hit &lt;ENTER&gt;:";
      GET cCondition VALID CHECK()
   READ
   USE customer
   APPEND FROM customer FOR EVALUATE(cCondition)

   FUNCTION CHECK
   * Validation code for expressions typed
   RETURN .t. &amp;&amp; or .f.

</PRE><h3>Special Considerations</h3>
 
<P>
EVALUATE() VS. MACRO SUBSTITUTION IN LOOPING CONDITION:
<P>
Consider the following syntax:
<P>
<PRE>   USE customer
   cCondition = "CNO='A'"
   SCAN FOR &lt;condition&gt;
      * Processing code here
   ENDSCAN

</PRE>In the above example, if &amp;cCondition is used as the condition, the loop
will process one record only, because the condition is evaluated only when
the mini-compiler executes on-the-fly. Instead, the condition should be
"EVALUATE(cCondition)" (without the quotation marks), because EVALUATE()
can be called repeatedly because it is a native FoxPro function.
<P>
CODE OPTIMIZATION:
<P>
To speed up runtime execution, developers usually reduce the number of
lines in their code, thinking that if the size in memory is reduced, the
application will execute faster. For example, the following would be a
valid optimization:
<P>
<PRE>   * Original code
   ...
   IF CHECK() == .t.
      WAIT WINDOW "This is the customer we're looking for"
   ENDIF

   FUNCTION CHECK
   PRIVATE lRetVal

   IF cno == 'A1592'
      lRetval = .t.
   ELSE
      lRetVal = .f.
   ENDIF

   RETURN lRetVal

   * Optimized code
   IF CHECK()
      WAIT WINDOW "This is the customer we're looking for"
   ENDIF

   FUNCTION CHECK
   RETURN (cno=='A1592')

</PRE>While it is true that reducing the size of the code in memory generally
helps speed up the code at runtime, it is not always true that reducing the
number of lines reduces the size of the application in memory, especially
when using macro substitution, because of the extra code that is built in
by the compiler. Also, even if the application size in memory is reduced,
the overhead incurred during macro evaluation slows the execution down
anyway. The following example illustrates this:
<P>
<PRE>   * Original code
   * Parameter is numeric, determines which order to use
   FUNCTION CustSort
   PARAMETERS nSortType

   DO CASE
   CASE nSortType == 1
      SELECT * FROM customer ORDER BY cno
   CASE nSortType == 2
      SELECT * FROM customer ORDER BY contact
   CASE nSortType == 3
      SELECT * FROM customer ORDER BY company
   OTHERWISE
      SELECT * FROM customer
   END CASE

   RETURN .t.

   * Optimized code (but it will most likely not run faster)
   * Parameter is character string, contains 'order by' clause
   FUNCTION CustSort
   PARAMETERS cOrderBy

   IF !EMPTY(cOrderBy)
      SELECT * FROM customer &amp;cOrderBy
   ELSE
      SELECT * FROM customer
   ENDIF

   RETURN .t.

</PRE>Note that these optimization concepts are fairly irrelevant with simplistic
examples like these. In a real-world application, the speed difference will
be more noticeable.
<P>
For more information about the EVALUATE() function, please see the
following articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q96294.htm">Q96294</A></B>
   TITLE     : Difference Between EVALUATE() and Macro Substitution

   ARTICLE-ID: <B><A HREF="../FOXPRO/Q113172.htm">Q113172</A></B>
   TITLE     : How the EVALUATE() Function Works

</PRE>OVERLAPPING OF USAGE:
<P>
In some instances, EVALUATE() and name expressions can be interchanged. In
this case, there is no preferred method, although it would help the
developer to use name expressions whenever possible for consistency's sake.
Here is a situation where either method is acceptable:
<P>
<PRE>   cProc="Myproc.prg"
   DO (cProc)   &amp;&amp; or DO EVALUATE("cProc")

</PRE>Although macro substitution could also be used here, its use is not
demonstrated because of the reasons explained previously: speed,
efficiency, and consistency.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00  2.60a FoxWin named expression<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgMacrosub<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: Use Topclose.exe to Close Child Forms Of Top-Level Forms </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175625">
<META NAME="KBModify" CONTENT="1997/10/24">
<META NAME="KBCreate" CONTENT="1997/10/24">
<META NAME="Keywords" CONTENT="FxprgClassoop vfoxwin kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  One of the sample project files for this article provides an example of a way to close a Top-Level form and have the user prompted to close each child form. Another sample project file shows a way to try to do this that does not work. Still another...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGB,QAI2,QA56,QA55,QAPN,QAH4,QAAW,QBVV,QAL1,QBWS,QAUD,QBXH,QA6A,QAPF,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: Use Topclose.exe to Close Child Forms Of Top-Level Forms</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175625</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 5.0, 5.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
One of the sample project files for this article provides an example of a
way to close a Top-Level form and have the user prompted to close each
child form. Another sample project file shows a way to try to do this that
does not work. Still another sample project file shows a way to accomplish
the task that almost works or will work in limited circumstances.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/TopClose.exe">TopClose.exe</A> <I>(size: 72854 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
In Visual FoxPro 5.0, forms can be set to show as Top-Level forms. Other
child forms can be opened in the Top-Level form. This article will discuss
a way to close the Top-Level form and have the user prompted for saving
changes to any child forms contained in the Top-Level form. The solution
presented will work the best in Visual FoxPro 5.0a and only partially in
Visual FoxPro 5.0 due to changes in how the QueryUnload method is called.
<P>
Note that the solution presented here is not necessarily the only way to
handle this situation. More sophisticated schemes can be developed. In
fact, this article does not consider the case of Windows being exited with
the application running.
<P>
Also note that the scenario presented here is fairly complex. Microsoft
Product Support Engineers will not know all the issues presented in this
article without spending some time working with the sample files. Please
remember this if asking questions on the enclosed files.
<P>
<P><h3>Additional Information</h3>
 
<P>
The following files are included in this article and are used in the
discussion that follows:
<P>
The TopClose.exe should extract into three folders, TopClose\Almost,
TopClose\Bad and TopClose\Good.
<P>
Contents of TopClose\Almost:

<UL><LI>Almost.app
<LI>Almost.pjx
<LI>Almost.pjt   These are the application file and the project files from
<PRE>                which it was made.

</PRE><LI>Almost.scx
<LI>Almost.sct     The form files for the main Top-Level form.

<LI>Almost.mnx
<LI>Almost.mnt     The menu that is placed in the Top-Level form,
<PRE>                  Almost.scx.

</PRE><LI>Almost.prg     The main program in the project.
<P>
</UL>-  AlmostBlue.scx
-  AlmostBlue.sct
-  AlmostGreen.scx
-  AlmostGreen.sct
-  AlmostRed.scx
-  AlmostRed.sct  The form files for the child forms of the Top-Level form.
<P>
<P>
Contents of TopClose\Bad:

<UL><LI>Bad.app
<LI>Bad.pjx
<LI>Bad.pjt      These are the application file and the project files from
<PRE>                which it was made.

</PRE><LI>Bad1.scx
<LI>Bad1.sct     The form files for the main Top-Level form.

<LI>Bad1.mnx
<LI>Bad1.mnt     The menu that is placed in the Top-Level form, Bad1.scx.

<LI>Bad1.prg     The main program in the project.

<LI>BadBlue.scx
<LI>BadBlue.sct
<LI>BadGreen.scx
<LI>BadGreen.sct
<LI>BadRed.scx
<LI>BadRed.sct   The form files for the child forms of the Top-Level form.
<P>
<P>
</UL>Contents of the TopClose\Good:

<UL><LI>Good.app
<LI>Good.pjx
<LI>Good.pjt     These are the application file and the project files from
<PRE>                which it was made.

</PRE><LI>Good1.scx
<LI>Good1.sct     The form files for the main Top-Level form.

<LI>Good1.mnx
<LI>Good1.mnt     The menu that is placed in the Top-Level form, Good1.scx.

<LI>Good1.prg     The main program in the project.

<LI>GoodBlue.scx
<LI>GoodBlue.sct
<LI>GoodGreen.scx
<LI>GoodGreen.sct
<LI>GoodRed.scx
<LI>GoodRed.sct   The form files for the child forms of the Top-Level form.
<P>
</UL>To use the sample files, follow these instructions:

<OL><P><LI>Set the Visual FoxPro working folder to either TopClose\Bad
   TopClose\Almost or TopClose\Good. Use the File Locations tab of the
   Tools menu, Options dialog box or use the SET DEFAULT TO command in the
   Command window. For example, if the TopClose folder is on the C:\ drive:
<P>
<P><PRE>      SET DEFAULT TO c:\TopClose\Bad
</PRE>
<P><LI>If the default folder is set to TopClose\Bad, DO Bad.app. If the default
   folder is set to TopClose\Good, DO Good.app or Almost.app if the default
   is TopClose\Almost.

<P><LI>The forms in each application can be run as many times as desired. For
   instance, two or three copies of the GoodRed form can be run. When a
   form is run more than once, it will come up in the same place so be sure
   to move a form after running it once if it is going to be run again.
   Otherwise, it won't be obvious that it is there more than once.

<P><LI>If the process of running the Almost application, rebuilding it and
   running it again is repeated a few times, this may cause Visual
   FoxPro to unexpectedly quit. This is currently under investigation. The
   application termination  seems to always happen during the building of
   the application and should not effect the running application. Another
   problem that may occur is that a "phantom" copy of the Top-Level form
   may also be noticed  on the Windows Taskbar for each time the
   application is run in the development environment. Although this appears
   as a problem in the Visual FoxPro development environment, no problems
   have been observed if  the project is built into an executable file and
   it is run as a stand-alone executable and the Top-Level form is the main
   form in the executable's interface.  If the Top-Level form is only one
   part of an executable, the method of closing the child forms illustrated
   in Good.app should be used. The executable also has problems if run
   under the development environment. That is why this version of the
   application is named "almost." It almost works.
<P>
</OL>For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q175682.htm">Q175682</A></B>
   TITLE     : PRB: VFP Crashes When Working With Top-Level &amp; Child Forms

</PRE></OL>Discussion Of Sample Files' Behavior
 
<P>
Normally the QueryUnload method can be used in a form to determine if a
form is ready to be closed. The Online Help for Visual FoxPro states that
it "...occurs when CLEAR WINDOWS, RELEASE WINDOWS, or QUIT is executed in
code, when the user double-clicks the Control-menu box, or when the user
chooses Close from the Control-menu on a form." If the form is contained in
a Top-Level form and the Top-Level form is closed as described above, the
QueryUnload method of any child forms does not behave as expected.
<P>
In Visual FoxPro 5.0, the QueryUnload method of child forms is executed
before the QueryUnload of the Top-Level parent form. This is reversed in
Visual FoxPro 5.0a. Here the QueryUnload of the Top-Level parent form is
executed before the child forms' QueryUnload. Therefore the main difference
between how the two versions behave is that Visual FoxPro 5.0a will ask if
the Top-Level form is ready to be closed while Visual FoxPro 5.0 will not.
This is because the code that asks this question is in the QueryUnload
method of the Top-Level form which is not executed in Visual FoxPro 5.0.
<P>
In either case, if the child forms are not closed or NODEFAULT is not
encountered in the QueryUnload of the Top-Level form, the user is
essentially stuck in an endless loop getting asked if it is OK to close
each child form. This will only stop if there is only one child form left.
Run the Bad.app to see this illustrated. There are instructions on the main
Top-Level form for what to do to illustrate the problem.
<P>
What seems to be the best way to handle this situation is to put code in
the QueryUnload methods of both the Top-Level form and the child forms. If
the QueryUnload method in the Almost.scx form is reviewed, it would appear
that this should be all that is necessary to close the child forms.
Unfortunately, due to what appears to be a bug in Visual FoxPro, this
technique cannot be used in all circumstances. Only if the Top-Level form
is the main and only interface for a distributed executable file does this
technique seem not to cause problems.
<P>
Whether using the technique in the Good.app or the Almost.app(not really
recommended), additional code can be placed in the QueryUnload methods of
the child forms in case they are closed by their control boxes. Below is
the QueryUnload method code from the Top-Level form and one of the child
forms in the Good.app example. Also review the code in the actual form's
methods and the other files in the project.
<P>
<PRE>   *** QueryUnload of Good Top-Level form

   LOCAL lAllClosed, lFormOpen
   lAllClosed=.T.
   lFormOpen=.F.
   LOCAL xx
   xx=_Screen.FormCount

   * The CloseBox or Close command in the application menu was chosen
   IF This.ReleaseType=1
      IF MESSAGEBOX(;
         "Are you ready to close this top-level form?",36,;
         "QueryUnload of "+THIS.Caption) = 7
         NODEFAULT
         lAllClosed=.F.
         RETURN lAllClosed
      ENDIF
   ENDIF

   * The Quit menu option was chosen
   IF This.ReleaseType=0 AND xx&gt;1
      IF MESSAGEBOX(;
         "Are you ready to close this top-level form?",36,;
         "QueryUnload of "+THIS.Caption) = 7
         NODEFAULT
         lAllClosed=.F.
         RETURN lAllClosed
      ENDIF
   ENDIF

   * Attempt to close all active forms via each form's QueryUnload event
      DO WHILE TYPE('_SCREEN.ACTIVEFORM') = "O" AND ;
                  _SCREEN.ACTIVEFORM.NAME &lt;&gt; "_"
            IF NOT _SCREEN.ACTIVEFORM.QUERYUNLOAD()
                  lAllClosed = .F.
                  NODEFAULT
                  EXIT
            ENDIF
         ENDDO

   RETURN lAllClosed
   *** End of QueryUnload of Good Top-Level form **********************



   *** QueryUnload of a Child form - either the GoodRed or GoodGreen.scx

   LOCAL x,xx,ans,cTopLevelCaption
   * Getting the caption of the Top-Level form to use in dialog boxes
   xx = _SCREEN.FormCount
   FOR x = 1 TO xx
      IF _SCREEN.FORMS[x].NAME = "_"
         cTopLevelCaption = _SCREEN.FORMS[x].Caption
         EXIT
      ENDIF
   ENDFOR
   ******

   * Optionally save changes before closing the form
   ans = MESSAGEBOX(;
         "Do you want to save changes to the "+CHR(13)+;
         THIS.Caption+"?",35,cTopLevelCaption)
   DO CASE
      CASE ans = 6   &amp;&amp; Yes
         WAIT WINDOW "Changes saved" TIMEOUT 1
      CASE ans = 7   &amp;&amp; No
         WAIT WINDOW "Changes NOT saved" TIMEOUT 1
      CASE ans = 2   &amp;&amp; Cancel
         * Abort closing this form
         NODEFAULT
         * Return to calling program
         RETURN .F.
   ENDCASE
   THIS.RELEASE  &amp;&amp; if QueryUnload called as a method


</PRE>Run the Good.app in Visual FoxPro 5.0a to see the code above in action. In
the Good.app example, Visual FoxPro 5.0 and 5.0a both behave the same way
if the Quit menu option is chosen. Quit calls the QueryUnload method of the
Top-Level form and if that returns true(.T.) then the Top-Level form is
released and CLEAR EVENTS is issued. Note that the Destroy method of the
Top-Level form issues a CLEAR EVENTS.
<P>
There is a difference between Visual FoxPro 5.0 and 5.0a if the CloseBox is
used to close the Top-Level form when the child forms are open. In Visual
FoxPro 5.0, the GoodRed and GoodGreen forms are closed since they don't
have anything in their QueryUnload methods to prevent that. The GoodBlue
form has code in it's QueryUnload method that can be used to keep the form
from closing. But if two instances of the GoodBlue form are running,
answering "No" when prompted to close will put Visual FoxPro into the same
endless loop illustrated in Bad.app. This happens with both the Almost.app
and Good.app in Visual FoxPro 5.0. This does not happen in Visual FoxPro
5.0a with either application.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual FoxPro Help; search on ShowWindow property and QueryUnload method.
<P>
(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by John W. Spilker, LEAD Associates, Inc.
 
<PRE>Keywords          : FxprgClassoop vfoxwin kbcode
Version           : WINDOWS:5.0,5.0a
Platform          : WINDOWS
Issue type        : kbfile
Solution Type     : kbsample</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Comparison: Visual FoxPro Grid &amp; Clipper/DOS Tbrowse </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130439">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/05/21">
<META NAME="Keywords" CONTENT="kb3rdparty kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  CA-Clipper version 5.x has five predefined classes built into its language. One of these is the Tbrowse class, which is similar to Visual FoxPro's Grid class. This article compares the two.  NOTE: This article only describes how to create a Grid co...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVW,QAVX,QAPN,QAE1,QA56,QA55,QA7O,QAH4,QA7N,QDMN,QARR,QABO,QAZM,QAZL,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Code Comparison: Visual FoxPro Grid &amp; Clipper/DOS Tbrowse</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130439</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
CA-Clipper version 5.x has five predefined classes built into its language.
One of these is the Tbrowse class, which is similar to Visual FoxPro's Grid
class. This article compares the two.
<P>
NOTE: This article only describes how to create a Grid control in a
program. Grids can also be created visually through drag-drop and the
Visual Class Designer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Clipper actually provides two Tbrowse classes - TbrowseDB() and
TbrowseNew(). TbrowseDB() browses tables, and TbrowseNew() browses other
data sources, such as text files and arrays.
<P>
Below are comparisons of how to browse a table that contains three columns.
In each comparison, the Clipper code is shown followed by the equivalent
program in Visual FoxPro.
<P>
NOTE: Run the following program first to create the TEST table used in the
comparisons.
<P>
<PRE>   *** Code to create the TEST table ***
   &amp;&amp;   In Clipper, execute these 5 lines:
   &amp;&amp;   aDbf := {}
   &amp;&amp;   AADD(aDbf, { "Fld1", "N", 3, 0 })
   &amp;&amp;   AADD(aDbf, { "Fld2", "C", 4, 0 })
   &amp;&amp;   AADD(aDbf, { "Fld3", "C", 20, 0 })
   &amp;&amp;   DBCREATE("Test",aDbf)

   &amp;&amp;   In FoxPro, execute the next line:
   &amp;&amp;   CREATE TABLE Test (fld1 n(3),fld2 c(4),fld3 c(20))

   USE Test
   FOR i=1 TO 50
     APPEND BLANK
     REPLACE Fld1 WITH i
     REPLACE Fld2 WITH ALLTRIM(STR(i))
     REPLACE Fld3 WITH REPLICATE(CHR(64+i),20)
   NEXT
   CLOSE ALL
   *** End of code to create TEST table ***

</PRE><h3>Clipper</h3>
 
<P>
<PRE>   #include "inkey.ch"
   #include "setcurs.ch"

   #define  MYCOLORS   "BG/B,RB+/W,W/N,N,GR+/W,G+/B,R+/B,GR+/B"
   #define  HEADSEP    CHR(205) + CHR(209) + CHR(205)
   #define  COLSEP     CHR(32)  + CHR(179) + CHR(32)

   FUNCTION Main()
      LOCAL b, column, nKey
      SET SCOREBOARD OFF
      SET DATE       BRITISH
      SET CONFIRM    ON

      USE test

      SETCURSOR(SC_NONE)
      SETCOLOR("N/W")
      SCROLL()
      SETCOLOR("BG/B,RB+/W,,,BG/N")
      SCROLL( 2, 6, 22, 72 )
      @  2, 6 TO 22,72 DOUBLE

      b := TBrowseDB( 3, 7, 21, 71 )
      b:colorSpec := MYCOLORS
      b:colSep  := COLSEP
      b:headSep := HEADSEP

      // Custom Skipper
      b:skipBlock     := {|nRecs| Skipper( nRecs )}

      // TBColumn objects
      column := TBColumnNew( "Field 1", {|| test-&gt;fld1} )
      b:addColumn( column )
      column := TBColumnNew( "Field 2", {|| test-&gt;fld2} )
      b:addColumn( column )
      column := TBColumnNew( "Field 3", {|| test-&gt;fld3} )
      b:addColumn( column )

      WHILE .T.
         WHILE ( !b:stabilize() )
            nKey := INKEY()
            IF ( nKey != 0 )
               EXIT
            ENDIF
         END

         IF ( b:stable )
            nKey := INKEY(0)
         ENDIF

         // Process key
         IF ( nKey == K_DOWN )
            b:down()
         ELSEIF ( nKey == K_UP )
            b:up()
         ELSEIF ( nKey == K_PGDN )
            b:pageDown()
         ELSEIF ( nKey == K_PGUP )
            b:pageUp()
         ELSEIF ( nKey == K_CTRL_PGUP )
            b:goTop()
         ELSEIF ( nKey == K_CTRL_PGDN )
         b:goBottom()
         ELSEIF ( nKey == K_RIGHT )
            b:right()
         ELSEIF ( nKey == K_LEFT )
            b:left()
         ELSEIF ( nKey == K_HOME )
            b:home()
         ELSEIF ( nKey == K_END )
            b:end()
         ELSEIF ( nKey == K_CTRL_LEFT )
            b:panLeft()
         ELSEIF ( nKey == K_CTRL_RIGHT )
            b:panRight()
         ELSEIF ( nKey == K_CTRL_HOME )
            b:panHome()
         ELSEIF ( nKey == K_CTRL_END )
         b:panEnd()
         ELSEIF ( nKey == K_ESC )
            SCROLL()
            EXIT
         ENDIF
      END
   RETURN NIL

   STATIC FUNCTION Skipper( nRequest )
      LOCAL nActually := 0

      IF (nRequest == 0)
         SKIP 0
      ELSEIF (nRequest &gt; 0) .AND. (!EOF())
         WHILE (nActually &lt; nRequest)
            SKIP
            IF EOF()
               SKIP -1
               EXIT
            ENDIF
            nActually++
         END
      ELSEIF (nRequest &lt; 0)
         WHILE (nActually &gt; nRequest)
            SKIP -1
            IF BOF()
            EXIT
            ENDIF
            nActually--
         END
      ENDIF
      RETURN nActually

</PRE><h3>Visual FoxPro</h3>
 
<P>
<PRE>   USE test
   oFormwgrid = CREATEOBJECT("MyForm")
   oFormwgrid.show
   READ EVENTS

   DEFINE CLASS MyForm AS Form
     Width=400
     Height=250
     ADD OBJECT b AS MyGrid
   ENDDEFINE

   DEFINE CLASS MyGrid AS Grid
     Left=7
     Top=1
     Width=340
     Height=240
     ColumnCount=3

     Column1.ControlSource='fld1'
     Column2.ControlSource='fld2'
     Column3.ControlSource='fld3'
     Column1.Width=50
     Column3.Width=200

     PROCEDURE init
       This.Column1.Header1.Caption='Field 1'
       This.Column2.Header1.Caption='Field 2'
       This.Column3.Header1.Caption='Field 3'
     ENDPROC
   ENDDEFINE

</PRE>Clipper is an MS-DOS-based product, so you don't need to create a window
for the browse. However, because Visual FoxPro is a Windows-based product,
you need to create a window for it.
<P>
The DEFINE CLASS section creates a subclass of the Form class, and the
oFormwgrid=CREATEOBJECT("MyForm") line creates an instance of that object.
<P>
<P><h3>Visual FoxPro</h3>
 
<P>
<PRE>   oFormwgrid=CREATEOBJECT("MyForm")
   oFormwgrid.show

   ..

   DEFINE CLASS MyForm AS Form

   ..

   ENDDEFINE

</PRE>Once you have created a window, you can add the Grid to it. Again, you will
sub-class the Grid class and create an instance of it with the ADD OBJECT b
AS MyGrid line.
<P>
<P><h3>Clipper</h3>
 
<P>
<PRE>   b := TBrowseDB( 3, 7, 21, 71 )

</PRE><h3>Visual FoxPro</h3>
 
<P>
<PRE>   ...

   ADD OBJECT b AS MyGrid

   ...

   DEFINE CLASS MyGrid AS Grid
     Left=7
     Top=1
     Width=340
     Height=240
     ColumnCount=3

   ...

   ENDDEFINE

</PRE>Now you can add columns to the Grid. Clipper creates a new column in the
Tbrowse by creating an instance of the TBColumnNew class and then passing
its handle to the addcolumn method of the Tbrowse.
<P>
In Visual FoxPro, you already set the property 'ColumnCount' to 3 in the
sub-class, so you can just assign Column X's ControlSource property to the
desired value. While the Grid is being initialized, you can set the titles
of the column headers in the PROCEDURE init.
<P>
<P><h3>Clipper</h3>
 
<P>
<PRE>   column := TBColumnNew( "Field 1", {|| test-&gt;fld1 })
   b:addColumn( column )
   column := TBColumnNew( "Field 2", {|| test-&gt;fld2 })
   b:addColumn( column )
   column := TBColumnNew( "Field 3", {|| test-&gt;fld3 })
   b:addColumn( column )

</PRE><h3>Visual FoxPro</h3>
 
<P>
<PRE>   Column1.ControlSource='Test.fld1'
   Column2.ControlSource='Test.fld2'
   Column3.ControlSource='Test.fld3'

   PROCEDURE init
     This.Column1.Header1.Caption='Field 1'
     This.Column2.Header1.Caption='Field 2'
     This.Column3.Header1.Caption='Field 3'
   ENDPROC

</PRE>The objects properties and methods are set in both products so you can now
give it life. Clipper does this through the stabilize method, DO .. WHILE
loops and INKEY(). Visual FoxPro ties in with the Windows event model so
you can just issue the READ EVENTS command.
<P>
<P><h3>Clipper</h3>
 
<P>
<PRE>   WHILE ( !b:stabilize() )
     nKey := INKEY()
     IF ( nKey != 0 )
       EXIT
     ENDIF
   END

   IF ( b:stable )
     nKey := INKEY(0)
   ENDIF

</PRE><h3>Visual FoxPro</h3>
 
<P>
<PRE>   READ EVENTS

</PRE>Clipper/DOS is manufactured by Computer Associates, a vendor independent of
Microsoft; we make no warranty, implied or otherwise, regarding this
product's performance or reliability.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00  VFoxWin ca clipper for dos 5.01<BR>
KBCategory: kb3rdparty kbprg kbcode<BR>
KBSubcategory: FxinteropDatabase<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create an Index in Descending Order </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90412 ">
<META NAME="KBModify" CONTENT="1995/04/17">
<META NAME="KBCreate" CONTENT="1992/10/14">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  By default, indexes are created in ascending order (for example, alphabetically from A to Z) or by date from January to December. However, in some cases, there is a need to create an index in reverse (descending order such as alphabetically from Z ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QA28,QA7O,QA7N,QAGC,QALX,QAYL,QALW,QAH4,QBXR,QDMF,QASR,QAPF,QAJQ,QAB6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create an Index in Descending Order</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90412 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxBASE+ for MS-DOS, version 2.10
<LI>Microsoft FoxPro for MS-DOS, version 1.02
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, indexes are created in ascending order (for example,
alphabetically from A to Z) or by date from January to December. However,
in some cases, there is a need to create an index in reverse (descending
order such as alphabetically from Z to A) or by date from December to
January. This article shows you how to create an index in descending order.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Numeric Fields</h3>
 
<P>
To create a reverse index on a numeric field, create a value that is the
difference between an arbitrary large value and the value being indexed.
For example, if SALES is a numeric field in a database and MyIndex is an
indexname, the following creates a reverse index on sales:
<P>
<PRE>   INDEX ON 10000000 - SALES TO MyIndex

</PRE><h3>Date Fields</h3>
 
<P>
The same principle applies to create a reverse index on a date field. If
lastsale is a field in the database and MyIndex is an indexname, the
following code creates a reverse index on the date field:
<P>
<PRE>   INDEX ON CTOD("01/01/2100") - lastsale TO MyIndex

</PRE><h3>Character Fields</h3>
 
<P>
The procedure to create a reverse index on a character field requires three
steps:

<OL><P><LI>Create the following program called MCOMP.PRG to create a 255
   character string, as follows:
<P>
<P><PRE>      PRIVATE char, mdescend
      char = 255
      mdescend = ""
      DO WHILE char &gt;= 1
<PRE></PRE>         mdescend = mdescend + CHR(char)
         char = char - 1
      ENDDO
      RETURN mdescend

</PRE><P><LI>Assign the string generated by this program to a variable, as
   follows:
<P>
<P><PRE>      mdesc_ord = mcomp()
</PRE><P>
   Note: This variable must be created each time the descending index
   is used. Otherwise, the program returns a "Variable Not Found"
   error.

<P><LI>Create the index using the SYS(15) function, the variable, and the
   database field.
<P>
   For example, if the mdesc_ord variable is set as indicated in Step
   2 above, lname is a field in the database and MyIdex is the
   indexname, the following code creates a reverse index on the lname
   field:
<P>
<P><PRE>      INDEX ON SYS(15,mdesc_ord,lname) TO MyIndex
</PRE><P>
   Note: The SYS(15,&lt;expC1&gt;,&lt;expC2) function takes each character of
   the string &lt;expC2&gt; and uses the character's numeric value as a
   subscript into the table &lt;expC1&gt;, replacing the character in
   &lt;expC2&gt; with the character found at that position in the table.
<P>
</OL><h3>Index on Two Fields [Field1 Ascending, Field2 Descending]</h3>
 
<P>
To create an index on two fields where the first field is indexed in
ascending order and the second field is indexed in descending order,
refer to the character field example above. The same concept could
apply to more than two fields. Follow Steps 1 and 2 above, and then
Step 3 below:

<OL><P><LI>Create the index using the first field, the SYS(15), the variable,
   and the second field.
<P>
   For example, if the mdesc_ord variable is set as indicated in Step
   2 above, fname is the first field to be indexed in ascending order,
   lname is the second field to be indexed in descending (reverse)
   order, and MyIndex is the indexname, the following code creates the
   index:
<P>
<P><PRE>      INDEX ON fname+SYS(15,mdesc_ord,lname) TO MyIndex
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxDos 2.00 2.10 reverse<BR>
KBCategory: kbusage<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

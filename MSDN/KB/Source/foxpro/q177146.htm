

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Read and Change the System Date with API Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177146">
<META NAME="KBModify" CONTENT="1997/12/04">
<META NAME="KBCreate" CONTENT="1997/11/21">
<META NAME="Keywords" CONTENT="FxprgGeneral vfoxwin kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article presents a step-by-step demonstration on programmatically calling Windows application program interface (API) functions from Visual FoxPro to read and set the system date. The code example shows how to obtain the date in a short date f...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBE6,QBE7,QA6E,QAGJ,QAUJ,QACE,QAH4,QDNG,QBTX,QAI4,QBWQ,QDL9,QBWO,QBWN,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Read and Change the System Date with API Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177146</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0, 5.0a
   on the following platforms: NT, Win95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article presents a step-by-step demonstration on programmatically
calling Windows application program interface (API) functions from Visual
FoxPro to read and set the system date. The code example shows how to
obtain the date in a short date format. The system date can be set manually
in the Date tab through the Regional Settings applet in the Windows Control
Panel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The values passed to the GetLocaleInfo API are obtained from the file
Winnls.h that ships with Visual C. The Winnls.h contains constants and
declarations used for National Language Support for Windows applications.
Below are a few values from the Winnls.h file that may be useful in a
Visual FoxPro for Windows application.
<P>
<PRE>   Hexadecimal Value               Description
   -------------------------------------------------------
   0x00000014            * Local monetary symbol.         *
   0x00000015            * International monetary symbol. *
   0x00000016            * Monetary decimal separator.    *
   0x00000017            * Monetary thousand separator.   *
   0x0000001D            * Date separator.                *
   0x0000001E            * Time separator.                *
   0x0000001F            * Short date format string.      *
   0x00000020            * Long date format string.       *
   0x0000002A            * Long name for Monday.          *
   0x0000002B            * Long name for Tuesday.         *
   0x0000002C            * Long name for Wednesday.       *
   0x0000002D            * Long name for Thursday.        *
   0x0000002E            * Long name for Friday.          *
   0x0000002F            * Long name for Saturday.        *
   0x00000030            * Long name for Sunday.          *
   0x00000031            * Abbreviated name for Monday.   *
   0x00000032            * Abbreviated name for Tuesday.  *
   0x00000033            * Abbreviated name for Wednesday.*
   0x00000034            * Abbreviated name for Thursday. *
   0x00000035            * Abbreviated name for Friday.   *
   0x00000036            * Abbreviated name for Saturday. *
   0x00000037            * Abbreviated name for Sunday.   *

</PRE>The values above along with others in the Winnls.h can be used in the code
below to return and set the properties in Control Panel. Notice the values
are hexadecimal. Visual FoxPro for Windows 5.x can use either a hexadecimal
or decimal value for the GetLocaleInfo and SetLocaleInfo functions. Visual
FoxPro for Windows 3.x, however, must use decimal values for the variables
and API function calls.
<P>
Windows stores two types of date formats, long and short. The program below
demonstrates how to read and set the short date format. Create a
program and add the following code:
<P>
<PRE>   * Begin code to read system short date format *
   *
   * Setup declaration and parameters
   Declare INTEGER GetLocaleInfo in Win32API LONG Locale, ;
      LONG LCType, STRING @LpLCData, INTEGER cchData

   * GetSystemDefaultLCID retrieves the system default locale identifier
   Declare LONG GetSystemDefaultLCID in Win32API

   Declare SetLocaleInfo in Win32API LONG Locale, LONG LCType, ;
      STRING @LpLCData
   dwLCID = GetSystemDefaultLCID()

   Locale = 2048              &amp;&amp; For English language.
   LpLCData = space(255)      &amp;&amp; Address of buffer information.
   cchData = LEN(LpLCData)    &amp;&amp; Size of buffer, LpLCData.

   nretval = 0                &amp;&amp; Number returned from API call.
   cShortdate= ""             &amp;&amp; Hold original short date format.

   * Get version, VFP 5 uses Hexadecimal &amp; decimal, VFP 3 only uses decimal
   IF "3.00"$VERSION()
      LCType = 31    &amp;&amp; Type of information. Decimal 31 for short date.
   ELSE
      LCType = 0x1f  &amp;&amp; Type of information. Hex 1f for short date.
   ENDIF

   * Obtain short date format
   nretval = GetLocaleInfo(Locale, LCType, @LpLCData, cchData)
   If nretval = 0 Then
      =MessageBox ("Could not get information.")
   Else
      =MessageBox (LpLCData, 32, "Short Date Format")
      cShortdate = LpLCData   &amp;&amp; Store original date format.
   EndIf

   * Variable for new short date format
   cNewshortdate = "MM/dd/yy" &amp;&amp; Short date style copied from Control
   Panel.

   setdate = SetLocaleInfo(dwLCID, LCType, cNewshortdate)

   * Reread the system short date to see change
   nretval = GetLocaleInfo(Locale, LCType, @LpLCData, cchData)
   =MessageBox (LpLCData, 32, "Updated short Date Format")

   * Now reset date to previous format
   cNewshortdate = cShortdate

   setdate = SetLocaleInfo(dwLCID, LCType, cNewshortdate)

   * Verify date is in original format
   nretval = GetLocaleInfo(Locale, LCType, @LpLCData, cchData)
   =MessageBox (LpLCData, 32, "Original short Date Format")

   * End of code

</PRE>(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by Dean
Christopher, Microsoft Corporation
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Help, version 5.0; search on: "GetLocaleInfo," "SetLocaleInfo"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: date windows api<BR>
Keywords          : FxprgGeneral vfoxwin kbcode<BR>
Version           : WINDOWS:3.0,3.0b,5.0,5.0a<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

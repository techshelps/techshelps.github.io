

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Group Child Records in a Report Detail Band </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119354">
<META NAME="KBModify" CONTENT="1996/06/01">
<META NAME="KBCreate" CONTENT="1994/08/13">
<META NAME="Keywords" CONTENT="kbprint kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  If you have a parent table that has two or more child tables, and when you create a report from these tables, you want to create a data grouping on a key field in the parent table, and within the Detail band you want to print first all of the relat...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAH4,QA7N,QA7O,QABI,QAY2,QABH,QBXS,QAKD,QA2Q,QARR,QAYL,QAPF,QAG2,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Group Child Records in a Report Detail Band</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 1, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119354</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5x, 2.6
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5x, 2.6
<LI>Microsoft FoxPro for Macintosh, versions 2.5b, 2.5c
<LI>Microsoft Visual FoxPro for Macintosh, version 3.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
If you have a parent table that has two or more child tables, and when you
create a report from these tables, you want to create a data grouping on a
key field in the parent table, and within the Detail band you want to print
first all of the related records from the first child table, followed by
all the related records from the second child table (followed by all
records from subsequent child tables in turn), follow one of the procedures
below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Example 1</h3>
 
<P>
This example assumes that there are three tables:

<UL><LI>A parent table, PARENT.DBF, with two fields:
<P><PRE>    - CODE: A character field of width 2
    - DESRIPT: A character field of width 2
</PRE>
<LI>Two child tables, CHILD1.DBF and CHILD2.DBF, with identical structures:
<P><PRE>    - CODE: A character field of width 2
    - SALES: A numeric field of width 10 with two decimal places
</PRE><P>
</UL>The example also assumes that the values for CODE are unique in the PARENT
table, and that there are some records in both CHILD1 and CHILD2 that have
values in the CODE field that also exist in the PARENT table. All three
tables are indexed on the CODE field, and ORDER is set to that index. This
example will produce the desired results regardless of whether a RELATION
is set from PARENT to either of the child tables, and regardless of the SET
SKIP (one-to-many) condition.

<OL><P><LI>Create a program (CHLDLST.PRG) with the following code:
<P>
<P><PRE>      PARAMETERS parentkey, childalias, string_exp
      *parentkey is the field that all tables are indexed on.
      *string_exp is the field in the child, must be a character expression
      STORE "" TO ret_val
      STORE ALIAS() TO was_alias  &amp;&amp;parent table
      m_exact=SET("EXACT")
<PRE></PRE>      SET EXACT ON                 &amp;&amp;this is necessary for INLIST
      one2many=INLIST(UPPER(childalias),UPPER(SET("SKIP")))
      SELECT (childalias)
      IF NOT one2many
         SEEK EVALUATE(was_alias + "." + parentkey)
      ENDIF
      IF FOUND()                    &amp;&amp; are there related child records?
         SCAN WHILE EVALUATE(childalias + "." + parentkey) = ;
         EVALUATE(was_alias + "." + parentkey)
      * get the data from the current record in the child
             STORE ret_val + EVALUATE(string_exp) ;
                + CHR(13) + CHR(10) TO ret_val
      * add carriage return &amp; linefeed
         ENDSCAN
     ENDIF
     SELECT (was_alias)
     SET EXACT &amp;m_exact
     * ret_val is now a concatenation of child records, separated by CR/LF
     RETURN ret_val

</PRE><P><LI>With the three tables open, and PARENT being the selected table, create
   a new report that has a data grouping on the CODE field from the PARENT
   table. In the group header band, place the two fields from the PARENT
   table. In the Detail band, create two fields with an empty line
   separating them. The expression for the first field is:
<P>
<P><PRE>      IIF(is_newkey=1,chldlst("code","child1","str(sales,10,2)"),"")
</PRE><P>
   The expression for the second field is:
<P>
<P><PRE>      IIF(is_newkey=1,chldlst("code","child2","str(sales,10,2)"),"")
</PRE><P>
   For both fields, do one of the following:
<P>
<P><PRE>    - On the Windows and Macintosh platforms, open the Report Expression
      dialog box, choose the Top -- Field Can Stretch radio button under
      Position Relative To, select the Print When check box, and select the
      Remove Line If Blank check box.
</PRE><P>
<P><PRE>      -or-
</PRE><P>
<P><PRE>    - On the MS-DOS platform, open the Report Expression dialog box, and
      select the Stretch Vertically and Float As Band Stretches check
      boxes. From the Report menu, choose Page Layout, choose the Options
      button, and select the Suppress Blank Lines check box.
</PRE>
<P><LI>Create two report variables in the following order:
<P>
   NOTE: It is critical that these variables appear in the correct order in
   the list of report variables.
<P>
<P><PRE>    - Variable Name : is_newkey
      Value to Store: iif(curr_key=parent.code,0,1)
      Initial Value : 1
</PRE><P>
<P><PRE>    - Variable Name : curr_key
      Value to Store: parent.code
      Initial Value : ' '
</PRE><P>
   With these report variables defined, is_newkey = 1 only when the key
   field (CODE) in the PARENT table changes.

<P><LI>Make sure the program CHLDLST.PRG is in the same subdirectory as the
   report or in a subdirectory that is in the FoxPro path. Also make sure
   that the parent table is in the active work area.
<P>
</OL>This program can be customized to include (for example) subtotals for each
child table, draw dividing lines between the children, and so on.
<P>
<P><h3>Example 2</h3>
 
<P>
You can also use the SELECT-SQL statement with the UNION ALL clause to
obtain a table combining the records from both the parent and child tables.
<P>
Use the following code to set up tables for this example:
<P>
<PRE>   USE customer IN 1
   USE invoices IN 2
   COPY TO inv2
   USE inv2 IN 3

</PRE></OL>The following SELECT-SQL statement could be used to join these tables into
a cursor file that could then be used in a report. The resulting cursor
will have all the related records for the first child, followed by the
related records for the second child for each parent record. In this
example, a character field is used to indicate from which child table the
data comes and to further illustrate the point.
<P>
<PRE>   SELECT customer.cno, customer.contact, "child#1", invoices.ino, ;
      invoices.idate ;
      FROM customer, invoices ;
      WHERE customer.cno=invoices.cno ;
      UNION ALL ;
      SELECT customer.cno, customer.contact, "child#2", inv2.ino, ;
         inv2.idate ;
         FROM customer, inv2 ;
         WHERE customer.cno=inv2.cno ;
         ORDER BY 1

</PRE><h2>REFERENCES</h2>
 
<P>
Information for this article was provided by Alan Schwartz of Micromega
Systems.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxMac 3.00b VFoxWin 3.00  FoxMac FoxDos<BR>
FoxWin 2.00 2.50<BR>
2.50a 2.50b<BR>
2.50c 2.60<BR>
multiple<BR>
KBCategory: kbprint kbcode<BR>
KBSubcategory: FxprgSql<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 1, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Order of Read Level Clauses Different in Visual FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133739">
<META NAME="KBModify" CONTENT="1995/08/02">
<META NAME="KBCreate" CONTENT="1995/08/01">
<META NAME="Keywords" CONTENT="kbprg kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The order in which Visual FoxPro executes READ clauses is different from that of previous versions of FoxPro. For example, the READ DEACTIVATE clause in Visual FoxPro, in some cases, behaves differently in Visual FoxPro.  CAUSE =====  Visual FoxPro...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAO4,QBFN,QA56,QA55,QBFM,QBXS,QAXC,QADO,QAH4,QAW6,QAY5,QAY2,QAEF,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Order of Read Level Clauses Different in Visual FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133739</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The order in which Visual FoxPro executes READ clauses is different from
that of previous versions of FoxPro. For example, the READ DEACTIVATE
clause in Visual FoxPro, in some cases, behaves differently in Visual
FoxPro.
<P>
<P><h2>CAUSE</h2>
 
<P>
Visual FoxPro now supports object oriented programming (OOP). This new
event model has changed the order in which FoxPro processes certain events.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When developing applications in Visual FoxPro it is very important to learn
the order of events. Because the event model in Visual FoxPro is greatly
enhanced over previous versions, items may not fire when expected if
compared to earlier versions of FoxPro.
<P>
<P><h3>Code Sample</h3>
 
<P>
The following example demonstrates how Visual FoxPro's READ DEACTIVATE
clause fires in two different places depending on which version of FoxPro
runs the program. Create the following program, and name it Readordr.prg:
<P>
<PRE>   ****Begin ReadOrdr.PRG****

   SET PRINT TO readordr.log
   SET PRINT ON
   COUNT = 1
   CLEAR
   SET TALK OFF
   mquit = .F.
   ON KEY LABEL F5 mquit = .T. &amp;&amp; Use F5 to clear the READ

   ***Define &amp; Activate Windows, Gets and READ
   DEFINE WINDOW window1 FROM 1,1 TO 20,60 SYSTEM CLOSE
   ACTIVATE WINDOW window1

   @1,1 GET X1 ;
     DEFAULT "1234567890" ;
     SIZE 1,10 ;
     FONT "FIXEDSYS",10 ;
     WHEN ret("@get x1 when clause") ;
     VALID ret("@get x1 valid clause")

   @1, 40 GET Y1 ;
     DEFAULT "1234567890" ;
     SIZE 1,10 ;
     FONT "FIXEDSYS",10 ;
     WHEN ret("@get y1 when clause") ;
     VALID ret("@get y1 valid clause")

   DEFINE WINDOW window2 FROM 21,1 TO 40,60 SYSTEM CLOSE
   ACTIVATE WINDOW window2

   @1,1 GET X2 ;
     DEFAULT "1234567890" ;
     SIZE 1,10 ;
     FONT "FIXEDSYS",10 ;
     WHEN ret("@get x2 when clause") ;
     VALID ret("@get x2 valid clause")

   @1, 40 GET Y2 ;
     DEFAULT "1234567890" ;
     SIZE 1,10 ;
     FONT "FIXEDSYS",10 ;
     WHEN ret("@get y2 when clause") ;
     VALID ret("@get y2 valid clause")

   READ ;
     CYCLE ;
     MODAL ;
     ACTIVATE ret("read activate clause") ;
     DEACTIVATE ret("read deactivate clause") ;
     VALID ret("read valid clause", IIF(mquit = .T., .T.,.F.)) ;
     WHEN ret("read when clause") ;
     SHOW ret("read show clause")

   ***CleanUp Code
   RELEASE WINDOW window1
   RELEASE WINDOW window2
   SET PRINT OFF
   SET PRINT TO

   ***************************
   *  Function to print return values to Readordr.log file
   *  This function is called every time an event occurs, events found
   *  in this program include:
   *       READ WHEN
   *            ACTIVATE
   *            SHOW
   *            DEACTIVATE
   *            VALID
   *       SHOW GET WHEN
   *                VALID
   **************************

   FUNCTION ret
   PARAMETERS clause, retval
   IF param() &lt; 2
      retval = .T.
   ENDIF
   ? ALLTRIM(STR(count)) + ": "
   ?? clause
   count = count + 1
   RETURN retval

   ***End of Program Readordr.Prg

</PRE>When you run the Readordr.prg program, each of the events that fires is
written to a log file name Readordr.log. You can use this file to check the
order of events in Visual FoxPro or in a previous version of FoxPro.
<P>
<P><h3>Steps to Demonstrate Behavior</h3>
 
<P>
To illustrate this point, execute the Readordr.prg program in Visual
FoxPro, and then follow these steps:

<OL><P><LI>When the screen is run, these events occur in this order:
<P>
<P><PRE>      READ WHEN (determines if we may enter the READ)
      READ ACTIVATE (fires when READ is executed)
      READ SHOW (occurs when @GET fields are shown on the screen)
      @GET X1 WHEN (occurs when the cursor moves to the first GET object)
</PRE><P>
   This behavior is identical to the behavior of previous FoxPro versions.

<P><LI>From the first GET field (X1), press the TAB key to move the focus to
   the second field (Y1) on the screen. The following events occur:
<P>
<P><PRE>      @GET X1 VALID (occurs when we attempt to leave the object)
      @GET Y1 WHEN
</PRE><P>
   This behavior is identical to the behavior of previous FoxPro versions.

<P><LI>From the second GET field (Y1), press the TAB key again, this moves the
   focus from Y1 to X2, but also moves from Window1 to Window2. These
   events occur:
<P>
<P><PRE>      @GET Y1 VALID
      @GET X2 WHEN
      READ DEACTIVATE (Occurs when we move from one window to the next)
</PRE><P>
   This behavior is different from previous versions of FoxPro. Notice the
   WHEN clause for the first object on window2 is fired before the READ
   DEACTIVATE. In previous versions, the order of events was:
<P>
<P><PRE>      @GET Y1 VALID
      READ DEACTIVATE
</PRE>
<P><LI>To exit the Readordr.prg program, press the F5 key and then the ESC key.

<P><LI>Run the same code in a previous version of FoxPro, and compare the log
   files.
<P>
</OL><h3>Why Visual FoxPro Uses a Different Firing Order</h3>
 
<P>
The reason why Visual FoxPro differs is because of the current event model.
The Visual FoxPro order of events is described in the Visual FoxPro Help
file in the "Visual FoxPro Event Sequence" topic.
<P>
In the example, you press TAB to move from window1 to window2. The events
are firing in the correct order. First, the VALID clause of Y1 determines
if you may leave the object. Second, the WHEN clause is executed for the
first object (X2) on window2. This occurs because Visual FoxPro's order of
events executes the WHEN clause for the next object in the TAB order,
before the form object (window1) loses the focus. Visual FoxPro has to
first determine if the next object will get the focus before the current
object loses the focus. When the form object (window1) loses the focus, the
READ DEACTIVATE is executed.
<P>
If for example, the WHEN clause for X2 fails, the form object (window1)
will not lose focus, so the DEACTIVATE clause should not fire.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubcategory: FxprgRead<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

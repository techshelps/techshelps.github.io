

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How FoxPro Uses Universal Thunking for 32-Bit API Calls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118557">
<META NAME="KBModify" CONTENT="1997/11/18">
<META NAME="KBCreate" CONTENT="1994/07/24">
<META NAME="Keywords" CONTENT="FxinteropGeneral kbinterop kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  There are two methods of creating 32-bit applications in 16-bit versions of Windows (versions 3.1x). FoxPro uses two variations of the universal thunking (UT) method through the WATCOM compiler in order to perform 32-bit Windows API calls.  MORE IN...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWO,QDL9,QBWQ,QBWN,QAGI,QAA1,QBE7,QBE6,QA7H,QANG,QDI2,QAJH,QAH6,QDNN,QAGQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How FoxPro Uses Universal Thunking for 32-Bit API Calls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118557</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.5x 2.6x 3.00 | 2.5x 2.6x
<PRE>WINDOWS        | MS-DOS
</PRE>kbinterop kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5x, 2.6x
<LI>Microsoft FoxPro for MS-DOS, versions 2.5x, 2.6x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are two methods of creating 32-bit applications in 16-bit versions of
Windows (versions 3.1x). FoxPro uses two variations of the universal
thunking (UT) method through the WATCOM compiler in order to perform 32-bit
Windows API calls.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Method 1: The Universal Thunk</h3>
 
<P>
There are three main components of the universal thunk:

<UL><LI>The 16-bit dynamic-link library (DLL) provides the same entry points as
   the Win32.DLL. This DLL serves as the 16-bit end for the universal
   thunk. It should be noted that the programmer must also include code
   that will detect whether the 32-bit side is loaded.

<LI>A Win32.DLL that sets up the universal thunk serves as the 32-bit end of
   the universal thunk. This DLL is supported only under Win32s.

<LI>A Win32 .EXE (stub) file loads the 32-bit DLL described above.
<P>
</UL>The following diagram illustrates how the pieces fit together:
<P>
<PRE>                     -----------     -----------     ---------
                    | Win32 EXE |--&gt;| Win32 DLL |&lt;-&gt;|  Win32  |
   32-bit           |   (stub)  |   |    (UT)   |   |   DLL   |
                     -----------     -----------     ---------
                        /|\              /|\
            -------------|----------------|---------------------
                        \|/              \|/
                     ---------       ------------
                    | Win 3.1 | &lt;-&gt; | 16-bit DLL |
   16-bit           |   app.  |     |   (UT)     |
                      ---------      ------------

</PRE>The load order is as follows:
<P>
<PRE>   The Windows 3.0 or 3.1 application loads the 16-bit DLL. The 16-bit DLL
   checks to see whether the 32-bit side has been initialized. If it has
   not been initialized, the DLL spawns the 32-bit .EXE (stub), which then
   loads the 32-bit DLL that sets up the universal thunks with the 16-bit
   DLL. Once all components are loaded and initialized, when the Windows
   3.0 or 3.1 application calls an entry point in the 16-bit DLL, the 16-
   bit DLL uses the 32-bit universal thunk callback to pass the data to the
   32-bit side. Once the call has been received on the 32-bit side, the
   proper Win32 DLL entry point can be called.

</PRE><h3>Method 2: Using the Win32s</h3>
 
<P>
The Win32s consists of three components:

<UL><LI>An executable that loads Win32s-based applications in Windows version
   3.0 or 3.1

<LI>A virtual device driver that provides flat-memory model and structured
   exception-handling support

<LI>A set of DLLs that translate Win32 function calls to Win16 function
   calls
<P>
</UL>To run your Win32s-based application on Windows version 3.0 or 3.1, you
must include these Win32s components with your application. Win32s consists
of a virtual device driver (VxD) and a set of DLLs that extend Windows 3.0
and 3.1 to support Win32 applications. The Win32s files must be shipped
with the Win32 application and installed on the Windows 3.0 or 3.1 system.
<P>
Win32s is not built into Windows 3.0 or 3.1, so software vendors must ship
and install Win32s (on the DEVICE = line of the WIN.INI file) along with
the Win32 application in order to have the Win32 application work under
Windows 3.0 or 3.1. The key feature of Win32s is to allow software
developers to ship Win32 applications today for Windows 3.0 or 3.1 and
Windows NT that will continue to install and work well on future Windows
operating systems.
<P>
<P><h3>FoxPro for Windows Method</h3>
 
<P>
The WATCOM compiler is used to provide the thunking layer between Windows
and FoxPro. FoxPro 2.5x for Windows and MS-DOS are both 16-bit
applicaiton.. Any addresses or pointers that need to be passed to and from
Windows 3.0 or 3.1 must be "thunked" down to 16 bit; the WATCOM compiler is
used to perform the translation.
<P>
FoxPro 2.6 uses the WATCOM compiler (32-bit) and the Phar Lap extender for
thunking. It can run on Windows 3.0 and later, including Windows for
Workgroups.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00 FoxDos FoxWin 2.50 2.50a 2.50b<BR>
2.60 2.60a pharlap wfw windows for workgroups<BR>
KBCategory: kbinterop kbprg<BR>
KBSubcategory: FxinteropGeneral<BR>
Keywords          : FxinteropGeneral kbinterop kbprg<BR>
Version           : 2.5x 2.6x 3.00 | 2.5x 2.6x<BR>
Platform          : MS-DOS WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

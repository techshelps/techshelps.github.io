

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create a General-Purpose Thermometer Bar in FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q93587 ">
<META NAME="KBModify" CONTENT="1996/06/01">
<META NAME="KBCreate" CONTENT="1992/12/16">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT=" The code samples below demonstrate how to generate general-purpose user- defined functions (UDFs) that graphically reflect the progress of three types of operations: sequential, report, and indexing.  Sample Code for FoxPro for MS-DOS     SET TALK O...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QATJ,QA28,QBV8,QAB9,QAYL,QBXS,QAUD,QDMU,QA06,QANS,QABG,QAHP,QBG8,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create a General-Purpose Thermometer Bar in FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 1, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q93587 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, and 2.5a
<LI>Microsoft FoxPro for Windows, versions 2.5 and 2.5a
<LI>Microsoft Visual FoxPro for Macintosh, version 3.0b
</UL> 
<P>
The code samples below demonstrate how to generate general-purpose user-
defined functions (UDFs) that graphically reflect the progress of three
types of operations: sequential, report, and indexing.
<P>
<P><h3>Sample Code for FoxPro for MS-DOS</h3>
 
<P>
<PRE>   SET TALK OFF
   SET CURSOR OFF
   USE C:\&lt;foxpro directory&gt;\tutorial\customer
   =display_border()

   * The next three commands are examples of using the thermometer bar
   * with the DISPLAY_BAR and DISPLAY_BORDER commands.

   * 1. Sequential operations.
   * The DISPLAY_BAR function displays a bar graph to represent the
   * progress of a sequential operation.

   PRIVATE rec_number
   rec_number = 1
   SCAN
      &amp;&amp; Perform database operation
      =display_bar() = .T.
      rec_number = rec_number + 1
   ENDSCAN

   * 2. Report operations.
   * The DISPLAY_BAR function displays a bar graph to represent the
   * progress of a report being printed. In the Report Writer, when an
   * index is active, create a memory variable called REC_NUMBER.
   * From the Report menu, choose Variables. Then choose Add. Choose
   * the Count option button. Then create a variable name of
   * REC_NUMBER and store the value 0. When no index is active,
   * replace the memory variable REC_NUMBER in the DISPLAY_BAR
   * function with RECNO(). Then issue the following command:

   REPORT FORM cust NOCONSOLE TO PRINTER FOR display_bar()=.T.

   * 3. Indexing operations.
   * The DISPLAY_BAR function displays a bar graph to represent the
   * progress of an index operation using a .CDX index. Once the INDEX
   * ON command is used with the DISPLAY_BAR function, it must be
   * accessed whenever the database is open. Also, replace the
   * REC_NUMBER memory variable in DISPLAY BAR with RECNO(). Then
   * issue the following command:

   INDEX ON company TAG company FOR display_bar()=.T.

   * The following function displays a bar graph to represent the
   * the progress of a sequential, report, or indexing operation.

   FUNCTION display_bar
   pct = rec_number * 100 / RECCOUNT()
   @ 18,14 SAY REPLICATE(CHR(219),(pct/2)+1)
   RETURN .T.

   * The following function displays the background screen for the
   * bar graph function.

   FUNCTION display_border
   @ 14,10 TO 19,69 DOUBLE
   @ 17,11 TO 17,68 DOUBLE
   @ 17,10 SAY CHR(204)
   @ 17,69 SAY CHR(185)
   @ 15,24 SAY "P E R C E N T   C O M P L E T E"
   @ 16,14 SAY "0   10   20   30   40   50"
   @ 16,44 SAY "60  70   80   90   100"
   RETURN .T.

</PRE>NOTE: If you use CHR(219) with the default FixedSys font, it represents the
letter "U" with an umlaut.
<P>
<P><h3>Sample Code for FoxPro for Windows</h3>
 
<P>
<PRE>   SET TALK OFF
   SET CURSOR OFF
   USE C:\foxprow\tutorial\customer
   =display_border()

   * The next three commands are examples of using the
   * thermometer bar with the DISPLAY_BAR and DISPLAY_BORDER commands.

   * 1. Sequential operations.
   * The DISPLAY_BAR function displays a bar graph
   * to represent the progress of a sequential operation.

   PRIVATE rec_number
   rec_number = 1
   SCAN
      &amp;&amp; Perform database operation
      =display_bar() = .T.

      rec_number = rec_number + 1
   ENDSCAN

   * 2. Report operations.
   * The DISPLAY_BAR function displays a bar graph to represent the
   * progress of a report being printed. In the Report Writer, when an
   * index is active, create a memory variable called REC_NUMBER.
   * From the Report menu, choose Variables. Then choose Add. Choose
   * the Count option button. Then create a variable name of
   * REC_NUMBER and store the value 0. When no index is active,
   * replace the memory variable REC_NUMBER in the DISPLAY_BAR
   * function with RECNO(). Then issue the following command:

   REPORT FORM cust NOCONSOLE TO PRINTER FOR display_bar()=.T.

   * 3. Indexing operations.
   * The DISPLAY_BAR function displays a bar graph to represent the
   * progress of an index operation using a .CDX index. Once the INDEX
   * ON command is used with the DISPLAY_BAR function, the DISPLAY_BAR
   * function must be accessed whenever the database is open. Also,
   * replace the REC_NUMBER memory variable in DISPLAY BAR with
   * RECNO(). Then issue the following command:

   INDEX ON company TAG company FOR display_bar()=.T.

   * The following function displays a bar graph to represent
   * the progress of a sequential, report, or indexing operation.

   FUNCTION display_bar
   pct = rec_number * 100 / RECCOUNT()
   x = 14 + (pct/2+1)
   @ 1,4 FILL TO 2,x COLOR W/N*
   RETURN .T.

   * The following function displays the background screen for the bar
   * graph function.

   FUNCTION display_border
   DEFINE WINDOW therm FROM 14,10 TO 17,80 HALFHEIGHT ;
      TITLE "Percent Complete" FONT "arial",10
   ACTIVATE WINDOW therm
   @ 1,4 TO 2,65 PEN 2 COLOR 0,0,0
   @ 0,4 SAY "0     10     20     30     40     50"
   @ 0,38 SAY "60    70     80     90     100"
   RETURN .T.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxMac 3.00b VFoxWin 3.00  FoxDos FoxWin 2.00<BR>
2.50 2.50a<BR>
thermometer gauge<BR>
indicator RWriter<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxtoolRwriter<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 1, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Transaction Processing Interacts with TableUpdate </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129643">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/05/01">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Visual FoxPro version 3.0 introduces two new features that at first glance appear to provide almost identical functionality - table buffering and transaction processing. This article describes the differences and interactions between buffering and ...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAXB,QA5V,QAC1,QBXJ,QBD2,QAA5,QAJ6,QAEF,QBV8,QAB9,QDMH,QBVV,QDIX,QACI,QARR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How Transaction Processing Interacts with TableUpdate</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129643</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual FoxPro version 3.0 introduces two new features that at first glance
appear to provide almost identical functionality - table buffering and
transaction processing. This article describes the differences and
interactions between buffering and transactions, and it describes scenarios
where each or both would be appropriate.
<P>
NOTE: Transactions are limited to tables that are part of a database
container (.DBC file) and cannot be used with a free table.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Overview of Buffering</h3>
 
<P>
Buffering provides protection against user errors during data input, and it
controls when records are locked. It allows access to the validation rules
and triggers stored in the database container (.DBC file) for fields within
tables.
<P>
Although you are working directly with a record instead of with memory
variables, the data is not written to the table until it has been verified
as acceptable.
<P>
Buffering can be optimistic (lock records at the time a write is attempted)
or pessimistic (lock records at the time you begin editing the record). In
addition to specifying whether you are using optimistic or pessimistic
buffering, you specify whether you are using row (write edits as soon as
you move the record pointer) or table buffering (save all edits in a buffer
until the programmer issues a table update command).
<P>
When you implement buffering, your edits are stored in a memory buffer.
They are applied when you issue a TABLEUPDATE() function, or when you move
the record pointer if row buffering is being used. If you change your mind
and want to discard changes, a TABLEREVERT function is used to restore the
record to its original state.
<P>
Buffering can be substituted for both the READ NOLOCK and SCATTER/GATHER
techniques used in FoxPro versions 2.x.
<P>
<P><h3>Overview of Transactions</h3>
 
<P>
Transactions are used to wrap sets of related updates that should be made
as a unit, or not at all. Transactions protect against system failure or
problems that may occur while you are writing groups of records to a table,
such as an inability to lock a single record involved in a group update.
<P>
When all updates have been written to the table successfully, an END
TRANSACTION command is used to commit the updates. If one or more updates
fail, a ROLLBACK command is used to restore the table(s) involved to the
original state before the transaction.
<P>
Because the transaction locks all records involved, as well as the index
for the tables involved, other users cannot update the table at all while a
transaction is in progress.
<P>
<P><h3>Choosing Between Buffering and Transactions</h3>
 
<P>
Use buffering whenever you want to enforce validation rules or triggers
that are contained within a .DBC file. Choose buffering as well when you
want to avoid contentions for locks as users move through a table. You can
often use buffering without transaction processing.
<P>
Use transactions whenever you want to protect groups of related updates and
ensure that all or none of the updates take place. Transaction processing
should never be used without buffering.
<P>
<P><h3>Using Buffering and Transaction Processing Simultaneously</h3>
 
<P>
Typically, a table update will be nested within a transaction as follows:
<P>
<PRE>   BEGIN TRANSACTION
      llUpdateSuccessful = TABLEUPDATE()
      IF llUpdateSuccessful
         END TRANSACTION
      ELSE
         ROLLBACK
      ENDIF

</PRE>If a transaction has been declared, the TABLEUPDATE function writes its
changes into the transaction buffer, not the actual table. Disposition of
the contents of the transaction buffer is then effected by the ROLLBACK or
END TRANSACTION commands.
<P>
Usually, you would not issue a TABLEREVERT() before the ROLLBACK command.
The cause of the failure to update would be identified (such as failure to
obtain a lock), and the transaction would be attempted again. If you issued
a TABLEREVERT function within the transaction, all edits in the buffer
would be discarded and the user would have to rekey all of the changes
before another update attempt occurred.
<P>
If a system crash occurs while a transaction is active, the data will be
"rolled back" implicitly. Visual FoxPro does not maintain a physical
transaction log, hence all the changes are lost in case of a power failure
or other crash.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on transactions and buffering, refer to the Microsoft
Visual FoxPro "Developer's Guide" and "Professional Features Guide."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words:  3.00 VFoxWin<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgMultiuser<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

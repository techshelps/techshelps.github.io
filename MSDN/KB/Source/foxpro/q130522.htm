

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Internal Memory Management in Visual FoxPro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130522">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/05/22">
<META NAME="Keywords" CONTENT="kbenv">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Visual FoxPro handles memory management differently from previous versions of FoxPro. With FoxPro version 2.x, FoxPro had to pre-allocate one or more blocks of memory at startup. This is demonstrated by using MVCOUNT and MEMLIMIT. Visual FoxPro use...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA55,QA56,QAGI,QBW6,QDIR,QAY2,QAHC,QAGU,QAX6,QAA8,QDJD,QBWS,QAJQ,QDMW,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Internal Memory Management in Visual FoxPro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130522</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual FoxPro handles memory management differently from previous versions
of FoxPro. With FoxPro version 2.x, FoxPro had to pre-allocate one or more
blocks of memory at startup. This is demonstrated by using MVCOUNT and
MEMLIMIT. Visual FoxPro uses a more dynamic approach to memory management.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In Visual FoxPro, a small footprint is allocated and the reserved memory
pool is dynamically increased as needed. When free contiguous space in the
currently allocated blocks used by Visual FoxPro becomes low, Visual FoxPro
will try to compress the memory block. If Visual FoxPro still needs more
memory after compression, it requests another memory block from the
operating system.
<P>
The requested block size is large, so Visual FoxPro doesn't have to send
requests to the operating system often.
<P>
Along the same lines, Visual FoxPro doesn't release memory from the pool
until the operating system requests it back. This is done because memory
requested by Visual FoxPro is assumed to be needed again. It requires a lot
of time to request memory from the operating system, so Visual FoxPro holds
on to whatever it requests.
<P>
<P><h3>Memory Pools</h3>
 
<P>
When Visual FoxPro starts, it creates two memory pools (FOX USER and FOX
BUFFERS). The FOX USER area stores memory variables, and FOX BUFFERS stores
strings that are embedded in the product as well as any structures that are
related to files that are open. Visual FoxPro pulls memory from three
existing Windows resources - OLE, USER, and GDI resources.
<P>
<P><h3>Example Showing How Memory Pools Are Used</h3>
 
<P>
When a user opens a form owning a private DataSession and that form is
instantiated, Visual FoxPro uses memory from the FOX USER pool to store
information about the session and properties of the form. The FOX BUFFERS
pool is used to cache parts of the tables that are open in the DataSession.
<P>
There is no Visual FoxPro command that forces the FoxPro memory manager to
release the reserved memory blocks. The commands CLEAR ALL, RELEASE ALL,
CLOSE ALL have no effect.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbenv<BR>
KBSubcategory: FxenvMemory<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

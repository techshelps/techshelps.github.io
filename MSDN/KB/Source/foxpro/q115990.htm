

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine If a Variable Exists in Memory </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115990">
<META NAME="KBModify" CONTENT="1995/06/27">
<META NAME="KBCreate" CONTENT="1994/06/09">
<META NAME="Keywords" CONTENT="kbenv kbprg kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  If a nonexistent variable is called in FoxPro, a  Variable                 not found  error message will result. This article explains how you can determine whether a particular variable exists in memory.  MORE INFORMATION  There are two ways you c...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAB4,QAHD,QAAP,QADN,QBVV,QAH4,QADK,QAA1,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine If a Variable Exists in Memory</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115990</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a, 2.5b, 2.6
<LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6
<LI>Microsoft FoxPro for Macintosh, versions 2.5b, 2.5c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
If a nonexistent variable is called in FoxPro, a "Variable &lt;variable name&gt;
not found" error message will result. This article explains how you can
determine whether a particular variable exists in memory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two ways you can determine the existence of a variable.
<P>
<P><h3>Method 1</h3>
 
<P>
The TYPE() function will return a "U" if the variable does not exist in
memory. The following sample code illustrates this behavior.
<P>
<PRE>   *** Begin Example Code ***

   m.var1='m.var1 does exist'         &amp;&amp; Initialize a variable.
   WAIT WINDOW TYPE('m.var1')         &amp;&amp; A "C" will be displayed.
   WAIT WINDOW TYPE('m.var2')         &amp;&amp; A "U" will be displayed.

   *** End Example Code ***

</PRE>In a program, the TYPE() function could be used in an IF ... ELSE ... ENDIF
scenario, such as:
<P>
<PRE>   *** Begin Example Code ***
   IF TYPE('m.var2')='U'
       WAIT WINDOW 'm.var2 does not exist!'
   ELSE
       WAIT WINDOW 'm.var2 exists!'
   ENDIF

   *** End Example Code ***

</PRE><h3>Method 2</h3>
 
<P>
Set up an ON ERROR routine that will trap for error number 12 (Variable
&lt;variable name&gt; not found). For example:
<P>
<PRE>   *** Begin Example Code ***

   m.var1='m.var1 does exist'         &amp;&amp; Initialize a variable.
   ON ERROR DO ERRHANDL WITH ERROR()  &amp;&amp; Initialize error trapping.
   WAIT WINDOW m.var1       &amp;&amp; Display contents of existing variable.
   WAIT WINDOW m.var2       &amp;&amp; Display contents of nonexistent variable
                            &amp;&amp; that will cause an error.
   ON ERROR                 &amp;&amp; Resets ON ERROR routine to default.

   PROCEDURE ERRHANDL                 &amp;&amp; PROCEDURE ERRHANDL is the
   PARAMETER errnumbr                 &amp;&amp; routine that displays the
   IF errnumbr=12                     &amp;&amp; message about the variable
                                      &amp;&amp; that does not exist.
      WAIT WINDOW 'The variable you are using does not exist!'
   ENDIF

   *** End Example Code ***
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxMac FoxDos FoxWin 2.00 2.50 2.50a 2.50b 2.60<BR>
find<BR>
available<BR>
found memvar errmsg<BR>
KBCategory: kbenv kbprg kberrmsg<BR>
KBSubcategory: FxenvMemory<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Check for a Floppy Disk Using FOXTOOLS </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125372">
<META NAME="KBModify" CONTENT="1996/11/15">
<META NAME="KBCreate" CONTENT="1995/01/25">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  The code in this article demonstrates how to use FOXTOOLS.FLL to register and call Windows API functions that check the floppy drive to determine if a disk is present.  MORE INFORMATION  There is no single FoxPro command that determines if a floppy...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAC9,QAUD,QAGI,QAV1,QAV0,QABI,QABH,QDL9,QBWQ,QBWO,QBWN,QAKP,QA9O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Check for a Floppy Disk Using FOXTOOLS</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125372</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b
<LI>Microsoft FoxPro for Windows, versions 2.6x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The code in this article demonstrates how to use FOXTOOLS.FLL to register
and call Windows API functions that check the floppy drive to determine if
a disk is present.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There is no single FoxPro command that determines if a floppy disk drive is
empty. Fortunately, several third-party and shareware routines exist to
perform this function. However, most of these routines were written for use
with FoxPro for MS-DOS.
<P>
The following code example employs FOXTOOLS.FLL to register and call
Windows API functions that check the floppy drive for a disk and return an
error message if the disk drive is empty.
<P>
<PRE>   * Function isdiskin - determine if a specified disk is present in
   * FoxPro for Windows
   *
   * passed: drive letter, in the form of &lt;drive letter A-Z&gt; or
   * &lt;drive letter A-Z:&gt;
   * returns: logical .t. if disk can be read, .f. if it cannot
   *
   *    example:
   *    IF isdiskin("A:")
   *      WAIT WINDOW "There is a disk in drive A:"
   *    ENDIF

   FUNCTION isdiskin

   PARAMETERS m.drive

   * test passed drive letter - is it greater than 2 characters,
   * blank, or outside the range of A-Z? If so, then return .f.
   m.drive = ALLTRIM(m.drive)
   IF LEN(m.drive) &gt; 2 .OR. LEN(m.drive) = 0 .OR. .NOT. ;
   BETWEEN(ASC(UPPER(m.drive)), 65, 90)
   RETURN .f.
   ENDIF

   IF RIGHT(m.drive,1) # ":"
      m.drive = m.drive + ":"
   ENDIF

   * detect if FOXTOOLS.FLL is already loaded; if not, load it
   m.isloaded = "FOXTOOLS" $ SET("LIBRARY")
   IF .NOT. m.isloaded
      SET LIBRARY TO SYS(2004)+"FOXTOOLS.FLL" ADDITIVE
   ENDIF

   * detect if another error routine is already present, save its name
   m.olderror = ON('error')
   ON ERROR DO diskerr

   * hang onto the old error mode for later restoration
   m.seterrmode = REGFN("SetErrorMode", "I", "I")

   * SetErrorMode with an argument of 1 causes Windows to relinquish
   * critical error handling back
   * to the application, which ideally does a DOS
   * GetExtendedErrorInformation call to determine
   * the nature of the error. FoxPro doesn't do this, only recognizes
   * that the error has occurred
   * and so calls the ON ERROR routine with an error() value of 0.
   m.olderrstate = CALLFN(m.seterrmode,1)

   * default is no disk errors; our ON ERROR routine sets this variable
   m.diskerr = .f.

   * try to find the NUL file in the root of the passed drive
   m.drivestate = FILE(m.drive + "\NUL")

   IF .NOT. m.diskerr
      * no disk error, so what did the file() call return?
      IF m.drivestate
      m.driveok = .t.
      ELSE
      m.driveok = .f.
      ENDIF
   ELSE
      m.driveok = .f.
   ENDIF

   * restore the old error handler, old error state, old library state
   * and old talk state
   IF .NOT. EMPTY(m.olderror)
      ON ERROR DO (m.olderror)
   ELSE
      ON ERROR
   ENDIF

   m.resterrstate = CALLFN(m.seterrmode,m.olderrstate)

   IF .NOT. m.isloaded
      RELEASE LIBRARY SYS(2004)+"FOXTOOLS.FLL"
   ENDIF

   RETURN m.driveok

   * FoxPro thinks the error() is 0 after the failed file() call with
   *SetErrorMode = 1. Just set
   * our m.diskerr variable .t. on any error
   PROCEDURE diskerr

   m.diskerr = .t.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin FoxWin kbinf 2.60 2.60a 3.00 3.00b<BR>
KBCategory: kbprg<BR>
KBSubcategory: FxprgFoxtools<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

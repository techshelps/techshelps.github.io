

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Problems with SET COLLATE and Queries with Integer Fields </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176884">
<META NAME="KBModify" CONTENT="1998/02/09">
<META NAME="KBCreate" CONTENT="1997/11/18">
<META NAME="Keywords" CONTENT="FxprgIntl FxprgSet FxprgSql VFoxMac vfoxwin">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  Queries in Visual FoxPro that compare integer fields in the WHERE clause of a SQL Select statement between two or more tables may not return all matching records. This problem occurs when the collation sequence is set to anything but Machine.  RESO...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QBXS,QA7O,QA7N,QAB7,QA4Q,QAO2,QDH6,QA56,QA55,QANA,QAA7,QAL3,QBE7,QBE6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Problems with SET COLLATE and Queries with Integer Fields</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 9, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176884</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, versions 3.0, 3.0b, 5.0, 5.0a
<LI>Microsoft Visual FoxPro for Macintosh, version 3.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Queries in Visual FoxPro that compare integer fields in the WHERE clause of
a SQL Select statement between two or more tables may not return all
matching records. This problem occurs when the collation sequence is set to
anything but Machine.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The workaround to this problem depends on which version of Visual FoxPro is
being used. Four workarounds are listed below:

<UL><LI>Use the SET COLLATE command prior to running the query to set the
   collation sequence to Machine. This works in all versions of Visual
   FoxPro.

<LI>Create an index on the integer fields before running the query. The
   program in the Steps To Reproduce Behavior section can be modified to
   accomplish this.  All records will then be returned.
<P>
   Follow each of the two CREATE CURSOR commands in the sample program with
   a command to create an index on the integer field. A sample follows:
<P>
<P><PRE>      CREATE CURSOR t1 (in1 i)
      INDEX ON in1 TAG in1
      CREATE CURSOR t2 (in2 i)
      INDEX ON in2 TAG in2
</PRE>
<LI>Use numeric, float, or double type fields without decimal places instead
   of integer fields although this may affect query performance. You will
   need to test query speed if query performance is a concern. This
   workaround works in all versions of Visual FoxPro.

<LI>If you are using Visual FoxPro 5.0 or later, use the LEFT or RIGHT JOIN
   syntax to join the tables rather than the WHERE clause.
<P>
   For example, using the code from the "Steps to Reproduce Behavior"
   section below, you can use the following queries to produce the correct
   results. Keep in mind that the cursors created in the program below are
   stripped down with only an integer field in each. The SELECT statements
   below may produce very different results on real data although they
   produce identical results on the test data.
<P>
<P><PRE>      SELECT * FROM t1 LEFT JOIN t2 ON t1.in1=t2.in2 INTO CURSOR t3
</PRE><P>
<P><PRE>      SELECT * FROM t1 RIGHT JOIN t2 ON t1.in1=t2.in2 INTO CURSOR t3
</PRE><P>
   Either statement above can replace the following line in the sample
   program below:
<P>
<P><PRE>      SELECT * FROM t1,t2 WHERE in1=in2 INTO CURSOR t3
</PRE><P>
   Unfortunately, the INNER JOIN syntax has the same problem as the SQL
   Select statement with the WHERE clause.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft is researching this problem and will post new information here in
the Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The SET COLLATE command, according to the Visual FoxPro Online help file,
"Specifies a collation sequence for character fields in subsequent indexing
and sorting operations". The command should not have any affect on numeric
or integer type fields or their comparison.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Run the following code in a program file in Visual FoxPro:
<P>
<P><PRE>      CLEAR ALL
      CLEAR
</PRE><P>
<P><PRE>      ** Store the current collation sequence to the variable yyy.
</PRE><P>
<P><PRE>      yyy=SET("collate")
</PRE><P>
<P><PRE>      ** Setting collate to General, a collation sequence that illustrates
      ** the problem.
</PRE><P>
<P><PRE>      SET COLLATE TO "General"
</PRE><P>
<P><PRE>      ** Create two cursors with one integer field in each
</PRE><P>
<P><PRE>      CREATE CURSOR t1 (in1 i)
      CREATE CURSOR t2 (in2 i)
</PRE><P>
<P><PRE>      ** Populate each cursor with 1000 records, inserting the loop counter
      ** into the integer field.
</PRE><P>
<P><PRE>      FOR x=1 TO 1000
      INSERT INTO t1 (in1) VALUES(x)
      INSERT INTO t2 (in2) VALUES(x)
      ENDFOR
</PRE><P>
<P><PRE>      ** The SELECT statement to join the two tables.
</PRE><P>
<P><PRE>      SELECT * FROM t1,t2 WHERE in1=in2 INTO CURSOR t3
</PRE><P>
<P><PRE>      ** Checking  _Tally to see how many records the query returned.
</PRE><P>
<P><PRE>      WAIT WINDOW STR(_Tally)+" records returned by the query"
</PRE><P>
<P><PRE>      ** Start of loop to determine what records are missing.
</PRE><P>
<P><PRE>      x=0
      SCAN
      x=x+1
      IF NOT in1=x
      WAIT WINDOW "Missing integer"+ STR(x)
      x=in1
      ENDIF
      ENDSCAN
</PRE><P>
<P><PRE>      ** Set collate back to its original setting
</PRE><P>
<P><PRE>      SET COLLATE TO yyy
</PRE>
<P><LI>The following table shows which records, out of the 1,000 in the test
   tables created above, are missing with the different collation settings
   and the platform (Windows vs. Macintosh.)
<P>
<PRE>      Collation Sequence     Platform           Missing Records
      ------------------     --------           ---------------
      Dutch,  General
      German, Iceland
      Nordan, Spanish
      Swefin                 Windows           17, 273, 529, 785

      Uniqwt                 Windows, Mac      46, 302, 558, 814

      Dutch,  General
      German
      Nordan, Spanish
      Swefin                 Mac               24, 280, 536, 792

   NOTE: The Iceland collation sequence is not available in Visual FoxPro
   for the Macintosh.

</PRE><P><LI>Change the command SET COLLATE TO "General" to SET COLLATE TO "Machine"
   in the program above and note that no records are missing. One thousand
   records are returned from the query.
<P>
</OL>There is a pattern to the missing records. For the problematic collation
sequences on the Windows platform, if the missing numbers are converted to
hexadecimal, they all end in 11. This pattern continues into at least the
next 1,000 records (2,000 total). On the Macintosh platform, the missing
numbers, when converted to hexadecimal all end in 18. However, as an
exception to the pattern, hexadecimal 518 or decimal 1304, does not turn up
missing when the number of records in the test tables is 2,000.
<P>
The Unique collation sequence's pattern is also different. Here the missing
numbers all end in E when converted to hexadecimal. If the number of
records used is increased to 2,000, hexadecimal numbers 42E (decimal 1070)
and 52E (decimal 1326) are not missing.
<P>
The problem described in this article is similar to another problem that
was fixed in Visual FoxPro 5.0a that was related to character fields not
integer fields.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../FOXPRO/Q164869.htm">Q164869</A></B>
   TITLE     : SET COLLATE TO "GENERAL" May Affect Search Results
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: SQL select collate<BR>
Keywords          : FxprgIntl FxprgSet FxprgSql VFoxMac vfoxwin<BR>
Version           : MACINTOSH:3.0b; WINDOWS:3.0,3.0b,5.0,5.0a<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 9, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling a User-Defined Function (UDF) from SQL SELECT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124402">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1994/12/29">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  This article shows by example how to add functionality to a Structured Query Language (SQL) SELECT command by calling a user-defined function (UDF) from the SELECT.  MORE INFORMATION  Assume that you want to create a query that will produce three o...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAHH,QAUD,QBXN,QALS,QAH4,QA2Q,QAY2,QAJX,QADR,QAGX,QAEF,QAHG,QAG2,QDMH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calling a User-Defined Function (UDF) from SQL SELECT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124402</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
<LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b, 2.6, 2.6a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by example how to add functionality to a Structured
Query Language (SQL) SELECT command by calling a user-defined function
(UDF) from the SELECT.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Assume that you want to create a query that will produce three or fewer
records for each state in the customer table.
<P>
Using the customer table in the tutorial directory and the code from the
"Sample Code" section of this article, you can specify how many records
from each state are to be included in the resulting query. The variable
max_match is set to 3, but as not all states have 3 or more records, the
resulting query won't have 3*49 records. This example will produce 116
records.
<P>
When max_match is set to 2, the result contains 86 records. When set to 1,
the result contains 49 records, which is the same number of records the
<PRE>'GROUP BY state' clause returns.

</PRE><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Create a file that contains the code listed in the "FoxPro 2.x Sample
   Code" or Visual FoxPro Sample Code sections of this article, and save it
   as MAIN.PRG.

<P><LI>From the FoxPro command line, type "DO main" without the quotation
   marks. Then press ENTER to see the results.
<P>
</OL><h3>FoxPro 2.x Sample Code</h3>
 
<P>
CLEAR
CLEAR ALL
SET DEFAULT TO SYS(2004)+"tutorial"
match=0
max_match=3
prev_state="None"
first_call=.T.
<P>
SELECT state FROM customer ORDER BY state INTO CURSOR tmp1
SELECT state FROM tmp1 WHERE mycount()
<P>
FUNCTION mycount
<P>
DO CASE
<P>
<PRE>CASE first_call                                   &amp;&amp; Condition  1
  first_call = .F.
</PRE></OL>CASE (state = prev_state) AND (match &lt; max_match) &amp;&amp; Condition  2
<PRE>  match = match + 1
CASE state != prev_state                          &amp;&amp; Condition  3
  prev_state = state
  match = 1
CASE match &gt;= max_match                           &amp;&amp; Condition  4
  RETURN .F.
</PRE>OTHERWISE
<PRE>  WAIT WINDOW "Untested condition occurred, result may not be correct!"
</PRE>ENDCASE
RETURN .T.
<P>
<P>
<P><h3>Visual Foxpro Sample Code</h3>
 
<P>
<PRE>   CLEAR
   CLEAR ALL
   SET DEFAULT TO SYS(2004)+"Samples\Data"
   match=0
   max_match=3
   prev_to_country="None"
   first_call=.T.

   SELECT to_country FROM orders ORDER BY to_country INTO CURSOR tmp1
   SELECT to_country FROM tmp1 WHERE mycount()

   FUNCTION mycount

   DO CASE

   CASE first_call                                         &amp;&amp; Condition  1
     first_call = .F.
   CASE (to_country=prev_to_country) AND (match&lt;max_match) &amp;&amp; Condition  2
     match = match + 1
   CASE to_country != prev_to_country                      &amp;&amp; Condition  3
     prev_to_country = to_country
     match = 1
   CASE match &gt;= max_match                                 &amp;&amp; Condition  4
     RETURN .F.
   OTHERWISE
     WAIT WINDOW "Untested condition occurred, result may not be correct!"
   ENDCASE
   RETURN .T.

</PRE><h3>What the Code Does</h3>
 
<P>
The first few lines in the Main program clear the environment and
initialize a few global variables to be used in the mycount() UDF. The
first SELECT command creates a sorted CURSOR (tmp1) for the second SELECT
command to use. The mycount() UDF is called once for each of the records in
the tmp1 CURSOR. Each time the UDF returns TRUE, the current record in tmp1
is included in the resulting query.
<P>
There are four conditions in the UDF:

<OL><P><LI>The first condition is only used once. It allows the first record in
   the tmp1 CURSOR to be tested. Without this condition, the first record
   in tmp1 would be ignored.

<P><LI>The second condition allows the second and third records for each state
   to be included.

<P><LI>The third condition allows the first record for each new state to be
   included. Please note that for this condition to work correctly, the
   table must be sorted.

<P><LI>The fourth condition causes the current record in tmp1 to be skipped.
   Please note that this condition is only checked when all the previous
   conditions evaluate to false. The Else is added for error checking.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VFoxWin 3.00 FoxWin 2.50 2.50a 2.50b 2.60 2.60a<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgSql<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

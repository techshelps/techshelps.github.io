

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use the ON ERROR Command and the Error Event </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130526">
<META NAME="KBModify" CONTENT="1996/04/30">
<META NAME="KBCreate" CONTENT="1995/05/22">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  In version 2.x of FoxPro, the ON ERROR command allowed the developer to code a routine to handle errors that occurred while an application was running. This functionality is still present in Visual FoxPro. In addition, Visual FoxPro has a new error...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAB4,QAO4,QAPN,QAH4,QAKP,QA7O,QBV8,QAGI,QAB9,QAJH,QA56,QA55,QAOE,QAM2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use the ON ERROR Command and the Error Event</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130526</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Visual FoxPro for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In version 2.x of FoxPro, the ON ERROR command allowed the developer to
code a routine to handle errors that occurred while an application was
running. This functionality is still present in Visual FoxPro. In addition,
Visual FoxPro has a new error event. This article demonstrates how to use
the ON ERROR command and the error event in a Visual FoxPro application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The error event allows error processing for a specific control, class, or
form to be encapsulated for that object. The error event overrides any ON
ERROR routine that is in effect.
<P>
An application can contain ON ERROR commands, error events, or a
combination of both.
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
In the following example, there might be an application-wide ON ERROR
routine, an error event for the form itself, and an error event for the
employee ID field itself.
<P>
The application handles payroll processing. A form in the application
allows you to input new employees into a table.

<OL><P><LI>At the beginning of the main program, add a command to handle generic
   errors that occur in the application:
<P>
   ON ERROR DO errhandler

<P><LI>In the form.error event, add code that will execute if the program is
   unable to open the Employee table in case the system administrator is
   packing or reindexing the file. The generic ON ERROR routine will be
   accessed if a different error occurs:
<P>
   LPARAMETERS nError, cMethod, nLine
   * File in use by another error
   IF nError = 108
<P><PRE>      =MESSAGEBOX("System maintenance is in effect." + ;
<PRE></PRE>                  "Please try again later")
   ELSE
      DO errhandler
   ENDIF

</PRE><P><LI>In the Employee ID field, add code to handle a duplicate value plus any
   other errors that may occur:
<P>
   LPARAMETERS nError, cMethod, nLine
   * Uniqueness of index has been violated
   IF nError = 1884
<P><PRE>      =MESSAGEBOX("This employee ID already exists on file")
      =TABLEREVERT()
</PRE>   ELSE
<P><PRE>      DO errhandler
</PRE>   ENDIF
<P>
</OL>As an alternative to using the ON ERROR routine, you can define an error
event within a class. Once the class is instantiated, the error event is
available to be called within the application. The syntax for calling the
class error event is:
<P>
<PRE>   oMyObject.Error

</PRE></OL>Using an error event within a class allows you to encapsulate specific
error processing within the class. The error event is inherited by any
subclasses defined from the parent class.
<P>
The error event is not inherited or called automatically from any controls
or objects defined within the class or form. For example, if an error event
is defined for a form and no error events are coded for individual
controls on that form, the error event will not be called if an error is
encountered in a text box or command button on the form. To call the form's
error event, code the following in each control's error event:
<P>
<PRE>   ThisForm.Error

</PRE>In this case, an ON ERROR command might be preferable to placing error
handling code in the error event of the form itself. Then each control
would not need to include code to invoke error processing.
<P>
When an error event is invoked, Visual FoxPro automatically passes the
number of the error that occurred, the name of the method where the error
occurred, and the line number of code on which it occurred. This
information should be passed to an ON ERROR program as parameters by using
the ERROR() and PROGRAM() functions. As an alternative, the AERROR()
function can be used within the routine to obtain this information.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 VFoxWin<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxprgClassoop<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

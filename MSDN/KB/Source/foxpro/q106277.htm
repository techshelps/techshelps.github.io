

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Refresh Array Values on a Screen </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106277">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1993/11/04">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; foxpro, crossnet, odbc">
<META NAME="Description" CONTENT="  When you use an array structure to display values on a screen with the @ ... GET command, you cannot change or rereference the subscript of the array to display different elements or values on the screen. The definition of the GET object is initial...">
<META NAME="Product" CONTENT="Visual FoxPro">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBE6,QBE7,QAXC,QAG9,QAKD,QAYL,QAH4,QAXB,QAPN,QAFR,QBXQ,QAUD,QASR,QAIU,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Refresh Array Values on a Screen</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106277</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FoxPro for Windows, versions 2.5, 2.5a, 2.5b
<LI>Microsoft FoxPro for MS-DOS, versions 2.0, 2.5, 2.5a, 2.5b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use an array structure to display values on a screen with the
@ ... GET command, you cannot change or rereference the subscript of
the array to display different elements or values on the screen. The
definition of the GET object is initialized in memory as the array
element based on the subscript that is first used.
<P>
You can display additional array elements. However, you must use two
arrays, one that holds the data and one that defines and holds the
contents of the GET objects.
<P>
Below are three programs that illustrate the difference. The first example
does not display the correct values of the array elements after you press
the PAGE DOWN key. The second example correctly displays the array elements
incrementally as you press the PAGE DOWN key. The third example shows how
to display array values by assigning the GET field to a variable that
references the array.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Program 1</h3>
 
<P>
In this program, the subscript for the array "myarray1" is incremented.
This is the array that is displayed on the screen with the @ ... GET
command. The procedure "pagedown" is called when the PAGE DOWN key is
pressed. This code does not display the correct values after the procedure
is called. The variable "x" is incremented, as can be observed in the Debug
window. However, the elements are not refreshed on the screen as expected.
<P>
<PRE>   PUBLIC x                          &amp;&amp; Declare variable x public.
   ON KEY LABEL pgdn DO pagedown     &amp;&amp; Define the PAGE DOWN key event.
   DIMENSION myarray1(6)             &amp;&amp; Create an array.
   myarray1(1) = "Blue  "            &amp;&amp; Initialize the array elements.
   myarray1(2) = "Green "
   myarray1(3) = "Red   "
   myarray1(4) = "Yellow"
   myarray1(5) = "Orange"
   myarray1(6) = "White "
   x=1                               &amp;&amp; Initialize subscript.
   @ 1,1 GET myarray1(x)             &amp;&amp; Define the GET objects.
   @ 2,1 GET myarray1(x+1)           &amp;&amp; Position on the screen.
   @ 3,1 GET myarray1(x+2)
   READ CYCLE                        &amp;&amp; Activate READ level.

   PROCEDURE pagedown                &amp;&amp; Procedure that is called when
      x=x+1                          &amp;&amp; the PAGE DOWN key is pressed.
      SHOW GETS                      &amp;&amp; Redisplay the GET objects.
   RETURN                            &amp;&amp; Return to the calling program.

</PRE><h3>Program 2</h3>
 
<P>
This second program works as expected when two arrays are used. The
subscript for the array that is displayed for the @ ... GET objects,
"myarray2", is never incremented. Instead, the original array
subscript, "myarray1", is incremented. The contents of "myarray2" are
reassigned the values from "myarray1" as the subscript is incremented
in the "pagedown" procedure. The values or elements of the array that
are displayed on the screen change each time the PAGE DOWN key is
pressed.
<P>
<PRE>   ON KEY LABEL pgdn DO pagedown     &amp;&amp; Define the PAGE DOWN key event.
   DIMENSION myarray1(6)             &amp;&amp; Create two arrays.
   DIMENSION myarray2(3)
   myarray1(1) = "Blue  "            &amp;&amp; Initialize the data array.
   myarray1(2) = "Green "
   myarray1(3) = "Red   "
   myarray1(4) = "Yellow"
   myarray1(5) = "Orange"
   myarray1(6) = "White "
   x=1                               &amp;&amp; Initialize subscript.
   myarray2(1)=myarray1(x)           &amp;&amp; Initialize the display array
   myarray2(2)=myarray1(x+1)         &amp;&amp; with values from data array.
   myarray2(3)=myarray1(x+2)
   @ 1,1 GET myarray2(1)             &amp;&amp; Define the GET objects.
   @ 2,1 GET myarray2(2)             &amp;&amp; Position on the screen.
   @ 3,1 GET myarray2(3)
   READ CYCLE                        &amp;&amp; Activate READ level.

   PROCEDURE pagedown                &amp;&amp; Procedure that is called when
      IF (x &lt;= 3)                    &amp;&amp; the PAGE DOWN key is pressed.
         x=x+1                       &amp;&amp; Increment the subscript.
         myarray2(1)=myarray1(x)     &amp;&amp; Assign display array values
         myarray2(2)=myarray1(x+1)   &amp;&amp; from data array.
         myarray2(3)=myarray1(x+2)
         SHOW GETS                   &amp;&amp; Redisplay the GET objects.
      ELSE
         WAIT WINDOW "End of Array"  &amp;&amp; Message to user.
      ENDIF
   RETURN                            &amp;&amp; Return to the calling program.

</PRE><h3>Program 3</h3>
 
<P>
When you create the GET field for the screen, assign it to a variable that
references the array, instead of assigning it to the array itself. Issuing
a SHOW GETS command updates the variable based on the array.
<P>
For example, use the following screen setup:
<P>
<PRE>   DIMENSION myarray(3)
   myarray(1) = 'Apples'
   myarray(2) = 'Bananas'
   myarray(3) = 'Cantaloupe'
   x=3
   vararray = myarray(x)

   GET FIELD = vararray

</PRE>Change the subscript for the array by simply incrementing x up or down.
Then set vararray = myarray(x) and issue a SHOW GETS command to update the
GET field.
<P>
NOTE: This example does not take into account how to allow an update to the
GET field or how to add elements to the array.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about arrays, see the "Developer's Guide," version
2.5, pages D9-1 through D9-14.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: FoxDos FoxWin 2.00 2.50 2.50a<BR>
2.50b<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FxtoolDebug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

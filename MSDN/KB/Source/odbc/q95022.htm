

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: ODBC Transaction Isolation Levels </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q95022 ">
<META NAME="KBModify" CONTENT="1997/03/19">
<META NAME="KBCreate" CONTENT="1993/01/31">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; odbc">
<META NAME="Description" CONTENT="  ODBC provides five levels of transaction isolation. This article discusses the concept of transaction isolation levels and the relation between ODBC and ANSI SQL2 isolation levels.  MORE INFORMATION  Transaction isolation level refers to the degree...">
<META NAME="Product" CONTENT="ODBC">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAJQ,QA9E,QA5V,QAA3,QAJZ,QAH6,QABM,QBXJ,QBVV,QBFN,QAYZ,QABT,QBXS,QA4F,QAWF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: ODBC Transaction Isolation Levels</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q95022 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Open Database Connectivity, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
ODBC provides five levels of transaction isolation. This article
discusses the concept of transaction isolation levels and the relation
between ODBC and ANSI SQL2 isolation levels.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Transaction isolation level refers to the degree to which multiple
interleaved transactions are prevented from interfering with each
other in a multiuser database system. Ideally, one would like to have
"serializable" transactions - that is, the interleaved execution of
any set of concurrent transactions will produce the same effect as
some (unspecified) serial execution of those same transactions. The
ANSI SQL 2 standard defines three specific ways in which the
serializability of a transaction may be violated (with the implication
that these are the only permitted violations):

<OL><P><LI>Dirty Read: Transaction T1 modifies a row. T2 then reads the row.
   Now T1 performs a rollback - so, T2 has seen a row that never
   really existed.

<P><LI>Non-repeatable Read: T1 retrieves a row; then T2 updates that row
   and T1 retrieves the "same" row again. T1 has now effectively
   retrieved the "same" row twice and has seen two different values
   for it.

<P><LI>Phantoms: T1 reads a set of rows that satisfy certain search
   conditions. T2 then insert one or more rows that satisfy the same
   search condition. If T1 repeats the read, it will see rows that did
   not exist previously - "phantoms".
<P>
</OL>These three phenomena are referred to as P1, P2 and P3, respectively.
The various isolation levels are defined by SQL2 in terms of which of
these three violations of serializability they permit. They are:

<OL><P><LI>READ_UNCOMMITTED - Permits P1, P2 and P3.
</OL>2. READ_COMMITTED - Permits P2 and P3. Does not permit P1.
3. REPEATABLE_READ - Permits P3. Does not permit P1 and P2.
4. SERIALIZABLE - Does not permit any of P1, P2 and P3.
<P>
ODBC defines five isolation levels: SQL_TXN_READ_UNCOMMITTED,
SQL_TXN_READ_COMMITTED, SQL_TXN_REPEATABLE_READ, SQL_TXN_SERIALIZABLE,
and SQL_TXN_VERSIONING. The first four correspond to ANSI isolation
levels 1-4 respectively. SQL_TXN_VERSIONING provides SERIALIZABLE
transactions, but does so without a significant impact on concurrency.
<P>
Transaction isolation is achieved by locking protocols. The various
tables are or parts thereof are locked so that two writers cannot
access it at the same time, or preventing reader access when writing is
being done, and so on. One of the side effects of this is to
drastically reduce concurrency. Typically, isolation levels 3 and 4
are achieved by locking protocols which drastically reduce
concurrency. SQL_TXN_VERSIONING refers a non-locking way of achieving
levels 3 and 4, thereby increasing concurrency. An example of this is
Oracle's Read Consistency isolation level.
<P>
It is typical of many database systems to provide a lower level of
isolation by default and provide explicit concurrency control
facilities to achieve serializable transactions. For example,
Sybase/Microsoft SQL Server provides Level 2 locking (READ_COMMITTED)
by default. But using the HOLDLOCK keyword within a transaction will
guarantee serializability. Similarly, IBM's DB/2 provides two
isolation levels called CS (Cursor Stability) which corresponds to
READ_COMMITTED and RR (repeatable read) which corresponds to
SERIALIZABLE. However, it provides a LOCK TABLE statement which allows
users operating at CS level to achieve serializability of they wanted
to.
<P>
Because of these differences in implementations, an interoperable ODBC
application must use SQLSetConnectOption to set the transaction
isolation level, instead of using the various implementation defined
locking levels.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 1.00<BR>
Keywords            : kbusage<BR>
Version             : 1.00<BR>
Platform            : MS-DOS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: How to Use the SQL_DRIVER_HSTMT Option in SQLGetInfo() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101525">
<META NAME="KBModify" CONTENT="1996/09/09">
<META NAME="KBCreate" CONTENT="1993/07/15">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; odbc">
<META NAME="Description" CONTENT="...">
<META NAME="Product" CONTENT="ODBC">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAU9,QAGI,QAH6,QAD7,QAIF,QAJH,QAH7,QA9E,QAYV,QAPN,QAH5,QAGU,QBVV,QAGR,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: How to Use the SQL_DRIVER_HSTMT Option in SQLGetInfo()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 9, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101525</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h2>SUMMARY</h2>
 
<P>
An ODBC application uses handles in all its calls to the driver. These
calls are typically made first to the Driver Manager which then routes
them to the appropriate driver. However, the handles that are passed
between the application and the Driver Manager are not the same as the
handles passed between the Driver Manager and the driver. That is why
the SQLGetInfo() ODBC API function has three fInfoTypes,
SQL_DRIVER_HENV, SQL_DRIVER_HDBC and SQL_DRIVER_HSTMT, which enable an
application to get the handles used by the driver. This article
discusses how such handles are managed by the Driver Manager and how
they can be used by an application to call a driver directly.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The role of the Driver Manager (DM) as discussed in the ODBC SDK
"Programmer's Reference" is to load drivers, provide entry points to
an application for eventual calls to the driver, to validate arguments
passed by an application, and to check state transitions. To deliver
this functionality, the DM uses internal structures to manage all
connections and statements used by an application.
<P>
For example, when an application calls SQLAllocStmt() with the address
of a statement handle, the DM allocates memory to manage this new
hstmt. It then stores the far pointer to the DM-allocated memory in
the statement handle of the application. The DM then calls
SQLAllocStmt() in the Driver and uses a different handle variable to
pass to the Driver. The Driver allocates memory to manage the
statement, and can store its 32-bit pointer in the handle address
passed to it by the DM. The following example demonstrates a
simplified version of this process. It does not show how the DM
associates an application's handle (hstmtApp) with the driver's handle
(hstmtDrv). Also note that a similar process applies to the hdbc and
henv handles.
<P>
<PRE>Application                DM                               Driver
</PRE> 
<PRE>SQLAllocStmt      ----&gt; *hstmtApp =
(hdbc, &amp;hstmtApp)       GlobalAlloc(memory)
                        SQLAllocStmt(hdbc, &amp;hstmtDrv)---&gt;
                                                         *hstmtDrv=
                                                         GlobalAlloc()

SQLExecDirect     ----&gt; Map hstmtApp to hstmtDrv.
(hstmtApp, "select")    SQLExecDirect                ---&gt;To Driver
                        (hstmtDrv, "select")

SQLGetInfo        ----&gt;
</PRE>(SQL_DRIVER_HSTMT)&lt;---- DM returns hstmtDrv
<P>
<PRE>// Windows API calls
</PRE>hLib = GetModuleHandle("driver.dll")
procPvtDriverFunc = GetProcAddress(hLib, "PvtDriverFunc")
<P>
<PRE>// Call to ODBC Driver
</PRE>*procPvtDriverFunc
(hstmtDrv,"do something")-------------------------------&gt;To Driver
<P>
An application, after connecting to a data source, may want to bypass
the DM and communicate directly with the driver. This is not
recommended because it assumes a good deal of familiarity between the
application and the driver, and thus impedes interoperability.
<P>
In cases where this needs to be done, an application can first call
the ODBC SQLGetInfo() function and pass one of the following values
for the fInfoType argument depending on what driver handle it wants to
retrieve: SQL_DRIVER_HENV, SQL_DRIVER_HDBC, SQL_DRIVER_HSTMT. When
using 1.0 ODBC drivers, the application can then make the
GetModuleHandle() call (For drivers that comply with the ODBC 2.0
specification, the application can call SQLGetInfo [SQL_DRIVER_HLIB]
instead of GetModuleHandle to get the handle of the Driver DLL) and
the GetProcAddress() call to the Windows API if does not already have
the handle to the loaded driver DLL and the entry points into the
driver respectively. Now, the application can call the driver directly
with these ODBC driver handles and bypass the Driver Manager.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage<BR>
KBSubcategory:
<P>

Additional reference words: 1.00
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 9, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

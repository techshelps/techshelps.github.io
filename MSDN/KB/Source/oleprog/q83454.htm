

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Meaning of OLE Notifications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83454 ">
<META NAME="KBModify" CONTENT="1995/02/17">
<META NAME="KBCreate" CONTENT="1992/04/13">
<META NAME="Keywords" CONTENT="kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  An OLE server application sends the following messages to an OLE client application's callback function: OLE_CHANGED, OLE_CLOSED, OLE_SAVED, and OLE_RENAMED. These messages inform the client that an embedded object was changed, closed, saved to dis...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QARL,QA8W,QAJH,QA9Q,QAH6,QBPG,QAY5,QBHQ,QAPN,QAUD,QAGB,QAGI,QAW6,QAXB,QAH2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Meaning of OLE Notifications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83454 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An OLE server application sends the
following messages to an OLE client application's callback function:
OLE_CHANGED, OLE_CLOSED, OLE_SAVED, and OLE_RENAMED. These messages
inform the client that an embedded object was changed, closed, saved
to disk, or saved to disk with a new name, respectively.
<P>
Although the client application may receive other notification
messages, this discussion focuses on the notifications sent by the
server and their effects on the client application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The server application sends an OLE_CLOSED notification when it closes
the server document and updates changes to the client. The OLE_CLOSED
notification applies both to embedded objects and to linked objects.
This notification might have been better named OLE_CLOSED_AND_SAVED
because sending an OLE_CLOSED notification causes the server
application's GetData method to be called; doing so obtains the latest
data. Therefore, a server application should send an OLE_CLOSED
notification only when the user wants to close the document and update
any changes. Note that a client application will never receive an
OLE_CLOSED notification for linked objects because the OLE Libraries
intercept this notification. The client application for an embedded
object will always receive the OLE_CLOSED notification.
<P>
The client application will receive an OLE_CLOSED notification for an
embedded object regardless of whether the server sends the
notification to the client application's callback function. The OLE
Libraries maintain parallel internal OLECLIENT structures (and
parallel notification callback functions), which intercept any
notification sent by the server. Therefore, the client and server
applications never communicate directly with each other; all
interaction proceeds through the OLE libraries. It is interesting to
note the differences between the following two scenarios: If the
server calls the OleRevokeServerDoc function, the client receives an
OLE_CLOSED notification. However, if the server sends an OLE_CLOSED,
then calls OleRevokeServerDoc, the client receives two notifications,
OLE_CHANGED followed by OLE_CLOSED.
<P>
When the user chooses Update from the File menu, an OLE server sends
an OLE_SAVED notification when the server updates an object. The
server sends this notification by calling the OleSavedServerDoc
function. The client application receives an OLE_SAVED notification
whenever the server calls OleSavedServerDoc.
<P>
A server application sends an OLE_CHANGED notification only for linked
objects. However, a client application may receive an OLE_CHANGED
notification for an embedded object. The server should send an
OLE_CHANGED notification for a link whenever a linked object is
modified in the server. In this scenario, the client application will
receive the OLE_CHANGED notification.
<P>
A server sends an OLE_RENAMED notification when the user renames the
document to which the client is linked. The server sends this
notification by calling the OleRenameServerDoc function. The
OLE_RENAMED notification implies OLE_CHANGED.
<P>
The client application's callback function may receive two other
notifications: OLE_QUERY_PAINT and OLE_QUERY_RETRY.
<P>
The OLE client-side library sends an OLE_QUERY_PAINT notification only
if the object drawn through OleDraw uses a metafile for its
presentation. When the presentation is a metafile, after the library
plays each record of the metafile, it sends an OLE_QUERY_PAINT
message. If the metafile contains only one record, the client
application does NOT receive an OLE_QUERY_PAINT notification because
the image is completely drawn after playing the first record.
<P>
Processing the OLE_QUERY_PAINT notification allows the client
application to interrupt playing a large metafile. If the client
returns FALSE in response to an OLE_QUERY_PAINT notification, the OLE
libraries will discontinue playing the metafile. An application will
typically return TRUE in response to an OLE_QUERY_PAINT notification
to allow painting to continue uninterrupted. If an application must
perform processing while a metafile is rendered, it can do so in
response to the OLE_QUERY_PAINT notification. Please note that this
does NOT imply that the client application can enter a message
dispatch loop; doing so is not allowed in a notification callback
function.
<P>
The OLE client-side library sends an OLE_QUERY_RETRY notification when
the server application notifies the OLE server library that the server
is busy. If a client application returns TRUE in response to this
notification, the OLE libraries will continue the current operation.
If the client application returns FALSE, the OLE libraries will cancel
the pending operation.
<P>
By processing this notification, a client application can inform the
user that the server is busy and allow the user to wait or to cancel
the operation. Typically, a client application implements a retry
limit under which it will cancel an operation after a set number of
retry attempts. Because retry limits differ based on the server
applications involved, only experimentation will disclose the correct
number; however, 10-15 is probably a reasonable starting place.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 1.00<BR>
KBCategory: kbole kbprg<BR>
KBSubcategory: LeoneCliMisc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: OLE Automation BSTR Caching &amp; Finding Memory Leak Sources </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139071">
<META NAME="KBModify" CONTENT="1997/12/10">
<META NAME="KBCreate" CONTENT="1995/11/02">
<META NAME="Keywords" CONTENT="LeTwoAto">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  OLE Automation caches the space allocated for BSTR strings. This may cause IMallocSpy to attribute memory leaks to the wrong BSTR user in an application that uses OLE Automation's BSTR strings. The correct source of the leak can be found by disabli...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA9Q,QA2K,QDL9,QBWO,QBWN,QABH,QAR4,QABI,QBF0,QAAP,QBW6,QBXS,QAYL,QAK6,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: OLE Automation BSTR Caching &amp; Finding Memory Leak Sources</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139071</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft OLE libraries included with:
   - Microsoft Windows NT version 3.51, 4.0, 5.0
   - Microsoft Windows 95
   - Microsoft Windows 98
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
OLE Automation caches the space allocated for BSTR strings. This may
cause IMallocSpy to attribute memory leaks to the wrong BSTR user in an
application that uses OLE Automation's BSTR strings. The correct source of
the leak can be found by disabling OLE Automation's caching by using the
debug version of the Oleaut32.dll file and by setting the environment
variable OANOCACHE=1 before running the application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
OLE Automation caches the space allocated for BSTRs. This speeds up the
SysAllocString/SysFreeString sequence. However this may cause IMallocSpy
to attribute leaks to the wrong memory user because it is not aware of
the caching done by OLE automation. For example, if the application
allocates a BSTR and frees it, the freed block of memory is put into the
BSTR cache by OLE Automation. If the application then allocates another
BSTR, it may get the free block from the cache. If the second BSTR
allocation is not freed, IMallocSpy will attribute the leak to the first
allocation of the BSTR. The correct leak source (the second allocation)
can be determined by disabling the BSTR caching done by OLE Automation.
This can be done by using the debug version of Oleaut32.dll and by
setting environment variable OANOCACHE=1 before running the application.
<P>
It is also important to check for leaks at the correct time to prevent
false leak reports caused by the IMallocSpy implementation checking for
leaks too soon. Users of memory allocated by IMalloc can legitimately hold
on to it after OleUninitialize. For example, the OLE Automation BSTR cache
is deleted at the Oleaut32.dll file's DLL_PROCESS_DETACH time. This means
that checking for leaks immediately after OleUninitialize may cause false
reports of memory leaks. A good place to check for memory leaks is in the
destructor of a static instance of a class that implements IMallocSpy. The
destructor of this static instance is called after the DllMain of each of
the DLLs linked by the application is called with  DLL_PROCESS_DETACH.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: memory leak<BR>
Keywords          : LeTwoAto<BR>
Technology        : kbole<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

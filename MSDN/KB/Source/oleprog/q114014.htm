

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sizing OLE 2.0 Objects and OLEMISC_RECOMPOSEONRESIZE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114014">
<META NAME="KBModify" CONTENT="1995/05/17">
<META NAME="KBCreate" CONTENT="1994/04/21">
<META NAME="Keywords" CONTENT="kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  Some server applications want to have their presentation displayed differently based on the size of the object in the container application. For example, if version 6.0 of Microsoft Word For Windows is used as a server application, Word for Windows...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAW6,QAPN,QAGI,QBXS,QAXB,QALS,QALW,QDL9,QBWO,QBWN,QAJH,QAH4,QABH,QABI,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Sizing OLE 2.0 Objects and OLEMISC_RECOMPOSEONRESIZE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114014</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE Libraries for Windows and Win32s, versions 2.0 and 2.01
<LI>Microsoft OLE Libraries, included with:
<P><PRE>    - Microsoft Windows NT, versions 3.5 and 3.51
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Some server applications want to have their presentation displayed
differently based on the size of the object in the container application.
For example, if version 6.0 of Microsoft Word For Windows is used as a
server application, Word for Windows will rewrap the text of an object
based on the object size in the container. This is accomplished in a server
application by setting the OLEMISC_RECOMPOSEONRESIZE bit in the MiscStatus
bits.
<P>
However, for setting the OLEMISC_RECOMPOSEONRESIZE bit to work, the
container application must properly implement its sizing code by honoring
the OLEMISC_RECOMPOSEONRESIZE bit returned by IOleObject::GetMiscStatus().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To properly honor the OLEMISC_RECOMPOSEONRESIZE bit, the container needs to
check the MiscStatus bits by calling IOleObject::GetMiscStatus(). Once the
status bits are retrieved, the container can then check to see if the
OLEMISC_RECOMPOSEONRESIZE bit is set. If the bit is set, then the server
wishes to be notified every time the object size changes in the container.
To inform the server application the object has been resized, the container
needs to call IOleObject::SetExtent() to set the new size of the object.
However, IOleObject::SetExtent() only works while the object is in the
running state. The container application should check if the object is
already in a running state by calling the OleIsRunning() function. This is
important because the container needs to restore the state of the object
once the operation is complete. If the object was not in the running state,
OleRun() needs to be called such that the IOleObject::SetExtent() call
takes effect. At this point the IOleObject::SetExtent() method call can be
made, and should be followed with a call to IOleObject::Update() to update
the presentation of the object in the container. Finally, if this section
of code ran the server, then it needs to transition the server back to the
loaded state by calling IOleObject::Close().
<P>
NOTE: Some container applications may want to come up with a more elaborate
scheme for keeping servers running. Starting and stopping servers is an
expensive process, so the container application might come up with a way to
keep the last X (X being application specific) servers held in the running
state.
<P>
The following code is a simple implementation for the container:
<P>
<PRE>// Pass this function a pointer to the object's IOleObject interface,
// the Aspect that has changed size, and the new size of the object.
// returns TRUE if the object had the Recompose on Resize bit set.

</PRE>BOOL fChkResize(LPOLEOBJECT lpObject, DWASPECT dwAspect, LPSIZEL lpsizel)
{
<PRE>    DWORD dwStatus = 0; // For the status bits
    BOOL fShutdown = FALSE;  // don't shut the object down
    BOOL retval = FALSE;

    // Get the status bits.
    lpObject-&gt;GetMiscStatus(DVASPECT_CONTENT, &amp;dwStatus);

    // is recompose on resize set?
    if ( dwStatus &amp; OLEMISC_RECOMPOSEONRESIZE )
        {
        retval = TRUE;  // the bit was set

        // if the object isn't running, start the object and remember.
        if (!OleIsRunning(lpObject)
            {
            OleRun(lpObject);
            fShutdown = TRUE;
            }

        // set the extent
        lpObject-&gt;SetExtent(dwAspect, lpsizel);

        // update the cache
        lpObject-&gt;Update();

        // go back to the loaded state only if the object was in the
        // loaded state upon entry to this function.
        if (fShutdown)
            lpObject-&gt;Close(OLECLOSE_SAVEIFDIRTY);
        }
    return retval;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.01 3.50 4.00<BR>
KBCategory: kbole kbprg<BR>
KBSubcategory: LeTwoPrs<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

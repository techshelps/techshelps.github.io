

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Meanings and Uses of OLE Rendering Options </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83660 ">
<META NAME="KBModify" CONTENT="1995/02/17">
<META NAME="KBCreate" CONTENT="1992/04/16">
<META NAME="Keywords" CONTENT="kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  During the process of creating an OLE object, an application must specify a rendering option. This article discusses each of the three rendering options: olerender_draw, olerender_format, and olerender_none.  MORE INFORMATION  The olerender_draw Op...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAPN,QAW6,QBV8,QARL,QAIF,QAJH,QA9Q,QAY5,QAJM,QAYY,QBWC,QBVV,QA6A,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Meanings and Uses of OLE Rendering Options</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83660 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
During the process of creating an OLE object, an application must specify a
rendering option. This article discusses each of the three rendering
options: olerender_draw, olerender_format, and olerender_none.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>The olerender_draw Option</h3>
 
<P>
The OLE client library manages the presentation data. The client
application calls the OleDraw function to display the object. This
option is the simplest and most common rendering option. It imposes
the least amount of overhead on an application.
<P>
This rendering option allows an object handler to provide rendering
services for objects of its class. If the client application does not
call OleDraw, the object handler cannot intercept the call to the Draw
method.
<P>
<P><h3>The olerender_format Option</h3>
 
<P>
The client application manages the presentation data. The client must
call the OleGetData function to obtain data in a presentation format
(CF_BITMAP, CF_DIB, or CF_METAFILEPICT) and render the image. If the
application obtains a metafile, the application can call the
PlayMetaFile function or enumerate the records from the metafile and
process them individually.
<P>
Using the olerender_format option prevents an object handler from
fully participating in rendering an object because handlers typically
handle the OLEOBJECT::Draw method. When a client specifies
olerender_format, the client application typically draws the object
manually as described above, bypassing the call to the OleDraw
function. Because the client does not call OleDraw, this method also
bypasses any special rendering provided by a handler.
<P>
<P><h3>The olerender_none Option</h3>
 
<P>
This object has no presentation data. The client application calls the
OleGetData function to retrieve information only for OwnerLink and
ObjectLink data formats. Any presentation data used by the object is
defined by the client and must be drawn by the client. This option is
most useful for implementing hyperlinks.
<P>
As with the olerender_format option, using olerender_none prevents
object handlers from rendering the object. However, because this
option implies that there is no presentation data, there should be
nothing for the handler to render.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 1.00<BR>
KBCategory: kbole kbprg<BR>
KBSubcategory: LeoneCliRender<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

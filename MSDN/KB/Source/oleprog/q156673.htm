

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: HELSVC.EXE Implements an OLE Server in a Service </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156673">
<META NAME="KBModify" CONTENT="1997/05/22">
<META NAME="KBCreate" CONTENT="1996/09/27">
<META NAME="Keywords" CONTENT="kbsample LeTwoAto LeTwoCom">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  The HELSVC sample is a simple OLE Automation server implemented in a service called  Hello OLE Server Service.   The following file is available for download from the Microsoft Software Library:   ~ Helsvc.exe  For more information about downloadin...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACK,QAPN,QAB5,QAW6,QBWS,QBS0,QBVV,QA9Q,QBWP,QAEF,QAA1,QARL,QAPF,QBTX,QABI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: HELSVC.EXE Implements an OLE Server in a Service</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156673</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft OLE libraries included with:
   - Microsoft Windows NT version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The HELSVC sample is a simple OLE Automation server implemented in a
service called "Hello OLE Server Service."
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Helsvc.exe">Helsvc.exe</A> <I>(size: 39742 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from
               Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
This server implements one application object with a dual interface. It
also registers the application object in the RunningObjectTable so that
any client can access it. The sample includes a Visual Basic client that
can control the server. The sample does not use any framework such as MFC,
ATL, etc.
<P>
<P><h3>Implementation Notes</h3>
 
<P>
NT 4.0 removes the limitations of using OLE in services that are described
in the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE_ID: <B><A HREF="../OLEPROG/Q149571.htm">Q149571</A></B>
   TITLE     : Using OLE in Services in Windows NT 3.51

</PRE>For an overview of implementing an OLE server in a service in NT 4.0 and
later versions, read the following topics in the Win32 SDK Online
documentation:
<P>
<PRE>   "LocalService"
   "Installing as a Win32 Service or User Account"

</PRE>To find these topics, query using the LocalService keyword.
<P>
When the service starts, it registers a multiple-use class factory. It then
registers an object in the Running Object Table using
ROTFLAGS_ALLOWANYCLIENT, which allows clients in any security context to
bind to the object using IRunningObjectTable::GetObject or GetActiveObject
(if the appropriate permissions are specified in the server's access
permissions using the DCOMCNFG tool).
<P>
If ROTFLAGS_ALLOWANYCLIENT is not used in the ROT registration, only
clients in the same security context as the server will be able to bind to
it. RegisterActiveObject currently does not support
ROTFLAGS_ALLOWANYCLIENT, so the sample provides a new function,
MyRegisterActiveObject, which supports this flag.
<P>
IRunningObjectTable::Register supports this flag. Registration using this
flag requires a registry entry similar to the following to prevent a
CO_E_WRONG_SERVER_IDENTITY error:
<P>
<PRE>   [HKEY_CLASSES_ROOT\APPID\helloservice.exe]
   "APPID"="{0bf52b15-8cab-11cf-8572-00aa00c006cf}"

</PRE>Because of a bug in NT 4.0, Build 1381, registration using
ROTFLAGS_ALLOWCLIENT is always weak, even if
ROTFLAGS_REGISTRATIONKEEPSALIVE is also specified. As a consequence, the
ROT will release its reference on the object when the last client releases
its reference and clients that are launched later will not be able to bind
to the running object. A workaround is for the server to place a strong
lock on the registered object using CoLockObjectExternal while it is in the
ROT.
<P>
NOTE: The bug mentioned in the paragraph above has been fixed in NT 4.0,
Service Pack 2.
<P>
See the .reg file for information of the registry entries used by the
service.
<P>
Many services are debugged by running them as console applications in the
interactive user's identity. For example, this sample service can be
debugged by running it as follows:
<P>
<PRE>   helloservice -debug

</PRE>Because the service is already registered to run in a different identity
(configurable by the Services control panel applet), OLE will fail
CoRegisterClassObject and
IRunningObjectTable::Register(ROTFLAGS_ALLOWANYCLIENT) by returning
CO_E_WRONG_SERVER_IDENTITY to enforce security and to prevent malicious
servers from spoofing the server. To debug by running in the interactive
user's identity, make the following changes in the server's registry
entries to prevent these failures:

<OL><P><LI>To prevent CoRegisterClassObject failure, remove the following named
   value:
<P>
   [HKEY_CLASSES_ROOT\APPID\{0bf52b15-8cab-11cf-8572-00aa00c006cf}]
   LocalService"="HelloOleServerService"

<P><LI>To prevent IRunningObjectTable::Register(ROTFLAGS_ALLOWANYCLIENT)
   failure, do the following:
<P>
   Remove the following named value:
<P>
   [HKEY_CLASSES_ROOT\APPID\{0bf52b15-8cab-11cf-8572-00aa00c006cf}]
   "LocalService"="HelloOleServerService"
<P>
   and then add the following named value:
<P>
   [HKEY_CLASSES_ROOT\APPID\{0bf52b15-8cab-11cf-8572-00aa00c006cf}]
   "RunAs"="Interactive User"
<P>
   Make sure that you restore the modified registry entries after
   debugging.
<P>
</OL><h3>To Compile</h3>
 
<P>
NT 4.0 or later is required. To compile, type:
<P>
<PRE>   nmake

</PRE></OL>To compile a version without debug information and without message boxes
that are displayed to indicate progress or failure, type:
<P>
<PRE>   nmake DEBUG=0

</PRE><h3>To Run</h3>
 

<OL><P><LI>Change hello.reg to provide the full path of helloservice.tlb.

<P><LI>Register hello.reg in the registration database by double-clicking it.

<P><LI>Type helloservice -install to install the service. (NOTE: This will not
   run the service.)

<P><LI>Add INTERACTIVE to the DefaultAccessPermissions using the DCOMCNFG.EXE
   tool in the NT system32 directory. Make sure that INTERACTIVE is
   included in the DefaultLaunchPermissions. This allows the Visual Basic
   client in the interactive user's security context to access the service.

<P><LI>Use the Visual Basic file, vb.vbp, to control the object. Press the
   CoCreateInstance button to launch the service if required, and to create
   the object. Use the GetObject button to bind to a running object.
   GetObject can be used only if the service is already running. Use the
   GetMessage and SetMessage buttons to access the HelloMessage property,
   the SayHello button to invoke the SayHello method, and the CloseService
   button to invoke the Quit method to shut down the service. The service
   can also be configured using the Services control panel applet to run
   automatically when the system starts. It will be listed as “Hello OLE
   Server Service” in the Services applet.

<P><LI>helloservice -remove can be used to uninstall the service.
<P>
</OL><h3>Files</h3>
 
<P>
SERVICE.C &amp; SERVICE.H have the code to create a service and are copied from
the SERVICE sample in the WIn32 SDK. (See the comments in service.h for
information on command line arguments accepted by the service.)
<P>
MAIN.CPP and HELLO.CPP implement the automation object.
<P>
HELLOCF.CPP implements the class factory.
<P>
HELLO.ODL is the object description language that describes the property
and methods that HELLO exposes.
<P>
TLB.H is the header file generated by MIDL.
<P>
MAKEFILE is the Makefile for project.
<P>
HELLO.REG is the Registry information.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: COM DCOM<BR>
Keywords            : kbsample LeTwoAto LeTwoCom<BR>
Technology          : kbole kbatl<BR>
Version             : 4.0<BR>
Platform            : NT WINDOWS<BR>
Resolution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

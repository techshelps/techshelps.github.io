

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Synch OLE Call Fails in Inter-Process/Thread SendMessage </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131056">
<META NAME="KBModify" CONTENT="1996/08/08">
<META NAME="KBCreate" CONTENT="1995/06/02">
<META NAME="Keywords" CONTENT="kbprg kbole kbprb">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  A synchronous OLE call made by the recipient of an inter-process/inter- thread SendMessage fails with RPC_E_CANTCALLOUT_ININPUTSYNCCALL.  CAUSE =====  The cause is discussed in detail in the  More Information  section of this article.  RESOLUTION  ...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QA9Q,QAIF,QDL9,QBWO,QBWN,QAY2,QAJZ,QAR2,QBWQ,QBVV,QA4P,QAO4,QA2T,QAV1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Synch OLE Call Fails in Inter-Process/Thread SendMessage</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 8, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131056</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE Libraries for Windows and Win32s, version 2.03
<LI>Microsoft OLE libraries included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.5
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A synchronous OLE call made by the recipient of an inter-process/inter-
thread SendMessage fails with RPC_E_CANTCALLOUT_ININPUTSYNCCALL.
<P>
<P><h2>CAUSE</h2>
 
<P>
The cause is discussed in detail in the "More Information" section of this
article.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use PostMessage instead of an inter-process/inter-thread SendMessage.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
See the beginning of chapter 13 in the OLE 2 Programmer's Reference Volume
1 for the categories of OLE calls. An understanding of these categories is
required for this article.
<P>
The majority of OLE calls are synchronous calls. A synchronous call to a
different process yields to that process and waits for a reply from that
process. In addition, OLE has input-synchronized calls that relate to the
inplace-activation interfaces. Input-synchronized calls are implemented
using an inter-process/inter-thread SendMessage.
<P>
16-bit Windows doesn't allow a task to yield while in an inter-
process/inter-thread SendMessage because a system deadlock could occur. The
deadlock occurs because a message for the sender could be present at the
top of the shared system queue, and this prevents other tasks, including
the recipient of the SendMessage, from retrieving their messages from the
system queue until the sender does. The sender cannot retrieve its message
because it is waiting for the inter-process/inter-thread SendMessage to
return.
<P>
In 32-bit Windows, each process has its own system queue and this
architecture normally prevents deadlock problem from occurring. However,
when one process is inplace active in another process's window, the system
queues of the two processes are synchronized as in 16-bit windows, so the
deadlock could occur. To prevent this, OLE stops synchronous OLE calls from
being made while the caller is the recipient of an input-synchronized call.
<P>
OLE determines if the caller of the synchronous call is a recipient of
an input-synchronized call by using the InSendMessage() API. This broad
check prevents a synchronous call from being made if the caller is
currently a recipient of any inter-process/inter-thread SendMessage.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.0 2.00 Thread<BR>
KBCategory: kbprg kbole kbprb<BR>
KBSubcategory: LeTwoArc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 8, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

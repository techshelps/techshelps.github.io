

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing Structures in OLE Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122289">
<META NAME="KBModify" CONTENT="1996/08/08">
<META NAME="KBCreate" CONTENT="1994/11/01">
<META NAME="Keywords" CONTENT="kbole kbprg kbcode kbwebcontent">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  OLE Automation does not allow structures to be passed as parameters. Automation servers that work with standard controllers like Visual Basic can model a structure as an automation object or pass simple structures as a safearray of VT_UI1. Automati...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QA2K,QAH6,QAH7,QAD7,QAW6,QAIC,QA9Q,QBVV,QBC9,QBC8,QANO,QAHE,QABB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Passing Structures in OLE Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 8, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122289</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE Libraries for Windows and Win32s, version 2.02
<LI>Microsoft Visual Basic for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
OLE Automation does not allow structures to be passed as parameters.
Automation servers that work with standard controllers like Visual Basic
can model a structure as an automation object or pass simple structures as
a safearray of VT_UI1. Automation servers that work with custom controllers
can pass structures as a safearray of VT_UI1 or by passing a data transfer
object that supports IDataObject.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
OLE Automation does not support passing structures as parameters to
automation methods and properties. Here are some ways to work around this:
<P>
NOTE: Standard controllers are products such as Visual Basic that can
control any automation server. A custom controller is written to
control a specific automation server.
<P>
If the Automation server is designed to work with standard controllers such
as Visual Basic, the structure could be modeled as an automation object.
For example, consider this structure:
<P>
struct point {
<PRE>    short x;
    short y;
</PRE>};
<P>
This could modeled as an automation object with two properties, x and y.
Visual Basic code such as the following could be used to get and set the
values of the properties. Note how the CreateLine method, which required
two points as parameters, is implemented as taking references to two
automation objects.
<P>
Dim Application As Object
Dim P1 As Object
Dim P2 As Object
Dim Line As Object
:
Set P1 = Application.CreatePoint()
P1.x = 3
P1.y = 4
Set P2 = Application.CreatePoint()
P2.x = 20
P2.y = 21
Set Line = Application.CreateLine(P1, P2)
<P>
The CreatePoint method returns a Point automation object whose x &amp; y
properties are set. The type of the value returned by CreatePoint is
IDispatch* or a pointer to an object that supports automation. The
CreateLine method takes two parameters of type IDispatch* or a pointer
to an object that supports automation.
<P>
The disadvantage of this solution is that if the automation server is
not an inproc server, each property access will result in the overhead
of an LRPC/RPC call.
<P>
If the automation server is designed to work with custom controllers, the
structure could be serialized into a safearray of VT_UI1 and the resultant
binary data could be passed as a parameter of type SAFEARRAY(unsigned
char). Another solution is to create a data transfer object that supports
IDataObject. The IUnknown of this data transfer object could be passed in a
parameter of type IUnknown*. The server could then use IDataObject::GetData
with a private clipboard format to get the storage medium in which the
structure was serialized. Simple structures can be passed from Visual Basic
using a safearray of VT_UI1 as described in Don Box's OLE column in the
June 1996 issue of the Microsoft Systems Journal.
<P>
NOTE: Serializing the structure into a BSTR will not work because
the Unicode-ANSI conversions done by OLE's 16:32 bit interoperablity
layer assumes that BSTRs contain strings and not binary data. Consequently,
binary data passed in BSTRs can be corrupted by such conversions. However,
serializing binary data into BSTRs will work if both controller and server
are 16-bit. It will also work if both the controller and server are 32-bit
and both support Unicode. This is because 32-bit OLE supports only Unicode,
not ANSI. A safearray of VT_UI is preferred because of these limitations
of passing binary data through BSTRs.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbole kbprg kbcode kbwebcontent<BR>
KBSubcategory: LeTwoAto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 8, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

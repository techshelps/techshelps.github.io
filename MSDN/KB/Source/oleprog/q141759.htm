

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: XLCLIENT: Automation Client for Excel </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141759">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/12/24">
<META NAME="Keywords" CONTENT="LeTwoAt kbfile kbwebcontent">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  XLCLIENT demonstrates how to control Microsoft Excel using OLE Automation. The MFC directory contains a sample that uses MFC. The SDK directory contains a sample that does not use MFC.  You can find XLCLIENT.EXE, a self-extracting file, on these se...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QAUD,QAPF,QA2K,QARL,QAH4,QAH6,QAD7,QAY2,QAH7,QAHE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: XLCLIENT: Automation Client for Excel</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141759</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>4.00    | 4.00
</PRE>WINDOWS | WINDOWS NT
kbfile kbwebcontent
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Excel 95
<LI>Microsoft Visual C++ 4.0
<LI>Microsoft OLE libraries included with:
<P><PRE>    - Microsoft Windows NT 3.5.1
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
XLCLIENT demonstrates how to control Microsoft Excel using OLE Automation.
The MFC directory contains a sample that uses MFC. The SDK directory
contains a sample that does not use MFC.
<P>
<PRE>You can find <A HREF="http://support.microsoft.com/download/support/mslfiles/XLCLIENT.EXE">XLCLIENT.EXE</A> <I>(size: 142384 bytes)</I> 
                         , a self-extracting file, on these services:

</PRE><LI>Microsoft's World Wide Web site on the Internet
<P><PRE>      On the www.microsoft.com home page, click the Support icon
      Click Knowledge Base, and select the product
<PRE></PRE>      Enter kbfile <A HREF="http://support.microsoft.com/download/support/mslfiles/XLCLIENT.EXE">XLCLIENT.EXE</A> <I>(size: 142384 bytes)</I> 
                               , and click GO!
      Open the article, and click the button to download the file

</PRE><LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the Softlib/Mslfiles folder
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/XLCLIENT.EXE">XLCLIENT.EXE</A> <I>(size: 142384 bytes)</I> 
</PRE><P>
</UL>- Microsoft Download Service (MSDL)
<PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/XLCLIENT.EXE">XLCLIENT.EXE</A> <I>(size: 142384 bytes)</I> 

</PRE>For additional information about downloading, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Excel exposes its objects, properties and methods so that a client can
access them through OLE Automation. This sample shows how to write an
automation client that is equivalent to the following Visual Basic 4.0 code
which inserts values into cells and creates a chart of those values.
<P>
Const xlWorkSheet = -4167
Const xl3DPie = -4102
Const xlRows = 1
<P>
Set application = CreateObject("Excel.Application")
application.Visible = True
Set workbook = application.Workbooks.Add(template:=xlWorkSheet)
Set worksheet = workbook.Worksheets(1)
worksheet.Range("A1:D1").Value = Array("North", "South", "East", "West")
worksheet.Range("A2").Value = 5.2
worksheet.Range("B2").Value = 10
worksheet.Range("C2").Value = 8
worksheet.Range("D2").Value = 20
Set range = worksheet.Range("A1:D2")
Set chart = workbook.Charts.Add
chart.ChartWizard Source:=range, gallery:=xl3DPie,
<PRE>    Format:=7, plotBy:=xlRows, categoryLabels:=1,
    seriesLabels:=0, hasLegend:=2, Title:="Sales Percentages"
</PRE>workbook.Saved = True
<PRE>' So that Excel won't ask whether to save this document on close.

</PRE><h3>How to Write an Automation Client for Microsoft Excel</h3>
 
<P>
An automation client uses the IDispatch interface to control Microsoft
Excel. The following information is applicable when writing an automation
client for Microsoft Excel:

<UL><LI>Read the documentation of the Microsoft Excel automation
   methods/properties that you plan to use in the Vba_xl.hlp file that is
   shipped with Excel.

<LI>The values of Microsoft Excel constants like xlWorkSheet, xl3DPie,
   xlRows etc. can be obtained from the following knowledge base article:
<P>
   ARTICLE-ID: <B><A HREF="../vbapps/Q112671.htm">Q112671</A></B>
<PRE>   TITLE     : Excel AppNote: Built-in Constants in VB, Applications
               Edition

   These constant values can also be obtained from Microsoft Excel's type
   library by using a type library browser like Ole2vw32.exe (in the
   compiler's \bin directory). Open Microsoft Excel's type library (for
   example, Xl5en32.olb for the U.S. version of Microsoft Excel 95) using
   the File/ViewTypeLibrary menu of Ole2vw32.exe. Drop the typeinfos
   combobox and select "constants". The Microsoft Excel constants will be
   displayed in the Variables/DataMembers list box.

</PRE><LI>All arguments and return types of Microsoft Excel automation methods and
   types are of type VARIANT. The actual types that need to be filled into
   and retrieved from a VARIANT are not explicitly stated in Vba_xl.hlp.
   However the types can be easily guessed from the documentation. For
   example, a number can be passed as VT_I2, a string as VT_BSTR and an
   object as VT_DISPATCH. Microsoft Excel will do the appropriate coercions
   if required. Values returned by Microsoft Excel can be similarly
   guessed. If the exact type of the return value cannot be determined
   check the VARIANT.vt field or coerce the return type using
   VariantChangeType. As mentioned in the "Microsoft Excel Specifics"
   section of Chapter 7 in the Microsoft Excel Developer's Kit in the
   Office Developer's Kit on the MSDN CD, Microsoft Excel will never return
   a VARIANT with a datatype that is not in the following list:
<P>
<PRE>   Data Type                               Variant Constant
   ---------                               ----------------
   Boolean                                 VT_BOOL
   Currency (scaled integer)               VT_CY
   Date                                    VT_DATE
   Error cell values (#N/A, #REF etc.)     VT_ERROR
   Integer                                 VT_I2
   Long (long integer)                     VT_I4
   Object                                  VT_DISPATCH
   Single (single-precision floating-point)VT_R4
   Double (double-precision floating-point)VT_R8
   String                                  VT_BSTR

</PRE></UL>The following information is applicable to any automation client:

<UL><LI>OLE uses Unicode strings. The OLESTR macro can be used to convert string
   constants to Unicode strings. In MFC, variables that contain strings can
   be converted to and from Unicode using the T2OLE and OLE2T macros. See
   MFC TechNote 59 for details. Code that does not use MFC can find
   information for ANSI/Unicode conversion in the following knowledge base
   article:
<P>
   How to Convert from ANSI to Unicode &amp; Unicode to ANSI for OLE
   ID: <B><A HREF="../OLEPROG/Q138813.htm">Q138813</A></B>

<LI>The caller of an OLE API or interface method is responsible for freeing
   arguments and return values.
<P>
</UL><h3>How to Write an MFC Automation Client for Microsoft Excel</h3>
 

<OL><P><LI>Use AppWizard to create an application with automation support.

<P><LI>Select the OLE Automation tab in Class Wizard and select AddClass/From
   an OLE TypeLibrary. Select Excel's type library (Xl5en32.olb for U.S.
   version of Microsoft Excel 95) in the Microsoft Excel directory. Select
   the Microsoft Excel objects that you will use. ClassWizard will create a
   COleDispatchDriver derived proxy class for each object that you select.
   The sample selected the Application, Range, Workbook, Workbooks,
   Worksheet, Chart and Charts Excel objects and ClassWizard created the
   new classes in Xl5en32.h and Xl5en32.h. Modify the name of the DialogBox
   method of the Range object to a different name (for example, DBox)
   because the system header files define DialogBox as DialogBoxA or
   DialogBoxW.

<P><LI>Include the header file generated in Step 2 into the .cpp file that will
   contain the code to control Microsoft Excel.

<P><LI>Optional arguments which are not passed can be indicated by passing a
   VARIANT containing VT_ERROR/DISP_E_PARAMNOTFOUND.

<P><LI>Some Microsoft Excel methods can be called using two syntaxes, as
   documented in Vba_xl.hlp. For example, the Workbooks method is
   documented as follows:
<P>
   Syntax 1
   object.Workbooks(index)
<P>
   Syntax 2
   object.Workbooks
<P>
   ClassWizard will generate only one method. So if you need to use the
   other syntax, modify the generated .h and .cpp file to add another
   method for the other syntax. For example this sample added Workbooks2 to
   the Application class as follows to correspond to syntax 2 of the
   WorkBooks method:
<P>
   VARIANT Application::Workbooks2()
   {
   VARIANT result;
   InvokeHelper(0x23c, DISPATCH_METHOD, VT_VARIANT, (void*)&amp;result, NULL);
   return result;
   }
<P>
   Workbooks2 has the same DISPID (0x23c) as Workbooks but does not have
   any arguments. This problem cannot be resolved by passing
   VT_ERROR/DISP_E_PAMNOTFOUND. All methods marked as having two syntaxes
   must be handled in this manner.
<P>
   The sample uses the Range, Workbooks and Charts methods, all of which
   have two syntaxes. Consequently it adds Range1, Workbooks2 and Charts2.

<P><LI>MFC's COleDispatchDriver class doesn't support named arguments.
   Arguments must be passed by position.

<P><LI>If Microsoft Excel raises an exception it will return DISP_E_EXCEPTION
   from IDispatch::Invoke and will fill EXCEPINFO parameter of this method.
   MFC will throw a COleDispatchException when this happens and the client
   can obtain the error information in the EXCEPINFO structure by catching
   this exception.

<P><LI>The code in Doc.cpp in the sample demonstrates how to control Microsoft
   Excel using the MFC classes.
<P>
</OL><h3>How to write a non-MFC automation client for Microsoft Excel</h3>
 

<OL><P><LI>The helper functions, CreateObject and Invoke, in Invhelp.cpp and
   Invhelp.h of the BROWSE sample in the Win32 SDK can be used to easily
   write a non-MFC automation client. Another approach is to call
   IDispatch::Invoke directly. Invoke uses late-binding to control a
   server. It can be made more efficient by modifying it to use id-binding
   in which the DISPID is obtained from the type-library rather than
   through IDispatch::GetIDsOfNames.

<P><LI>The Invoke helper function doesn't support named arguments. Arguments
   must be passed by position.

<P><LI>The Invoke helper function allows an EXCEPINFO structure to be passed as
   one of the parameters. Microsoft Excel will fill this structure with
   error information if it raises an exception and if an EXCEPINFO
   structure is provided by the client. Invoke will return DISP_E_EXCEPTION
   when Microsoft Excel raises an exception. The strings in the EXCEPINFO
   structure must be freed by the client. The sample code does not pass an
   EXCEPINFO structure to Microsoft Excel.

<P><LI>The code in Xlclient.cpp in the sample demonstrates how to control
   Microsoft Excel.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: Excel Automation Controller MFC Client<BR>
KBCategory: kbfile kbwebcontent<BR>
KBSubcategory: LeTwoAt<BR>
Keywords          : LeTwoAt kbfile kbwebcontent<BR>
Version           : 4.00 | 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

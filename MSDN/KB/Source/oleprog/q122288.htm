

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Visual Basic Automation Statements Map to OLE Calls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122288">
<META NAME="KBModify" CONTENT="1997/03/20">
<META NAME="KBCreate" CONTENT="1994/11/01">
<META NAME="Keywords" CONTENT="kbnetwork kbprg">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  This article lists the OLE API and interface calls to which the Visual Basic CreateObject and GetObject calls map. Each listing shows how to obtain the IDispatch of an OLE Automation object. You can then invoke a property or method of the OLE Autom...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QA9Q,QAGI,QA2K,QAW6,QA2S,QAH4,QAB5,QAI4,QAIF,QAKC,QAA5,QBSO,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How Visual Basic Automation Statements Map to OLE Calls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 20, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122288</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.02 3.00
WINDOWS
kbole kbprg kbcode kbwebcontent
<P>
 
The information in this article applies to:

<UL><LI>Microsoft OLE Libraries for Windows and Win32s, version 2.02
<LI>Microsoft Visual Basic for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists the OLE API and interface calls to which the Visual
Basic CreateObject and GetObject calls map. Each listing shows how to
obtain the IDispatch of an OLE Automation object. You can then invoke a
property or method of the OLE Automation object by using
IDispatch::GetIDsOfNames and IDispatch::Invoke.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code listed below does not do any error checking. When you implement
it, you should add the code to do necessary error checking. See the OLE SDK
documentation for more information about each function or interface. Each
code listing shows how to obtain the pointer to IDispatch of an Automation
object in the pdisp variable.
<P>
<P><h3>CreateObject(progID)</h3>
 
<P>
This creates a new automation object and returns a pointer to the IDispatch
of that object.
<P>
CLSID clsid;
LPUNKNOWN punk;
LPDISPATCH pdisp;
<P>
OleInitialize(NULL), if OLE isn't already loaded.
CLSIDFromProgID(progID, &amp;clsid);
CoCreateInstance(clsid, NULL, CLSCTX_SERVER,
<PRE>                 IID_IUnknown, (LPVOID FAR*)&amp;punk);
</PRE>punk-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pdisp);
punk-&gt;Release();
<P>
<P><h3>GetObject(filename, progID)</h3>
 
<P>
GetObject has three different semantics depending on the number of
parameters passed. An automation object must implement IPersistFile to
support GetObject(filename, progID).
<P>
CLSID clsid;
LPUNKNOWN punk;
LPDISPATCH pdisp;
LPPERSISTFILE pPF;
<P>
OleInitialize(NULL), if OLE isn't already loaded
CLSIDFromProgID(progID, &amp;clsid);
CoCreateInstance(clsid, NULL, CLSCTX_SERVER,
<PRE>                 IID_IUnknown, (LPVOID FAR*)&amp;punk);
</PRE>punk-&gt;QueryInterface(IID_IPersistFile, (LPVOID FAR*)&amp;pPF);
punk-&gt;Release();
<P>
pPF-&gt;Load(filename, 0);
pPF-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pdisp);
pPF-&gt;Release();
<P>
<P><h3>GetObject(filename,)</h3>
 
<P>
GetObject has three different semantics depending on the number of
parameters passed. An automation object must implement IPersistFile to
support GetObject(filename,).
<P>
LPBC pbc;
ULONG cEaten;
LPMONIKER pmk;
LPDISPATCH pdisp;
<P>
OleInitialize(NULL), if OLE isn't already loaded
CreateBindCtx(0, &amp;pbc);
MkParseDisplayName(pbc, filename, &amp;cEaten, &amp;pmk);
BindMoniker(pmk, 0, IID_IDispatch, (LPVOID FAR*)&amp;pdisp);
pmk-&gt;Release();
pbc-&gt;Release();
<P>
GetObject(, progID)
 
<P>
GetObject has three different semantics depending on the number of
parameters passed. An automation object must call RegisterActiveObject to
support GetObject(, progID).
<P>
CLSID clsid;
LPUNKNOWN punk;
LPDISPATCH pdisp;
<P>
OleInitialize(NULL), if OLE isn't already loaded
CLSIDFromProgID(progID, &amp;clsid);
GetActiveObject(clsid, NULL, (LPVOID FAR*)&amp;punk);
punk-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pdisp);
punk-&gt;Release();
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 VB<BR>
KBCategory: kbold kbprg kbcode kbwebcontent<BR>
KBSubcategory: LeTwoAto<BR>
Keywords            : kbnetwork kbprg<BR>
Version             : 2.02 3.00<BR>
Platform            : WINDOWS<BR>
Resolution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 20, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

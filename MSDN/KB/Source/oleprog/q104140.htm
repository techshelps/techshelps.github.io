

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Component Object Model </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104140">
<META NAME="KBModify" CONTENT="1996/08/05">
<META NAME="KBCreate" CONTENT="1993/09/08">
<META NAME="Keywords" CONTENT="kbole kbprg kbwebcontent">
<META NAME="KBArea" CONTENT="Support; KB; oleprog">
<META NAME="Description" CONTENT="  The Component Object Model is a specification that describes the process of communicating through interfaces, acquiring access to interfaces through the QueryInterface method, determining pointer lifetime through reference counting, and re-using ob...">
<META NAME="Product" CONTENT="OLE (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="OLE ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBBS,QAPN,QAW6,QAGI,QAZB,QAO3,QAO2,QA9Q,QA9N,QAWI,QA3T,QAX6,QAB3,QAG8,QDIZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>The Component Object Model</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 5, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104140</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE Libraries for Windows and Win32s, version 2.0
<LI>Microsoft OLE Libraries, included with:
<P><PRE>    - Microsoft Windows NT, versions 3.5 and 3.51
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Component Object Model is a specification that describes the
process of communicating through interfaces, acquiring access to
interfaces through the QueryInterface method, determining pointer
lifetime through reference counting, and re-using objects through
aggregation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Object</h3>
 
<P>
An object is an item in the system that exposes interfaces to
manipulate the data or properties of the object. An object is created
by directly or indirectly calling the CoCreateInstance() application
programming interface (API), which in turn creates a new instance of
the object and returns a pointer to a requested interface. For more
details, see pages 93 and 94 of the "OLE 2.0 Design Specification."
<P>
<P><h3>Interfaces</h3>
 
<P>
An interface is a group of related functions. Communication between
two objects in a system occurs by calling the functions in an
interface through a pointer to that interface. An interface pointer is
originally obtained at the time the object is created.
<P>
A good example of an interface is a window that supports drag and
drop. The window exposes an interface with methods that could be used
during drag and drop. The object being dragged could communicate with
the window through this interface. Such an interface might resemble
the following:
<P>
<PRE>   interface IDropTarget : IUnknown {
       virtual HRESULT DragEnter() = 0; // Mouse entered the window.
       virtual HRESULT DragOver()  = 0; // Called each mouse move.
       virtual HRESULT DragLeave() = 0; // Mouse left the window.
       virtual HRESULT Drop()      = 0; // Item dropped on the window.
       };

</PRE>For more information on interfaces, refer to pages 57-60 of the "OLE
2.0 Design Specification."
<P>
<P><h3>IUnknown</h3>
 
<P>
All interfaces used in the component object model are derived from a
base interface called IUnknown. The methods contained within IUnknown
are related because they deal with object maintenance. The IUnknown
interface is defined as:
<P>
<PRE>   interface IUnknown {
       virtual HRESULT QueryInterface( REFIID, VOID FAR *) = 0;
       virtual ULONG   AddRef() = 0;
       virtual ULONG   Release() = 0;
   };

</PRE>IUnknown::QueryInterface is used for interface negotiation. The other
methods are used for reference counting to control the life of the
object.
<P>
More information on the IUnknown interface can be found on pages 81-83
of the "OLE 2.0 Design Specification."
<P>
<P><h3>Interface Negotiation</h3>
 
<P>
Given a pointer to a particular interface, an object can be queried
for another interface. This is done by calling the QueryInterface()
method in an interface. The following code demonstrates querying for
the IOleObject interface:
<P>
<PRE>   // Assume that a pointer to an arbitrary interface, pint,
   // exists.

   LPOLEOBJECT pOleObject;
   HRESULT hErr;

   // Query the interface.
   hErr = pint-&gt;QueryInterface(IID_IOleObject, (LPVOID FAR *)
                                               &amp;pOleObject);

   if (hErr == NOERROR)
       // Object supports this IOleObject. The IOleObject
       // methods can now be called through pOleObject.
   else
       // Object does not support IOleObject.

</PRE><h3>Reference Counting</h3>
 
<P>
Interface lifetime is controlled through reference counting. To
increment the reference count on an interface, call the AddRef()
method. To decrement the reference count on an interface, call the
Release() method. Once an interface's reference count goes to zero,
the pointer to that interface is no longer valid. If the reference
count on all of an object's interfaces is zero, then the object can be
freed because there are no longer any pointers to the object.
<P>
More information on reference counting can be found on pages 83 and 84
of the "OLE 2.0 Design Specification."
<P>
<P><h3>Aggregation</h3>
 
<P>
Aggregation is the ability of an object to be re-used or extended
dynamically, without having to recompile the original object code. For
more information on the process of aggregation, please refer to the
"OLE 2.0 Design Specification," pages 61-63.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.50 4.00<BR>
KBCategory: kbole kbprg kbwebcontent<BR>
KBSubcategory: LeTwoCom<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 5, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

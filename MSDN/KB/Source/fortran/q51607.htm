

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Pointer in FORTRAN </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q51607 ">
<META NAME="KBModify" CONTENT="1995/07/19">
<META NAME="KBCreate" CONTENT="1989/12/04">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The two code examples below demonstrate one method to simulate a pointer in FORTRAN. The first example is for the MS-DOS operating system and the second is for the OS/2 operating system.  MORE INFORMATION  The code example below demonstrates using ...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAH4,QAFF,QAYL,QAH7,QAH6,QAD7,QAKD,QBBS,QAC2,QAO3,QAO2,QDIR,QAPN,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Pointer in FORTRAN</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 19, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q51607 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS and OS/2, versions 5.0, 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The two code examples below demonstrate one method to simulate a
pointer in FORTRAN. The first example is for the MS-DOS operating
system and the second is for the OS/2 operating system.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code example below demonstrates using a pointer in FORTRAN with
MS-DOS. This program loads a far address into an INTEGER*4 variable
and passes the variable to a subroutine.
<P>
The program uses an INTERFACE TO SUBROUTINE statement to "lie" to
FORTRAN about the data being passed. The INTERFACE statement indicates
that the program passes an INTEGER*4 variable by value. Actually, the
subroutine, to which the program refers using the ALIAS attribute,
expects a far address to an array. The INTEGER*4 variable contains
that address. The subroutine can refer to any value in the segment by
specifying the correct index for the array.
<P>
The SETPOINT2 subroutine changes the screen attribute byte to cause
characters on the video display to blink.
<P>
<P><h3>Sample Code 1</h3>
 
<P>
C Compile options needed: None
<P>
<PRE>      INTERFACE TO SUBROUTINE SETPOINT[ALIAS:'SETPOINT2'] (ABC)
        INTEGER*4   ABC  [VALUE]
      END

      SUBROUTINE SETPOINT2 (ABC)
         INTEGER*2   ABC(*), N

         DO 100, N = 1, 2000
         ABC(N) = IOR(ABC(N), #8000)
100      CONTINUE
      END

         PROGRAM GRAPHTEST
            INTEGER*4      PTR

            PTR = #0B8000000
            WRITE (*, '(Z9)') PTR
            CALL SETPOINT (PTR)
         END

</PRE>The code example below demonstrates using a pointer in FORTRAN with
OS/2. This program retrieves a selector to the video buffer by calling
the VioGetPhysBuf() function. The application converts the selector to
a far pointer by shifting it 16 positions to the left.
<P>
The program uses an INTERFACE TO SUBROUTINE statement to "lie" to
FORTRAN about the value it passes to the subroutine. The INTERFACE
statement indicates that the program passes an INTEGER*4 by value.
Actually, the subroutine, to which the program refers with an ALIAS
attribute, expects a far address to an array. The INTEGER*4 variable
contains that address. The subroutine can refer to any value in the
segment by specifying the correct index for the array.
<P>
The SETPOINT2 subroutine changes the screen attribute byte to cause
characters on the video display to blink.
<P>
<P><h3>Sample Code 2</h3>
 
<P>
C Compile options needed: None
<P>
<PRE>      INTERFACE TO FUNCTION VIOGETPHYSBUF (BUFFER, HANDLE)
          STRUCTURE /BUFFSTRC/
            INTEGER*4  ADDRESS
            INTEGER*4  LENGTH
            INTEGER*2  SELECTOR
          END STRUCTURE
          RECORD /BUFFSTRC/ BUFFER
          INTEGER*2    HANDLE   [VALUE]
          INTEGER*2    VIOGETPHYSBUF
      END

      INTERFACE TO SUBROUTINE SETPOINT[ALIAS:'SETPOINT2'] (ABC)
        INTEGER*4   ABC  [VALUE]
      END

      SUBROUTINE SETPOINT2 (ABC)
         INTEGER*2   ABC(*), N

         DO 100, N = 1, 2000
         ABC(N) = IOR(ABC(N), #8000)
100      CONTINUE

      END

      PROGRAM GRAPHTEST

         STRUCTURE /BUFFSTRC/
            INTEGER*4  ADDRESS
            INTEGER*4  LENGTH
            INTEGER*2  SELECTOR
         END STRUCTURE
         RECORD /BUFFSTRC/ BUFFER

         INTEGER*2      ERROR, VIOGETPHYSBUF
         INTEGER*4      PTR

         BUFFER.ADDRESS = #0B8000
         BUFFER.LENGTH  = 4000

         ERROR = VIOGETPHYSBUF (BUFFER, 0)

         PTR = ISHA(BUFFER.SELECTOR, 16)
         WRITE (*, '(Z10, I3)') PTR, ERROR
         CALL SETPOINT (PTR)
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.00 5.10<BR>
KBCategory: kbprg kbocde<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 19, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

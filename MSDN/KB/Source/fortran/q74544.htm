

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restrictions Applying to FORTRAN 5.1 Windows DLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74544 ">
<META NAME="KBModify" CONTENT="1995/07/17">
<META NAME="KBCreate" CONTENT="1991/07/23">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  There are a number of restrictions regarding the use of Windows dynamic- link libraries (DLLs) written with Microsoft FORTRAN version 5.1. The restrictions apply primarily to I/O and the number of supported instances of a DLL.  MORE INFORMATION  Th...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QDL9,QBWQ,QBWO,QBWN,QA2S,QAGI,QDNN,QBVV,QAA8,QAJQ,QAK9,QABN,QAJZ,QBW7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Restrictions Applying to FORTRAN 5.1 Windows DLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74544 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS, version 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are a number of restrictions regarding the use of Windows dynamic-
link libraries (DLLs) written with Microsoft FORTRAN version 5.1. The
restrictions apply primarily to I/O and the number of supported instances
of a DLL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following restrictions apply to I/O in a FORTRAN Windows DLL:

<OL><P><LI>DLLs may not perform I/O to the screen; only I/O to files is supported.
   There is no mechanism for preventing you from including screen I/O
   commands in your programs. If screen I/O is attempted, the I/O may be
   superimposed over the current Windows display, and the machine may hang.

<P><LI>FORTRAN DLLs cannot access binary or unformatted files using the READ or
   WRITE statement. Using the FORTRAN statements READ or WRITE on a BINARY
   or UNFORMATTED file from a DLL will result in a GPF (general protection
   fault). For a work around using Windows API functions, see article
   <B><A HREF="../FORTRAN/Q102698.htm">Q102698</A></B>.

<P><LI>When opening a file in a DLL, you must explicitly give the file name in
   the OPEN statement or use a CHARACTER variable to assign the name. For
   example:
<P>
   CHARACTER*12 filename  filename = 'file.dat'  OPEN(10, FILE = filename)
<P>
   If the filename is left blank, the program will prompt for it with the
   message:
<P>
<P><PRE>      File name missing or blank - Please enter name?
</PRE><P>
   However, because screen I/O is not supported, this message will be
   superimposed over the current Windows display, and the machine may hang.

<P><LI>You cannot access a file that has been opened and left open in any
   routine outside of the DLL. In this case, no error message is generated,
   but all I/O is ignored. An alternative to this is to CLOSE the file in
   the calling routine and pass the name of the file to the DLL. The DLL
   can then OPEN the file with ACCESS='APPEND' and continue writing to the
   file. The following program illustrates this alternative:
<P>
   (In the calling routine:)
<P>
   CHARACTER*12 filename filename = 'file.dat' CALL sub (filename) ! make
   sure file is closed before passing
<P>
   (In the DLL:)
<P>
   SUBROUTINE sub (filename)  CHARACTER*12 filename  OPEN(1, FILE=filename,
   ACCESS='APPEND')

<P><LI>You must explicitly CLOSE all files opened in a DLL before the
   application terminates. If you don't do this, Windows will hang while
   exiting the program, and any information left in the output buffer for
   the file will be lost.
<P>
</OL>The following restrictions apply to the number of instances supported for a
single DLL:

<OL><P><LI>FORTRAN Windows DLLs are not re-entrant. This means that FORTRAN 5.1
   does not support multiple processes calling the same DLL at the same
   time. It is possible for multiple processes to call the same DLL, but
   there is only one copy of the code and data for the DLL loaded into
   memory at any one time. This means that multiple processes will not be
   using different copies of the code and data segments of the DLL.
<P><PRE>    If multiple processes access the DLL, no I/O (screen or file) should be
</PRE>   performed from the DLL, and you cannot rely on any static data being
   preserved in the program. Again, this is because different processes are
   using the same data area, and the consequence may be inconsistent or
   erroneous results. In the case of I/O, there is no guarantee that
   internal variables used for I/O in the DLL will be set correctly.
<P>
   Note: Multiple instances of non-DLL applications will be given separate
   data segments. Multiple instances of Windows FORTRAN programs are not
   supported, however, because the program uses "fixups" in the code
   segment to address variables in memory. (The use of fixups is integral
   to large memory model programs and only the large model is supported for
   FORTRAN Windows programming.) Because there is only one copy of the code
   for the application, and therefore only one copy of the fixups to the
   data, only the data from the last invocation would be used.
<P>
</OL><h3>Other Restrictions</h3>
 

<OL><P><LI>Character strings passed into a DLL may not be declared as type
   CHARACTER*(*) in the DLL. This is because the internal table used by a
   FORTRAN application to store the length of character strings is not
   available to the DLL.

<P><LI>Routines in DLLs cannot contain the STOP statement. All routines must
   return program control to the calling application.

<P><LI>All FORTRAN 5.1 DLLs must explicitly export the symbol WEP. To do this,
   the statement
<P>
<PRE>   EXPORTS   WEP

   should be added to the DLL's module definition file. The WEP routine is
   included in the FORTRAN 5.1 startup code.

   If a DLL already has a user-defined WEP routine (for example, in a mixed-
   language DLL with existing C code), the WEP routine should be renamed
   __WEP (with two underscores). The FORTRAN 5.1 startup code will call
   __WEP, if present, during DLL termination. For additional information
   concerning the WEP function, see the Windows 3.0 Software Development
   Kit (SDK) documentation.

   NOTE: The above information on WEP is contained in both the FL.DEF and
   README.DOC files for FORTRAN version 5.1. Both of these sources,
   however, incorrectly refer to __WEP as _WEP.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORTRAN PowerStation 32 README.TXT: Debugger and Building </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133103">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1995/07/24">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The following information is from the Microsoft FORTRAN PowerStation 32 README.TXT file located in the \FPSNT\README directory.  This file has four parts:       Part     Contents      ----     --------       1       Installation       2       Debug...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATK,QATL,QAYL,QAV1,QAV0,QBVV,QAB4,QAHE,QADK,QAAP,QAKR,QAH4,QBHQ,QAGB,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FORTRAN PowerStation 32 README.TXT: Debugger and Building</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133103</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS NT
kbreadme
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation 32 for Windows NT, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information is from the Microsoft FORTRAN PowerStation 32
README.TXT file located in the \FPSNT\README directory.
<P>
This file has four parts:
<P>
<PRE>     Part     Contents
     ----     --------
      1       Installation
      2       Debugging
      3       Building and Running Programs
      4       Miscellaneous

</PRE><h2>MORE INFORMATION</h2>
 
<P>
=======================&lt; Part 2: The Debugger &gt;=========================
<P>
<P><h3>Subscript Checking on Arrays of Dimension 1</h3>
 
In prior versions of Microsoft FORTRAN, debug information generated by
the /4Yb compiler option or the $DEBUG metacommand did not perform array
subscript range checking on arrays dimensioned with a dimension of 1.
This functionality has changed. Any attempt to access beyond the
declared dimension of any array will cause a run-time error if debugging
information is enabled. To disable subscript range checking for arrays
passed to subroutines, declare the dimension in the subroutine to be "*"
and not "1".
<P>
<P>
Viewing Allocatable Arrays
 
One special case of viewing variables is the Allocatable Array. Since
these arrays can be of any size, the watch window and locals window do
not allow you to expand these arrays by double-clicking on them. If you
need to view elements of the array, you can enter the individual element
you want to view into the watch window. For example, to view the 10th
element of an INTEGER array A, you would type A(10). To view the
entire array, you can use the memory window. Use the Watch or QuickWatch
window to determine the address of the array, then open the memory
window and type it into the address field. Use the Options/Memory
dialog to change the format of the memory window to the required data
type.
<P>
<P>
<P><h3>MULTI Type for Symbols</h3>
 
Variables that you define to be CHARACTERS, COMPLEX, or RECORD will
appear in the local symbol table as the type MULTI. This is because
the compiler treats these variable types as multiple-byte objects.
<P>
<P>
<P><h3>Displaying Structure Elements in the Watch Window</h3>
 
You cannot view a single element of an array that is a member of a
structure. Instead, you must enter the name of the array itself. To
see the elements, you must expand the array. If you have an array of
structures, you can specify one structure using the FORTRAN syntax.
<P>
For example
<P>
<PRE>    struc(2).element

</PRE>is legal, while
<P>
<PRE>    struc.element(2)

</PRE>is not allowed.
<P>
The easiest way to get the information into the watch window for use in
expression evaluation is to expand the structure in the watch window,
and then copy and paste the needed information into the watch window.
<P>
<P>
<P><h3>Run-time Errors in the Debugger</h3>
 
If a run-time error occurs while a program is running, the program stops
executing and all of its windows are closed. When this happens to an
application that is running in the debugger, the window in which the
application was running is closed, preventing you from reading the
run-time error message and the $DEBUG traceback (if present).
<P>
To keep the window from closing, set a breakpoint at "_exit". This
stops execution after the run-time error has been generated but before
the window is closed.
<P>
<P>
<P><h3>Viewing Variables in a Common Block Belonging to a DLL</h3>
 
To view the contents of a variable that is in a common block belonging
to a DLL, you must enter the context of the DLL as part of the watch
expression. For example, to specify a watch on variable X in SAMPLE.DLL,
you would enter the following watch expression:
<P>
<PRE>    {,,sample.dll}X

</PRE>For more information on contexts, see Help.
<P>
<P>
<P><h3>Using the "m" Watch Variable Format Descriptors</h3>
 
The memory watch variable formats (ma, m[b], mw, and md) do not work with
FORTRAN expressions or variables.  However, they do work with C language
expressions and variables, which can be used to monitor memory locations
even if the program being debugged is entirely FORTRAN.
<P>
<P>
===============&lt; Part 3: Building and Running Programs &gt;================
<P>
<P><h3>Limit to Number of Threads for I/O</h3>
 
A user may have up to 32 threads perform FORTRAN I/O throughout the
lifetime of a program. The 33rd thread to do I/O will cause a run-time
error. Even if a thread has been killed, it counts toward the 32 thread
maximum if it ever did I/O. There is no limit on the number of threads
that do no I/O.
<P>
<P>
<P><h3>Using DLL Libraries when Linking with /ML or /MT</h3>
 
When using DLL libraries, the main executable should be linked with the
/MD driver switch.  Problems can occur when linking an executable with
/ML or /MT and using a DLL, since there would be two copies of the
run-time libraries present in the executable. The DLL version would be
present because DLLs are always built with /MD, and the static version
would be present because of the /ML or /MT switch.  In this case, file
unit numbers do not refer to the same files from within the main
program and from within a DLL; this may also cause newlines to be
emitted in unexpected places. These problems are avoided when linking
with /MD because only one copy of the run-time library is in use by both
the executable and the DLL.  The only exception to the rule that /MD
should be used when linking with DLLs is when building a QuickWin
application because /MD is not permitted (see the note in QUICKWIN.TXT).
<P>
Chapter 17, "Building Programs and Libraries", states that you can use
/ML or /MT with the /LD option.  This is incorrect.  The /LD switch
implies /MD, but the driver will no longer allow a /M option with /LD.
<P>
<P>
<P><h3>Writing INTERFACE TO Statements for STDCALL Routines</h3>
 
When writing INTERFACE TO statements for procedures that use the
STDCALL calling convention, an ALIAS must be used to specify the '@num'
where the num indicates the number of bytes pushed on the stack during
the call.  If the alias string ends with an at sign (@) (with no
number), the compiler will determine the stack size for you based on
the size of the arguments in the INTERFACE TO statement. (The correct
alias name with the stack size postpended will be emitted in the
object file.)
<P>
<P>
<P><h3>Using MATHERRQQ</h3>
 
Because of performance constraints, some intrinsic functions may not
work with MATHERRQQ when you compile with optimizations for time (the
/Ox switch) enabled. MATHERRQQ does not work when linking with the DLL
versions of the FORTRAN and C run-time libraries. MATHERRQQ is also not
called for math error handling when the FORTRAN run-time library is a
DLL. To use the run-time libraries in a DLL, you must compile the main
program with the /MD switch. Finally, the default error handler for
errors from intrinsic functions cannot be replaced by MATHERRQQ in a
DLL or when a program is compiled to use the FORTRAN run-time library
in a DLL.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: WBDebug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

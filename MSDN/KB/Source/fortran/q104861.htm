

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORTRAN PowerStation README.TXT: Linker, Library, VWB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104861">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1993/09/30">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The following information is from parts 3, 4, and 5 of the Microsoft FORTRAN PowerStation README.TXT file located in the \F32\README directory.     Part 3: Using the LINK32 Linker    Part 4: Using the Run-Time Library    Part 5: Using FORTRAN Visua...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAKD,QAWP,QADF,QAKC,QA56,QA55,QAY5,QAAP,QBXS,QAUD,QAGI,QBV8,QBVV,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FORTRAN PowerStation README.TXT: Linker, Library, VWB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104861</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.00a
MS-DOS
kbreadme
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation for MS-DOS, version 1.0 and 1.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information is from parts 3, 4, and 5 of the Microsoft
FORTRAN PowerStation README.TXT file located in the \F32\README
directory.
<P>
<PRE>   Part 3: Using the LINK32 Linker
   Part 4: Using the Run-Time Library
   Part 5: Using FORTRAN Visual Workbench

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Part 3: Using the LINK32 Linker</h3>
 
<P>
<P><h3>Notes on Changes in File Formats</h3>
 
<P>
The FORTRAN PowerStation 1.0 compiler produces 32-bit COFF object
files. The FORTRAN 5.1 compiler produces 16-bit OMF object files.
These file formats are not compatible, and therefore you cannot link
OMF object files with COFF object files.
<P>
<P><h3>Debugging Unresolved External References</h3>
 
<P>
If the linker reports an unresolved external name, and the routine
does exist in your code, you should check its parameter list. The
number following the "@" in the name given in the link error indicates
the number of bytes in the parameter list of the calling statement.
Verify that the calling statement and the subprogram declaration agree
in their number and types of arguments.
<P>
<P><h3>Naming the Executable File Produced by LINK32</h3>
 
<P>
In order to use the FL32 command to compile and link in one step and
to give the resulting executable file a specific name, use the /Fe
option as in the following command line:
<P>
<PRE>   FL32 TEST.FOR /FeMYTEST

</PRE>This will result in an executable file called MYTEST.EXE. The command
line
<P>
<PRE>   FL32 TEST.FOR /link -out:MYTEST.EXE

</PRE>will result in the following error:
<P>
<PRE>   Fatal error: Cannot open input file -- File not found "test.exe"

</PRE>This is caused by the binding process failing to find the executable
with the changed name. If the executable is then run, it will generate
the error
<P>
<PRE>   This program cannot be run in DOS mode.

</PRE>because it was not bound. Using the command
<P>
<PRE>   BINDMSF MYTEST.EXE

</PRE>will correct this problem.
<P>
<P><h3>Getting Help from the MS-DOS Command Line</h3>
 
<P>
To get the syntax for LINK32 help, type:
<P>
<PRE>   LINK32 -HELP

</PRE>To get the syntax for LINK32 LINK options, type:
<P>
<PRE>   LINK32

</PRE>To get the syntax for LINK32 LIB options, type:
<P>
<PRE>   LINK32 -LIB

</PRE>To get the syntax for LINK32 DUMP options, type:
<P>
<PRE>   LINK32 -DUMP


</PRE><h3>Part 4: Using the Run-Time Library</h3>
 
<P>
<P><h3>Floating-Point Coprocessor Limitation</h3>
 
<P>
Some older 80386 systems have 287 coprocessors instead of 387s; some
floating-point operations will not work correctly in these cases. To
fix this, you must force use of the floating-point emulator by setting
the TNT environment variable as follows. At the MS-DOS (or MS-DOS
session) command line, enter "SET TNT=-FPEM" before running your
compiled program. To cancel the forced emulation, you can enter "SET
TNT=-NOFPEM".
<P>
<P><h3>Floating-Point Options</h3>
 
<P>
Earlier versions of Microsoft FORTRAN had a variety of floating-point
options:

<UL><LI>Emulator
<LI>Coprocessor only
<LI>Alternate math
<P>
</UL>FORTRAN PowerStation detects the presence of a coprocessor and will
use it if it is present. Otherwise, it will emulate the floating-point
coprocessor.
<P>
<P><h3>Floating-Point Exceptions and Run-Time Math Exceptions</h3>
 
<P>
The following table shows the default behavior for floating-point
exceptions and run-time math exceptions. Entries in the table are:
<P>
<PRE>   0.          A value of zero
   (value)     The value resulting from the operation
   1#INF       IEEE infinity
   1#IND       IEEE NaN (Invalid)
   M6nnn       Run-time error number M6nnn

</PRE>When one of the values 0., (value), 1#INF, or 1#IND occurs, the
program continues to run. When a run-time error (M6nnn) occurs, the
program stops after reporting the error. The behavior depends on which
compiler option you specify and whether you use the default run-time
function MATHERRQQ or replace it.
<P>
<PRE>                             Compiler Option and Resulting
                              Default Exception Behavior

                                    Compiler Option

                        (none)      /Op       /Ox /Op    /Ox
Exception               --------------------------------------
</PRE> 
(FP exceptions)
<PRE>invalid                 M6101       M6101     M6101      M6101
denormalized            (value)     (value)   (value)    (value)
zerodivide              M6103       M6103     M6103      M6103
overflow                M6104       M6104     M6104      M6104
underflow               0.          0.        0.         0.
inexact                 (value)     (value)   (value)    (value)

</PRE>(Math exceptions)
<PRE>domain                  M6201       M6201     M6201      (undefined)
singular                M6202       M6202     M6202      (undefined)
overflow                M6203       M6203     M6203      (undefined)
total loss of precision M6205       M6205     M6205      (undefined)

</PRE>This behavior results from the default call of SETCONTROLLFPQQ (done
by the run-time library when your program starts) that includes the
exception control flags
<P>
<PRE>   FPCW$DENORMAL + FPCW$UNDERFLOW + FPCW$INEXACT

</PRE>and the inclusion of the default run-time subroutine MATHERRQQ. (The
behavior of math exceptions for /Ox is undefined; either an IEEE value
results or a run-time error occurs.)
<P>
If you want behavior consistent with IEEE precision and exception
handling, compile with /Op and explicitly call SETCONTROLFPQQ with all
exception control flags:
<P>
<PRE>   FPCW$INVALID + FPCW$DENORMAL + FPCW$ZERODIVIDE +
   FPCW$OVERFLOW + FPCW$UNDERFLOW + FPCW$INEXACT

</PRE>In addition, you must link a replacement subroutine MATHERRQQ that
just returns a successful return code. The next table shows the IEEE
behavior that results.
<P>
<PRE>                        IEEE Precision and Exception Behavior

                               /Op + Flags + MATHERRQQ
Exception                      ------------------------
</PRE> 
(FP exceptions)
<PRE>invalid                             1#IND
denormalized                        (value)
zerodivide                          1#INF
overflow                            1#INF
underflow                           0.
inexact                             (value)

</PRE>(Math exceptions)
<PRE>domain                              1#IND
singular                            1#IND
overflow                            1#INF
total loss of precision             0.

</PRE>The sample programs include a program SPECIAL.FOR that illustrates
tailoring the floating-point environment to be the closest possible to
IEEE. It calls SETCONTROLFPQQ with the appropriate flags and provides
a replacement MATHERRQQ.
<P>
<P>
<P><h3>Part 5: Using FORTRAN Visual Workbench</h3>
 
<P>
<P><h3>Fonts used in FORTRAN Visual Workbench</h3>
 
<P>
FORTRAN Visual Workbench will only allow screen fonts. Most simulated
fonts cannot be displayed. Therefore, many boldface fonts are not
available. All TrueType fonts, bold and italic, can be used.
Occasionally the caret will be positioned incorrectly for some bold or
italic non-TrueType fonts. If you select a font and the caret is
positioned incorrectly, chose a different font.
<P>
<P><h3>Programs with Very Long Paths</h3>
 
<P>
If a program has a very long path, then choosing Execute from the
Project menu may bring up a message box titled "F32EXEC.PIF," which
says that the program cannot be found, although the .EXE file was
created and can be run outside of FORTRAN Visual Workbench.
<P>
<P><h3>Time-Out Problems in FORTRAN Visual Workbench</h3>
 
<P>
If you have time-out problems with FORTRAN Visual Workbench, check to
see if WinExclusive=1 is in the 386enh section of SYSTEM.INI. If this
is set and Windows has the focus, then Windows gets all the
timeslices. (Therefore Wintee can't initialize an MS-DOS VM.)
<P>
WinExclusive is set from the "Exclusive in Foreground" check box in
Windows Control Panel, 386Enhanced. For FORTRAN Visual Workbench, the
box should NOT be checked.
<P>
<P><h3>Using Extended Characters in FORTRAN Visual Workbench</h3>
 
<P>
Because FORTRAN Visual Workbench runs in Microsoft Windows and
produces programs that run in MS-DOS, two distinct character sets are
used: ANSI and OEM. The ANSI set is normally used in Windows; the OEM
set is used in MS-DOS. Both character sets contain extended characters
(such as accented letters and line-drawing symbols), but the numerical
representation of these characters is different. Windows provides a
special font called Terminal that uses the OEM character set. If you
use extended characters in your files, you need to know about both.
<P>
FORTRAN Visual Workbench is an ANSI editor; it does not convert
characters to the OEM character set. If you want to see the true OEM
characters, use the TERMINAL font. If you want to enter OEM
characters, add a zero to the beginning of the character code. (For
example, "ALT+0130" produces an accented "e"; typing "ALT+130"
produces the ANSI character.) No translation is performed when files
are loaded or saved. The editor displays the character representation
of what was in the file. When a character is entered, it is translated
to ANSI and saved as that value. This applies for all characters on
the keyboard, including an e-accent on an international keyboard and
an ALT+number entered from the numeric key pad. The only time a
translation is not done is when an ALT+0+number is entered. When
looking at a file from MS-DOS, you will get the OEM representation of
the characters.
<P>
Microsoft recommends that you do not use extended characters in
filenames.
<P>
The sample program GRDEMO in the ..\F32\SAMPLES\DEMO directory uses
extended characters to produce a boxed menu on the screen. The file
MENU.FOR uses extended characters to draw a box around the menu. The
line characters display as such only if the font is set to Terminal.
<P>
<P><h3>Sample Programs in Book, Help, and Disk</h3>
 
<P>
Some of the sample programs on the distribution disks are newer
versions than those that appear in the "Language Guide."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: TlsMisc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

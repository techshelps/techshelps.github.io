

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: F1001: p2symtab.c Initializing in COMMON or EQUIVALENCE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q49761 ">
<META NAME="KBModify" CONTENT="1997/09/11">
<META NAME="KBCreate" CONTENT="1989/10/12">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  When Microsoft FORTRAN compiles an application that contains a variable initialized in a type declaration that is also listed in an EQUIVALENCE statement, and the EQUIVALENCE statement appears first in the source code file, one of the following err...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAH4,QAAP,QAOT,QAYL,QAPN,QA4Q,QBFY,QAB9,QAKP,QA7Y,QAR4,QAJ9,QAJQ,QAC1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: F1001: p2symtab.c Initializing in COMMON or EQUIVALENCE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q49761 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.00a 4.01 4.10 5.00 | 4.10 5.00
<PRE>MS-DOS                    | OS/2
</PRE>kbtool kbfixlist kbbuglist kberrmsg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS, versions 4.0, 4.0a, 4.01, 4.1, 5.0
<LI>Microsoft FORTRAN for OS/2, versions 4.1, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When Microsoft FORTRAN compiles an application that contains a variable
initialized in a type declaration that is also listed in an EQUIVALENCE
statement, and the EQUIVALENCE statement appears first in the source
code file, one of the following errors occurs. In FORTRAN versions 4.0
and 4.0a:
<P>
<PRE>    fatal error F1001: Internal Compiler Error
     (compiler file '@(#)p2symtab.c:1.84', line 914)

</PRE>In FORTRAN versions 4.01 and 4.10:
<P>
<PRE>   fatal error F1001: Internal Compiler Error
     (compiler file '@(#)p2symtab.c:1.85', line 915)

</PRE>In version 5.0, when an application contains a variable that is
initialized in a type declaration or a DATA statement, the variable is
also listed in a COMMON or EQUIVALENCE statement, and the type
declaration or DATA statement appears first in the source code file, the
following error occurs:
<P>
<PRE>   fatal error F1001: Internal Compiler Error
      (compiler file '@(#)p2symtab.c:1.4', line 939)

</PRE><h2>RESOLUTION</h2>
 
<P>
In FORTRAN versions 4.x, modify the code such that variables that appear
in a COMMON or EQUIVALENCE statement are not initialized. Use an
assignment statement in the body of the code to give variables a value.
<P>
In version 5.0, use a DATA statement to initialize variables that appear
in a COMMON or EQUIVALENCE statement or use an assignment statement in
the body of the code to give variables a value.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in FORTRAN versions 4.0,
4.0a, 4.01, 4.1, and 5.0 for MS-DOS and versions 4.1 and 5.0 for OS/2.
This problem was corrected in FORTRAN version 5.1.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
FORTRAN versions 4.x do not support initializing variables that appear in
COMMON or EQUIVALENCE statements. When the compiler detects such an
attempt, it is designed to produce the following error messages:
<P>
<PRE>   error F2404: varname : can only initialize common block
      in BLOCK DATA subprogram
   error F2311: varname : EQUIVALENCE : preinitialization illegal

</PRE>Often, the compiler correctly generates the first error message. However,
instead of generating the second error, an internal compiler error occurs
instead.
<P>
In version 5.0, the compiler was extended to allow this extension to the
ANSI standard by allowing a DATA statement to assign a value to a variable.
Support for initializing a value in a type declaration was not added. The
compiler is designed to generate one of the following error messages when
the code uses a type declaration to initialize a variable that appears in a
COMMON or EQUIVALENCE statement:
<P>
<PRE>   error F2311: varname : COMMON : preinitialization illegal

   -or-

   error F2311: varname : EQUIVALENCE : preinitialization illegal

</PRE>However, instead of generating the correct error message above, an internal
compiler error occurs.
<P>
According to page 135 of the Microsoft FORTRAN "Reference" manual for
version 5.0, the following example causes a compile-time error:
<P>
<PRE>      INTEGER I /1/
      COMMON I

</PRE>Page 165 of the "Reference" manual includes a similar warning about the
EQUIVALENCE statement with the following code
<P>
<PRE>      INTEGER I /1/
      EQUIVALENCE (I, J)

</PRE>Compiling the following code with Microsoft FORTRAN versions 4.0, 4.0a,
4.01, or 4.1 generates an internal compiler error.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
C Compiler options required: None
<P>
<PRE>      EQUIVALENCE (A, B)
      INTEGER A
      INTEGER B /1/
      END

</PRE>Compiling either of the following code examples with Microsoft FORTRAN
version 5.0 generates an internal compiler error.
<P>
<P><h3>Sample Code #2</h3>
 
<P>
C Compiler options required: None
<P>
<PRE>      INTEGER A
      INTEGER B /1/
      EQUIVALENCE (A, B)
      END

</PRE><h3>Sample Code #3</h3>
 
<P>
C Compiler options required: None
<P>
<PRE>      INTEGER A
      INTEGER B /1/
      COMMON /TEST/ B
      END

</PRE>The following code example demonstrates one method to avoid the compiler
error in Microsoft FORTRAN version 5.0.
<P>
<P><h3>Sample Code #4</h3>
 
<P>
C Compiler options required: None
<P>
<PRE>      INTEGER A
      INTEGER B
      COMMON /TEST/ B
      DATA B /1/
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.00a 4.01 4.10 5.00 buglist4.00a<BR>
buglist4.01 buglist4.10 buglist5.00 fixlist5.10<BR>
KBCategory: kbtool kbfixlist kbbuglist kberrmsg<BR>
KBSubCategory: FLIss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

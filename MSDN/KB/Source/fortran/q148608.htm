

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Derived-Type with Pointer Expands Incorrectly in Debugger </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148608">
<META NAME="KBModify" CONTENT="1996/03/18">
<META NAME="KBCreate" CONTENT="1996/03/15">
<META NAME="Keywords" CONTENT="kbprg kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  When you debug a derived-type variable that contains a pointer to another derived-type object and you try to view the members of the pointed to object in a watch window, it fails. This causes the pointer to member structure to be incorrectly expand...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAP2,QAVV,QAO2,QAO3,QAH4,QATL,QATK,QAAP,QDH9,QAYL,QASR,QAR4,QAPN,QAUD,QAFI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Derived-Type with Pointer Expands Incorrectly in Debugger</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148608</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Fortran PowerStation for Windows 95 and Windows NT,
   version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you debug a derived-type variable that contains a pointer to another
derived-type object and you try to view the members of the pointed to
object in a watch window, it fails. This causes the pointer to member
structure to be incorrectly expanded out.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Problem</h3>
 
<P>
Build the following sample code in Developer Studio with the /Zi compiler
option, and then perform the following steps:

<OL><P><LI>Begin a debugging session; On the Developer Studio Debug menu, click
   Build, and then click Step Into.

<P><LI>Step through the main program beyond the allocate statement.

<P><LI>In a watch window, type the variable name "root," and press the ENTER
   key.

<P><LI>View the members of root. Click each of the (+) nesting symbols to
   expand each level of the derived-type object root.
<P>
</OL>Expanding root yields root%B%L%B%L%B%L instead of the correct pointer to
member structure of root%B%l%i. Typing in the correct pointer to member
structure in a watch window yields the following message in the
corresponding value column:
<P>
<PRE>   Invalid structure member

</PRE></OL><h3>Sample Code</h3>
 
<P>
C Compile options needed: /Zi
<P>
<PRE>      module types
        type t_leaf
          integer i
        end type t_leaf

        type t_branch
          type (t_leaf), pointer :: l
        end type

        type t_root
          type (t_branch) b
        end type
      end module types

      program main
        use types
        implicit none

        type (t_root) root
        allocate( root%b%l )

        root%b%l%i = 5
      end program main
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

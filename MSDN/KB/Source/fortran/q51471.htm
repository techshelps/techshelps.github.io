

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Type Conversion Methods in FORTRAN 5.1 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q51471 ">
<META NAME="KBModify" CONTENT="1995/07/19">
<META NAME="KBCreate" CONTENT="1989/11/29">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The text below lists the data type conversion methods provided in Microsoft FORTRAN versions 5.0 and 5.1. The article includes information on the following:   - Intrinsic functions that perform data type conversions.  - The $STORAGE metacommand.  -...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAPN,QAHE,QAEQ,QABE,QAD2,QAB9,QAYL,QAYY,QA7Y,QA4B,QAY5,QAVX,QAVW,QAP2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Data Type Conversion Methods in FORTRAN 5.1</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 19, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q51471 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS versions 5.0, 5.1
<LI>Microsoft FORTRAN for OS/2, versions 5.0, 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below lists the data type conversion methods provided in Microsoft
FORTRAN versions 5.0 and 5.1. The article includes information on the
following:

<UL><LI>Intrinsic functions that perform data type conversions.
<LI>The $STORAGE metacommand.
<LI>The IMPLICIT statement.
<LI>The Internal READ and WRITE statements.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Intrinsic Functions</h3>
 
<P>
The following table lists the FORTRAN intrinsic functions that perform
data type conversions.
<P>
<PRE>   Function   Description
   -------------------------------------------------------------------

   CHAR       Converts an integer argument to a character (ASCII
              equivalent)

   CMPLX      Converts an integer, real or complex argument to a
              COMPLEX*8

   DBLE       Converts an integer, real or complex argument to a
              DOUBLE PRECISION

   DCMPLX     Converts an integer, real or complex argument to a
              COMPLEX*16

   DFLOAT     Converts an integer, real or complex argument to a
              DOUBLE PRECISION

   DREAL      Converts a COMPLEX*16 argument to a REAL*8

   FLOAT      Converts an integer argument to a REAL*4

   HFIX       Converts an integer, real or complex argument to an
              INTEGER*2

   ICHAR      Converts a character argument to an integer (ASCII
              value)

   IDINT      Converts a DOUBLE PRECISION or REAL*8 argument to an
              integer

   IFIX       Converts a REAL*4 argument to an integer

   INT        Converts an integer, real or complex argument to an
              integer

   INT1       Converts an integer, real or complex argument to an
              INTEGER*1

   INT2       Converts an integer, real or complex argument to an
              INTEGER*2

   INT4       Converts an integer, real or complex argument to an
              INTEGER*4

   INTC       Converts an integer, real or complex argument to a C
              language integer

   JFIX       Converts an integer, real or complex arguments to an
              INTEGER*4

   REAL       Converts an integer, real or complex arguments to a
              REAL*4

   SNGL       Converts a REAL*8 arguments to a REAL*4

</PRE>For more information about the data conversion intrinsic functions,
see pages 240-241 of the Microsoft FORTRAN "Reference" manual for
versions 5.0 and 5.1
<P>
<P><h3>$STORAGE Metacommand</h3>
 
<P>
The $STORAGE:n metacommand allocates "n" bytes of memory for all
INTEGER and LOGICAL variables. For example, when an application
specifies the $STORAGE:2 metacommand and declares an INTEGER variable
B, the compiler allocates two bytes for B instead of four. The
$STORAGE metacommand does not affect memory allocation when a
declaration includes an explicit length specification, such as an
INTEGER*2 or INTEGER*4.
<P>
For more information about the $STORAGE metacommand, see pages 34 and
308 of the Reference manual for versions 5.0 and 5.1
<P>
<P><h3>IMPLICIT Statement</h3>
 
<P>
If an application does not explicitly define a data type for a name,
the compiler uses the first letter of the variable or function name to
determine its type. By default, names that begin with the letters I,
J, K, L, M, or N are of type INTEGER. Names that begin with one of the
other letters or with a dollar sign ($) are of type REAL. An
application can use the IMPLICIT statement to override the default
type assignment.
<P>
For more information on the IMPLICIT statement, see pages 8 and 181-
182 of the Reference manual for versions 5.0 and 5.1.
<P>
<P><h3>Internal READ and WRITE Statements</h3>
 
<P>
Reading from an internal file converts ASCII values to numeric,
logical, or character values while writing to an internal file
converts the internal values to ASCII text. For more information on
the internal READ and WRITE statements, see pages 77-78 of the
Reference manual for versions 5.0 and 5.1
<P>
The following code example converts a character variable to an
integer.
<P>
<P><h3>Sample Code</h3>
 
<P>
C Compile options needed: None
<P>
<PRE>      CHARACTER*5 NUM
      INTEGER TEST
      NUM = '12345'
      READ(NUM, '(I5)') TEST
      WRITE (*, *) TEST
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.00 5.10<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 19, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performing File I/O from a FORTRAN Dynamic-Link Library </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102698">
<META NAME="KBModify" CONTENT="1995/07/17">
<META NAME="KBCreate" CONTENT="1993/08/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  By calling the file I/O functions in the Windows application programming interface (API), a dynamic-link library (DLL) developed in Microsoft FORTRAN for the Microsoft Windows operating system can read from or write to binary or unformatted files. ...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAVW,QAVX,QA4Q,QAY5,QA8T,QAKD,QBE7,QBE6,QAGI,QAB9,QDL9,QBWO,QBWN,QBFN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Performing File I/O from a FORTRAN Dynamic-Link Library</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102698</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to

<UL><LI>Microsoft FORTRAN for MS-DOS, version 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By calling the file I/O functions in the Windows application programming
interface (API), a dynamic-link library (DLL) developed in Microsoft
FORTRAN for the Microsoft Windows operating system can read from or write
to binary or unformatted files. Invoking the Windows API to provide file
I/O services for a FORTRAN DLL will also allow reliable access to the files
from the program calling the DLL, even if the program was developed in
Microsoft Visual Basic versions 2.0 and later.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following FORTRAN code demonstrates file I/O on a binary or
unformatted file using functions of the Windows API.
<P>
The code example below defines the data type used by the bfread and
bfwrite functions as REAL*4. You can substitute another data type by
changing the declaration in the interface statement.
<P>
If an application developed in Visual Basic calls a FORTRAN DLL that
uses standard FORTRAN I/O statements to open and close a file, the
file may not be available to the parent application. However, if the
DLL opens or creates, accesses, and closes the file using functions in
the Windows API, the file is available to the parent application or
any other application as soon as the DLL closes the file.
<P>
The code example uses interface statements for the _hread and _hwrite
functions instead of the _lread and _lwrite functions. (The latter
functions can process only data items smaller than 64K but they may
process these smaller items somewhat more efficiently.) The HUGE.LIB
import library, created from HUGE.DEF, is required to call the huge
versions of the read and write functions defined in version 3.1 of the
Windows API. For more information on Windows API programming, please
refer to the Windows SDK documentation.
<P>
<P><h3>Sample Code - FORTIO.FOR</h3>
 
<P>
C Open an existing file
<PRE>      interface to integer*2 function lopen
     +  [pascal, alias:'_lopen'](filename, mode)
      character*1 filename[reference]
      integer*2   mode[value]
C        MODE =
C            0     Read-only
C            1     Write-only
C            2     Read and write
      end

</PRE>C Create a file (erase the old file if one exists)
<PRE>      interface to integer*2 function lcreat
     +  [pascal, alias:'_lcreat'](filename, mode)
      character*1 filename[reference]
      integer*2   mode[value]
C        MODE =
C            0     Read and write
C            1     Read-only
C            2     Hidden
C            3     System
      end

</PRE>C Close a file (use with files opened by lcreat or lopen)
<PRE>      interface to integer*2 function lclose
     +  [pascal, alias:'_lclose'](handle)
      integer*2   handle[value]
      end

</PRE>C hread and hwrite can read or write a buffer larger than 64K
<PRE>      interface to integer*4 function hwrite
     +  [pascal, alias:'_hwrite'](handle, buf, size)
      character*1 buf[reference]
      integer*2   handle[value]
      integer*4   size[value]
      end

      interface to integer*4 function hread
     +  [pascal, alias:'_hread'](handle, buf, size)
      character*1 buf[reference]
      integer*2   handle[value]
      integer*4   size[value]
      end

</PRE>C Seek to a point in a file (used to provide direct file access)
<PRE>      interface to integer*4 function llseek
     +  [pascal, alias:'_llseek'](handle, offset, origin)
      integer*4   offset[value]
      integer*2   handle[value], origin[value]
C        Origin =
C            0     Offset from start of file
C            1     Offset from current position
C            2     Offset from end of file
      end

</PRE>C  Read and write binary floating-point data
<PRE>      interface to integer*4 function bfwrite
     +  [pascal, alias:'_hwrite'](handle, buf, size)
      real*4      buf[reference](1)
      integer*2   handle[value]
      integer*4   size[value]
      end

      interface to integer*4 function bfread
     +  [pascal, alias:'_hread'](handle, buf, size)
      real*4      buf[reference](1)
      integer*2   handle[value]
      integer*4   size[value]
      end

</PRE>C Write ASCII and binary data
<PRE>      subroutine testwrite()
      character*30 str
      integer*2 handle, lclose, lcreat
      integer*4 i, hwrite, bfwrite
      real*4 x(20000)  ! Note: X is 80000 bytes

      handle = lcreat('testbf.out'C, 0) ! Create new file
      do i= 2, 20000
        x(i) = x(i - 1) + 3.1415926
      end do
      i = bfwrite(handle, x, 80000)    ! Binary write all of X
      i = lclose(handle)

      handle = lcreat('test.out'C, 0)   ! Create new file
      ! Use an internal write to format output text
      write(str, '(''Test One'', F12.5)') 51.763
      i = hwrite(handle, str, 20)       ! then write output text
      i = lclose(handle)
      end

</PRE>C Read binary data
<PRE>      subroutine readbinary()
      character*24 str
      integer*2 j, handle, lclose, lopen, lcreat
      integer*4 i, hwrite, bfread
      real*4 x(20000)  ! Note: X is 80000 bytes
      handle = lopen('testbf.out'C, 2) ! Open existing file
      i = bfread(handle, x, 80000)     ! Binary read all of X
      i = lclose(handle)

      handle = lcreat('testbf_o.out'C, 0) ! Create new file
      do j = 1, 4
         write(str, '(F16.5)') x(j)      ! Convert to text
         i = hwrite(handle, str, 16)     ! Write formatted output
      end do
      write(str, '(F16.5)') x(20000)
      i = hwrite(handle, str, 16)
      i = lclose(handle)
      end

</PRE>C Randomly access a file
<PRE>      subroutine testseek()
      character*40 str
      integer*2 handle, lclose, lopen
      integer*4 i, hwrite, llseek, hread

      handle = lopen('test.out'C, 2)
      i = llseek(handle, 4, 0)        ! Position to 4 bytes from start
      i = hread(handle, str, 16)      ! Read 16 characters
      i = llseek(handle, 7, 0)        ! Position to 7 bytes from start
      i = hwrite(handle, str, 16)     ! Overwrite from position 7 on
      i = lclose(handle)
      end

</PRE><h3>FORTIO.DEF</h3>
 
<P>
<PRE>LIBRARY        FORTIO
EXETYPE        WINDOWS 3.1
</PRE>PROTMODE
<PRE>CODE           PRELOAD MOVEABLE DISCARDABLE
DATA           PRELOAD MOVEABLE SINGLE
HEAPSIZE       1024
EXPORTS        WEP @1 RESIDENTNAME
               TESTWRITE
               TESTSEEK
               READBINARY

</PRE><h3>TEST.FOR</h3>
 
<P>
<PRE>       call testwrite
       print *,"testwrite - Created 'test.out' and 'testbf.out'"
       print *, 'Check them out (Hit return to continue)'
       read *
       call readbinary
       print *, "readbinary - Created 'testbf_o.out'"
       print *, 'Check it out (Hit return to continue)'
       read *
       call testseek   ! modify 'test.out'
       print *, "testseek - Modified 'test.out'"
       end

</PRE><h3>HUGE.DEF</h3>
 
<P>
LIBRARY KERNEL
EXPORTS _hread
<PRE>        _hwrite

</PRE><h3>FORTIO.MAK</h3>
 
<P>
all: test.exe
<P>
test.exe: fortio.lib test.obj
<PRE>   link /NOD test.obj, , nul, llibfew + fortio.lib,\
      c:\fortran\binb\fl.def;

</PRE>test.obj: test.for
<PRE>   fl /c /MW test.for

</PRE>fortio.lib: fortio.dll
<PRE>   implib fortio.lib fortio.dll

</PRE>fortio.dll: fortio.obj fortio.def huge.lib
<PRE>   link /NOD fortio.obj, fortio.dll, nul,\
       ldllfew.lib + huge.lib, fortio.def;

</PRE>fortio.obj: fortio.for
<PRE>   fl /c /Aw /Gw fortio.for

</PRE>huge.lib: huge.def
<PRE>   implib huge.lib huge.def
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.10<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

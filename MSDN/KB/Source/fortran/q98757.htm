

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Binary (or Unformatted) I/O Fails, Array Size &gt; 64K </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98757 ">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/05/13">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  An application developed in Microsoft FORTRAN PowerStation that reads or writes an array larger than 64K in size to a binary or unformatted file may read or write an incorrect quantity of data.  CAUSE =====  The application specifies the name of an...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBFN,QBFY,QAR4,QALG,QAKC,QAOX,QBC6,QAG8,QAJH,QBBI,QA8T,QAYL,QAVX,QAVW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Binary (or Unformatted) I/O Fails, Array Size &gt; 64K</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98757 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
MS-DOS
kbtool kbfixlist kbbuglist kberrmsg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation for MS-DOS, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An application developed in Microsoft FORTRAN PowerStation that reads
or writes an array larger than 64K in size to a binary or unformatted
file may read or write an incorrect quantity of data.
<P>
<P><h2>CAUSE</h2>
 
<P>
The application specifies the name of an array without a subscript or
specifies a simple variable for the subscript. The compiler does not
generate the correct code to access the low-level functions that
perform binary or unformatted I/O. Consequently, the application reads
or writes the amount of data specified by the following formula: (size
of array) modulus 64K.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, use an explicit implied DO loop in the
I/O statement. If the array has only one dimension, the array
subscript must be an expression and not a simple variable for the
compiler to generate the correct code. If the array is a
multi-dimensional array, then the normal, multi-dimensional implied DO
loop is sufficient to avoid the problem.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in Microsoft PowerStation
version 1.0. This problem has been resolved with FORTRAN PowerStation
maintenance release version 1.0a for MS-DOS.
<P>
FORTRAN PowerStation version 1.0 can be differentiated from the
maintenance release version 1.0a by invoking the linker. Typing
"link32 | more" from \F32\BIN directory will show version 2.8 for
FORTRAN PowerStation version 1.0, and it will show version 1.0f for
the maintenance release version 1.0a.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code #1</h3>
 
<P>
C Compile options needed: none
C This program generates the following output
C
<PRE>C     Program failed, number of bytes read:           1

      parameter(n = 64 * 1024 + 1)  ! 64K + 1 size
      character*1 arr(n), chr
      integer*4 i

      open(1, file = 'test.dat', form = 'binary')
      arr = 'x'      ! initialize entire array to 'x'
      write(1) arr   ! write entire array
      rewind(1)      ! rewind to read file
      do i = 1, n
        read(1, iostat = ierr) chr ! read a byte at a time
        if (ierr .eq. -1) exit     ! exit at end of file
      end do
      if (i - 1 .ne. n) then
        print *, 'Program failed, number of bytes read: ', i - 1
      else
        print *, 'Program OK, number of bytes read: ', i - 1
      end if
      end

</PRE><h3>Sample Code #2</h3>
 
<P>
C Compile options needed: none
C This program generates the following output
C
<PRE>C     Program OK, number of bytes read:       65537

      parameter(n = 64 * 1024 + 1)  ! 64K + 1 size
      character*1 arr(n), chr
      integer*4 i

      open(1, file = 'test.dat', form = 'binary')
      arr = 'x'      ! initialize entire array to 'x'
      write(1) (arr(i + 0), i = 1, n)   ! note the addition of zero
      rewind(1)      ! rewind to read file
      do i = 1, n
        read(1, iostat = ierr) chr ! read a byte at a time
        if (ierr .eq. -1) exit     ! exit at end of file
      end do
      if (i - 1 .ne. n) then
        print *, 'Program failed, number of bytes read: ', i - 1
      else
        print *, 'Program OK, number of bytes read: ', i - 1
      end if
      end
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 buglist1.00 fixlist1.00a<BR>
KBCategory: kbtool kbfixlist kbbuglist kberrmsg<BR>
KBSubcategory: FL32Iss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

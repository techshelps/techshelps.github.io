

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORTRAN 5.1 README.DOC: Additions to Reference Manual </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q73256 ">
<META NAME="KBModify" CONTENT="1997/07/01">
<META NAME="KBCreate" CONTENT="1991/06/19">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The following is the  Additions to Microsoft Reference Manual  section from the FORTRAN version 5.1 README.DOC:  MORE INFORMATION                              README.DOC File               Release notes for the Microsoft(R) FORTRAN              Pro...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAJQ,QAAP,QAH4,QAHE,QAKR,QAH7,QBV8,QBVV,QAUJ,QAB9,QAH6,QAD7,QAB5,QART V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FORTRAN 5.1 README.DOC: Additions to Reference Manual</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q73256 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10   | 5.10
MS-DOS | OS/2
kbreadme
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS, version 5.1
<LI>Microsoft FORTRAN for OS/2, version 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is the "Additions to Microsoft Reference Manual" section
from the FORTRAN version 5.1 README.DOC:
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<PRE>                            README.DOC File
              Release notes for the Microsoft(R) FORTRAN
             Professional Development System, Version 5.1

</PRE>This document contains release notes for version 5.1 of the Microsoft
FORTRAN Professional Development System for MS-DOS(R) and the
Microsoft Operating System/2 (MS(R) OS/2). The information in this
document is more up-to-date than that in the manuals and the Microsoft
Advisor (online help).
<P>
Microsoft improves its languages documentation at the time of
reprinting, so some of the information in this file may already be in
your manuals.
<P>
=========&lt; Additions to the Microsoft FORTRAN Reference &gt;============
<P>
<P><h3>/Gt option</h3>
 
<P>
The /Gt, or data threshold, compiler option can remedy a number of
link-time and run-time errors in FORTRAN 5.1.  The /Gt option sets a
threshold value that determines where data items are stored in
memory. Data items that are greater in size than the threshold value,
and that would normally be stored in the default data segment, or
DGROUP, are moved to a far segment of data.  This frees up more room
in DGROUP for variables less than the threshold value and for other
uses, such as the program STACK and NEAR HEAP.
<P>
Using the /Gt switch can often help eliminate the LINK errors:
<P>
<PRE>     L1070: 'segment name':Segment exceeds 64K

</PRE>where segment can be _BSS or _DATA
<P>
<PRE>     L2041: Stack Plus Data exceeds 64K

</PRE>and the run-time error:
<P>
<PRE>     F6700: Heap Space Limit Exceeded

</PRE>In each of these cases, too much data is being stored in DGROUP, and
using the /Gt switch may free up the required space.  See Section 7.6
of the FORTRAN 5.1 Reference for more information.
<P>
<P><h3>/Oc Option</h3>
 
<P>
When you use the /Oc (default common subexpression optimization), the
compiler examines only short sections of code for common
subexpressions. You can disable default common subexpression
optimization with the /Od option.
<P>
<P><h3>Special Device Names</h3>
 
<P>
The list of special device names in the FORTRAN Reference Manual is
incomplete.  The complete list of special device names is:
<P>
<PRE>     Device Name              Comments
     ===========              ========
     CON                      stdout, stdin
     USER                     stdout, stdin
     COM1                     COM1 port
     AUX                      COM1 alias
     LINE                     COM1 alias
     LPT1                     stdprn
     PRN                      stdprn
     LPT2
     LPT3
     LPT4
     ERR                      stderr
     NUL                      null device

</PRE>Note that COM2, COM3, and COM4 are not special device names in
FORTRAN 5.1.
<P>
To access these devices, use an OPEN statement of the form:
<P>
<PRE>      OPEN (10, FILE='lpt1')

</PRE>For connections to LPT2 or COM2, you are also required to specify
STATUS='old'.  These two devices are not treated as standard devices
like LPT1 and COM1.  Output to these devices is of the same form as
to a file, i.e. the output is buffered and carriage control
characters in column 1 are ignored.
<P>
** NOTE ** The above section of the README.DOC is incorrect.  LPT2-4
are treated as special device names by FORTRAN 5.10 and do not
require STATUS='OLD', nor do they ignore carriage control.  The above
information still applies to COM2-4, however.
<P>
<P><h3>/ND Option</h3>
 
<P>
When using the /ND option in a module, you must also set the loadds
attribute on all subprograms called from outside the module.
<P>
<P><h3>Restrictions on String Assignment</h3>
 
<P>
The right and left sides of a string assignment may not reference the
same memory location.  For example, the following may fail because
the generated code overlays the input as it produces the output:
<P>
<PRE>     character *10 string/'0123456789'
     string = '#' // string
     write (*,*) 'string = ' string
     end

</PRE>IBM VS Extensions in Microsoft FORTRAN
 
<P>
Microsoft FORTRAN supports only the following IBM VS FORTRAN
extensions:
<P>
- 31-character names
- Allowing integer arrays to contain FORMAT specifications
- DO statements without specified labels
- DO WHILE statement
- END DO statement
- Equivalence of character and non character items
- Mixing of character and non-character items in COMMON
- NAMELIST
- Specification of common block items in DATA outside block data
<PRE>    subprograms
</PRE>- Initialization on the declaration line
- IMPLICIT NONE
- INCLUDE
- Length specification within declarations
- Noninteger array subscripts
- Z edit descriptor
- ! comments
- $ and _ in identifiers
<P>
<P><h3>$NOTRUNCATE Metacommand</h3>
 
<P>
$NOTRUNCATE is now the default. As a result, it is possible to create
variable names, common block names, and function or subroutine names
that are longer than the 26-character space allotted in a .LST file.
If these identifiers do not differ in the first 26 characters, the
.LST file shows them with the same name.
<P>
<P><h3>New NINT Functions</h3>
 
<P>
Three NINT intrinsic functions have been added: NINT1, NINT2, and
NINT4. These return integer values of one, two, and four bytes
respectively.
<P>
<P><h3>The /4I2 Switch and the INT and NINT Functions</h3>
 
<P>
The length of the value returned by the INT and NINT intrinsic
functions is determined by the integer storage switch: two bytes if
/4I2 is used, four bytes if /4I4 (the default) is used.
<P>
If you want these functions to return a value with a length different
from the length set by the integer storage switch, use INT1, INT2, or
INT4 instead of INT, and use NINT1, NINT2, or NINT4 instead of NINT.
<P>
<P><h3>80387 Coprocessor Instructions</h3>
 
<P>
The run-time libraries recognize the presence of an 80387
coprocessor. If you are not using the alternate math package, the
library uses the 80387 SIN and COS instructions, rather than deriving
sines and cosines from the FPTAN instruction.
<P>
<P><h3>Array Conformity in Functions and Subroutines</h3>
 
<P>
A formal array argument in a subroutine or function does not have to
have the same number of dimensions or total size as the actual array
argument passed to it. This permits the procedure to contain a formal
array that is as large as you think you will ever need; the calling
program can then pass any array of the same size or smaller.
<P>
Note, however, that if the formal and actual dimensions do not match
in quantity and size, the formal array elements do not point to the
same memory locations as the actual array elements with the same
subscripts. In this case, your program has to calculate the correct
subscripts.
<P>
<P><h3>"Out of Memory" Error Message</h3>
 
<P>
This compiler error does not have an error number. It occurs when the
FL program does not have sufficient memory, as in the following
cases:

<OL><P><LI>You used wildcard characters to specify the files to be compiled
</OL>(for example, FL *.FOR) and there were too many files. The exact
number of files that can be handled depends on the amount of system
memory.

<OL><P><LI>The computer did not have enough free memory. This may occur when
</OL>other processes are running under Microsoft Windows or OS/2.
<P>
<P><h3>Additional Compiler Error Messages</h3>
 
<P>
F2399: &lt;name&gt; : COMMON (or EQUIVALENCE) : automatic variable illegal.
<P>
A variable previously declared as AUTOMATIC cannot appear in a COMMON
block or an EQUIVALENCE statement.
<P>
<P>
F4187: Debugging information exceeds 64K - extra ignored.
<P>
There was more debugging information than could fit in the allotted
64K space. The additional information (which is usually symbols) was
discarded.
<P>
<P><h3>Revised Compiler Error Message</h3>
 
<P>
The &lt;attribute&gt; in error message F2384 can be "common block" or
"equivalenced," in addition to ALLOCATABLE, EXTERN, FAR, or HUGE.
<P>
<P><h3>Linker Path Specification</h3>
 
<P>
The /link option does not allow you to specify the linker's path. FL
assumes the linker is in the same directory as the compiler.
<P>
<P><h3>FL Switch Default Values</h3>
 
<P>
If no switches appear in the FL command line, the source code is
compiled with the following defaults:

<OL><P><LI>The Large memory model is used
</OL>2. The 8086/8088 instruction set is used
3. 8087/287/387 in-line instructions are used for floating-point
<PRE>   calculations
</PRE></OL>4. Variable, subroutine, or function names are not truncated
5. All integer and single-precision floating-point numbers are four
<PRE>   bytes
</PRE>6. All Microsoft extensions to FORTRAN are enabled
7. FORTRAN 66-style DO statements are disabled
8. Full optimization is performed
9. Debugging (extended run-time error handling) is disabled
<P>
Any metacommands in a source code file override these defaults.
<P>
<P><h3>Compiling Extremely Large Programs</h3>
 
<P>
This release contains the file F1L.EXE, which is an alternate form of
the Compiler Pass 1 disk if you need it.
<P>
This compiler pass is used to compile programs that receive error
message "F1901: program too large for memory." The F1L.EXE pass is
invoked by adding the /B1 option to the FL command line, as follows:
<P>
<PRE>     FL  /B1  F1L.EXE  &lt;sourcefile&gt;.FOR

</PRE>where &lt;path&gt; is the path (including drive and directory) where
F1L.EXE resides, and &lt;sourcefile&gt; is the name of the FORTRAN source
file you are compiling. Alternatively, you can rename F1L.EXE to
F1.EXE to make the high-capacity version the default.
<P>
<P><h3>Compiler Errors and Warnings Generated by $DEBUG and /4Yb</h3>
 
<P>
In addition to the expanded run-time error handling and testing
that $DEBUG and /4Yb enable, there are a number of compiler errors
and warnings that appear if $DEBUG or /4Yb are used. They are:
<P>
Error F2367: INTEGER : range error
Error F2533: lower substring bound exceeds upper bound
Error F2534: upper substring bound exceeds string length
Error F2535: lower substring bound not positive
Error F2536: subscript out of range
Warning F4501: subscript out of range (array argument)
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.10<BR>
KBCategory: kbreadme<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORTRAN PowerStation 32 QUICKWIN.TXT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133106">
<META NAME="KBModify" CONTENT="1995/07/25">
<META NAME="KBCreate" CONTENT="1995/07/24">
<META NAME="Keywords" CONTENT="kbreadme">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  The following information is from the Microsoft FORTRAN PowerStation 32 QUICKWIN.TXT file located in the \FPSNT\README directory.  This file has three parts:       Part     Contents      ----     --------       1       Writing QuickWin Programs    ...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAY5,QBWP,QBV8,QAB9,QBJZ,QAGI,QDL9,QBWQ,QBWO,QBWN,QAYZ,QA9N,QAH4,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FORTRAN PowerStation 32 QUICKWIN.TXT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133106</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation 32 for Windows NT, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information is from the Microsoft FORTRAN PowerStation 32
QUICKWIN.TXT file located in the \FPSNT\README directory.
<P>
This file has three parts:
<P>
<PRE>     Part     Contents
     ----     --------
      1       Writing QuickWin Programs
      2       Running QuickWin Programs
      3       Differences in QuickWin

</PRE><h2>MORE INFORMATION</h2>
 
<P>
================&lt; Part 1: Writing QuickWin Programs &gt;==================
<P>
<P><h3>STOP and PAUSE use Default Window</h3>
 
The STOP and PAUSE statements use the default window (typically the
Graphic1 window) under QuickWin. Because the default window has
IOFOCUS=.FALSE., this window does not have the focus when one of
these statements is executed. This can cause confusion if another
window is on top because the STOP or PAUSE output is not visible.
<P>
A workaround is to change the focus to the default window before
executing one of these commands (with FOCUSQQ(0)).
<P>
<P>
<P><h3>Access to True Windows Handles</h3>
 
Some Win32 API calls require the true Windows handle to the window to
do work upon. You can obtain these handles by calling GETHANDLEFRAMEQQ,
GETHANDLECLIENTQQ, and GETHANDLECHILDQQ, which return the Windows
handle to the frame, client area, and child window, respectively. Note
that the Windows handle is different from the QuickWin handle (provided
by a call to GETHANDLEQQ).
<P>
All three routines return type INTEGER*4. Only GETHANDLECHILDQQ takes
an argument, which is the QuickWin handle returned by GETHANDLEQQ for a
particular child window. All three have interfaces in FLIB.FI and
FLIB.FD, two libraries that are included in Microsoft FORTRAN.
<P>
For information on using the Win32 API, consult the Win32 API
Programmer's Reference, available from Microsoft Press.
<P>
An example program:
<P>
<PRE>   INCLUDE 'flib.fi'
   PROGRAM Windows_Handle_Sample
   INCLUDE 'flib.fd'

   OPEN(unit=20,file='USER')
   WRITE (20,*) 'This opens the Window'

   WRITE(*,10) GETHANDLEFRAMEQQ()
   WRITE(*,20) GETHANDLECLIENTQQ()
   WRITE(*,30) GETHANDLECHILDQQ(GETHANDLEQQ(6))
   WRITE(*,40) GETHANDLECHILDQQ(GETHANDLEQQ(20))
   WRITE(*,50) GETHANDLECHILDQQ(GETHANDLEQQ(30))

10     FORMAT(' Frame Handle:          ',Z8)
20    FORMAT(' Client Area:           ',Z8)
30   FORMAT(' Unit 6:                ',Z8)
40   FORMAT(' Unit 20:               ',Z8)
50   FORMAT(' Unit 30 (returns -1):  ',Z8)      ! -1 for bad unit

   END


</PRE>================&lt; Part 2: Running QuickWin Programs &gt;==================
<P>
<P><h3>Using DLLs with QuickWin</h3>
 
Driver switches /MD and /LD are incompatible with /MW (QuickWin),
because QuickWin must be linked with a static library (via /ML or /MT).
When using DLLs with QuickWin, there will be two copies of the run-time
libraries present in the executable: one for QuickWin and one for the
DLL.  For this reason, file units in QuickWin cannot be shared with
file units in DLL libraries, and therefore DLLs cannot write to
QuickWin child windows.  Console I/O is also not possible from the DLL
because there is no console. However, file I/O from the DLL is allowed.
<P>
<P>
<P><h3>Size-to-Fit/Full-Screen Delay</h3>
 
On slower computers, switching between Size-To-Fit and Full-Screen modes
in a FORTRAN application takes some time.  During this interval, the
cursor disappears.
<P>
<P>
<P><h3>Unresponsive QuickWin Menus and Windows</h3>
 
The main thread (the one which executes the main program of a QuickWin
application) is responsible for handling the Windows messages for the
application, through imbedded calls to YIELDQQ.  Therefore, if this
thread is blocked for any reason, the menu response, resizing, and even
repainting will not happen until the main thread is no longer blocked.
Threads can be blocked for a number of reasons, such as for a breakpoint
in the debugger, by executing a SLEEPQQ, or by executing a
WAITFORMULTIPLEOBJECTS when doing multithreading.
<P>
<P>
<P><h3>Greater Than 256 Color Display Drivers</h3>
 
QuickWin can only support up to 256 colors in a palette, even if the
underlying display driver can handle more colors than this.
<P>
<P>
<P><h3>Menus and Windows Appear at First Graphics Call</h3>
 
The menu of a QuickWin application will not appear until the first
graphics call or SETWINDOWCONFIG is called. Until then, only the File
menu item will be present. Child windows will also not be displayed
until a graphics call or SETWINDOWCONFIG for that particular window.
<P>
<P>
Copy and Paste under QuickWin
 
Because QuickWin windows now support both text and graphics, performing
a Copy command from the Edit menu copies a bitmap of the currently
active window. The Cut command does not cut text, even if there is only
text in the window. The Paste command does paste text to be read by the
READ statement.
<P>
<P>
<P><h3>Occasional ARC drawing problem</h3>
 
The ARC (and ARC_W) routine may occasionally fail to draw some of the
pixels adjacent to the arc end points (the end points will be set in
all cases). If using FLOODFILL, this gap can cause the fill to
"escape." In many cases, you can use the PIE routine instead because
it does not exhibit this problem.
<P>
<P>
=================&lt; Part 3: Differences in QuickWin &gt;===================
<P>
<P><h3>Differences between FPSNT and FPS/DOS (F32)</h3>
 
<P>
1) FPS NT  INTEGER*4 FUNCTION  SAVEIMAGE (fname,x1,y1,x2,y2)
<PRE>           INTEGER*4 x1,y1,x2,y2
   F32     INTEGER*2 FUNCTION  SAVEIMAGE (fname,x1,y1,x2,y2)
           INTEGER*2 x1,y1,x2,y2

</PRE>2) FPS NT  INTEGER*4 FUNCTION  SAVEIMAGE_W(fname,wx1,wy1,wx2,wy2)
<PRE>           REAL*8 wx1,wy1,wx2,wy2
   F32     INTEGER*2 FUNCTION  SAVEIMAGE_W(fname,wx1,wy1,wx2,wy2)
           REAL*4 wx1,wy1,wx2,wy2

3) FPS NT  INTEGER*4 FUNCTION   LOADIMAGE(fname,x,y)
           INTEGER*4 x,y
   F32     INTEGER*2 FUNCTION   LOADIMAGE(fname,x,y)
           INTEGER*2 x,y

4) FPS NT  INTEGER*4 FUNCTION   LOADIMAGE_W(fname,wx,wy)
           REAL*8 wx,wy
   F32     INTEGER*2 FUNCTION   LOADIMAGE_W(fname,wx,xy)
           REAL*4 wx,wy

</PRE>These graphics functions did not exist in Fortran 5.1
<P>
(This note does not contain the full interface to the function. Only
parts that show differences are presented here.)
<P>
<P>
<P><h3>Interface Differences between FPS NT and Fortran 5.1</h3>
 
1) FPS NT  INTEGER*4 FUNCTION FOCUSQQ(INTEGER*4 IUNIT)
<PRE>   F5.1    INTEGER*2 FUNCTION FOCUSQQ(INTEGER*2 IUNIT)

</PRE>2) FPS NT  INTEGER*4 FUNCTION INQFOCUSQQ(INTEGER*4 IUNIT)
<PRE>   F5.1    INTEGER*2 FUNCTION INQFOCUSQQ(INTEGER*2 IUNIT)

</PRE>3) FPS NT  INTEGER*4 FUNCTION ABOUTBOXQQ(CHARACTER*(*)STR)
<PRE>   F5.1    INTEGER*2 FUNCTION ABOUTBOXQQ(CHARACTER*(*)STR)

</PRE>4) FPS NT  INTEGER*4 FUNCTION CLICKQQ(INTEGER*4 ITEM)
<PRE>   F5.1    INTEGER*2 FUNCTION CLICKQQ(INTEGER*2 ITEM)

</PRE>5) FPS NT  INTEGER*4 FUNCTION SETWSIZEQQ(INTEGER*4 IUNIT, WINFO)
<PRE>   F5.1    INTEGER*2 FUNCTION SETWSIZEQQ(INTEGER*2 IUNIT, WINFO)

</PRE>6) FPS NT  INTEGER*4 GETWSIZEQQ(INTEGER*4 IUNIT,INTEGER*4 IREQ,WINFO)
<PRE>   F5.1    INTEGER*2 GETWSIZEQQ(INTEGER*2 IUNIT,INTEGER*2 IREQ,WINFO)

</PRE>7) FPS NT  INTEGER*4 FUNCTION MESSAGEBOXQQ(MSG,CAPTION, INTEGER*4 MTYPE)
<PRE>   F5.1    INTEGER*2 FUNCTION MESSAGEBOXQQ(MSG,CAPTION, INTEGER*2 MTYPE)

</PRE>8) FPS NT  INTEGER*4 FUNCTION WGSETACTIVEQQ(handle)
<PRE>           INTEGER*4 handle
   F5.1    INTEGER*2 FUNCTION WGSETACTIVEQQ(handle)
           INTEGER*2 handle

</PRE>9) FPS NT  INTEGER*4 FUNCTION WGGETACTIVEQQ()
<PRE>   F5.1    INTEGER*2 FUNCTION WGGETACTIVEQQ()


</PRE>Starting from the MS-DOS Command Line  (page 114 in 5.1 Advanced Topics)
 
Run QuickWin programs from the Windows NT command prompt simply by typing
the application's name.  Doing so will launch the application and switch
to graphics mode if necessary.  Unless you use the Windows NT START
command, that command prompt will not be accessible until after the
application terminates.
<P>
<P>
QuickWin Windows  (page 118 in 5.1 Advanced Topics)
 
Window contents are now copied to the Clipboard only as bitmaps
(graphics);  text windows are no longer supported.
<P>
READ statements no longer cause windows to scroll down.
<P>
The default color for text is now white on black.
<P>
<P>
The QuickWin Menus  (page 119-21 in 5.1 Advanced Topics)
 
The View menu is new for NT. This menu provides scaling options.
<P>
The File menu includes two new options: Print and Save.
<P>
Since text windows no longer exist, the Edit menu now includes just
Copy and Paste.
<P>
Marking is no longer necessary since copying always takes the entire
drawing area.
<P>
The State menu has combined the Pause and Resume commands into a single
option, which simply toggles the program's execution state. The label
of this option changes as appropriate.
<P>
To conform to Windows programming conventions, the Index option in the
Help menu has been renamed "Contents."
<P>
<P>
QuickWin Enhancements  (page 122 in 5.1 Advanced Topics)
 
The FILE=" " parameter for the OPEN statement now brings up the
standard Windows File Open dialog box.
<P>
There are new menu functions for appending, deleting, and renaming menu
items. See the FORTRAN Language Help file for additional details.
<P>
<P>
Graphics Library Routines  (page 179 in 5.1 Advanced Topics)
 
OS/2 support is no longer provided.
<P>
QuickWin now supports all graphics cards supported by Windows NT. EGA
and CGA are no longer supported.
<P>
<P>
Selecting Display Options  (page 181 in 5.1 Advanced Topics)
 
SETVIDEOMODE, SETVIDEOMODEROWS, SETVISUALPAGE, GETVISUALPAGE,
SETATIVEPAGE, and GETACTIVEPAGE are now obsolete.  These routines
are provided for backward compatibility, but the newer alternate
APIs should be used in new code.
<P>
DISPLAYCURSOR settings are reset by a call to SETWINDOWCONFIG to
$GCURSOROFF.
<P>
<P>
<P><h3>General topics</h3>
 
The YIELDQQ function, which was required under Win16 to allow the
application to cooperate in multitasking, is still useful, even though
Windows NT is a fully preemptive multitasking operating system.  The
application must yield at some point to allow the application to
respond to its own menus, including the system menu.  The compiler
still inserts YIELDQQ statements into the generated object code when
an application is compiled with /MW unless the option is changed to
/MW0.  You can insert additional calls to YIELDQQ in loops where you
might want to interact with menus and windows.
<P>
Callback functions used for menu items must be declared to accept a
LOGICAL*4 argument even though the function does not intend to use
menu checkmarks.  If you fail to declare the function correctly, a
memory access violation will occur when you select the menu item
calling that callback function.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

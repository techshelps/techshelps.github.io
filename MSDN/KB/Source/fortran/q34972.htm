

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How FORTRAN Maintains String Lengths </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q34972 ">
<META NAME="KBModify" CONTENT="1995/07/19">
<META NAME="KBCreate" CONTENT="1988/08/30">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  In ANSI FORTRAN, an application can pass character variables of varying lengths to a subprogram by using the CHARACTER*(*) type declaration in the subprogram. To use this technique, the subprogram must have access to the strength length. In Microso...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAYL,QAUD,QAC2,QA4Q,QAPN,QAKD,QAGI,QBFY,QAY5,QACI,QBV8,QAR5,QBVV,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How FORTRAN Maintains String Lengths</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 19, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q34972 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS, versions 4.0, 4.01, 4.1, 5.0, 5.1
<LI>Microsoft FORTRAN for OS/2, versions 4.1, 5.0, 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In ANSI FORTRAN, an application can pass character variables of varying
lengths to a subprogram by using the CHARACTER*(*) type declaration in
the subprogram. To use this technique, the subprogram must have access
to the strength length. In Microsoft FORTRAN, this information is
stored in an array of two-byte integers in a memory location that the
__FCclenv global variable points to. When a calling program calls a
subprogram that has character arguments, the string length table is
updated with the lengths of the parameter strings in the order in
which the arguments appear in the call or function reference. The
table reflects the length of each string argument because the calling
routine does not know in advance if the called subprogram declares the
character data as a fixed length or varying length string. The first
position in the table is reserved for the size of the string returned
from a character function. If the subprogram does not return a
character value, the first position in the table is undefined and
contains an arbitrary value.
<P>
Because the __FCclenv global variable contains the address of the
table of string lengths, the variable itself does not provide any
useful information. View the string length table by dereferencing the
value. Because FORTRAN does not define a method to deference a
pointer, another method is required. If an INTERFACE statement
declares a subprogram to receive an argument by value and the variable
in the subprogram is defined without the [value] attribute, the
subprogram receives the dereferenced value which it can return to its
caller. The subroutine must be declared in a separate file to avoid a
compiler error for the intentional mismatch in calling methods.
<P>
NOTE: __FCclenv is not defined in FORTRAN PowerStation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example demonstrates viewing the contents of the FORTRAN
string table.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
C Compiler options required: None
C The function deref dereferences the address contained in __FCclenv.
<P>
<PRE>      INTERFACE TO INTEGER*2 FUNCTION DEREF(ADDRESS)
      INTEGER ADDRESS[VALUE]
      END

      CHARACTER*17 A
      CHARACTER*13 B
      CHARACTER*30 STRINGFUN

      A = 'AAAAAAAAAAAAAAAA '
      B = 'BBBBBBBBBBBBB'
      PRINT*, STRINGFUN(A,B)
      END

      CHARACTER*(*) FUNCTION STRINGFUN(A,B)
      CHARACTER*(*) A,B

</PRE>C Declare the __FCclenv global variable as follows.
<P>
<PRE>      INTEGER*4 FCCLENV[ALIAS:'__FCCLENV',EXTERN]
      INTEGER*2 DEREF

</PRE>C The following line prints the first 3 positions in the string
C length table. Because __FCclenv is an address, adding 2 moves the
C address to the next element in the table.
<P>
<PRE>      PRINT*, DEREF(FCCLENV), DEREF(FCCLENV+2), DEREF(FCCLENV+4)
      STRINGFUN = A//B
      RETURN
      END


</PRE>The following function dereferences __FCclenv and returns the integer
value in the string length table. Place this code into a separate file
from Sample Code #1.
<P>
<P><h3>Sample Code #2</h3>
 
<P>
C Compiler options required: None
<P>
<PRE>      INTEGER*2 FUNCTION DEREF(ADDRESS)
      INTEGER ADDRESS
      DEREF = ADDRESS
      RETURN
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10 5.00 5.10 global array kbinf<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 19, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

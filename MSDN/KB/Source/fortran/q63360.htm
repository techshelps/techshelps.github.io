

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: INTEGER*2 Multiply by Power of 2 Produces Wrong Results </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q63360 ">
<META NAME="KBModify" CONTENT="1997/09/11">
<META NAME="KBCreate" CONTENT="1990/06/26">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  An application that multiplies an INTEGER*2 variable by an integer constant that is a power of 2 produces incorrect results. Specifying the /4I4 compiler option switch does not have any effect on the results. Compiling the code with the /4Yb option...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAH4,QA4Q,QAL3,QAAP,QAR4,QAMN,QBVV,QBF0,QAOT,QAKJ,QAKP,QBV8,QBB2,QA5C V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: INTEGER*2 Multiply by Power of 2 Produces Wrong Results</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q63360 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.00   | 5.00
MS-DOS | OS/2
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS and OS/2, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An application that multiplies an INTEGER*2 variable by an integer
constant that is a power of 2 produces incorrect results.
Specifying the /4I4 compiler option switch does not have any effect
on the results. Compiling the code with the /4Yb option and running
the application does not provide any indication of a problem.
Compiling the code with the /Od option to disable optimizations and
running the application does not change the behavior.
<P>
<P><h2>CAUSE</h2>
 
<P>
The compiler generates incorrect code when the result of the
multiplication is larger than the range of an INTEGER*2 variable
(-32,768 to 32,767).
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To address this problem, perform one of the following steps:

<UL><LI>Modify the source code to use the INT4 intrinsic function to
   convert the INTEGER*2 variable to an INTEGER*4 variable in the
   expression.

<LI>Modify the source code to assign the INTEGER*2 variable to a
   temporary INTEGER*4 variable. Use the temporary variable in the
   expression.

<LI>Modify the source code to assign the integer constant to a
   temporary variable. Use the temporary variable in the
   expression.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in FORTRAN version 5.0
for MS-DOS and OS/2. This problem was corrected in FORTRAN version
5.1 for MS-DOS and OS/2.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This error occurs when the result of the multiplication is larger than
the range of an INTEGER*2 variable (-32,768 to 32,767). The compiler
generates a shift instruction (SHL) to perform a fast multiply. The
compiler does not use a four byte work space when it performs the
shift; instead, it allocates only two bytes for its work space. Under
these circumstances, significant bits can be lost or shifted into the
sign bit when magnitude of the result of the multiplication is too
large for an INTEGER*2 variable.
<P>
The following code example demonstrates this problem and one technique
to work around it.
<P>
<P><h3>Sample Code</h3>
 
<P>
C Compile options needed: None
<P>
<PRE>      INTEGER*2 K/1234/
      INTEGER*2 M/32/, N/33/
      WRITE(*, *) K*32, K*33 ! Displays incorrect results for K*32
      WRITE(*, *) K*M, K*N   ! Displays correct results for K*M
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 buglist5.00 fixlist5.10<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubCategory: FLIss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Large BLOCK DATA Subprogram Compiles Slowly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106731">
<META NAME="KBModify" CONTENT="1995/12/11">
<META NAME="KBCreate" CONTENT="1993/11/14">
<META NAME="Keywords" CONTENT="kbtool kbprb">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  Compilation of a large BLOCK DATA subprogram can take a very long time using the FORTRAN PowerStation. In tests, a BLOCK DATA subprogram with 32,000 DATA statements took approximately 45 minutes to compile on a 50 megahertz (MHz) 486 machine.  CAUS...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYY,QAHC,QAPN,QAMR,QALX,QAGC,QAB9,QAPF,QAA8,QBFY,QA5V,QAU3,QACE,QAB6,QAFH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Large BLOCK DATA Subprogram Compiles Slowly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 11, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106731</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation for MS-DOS, version 1.0 and 1.0a
<LI>Microsoft FORTRAN PowerStation 32 for Windows NT, version 1.0 and
   4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Compilation of a large BLOCK DATA subprogram can take a very long time
using the FORTRAN PowerStation. In tests, a BLOCK DATA subprogram with
32,000 DATA statements took approximately 45 minutes to compile on a
50 megahertz (MHz) 486 machine.
<P>
<P><h2>CAUSE</h2>
 
<P>
This slow compilation is caused by initializing a large array in a
BLOCK DATA subprogram with several DATA statements. One DATA statement
for each array element produces the slowest compile. The array
elements must also be initialized in the order that they appear in the
array for the slow compilation to occur.
<P>
FORTRAN PowerStation uses the COFF object file format. Because COFF
requires that every element of an array be enumerated exactly once,
all the data records (which are generated for each DATA statement in
the BLOCK DATA) are sorted. The sorting algorithm is least efficient when
the records are already sorted and most efficient when they are in reverse
order.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If array elements are initialized in the reverse order that they
appear in the array, compilation time will be significantly reduced
(for example, reduced from 45 minutes to 3 minutes). Reducing the
number of DATA statements by initializing thousands of array elements
in a single DATA statement also reduces compile time.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample BLOCK DATA subprograms illustrate the problem and
one possible resolution:
<P>
<P><h3>Sample Code #1</h3>
 
<P>
C This sample illustrates the problem by initializing a large array,
C one element at a time, in the order the elements appear in the array.
<PRE>      BLOCK DATA INITME
      COMMON /BIGCOM/ ARRAY(40000)
      DATA ARRAY(1)/1.5/
      DATA ARRAY(2)/7.4/
      .
      .                     ! 39996 DATA statements go here
      .
      DATA ARRAY(39999)/0.4/
      DATA ARRAY(40000)/12.0/
      END

</PRE><h3>Sample Code #2</h3>
 
<P>
C This sample initializes the array elements in reverse order to
C alleviate the problem.
<PRE>      BLOCK DATA INITME
      COMMON /BIGCOM/ ARRAY(40000)
      DATA ARRAY(40000)/12.0/
      DATA ARRAY(39999)/0.4/
      .
      .                      ! 39996 DATA statements go here
      .
      DATA ARRAY(2)/7.4/
      DATA ARRAY(1)/1.5/
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 4.00 hang<BR>
KBCategory: kbtool kbprb<BR>
KBSubcategory: FLIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 11, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

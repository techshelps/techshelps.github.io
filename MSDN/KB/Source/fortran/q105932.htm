

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: String Concatenation May Cause Memory Errors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105932">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/10/28">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  Character string concatenations that involve the automatic creation of temporary variables may cause the following memory related run-time problems:   - Very slow execution of the application  - F6700  - DX2010  RESOLUTION  This memory loss can be ...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QATX,QAMB,QAC2,QAAP,QAB4,QAYL,QAR4,QAKP,QBW6,QBF0,QAKD,QAC1,QDOD,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: String Concatenation May Cause Memory Errors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105932</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.00a
MS-DOS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN PowerStation for MS-DOS, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Character string concatenations that involve the automatic creation of
temporary variables may cause the following memory related run-time
problems:

<UL><LI>Very slow execution of the application
<LI>F6700
<LI>DX2010
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
This memory loss can be avoided by assigning the concatenated strings
to a temporary character string variable.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in FORTRAN PowerStation
version 1.0. This problem has been resolved with FORTRAN PowerStation
maintenance release version 1.0a for MS-DOS.
<P>
FORTRAN PowerStation version 1.0 can be differentiated from the
maintenance release version 1.0a by invoking the linker. Typing
"link32 | more" from \F32\BIN directory will show version 2.8 for
FORTRAN PowerStation version 1.0, and it will show version 1.0f for
the maintenance release version 1.0a.
<P>
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following two sample programs demonstrate a memory loss due to
string concatenation in the argument list. In both of the following
examples, using a temporary variable for the concatenated strings avoids
the memory leak.
<P>
<P><h3>Sample Code 1</h3>
 
<P>
C Compile options needed: none
<PRE>      character*40 c1,c2
      c1 = 'abcd'
      c2 = 'efgh'
      k = 0
      do i=1,500000
        if(c1//c2 .eq. 'Never') k = k + 1
      end do
      end

</PRE>The code above will run very slowly, and eventually generate:
<P>
<PRE>   run-time error F6700
   - heap space limit exceeded

</PRE><h3>Sample Code 2</h3>
 
<P>
C Compile options needed: none
<PRE>      character fmtout*20,label(1,3)*(9)
      double precision value

      data (label(1,j),j=1,3)/' Label',' Output',' Test'/
      data value/3.14159/

      fmtout='f10.3'
      write(6,'(3a,''='','//fmtout//')')(label(1,j),j=1,3),value

      end

</PRE>The above code on execution will generate:
<P>
<PRE>   DOSXMSF : error DX2010: invalid pointer passed to free or realloc :
   0005F0F8h.
   DOSXMSF : error DX2010: invalid pointer passed to free or realloc :
   0005F0F8h.
   Label    Output   Test    =     3.142

</PRE>The code does run to completion because this type of DOS-extender error
is not fatal.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 buglist1.00 fixlist1.00a<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: FLIss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

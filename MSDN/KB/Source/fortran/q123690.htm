

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using INTDOSQQ for Keyboard Input in FORTRAN 5.1 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123690">
<META NAME="KBModify" CONTENT="1995/07/19">
<META NAME="KBCreate" CONTENT="1994/12/07">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  This article provides information and sample code on how to check for the presence of keyboard input and get the keybord input with (or without) echoing the keys to the screen.  MORE INFORMATION  Page 273 of the Microsoft FORTRAN version 5.1  Refer...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAY5,QAGI,QAH7,QAH6,QBV8,QAD7,QAEF,QA4Q,QAB9,QAYY,QAH4,QAWK,QAIF,QA8T V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using INTDOSQQ for Keyboard Input in FORTRAN 5.1</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 19, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123690</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN Compiler for MS-DOS, version 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides information and sample code on how to check for the
presence of keyboard input and get the keybord input with (or without)
echoing the keys to the screen.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Page 273 of the Microsoft FORTRAN version 5.1 "Reference" manual explains
how to use the INTDOSQQ and INTDOSXQQ subroutines to invoke MS-DOS
Interrupt 21h system calls. Two of these Int 21h functions, functions 7 and
8, get input from the keyboard without echoing that input to the display.
The difference between these two functions is that function 7 ignores
CTRL+C and CTRL+BREAK characters while function 8 handles these characters
by breaking out of the program. The function B (hex) checks to see if a key
was pressed. It will return true if a key is waiting to be read, and false
if it is called after all of the keys have been read.
<P>
<P><h3>What the Sample Code Does</h3>
 
<P>
The sample code function GETCH uses MS-DOS Int 21h, function 8 to get a
character from Standard Input without echoing it to the screen.
<P>
The sample code subroutine PUTCHAR uses Int 21h function 2 to write a
single character to the screen.
<P>
The sample code PASSWORD uses GETCH to allow input of a password without
echoing the keystrokes to the display. PUTCHAR is used to display an
asterisk for each keystroke entered.
<P>
The sample code function KBHIT uses Int 21h function B(hex) to check if a
key was pressed. It returns 0 if no key is available and returns non-zero
if a key was pressed. Use GETCH to get the key(s).
<P>
NOTE: If several of the routines are put into the same file, then the
statement:
<P>
<PRE>   include 'flib.fi'

</PRE>should only be included once at the beginning of that file. (FLIB.FD needs
to be included in each subroutine, but FLIB.FI does not.)
<P>
<P><h3>Sample Code: GETCH</h3>
 
<P>
C Compile options needed: none
<P>
<PRE>      include 'flib.fi'
      integer*2 function getch
      include 'flib.fd'
      record /regs$info/ in,out
      in.bregs.ah=#08             ! Function 8 - STDIN Input (no echo)
      call intdosqq(in,out)       ! Int 21h
      getch=out.bregs.al          ! Input data returned in AL
      return
      end

</PRE><h3>Sample Code: PUTCHAR</h3>
 
<P>
C Compile options needed: none
<PRE>      include 'flib.fi'
      subroutine putchar( ch )
      include 'flib.fd'
      record /regs$info/ in,out
      character*1 ch
      in.bregs.ah=#02             ! Function 2 - Display Output
      in.bregs.dl=ch              ! Character to display goes in DL
      call intdosqq(in,out)       ! Int 21h
      return
      end

</PRE><h3>Sample Code: PASSWORD</h3>
 
<P>
C Compile options needed: none
<P>
<PRE>      include 'flib.fi'
      program password
      character*80 pass
      logical get_pass/.true./
      integer*2 i,j,getch

      write(*,'(1x,a,\)') 'ENTER PASSWORD &gt; '
      i=1
      do while (get_pass)
         j=getch()                  ! Get a character of the password
         if (j.le.32) then
            if (j.eq.8.and.i.gt.1) then ! BACKSPACE key pressed
               i=i-1
               call putchar( char(j) )! Move cursor back one character
               call putchar( ' ' )    ! Write a blank over the asterisk
               call putchar ( char(j) )! Move cursor back to blanks
               pass(i:i+1) = '  '
            endif
            if (j.eq.13) get_pass=.false.! ENTER key pressed -- exit
         else
            call putchar( '*' )        ! Echo asterisk to display
            pass(i:i)=char(j)          ! Add input character to string
            i=i+1
            if (i.gt.80) get_pass=.false. ! Don't write past string end
         endif
      enddo
      write(*,*)
      write(*,*) 'password entered &gt; ',pass
      end

</PRE><h3>Sample Code: KBHIT</h3>
 
<P>
C Compile options needed: none
<P>
<PRE>      include 'flib.fi'
      integer*2 function kbhit
      include 'flib.fd'
      record /regs$info/ in,out
      in.bregs.ah=#0B             ! Function B - Get STDIN Status
      call intdosqq(in,out)       ! Int 21h
      kbhit=out.bregs.al          ! Input data returned in AL
      return
      end

</PRE><h2>REFERENCES</h2>
 
<P>
For detailed information about the various Int 21h functions, consult any
MS-DOS programmer's reference manual.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.10 getc getchar console putc<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 19, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

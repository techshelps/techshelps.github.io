

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPNOTE: Accessing Command-Line Arguments with FORTRAN </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q65236 ">
<META NAME="KBModify" CONTENT="1995/07/17">
<META NAME="KBCreate" CONTENT="1990/08/24">
<META NAME="Keywords" CONTENT="kbprg kbappnote">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  An application note titled  Accessing Command-Line Arguments with FORTRAN,  which explains how to access the command-line arguments under Microsoft FORTRAN versions 4.00, 4.01, and 4.10, is available from Microsoft Product Support Services.  This f...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAH4,QBDM,QAPN,QAJH,QBQU,QAH6,QAHE,QAB9,QBXT,QA5V,QAIB,QBV8,QAIJ,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>APPNOTE: Accessing Command-Line Arguments with FORTRAN</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q65236 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS, versions 4.0, 4.01, and 4.1
<LI>Microsoft FORTRAN for OS/2, versions 4.0, 4.01, and 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An application note titled "Accessing Command-Line Arguments with
FORTRAN," which explains how to access the command-line arguments
under Microsoft FORTRAN versions 4.00, 4.01, and 4.10, is available
from Microsoft Product Support Services.
<P>
This file has been removed from the Software Library but can be
requested by calling Microsoft Product Support Services.
The functions included in this application note use the PSP (Program
Segment Prefix) to determine the location of the command-line
arguments in memory. OS/2 does not implement the PSP, and therefore
these functions do not work correctly under the OS/2 operating system.
In addition, the environment that is also performed through the PSP is
inaccessible.
<P>
FORTRAN versions 5.0 and 5.1 contain the intrinsic functions getarg
and narg to access command line arguments from within a FORTRAN
program.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This article contains the same information as the application note.
<P>
 
<PRE>   Microsoft Product Support Services Application Note (Text File)
        HF0220: ACCESSING COMMAND-LINE ARGUMENTS WITH FORTRAN
</PRE> 
<PRE>                                                   Revision Date: 8/91
                                                      No Disk Included

</PRE>The following information applies to Microsoft FORTRAN versions 4.0,
4.01, and 4.1.
<P>
<PRE> --------------------------------------------------------------------
| INFORMATION PROVIDED IN THIS DOCUMENT AND ANY SOFTWARE THAT MAY    |
| ACCOMPANY THIS DOCUMENT (collectively referred to as an            |
| Application Note) IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY      |
| KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO    |
| THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A     |
| PARTICULAR PURPOSE. The user assumes the entire risk as to the     |
| accuracy and the use of this Application Note. This Application    |
| Note may be copied and distributed subject to the following        |
| conditions: 1) All text must be copied without modification and    |
| all pages must be included; 2) If software is included, all files  |
| on the disk(s) must be copied without modification [the MS-DOS(R)  |
| utility DISKCOPY is appropriate for this purpose]; 3) All          |
| components of this Application Note must be distributed together;  |
| and 4) This Application Note may not be distributed for profit.    |
|                                                                    |
| Copyright 1990-1991, Microsoft Corporation. All Rights Reserved.   |
| Microsoft, MS-DOS, and the Microsoft logo are registered           |
| trademarks and Windows is a trademark of Microsoft Corporation.    |
 --------------------------------------------------------------------

</PRE><h3>Summary</h3>
 
<P>
This application note explains how to access command-line arguments
with Microsoft FORTRAN versions 4.0, 4.01, and 4.1.
<P>
Below is the code for the following FORTRAN files:
<P>
<PRE>  Filename      Description
  --------      -----------

  PSPTST.FOR    Main program that contains the INTERFACE to DMPCMD and
                calls DMPCMD

  DMPCMD.FOR    Subroutine that prints the contents of the command
                line

  Note: DMPCMD must be compiled in a separate source file.


</PRE><h3>How to Use PSPTST</h3>
 
<P>
Use the following command to compile the two programs:
<P>
<PRE>  FL PSPTST.FOR DMPCMD.FOR

</PRE>If PSPTST is invoked with a command line such as
<P>
<PRE>  PSPTST hello

</PRE>the output will be as follows:
<P>
<PRE>  &lt; hello&gt;

</PRE>In FORTRAN versions 5.0 and 5.1, command-line arguments can be
accessed using the NARGS function and the GETARG procedure described
on page 271 of the "Microsoft FORTRAN Reference" manual for version
5.0 or 5.1.
<P>
<P>
The PSPTST Program
 
<P>
c The INTERFACE statement is used to pass the addresses of the start
c of the command line and the number of characters in the command line
c to the separately compiled subroutine, DMPCMD, by value, instead of
c by reference. The variables are passed by value because they are
c themselves addresses. The DMPCMD subroutine is compiled separately
c so that it will accept its arguments by reference. This results in
c the two passed addresses being properly "dereferenced."
c
<PRE>      INTERFACE TO SUBROUTINE DMPCMD( II,JJ )
      INTEGER*4 II [VALUE], JJ [VALUE]

      END
</PRE>c
c --------------------------------------------------------------------
<PRE>      PROGRAM PSPTST
      INTEGER*4 PSP, PSPNCH, OFFSET
</PRE>c --------------------------------------------------------------------
c The method used in this program will work only if the Program
c Segment Prefix precedes the main program, which it will by
c default. Since the PSP starts 16 paragraphs (256 bytes) before
c the main program, the first step is to load the variable OFFSET
c with the hex value 0010:0000, as follows:
c
<PRE>      OFFSET = #00100000
</PRE>c --------------------------------------------------------------------
c Use LOCFAR to find the segment:offset of the main program:
c
<PRE>      PSP = LOCFAR(PSPTST)
</PRE>c --------------------------------------------------------------------
<P>
c To set PSP so that it points to the start of the text of the
c command line, do the following:
c
c 1. Zero out the offset portion of the address in variable PSP.
c
c 2. Subtract 16 paragraphs from the segment:offset.
c
c 3. Add hex 81 so that PSP now points to the start of the text of the
c    command line:
c
<PRE>      PSP = (PSP-MOD(PSP,#10000))-OFFSET+#81
</PRE>c --------------------------------------------------------------------
c PSPNCH points to the byte (80 hex) in the PSP that contains the
c length of the command line:
c
<PRE>      PSPNCH = PSP-1
</PRE>c --------------------------------------------------------------------
c Call DMPCMD to list out the command line:
c
<PRE>      CALL DMPCMD(PSP, PSPNCH)
      END


</PRE><h3>THE DMPCMD SUBROUTINE</h3>
 
<P>
Note: Compile this routine in a file separate from PSPTST.
<P>
<PRE>      SUBROUTINE DMPCMD(CMDLIN, N)
      CHARACTER*80 CMDLIN
      INTEGER*1 N
</PRE>c
c Write out N characters from CMDLIN (N is PSP+80 hex; CMDLIN is
c PSP+81 hex).
c
<PRE>      WRITE (*,*) '&lt;',CMDLIN(:N),'&gt;'
      RETURN
      END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10 appnote HF0220<BR>
KBCategory: kbprg<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

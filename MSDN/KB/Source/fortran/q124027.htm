

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Changing Focus from QuickWin Using the Windows API </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124027">
<META NAME="KBModify" CONTENT="1995/07/17">
<META NAME="KBCreate" CONTENT="1994/12/15">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; fortran">
<META NAME="Description" CONTENT="  This article shows by example how to use Windows API calls to switch focus between windows.  There are 2 concerns with adding functionality to a QuickWin application with the Windows API.   - A large portion of the functionality in a Windows-based ...">
<META NAME="Product" CONTENT="Fortran">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADO,QBFY,QAGQ,QDL9,QDIT,QBWQ,QBWO,QBWN,QAMB,QBHQ,QA4Q,QAXB,QAUD,QATX,QATO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Changing Focus from QuickWin Using the Windows API</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124027</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN Compiler for MS-DOS, version 5.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by example how to use Windows API calls to switch
focus between windows.
<P>
There are 2 concerns with adding functionality to a QuickWin application
with the Windows API.

<UL><LI>A large portion of the functionality in a Windows-based application is
   provided outside the API (by message handling, and so forth). For this
   reason, much of this functionality can't be provided under QuickWin.
   To get a full GUI interface, you'll need to use Visual C++ or Visual
   Basic.

<LI>Many APIs will not behave as expected. In this example, GetFocus() works
   well at first, but if the user changes focus to a different window while
   the command setvideomode() is executing, the call to GetFocus() gets the
   handle of the wrong window. In a Windows-based application, the program
   would keep track of each window's handle as the window is created,
   rather than trying to determine the handle of a window by assuming that
   it currently has the focus.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following QuickWin program creates a text window and a graphics window,
sets focus to the text window, waits for the user response, and then
returns focus to the graphics window.
<P>
This example assumes that the QuickWin Graphics Library update has been
made.
<P>
To install the graphics update, follow the instructions in the README.TXT
file on the installation disk labelled "Microsoft FORTRAN, QuickWin
Graphics Library" (NOTE: The "QuickWin Graphics Library" is in fine print.)
<P>
<P><h3>Sample Code</h3>
 
<P>
C Compile options needed: /MW
C Link with modified library LLIBFEW.LIB
<P>
<PRE>      interface to integer*2 function getfocus
     +  [PASCAL,alias:'GetFocus']()
      end
      interface to integer*2 function setfocus
     +  [PASCAL,alias:'SetFocus'](i)
      integer*2 i
      end

      include'fgraph.fi'
      include'fgraph.fd'

      integer*2 i, texthandle, graphicshandle, getfocus, setfocus

</PRE>C     Get handle for the current window (assumed to be the text window)
<PRE>      texthandle = getfocus()
</PRE>C     Create graphics window and get it's handle
<PRE>      i=setvideomode($sres256color)
</PRE>C     This is NOT the same handle as returned from WGGETACTIVEQQ
<PRE>      graphicshandle=getfocus()

</PRE>C     Set focus to text window
<PRE>      i = setfocus(texthandle)
      write(*,*) "Hit &lt;Enter&gt; to continue"
      read(*,*)

</PRE>C     Set focus to graphics window
<PRE>      i=setfocus(graphicshandle)
      end
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf  5.10<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: FORTLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

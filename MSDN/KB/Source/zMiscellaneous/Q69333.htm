

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Work Around Floating-Point Accuracy/Comparison Problems </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69333 ">
<META NAME="KBModify" CONTENT="1997/09/24">
<META NAME="KBCreate" CONTENT="1991/02/13">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; otherbasics">
<META NAME="Description" CONTENT="  To reliably test whether two floating-point variables or expressions are equal (using IEEE format or MBF), you must subtract the two variables being compared and test whether their difference is less than a value chosen at the limits of significanc...">
<META NAME="Product" CONTENT="Basic Programming Language">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMA,QA5F,QAKC,QAGN,QBE7,QBE6,QAVX,QAVW,QBS0,QBC6,QABA,QAOX,QAH4,QAHH,QA2O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Work Around Floating-Point Accuracy/Comparison Problems</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69333 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
MS-DOS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>The Standard and Professional Editions of Microsoft Visual Basic
   for MS-DOS, version 1.0
<LI>Microsoft QuickBasic for MS-DOS, versions 1.0, 1.01, 2.0, 2.01,
   3.0, 4.0, 4.0b, and 4.5
<LI>Microsoft Basic Compiler for MS-DOS, versions 6.0 and 6.0b
<LI>Microsoft Basic Professional Development System (PDS) for MS-DOS,
   versions 7.0 and 7.1
<LI>GW-Basic Interpreter for MS-DOS, versions 3.2, 3.22 and 3.23
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To reliably test whether two floating-point variables or expressions
are equal (using IEEE format or MBF), you must subtract the two
variables being compared and test whether their difference is less
than a value chosen at the limits of significance for single or double
precision. NO OTHER TEST FOR EQUALITY WILL BE RELIABLE. The following
formulas reliably test whether X and Y are equal:

<OL><P><LI>For single precision, you must test whether the difference of X and
   Y is less than the value 7 significant digits smaller than X or Y.
   Divide X or Y by 10^7 to find the comparison value. For example:
<P>
<P><PRE>      ' To try this example in VBDOS.EXE:
      ' 1. From the File menu, choose New Project.
      ' 2. Copy the code example to the Code window.
      ' 3. Press F5 to run the program.
</PRE><P>
<P><PRE>      IF ABS(X! - Y!) &lt;= (X! / 10^7) THEN
<PRE></PRE>         PRINT "Equal within 7 digits"
      ENDIF

</PRE><P><LI>For double precision, you must test whether the difference of X and Y
   is less than the value 15 significant digits smaller than X or Y.
   Divide X or Y by 10^15 to find the comparison value. For example:
<P>
<P><PRE>      ' To try this example in VBDOS.EXE:
      ' 1. From the File menu, choose New Project.
      ' 2. Copy the code example to the Code window.
      ' 3. Press F5 to run the program.
</PRE><P>
<P><PRE>      IF ABS(X# - Y#) &lt;= (X# / 10^15) THEN
<PRE></PRE>         PRINT "Equal within 15 digits"
      ENDIF

</PRE></OL>The IEEE floating-point format is found in the Standard and
Professional Editions of Microsoft Visual Basic for MS-DOS, version
1.0; in Microsoft QuickBasic for MS-DOS (QB87.EXE coprocessor version
only), versions 3.0, 4.0, 4.0b, and 4.5; in Microsoft Basic Compiler for
MS-DOS and MS OS/2, versions 6.0 and 6.0b; and in Microsoft Basic
Professional Development System (PDS) for MS-DOS and MS OS/2, versions
7.0 and 7.1.
<P>
MBF (Microsoft Binary Format) is found in Microsoft QuickBasic for
MS-DOS (QB.EXE non-coprocessor version only), versions 1.0, 1.01, 2.0,
2.01, and 3.0, and in Microsoft GW-Basic Interpreter for MS-DOS, versions
3.2, 3.22, and 3.23.
<P>
The information in this article is also included in the Help file
provided with the Standard and Professional Editions of Microsoft
Visual Basic for MS-DOS, version 1.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<PRE>   NOTE: Significant digits in a calculated number can be lost due to
   the following: multiple calculations, especially addition of
   numbers far apart in value, or subtraction of numbers similar in
   value. When a number results from multiple calculations, you may
   need to change your test for equality to use fewer significant
   digits to reflect the mathematical loss of significant digits. If
   your test of significance uses too many significant digits, you may
   fail to discover that numbers compared for equality are actually
   equal within the possible limit of accuracy.

</PRE>In the Basic products listed above that use IEEE floating-point format,
intermediate calculations are performed in an internal 64-bit
temporary register, which has more bits of accuracy than are stored in
single-precision or double-precision variables. This often results in
an IF statement returning an error which states that the intermediate
calculation is not equal to the expression being compared. For example:
<P>
<PRE>   X = 25
   Y = 60.1
   IF 1502.5 = (X * Y) THEN PRINT "equal"

</PRE>Running the above code will NOT print "equal". In contrast, the
following method using a placeholder variable will print "equal", but
is still NOT a reliable technique as a test for equality:
<P>
<PRE>   Z = 25 * 60.1
   IF 1502.5 = Z THEN PRINT "equal"

</PRE>Note that explicit numeric type casts (! for single precision, # for
double precision) will affect the precision in which calculations are
stored and printed. Whichever type casting you perform, you may still
see unexpected rounding results:
<P>
<PRE>   PRINT 69.82! + 1    ' Single precision, prints 70.82.
   PRINT 69.82# + 1    ' Double precision, prints 70.81999999999999.

</PRE>For an exact decimal (base 10) numeric representation, such as for
calculations of dollars and cents, you should use the CURRENCY (@)
data type found in Visual Basic for MS-DOS, version 1.0 and Basic PDS
for MS-DOS, versions 7.0 and 7.1. The CURRENCY data type exactly
stores up to 19 digits, with 4 digits after the decimal place.
<P>
Reference:
<P>
Both the IEEE and MBF standards attempt to balance accuracy and
precision with numeric range and speed. Accuracy measures how many
significant bits of precision are not lost in calculations. Precision
refers to the number of bits in the mantissa, which determines how
many decimal digits can be represented.
<P>
Both IEEE format and MBF store numbers of the form 1.x to the power of
y (where x and y are base 2 numbers; x is the mantissa, and y is the
exponent).
<P>
MBF single precision has 24 bits of mantissa, and double precision has
56 bits of mantissa. All MBF calculations are performed within just 24
or 56 bits.
<P>
IEEE single precision has 24 bits of mantissa, and double precision
has 53 bits of mantissa. However, all single-precision and
double-precision IEEE calculations in Visual Basic for MS-DOS,
version 1.0; in QuickBasic for MS-DOS, versions 3.0/4.x; in Basic
Compiler for MS-DOS, versions 6.0, and 6.0b; and in Basic PDS for
MS-DOS, versions 7.0 and 7.1re performed in a 64-bit temporary register
for greater accuracy. As a result, IEEE calculations are more accurate
than MBF calculations, despite MBF's ability to represent more bits in
double precision.
<P>
Most numbers in decimal (base 10) notation do NOT have an exact
representation in the binary (base 2) floating-point storage format
used in single-precision and double-precision data types. Both IEEE
format and MBF cannot exactly represent (and must round off) all
numbers that are not of the form 1.x to the power of y (where x and y
are base 2 numbers). The numbers that can be exactly represented are
spread out over a very wide range. A high density of representable
numbers is near 1.0 and -1.0, but fewer and fewer representable numbers
occur as the numbers go towards 0 or infinity.
<P>
The above limitations often cause Basic to return floating-point
results different than you might expect. More information on this
topic can be found in the Microsoft Knowledge Base by querying on the
following words:
<P>
<PRE>   floating and point and format and QuickBasic

</PRE>The IEEE floating point format is documented in the following manuals:

<OL><P><LI>Pages 16-21 of "Microsoft QuickBasic 4.0: Basic Language Reference"
   for QuickBasic for MS-DOS, versions 4.0 and 4.0b. Note that the 4.0
   manuals need a correction on page 19 to the MHex$ code example, as
   explained in a separate article found in the Microsoft Knowledge
   Base by querying on the following words:
<P>
<P><PRE>      MHex$ AND 19
</PRE>
<P><LI>Pages 12-17 of "Microsoft QuickBasic 4.5: Basic Language Reference"
   for QuickBasic for MS-DOS, version 4.5. Note that this optional
   manual must be ordered separately using an order card provided with
   version 4.5.

<P><LI>Pages 702-705 of the "Microsoft Basic 7.0: Programmer's Guide" for
   Microsoft Basic PDS for MS-DOS, versions 7.0 and 7.1.
<P>
</OL>The MBF floating point format is documented in a separate article
which can be found in the Microsoft Knowledge Base by querying on
the following words:
<P>
<PRE>   MBF AND conversion AND exponent
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: VBmsdos QuickBas BasicCom 1.00 1.01 2.00 2.01<BR>
3.00 3.20<BR>
3.22<BR>
3.23<BR>
4.00 4.00b 4.50 6.00 6.00b 7.00 7.10<BR>
KBCategory: kbprg<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

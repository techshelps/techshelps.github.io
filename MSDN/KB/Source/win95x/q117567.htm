

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How 16-Bit and 32-Bit Programs Multitask in Windows 95 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117567">
<META NAME="KBModify" CONTENT="1995/09/13">
<META NAME="KBCreate" CONTENT="1994/06/30">
<META NAME="Keywords" CONTENT="kbother">
<META NAME="KBArea" CONTENT="Support; KB; win95x, crossnet, winprint">
<META NAME="Description" CONTENT="  In Windows 95, all 32-bit applications are scheduled preemptively. Preemptive multitasking allows Windows 95 to switch between 32-bit applications whether those applications are prepared to lose control of the CPU or not. No cooperation between the...">
<META NAME="Product" CONTENT="Windows 95">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWO,QAJH,QAH4,QDL9,QBWN,QBWQ,QAJZ,QAJQ,QAGI,QAHT,QAYV,QAMN,QBVV,QA7O,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How 16-Bit and 32-Bit Programs Multitask in Windows 95</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 13, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117567</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Windows 95, all 32-bit applications are scheduled preemptively.
Preemptive multitasking allows Windows 95 to switch between 32-bit
applications whether those applications are prepared to lose control of the
CPU or not. No cooperation between the application and the operating system
is required for 32-bit multitasking.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>32-Bit Applications</h3>
 
<P>
32-bit application program interface (API) functions and the applications
that call those functions are designed to handle the concurrence
requirements that come with preemptive multitasking. All internal data
structures are either allocated on a per-thread basis, or protected against
corruption by semaphores (or critical code sections). This ensures that one
32-bit application does not destroy the data required by another 32-bit
application by calling the same APIs at the same time. 32-bit Windows and
its APIs allow this because they are reentrant (that is, code can be shared
by several programs at the same time).
<P>
Windows 95 further protects 32-bit applications against unintentional data
loss by running each program in its own address space. This means the data
for one application is not accessible to another application. The
disadvantage of this protection is that applications cannot share data
amongst themselves as freely as if they were running in the same address
space and had full access to each other's code and data.
<P>
<P><h3>16-Bit Applications</h3>
 
<P>
Under Windows 3.x and Windows for Workgroups 3.x, 16-bit applications
multitask cooperatively by frequently yielding control of the CPU to other
programs. This kind of cooperative multitasking means that an application
has control of the CPU until it relinquishes it. Corruption of data
structures is prevented by the cooperative task switching.
<P>
Under Windows 3.x, Windows for Workgroups 3.x, and Windows 95, all 16-bit
applications run in the same address space. By running in the same address
space, applications can share resources among themselves, and are,
unfortunately, at a greater risk of overwriting data from another
application.
<P>
Some 16-bit applications depend on the features offered by cooperative
multitasking. These applications may make the following assumptions:

<UL><LI>Control of the CPU, display, and other resources is not relinquished
   until the application itself yields control.

<LI>Resources such as pens and brushes can be created by one application and
   passed on to another.

<LI>Sharing data between applications can be done by writing to the data
   area of another application.
<P>
</UL>Because of this dependency on cooperation to switch between applications,
if a 16-bit application stops responding (hangs) before it has yielded to
another application, it may cause Windows to hang as well. The Application
Local Reboot feature introduced in Windows 3.1 helps alleviate this problem
by closing the unresponsive application and allowing Windows and the other
running programs to continue. It is important to note that the Local Reboot
feature does not always work; its success depends on the severity of the
problem that caused the particular application to hang.
<P>
NOTE: The Local Reboot feature allows you to use CTRL+ALT+DEL to close an
application that has stopped responding.
<P>
Windows 95 balances the requirements for backward compatibility, running on
a 4-megabyte (MB) computer, and providing preemptive multitasking by
retaining much of its 16-bit code base for previous functionality and by
adding new functionality to the 32-bit code.
<P>
This means that some 32-bit calls are mapped to 16-bit code and vice versa.
When a 32-bit application calls 16-bit code, there is a possibility that a
poorly designed 16-bit program may cause a 32-bit application to hang.
<P>
This problem can occur if both of the following conditions are present:

<UL><LI>A 16-bit application hangs before yielding control.

<LI>A 32-bit application calls an API that is redirected to 16-bit code.
<P>
</UL>To work around this problem, use the Local Reboot feature to close the 16-
bit application that has stopped responding. Improvements have been made to
the Local Reboot feature in Windows 95 to make 16-bit applications more
robust.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbdisplay kbother kbenv kbusage<BR>
KBSubcategory: wpp95 win95 appscomp wfw wfwg<BR>
Additional reference words: 95 faq freeze frozen hang hung lock<BR>
locked<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 13, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

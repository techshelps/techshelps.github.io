

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Are Windows 95 Fatal Exception Errors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150314">
<META NAME="KBModify" CONTENT="1996/04/26">
<META NAME="KBCreate" CONTENT="1996/04/25">
<META NAME="Keywords" CONTENT="kbenv kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; win95x, crossnet, winprint">
<META NAME="Description" CONTENT="  When you attempt to start Windows or an application inside of Windows, you may encounter errors similar to the following:    A fatal exception      has occurred at xxxx:xxxxxxxx  Fatal exception errors are codes returned by a program in the followi...">
<META NAME="Product" CONTENT="Windows 95">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAHC,QAB4,QAV1,QAV0,QAAP,QAO4,QDIR,QAHB,QBVV,QAH4,QATS,QASR,QAJ6,QDNK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>What Are Windows 95 Fatal Exception Errors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 26, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150314</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Windows 95
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you attempt to start Windows or an application inside of Windows, you
may encounter errors similar to the following:
<P>
<PRE>  A fatal exception &lt;XY&gt; has occurred at xxxx:xxxxxxxx

</PRE>Fatal exception errors are codes returned by a program in the following
cases:
<P>
<PRE>   - Access to an illegal instruction has been encountered

   - Invalid data or code has been accessed

   - The privilege level of an operation is invalid

</PRE>When any of these occur, the processor returns an exception to the
operating system, which in turn is handled as a Fatal Exception Error. In
many cases the exception is nonrecoverable and the system must either be
restarted or shutdown, depending upon the severity of the error.
<P>
In the following example of a Fatal Exception error
<P>
<PRE>  A fatal exception &lt;XY&gt; has occurred at xxxx:xxxxxxxx

</PRE>the &lt;XY&gt; represents the actual processor exception from 00 to 0F. The
xxxx:xxxxxxxx represents the enhanced instruction pointer to the code
segment and the 8-bit address is the actual address where the exception
occurred.
<P>
Windows does not cause these errors, but has the exception handling routine
for that particular processor exception, which displays the above message.
<P>
The following article details the processor exceptions and their meaning.
<P>
For more information about troubleshooting strategies for Fatal Exception
Errors, see the Knowledge Base articles listed at the end of this document.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following are the processor exceptions and their definitions:
<P>
00: Divide Fault
<P>
The processor returns this exception when it encounters a divide fault. A
divide fault occurs if division by zero is attempted or if the result of
the operation does not fit in the destination operand.
<P>
<P>
02: NMI interrupt
<P>
Interrupt 2 is reserved for the hardware Non-Maskable-Interrupt condition.
No exceptions trap through interrupt 2.
<P>
04: Overflow trap
<P>
The overflow trap occurs after an INTO instruction has executed and the 0F
bit is set to 1.
<P>
05: Bounds Check Fault
<P>
The BOUND instruction compares the array index with an upper and lower
bound. If the index is out of range, then the processor traps to interrupt
05.
<P>
06: Invalid Opcode fault
<P>
This error is returned if any one of the following conditions are true:
<P>
<PRE>   - The processor tries to decode a bit pattern that does not correspond
     to any legal computer instruction

   - The processor attempts to execute an instruction that contains invalid
     operands

   - The processor attempts to execute a protected-mode instruction while
     running in virtual 8086 mode.

   - The processor tries to execute a LOCK prefix with an instruction that
     cannot be locked.

</PRE>07: Coprocessor not available fault
<P>
This error occurs if the computer does not have a math coprocessor and the
EM bit of register CR0 is set indicating that Numeric Data Processor
emulation is being used. Each time a floating point operation is executed,
an interrupt 07 occurs.
<P>
This error also occurs when a math coprocessor is used and a task switch is
executed. Interrupt 07 tells the processor that the current state of the
coprocessor needs to be saved so that it can be used by another task.
<P>
08: Double Fault
<P>
Processing an exception sometimes triggers a second exception. In the event
that this occurs, the processor will issue a interrupt 08 for a double
fault.
<P>
09: Coprocessor Segment Overrun
<P>
This error occurs when a floating point instruction causes a memory access
that runs beyond the end of the segment. If the starting address of the
floating point operand is outside the segment, then a General Protection
Fault occurs (interrupt 0D).
<P>
10 (0Ah): Invalid Task State Segment Fault
<P>
Because the Task State Segment contains a number of descriptors, any number
of conditions may cause exception 0A. Typically, the processor can gather
enough information from the Task State Segment to issue another fault
pointing to the actual problem. See "Microsoft's Programming the
80386/80486 Guide" for more information.
<P>
11 (0Bh): Not Present Fault
<P>
The Not present interrupt allows the operating system to implement virtual
memory through the segmentation mechanism. When a segment is marked as "not
present", the segment is swapped out to disk. The interrupt 0B fault is
triggered when an application needs access to the segment.
<P>
12 (0Ch): Stack Fault
<P>
A Stack Fault occurs with error code 0 if an instruction refers to memory
beyond the limit of the stack segment. If the operating system supports
expand-down segments, increasing the size of the stack should alleviate the
problem. Loading the Stack Segment with invalid descriptors will result in
a general protection fault.
<P>
13 (0Dh): General Protection Fault
<P>
Any condition which is not covered by any of the other processor exceptions
will result in a general protection fault. The exception indicates that
this program has been corrupted in memory usually resulting in immediate
termination of the application.
<P>
14 (0Eh): Page Fault
<P>
The Page Fault interrupt allows the operating system to implement virtual
memory on a demand-paged basis. An interrupt 14 usually is issued whenever
an access to a page directory entry or page table with the present bit set
to 0 (Not present) occurs. The operating system makes the page present
(usually retrieves the page from virtual memory) and re-issues the faulting
instruction, which then can access the segment. A page fault also occurs
when a paging protection rule is violated (when the retrieve fails, or data
retrieved is invalid, or the code that issued the fault broke the
protection rule for the processor). In these cases the operating system
takes over for the appropriate action.
<P>
16 (10h): Coprocessor error Fault
<P>
This interrupt occurs when an unmasked floating-point exception has been
signaled a previous instruction. (Because the 80386 does not have access to
the Floating Point Unit, it checks the ERROR\ pin to test for this
condition). This is also triggered by a WAIT instruction if the Emulate
Math Coprocessor bit at CR0 is set.
<P>
17 (11h): Alignment Check Fault
<P>
This interrupt is only used on the 80486 CPUs. An interrupt 17 is issued
when code executing at ring privilege 3 attempts to access a word operand
that is not on an even-address boundary, a double-word operand that is not
divisible by four, or a long real or temp real whose address is not
divisible by eight. Alignment checking is disabled when the CPU is first
powered up and is only enabled in protected mode.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q138788.htm">Q138788</A></B>
   TITLE     : Random Fatal Exception Errors While Running Windows 95

   ARTICLE-ID: <B><A HREF="../WIN95X/Q136337.htm">Q136337</A></B>
   TITLE     : Troubleshooting Windows 95 Startup Problems

   ARTICLE-ID: <B><A HREF="../WIN95X/Q134503.htm">Q134503</A></B>
   TITLE     : Parity Error Messages May Indicate Bad Memory

</PRE>Microsoft's 80386/80486 Programming Guide, Second Edition
<P>
The Indispensable PC Hardware Book, Second edition
<P>
Microsoft Press Computer Dictionary, Second Edition
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbenv kberrmsg<BR>
KBSubcategory: win95<BR>
Additional reference words: 95<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 26, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

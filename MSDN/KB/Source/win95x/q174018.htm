

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Description of the Windows 95 Startup Process </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174018">
<META NAME="KBModify" CONTENT="1997/10/20">
<META NAME="KBCreate" CONTENT="1997/09/17">
<META NAME="Keywords" CONTENT="win95">
<META NAME="KBArea" CONTENT="Support; KB; win95x, crossnet, winprint">
<META NAME="Description" CONTENT="  This article describes the Windows 95 startup process.  MORE INFORMATION  The Windows 95 startup process can be broken into the following steps:    - The read-only memory (ROM) Basic Input-Output (BIOS) bootstrap process   - The master boot record ...">
<META NAME="Product" CONTENT="Windows 95">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDIV,QDL9,QBWN,QBWO,QBWQ,QBW6,QAB5,QAU9,QBVV,QA5V,QABH,QDNF,QAIJ,QABI,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Description of the Windows 95 Startup Process</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 20, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174018</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes the Windows 95 startup process.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Windows 95 startup process can be broken into the following steps: 

<UL><LI>The read-only memory (ROM) Basic Input-Output (BIOS) bootstrap process 
<LI>The master boot record (MBR) and boot sector
<LI>The Io.sys file
<LI>Real-mode configuration
<LI>The Win.com file and the Windows 95 Environment
<P>
</UL><h3>Step 1 - The ROM BIOS Bootstrap Process</h3>
 
<P>
When you start your computer, the ROM BIOS bootstrap loads from the FFFF0h 
memory address. The following steps occur during the ROM BIOS bootstrap 
process:

<OL><P><LI>The Power On Self-Test (POST) occurs.

<P><LI>The A drive is checked for the existence of a boot disk. 

<P><LI>If a boot disk is not found in the A drive, the ROM BIOS bootstrap
   checks for a hard disk. If a hard disk is found, the ROM loader
   transfers control to the operating system loader. 

<P><LI>The master boot record and partition table are read.
<P>
</OL>Microsoft and several original equipment manufacturers (OEMs) have defined 
a Plug and Play BIOS specification. This specification defines the 
interactions between the Plug and Play BIOS, Plug and Play devices, and 
option ROMs. If your computer has a Plug and Play BIOS, the following 
additional steps are performed:

<OL><P><LI>The Plug and Play BIOS checks non-volatile random access memory (RAM)
   for input/output (I/O) port addresses, interrupt request lines (IRQs),
   direct memory access (DMA) channels, and other settings needed to 
   configure Plug and Play devices on the computer.

<P><LI>All Plug and Play devices found by the Plug and Play BIOS are disabled.

<P><LI>A map of used and unused resources is created.

<P><LI>The Plug and Play devices are configured and re-enabled, one at a time.
<P>
</OL>Windows 95 Configuration Manager queries the Plug and Play BIOS for device 
information, and then queries each Plug and Play device for its 
configuration.
<P>
If your computer does not have a Plug and Play BIOS, Plug and Play devices 
are initialized using their default settings when you start your computer. 
These devices may be reconfigured dynamically when Windows 95 starts. 
<P>
Step 2 - The Master Boot Record and Boot Sector
----------------------------------------------- 
<P>
The master boot record determines the location of the boot partition by 
reading the partition table located at the end of the master boot record. 
Once the location of the boot partition is determined, the master boot 
record passes control to the boot sector in that partition. The boot 
sector contains the disk boot program and a table of disk characteristics. 
The boot sector checks the BIOS Parameter Block (BPB) to find the location 
of the root directory, and then copies the Io.sys file from the root 
directory into memory.
<P>
<P><h3>Step 3 - The Io.sys File</h3>
 
<P>
The following steps occur when the Io.sys file loads into memory:

<OL><P><LI>A minimal file allocation table (FAT) file system is loaded.

<P><LI>The Msdos.sys file is read.

<P><LI>The "Starting Windows 95" message is displayed for &lt;n&gt; seconds, or
   until you press a Windows 95 function key. The amount of time the
   message is displayed is determined by the BootDelay=&lt;n&gt; line in the
   Msdos.sys file. The default is 2 seconds.

<P><LI>If you have multiple hardware profiles in Windows 95, you receive the
   following message and must choose a hardware configuration to use:
<P>
<P><PRE>      Windows cannot determine what configuration your computer is in. 
</PRE>
<P><LI>The Logo.sys file is loaded and displays a startup image on the screen. 

<P><LI>If the Drvspace.ini or Dblspace.ini file exists, the Drvspace.bin
   or Dblspace.bin file is loaded into memory.

<P><LI>The Io.sys file checks the system registry files (System.dat and
   User.day) for valid data.

<P><LI>The Io.sys file opens the System.dat file. If the System.dat file is
   not found, the System.da0 file is used for startup. If Windows 95
   starts sucessfully, the System.da0 file is copied to the System.dat
   file. 
 
<P><LI>The Dblbuff.sys file is loaded if the "DoubleBuffer=1" is in the
   Msdos.sys file, or if double buffering is enabled under the
   following registry key:
<P>
<P><PRE>      HKLM\System\CurrentControlSet\Control\WinBoot\DoubleBuffer
</PRE><P>
   Windows 95 Setup automatically enables double buffering if it detects
   that it is required. 

<P><LI>If you have multiple hardware profiles in Windows 95, the hardware
<P><PRE>    profile you chose is loaded from the registry.
</PRE> 
<P><LI>The Io.sys file processes the Config.sys file.
<P>
</OL><h3>Step 4 - Real-Mode Configuration</h3>
 
<P>
Some hardware devices and programs require that drivers or files be loaded 
in real-mode in order for them to work properly. To ensure backwards 
compatibility with these types of hardware devices or programs, Windows 95 
processes the Config.sys and Autoexec.bat files if they exist.

<OL><P><LI>The Config.sys file loads drivers into memory. If the Config.sys file
   does not exist, the Io.sys file loads the following required drivers:
<P>
<P><PRE>    - Ifshlp.sys
    - Himem.sys
    - Setver.exe
</PRE><P>
   The Io.sys file obtains the location of these files from the
   "WinBootDir=" line of the Msdos.sys file. These files must reside on
   the hard disk. 

<P><LI>Windows 95 reserves all global upper memory blocks (UMBs) 
   for Windows 95 operating system use or for expanded memory support
   (EMS). 

<P><LI>The Autoexec.bat file loads files and terminate and stay resident (TSR)
   programs into memory. 
<P>
</OL><h3>Step 5 - The Win.com File and the Windows 95 Environment</h3>
 

<OL><P><LI>After the Autoexec.bat file is processed, the Win.com file is run. 

<P><LI>The Win.com file accesses the Vmm32.vxd file. If there is enough
   available RAM, the Vmm32.vxd file loads into memory, otherwise, it is
   accessed from the hard disk. This may result in a slower startup time.
   The Vmm32.vxd file is similar to the Win386.exe file used in earlier
   versions of Windows.

<P><LI>The real-mode virtual device driver loader checks for duplicate
   virtual device drivers (VxDs) in the Windows\System\Vmm32 folder and
   the Vmm32.vxd file. If a VxD exists in both the Windows\System\Vmm32
   folder and the Vmm32.vxd file, the duplicate VxD is "marked" in the
   Vmm32.vxd file so that it is not loaded.

<P><LI>Real-mode VxDs can be loaded into memory in any of the following ways:
<P>
<P><PRE>    - Real-mode device drivers or TSRs that respond to the Windows 95
      INT2F broadcast load their embedded VxDs when Windows 95 starts. 
</PRE><P>
<P><PRE>    - Drivers internal to the Vmm32.vxd file that are not "marked" are
      loaded from the following registry key:
</PRE><P>
<PRE>         HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\VxD

      If the real-mode virtual device driver loader finds a "marked"
      driver, it changes its registry entry from a VxD (a driver preceded 
      with an asterix "*") to a file with a .vxd extension so that the 
      external driver is found in the Windows\System\Vmm32 folder. When 
      the external driver is found, it is loaded into memory.

    - VxDs that are not already loaded by the Vmm32.vxd file are loaded 
      from the [386 Enh] section of the Windows\System.ini file. 

    - Some VxDs are required for Windows 95 to run properly. These 
      required VxDs are loaded automatically and do not require a registry 
      entry. The following VxDs are required by Windows 95:

      *BIOSXLAT   *CONFIGMG    *DYNAPAGE
      *DOSMGR     *EBIOS       *IFSMGR
      *INT13      *IOS         *PAGESWAP
      *SHELL      *V86MMGR     *VCD
      *VCACHE     *VCOMM       *VCOND
      *VDD        *VDMAD       *VFAT
      *VKD        *VMCPD       *VPICD
      *VTD        *VTDAPI      *VWIN32
      *VXDLDR

</PRE><P><LI>The real-mode virtual device driver loader checks that all required
   VxDs loaded sucessfully. If not, it attempts to load the drivers again. 

<P><LI>Once the real-mode virtual device driver loading is logged, driver
   initialization occurs. If there are any VxDs that require real-mode
   initialization, they begin their process in real-mode.

<P><LI>Vmm32 switches the computer's processor from real-mode to protected-
   mode.

<P><LI>A three-phase VxD initialization process occurs in which the 
   drivers are loaded according to their InitDevice instead of the order
   in which they are loaded into memory. The VxDs are carried out in the 
   following sequence:
<P>
</OL>a. SYS_CRITICAL_INIT (SYSCRITINIT):
<P>
Interrupts are disabled during this phase. This gives VxDs time to prepare 
for device initialization without being interrupted by the system. No file 
I/O is allowed during SYSCRITINIT, so all SYSCRITINITs are not written to 
the Bootlog.txt file until after SYSCRITINIT is complete for all VxDs.
<P>
b. SYS_DEVICE_INIT (DEVICEINIT)
<P>
The bulk of the VxD initialization takes place during this phase. File I/O 
is allowed during DEVICEINIT, so each VxD's DEVICEINIT is logged as it 
occurs. The one exception is during Ifsmgr's DEVICEINIT. Ifsmgr takes 
over the real-mode file system, and disk I/O is not allowed until Ifsmgr's 
DEVICEINIT succeeds. For this reason, Ifsmgr does not appear in the 
DEVICEINIT phase.
<P>
When a DevLoader VxD is called, it loads other drivers it is responsible 
for, regardless of their InitDevice order. The DevLoader examines the 
Registry and finds drivers (for example, portdrivers [such as.mpd files])
and any associated support drivers. It then initializes the device 
associated with these drivers. During this phase, if a VxD failed to 
initialize, it was unable to properly communicate with the hardware or 
service it drives. Typically, this is due to incorrect hardware settings 
or the service not being installed.
<P>
The remaining static VxDs continue with the initialization phase.  Also, 
dynamic VxDs may begin initializing during this phase. They do not have a 
SYSCRITINIT phase. However, a dynamic VxD may also load anytime after 
Windows 95 has started.
<P>
c. SYS_INIT_COMPLETE (INITCOMPLETE)
<P>
VxDs that successfully pass the InitComplete phase should be working 
properly. If a VxD was listed in one of the previous phases but is not 
successful in this phase, that VxD is unloaded from memory.
<P>
GUI Components:
<P>
After all the static VxDs are loaded, the Krnl32.dll, Gdi.exe, User.exe, 
and Explorer.exe (the default Windows 95 shell) files are loaded. 
<P>
Network Environment and Multi-User Profiles:
<P>
The next step in the startup process is to load the network environment. 
Once this occurs, the user is prompted to log on to the network that is 
installed.
<P>
Windows 95 allows multiple users to save their custom desktop settings. 
When a user logs on to Windows 95, their desktop settings are loaded from 
the registry. If the user does not log on, the desktop configuration uses 
a default desktop. 
<P>
StartUp Group and RunOnce Programs:
<P>
Programs in the StartUp group and the RunOnce registry key are run 
during the last phase of the startup process. After each program in the 
RunOnce registry key is started, the program is removed from the key.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: boot<BR>
Keywords          : win95<BR>
Version           : WINDOWS:95<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 20, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

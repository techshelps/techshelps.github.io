

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 How To Extract a Windows Program Icon--Running or Not </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88944 ">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1992/09/03">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The example program included below demonstrates how to extract an icon from a Windows program, whether it is currently running or not. There are two different techniques depending on whether the program is run in Windows version 3.0 or 3.1. The API...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QA4Q,QDL9,QBWO,QBWN,QBWQ,QBS0,QAUD,QA3P,QBXT,QA5V,QAIB,QAFF,QBQU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 How To Extract a Windows Program Icon--Running or Not</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88944 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
<LI>Microsoft Windows versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The example program included below demonstrates how to extract an
icon from a Windows program, whether it is currently running or not.
There are two different techniques depending on whether the program is
run in Windows version 3.0 or 3.1. The API function ExtractIcon,
introduced in Windows version 3.1, simplifies the process of extracting
the icon. In Windows version 3.0, a different approach is required.
Both methods are illustrated below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The example program shown below displays the icon of an application in a
picture box. The example demonstrates the handling of the hDC property of
the picture box control, specifically the relationship between the Refresh
method, the Image property, and the AutoRedraw property. The code in the
Command3_Click event demonstrates how to transfer the captured icon image
to the Picture property of a picture box (Picture2).
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start Visual Basic, or from the File menu, choose New Project (ALT,
   F, N) if Visual Basic is already running. Form1 is created by default.

<P><LI>Create the following controls with the default property settings:
<P>
<P><PRE>    - Picture1
    - Picture2
    - Command1
    - Command2
    - Command3
</PRE>
<P><LI>Place the code below into the general Declarations section of Form1
   taking care to enter each Declare statement on one, single line:
<P>
<PRE>   ' API declarations used in Windows version 3.0 method.
   Declare Function GetActiveWindow Lib "User" () As Integer
   Declare Function PostMessage Lib "User" (ByVal hWnd As Integer,
      ByVal wMsg As Integer, ByVal wParam As Integer, ByVal lParam As Any)
      As Integer
   Declare Function FindWindow Lib "User" (ByVal lpClassName As Any,
      ByVal lpWindowName As Any) As Integer
   Declare Function LoadLibrary Lib "Kernel" (ByVal lpLibFileName
      As String) As Integer
   Declare Function GetWindowWord Lib "User" (ByVal hWnd As Integer,
      ByVal nIndex As Integer) As Integer
   Declare Function LoadIcon Lib "User" (ByVal hInstance As Integer,
      ByVal lpIconName As Any) As Integer

   ' API declarations used in Windows version 3.1 method.
   Declare Function GetModuleHandle Lib "Kernel" (ByVal lpModuleName
      As String) As Integer
   Declare Function GetClassWord Lib "User" (ByVal hWnd As Integer,
      ByVal nIndex As Integer) As Integer
   Declare Function ExtractIcon Lib "SHELL" (ByVal hInst As Integer,
      ByVal lpszexename As String, ByVal hIcon As Integer) As Integer

   ' API declaration used by both Windows version 3.0 and 3.1 methods.
   Declare Function DrawIcon Lib "User" (ByVal hDC As Integer, ByVal x
      As Integer, ByVal Y As Integer, ByVal hIcon As Integer) As Integer

   ' Window field offsets for GetClassWord() and GetWindowWord().
   Const GWW_HINSTANCE = (-6)
   Const GCW_HMODULE = (-16)
   ' Constants for SendMessage and PostMessage.
   Const WM_CLOSE = &amp;H10
   ' If using Visual Basic version 1.0, remove the single quotation mark
   ' from the following line of code:
   ' Const NULL = 0&amp;

</PRE><P><LI>Place the following code in the Form_Load event of Form1:
<P>
<PRE>   Sub Form_Load ()
      Command1.Caption = " 3.0 method "
      Command2.Caption = " 3.1 method "
      Command3.Caption = " Transfer "
      Form1.Caption = " Example of Extracting an Icon"
      Form1.Width = Screen.Width * 2 / 3
      Form1.Height = Screen.Height / 2

      ' Center the form on the screen.
      ' Enter the following two lines as one, single line:
      Form1.Move (Screen.Width - Form1.Width) / 2,
         (Screen.Height - Form1.Height) / 2
      ' Size and position the controls dynamically at run time.
      ' Enter the following two lines as one, single line:
      Picture1.Move 0, 0, Form1.Width / 2,
         Form1.Height - Command1.Height * 4
      ' Enter the following two lines as one, single line:
      Picture2.Move Form1.Width / 2, 0, Form1.Width,
         Form1.Height - Command2.Height * 4
      ' Enter the following two lines as one, single line:
      Command1.Move (Form1.Width / 2 - Command1.Width) / 2,
         Form1.Height - Command1.Height * 4
      ' Enter the following two lines as one, single line:
      Command2.Move (Form1.Width / 2 - Command1.Width) / 2,
         Form1.Height - Command1.Height * 3
      ' Enter the following two lines as one, single line:
      Command3.Move (Form1.Width * 3 / 2 - Command2.Width) / 2,
         Form1.Height - Command2.Height * 4
   End Sub

</PRE><P><LI>Place the following code in the Command1_Click event. Configure the code
   to match your situation by removing the comment apostrophe from one of
   the three methods and adding comment apostrophes to the other two -- to
   effectively enable one of the methods and disable the other two.
<P>
<PRE>   Sub Command1_Click ()
   Dim hInstance As Integer, handle As Integer, hIcon As Integer
   Picture1.Picture = LoadPicture("") ' clear any previous image

      ' Three alternative ways to obtain the handle of the top-level window
      ' of the program whose icon you want to extract:

      ' Method 1: If the program is currently running and you don't know
      '           the class name.
      ' AppActivate ("Program Manager") ' Set focus to application.
      ' handle = GetActiveWindow()      ' Get handle to window.
      ' Command1.SetFocus               ' Return focus to button.

      ' Method 2: If program is running and you know the class name.
      ' Handle = FindWindow("Progman", "Program Manager")

      ' Method 3: If program is not running, use path and filename.
      ' Not_Running_Way "sysedit.exe" ' Call sub at general level.
      ' Exit Sub                      ' Bypass remaining code in this Sub.

      ' Now you have the handle -- use it to obtain the instance handle.
      hInstance = GetWindowWord(handle, GWW_HINSTANCE)
      Picture2.Print "3.O method "
      Picture2.Print "handle="; Hex$(handle)
      Picture2.Print "hInstance= "; Hex$(hInstance)  ' Sanity check.

      ' Iterate through icon resource identifier values
      '  until you obtain a valid handle to an icon.
      Do
         hIcon = LoadIcon(hInstance, n&amp;)
         n&amp; = n&amp; + 1
      Loop Until hIcon &lt;&gt; 0
      Picture2.Print "hIcon= "; Hex$(hIcon)
      Picture1.AutoRedraw = -1 ' Make hDC point to persistent bitmap.
      r = DrawIcon(Picture1.hDC, 19, 19, hIcon) 'Draw the icon.
      Picture1.Refresh         ' Refresh from persistent bitmap to Picture.
   End Sub

</PRE><P><LI>Place the following code in the Command2_Click event. Note that the
   first two methods commented out are provided for information and
   contrast to the preferred method, method 3.
<P>
<PRE>   Sub Command2_Click ()
      Dim myhInst As Integer, hIcon As Integer
      Picture1.Picture = LoadPicture("") ' Clear the previous image.

      ' Listed below are three alternative methods that can be used to
      ' obtain the hInst of your program's module handle.

      ' Method 1: Use only with .EXE version of your program.
         ' myhInst = GetModuleHandle("Project1.exe")

      ' Method 2: Use only with your program running in the environment.
         ' myhInst = GetModuleHandle("VB.EXE")

      ' Method 3: The slick way that works in either case.
           myhInst = GetClassWord(hWnd, GCW_HMODULE)

      ' The path and filename of program to extract icon from.
      lpzxExeName$ = "moricons.dll"  ' Can also use an .EXE file here.

      ' Get handle to icon.
      hIcon = ExtractIcon(myhInst, lpzxExeName$, 0)
      Picture2.Print "3.1 method "
      Picture2.Print "myhInst= "; Hex$(myhInst) ' Sanity check.
      Picture2.Print "hIcon= "; Hex$(hIcon)   ' Sanity check.

      Picture1.AutoRedraw = -1  ' Make the picture's hDC point to the
                                ' persistent bitmap.
      r% = DrawIcon(Picture1.hDC, 19, 19, hIcon)
      Picture1.Refresh  ' Cause Windows to paint from the persistent bitmap
                        ' to show the icon.
   End Sub

</PRE><P><LI>Place the following code in the form's general Declarations section:
<P>
<PRE>   Sub Not_Running_Way (appname As String)
      Dim hInstance As Integer, handle As Integer, hIcon As Integer
      Dim hWndShelledWindow As Integer
      Picture1.Picture = LoadPicture("") ' Clear any previous image.
      hInstance = Shell(appname, 2)
      Picture2.Print "3.0 method-application not running"
      Picture2.Print "hInstance= "; Hex$(hInstance)  ' Check return.
      r = DoEvents()  ' Allow time for shell to complete.

      ' The following technique is from another article that explains
      ' how to determine when a shelled process has terminated. It is
      ' used here to obtain the correct handle to the window of the
      ' application whose icon is being extracted. The handle is needed
      ' to close the application after the extraction is complete.
      TimeOutPeriod = 5
      fTimeOut = 0      ' Set to false.
      s! = Timer
      Do
         r = DoEvents()
         hWndShelledWindow = GetActiveWindow()
         ' Set timeout flag if time has expired.
         If Timer - s! &gt; TimeOutPeriod Then fTimeOut = True
      Loop While hWndShelledWindow = Form1.hWnd And Not fTimeOut
      ' If a timeout occurred, display a timeout message and terminate.
      If fTimeOut Then
         MsgBox "Timeout waiting for shelled application", 16
         Exit Sub
      End If

      ' Iterate through icon resource identifier values
      ' until you obtain a valid handle to an icon.
      Do
         hIcon = LoadIcon(hInstance, n&amp;)
         n&amp; = n&amp; + 1
      Loop Until hIcon &lt;&gt; 0

      Picture2.Print "HICON= "; Hex$(hIcon)
      Picture1.AutoRedraw = -1 ' Make hDC point to persistent bitmap.
      r = DrawIcon(Picture1.hDC, 19, 19, hIcon)
      Picture2.Print "return from DrawIcon="; r
      Picture1.Refresh         ' Refresh from persistent bitmap to picture.

      ' Now post a message to the window to close the application.
      r = PostMessage(hWndShelledWindow, WM_CLOSE, NULL, NULL)
      Picture2.Print "return from PostMessage="; r
   End Sub

</PRE><P><LI>Place the following code in the Command3_Click event:
<P>
<PRE>   Sub Command3_Click ()
      ' This code transfers the extracted icon's image to Picture2's
      ' Picture property and demonstrates that DrawIcon assigns the image
      ' to the hDC of Picture1, which points to the persistent bitmap
      ' (Image property), not to the Picture property.
      Picture2.Picture = LoadPicture("")  ' Clear old icon.
      Picture2.currenty = 0               ' Reset coordinates for printing
                                          '  return values.
      Picture2.currentx = 0
      Picture2.Picture = Picture1.image   ' Transfer persistent bitmap
</PRE></OL>image
<PRE>                                          '  to the Picture property.
   End Sub

</PRE><P><LI>Press ALT F, V to save the project. Then press F5 to run the program.
   Click "3.0 method" to run the code that works in Windows version 3.0.
   Click "3.1 method" to run the code that works in Windows version 3.1.
   Click Command3 to copy the icon in Picture1 to Picture2 so that the
   icon can be accessed as Picture2.Picture.
<P>
   Both methods extract the first icon in the file. This can be
   modified to find the second or succeeding icons by:
<P>
<P><PRE>    - Storing the value of n&amp; in the Do Loop from the first extraction
      and plugging that in as the starting point of the next search
      in Windows version 3.0.
</PRE><P>
<PRE>                                  - Or -

    - Setting the third parameter of the ExtractIcon function to a
      specific index number in Windows version 3.1.

   You could do this in a loop to find and examine each icon in the file.

   The Windows version 3.0 method may take slightly longer to iterate and
   find the icon resource ID number.

</PRE></OL><h2>REFERENCES</h2>
 
<P>
"Microsoft Windows Software Development Kit Volume 2"
"Microsoft Press Programmer's Reference Library Volume 2"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>
Additional reference words: 1.00 2.00 3.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

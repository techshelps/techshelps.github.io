

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Emulate Overtype Mode in a Visual Basic Text Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96210 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/03/10">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Although Visual Basic text boxes do not support an overtype (replace) mode (where the text you type replaces the text already there) you can write code to add this support. The example below demonstrates two methods for implementing overtype mode i...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBT6,QBV4,QAH4,QAHP,QBS0,QACI,QA5W,QA4G,QAMB,QAFF,QATX,QAPN,QBXS,QA9N,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Emulate Overtype Mode in a Visual Basic Text Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96210 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although Visual Basic text boxes do not support an overtype (replace) mode
(where the text you type replaces the text already there) you can write
code to add this support. The example below demonstrates two methods for
implementing overtype mode in a Visual Basic text box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Visual Basic for Windows text-box controls default to insert
mode, inserting the text you type rather than replacing what is already
there (overtype mode). To emulate overtype mode, you can add code to the
KeyPress event for a text box. The following code fragment assumes you have
a text box named Text1 that you want to have in overtype mode:
<P>
<PRE>   ' Form level code:
   Const KEY_BACK = &amp;H8

   Sub Text1_KeyPress (KeyAscii As Integer)
     If KeyAscii &lt;&gt; KEY_BACK Then
       Text1.SelLength = 1
     End If
   End Sub

</PRE>By setting the SelLength property of the text box to 1 you force the text
box to highlight (select) the next character after the current caret
position. When the KeyPress event completes and the corresponding character
is added to the text in the text box, it automatically replaces the
highlighted character.
<P>
If you want to allow the user to dynamically switch between insert and
overtype mode, you can add additional code to support this; you can also
use the SelLength property to show the user which character will be
replaced when he or she is in overtype mode. The following sample program
demonstrates this:
<P>
<P><h3>Steps to Create Sample Program</h3>
 

<OL><P><LI>Run Visual Basic; or if Visual Basic is already running, choose New
   Project (ALT+F, N) from the File menu. Form1 is created by default.

<P><LI>Add one text box to Form1 named Text1.

<P><LI>Add one label box to Form1 named Label1.

<P><LI>Enter the following code in the Form1 General section:
<P>
<P><PRE>     ' Key codes:
     Const KEY_BACK = &amp;H8
     Const KEY_PRIOR = &amp;H21
     Const KEY_NEXT = &amp;H22
     Const KEY_END = &amp;H23
     Const KEY_HOME = &amp;H24
     Const KEY_LEFT = &amp;H25
     Const KEY_UP = &amp;H26
     Const KEY_RIGHT = &amp;H27
     Const KEY_DOWN = &amp;H28
     Const KEY_INSERT = &amp;H2D
</PRE><P>
  Const MODE_OVERTYPE = "overtype"
  Const MODE_INSERT = "insert"

<P><LI>Enter the following code in the Form1 Load procedure:
<P>
<P><PRE>     Sub Form_Load ()
       Text1.Tag = MODE_INSERT
       Label1.Caption = MODE_INSERT
     End Sub
</PRE>
<P><LI>Enter the following code in the Text1 Change procedure:
<P>
<P><PRE>     Sub Text1_Change ()
       ' You have taken some action that changed the text in the
       ' text box. Reset the SelLength if you are in overtype mode.
       If Text1.Tag = MODE_OVERTYPE And Text1.SelLength = 0 Then
<PRE></PRE>         Text1.SelLength = 1
       End If
     End Sub

</PRE><P><LI>Enter the following code in the Text1 KeyPress procedure:
<P>
<P><PRE>     Sub Text1_KeyPress (KeyAscii As Integer)
       ' If you press BACKSPACE and are in overtype mode,
       ' then set SelLength to 0 so the backspace will correctly
       ' delete the character to the left of the current caret
       ' position. SelLength will be reset when the Text1_Change
       ' event occurs following the backspace.
       If KeyAscii = KEY_BACK And Text1.Tag = MODE_OVERTYPE Then
<PRE></PRE>         Text1.SelLength = 0
       End If
     End Sub

</PRE><P><LI>Enter the following code in the Text1 KeyUp procedure:
<P>
<P><PRE>     Sub Text1_KeyUp (KeyCode As Integer, Shift As Integer)
       Select Case KeyCode
<PRE></PRE>         ' Toggle between insert and overtype modes.
         Case KEY_INSERT
           If Text1.Tag = MODE_OVERTYPE Then
               Text1.Tag = MODE_INSERT
               Label1.Caption = MODE_INSERT
           Else
               Text1.SelLength = 1
               Text1.Tag = MODE_OVERTYPE
               Label1.Caption = MODE_OVERTYPE
           End If

         ' Handle keys that move the caret position and reset the
         ' SelLength if you are in overtype mode:
         '
         ' The following two lines of code should be all on one line:
         Case KEY_LEFT, KEY_RIGHT, KEY_UP, KEY_DOWN, KEY_HOME, KEY_END,
              KEY_PRIOR, KEY_NEXT
           If Text1.Tag = MODE_OVERTYPE Then
             Text1.SelLength = 1
           End If
       End Select
     End Sub

</PRE><P><LI>Enter the following code in the Text1 MouseUp procedure. The Sub
   statement should all be on one line of code:
<P>
<PRE>   Sub Text1_MouseUp (Button As Integer, Shift As Integer, x As Single,
   Y As Single)

     ' You have clicked at a new location within the text box. Reset the
     ' SelLength if you are in overtype mode.
     If Text1.Tag = MODE_OVERTYPE And Text1.SelLength = 0 Then
       Text1.SelLength = 1
     End If
   End Sub

</PRE><P><LI>Press the F5 key to run the program. When you press INSERT, the Label1
   label shows the current mode of the Text1 text box. While in overtype
   mode, the current character to be replaced is highlighted.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 typeover overstrike<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

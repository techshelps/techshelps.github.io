

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 How to Size the Rows &amp; Columns of a Grid to Fit Exactly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112861">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1994/03/22">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains how to size the rows and columns of a Visual Basic grid control to allow for the display of all cells in the grid within the current bounds of the grid. This technique is useful when the number of rows and columns in the grid ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAU4,QA5V,QBS0,QARR,QDPB,QBXS,QAPN,QAE1,QAKC,QAUY,QAUR,QAM4,QAIB,QDMN,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 How to Size the Rows &amp; Columns of a Grid to Fit Exactly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112861</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic Programming System
<PRE>  for Windows, version 2.0
</PRE>- Standard and Professional Editions of Microsoft Visual Basic
<PRE>  Programming System for Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to size the rows and columns of a Visual Basic
grid control to allow for the display of all cells in the grid within the
current bounds of the grid. This technique is useful when the number of
rows and columns in the grid changes dynamically and you need to see all
the cells at once.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To allow all cells to be proportional and sized so that all can be seen
within the current grid, you need to set the ScaleMode property of the
grid's parent window to pixels. If the grid is on a form, the grid's parent
window is the form. However, if the grid is nested within a picture box,
then the picture box is the grid's parent window. Changing the parent's
ScaleMode property to pixels changes the grid control's Height and Width
properties to pixels. Once the grid's height and width are in pixels, it is
possible to calculate the row height and column width in pixels. The
example routine given below changes the form's ScaleMode to pixels
temporarily, and then changes it back after it is done.
<P>
To calculate the height of a row in pixels, the example code uses this
formula:
<P>
<PRE>   PixelRowHeight = (Grd.Height - 2) \ nRows

</PRE>The formula subtracts two pixels from the grid height to take into account
the top and bottom border. Then it divides the result by the number of rows
to get the height in pixels.
<P>
To make the rows fit exactly into the grid, the example code calculates the
remaining pixels. The number of remaining pixels is the remainder of the
division used to calculate the row height. The remaining pixels are
calculated by using this formula:
<P>
<PRE>   PixelsRemaining = (Grd.Height - 2) Mod nRows

</PRE>The example distributes one pixel of the remaining pixels to the height of
each row until it runs out of pixels.
<P>
Once you determine the height of a row in pixels, you can set the row
height. The RowHeight property expects the height in twips. So it is
necessary to multiply the pixel height by Screen.TwipsPerPixelY to convert
to twips. The row height does not include the border, so one pixel must be
subtracted from the row height prior to converting the height to twips and
assigning it.
<P>
Similar methods are used to calculate the width of each row in pixels and
assign it to the grid.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following controls and set their properties using the following
   table as a guide:
<P>
<PRE>   Name       Properties   Value
   -------------------------------
   Text1      Text         2
   Text2      Text         2
   Command1   Caption      Resize
   Grid1      ScrollBars   0-None

</PRE><P><LI>Put the following code in the General Declarations section of the form:
<P>
<PRE>   ' Enter the following two lines as one, single line:
   Sub SizeGrid (Frm As Form, Grd As Grid, nRows As Integer,
      nCols As Integer)

      Dim FormScaleMode As Integer  'Used to save ScaleMode

      'Save ScaleMode of form and change to pixels:
      FormScaleMode = Frm.ScaleMode
      Frm.ScaleMode = 3 'Pixels

      'Determine the height of a row in pixels and the remaining pixels:
      PixelRowHeight = (Grd.Height - 2) \ nRows
      PixelsRemaining = (Grd.Height - 2) Mod nRows

      'Set the height of each column:
      Grd.Rows = nRows
      For i = 0 To nRows - 1
         If i &lt; PixelsRemaining Then
            'Set the height of a row:
            'One pixel is added to eat up remainder and get a perfect fit.
            Grd.RowHeight(i) = PixelRowHeight * Screen.TwipsPerPixelY
         Else
            'Set the height of a row
            Grd.RowHeight(i) = (PixelRowHeight - 1) * Screen.TwipsPerPixelY
         End If
      Next

      'Determine the width of a column and the remaining pixels:
      PixelColWidth = (Grd.Width - 2) \ nCols
      PixelsRemaining = (Grd.Width - 2) Mod nCols

      'Set the width of each column:
      Grd.Cols = nCols
      For i = 0 To nCols - 1
         If i &lt; PixelsRemaining Then
            'Set the width of a column:
            'One pixel is added to eat up remainder and get a perfect fit
            Grd.ColWidth(i) = PixelColWidth * Screen.TwipsPerPixelX
         Else
            'Set the width of a column:
            Grd.ColWidth(i) = (PixelColWidth - 1) * Screen.TwipsPerPixelX
         End If
      Next

      'Return form to original ScaleMode:
      Frm.ScaleMode = FormScaleMode

   End Sub

</PRE><P><LI>Add the following code to the command button's click event:
<P>
<PRE>   Sub Command1_Click ()
      Call SizeGrid(Form1, Grid1, CInt(Text1), CInt(Text2))
   End Sub

</PRE><P><LI>Save the project.

<P><LI>Run the example.
<P>
</OL>Enter values for the number of rows and columns in the two text boxes and
click the command button. The grid should have the exact number of rows and
columns that you specified. Also, the rows and columns should fit exactly
into the grid.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsCus<BR>
Additional reference words: 2.00 3.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

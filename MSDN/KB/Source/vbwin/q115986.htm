

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Avoid Common Database Programming Mistakes in VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115986">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/06/09">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains how to avoid some of the most common errors with Microsoft Visual Basic version 3.0 database programming. Use these tips to avoid unnecessary bottlenecks when executing queries on your databases.  NOTE: Some of these tips may ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QA28,QABO,QA4H,QAZV,QAE1,QA1S,QA5V,QDMN,QAG8,QAY2,QBS0,QBMW,QAJQ,QACF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Avoid Common Database Programming Mistakes in VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115986</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to avoid some of the most common errors with
Microsoft Visual Basic version 3.0 database programming. Use these tips to
avoid unnecessary bottlenecks when executing queries on your databases.
<P>
NOTE: Some of these tips may not work on ISAM databases.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Avoid Redundant Tables</h3>
 
<P>
Frequently, a second copy of an existing table is not joined to anything.
This slows down the query process and causes unwanted records to appear
in query results.
<P>
<P><h3>Avoid Expressions in Query Output</h3>
 
<P>
By placing expressions in the output column of a query, you may cause
optimization problems. For example, consider a situation where one
query is used as input to another query as in this example:
<P>
<PRE>   Query1:  Select IIF([MyColumn]="H", "Hello", Goodbye") AS X
   Query2:  Select * From Query1 Where X="Hello";

</PRE>This causes an optimization problem because the Microsoft Access database
engine cannot optimize the IIF() expression, so it cannot optimize Query2.
Sometimes expressions get buried so far down in a query tree, that you may
not even realize they're there.
<P>
Here's a more optimal way to write this query:
<P>
<PRE>   Query1: Select * From mytable Where mycolumn = "H";

</PRE><h3>Place Group By Column in the Same Table as Aggregate</h3>
 
<P>
When joining two tables, make sure the Group By column (Column1) and the
column in the aggregate (Sum, Count, and so on) both come from the same
table.
<P>
<P><h3>Group By as Few Columns as Possible</h3>
 
<P>
When creating queries that display totals using the Microsoft Access
database engine, place as few columns as possible in the Group By clause.
The more columns the query has to group by, the longer it will take.
<P>
<P><h3>Place the Group By Before the Join</h3>
 
<P>
If possible, use the Group By with a single table, and then join that table
to another table rather than joining the tables and doing the Group By in
the same query. Here are two examples:
<P>
Example One:
<P>
<PRE>   ' Enter the following three lines as one, single line of code:
   Select table1.[field1 ID], Count(table1.[field2 ID]) AS [CountofField2]
      From table2 INNER JOIN table1
      ON table2.[field3 ID] = table1.[field3 ID]
      Group By table1.[field1 Name];

</PRE>Example Two:
<P>
<PRE>   ' This example uses two separate queries:

   ' Query1:
   Select table2.[field1 ID] From table2 Group By table2.[field1 ID];

   ' Query2:
   ' Enter the following three lines as one, single line of code:
   Select table1.[field3 ID], Count(table1.[field2 ID]) AS [CountofField2]
      From Q1 INNER JOIN table1 ON Q1.[field3 ID] = table1.[field3 ID]
      Group By table1.[field3 Name];

</PRE><h3>Index the Join Column from Both Tables</h3>
 
<P>
When joining tables, index the fields on both sides of a join. This can
speed query execution by allowing more sophisticated join strategies such
as Index Join and Index-Merge Join.
<P>
<P><h3>Index Fields as Much as Possible</h3>
 
<P>
When in doubt, index. If the frequency of updating the database is low,
place an index on all columns that will be used as join columns or that
will be used in a restriction. With the Rushmore query optimization in the
Microsoft Access version 2.0 database engine, the query engine is able to
take advantage of multiple indexes on a single table.
<P>
<P><h3>Use COUNT(*) Instead of COUNT([Column Name])</h3>
 
<P>
To determine the number of records, use COUNT(*) rather than COUNT([Column
Name]). COUNT(*) is executed much faster.
<P>
These are just some tips to help you in the design and programming phase of
creating your program. For information on optimizing your database design,
please see the following article in the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../ACCESS/Q100139.htm">Q100139</A></B>
<PRE>TITLE     : INF: Database Normalization Basics
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

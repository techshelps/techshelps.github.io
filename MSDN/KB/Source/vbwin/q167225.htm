

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Access an Oracle Database Using RDO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167225">
<META NAME="KBModify" CONTENT="1997/09/05">
<META NAME="KBCreate" CONTENT="1997/04/21">
<META NAME="Keywords" CONTENT="vb5all vb5howto VBKBDB VBKBODBC kb3rdparty kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  With Visual Basic 5.0 Enterprise edition, you have the ability to connect to an Oracle database through a DSN-Less connection, execute a stored procedure using parameters, and get return values from that stored procedure. The example in this articl...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA94,QABM,QANE,QAH4,QAU9,QAPN,QAI5,QAHE,QAGI,QATX,QAUD,QBT6,QAB9,QA9E V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Access an Oracle Database Using RDO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 5, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167225</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With Visual Basic 5.0 Enterprise edition, you have the ability to connect
to an Oracle database through a DSN-Less connection, execute a stored
procedure using parameters, and get return values from that stored
procedure. The example in this article illustrates all of this
functionality.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The example in this article is a simple Visual Basic 5.0 project that
creates a DSN-Less connection against an Oracle database and executes a
stored procedure. When working with Oracle and the Microsoft ODBC Driver
for Oracle, there are some settings that are different than working with
Microsoft SQL Server. These differences occur because you are using a
different ODBC driver.
<P>
The Visual Basic 5.0 Enterprise edition includes RDO 2.0 and the Microsoft
ODBC Driver for Oracle. Both of these need to be installed in order to run
the example project in this article.
<P>
NOTE: The ODBC driver from Oracle does not support the entire RDO 2.0
feature set (including the calling of stored procedures and binding return
values).
<P>
The following example was created against an Oracle 7.3 database through a
SQL*Net 2.3 connection. All of the following code (including the stored
procedure) should work fine with Oracle 7.2. But, the Microsoft ODBC Driver
for Oracle Help file states that it only supports SQL*Net 2.3
<P>
There are two objects that need to be created on the Oracle database; a
table (rdooracle) and a stored procedure (rdoinsert). Following are the
data definition language (DDL) scripts to create these objects:

<UL><LI>RDOORACLE: This is just a two-column table with the first column set
   as the primary key:
<P>
<P><PRE>      CREATE TABLE rdooracle (
<PRE></PRE>                item_number    NUMBER(3) PRIMARY KEY,
                depot_number   NUMBER(3));

</PRE><LI>RDOINSERT: This procedure accepts a single numeric input parameter and
   returns a single numeric output parameter. The input parameter is first
   used by an input statement then it is divided by 2 and set as the output
   parameter:
<P>
<P><PRE>      CREATE OR REPLACE PROCEDURE rdoinsert
<PRE></PRE>         (insnum IN NUMBER, outnum OUT NUMBER)
      IS
      BEGIN
      INSERT INTO rdooracle
         (Item_Number, Depot_Number)
      VALUES
         (insnum, 16);
      outnum := insnum/2;
      END;
      /

</PRE></UL>NOTE: You must use Procedures that have output parameters and not Functions
when working with Oracle and RDO placeholder parameters.
<P>
The above scripts can be run from SQL*Plus or from within the Visual
Database Tools Add-In in the Visual Basic 5.0 Enterprise edition. Once
these objects have been created, you can create the Visual Basic project
that will use them.
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
This example project uses a simple form to send a bind parameter to the
RDOINSERT stored procedure and then return the output parameter from that
procedure. Here are the steps to create the project:

<OL><P><LI>Open a new project in Visual Basic 5.0 Enterprise edition. Form1 is
   created by default.

<P><LI>Place the following controls on the form:
<P>
<PRE>   Control     Name     Text/Caption
   ---------------------------------
   Button      cmdCheck  Check
   Button      cmdSend   Send
   Text Box    txtInput
   Label       lblInput  Input:

</PRE><P><LI>From the Tools menu, select the Options item. Click the "Default Full
   Module View" option and then click OK. This will allow you to view all
   of the code for this project.

<P><LI>Paste the following code into your code window:
<P>
<P><PRE>      Option Explicit
      Dim Cn As rdoConnection
      Dim En As rdoEnvironment
      Dim CPw As rdoQuery
      Dim Rs As rdoResultset
      Dim Conn As String
      Dim QSQL As String
      Dim Response As String
      Dim Prompt As String
</PRE><P>
<P><PRE>      Private Sub cmdCheck_Click()
</PRE><P>
<PRE>          QSQL = "Select Item_Number, Depot_Number From rdooracle Where " _
          &amp; "item_number =" &amp; txtInput.Text
          Set Rs = Cn.OpenResultset(QSQL, rdOpenStatic, , rdExecDirect)

          Prompt = "Item_Number = " &amp; Rs(0) &amp; ".  Depot_Number = " _
          &amp; Rs(1) &amp; "."

          Response = MsgBox(Prompt, , "Query Results")

          Rs.Close

      End Sub

      Private Sub cmdSend_Click()

          CPw(0) = Val(txtInput.Text)
          CPw.Execute

          Prompt = "Return value from stored procedure is " &amp; CPw(1) &amp; "."
          Response = MsgBox(Prompt, , "Stored Procedure Result")

      End Sub

      Private Sub Form_Load()

          Conn = "UID=;PWD=;driver={Microsoft ODBC Driver for Oracle};" _
               &amp; "CONNECTSTRING=MyOracle;"

          Set En = rdoEnvironments(0)
          Set Cn = En.OpenConnection("", rdDriverPrompt, False, Conn)
          QSQL = "{call rdoinsert(?,?)}"
          Set CPw = Cn.CreateQuery("", QSQL)

      End Sub

      Private Sub Form_Unload(Cancel As Integer)

          En.Close

      End Sub

</PRE><P><LI>Run the project.
<P>
</OL>When you enter a number in the text box, txtInput, and click the "Send"
button, the Oracle stored procedure, RDOINSERT, is called. The number you
entered in the text box is used as the input parameter for the procedure.
The output parameter is used in a message box that is called after the
stored procedure has completed processing. With your original value still
in the text box, click the "Check" button. This creates a simple read-only
resultset that is displayed in another message box.
<P>
Following is a detailed explanation of the code used in this demonstration
project:
<P>
The Form_Load event contains the code that creates the DSN-Less connection.
It also contains the code that creates the query that calls the stored
procedure:
<P>
<PRE>   Private Sub Form_Load()

       Conn = "UID=;PWD=;driver={Microsoft ODBC Driver for Oracle};" _
            &amp; "CONNECTSTRING=MyOracle;"

       Set En = rdoEnvironments(0)
       Set Cn = En.OpenConnection("", rdDriverPrompt, False, Conn)
       QSQL = "{call rdoinsert(?,?)}"
       Set CPw = Cn.CreateQuery("", QSQL)

   End Sub

</PRE></OL>Note that you are not using the rdPreparedStatement object. This object has
been replaced by the rdoQuery object. This is new for RDO 2.0. Also, with
RDO 2.0, you do not need to explicitly create a connection object as is
done in this project. You can create a stand-alone query object that is not
specifically associated with a connection. To learn more about this
functionality, look up the rdoQuery Object in the Visual Basic 5.0
Enterprise edition Help file.
<P>
The connect string used to open a connection to an Oracle database (or any
database) is very dependent upon the underlying ODBC driver. Even though
similar parameters are used by most ODBC drivers (UID, PWD, etc.), the
connect string used here will work only with the Microsoft ODBC Driver for
Oracle:
<P>
<PRE>   Conn = "UID=;PWD=;driver={Microsoft ODBC Driver for Oracle};" _
            &amp; "CONNECTSTRING=MyOracle;"

</PRE>The most important part of this connect string is the "CONNECTSTRING"’
keyword. It is used only by the Microsoft ODBC Driver for Oracle. For
Microsoft SQL Server 6.5, you use the keyword "SERVER." The string assigned
to CONNECTSTRING is the Database Alias that you set up in SQL*Net. This is
the only difference in the connect string when connecting to an Oracle
database. All of the other parameters operate as described in the Help file
(under rdoConnection Object) for Visual Basic 5.0 Enterprise edition. As
stated in the Help file, for a connection, you do not specify a DSN in the
connect string.
<P>
Also in the Form_Load event is the code that creates the query object that
calls the stored procedure:
<P>
<PRE>   QSQL = "{call rdoinsert(?,?)}"
   Set CPw = Cn.CreateQuery("", QSQL)

</PRE>With Oracle, you cannot specify a return value for a stored procedure call
as you can with Microsoft SQL Server 6.5; you must use stored procedures
that have output parameters as noted earlier in this article. The parameter
placeholders in the QSQL string are denoted by a "?" and referenced in the
order they in which they appear in the string. For more information on the
use of parameter placeholders in the rdoQuery object, refer to the
rdoParameter object in the Visual Basic 5.0 Enterprise edition Help file.
<P>
The remainder of the project is fairly straight-forward and well-documented
in both the online Help file and Books Online, both of which come with
Visual Basic 5.0. The RDO issues critical to working with Oracle, the
connect string, and the calling of stored procedures have been detailed in
this project. For more information on these issues, please consult your
Oracle SQL*Net 2.3 documentation, the Help file for the Microsoft ODBC
Driver for Oracle, and your Oracle 7 server documentation.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual Basic 5.0 Enterprise Edition Help files
<P>
Oracle SQL*Net 2.3 Help file
<P>
Hitchhiker’s Guide to Visual Basic &amp; SQL Server - Fourth Edition.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Oracle RDO Stored Procedure
<P>

(c) Microsoft Corporation 1997, All Rights Reserved.<BR>
Contributions by Sam Carpenter, Microsoft Corporation<BR>
Keywords          : vb5all vb5howto VBKBDB VBKBODBC kb3rdparty kbhowto<BR>
Version           : 5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 5, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

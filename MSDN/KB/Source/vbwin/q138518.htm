

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Pass a Point Structure to the Windows API by Value </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138518">
<META NAME="KBModify" CONTENT="1995/10/30">
<META NAME="KBCreate" CONTENT="1995/10/23">
<META NAME="Keywords" CONTENT="kbprg kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The WindowFromPoint and ChildWindowFromPoint API functions require that a Point structure be passed by value. Visual Basic is not capable of passing a structure by value, only by reference. However, it is possible to pass the elements of the user-d...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAD7,QAH7,QAH6,QBC9,QBC8,QANO,QAH4,QAY5,QDIT,QAKD,QAIC,QBV8,QAB9,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Pass a Point Structure to the Windows API by Value</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138518</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The WindowFromPoint and ChildWindowFromPoint API functions require that a
Point structure be passed by value. Visual Basic is not capable of passing
a structure by value, only by reference. However, it is possible to
pass the elements of the user-defined type in the correct order so that
these API functions can be used. This article explains and demonstrates how
to pass the Point structure by value to the API in the 16-bit and 32-bit
editions of Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Windows 16-bit API is unusal because it allows you to pass the Point
structure to the WindowFromPoint functions by value. Typically, user-
defined types are passed to functions by reference because passing them by
value can use up a lot of stack space and be much slower than passing the
address of the structure. An exception was made for the Point structure in
certain functions (such as ChildWindowFromPoint and WindowFromPoint)
because in 16-bit programming the size of the structure was only 32 bits
long, which is the same length as a far address anyway.
<P>
However, on a 32-bit operating system, this structure becomes 64 bits. To
preserve compatibility, Microsoft decided that the Point structure should
still be passed by value for these two API functions in the 32-bit user
dynamic link library (DLL).
<P>
Visual Basic is not capable of passing structures by value, but the value
of the elements of the structure can be placed on the stack in the correct
order. Therefore, when passing the elements of the Point structure in
32-bit programming, two long values should be passed. When passing the
elements in 16-bit programming, two integers should be passed to the
function.
<P>
Another important consideration is that 32-bit Visual Basic uses the C
convention (stdcall) of passing parameters. This convention specifies that
arguments are placed on the stack from right to left. 16-Bit Visual Basic
maintains the Pascal convention of passing parameters from left to right.
(API functions are declared using the Pascal calling convention.) As a
result, the elements of the structure must be listed in reverse order (that
is, element y followed by x) when calling the WindowFromPoint function
using 32-Bit Visual Basic. When using 16-bit Visual Basic, element x is
passed to the API function before element y.
<P>
<P><h3>Step-by-Step Example of How to Call the WindowFromPoint API</h3>
 
<P>
The code in the following example uses conditional compilation so that the
code can be placed in either the 16-bit or 32-bit version of Visual Basic.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Change the ScaleMode of the form to 3 - Pixels. (The coordinates of the
   Point must be passed in pixels.)

<P><LI>Insert a new code module in the project (on the Insert menu, click
   New Module). Place the following code in the new module:
<P>
   #If Win32 Then
<PRE>   Declare Function WindowFromPointXY Lib "User32" _
       Alias "WindowFromPoint" (ByVal xPoint As Long, _
       ByVal yPoint As Long) As Long
   #Else
   Declare Function WindowFromPointYX Lib "User" _
       Alias "WindowFromPoint" (ByVal yPoint As Integer, ByVal _
       xPoint As Integer) As Integer
   #End If

   Function VBWindowFromPoint(ByVal x As Long, ByVal y As Long) As Long
   #If Win32 Then
       VBWindowFromPoint = WindowFromPointXY(x, y)
   #Else
       VBWindowFromPoint = WindowFromPointYX(y, x)
   #End If
   End Function

</PRE><P><LI>Place the following code in the MouseDown event of Form1:
<P>
<PRE>   ' Convert form coordinates to screen coordinates
   screenX = X + Form1.Left / Screen.TwipsPerPixelX
   screenY = Y + Form1.Top / Screen.TwipsPerPixelY

   ' Retrieve the window handle
   hWindow = VBWindowFromPoint(screenX, screenY)

   If hWindow = Form1.hWnd Then
   MsgBox "Success"
   End If

</PRE><P><LI>Run the code by pressing the F5 key. Click Form1. The message box should
   appear indicating that the API call successfully returned the window
   handle of Form1.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbcode kbhowto<BR>
KBSubcategory: APrgWindow<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

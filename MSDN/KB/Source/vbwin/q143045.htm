

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using SetCapture and WindowFromPoint in Win32 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143045">
<META NAME="KBModify" CONTENT="1996/05/20">
<META NAME="KBCreate" CONTENT="1996/01/24">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  In Visual Basic 4.0 under Win32, the SetCapture and WindowFromPoint API calls must be used differently than they were in Windows 3.x. This article provides a useful code sample which demonstrates how to use both of the API calls.  MORE INFORMATION ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO2,QAY5,QAK7,QAFF,QAK4,QBV8,QACI,QACJ,QAB9,QAMB,QBE7,QBE6,QAH4,QBC9,QBC8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using SetCapture and WindowFromPoint in Win32</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 20, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143045</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 32-bit edition, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Visual Basic 4.0 under Win32, the SetCapture and WindowFromPoint API
calls must be used differently than they were in Windows 3.x. This article
provides a useful code sample which demonstrates how to use both of the API
calls.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code sample allows the user to drag an icon off of the form
and point it to any window on the screen. As the user moves the mouse over
a window, the application draws a rectangle around that window. When the
user releases the mouse, the caption of the current window is inserted into
Form1's titlebar.
<P>
To use this code, simply insert the following code into the General
Declarations section of Form1, and run the program.
<P>
Option Explicit
<PRE>'--------------------------------------------------------------------------

' API Declarations, Types, and Constants
'--------------------------------------------------------------------------

</PRE>Private Type RECT
<PRE>        Left As Long
        Top As Long
        Right As Long
        Bottom As Long
</PRE>End Type
<P>
Private Type POINT
<PRE>    X As Long
    Y As Long
</PRE>End Type
<P>
<PRE>Private Declare Function SetCapture Lib "user32" (ByVal hWnd As Long) _
</PRE>As Long
<PRE>Private Declare Function GetCapture Lib "user32" () As Long
Private Declare Sub ClientToScreen Lib "user32" (ByVal hWnd As Long, _
                                                        lpPoint As POINT)
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex&amp;) _
</PRE>As Long
<PRE>Private Declare Function GetWindowText&amp; Lib "user32" Alias "GetWindowTextA"
</PRE>_
<PRE>                                  (ByVal hWnd&amp;, ByVal lpString$, ByVal cb&amp;)
Private Declare Function GetWindowRect Lib "user32" (ByVal hWnd As Long, _
                                                 lpRect As RECT) As Boolean
Private Declare Function WindowFromPoint Lib "user32" (ByVal ptY As Long, _
                                                 ByVal ptX As Long) As Long
Private Declare Function GetWindowDC Lib "user32" (ByVal hWnd As Long) _
</PRE>As Long
<PRE>Private Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, _
                                                 ByVal hdc As Long) As Long
Private Declare Function SelectObject Lib "gdi32" (ByVal hdc As Long, _
                                             ByVal hObject As Long) As Long
Private Declare Function GetStockObject Lib "gdi32" (ByVal nIndex&amp;) As Long
Private Declare Function CreatePen Lib "gdi32" (ByVal nPenStyle&amp;, _
                                     ByVal nWidth&amp;, ByVal crColor&amp;) As Long
Private Declare Function DeleteObject Lib "gdi32" (ByVal hObject&amp;) As Long
Private Declare Function SetROP2 Lib "gdi32" (ByVal hdc As Long, _
                                           ByVal nDrawMode As Long) As Long
Private Declare Function Rectangle Lib "gdi32" (ByVal hdc&amp;, ByVal X1&amp;, _
                                   ByVal Y1&amp;, ByVal X2&amp;, ByVal Y2&amp;) As Long
Private Declare Sub InvalidateRect Lib "user32" (ByVal hWnd As Long, _
                                       lpRect As Any, ByVal bErase As Long)
Private Declare Function LoadCursor Lib "user32" Alias "LoadCursorA" _
                                (ByVal hInstance&amp;, ByVal lpCursor&amp;) As Long
Private Declare Function DrawIcon Lib "user32" (ByVal hdc As Long, _
           ByVal X As Long, ByVal Y As Long, ByVal hIcon As Long) _
  As Long
  Private Const IDC_UPARROW = 32516&amp;
'--------------------------------------------------------------------------

' Module-Level variables
'--------------------------------------------------------------------------

Public mlngHwndCaptured As Long   ' Holds the handle to the captured window
'**************************************************************************

' Purpose:  Turns on SetCapture and changes the mouse pointer when the user
'           clicks down on the form.
'**************************************************************************

Private Sub Form_MouseDown(Button%, Shift%, X As Single, Y As Single)
    If SetCapture(hWnd) Then MousePointer = vbUpArrow
  End Sub

'**************************************************************************

' Purpose:  Draws a rectangle around the window currently under the mouse
'           pointer while the primary mouse key is being held down.
'**************************************************************************

Private Sub Form_MouseMove(Button%, Shift%, X As Single, Y As Single)
    Dim pt As POINT          ' Holds the location of the window.
    Static hWndLast As Long  ' The handle of the last window we drew a
                             ' a rectangle on.
    '----------------------------------------------------------------------

    ' If in capture mode, then draw a rectangle around the active window.
    '----------------------------------------------------------------------

    If GetCapture() Then
        '------------------------------------------------------------------

        ' Convert the current mouse position to Screen coordinates.
        '------------------------------------------------------------------

        pt.X = CLng(X)
        pt.Y = CLng(Y)
        ClientToScreen Me.hWnd, pt
        '------------------------------------------------------------------

        ' Pass that value to WindowFromPoint to find out what window we are
        ' pointing to.
        '------------------------------------------------------------------

        mlngHwndCaptured = WindowFromPoint(pt.X, pt.Y)
        '------------------------------------------------------------------

        ' If its not the last window, then erase the previous rectangle
        ' and draw a rectangle around the window under the mouse pointer.
        '------------------------------------------------------------------

        If hWndLast &lt;&gt; mlngHwndCaptured Then
            If hWndLast Then InvertTracker hWndLast
            InvertTracker mlngHwndCaptured
            hWndLast = mlngHwndCaptured
        End If
    End If
  End Sub

'**************************************************************************

' Purpose:  Puts the caption of the window under the cusor into our
</PRE>caption.
<P>
<PRE>'**************************************************************************

Private Sub Form_MouseUp(Button%, Shift%, X As Single, Y As Single)
    Dim strCaption$ ' Buffer used to hold the caption.
    '----------------------------------------------------------------------

    ' If a window has been captured, then put its caption in our caption.
    '----------------------------------------------------------------------

    If mlngHwndCaptured Then
        '------------------------------------------------------------------

        ' Create a buffer to hold the caption, and call GetWindowText to
        ' retrive it.
        '------------------------------------------------------------------

        strCaption = Space(1000)
        Caption = Left(strCaption, _
            GetWindowText(mlngHwndCaptured, strCaption, Len(strCaption)))
        '------------------------------------------------------------------

      ' Refresh the entire screen in case we forgot to erase a rectangle.
        '------------------------------------------------------------------

        InvalidateRect 0, 0, True
        '------------------------------------------------------------------

        ' Clear our module-level variable and restore the mouse pointer.
        '------------------------------------------------------------------

          mlngHwndCaptured = False
          MousePointer = vbNormal
      End If
  End Sub

'**************************************************************************

  ' Purpose:  Draws a inverted rectangle around a window on the screen.
  ' Inputs:   A handle to a enabled and visible window.

'**************************************************************************

Private Sub InvertTracker(hwndDest As Long)
    Dim hdcDest&amp;, hPen&amp;, hOldPen&amp;, hOldBrush&amp;
    Dim cxBorder&amp;, cxFrame&amp;, cyFrame&amp;, cxScreen&amp;, cyScreen&amp;
    Dim rc As RECT, cr As Long
    Const NULL_BRUSH = 5
    Const R2_NOT = 6
    Const PS_INSIDEFRAME = 6
    '----------------------------------------------------------------------


    ' Get the screen, border, and frame sizes.
    '----------------------------------------------------------------------

      cxScreen = GetSystemMetrics(0)
      cyScreen = GetSystemMetrics(1)
      cxBorder = GetSystemMetrics(5)
      cxFrame = GetSystemMetrics(32)
    cyFrame = GetSystemMetrics(33)
    '----------------------------------------------------------------------

    ' Get the coordinates of the window on the screen.
    '----------------------------------------------------------------------


    GetWindowRect hwndDest, rc
    '----------------------------------------------------------------------

    ' Get a handle to the window's device context.
    '----------------------------------------------------------------------

    hdcDest = GetWindowDC(hwndDest)
    '----------------------------------------------------------------------


    ' Create an inverse pen that is the size of a window border.
    '----------------------------------------------------------------------

    SetROP2 hdcDest, R2_NOT
    cr = RGB(0, 0, 0)
    hPen = CreatePen(PS_INSIDEFRAME, 3 * cxBorder, cr)
    '----------------------------------------------------------------------


   ' Draw the rectangle around the window.
   '----------------------------------------------------------------------


    hOldPen = SelectObject(hdcDest, hPen)
    hOldBrush = SelectObject(hdcDest, GetStockObject(NULL_BRUSH))
    Rectangle hdcDest, 0, 0, rc.Right - rc.Left, rc.Bottom - rc.Top
    SelectObject hdcDest, hOldBrush
    SelectObject hdcDest, hOldPen
    '----------------------------------------------------------------------


   ' Give the window its device context back, and destroy our pen.
   '----------------------------------------------------------------------


   ReleaseDC hwndDest, hdcDest
    DeleteObject hPen
End Sub
'**************************************************************************

' Purpose:  Sets up the form, and draws a copy of vbUpArrow on the form.
'**************************************************************************

Private Sub Form_Load()
    '----------------------------------------------------------------------


    ' Size the form and put instructions in the caption.
    '----------------------------------------------------------------------


    Move 0, 0, 250 * Screen.TwipsPerPixelX, 75 * Screen.TwipsPerPixelY
    Caption = "Click &amp; drag the arrow!"
    '----------------------------------------------------------------------


   ' Change the ScaleMode to pixels and turn on AutoRedraw.
   '----------------------------------------------------------------------


   ScaleMode = vbPixels
   AutoRedraw = True
   '----------------------------------------------------------------------


   ' Draw vbUpArrow into the form's persistant bitmap.
   '----------------------------------------------------------------------


    DrawIcon hdc, (ScaleWidth / 2), 9, LoadCursor(0, IDC_UPARROW)
End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 WIN32 SETCAPTURE WINDOWFROMPOINT vb4win<BR>
vb432 LOADCURSOR<BR>
KBCategory: kbprg<BR>
KBSubCategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 20, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use VB Control Property or Variable in SQL Statement </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q146909">
<META NAME="KBModify" CONTENT="1996/02/21">
<META NAME="KBCreate" CONTENT="1996/02/19">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  You can have a Visual Basic application build a SQL query based on choices made by a person using the application. The application can then use the SQL query when creating a view into a database.  This article describes methods developers can use t...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QATX,QAH4,QAYL,QA7O,QAPN,QAPF,QANF,QBS0,QBVV,QAOE,QAMN,QAB5,QA50,QAVX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use VB Control Property or Variable in SQL Statement</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 21, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q146909</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can have a Visual Basic application build a SQL query based on
choices made by a person using the application. The application can
then use the SQL query when creating a view into a database.
<P>
This article describes methods developers can use to create SQL queries
that are based on control properties or names of variables. The
information in this article applies to the following methods: FindFirst,
FindLast, FindNext, FindPrevious, CreateDynaset, CreateSnapshot, Execute,
and ExecuteSQL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When building a SQL query, do not include the variable or control name
inside the SQL string; instead, you should reference its value. Using
the variable or control name inside the SQL string is a mistake. For
example, the following code is incorrect:
<P>
<PRE>   Dim ds As Recordset
   Set ds = MyDB.OpenRecordset("Employees", dbOpenDynaset)
      ds.FindFirst "NameField = Text1.Text"   ' This code is incorrect.

</PRE>This code is trying to create a dynaset that finds the first occurrence of
the contents of Text1 in a field called NameField. Although the code does
not produce an error, it does not find the desired value. It searches
for the first occurrence of the string "Text1.Text" not the value of the
Text1.Text control property.
<P>
The criteria being sought is a string, so the programmer must use string
concatenation rules to build the criteria string. The following gives
the correct version of the code example:
<P>
<PRE>   Dim ds As Recordset
   Set ds = MyDB.OpenRecordset("Employees", dbOpenDynaset)
      ds.FindFirst "NameField = '" &amp; Text1.Text &amp; "'"

</PRE>The ampersand (&amp;) operator concatenates the strings together correctly.
Also, in SQL syntax, you need to enclose string data in single quotation
marks to differentiate strings from variables.
<P>
If you think the corrected version looks confusing with all the single
and double quotation marks, you can assign the criteria to a string. Then
use Debug.Print to view the contents of the string. The following is the
same example enhanced to take advantage of the debug window:
<P>
<PRE>   Dim ds As Recordset
   Dim SQL$ as String
   Set ds = MyDB.OpenRecordset("Employees", dbOpenDynaset)
      SQL$ = "NameField = '" &amp; Text1.Text &amp; "'"
      Debug.Print SQL$
      ds.FindFirst SQL$

</PRE>If Text1 contains the string "Wilson," the Debug windows displays:
<P>
<PRE>   NameField = 'Wilson'

</PRE>If the data type of a field is a number instead of a string, do not enclose
the value being sought in single quotation marks. For example, use the
following code to create a dynaset that finds the first occurrence
of a zip code in a field called ZipCodeField where the ZipCodeField data
type is not a string:
<P>
<PRE>   Dim ds As Recordset
   Dim SQL$ as String
   Dim ZipCodeVar as Double
   Set ds = MyDB.OpenRecordset("Employees", dbOpenDynaset)
      ZipCodeVar = 98052
      SQL$ = "ZipCodeField = " &amp; ZipCodeVar  ' This line builds the string.
      Debug.Print SQL$
      ds.FindFirst SQL$
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb416 pitfall RecordSource<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 21, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

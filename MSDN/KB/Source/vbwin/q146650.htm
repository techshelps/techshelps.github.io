

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Popular Windows API Functions to Use with Visual Basic 4.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q146650">
<META NAME="KBModify" CONTENT="1996/07/25">
<META NAME="KBCreate" CONTENT="1996/02/18">
<META NAME="Keywords" CONTENT="kbusage kbprg kbref">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Below is a summary of API (application programming interface) functions for Microsoft Windows that programmers commonly use to extend the abilities of Microsoft Visual Basic for Windows. These functions can be called from either Win16 or Win32 and ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QDL9,QBWO,QBWN,QBWQ,QAY5,QDIT,QBBI,QAGQ,QBV8,QAB9,QA5F,QAMA,QAXC,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Popular Windows API Functions to Use with Visual Basic 4.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q146650</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, version 4.0, for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Below is a summary of API (application programming interface) functions
for Microsoft Windows that programmers commonly use to extend the abilities
of Microsoft Visual Basic for Windows. These functions can be called from
either Win16 or Win32 and should behave similarly in both environments
unless specifically noted.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Commonly-Used API Functions for Windows</h3>
 
<P>
The following Windows API functions are very useful for Visual Basic
programmers:

<UL><LI>BitBlt: Move a bitmap from a source device context to a destination.
<LI>ExtractIcon, DrawIcon, and LoadIcon: Manipulate icons.
<LI>FindExecutable: Find and retrieve the executable filename that is
   associated with a specified filename.
<LI>GetWindowsDirectory: Get the pathname of the Windows directory.
<LI>GetSystemDirectory: Get the pathname of the Windows system
   subdirectory.
<LI>GetSystemMetrics: Get widths and heights of the display elements of
   Microsoft Windows.
<LI>GetTempFileName: Return a temporary filename and path using the TEMP
   environment variable.
<LI>GetWindowPlacement and SetWindowPlacement: Get or set the show state
   and the normal (restored), minimized, and maximized positions of a
   window.
<LI>GetProfileString, GetProfileInt, WriteProfileString: Get or write the
   information stored in the initialization file for Windows (WIN.INI).
   NOTE: Initialization file functions remain in Win32 for backward
   compatibility with Win16. However, Win32 applications, should use the
   registry for initialization.
<LI>GetPrivateProfileString, GetPrivateProfileInt,
   WritePrivateProfileString: Get or set the information in a given
   initialization file (ininame.INI).
   NOTE: Initialization file functions remain in Win32 for backward
   compatibility with Win16. However, Win32 applications, should use the
   registry for initialization.
</UL>-  SendMessage: Send Windows messages to control applications. For
<PRE>   example, the LB_SETTABSTOPS message sets TAB stops in a list box.
   LB_FINDSTRING finds the first string in the list box which matches
   prefix text. Hundreds of other messages are available.
</PRE><LI>SetCapture: Send all mouse input to the specified window, regardless
   of the cursor position.
<LI>SetWindowPos: Change the size, position, and ordering of child,
   pop-up, and top-level windows.
<LI>SetCursorPos: Reposition the mouse pointer (cursor).
<P>
</UL><h3>Additional Commonly-Used API Functions for Windows</h3>
 
<P>
The following API functions for Windows are also very useful for Visual
Basic programmers:

<UL><LI>BringWindowToTop, SetActiveWindow: Activate a window.
<LI>CreateCompatibleDC: Prepare image in memory, such as before copying an
   image to the compatible device.
<LI>DeleteObject, ReleaseDC: Remove object or device context from memory.
<LI>DragAcceptFiles, DragFinish: Support File Manager drag/drop file
   ability.
<LI>FindWindow, ShowWindow: Check to see if given applications are
   currently running. This is useful before you perform Dynamic Data
   Exchange (DDE).
<LI>GetActiveWindow, IsWindow: Find out when a Shell function has finished
   loading a program.
<LI>GetDesktopWindow: Get a handle to the Windows desktop window, which
   covers the entire screen and is the area on top of which all icons and
   other windows are painted.
<LI>GetFreeSpace(16-bit) or GlobalMemoryStatus(32-bit), GetVersion,
   GetWinFlags(16-bit) or GetSystemInfo(32-bit): Check system settings for
   Microsoft Windows, such as for reporting in an About box under a Help
   menu.
<LI>GetModuleFileName, GetModuleHandle, GetModuleUsage(16-bit only): Get
   full pathname of the executable file from which the specified module was
   loaded. NOTE: Each Win32-based application runs in its own address
   space. Therefore GetModuleUsage does not apply.
<LI>GetPaletteEntries, CreatePen, SelectObject: Manipulate color palettes.
<LI>GetParent: Get handle of specified window's parent.
<LI>EnumChildWindows: Get list of child windows that belong to specified
   parent window.
<LI>GetWindowLong, SetWindowLong: Get or set window style information.
<LI>GetWindowText: Get the caption title of a window or the text in a
   control.
<LI>IsIconic, IsWindowVisible: Find the state of the windows of an
   application -- visible, loaded, or minimized to an icon.
<LI>LoadCursor, DestroyCursor, GetCursorPos: Handle different mouse
   cursors.
<LI>LZOpenFile, LZCopy, LZClose: Manipulate compressed files. See the
   LZEXPAND.DLL file that ships with Visual Basic version 3.0. The
   functions in LZEXPAND.DLL manipulate files that are compressed by the
   COMPRESS.EXE utility supplied with the Windows Software Development Kit
  (SDK) versions 3.0 and 3.1.
<LI>OpenComm(16-bit), WriteComm(16-bit), GetCommEventMask(16-bit),
   SetCommState: Use the COMn: serial communications port.
   NOTE: OpenComm, WriteComm, and GetCommEventMask is no longer found in
   the Win32 API set.
<LI>RoundRect, FillRect, ExtFloodFill, StretchBlt: Perform graphic
   operations beyond Visual Basic capabilities.
<LI>SetSysModalWindow (16-bit only): Set a window to be system-modal, such
   as for a screen saver's password dialog box. NOTE: The new input model
   does not allow for System Modal windows.
<LI>SndPlaySound: Play waveform .WAV sound file sounds.
<LI>WinExec: Run a Windows-based or other application, as an alternative
   to Visual Basic's Shell function.
<LI>WinHelp: Invoke WINHELP.EXE, the Windows Help application. Useful as
   an alternative to invoking WINHELP.EXE by setting the Common Dialog's
   Action property to a value of 6.
<P>
</UL><h2>REFERENCES</h2>
 

<UL><LI>"Microsoft Windows Programmer's Reference," published by Microsoft
   Press.
<LI>"Visual Basic - Game Programming with Windows," by Craig, published by
   Microsoft Press.
<LI>"PC Magazine's Visual Basic Programmer's Guide to the Windows API" by
   Daniel Appleman (of Desaware), published by Ziff-Davis Press. This
   reference describes most Windows API functions that can be used from
   within Visual Basic.
<LI>"Microsoft Win32 Programmer's Reference Volumes 1 - 5" published by
   Microsoft Press.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbusage kbprg kbref kbwebcontent<BR>
KBSubcategory: RefsDoc PrgOther
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

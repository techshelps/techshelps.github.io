

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Programmatically Close a Separate Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176391">
<META NAME="KBModify" CONTENT="1997/12/09">
<META NAME="KBCreate" CONTENT="1997/11/06">
<META NAME="Keywords" CONTENT="vb5all vb5howto VBKBSDK">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows you how use API functions to programmatically close a single instance of most Windows programs through your Visual Basic program. You can use this feature to start a program, run the program without any user interaction, and shut...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBS0,QAH4,QAGB,QBV8,QAB9,QAH6,QAIJ,QAEV,QAAW,QDMT,QAUD,QAJH,QAH7,QAD7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Programmatically Close a Separate Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176391</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows you how use API functions to programmatically close a
single instance of most Windows programs through your Visual Basic program.
You can use this feature to start a program, run the program without any
user interaction, and shut down the program when all the program tasks are
completed.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To programmatically close a single instance of a Windows program, you begin
by getting the handle to the Window that you want to close with the
FindWindow function. The FindWindow API function returns the handle of a
top-level window whose class name and window name matches the string
parameters. This function returns the handle of the window as a long value
if it is successful and a null if it fails. To use this function, you must
supply two parameters:

<UL><LI>lpClassName - a pointer to a null-terminated string that specifies the
   class name or is an atom that identifies the class-name string. In this
   application, you can pass vbNullString.

<LI>lpWindowName - a pointer to a null-terminated string that specifies the
   window name (the window's title).
<P>
</UL>Use the handle to send a message to close the Window with the PostMessage
API. The PostMessage API function sends a message to an application message
queue and returns a value immediately. This function returns a non-zero
value if the function is successful and zero if the function fails. To use
this function, you must specify four parameters:

<UL><LI>hWnd - the handle of the window you want to close. This long value is
   available as the result of the FindWindow function.

<LI>uInt - the message to post to the message queue. In this application,
   you would use the WM_CLOSE message.

<LI>wParam - the first message parameter. For this message, you should pass
   a null value.

<LI>lParam - the second message parameter. For this message, you should pass
   a null value.
<P>
</UL>A synchronization problem can occur when you send a message to close in the
event and the program terminates before the message is processed. The
WaitForSingleObject function makes sure the message is processed. To use
this function, you must specify two parameters:

<UL><LI>hHandle - the handle of the object you want to monitor.

<LI>dwMilliseconds - specifies the time-out interval, in milliseconds. If
   you set this parameter to INFINITE, the function's time-out interval
   never elapses.
<P>
</UL>To make sure that the program is closed, use the IsWindow function to
determine if the handle still exists. The IsWindow function determines if
the handle is valid. The function returns a non-zero value if the handle is
valid and zero if the handle does not exists. To use this function, you
just have to specify the handle to check.
<P>
If the handle still exists, then you can use the TerminateProcess function
to stop the handle process. However, this extreme approach is not
recommended because while you may have stopped the handle process, the
DLL's used by the handle may still reside in memory, causing a memory leak.
Use the TerminateProcess function with caution.
<P>
The next section shows how to create a sample program that demonstrates how
to close a running application from a Visual Basic program. The program
starts and stops the Windows calculator program.
<P>
<P><h3>Create the Sample Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Add two CommandButtons to Form1.

<P><LI>Copy the following code to the Code window of the Form1 form:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Declare Function WaitForSingleObject Lib "kernel32" _
<PRE></PRE>         (ByVal hHandle As Long, _
         ByVal dwMilliseconds As Long) As Long

      Private Declare Function FindWindow Lib "user32" _
         Alias "FindWindowA" _
         (ByVal lpClassName As String, _
         ByVal lpWindowName As String) As Long

      Private Declare Function PostMessage Lib "user32" _
         Alias "PostMessageA" _
         (ByVal hwnd As Long, _
         ByVal wMsg As Long, _
         ByVal wParam As Long, _
         ByVal lParam As Long) As Long

      Private Declare Function IsWindow Lib "user32" _
         (ByVal hwnd As Long) As Long

      'Constants used by the API functions
      Const WM_CLOSE = &amp;H10
      Const INFINITE = &amp;HFFFFFFFF

      Private Sub Form_Load()
         Command1.Caption = "Start the Calculator"
         Command2.Caption = "Close the Calculator"
      End Sub

      Private Sub Command1_Click()
      'Starts the Windows Calculator
         Shell "calc.exe", vbNormalNoFocus
      End Sub

      Private Sub Command2_Click()
      'Closes the Windows Calculator
         Dim hWindow As Long
         Dim lngResult As Long
         Dim lngReturnValue As Long

         hWindow = FindWindow(vbNullString, "Calculator")
         lngReturnValue = PostMessage(hWindow, WM_CLOSE, vbNull, vbNull)
         lngResult = WaitForSingleObject(hWindow, INFINITE)

         'Does the handle still exist?
         If IsWindow(hWindow) = 0 Then
            'The handle still exists. Use the TerminateProcess function
            'to close all related processes to this handle. See the
            'article for more information.
            MsgBox "Handle still exists."
         Else
            'Handle does not exist.
            MsgBox "Program closed."
         End If
      End Sub

</PRE><P><LI>Press the F5 key to run the program. Click Start the Calculator to start
   the Windows calculator program. Click Close the Calculator to close the
   Windows calculator program.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q129797.htm">Q129797</A></B>
   TITLE     : HOWTO: Launch a Win32 Application from Visual Basic

   ARTICLE-ID: <B><A HREF="../VBWIN/Q129796.htm">Q129796</A></B>
   TITLE     : HOWTO: 32-Bit App Can Determine When a Shelled Process Ends

   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q90749.htm">Q90749</A></B>
   TITLE     : HOWTO: Implement a "Kill" Operation in Windows NT

</PRE></OL>Platform SDK documentation on FindWindow and PostMessage functions
<P>
Visual Basic 5.30 Programmer's Guide to the Win32 API by Dan Appleman
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Platform SDK documentation<BR>
Keywords          : vb5all vb5howto VBKBSDK<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

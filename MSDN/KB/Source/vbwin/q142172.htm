

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Perform 3-D Line Drawing in Win32 with DrawEdge </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142172">
<META NAME="KBModify" CONTENT="1997/03/03">
<META NAME="KBCreate" CONTENT="1996/01/07">
<META NAME="Keywords" CONTENT="kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Microsoft Win32 DrawEdge function provides an extremely powerful, yet simple, method for drawing three-dimensional (3-D) lines. By using this function, your application can duplicate any 3-D effects found in the operating system. The main advan...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA0K,QAH4,QBJZ,QAY5,QAXQ,QAFF,QBV8,QAMN,QAIB,QAYS,QAUR,QAB9,QBWS,QBS0,QANX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Perform 3-D Line Drawing in Win32 with DrawEdge</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142172</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS
kbprg kbhowto kbcode
<P>
 
The information in this article applies to:
<P>
- Standard, Professional and Enterprise Editions of Microsoft Visual
<PRE>  Basic for Windows, 32-bit only, version 4.0

</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Win32 DrawEdge function provides an extremely powerful, yet
simple, method for drawing three-dimensional (3-D) lines. By using this
function, your application can duplicate any 3-D effects found in the
operating system. The main advantage of this function over your custom
function is that it adapts to changes in the system colors and resolution.
This function is also more likely to adapt to changes in the operating
system as future versions of Microsoft Windows are released.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code sample demonstrates how to use the DrawEdge function.

<OL><P><LI>Start the 32-bit version of Visual Basic 4.0 for Windows, or if it is
   already running, click New Project on the File menu.

<P><LI>Add a PictureBox control to the Form1 form.

<P><LI>Use the following steps to create a module.
<P>
   a. On the Insert menu, click Module. The code window for Module1
<P><PRE>      module appears.
</PRE><P>
   b. Add the following code to the new module:
<P>
<P><PRE>      '*******************************************************************
      ' DrawEdge.bas - Contains API declarations and constants for the
<PRE></PRE>      '                DrawEdge function.
      '*******************************************************************
      Option Explicit
      Public Type RECT
         Left As Long
         Top As Long
         Right As Long
         Bottom As Long
      End Type

      Public Const BDR_RAISEDOUTER = &amp;H1
      Public Const BDR_SUNKENOUTER = &amp;H2
      Public Const BDR_RAISEDINNER = &amp;H4
      Public Const BDR_SUNKENINNER = &amp;H8

      Public Const BDR_OUTER = &amp;H3
      Public Const BDR_INNER = &amp;HC
      Public Const BDR_RAISED = &amp;H5
      Public Const BDR_SUNKEN = &amp;HA

      Public Const EDGE_RAISED = (BDR_RAISEDOUTER Or BDR_RAISEDINNER)
      Public Const EDGE_SUNKEN = (BDR_SUNKENOUTER Or BDR_SUNKENINNER)
      Public Const EDGE_ETCHED = (BDR_SUNKENOUTER Or BDR_RAISEDINNER)
      Public Const EDGE_BUMP = (BDR_RAISEDOUTER Or BDR_SUNKENINNER)

      Public Const BF_LEFT = &amp;H1
      Public Const BF_TOP = &amp;H2
      Public Const BF_RIGHT = &amp;H4
      Public Const BF_BOTTOM = &amp;H8

      Public Const BF_TOPLEFT = (BF_TOP Or BF_LEFT)
      Public Const BF_TOPRIGHT = (BF_TOP Or BF_RIGHT)
      Public Const BF_BOTTOMLEFT = (BF_BOTTOM Or BF_LEFT)
      Public Const BF_BOTTOMRIGHT = (BF_BOTTOM Or BF_RIGHT)
      Public Const BF_RECT = (BF_LEFT Or BF_TOP Or BF_RIGHT Or BF_BOTTOM)

      Public Const BF_DIAGONAL = &amp;H10

      ' For diagonal lines, the BF_RECT flags specify the end point of
      ' the vector bounded by the rectangle parameter.
      Public Const BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL Or BF_TOP _
                   Or BF_RIGHT)
      Public Const BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL Or BF_TOP _
                   Or BF_LEFT)
      Public Const BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL Or BF_BOTTOM _
                   Or BF_LEFT)
      Public Const BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL Or BF_BOTTOM _
                   Or BF_RIGHT)

      Public Const BF_MIDDLE = &amp;H800    ' Fill in the middle.
      Public Const BF_SOFT = &amp;H1000     ' Use for softer buttons.
      Public Const BF_ADJUST = &amp;H2000   ' Calculate the space left over.
      Public Const BF_FLAT = &amp;H4000     ' For flat rather than 3-D borders.
      Public Const BF_MONO = &amp;H8000     ' For monochrome borders.

      Public Declare Function DrawEdge Lib "user32" (ByVal hdc As Long, _
        qrc As RECT, ByVal edge As Long, ByVal grfFlags As Long) As Boolean

   c. On the File menu, click Save File to save the file as Drawedge.bas.

</PRE><P><LI>Use the following steps to convert the Form1 form to a form called
   DrawEdge.
<P>
   a. Add the following to the Form1 code window:
<P>
<P><PRE>      '********************************************************************
      ' DrawEdge.frm - Demonstrates a simple method of using the
<PRE></PRE>      '                DrawEdge function.
      '********************************************************************
      Option Explicit

      '********************************************************************
      ' Prepares the form and Picture1 for use with the DrawEdge function.
      '********************************************************************

      Private Sub Form_Load()
      '--------------------------------------------------------------------
      ' Always set the ScaleMode to pixels when using API drawing
      ' functions.
      '--------------------------------------------------------------------
         ScaleMode = vbPixels
         With Picture1
            '--------------------------------------------------------------
            ' The next line is not required if you put your drawing code
            ' in the Paint event.
            '--------------------------------------------------------------
            .AutoRedraw = True

            '--------------------------------------------------------------
            ' Set the Backcolor, set the Borderstyle to none, and size
            ' the picture box to a more realistic button size.
            '--------------------------------------------------------------
            .BackColor = vb3DFace
            .BorderStyle = 0
            .Move 60, 10, 90, 30

            '--------------------------------------------------------------
            ' Make sure the picture box uses the pixel ScaleMode, and
            ' set the tag of the control to a caption for later use by
            ' the DrawControl function.
            '--------------------------------------------------------------
            .ScaleMode = vbPixels
            .Tag = "DrawEdge Test"
         End With

         '-----------------------------------------------------------------
         ' Draw the initial button.
         '-----------------------------------------------------------------
         DrawControl Picture1, Picture1.Tag, EDGE_RAISED

      End Sub

      '********************************************************************
      ' When the picture box gets a click event, draw a etched box on the
      ' upper-left corner of the form.
      '********************************************************************

      Private Sub Picture1_Click()
         Dim r As RECT   ' Used by DrawEdge to determine where to draw.

         '-----------------------------------------------------------------
         ' Location of the etched box.
         '-----------------------------------------------------------------
         With r
            .Left = 10
            .Top = 10
            .Right = 50
            .Bottom = 50
         End With

         '-----------------------------------------------------------------
         ' Draw it.
         '-----------------------------------------------------------------
         DrawEdge hdc, r, EDGE_ETCHED, BF_RECT

      End Sub

      '********************************************************************
      ' When the user presses the mouse down on the picture box,
      ' draw a sunken edge to simulate a depressed button.
      '********************************************************************
      Private Sub Picture1_MouseDown(Button%, Shift%, X!, Y!)
         DrawControl Picture1, Picture1.Tag, EDGE_SUNKEN
      End Sub

      '********************************************************************
      ' When the user releases the mouse over the picture box, draw a
      ' standard button.
      '********************************************************************
      Private Sub Picture1_MouseUp(Button%, Shift%, X!, Y!)
         DrawControl Picture1, Picture1.Tag, EDGE_RAISED
      End Sub

      '********************************************************************
      ' The DrawControl helper function is designed to make it easier to
      ' draw a button on a picture box.
      '********************************************************************
      Private Sub DrawControl(picControl As PictureBox, _
                  strCaption As String, Optional vntEdge)

      Dim r As RECT    ' Holds the location of the DrawEdge rectangle.
      Dim intOffset%   ' Used to shift the caption when the button is
                       ' pressed.
      '--------------------------------------------------------------------
      ' If the user does not provide a Edge flag, then use a default value.
      '--------------------------------------------------------------------
      vntEdge = IIf(IsMissing(vntEdge), EDGE_RAISED, vntEdge)

      '-------------------------------------------------------------------
      ' Clear the picture control and determine where to draw the new
      ' rectangle and caption.
      '-------------------------------------------------------------------
      With picControl
         .Cls
         r.Left = .ScaleLeft
         r.Top = .ScaleTop
         r.Right = .ScaleWidth
         r.Bottom = .ScaleHeight

         If vntEdge = EDGE_SUNKEN Then intOffset = 2

         .CurrentX = (.ScaleWidth - .TextWidth(strCaption) _
                     + intOffset) / 2
         .CurrentY = (.ScaleHeight - .TextHeight(strCaption) _
                     + intOffset) / 2

      End With

      '-------------------------------------------------------------------
      ' Draw the caption, then draw the rectangle.
      '-------------------------------------------------------------------
      Picture1.Print strCaption
      DrawEdge picControl.hdc, r, CLng(vntEdge), BF_RECT

      '-------------------------------------------------------------------
      ' If AutoRedraw is True then any drawing done by an API call is not
      ' seen until the picture box gets refreshed.
      '-------------------------------------------------------------------
      If picControl.AutoRedraw Then picControl.Refresh
      End Sub

   b. On the File menu, click Save File to save the file as Drawedge.frm.

</PRE><P><LI>Press the F5 key or click Start on the Run menu to start the program.

<P><LI>Click the DrawEdge button to demonstrate several DrawEdge effects.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 DRAWEDGE 3D THREED DRAWFRAMECONTROL vb4win<BR>
vb432<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubCategory: APrgOther
<P>

Keywords            : kbcode kbhowto kbprg<BR>
Version             : 4.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Compare User-Defined Type Variables in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88551 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/08/27">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The relational operators (=,   , and so on) do not support the comparison of user-defined type variables. However, you can compare user-defined type variables by converting the variables to strings, and then comparing the strings. The Windows versi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAYL,QBE7,QBE6,QAH4,QATX,QAG7,QDL9,QBWO,QBWN,QAOX,QAP2,QBWQ,QA5F,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Compare User-Defined Type Variables in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88551 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The relational operators (=, &lt;&gt;, and so on) do not support the comparison
of user-defined type variables. However, you can compare user-defined type
variables by converting the variables to strings, and then comparing the
strings. The Windows version 3.1 API hmemcpy can be used to convert a
user-defined type variable to a string.
<P>
The hmemcpy API was introduced in Microsoft Windows version 3.1, so this
technique requires Windows version 3.1 or later.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If you attempt to compare user-defined type variables using the relational
operators, the error "Type mismatch" is displayed.
<P>
The following steps demonstrate how to compare user-defined type variables
by first converting the variables to strings and then comparing the strings
by using the relational operators.
<P>
<P><h3>Step-by-Step Example</h3>
 
1. Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
<PRE>   if Visual Basic is already running. Form1 is created by default.

</PRE><P><LI>Enter the following code into the global module:
<P>
   Type myType
<P><PRE>      f1 As String * 2
      f2 As Single
</PRE>   End Type
<P>
<PRE>   ' Enter the following Declare statement entirely as one, single line:
   Declare Sub hmemcpy Lib "kernel" (hpvDest As Any, hpvSource As Any,
      ByVal cbCopy As Long)

</PRE><P><LI>Enter the following code into the general Declarations section of
   Form1:
<P>
<PRE>   ' type2str converts a user-defined type variable to a string.
   Function type2str (t As myType) As String
      Dim s As String
      s = Space$(Len(t))
      Call hmemcpy(ByVal s, t, Len(t))
      type2str = s
   End Function

</PRE><P><LI>Enter the following code into the Form1 Click event procedure:
<P>
<PRE>   Sub Form_Click ()
      Dim x As myType
      Dim y As myType

      x.f1 = "ab"
      x.f2 = 2
      y = x

      If type2str(x) = type2str(y) Then
         Print "x = y"
      Else
         Print "x &lt;&gt; y"
      End If

      y.f1 = "ba"
      If type2str(x) &gt; type2str(y) Then
         Print "x &gt; y"
      Else
         Print "x &lt;= y"
      End If
   End Sub

</PRE><P><LI>Press the F5 key to run the program.
<P>
</OL>The program prints "x = y" and "x &lt;= y" on Form1.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 3.10<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create a Timer Event Using the Windows API Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180736">
<META NAME="KBModify" CONTENT="1998/02/18">
<META NAME="KBCreate" CONTENT="1998/02/09">
<META NAME="Keywords" CONTENT="VBKBWindowing_VBKB kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows you how to create a timer event using the SetTimer and KillTimer Windows API functions. The article also includes a sample project that demonstrates how to use these functions.  You can use these functions if you need to execute ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATK,QAY5,QBS0,QBV8,QAH4,QAB9,QAIJ,QAKD,QACE,QBBI,QAUD,QAHE,QDIV,QBWS,QAFF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create a Timer Event Using the Windows API Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180736</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows you how to create a timer event using the SetTimer and
KillTimer Windows API functions. The article also includes a sample project
that demonstrates how to use these functions.
<P>
You can use these functions if you need to execute events at intervals
greater than what the Visual Basic Timer control allows. The Timer control
allows a maximum interval of slightly over a minute while these API
functions allow you to set an interval up to 24.86 days.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The SetTimer function creates a timer that executes a function at the
specified time-out value. This function requires the following parameters:

<UL><LI>hWnd identifies the window to be associated with the timer. This window
   is owned by the calling thread. If this parameter is NULL, no
   window is associated with the timer and the nIDEvent parameter is
   ignored.

<LI>nIDEvent specifies a nonzero timer identifier. If the hWnd parameter is
   NULL, this parameter is ignored.

<LI>uElapse specifies the time-out value, in milliseconds. You can use a
   Long data type with a value of up to 2,147,483,647 milliseconds. Values
   beyond this limit result in a Run-time Error '6' Overflow.
<P>
   NOTE: Visual Basic adds a pound sign (#) to the end of the time value if
   the value exceeds this limit.

<LI>lpTimerFunc points to the function to be notified when the time-out
   value elapses. Use the AddressOf operator to return a pointer to the
   function. The callback function receives the hWnd, the NIDEvent, the
   UElapse, and lpTimerFunc parameters from the AddressOf function.
<P>
</UL>If the SetTimer function is successful, the function returns an integer
that identifies the new timer. The KillTimer function requires this integer
to destroy the timer. If the SetTimer function fails, the function returns
zero.
<P>
After creating a timer, you must destroy the timer using the KillTimer
function. The KillTimer function requires the following parameters:

<UL><LI>hWnd identifies the window associated with the specified timer. This
   value must be the same as the hWnd value passed to the SetTimer function
   that created the timer.

<LI>uIDEvent specifies the timer to be destroyed. If the window handle
   passed to SetTimer is valid, this parameter must be the same as the
   uIDEvent value passed to SetTimer. If the application calls SetTimer
   with hWnd set to NULL, this parameter must be the timer identifier
   returned by SetTimer.
<P>
</UL>The KillTimer function returns a non-zero value if the function
successfully destroys the timer.
<P>
The next section shows how to create a sample project that demonstrates how
to use these functions in Visual Basic.
<P>
<P><h3>To Create the Sample Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Add a TextBox and CommandButton to Form1.

<P><LI>Add a module to the project by completing the following steps:
<P>
   - From the Project menu, click Add Module. The Add Module dialog box
<P><PRE>     appears.
</PRE><P>
   - On the New tab, choose Module and click OK. A new module is added to
<P><PRE>     your project.
</PRE>
<P><LI>Copy the following code to the Code window of Module1:
<P>
   Sample Code
   -----------
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Declare Function SetTimer Lib "user32" _
<PRE></PRE>            (ByVal hwnd As Long, _
            ByVal nIDEvent As Long, _
            ByVal uElapse As Long, _
            ByVal lpTimerFunc As Long) As Long

      Declare Function KillTimer Lib "user32" _
            (ByVal hwnd As Long, _
            ByVal nIDEvent As Long) As Long

      Global iCounter As Integer

      Sub TimerProc(ByVal hwnd As Long, _
                     ByVal uMsg As Long, _
                     ByVal idEvent As Long, _
                     ByVal dwTime As Long)

          iCounter = iCounter + 1
          Form1.Text1.Text = CStr(iCounter)
      End Sub

</PRE><P><LI>Copy the following code to the Code window of Form1:
<P>
   Sample Code
   -----------
<P>
<P><PRE>      Option Explicit
      Dim lngTimerID As Long
      Dim BlnTimer As Boolean
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         BlnTimer = False
         Command1.Caption = "Start Timer"
      End Sub

      Private Sub Command1_Click()
      'Starts and stops the timer.

         If BlnTimer = False Then
            lngTimerID = SetTimer(0, 0, 200, AddressOf TimerProc)
            If lngTimerID = 0 Then
              MsgBox "Timer not created. Ending Program"
              Exit Sub
            End If
            BlnTimer = True
            Command1.Caption = "Stop Timer"
         Else
            lngTimerID = KillTimer(0, lngTimerID)
            If lngTimerID = 0 Then
               MsgBox "couldn't kill the timer"
            End If
            BlnTimer = False
            Command1.Caption = "Start Timer"
          End If

      End Sub

</PRE><P><LI>On the Run menu, click Start or press the F5 key to start the program.
   Click Start Timer to create a timer event. At each specified interval,
   the TextBox is updated with a new value. Click Stop Timer to stop the
   timer event.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information about the SetTimer and KillTimer functions,
refer to the Platform SDK Product Documentation.
<P>
For additional information about the AddressOf operator, refer to the
Visual Basic Help.
<P>
Visual Basic Programmer's Guide, version 5.0; "Using the Timer Control"
<P>
 
<PRE>Keywords          : VBKBWindowing_VBKB kbcode
Version           : WINDOWS:5.0
Platform          : Win95 winnt
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

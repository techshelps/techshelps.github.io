

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Trap Keystrokes in the Form Instead of Form's Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99688 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/06/03">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  To trap most keystrokes (see NOTE below) at the form level instead of passing them to the form's controls, set the form's KeyPreview property to True and use KeyAscii=0 in the Form_KeyPress event. This prevents keystrokes from going to the form's c...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAO4,QA7O,QAB5,QAOE,QAMN,QBT6,QBV4,QBVV,QAUD,QBDT,QAHP,QBXS,QA4P V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Trap Keystrokes in the Form Instead of Form's Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99688 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.00 and 3.00
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To trap most keystrokes (see NOTE below) at the form level instead of
passing them to the form's controls, set the form's KeyPreview property to
True and use KeyAscii=0 in the Form_KeyPress event. This prevents
keystrokes from going to the form's controls.
<P>
NOTE: the technique described in this article will not intercept the ENTER
key on command buttons. Command buttons are subclassed Windows push button
controls and the ENTER key is an accelerator key that is passed to the
superclass; Visual Basic never receives it.
<P>
Also note that KeyCode=0 in the Form_KeyDown event won't prevent keystrokes
going to the form's controls. This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A form's KeyPreview property determines whether form keyboard events are
invoked before control keyboard events. The keyboard events are KeyDown,
KeyUp, and KeyPress.
<P>
You can use the KeyPreview property to create a keyboard-handling procedure
for a form. For example, when an application uses function keys, it's
likely that you'll want to process the keystrokes at the form level rather
than writing code for each control that might receive keystroke events. If
a form has no visible and enabled controls, it automatically receives all
keyboard events.
<P>
To handle keyboard events only at the form level and not allow controls
to receive keyboard events, set KeyAscii to 0 in the form's KeyPress event.
<P>
<P><h3>Using Form_KeyPress Versus Form_KeyDown to Prevent Text Box Input</h3>
 
<P>
This example demonstrates the difference between Form_KeyPress and
Form_KeyDown to attempt to trap and prevent all keyboard input for
a text box.

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project if Visual
   Basic is already running. Form1 is created by default.

<P><LI>Set the KeyPreview property of Form1 to True.

<P><LI>Add a text box (Text1) to Form1.

<P><LI>Add the following code to the Form_KeyDown event of Form1:
<P>
   KeyCode = 0

<P><LI>From the Run menu, choose Start or press the F5 key.
<P>
</OL>The Text1 box still accepts input, which you may not have expected. This
behavior is by design.
<P>
To prevent the Text1 box from accepting input, add KeyAscii = 0 to the
Form_KeyPress event of Form1. This traps and disables all input to all the
controls on the form, as desired. The Form_KeyPress event enables you to
handle the keystrokes the way you want.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

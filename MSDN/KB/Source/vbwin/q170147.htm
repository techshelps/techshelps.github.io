

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Retrieve Identity Column After Insert Using RDO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170147">
<META NAME="KBModify" CONTENT="1997/11/26">
<META NAME="KBCreate" CONTENT="1997/06/16">
<META NAME="Keywords" CONTENT="vb5all kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  SQL Server Identity columns automatically increment their value when a new record is added to the table, which makes them very useful for a unique primary key. When using RDO, you may want to know what the new value of the Identity column is after ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QACI,QA9N,QABM,QBS0,QA5V,QAKD,QAE1,QAPN,QANF,QAIJ,QBXR,QAK7,QBWS,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Retrieve Identity Column After Insert Using RDO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170147</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
SQL Server Identity columns automatically increment their value when a new
record is added to the table, which makes them very useful for a unique
primary key. When using RDO, you may want to know what the new value of the
Identity column is after inserting a new record with the RDO Addnew/Update
methods, or with a SQL INSERT statement.
<P>
SQL Server maintains an environment variable named @@IDENTITY that stores
the value of the last Identity column added. This environment variable can
be queried several different ways from RDO.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following two code examples demonstrate how the value of the Identity
column is retrieved from the SQL Server Pubs database using RDO, after a
new record is inserted. For testing purpose, a temporary table, IColTest,
is created in Pubs database with one Identity column and one VarChar
column.
<P>
To create a temporary table and index in SQL Server, select Pubs database,
then place the following Create Table T-SQL in the SQL window of ISQL/W and
execute it.
<P>
<PRE>   Create Table IColTest
           (Id_Col int Identity, F2 VarChar(30) Null)
   Create Unique Index IIndex on IColTest(Id_Col)

</PRE><h3>Example One</h3>
 
<P>
This example uses a stored procedure to insert a row by taking parameters
passed from RDO, and then returns the value of @@IDENTITY in a OUTPUT
parameter.
<P>
Task One: Create the Stored Procedure
<P>
To create this stored procedure, place the following Create Procedure T-SQL
in the SQL window of ISQL/W and execute it:
<P>
<PRE>   Create Procedure MyInsert
       @FieldVal Varchar(30), @id Int OUTPUT AS
       Insert Into IColTest (F2) Values(@FieldVal)
       Select @id = @@Identity

</PRE>Task Two: Create the VB Code

<OL><P><LI>Start a new project in Visual Basic and choose "Standard EXE". Form1 is
   created by default.

<P><LI>Add a CommandButton to Form1, Command1 by default.

<P><LI>Paste the following code into the code window of Form1:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim cn As New rdoConnection
         Dim qy As New rdoQuery
         Dim strConnect As String

         strConnect = "Driver={SQL Server}; Server=MyServer; _
                       Database=Pubs; Uid=sa; Pwd="
         With cn
           .Connect = strConnect
           .LoginTimeout = 5
           .EstablishConnection rdDriverNoPrompt, True
         End With
         With qy
           Set .ActiveConnection = cn
           .SQL = "{Call MyInsert(?, ?)}"
         End With
         qy(0).Direction = rdParamInput
         qy(1).Direction = rdParamOutput
         qy(0) = "RainBow"
         qy.Execute

         Debug.Print qy(1)
      End Sub

   In Visual Basic 5.0, you can also use the User Connection Designer (CQD)
   to create rdoQuery objects in your project. The CQD takes your SQL query
   and permits you to specify the data types for each parameter. It then
   inserts appropriate code in your application to expose these procedures
   very much like methods off the rdoQuery object.

</PRE><P><LI>Note that you must change your SERVER, UID, and PWD parameters in the
   connect string.

<P><LI>Start the program or press the F5 key.

<P><LI>Click Command1 button to insert a row and display value of @@IDENTITY in
   the debug window.
<P>
</OL><h3>Example Two</h3>
 
<P>
You can also do a Select @@IDENTITY with an OpenResultset after inserting a
row without creating a stored procedure on the SQL server.

<OL><P><LI>Add another CommandButton to Form1, Command2 by default.

<P><LI>Paste the following code into the code window of Form1:
<P>
<P><PRE>      Private Sub Command2_Click()
<PRE></PRE>          Dim cn As New rdoConnection
          Dim rs As rdoResultset
          Dim strConnect as string

          strConnect = "Driver={SQL Server}; Server=MyServer; _
                       Database=Pubs; Uid=sa; Pwd="
          With cn
             .Connect = strConnect
             .LoginTimeout = 5
             .EstablishConnection rdDriverNoPrompt, True
          End With

          Set rs = cn.OpenResultset _
      ("SET NOCOUNT ON _
             INSERT INTO IColTest(F2) VALUES('Balloon') _
             SELECT @@IDENTITY _
             SET NOCOUNT OFF")
           Debug.Print rs(0)
           rs.Close
           cn.Close
       End Sub

</PRE><P><LI>Note that you must change your SERVER, UID, and PWD parameters in the
   Connect method.

<P><LI>Start the program or press the F5 key.

<P><LI>Click the Command2 button to insert a row to table IColTest and display
   value of @@IDENTITY in the debug window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information of User Connection Designer, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q166281.htm">Q166281</A></B>
   TITLE: HOWTO: Create and Implement a UserConnection

 (c) Microsoft Corporation 1997, All Rights Reserved.
</PRE></OL>Contributions by Adrian Chiang, Microsoft Corporation
 
<PRE>Keywords          : vb5all kbhowto
Version           : 5.0
Platform          : WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

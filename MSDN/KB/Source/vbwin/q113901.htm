

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 Querying for Literal Special Characters in Where Clause </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113901">
<META NAME="KBModify" CONTENT="1997/03/18">
<META NAME="KBCreate" CONTENT="1994/04/19">
<META NAME="Keywords" CONTENT="APrgDataAcc kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The purpose of this article is to demonstrate how to set up the WHERE clause of an SQL statement to search for special characters in a text field of a database table.  The special characters in the Microsoft Jet Database Engine are the single quota...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA50,QAHH,QA1S,QBS0,QDKY,QAML,QAPF,QATX,QAFO,QAPN,QALH,QAB5,QA4F,QBVV,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 Querying for Literal Special Characters in Where Clause</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113901</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbprg
<P>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The purpose of this article is to demonstrate how to set up the WHERE
clause of an SQL statement to search for special characters in a text
field of a database table.
<P>
The special characters in the Microsoft Jet Database Engine are the
single quotation mark ('), double quotation mark ("), and the pipe or
vertical bar (|). All the other alpha-numeric characters are treated as
part of the literal string.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The single and double quotation marks are used interchangeably by the
Jet database engine as delimiters for literal strings. Therefore, special
consideration must be taken when you set up a Where clause to query a
text field that contains embedded single or double quotation marks.
<P>
<P><h3>Looking for a String that Contains Single Quotation Marks</h3>
 
<P>
For example, if you need to query a [Last Name] field for O'Conner, the
Jet database engine needs to see the single quotation mark as part of the
literal, not as a delimiter. You can accomplish this three different ways:

<UL><LI>Use double quotation marks to delimit the literal string.

<LI>Place two single quotation marks next to each other. The Jet database
   engine interprets these two single quotation together as one.

<LI>Embed the Chr() function; Chr(39) is the single quotation mark and
   Chr(34) is the double quotation mark.
<P>
</UL>Below are examples of each method:
<P>
<PRE>   [Last Name]="O'Conner"
   [Last Name]='O''Conner'
   [Last Name]='O' &amp; Chr(39) &amp; 'Conner'

</PRE><h3>Choosing a Method and Implementing It for Single Quotation Marks</h3>
 
<P>
As you can see, the first method is the easiest to read, but because Visual
Basic uses double quotation marks as a string delimiter, it is not simple
to implement. In a Visual Basic program, the last two options require you
to know in advance whether or not a user entered a quotation mark as part
of the search string; then you'd need to parse it and append the extra
single quotation mark or Chr(39) function.
<P>
Keep in mind that Visual Basic itself uses double quotation marks as a
string literal delimiter. The following lines of code show you how to
implement the queries in a Visual Basic program to perform a
"Recordset.FindFirst criteria$" operation:
<P>
<PRE>   criteria$ = "[Last Name]=" &amp; Chr(34) &amp; "O'Conner" &amp; Chr(34)
   criteria$ = "[Last Name]=""O'Conner"""
   criteria$ = "[Last Name]='O''Conner'"
   criteria$ = "[Last Name]='O' &amp; Chr(39) &amp; 'Conner'"

</PRE>The first method uses the Visual Basic Chr(34) function to embed double
quotation marks in the string passed to the Jet database engine. The second
method uses two double quotation marks in a row, which Visual Basic
interprets and embeds as a single double quotation mark in the string. The
third option passes the two single quotation marks to the Jet database
engine, which interprets them as one single quotation mark. The fourth
option passes the embedded Chr(39) function to the Jet database engine,
which evaluates it as the single quotation mark.
<P>
<P><h3>Looking for a String that Contains Double Quotation Marks</h3>
 
<P>
When querying for a string containing a double quotation mark, use the same
rules, just interchange double quotation marks for single:

<UL><LI>Use single quotation marks to delimit the literal string.

<LI>Place two double quotation marks next to each other. The Jet database
   engine interprets these as one double quotation mark.

<LI>Embed the Chr() function. Chr(34) is the double quotation mark.
<P>
</UL>Below are examples of each method:
<P>
<PRE>   [Famous Quotes]='"To Be or Not To Be"'
   [Famous Quotes]="""To Be or Not To Be"""
   [Famous Quotes]=Chr(34) &amp; "To Be or Not To Be" &amp; Chr(34)

</PRE><h3>Choosing a Method and Implementing It for Double Quotation Marks</h3>
 
<P>
Here's how to implement these methods in Visual Basic:
<P>
<PRE>   criteria$ = "[Famous Quotes]='""To Be or Not To Be""'"
   criteria$ = "[Famous Quotes]=""""""To Be or Not To Be"""""""
   criteria$ = "[Famous Quotes]="Chr(34) &amp; ""To Be or Not To Be"" &amp; Chr(34)

</PRE>The first example uses two double quotation marks, so Visual Basic embeds
one in the string. The second example uses six double quotation marks in a
row, so Visual Basic embeds three in a row in the string. Then the Jet
database engine uses those three double quotation marks as follows:

<UL><LI>One of the three is a delimiter.

<LI>The other two are seen as one double quotation mark to search for in the
   literal string.
<P>
</UL>The final example embeds the Chr(34), which Jet uses as the delimiter, then
Visual Basic interprets the two double quotation marks and embeds one
in the string.
<P>
<P><h3>Dealing with Strings that Contain Both Single and Double Quotation Marks</h3>
 
<P>
Further complications arise when you need to search for a string that
contains both a single and a double quotation mark. For example, if you
want to search a [Height] field of a medical database for all patients over
5'10" (five feet 10 inches) tall. Here you need to decide which quotation
mark to use as a delimiter. The following example shows you what the Jet
database engine needs to see:

<UL><LI>Single quotation mark as the delimiter:
<P>
<PRE>   [Height]='5''10"'                 ' Two single quotes embed as one
   [Height]='5' &amp; Chr(39) &amp; '10"'    ' Use Chr(39) to embed a single quote

</PRE><LI>Double quotation mark as the delimiter:
<P>
<PRE>   [Height]="5'10"""                 ' Two double quotes embed as one
   [Height]="5'10" &amp; Chr(34)         ' Use Chr(34) to embed a double quote

</PRE></UL>In Visual Basic, implement the above examples in a FindFirst method:

<UL><LI>Single quotation mark as the delimiter:
<P>
   criteria$ = "[Height]='5''10""'"
   criteria$ = "[Height]='5' &amp; Chr(39) &amp; '10""'"

<LI>Double quotation mark as the delimiter:
<P>
   criteria$ = "[Height]=""5'10"""""""
   criteria$ = "[Height]=""5'10"" &amp; Chr(34)"
<P>
</UL><h3>Pipe Character or Vertical Bar</h3>
 
<P>
The pipe character or vertical bar is a reserved character for the Jet
database engine. It tells the Jet database engine to evaluate the
identifier before evaluating the rest of the expression. Therefore,
the Jet database engine inserts the value of the identifier in the
expression, and then evaluates it.
<P>
Vertical bars are used most often in domain aggregate functions when
you want the function to automatically recalculate the value it returns
in filters. Or vertical bars are used as an alternative to the ampersand
(&amp;) operator when you concatenate text values. Because of this, you
cannot embed the vertical bar (|) in a literal string, you must embed
the Chr() function. Chr(124) is the vertical bar.
<P>
For example, if you needed to search a [Response] field for Yes|No, the Jet
database engine needs to see:
<P>
<PRE>   [Response]='Yes' &amp; Chr(124) &amp; 'No'

</PRE>If you try to embed the vertical bar in the string (for example,
[Response]='Yes|No'), the Jet database engine will give you a syntax error.
<P>
In Visual Basic, implement the above statement in a criteria string of the
FindFirst method:
<P>
<PRE>   criteria$ = "'Yes' &amp; Chr(124) &amp; 'No'"
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: APrgDataAcc<BR>
Additional reference words: 3.00 quote quotes apostrophe<BR>
Keywords            : APrgDataAcc kbprg<BR>
Version             : 3.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Trap VB Form Lost Focus with GetActiveWindow API </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69792 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1991/03/02">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The LostFocus event in Microsoft Visual Basic is useful when transferring control within an application, and you can use the form deactivate and activate events in versions 2.0 and 3.0 to see if the entire form has lost the focus. However, in versi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADO,QDL9,QBWO,QBWN,QAH4,QBS0,QAPN,QA7O,QAMN,QAB5,QAO4,QABH,QABI,QAGI,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Trap VB Form Lost Focus with GetActiveWindow API</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69792 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows,
<PRE>  versions 1.0, 2.0, and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The LostFocus event in Microsoft Visual Basic is useful when transferring
control within an application, and you can use the form deactivate and
activate events in versions 2.0 and 3.0 to see if the entire form has
lost the focus. However, in version 1.0, no global routine exists to check
for the entire form losing the focus. To check whether your version
1.0 application has lost the focus, periodically check the Windows API
function GetActiveWindow in a Visual Basic timer event, as explained below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The only way that version 1.0 provides a check for loss of focus on a
form or control is by triggering the LostFocus event. A form does
support a LostFocus event; however, a form will only get focus if
there are no controls on that form. Focus goes to the controls on a
form, and when you click any other visible form, the control's
LostFocus procedure will be called. A control's LostFocus procedure
will also be called when another control on the form is activated. To
perform a routine that occurs only when the form loses focus requires
careful management of what generated a LostFocus event on each control
(such as setting a flag if another control's Click event was called).
<P>
For a simpler method to check if a whole form has lost the focus, you
can call the Windows API function GetActiveWindow, located in USER.EXE
(a DLL provided with Windows 3.0). The GetActiveWindow API call
returns the window handle of the currently active window, which is the
new window that you last clicked anywhere in Microsoft Windows. In a
timer event procedure for the form, call GetActiveWindow and compare
the handle of the currently active Window with the handle of the form
window (Form1.hWND). If the handle differs, you know the form has lost
the focus. The following program example demonstrates this technique:
<P>
<P><h3>Program Example</h3>
 
<P>
This single-form example will print "Lost Focus" on the form when you
click a different window (such as when you click another program
running in Windows).
<P>
In Visual Basic, draw one timer control (Timer1) and one command
button (Command1) on a single form (Form1).
<P>
From the VB.EXE Code menu, choose View Code, and enter the following
code for Form1, using (general) from the Object box, and
(declarations) from the Procedure box:
<P>
<PRE>   Declare Function GetActiveWindow Lib "User" () As Integer
   Dim FOCUS As Integer
   Const TRUE = -1
   Const FALSE = 0

</PRE>From the Object box, choose Timer1, and from the Procedure box, choose
Timer, and then put the following code in the Timer1_Timer procedure:
<P>
<PRE>Sub Timer1_Timer ()
   If FOCUS = TRUE Then
    ' Compare the handle of the currently active Window with the handle
    ' of the Form1 window:
    If GetActiveWindow() &lt;&gt; Form1.hWND Then
       'Do form's lost-focus routines here.
       Print "Lost Focus"
       FOCUS = FALSE
    End If
   End If
End Sub

</PRE>You must set FOCUS=TRUE in the Click event procedure of every control
on the form, as follows:
<P>
From the Object box, choose Command1, and from the Procedure box, choose
Click, then put the following code in the Command1_Click procedure:
<P>
<PRE>   Sub Command1_Click ()
      FOCUS = TRUE
   End Sub

</PRE>Double-click Form1 (at design time) and enter the following code
for the Form_Click procedure:
<P>
<PRE>   Sub Form_Click ()
      FOCUS = TRUE
      Timer1.Interval = 10
   End Sub

</PRE>You can now run the program.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Programming Windows: the Microsoft Guide to Writing Applications for
Windows 3," Charles Petzold. Microsoft Press, 1990.
<P>
"Microsoft Windows Software Development Kit: Reference Volume 1,"
version 3.0.
<P>
WINSDK.HLP file shipped with Microsoft Windows 3.0 Software
Development Kit.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

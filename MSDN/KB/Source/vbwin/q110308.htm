

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Encrypt a String with Password Security </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110308">
<META NAME="KBModify" CONTENT="1997/07/03">
<META NAME="KBCreate" CONTENT="1994/01/19">
<META NAME="Keywords" CONTENT="kb3rdparty kbcode PrgOther vb4all vb4win vb5all vb5howto vbwin kbfasttip kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  It is sometimes desirable to restrict the visibility of string constants within a Microsoft Visual Basic compiled application. In many cases, string constants remain in a linear, unencrypted form that debug/editor utilities can display.  The sample...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABG,QBS0,QAWP,QATX,QAH4,QAMA,QA5F,QAWK,QAOX,QAK7,QAY5,QAGI,QAB9,QA5B,QAVK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Encrypt a String with Password Security</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110308</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is sometimes desirable to restrict the visibility of string constants
within a Microsoft Visual Basic compiled application. In many cases, string
constants remain in a linear, unencrypted form that debug/editor utilities
can display.
<P>
The sample Visual Basic code below encrypts a string with the XOR operator
using password security. You can also adapt this technique to other
dialects of Basic or other languages.
<P>
NOTE: This behavior is not exhibited when a Visual Basic 5.0 application is
compiled using the native mode compiler.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Software tools for debugging and viewing binary code can easily find ASCII
strings stored in compiled executable .EXE programs. If you want to hide or
protect strings in .EXE programs, you can use techniques such as these:

<UL><LI>Append a series of Chr$() functions in your Basic code. For example,
   the following string concatenates ASCII values 65 through 68, which
   represent the capital letters A through D:
<P>
<P><PRE>      A$ = Chr$(65) + Chr$(66) + Chr$(67) + Chr$(68)
      Print A$
</PRE><P>
   This code prints ABCD. Because the ABCD is stored in code instead of in
   a string constant, it is not directly visible when viewed in a debugger.
   This method is okay for small amounts of data, but is inefficient for
   larger strings.

<LI>Add or subtract a constant or a letter's position value to the
   ASCII/ANSI value of each character in the string.
<P>
   NOTE: Don't exceed the byte value range of 0 to 255. For example, if you
   add 50 to the extended-ASCII character CHR$(230) and assign it to a
   string in Basic, you get an "Illegal function call" error.

<LI>Use the Xor function in a formula using a key or password string. Byte
   values changed with Xor always stay within the byte value range 0 to
   255. This technique is flexible and elegant. See the sample program in
   the next section below.
<P>
   NOTE: The Xor function is also known as the exclusive-OR function. An
   exclusive-OR means A or B, but not both. For example, if A is true,
   and B is false, then A Xor B is true, but if both A and B are true,
   then A Xor B is false.

<LI>Use third-party compression and encryption software, such as LZEXE or
   PKLITE, on the compiled executable EXE file. For secure encryption
   routines, see the QuickPak Professional Library from Crescent
   Division, Progress Software, Inc., shown in the Reference section below.

<LI>Keep a checksum to protect against viruses or hackers. You can keep a
   checksum of various important values in the program, and the program can
   refuse to run if any checksums have changed.
<P>
   NOTE: A checksum is an error-detection scheme that involves creating a
   sum of the bits in a set of bytes of data, then using that sum to later
   check for a change in the data.
<P>
</UL><h3>Example of String Encryption Using Xor Function</h3>
 
<P>
Calling the Encrypt routine below encrypts a string using a password.
Calling the Encrypt routine a second time decrypts the encrypted string.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the Form Load event:
<P>
<PRE>   Sub Form_Load ()
      form1.Show  ' Must Show form in Load event before Print is visible.
      secret$ = "This is the string that will be encrypted."
      PassWord$ = "password"

      Call Encrypt(secret$, PassWord$)     'Encrypt the string.
      Print " After encrypting it once: "  'Print the result.
      Print secret$
      Print

      Call Encrypt(secret$, PassWord$)     'A second call to the Encrypt
      Print "After a second encryption:"   'subroutine now decrypts the
      Print secret$                        'encrypted string.

   End Sub

</PRE><P><LI>Add the following Encrypt procedure to the general declarations section:
<P>
<PRE>   Sub Encrypt (secret$, PassWord$)
      ' secret$ = the string you wish to encrypt or decrypt.
      ' PassWord$ = the password with which to encrypt the string.
      L = Len(PassWord$)
      For X = 1 To Len(secret$)
         Char = Asc(Mid$(PassWord$, (X Mod L) - L * ((X Mod L) = 0), 1))
         Mid$(secret$, X, 1) = Chr$(Asc(Mid$(secret$, X, 1)) Xor Char)
      Next
   End Sub

</PRE><P><LI>Start the program, or press the F5 key. Close the form to end the
   program.
<P>
</OL><h3>Xor: The Exclusive-OR Operator</h3>
 
<P>
The exclusive-OR operator (Xor in the Basic language) performs a logical
exclusion on two expressions. For example:
<P>
<PRE>   Result = expr1 Xor expr2

</PRE></OL>A useful behavior of Xor is that the first expression expr1 is returned
without losing any bits when you perform Result Xor expr2. This ability to
restore the first expression from the Result combined with the second
expression is why the Xor function is useful for encryption.
<P>
The Xor operator performs a bit-wise comparison of identically positioned
bits in two numeric expressions and sets the corresponding bit in the
result according to the following truth table:
<P>
<PRE>   If bit in expr1 is:     And bit in expr2 is:    The result is:
   ---------------------------------------------------------------
         0                           0                    0
         0                           1                    1
         1                           0                    1
         1                           1                    0

</PRE><h3>ASCII and ANSI Character Sets</h3>
 
<P>
For a listing of the ASCII and ANSI character sets, see the Help menu in
Visual Basic.
<P>
American Standard Code for Information Interchange (ASCII) is the 7-bit
character set widely used to represent letters and symbols found on a
standard United States keyboard. The ASCII character set is the same as the
first 128 characters (0 to 127) in the American National Standards
Institute (ANSI) character set. The ANSI character set uses all 8 bits in a
byte, and includes 256 characters (0 to 255). ANSI characters 128 to 255
are sometimes referred to as the extended-ASCII characters.
<P>
<P><h2>REFERENCES</h2>
 
<P>
The following company offers encryption software and other products for
Basic:
<P>
Crescent Division, Progress Software, Inc.
14 Oak Park
Bedford, MA  01730  USA
Contact:  Sales Information (800)352-2742, or
<PRE>          Adam Schwartz (617)280-3000
</PRE>Fax: (617) 280-4025
Internet Web Site <B><A HREF="http://www.crescent.progress.com">http://www.crescent.progress.com</A></B>
Ask about the QuickPak Professional Library for Windows.
<P>
Products from Progress Software are manufactured independent of Microsoft.
Microsoft makes no warranty, implied or otherwise, regarding these
products' performance or reliability.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kb3rdparty kbcode PrgOther vb4all vb4win vb5all vb5howto vbwin kbfasttip kbhowto<BR>
Version             : 4.0 5.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

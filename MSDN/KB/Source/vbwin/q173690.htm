

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Manipulate Office Assistants from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q173690">
<META NAME="KBModify" CONTENT="1997/09/11">
<META NAME="KBCreate" CONTENT="1997/09/10">
<META NAME="Keywords" CONTENT="vb432 VB4WIN vb5all VBKBAutomation">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Microsoft Office 97 introduces the Office Assistant, a cartoon-like character designed to answer questions and help you perform routine tasks with Microsoft Office applications. Office Assistants have an object model available in the  Microsoft Off...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKE,QBS0,QAPN,QAW6,QAIH,QDKX,QA1S,QBVQ,QBVP,QDH3,QDN9,QAGX,QBHQ,QAPF,QAAP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Manipulate Office Assistants from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q173690</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Office 97 introduces the Office Assistant, a cartoon-like
character designed to answer questions and help you perform routine tasks
with Microsoft Office applications. Office Assistants have an object model
available in the "Microsoft Office 8.0 Object Library" (Mso97.dll) and it
appears that the Assistant objects may be manipulated similar to any other
OLE object. However, attempting to manipulate the Assistants from Visual
Basic may cause the following error:
<P>
<PRE>   Run-time error '-2147467259 (80004005)':
   Operation cannot be performed when the application is inactive

</PRE>Other errors may occur as well. These errors usually indicate an invalid
use of a property or method, or a similar OLE automation error.
<P>
The Office Assistant object model is read-only when used outside of
Microsoft Office applications. Properties of the Office Assistant may be
read; for example, the following line of code returns true or false:
<P>
<PRE>   Msgbox Assistant.Visible

</PRE>However, Office Assistant properties cannot be changed or set, and methods
may not be executed from within Visual Basic or any other development
environment without a reference to an active Office application object. For
example, executing the following line
<P>
<PRE>   Assistant.Visible = True

</PRE>causes the error described above.
<P>
To programmatically manipulate the Microsoft Office Assistants from within
Visual Basic, you must create a reference to an active Office application
object, such as "Access.Application", from which you can manipulate the
Assistant.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The step-by-step example below illustrates how to manipulate the Microsoft
Office Assistant using Microsoft Office application objects. When the
following code executes, an Office application object is instantiated and
the Office application will be running and visible on the Task Bar. The
user is prompted approximately every two seconds to view some Office
Assistant animation. If the user responds "Yes" to the message box, a
random Office Assistant animation is selected and executed.
<P>
NOTE: The Office Assistant component is optional when setting up Microsoft
Office applications. If the Office Assistants are not installed, a run-time
error will occur with the following message:
<P>
<PRE>   Method 'assistant' of object '_application' failed

</PRE>The Office Assistant component must be installed using the Microsoft Office
setup program before the step-by-step example will function correctly.
<P>
<P><h3>Step-By-Step Example</h3>
 
<P>
In the sample code below, the objOffice variable is used to get a reference
to an Office application object. Remember that a reference to an Office
application object is necessary; the method below is the way to do this in
Visual Basic. If you would like to substitute another Office application
for Microsoft Access, modify the OfficeAppObject constant to be Microsoft
Word, Microsoft Excel or Microsoft PowerPoint.

<OL><P><LI>Start a new Standard EXE project. Form1 is created by default.

<P><LI>Add references to the "Microsoft Office 8.0 Object Library" and the
   "Microsoft Access 8.0 Object Library". In Visual Basic 5.0 click
   References on the Project menu; in Visual Basic 4.0 click References
   on the Tools menu. "Microsoft Word 8.0 Object Library," "Microsoft Excel
   8.0 Object Library," and "Microsoft PowerPoint 8.0 Object Library" could
   also be selected.

<P><LI>Add a Timer control (Timer1) to Form1.

<P><LI>Set Timer1's Interval property to 2000.

<P><LI>Insert the following code into the General Declarations section of
   Form1:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      #Const OfficeAppObject = "Microsoft Access" 'Or "Microsoft Word" or
<PRE></PRE>                             ' "Microsoft Excel" or "Microsoft PowerPoint"
      'Due to limitations in the Microsoft Outlook object model, you
      'currently cannot manipulate the Office Assistant using a Microsoft
      'Outlook object.

      #If OfficeAppObject = "Microsoft Access" Then
         'Establish a reference to "Microsoft Access 8.0 Object Library"
         Dim objOffice As New Access.Application
      #ElseIf OfficeAppObject = "Microsoft Word" Then
         'Establish a reference to "Microsoft Word 8.0 Object Library"
         Dim objOffice As New Word.Application
      #ElseIf OfficeAppObject = "Microsoft Excel" Then
         'Establish a reference to "Microsoft Excel 8.0 Object Library"
         Dim objOffice As New Excel.Application
      #ElseIf OfficeAppObject = "Microsoft PowerPoint" Then
         'Establish a reference to "Microsoft PowerPoint 8.0 Object
         'Library". NOTE: With this example, PowerPoint will become active
         'and visible when executed.
         Dim objOffice As New PowerPoint.Application
      #Else
         'If OfficeAppObject is NOT one of the four above items, a compiler
         'error will occur!
      #End If

      Private Sub Timer1_Timer()
         Dim bAssistantVisibility As Boolean
         Dim msg As String
         Dim iChoice As Integer

         With objOffice.Assistant
            bAssistantVisibility = .Visible
            msg = "The Office Assistant Visible Property is set to" _
                &amp; Str$(bAssistantVisibility) &amp; "." &amp; vbCrLf &amp; vbCrLf _
                &amp; "Do you want to see some Office Assistant Animation?"
            iChoice = MsgBox(msg, vbYesNo, .Name)
            Select Case iChoice
               Case vbYes
                  #If OfficeAppObject = "Microsoft Access" Then
                     AppActivate "Microsoft Access", False
                     .Visible = True
                  #ElseIf OfficeAppObject = "Microsoft Word" Then
                     objOffice.WindowState = wdWindowStateMinimize
                     objOffice.Activate
                  #ElseIf OfficeAppObject = "Microsoft Excel" Then
                     objOffice.WindowState = xlMinimized
                     objOffice.Visible = True
                     .Visible = True
                  #ElseIf OfficeAppObject = "Microsoft PowerPoint" Then
                     objOffice.Activate
                     .Visible = True
                  #End If
                  Call subAnimation
               Case vbNo
                  #If OfficeAppObject &lt;&gt; "Microsoft Access" Then
                     objOffice.Quit
                  #End If
                  Set objOffice = Nothing
               End
            End Select
         End With
      End Sub

      Private Sub subAnimation()
         With objOffice.Assistant
            Select Case Int((8 * Rnd) + 1)
               Case 1: .Animation = msoAnimationCheckingSomething
               Case 2: .Animation = msoAnimationGetTechy
               Case 3: .Animation = msoAnimationSearching
               Case 4: .Animation = msoAnimationWorkingAtSomething
               Case 5: .Animation = msoAnimationGetArtsy
               Case 6: .Animation = msoAnimationSaving
               Case 7: .Animation = msoAnimationThinking
               Case 8: .Animation = msoAnimationWritingNotingSomething
               Case Else: MsgBox "Random number generator error.", _
                                 vbExclamation, "When I get 64"
            End Select
         End With
      End Sub

</PRE><P><LI>Press F5 to run the program and wait. After a few seconds the first
   prompt will appear. Click Yes to watch the Assistant animation.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: vb5 vb4<BR>
Keywords          : vb432 VB4WIN vb5all VBKBAutomation<BR>
Version           : WINDOWS:4.0,5.0<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: OLE DataText Prop Doesn't Free Memory When Object Closed </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97136 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/04/07">
<META NAME="Keywords" CONTENT="kbole kbprg kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  An OLE destination (OLE client) control (OLECLIEN.VBX) can send data to the OLE source (OLE server) application by setting the DataText property, however the memory allocated for this data is not released until OLECLIEN.VBX is unloaded. The memory ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA9Q,QAH4,QBW6,QAPN,QBJZ,QBWS,QAY2,QAIJ,QAGB,QDL9,QBXS,QBWO,QBWN,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: OLE DataText Prop Doesn't Free Memory When Object Closed</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97136 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- The Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 2.0
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An OLE destination (OLE client) control (OLECLIEN.VBX) can send data to
the OLE source (OLE server) application by setting the DataText
property, however the memory allocated for this data is not released
until OLECLIEN.VBX is unloaded. The memory is freed when you exit from
the application.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Professional Edition of
Microsoft Visual Basic version 2.0 for Windows. We are researching this
problem and will post new information here in the Microsoft Knowledge Base
as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Each time an OLE destination object is created and the DataText property
is set, a new private segment is allocated by OLECLIEN.VBX. When working in
the VB.EXE interpreter environment, this segment is deallocated when you
exit from VB.EXE or when you start a new project (ALT+F+N). A Visual
Basic EXE program deallocates this segment when it is unloaded.
<P>
The following code uses Microsoft Graph as the OLE source application, but
the memory leak also occurs if OLECLIEN.VBX is used with other OLE source
programs.
<P>
To verify that the memory leak occurs, run the code listed below. Then load
a tool like Heap Walker that ships with the Microsoft Windows Software
Development Kit (SDK), and watch the number of private segments allocated
to OLECLIENT change even after the code deletes the OLE objects.
<P>
<P><h3>Steps to Reproduce Problem</h3>
 

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>From the File menu, choose Add File. In the Files box, select the
   OLECLIEN.VBX custom control file. The OLE destination (client) tool
   appears in the Toolbox.

<P><LI>Place an OLEClient control on Form1.

<P><LI>Enter the following code:
<P>
<PRE>   Private Sub Form_Click ()
      Const OLE_CREATE_NEW = 0
      Const OLE_UPDATE = 6
      Const OLE_ACTIVATE = 7
      Const OLE_CLOSE = 9
      Const OLE_DELETE = 10

      OleClient1.Class = "MSGraph"
      OleClient1.Protocol = "StdFileEditing"
      OleClient1.ServerType = 1
      OleClient1.Action = OLE_CREATE_NEW
      OleClient1.Action = OLE_ACTIVATE
      OleClient1.Format = "CF_TEXT"   ' MS Graph accepted format

      Title$ = "This is a title" &amp; Chr$(10)

      ' The data for a graph
      Dim Tb As String  ' tab character
      Tb = Chr$(9)
      GraphData$ = "A" &amp; Tb &amp; "3" &amp; Tb &amp; "4" &amp; Tb &amp; "5" &amp; Chr$(10)
      GraphData2$ = "B" &amp; Tb &amp; "9" &amp; Tb &amp; "2" &amp; Tb &amp; "4" &amp; Chr$(10)

      ' Cause a private segment in OLECLIEN to be allocated.
      OleClient1.DataText = Title$ &amp; GraphData$ &amp; GraphData2$

      OleClient1.Action = OLE_UPDATE
      OleClient1.Action = OLE_CLOSE
      OleClient1.Action = OLE_DELETE
   End Sub

</PRE><P><LI>From the Run menu, choose Start.

<P><LI>Run a utility such as Heap Walker to list the number of segments
   allocated to OLEClient.

<P><LI>Click the form to create and delete an OLE object from Microsoft Graph.
<P>
</OL>At this point, you'll see that the number of private segments allocated to
OLEClient increases by 1.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: buglist2.00 2.00 MemLeak<BR>
KBCategory: kbole kbprg kbbuglist<BR>
KBSubcategory: IAPOLE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic Requirements for Exported DLL Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142840">
<META NAME="KBModify" CONTENT="1996/08/14">
<META NAME="KBCreate" CONTENT="1996/01/21">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  To use a function from an exported DLL in a Visual Basic program, certain requirements must be met for the function to be successfully used by Visual Basic. Visual Basic expects this exported DLL function to work like a Windows API call. This artic...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAY5,QA3P,QAB9,QBV8,QAUJ,QAPN,QAGI,QAH6,QAHE,QA5F,QAMA,QALM,QAH7,QAEY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Visual Basic Requirements for Exported DLL Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 14, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142840</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To use a function from an exported DLL in a Visual Basic program, certain
requirements must be met for the function to be successfully used by Visual
Basic. Visual Basic expects this exported DLL function to work like a
Windows API call. This article summarizes the Visual Basic requirements and
some of the requirements if you are creating your own exported DLL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One of the features of Visual Basic is the ability to use a function stored
in a DLL. Visual Basic assumes that the exported DLL functions have the
same attributes as a Windows API function. In order to use a function from
an exported DLL in a Visual Basic program, Visual Basic requires the
following:
<P>
<P><h3>Requirements for Calling Functions</h3>
 

<UL><LI>Arguments are passed from right to left: Arguments are passed by value
   unless you specify a pointer or reference type.

<LI>Passing Arguments by Value or by Reference-By default: Visual Basic
   passes all arguments by reference; arguments passed by reference contain
   the 32-bit address containing the argument rather than the value of the
   argument. However, most functions in an exported DLL expect the value of
   the argument rather than the 32-bit address. To pass an argument by
   value, use the ByVal keyword.

<LI>Stack-maintenance is handled by the called function.

<LI>Case sensitivity of the name: Under Win16, function names are not case
   sensitive. Under Win32, function names are now case-sensitive. If you
   attempt to call a function using a name that is letter similar but case
   different from the function stored in an exported DLL, a run-time error
   will occur because the function name does not exist.
<P>
   For example, User32.dll has a function name called GetSystemMetrics that
   returns information about the Windows Environment. Using the following
   declare statement to call this function:
<P>
<P><PRE>      Declare Function GETSYSTEMMETRICS% Lib "User" ByVal nIndex%)
</PRE><P>
   Results in a run-time error because the function, GETSYSTEMMETRICS is
   not in User32.dll.
<P>
   To avoid errors caused by incorrectly typing the function name, assign
   an alias to the function name. For example, you can assign the alias
   GetWindowsEnv to the GetSystemMetrics function by using the following
   declare statement:
<P>
<P><PRE>      Declare Function GetWinEnv Lib "User32" Alias GetSystemMetrics _
<PRE></PRE>                       (ByVal int1 As Integer) As Integer.

</PRE></UL><h3>Notes on Creating Exported DLL in Visual C++</h3>
 
<P>
This section provides some information for creating an exported DLL that
meets the Visual Basic requirements using Microsoft Visual C++. Other C++
compilers may or may not support the keywords used in this section.
<P>
Visual Basic requires that the function receiving the arguments also
maintain the stack. The Visual C++ keyword that can perform the correct
stack maintenance is _stdcall.
<P>
The _stdcall keyword decorates the function name with a preceding
underscore and appends '@n' where n is the number of bytes required to
contain the function's arguments and the return value. For example, if you
create a function called GetWindowSize and use the _stdcall keyword to
provide stack maintenance, the function is defined as follows:
<P>
<PRE>   int GetWindowSize (int nIndex)

</PRE>The following is the exported name result:
<P>
<PRE>   _GetWindowSize@8

</PRE>Note the preceding underscore that is added by the _stdcall keyword.
<P>
To export the file, you can either use the _declspec(dllexport) keyword or
a DEF file EXPORT section. The _declspec(dllexport) keyword exports the
function but maintains the name decoration. The following example shows how
to implement both the _stdcall and _declspec(dllexport) keyword on a
function called DisplayMessage:
<P>
<PRE>   _delcspec(dllexport) long _stdcall DisplayMessage (LPSTR szMessage)

</PRE>A DEF file also exports the function name and removes the name decoration.
The following example shows how the EXPORT section of a DEF file is
implemented for a function called DisplayMessage:
<P>
<PRE>   EXPORTS
      DisplayMessage

</PRE><h2>REFERENCES</h2>
 
<P>
Vb4dll.txt shipping with Visual Basic.
<P>
"Visual Basic Programmer's Guide," Chapter 26, "Calling Procedures in
DLLs."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all Export Dll Function C++ C<BR>
KBCategory: kbusage<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 14, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Z-Order Behavior Different with OLE (.OCX) Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q145731">
<META NAME="KBModify" CONTENT="1996/02/13">
<META NAME="KBCreate" CONTENT="1996/02/06">
<META NAME="Keywords" CONTENT="kbusage kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The z-order behavior of a control which is now an OLE (.OCX) control is different than it was for the equivalent .VBX control in Microsoft Visual Basic 3.0 for Windows. The OLE (.OCX) control does not overlap (appear on top of) a windowed control l...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMN,QA7O,QAOE,QAB5,QBS0,QBNX,QBKT,QAHV,QACI,QAH4,QA9Q,QDIZ,QAFF,QBJZ,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Z-Order Behavior Different with OLE (.OCX) Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 13, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q145731</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The z-order behavior of a control which is now an OLE (.OCX) control is
different than it was for the equivalent .VBX control in Microsoft Visual
Basic 3.0 for Windows. The OLE (.OCX) control does not overlap (appear on
top of) a windowed control like the PictureBox control at design time. This
change in z-order behavior is especially noticeable when a Visual Basic 3.0
application is imported into Visual Basic 4.0 and the .VBX controls are
upgraded to OLE (.OCX) controls. A control which overlapped a windowed
control is now underneath that control. Using the "Bring to Front" command
on the Edit menu at design time has no effect. Even at run-time most OLE
(.OCX) controls are underneath a windowed control. No matter how the
control is overlapped at design time, at run-time it is always on top of
lightweight controls and usually underneath windowed controls. This is
especially confusing when one of these OLE (.OCX) controls is underneath a
lightweight control at design time.
<P>
<P><h2>CAUSE</h2>
 
<P>
Due to a design limitation in most OLE (.OCX) controls, these controls do
not have a window handle (hWnd) at design time. This is different than .VBX
controls which have a window handle at design time. Both .VBX and OLE
(.OCX) controls have window handles at run-time. Thus the z-order behavior
of OLE (.OCX) controls is not consistent with the z-order behavior of .VBX
controls because the OLE (.OCX) controls act like lightweight
(non-windowed) controls at design time and windowed controls at run-time.
In addition some controls do not correctly preserve the relative z-order
among windowed controls at run-time, either by forcing themselves on top of
or underneath the other windowed controls.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Explicitly set the z-order of the OLE (.OCX) controls at run-time with the
z-order method. There is currently no way to correct this problem at design
time.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. Microsoft is researching this problem and
will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following OLE (.OCX) controls act like lightweight (non-windowed)
controls at design time in Visual Basic 4.0:
<P>
<PRE>AniPushButton      MAPIMessages      Slider
CommonDialog       MAPISession       SpinButton
CrystalReport      MaskEdBox         SSCheck
DBCombo            MhState           SSCommand
DBGrid             MMControl         SSOption
DBList             MSComm            SSRibbon
Graph              MSRDC             StatusBar
Grid               Outline           TreeView
ImageList          PictureClip
ListView           ProgressBar

</PRE>Note: The OLE container control is a lightweight control in Visual Basic
<PRE>      4.0.

      The DBGrid control cannot be placed underneath a windowed control at
      run-time with the z-order method. Use the z-order method of the
      windowed control to place it on top of the DBGrid control instead.

      The 16-bit Graph control places itself on top of windowed controls at
      run-time. Use its z-order method to place it underneath other
      windowed controls.

      The 32-bit MaskEdBox control places itself on top of windowed
      controls (except for the DBGrid control as noted above) at run-time.
      Use its z-order method to place it underneath other windowed
      controls.

      The Toolbar control places itself on top of windowed controls
     (except for the DBGrid control as noted above) at run-time. Use its
      z-order method to place it underneath other windowed controls.

</PRE><h3>Steps to Reproduce Problem</h3>
 

<OL><P><LI>Start Visual Basic or click New Project (ALT, F, N) on the File menu
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Place the following controls on Form1 in the ORDER listed and in the
   POSITIONS diagrammed below: Command1, Command2, Command3, Command4,
   Command5, Command6, Label1, Grid1 and Picture1:
<P>
<PRE>        ------------------------------
       | --------  --------  -------- |
       ||Command1||Command3||Command5||
       | --------  --------  -------- |
       | --------  --------  -------- |
       ||Command2||Command4||Command6||
       | --------  --------  -------- |
       |  --------------              |
       | |Label1        |             |
       | |           ---------------  |
       | |          |Picture1       | |
       | |   -------|               | |
       | |  |Grid1  |               | |
       |  --|       |               | |
       |    |        ---------------  |
       |    |                |        |
       |     ----------------         |
        ------------------------------

</PRE><P><LI>Place the following code in Form1:
<P>
<PRE>   Private Sub Form_Load()
       Command1.Caption = "Bring to Front - Label1"
       Command2.Caption = "Send to Back - Label1"
       Label1.BorderStyle = 1
       Command3.Caption = "Bring to Front - Grid1"
       Command4.Caption = "Send to Back - Grid1"
       Command5.Caption = "Bring to Front - Picture1"
       Command6.Caption = "Send to Back - Picture1"
   End Sub

</PRE><P><LI>Place the following code in Command1:
<P>
<PRE>   Private Sub Command1_Click()
       Label1.ZOrder 0 'Bring to Front
   End Sub

</PRE><P><LI>Place the following code in Command2:
<P>
<PRE>   Private Sub Command2_Click()
       Label1.ZOrder 1 'Send to Back
   End Sub

</PRE><P><LI>Place the following code in Command3:
<P>
<PRE>   Private Sub Command3_Click()
       Grid1.ZOrder 0 'Bring to Front
   End Sub

</PRE><P><LI>Place the following code in Command4:
<P>
<PRE>   Private Sub Command4_Click()
       Grid1.ZOrder 1 'Send to Back
   End Sub

</PRE><P><LI>Place the following code in Command5:
<P>
<PRE>   Private Sub Command5_Click()
       Picture1.ZOrder 0 'Bring to Front
   End Sub

</PRE><P><LI>Place the following code in Command6:
<P>
<PRE>   Private Sub Command6_Click()
       Picture1.ZOrder 1 'Send to Back
   End Sub

</PRE><P><LI>Select the Grid control and choose "Send to Back" from the Edit menu.
<P><PRE>    Notice that the Grid control IS underneath the Label control. In
    Visual Basic 3.0, the Grid control remains on top of the Label
    control.
</PRE>
<P><LI>Select the PictureBox control and on the Edit menu, click "Send to
<P><PRE>    Back". Notice that the PictureBox control IS NOT underneath the Grid
    control. In Visual Basic 3.0, the PictureBox control is underneath the
    Grid control.
</PRE>
<P><LI>Run the application. If you left the Grid control underneath the Label
<P><PRE>    control, notice that it IS NOT underneath the Label control now. Click
    the "Send to Back - Grid1" button. Notice that the Grid control IS NOT
    underneath the Label control now either. This is the way Visual Basic
    3.0 behaves.
</PRE>
<P><LI>Click the "Send to Back - Picture1" button. Notice that the PictureBox
<P><PRE>    control IS now underneath the Grid control. This is the way Visual
    Basic 3.0 behaves.
</PRE><P>
</OL>Experiment with this application at both design and run-time. Notice how at
design time most OLE (.OCX) controls act like lightweight or non-windowed
controls while at run-time they act like windowed controls. When porting a
Visual Basic 3.0 project to Visual Basic 4.0, overlapping controls may no
longer appear in the desired z-order. Add code using the z-order method so
that the controls overlap in the desired way at run-time. Under Visual
Basic 3.0, the Grid control can be placed over the PictureBox control at
design time. If that project is then ported to Visual Basic 4.0, the Grid
control is placed underneath the PictureBox control. The only way to place
the Grid control over the PictureBox control at run-time is to use its
z-order method.
<P>
<P><h2>REFERENCES</h2>
 
<P>
- Microsoft Visual Basic, Version 4.0, "Programmer's Guide", Appendix C
<PRE>  "Compatibility with Other Versions", "Visual Basic 3.0 for Windows"
  section, "Z-Order in OCX Controls" subsection.

</PRE></OL>Note: The second sentence which starts "In Visual Basic 4.0, however,
<PRE>      most OCX controls behave like lightweight controls at run-time,
      ..." should read "In Visual Basic 4.0, however, most OCX controls
      behave like windowed controls at run-time, regardless of the
      z-order setting at design time.".
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage kbbuglist<BR>
KBSubcategory: IAPOLE<BR>
Additional reference words: 4.00 vb4win vb4all above buglist4.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 13, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

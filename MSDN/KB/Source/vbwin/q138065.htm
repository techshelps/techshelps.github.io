

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Enforce Initialization of a VB OLE Class Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138065">
<META NAME="KBModify" CONTENT="1997/05/16">
<META NAME="KBCreate" CONTENT="1995/10/11">
<META NAME="Keywords" CONTENT="IAPOLE kbcode vb4all vb4win kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article suggests a way to enforce the proper initialization of a Visual Basic OLE object that is instantiated from a class module. The class module has an Initialize event that is invoked each time an object of that class is instantiated.  How...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAH4,QBJZ,QAW6,QAGI,QBVV,QABO,QAFF,QBXR,QAB5,QBWS,QA9Q,QAPF,QAO4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Enforce Initialization of a VB OLE Class Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138065</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article suggests a way to enforce the proper initialization of a
Visual Basic OLE object that is instantiated from a class module. The class
module has an Initialize event that is invoked each time an object of that
class is instantiated.
<P>
However, it is not possible to pass any parameters to the Initialize event
of a class module. To implement an object constructor that takes parameters
to properly initialize the object's members, you can define a Public method
(called Create for example) in the class module and call it with parameters
immediately after instantiating the object.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following step-by-step example shows how to implement a Create Method
that enforces proper object instantiation. Note that the following
statement must be the first statement in each method or property procedure
in the class module:
<P>
<PRE>   If blnNotCreated Then Err.Raise vbObjectError, "MyServer", _
      "Object Not Yet Created! Please Call the Create Method First"

</PRE>This will raise an error that is returned back to the client in case the
Create Method is not called. Note also that the flag blnNotCreated is the
only member that is set in the Initialize event. This is done to avoid the
following action, which would result in the unnecessary overhead of the Not
operator:
<P>
<PRE>   If Not blnCreated then Err.Raise

</PRE><h3>Step-by-Step Example for Creating the Server</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Insert a Class Module (Class1), and
   set its instancing property to 1 - Creatable SingleUse and its Public
   property to True.

<P><LI>Add the following code to the Class Module:
<P>
<P><PRE>      Private intData As Integer
      Private strData As String
      Private blnNotCreated
</PRE>   
<P><PRE>      Public Function Create(param1 As Integer, param2 As _
<PRE></PRE>                   String) As Boolean
          blnNotCreated = False
          intData = param1
          strData = param2
      End Function
   
      Public Sub MyMethod()
          If blnNotCreated Then Err.Raise vbObjectError, _
           "MyServer", "Object Not Yet Created! Please Call _
           the Create Method First"
   
          MsgBox strData
      End Sub
   
      Private Sub Class_Initialize()
          blnNotCreated = True
      End Sub

</PRE><P><LI>On the Tools menu, click Options, then click the Project tab, and set
   the Project Name to MyServer.

<P><LI>On the File menu, click Make EXE file to create an OLE server.
<P>
</OL><h3>Step-by-Step Example for Creating the Client</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>On the Tools menu, click References to add a reference to MyServer.

<P><LI>Add the following code to the Form_Click event of Form1:
<P>
<P><PRE>      Private Sub Form_Click()
<PRE></PRE>         Dim x As New MyServer.Class1
         x.Create 7, "hello"
         x.MyMethod
      End Sub

</PRE><P><LI>Press the F5 key to run the program.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : IAPOLE kbcode vb4all vb4win kbhowto<BR>
Technology          : kbole<BR>
Version             : 4.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

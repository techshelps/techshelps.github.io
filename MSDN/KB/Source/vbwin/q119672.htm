

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDK: Writing VBXs in C++ or Large Memory Model </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119672">
<META NAME="KBModify" CONTENT="1995/07/20">
<META NAME="KBCreate" CONTENT="1994/08/20">
<META NAME="Keywords" CONTENT="kbtool kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic custom control (VBX) architecture assumes that a controls model structure and related data structures will be in the default data segment for the VBX. This means that controls developed with the control development kit (CDK) for Vi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPF,QAAW,QAPN,QABA,QAO3,QAO2,QA7O,QAOE,QAMN,QAB5,QAIC,QA63,QAO4,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>CDK: Writing VBXs in C++ or Large Memory Model</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 20, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119672</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic custom control (VBX) architecture assumes that a controls
model structure and related data structures will be in the default data
segment for the VBX. This means that controls developed with the control
development kit (CDK) for Visual Basic should be compiled either through
the medium-memory model or with an explicit NEAR declaration on the
appropriate data structures. Failure to declare variables with an explicit
NEAR declaration will result in the following error:
<P>
<PRE>   Cannot Load VBX

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic expects that the model structure will reside in the default
data segment for the VBX and that all pointers in the model structure will
be near pointers. When you use the medium-memory model to compile, pointers
are near by default. If you need to compile using another memory model that
does not assume near pointers, then you need to force the compiler to
generate near addresses for your property list, event list, and model
structure. You can do this by putting the NEAR keyword in the corresponding
declarations. Below is a code fragment taken from the Circ1 sample:
<P>
<PRE>   PPROPINFO Circle_Properties[] =
       {
       PPROPINFO_STD_CTLNAME,
       ...

   PEVENTINFO Circle_Events[] =
       {
       PEVENTINFO_STD_CLICK,
       ...

   MODEL modelCircle =
       {
       VB_VERSION,         // VB version being used
       ...

</PRE>Because there are no specific NEAR/FAR declarations in the above examples,
the compiler will use the default for the given memory model. You can,
however, force these pointers to be NEAR by specifying NEAR in the
declaration:
<P>
<PRE>   PPROPINFO NEAR Circle_Properties[] =
       {
       PPROPINFO_STD_CTLNAME,
       ...

   PEVENTINFO NEAR Circle_Events[] =
       {
       PEVENTINFO_STD_CLICK,
       ...

   char NEAR szCircle[] = "Circle";   // Must be NEAR
   char NEAR szCirc1[] = "CIRC1";     // Must be NEAR

   MODEL NEAR modelCircle =           // Must be NEAR
       {
       VB_VERSION,                    // VB version being used
       0,                             // MODEL flags
       (PCTLPROC)CircleCtlProc,       // Control procedure
       CS_VREDRAW | CS_HREDRAW,       // Class style
       WS_BORDER,                     // Default Windows style
       0,                             // Size of CIRCLE structure
       IDBMP_CIRCLE,                  // Palette bitmap ID
       szCircle,                      // Default control name
       szCirc1,                       // Visual Basic class name
       NULL,                          // Parent class name
       Circle_Properties,             // Property information table
       Circle_Events,                 // Event information table
       IPROP_CIRCLE_HEIGHT,           // Default property
       IEVENT_CIRCLE_CLICK,           // Default event
       -1                             // Property representing value of ctl
       };

</PRE>Now, even if you compile with another memory model that does not default to
near pointers, near pointers will be generated for these constructs.
<P>
Additionally, if you have custom properties or custom events, you will need
to declare them as "near" also. Below is an example custom property taken
from Circ3:
<P>
<PRE>   PROPINFO Property_CircleShape =
       {
       "CircleShape",
       ...

</PRE>However, it too must be modified as follows:
<P>
<PRE>   char NEAR szCircleProperty[] = "CircleShape";

   PROPINFO NEAR Property_CircleShape =
       {
       szCircleProperty,
       ...
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbtool kbprg kbcode<BR>
KBSubcategory: TlsCdk<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 20, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

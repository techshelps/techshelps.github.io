

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Get Container hWnd from Windowless Custom OLE Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153582">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1996/07/11">
<META NAME="Keywords" CONTENT="IAPOLE kbcode kbhowto kbole kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  An OLE control that is invisible at run time does not have a window handle. Hence the GetParent() Windows API function cannot be used to obtain the hWnd of the container's window. This article shows how you can implement a read-only hWndParent prop...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QAOE,QA7O,QAMN,QBS0,QAVX,QA9Q,QAVW,QAJQ,QAHV,QAY2,QAUD,QAPN,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Get Container hWnd from Windowless Custom OLE Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153582</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>4.00    | 4.00
</PRE>WINDOWS | WINDOWS NT
kbusage kbole kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic for Windows, 16-bit and 32-bit, version 4.0
<LI>Microsoft Visual C++, 32-bit Edition, version 4.x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An OLE control that is invisible at run time does not have a window handle.
Hence the GetParent() Windows API function cannot be used to obtain the
hWnd of the container's window. This article shows how you can implement a
read-only hWndParent property for a custom OLE control that returns the
container window's hWnd.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The window handle of the container's window can be obtained by calling
IOleInPlaceSite::GetWindow(). The IOleInPlaceSite interface pointer can be
obtained by QueryInterfacing for it from the ClientSite pointer in the
override of OnSetClientSite(). Note that this technique can also be used
for OLE controls that have a window handle at run-time.
<P>
<P><h3>Step-by-step example</h3>
 

<OL><P><LI>Create a rudimentary 32-bit OLE Control using the MFC CDK that ships
   with Visual C++ 4.x. This article assumes that this custom OCX is called
   Test (coclass name) and that the control class name is CTestCtrl.

<P><LI>In the .CPP file for your control class, add the
   OLEMISC_INVISIBLEATRUNTIME flag to your control. It should look
   something like this:
<P>
<PRE>//////////////////////////////////////////////////////////////////////
      // Control type information

      static const DWORD BASED_CODE _dwTestOleMisc =
      OLEMISC_INVISIBLEATRUNTIME |
      OLEMISC_ACTIVATEWHENVISIBLE |
      OLEMISC_SETCLIENTSITEFIRST |
      OLEMISC_INSIDEOUT |
      OLEMISC_CANTLINKINSIDE |
      OLEMISC_RECOMPOSEONRESIZE;

</PRE><P><LI>Use the Visual C++ MFC ClassWizard to add the following Property to your
   control class. The external name of this Property is hWndParent. It is
   implemented as a Get method only (called GetHWndParent), so it is a
   read-only property. It takes no parameters and returns the hWnd as an
   OLE_HANDLE.
<P>
   You will also need to add a protected member variable m_hWndParent (to
   actually hold the window handle as an OLE_HANDLE) and override the
   virtual function OnSetClientSite in the header file for the control
   class as follows:
<P>
<P><PRE>      Class CTestControl::COleControl
      {
       .
       .
       .
</PRE><P>
<P><PRE>      // Overrides
      virtual void OnSetClientSite();
</PRE><P>
<P><PRE>       .
       .
</PRE><P>
<P><PRE>       // Implementation
       protected:
<PRE></PRE>          OLE_HANDLE m_hWndParent;

          .
          .
       };

</PRE><P><LI>Add the following code to the implementation file (.CPP) of the control
   class:
<P>
<P><PRE>      /////////////////////////////////////////////////////////////////////
      // CTestCtrl::CTestCtrl - Constructor
</PRE><P>
<P><PRE>      CTestCtrl::CTestCtrl()
      {
       InitializeIIDs(&amp;IID_DTest, &amp;IID_DTestEvents);
</PRE><P>
<P><PRE>       // TODO: Initialize your control's instance data here.
</PRE><P>
<P><PRE>       m_hWndParent = NULL;
</PRE><P>
<P><PRE>       .
       .
       .
       }
</PRE><P>
<P><PRE>       void CTestCtrl::OnSetClientSite()
       {
<PRE></PRE>        if (m_pClientSite)
        {
         IOleInPlaceSite *pOleInPlaceSite = NULL;

         if (NOERROR == m_pClientSite &gt;QueryInterface(IID_IOleInPlaceSite,
                                          (LPVOID *)&amp;pOleInPlaceSite))
              {
               pOleInPlaceSite-&gt;GetWindow((HWND *)&amp;m_hWndParent);
               pOleInPlaceSite-&gt;Release();
              }
         else
            m_hWndParent = NULL;
         }
         else
         m_hWndParent = NULL;
        }

        OLE_HANDLE CTestCtrl::GetHWndParent()
        {
         // TODO: Add your property handler here

         return m_hWndParent;
        }

</PRE><P><LI>Build the Test OLE control from Visual C++ 4.x to automatically
   register the control if everything compiles properly.

<P><LI>From Visual Basic 4.0 32-bit, open a new project, and add the Test
   OLE control to the Visual Basic toolbox by choosing it from the Tools
   Custom Controls menu.

<P><LI>Add an instance of the Test OLE control to Form1. This will be named
   Test1. Also add a Picture Box control (Picture1) to Form1, and then draw
   another Test OLE control (Test2) directly inside the PictureBox.

<P><LI>Add the following code to the general declarations portion of Form1:
<P>
<PRE>   Private Sub Form_Click()
      Debug.Print Hex(Test1.hWndParent), Hex(Form1.hWnd)   'Both are same
      Debug.Print Hex(Test2.hWndParent), Hex(picture1.hWnd)'Both are same
      End Sub

</PRE><P><LI>Run the Visual Basic program, and click the form. You should see the
   same values for the Window handles printed on the same line in the Debug
   window in each of the two cases.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all vbctrl<BR>
KBCategory: kbusage kbole kbhowto kbcode<BR>
KBSubcategory: IAPOLE<BR>
Keywords          : IAPOLE kbcode kbhowto kbole kbusage<BR>
Version           : 4.00 | 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

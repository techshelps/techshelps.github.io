

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Communicate with a UserDocument from a WebBrowser Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174921">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1997/10/09">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates a technique you can use to communicate with your UserDocument running in a WebBrowser control. You can use this technique to pass parameters to your UserDocuments if you are writing an application that has a WebBrowser con...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAOE,QAMN,QAPN,QBS0,QAY2,QAHV,QAH6,QBVR,QAMH,QBWS,QBRW,QBWC,QAHP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Communicate with a UserDocument from a WebBrowser Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174921</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation and Enterprise Editions for
   Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates a technique you can use to communicate with your
UserDocument running in a WebBrowser control. You can use this technique to
pass parameters to your UserDocuments if you are writing an application
that has a WebBrowser control in which you display one or more
UserDocuments.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can manipulate the UserDocument by adding Public Properties and Methods
to the UserDocument. You can access these properties and methods from your
WebBrowser application by using the Document property of the WebBrowser
control. The Document property of the WebBrowser control exposes the
Automation object of the currently displayed document.
<P>
This article does not give details on creating WebBrowser control or
UserDocument applications. Please see the REFERENCES section below for more
information.
<P>
For the purposes of understanding how this technique can be used, suppose
you have following two projects:
<P>
PROJECT 1. MYDOC:

<UL><LI>This is your UserDocument application. The purpose of the UserDocument
   is to display and edit customer information for a given CustomerID.
<P>
</UL>PROJECT 2. MYBROWSER:

<UL><LI>This application contains a form with a WebBrowser control and ListBox
   control(lstContact). Your UserDocument is launched inside the
   WebBrowser(brwWebBrowser). The ListBox control displays all the
   CustomerIDs. When the user clicks on a CustomerID, you want the
   UserDocument running in the WebBrowser control to pull up that customer.
<P>
</UL>Step 1: Add a Public Let Property to your UserDocument. You can use a
method also. In the example above, open the MYDOC project and add the
following to UserDocument code:
<P>
<PRE>   Public Property Let CustomerID(ByVal iCustID As String)
      'Load the customer data associated with iCustID
   End Property

</PRE>Step 2: Invoke the property of the currently-running UserDocument using the
Document property of the WebBrowser control. From the example above, modify
the MYBROWSER project to handle the Click event of the ListBox:
<P>
<PRE>   Private Sub lstContact_Click()
    Dim CustID As String

    'retrieve customer id from the listbox
    CustID = lstContact.List(lstContact.ListIndex)

    'tell the userdocument to load the customer
    brwWebBrowser.Document.CustomerID = CustID
   End Sub

</PRE>NOTE: You can also use this technique when you display multiple
UserDocuments within the WebBrowser control. Be aware that the Document
property may not be available immediately after you use the Navigate method
of the WebBrowser control. If this is the case, then you can use the Busy
property of the WebBrowser control to wait until the browser has finished
loading the document. Also, you can use the NavigateComplete event of the
WebBrowser control to signal that the document has finished loading.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q162719.htm">Q162719</A></B>
   TITLE     : HOWTO: Use the WebBrowser Control from Visual Basic 5

   ARTICLE-ID: <B><A HREF="../IE_DEV/Q155969.htm">Q155969</A></B>
   TITLE     : HOWTO: How to Distribute the WebBrowser Control
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: PARAMETERS WEBBROWSER VBD<BR>
Keywords          : vb5all vb5howto<BR>
Technology        : internet kbinetdev kbole<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

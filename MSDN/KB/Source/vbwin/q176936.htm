

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Visual Basic 5.0 Accessing an Oracle Database Using ADO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176936">
<META NAME="KBModify" CONTENT="1997/12/08">
<META NAME="KBCreate" CONTENT="1997/11/18">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  With Visual Basic 5.0 and MDAC 1.5, you have the ability to connect to an Oracle database through a DSN-Less connection, execute a stored procedure using parameters, and get return values from that stored procedure. The example in this article illu...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QA94,QAHE,QAH4,QAB9,QBXS,QAI5,QBT6,QBV4,QAY2,QATX,QAMB,QAZV,QAU9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Visual Basic 5.0 Accessing an Oracle Database Using ADO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176936</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With Visual Basic 5.0 and MDAC 1.5, you have the ability to connect to an
Oracle database through a DSN-Less connection, execute a stored procedure
using parameters, and get return values from that stored procedure. The
example in this article illustrates all of this functionality.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To run the sample code in this article, you will need to download and
install the Microsoft Data Access Components v1.5. For instructions on
where to get MDAC 1.5 and how to install it, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B>
   TITLE     : HOWTO: Acquire and Install the Microsoft Oracle ODBC
               Driver v2.0

</PRE>The following example was created against an Oracle 7.3 database through a
SQL*Net 2.3 connection. All of the following code (including the stored
procedure) should work fine with Oracle 7.2. However, the Microsoft ODBC
Driver for Oracle Help file states that it only supports SQL*Net 2.3.
<P>
There are two objects that need to be created on the Oracle database; a
table (adooracle) and a stored procedure (adoinsert).
<P>
NOTE: If you have worked through Microsoft Knowledge Base article <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B>,
"HOWTO: Access an Oracle Database Using RDO," then you can use the Oracle
objects created in that article (rdooracle and rdoinsert). Just change the
following Visual Basic 5.0 code accordingly.
<P>
Here are the data definition language (DDL) scripts to create these
objects:
<P>
ADOORACLE - This is just a two-column table with the first column set as
the primary key:
<P>
<PRE>      CREATE TABLE adooracle (
            item_number    NUMBER(3) PRIMARY KEY,
            depot_number   NUMBER(3));

</PRE>ADOINSERT - This procedure accepts a single numeric input parameter and
returns a single numeric output parameter. The input parameter is first
used by an input statement, then it is divided by 2 and set as the output
parameter:
<P>
<PRE>      CREATE OR REPLACE PROCEDURE adoinsert (
            insnum IN NUMBER, outnum OUT NUMBER)
      IS
      BEGIN
        INSERT INTO adooracle
          (Item_Number, Depot_Number)
        VALUES
          (insnum, 16);
        outnum := insnum/2;
      END;

</PRE>NOTE: You must use Procedures that have output parameters and not Functions
when working with Oracle and ADO parameters.
<P>
The above scripts can be run from SQL*Plus. Once these objects have been
created, you can create the Visual Basic project that will use them.
<P>
This example project uses a simple form to send a bind parameter to the
ADOINSERT stored procedure and then return the output parameter from that
procedure. Here are the steps to create the project:

<OL><P><LI>Open a new project in Visual Basic 5.0 Enterprise edition.

<P><LI>Place the following controls on the form:
<P>
<PRE>   Control      Name      Text/Caption
   
   Button      cmdCheck    Check
   Button      cmdSend     Send
   Text Box    txtInput
   Label       lblInput    Input:

</PRE><P><LI>Select the Options item from the Tools menu. Click the "Default Full
   Module View" option, and then click OK. This will allow you to view all
   of the code for this project.

<P><LI>Paste the following code into your code window:
<P>
<P><PRE>    Option Explicit
    Dim Cn As ADODB.Connection
    Dim CPw1 As ADODB.Command
    Dim CPw2 As ADODB.Command
    Dim Rs As ADODB.Recordset
    Dim Conn As String
    Dim QSQL As String
</PRE><P>
<P><PRE>    Private Sub cmdCheck_Click()
</PRE><P>
<P><PRE>      CPw1(0) = Val(txtInput.Text)
</PRE><P>
<P><PRE>      Set Rs = New ADODB.Recordset
      Rs.CursorType = adOpenStatic
      Rs.LockType = adLockReadOnly
</PRE><P>
<P><PRE>      Set Rs = CPw1.Execute
</PRE><P>
<P><PRE>      MsgBox "Item_Number = " &amp; Rs(0) &amp; ".  Depot_Number = " &amp; Rs(1) &amp; "."
</PRE><P>
<P><PRE>      Rs.Close
</PRE><P>
<P><PRE>    End Sub
</PRE><P>
<P><PRE>    Private Sub cmdSend_Click()
</PRE><P>
<P><PRE>       CPw2(0) = Val(txtInput.Text)
</PRE><P>
<P><PRE>       CPw2.Execute
</PRE><P>
<P><PRE>       MsgBox "Return value from stored procedure is " &amp; CPw2(1) &amp; "."
</PRE><P>
<P><PRE>    End Sub
</PRE><P>
<P><PRE>    Private Sub Form_Load()
</PRE><P>
<P><PRE>       'You will need to replace the "*" with the appropriate values.
       Conn = "UID=*****;PWD=****;DRIVER={Microsoft ODBC for Oracle};" _
<PRE></PRE>            &amp; "SERVER=*****;"

       Set Cn = New ADODB.Connection

       With Cn
         .ConnectionString = Conn
         .CursorLocation = adUseClient
         .Open
       End With

       QSQL = "Select Item_Number, Depot_Number From adooracle Where " _
       &amp; "item_number = ?"

       Set CPw1 = New ADODB.Command

       With CPw1
         .ActiveConnection = Cn
         .CommandText = QSQL
         .CommandType = adCmdText
         .Parameters.Append .CreateParameter(, adInteger, adParamInput)
       End With

       QSQL = "adoinsert"

       Set CPw2 = New ADODB.Command

       With CPw2
         .ActiveConnection = Cn
         .CommandText = QSQL
         .CommandType = adCmdStoredProc
         .Parameters.Append .CreateParameter(, adInteger, adParamInput)
         .Parameters.Append .CreateParameter(, adDouble, adParamOutput)
       End With

    End Sub

    Private Sub Form_Unload(Cancel As Integer)

       Cn.Close
       Set Cn = Nothing
       Set CPw1 = Nothing
       Set CPw2 = Nothing

    End Sub

</PRE><P><LI>Run the project.
<P>
</OL>When you enter a number in the text box, txtInput, and click the "Send"
button, the Oracle stored procedure, ADOINSERT, is called. The number you
entered in the text box is used as the input parameter for the procedure.
The output parameter is used in a message box that is called after the
stored procedure has completed processing. With your original value still
in the text box, click the "Check" button. This creates a simple read-only
resultset that is displayed in another message box.
<P>
What follows is a detailed explanation of the code used in this
demonstration project.
<P>
The Form_Load event contains the code that creates the DSN-Less connection:
<P>
<PRE>   Conn = "UID=&lt;uid&gt;;PWD=&lt;pwd&gt;;DRIVER={Microsoft ODBC for Oracle};" _
           &amp; "SERVER=&lt;MyServer&gt;;"

   Set Cn = New ADODB.Connection

   With Cn
       .ConnectionString = Conn
       .CursorLocation = adUseClient
       .Open
   End With

</PRE></OL>Once you create the ADO connection object (Cn), you set several of its
parameters using the WITH statement.
<P>
The connect string that is used to open a connection to an Oracle database
(or any database for that matter) is very dependant on the underlying ODBC
driver. You can see in the connect string below that the Microsoft Oracle
driver you are using is named specifically by DRIVER=:
<P>
<PRE>   Conn = "UID=&lt;uid&gt;;PWD=&lt;pwd&gt;;DRIVER={Microsoft ODBC for Oracle};" _
           &amp; "SERVER==&lt;MyServer&gt;;"

</PRE>The most important part of this connect string is the "SERVER" keyword. The
string assigned to SERVER is the Database Alias which you set up in
SQL*Net. This is the only difference in the connect string when connecting
to an Oracle database. For a DSN-Less connection, as is stated in the Help
file, you do not specify a DSN in the connect string.
<P>
Also in the Form_Load event is the code that creates the two ADO Command
objects used in the project:
<P>
<PRE>   QSQL = "Select Item_Number, Depot_Number From adooracle Where " _
   &amp; "item_number = ?"

   Set CPw1 = New ADODB.Command

   With CPw1
       .ActiveConnection = Cn
       .CommandText = QSQL
       .CommandType = adCmdText
       .Parameters.Append .CreateParameter(, adInteger, adParamInput)
   End With

   QSQL = "adoinsert"

   Set CPw2 = New ADODB.Command

   With CPw2
       .ActiveConnection = Cn
       .CommandText = QSQL
       .CommandType = adCmdStoredProc
       .Parameters.Append .CreateParameter(, adInteger, adParamInput)
       .Parameters.Append .CreateParameter(, adDouble, adParamOutput)
   End With

</PRE>The first Command object (CPw1) is a simple parameterized query. The
CommandText has one parameter that is the item_number for the where clause.
Note that the CommandType is set to adCmdText. This is different than the
adCmdStoredProc CommandType in the second Command object (CPw2). From the
ADO Help HTML:
<P>
"Use the CommandType property to optimize evaluation of the CommandText
property. If the CommandType property value equals adCmdUnknown (the
default value), you may experience diminished performance because ADO must
make calls to the provider to determine if the CommandText property is an
SQL statement, a stored procedure, or a table name. If you know what type
of command you're using, setting the CommandType property instructs ADO to
go directly to the relevant code. If the CommandType property does not
match the type of command in the CommandText property, an error occurs when
you call the Execute method."
<P>
Using the WITH command, you can create and append parameters to the command
object easily. The first parameter of the CreateParameter function is for
the name of the parameter. This has been left blank because the sample
program uses the index of the parameters collection to identify the
individual parameters (such as CPw1(0) to identify the first parameter).
The sample program uses adInteger and adDouble datatypes. If it had used a
variable length datatype, then the size parameter of the CreateParameter
function would need to be set. Again, from the ADO Help HTML:
<P>
"If you specify a variable-length data type in the Type argument, you must
either pass a Size argument or set the Size property of the Parameter
object before appending it to the Parameters collection; otherwise, an
error occurs."
<P>
The remainder of the project is fairly straightforward and well-documented
in both the Online Help file and Books Online which come with Visual Basic
5.0. The ADO issues that are critical to working with Oracle (the connect
string and the calling of stored procedures) have been detailed in this
project.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on these issues, please consult your Oracle SQL*Net
2.3 documentation, the Help file for the Microsoft ODBC Driver for Oracle,
the ADO HTML that comes with MDAC 1.5, and your Oracle7 server
documentation.
<P>
Microsoft ODBC Driver for Oracle Help File
<P>
ADO Help HTML
<P>
"Oracle PL/SQL Programming" by Steven Feuerstein
<P>
"Hitchhiker's Guide to Visual Basic &amp; SQL Server" by William Vaughn, Fifth
Edition
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>
   TITLE     : HOWTO: Retrieve Resultsets from Oracle Stored Procedures
   
   ARTICLE-ID: <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B>
   TITLE     : HOWTO: Acquire and Install the Microsoft Oracle ODBC
               Driver v2.0
   
   ARTICLE-ID: <B><A HREF="../VBWIN/Q174981.htm">Q174981</A></B>
   TITLE     : HOWTO: Retrieve Typical Resultsets from Oracle Stored
               Procedures
   
   ARTICLE-ID: <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B>
   TITLE     : HOWTO: Access an Oracle Database Using RDO
   
   ARTICLE-ID: <B><A HREF="../VBWIN/Q176086.htm">Q176086</A></B>
   TITLE     : HOWTO: Retrieve Recordsets from Oracle Stored Procs
               Using ADO
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: oracle stored procedures ado
<P>

(c) Microsoft Corporation 1997, All Rights Reserved.<BR>
Contributions by Sam Carpenter, Microsoft Corporation<BR>
Keywords          : vb5all vb5howto<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

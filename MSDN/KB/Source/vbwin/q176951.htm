

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use Events to Generate Asynchronous Callbacks </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176951">
<META NAME="KBModify" CONTENT="1998/03/03">
<META NAME="KBCreate" CONTENT="1997/11/19">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  In asynchronous processing, the method that starts a task is returned immediately without waiting for a result. The client can continue to do what it was originally doing while the task is completed. The server needs a way to notify the client asyc...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAFF,QAH4,QAPN,QABI,QARL,QAO4,QAM9,QALX,QAHH,QDIV,QAIJ,QBXS,QAGI,QABB,QA0K V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use Events to Generate Asynchronous Callbacks</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176951</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In asynchronous processing, the method that starts a task is returned
immediately without waiting for a result. The client can continue to do
what it was originally doing while the task is completed. The server needs
a way to notify the client asychronously when the task is done. One way of
doing this is to create an event that the client will handle.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Following is a small code sample demonstrating how a client application can
start another server application and wait for its completion notification
via an event. Clicking the Start button on the client's form starts up an
instance of the server and returns immediately. The server can then begin
some long calculation or other work. Upon completion of the task, the
server will fire the Notify event. The client receives this event and
responds accordingly.
<P>
<P><h3>Server Application</h3>
 
<P>
The server application is an ActiveX .exe file consisting of one class
module (clsTimer) and one standard module. Set the instancing property of
the Class module to Single Use. In the Project Properties dialog box, make
sure that the Startup Object is set to None:
<P>
<PRE>   clsTimer code
     Event Notify(ByVal somenum As Double)

     Public Sub StartTimer()
         Call BeginTimer(Me)  'Start the timer
     End Sub

     Public Sub Notifyme(ByVal anum As Double)
         RaiseEvent Notify(anum)  'Create an event with the result
     End Sub                      'as a parameter

     Public Sub StopTimer()
         Call EndTimer
     End Sub

     Private Sub Class_Terminate()
         Call EndTimer  'Make sure the timer is stopped
     End Sub

   Standard module code:
     Global timerid As Long
     Dim thetimer As clsTimer

     Public Declare Function SetTimer Lib "user32" _
             (ByVal hwnd As Long, _
             ByVal nIDEvent As Long, _
             ByVal uElapse As Long, _
             ByVal lpTimerFunc As Long) As Long

     Public Declare Function KillTimer Lib "user32" _
             (ByVal hwnd As Long, _
             ByVal nIDEvent As Long) As Long

     Public Sub EndTimer()
         Dim retval As Long
         retval = KillTimer(0, timerid)
     End Sub

     Public Sub BeginTimer(ByRef Timerobj As clsTimer)
         Set thetimer = Timerobj
         timerid = SetTimer(0, 0, 1, AddressOf TimerProc)
     End Sub

     Public Sub TimerProc(ByVal hwnd As Long, ByVal umsg As Long, _
         ByVal idEvent As Long, ByVal dwtime As Long)

         Dim counter As Long
         Dim theanswer As Double

         KillTimer 0, timerid  'Stop the timer

         For counter = 1 To 15000000  'Do some work here
             theanswer = theanswer + counter
         Next counter
         thetimer.Notifyme (theanswer)  'Work is done. Pass the result
     End Sub                            'as a parameter.

</PRE><h3>Client Application</h3>
 
<P>
The client application is a Standard .exe file consisting of one class
module (clsNotify) and one Form. The form has a Listbox control (lstTimes)
and a CommandButton (cmdStart).
<P>
Make sure you add a reference to your server application in your client
project:
<P>
<PRE>   Class Module code:
     Public WithEvents obj As clsTimer

     Private Sub Class_Terminate()
         Set obj = Nothing
     End Sub

     Private Sub obj_Notify(ByVal somenum As Double)
         Form1.lstTimes.AddItem somenum
         obj.StopTimer
         Set obj = Nothing  'Shut down the server when it has completed
     End Sub                'the task.

     Public Sub startit()
         Set obj = New clsTimer
         obj.StartTimer
     End Sub

   Form Code:
     Dim notifyobject As clsNotify

     Private Sub cmdStart_Click()
         notifyobject.startit
     End Sub

     Private Sub Form_Load()
         Set notifyobject = New clsNotify
     End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: callback<BR>
Keywords          : vb5all vb5howto<BR>
Technology        : kbole<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

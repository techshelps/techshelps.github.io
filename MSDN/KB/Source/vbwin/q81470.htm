

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use FillPolygonRgn API to Fill Shape in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q81470 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/03/10">
<META NAME="Keywords" CONTENT="kbgraphic kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Microsoft Visual Basic versions 2.0 and later for Windows include the Shape control which can be used for creating and filling six different geometric shapes. Alternatively, you can create a polygon region on a form or picture and fill it with a co...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBCF,QAK4,QA4Q,QAG9,QAGI,QBCE,QAM3,QAH4,QBC9,QBC8,QANO,QAY5,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use FillPolygonRgn API to Fill Shape in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q81470 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Visual Basic versions 2.0 and later for Windows include the
Shape control which can be used for creating and filling six different
geometric shapes. Alternatively, you can create a polygon region on a
form or picture and fill it with a color, using the CreatePolygonRgn
and FillRgn Windows API calls to draw and fill areas of the screen
with color. Geometric shapes not provided with the Shape control,
such as a triangle, can be created using this method.
<P>
More Information:
<P>
To draw a polygon on a form or picture control, you can use the
Polygon API call; this will draw the edge of the polygon. You can then
use CreatePolygonRgn to create an area that you can paint and use
FillRgn to fill it with a color. Using these Windows API calls allows
you to pick the points, the number of points, and to choose the color
or brush to fill with.
<P>
The API calls used in the following example should be declared in the
general Declarations section of your form. They are as follows:
<P>
<PRE>API Call          Description
</PRE> 
<P>
CreatePolygonRgn  Creates a polygonal region
<P>
<PRE>GetStockObject    Retrieves a handle to one of the predefined stock
                  pens, brushes, or fonts

FillRgn           Fills the region specified by the hRgn parameter
                  with the brush specified by the hBrush parameter

Polygon           Draws a polygon consisting of two or more points
                  connected by lines

</PRE><h3>Code Example</h3>
 
<P>
The following code example shows how to create a black triangle on a
form. To change the program to create other shapes, add points to the
array.

<OL><P><LI>Run Visual Basic for Windows, or from the File menu, choose New
   Project (press ALT, F, N) if Visual Basic for Windows is already
   running. Form1 is created by default.

<P><LI>From the File menu, choose New Module (press ALT, F, M). Module1 is
   created by default.

<P><LI>Add the following code to the general declarations section of
   Module1 (in Visual Basic version 1.0 for Windows, add it to GLOBAL.BAS):
<P>
<PRE>   Type Coord       ' This is the type structure for the x and y
      x As Integer  ' coordinates for the polygonal region.
      y As Integer
   End Type

   ' Enter each Declare statement as one, single line:
   Declare Function CreatePolygonRgn Lib "gdi" (lpPoints As Any,
      ByVal nCount As Integer, ByVal nPolyFillMode As Integer) As Integer
   Declare Function Polygon Lib "gdi" ByVal hDC As Integer,
      lpPoints As Any, ByVal nCount As Integer) As Integer
   Declare Function FillRgn Lib "gdi" (ByVal hDC As Integer,
      ByVal hRgn As Integer, ByVal hBrush As Integer) As Integer
   Declare Function GetStockObject Lib "gdi" (ByVal nIndex As Integer)
      As Integer
   Declare Function DeleteObject Lib "gdi" (ByVal hndobj As Integer)
      As Integer

   Global Const ALTERNATE = 1 ' ALTERNATE and WINDING are
   Global Const WINDING = 2   ' constants for FillMode.
   Global Const BLACKBRUSH = 4' Constant for brush type.

</PRE><P><LI>Add the following code to the Form_Click event for Form1:
<P>
<PRE>   Sub Form_Click ()
      ' Dimension coordinate array.
      ReDim poly(1 To 3) As Coord
      ' Number of vertices in polygon.
      NumCoords% = 3
      ' Set scalemode to pixels to set up points of triangle.
      form1.scalemode = 3
      ' Assign values to points.
      poly(1).x = form1.scalewidth / 2
      poly(1).y = form1.scaleheight / 2
      poly(2).x = form1.scalewidth / 4
      poly(2).y = 3 * form1.scaleheight / 4
      poly(3).x = 3 * form1.scalewidth / 4
      poly(3).y = 3 * form1.scaleheight / 4
      ' Sets background color to red for contrast.
      form1.backcolor = &amp;HFF
      ' Polygon function creates unfilled polygon on screen.
      ' Remark FillRgn statement to see results.
      bool% = Polygon(form1.hdc, poly(1), NumCoords%)
      ' Gets stock black brush.
      hbrush% = GetStockObject(BLACKBRUSH)
      ' Creates region to fill with color.
      hrgn% = CreatePolygonRgn(poly(1), NumCoords%, ALTERNATE)
      ' If the creation of the region was successful then color.
      If hrgn% Then bool% = FillRgn(form1.hdc, hrgn%, hbrush%)
      ' Print out some information.
      Print "FillRgn Return : ";bool%
      Print "HRgn : "; hrgn%
      Print "Hbrush : "; hbrush%
      Trash% = DeleteObject(hrgn%)
   End Sub

</PRE><P><LI>Run the program.
<P>
</OL>You should initially see a blank form. Click the form; a red
background with a black triangle on it should be displayed. You can
try different numbers of vertices by adding elements to the poly array
and updating NumCoords. Different colors and brushes can be
substituted as desired.
<P>
NOTE: If you try to fill a region with coordinates beyond the visible
form, the CreatePolygonRgn function call will return a zero, meaning it
was unsuccessful. The FillRgn will not work if the CreatePolygonRgn
function was unsuccessful. All you will see is the outline created by
the Polygon function. You should make certain that the vertices are
all within the viewable form.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbgraphic kbprg kbcode<BR>
KBSubcategory: APrgGrap<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

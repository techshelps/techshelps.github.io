

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Import Relationships Using DAO in a VB 4.0 Program </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129879">
<META NAME="KBModify" CONTENT="1996/04/16">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates how to use the new capabilities of Visual Basic Data Access Objects (DAO) 3.0 to manipulate relationships through Visual Basic code. The step-by-step example uses DAO to read all relations from a specified database and the...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAZV,QDKY,QBS0,QBXS,QAH4,QA1S,QAVX,QANF,QA7O,QA7N,QA4Q,QAEF,QBW7,QAI5,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Import Relationships Using DAO in a VB 4.0 Program</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 16, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129879</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to use the new capabilities of Visual Basic
Data Access Objects (DAO) 3.0 to manipulate relationships through Visual
Basic code. The step-by-step example uses DAO to read all relations from a
specified database and then attempts to append identical relations into the
current database. The appended relations that succeed become the imported
relations.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When attempts to append relations fail, it is often because either the
table names or fields names of that relation do not exist in the current
database. The appended relations that succeed will be the only relations
imported.
<P>
The following example shows how to use relation objects in the DAO. To run
this example, you must have access to a Microsoft Access database with
relations established on it. The NWIND.MDB database that ships with
Microsoft Access is used as an example. In this example, the function
imports the appropriate relations between the NWIND.MDB tables into a copy
of NWIND.MDB called NWIND2.MDB.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Use the File Manager to make a new copy of the NWIND.MDB database in the
   \ACCESS\SAMPAPPS\ directory. Name the copy NWIND2.MDB and place it in
   the same directory.

<P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add two command buttons (Command1 and Command2) to Form1.

<P><LI>Add the following code to the appropriate events:
<P>
<PRE>   Private Sub Command1_Click()
      '-------------------------------------------------------------------
      ' PURPOSE: Clear all relations from destination table.
      ' This is used to later demonstrate importing relations.
      '-------------------------------------------------------------------
      Dim ThisDb As Database
      Dim i As Integer

      Set ThisDb = DBEngine.Workspaces(0)_
         .OpenDatabase("C:\access\sampapps\nwind.mdb")

      ' Loop through all existing relations in that database:

      For i = ThisDb.Relations.Count - 1 To 0 Step -1
         Debug.Print i, ThisDb.Relations(i).Name
         ' Clear all relations to later demonstrate importing them:
         ThisDb.Relations.Delete ThisDb.Relations(i).Name
      Next
      Debug.Print "#Relations on "; ThisDb.Name; " = ";_
      ThisDB.Relations.Count
   End Sub

   Private Sub Command2_Click()
      Call ImportRelations("C:\access\sampapps\nwind2.mdb")
   End Sub

</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
<PRE>   Sub ImportRelations(DBName As String)
      '-------------------------------------------------------------------
      ' PURPOSE: Import relations where tablenames and fieldnames match.
      ' ACCEPTS: name of the database to import from as string.
      ' RETURNS: Number of relations imported as integer.
      '--------------------------------------------------------------------
      Dim ThisDb As Database, ThatDB As Database
      Dim ThisRela As Relation, ThatRela As Relation
      Dim ThisField As Field, ThatField As Field
      Dim Cr As String, i As Integer, cnt As Integer, RCount As Integer
      Dim j As Integer
      Dim ErrBadField As Integer

      Cr$ = Chr$(13)
      RCount = 0

      Set ThisDb = DBEngine.Workspaces(0)_
         .OpenDatabase("C:\access\sampapps\nwind.mdb")
      Set ThatDB = DBEngine.Workspaces(0).OpenDatabase(DBName$)

      Debug.Print "Before import ..."
      Debug.Print "  "; ThisDb.Name; " has "; _
      ThisDb.Relations.Count; " relations defined."
      Debug.Print "  "; ThatDB.Name; " has "; _
      ThatDB.Relations.Count; " relations defined."

      ' Loop through all existing relations in that database:
      For i = 0 To ThatDB.Relations.Count - 1
         Set ThatRela = ThatDB.Relations(i)

         ' Create 'ThisRela' using values from 'ThatRela':
         Set ThisRela = ThisDb.CreateRelation(ThatRela.Name, _
            ThatRela.Table, ThatRela.ForeignTable, ThatRela.Attributes)

         ' Set bad field flag to false:
         ErrBadField = False

         ' Loop through all fields in that relation:
         For j = 0 To ThatRela.Fields.Count - 1
            Set ThatField = ThatRela.Fields(j)

            ' Create 'ThisField' using values from 'ThatField':
            Set ThisField = ThisRela.CreateField(ThatField.Name)
            ThisField.ForeignName = ThatField.ForeignName

         Next j

         ' If any field of this relation caused an error,
         ' then don't add this relation:
         If ErrBadField = True Then
            ' Something went wrong with the fields.
            ' Don't do anything.
         Else
            ' Try to append the relation:
            On Error Resume Next
            ThisDb.Relations.Append ThisRela
            If Err &lt;&gt; False Then
               ' Something went wrong with the relation.
               ' Skip it.
            Else
               ' Keep count of successful imports
               RCount = RCount + 1
            End If
            On Error GoTo 0
         End If
      Next i

      Debug.Print "After import ..."
      Debug.Print "  "; ThisDb.Name; " has "; _
      ThisDb.Relations.Count; " relations defined."
      Debug.Print "  "; ThatDB.Name; " has "; _
      ThatDB.Relations.Count; " relations defined."

      ' Close databases:
      ThisDb.Close
      ThatDB.Close
   End Sub

</PRE><P><LI>Start the program by choosing Start from the Run menu or by pressing the
   F5 key.

<P><LI>Click the Command1 button to clear out any existing relations in the
   NWIND2.MDB database.

<P><LI>Click the Command2 button to run through all of the relations in the
   NWIND.MDB database, and copy them to the NWIND2.MDB database.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataAcc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 16, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

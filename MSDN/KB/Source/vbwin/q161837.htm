

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create a DCOM Client/Server Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161837">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1997/01/06">
<META NAME="Keywords" CONTENT="vb5all vb5howto VBKBAutomation VBKBAX VBKBComp kbtool kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  In the Enterprise Edition of Visual Basic for Windows version 5.0, you can use the Distributed Component Object Model (DCOM) to perform client/server operations. This article shows you how to create a client/server application that uses DCOM to ret...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWS,QAA1,QA01,QA2Q,QBT6,QBV4,QAPN,QAH4,QAMB,QAJN,QAG2,QBXS,QABI,QANX,QAUR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create a DCOM Client/Server Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161837</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Enterprise Edition of Visual Basic for Windows version 5.0, you can
use the Distributed Component Object Model (DCOM) to perform client/server
operations. This article shows you how to create a client/server
application that uses DCOM to retrieve the name of the server.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this code "as is" without warranty of any kind,
either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This sample was not intended to address multiple user scenarios. If you are
attempting to create a DCOM server that will handle multiple users, process
callbacks, raise events, or use security then please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q175510.htm">Q175510</A></B>
   TITLE     : FILE: VB5DCOM.EXE: Using Callbacks and WithEvents with DCOM

</PRE>This is an advanced DCOM demonstration using Visual Basic 5.0.
<P>
<P><h3>System Requirements</h3>
 
<P>
The following operating systems may be used for DCOM applications:
<P>
<PRE>   Operating System          Server           Client
   ----------------          ------           ------
   WinNT 4.0 Server           YES              YES
   WinNT 4.0 Workstation      YES              YES
   Windows 95                 YES:             YES:
                              See <B><A HREF="../VBWIN/Q165101.htm">Q165101</A></B>      with DCOM for Win95 files

</PRE><h3>Prepare the Computer</h3>
 
<P>
(While this step is not required, it keeps your project in order.)
<P>
Create the following directories on your computer:
<P>
<PRE>   C:\DCOMDemo
   C:\DCOMDemo\Server
   C:\DCOMDemo\Server\Setup
   C:\DCOMDemo\Client
   C:\DCOMDemo\Client\Setup

</PRE><h3>Create the Server</h3>
 

<OL><P><LI>Start a new Visual Basic Project. In the New Project dialog box, select
   "ActiveX EXE" and click Open.

<P><LI>Set the following properties:
<P>
<PRE>   Control             Name        Property         Value
   ------------------------------------------------------------------
   Class Module        Class1      (Name)           clsDCOMDemoServer
                                    Instancing       5 - MultiUse

</PRE><P><LI>Copy the following code to the Class Module clsDCOMDemoServer:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Public Function ServerTime()
<PRE></PRE>           'Retrieves the time from the server.
           ServerTime = Time
      End Function

      Public Function AddNumbers(x As Integer, y As Integer) As Integer
           'Receives two integers and adds them together.
           AddNumbers = x + y
      End Function

      Public Function SubtractNumbers(x As Integer, y As Integer) _
           As Integer
           'Receives two integers and subtracts the second from the first.
           SubtractNumbers = x - y
      End Function

</PRE><P><LI>On the Project menu, click "Project1 Properties."
<P>
   NOTE: If you saved the project previously or have another project
   open, the menu item may not be called "Project1." Select the menu item
   for "Properties."

<P><LI>Click the General tab and set the following properties:
<P>
<PRE>   Project Type:             ActiveX EXE       (Create out-of-process
                                                ActiveX component)

   Startup Object:           (None)            (None required)

   Project Name:             proDCOMDemoServer (Will be used in client
                                                code to define the project
                                                to be used)
   Help File Name:           &lt;Blank&gt;
   Project Help Context ID:  0
   Project Description:      DCOM Demo Project - Server
   Unattended Execution:     &lt;Unchecked&gt;
   Upgrade ActiveX Controls: &lt;Checked&gt;          (Enables upgrading of
                                                 ActiveX controls)

</PRE><P><LI>Click the Make tab and set the following properties:
<P>
<PRE>   Auto Increment:                     &lt;Checked&gt; (Useful for version
                                                  comparison.)

   Application Title:                  proDCOMDemoServer (Name of the EXE
                                                          that will be
                                                          compiled.)
   Version Information:                &lt;As desired&gt;
   Command Line Arguments:             &lt;Blank&gt;
   Conditional Compilation Arguments:  &lt;Blank&gt;

</PRE><P><LI>Click the Compile tab and set the following properties:
<P>
<PRE>   Compile to P-Code:       &lt;Selected&gt;
   Compile to Native Code:  &lt;Not Selected&gt;

   The rest of the options should be unavailable.

</PRE><P><LI>Click the Component tab and set the following options:
<P>
<PRE>   Start Mode:             ActiveX Component
   Remote Server Files:    &lt;Checked&gt; (Creates TLB and VBR files)
   Version Compatibility:  Project Compatibility (Keeps GUIDs updated)

   Click OK.

</PRE><P><LI>On the File menu, click Save Project As. Save the following files as
   described:
<P>
<PRE>   Directory             File           Filename              Extension
   ---------------------------------------------------------------------
   C:\DCOMDemo\Server    Class Module   clsDCOMDemoServer     .cls
                          Project        proDCOMDemoServer     .vbp

</PRE><P><LI>Select File from the menu, and choose "Make proDCOMDemoServer.exe."

<P><LI>In the Make Project dialog box, save the executable to the
<P><PRE>    \DCOMDemo\Server directory.
</PRE>
<P><LI>Select Project from the menu and choose "proDCOMDemoServer
<P><PRE>    Properties."
</PRE>
<P><LI>Click the Component tab and confirm that Version Compatibility is
<P><PRE>    still set to Project Compatibility.
</PRE>
<P><LI>The file proDCOMDemo.exe appears in the text box at the bottom of the
<P><PRE>    Version Compatibility group. In the Compatible ActiveX Component dialog
    box, select the file that you just compiled
    (C:\DCOMDemo\Server\proDCOMDemoServer.exe).
</PRE><P>
<P><PRE>    If it is not there, click on the button with the three ellipses (...)
    and go to step 15. If the file is already in the text box, go to
    step 16.
</PRE>
<P><LI>Click OK to close the "proDCOMDemoServer" - Project Properties
<P><PRE>    dialog box.
</PRE>
<P><LI>Open a new project ("File... New Project") and save the changes in the
<P><PRE>    server project.
</PRE><P>
</OL><h3>Create the Client</h3>
 

<OL><P><LI>In the New Project dialog box, select "Standard EXE" and click OK.

<P><LI>On the Project menu, click References.

<P><LI>Scroll down in the Available References text box until you see "DCOM
   Project - Server." Select the box on the left and click OK. Note that
   the component automatically appears in the "Available References" text
   box. In Remote OLE Automation, you have to double-click the server
   executable to register it. In DCOM, the server component is
   automatically registered.

<P><LI>Insert a Module. Place two CommandButtons, two text boxes, and three
   labels on Form1. Set the following properties:
<P>
<PRE>   Control         Name              Property         Value
   ------------------------------------------------------------------
   Module          Module1           Name             modDCOMDemoClient

   Form            Form1             Name             frmDCOMDemoClient
                                     Caption          DCOM Demo - Client

   CommandButton  Command1           Name             cmdServerTime
                                     Caption          &amp;Get Server Time

                  Command2           Name             cmdComputeNumbers
                                     Caption          &amp;Compute Numbers

   Text Box        Text1             Name             txtX
                                     TabStop          True
                                     TabIndex         0

                   Text2             Name             txtY
                                     TabStop          True
                                     TabIndex         1

   Label           Label1            Name             lblAnswerAdd
                   Label2            Name             lblAnswerSubtract
                   Label3            Name             lblServerTime

   You may want to add additional labels to the form to serve as captions
   for these labels.

</PRE><P><LI>Copy the following code to the Module:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Public oServer As New proDCOMDemoServer.clsDCOMDemoServer
</PRE>
<P><LI>Copy the following code to the frmDCOMDemoClient code window:
<P>
<P><PRE>      Option Explicit
      Private Sub Form_Load()
<PRE></PRE>           'Set initial values for text boxes.
            txtX.Text = "1"
            txtY.Text = "2"
      End Sub

      Private Sub txtX_GotFocus()
            'Select all the text when the text box gets focus.
            'This makes it easier to change the values.
            txtX.SelStart = 0
            txtX.SelLength = Len(txtX.Text)
      End Sub

      Private Sub txtY_GotFocus()
            'Select all the text when the text box gets focus.
            'This makes it easier to change the values.
            txtY.SelStart = 0
            txtY.SelLength = Len(txtY.Text)
        End Sub

      Private Sub cmdServerTime_Click()
           'Get the time from the server and put it in the
           'lblServerTime label.
           lblServerTime.Caption = oServer.ServerTime
      End Sub

      Private Sub cmdComputeNumbers_Click()
            'Passes the integers to the server and puts the answers in the
            'appropriate labels. The "CInt" is to ensure that you are
            'passing integers, which is what the server is expecting.
            lblAnswerAdd.Caption = oServer.AddNumbers _
                (CInt(txtX.Text), CInt(txtY.Text))
            lblAnswerSubtract.Caption = oServer.SubtractNumbers _
                (CInt(txtX.Text), CInt(txtY.Text))
      End Sub

      Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As _
                Integer)
     'Closes the object when the form unloads.
            Set oServer = Nothing
      End Sub

</PRE><P><LI>On the Project menu, click "Project1 Properties."
<P>
   NOTE: If you saved the project previously or have another project open,
   the menu item may not be called "Project1." Select the menu item for
   "Properties."

<P><LI>Click the General tab and set the following properties:
<P>
<PRE>   Project Type:             Standard EXE       (Client is a Standalone
                                                executable)

   Startup Object:           frmDCOMDemoClient  (frmDCOMDemoClient and
                                                the code behind
                                                the form run upon
                                                execution)

   Project Name:             proDCOMDemoClient  (Will be the name of the
                                                client executable)
   Help File Name:           &lt;Blank&gt;
   Project Help Context ID:  0
   Project Description:      DCOM Demo Project - Client
   Unattended Execution:     &lt;Disabled&gt;
   Upgrade ActiveX Controls: &lt;Checked&gt;          (Enables upgrading of
                                                ActiveX controls)

</PRE><P><LI>Click the Make tab and set the following properties:
<P>
<PRE>   Auto Increment:                     &lt;Checked&gt; (Useful for Version
                                                 checking)

   Application Title:                  proDCOMDemoClient
   Version Information:                &lt;As desired&gt;
   Command Line Arguments:             &lt;Blank&gt;
   Conditional Compilation Arguments:  &lt;Blank&gt;

</PRE><P><LI>Click the Compile tab and set the following properties:
<P>
<PRE>   Compile to P-Code:       &lt;Selected&gt;
   Compile to Native Code:  &lt;Not Selected&gt;

   The rest of the options should be unavailable.

</PRE><P><LI>Click the Component tab and ensure that all options are disabled.
   Click OK.

<P><LI>On the File menu, click Save Project As. Save the following files
   as described:
<P>
<PRE>   Directory           File         Filename              Extension
   ----------------------------------------------------------------
   C:\DCOMDemo\Client  Module       modDCOMDemoClient     .bas
                       Form1        frmDCOMDemoClient     .frm
                       Project      proDCOMDemoClient     .vbp

</PRE><P><LI>Test the client by clicking Run or pressing the F5 key. When you click
   Get Server Time, the current system time appears in the label. When
   you click Compute Numbers, the sum and the difference between the
   numbers appear in the appropriate labels. Stop the project.

<P><LI>On the File menu, click "Make proDCOMDemoClient.exe".

<P><LI>In the Make Project dialog box, save the executable to the
   C:\DCOMDemo\Client directory.

<P><LI>Close your project, and save the changes.
<P>
</OL><h3>Distribute the Server</h3>
 
<P>
You can use the same computer that you developed the application on as your
server. However, if you want to distribute your server to another computer,
follow these instructions:

<OL><P><LI>Start the Application Setup Wizard by clicking "Start, Programs,
   Visual Basic 5.0, Application Setup Wizard." (If the "Introduction"
   dialog box appears, click Next.)

<P><LI>In the Select Project and Options dialog box, click Browse. In the
   "Locate VB application's .VBP file" dialog box, select
   C:\DCOMDemo\Server\proDCOMDemoServer.VBP.

<P><LI>Click Open and set the following options:
<P>
   Rebuild the Project:  &lt;Unchecked&gt;
<PRE>   Options:              Create a Setup Program

   Click Next.

</PRE><P><LI>In the Distribution Method dialog box, select "Single Directory" and
   click Next.

<P><LI>In the Single Directory dialog box, select the C:\DCOMDemo\Server\Setup
   directory. Click Next.

<P><LI>In the ActiveX Components dialog box, click Next. (Do not select any
   components. They are not needed for this project.)

<P><LI>In the Confirm Dependencies dialog box, make sure that the Stdole2.tlb
   file is listed. (If it is not listed, you will have to add it later. It
   is located in your \Windows\System directory.) Click Next.

<P><LI>In the Shared ActiveX Application dialog box, select "Install as a
   shared component" and "No" since we are installing this as a DCOM
   application. Click Next.

<P><LI>In the File Summary dialog box, the Setup Wizard processes your files.
   When it is finished you will see a list of files that will be included
   in your project. If the Stdole2.tlb file is not listed, click Add. In
   the Add Files dialog box, select the file from your system directory.
   Click Next.

<P><LI>Save the template if desired, and then click Finish.

<P><LI>Connect to the distribution directory from your server and run the
   Setup.exe file that the Setup Wizard generated.

<P><LI>After the server setup is complete, start the "Dcom Configuration"
   application by clicking "Start, Run" and type Dcomcnfg.exe in
   the Run dialog box.
<P>
   If you do not configure the server class that was just installed, the
   default configuration is used. For this example, select
   proDCOMDemoServer.clsDCOMDemoServer and click Properties.

<P><LI>Click the General tab. This tab lists the following information about
   the application, its name, type, and where it is stored:
<P>
   Application Name:  proDCOMDemoServer.clsDCOMDemoServer
   Application Type:  Local Server
<PRE>   Local Path:        C:\WINNT\system32\proDCOMDemoServer.exe

</PRE><P><LI>Click the Location tab to choose where you want the application to run
   from. Set the following properties:
<P>
   Run application on the computer where the data is located  &lt;Unchecked&gt;
<PRE>   Run application on this computer                           &lt;Checked&gt;
   Run application on the following computer                  &lt;Unchecked&gt;

</PRE><P><LI>Click the Security tab to set application security. You set Access,
   Launch, and Configuration permissions from this tab.

<P><LI>Select "Use custom access permissions." Click "Edit," which just
   became available. In the Registry Value Permissions dialog box, click
   "Add."

<P><LI>In the Add Users and Groups dialog box, select Everyone, and then click
   Add. The Add Users and Groups dialog box enables you to allow or deny
   access to the class to certain individuals or groups.

<P><LI>In Type of Access box, select Allow Access and click OK. The Registry
   Value Permissions dialog box now reflects that you are allowing access
   to this class to Everyone. Click OK.

<P><LI>On the Security tab, select "Use custom launch permissions." Click
   "Edit" which just became available. In the Registry Value Permissions
   dialog box, click "Add."

<P><LI>In the Add Users and Groups dialog box, select Everyone and then click
   Add. The Add Users and Groups dialog box enables you to allow or deny
   certain individuals or groups to launch the class.

<P><LI>In the Type of Access box, select Allow Launch and click OK. The
   Registry Value Permissions dialog box now reflects that you are allowing
   Everyone to launch this class. Click OK.

<P><LI>Leave Configure Permissions in the Custom selection.

<P><LI>Click the Identity tab to set the user account that you want to use
   to run the application. Set the following properties:
<P>
   The Interactive User  &lt;Unselected&gt;
<PRE>   The Launching User    &lt;Selected&gt;
   This User             &lt;Unselected&gt;

</PRE><P><LI>Click OK. When you get back to "Distributed COM Configuration
   Properties," click OK. The following message should appear: "The
   operation completed successfully." Click OK.
<P>
</OL><h3>Distribute the Client</h3>
 

<OL><P><LI>Start the Application Setup Wizard by clicking "Start, Programs,
   Visual Basic 5.0, Application Setup Wizard." (If the Introduction
   dialog box appears, click Next.)

<P><LI>In the Select Project and Options dialog box, click Browse. In the
   "Locate VB application's .VBP file" dialog box, select
   C:\DCOMDemo\Client\proDCOMDemoClient.VBP.

<P><LI>Click Open and set the following options:
<P>
   Rebuild the Project:  &lt;Unchecked&gt;
<PRE>   Options:              Create a Setup Program

   Click Next.

</PRE><P><LI>In the Missing Dependencies dialog box, click Next. Dependency files
   are not required for this project. In the Confirm Missing
   Dependencies dialog box, click Yes.

<P><LI>In the Distribution Method dialog box, select Single Directory and then
   click Next.

<P><LI>In the Single Directory dialog box, select the C:\DCOMDemo\Client\Setup
   directory. Click Next.

<P><LI>In the ActiveX Components dialog box, deselect proDCOMDemoServer.exe.
   You do not need to distribute it with the client.

<P><LI>Click Add Remote. In the Add ActiveX Components dialog box, select
   C:\DCOMDemo\Server\proDCOMDemoServer.VBR. This file was created when
   you compiled the server executable. It was created because you
   checked the Remote Server Files option on the Server's "Properties
   Component" tab.

<P><LI>Click Open. The Remote Connection Details dialog box appears. Set the
   following options:
<P>
<PRE>   Remote Transport:   Distributed COM (DCOM)
   Network Address:    &lt;The name of the computer the server will be
                       installed on. Do not include backslashes&gt;

   Click OK. Click Next.

</PRE><P><LI>In the Confirm Dependencies dialog box, make sure that the Stdole2.tlb
   file is listed. (If it is not listed, you will have to add it later. It
   is located in your \Windows\System directory.) Click Next.

<P><LI>The File Summary dialog box appears and the Setup Wizard processes your
   files. When it is finished you will see a list of files that will be
   included in your project. If the Stdole2.tlb file is not listed, click
   Add. In the Add Files dialog box, select the file from your system
   directory. Click Next.

<P><LI>Save the template if desired, and then click Finish.

<P><LI>Connect to the distribution directory from your client and run the
   Setup.exe file that the Setup Wizard generated.
<P>
</OL>When you run the application from the client, it returns the time of the
computer that the server component is on. When you click Compute Numbers,
the result of the addition and subtraction of the numbers appears in the
text boxes. Try changing the numbers to confirm that everything works, but
don't use a very large number because you told that class that you are
passing integers.
 
<PRE>Keywords          : vb5all vb5howto VBKBAutomation VBKBAX VBKBComp kbtool kbhowto
Technology        : kbole
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Control the Volume of Sound Files from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118377">
<META NAME="KBModify" CONTENT="1996/03/29">
<META NAME="KBCreate" CONTENT="1994/07/17">
<META NAME="Keywords" CONTENT="kbui kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic MCI Control doesn't allow volume control of a Windows sound file. The volume can be controlled through the Multimedia API by using the waveOutSetVolume function. You can also use the function waveOutGetVolume() to read the current ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYS,QAHR,QBS0,QA4Q,QBXS,QABA,QBAO,QA7T,QAY5,QAB5,QAB9,QAUD,QBV8,QA2F,QAMB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Control the Volume of Sound Files from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118377</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic MCI Control doesn't allow volume control of a Windows
sound file. The volume can be controlled through the Multimedia API by
using the waveOutSetVolume function. You can also use the function
waveOutGetVolume() to read the current volume settings.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The waveOutSetVolume() function sets the volume of a waveform output
device. With this function, you can control the right- and left-channel
volume settings independently.
<P>
<P><h3>Declaration Syntax</h3>
 
<P>
Use one the following Declare statements to declare the waveOutGetVolume()
Windows API function in your Visual Basic program:
<P>
<PRE>'Enter each Declare statement as one, single line:
Declare Function waveOutSetVolume Lib "MMSYSTEM.DLL"
   (ByVal wDeviceID as Integer, ByVal dwVolume as Long) as Integer
Declare Function waveOutGetVolume Lib "MMSYSTEM.DLL"
   (ByVal wDeviceID as Integer, dwVolume as Long) as Integer

</PRE>As an alternative, you can declare the waveOutSetVolume function by passing
the dwVolume parameter as two separate integers, one for the left-channel
setting and one for the right-channel setting. Pass the high-order word
first and then the low-order word.
<P>
<PRE>'Enter the following Declare statement as one, single line:
Declare Function waveOutSetVolume Lib "MMSYSTEM.DLL"
   (ByVal wDeviceID as Integer, ByVal dwVolumeRight as Integer
   ByVal dwVolumeLeft as Integer) as Integer

</PRE><h3>Parameters Explained</h3>
 
<P>
<PRE>wDeviceID   This parameter identifies the waveform-output device. If
            you were to play one wave file, you would set this
            parameter to 0. If  you were to play multiple wave files, you
            would set this parameter to 1 for the second, 2 for the third,
            and so on.

dwVolume    For the waveOutSetVloume function, this parameter specifies
            the new volume setting. For the waveOutGetVolume
            function, it specifies a far pointer to a location that will be
            filled with the current volume setting.

            The low-order word contains the left-channel volume setting,
            and the high-order word contains the right-channel volume
            setting.

            A value of &amp;HFFFF represents full volume, and a value of
            &amp;H0000 represents no volume.

            If a device does not support both left and right volume
            control, the low-order word of dwVolume specifies the volume
            level, and the high-order word is ignored.

</PRE><h3>Return Value</h3>
 
<P>
?? returns zero if the function is successful.  Otherwise, it returns an
error number.  Possible return values are:

<UL><LI>MMSYSERR_INVALIHANDLE = 5      Specific device handle is invalid
<LI>MMSYSERR_NOTSUPPORTED = 8      Function isn't supported
<LI>MMSYSERR_NODRIVER     = 6      The driver was not installed
<P>
</UL>NOTE: Not all devices support volume changes or volume control on both the
left and right channels. Most devices do not support the full 16 bits of
volume-level control and will not use the high-order bits.
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
This example demonstrates how to use the waveOutSetVolume(),
waveOutGetVolume(), and sndPlaySound Multimedia API functions to
increase or decrease the sound in either the left or right channels:

<OL><P><LI>Start a new project in Visual Basic; Form1 is created by default.

<P><LI>Add the following controls to Form1 and set their properties as
   indicated:
<P>
<PRE>   Control           Property    Setting
   ----------------------------------------

   Command Button    Name        PlaySound
                     Caption     Play Sound

   Command Button    Name        LeftUp
                     Caption     Left Up

   Command Button    Name        LeftDown
                     Caption     Left Down

   Command Button    Name        RightUp
                     Caption     Right Up

   Command Button    Name        RightDown
                     Caption     Right Down

   Label             Name        LeftVol

   Label             Name        RightVol


</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
<PRE>   ' Enter each of the following Declare statements as one, single line:
   Declare Function sndPlaySound Lib "MMSYSTEM.DLL"
      (ByVal lpszSoundName As String, ByVal wFlags As Integer) As Integer
   Declare Function waveoutSetVolume Lib "mmsystem.dll"
      (ByVal wDeviceID As Integer, ByVal dwVolumeRight As Integer,
      ByVal dwVolumeLeft As Integer) As Integer
   Declare Function waveOutGetVolume Lib "MMSYSTEM.DLL"
      (ByVal wDeviceID As Integer, lpdwvolume As Long) As Integer

   Const SND_ASYNC = &amp;H1
   Const SND_NODEFAULT = &amp;H2

   Dim CurrentVolLeft As Long
   Dim CurrentVolRight As Long

</PRE><P><LI>Add the sample code shown below to the appropriate Form or Control event
   procedure.

<P><LI>Save your work, and run the program.

<P><LI>You will see the current channel setting in the labels. Choose
   the Play Sound button to hear the tada wave file play.

<P><LI>Click one of the other command buttons to change either the left- or
   right-channel setting, and then click the Play Sound command button
   again.  The volume level has changed.
<P>
</OL><h3>Sample Code</h3>
 
<P>
<PRE>Sub Form_Load ()
   Dim x As Integer
   Dim BothVolumes As Long
 ' Note that the waveid is 0 indicating the first wave output device.
 ' If you were to play multiple wavefiles on multiple wave output devices
 ' you would use 1 for the second wave output device, 2 for the third and
 ' so on.
 ' This code will retrieve the current volume setting
   x = waveOutGetVolume(0, BothVolumes)

   ' This code isolates the low-order word.
   ' Note that the value &amp;HFFFF&amp; is a Long Integer, which is the same
   ' as 0000FFFF, but because Visual Basic would automatically
   ' truncate this to FFFF, you must force the logical operation to use
   ' a four-byte Long Integer (0000FFFF) rather than a two-byte Integer
   ' (FFFF). This is accomplished by using the type casting
   ' character (&amp;).
   CurrentVolLeft = BothVolumes And &amp;HFFFF&amp;

   ' This code isolates the high-order word.
   ' Enter the following two lines as one, single line:
   CurrentVolRight = ((BothVolumes And &amp;HFFFF0000) / &amp;H10000)
      And &amp;HFFFF&amp;

   LeftVol.Caption = Hex$(CurrentVolLeft)   ' Update the label with the
   RightVol.Caption = Hex$(CurrentVolRight) ' current volume settings.
End Sub

Sub PlaySound_Click ()
   Dim x As Integer
   Dim wFlags As Integer
   Dim SoundName As String
   SoundName = "C:\WINDOWS\MSREMIND.WAV"    ' Pick any wave file.
   wFlags = SND_ASYNC Or SND_NODEFAULT
   x = sndPlaySound(SoundName$, wFlags%)    ' Play the wave file.
End Sub

Sub LeftUp_Click ()
   ' Increase the left sound channel setting:
   Dim x As Integer
   CurrentVolLeft = CurrentVolLeft + &amp;H1000&amp;
   ' Prevent the channel setting from exceeding the maximum limit:
   If CurrentVolLeft &gt; &amp;HFFFF&amp; Then CurrentVolLeft = &amp;HFFFF&amp;
   LeftVol.Caption = Format$(Hex$(CurrentVolLeft))
   ' Enter the following two lines as one, single line:
   x = waveoutSetVolume(0, CInt("&amp;H" + Hex$(CurrentVolRight)),
      CInt("&amp;H" + Hex$(CurrentVolLeft)))
End Sub

Sub LeftDown_Click ()
   ' Decrease the left sound channel setting:
   Dim x As Integer
   CurrentVolLeft = CurrentVolLeft - &amp;H1000&amp;
   ' Prevent the channel setting from dropping below the minimum limit:
   If CurrentVolLeft &lt; &amp;H0&amp; Then CurrentVolLeft = &amp;H0&amp;
   LeftVol.Caption = Hex$(CurrentVolLeft)
   ' Enter the following two lines as one, single line:
   x = waveoutSetVolume(0, CInt("&amp;H" + Hex$(CurrentVolRight)),
      CInt("&amp;H" + Hex$(CurrentVolLeft)))
End Sub

Sub RightUp_Click ()
   ' Increase the right sound channel setting:
   Dim x As Integer
   CurrentVolRight = CurrentVolRight + &amp;H1000&amp;
   ' Prevent the channel setting from exceeding the maximum limit.
   If CurrentVolRight &gt; &amp;HFFFF&amp; Then CurrentVolRight = &amp;HFFFF&amp;
   RightVol.Caption = Hex$(CurrentVolRight)
   ' Enter the following two lines as one, single line:
   x = waveoutSetVolume(0, CInt("&amp;H" + Hex$(CurrentVolRight)),
      CInt("&amp;H" + Hex$(CurrentVolLeft)))
End Sub

Sub RightDown_Click ()
   ' Decrease the right sound channel setting:
   Dim x As Integer
   CurrentVolRight = CurrentVolRight - &amp;H1000&amp;
   ' Prevent the channel setting from dropping below the minimum limit:
   If CurrentVolRight &lt; 0 Then CurrentVolRight = 0
   RightVol.Caption = Hex$(CurrentVolRight)
   ' Enter the following two lines as one, single line:
   x = waveoutSetVolume(0, CInt("&amp;H" + Hex$(CurrentVolRight)),
      CInt("&amp;H" + Hex$(CurrentVolLeft)))
End Sub

</PRE></OL><h2>REFERENCES</h2>
 
For more detailed information on these and other Multimedia-related
functions, please see the "Multimedia Programmer's Reference Guide"
included with the Microsoft Windows version 3.1 Software Development Kit.
<P>
For information on other Visual Basic declarations and constant values for
Multimedia-related functions, see the WINMMSYS.TXT text file. This file
comes as part of the Professional edition of Visual Basic. Assuming default
installation, you can find this file in the C:\VB\WINAPI\ directory.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbui kbprg kbcode<BR>
KBSubCategory: APrgWindow<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

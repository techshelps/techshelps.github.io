

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use the System Tray Directly from Visual Basic 5.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176085">
<META NAME="KBModify" CONTENT="1997/11/03">
<META NAME="KBCreate" CONTENT="1997/10/31">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates how to take full advantage of the Windows System Tray using Visual Basic 5.0. It places an icon of your choice into the System Tray that will display a ToolTip of your choice when the mouse is rested over it, will restore ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDKB,QBS0,QAFF,QAGI,QA0K,QAH4,QABA,QAVI,QAJQ,QAMA,QACI,QAB9,QAY2,QAXW,QAWT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use the System Tray Directly from Visual Basic 5.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176085</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to take full advantage of the Windows System
Tray using Visual Basic 5.0. It places an icon of your choice into the
System Tray that will display a ToolTip of your choice when the mouse is
rested over it, will restore the application when clicked, and will display
a popup menu when right-clicked. This is all possible because of Visual
Basic 5.0's ability to directly handle callbacks, therefore taking full
advantage of the Shell_NotifyIcon function that is exported by Shell32.dll.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example can be added to any Visual Basic 5.0 Project that has
at least one form and a standard module.
<P>
<P><h3>Step-by-Step Example:</h3>
 

<OL><P><LI>Add the following code to the declarations section of a standard module
   in your project:
<P>
<P><PRE>      'user defined type required by Shell_NotifyIcon API call
      Public Type NOTIFYICONDATA
       cbSize As Long
       hwnd As Long
       uId As Long
       uFlags As Long
       uCallBackMessage As Long
       hIcon As Long
       szTip As String * 64
      End Type
</PRE>   
<P><PRE>      'constants required by Shell_NotifyIcon API call:
      Public Const NIM_ADD = &amp;H0
      Public Const NIM_MODIFY = &amp;H1
      Public Const NIM_DELETE = &amp;H2
      Public Const NIF_MESSAGE = &amp;H1
      Public Const NIF_ICON = &amp;H2
      Public Const NIF_TIP = &amp;H4
      Public Const WM_MOUSEMOVE = &amp;H200
<PRE></PRE>      Public Const WM_LBUTTONDOWN = &amp;H201     'Button down
      Public Const WM_LBUTTONUP = &amp;H202       'Button up
      Public Const WM_LBUTTONDBLCLK = &amp;H203   'Double-click
      Public Const WM_RBUTTONDOWN = &amp;H204     'Button down
      Public Const WM_RBUTTONUP = &amp;H205       'Button up
      Public Const WM_RBUTTONDBLCLK = &amp;H206   'Double-click
   
      Public Declare Function SetForegroundWindow Lib "user32" _
      (ByVal hwnd As Long) As Long
      Public Declare Function Shell_NotifyIcon Lib "shell32" _
      Alias "Shell_NotifyIconA" _
      (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean
   
      Public nid As NOTIFYICONDATA

</PRE><P><LI>Add the following code to any form in your project that you want to
   respond to the System Tray Icon for your application:
<P>
<P><PRE>      Private Sub Form_Load()
       'the form must be fully visible before calling Shell_NotifyIcon
       Me.Show
       Me.Refresh
       With nid
<PRE></PRE>        .cbSize = Len(nid)
        .hwnd = Me.hwnd
        .uId = vbNull
        .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
        .uCallBackMessage = WM_MOUSEMOVE
        .hIcon = Me.Icon
        .szTip = "Your ToolTip" &amp; vbNullChar
       End With
       Shell_NotifyIcon NIM_ADD, nid
      End Sub
   
      Private Sub Form_MouseMove(Button As Integer, Shift As Integer, X As
   _
         Single, Y As Single)
      'this procedure receives the callbacks from the System Tray icon.
      Dim Result As Long
      Dim msg As Long
       'the value of X will vary depending upon the scalemode setting
       If Me.ScaleMode = vbPixels Then
        msg = X
       Else
        msg = X / Screen.TwipsPerPixelX
       End If
       Select Case msg
        Case WM_LBUTTONUP        '514 restore form window
         Me.WindowState = vbNormal
         Result = SetForegroundWindow(Me.hwnd)
         Me.Show
        Case WM_LBUTTONDBLCLK    '515 restore form window
         Me.WindowState = vbNormal
         Result = SetForegroundWindow(Me.hwnd)
         Me.Show
        Case WM_RBUTTONUP        '517 display popup menu
         Result = SetForegroundWindow(Me.hwnd)
         Me.PopupMenu Me.mPopupSys
       End Select
      End Sub
   
      Private Sub Form_Resize()
       'this is necessary to assure that the minimized window is hidden
       If Me.WindowState = vbMinimized Then Me.Hide
      End Sub
   
      Private Sub Form_Unload(Cancel As Integer)
       'this removes the icon from the system tray
       Shell_NotifyIcon NIM_DELETE, nid
      End Sub
   
      Private Sub mPopExit_Click()
       'called when user clicks the popup menu Exit command
       Unload Me
      End Sub
   
      Private Sub mPopRestore_Click()
       'called when the user clicks the popup menu Restore command
       Me.WindowState = vbNormal
       Result = SetForegroundWindow(Me.hwnd)
       Me.Show
      End Sub

</PRE><P><LI>Make the following Property Settings on the same form to which you added
   the above code:
<P>
<PRE>   Property         Required Setting for System Tray example
   ---------------------------------------------------------------
   Icon           = The icon you want to appear in the system tray.
   Minbutton      = True
   ShownInTaskbar = False

</PRE><P><LI>Add the following Menu items to the same form using the Menu Editor:
<P>
<PRE>   Caption      Name          Enabled   Visible   Position
   ---------------------------------------------------------
   &amp;SysTray     mPopupSys      True      False    Main Level
   &amp;Restore     mPopRestore    True      True     Inset one
   &amp;Exit        mPopExit       True      True     Inset one

</PRE></OL>You can add additional menu items as needed.
<P>
<P><h3>System Tray Flexibility</h3>
 
<P>
You can modify the ToolTip that appears over the System Tray icon by
changing the following line in the Form_Load procedure:
<P>
<PRE>   .szTip = "Your ToolTip" &amp; vbNullChar

</PRE>Replace "Your ToolTip" with the text that you want to appear.
<P>
You can modify the Icon that appears in the System Tray by changing the
following line in the Form_Load procedure:
<P>
<PRE>   .hIcon = Me.Icon

</PRE>Replace Me.Icon with any Icon in your project.
<P>
You can change any of the System Trays settings at any time after the use
of the NIM_ADD constant by reassigning the values in the nid variable and
then using the following variation of the Shell_NotifyIcon API call:
<P>
<PRE>   Shell_NotifyIcon NIM_MODIFY, nid.

</PRE>However, if you want a different form to receive the callback, then you
will need to delete the current icon first using "Shell_NotifyIcon
NIM_Delete, nid" as the NIM_Modify function will not accept a new Hwnd, or
you will need to add another Icon to the systray for the new form using
"Shell_NotifyIcon NIM_ADD, nid" after refilling the nid type with the new
forms Hwnd. You can also declare separate copies of the nid type for each
form that you want to display an icon for in the Windows System Tray and
change them in each form's activate event using the NIM_DELETE and NIM_ADD
sequence.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For information regarding using the System Tray from Visual Basic 4.0 or
earlier, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q149276.htm">Q149276</A></B>
   TITLE     : HOWTO: Use Icons with the Windows 95 System Tray
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Taskbar<BR>
Keywords          : vb5all vb5howto<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

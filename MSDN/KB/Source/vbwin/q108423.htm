

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Attach an External Database Table to a VB 3.0 Database </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108423">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1993/12/12">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  An attached table is a table from an external database linked at run time to a Microsoft Access database. You can gain access to the data in the attached table by using a data control, a Dynaset, or a Snapshot. The database format native to Visual ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA1S,QA39,QAZV,QDKY,QAPN,QABT,QAH4,QAWM,QAI5,QARR,QANF,QBW7,QBXS,QAIJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Attach an External Database Table to a VB 3.0 Database</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108423</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An attached table is a table from an external database linked at run
time to a Microsoft Access database. You can gain access to the data in
the attached table by using a data control, a Dynaset, or a Snapshot.
The database format native to Visual Basic is the Microsoft Access format.
<P>
Using the data control, you can open a Dynaset on an external table.
Specify the external database type in the Connect property. Specify an
appropriate directory or file name in the DatabaseName property of the
data control.
<P>
Using object variables, you can attach a table from any supported
external database to a Microsoft Access database as shown in the
examples below.
<P>
NOTE: You can use queries and the move and find methods on an attached
table. An attached table cannot be opened with the OpenTable method.
Therefore you cannot use the Seek method on an attached table.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps describe how to attach a table to an existing Visual
Basic database or a Microsoft Access database:

<OL><P><LI>Create a variable for the Database object you are going to modify:
<P>
   Dim Db As Database

<P><LI>Use the OpenDatabase function to open the existing Visual Basic or
   Microsoft Access database:
<P>
   Set Db = OpenDatabase("BIBLIO.MDB")

<P><LI>Dimension a new TableDef object for the table from the external
   database.

<P><LI>Set the following properties of the TableDef object to prepare for
   attaching the external table:
<P>
   a. Name property: A new name for the table to be used in Visual Basic.
<P>
   b. SourceTableName property: The original name of the external table or
<P><PRE>      file name.
</PRE><P>
   c. Connect property: The database type and other parameters. If a
<P><PRE>      password is required but not provided in the Connect property, a
      Login dialog box appears each time the table is accessed.
</PRE>
<P><LI>Repeat steps 3 and 4 for each external table.

<P><LI>Use the Append method to add the TableDef object(s) to the TableDefs
   collection of the Microsoft Access database. This step actually creates
   the object links in the Microsoft Access database file.
<P>
</OL><h3>Example One</h3>
 
<P>
Both databases shown below are Microsoft Access databases. But the table to
be attached to the Microsoft Access database could be from any of the other
database formats that Visual Basic version 3.0 supports.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Double-click the form to open its code window. Add the following code
   to the Form Load event:
<P>
<PRE>   Sub Form_Load ()
      Dim db As database
      Dim td As New Tabledef
      Dim ds As dynaset
      Set db = OpenDatabase("BIBLIO.MDB")
      td.Name = "MyNewCustomersTable"   ' New Table name for use in VB.
      td.SourceTableName = "Customers"  ' Table name in source database.
      td.Connect = ";DATABASE=c:\access\nwind.mdb;"   ' Source database.
      db.TableDefs.Append td   ' Append Customers Table to BIBLIO.MDB.
      Set ds = db.CreateDynaset("MyNewCustomersTable")  ' Create dynaset.
      Debug.Print ds.Fields(0)     ' Proves the Table is attached.
      Debug.Print ds.Fields(1)     ' Proves the Table is attached.
      Debug.Print ds.Fields(2)     ' Proves the Table is attached.
      ' The following statement deletes the appended Table, if desired:
      db.TableDefs.Delete "MyNewCustomersTable"
   End Sub

</PRE><P><LI>Start the program or press the F5 key. To end program, close the form.
<P>
</OL><h3>Example Two</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Double-click the form to open its code window. Add the following code
   to the Form Load event:
<P>
<PRE>   Sub Form_Load ()

      Dim db1 As database, db2 As database
      Dim td As New Tabledef
      Dim tb As Table
      Dim ds As dynaset
      Dim f1 As New field, f2 As New field

      Const DB_LANG_GENERAL = ";LANGID=0x0809;CP=1252;COUNTRY=0"
      Const DB_VERSION10 = 1
      Const file1 = "test1.mdb"  'contains Table food1"
      Const file2 = "test2.mdb"  'contains Table food2

      Set db1 = OpenDatabase(file1)
      Set db2 = OpenDatabase(file2)
      ' db2.TableDefs.Delete "new_food1" ' Deletes Table if desired.

      td.Name = "new_food1"
      td.SourceTableName = "food1"
      td.Connect = ";database=" &amp; file1 &amp; ";"

      ' NOTE: For an ODBC database, the connect string would be similar to:
      ' td.Connect = "ODBC;UID=sa;PWD=;DSN=texas;DATABASE=pubs;"
      ' td.Attributes = DB_ATTACHEDTABLE
      ' or, if password protected: td.Attributes = &amp;H20000
      ' or, if exclusive: td.Attributes = tbl.Attributes + &amp;H10000

      db2.TableDefs.Append td   ' Attaches the external Table.

      ' NOTE: The OpenTable method is illegal for attached Tables:
      '  Set tb = db2.OpenTable("new_food1")   ' Gives an error.

      Set ds = db2.CreateDynaset("new_food1")
      Print ds.Fields(0)     ' Proves the Table is attached.
      ds.Close
      db1.Close
      db2.Close
   End Sub

</PRE><P><LI>Modify the code to use your existing database and table names. Start the
   program or press the F5 key. To end the program, close the form.
<P>
</OL><h2>REFERENCES</h2>
 

<UL><LI>See the "attached tables" topic in the Help menu.

<LI>See the EXTERNAL.TXT file provided with Visual Basic.

<LI>The VISDATA.MAK file installed in the VB3\SAMPLES\VISDATA directory
   loads extensive examples of data access. The VISDATA sample program uses
   every data access function in Visual Basic. You can refer to the VISDATA
   source code for examples of how to use each data access function.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

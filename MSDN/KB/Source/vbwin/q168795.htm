

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Hook Into a Window's Messages Using AddressOf </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168795">
<META NAME="KBModify" CONTENT="1997/10/16">
<META NAME="KBCreate" CONTENT="1997/05/21">
<META NAME="Keywords" CONTENT="vb5all kbcode kbusage kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Hooking into a Window (sometimes called sub-classing) is a technique that enables interception of the messages that are being sent to that Window. Microsoft Visual Basic version 5.0 allows sub-classing through the use of the AddressOf operator.  NO...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBS0,QAEV,QAB9,QBV8,QAH4,QDL9,QBWO,QBWN,QAFF,QAYC,QAGQ,QAB4,QAH6,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Hook Into a Window's Messages Using AddressOf</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168795</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Hooking into a Window (sometimes called sub-classing) is a technique that
enables interception of the messages that are being sent to that Window.
Microsoft Visual Basic version 5.0 allows sub-classing through the use of
the AddressOf operator.
<P>
NOTE: This article's purpose is to demonstrate a hooked message stream. It
is beyond the scope of this article to describe any particular application
of this technique.
<P>
WARNING: ANY USE BY YOU OF THE SAMPLE CODE PROVIDED IN THIS ARTICLE IS AT
YOUR OWN RISK. Microsoft provides this sample code "as is" without warranty
of any kind, either express or implied, including but not limited to the
implied warranties of merchantability and/or fitness for a particular
purpose.
<P>
WARNING: Failure to unhook a window before its imminent destruction will
result in application errors, Invalid Page Faults, and data loss. This is
due the fact that the new WindowProc function being pointed to no longer
exists, but the window has not been notified of the change. Always unhook
the sub-classed window upon unloading the sub-classed form or exiting the
application. This is especially important while debugging an application
that uses this technique within the Microsoft Visual Basic 5.0 Development
Environment. Pressing the End button or selecting End from the Run menu
without unhooking will cause an Invalid Page Fault and close Microsoft
Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Windows controls applications by sending messages to the windows
that are created by each application. These messages alert the targeted
window when it's time to redraw, when a mouse button is pressed, and all of
the other information a window needs to know in order to act appropriately.
<P>
Thus, a minimal Windows application consists of a function for which these
messages are processed (called WindowProc). This function is registered
into the system when the window is created so the system knows where to
send messages.
<P>
The following application consists of a simple form with two command
buttons. The code is designed to intercept Windows messages being sent to
the form and to print the values of those messages in the Immediate window.

<OL><P><LI>In a new "Standard EXE" project, add Form1, two Command Buttons, and
   Module1.BAS. The first part of the code consists of declarations for the
   API functions, constant values, and variables:
<P>
<P><PRE>      Declare Function CallWindowProc Lib "user32" Alias _
      "CallWindowProcA" (ByVal lpPrevWndFunc As Long, _
      ByVal hwnd As Long, ByVal Msg As Long, _
      ByVal wParam As Long, ByVal lParam As Long) As Long
</PRE><P>
<P><PRE>      Declare Function SetWindowLong Lib "user32" Alias _
      "SetWindowLongA" (ByVal hwnd As Long, _
      ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
</PRE><P>
<P><PRE>      Public Const GWL_WNDPROC = -4
      Global lpPrevWndProc As Long
      Global gHW As Long
</PRE>
<P><LI>Add the following procedures to MODULE1.BAS:
<P>
<P><PRE>      Public Sub Hook()
<PRE></PRE>          lpPrevWndProc = SetWindowLong(gHW, GWL_WNDPROC, _
          AddressOf WindowProc)
      End Sub

      Public Sub Unhook()
          Dim temp As Long
          temp = SetWindowLong(gHW, GWL_WNDPROC,lpPrevWndProc)
      End Sub

   These two procedures enable the code to hook into the stream of
   messages.

   In the first procedure, "Hook," you make use of the SetWindowLong
   function. The SetWindowLong function changes an attribute of a specified
   window. It takes the following parameters:

   hwnd:      The handle of the Window you are going to change.
   nIndex:    The action you are going to do to the window.
   dwNewLong: The new value you change to.

   In this example, you use the Form's hwnd property as the targeted window
   to change. You then use the GWL_WNDPROC constant to tell the
   SetWindowLong function that you want to change the address of the target
   window's WindowProc function. Finally you set dwNewLong to the address
   of a new WindowProc function (see next step). Notice that you store the
   previous WindowProc address in the lpPrevWndProc variable.

   The second procedure, "UnHook," simply reverses what you have done and
   puts the address of the original window procedure back.

</PRE><P><LI>Add the following function to MODULE1.BAS:
<P>
<P><PRE>      Function WindowProc(ByVal hw As Long, ByVal uMsg As _
      Long, ByVal wParam As Long, ByVal lParam As Long) As Long
<PRE></PRE>          Debug.Print "Message: "; hw, uMsg, wParam, lParam
          WindowProc = CallWindowProc(lpPrevWndProc, hw, _
          uMsg, wParam, lParam)
      End Function

   Here is the function that you are routing the window messages to when
   you "Hook" the form's WindowProc function. Note that you make use of the
   CallWindowProc function; using the lpPrevWndProc variable to send any
   unprocessed messages to the original handler. Hence, you are allowing a
   chain of window procedures to process all messages.

</PRE><P><LI>Finally, the code for the form sets the initial hWnd value, and the
   code for the buttons simply calls the two subroutines:
<P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>          gHW = Me.hwnd
      End Sub

      Private Sub Command1_Click()
          Hook
      End Sub

      Private Sub Command2_Click()
          Unhook
      End Sub

</PRE><P><LI>Before running this sample, save your project.
<P>
</OL>The moment Command1 is clicked, the Immediate window starts filling with
the messages the form is receiving, hooked through to your new WindowProc
function and then passed on to the Form's own handler.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Windows 32 SDK
Win32 Programmer Reference
<PRE>   CallWindowProc
   SetWindowLong

</PRE></OL>Microsoft Visual Basic Books Online
 
<PRE>Keywords          : vb5all kbcode kbusage kbhowto
Version           : 5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

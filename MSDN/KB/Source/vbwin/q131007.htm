

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use Windows NT Windbg with Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131007">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1995/05/31">
<META NAME="Keywords" CONTENT="kbenv kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Many Visual Basic application developers are moving to Windows NT as their development platform because of its robustness and excellent multitasking capabilities. This article shows by example how Visual Basic developers can use the Windbg debugger...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBWP,QBWS,QDL9,QBWO,QBWN,QAH4,QAY2,QBWQ,QA5F,QAMA,QBXS,QBJZ,QAB5,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use Windows NT Windbg with Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131007</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows NT Workstation version 3.5
<LI>Microsoft Windows NT Server version 3.5
<LI>Microsoft Win32 Software Development Kit (SDK) version 3.5
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Many Visual Basic application developers are moving to Windows NT as their
development platform because of its robustness and excellent multitasking
capabilities. This article shows by example how Visual Basic developers can
use the Windbg debugger to debug a dynamic link library (.DLL file) or
custom control (.VBX file) called from a Visual Basic application running
under Windows NT.
<P>
CodeView for Windows doesn't run under Windows NT because CodeView uses a
VxD (Virtual Device Driver) not supported by Windows NT.
<P>
For information on how to use CodeView for Windows to debug Visual Basic
Custom controls (.VBX files), please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q75612.htm">Q75612</A></B>
   TITLE     : How to Use CodeView for Windows (CVW.EXE) with Visual Basic

</PRE>WARNING: Using Windbg as described in this article is not supported by
Microsoft, so you should save all source files before using this procedure.
Windbg should exit without hanging the system. However, you should not
modify your Visual Basic source while running under Windbg unless you
always make sure you have saved any changes before running the code. This
procedure has been tested on Windows NT version 3.5. Preliminary testing on
Windows NT version 3.51 shows problems when switching to Visual Basic while
running under Windbg, so you should not use this procedure with Windows NT
version 3.51.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This article follows the steps and contains much of the material in <B><A HREF="../VBWIN/Q75612.htm">Q75612</A></B>,
but it has been modified to describe how to use the Windbg debugger to
debug a dynamic link library (.DLL file) or custom control (.VBX file)
called from Visual Basic running under Windows NT.
<P>
Windbg is one of the debuggers supplied with the Win32 SDK. It is a Windows
debugger but retains many of the commands of the NTSD debugger that is also
supplied with the Win32 SDK. More information may be found for both Windbg
and NTSD in the Win32 Tools Users Guide.
<P>
NOTE: You can build custom controls using the Control Development Kit (CDK)
for Visual Basic. The Visual Basic CDK, formerly shipped separately as an
add-on product from Microsoft, is now shipped as part of the Professional
Edition of Microsoft Visual Basic for Windows.
<P>
Information on installing Windbg can be found in the Help files supplied
with the Win32 SDK. There are several supporting .DLL files that are
required to use Windbg, so it is not sufficient to copy just the WINDBG.EXE
file from the SDK.
<P>
<P><h3>How to Invoke Windbg</h3>
 
<P>
Make sure your system is backed up and can be recovered if it should hang.
This is highly unlikely because Windows NT has been designed to prevent
this kind of problem.
<P>
You can invoke Windbg from the Windows Program Manager in any of the
following ways:

<UL><LI>From the Windows Program Manager File menu, choose New, and
   specify WINDBG.EXE as a Program Item with proper arguments. You can
   then double-click the WINDBG icon to run WINDBG.EXE.

<LI>From the Windows Program Manager File menu, choose Run, and enter
   WINDBG.EXE and its command line arguments.

<LI>Invoke WINDBG with no arguments from a command prompt, and follow the
   steps below to load the various files and modules required for the
   debug process.
<P>
</UL><h3>Step-by-Step Example</h3>
 
<P>
This example demonstrates how to invoke CIRC3.VBX, which comes with the
Microsoft Visual Basic Control Development Kit (CDK) or the Visual Basic
professional edition:

<OL><P><LI>Run WINDBG.EXE from the Program Manager or command prompt:
<P>
   [path]WINDBG.EXE [path]VB.EXE
<P>
   NOTE: You can just specify an .EXE program that was written in the
   Visual Basic environment instead of specifying the VB.EXE environment
   itself. If you do this, skip steps 7, 8, and 9 below.
<P>
   The CIRC3.VBX is not loaded from the command line along with Windbg as
   it is with CodeView. It will automatically be loaded by Windbg when it
   is added to the Visual Basic development environment. Note that the .VBX
   file must be built so that it includes symbol information.

<P><LI>If you invoked WINDBG.EXE with no command line arguments, load VB.EXE
   or the Visual Basic application by choosing Open from the Program menu.
   Choose New to bring up the Open dialog box.

<P><LI>From the Open dialog box, locate VB.EXE or the application you want to
   run, and open it. Click OK when you return to the Open dialog box.
<P>
   NOTE: If you are debugging a Visual Basic application rather than
   loading VB.EXE, you must load the CIRC3.VBX explicitly to be able to
   set breakpoints. From the Options menu, choose User DLLs. Click the
   Browse button and locate the CIRC3.VBX. Click OK to add it to the list
   of modules. Click OK again to exit the dialog box.

<P><LI>From the File menu, choose Open to load the CIRC3.VBX source code.
   Locate the directory with the CIRC3.C file. Select and open this file.
   An MDI window will open in Windbg; it contains the source code for
   the .VBX file.

<P><LI>From the Options menu, choose Debug, and select the Separate WOW/VDM
   check box in the Debugger Options dialog box. Click OK.

<P><LI>Press the F5 key or choose Go from the Run menu. Visual Basic starts up.
   You should see various system-level .DLL files loaded. This information
   appears in the Command window in Windbg.

<P><LI>From the File menu in Visual Basic, choose Add File. In the Files box,
   select the CIRC3.VBX file. The CIRC3 tool appears in the toolbox. Again,
   you should see various .DLL files loaded. These are system files that
   support the loading of the .VBX file. You will also see the CIRC3.VBX
   file loaded.

<P><LI>Select the custom control from the toolbox, and add it to your form.

<P><LI>You may now set a breakpoint in the CIRC3.C source code. Locate the
   WM_LBUTTONDBLCLK message, and set a breakpoint on the first IF
   statement.
<P>
   If the line turns red, this indicates that the breakpoint has been set
   successfully. If it is purple, the breakpoint is not correctly set, so
   it is never triggered. This can occur if the .VBX file does not include
   symbol information.

<P><LI>Press the F5 key from within Visual Basic to run your program.

<P><LI>Double-click the circle. When your breakpoint is encountered, focus
<P><PRE>    is set to the debugger, and execution stops at your breakpoint. You can
    now step through your program, set watchpoints, and so on.
</PRE>
<P><LI>Press the F5 key to return to the Visual Basic program and stop the
<P><PRE>    debugging.
</PRE><P>
</OL>NOTE: When you exit Visual Basic, you receive an "Assertion Failed" message
from within Windbg. Click OK and Windbg exits. You may get another dialog
box depending on how you have your system configured for exception
handling. Do not click Cancel to debug unless you have the kernel debugger
on your system, otherwise your system will appear to be hung.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Programming Windows: the Microsoft Guide to Writing Applications for
Windows 3," by Charles Petzold, Microsoft Press, 1990.
<P>
"Peter Norton's Windows 3.0 Power Programming Techniques," by Peter
Norton and Paul Yao, Bantam Computer Books, 1990.
<P>
"Microsoft Windows Software Development Kit: Programming Tools,"
version 3.0.
<P>
WINSDK.HLP file shipped with Microsoft Windows 3.0 Software
Development Kit.
<P>
Tools User Guide shipped with the Win32 SDK.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 3.50<BR>
KBCategory: kbenv kbprg kbtshoot<BR>
KBSubcategory: EnvtRun<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 Emulating QuickBasic's SOUND Statement in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71102 ">
<META NAME="KBModify" CONTENT="1997/01/08">
<META NAME="KBCreate" CONTENT="1991/04/06">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The SOUND statement found in Microsoft QuickBasic is not implemented within Microsoft Visual Basic. You can perform sound through a Windows API call that is equivalent to the QuickBasic SOUND statement.  MORE INFORMATION  The QuickBasic version of ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHR,QAYS,QAGI,QBS0,QAB9,QDL9,QBWO,QBWN,QACI,QAY5,QAPN,QALB,QBWQ,QAIF,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 Emulating QuickBasic's SOUND Statement in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71102 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The SOUND statement found in Microsoft QuickBasic is not implemented
within Microsoft Visual Basic. You can perform sound through a Windows
API call that is equivalent to the QuickBasic SOUND statement.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The QuickBasic version of the SOUND statement can be executed by
calling several Windows 3.0 API function calls. Within Windows, you
must open up a VoiceQueue with the OpenSound call routine. Using the
function SetVoiceSound, place all of the values corresponding to the
desired frequencies and durations. Once the VoiceQueue has the desired
frequencies and durations, you start the process by calling
StartSound. After the sounds have been played, you must free up the
VoiceQueue by calling CloseSound. If you plan on placing a large
amount of information into the VoiceQueue, you may need to resize the
VoiceQueue buffer by calling the SetVoiceQueueSize function.
<P>
After executing the StartSound function, you cannot place any more
sound into the VoiceQueue until the VoiceQueue is depleted. Placing
more sound into the queue will overwrite any information that was
previously in the VoiceQueue. If you are going to place sound into the
VoiceQueue after a StartSound statement, you will need to call
WaitSoundState with an argument of one. When WaitSoundState returns
NULL, the VoiceQueue is empty and processing can continue.
<P>
Below is an example of using the Windows API function calls, which will
imitate the QuickBasic SOUND statement:
<P>
In the general section place the following:
<P>
<PRE>Declare Function OpenSound Lib "sound.drv" () As Integer
Declare Function VoiceQueueSize Lib "sound.drv"
            (ByVal nVoice%, ByVal nBytes%) As Integer
Declare Function SetVoiceSound Lib "sound.drv"
            (ByVal nSource%, ByVal Freq&amp;, ByVal nDuration%) As Integer
Declare Function StartSound Lib "sound.drv" () As Integer
Declare Function CloseSound Lib "sound.drv" () As Integer
Declare Function WaitSoundState Lib "sound.drv" (ByVal State%) As Integer

</PRE>NOTE: All Declare statements above each must be placed on one line.
<P>
The SetVoiceSound takes two arguments. The first variable, Freq, is a
two WORD parameter. The HIGH WORD will hold the actual frequency in
hertz. The LOW WORD will hold the fractional frequency. The formula, X
* 2 ^ 16, will shift the variable "X" into the HIGH WORD location. The
second variable, Duration%, is the duration in clock ticks. There are
18.2 tick clicks per second on all Intel computers.
<P>
The following simplistic example shows how you can place several
frequencies and durations into the VoiceQueue before starting the
sound by calling the StartSound function:
<P>
<PRE>Sub Form_Click ()
   Suc% = OpenSound()
   S% = SetVoiceSound(1, 100 * 2 ^ 16, 100)   ' Frequency = 100 hz
   S% = SetVoiceSound(1, 90 * 2 ^ 16, 90)     ' Frequency = 90 hz
   S% = SetVoiceSound(1, 80 * 2 ^ 16, 90)     ' Frequency = 80 hz
   S% = StartSound()
   While (WaitSoundState(1) &lt;&gt; 0): Wend       ' Wait for sound to play.
   Succ% = CloseSound()
End Sub

</PRE>The following is another simple example, which creates a siren sound:

<OL><P><LI>Within the general section, place the following Sound procedure:
<P>
<PRE>Sub Sound (ByVal Freq as Long, ByVal Duration%)
   Freq = Freq * 2 ^ 16                 ' Shift frequency to high byte.
   S% = SetVoiceSound(1, Freq, Duration%)
   S% = StartSound()
   While (WaitSoundState(1) &lt;&gt; 0): Wend
End Sub

</PRE><P><LI>Place the code below into any event procedure. The example below
   uses the Form_Click event procedure. Clicking any position on the
   form will create a police siren.
<P>
<PRE>Sub Form_Click ()
   Suc% = OpenSound()
   For j&amp; = 440 To 1000 Step 5
      Call Sound(j&amp;, j&amp; / 100)
   Next j&amp;
   For j&amp; = 1000 To 440 Step -5
      Call Sound(j&amp;, j&amp; / 100)
   Next j&amp;
   Succ% = CloseSound()
End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
"Programming Windows: the Microsoft Guide to Writing Applications for
Windows 3," Charles Petzold, Microsoft Press, 1990
<P>
"Microsoft Windows Software Development Kit: Reference Volume 1,"
version 3.0
<P>
WINSDK.HLP file shipped with Microsoft Windows 3.0 Software
Development Kit
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Using Reserved Keywords as Types </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129448">
<META NAME="KBModify" CONTENT="1996/12/13">
<META NAME="KBCreate" CONTENT="1995/04/26">
<META NAME="Keywords" CONTENT="kbprg kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  You can use reserved keywords as types when declaring object variables; however, this practice should be avoided. If the environment setting for  Auto Syntax Check  is turned on, you will receive either the error  Expected: New or type name  or  Ex...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBS0,QBJZ,QA4N,QAEY,QBXS,QANF,QAIJ,QBXT,QA5V,QAUJ,QAIB,QDIV,QAUR,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Using Reserved Keywords as Types</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 13, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129448</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
You can use reserved keywords as types when declaring object variables;
however, this practice should be avoided. If the environment setting for
"Auto Syntax Check" is turned on, you will receive either the error
"Expected: New or type name" or "Expected: type name," depending on whether
or not you declare variables with the "New" keyword.
<P>
You can work around the syntax checker by placing square brackets ([])
around the reserved keyword; however, Visual Basic will remove the square
brackets from the code window. Consequently, editing any part of the line
of code that had square brackets causes the code to be invalidated again by
the syntax checker. Furthermore, if you save a project and reload it at a
later time and attempt to execute the program, you will receive the error
"Syntax error" until you add the square brackets back in.
<P>
CAUSE
 
<P>
Because of the way Visual Basic internally handles the name of user defined
types, the square brackets cannot be preserved and are removed.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The solution is to not use reserved keywords as types.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
MORE INFORMATION
 
<P>
<P><h3>Steps to Reproduce the Problem</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the Form1_Click procedure.
<P>
       Private Sub Form1_Click()
<PRE>          ABC
       End Sub

</PRE><P><LI>From the Insert menu, choose Module; Module1 will be created.

<P><LI>Add the following code to the general declarations section of Module1.
<P>
       Public Sub ABC()
<PRE>          Dim MyObject As New [Dim]
          'the brackets will disappear and the above line will appear as
          'Dim MyObject As New Dim
       End Sub

</PRE><P><LI>From the Insert Menu, choose Class Module; Class1 will be created. In
    the Properties menu, set the Name property to Dim.

<P><LI>Add the following code to the general declarations section of Class1
    module.
<P>
       Private MyProperty As Date

<P><LI>Edit the single line of code in Module1; for example, retype the word
    MyObject. The line of code turns red.

<P><LI>Start the program by choosing Start from the Run menu (or press F5) and
    you get "Syntax Error."

<P><LI>Re-enter the brackets on the line of code Dim MyObject as New [Dim].

<P><LI>From the File menu, choose Save Project As and save all of the project
    files.

<P><LI>From the File menu, choose Open Project and reload the project you just
    saved.

<P><LI>Start the program by pressing F5 and you get "Syntax Error."

<P><LI>If you check the single line of code in Module1 you will see that the
    line of code has again turned red.
<P>
</OL>Only reserved keywords are affected by this behavior. You can still use
other unreserved keywords as types when declaring object variables. The
significance of allowing unreserved keywords is that compatibility is
retained across applications such as Excel, which has a Name object (Name
is an unreserved keyword). Therefore, you could specify Name (rather than
Excel.Name) in a Visual Basic project and reference the correct object.
<P>
A list of Visual Basic reserved keywords is shown below.
<P>
<P><h3>List of Reserved Keywords</h3>
 
<P>
<PRE>And                      Function                 PsetOr
Any                      Get                      Private
As                       Global                   Public
ByVal                    GoSub                    ReDim
Call                     GoTo                     Rem
Case                     If                       Resume
Close                    Imp                      Return
Const                    Let                      RSet
Debug                    Like                     Set
Declare                  Local                    Static
Dim                      Loop                     Stop
Do                       Lset                     Sub
Each                     Me                       To
Else                     New                      True
Elseif                   Next                     Type
End                      Not                      Typeof
Endif                    Nothing                  Until
Erase                    Null                     Wend
Eqv                      On                       While
Exit                     Open                     With
False                    Option                   Xor
For
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: APrg APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 13, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

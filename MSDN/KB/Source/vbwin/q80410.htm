

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Get Program Manager Group Names into Combo Box in VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q80410 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/01/28">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  To get a list of group names in the Windows 3.0 Program Manager, you can call the Windows API GetPrivateProfileString function from a Visual Basic program. This article describes a method of using the Windows API GetPrivateProfileString function to...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QDL9,QBWO,QBWN,QABO,QBWQ,QAUJ,QAH4,QAPN,QAY5,QAB9,QBXT,QA5V,QA0B,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Get Program Manager Group Names into Combo Box in VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q80410 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To get a list of group names in the Windows 3.0 Program Manager, you can
call the Windows API GetPrivateProfileString function from a Visual Basic
program. This article describes a method of using the Windows API
GetPrivateProfileString function to get all the group names from Program
Manager and place them into a Visual Basic combo box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows initialization (.INI) files contain information that defines
your Windows environment. Examples of Windows initialization files are
WIN.INI and SYSTEM.INI, which are commonly found in the C:\WINDOWS
subdirectory. Windows and Windows-based applications can use the
information stored in these files to configure themselves to meet your
needs and preferences. For a description of initialization files, read the
WININI.TXT file that comes with Microsoft Windows 3.0.
<P>
An initialization file is composed of at least an application name and
a key name. The contents of Windows initialization files have the
following format:
<P>
<PRE>   [Application name]
   keyname=value

</PRE>The GetPrivateProfile family of API functions are used to retrieve
information from any initialization file that you specify.
<P>
To declare this API function within your program, include the following
Declare statement in the global module or the general Declarations section
of a Visual Basic form. The entire Declare statement must be on one, single
line.
<P>
<PRE>Declare Function GetPrivateProfileString% Lib "Kernel"
  (ByVal lpAppName$, ByVal lpKeyName$, ByVal lpDefault$,
   ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)

</PRE>The formal arguments to these functions are described as follows:
<P>
<PRE>Argument           Description
</PRE> 
<P>
<PRE>lpAppName$         Name of a Windows-based application that appears in the
                   .INI file.

lpKeyName$         Key name that appears in the .INI file.

lpFileName$        Points to a string that names the .INI file. If
                   lpFileName does not contain a path to the file,
                   Windows searches for the file in the Windows
                   directory.

lpDefault$         Specifies the default value for the given
                   key if the key cannot be found in the
                   .INI file.

</PRE>lpReturnedString$  Specifies the buffer that receives the character
<PRE>                   string.

nSize%             Specifies the maximum number of characters
                   (including the last null character) to be copied to
                   the buffer.

</PRE><h3>Code Example</h3>
 
<P>
To get the group names from Program Manager into a combo box, do the
following:

<OL><P><LI>Start Visual Basic or from the File menu, select New Project (ALT,
   F, N) if Visual Basic is already running. Form1 will be created by
   default.

<P><LI>Add a combo box (Combo1) to Form1.

<P><LI>Within the global Declarations section of Form1, add the following
   Windows API function declaration. Note that the Declare statement
   below must appear on a single line.
<P>
<PRE>   Declare Function GetPrivateProfileString% Lib "kernel"
     (ByVal lpAppName$, ByVal lpKeyName$,ByVal
      lpDefault$,ByVal lpReturnString$,ByVal nSize%,
      ByVal lpFileName$)

</PRE><P><LI>Within the Form_Load event procedure for Form1, add the following
   code:
<P>
<PRE>   Sub Form_Load()
      ' This is the name of the group in the PROGMAN.INI file
      lpAppName$ = "Groups"

      ' All group names start with Group: Group1, Group2, etc.
      lpKeyName$ = "Group"

      ' If no group found return value in lpDefault$
      lpDefault$ = ""

      ' Initialize string
      lpReturnString$ = Space$(128)
      Size% = Len(lpReturnString$)

      ' This is the path and name the PROGMAN.INI file.
      lpFileName$ = "c:\windows\progman.ini"

      Valid% = 1
      i% = 0

      While (Valid%)

        i% = i% + 1

        ' The following three lines must be typed on a single line
        Valid% = GetPrivateProfileString(lpAppName$, lpKeyName$
               + LTrim$(Str$(i%)), lpDefault$, lpReturnString$,
               Size%, lpFileName$)

        ' Discard the trailing spaces and null character.
        group$ = Left$(lpReturnString$, Valid%)

        ' check to see if string was returned. Change arguments
        ' passed to the Mid$ statement to change what is displayed in combo
        ' box. By setting number to 15 this strips c:\windows\
        ' and .GRP
        ' The following 2 lines must be on one line
        If Valid% &gt; 0 Then combo1.AddItem Mid(group$, 12,
              Len(group$) - 15)
      Wend

      ' Set text of combo box to first item in list
      combo1.listindex = 0

   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S). The combo box will
   contain the filenames (without the extension) of the group (.GRP
   extension) files in the Windows directory. The group name conforms
   to the MS-DOS filename convention; it is limited to eight
   characters.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgINI<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

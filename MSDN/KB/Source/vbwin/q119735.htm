

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 Creating a Simulated Custom Method in VBX Custom Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119735">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1994/08/22">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic VBX custom control architecture does not provide a mechanism for creating custom methods. Custom properties and custom events are supported, but only a set of eight predefined methods can be used by VBX custom controls.  However, t...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAB5,QAOE,QA7O,QAMN,QAH4,QARW,QA5B,QABB,QBXT,QA5V,QA3P,QAPF,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 Creating a Simulated Custom Method in VBX Custom Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119735</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic VBX custom control architecture does not provide a
mechanism for creating custom methods. Custom properties and custom events
are supported, but only a set of eight predefined methods can be used by
VBX custom controls.
<P>
However, to simulate a custom method, a VBX developer can attribute any
meaning to the standard methods. To override the meaning of a standard
method, you may want to use one of the two techniques described below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Technique One: Implement a Custom Action Property</h3>
 
<P>
The most common way to simulate a custom method is to implement a custom
action property. For example, assume that the control needs a custom line
method. You could set up an action property that draws a line when the
property is set.
<P>
Below is a hypothetical code example:
<P>
<PRE>    ' Draw line from (20,30)-(200,15)
    MyControl.StartX = 20
    MyControl.StartY = 30
    MyControl.EndX = 200
    MyControl.EndY = 150

    MyControl.Action = DRAW_LINE

</PRE>When the custom control receives a message that the Action property is
being set, it can use the information in the StartX, StartY, EndX, and EndY
properties to draw a line.
<P>
This technique is very popular and is used in several of the custom
controls that ship with the Professional Edition of Visual Basic version
3.0.
<P>
Technique Two: Use an Exported Function
 
<P>
As an alternative, you can use an exported function within the VBX itself.
For example, add the following code to the Visual Basic program:
<P>
<PRE>   Declare Function CustomMethod Lib control.vbx (X As Control, ...

</PRE>Add the following to the VBX code:
<P>
<PRE>   int FAR PASCAL _export CustomMethod( HCTL hctl, ...
   {
     //Perform the custom method on the given hctl.
   }

</PRE>This technique is also used in some Professional Edition controls (for
example, the MSComm control). This technique allows you to pass more than
one parameter to your control, but it also requires slightly more code on
the part of the Visual Basic programmer.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode<BR>
KBSubcategory: TlsCDK<BR>
Additional reference words: 3.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create Constants and DLL Declarations in a Type Library </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143258">
<META NAME="KBModify" CONTENT="1996/05/20">
<META NAME="KBCreate" CONTENT="1996/01/29">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  It can be very useful to package constant definitions and DLL declarations in a type Library. Visual Basic 4.0 allows you to access type libraries and their contents. Once you have made a reference to the type library, you can view its information ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKJ,QBHQ,QBS0,QAH4,QBMH,QAP2,QDM0,QAVX,QAVW,QA01,QAYZ,QDIT,QAY5,QBV8,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create Constants and DLL Declarations in a Type Library</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 20, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143258</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It can be very useful to package constant definitions and DLL declarations
in a type Library. Visual Basic 4.0 allows you to access type libraries and
their contents. Once you have made a reference to the type library, you can
view its information in Visual Basic's own Object Browser. Type Libraries
are also superior in that you can also provide help strings along with the
declarations to always let the user know what a definition is for.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To create a type library, you need the command line programs UUID.EXE and
MKTYPLIB.EXE. These programs are provided with Visual C++.
<P>
Suppose we wanted to create a type library with three integer constants, a
string constant, and one Windows API declaration. The following is the
Object Description Language (ODL) code needed to produce the type library.
Read through the ODL and there will be comments explaining what each
section is and why we need them.
<P>
[
<PRE> //The Universal Unique identifier (UUID), needs to be generated by using
 //uuid.exe program.  You then paste the value into the type library.
 uuid(006da100-110f-11cf-83b2-00aa0068851c),

 //The Help String is what comes up in the object browser as the second
 //piece of the library description in the "Libraries/Projects" combo box.
 helpstring("Constants TypeLib"),

 //The Locale Identifier (LCID) , identifies the language the type library
 //applies to.
 lcid(0x9),

 //This is just simply the version number of the type library.
 version(1.0)
 ]

 //This is the name of the type library.  It is what comes up in the object


 //browser as the first piece of the library description in the
 //"Libraries/Projects" combo box.
 library MyLib
 {
   //Here is how we define numeric constants...
   typedef enum tagConst
     {
       mylibConst1,       //Make the constant mylibconst1 equal to 0
       mylibConst2=5,      //Make the constant mylibconst2 equal to 5
       mylibConst3=7      //Make the constant mylibconst3 equal to 7
     }Constants;

   //For string constants we need to define them in a module
   //Modules also need to reference a dll name, in this case we don't need
   //to, so just give it a bogus name.
   [dllname("bogus")]
   module MoreConstants
    {
      //Define a constant mystr and assign it the value StringConstant.
      const LPSTR mystr="StringConstant";
    };

   //Now let's call a function located in the Windows API, specifically
   //User32.dll  Now you see why we need a dllname here, this is where our
   //API function will come from.
   [dllname("user32.dll")]
   module APIDeclare
    {
      //Let's give the API function a descriptive help line, this will be
      //seen in the Object browser.  Then we can declare the function
 //itself.
 //The entry attribute specifies the identifier for the entry
 //point into the dll
    //The in attribute specifies a parameter is a value going into the
 //function.
    //Note the following two lines need to be all on one line..
</PRE>[helpstring("Test API function Declaration"), entry("CloseWindow")] boolean
<P>
CloseWindow([in] long Winhndl);
<PRE>    };
</PRE>}
<P>
To compile this code, copy it into a text file and call it test.odl. Next
run the command line program MkTypLib like this.
<P>
<PRE>   mktyplib /nocpp test.odl

</PRE>Then you will see the message:
<P>
<PRE>   Successfully generated type library 'test.tlb'.

</PRE><h3>To Use the Type Library from Visual Basic 4.0</h3>
 

<OL><P><LI>Start Visual Basic 4.0 with a new project.

<P><LI>From the tools menu, select references. This will bring up the Reference
   dialog box; click the Browse button to search for the Test.tlb file.
   Once you have found the file, click OK.

<P><LI>The Type Library will now be in the list of references, make sure it is
   checked, then exit the references dialog box.

<P><LI>Draw a command button on form1.

<P><LI>Enter the following code:
<P>
<PRE>   Private Sub Command1_Click()

   Dim x As Boolean

   'Let's call the Windows API function CloseWindow without making one
   'declare at all!  Note, the CloseWindow API will close the current
   'window.
   x = CloseWindow(Me.hWnd)

   'Now let's print out the value of our constants in the type library
   'using message boxes.
   MsgBox mylibConst1
   MsgBox mylibConst2
   MsgBox mylibConst3
   MsgBox mystr

   End Sub

</PRE><P><LI>Run the program; you will see form1 minimize and then you will see a
   message box for each constant we defined in our type library and the
   value for each constant.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
OLE 2 Programmers Reference Volume 2
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4all vb4win<BR>
KBCategory: kbprg<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 20, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB "Bad DLL Calling Convention" Means Stack Frame Mismatch </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q85108 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/05/31">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When you call a dynamic link library (DLL) function from Visual Basic for Windows, the  Bad DLL Calling Convention  error is often caused by incorrectly omitting or including the ByVal keyword from the Declare statement or the Call statement. The B...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAGI,QDL9,QBWQ,QBWO,QBWN,QA5F,QAMA,QBFY,QBC7,QAY5,QAUD,QAH4,QAAP,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB "Bad DLL Calling Convention" Means Stack Frame Mismatch</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q85108 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you call a dynamic link library (DLL) function from Visual Basic
for Windows, the "Bad DLL Calling Convention" error is often caused by
incorrectly omitting or including the ByVal keyword from the Declare
statement or the Call statement. The ByVal keyword affects the size of
data placed on the stack. Visual Basic for Windows checks the change
in the position of the stack pointer to detect this error.
<P>
When Visual Basic for Windows generates the run time error "Bad DLL
Calling Convention," the most common cause when calling API functions
is omitting the ByVal keyword from the Declaration of the external
function or from the call itself. It can also occur due to including
the ByVal keyword when the function is expecting a 4 byte pointer to
the parameter instead of the value itself. This changes the size
(number of bytes) of the values placed on the stack, and upon return
from the DLL, Visual Basic for Windows detects the change in the
position of the stack frame and generates the error.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two calling conventions, or inter-language protocols: the
Pascal/Basic/FORTRAN calling convention, and the C calling convention.
Visual Basic for Windows uses the Pascal calling convention, as do the
Microsoft Window API functions and other Microsoft Basic language
products. Under the Pascal convention, it is the responsibility of the
called procedure to adjust or clean the stack. (In addition, parameters
are pushed onto the stack in order from the leftmost parameter to the
rightmost.) Because the DLL function is responsible for adjusting the
stack based on the type and number of parameters it expects, Visual
Basic for Windows checks the position of the stack pointer upon return
from the function. If the called routine has adjusted the stack to an
unexpected position, then Visual Basic for Windows generates a "Bad
DLL Calling Convention" error. Visual Basic for Windows assumes a
stack position discrepancy because the DLL function uses the C calling
convention. With the C calling convention, the calling program is
responsible for adjusting the stack immediately after the called
routine returns control.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
Create a simple DLL using Microsoft Quick C for Windows or any
compiler capable of creating Windows DLLs. The following example is in
C and written for Quick C for Windows:
<P>
<P><h3>STACKING.C</h3>
 
<P>
<PRE>#include &lt;windows.h&gt;
</PRE>long far pascal typecheck (long a, float b, short far *c, char far *buff)
{
short retcode;
a = a * 3;
retcode = MessageBox(NULL, "I am in the DLL", "BOX", MB_OK);
return (a);
}
<P>
<P><h3>STACKING.DEF</h3>
 
<P>
<PRE>LIBRARY      STACKING
EXETYPE     WINDOWS
STUB        'winstub.exe'
STACKSIZE   5120
HEAPSIZE    1024
DATA PRELOAD MOVEABLE SINGLE        ; ADD THESE TWO LINES
CODE PRELOAD MOVEABLE DISCARDABLE   ; TO AVOID WARNINGS.
</PRE>EXPORTS
<PRE>    typecheck   @1
     WEP           @2

</PRE>Add the following code to the general Declarations module in a Visual
Basic for Windows form:
<P>
<PRE>Declare Function typecheck Lib "d\stacking.dll" (ByVal a As Long,
      ByVal b As Single, c As Integer, ByVal s As String) As Long

</PRE>NOTE: The above declaration must be placed on one line.
<P>
In the Form_Click event:
<PRE>Sub Form_Click ()
Dim a As Long   ' Explicitly type the variables.
</PRE>Dim b As Single
Dim c As Integer
Dim s As String
<PRE>a = 3                      ' Initialize the variables.
</PRE>b = 4.5
c = 6
s = "Hello there! We've been waiting for you!"
Print typecheck(a, b, c, s)
<PRE>End Sub

</PRE>Running the program as written above will not generate the error. Now
add the ByVal keyword before the variable named c in the Visual Basic
for Windows Declaration. Run the program. Note that the MessageBox
function pops a box first, and then the error box pops up indicating
that Visual Basic for Windows checks the stack upon return to see if
it has been correctly adjusted. Because the DLL expected a 4-byte
pointer and received a 2-byte value, the stack has not adjusted back
to the initial frame.
<P>
As another test, first remove the ByVal keyword before the variable
<PRE>'c' that you added in the previous test. Declare the parameter 'a As
</PRE>Any' instead of As Long. Change the type of the variable 'a' in the
Form_Click to Integer. Run the program again. Using As Any turns off
type checking by Visual Basic for Windows. Because the program passed
an integer ByVal instead of the long that the DLL expected, the stack
frame is off and the error is generated.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Microsoft BASIC 7.0: Programmer's Guide" for versions 7.0 and 7.1,
pages 423-426
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Register Your Custom ActiveX DLL from a Client </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q173407">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1997/09/03">
<META NAME="Keywords" CONTENT="vb5all kberrmsg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  If a compiled client application attempts to reference an object contained in an ActiveX DLL that is not currently or correctly registered on the machine, the following run-time error is generated:      ActiveX component can't create object or retu...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAHV,QAPN,QAAP,QAB4,QA5E,QDNN,QAY5,QARL,QAB9,QA5F,QAMA,QBV8,QAO4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Register Your Custom ActiveX DLL from a Client</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q173407</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
If a compiled client application attempts to reference an object contained
in an ActiveX DLL that is not currently or correctly registered on the
machine, the following run-time error is generated:
<P>
<PRE>   "ActiveX component can't create object or return reference to this
   object (Error 429)"

</PRE>This error will not occur when testing in the Visual Basic IDE. In the
development environment Visual Basic will return a compile error:
<P>
<PRE>   "User-defined type not defined"

 -or-

   "Can't find project or library"

</PRE>This article details a method that can be used to ensure that your client
application correctly traps for and resolves error 429 at run-time if the
ActiveX DLL is present on the machine but not correctly registered.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Below are steps for creating both an ActiveX DLL server and a client
application. The client application is designed to trap for error 429. If
the error occurs, the ActiveX server will be registered through code.
<P>
In this example, MyServerObject.DLL is the ActiveX server. MyClient.Exe is
the client application.
<P>
<P><h3>Step-by-Step Instructions for Creating MyServerObject.DLL</h3>
 

<OL><P><LI>In Visual Basic 5.0, create a new ActiveX DLL project. Class1 is created
   by default.

<P><LI>From the Project menu, choose Project1 Properties and change the Project
   Name property to MyServerObject.

<P><LI>Set the following properties for Class1:
<P>
<PRE>      Property            Value
      ---------------------------------
      (Name)              MyObject
      Instancing          5 - MultiUse

</PRE><P><LI>Add the following code to the General Declarations section of MyObject
   class:
<P>
<P><PRE>      Public MyProperty As String
</PRE>
<P><LI>Save the Project as MyServerObject.VBP and the MyObject class as
   MyObject.CLS.

<P><LI>Build the MyServerObject.DLL.
<P>
</OL><h3>Step-by-Step Instructions for Creating MyClient.Exe</h3>
 

<OL><P><LI>In Visual Basic 5.0, start a new standard EXE. Form1 is created by
   default.

<P><LI>From the Project menu, choose Project1 Properties. Change the Project
   Name to MyClient.

<P><LI>Select the Project\References menu item to bring up the References
   dialog box. Go down the Available References list and check
   MyServerObject.

<P><LI>Add a new module (Module1) to the project.

<P><LI>In Module1, add the following code to the General Declarations section:
<P>
<P><PRE>      Public Declare Function RegMyServerObject Lib _
      "&lt;Path&gt;\MyServerObject.DLL" _
      Alias "DllRegisterServer" () As Long
</PRE><P>
   where &lt;Path&gt; is the full path to MyServerObject.Dll. The
   "DllRegisterServer" portion of the above declaration is case-sensitive.
<P>
</OL>NOTE: For more information on this API function see Programmatic
Registration at the end of this article.

<OL><P><LI>Add a CommandButton (Command1) to Form1.

<P><LI>Add the following code to the Load event procedure of Form1:
<P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         On Error GoTo Err_DLL_Not_Registered
         Dim RegMyDLLAttempted As Boolean
         Dim MyObj As New MyServerObject.MyObject

         'The following statement will fail at run-time
         'if MyServerObject is not registered.
         MyObj.MyProperty = "Hello"
         Set MyObj = Nothing
         Exit Sub

         Err_DLL_Not_Registered:
         ' Check to see if error 429 occurs
         If Err.Number = 429 Then
            MsgBox "Attempting To Register MyServerObject"

            'RegMyDLLAttempted is used to determine whether an
            'attempt to register the ActiveX DLL has already been
            'attempted. This helps to avoid getting stuck in a loop if
            'the ActiveX DLL cannot be registered for some reason.
            If RegMyDLLAttempted Then
               MsgBox "Unable to Register MyServerObject"
               Resume Next
            Else
               RegMyServerObject   'Declared in Module1
               RegMyDLLAttempted = True
               MsgBox "Registration of MyServerObject attempted."
               Resume
            End If
         Else
</PRE></OL>MsgBox "An Error Occurred"
<PRE>         End If
      End Sub

</PRE><P><LI>Add the following code to the Click event procedure of Command1:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim MyObj As New MyObject
         MyObj.MyProperty = "Hello"
         MsgBox MyObj.MyProperty
      End Sub

</PRE><P><LI>Save the project and make the MyClient.Exe executable file.

<P><LI>Exit Visual Basic. Test MyClient.Exe by double-clicking on the file in
<P><PRE>    Windows Explorer.
</PRE>
<P><LI>For testing purposes, unregister MyServerObject.Dll using RegSvr32.Exe.
<P><PRE>    From the Start menu, choose Run, and in the Run dialog, type the
    following command:
</PRE><P>
<P><PRE>      RegSvr32.Exe /U &lt;Path&gt;\MyServerObject.Dll
</PRE><P>
<P><PRE>    where &lt;Path&gt; is the full path to MyServerObject.Dll.
</PRE>
<P><LI>Run the MyClient.Exe program again. This time you should be notified
<P><PRE>    that registration of MyServerObject.dll is being attempted because it
    is not already registered.
</PRE><P>
</OL>As demonstrated with the example above, when working with your own client
application there are two basic tasks that must be accomplished. First, you
need to publicly declare the DllRegisterServer function:
<P>
<PRE>      Public Declare Function RegMyServerObject Lib _
      "&lt;Path&gt;\MyServerObject.DLL" _
      Alias "DllRegisterServer" () As Long

</PRE></OL>Second, you need to trap for error 429 in the error handling routine of the
Form1 Load event and attempt to recover from the error by calling the
function declaration for DllRegisterServer.
<P>
<P><h3>Programmatic Registration</h3>
 
<P>
All ActiveX DLLs created with Visual Basic 5.0 export the DllRegisterServer
and DllUnregisterServer functions. These functions can be declared in a
Visual Basic client and called to self-register or unregister an ActiveX
DLL. For example, the following declaration could be used to declare a
function which would register the custom ActiveX DLL MyServerObject.DLL:
<P>
<PRE>   Public Declare Function RegMyServerObject Lib _
   "MyServerObject.DLL" _
   Alias "DllRegisterServer" () As Long

</PRE>In code, the "RegMyServerObject" could be called to register the DLL:
<P>
<PRE>   Call RegMyServerObject
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: register registry unregister unregistered<BR>
Keywords          : vb5all kberrmsg kbhowto<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

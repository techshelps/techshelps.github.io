

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Implement a Real-Time Application Using OLE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137097">
<META NAME="KBModify" CONTENT="1995/10/30">
<META NAME="KBCreate" CONTENT="1995/09/20">
<META NAME="Keywords" CONTENT="kbole">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Real-time applications are used to solve a wide range of business problems. For example, an application may have a connection to a data source where certain data elements are continuously changing. The application needs to be aware of these changes...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QA9Q,QARL,QAH6,QAW6,QAH7,QAD7,QAJH,QAGI,QBSO,QAR2,QAIF,QAPF,QAB5,QA8W V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Implement a Real-Time Application Using OLE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137097</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Real-time applications are used to solve a wide range of business problems.
For example, an application may have a connection to a data source where
certain data elements are continuously changing. The application needs to
be aware of these changes and needs to perform some actions accordingly.
One solution would be for the application to continuously poll the data
source. This would constitute a great performance hit to the application
and will virtually suspend other application functions.
<P>
A better alternative would be to have a backend poll the data source
independently and notify the application when changes take place. Such a
model can be easily implemented using OLE automation. This article gives a
broad description of how to do it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The backend model is based on asynchronous notifications. The way to do
this with OLE is to have the OLE client application pass an object
reference to the OLE server. The server then calls a method of that object
when it's time to notify the client. The server runs in the background
doing periodic tests to see if the threshold conditions for notification
are met.
<P>
Here's an example. The OLE client application exposes a Receiver object
with a Notify method. The parameters of the Notify method can be variants,
so that arrays of data can be passed efficiently. The OLE server
application exposes a Notification object with a Register method. The
parameters of the Register method specify the condition to check for, the
frequency, and a reference to an instance of the OLE client's Receiver
class.
<P>
When the client application is run, it creates an instance of its Receiver
class. It then requests an instance of the Notification object from the
server. The client calls the Register method of the Notification object,
passing condition, frequency, and a reference to the Receiver object. The
Register method returns immediately, and the client goes about its
business.
<P>
The OLE server has some mechanism for executing periodic events, such as a
timer on a hidden form. Whenever the timer event fires, the first thing it
checks is to see if any new registrations have been made. These are added
to its notification list. The timer event then performs whatever database
operations are necessary to determine whether any client's notification
conditions have been met.
<P>
If a client's notification condition is met, the OLE server calls the
Notify method of the client's Receiver object, passing the data as one of
the parameters.
<P>
This scenario becomes even more interesting when you add Remote Automation
to the picture. If the workstations are running a Win32 operating system
(Windows 95 or Windows NT), they can pass their Receiver object reference
across the network to an OLE server running on a network computer. (This
requires the Remote Automation Manager on the workstation.) The network
computer can be dedicated to servicing notifications for a large number of
workstations.
<P>
Designed carefully with a lot of RAM at the server, you could even locate
the OLE server on the same computer as the SQL Server database, so that the
database operations would be local.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information, please see the following product documentation:

<UL><LI>Creating OLE Servers.

<LI>Building Client/Server Applications.

<LI>The CallBack sample application in \Samples\Remauto\Callback, Enterprise
   Edition only.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbole<BR>
KBSubcategory: IAPOLE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

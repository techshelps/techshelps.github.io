

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine If a String Is UNICODE or ANSI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138142">
<META NAME="KBModify" CONTENT="1995/10/30">
<META NAME="KBCreate" CONTENT="1995/10/12">
<META NAME="Keywords" CONTENT="kbole kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  ANSI strings use one byte per character if they don't contain any DBCS characters. UNICODE strings use two bytes per character.  There is a built-in OLE API function that allows you determine whether a string is UNICODE or ANSI. However, you can al...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QATX,QAUD,QATZ,QATY,QAH4,QAY5,QALG,QBV8,QAB9,QA5F,QAMA,QAJQ,QAPF,QADK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine If a String Is UNICODE or ANSI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138142</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
ANSI strings use one byte per character if they don't contain any DBCS
characters. UNICODE strings use two bytes per character.
<P>
There is a built-in OLE API function that allows you determine whether a
string is UNICODE or ANSI. However, you can also use the Len() and LenB()
Visual Basic functions to compare the length of the string in characters
and in bytes, as demonstrated by the step-by-step example in this article.
<P>
NOTE: The code sample in this article will work only for those cases where
you are not likely to encounter DBCS characters in ANSI strings.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Len function returns the length of the string in characters, and the
LenB function returns the length of the string in bytes. While this is the
same for an ANSI string, LenB will return a value twice that returned by
Len for a UNICODE string. This fact can be used to determine if a string is
UNICODE or ANSI.
<P>
NOTE: When a string has been brought into the Visual Basic environment, it
will be DBCS if it is the 16-bit version of the product, and UNICODE if it
is the 32-bit version of the product. If the string is DBCS, then the
string contains characters that are either one or two bytes per character,
depending on the contents of the string and the language support in the
Operating System. If you do happen to be able to get a 32-bit string that
contains the bit patterns for ANSI/DBCS characters, it will be interpreted
as UNICODE and produce invalid results when manipulated or used because the
UNICODE characters are definitely not what you want.
<P>
<P><h3>Step-By-Step Example</h3>
 

<OL><P><LI>Start a new project in 32-bit Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
   Private Function IsUnicode(s As String) As Boolean
<P><PRE>      If Len(s) = LenB(s) Then
<PRE></PRE>         IsUnicode = False
      Else
         IsUnicode = True
      End If
   End Function

</PRE><P><LI>Add the following code to the Form_Click event of Form1:
<P>
<PRE>   Private Sub Form_Click()
      Dim s As String
      s = "hello"
      Debug.Print IsUnicode(s)
   End Sub

</PRE><P><LI>Press F5 to run the program. Click the form. The IsUnicode function will
   return True in the debug window. This is because 32-bit Visual Basic
   always stores UNICODE strings internally. If the same code is run under
   16-bit Visual Basic, the IsUnicode Function will return False because
   16-bit Visual Basic stores ANSI strings internally.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbole kbhowto<BR>
KBSubcategory: IAPOLE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

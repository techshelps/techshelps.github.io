

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Find Next Available Drive Letter (for Network Connect) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141020">
<META NAME="KBModify" CONTENT="1996/03/08">
<META NAME="KBCreate" CONTENT="1995/12/10">
<META NAME="Keywords" CONTENT="kbnetwork kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic program in this article shows by example how to find the next available (unused) drive letter in Windows. This is useful when making network connections to a new drive letter.  MORE INFORMATION  Step-by-Step Example  The Freedrive ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAC9,QAUD,QAOX,QA59,QAY5,QDL9,QBWQ,QBWO,QBWN,QA4Q,QA4B,QAIJ,QAH4,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Find Next Available Drive Letter (for Network Connect)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 8, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141020</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic program in this article shows by example how to find the
next available (unused) drive letter in Windows. This is useful when making
network connections to a new drive letter.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
The Freedrive function defined below returns the next drive letter
available in Windows, followed by a colon (:).

<OL><P><LI>Start Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
</OL>#If Win32 Then
<PRE>  Private Declare Function GetDriveType Lib "kernel32" Alias
</PRE></OL>"GetDriveTypeA" (ByVal nDrive As String) As Long
#Else
<PRE>  Private Declare Function GetDriveType Lib "kernel" (ByVal nDrive As
</PRE>Integer) As Integer
#End If
<P>
Function Freedrive()
<PRE>      Dim DriveNum As Integer, FirstFreeDrive As String
      Dim FirstDrive As Integer
      DriveNum = -1
      Do
         DriveNum = DriveNum + 1   ' start at drive zero.
         #If Win32 Then
           NextDrive$ = Chr$(DriveNum + 65) + ":\"
           FirstDrive% = GetDriveType(NextDrive$)
         #Else
           FirstDrive% = GetDriveType(DriveNum)
         #End If
         ' GetDriveType returns zero if it cannot determine drive
         ' type or returns 1 if the specified drive does not exist.
      #If Win32 Then
        Loop Until FirstDrive% = 1
      #Else
        Loop Until FirstDrive% = 0
      #End If
      ' DriveNum of 0 means Drive A, 1=B, 2=C, 3=D, 4=E, 5=F, and so on:
      FirstFreeDrive = Chr$(DriveNum + 65) + ":"
      Freedrive = FirstFreeDrive
</PRE>End Function

<OL><P><LI>In the Form_click event, add the following statements:
<P>
<PRE>   Private Sub Form_Click ()

      Cls
      Print "The next available (unused) drive letter is: "; Freedrive()

      ' More handy tips: The "App" object below is found in VB 2.0
      ' and 3.0 (but not 1.0).
      Print "The title for the EXE in Windows Task Manager: "; app.Title
      Print "The name of this EXE, or project in VB, is: "; app.EXEName
      Print "The path to this application is: "; app.Path

   End Sub

</PRE><P><LI>Run the program, and click the form.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 4.00 vb4win vb4all<BR>
KBCategory: kbnetwork kbprg kbcode<BR>
KBSubcategory: APrgNet<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 8, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

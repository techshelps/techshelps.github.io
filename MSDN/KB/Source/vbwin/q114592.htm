

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Construct a Self-Join Query in Visual Basic 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114592">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/05/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A self-join is a special form of query involving a relationship that a table has with itself. Because the field names and table name in a self- join are identical, you must specify them in an unambiguous way in the body of the query. In order to co...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGU,QAML,QAUJ,QABM,QBS0,QBMW,QARM,QAH5,QAY2,QDNC,QDNA,QA9N,QA4H,QASB,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Construct a Self-Join Query in Visual Basic 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114592</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A self-join is a special form of query involving a relationship that a
table has with itself. Because the field names and table name in a self-
join are identical, you must specify them in an unambiguous way in the body
of the query. In order to construct the query, the table name must be
aliased, and the fields or columns may be aliased as well.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A self-join is a query that requires two copies of a single table for its
result. The NWIND.MDB sample database supplied with Microsoft Access
version 2.0 is used as an example.
<P>
The task of the example is to find the manager's name for all employees who
have a manager. You need to use a self-join on the Employees table because
even managers are employees and are listed in the same table (Employees).
<P>
Here's the logic of the self-join query:
<P>
<PRE>   Examine all possible pairs of rows in Employees -- one from the first
   copy and one from the second copy. Then retrieve the names of both
   the employee and his or her manager if and only if the value in the
   Reports To field in one copy matches that of the Employee ID field in
   the second copy.

</PRE>To implement this logic, you need to reference two rows from the Employees
table at the same time. To distinguish between the two references, you need
to introduce arbitrary range variables, such as Employees_1 and
Employees_2, over the Employees table. At any particular point, Employees_1
represents some row in the first copy of Employees, and Employees_2
represents some row from the second copy.
<P>
The query, in the Microsoft Access dialect of SQL is:
<P>
SELECT  DISTINCTROW Employees_1.[Employee ID],
<PRE>   Employees_1.[First Name], Employees_1.[Last Name],
   Employees_2.[First Name] AS [Manager FirstName],
   Employees_2.[Last Name] AS [Manager LastName]
   FROM Employees AS Employees_1, Employees AS Employees_2,
   Employees_1 INNER JOIN Employees_2 ON
   Employees_1.[Reports To] = Employees_2.[Employee ID];

</PRE>Or you could have simply aliased only the second or duplicate copy of the
Employees table:
<P>
SELECT  DISTINCTROW Employees.[Employee ID],
<PRE>   Employees.[First Name], Employees.[Last Name],
   Employees_Dup.[First Name] AS [Manager FirstName],
   Employees_Dup.[Last Name] AS [Manager LastName]
   FROM Employees, Employees AS Employees_Dup,
   Employees INNER JOIN Employees_Dup ON
   Employees.[Reports To] = Employees_Dup.[Employee ID];

</PRE>Also, you don't really need to alias the columns or fields returned from
the second copy of the table to disambiguate those fields from those in the
first copy, because the use of the As &lt;aliasname&gt; on the table name does
that for you. However, to make the results more meaningful, it is helpful
to alias the field or column names as well.
<P>
In other words, the following will also work:
<P>
SELECT  DISTINCTROW Employees.[Employee ID],
<PRE>   Employees.[First Name], Employees.[Last Name],
   Employees_Dup.[First Name],
   Employees_Dup.[Last Name]
   FROM Employees, Employees AS Employees_Dup,
   Employees INNER JOIN Employees_Dup ON
   Employees.[Reports To] = Employees_Dup.[Employee ID];

</PRE><h3>Visual Basic Code Example</h3>
 
<P>
The following Visual Basic code demonstrates this:
<P>
<PRE>Sub Command1_Click ()
   Dim db As database
   Dim ds As dynaset
   Dim sql As String

   sql = sql &amp; "SELECT  DISTINCTROW Employees_1.[Employee ID],"
   sql = sql &amp; "Employees_1.[First Name], Employees_1.[Last Name],"
   sql = sql &amp; "Employees_2.[First Name] AS [Manager FirstName],"
   sql = sql &amp; "Employees_2.[Last Name] AS [Manager LastName]"
   sql = sql &amp; "FROM Employees AS Employees_1,Employees AS Employees_2,"
   sql = sql &amp; "Employees_1 INNER JOIN Employees_2 ON "
   sql = sql &amp; "Employees_1.[Reports To] = Employees_2.[Employee ID]"

   Set db = OpenDatabase("c:\access\nwind.mdb")
   Set ds = db.CreateDynaset(sql)

   Do Until ds.EOF
      ' Enter the following three lines of code as one, single line:
      Print "Employee "; ds![Employee ID], ds![First Name],
         ds![Last Name], "Managed by  "; ds![Manager FirstName],
         ds![Manager LastName]
      ds.MoveNext
   Loop

   ds.Close
   db.Close

End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
This reference is from the BIBLIO.MDB database: "Using SQL," 1990 Groff,
James R., Osborne McGraw-Hill, Berkeley, CA
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

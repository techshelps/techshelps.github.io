

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: TopMost Window Does Not Stay on Top in Design Environment </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150233">
<META NAME="KBModify" CONTENT="1996/11/19">
<META NAME="KBCreate" CONTENT="1996/04/23">
<META NAME="Keywords" CONTENT="kbprg kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The SetWindowPos API function can be used to set a window so that it stays on the top of all other windows. However, the window will not stay on top in the Visual Basic design environment.  STATUS ======  Microsoft has confirmed this to be an issue...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAHT,QAYZ,QA5F,QAMA,QDL9,QDIZ,QBWQ,QBWO,QBWN,QA5X,QAX1,QAVI,QAGQ,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: TopMost Window Does Not Stay on Top in Design Environment</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 19, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150233</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic for Windows, 16-bit and 32-bit, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The SetWindowPos API function can be used to set a window so that it stays
on the top of all other windows. However, the window will not stay on top
in the Visual Basic design environment.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be an issue in the Microsoft products
listed at the beginning of this article. Microsoft is researching this
problem and will post new information here in the Microsoft Knowledge Base
as it becomes available.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
There is no workaround to keep a window TopMost while in the Design
Environment. However, when the application is compiled to an EXE, invoking
the SetWindowPos function to keep a Visual Basic form TopMost will
correctly work.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the Design environment, making a form TopMost causes it to stay on top
of other Visual Basic Design Environment windows, such as the Properties
window and Debug window until another application is switched to. Once
another application has been made active, the form in Visual Basic loses
its TopMost attribute, and when the focus returns to Visual Basic, it even
stays behind the other windows within Visual Basic.
<P>
To see how the SetWindowPos API function can be applied to keep a window
TopMost, please see the CallDLLs sample located in the vb\samples\calldlls
directory. The declaration for the function is in the Declares.bas file,
and the call to SetWindowPos is located in the mnuSysInfo_Click event
contained in the frmMenus form.
<P>
<P><h3>Steps To Reproduce</h3>
 

<OL><P><LI>In Visual Basic, open the vb\samples\CallDLLs sample.

<P><LI>Press F5 to run the project. Click on the picture of the computer with
   the right mouse button, and then select the "Always on Top" menu item
   from the pop-up menu. Now notice that other Visual Basic windows cannot
   be dragged over the CallDLLs form. Now switch to another application by
   pressing ALT+TAB. Notice that the other application can cover up the
   CallDLLs window. Now switch back to Visual Basic, and notice that now
   the other Visual Basic Design environment windows can cover up the
   CallDLLs form.
<P>
</OL>To correct this behavior, the sample can be compiled as an EXE, and then
after selecting the Always on Top menu item, the window will correctly stay
on top of other windows.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: PrgOther
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 19, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Copy Current Database Record into a Record Variable </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97413 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/04/11">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Although Visual Basic version 3.0 for Windows does not provide a direct way to assign the current database record to a record variable, this article gives you a generic routine. Using this generic routine, you can assign the current record, contain...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QBS0,QAYL,QA7O,QAN0,QATX,QAZV,QA7N,QDMH,QA9N,QASB,QAH4,QBWS,QBJZ,QAGX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Copy Current Database Record into a Record Variable</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97413 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although Visual Basic version 3.0 for Windows does not provide a
direct way to assign the current database record to a record variable,
this article gives you a generic routine. Using this generic routine,
you can assign the current record, containing any number of fields,
to a record variable that represents the structure of the current
database record.
<P>
This generic routine is useful if you have existing database code that
uses record variables to represent database records. For example, using
this routine, you can use the Visual Basic data access features without
making major changes to how you read and handle records. After you
assign the contents of the current record to a record variable of the
appropriate type, your code can manipulate the record as before,
independent of the underlying database.
<P>
The routine demonstrated below requires Windows version 3.1 or later
because it uses the Windows API function hmemcpy(), which was
introduced in Windows version 3.1. An error will result on the call to
hmemcpy() if you attempt to run the sample using Windows version 3.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Follow these general steps to assign the current database record to a
record variable:

<OL><P><LI>Define a Type ... End Type structure that represents the record
   structure of the database table that you are going to use. This
   requires that the number and data types of the fields in the table
   be known in advance.
<P>
   To determine the structure of the table quickly, run the Data Manager
   tool provided with Visual Basic. From the Data Manager File menu,
   choose Open to open the database. Select a Table from the list
   displayed in the Database window, and choose the Design button to
   see the table's field names, data types, and field lengths.

<P><LI>Dimension a variable of the user-defined type structure created in
   step 1.

<P><LI>Create a generic routine using the Windows API hmemcpy() function to
   copy each field of the current database record into a string. To do
   this, step through all of the fields in the Fields collection and
   accumulate the fields together into a single string.

<P><LI>Use the hmemcpy() function to copy the contents of the string created
   in step 3 to the record variable created in step 2.
<P>
</OL>Perform the following steps to create an example application that
demonstrates how to copy the current database record into a user-defined
structure. This example shows you how to use the Data control to copy
a record from the BIBLIO.MDB sample database provided with Visual Basic.

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Add two text boxes (Text1 and Text2) to Form1

<P><LI>Add a data control (Data1) to Form1

<P><LI>Add a command button (Command1) to Form1.

<P><LI>Using the following table as a guide, set the properties of the controls
   you added in steps 2, 3 and 4.
<P>
<PRE>   Control Name   Property       New Value    Comment
   ------------------------------------------------------------------

   Command1       Caption        "Copy"
   Data1          DatabaseName   BIBLIO.MDB   You will also need to
                                              provide the full path to
                                              this file, which should
                                              be in your Visual Basic
                                              directory C:\VB
   Data1          RecordSource   Authors
   Text1          DataSource     Data1
   Text1          DataField      AU_ID
   Text2          DataSource     Data1
   Text2          DataField      Author

</PRE><P><LI>From the File menu, choose New Module (ALT, F, M). Module1 is created.

<P><LI>Add the following code to the general declarations section of Module1:
<P>
   Type typeAuthor
<P><PRE>      AU_ID As Long
      Author As String * 255
</PRE>   End Type
<PRE>   ' Enter the following Declare on a single line:
   Declare Sub hmemcpy Lib "KERNEL" (dest As Any, src As Any, ByVal
                                     Size As Long)

</PRE><P><LI>Add the following code to Module1:
<P>
   Function GetCurrRec (ds As Dynaset) As String
<P>
<P><PRE>      Dim i As Integer
      Static FieldStr As String
      Static recStr As String
</PRE><P>
<P><PRE>      recStr = ""
</PRE><P>
<P><PRE>      'Step through each field in the current record and accumulate
      'the contents of each field into a string
      For i = 0 To ds.Fields.Count - 1
</PRE><P>
<PRE>         'Pad out to the right size
         FieldStr = Space(ds.Fields(i).Size)

         Select Case ds.Fields(i).Type

            'Copy the binary representation of the field to a
            'string (FieldStr)

            Case 1, 2       'Bytes
               hmemcpy ByVal FieldStr, CInt(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 3          'Integers
               hmemcpy ByVal FieldStr, CInt(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 4          'Long integers
               hmemcpy ByVal FieldStr, CLng(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 5          'Currency
               hmemcpy ByVal FieldStr, CCur(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 6          'Singles
               hmemcpy ByVal FieldStr, CSng(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 7, 8       'Doubles
               hmemcpy ByVal FieldStr, CDbl(ds.Fields(i).Value),
                                                     ds.Fields(i).Size

            Case 9, 10      'String types
               hmemcpy ByVal FieldStr, ByVal CStr(ds.Fields(i).Value),
                                                Len(ds.Fields(i).Value)

            Case 11, 12     'Memo and long binary
              FieldStr = ds.Fields(i).GetChunk(0, ds.Fields(i).FieldSize())

         End Select

         'Accumulate the field string into a record string
         recStr = recStr &amp; FieldStr

      Next

      'Return the accumulated string containing the contents of all
      'fields in the current record
      GetCurrRec = recStr

   End Function

</PRE><P><LI>Add the following code to the Command1_Click event in Form1:
<P>
<PRE>   Sub Command1_Click ()

      Dim recAuthor As typeAuthor
      Dim strCurrRec As String
      Dim strVerify As String

      'Copy the current record in the Authors table to a string
      strCurrRec = GetCurrRec(Data1.RecordSet)

      'Copy the string to the record variable that has a structure
      'matching the struture of the current record in the Authors table
      hmemcpy recAuthor, ByVal strCurrRec, Len(recAuthor)

      'Verify that the correct results were returned by displaying
      'the contents of the record variable
      strVerify = "AU_ID: " &amp; Format$(recAuthor.AU_ID) &amp; Chr$(13)
      strVerify = strVerify &amp; "Author: " &amp; Trim(recAuthor.Author)
      MsgBox strVerify

   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S), or press the F5 key
<P><PRE>    to run the program.
</PRE><P>
</OL>Click the scroll bar of the Data control to select an author. The Text1 box
displays the author ID, and the Text2 box displays the author's name. Click
the "Copy" button to copy the current author's information to the record
variable and see contents of the record variable displayed in a MsgBox.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataAcc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

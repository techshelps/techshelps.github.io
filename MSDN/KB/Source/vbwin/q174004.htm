

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Cannot Change Variant Array in Class Module </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174004">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1997/09/17">
<META NAME="Keywords" CONTENT="VB4ALL VB4WIN vb5all">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  In Visual Basic 4.0, an array stored in a variant class variable could be changed from code external to the class. In Visual Basic 5.0, changing values in the array will have no effect.  CAUSE =====  The behavior of Visual Basic 4.0 was incorrect. ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAPN,QA5F,QAMA,QAR4,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Cannot Change Variant Array in Class Module</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174004</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Visual Basic 4.0, an array stored in a variant class variable could be
changed from code external to the class. In Visual Basic 5.0, changing
values in the array will have no effect.
<P>
<P><h2>CAUSE</h2>
 
<P>
The behavior of Visual Basic 4.0 was incorrect. This has been corrected in
Visual Basic 5.0. In Visual Basic 4.0, storing an array in a variant
variable was commonly used as a workaround for the fact that arrays cannot
be declared as Public members of a class. However, this workaround is
neither necessary nor recommended. If the approach outlined in the next
section had been used, this problem would not have occurred regardless of
the version of Visual Basic in use.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Arrays cannot be declared as Public members of a class. The recommended
method of implementing an array as a member of a class is to declare the
array as Private, and create Property Let and Get methods to manage the
array. For example:
<P>
<PRE>   Private myarray() as String

   Public Property Get marray(ByVal subscript As Integer) As String
   marray = myarray(subscript)
   End Property

   Public Property Let marray(ByVal subscript As Integer, _
      ByVal vNewValue As String)
   On Error GoTo err_Array_Not_Initialized
   If subscript &gt; UBound(myarray) Then
      ReDim Preserve myarray(subscript)
   End If
   myarray(subscript) = vNewValue
   Exit Property

   err_Array_Not_Initialized:
   If Err.Number = 9 Then
      ReDim myarray(1)
      Resume
   End If
   End Property

</PRE><h2>STATUS</h2>
 
<P>
This problem has been corrected in Visual Basic 5.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft has acknowledged that this change in behavior may be an issue for
some developers porting Visual Basic 4.0 code to Visual Basic 5.0. Code
that relies on the functionality shown below, and acceptable in Visual
Basic 4.0, will need to be modified.
<P>
<P><h3>Steps to Reproduce Behavior That Was Previously Acceptable</h3>
 

<OL><P><LI>Create a new "Standard EXE" project in Visual Basic 5.0.

<P><LI>Add a Class Module to the project.

<P><LI>Add the following code to Class1:
<P>
<P><PRE>      Public aVariant As Variant
</PRE><P>
<P><PRE>      Private Sub Class_Initialize()
      Dim anArray(2)
<PRE></PRE>         anArray(1) = "Hello"
         anArray(2) = "World"
         aVariant = anArray
      End Sub

</PRE><P><LI>Add the following code to the Click event of Form1:
<P>
<P><PRE>      Private Sub Form_Click()
      Dim obj As New Class1
<PRE></PRE>         With obj
            .aVariant(1) = "Goodbye"
            .aVariant(2) = "Everyone"
            Debug.Print .aVariant(1)
            Debug.Print .aVariant(2)
         End With
         Set obj = Nothing
      End Sub

</PRE><P><LI>Run the project and click on Form1. Note that the values displayed in
   the immediate window are "Hello" and "World", which are the original
   values assigned to the array during the class initialization event.

<P><LI>If desired, repeat steps 1 through 5 in Visual Basic 4.0. Note that the
   values displayed in the immediate window are "Goodbye" and "Everyone."
</OL> 
<PRE>Keywords          : VB4ALL VB4WIN vb5all
Version           : WINDOWS:4.0,5.0
Platform          : WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

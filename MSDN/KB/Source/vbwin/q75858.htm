

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Simulate ON KEY &amp; Key Trapping by Using KeyDown Event </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q75858 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1991/09/05">
<META NAME="Keywords" CONTENT="kbenv kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Although there is no ON KEY GOSUB statement in Visual Basic, you can achieve an effect identical to ON KEY event handling. Visual Basic forms and controls that are able to get focus have a KeyDown event procedure that can simulate the effects of th...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAMN,QAPN,QAGX,QAO4,QAH4,QA5F,QAMA,QAB9,QACI,QAGI,QABG,QBT6,QBV4,QAQT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Simulate ON KEY &amp; Key Trapping by Using KeyDown Event</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q75858 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although there is no ON KEY GOSUB statement in Visual Basic, you can
achieve an effect identical to ON KEY event handling. Visual Basic forms
and controls that are able to get focus have a KeyDown event procedure that
can simulate the effects of the ON KEY statements in Basic interpreters and
compilers for MS-DOS. In fact, the KeyDown event procedure is more powerful
and flexible than the ON KEY statement.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Pressing a key while a Visual Basic form or control has the focus executes
that form or control KeyDown event procedure. Within the KeyDown event
procedure, you can call a global procedure and pass the actual key states
to the global procedure. You can use this to create an effect in Visual
Basic for Windows that is identical to the effect caused by trapping ON KEY
events in Basic interpreters and compilers for MS-DOS. In Visual Basic, you
can also pass the name of the control or form where the KeyDown event
occurred, so the global procedure will know which control or form
called it.
<P>
Here's a small example:

<OL><P><LI>In the Visual Basic Project window, double-click a form or module
   (GLOBAL.BAS in Visual Basic version 1.0) to bring up the code window.
   Move to the general-declaration section of the form or module. Then
   from the Visual Basic Code menu, choose Load text, and load the
   CONSTANTS.TXT file that came with Visual Basic.
<P>
   Note: in Visual Basic version 1.0, if you already have text in the
   GLOBAL.BAS file, create a new module, add the CONSTANTS.TXT file to the
   new module, and then cut and paste the text into the GLOBAL.BAS file.

<P><LI>Add two text boxes (Text1 and Text2) to a form.

<P><LI>In the Text1_KeyDown event procedure, add the following code:
<P>
   Call OnKeyGoSub(KeyCode, Shift, Text1)

<P><LI>In the Text2_KeyDown event procedure, add the following code:
<P>
   Call OnKeyGoSub(KeyCode, Shift, Text2)

<P><LI>Add a Label (Label1) to to the form.

<P><LI>In the general-declaration section for the form, add this procedure:
<P>
<PRE>   Sub OnKeyGoSub (KeyCode%, Shift%, Ctrl As Control)
      Select Case KeyCode%
         Case KEY_MENU: Key$ = ""
         Case KEY_SHIFT: Key$ = ""
         Case KEY_CONTROL: Key$ = ""
         Case KEY_F1: Key$ = " F1 "
         Case KEY_UP: Key$ = " UP key"
         Case KEY_CAPITAL: Key$ = "CAP LOCKS"
         Case Else: Key$ = Chr$(KeyCode%)
      End Select
      Select Case Shift%
         Case SHIFT_MASK: Shft$ = "Shift"
         Case ALT_MASK: Shft$ = "Alt"
         Case CTRL_MASK: Shft$ = "Ctrl"
         Case Else: Shft$ = ""
      End Select
      Label1.Caption="Key:"+ Shft$+ " "+ Key$
   End Sub

</PRE><P><LI>Run the program. Move back and forth between the two text boxes
   using either the TAB key or the mouse. Experiment with any key in
   combination with the ALT, CTRL, and SHIFT keys. Also, try the F1
   and UP ARROW keys.
<P>
</OL>This example is limited, but shows you how to simulate the ON KEY
statements or key trapping in Visual Basic by placing the call to the key
trap procedure in any KeyDown event procedure.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbenv kbprg<BR>
KBSubcategory: EnvtRun<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

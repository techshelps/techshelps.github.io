

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Cannot Disable UserControl on Modal Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171972">
<META NAME="KBModify" CONTENT="1998/01/22">
<META NAME="KBCreate" CONTENT="1997/07/25">
<META NAME="Keywords" CONTENT="vb5all VBKBAX VBKBComp VBKBCtrl">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A UserControl created in Visual Basic and placed on a form that is opened modally does not respond to attempts made to disable it. Setting the Enabled property of the control behaves as expected on a non-modal form, but setting Enabled = False on a...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBXS,QA4P,QAB5,QA7O,QAOE,QAMN,QAH4,QAFF,QBWS,QBS0,QBJZ,QA01,QAY5,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Cannot Disable UserControl on Modal Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 22, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171972</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A UserControl created in Visual Basic and placed on a form that is opened
modally does not respond to attempts made to disable it. Setting the
Enabled property of the control behaves as expected on a non-modal form,
but setting Enabled = False on a modal form has no effect.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
You can use the Windows API function Windows API function EnableWindow to
enable/disable the ActiveX control.

<OL><P><LI>In the General Declaration section of the module, place the following
   declaration: (This must be declared as Private if it is included in a
   form module.)
<P>
<P><PRE>      Private Declare Function EnableWindow Lib "user32" Alias _
<PRE></PRE>         "EnableWindow" (ByVal hwnd As Long, ByVal fEnable As Long) As Long

</PRE><P><LI>The hWnd property, like all UserControl properties, requires a public
   property method to expose the property as part of the object's
   interface. Since you will not be setting a value, the Property Get
   is all that is needed.
<P>
<P><PRE>      Public Property Get hWnd() as Long
<PRE></PRE>         hWnd=UserControl.hWnd
      End Property

</PRE><P><LI>Next, you need to associate this method with the hWnd property
   of the control:
<P>
   a. From the Tools menu, select Procedure Attributes.
<P>
   b. Select "hWnd" from the Name drop-down list.
<P>
   c. Click the Advanced button.
<P>
   d. From the Procedure ID drop-down list, choose "hWnd." Click OK.

<P><LI>The EnableWindow function can now be called to enable or disable the
   UserControl. To disable the UserControl:
<P>
<P><PRE>      Dim result as Long
      result = EnableWindow(Me.UserControl1.hWnd, 0)
</PRE><P>
   To enable the UserControl:
<P>
<P><PRE>      Dim result as Long
      result = EnableWindow(Me.UserControl1.hWnd, 1)
</PRE><P>
</OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. We are researching this
bug and will post new information here in the Microsoft Knowledge
Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Create a new "ActiveX Control" project.

<P><LI>Add the following code to the UserControl:
<P>
<P><PRE>      Public Property Get enabled() As Boolean
<PRE></PRE>           enabled = UserControl.enabled
      End Property

      Public Property Let enabled(vNewValue As Boolean)
           UserControl.enabled = vNewValue
      End Property

      Private Sub UserControl_Click()
          MsgBox "Control is not Disabled."
      End Sub

</PRE><P><LI>From the Tools menu, select Procedure Attributes.

<P><LI>Click the Advanced button.

<P><LI>From the Procedure ID drop-down, chose "Enabled." Click OK.

<P><LI>Add a "Standard EXE" project.

<P><LI>Close the UserControl window, and add the UserControl to Form1.

<P><LI>Add two CommandButtons to Form1. Set the following properties.
<P>
<PRE>      Name: Command1    Caption: "Enable Control"
      Name: Command2    Caption: "Disable Control"

</PRE><P><LI>Add the following code to Form1.
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Me.UserControl11.Enabled = True
      End Sub

      Private Sub Command2_Click()
         Me.UserControl11.Enabled = False
      End Sub

</PRE><P><LI>Add a standard module to the project.

<P><LI>Add the following code to Module1:
<P>
<P><PRE>      Public Sub Main()
<PRE></PRE>             Form1.Show vbModal
           End Sub

</PRE><P><LI>Run the project.

<P><LI>Note that clicking on the button labeled "Disable Control" does not
<P><PRE>    prevent the message box from appearing when the UserControl is clicked.
</PRE>
<P><LI>Stop the project and open Module1.

<P><LI>In Sub Main(), change:
<P>
<P><PRE>       Form1.Show vbModal
</PRE><P>
<P><PRE>    to:
</PRE><P>
<P><PRE>       Form1.Show
</PRE>
<P><LI>Run the project again, and note that the "Disable Control" button now
<P><PRE>    functions as expected and the message box does not appear.
</OL></PRE> 
<PRE>Keywords          : vb5all VBKBAX VBKBComp VBKBCtrl
Version           : 5.0
Platform          : WINDOWS
Issue type        : kbbug</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 22, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

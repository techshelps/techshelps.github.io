

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO: How to Use ODBC Escape Clauses in Your SQL Syntax </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142930">
<META NAME="KBModify" CONTENT="1996/06/21">
<META NAME="KBCreate" CONTENT="1996/01/22">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  An ODBC escape clause is a way to talk to the ODBC driver you are using in a DBMS independent manner. The escape clause is represented by a pair of curly braces ({}) surrounding the standard form of the SQL syntax and a one- character or two-charac...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAN0,QAPN,QA9E,QBS0,QABM,QAUD,QAGB,QAB9,QAPF,QAY5,QA2Q,QAY2,QAA1,QBV8,QAG2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>RDO: How to Use ODBC Escape Clauses in Your SQL Syntax</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142930</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, version 4.0, for
   Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An ODBC escape clause is a way to talk to the ODBC driver you are using in
a DBMS independent manner. The escape clause is represented by a pair of
curly braces ({}) surrounding the standard form of the SQL syntax and a one-
character or two-character token that specifies the type of the escape
clause.
<P>
For example, if you want to specify a date value and you don't know which
ODBC driver you will be using, you can use the Escape clause in this
construct, {d 'yyyy-mm-dd'} and it will be translated by the ODBC driver
manager into the form the backend can utilize. The following select
statement will work with any ODBC driver: "SELECT * FROM table1 WHERE
datefield = {d '1995-09-12'}" There are also other areas where you can use
ODBC escape clauses:
<P>
<P><h3>Date and Time</h3>
 
<P>
<PRE>   Date      {d 'yyyy-mm-dd'}
   Time      {t 'hh:mm:ss'}
   Timestamp   {ts 'yyyy-mm-dd hh:mm:ss[.f...]'}

</PRE>where [.f...] allows you to specify fractions of a second if you wish.
<P>
<P><h3>Stored Procedures</h3>
 
<P>
For stored procedures a parameter marker (?) must be used for the return
value (if any) and any output arguments because it is bound to a program
variable. Input arguments can be either literals or parameters, for
example, "{? = call procedure_name(arg1, arg2, ?)}" or "{call
procedure_name(arg1, arg2, ?)}".
<P>
<P><h3>String Functions</h3>
 
<P>
<PRE>   ASCII(), CHAR(), CONCAT(), DIFFERENCE(), INSERT(), LCASE(), LEFT(),
   LENGTH(), LOCATE(), LTRIM(), REPEAT(), REPLACE(), RIGHT(), RTRIM(),
   SOUNDEX(), SPACE(), SUBSTRING() and UCASE().

</PRE>This example will retrieve a resultset where the first three characters of
author field is 'dat' from the Pubs database. "Select * from authors where
{fn LEFT(author, 3)} = 'dat'".
<P>
This example will retrieve a resultset with the author field all in
uppercase letters. It is necessary to alias the column with the phrase "as
AUTHORS" because the RDC control doesn't know what you are asking for in an
escape clause so if you do not alias the column, the RDC control will refer
to is as "Expr1000". MSRDC1.SQL = "Select {fn UCASE(author)} as AUTHORS
from authors"
<P>
<P><h3>Math Functions</h3>
 
<P>
<PRE>   ABS(), ACOS(), ASIN(), ATAN(), ATAN2(), CEILING(), COS(), COT(),
   DEGREES(), EXP(), FLOOR(), LOG(), LOG10(), MOD(), PI(), POWER(),
   RADIANS(), RAND(), ROUND(), SIGN(), SIN(), SQRT(), TAN() and TRUNCATE().

</PRE><h3>System Functions</h3>
 
<P>
<PRE>   DATABASE(), IFNULL() and USER().

</PRE>This example returns all the orders entered by the current user: "Select
ordnum From orders Where employee = {fn User()}".
<P>
<P><h3>Time and Date Functions</h3>
 
<P>
<PRE>   CURDATE(), CURTIME(), DAYNAME(), DAYOFMONTH(), DAYOFWEEK(),
   DAYOFYEAR(), HOUR(), MINUTE(), MONTH(), MONTHNAME(), NOW(), QUARTER(),
   SECOND() and TIMESTAMPADD()

</PRE><h3>Data Type Conversion Functions</h3>
 
<P>
The data type conversion function converts a data type to a different data
type on the server. This example shows the simple conversion of a date
column to a character string. It also shows how powerful the use of scalar
functions in expressions can be. In this case, the query returns all orders
made in the 1990s "Select ordnum From orders Where {fn convert(orddate,
SQL_CHAR)} like '199%'".
<P>
For complete documentation see the "Microsoft ODBC 2.0 Programmer's
Reference and SDK Guide."
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Program</h3>
 
<P>
This example uses the escape clause string function and assumes that you
already have an ODBC data source set up. This example uses a "DSN-less"
ODBC connection so you will not need to set up a DSN with the ODBC Admin
utility.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button to Form1.

<P><LI>Paste the following code into the General Declarations section of form1.
<P>
<PRE>   Private Sub Command1_Click()
     Dim cn As rdoConnection
     Dim en As rdoEnvironment
     Dim rs As rdoResultset
     'establish connection
     Set en = rdoEngine.rdoEnvironments(0)
     en.CursorDriver = rdUseOdbc
     'Below should be modified to match your data source
     Dim cnStr As String
     cnStr = "driver={SQL Server};server=myserver;" &amp; _
       "database=pubs;uid=myuid;pwd=mypwd"
     Set cn = en.OpenConnection(DSName:="", Prompt:=rdDriverNoPrompt, _
       Connect:=cnStr)
     Dim sql As String
     sql = "Select * from authors where {fn LEFT(au_lname, 3)} = 'gre'"
     Set rs = cn.OpenResultset(Name:=sql, Type:=rdOpenDynamic, _
       Option:=rdAsyncEnable)
     'check if still executing for asynchronous query option
     While rs.StillExecuting
       DoEvents
     Wend
     If rs.RowCount &gt; 0 Then
       While Not rs.EOF
         Me.Print rs("au_lname")
         rs.MoveNext
       Wend
     End If
     MsgBox Str(rs.RowCount) &amp; " rows returned."
   End Sub

</PRE><P><LI>Note that you will need to change your DRIVER, SERVER, DATABASE, UID,
   and PWD in the OpenConnection method. You will also need to modify the
   SQL statement contained in the Command1_Click event to match your own
   SQL data source.

<P><LI>Start the program or press the F5 key.

<P><LI>You can then click on the Command1 button to start the query which will
   display the number of rows returned.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
<PRE>   (Hitchhiker's Guide to Visual Basic and SQL Server, Microsoft Press.
   ISBN: 1-55615-906-4.).
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataODBC<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 How to Call SQL Stored Procedures from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106492">
<META NAME="KBModify" CONTENT="1997/01/29">
<META NAME="KBCreate" CONTENT="1993/11/09">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to call Microsoft SQL stored procedures from Visual Basic. A stored procedure is a precompiled collection of SQL statements, often including control-of-flow language.  MORE INFORMATION  The method of calling depends on wh...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA5V,QAUD,QABM,QAB9,QAPN,QAH7,QAGI,QAH6,QAD7,QALW,QBXS,QA5F,QAMA,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 How to Call SQL Stored Procedures from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106492</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to call Microsoft SQL stored procedures from
Visual Basic. A stored procedure is a precompiled collection of SQL
statements, often including control-of-flow language.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The method of calling depends on whether the SQL stored procedure returns
records or not:

<OL><P><LI>Stored procedures that don't return records (or rows) can be executed
   from Visual Basic with the ExecuteSQL method as follows:
<P>
<P><PRE>      i% = MyDb.ExecuteSQL("sp_name")
</PRE><P>
   This executes the stored procedure sp_name and returns the affected
   number of rows in i%. The ExecuteSQL method is strictly for action
   queries such as:
<P>
<P><PRE>      Delete Authors where name like "fred%"
</PRE><P>
   The ExecuteSQL method is valid only for SQL statements that do not
   return records (or rows). An SQL statement that uses "SELECT..." returns
   records, while an SQL statement that uses "DELETE..." does not. Neither
   Execute nor ExecuteSQL return a recordset, so using ExecuteSQL on a
   query that selects records produces an error.

<P><LI>Stored procedures that return records (or rows) require a Dynaset or
   Snapshot to capture the values. Here are two examples:
<P>
   Example Using a Data Control on a Visual Basic Form:
<P>
<P><PRE>      DB_SQLPassThrough = 64
      Data1.Options = DB_SQLPassThrough
      Data1.Recordsource = "sp_name"  ' name of the stored procedure
<PRE></PRE>      Data1.Refresh   ' Refresh the data control

      When you use the SqlPassThrough bit, Visual Basic's Microsoft Access
      database engine will ignore the syntax used and will pass the command
      through to the SQL server.

   Alternative Example Using Object Variables:

      Dim Ds as Dynaset
      Set MyDB = OpenDatabase(... ' Open your desired database here.
      Set Ds = MyDB.CreateDynaset("sp_name",Db_SQLPassThrough)
      ' You can also Dim as Snapshot and use MyDb.CreateSnapshot above.

</PRE></OL><h3>How to Pass Parameters to a Stored Procedure</h3>
 
<P>
To pass parameters, include them after the name of the stored procedure in
a string, for example:
<P>
<PRE>   SQLx = "My_StorProc parm1, parm2, parm3"  ' String specifying SQL
                                             ' command.
   ...
   i = MyDB.ExecuteSQL(SQLx)  ' For stored procedure that
                              ' doesn't return records.
   ...
   set Ds = MyDB.CreateDynaset(SQLx,64) ' For stored procedure that
                                        ' returns records.

</PRE>The object variable (Ds) will contain the first set of results from the
stored procedure (My_StorProc).
<P>
<P><h3>Another Example</h3>
 
<P>
Here's more example code showing both methods:
<P>
<PRE>   Dim db as Database; l as long; Ss as Snapshot

   ' Enter the following two lines as one, single line:
   Set Db = OpenDatabase
      ("",false,false, "ODBC;dsn=yourdsn;uid=youruid;pwd=yourpwd")

   l=ExecuteSQL("YourSP_Name")        ' for SPs that don't return rows
   Set Ss = Db.CreateSnapshot("YourSP_Name", 64) ' for SPs that return rows
   Col1.text = Ss(0) ' Column one
   Col2.text = Ss!ColumnName
   Col3.Text=Ss("ColumnName")

</PRE><h2>REFERENCES</h2>
 
<P>
More information about calling stored procedures is documented in the
following Microsoft SQL manual which covers the Visual Basic Library
for SQL Server:

<UL><LI>Microsoft SQL Server Programmer's Reference for Visual Basic
<P>
</UL>See the functions SqlRpcInit% (pages 200-201), SqlRpcParam%, and
SqlRpcSend%. These functions call stored procedures more quickly than do
the methods described above.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther<BR>
Additional reference words: 3.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

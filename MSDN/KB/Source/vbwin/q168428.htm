

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Test Your ActiveX Documents (.VBD) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168428">
<META NAME="KBModify" CONTENT="1997/11/10">
<META NAME="KBCreate" CONTENT="1997/05/12">
<META NAME="Keywords" CONTENT="AXSDKDocObjects vb5all vb5howto kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic 5.0 introduces the ability to create ActiveX documents (.VBD files) for use with Internet browsers. This article will walk you step-by-step through creating a simple ActiveX document, show you how to test it while within the Visual Bas...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAA1,QAHV,QDI2,QAVX,QAVW,QAVZ,QBWS,QAMA,QA5F,QAFI,QAUJ,QAY2,QBWA,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Test Your ActiveX Documents (.VBD)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168428</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Professional, and Enterprise
   Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic 5.0 introduces the ability to create ActiveX documents (.VBD
files) for use with Internet browsers. This article will walk you
step-by-step through creating a simple ActiveX document, show you how to
test it while within the Visual Basic 5.0 development environment, then
test it outside of the Visual Basic 5.0 development environment.
<P>
The power of the Internet is that potential users from all of the world
will be able to hit and view your page. (The same applies to the Intranet,
although on a smaller scale; users all over your corporation may be able to
hit and view your web page). With this in mind, different users will have
different configurations and different software installed on their PC's.
When your ActiveX page is hit by an Internet user, Internet Explorer
searches the local PC for all of the files required by the document. If a
required file is present and has a version equal to or greater than the
version you require, it uses it. If a file is missing or is older than the
version required, Internet Explorer prompts the user to install the file
and will proceed to do so.
<P>
While testing an ActiveX document, a problem occurs for developers because
all of the required files are already installed onto the development
machine. So how do you simulate a client's machine, one which has not been
exposed to Visual Basic and the components you are using or which you've
created? This article will also describe how to simulate such an
environment.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To begin, you need to create a simple ActiveX document for testing
purposes. If you already have an ActiveX document to test, proceed to the
section "Testing Your Document Using Visual Basic 5.0" later in this
article.
<P>
<P><h3>Creating a Simple ActiveX Document</h3>
 

<OL><P><LI>Start Visual Basic 5.0, or select New Project from the File menu if
   Visual Basic 5.0 is already running. In the New Project dialog, select
   ActiveX Document EXE and click OK.

<P><LI>From the Project Window, open the User Documents folder and select
   UserDocument1. This User Document is created by default. View the
   properties for UserDocument1, change the (Name) property to
   MyTestDocument.

<P><LI>Add some intrinsic controls to MyTestDocument, such as a CommandButton,
   a Text Box, and a Label. You may modify the properties or add code to
   these controls as desired. These controls will be used so you can verify
   that the download of your ActiveX document succeeded.

<P><LI>From the Project menu, choose Project1 Properties. Change the Project
   Name to MyActiveXDocument. Click OK.

<P><LI>Save the Project. Save the user document MyTestDocument.Dob and also
   save the Project MyActiveXDocument.VBP.
<P>
</OL><h3>Testing Your Document Using Visual Basic 5.0</h3>
 
<P>
The following steps assume you have Microsoft Internet Explorer version
3.00 or later installed onto your system. To obtain the latest version of
Internet Explorer be sure to visit the following Web site:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/ie">http://www.microsoft.com/ie</A></B>

</PRE><P><LI>If you created the simple ActiveX document above, keep the project open.
   If you are working with your own ActiveX document, open the desired
   project.

<P><LI>Click the Start button on the Visual Basic toolbar, or choose Start from
   the Run menu.
<P>
   At this point, your document is ready to view with Internet Explorer.
   For testing purposes, Visual Basic 5.0 has created a .VBD file in the
   current working directory. This directory is usually where Visual Basic
   is installed. This file can now be viewed with Internet Explorer.

<P><LI>Open Internet Explorer.

<P><LI>In the Address box, type in the path to the .VBD file, which will have
   the same name as your project. For example, to open the simple ActiveX
   document created above, type:
<P>
   "C:\Program Files\DevStudio\Visual Basic\MyTestDocument.VBD"
<P>
   NOTE: Your path to the .VBD file may be different, so modify the line
   above as appropriate.
<P>
   The .VBD file should open in Internet Explorer, displaying any controls
   you added to the document and executing any code you've added to the
   project, as appropriate.
<P>
   If this test worked, you can modify the project as desired, adding code,
   adding controls, etc. You may then continue to test the VBD file with
   Internet Explorer simply by running the project and viewing the VBD file
   with Internet Explorer.
<P>
   NOTE: The VBD file is temporary; Visual Basic will delete the file when
   the project stops executing.
<P>
</OL><h3>Creating Your Internet Download Setup</h3>
 
<P>
The following steps take you through the creation of your Internet download
setup. If you have created your own ActiveX document (rather that using the
example created above), substitute your ActiveX document name where
necessary.

<OL><P><LI>From the File menu, choose Make MyActiveXDocument.Exe. Create the
   executable file in the desired location.
<P>
   NOTE: The executable file created is designed to execute as an ActiveX
   document within Internet Explorer. The file cannot be executed
   successfully by itself.

<P><LI>Exit Visual Basic 5.0.

<P><LI>Run the Application Setup Wizard. This Setup Wizard should be available
   from the Start menu, under Programs\Visual Basic 5.0.
<P>
   If you are prompted with the "Setup Wizard - Introduction," click Next.

<P><LI>From the "Select Project and Options" step, click the Browse button to
   locate your ActiveX document project. If you created the example
   provided with this article, locate MyActiveXDocument.vbp.

<P><LI>Under "Options," choose to "Create Internet Download Setup." Click Next.

<P><LI>On the "Internet Distribution Location" step, select the location where
   you would like to place the files for Internet download and click Next.
   For testing purposes, "SWSETUP" may be sufficient.
<P>
   NOTE: It is important to note that the folder must be accessible, with
   at least read-only access, from other machines on your network in order
   to test. In future deployments, you may wish to place the files created
   onto a web server.

<P><LI>For the "Internet Package" step, choose "Download from the Microsoft Web
   site."
<P>
   NOTE: With this option selected, when a user hits your ActiveX document
   with Internet Explorer and needs a component installed, IE will go to
   the Microsoft Web site to install the latest version. If you would like
   information on how to use an alternate location, refer to the chapter on
   "Distributing Your Applications" in the Visual Basic 5.0 Programmer's
   Guide. You may desire to use an alternate location if you are developing
   an ActiveX document for an intranet where potential users may not have
   access to the World Wide Web.

<P><LI>For the remaining steps in the Setup Wizard, go with the defaults,
   clicking Next until you reach the final step.

<P><LI>On the final step, you may save the template if you prefer. When you are
   done, click Finish.
<P>
</OL>The Visual Basic Setup Wizard creates all of the files necessary for an
Internet download. The next section of this article describes how to test
the page.
<P>
<P><h3>Testing the Internet Download</h3>
 
<P>
As a developer, you may want to test the Internet Download from your own
machine first. Remember, however, that because Visual Basic 5 is already
installed on your machine, you know all of the necessary files are
installed and the ActiveX document should load without incident. To test
the document from the development machine, locate the Internet download
files the Setup Wizard created. In the setup folder there will be an HTM
file; if you created the example above this file will be named
MyActiveXDocument.HTM. Simply double-click the file or locate it with
Internet Explorer to open it.
<P>
The second test you should apply to your ActiveX document is testing it
from a machine without Visual Basic 5.0 installed. If you do not have such
a machine available to you for testing, refer to the "Simulating a Clean
Machine" section of this article.
<P>
From a machine that does not have Visual Basic 5.0 installed, use Internet
Explorer to locate and open the HTM file created by the Setup Wizard.
<P>
IMPORTANT NOTE: Before testing the ActiveX document, be sure the safety
level in Internet Explorer is set to Medium or None. If the safety level is
set to High, the required files will not get downloaded and the ActiveX
document will not load. To check the security level in Internet Explorer,
choose Options from the View menu. From the Options window, select the
Security tab, and then click the Safety Level button.
<P>
If you set the Safety Level to None, all of the missing components will
be installed without warning. If the Safety Level is set to Medium, the
following warnings will occur:
<P>
First, you will be warned that an attempt to install the CAB file is being
made if you created the example above you will be prompted to install
MyActiveDocument.CAB. If you respond Yes, the MyActiveXDocument.Exe and
MyActiveXDocument.INF will be installed onto the client machine in the
Windows\OCCache folder.
<P>
Second, you will be asked if you wish to install Microsoft Automation. The
Authenticode screen will display information about this component. If you
respond Yes, a similar screen will warn you that the Microsoft Visual Basic
5.0 Run-time Library is going to be installed. Both of these components
will be installed from the Microsoft Web site into the Windows\System
folder (Windows\System32 folder on Windows NT).
<P>
Third, a script warning will appear warning the user that the HTM file
contains scripting code. This code is necessary in order to view your
ActiveX document.
<P>
These warnings are all part of the Internet Explorer's safety mechanisms.
If you do not receive all of the above warnings, do not be alarmed. You may
not receive a warning if a necessary component is already installed on the
client machine or a security level option in Internet Explorer is set to
something other than the defaults.
<P>
As part of testing, you may wish to test various Internet Explorer security
settings to be sure your document loads as expected under varying
circumstances.
<P>
<P><h3>Simulating a Clean Machine</h3>
 
<P>
As a developer, you should test your application on various machines with
varying configurations. However, if you do not have a "clean machine" (one
that does not have Visual Basic 5.0 or the Visual Basic 5.0 Run-time
Library installed), the steps outlined below describe how to configure a
development machine so that it behaves like a clean client. These steps may
also be taken to clean a client machine that may have been previously
exposed to your ActiveX document, Visual Basic 5.0, or the Visual Basic 5.0
Run-time Library.
<P>
WARNING: Before following the steps below to simulate a clean machine, be
aware that unregistering, renaming, and deleting any of the following files
could impact other applications installed onto your machine. For more
information about undoing the steps provided here, see the "Restoring Your
Machine" section of this article.
<P>
In order to clean a machine for testing an Internet download, you must
begin by unregistering the Visual Basic 5.0 Run-time Library. This step
will require a copy of REGSVR32.EXE. This file may be installed onto your
development machine; if it is not, it may be found on the Visual Basic 5.0
installation CD-ROM.

<OL><P><LI>From the Start menu, choose Run.

<P><LI>In the Run dialog, type in the following command;
<P>
   "&lt;PATH&gt;\REGSVR32.EXE /U &lt;Path to Windows folder&gt;\System\MSVBVM50.DLL"
<P>
   NOTE: If you are running on a Windows NT machine, the MSVBVM50.DLL is
   installed into the Windows\System32 folder.

<P><LI>Next, rename or delete the Visual Basic 5.0 Run-time Library.

<P><LI>From the Start menu, choose Find, and then select Files or Folder.

<P><LI>In the Find dialog, search the entire hard drive for files named
   MSVBVM50.DLL.
<P>
   The file MSVBVM50.DLL may appear in more than one location; if it does,
   delete or rename the file located in the Windows\System folder (System32
   on Windows NT platforms).

<P><LI>Next, the Microsoft Automation DLL must be deleted or renamed. Follow
   the steps outlined above for MSVBVM50.DLL, except locate and rename
   ASYCFILT.DLL, which will also be located in the Windows\System folder
   (System32 on Windows NT platforms). Do not delete other versions of this
   file if it is found in alternative locations.

<P><LI>Next, you must unregister and delete or rename any remaining dependency
   files installed on the client machine. These files will typically be
   custom controls that are used in the ActiveX document. For a list of the
   dependency files used by your ActiveX document, open the INF file
   created by the Setup Wizard and placed in the Support folder of the
   Internet Download setup.
<P>
   The INF file will have a [Add.Code] section, listing the dependency
   files used by your ActiveX document. For example, the
   MyActiveXDocument.INF file created for the example in this article
   appears as follows:
<P>
<P><PRE>      [Add.Code]
      MYACTIVEXDOCUMENT.EXE=MYACTIVEXDOCUMENT.EXE
      ASYCFILT.DLL=ASYCFILT.DLL
      MSVBVM50.DLL=MSVBVM50.DLL
</PRE><P>
   The dependency files must be unregistered, if necessary, and deleted or
   renamed. The MyActiveXDocument.Exe file does not need to be
   unregistered. However, it will need to be deleted or renamed. Internet
   Explorer 3.x places this file into the \Windows\OCCache folder. Internet
   Explorer 4.0 places this file into the "\Windows\Downloaded Program
   Files" directory. If you are uncertain whether a file needs to be
   unregistered or not, you can run REGSVR32.EXE with the /U switch to
   determine whether or not it can be unregistered. If you receive an
   error, the file does not need to be unregistered.
<P>
   NOTE: One file installed that is not listed in the [Add.Code] section is
   the INF file which is installed into the Windows\OCCache folder for each
   ActiveX document. This file will have the same name as the ActiveX EXE
   with an INF extension; for example, MyActiveDocument.INF. For a truly
   clean machine, this file would need to be deleted as well. However, not
   deleting the file will not have any adverse affects on the setup.
<P>
   Other dependency files may include OCX files for custom controls or DLLs
   for various components. For example, if you used any of the Windows
   Common Controls in your application ,the Add.Code section of your INF
   file may appear as follows;
<P>
<P><PRE>      [Add.Code]
      MYACTIVEXDOCUMENT.EXE=MYACTIVEXDOCUMENT.EXE
      ASYCFILT.DLL=ASYCFILT.DLL
      MSVBVM50.DLL=MSVBVM50.DLL
      COMCTL32.OCX=COMCTL32.OCX
</PRE><P>
   In order to remove the COMCTL32.OCX file from the system, run:
<P>
<P><PRE>      REGSVR32.EXE /U &lt;PATH&gt;\System\COMCTL32.OCX
</PRE><P>
   This will unregister the control, then locate the file and either delete
   or rename it. Most of the custom controls that ship with Visual Basic
   5.0 will install themselves into the Windows\System folder. Internet
   Explorer, however, will install some custom controls into the
   Windows\OCCache folder. You will need to be sure the path to the desired
   OCX is correct when using REGSVR32.EXE or else an error will occur.
<P>
   This same procedure must be followed for every dependency file used by
   your ActiveX document.
<P>
   Once all of the dependency files have been unregistered and renamed or
   deleted, open Internet Explorer and view your HTM page. When you view
   the HTM page, all of the missing components will automatically be
   downloaded and installed onto the user's machine.
<P>
</OL><h3>Restoring Your Machine</h3>
 
<P>
Opening the HTM file as described in the last step of the previous section
of this article will restore your machine to its original configuration.
Internet Explorer will download and register each required file for you.
However, if something should go wrong during the Internet download setup,
you can reverse the changes made by restoring all of the original files and
registering the necessary components.
<P>
Any file deleted or renamed would need to be renamed back to its original
name or restored from the Windows Recycle Bin. If a file cannot be restored
from the Windows Recycle Bin, an original may be found on the Visual Basic
5.0 CD-ROM (unless the file was provided by a third party, in which case
you will need to restore the file from the appropriate location). Once the
necessary files have been restored, you can run REGSVR32.EXE to register
those files that were initially unregistered. For example, to register the
Visual Basic 5.0 Run-time Library, execute the following command from the
run dialog:
<P>
<PRE>   REGSVR32 &lt;Path to Windows&gt;\System\MSVBVM32.DLL

</PRE></OL>Troubleshooting
 
<P>
This section will attempt to cover some of the possible problems you may
experience with the Internet Download setup.
<P>
Problem:

<UL><LI>You are receiving an error deleting or renaming the Visual Basic 5.0
   Run-time Library:
<P>
   "Cannot delete MSVBVM50.DLL: Access is denied."
<P>
   -or-
<P>
   "Cannot rename MSVBVM50.DLL: Access is denied."
<P>
</UL>Resolution:

<UL><LI>You cannot delete a file while it is in use because Visual Basic 5.0
   uses this file while it is running. Be sure Visual Basic 5.0 is not
   running when you attempt to delete this file. This error may also occur
   if Internet Explorer is currently or has recently viewed a Visual Basic
   5.0 ActiveX Document. In this case, close Internet Explorer before
   attempting to delete the file.
<P>
</UL>Problem:

<UL><LI>"The dynamic link library could not be found in the specified
   path..."
<P>
</UL>Resolution:

<UL><LI>The ActiveX document file is still present on the machine. Delete or
   rename the ActiveX document file found in the Windows\OCCache folder and
   refresh the page. If you built the ActiveX document example in this
   article, the file would be named MyActiveXDocument.Exe.
<P>
</UL>Problem:

<UL><LI>"An error has occurred copying MSVBVM50.DLL. Ensure the location
   specified below is correct...C:\TEMP\ICD10E.TMP"
<P>
   The exact file names and paths may vary.
<P>
</UL>Resolution:

<UL><LI>There is insufficient disk space on the target machine. Free up disk
   space on the target machine and refresh the page.
<P>
</UL>Problem:

<UL><LI>Internet Explorer prompts:
<P>
   "Opening file &lt;ActiveX Document&gt;.VBD"
   "What would you like to do with this file?"
   Open it or Save it to disk
<P>
</UL>Resolution:

<UL><LI>This error occurs because the Visual Basic 5.0 Run-time Library
   (MSVBVM50.DLL) is not installed. This will most likely occur if the
   Internet Explorer safety level is set to High. Set the Internet Explorer
   safety level to Medium or None.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
Visual Basic 5.0 Component Tools Guide, Chapter 5 "Creating an ActiveX
Document"
<P>
Visual Basic 5.0 Programmer's Guide, Chapter 17 "Distributing Your
Applications"
 
<PRE>Keywords          : AXSDKDocObjects vb5all vb5howto kbhowto
Version           : 5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

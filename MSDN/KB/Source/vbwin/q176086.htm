

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Retrieve Recordsets from Oracle Stored Procs Using ADO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176086">
<META NAME="KBModify" CONTENT="1997/11/03">
<META NAME="KBCreate" CONTENT="1997/10/31">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows how to create an ADO 1.5 project that will return a typical Recordset from an Oracle stored procedure. This article builds on the concepts covered in the Microsoft Knowledge Base article:     ARTICLE-ID: Q174679    TITLE     : HO...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA94,QA6A,QBS0,QABA,QBXS,QAGU,QA2O,QAUD,QAEF,QAB9,QAY2,QAKC,QA5V,QAU9,QALW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Retrieve Recordsets from Oracle Stored Procs Using ADO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176086</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows how to create an ADO 1.5 project that will return a
typical Recordset from an Oracle stored procedure. This article builds on
the concepts covered in the Microsoft Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>
   TITLE     : HOWTO: Retrieve Resultsets from Oracle Stored Procedures

</PRE>It is almost identical to the following article in the Microsoft Knowledge
Base article that covered the topic using RDO:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q174981.htm">Q174981</A></B>
   TITLE     : HOWTO: Retrieve Typical Resultsets from Oracle Stored
   Procedures

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Knowledge Base article <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> gave an in-depth example, using RDO, of all
the possible ways to return a Recordset back from a stored procedure. The
example in this article is a simplified version. Please refer to <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> if
you want more information about the process.
<P>
NOTE: The Recordsets created by the Microsoft ODBC Driver for Oracle v2.0
using Oracle stored procedures are Read Only and Static. To retrieve a
Recordset requires that an Oracle Package be created.
<P>
The sample project in this article was created in Visual Basic 5.0 and uses
ADO to access and manipulate the Recordsets created by the Microsoft ODBC
Driver for Oracle v2.0. You will need to have this driver to use the
recordsets-from-stored-procedures functionality discussed in this article
and KB <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>. (Currently, it is the only driver on the market that can
return a Recordset from a stored procedure.) If you want additional
information about using Visual Basic with Oracle, please see the Knowledge
Base article <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B> that uses RDO 2.0 in its examples.
<P>
NOTE: You will need to acquire and install the MDAC 1.5 stack for the
sample in this article. Article <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B> explains where to get MDAC 1.5 and
how to install it. MDAC 1.5 contains ADO 1.5 and the Microsoft ODBC Driver
for Oracle v2.0.
<P>
This article is broken up into two parts. The first part is a step-by-step
procedure for creating the project. The second part is a detailed
discussion about the interesting parts of the project.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Run the following DDL script on your Oracle server:
<P>
<P><PRE>      DROP TABLE person;
</PRE>   
<P><PRE>      CREATE TABLE person
<PRE></PRE>       (ssn     NUMBER(9) PRIMARY KEY,
        fname   VARCHAR2(15),
        lname   VARCHAR2(20));
   
      INSERT INTO person VALUES(555662222,'Sam','Goodwin');
   
      INSERT INTO person VALUES(555882222,'Kent','Clark');
   
      INSERT INTO person VALUES(666223333,'Janet','Reno');
   
     COMMIT;
       /

</PRE><P><LI>Create the following package on your Oracle server:
<P>
<P><PRE>      CREATE OR REPLACE PACKAGE packperson
      AS
<PRE></PRE>          TYPE tssn is TABLE of  NUMBER(10)
          INDEX BY BINARY_INTEGER;
          TYPE tfname is TABLE of VARCHAR2(15)
          INDEX BY BINARY_INTEGER;
          TYPE tlname is TABLE of VARCHAR2(20)
          INDEX BY BINARY_INTEGER;
   
          PROCEDURE allperson
                  (ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname);
          PROCEDURE oneperson
              (onessn IN      NUMBER,
               ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname);
      END packperson;
      /

</PRE><P><LI>Create the following package body on your Oracle server:
<P>
<P><PRE>      CREATE OR REPLACE PACKAGE BODY packperson
      AS
</PRE>   
<P><PRE>      PROCEDURE allperson
<PRE></PRE>                  (ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname)
      IS
          CURSOR person_cur IS
                  SELECT ssn, fname, lname
                  FROM person;
   
          percount NUMBER DEFAULT 1;
   
      BEGIN
          FOR singleperson IN person_cur
          LOOP
                  ssn(percount) := singleperson.ssn;
                  fname(percount) := singleperson.fname;
                  lname(percount) := singleperson.lname;
                  percount := percount + 1;
          END LOOP;
      END;
   
      PROCEDURE oneperson
            (onessn  IN    NUMBER,
                   ssn     OUT   tssn,
                   fname   OUT   tfname,
                   lname   OUT   tlname)
      IS
       CURSOR person_cur IS
                  SELECT ssn, fname, lname
                  FROM person
                  WHERE ssn = onessn;
   
          percount NUMBER DEFAULT 1;
   
      BEGIN
          FOR singleperson IN person_cur
          LOOP
                  ssn(percount) := singleperson.ssn;
                  fname(percount) := singleperson.fname;
                  lname(percount) := singleperson.lname;
                  percount := percount + 1;
          END LOOP;
      END;
      END;
      /

</PRE><P><LI>Open a new project in Visual Basic 5.0 Enterprise edition. Form1 is
   created by default.

<P><LI>Place the following controls on the form:
<P>
<PRE>   Control     Name             Text/Caption
   -----------------------------------------
   Button      cmdGetEveryone   Get Everyone
   Button      cmdGetOne        Get One

</PRE><P><LI>From the Tools menu, select the Options item. Click the "Default Full
   Module View" option and then click OK. This will allow you to view all
   of the code for this project.

<P><LI>Paste the following code into your code window:
<P>
<P><PRE>      Option Explicit
      Dim Cn As ADODB.Connection
      Dim CPw1 As ADODB.Command
      Dim CPw2 As ADODB.Command
      Dim Rs As ADODB.Recordset
      Dim ParamIn1 As ADODB.Parameter
      Dim Conn As String
      Dim QSQL As String
</PRE>   
<P><PRE>      Private Sub cmdGetEveryone_Click()
</PRE>   
<PRE>         Set Rs = New ADODB.Recordset
         Rs.CursorType = adOpenStatic
         Rs.LockType = adLockReadOnly
   
         Set Rs = CPw1.Execute
   
         While Not Rs.EOF
   
            MsgBox "Person data: " &amp; Rs(0) &amp; ", " &amp; Rs(1) &amp; ", " &amp; Rs(2)
            Rs.MoveNext
   
         Wend
   
         Rs.Close
   
         Set Rs = Nothing
   
      End Sub
   
      Private Sub cmdGetOne_Click()
   
         Dim inputssn As Long
   
         Set Rs = New ADODB.Recordset
         Rs.CursorType = adOpenStatic
         Rs.LockType = adLockReadOnly
   
         inputssn = InputBox("Enter the SSN you wish to retrieve:")
   
         CPw2(0) = inputssn
   
         Set Rs = CPw2.Execute
   
         MsgBox "Person data: " &amp; Rs(0) &amp; ", " &amp; Rs(1) &amp; ", " &amp; Rs(2)
   
         Rs.Close
   
         Set Rs = Nothing
   
      End Sub
   
      Private Sub Form_Load()
   
         'Replace &lt;User ID&gt;, &lt;Password&gt;, and &lt;Server&gt; with the
         'appropriate parameters.
         Conn = "UID=&lt;User ID&gt;;PWD=&lt;Password&gt;;driver=" _
                &amp; "{Microsoft ODBC for Oracle};SERVER=&lt;Server&gt;;"
   
         Set Cn = New ADODB.Connection
         Cn.ConnectionString = Conn
         Cn.CursorLocation = adUseClient
         Cn.Open
   
         QSQL = "{call packperson.allperson({resultset 9, ssn, fname, "_
              &amp; "lname})}"
   
         Set CPw1 = New ADODB.Command
         CPw1.ActiveConnection = Cn
         CPw1.CommandText = QSQL
         CPw1.CommandType = adCmdText
   
          QSQL = "{call packperson.oneperson(?,{resultset 2, ssn, fname, "_
              &amp; "lname})}"
   
        Set CPw2 = New ADODB.Command
        CPw2.ActiveConnection = Cn
        CPw2.CommandText = QSQL
        CPw2.CommandType = adCmdText
        Set ParamIn1 = CPw2.CreateParameter("Input", adInteger,
   adParamInput)
        CPw2.Parameters.Append ParamIn1
   
      End Sub
   
      Private Sub Form_Unload(Cancel As Integer)
   
         Cn.Close
         Set Cn = Nothing
         Set CPw1 = Nothing
         Set CPw2 = Nothing
         Set ParamIn1 = Nothing
   
      End Sub

</PRE><P><LI>Go to the Project menu item and select References. Check the "Microsoft
   Active Data Objects 1.5 Library."

<P><LI>Run the project. When you click on the "Get Everyone" button, it
   executes this query:
<P>
<P><PRE>      QSQL = "{call packperson.allperson({resultset 9, ssn, fname, "_
<PRE></PRE>               &amp; "lname})}"

</PRE></OL>This query is executing the stored procedure "allperson," which is in the
package "packperson" (referenced as "packperson.allperson"). There are no
input parameters and the procedure is returning three arrays (ssn, fname,
and lname) each with nine or fewer records. As stated in Knowledge Base
article <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>, you must specify the maximum number of rows you will be
returning. Please refer to the Microsoft ODBC Driver for Oracle Help File
and Knowledge Base article <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> for more information on this issue.
<P>
When you click on the "Get One," button it brings up an input box that
prompts you for an SSN. Once you input a valid SSN and click OK, this query
is executed:
<P>
<PRE>   QSQL = "{call packperson.oneperson(?,{resultset 2, ssn, fname, "_
           &amp; "lname})}"

</PRE>The stored procedure, packperson.oneperson, uses a single input parameter
as the selection criteria for the Recordset it creates. Just like
packperson.allperson, the Recordset is constructed using the table types
defined in packperson. (See Knowledge Base article <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> for more
information.)
<P>
NOTE: You can only define input parameters for Oracle stored procedures
that return a Recordset. You cannot define output parameters for these
stored procedures.
<P>
These two stored procedures cover the basic uses of stored procedures that
return Recordsets. The first one will give you a predefined set of records
(i.e. everyone) and the second one will give you a set of records (or just
one record) based on one or more input parameters. Once you have these
recordsets, you can do inserts, updates, and deletes either through stored
procedures or SQL that you create on the client.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft ODBC Driver for Oracle Help File
<P>
"Oracle PL/SQL Programming" by Steven Feuerstein
<P>
"Hitchhiker's Guide to Visual Basic &amp; SQL Server" by William Vaughn
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>
   TITLE     : HOWTO: Retrieve Resultsets from Oracle Stored Procedures

   ARTICLE-ID: <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B>
   TITLE     : HOWTO: Acquire and Install the Microsoft Oracle ODBC
               Driver v20

   ARTICLE-ID: <B><A HREF="../VBWIN/Q174981.htm">Q174981</A></B>
   TITLE     : HOWTO: Retrieve Typical Resultsets from Oracle Stored
               Procedures

   ARTICLE-ID: <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B>
   TITLE     : HOWTO: Access an Oracle Database Using ROD
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: oracle stored procedures ado msorcl32.dll
<P>

(c) Microsoft Corporation 1997, All Rights Reserved.<BR>
Contributions by Sam Carpenter, Microsoft Corporation<BR>
Keywords          : vb5all vb5howto<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

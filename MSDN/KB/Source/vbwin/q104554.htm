

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sum Of VB Strings Can Exceed 64K in Certain Circumstances </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104554">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/09/22">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  In all cases, individual variable length strings have a maximum size of 64K worth of characters. However, the sum of the lengths of multiple strings can exceed 64K in the circumstances described in this article.   MORE INFORMATION  Visual Basic for...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAH4,QAFF,QBS0,QBW5,QANF,QAR6,QAEX,QBFY,QACJ,QAYL,QAPF,QABN,QAB4,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Sum Of VB Strings Can Exceed 64K in Certain Circumstances</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104554</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In all cases, individual variable length strings have a maximum size of 64K
worth of characters. However, the sum of the lengths of multiple strings
can exceed 64K in the circumstances described in this article.
<P>
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic for Windows goes beyond any previous Microsoft Basic product
in its flexibility when dealing with string variables. As documented in the
"Microsoft Visual Basic Programmer's Guide," Appendix D: Individual
strings always have a maximum size of 64K characters. However, this is
not an absolute limit when dealing with multiple strings. The sum of the
lengths of multiple strings can exceed 64K in the circumstances described
below:

<OL><P><LI>Global strings declared at the module level and assigned values
   elsewhere can each have a value of up to 64K and their total can exceed
   that. For example, if you have the following module-level declarations:
<P>
   Global a as string
   Global b as string
   Global c as string
<P>
   you could have the following code in a Sub procedure:
<P>
   a = Space(64000)
   b = Space(64000)
   c = Space(64000)

<P><LI>The sum of all module level variable length strings can exceed 64K. For
   example, if you have the following module-level declarations:
<P>
   Dim a as string
   Dim b as string
   Dim c as string
<P>
   you could have the following code in a Sub procedure in the same module:
<P>
   a = Space(64000)
   b = Space(64000)
   c = Space(64000)

<P><LI>The sum of all local variable-length string variables can exceed 64K,
   but only across different Sub procedures. The limit within a single Sub
   procedure is 64K for all local variable-length strings. For example, the
   following code would work correctly:
<P>
<PRE>   Sub MySub1()
      Dim a As String
      Dim b As String
      a = Space(32000)
      b = Space(32000)
   End Sub

   Sub MySub2()
      Dim a As String
      Dim b As String
      a = Space(32000)
      b = Space(32000)
   End Sub

   This is true even when more than one of the Sub procedures are currently
   active such as when MySub1 is called and it calls MySub2. Both are in
   memory and each has a 64K segment available for local variable-length
   strings.

   The following code would not work. It would respond correctly with an
   "Out of String Space" error message because it tries to exceed 64K of
   local variable-length strings.

   Sub MySub3()
      Dim a As String
      Dim b As String
      Dim c As String
      a = Space(32000)
      b = Space(32000)
      c = Space(32000)
   End Sub

</PRE><P><LI>The variable-length string elements of a user defined type are
   individually limited to 64K each, but their sum may exceed 64K. For
   example, if you have the following module-level declarations:
<P>
   Type Test
<P><PRE>      a As String
      b As String
      c As String
</PRE>   End Type
   Dim x as Test
<P>
   you can have the following code in a Sub procedure:
<P>
   x.a = Space(64000)
   x.b = Space(64000)
   x.c = Space(64000)

<P><LI>Assigning more than 64K to an array of variable-length strings causes
   an "Out of String Space" error.
<P>
   For example, if you have the following module-level declaration:
<P>
   Dim MyArray(12) as String
<P>
   The following code in a Sub procedure would cause an error:
<P>
   MyArray(1) = Space(64000)
   MyArray(2) = Space(64000)
<P>
   To solve the problem, dimension the array as type Variant:
<P>
   Dim MyArray(12) as Variant
<P>
   Then the following Sub procedure code will correctly create two 64K
   variants tagged as strings.
<P>
   MyArray(1) = Space(64000)
   MyArray(2) = Space(64000)
<P>
</OL><h2>REFERENCES</h2>
 
<P>
"Microsoft Visual Basic for Windows Programmer's Guide," version 3.0,
Appendix D, pages 644-647.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubCategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

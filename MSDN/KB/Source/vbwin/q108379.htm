

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LONG: Overview of Data Access in Visual Basic Version 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108379">
<META NAME="KBModify" CONTENT="1995/07/20">
<META NAME="KBCreate" CONTENT="1993/12/09">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article provides an overview of data access in Visual Basic version 3.0. It contains following sections:   - Data Access In Visual Basic Version 3.0 Versus 2.0  - Relational Database Theory  - Visual Basic Can Use SQL  - Visual Basic Uses the ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAZV,QAPN,QA1S,QAMA,QAW6,QA5F,QAH4,QABM,QAYY,QA7Q,QATJ,QAI5,QA28,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>LONG: Overview of Data Access in Visual Basic Version 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 20, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108379</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an overview of data access in Visual Basic version
3.0. It contains following sections:

<UL><LI>Data Access In Visual Basic Version 3.0 Versus 2.0
<LI>Relational Database Theory
<LI>Visual Basic Can Use SQL
<LI>Visual Basic Uses the Microsoft Access Database Engine
<LI>Data Access Object Hierarchy
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h2>DATA ACCESS IN VISUAL BASIC VERSION 3.0 VERSUS 2.0</h2>
 
<P>
Historically, database management systems (DBMS) represent some of the most
mission-critical and most complex programming challenges in the field of
computer science.
<P>
Visual Basic version 3.0 ships with full-featured, multi-faceted data
access capability. It has a full range of connectivity, flexibility, and
support for Open Database Connectivity (ODBC) on the Microsoft Windows
platform.
<P>
Database features were introduced to Visual Basic in version 2.0. The
upgrade to Visual Basic version 3.0 offers much easier and much more
powerful database management.
<P>
Microsoft added new data methods, objects, and properties in Visual Basic
version 3.0. Version 2.0 was not able to create an updatable Dynaset on an
entire table, and could not navigate the Dynaset with methods other than
MoveNext. Visual Basic version 3.0 can do both. In version 3.0, Dynasets
created using SQL statements are updatable, and there are three new move
methods (MovePrevious, MoveLast and MoveFirst).
<P>
Programmers are much more likely to face network architecture issues in
Visual Basic version 3.0 than with version 2.0. This is because of the
fuller implementation of ODBC and the inclusion of the Microsoft Access
engine and its ISAM database connectivity.
<P>
Some programmers use Visual Basic version 3.0 as the center of mission-
critical database management systems connected to proprietary databases.
For example, a Visual Basic version 3.0 application could be written as
a front end for an enterprise-wide information system containing data in
formats for SQL Server, Oracle, dBASE and FoxPro. The Visual Basic
application could integrate data from all these sources and from multiple
servers. The performance of a system such as this depends significantly
on the network behavior and back-end systems outside of Visual Basic.
<P>
<P><h2>RELATIONAL DATABASE THEORY</h2>
 
<P>
<P><h3>Database Models</h3>
 
<P>
The field of computer science has evolved four models for databases, in
the following order of progressing theory and technology:

<OL><P><LI>Flat File Database
</OL>2. Hierarchical Database
3. Network Database
4. Relational Database
<P>
The relational model is a major step forward for database programmers. With
the relational model, none of the physical and logical pointers between
records are exposed to the programmer. The relational database handles all
low-level structure. A relational database management system (RDBMS) makes
database programming much easier and more flexible than earlier database
systems.
<P>
<P><h3>Relational Database Model</h3>
 
<P>
Visual Basic uses a relational database model. The relational database
model offers the following benefits:

<UL><LI>Organizes data in a collection of tables making the design easy
   to understand.

<LI>Provides a relationally complete language for data definition,
   retrieval, and update. It is non-procedural and criteria-based.

<LI>Provides data integrity rules that define consistent states of the
   database to improve data reliability.
<P>
</UL>A relational database management system (RDBMS) is software that allows you
to represent your data according to the relational model. Both the
programmer and the user think in terms of groups of tables comprising the
database, with tables composed of rows and columns. The data in those rows
and columns relate to each other according to a consistent theory and
practice.
<P>
Relational databases support a standard language called Structured Query
Language (SQL). SQL has evolved into a comprehensive language for
controlling and interacting with a database management system (DBMS). SQL
is now a standard approved by the American National Standards Institute
(ANSI).
<P>
SQL provides three important functions:

<OL><P><LI>Data Definition -- to define the tables that hold the data.

<P><LI>Data Manipulation -- to insert, update, or delete information stored in
   tables.

<P><LI>Data Control -- to prevent access to private data in the database.
<P>
</OL>Dr. Codd, considered the father of relational database theory, has defined
twelve conditions that a database must obey to be considered fully
relational, and he defined three criteria for a minimally relational DBMS:

<OL><P><LI>Information is represented as values in tables.

<P><LI>Internal data structures and pointers are not visible to the user.

<P><LI>The DBMS language supports at least the following syntax:
   SELECTION, PROJECTION, and JOIN.
<P>
</OL>These three criteria are necessary and sufficient for a minimally
relational definition because of the following:

<OL><P><LI>The relational operations only work on tables, therefore all the data
   must be in tables.

<P><LI>If internal data structures and pointers were visible to the user,
   the data would not appear to be in a table. It would appear to be in
   some DBMS dependent structure.

<P><LI>Without SELECTION, the DBMS could not perform operations on subsets of
   the table. It would be forced to operate on the entire table. In effect,
   it would be just a file handler.
<P>
   Without PROJECTION, the DBMS could only perform operations on an entire
   row. Therefore, it would be just a unit record handler.
<P>
   Without JOIN, data could not be correlated across tables. It would not
   be a related database, just a collection of unrelated tables.
<P>
</OL>The following additional terms are associated with relational database
theory:
<P>
<PRE>   primary key
   foreign key
   null values
   duplicate values
   updatable values
   derivative data
   constraints
   referential integrity

</PRE></OL>For more information on relational database theory, refer to any of the
books listed in the BIBLIO.MDB database in Visual Basic version 3.0.
<P>
<P><h2>VISUAL BASIC CAN USE SQL</h2>
 
<P>
The Microsoft Access engine included with Visual Basic version 3.0 uses a
dialect of Structured Query Language (SQL). This dialect is based on the
ANSI 1986 standard and differs from that of Microsoft's SQL Server in
certain syntax. For that syntactical reference, please refer to Appendix B
of "Microsoft Visual Basic 3.0: Professional Features Book 2: Data Access
Guide."
<P>
The SQL parsing capability of the Microsoft Access engine adds considerable
power and flexibility to Visual Basic. SQL gives database programmers and
users more leverage and a standardized approach to querying databases.
<P>
<P><h2>VISUAL BASIC USES THE MICROSOFT ACCESS DATABASE ENGINE</h2>
 
<P>
Visual Basic version 3.0 uses the database engine from Microsoft Access
version 1.1. This engine provides data access to many database formats,
including Microsoft Access, FoxPro, dBASE, Paradox, Btrieve, SQL Server,
Oracle, and other formats that support the ODBC specification.
<P>
The Microsoft Access database engine in Visual Basic version 3.0 provides
the following:

<UL><LI>Provides a query engine
<LI>Supports multi-user applications
<LI>Allows for transaction processing
<LI>Offers choice of optimistic or pessimistic locking
<LI>Supports rich data types such as sound, video, OLE objects, and pictures
<LI>Parses SQL
<LI>Performs distributed joins, such as joining a FoxPro table with an
   Oracle table
<LI>Performs updatable queries and query optimization
<LI>Supports international collating orders.
<P>
</UL>In Visual Basic, you can harness the database engine in two different ways:

<OL><P><LI>By writing code using the data definition language (DDL) and data
   manipulation language (DML). This involves dimensioning and using
   database object variables.

<P><LI>By using the data control and bound controls. Bound controls include the
   text box, label, check box, image control, and picture control in the
   Standard Edition of Visual Basic, plus the masked edit, 3DPanel, and
   3DCheckBox in the Professional Edition. You can enable data access
   without code by setting design-time properties or by setting properties
   in run-time code.
<P>
</OL>Programmers can handle database objects easily in Visual Basic code. The
object layer provides a uniform system catalog, independent of whether
the database is a Microsoft Access database or an external database such as
an ODBC or ISAM database. You can gain access to the hierarchical structure
of the system catalog by using the TableDef objects in the TableDefs
collection of each database.
<P>
<P><h3>Component Model of Data Access in Visual Basic</h3>
 
<P>
The architecture of the database components is the same for Microsoft
Access version 1.1 and Visual Basic version 3.0.
<P>
You can access three types of databases from Visual Basic:

<OL><P><LI>Microsoft Access databases, which are native to Visual Basic's database
   engine. Visual Basic can use Microsoft Access databases directly.

<P><LI>Indexed sequential access method (ISAM) databases, such as dBASE,
   Paradox, and Btrieve databases. Visual Basic reaches these databases
   through user-installable drivers that link Visual Basic to the specific
   databases.

<P><LI>Open Database Connectivity (ODBC) accessible databases. These include
   client-server database management systems (DBMS), such as Microsoft SQL
   Server and ORACLE. Visual Basic reaches these databases through the
   appropriate ODBC drivers.
<P>
</OL>Various gateways are also available to connect to databases on mainframe
computers. This is usually implemented through an ODBC driver.
<P>
<P><h2>DATA ACCESS OBJECT HIERARCHY</h2>
 
<P>
At the top of the database object hierarchy is the Database object, not to
be confused with the Database property of the data control. One of the
properties of the Database object is the TableDefs collection, which is
also an object. The TableDefs collection represents all the individual
TableDef objects associated with the Table objects. Please read further
about objects in the NOTE sections in the sample program below.
<P>
<P><h3>Step-by-Step Example Shows How to Use Database Objects</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add four list boxes to the form.

<P><LI>Add the following code to the Form Load event:
<P>
<PRE>   Sub Form_Load ()
      form1.Show
      Dim MyDb As Database
      Dim MySingleTableDef As TableDef
      Dim AllTableDefs As TableDefs
      Set MyDb = OpenDatabase("BIBLIO.MDB", True, False)
      Set AllTableDefs = MyDb.TableDefs
      For i = 0 To AllTableDefs.Count - 1
         ' Only Count property is applicable to top-level Tabledefs object
         list1.AddItem AllTableDefs(i).Name ' Get each table name in MyDb
         list2.AddItem AllTableDefs(i).DateCreated
         list3.AddItem AllTableDefs(i).Updatable
         list4.AddItem AllTableDefs(i).Attributes
         ' Value property is only valid if part of a recordset:
         ' list5.AddItem AllTableDefs(i).Value
      Next i
   End Sub

</PRE><P><LI>Start the program or press the F5 key. Examine the contents of the list
   boxes. Close the form to end the program.
<P>
   NOTE: Using the values of the Name property of the TableDefs object (the
   top-level collection), you can examine the properties of the TableDef
   object of the individual tables as shown below. You can walk through
   the Fields collection of the TableDef object of the individual tables
   using the Count property. The Count property is the only property of
   the collection objects. The collection objects are Fields, TableDefs,
   and Indexes.

<P><LI>Add four more list boxes to the form, numbered 5 through 8.

<P><LI>Append the following code to the existing code in the form load
   procedure:
<P>
<PRE>   ' Get information on the first table listed on list box 1:
   Set MySingleTableDef = MyDb(list1.List(0))
   For i = 0 To MySingleTableDef.Fields.Count - 1
      list5.AddItem MySingleTableDef.Fields(i).Name
      ' or you can use: list5.AddItem MySingleTableDef(i).Name
      ' because Fields are the default collection.
      list6.AddItem MySingleTableDef.Fields(i).Size
      list7.AddItem MySingleTableDef.Fields(i).Type
      If i &lt;= MySingleTableDef.Indexes.Count - 1 Then
         list8.AddItem MySingleTableDef.Indexes(i).Name
      End If

      ' The Value property is only valid if part of a recordset:
      ' MySingleTableDef.Fields(i).Value
      ' The other 5 properties are valid for a field of a TableDef object:
      ' MySingleTableDef.Fields(i).OrdinalPosition
      ' MySingleTableDef.Fields(i).CollatingOrder
      ' MySingleTableDef.Fields(i).Attributes
      ' MySingleTableDef.Fields(i).SourceField
      ' MySingleTableDef.Fields(i).SourceTable
   Next i

</PRE><P><LI>Start the program or press the F5 key. Examine the contents of the list
   boxes. Close the form to end the program.
<P>
   NOTE: The Field and Index objects are contained in the Field and
   Index collections of the Table and TableDefs objects. The following
   code shows this.

<P><LI>Append the following code to the existing code in the form load
   procedure:
<P>
   msgbox "Next, show indexes for the " &amp; MySingleTableDef.Name &amp; " Table"
   list5.Clear
   list6.Clear
   list7.Clear
   list8.Clear
   For i = 0 To MySingleTableDef.Indexes.Count - 1
<P><PRE>      list5.AddItem MySingleTableDef.Indexes(i).Name
      list6.AddItem MySingleTableDef.Indexes(i).Primary
      list7.AddItem MySingleTableDef.Indexes(i).Unique
      list8.AddItem MySingleTableDef.Indexes(i).Fields
      ' property of Index object: indicates simple/composite keys
      ' Determines which TableDef fields are key fields in an index.
      ' Read-only when the Index is a member of a collection.
      ' Read/write only in the Professional Edition
      ' with a new object not yet appended to an Indexes collection.
      ' An Index object has field(s) representing key values
      ' for each record. Field names are separated by semicolons.
</PRE>   Next i
<P>
</OL><h2>REFERENCES</h2>
 

<UL><LI>"Microsoft Visual Basic 3.0: Professional Features Book 2:
   Data Access Guide."

<LI>The VISDATA.MAK file installed in the VB3\SAMPLES\VISDATA directory
   loads extensive examples of data access. The VISDATA sample program
   uses every data access function in Visual Basic. You can refer to the
   VISDATA source code for examples of how to use each data access
   function.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 1.10 2.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 20, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

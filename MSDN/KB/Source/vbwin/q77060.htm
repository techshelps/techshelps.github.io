

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Print a VB Picture Control Using Windows API Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q77060 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1991/10/07">
<META NAME="Keywords" CONTENT="kbprint kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains how to print a Visual Basic picture control to a printer using several Windows API function calls.  NOTE: this example will not work correctly on PostScript printers. Instead of the picture control printing, two blank sheets a...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOX,QBS0,QDL9,QBWO,QBWN,QAB5,QAYS,QACT,QAY2,QAMN,QA7O,QAOE,QAY5,QBWQ,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Print a VB Picture Control Using Windows API Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q77060 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to print a Visual Basic picture control to a
printer using several Windows API function calls.
<P>
NOTE: this example will not work correctly on PostScript printers. Instead
of the picture control printing, two blank sheets are ejected from the
printer when using a printer configured to use the PostScript printer
driver. For the example to work correctly, the printer must use a standard
non-PostScript laser printer configuration (such as PCL/HP.)
<P>
For additional information on printing to PostScript printers, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q85978.htm">Q85978</A></B>
   TITLE     : Print Form or Client Area to Size on PostScript or
               PCL Printer

</PRE><h2>MORE INFORMATION</h2>
 
<P>
To print a picture control from Visual Basic, you must use the
PrintForm method. Although this can very useful, there is no
straightforward method of printing just a picture control without the
use of API function calls. Printing a picture control to the printer
is useful when you want to control the location or size of the printed
image. Calling API functions to print a picture control is also useful
if you want to include other images or text along with the picture
image on a single sheet of paper.
<P>
To print a bitmap, you need to do the following:

<OL><P><LI>Create a memory device context that is compatible with the
   bitmap (CreateCompatibleDC). A memory device context is a block of
   memory that represents a display surface. It is used to prepare
   images before copying them to the actual device surface of the
   compatible device.

<P><LI>Save the present object (SelectObject) and select the picture
   control using the handle from the memory device context.

<P><LI>Use the BitBlt or StretchBlt function to copy the bitmap from the
   memory device context to the printer.

<P><LI>Remove the bitmap from the memory device context (SelectObject) and
   delete the device context (DeleteDC).
<P>
</OL><h3>Step-by-Step Example</h3>
 
<P>
The following steps demonstrate this process:

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Add a picture control (Picture1) to Form1 and set the AutoRedraw
   property to True.

<P><LI>Add a command button (Command1).

<P><LI>Display some graphics in Picture1 by loading from a picture file or
   pasting from the Clipboard at design time. You can load a picture
   from a file as follows:
<P>
   a. Select the Picture property from the Properties bar.
<P>
   b. Click the arrow at the right of the Settings box, then select the
<P><PRE>      desired picture file (such as a .BMP or .ICO file supplied with
      Microsoft Windows) from the dialog box.
</PRE>
<P><LI>Add the following declarations to the global Declarations section of
   the Code window. Enter each Declare statement as one, single line.
<P>
<PRE>   Declare Function CreateCompatibleDC% Lib "GDI" (ByVal hDC%)

   Declare Function SelectObject% Lib "GDI" (ByVal hDC%, ByVal hObject%)

   Declare Function StretchBlt% Lib "GDI" (ByVal hDC%, ByVal X%,
      ByVal Y%, ByVal nWidth%, ByVal nHght%, ByVal hSrcDC%, ByVal XSrc%,
      ByVal YSrc%, ByVal nSrcWidth%, ByVal nSrcHeight%, ByVal dwRop&amp;)

   Declare Function DeleteDC% Lib "GDI" (ByVal hDC%)

   Declare Function Escape% Lib "GDI" (ByVal hDC As Integer,
      ByVal nEscape As Integer, ByVal nCount As Integer,
      LpInData As Any, LpOutData As Any)

</PRE><P><LI>Add the following code to the Command_Click event:
<P>
<PRE>   Sub Command1_Click ()
      Const SRCCOPY = &amp;HCC0020
      Const NEWFRAME = 1
      Const PIXEL = 3

      '* Display hour glass.
      MousePointer = 11
      Picture1.Picture = Picture1.Image

      '* StretchBlt requires pixel coordinates.
      Picture1.ScaleMode = PIXEL
      Printer.ScaleMode = PIXEL

      Printer.Print ""

      hMemoryDC% = CreateCompatibleDC(Picture1.hDC)
      hOldBitMap% = SelectObject(hMemoryDC%, Picture1.Picture)

      'Enter the following three lines as one, single line:
      ApiError% = StretchBlt(Printer.hDC, 0, 0, Printer.ScaleWidth,
         Printer.ScaleHeight, hMemoryDC%, 0, 0, Picture1.ScaleWidth,
         Picture1.ScaleHeight, SRCCOPY)

      hOldBitMap% = SelectObject(hMemoryDC%, hOldBitMap%)
      ApiError% = DeleteDC(hMemoryDC%)

      Result% = Escape(Printer.hDC, NEWFRAME, 0, 0&amp;, 0&amp;)

      Printer.EndDoc

      MousePointer = 1
   End Sub

</PRE><P><LI>Run the program to copy the bitmap to the printer. If you have
   selected a low resolution from the Print Manager, printing the
   bitmap will proceed quickly (the lower the resolution, the faster
   the print time). While designing your software, you may want
   to keep this at the lowest possible resolution. The print
   resolution can be changed from the Windows Control Manager.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
"Programming Windows: The Microsoft Guide to Writing Applications
for Windows 3," Charles Petzold, Microsoft Press, 1990
<P>
"Microsoft Windows Software Development Kit: Reference Volume 1,"
version 3.0
<P>
"Microsoft Windows Software Development Kit: Guide to Programming,"
version 3.0.
<P>
WINSDK.HLP file shipped with Microsoft Windows 3.0 Software
Development Kit
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprint kbprg kbcode<BR>
KBSubcategory: APrgPrint<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

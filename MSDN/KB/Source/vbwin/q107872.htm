

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB Ver 3.0 CDK TN001.TXT: Support for DT_OBJECT Properties </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107872">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/11/30">
<META NAME="Keywords" CONTENT="kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The following article contains the complete contents of the TN001.TXT file installed in the CDK directory of the Professional Edition of Visual Basic version 3.0 for Windows.  MORE INFORMATION  TN001.TXT ---------  Microsoft Visual Basic 3.00 Micro...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QBBS,QAO2,QAO3,QA7O,QAB5,QAOE,QAMN,QA9Q,QAW6,QAUD,QBWC,QAUR,QASR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB Ver 3.0 CDK TN001.TXT: Support for DT_OBJECT Properties</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107872</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following article contains the complete contents of the TN001.TXT file
installed in the CDK directory of the Professional Edition of Visual
Basic version 3.0 for Windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>TN001.TXT</h3>
 
<P>
Microsoft Visual Basic 3.00
Microsoft Corporation Technical Notes
<P>
TN001.TXT:  Support for DT_OBJECT Properties
<P>
This note describes how to use OLE Automation by creating a custom control
property whose data type is DT_OBJECT.
<P>
 
<P>
 
<P><h3>Introduction</h3>
 
<P>
The Visual Basic version 3.0 Control Development Kit allows you to create
custom controls that support OLE Automation. A custom control can define
a DT_OBJECT type property, whose value is a 4-byte pointer to an IDispatch
interface. If your control can contain or refer to an OLE object, you
may want to expose this ability via a property of type DT_OBJECT.
<P>
This allows you to use Visual Basic statements such as:
<P>
<PRE>   Dim MyObject As OBJECT
   Set MyObject = Control.Object
   MyObject.Method...

</PRE>or, more directly:
<P>
<PRE>   Control.Object.Method

</PRE> 
<P><h3>Reference Counts</h3>
 
<P>
OLE has strict guidelines for maintaining reference counts on interface
pointers. Functions that return interface pointers increment the reference
count on the pointer on behalf of the caller. For example, calling
VBGetControlProperty for a DT_OBJECT property causes the returned
interface pointer to be incremented. However, the caller is responsible
for eventually releasing the reference to the interface pointer
by using IUnknown::Release().
<P>
If the property is PF_fGetMsg, you are responsible for incrementing the
reference count on the interface pointer you return in your VBM_GETPROPERTY
message code.
<P>
 
<P><h3>Example</h3>
 
<P>
You may want to create a control that is an OLE container, meaning that you
expose a pointer to an IDispatch interface via a DT_OBJECT property.
When the OLE object is initially created within the control, the control
could establish a connection to the OLE object by setting a pointer to an
IDispatch interface via IUnknown::QueryInterface(). The reference count for
the interface pointer would then be incremented from zero to one.
<P>
When the control is destroyed, or the control causes the OLE object
it contains to be released, the control would also need to release the
interface pointer using IUnknown::Release(). If the DT_OBJECT property is
PF_fGetData, then all reference count maintenance associated with fetching
the property is automatically handled by Visual Basic. If, on the other
hand, the DT_OBJECT property is PF_fGetMsg, you would need to call
IUnknown::AddRef() on the interface pointer in your VBM_GETPROPERTY message
code.
<P>
If there is no valid IDispatch interface, VBGetControlProperty returns
NULL (DWORD 0).
<P>
 
<P><h3>Property Flags</h3>
 
<P>
Because the IDispatch interface pointer can be used only at run time,
you cannot save or load an interface pointer while saving or loading a
form. For this reason, you cannot use the PF_fSaveData flag on your
DT_OBJECT property.
<P>
You might want use to PF_fSaveMsg to enable you to do more sophisticated
processing at save or load time. For example, you could handle
VBM_SAVEPROPERTY by serializing the OLE object corresponding to the
interface pointer into the form file, and handle VBM_LOADPROPERTY by
deserializing the object and getting a pointer to an IDispatch interface to
it to set your property.
<P>
A property defined as DT_OBJECT cannot be set. This means that you cannot
use the property flags PF_fSetData or PF_fSetMsg. In addition, you should
specify the PF_fNoRuntimeW flag for a DT_OBJECT property.
<P>
Because you cannot view or modify the value of a DT_OBJECT property at
design time, you should specify the PF_fNoShow flag for your DT_OBJECT
property.
<P>
<P><h3>Note</h3>
 
You should not designate a DT_OBJECT property as the default property
for your control.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: ENDUSER 3.00<BR>
KBCategory: kbole kbprg<BR>
KBSubcategory: IAPOLE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

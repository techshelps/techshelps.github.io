

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error When Referring to Member Object/Collection in OLE DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143261">
<META NAME="KBModify" CONTENT="1996/05/20">
<META NAME="KBCreate" CONTENT="1996/01/29">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Assigning an object dimensioned in a client application to a Public member object inside an OLE DLL, or referencing a property of the member object may give a General Protection Fault or OLE Automation Error depending upon how the member object was...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAH4,QAJ6,QA9Q,QAO4,QBE7,QBE6,QBXS,QARL,QBS0,QAIS,QACI,QAFF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Error When Referring to Member Object/Collection in OLE DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 20, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143261</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, 32-Bit Edition, for
   Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Assigning an object dimensioned in a client application to a Public member
object inside an OLE DLL, or referencing a property of the member object
may give a General Protection Fault or OLE Automation Error depending upon
how the member object was declared and whether or not it has been
instantiated.
<P>
The problem discussed in this article only occurs when the server is
compiled as an OLE DLL (In-Proc server) and the client has been compiled as
an EXE.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be an issue in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>More Information</h2>
 
<P>
The General Protection Fault can occur if the member object was constructed
by declaring it as a property using the New keyword in the declarations
section of a class module, and if the DLL code has not instantiated the
object by referring to a property or method of that object before the
client application is accessing the member object.
<P>
In a class module, it is possible to create a member object by placing a
declaration like so:
<P>
<PRE>   Public x as New Class2

</PRE>Here x is a member object (of type Class2). However, it will not be
instantiated until a property or method of x is invoked.
<P>
The problem discussed in this article is that x may not be correctly
instantiated if a property or method of x is first used in the client
application, and x is a member object contained in an OLE DLL. Under these
circumstances, a General Protection Fault or OLE Automation Error may
occur.
<P>
<P><h2>Workaround</h2>
 
<P>
By implementing the member object property so that it is instantiated upon
startup of the parent class to the member, this problem can be avoided.

<OL><P><LI>To fix this problem, the MemberObj object can be dimensioned in the
   General Declarations section of a Class1 module as below:
<P>
   Public MemberObj as Class2
<P>
   Then, the Set statement is used to instantiate the member object in the
   Initialize event of the parent class. Also, the member object should be
   released in the Terminate event:
<P>
   Private Class1_Initialize()
   Set MemberObj = New Class2
<PRE>   End Sub

   Private Class1_Terminate()
   Set MemberObj = Nothing
   End Sub

   Public Collection objects should also be implemented in the same fashion
   in an OLE DLL. For example, if there is to be a Collection object as a
   member object to a class, using the above workaround, the declaration
   below should NOT be used:

   Public x as New Collection

   Rather, the OLE DLL Server should ensure that the Collection object is
   instantiated before the client begins using it. It would be accomplished
   in the same way as the example above. In the General Declarations
   section of the Class1 module

   Public x as Collection

   and then, in the Initialize event of Class1, the Collection member
   object is instantiated:

   Private Class1_Initialize()
   Set x = New Collection
   End Sub

   Private Class1_Terminate()
   Set x = Nothing
   End Sub

   The latter method ensures that the member object will be correctly
   instantiated and avoids a potential problem of accessing it from a
   client.

</PRE><P><LI>A second workaround involves keeping the original declaration for a
   member object, but referring to a property or method of the member
   object within the Initialize event of the parent class. When the
   property or method of the member object is invoked, the object will be
   correctly instantiated.
<P>
   For example, to implement a Collection class, it could be declared
   within the parent class as
<P>
   Public x as New Collection
<P>
   and then referred to in the initialize event of the parent class, so
   that the member object becomes instantiated:
<P>
<PRE>   Sub Class1_Initialize()
   Dim I As Integer
   I = x.Count
   End Sub

</PRE></OL><h3>Steps to Reproduce Problem</h3>
 
<P>
Create the OLE Server Application:

<OL><P><LI>Start a new project in Visual Basic.  Form1 is created by default.

<P><LI>Insert two class modules into the project by choosing Insert.Class
   Module from the menu. Also, insert a standard code module by choosing
   Insert.Module.

<P><LI>For both Class Modules, change the Instancing property to 2-Createable
   MultiUse and the Public property set to True.

<P><LI>In Class1, place the following line of code in the General Declarations
   section:
<P>
   Public MemberObj as New Class2

<P><LI>Inside the standard code module place the following two lines of code:
<P>
<PRE>   Sub Main()
   End Sub

</PRE><P><LI>From the menu choose Tools.Options, and in the Project tab select the
   OLE Server radio button, and change the name of the Project to DLLGPF.
   Also, for the Startup Form, select Sub Main() from the choices. Press
   the OK button.

<P><LI>Compile the project as an OLE DLL.
<P>
</OL><h3>Create the Client Application</h3>
 

<OL><P><LI>Start a new Project in Visual Basic. Form1 is created by default.

<P><LI>In the Form_Click event, place the following code:
<P>
   Dim x as Object
   Dim y as New DLLGPF.Class1
<P>
   Set x = y.MemberObj

<P><LI>Choose Tools.References, and select the checkbox corresponding to
   DLLGPF.

<P><LI>From the menu, choose File.Make EXE and call the executable
   Client.exe.
<P>
</OL>Upon running Client.exe and clicking on Form1, a General Protection Fault
occurs.
<P>
On Windows 95, a General Protection Fault generally occurs (in one test
this occurred in Vb40032.dll at 0137:0f7269d9). On Windows NT 3.51, a
General Protection Fault can occur, and also a Run-time error '-2146500594
(800f000e)' can occasionally occur.
<P>
Notably, the General Protection Fault or OLE Automation Error does not
occur if the client application is run from the Design Environment, or if
the OLE Server is implemented as an Out-of-Proc (EXE) OLE server.
<P>
Another example of reproducing a General Protection Fault can occur if a
Collection object is a member object of the OLE DLL, and if the Client
application refers to the Count property of the Collection object before
the member collection object has been instantiated (the count of the
Collection object will be zero when this is the case).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb432 gpf gp-f check box<BR>
KBCategory: kbprg<BR>
KBSubcategory: IAPOLE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 20, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

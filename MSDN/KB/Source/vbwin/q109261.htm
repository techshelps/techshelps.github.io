

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use TABs in a VB Text Box Without Changing the Focus </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109261">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/12/30">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows by example how to use the TAB keypress within a control, such as a text box. Normally, the TAB key causes the focus to move away from that control. The sample program in this article shows you how to change this behavior so you c...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QBT6,QBV4,QAPN,QADO,QBS0,QARP,QAHP,QAHV,QAH4,QBWS,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use TABs in a VB Text Box Without Changing the Focus</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109261</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by example how to use the TAB keypress within a control,
such as a text box. Normally, the TAB key causes the focus to move away
from that control. The sample program in this article shows you how to
change this behavior so you can use the TABs within a text box.
<P>
The sample program does this by setting the TabStop property of all
controls on the form to False when the text box has the focus. Tabbing
changes focus between any controls which have a TabStop property equal to
True, which is the default. When the TabStop property is true for one or
more controls on a form, Visual Basic does not allow tabs to be entered
directly into a control.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
In the example below, the Text2 box will accept and hold TAB keystrokes,
keeping them in the Text property along with the other entered characters.
The Text1 and Text3 boxes will not accept TAB keystrokes. When Text1 and
Text3 have the focus, pressing the TAB key changes the focus to the next
control in the tab order.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add three text boxes (Text1, Text2, and Text3) to Form1. Select the
   Text2 box and press the F4 key to display the Properties window. Set the
   MultiLine property of Text2 to True.
<P>
   NOTE: When you press the TAB key, single-line text boxes beep and do not
   accept the TAB keystroke, but multiLine text boxes do accept TAB
   keystrokes.

<P><LI>Double-click the Text2 box to open the code window. Choose the GotFocus
   event from the Proc box. Add the following code to the Text2 GotFocus
   event:
<P>
<PRE>   Sub Text2_GotFocus ()
      ' When Text2 gets the focus, clear all TabStop properties on all
      ' controls on the form. Ignore all errors, in case a control does
      ' not have the TabStop property.
      On Error Resume Next
      For i = 0 To Controls.Count - 1   ' Use the Controls collection
         Controls(i).TabStop = False
      Next
   End Sub

   NOTE: See the "Controls Collection" section below for an explanation of
   the Controls collection.

</PRE><P><LI>Choose the LostFocus event from the Proc box. Add the following code to
   the Text2 LostFocus event:
<P>
<PRE>   Sub Text2_LostFocus ()
      ' When Text2 loses the focus, make the TabStop property True for all
      ' controls on the form. That restores the ability to tab between
      ' controls. Ignore all errors, in case a control does not have the
      ' TabStop property.
      On Error Resume Next
      For i = 0 To Controls.Count - 1   ' Use the Controls collection
         Controls(i).TabStop = True
      Next
   End Sub

</PRE><P><LI>Start the program, or press the F5 key. Press the TAB key to give focus
   to Text2. Enter text into the Text2 box, pressing the TAB key as needed.
   Whenever Text1 or Text3 has the focus, pressing the TAB key moves the
   focus to the next control. Whenever Text2 has the focus, TAB keystrokes
   remain with the text in the text box. Close the form to end the program.
<P>
</OL><h3>Tab Order</h3>
 
<P>
By default, Visual Basic assigns tab order to controls in the order you
draw them on a form. Each new control is placed last in the tab order. You
can control the order that controls gain focus in your application by
changing the tab order at design time through the Properties window, or at
run time through code.
<P>
To change tab order at design time:

<OL><P><LI>Click a control to select it.

<P><LI>From the Properties window, select TabIndex. Visual Basic displays the
   current tab position in the Settings box.

<P><LI>Type the number for the tab order position you want the control to have.

<P><LI>Click the Enter button. You can test the tab order at design time by
   pressing Tab.
<P>
</OL>To enable or disable a tab stop at design time:

<OL><P><LI>Click a control to select it.

<P><LI>From the Properties window, select TabStop. Visual Basic displays the
   current Boolean value in the Settings box.

<P><LI>Select True to designate the control as a tab stop, or select False to
   bypass the control in the tab order.

<P><LI>Click the Enter button.
<P>
</OL>When you change a control's tab order position, Visual Basic automatically
renumbers the tab order positions of other controls to reflect insertions
and deletions.
<P>
A control whose TabStop property has been set to False maintains its
position in the actual tab order as set by the TabIndex property, even
though the control is skipped when you cycle through the controls by using
the TAB key. If the TabStop property is False for all controls on the form,
you can enter TAB keystrokes into MultiLine text boxes.
<P>
<P><h3>Controls Collection</h3>
 
<P>
The Controls collection is a collection whose elements represent each
control on a form, including elements of control arrays. The Controls
collection has a single property (Count) that specifies the number of
elements in an array.
<P>
The Controls collection enumerates loaded controls on a form and is useful
for iterating through them. The index in the syntax is between 0 and
Controls.Count-1.
<P>
NOTE: Controls is a keyword but not a reserved word. It identifies an
intrinsic form-level variable named Controls. If you omit the optional form
reference, you must include the Controls keyword. If you include a form
reference, you can omit the Controls keyword. For example, the following
two lines have the same effect:
<P>
MyForm.Controls(6).Top = MyForm.Controls(5).Top + increment
MyForm(6).Top = MyForm(5).Top + increment
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

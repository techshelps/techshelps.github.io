

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: GP Fault if Uninitialized String Passed to API Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105807">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/10/25">
<META NAME="Keywords" CONTENT="kbprg kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When you incorrectly call a Windows API function as described in the CAUSE section further below, you can receive a general protection (GP) fault     Application error: VB caused a General Protection Fault in VB.EXE    at nnnn:nnnn  or one of the f...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBKN,QBS0,QAY5,QATX,QAB9,QDL9,QBWQ,QBWO,QBWN,QAAP,QDIT,QAB4,QBV8,QAPN,QAHE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: GP Fault if Uninitialized String Passed to API Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105807</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you incorrectly call a Windows API function as described in the CAUSE
section further below, you can receive a general protection (GP) fault
<P>
<PRE>   Application error: VB caused a General Protection Fault in VB.EXE
   at nnnn:nnnn

</PRE>or one of the following error messages:

<UL><LI>Assertion failed
<LI>Bad handle
<LI>Bad heap block
<P>
</UL><h2>CAUSE</h2>
 
<P>
Invoking a Windows API function in any of the following incorrect ways can
give you a GP fault or another memory violation error:

<UL><LI>a passed string initialized to a value that is too short to receive the
   return value (See example below.)
<LI>incorrect placement of ByVal in the Declare statement
<LI>undefined parameters in the function declaration or invocation
<LI>incorrect type or length of parameters in the function declaration or
   invocation
<P>
</UL>Windows requires you to ensure memory integrity when calling API functions.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
If you get a GP fault or another memory error when calling a Windows API
function, check that you have properly defined and passed all parameters.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
String parameters passed from Visual Basic to Windows API functions must be
initialized to at least the size of the data returned in them, or else you
may get a general protection fault.
<P>
The following example causes a GP fault by invoking the GetProfileString
API function with a string initialized with a too-small value.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start Visual Basic with a new, empty project.

<P><LI>Place the following correct Declare statement for GetProfileString
   in the General Declarations section:
<P>
<PRE>   'Enter the following Declare statement as one, single line:
   Declare Function GetProfileString Lib "Kernel"
      (ByVal lpAppName As String, ByVal lpKeyName As String,
      ByVal lpDefault As String, ByVal lpReturnedString As String,
      ByVal nsize As Integer) As Integer

   'NOTE: The GetProfileString function is located in the KERNAL.DLL file,
   'which is usually located in the \WINDOWS\SYSTEM directory

</PRE><P><LI>Add a Command button to Form1, and add the following code to the
   Command1_Click event procedure:
<P>
   dim size, str1 as string
<PRE>   str1 = ""    ' To avoid GP fault, initialize with a longer string:
                ' str1="abcdefghijklmnopqrstuvwxyz"
   size = GetProfileString("intl", "sLongDate", "-1", str1, 1024)

   The above API function looks in the WIN.INI file under the [intl]
   section and retrieves the string after sLongDate=. The function returns
   a string in the address of its fourth argument. If you fail to define
   the fourth argument or you initialize it to a string that is smaller
   than the retrieved string, an assertion error occurs. If you define the
   fourth argument with a string that is larger than the retrieved string,
   the call will succeed. For example, change the line str1="" to
   str1="abcdefghijklmnopqrstuvwxyz" and the code will work.

</PRE><P><LI>Execute the code. VB.EXE will give the following error messages:
<P>
<P><PRE>      An error has occurred in your application. If you choose Ignore, you
      should save your work in a new file. If you choose Close your
      application will terminate. &lt;Close&gt; &lt;Ignore&gt;
</PRE><P>
   followed by:
<P>
<P><PRE>      Application error: VB caused a General Protection Fault in VB.EXE
      at 004A:0122
</PRE><P>
</OL>Windows API functions must be called with valid parameters. If you in
effect tell Windows to overwrite some part of Visual Basic internal memory,
this usually causes a GP fault or other memory problem. This usually ends
the Visual Basic session. In Windows version 3.1, memory of other Windows
applications should not be affected. But in Windows version 3.0, a GP fault
means you must restart Windows itself, thus ending all current applications
in memory.
<P>
<P><h2>REFERENCES</h2>
 

<UL><LI>"Visual Basic: Programmers Guide" for version 3.0, Chapter 24,
   "Calling Procedures in DLLs."

<LI>The correct Declare statements for API functions are in the Visual Basic
   Professional Edition help file WIN31API.HLP, which is located in the
   WINAPI subdirectory of your Visual Basic directory. The WIN31API.HLP
   file contains function declarations, Type declarations, and the values
   for global constants used in the API functions.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 GPF<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: APrgINI<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

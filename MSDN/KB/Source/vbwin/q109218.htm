

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Table Objects Versus Dynaset/Snapshot Objects in VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109218">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1993/12/28">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article discusses the advantages and disadvantages of using Table objects versus Dynaset and Snapshot objects for finding and updating data in a database table. This applies to the Microsoft Access database engine used in Visual Basic version ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAPN,QAW6,QBS0,QABA,QA2O,QARR,QA1S,QDMH,QAU3,QAMR,QATJ,QAZV,QAH4,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Table Objects Versus Dynaset/Snapshot Objects in VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109218</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses the advantages and disadvantages of using Table
objects versus Dynaset and Snapshot objects for finding and updating data
in a database table. This applies to the Microsoft Access database engine
used in Visual Basic version 3.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The three types of recordsets are Tables, Dynasets, and Snapshots. All
recordsets have records (rows) and fields (columns). The Professional
Edition of Visual Basic lets you create object variables of type Dynaset,
Snapshot, and Table. The Standard Edition supports Dynaset object variables
but not Snapshot or Table object variables.
<P>
A table is a fundamental part of a Database and contains data about a
particular subject. A Table object is a logical representation of a
physical table.
<P>
To make a Snapshot or Dynaset, use the CreateSnapshot or CreateDynaset
method on a Database or any recordset. A Snapshot is a static, read-only
picture of a set of records that you can use to find data or generate
reports. The records in a Snapshot cannot be updated (or modified), whereas
records in a Dynaset can be updated.
<P>
The move methods (MoveFirst, MoveLast, MoveNext, and MoveLast) apply to all
three types of recordsets (Dynasets, Snapshots, and Tables).
<P>
The find methods (FindFirst, FindLast, FindNext, and FindPrevious) apply
to Dynaset objects and Snapshot objects, but not to Table objects. The
Seek method applies only to Table objects.
<P>
For intensive searches, you may want to use both Table and Dynaset objects
on the same base table. You can use the Seek method on the Table objects
and the find methods on any open Dynasets.
<P>
Visual Basic data controls always use Dynasets. Data controls don't use
Snapshot objects or Table objects.
<P>
Dynaset objects are a set of record pointers to those records which existed
in the base table in the Database at the time the Dynaset was created. Your
Dynaset also adds pointers to any new records which you add to the Dynaset,
and deletes pointers of deleted records.
<P>
If you add a record to a base table, the record does not immediately appear
in any currently existing Dynaset based on that table. You would need to
re-create the Dynaset to see a new record that was added to the base table
after the Dynaset was created. However, if you add a new record to a
Dynaset, the record appears immediately in both the Dynaset and the base
table. Deleting a record is reflected in a similar way.
<P>
Dynasets Versus Tables in Multiuser and Single-User Environments
 
<P>
Table objects connect directly to base tables that are globally accessible
to all users on a multiuser system. All users using Table object variables
can see all records in the base table at all times. In contrast, Dynasets
are local to each program. Your local additions and deletions are reflected
in the Dynaset. Dynasets don't reflect records that other users added or
deleted after the local Dynaset was created.
<P>
In a multiuser environment (computer network), Dynasets may not be
suitable for updating shared tables. Data controls, because they use
Dynasets, are unsuitable for such applications as a multiuser order entry
system. NOTE: Two programs simultaneously using the same table on a single
computer act as a multiuser environment.
<P>
If another user on a multiuser system updates a record for which you have
a pointer in your Dynaset, you will see the changes whenever you request
that record. If another user adds a record to the table, you cannot see
that record because the current Dynaset doesn't contain a pointer to that
record. If another user of the base table deletes a record that is in your
Dynaset, your Dynaset keeps a pointer to that non-existent record. Your
subsequent attempts to access that non-existent record will give an error.
<P>
Data controls are suitable for most types of data browsing (read-only
access) and many types of simple data entry.
<P>
In a single-user environment, Table Objects and Dynaset Objects both update
the base table in a similar fashion when records are added or deleted. Data
controls are thus quite suitable for updating databases in single-user
environments.
<P>
Dynaset Objects:

<UL><LI>Dynasets are set-oriented. You can create any arbitrary set of records
   from a single Table, or set of records joined from multiple Tables
   using an SQL SELECT statement. If you need to join tables or use
   subsets, a Dynaset is required. The only way to join more than one
   table is with a Dynaset object.

<LI>When Visual Basic creates a Dynaset, the Dynaset's records are ordered
   using indexes for greater speed. After the Dynaset is created, find and
   move methods within a Dynaset are non-indexed, sequential, and
   relatively slow. Using the Dynaset will be faster if you limit its size
   to a small subset of the records in the base table. Recreating the
   Dynaset with a different subset of records is faster than creating a
   huge Dynaset and navigating it using find and move methods.

<LI>You can sort a Dynaset on any arbitrary field, including expressions,
   such as mid([myfield],2,3), whether the field is indexed or not.

<LI>Using a Dynaset, you can attach external database tables to a Microsoft
   Access format database, which is the format native to Visual Basic. An
   attached table is a table from an external database linked at run time
   to a Microsoft Access format database. You cannot create a Table object
   on an attached table.
<P>
</UL>Table Objects:

<UL><LI>Table objects are record-oriented rather than set-oriented. The methods
   for Table objects let you only retrieve one row at a time, and only from
   one Table at a time. Table objects don't support SQL queries or subsets,
   unless you create a Dynaset or Snapshot from the Table.

<LI>The Seek method finds a given record very quickly because it uses the
   Table's indexes. The Seek method is significantly faster than the find
   methods. For speed and flexibility, you can change the Index property of
   the Table object to change the order of the Seek. The Seek method can
   find values that are in indexed fields, but not in non-indexed fields.

<LI>You can only order the data in Table objects based on existing indexes.
<P>
</UL><h3>Example Showing Speed of Seek in a Table Versus SQL SELECT in a Dynaset</h3>
 
<P>
The fastest way to find a specific record in a recordset is usually a Seek
method on a Table object. The equivalent SQL SELECT statement on a Dynaset
object is usually very close in performance, as long as the SELECT finds
just one record. A SQL SELECT that finds more than one record may be
slower.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Double-click the form to open the code window. Add the following code to
   the Form Load event:
<P>
<PRE>   Sub Form_Load ()
      form1.Show  ' In form Load event, must show form before Print works.
      Dim t As Table
      Dim ds As Dynaset
      Dim db As database
      Set db = OpenDatabase("C:\ACCESS\NWIND.MDB")
      Set t = db.OpenTable("Customers")
      t.Index = "PrimaryKey"

      ' The following Seek is about as fast as the SQL SELECT below:
      Print Time$
      t.Seek "=", "WOLVH"
      Print Time$
      Print t("Customer ID") 'Print Customer ID value of current record

      Print Time$
      ' Enter the following two lines as one, single line:
      Set ds = db.CreateDynaset(
         "SELECT * FROM Customers WHERE [Customer ID] = 'WOLVH' ")
      Print Time$
   End Sub

   NOTE: There is no customer name of WOLVH in NWIND.MDB for Access 2.0.
   Replace WOLVH with WOLZA if you are using Access 2.0.

</PRE><P><LI>Start the program (or press the F5 key). Close the form to end the
   program.
<P>
</OL><h2>REFERENCES</h2>
 

<UL><LI>Visual Basic online Help for the Table, Dynaset, and Snapshot objects,
   and their methods and properties.

<LI>Microsoft Visual Basic version 3.0 "Professional Features Book 2,"
   Data Access Guide section, Chapter 3.

<LI>The VISDATA.MAK file installed in the VB3\SAMPLES\VISDATA directory
   loads extensive examples of data access. The VISDATA sample program
   uses every data access function in Visual Basic. You can refer to the
   VISDATA source code for examples of how to use each data access
   function.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 pros and cons multi-user<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

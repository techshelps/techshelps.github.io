

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparison of Seek Versus Find Methods, for VB Data Access </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108149">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/12/07">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article compares the Seek method to the find methods (FindFirst, FindLast, FindNext, and FindPrevious) for data access in Visual Basic.  MORE INFORMATION  The Seek and find methods differ in performance and in the type of recordsets to which t...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QA5V,QBS0,QATJ,QA28,QAHH,QAPF,QBBI,QACI,QBXN,QBVV,QAG7,QAC1,QDMH,QAHG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Comparison of Seek Versus Find Methods, for VB Data Access</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108149</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article compares the Seek method to the find methods (FindFirst,
FindLast, FindNext, and FindPrevious) for data access in Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Seek and find methods differ in performance and in the type of
recordsets to which they apply:

<UL><LI>The find methods (FindFirst, FindLast, FindNext, and FindPrevious) apply
   to Dynasets and Snapshots but not to Table objects. Conversely, the Seek
   method is available only on the Table object.

<LI>The Seek method is significantly faster than the find methods. It is
   also more flexible because you can change the Index property of the
   Table object to change the order of the Seek. For intensive searches,
   you may want to create a Table object so that you can use the Seek
   method along with the find methods on the open Dynasets.
<P>
</UL><h3>FindFirst, FindLast, FindNext, FindPrevious Methods</h3>
 
<P>
The FindFirst, FindLast, FindNext, and FindPrevious methods locate the
first, last, next, or previous record, respectively, that satisfies the
specified criteria and makes that record the current record. These methods
are referred to as the find methods and have the following syntax:
<P>
<PRE>   &lt;recordset&gt;.FindFirst &lt;criteria&gt;

   where &lt;recordset&gt; and &lt;criteria&gt; are defined as follows:

      &lt;recordset&gt; is the Recordset property of a data control or an object
      variable identifying a Dynaset or Snapshot.

      &lt;criteria&gt; is a string expression specifying the records that you
      want. The string is the WHERE clause in an SQL string without the
      word WHERE.

</PRE>If the recordset contains more than one record that matches the criteria,
FindFirst locates the first occurrence, FindNext locates the next
occurrence, and so on. You can follow a find method with a move method,
such as MoveNext, which moves to the next record regardless of whether it
matches any criteria. If no matching records are found, the NoMatch
property is True and the current record remains the same as it was before
the find method was used.
<P>
NOTE: With a data control, if an Edit or AddNew operation is pending when
you use one of the find or move methods, the Update method is automatically
invoked if not intercepted during the Validate event.
<P>
CAUTION: In the Professional Edition of Visual Basic, if you are not using
a data control and use one of the find or move methods while an Edit or
AddNew method is pending, any existing changes will be lost and no error
will occur. An Edit or AddNew will be pending until an Update occurs. For
more information, see the Update method in the Help menu.
<P>
<P><h3>Example Code for FindFirst Method</h3>
 
<P>
The following example creates a Dynaset, and then uses FindFirst to locate
the first record satisfying the title condition:
<P>
<PRE>   Sub Form_Load ()
      Dim MyCriteria As String, MyDB As Database, MySet As Dynaset
      MyCriteria = "State = 'NY'"    ' Define search criteria.
      Set MyDB = OpenDatabase("BIBLIO.MDB")
      ' Create a Dynaset based on the Publishers table:
      Set MySet = MyDB.CreateDynaset("Publishers")

      ' Find first matching record:
      MySet.FindFirst MyCriteria
      If Not MySet.NoMatch Then
         MsgBox "match was found"
      Else
         MsgBox "match was not found"
      End If  ' For a data control, you can use Data1.Recordset.NoMatch

      ' Find next matching record:
      MySet.FindNext MyCriteria
      If Not MySet.NoMatch Then
         MsgBox "match was found"
      Else
         MsgBox "match was not found"
      End If

   End Sub

</PRE><h3>Seek Method</h3>
 
<P>
The Seek method locates a record that meets the specified criteria for the
current index in an indexed table and makes it the current record. The Seek
method has the following syntax:
<P>
<PRE>   &lt;table&gt;.Seek &lt;comparison&gt;, &lt;key1&gt;, &lt;key2&gt;, ...

   where the arguments are defined as follows:

      &lt;comparison&gt;          is one of the following string expressions:
                            &lt;, &lt;=, =, &gt;=, &gt;, or &lt;&gt;

      &lt;key1&gt;, &lt;key2&gt;, ...   one value for each field in the table's current
                            index.

</PRE>To use the Seek method, you must first use the OpenTable method to create
an object variable for the table.
<P>
Seek searches through the specified Table using the current index and
locates the first record satisfying the criteria specified by comparison
and the key values (key1, key2...) and makes it the current record.
<P>
You must set the current index with the Index property before you use Seek.
If the index identifies a non-unique-key field, Seek locates the first
record satisfying the criteria.
<P>
When the comparison is =, &gt;=, &gt;, or &lt;&gt;, Seek starts at the beginning of the
index and searches forward. When the comparison is &lt;= or &lt;, Seek starts at
the end of the index and searches backward.
<P>
If &lt;table&gt; doesn't refer to an open table, or if there is no current index,
an error occurs.
<P>
Always inspect the value of the NoMatch property of the recordset to
determine whether each Seek method has succeeded. If Seek fails, NoMatch is
True and the current record is unchanged.
<P>
<P><h3>Example Code for Seek Method</h3>
 
<P>
The following example uses Seek to locate the first record in the
Publishers table where the PubID field is 3, using the existing primary key
index:
<P>
<PRE>   Sub Form_Load ()
      Dim MyDB As database, MyTable As table
      Set MyDB = OpenDatabase("BIBLIO.MDB")      ' Open a database.
      Set MyTable = MyDB.OpenTable("Publishers") ' Open a table.
      MyTable.Index = "PrimaryKey"               ' Define current index.
      MyTable.Seek "=", 3                        ' Seek record.
      If MyTable.NoMatch Then
         MsgBox "match was not found"
      Else
         MsgBox "match was found"
      End If
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For more information, please read the Visual Basic online Help for the
Seek, FindFirst, FindLast, FindNext, and FindPrevious Methods.
<P>
You can study the database design of a database file such as BIBLIO.MDB by
opening it with Microsoft Access, or with the Data Manager or VISDATA
provided with Visual Basic.
<P>
You can run the Data Manager program from the Window menu in Visual Basic,
or from the Windows File Manager run DATAMGR.EXE in the Visual Basic
directory.
<P>
The VISDATA.MAK file installed in the VB3\SAMPLES\VISDATA directory loads
extensive examples of data access. The VISDATA sample program uses every
data access function in Visual Basic. You can refer to the VISDATA source
code for examples of how to use each data access function.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 MoveFirst MoveLast MoveNext MovePrevious<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Implement the Type Property of a Custom OLE Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153581">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1996/07/11">
<META NAME="Keywords" CONTENT="IAPOLE kbcode kbhowto kbole kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The type of an OLE control is the coclass name for the OLE control as defined in its ODL file. For example, the type of Textbox control is TextBox, the type of the Data Bound Grid control from Apex is DBGrid, and so on. In Visual Basic, the type of...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QBS0,QAVX,QA9Q,QAVW,QAPN,QAUD,QAHV,QAUJ,QAP2,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Implement the Type Property of a Custom OLE Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153581</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>4.00    | 4.00
</PRE>WINDOWS | WINDOWS NT
kbusage kbole kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic for Windows, 16-bit and 32-bit, version 4.0
<LI>Microsoft Visual C++, 32-bit Edition, version 4.x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The type of an OLE control is the coclass name for the OLE control as
defined in its ODL file. For example, the type of Textbox control is
TextBox, the type of the Data Bound Grid control from Apex is DBGrid, and
so on. In Visual Basic, the type of an OLE Control appears to the right of
the control name in the Editbox portion of the property browser. This
article shows how you can implement a custom Type property for a custom OLE
control that returns its type.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Create a rudimentary 32-bit OLE Control using the MFC CDK that ships
   with Visual C++ 4.x. This article assumes that this custom OCX is called
   Test (coclass name) and that the control class name is CTestCtrl.

<P><LI>Use the Visual C++ MFC ClassWizard to add the following Property to your
   control class. The external name of this Property is Type. It is
   implemented as a Get method only (called GetControlType), so it is a
   read-only property. It takes no parameters and returns the type as a
   BSTR. The implementation of this Get method calls an internal private
   member function of the control class called GetCtrlType() that does all
   the work.
<P>
   You will also need to add a protected member variable m_bstrType (to
   actually hold the type name as a BSTR) and a protected member function
   GetCtrlType()  to the control class in the header file as follows:
<P>
<P><PRE>      Class CTestControl::COleControl
<PRE></PRE>         {
          .
          .
          .

          protected:
          BSTR m_bstrType;
          BSTR GetCtrlType (void);
          }

</PRE><P><LI>Add the following code to the implementation file (.CPP) of the control
   class:
<P>
<P>
<PRE>//////////////////////////////////////////////////////////////////////
      // CTestCtrl::CTestCtrl - Constructor

      CTestCtrl::CTestCtrl()
      {
         InitializeIIDs(&amp;IID_DTest, &amp;IID_DTestEvents);

         // TODO: Initialize your control's instance data here.

         m_bstrType = NULL;

         .
         .
         .
       }



//////////////////////////////////////////////////////////////////////
      // CTestCtrl::~CTestCtrl - Destructor

      CTestCtrl::~CTestCtrl()
      {
         // TODO: Cleanup your control's instance data here.

         if (m_bstrType)
            SysFreeString(m_bstrType);

         .
         .
         .
       }

       BSTR CTestCtrl::GetCtrlType (void)
       {

           IProvideClassInfo *pProvideClassInfo;
           LPTYPEINFO pTypeInfo;

           if(GetIDispatch(FALSE)-&gt;QueryInterface(IID_IProvideClassInfo,
             (LPVOID   *)&amp;pProvideClassInfo) ==  NOERROR)
          {
             if (pProvideClassInfo-&gt;GetClassInfo(&amp;pTypeInfo) == NOERROR)
             {
                if (m_bstrType)
                   SysFreeString(m_bstrType);

                pTypeInfo-&gt;GetDocumentation(MEMBERID_NIL, &amp;m_bstrType,
                                            NULL, NULL, NULL);
                pTypeInfo-&gt;Release();
             }

             pProvideClassInfo-&gt;Release();
          }

          return m_bstrType;
       }

       BSTR CTestCtrl::GetControlType()
       {
          CString strResult;
          // TODO: Add your property handler here

          strResult = GetCtrlType();
          return strResult.AllocSysString();
       }

</PRE><P><LI>Build the Test OLE control from Visual C++ 4.x, which should
   automatically register the control if everything compiles properly.

<P><LI>From Visual Basic 4.0 32-bit, open a new project, and add the Test
   OLE control to the Visual Basic toolbox by choosing it from the Tools
   Custom Controls menu.

<P><LI>Add an instance of the Test OLE control to Form1. This will be named
   Test1.

<P><LI>Add the following code to the general declarations portion of Form1:
<P>
<PRE>   Private Sub Form_Click()
      Debug.Print Test1.Type
   End Sub

</PRE><P><LI>Run the Visual Basic program, and click the form. You should see Test
   printed in the Debug window
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all vbctrl<BR>
KBCategory: kbusage kbole kbhowto kbcode<BR>
KBSubcategory: IAPOLE<BR>
Keywords          : IAPOLE kbcode kbhowto kbole kbusage<BR>
Version           : 4.00 | 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

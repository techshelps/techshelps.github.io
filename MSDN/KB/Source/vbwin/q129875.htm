

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Obtain the Version of VBRUN300.DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129875">
<META NAME="KBModify" CONTENT="1996/03/07">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbenv kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The function VBGetVersion(), documented in the Visual Basic API Reference file, returns the constant for version 3.0 in both Versions 3.0 and 4.0 of Visual Basic. This return value was preserved in order to maintain compatibility with many existing...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUD,QAH4,QAC2,QAMA,QAKJ,QA5F,QA56,QA55,QBWS,QAR5,QALW,QAGI,QA3P,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Obtain the Version of VBRUN300.DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 7, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129875</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic
   for Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The function VBGetVersion(), documented in the Visual Basic API Reference
file, returns the constant for version 3.0 in both Versions 3.0 and 4.0 of
Visual Basic. This return value was preserved in order to maintain
compatibility with many existing .VBX files that check for a version
constant. This article describes a technique you can use to obtain the true
version of Visual Basic.
<P>
MORE INFORMATION
 
<P>
At address SS:0020 (Hex), Visual Basic will load the address of a function
table when a Visual Basic program is running. This address is always fixed,
although the address will depend on whether the program is run from the
design environment or being run as an executable. VBRUN300.DLL contained in
Version 3.0 always loads an address different from the version 4.0
equivalent. The following table details these addresses. The 16-Bit
Hexadecimal address found at SS:0020 for a Visual Basic program:
<P>
<PRE>   Mode                    Version 3.0    Version 4.0
   --------------------------------------------------
   Design/Run Mode         142E           39D2
   Run as Executable       01ED           1A90

</PRE>These addresses are always fixed, so you can create a simple DLL to
distinguish the versions of Visual Basic.
<P>
It is important to note that the addresses listed in this article will
probably change in any future releases of Visual Basic. Therefore a control
developer should account for the fact that the technique described below
may provide incorrect results with any future releases.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project to make a DLL. In this example, Visual C++ version
   1.52 was used as the compiler. First create a DEF file as below:
<P>
<PRE>   LIBRARY              GetVersionVB
   DESCRIPTION          'GetVersion Can be called from Visual Basic'
   EXETYPE              WINDOWS 3.1
   CODE                 PRELOAD MOVEABLE DISCARDABLE
   DATA                 PRELOAD MOVEABLE SINGLE
   HEAPSIZE             4096
   EXPORTS
                        GetVersionVB @1

</PRE><P><LI>Create a new source code file containing the following code. This code
   retrieves the address at SS:0020 (Hex) and compares it with the
   predefined values:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;vbapi.h&gt;

   int FAR PASCAL LibMain (HANDLE hInstance, WORD wDataSeg, WORD wHeapSize,
      LPSTR lpszCmdLine)
   {
      if (wHeapSize &gt; 0)
         UnlockData (0);  //Unlocks the data segment of the library.
      return 1;
   }

   WORD FAR PASCAL _export GetVersionVB( void )
   {
      unsigned short nVerConst;
      nVerConst=VBGetVersion(); //Call VB API

      if (nVerConst==VB100_VERSION)  //Constant VB100_VERSION in vbapi.h
         return 1;

      if (nVerConst==VB200_VERSION)
         return 2;

      if (nVerConst==VB300_VERSION)
      {

         WORD SS20;

         _asm  {                 //Retrieve function table address at SS20
               mov ax, SS:[0x0020];
               mov SS20, ax;
               }

         if ( (SS20==0x01ED) || (SS20==0x142E) )
         {
            return 3;
         }

         if ( (SS20==0x39D2) || (SS20==0x1A90) )
         {
            return 4;
         }
      }

// If we reach this point, none of the addresses were correct
// possibly indicating a new release of VB - so the code returns 0

</PRE></OL>return 0;
}
<P>
<PRE>   int FAR PASCAL _export WEP(int nParam)
   {
      return 1;
   }

</PRE><P><LI>Add the VBAPI.LIB to the list of libraries to be linked into the
   project. To accomplish this in Visual C++ version 1.52:
<P>
   a. Choose Project from the Options menu.
<P>
   b. Choose the Linker button.
<P>
   c. Select the Input category.
<P>
   d. Add VBAPI.LIB.
<P>
   e. Build the DLL, and name it FINDVER.DLL.
<P>
   f. Move FINDVER.DLL into the WINDOWS\SYSTEM directory.

<P><LI>Call the .DLL file from a Visual Basic program. To do this:
<P>
   a. Create a new project in Visual Basic. Form1 is created by default.
<P>
   b. Place the declaration for the DLL inside the Declarations section
<P><PRE>      for the form:
</PRE><P>
<P><PRE>      Declare Function GetVersionVB Lib "findver.dll" () As Integer
</PRE><P>
   c. Place a command button (Command1) on Form1, and add the following
<P><PRE>      code to the Command1_Click event to call the DLL function:
</PRE><P>
<P><PRE>      MsgBox Str(GetVersionVB())
</PRE><P>
   d. Press the F5 key to run the program, and click the Command1 button
<P><PRE>      to see a message box listing the version of Visual Basic.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 4.00 vb4win vb4all<BR>
KBCategory: kbenv kbprg kbcode<BR>
KBSubcategory: EnvtRun<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 7, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

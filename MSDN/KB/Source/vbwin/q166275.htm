

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Debug a Native Code Visual Basic Component in VC++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166275">
<META NAME="KBModify" CONTENT="1997/11/24">
<META NAME="KBCreate" CONTENT="1997/04/02">
<META NAME="Keywords" CONTENT="vb5all kbusage kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic 5.0 debugger allows you to debug your code at design time before you compile it into an .exe, .dll, or .ocx. If you are debugging Visual Basic-created COM components, you can debug them out-of-process by running multiple projects i...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBWS,QAVX,QA56,QA55,QBJZ,QAH4,QBFY,QA2Q,QBSO,QAG2,QA5F,QAMA,QBXS,QBT6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Debug a Native Code Visual Basic Component in VC++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166275</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic 5.0 debugger allows you to debug your code at design time
before you compile it into an .exe, .dll, or .ocx. If you are debugging
Visual Basic-created COM components, you can debug them out-of-process by
running multiple projects in the same instance of Visual Basic 5.0, or by
running separate instances of Visual Basic 5.0 with the client running in
one and the COM component running in the other.
<P>
If you want to debug your components after they are compiled, you cannot
use the Visual Basic 5.0 debugger because it will only debug them at design
time. To debug a compiled Visual Basic component, you will need to use the
functionality of the Visual C++ 5.0 debugger. The following are situations
when you may need to debug a compiled Visual Basic component:

<UL><LI>if you are creating an ActiveX control for use in a container other
   than Visual Basic 5.0.

<LI>in an application execution environment such as Microsoft Transaction
   Server where you are only allowed to run compiled .dlls.

<LI>if you suspect your Visual Basic component is behaving differently at
   design time than it is compiled.
<P>
</UL>This article explains how to do this within the Microsoft Developer Studio
environment. You will need to have Visual Basic 5.0 and Visual C++ 5.0
installed on your development machine to follow this example.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps assume that you already have a Visual Basic 5.0-created
Standard EXE (.exe), ActiveX DLL (.dll), ActiveX EXE (.exe), or ActiveX
Control (.ocx) that you want to debug.

<OL><P><LI>In Visual Basic 5.0, open the Visual Basic project that you want to
   debug. From the File menu, choose Make &lt;YourProject&gt;.exe. Click the
   Options button and select the Compile tab. Choose Compile to Native
   Code and Create Symbolic Debug Info. Then select OK, and OK again to
   compile your component.

<P><LI>From the Visual C++ 5.0 File menu, choose Open Workspace. In the Open
   Workspace dialog, set Files of Type to All files(*.*), and then select
   your compiled component.

<P><LI>Again from the Visual C++ 5.0 File menu, choose Open (not Open
   Workspace), and open the Visual Basic module (.bas), form (.frm), or
   class (.cls) that you want to debug. Set break points (F9), watches,
   step-through instructions, etc., that you would for a normal program.
   You may also want to display variable information in the debug
   environment by going to the Visual C++ 5.0 Tools menu, selecting
   Options, and then selecting the Debug tab. In the Debug tab, place a
   check next to Display unicode strings.
<P>
</OL>4a. Standard EXE: From the Build menu in Visual C++ 5.0, select Start Debug
<PRE>    then Go, or press the F5 key. When your Visual Basic compiled component
    reaches the line you set a breakpoint on, it will stop in Visual C++
    5.0 and allow you to perform normal debug operations.

</PRE></OL>4b. ActiveX EXE, DLL, or OCX: It is a little different for DLLs in that you
<PRE>    have to specify an exe to debug with. To do this, from the Project menu
    select Settings, and then click the Debug tab. In the Executable for
    debug session text box specify the .exe file that references your .dll.
    Now follow step 4a which will launch your executable and your .dll and
    the Visual C++ 5.0 debugger will come up where you set the breakpoint
    in your .dll.

</PRE>4c. ActiveX DLL Running Under Microsoft Transaction Server (MTS): To set
<PRE>    this up, select Settings from the Visual C++ 5.0 Project menu, and then
    click the Debug tab. In the Executable for debug session text box,
    specify MTX.EXE. Then, in the Program arguments text box place
    /p:{00000000-0000- 0000-0000- 000000000000} where you would replace
    the 0's with the actual MTS Package ID. The Package ID can be obtained
    by examining the properties of your package in the Transaction Server
    Explorer. Following step 4a above which will launch MTX.EXE and your
    .dll. Now run the base client .exe that makes a call into your COM
    component running under MTS and the Visual C++ 5.0 debugger will come
    up where you set the breakpoint in your .dll.

</PRE>4d. ActiveX DLL Running Under Internet Information Server (IIS): Because
<PRE>    IIS runs as an NT Service, you will need to give yourself permission to
    act as part of the operation system. To do this, go to NT
    Administrative Tools and select User Manager. If you are using User
    Manager for Domains in NT Server, make sure you have selected your
    machine name as the Domain from the File menu. Then, choose User Rights
    from the Policies menu. In the User Rights dialog box, place a check
    next to Show Advanced User Rights and select "Act as part of the
    operating system" from the combo box. Click the Add button and type in
    "domainxxx\userxxx" in the text area, or select your username from the
    listbox. Click OK and you should now have the correct privileges. To
    start the debugging session in Visual C++ 5.0, go to the Build menu,
    select Start Debug, then Attach to Process. Place a check next to Show
    System Processes, then select inetinfo and click OK. Now load a client
    .htm or .asp file that will make a call into your ActiveX component. If
    you follow the directions in step 3 above, you should now be able to
    walk through your Visual Basic code.

</PRE>Another Visual C++ feature is the ability to do cross-process and cross-
machine debugging. If you are running in a debugger and call a .dll that
has debugging info, it will automatically start another instance of the
debugger and the source so that you can debug into it.
<P>
Note that if the .exe is compiled optimized for size or speed, lines of
dead code will be compiled out of the project.
<P>
<P><h2>REFERENCES</h2>
 
<P>
(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
Jon Fowler, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: MTS MTX VIPER<BR>
Keywords          : vb5all kbusage kbhowto<BR>
Version           : 5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

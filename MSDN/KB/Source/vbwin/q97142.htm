

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use SystemParametersInfo API for Control Panel Settings </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97142 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/04/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The SystemParametersInfo API call can be used to get and set Windows settings that are normally set from the Desktop by using the Control Panel.  MORE INFORMATION  You can call the SystemParametersInfo API to set and get all the settings controlled...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBTX,QBXS,QAH4,QA4Q,QBS0,QAIB,QABA,QAHE,QBAO,QAUD,QAPN,QAPF,QADX,QDL9,QBXT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use SystemParametersInfo API for Control Panel Settings</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97142 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The SystemParametersInfo API call can be used to get and set Windows
settings that are normally set from the Desktop by using the Control
Panel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can call the SystemParametersInfo API to set and get all the settings
controlled by the Windows Control Panel. Normally a user would have to
choose the Windows Control Panel to view or change system settings such as
granularity, wallpaper, or icon title wrap. Instead of forcing the user to
set things manually using the Control Panel you can have your program call
the SystemParametersInfo API to set them automatically.
<P>
Use the following Visual Basic for Windows Declare for the API. Enter it
all as one, single line:
<P>
<PRE>   Declare Function SystemParametersInfo Lib "User" (ByVal uAction
      As Integer, ByVal uparam As Integer, lpvParam As Any, ByVal fuWinIni
      As Integer) As Integer

</PRE>Here are the formal arguments to the function:
<P>
<PRE>   uAction    system parameter to query or set
   uParam     depends on system parameter
   lpvParam   depends on system parameter
   fuWinIni   WIN.INI update flag

</PRE>The uAction argument can be one of the following constants:
<P>
<PRE>   CONST SPI_GETBEEP=1
   CONST SPI_SETBEEP=2
   CONST SPI_GETMOUSE=3
   CONST SPI_SETMOUSE=4
   CONST SPI_GETBORDER=5
   CONST SPI_SETBORDER=6
   CONST SPI_GETKEYBOARDSPEED=10
   CONST SPI_SETKEYBOARDSPEED=11
   CONST SPI_LANGDRIVER=12
   CONST SPI_ICONHORIZONTALSPACING=13
   CONST SPI_GETSCREENSAVETIMEOUT=14
   CONST SPI_SETSCREENSAVETIMEOUT=15
   CONST SPI_GETSCREENSAVEACTIVE=16
   CONST SPI_SETSCREENSAVEACTIVE=17
   CONST SPI_GETGRIDGRANULARITY=18
   CONST SPI_SETGRIDGRANULARITY=19
   CONST SPI_SETDESKWALLPAPER=20
   CONST SPI_SETDESKPATTERN=21
   CONST SPI_GETKEYBOARDDELAY=22
   CONST SPI_SETKEYBOARDDELAY=23
   CONST SPI_ICONVERTICALSPACING=24
   CONST SPI_GETICONTITLEWRAP=25
   CONST SPI_SETICONTITLEWRAP=26
   CONST SPI_GETMENUDROPALIGNMENT=27
   CONST SPI_SETMENUDROPALIGNMENT=28
   CONST SPI_SETDOUBLECLKWIDTH=29
   CONST SPI_SETDOUBLECLKHEIGHT=30
   CONST SPI_GETICONTITLELOGFONT=31
   CONST SPI_SETDOUBLECLICKTIME=32
   CONST SPI_SETMOUSEBUTTONSWAP=33
   CONST SPI_SETICONTITLELOGFONT=34
   CONST SPI_GETFASTTASKSWITCH=35
   CONST SPI_SETFASTTASKSWITCH=36

</PRE>The UParam argument should be 0 when used with a GET constant, and it
should contain the new value of the setting when used with a SET constant.
The exceptions to these rules are documented in the Windows version 3.1
Software Development Kit (SDK) help file.
<P>
When used with a GET constant, the lpvParam argument returns the current
value of the setting. When used with a SET constant, it is a NULL. The
exceptions to these rules are documented in the Windows version 3.1 SDK
help file.
<P>
The fuWinIni argument updates the WIN.INI file:
<P>
<PRE>   Const SPIF_SENDWININICHANGE = &amp;H2
   Const SPIF_UPDATEINIFILE = &amp;H1

</PRE><h3>Example One</h3>
 
One exception to the rules given above occurs with a call to set or get the
<PRE> icon spacing setting. The following example gives the correct arguments
</PRE>to use to set and get the horizontal spacing:

<OL><P><LI>Create a Visual Basic project, and add the following controls to a form:
<P>
<PRE>   Control Name   Caption
   ----------------------
   Command1       Read
   Command2       Set
   Text1
   Label1         Icon Horizontal Spacing

</PRE><P><LI>Add the following code to the general declarations section of the form:
<P>
   Const SPIF_SENDWININICHANGE = &amp;H2
   Const SPIF_UPDATEINIFILE = &amp;H1
   Const SPI_ICONHORIZONTALSPACING = 13
   Dim uAction As Integer
   Dim uparam As Integer
<PRE>   ' Enter the following Declare as one, single line:
   Declare Function SystemParametersInfo Lib "User" (ByVal uAction As
      Integer, ByVal uparam As Integer, lpvParam As Any, ByVal fuWinIni As
      Integer) As Integer

</PRE><P><LI>Add the following code to the Command1_Click event:
<P>
   uAction = 0
   uparam = 0
   ret% = SystemParametersInfo(SPI_ICONHORIZONTALSPACING, uAction,
   uparam, SPIF_UPDATEINIFILE Or SPIF_SENDWININICHANGE)
   text1.Text = uparam

<P><LI>Add the following code to the Command2_Click event:
<P>
   uAction = Val(text1.Text)
   uparam = 0
<PRE>   ' Enter the following as one, single line:
   x% = SystemParametersInfo(SPI_ICONHORIZONTALSPACING, uAction,
      ByVal 0&amp;, SPIF_UPDATEINIFILE Or SPIF_SENDWININICHANGE)

</PRE><P><LI>Run the program, and click the Read button. The current setting of the
   icon horizontal spacing will be displayed in the Text1 box. Enter a new
   number(32 is the lowest setting accepted) in the Text1 box, and click
   the Read button. The spacing will be reset. To see the new setting,
   bring up the Windows Task list, and choose Arrange Icons.
<P>
</OL><h3>Example Two</h3>
 
The example follows the general parameter rules. It demonstrates how to
turn icon title wrapping on and off by using SETICONTITLEWRAP.

<OL><P><LI>Create a Visual Basic project and add the following controls to a form:
<P>
<PRE>   Control Name   Caption
   -----------------------------
   Command1       Wrapping True
   Command2       Wrapping False

</PRE><P><LI>Add the following code to the general declarations section of the form:
<P>
<PRE>   ' Enter the following Declare as one, single line:
   Declare Function SystemParametersInfo Lib "User" (ByVal uAction As
      Integer, ByVal uparam As Integer, lpvParam As Any, ByVal fuWinIni As
      Integer) As Integer
   Const SPI_SETICONTITLEWRAP = 26
   Const SPIF_SENDWININICHANGE = &amp;H2
   Const SPIF_UPDATEINIFILE = &amp;H1

</PRE><P><LI>Add the following code to the Command1 Click event:
<P>
<PRE>   ' Enter the following as one, single line:
   x% = SystemParametersInfo(SPI_SETICONTITLEWRAP, True, 0&amp;,
      SPIF_UPDATEINIFILE Or SPIF_SENDWININICHANGE)

</PRE><P><LI>Add the following code to the Command2 Click event:
<P>
<PRE>   ' Enter the following as one, single line:
   x% = SystemParametersInfo(SPI_SETICONTITLEWRAP, False, 0&amp;,
      SPIF_UPDATEINIFILE Or SPIF_SENDWININICHANGE)

</PRE><P><LI>Run the program and watch the icon titles as you click the two buttons.
<P>
</OL><h3>Example Three</h3>
 
This example follows the general parameter rules. It demonstrates how to
change your desktop's wallpaper with the SPI_SETDESKWALLPAPER.

<OL><P><LI>Create a Visual Basic project and add the following controls to a form:
<P>
<PRE>   Control Name   Caption
   -----------------------------
   Command1       Change Wallpaper to Rivets

</PRE><P><LI>Add the following code to the general declarations section of the form:
<P>
   Const SPIF_UPDATEINIFILE = &amp;H1
   Const SPI_SETDESKWALLPAPER = 20
   Const SPIF_SENDWININICHANGE = &amp;H2
<P>
<PRE>   ' Enter the following Declare as one, single line:
   Declare Function SystemParametersInfo Lib "User" (ByVal uAction As
      Integer, ByVal uparam As Integer, ByVal lpvParam As String, ByVal
      fuWinIni As Integer) As Integer

</PRE><P><LI>Add the following code to the Command1 Click event:
<P>
<PRE>   Sub Command1_Click ()
      filenm$ = "C:\Windows\rivets.bmp"

      ' Enter the following two lines as one, single line:
      x% = SystemParametersInfo(SPI_SETDESKWALLPAPER, 0&amp;,
         filenm$, SPIF_UPDATEINIFILE Or SPIF_SENDWININICHANGE)
   End Sub

</PRE><P><LI>Run the program and watch the wallpaper change to RIVETS.BMP.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

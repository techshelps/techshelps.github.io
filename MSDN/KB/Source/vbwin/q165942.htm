

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Write Data to a File Using WriteFile API </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165942">
<META NAME="KBModify" CONTENT="1997/03/27">
<META NAME="KBCreate" CONTENT="1997/03/26">
<META NAME="Keywords" CONTENT="kbusage VB432 VB4Win VB5All VB5HowTo VBKBWinAPI kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Win32 API allows binary files to be opened and written using the OpenFile and WriteFile APIs. These functions offer increased flexibility to write and read from files. This article demonstrates a technique to write large amounts of data, in the...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANF,QACJ,QAFF,QA8T,QBS0,QAY5,QAVX,QAVW,QAUD,QBE7,QBE6,QATX,QAI4,QAYY,QA5B V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Write Data to a File Using WriteFile API</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165942</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Win32 API allows binary files to be opened and written using the
OpenFile and WriteFile APIs. These functions offer increased flexibility
to write and read from files. This article demonstrates a technique to
write large amounts of data, in the form of a large array, to a binary
file all at once instead of element by element.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>Start a new Standard EXE project. Add MODULE1.BAS.

<P><LI>Type the following code into MODULE1.BAS:
<P>
<P><PRE>      Public Const GENERIC_WRITE = &amp;H40000000
      Public Const GENERIC_READ = &amp;H80000000
      Const FILE_ATTRIBUTE_NORMAL = &amp;H80
      Const CREATE_ALWAYS = 2
      Const OPEN_ALWAYS = 4
      Const INVALID_HANDLE_VALUE= -1
<PRE></PRE>      Const FILE_NAME = "TEST.DAT"     'This can be any file that does not
                                       'currently exist.

      Type MyType
         value As Integer
      End Type

      Declare Function ReadFile Lib "kernel32" (ByVal hFile As Long, _
         lpBuffer As Any, ByVal nNumberOfBytesToRead As Long, _
         lpNumberOfBytesRead As Long, ByVal lpOverlapped As Long) As Long

      Private Declare Function CloseHandle Lib "kernel32" ( _
        ByVal hObject As Long) As Long

      Private Declare Function WriteFile Lib "kernel32" ( _
        ByVal hFile As Long, lpBuffer As Any, _
        ByVal nNumberOfBytesToWrite As Long, _
        lpNumberOfBytesWritten As Long, ByVal lpOverlapped As Long) As Long

      Private Declare Function CreateFile Lib "kernel32" _
        Alias "CreateFileA" (ByVal lpFileName As String, _
        ByVal dwDesiredAccess As Long, ByVal dwShareMode As Long, _
        ByVal lpSecurityAttributes As Long,  _
        ByVal dwCreationDisposition As Long, _
        ByVal dwFlagsAndAttributes As Long, ByVal hTemplateFile As Long) _
        As Long

      Declare Function FlushFileBuffers Lib "kernel32" ( _
        ByVal hFile As Long) As Long

      Sub fillArray(anArray() As MyType)
         Dim x As Integer

         For x = 0 To UBound(anArray)
            anArray(x).value = x
         Next x
      End Sub

      Sub Main()
         Dim fHandle As Integer
         Dim T(1000) As MyType            'Define a large array of data
         Dim S(1000) As MyType            'Define another large array

         fillArray T                      'Fill the array with some values
         writearray FILE_NAME, T          'Write the entire array to disk
         readArray FILE_NAME, S           'Read into a different array
      End Sub

      Sub readArray(Fname As String, anArray() As MyType)
         Dim fHandle As Long
         Dim fSuccess As Long
         Dim sTest As String
         Dim lBytesRead As Long
         Dim BytesToRead As Long

         'Get size of data to write
         BytesToRead = (UBound(anArray) + 1) * LenB(anArray(0))
         'Get a handle to a file Fname.
         fHandle = CreateFile(Fname, GENERIC_WRITE Or GENERIC_READ, _
                              0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0)
         'Here you should test to see if you get a file handle or not.
         'CreateFile returns INVALID_HANDLE_VALUE if it fails.
         If fhandle &lt;&gt; INVALID_HANDLE_VALUE Then
            fSuccess = ReadFile(fHandle, anArray(LBound(anArray)), _
                                BytesToRead, lBytesRead, 0)
            'ReadFile returns a non-zero value if it is successful.
            'Now you just close the file.
            fSuccess = CloseHandle(fHandle)
         End If
      End Sub

      Sub writearray(Fname As String, anArray() As MyType)
         Dim fHandle As Long
         Dim fSuccess As Long
         Dim sTest As String
         Dim lBytesWritten As Long
         Dim BytesToWrite As Long
         'Get the length of data to write
         BytesToWrite = (UBound(anArray) + 1) * LenB(anArray(0))
         'Get a handle to a file Fname.
         fHandle = CreateFile(Fname, GENERIC_WRITE Or GENERIC_READ, _
                              0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0)
         'Here you should test to see if you get a file handle or not.
         'CreateFile returns INVALID_HANDLE_VALUE if it fails.
         If fhandle &lt;&gt; INVALID_HANDLE_VALUE Then
            fSuccess = WriteFile(fHandle, anArray(LBound(anArray)), _
                                 BytesToWrite, lBytesWritten, 0)
            'Check to see if you were successful writing the data
            If fSuccess &lt;&gt; 0 Then
               'Flush the file buffers to force writing of the data.
               fSuccess = FlushFileBuffers(fHandle)
               'Close the file.
               fSuccess = CloseHandle(fHandle)
            End If
         End If
      End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
Microsoft Win32 SDK
<P>
Win32 Programmers Reference
<PRE>    ReadFile
    CreateFile
    WriteFile
    FlushFileBuffers
    CloseFile
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage VB432 VB4Win VB5All VB5HowTo VBKBWinAPI kbhowto<BR>
Version             : 4.0 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

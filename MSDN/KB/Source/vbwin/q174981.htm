

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Retrieve Typical Resultsets From Oracle Stored Procedures </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174981">
<META NAME="KBModify" CONTENT="1998/03/03">
<META NAME="KBCreate" CONTENT="1997/10/10">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows how to create an RDO project that will return a typical Resultset from an Oracle stored procedure. This article builds on the concepts covered in the Microsoft Knowledge Base article: Q174679 - HOWTO: Retrieve Resultsets from Ora...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA94,QBS0,QAEF,QAUD,QAGU,QAB9,QAKC,QBXS,QA6A,QAY2,QA5V,QANF,QABA,QBC6,QAU9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Retrieve Typical Resultsets From Oracle Stored Procedures</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174981</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows how to create an RDO project that will return a typical
Resultset from an Oracle stored procedure. This article builds on the
concepts covered in the Microsoft Knowledge Base article: <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> - HOWTO:
Retrieve Resultsets from Oracle Stored Procedures.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Knowledge Base article <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> gives an in-depth example of all the
possible ways to return a Resultset from a stored procedure. The example in
this article is a simplified version. Please refer to <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> if you want
more information about the process.
<P>
NOTE: The Resultsets created by the Microsoft ODBC Driver for Oracle v2.0
using Oracle stored procedures are READ ONLY and STATIC. To retrieve a
Resultset requires that an Oracle Package be created.
<P>
The sample project in this article was created in Visual Basic 5.0 and uses
RDO to access and manipulate the Resultsets created by the Microsoft ODBC
Driver for Oracle v2.0. You will need to have this driver to use the
Resultsets - from-stored-procedures functionality discussed in this article
and KB <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>. (currently, it is the only driver on the market that can
return a Resultset from a stored procedure). If you want more information
about using RDO 2.0 with Oracle, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B>
   TITLE     : HOWTO: Access an Oracle Database Using RDO

</PRE>This article is in two parts. The first part is a step-by-step procedure
for creating the project. The second is a detailed discussion about the
interesting parts of the project.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Run the following DDL script on your Oracle server:
<P>
<P><PRE>      DROP TABLE person;
</PRE><P>
<P><PRE>      CREATE TABLE person
<PRE></PRE>       (ssn     NUMBER(9) PRIMARY KEY,
        fname   VARCHAR2(15),
        lname   VARCHAR2(20));

      INSERT INTO person VALUES(555662222,'Sam','Goodwin');

      INSERT INTO person VALUES(555882222,'Kent','Clark');

      INSERT INTO person VALUES(666223333,'Sally','Burnett');

      COMMIT;
      /

</PRE><P><LI>Create the following package on your Oracle server:
<P>
<P><PRE>      CREATE OR REPLACE PACKAGE packperson
      AS
<PRE></PRE>          TYPE tssn is TABLE of  NUMBER(10)
          INDEX BY BINARY_INTEGER;
          TYPE tfname is TABLE of VARCHAR2(15)
          INDEX BY BINARY_INTEGER;
          TYPE tlname is TABLE of VARCHAR2(20)
          INDEX BY BINARY_INTEGER;

          PROCEDURE allperson
                  (ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname);
        PROCEDURE oneperson
              (onessn IN      NUMBER,
               ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname);
      END packperson;
      /

</PRE><P><LI>Create the following package body on your Oracle server:
<P>
<P><PRE>      CREATE OR REPLACE PACKAGE BODY packperson
      AS
</PRE><P>
<P><PRE>      PROCEDURE allperson
<PRE></PRE>                  (ssn    OUT     tssn,
                   fname  OUT     tfname,
                   lname  OUT     tlname)
      IS
          CURSOR person_cur IS
                  SELECT ssn, fname, lname
                  FROM person;

          percount NUMBER DEFAULT 1;

      BEGIN
          FOR singleperson IN person_cur
          LOOP
                  ssn(percount) := singleperson.ssn;
                  fname(percount) := singleperson.fname;
                  lname(percount) := singleperson.lname;
                  percount := percount + 1;
          END LOOP;
      END;

      PROCEDURE oneperson
            (onessn  IN    NUMBER,
                   ssn     OUT   tssn,
                   fname   OUT   tfname,
                   lname   OUT   tlname)
      IS
        CURSOR person_cur IS
                   SELECT ssn, fname, lname
                   FROM person
                   WHERE ssn = onessn;

           percount NUMBER DEFAULT 1;

       BEGIN
           FOR singleperson IN person_cur
           LOOP
                   ssn(percount) := singleperson.ssn;
                   fname(percount) := singleperson.fname;
                   lname(percount) := singleperson.lname;
                   percount := percount + 1;
           END LOOP;
       END;
       END;
       /

</PRE><P><LI>Open a new project in Visual Basic 5.0 Enterprise edition. Form1 is
   created by default.

<P><LI>Place the following controls on the form:
<P>
<PRE>   Control     Name             Text/Caption
   -----------------------------------------
   Button      cmdGetEveryone   Get Everyone
   Button      cmdGetOne        Get One

</PRE><P><LI>From the Tools menu, select the Options item. Click the "Default Full
   Module View" option, and then click OK. This allows you to view all
   of the code for this project.

<P><LI>Paste the following code into your code window:
<P>
<P><PRE>      Option Explicit
      Dim Cn As rdoConnection
      Dim En As rdoEnvironment
      Dim CPw1 As rdoQuery
      Dim CPw2 As rdoQuery
      Dim Rs As rdoResultset
      Dim Conn As String
      Dim QSQL As String
      Dim tempcnt As Integer
</PRE><P>
<P><PRE>      Private Sub cmdGetEveryone_Click()
</PRE><P>
<PRE>         Set Rs = CPw1.OpenResultset(rdOpenStatic, rdConcurReadOnly)

         While Not Rs.EOF

            MsgBox "Person data: " &amp; Rs(0) &amp; ", " &amp; Rs(1) &amp; ", " &amp; Rs(2)
            Rs.MoveNext

         Wend

         Rs.Close

         Set Rs = Nothing

      End Sub

      Private Sub cmdGetOne_Click()

         Dim inputssn As Long

         inputssn = InputBox("Enter an SSN number:")

         CPw2(0) = inputssn

         Set Rs = CPw2.OpenResultset(rdOpenStatic, rdConcurReadOnly)

         MsgBox "Person data: " &amp; Rs(0) &amp; ", " &amp; Rs(1) &amp; ", " &amp; Rs(2)

         Rs.Close

         Set Rs = Nothing

      End Sub

      Private Sub Form_Load()

         [ASCII 145]Change the text in &lt;&gt; to the appropriate logon
         [ASCII 145]information.
         Conn = "UID=&lt;your user ID&gt;;PWD=&lt;your password&gt;;" _
                 &amp; "DRIVER={Microsoft ODBC for Oracle};" _
                 &amp; "SERVER=&lt;your database alias&gt;;"

         Set En = rdoEnvironments(0)
         En.CursorDriver = rdUseOdbc
         Set Cn = En.OpenConnection("", rdDriverNoPrompt, False, Conn)

         QSQL = "{call packperson.allperson({resultset 9, ssn, fname, " _
              &amp; "lname})}"

         Set CPw1 = Cn.CreateQuery("", QSQL)

         QSQL = "{call packperson.oneperson(?,{resultset 2, ssn, fname, " _
              &amp; "lname})}"

         Set CPw2 = Cn.CreateQuery("", QSQL)

      End Sub

      Private Sub Form_Unload(Cancel As Integer)

         En.Close

      End Sub

</PRE><P><LI>Run the project.
<P>
</OL>When you click the "Get Everyone" button, it executes the following query:
<P>
<PRE>   QSQL = "{call packperson.allperson({resultset 9, ssn, fname, "_
            &amp; "lname})}"

</PRE></OL>This query is executing the stored procedure "allperson," which is in the
package "packperson" (referenced as "packperson.allperson"). There are no
input parameters and the procedure is returning three arrays (ssn, fname,
and lname), each with 9 or fewer records. As stated in <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>, you must
specify the maximum number of rows you will be returning. Please refer to
the Microsoft ODBC Driver for Oracle Help File and <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> for more
information on this issue.
<P>
When you click on the "Get One" button, you see an input box that prompts
you for an SSN. Once you input a valid SSN and click OK, this query is
executed:
<P>
<PRE>   QSQL = "{call packperson.oneperson(?,{resultset 2, ssn, fname, "_
           &amp; "lname})}"

</PRE>The stored procedure, packperson.oneperson, uses a single input parameter
as the selection criteria for the Resultset it creates. Just like
packperson.allperson, the Resultset is constructed using the table types
defined in packperson. (See <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B> for more information.)
<P>
NOTE: You can only define input parameters for Oracle stored procedures
that return a Resultset. You cannot define output parameters for these
stored procedures.
<P>
These two stored procedures cover the basic uses of stored procedures that
return Resultsets. The first one gives you a predefined set of records
(such as everyone) and the second will gives you a set of records (or just
one record) based on one or more input parameters. Once you have these
Resultsets, you can do inserts, updates, and deletes either through stored
procedures or SQL that you create on the client.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft ODBC Driver for Oracle Help File
<P>
Oracle PL/SQL Programming by Steven Feuerstein
<P>
Hitchhiker's Guide to Visual Basic &amp; SQL Server by William Vaughn
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q174679.htm">Q174679</A></B>
   TITLE     : HOWTO: Retrieve Resultsets from Oracle Stored Procedures

   ARTICLE-ID: <B><A HREF="../VBWIN/Q167225.htm">Q167225</A></B>
   TITLE     : HOWTO: Access an Oracle Database Using RDO

   ARTICLE-ID: <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B>
   TITLE     : HOWTO: Acquire and Install the Microsoft Oracle ODBC Driver
               v2.0</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Oracle stored procedures rdo msorcl32.dll
<P>

(c) Microsoft Corporation 1997, All Rights Reserved.<BR>
Contributions by Sam Carpenter, Microsoft Corporation<BR>
Keywords          : vb5all vb5howto<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

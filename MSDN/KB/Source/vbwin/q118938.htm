

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Print Form/Client Area in 256 Colors w/StretchDIBits </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118938">
<META NAME="KBModify" CONTENT="1995/10/20">
<META NAME="KBCreate" CONTENT="1994/08/02">
<META NAME="Keywords" CONTENT="kbprint kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Versions 2.0 and 3.0 of Visual Basic have the ability to display 256-color bitmaps in forms, image controls, and picture boxes. These versions can also print forms containing these controls with the PrintForm method. However, the PrintForm method h...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAOX,QAB4,QAAP,QANF,QACT,QAPG,QA7H,QANG,QACJ,QAY5,QAIB,QAH4,QAG9,QAKP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Print Form/Client Area in 256 Colors w/StretchDIBits</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 20, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118938</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Versions 2.0 and 3.0 of Visual Basic have the ability to display 256-color
bitmaps in forms, image controls, and picture boxes. These versions can
also print forms containing these controls with the PrintForm method.
However, the PrintForm method has the following limitations:

<UL><LI>You do not have control over the size and position of the output on the
   page.

<LI>You cannot print the forms' borders.

<LI>You cannot print multiple forms on a page.

<LI>You cannot print text on the same page.
<P>
</UL>This article describes how to use the Windows Application Programming
Interface (API) to print a form or its client area and render the 256-color
bitmaps as they are displayed on the screen.
<P>
The example code in this article uses the StretchDIBits function from the
Windows API and has the following advantages:

<UL><LI>You have 256 colors to work with.

<LI>You can print on both PostScript and PCL printers.

<LI>You can take advantage of printer halftones.

<LI>You can print a specified portion of a picture.

<LI>You can stretch the output to a specified location and size.

<LI>You can print both text and graphics to the same page.

<LI>You can print multiple forms on a page.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The example code included with this article uses the Windows API
extensively, showing how the form is printed to the printer. (For
additional information on this process, please see the comments in the code
below or the Windows SDK documentation.) This process is only slightly
different when printing the client area of the form. Most of the work done
is the same in both cases. In the example code, there are two routines
named PrintForm256() and PrintClient256(). Both of these routines call the
routine StretchFormToDC() to do the bulk of the printing. The routines
PrintForm256() and PrintClient256() basically get a handle to the desired
portion of the form, start the print job, and calculate the size of the
output on the printed page. Then they call StretchFormToDC to copy the
bitmap. Afterward, PrintForm256() and PrintClient256() clean up as
necessary for the part of the form that was copied and then they end the
print job.
<P>
Once you have tried out the code and you have an idea of how it works, you
can make modifications to the PrintForm256() and PrintClient256() routines.
You could modify these routines to print multiple forms on the same page by
calling StretchFormToDC() multiple times with the appropriate parameters.
You could also print text to the same page by using the Print method of the
printer object before ending the document (Printer.EndDoc) or going to a
new page (Printer.NewPage).
<P>
<P><h3>Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic; Form1 is created by default.

<P><LI>Put a picture box control on the form; Picture1 is created by default.

<P><LI>Assign a 256-color bitmap to the Picture property of the picture box.

<P><LI>Put a common dialog control on the form; CMDialog1 is created by
   default.

<P><LI>Place two command buttons on the form; Command1 and Command2 are created
   by default.

<P><LI>Add the following code to the click event of the first command button:
<P>
<PRE>      Sub Command1_Click ()
         ' Allow user to set up printer.
         CMDialog1.Flags = &amp;H40&amp; ' Printer setup.
         CMDialog1.Action = 5    ' Show dialog.

         ' Print the form.
         Call PrintForm256(Form1)
      End Sub

</PRE><P><LI>Add the following code to the Click() event of the second command
   button:
<P>
<PRE>      Sub Command2_Click ()
         ' Allow user to set up printer.
         CMDialog1.Flags = &amp;H40&amp; ' Printer setup.
         CMDialog1.Action = 5    ' Show dialog.

         ' Print the client area.
         Call PrintClient256(Form1)
      End Sub

</PRE><P><LI>Add a new module to the project; MODULE1.BAS is created by default.

<P><LI>Put the example code listed at the end of these steps in the basic
   module.
<P>
</OL>10.Save the project.
<P>
11.Run the project. Try pressing each of the buttons. The example should be
<PRE>   able to print out the form as large as possible with the chosen
   orientation. If your printer driver does not support StretchDIBits, then
   you will receive error message 11105.

</PRE></OL><h3>Example Code</h3>
 
<P>
<PRE>'--------------------------------------------------------------------------
' 256-Color Form Printing Routines
'
' General Declarations: Types, Constants, and Declares
'
' Routines:
'  - PrintForm256()
'  - PrintClient256()
'  - StretchFormToDC
'--------------------------------------------------------------------------

</PRE>Option Explicit
<P>
Type PALETTEENTRY
<PRE>    peRed As String * 1
    peGreen As String * 1
    peBlue As String * 1
    peFlags As String * 1
</PRE>End Type
<P>
Type LOGPALETTE
<PRE>    palVersion As Integer
    palNumEntries As Integer
    palPalEntry(255) As PALETTEENTRY ' Enough for 256 colors
</PRE>End Type
<P>
Type BITMAPINFOHEADER
<PRE>   biSize As Long
   biWidth As Long
   biHeight As Long
   biPlanes As Integer
   biBitCount As Integer
   biCompression As Long
   biSizeImage As Long
   biXPelsPerMeter As Long
   biYPelsPerMeter As Long
   biClrUsed As Long
   biClrImportant As Long
</PRE>End Type
<P>
Type BITMAPINFO
<PRE>   bmiHeader As BITMAPINFOHEADER
   bmiColors(255) As PALETTEENTRY 'Enough for 256 colors
</PRE>End Type
<P>
Type RECT
<PRE>    Left As Integer
    Top As Integer
    Right As Integer
    Bottom As Integer
</PRE>End Type
<P>
Global Const PIXELS = 3
Global Const SRCCOPY = &amp;HCC0020
Global Const BI_RGB = 0
Global Const DIB_RGB_COLORS = 0
Global Const GMEM_MOVEABLE = 2
Global Const RASTERCAPS = 38
Global Const RC_STRETCHDIB = &amp;H2000
Global Const RC_PALETTE = &amp;H100
Global Const PLANES = 14
Global Const BITSPIXEL = 12
Global Const SIZEPALETTE = 104
<P>
<PRE>'The following declares must each be entered on a single line:
Declare Function CreateCompatibleDC Lib "GDI" (ByVal hDC As Integer
   ) As Integer
Declare Function CreateCompatibleBitmap Lib "GDI" (ByVal hDC As Integer,
   ByVal nWidth As Integer, ByVal nHeight As Integer) As Integer
Declare Function GetDeviceCaps Lib "GDI" (ByVal hDC As Integer,
   ByVal iCapabilitiy As Integer) As Integer
Declare Function GetSystemPaletteEntries Lib "GDI" (ByVal hDC As Integer,
   ByVal wStartIndex As Integer, ByVal wNumEntries As Integer,
   lpPaletteEntries As PALETTEENTRY) As Integer
Declare Function CreatePalette Lib "GDI" (lpLogPalette As LOGPALETTE
   ) As Integer
Declare Function SelectObject Lib "GDI" (ByVal hDC As Integer,
   ByVal hObject As Integer) As Integer
Declare Function BitBlt Lib "GDI" (ByVal hDCDest As Integer,
   ByVal XDest As Integer, ByVal YDest As Integer, ByVal nWidth As Integer,
   ByVal nHeight As Integer, ByVal hDCSrc As Integer, ByVal XSrc As
</PRE>Integer,
<P>
<PRE>   ByVal YSrc As Integer, ByVal dwROP As Long) As Integer
Declare Function GetDIBits Lib "GDI" (ByVal hDC As Integer,
   ByVal hBitmap As Integer, ByVal nStartScan As Integer,
   ByVal nNumScans As Integer, ByVal lpBits As Long, BITMAPINFO As
</PRE>BITMAPINFO
,
<P>
<PRE>   ByVal wUsage As Integer) As Integer
Declare Function StretchDIBits Lib "GDI" (ByVal hDC As Integer,
   ByVal DestX As Integer, ByVal DestY As Integer,
   ByVal wDestWidth As Integer, ByVal wDestHeight As Integer,
   ByVal SrcX As Integer, ByVal SrcY As Integer, ByVal wSrcWidth As
</PRE>Integer,
<P>
<PRE>   ByVal wSrcHeight As Integer, ByVal lpBits As Long, BitsInfo As
</PRE>BITMAPINFO,
<P>
<PRE>   ByVal wUsage As Integer, ByVal dwROP As Long) As Integer
Declare Function DeleteObject Lib "GDI" (ByVal hObject As Integer) As
</PRE>Integer
<P>
<PRE>Declare Function DeleteDC Lib "GDI" (ByVal hDC As Integer) As Integer

Declare Function GlobalAlloc Lib "KERNEL" (ByVal wFlags As Integer,
   ByVal lMem As Long) As Integer
Declare Function GlobalLock Lib "KERNEL" (ByVal hMem As Integer) As Long
Declare Function GlobalUnlock Lib "KERNEL" (ByVal hMem As Integer) As
</PRE>Integer
<P>
<PRE>Declare Function GlobalFree Lib "KERNEL" (ByVal hMem As Integer) As Integer

Declare Function SelectPalette Lib "USER" (ByVal hDC As Integer,
   ByVal hPalette As Integer, ByVal bForceBackground As Integer) As Integer
Declare Function RealizePalette Lib "USER" (ByVal hDC As Integer) As
</PRE>Integer
<P>
<PRE>Declare Function GetWindowDC Lib "USER" (ByVal hWnd As Integer) As Integer
Declare Function GetWindowRect Lib "USER" (ByVal hWnd As Integer,
   lpRect As RECT) As Integer
Declare Function ReleaseDC Lib "USER" (ByVal hWnd As Integer,
   ByVal hDC As Integer) As Integer

' Error Constants:
' Device does not support StretchDIBits.
</PRE>Global Const ERR_DEVSTRETCHDIB = 11105
<PRE>' Palette is not 256-color palette.
</PRE>Global Const ERR_PALSIZE = 11106
<PRE>' Unable to create device context.
</PRE>Global Const ERR_CREATEMEMDC = 11107
<PRE>' Unable to create bitmap.
</PRE>Global Const ERR_CREATEBMP = 11108
<PRE>' Unable to retrieve system palette.
</PRE>Global Const ERR_GETPALETTE = 11109
<PRE>' Unable to create a new palette.
</PRE>Global Const ERR_CREATEPAL = 11120
<PRE>' Unable to copy bitmap to memory.
</PRE>Global Const ERR_BITBLT = 11110
<PRE>' Unable to allocate memory for DIB bits.
</PRE>Global Const ERR_BITMEM = 11111
<PRE>' Unable to lock DIB bits memory.
</PRE>Global Const ERR_LOCKBITMEM = 11112
<PRE>' Unable to get DIB bits.
</PRE>Global Const ERR_GETDIB = 11113
<PRE>' Unable to copy bitmap to destination.
</PRE>Global Const ERR_STRETCHDIB = 11114
<PRE>' Unable to unlock DIB bits memory.
</PRE>Global Const ERR_UNLOCKMEM = 11115
<PRE>' Unable to free DIB bits memory.
</PRE>Global Const ERR_FREEMEM = 11116
<PRE>' Unable to select palette.
</PRE>Global Const ERR_SELPAL = 11117
<PRE>' Unable to delete palette.
</PRE>Global Const ERR_DELPAL = 11121
<PRE>' Unable to delete bitmap.
</PRE>Global Const ERR_DELBMP = 11118
<PRE>' Unable to select palette.
</PRE>Global Const ERR_DELMEMDC = 11119
<P>
<PRE>'--------------------------------------------------------------------------
' PrintForm256:
'  - Prints the entire form.
'  - Renders 256-color bitmaps as they appear on the form.
'  - Adjusts output to the size and orientation of the printer's page.
'  - Calls StretchFormToDC to copy the contents of the form to the printer.
'  - Starts and ends a print job.
'
' frmSrc:
'  - The form object to print.
'
' Errors:
'  - A message box is displayed for StrechFormToDC errors.
'  - Otherwise, ther is no error trapping.
'
'--------------------------------------------------------------------------

Sub PrintForm256 (frmSrc As Form)

   Dim RectWindow As RECT
   Dim hDCWindow As Integer
   Dim WindowWidth As Integer
   Dim WindowHeight As Integer
   Dim WindowRatio As Double
   Dim PrinterWindowWidth As Integer
   Dim PrinterWindowHeight As Integer
   Dim PrinterRatio As Double
   Dim r

   Screen.MousePointer = 11 ' Hourglass

   ' Setup form.
   hDCWindow = GetWindowDC(frmSrc.hWnd) ' hDC of form, including borders
   r = GetWindowRect(frmSrc.hWnd, RectWindow)
   WindowWidth = Abs(RectWindow.Right - RectWindow.Left)
   WindowHeight = Abs(RectWindow.Bottom - RectWindow.Top)
   ' The following must be entered on a single line:
   WindowRatio = (WindowWidth * Screen.TwipsPerPixelX) /
      (WindowHeight * Screen.TwipsPerPixelY)

   ' Setup printer.
   Printer.ScaleMode = PIXELS
   Printer.Print ""; ' Start print job; initialize printer object.
   ' The following must be entered on a single line:
   PrinterRatio = (Printer.ScaleWidth * Printer.TwipsPerPixelX) /
      (Printer.ScaleHeight * Printer.TwipsPerPixelY)

   ' Scale the output to the page size.
   If WindowRatio &gt;= PrinterRatio Then
      PrinterWindowWidth = Printer.ScaleWidth
      ' The following must be entered on a single line:
      PrinterWindowHeight = (PrinterWindowWidth * Printer.TwipsPerPixelX) /
         (WindowRatio * Printer.TwipsPerPixelY)
   Else
      PrinterWindowHeight = Printer.ScaleHeight
      ' The following must be entered on a single line:
      PrinterWindowWidth = (PrinterWindowHeight * Printer.TwipsPerPixelY *
         WindowRatio) / Printer.TwipsPerPixelX
   End If

   ' Print the form.
   On Error Resume Next
   ' The following must be entered on a single line:
   Call StretchFormToDC(CInt(Printer.hDC), 0, 0, PrinterWindowWidth,
      PrinterWindowHeight, hDCWindow, 0, 0, WindowWidth, WindowHeight)
   If Err Then
      MsgBox Err &amp; ": Error Printing Form"
      ' Predefined error codes are commented in the general declarations.
   End If
   On Error GoTo 0

   ' Clean up.
   r = ReleaseDC(frmSrc.hWnd, hDCWindow) ' Free DC.

   ' End print job.
   Printer.EndDoc

   Screen.MousePointer = 0 ' Default

End Sub

'--------------------------------------------------------------------------
' PrintClient256:
'  - Prints the client area of a form passed to it.
'  - Renders 256-color bitmaps as they appear on the form.
'  - Adjusts output to the size and orientation of the printer's page.
'  - Calls StretchFormToDC to copy the contents of the form to the printer.
'  - Starts and ends a print job.
'
' frmSrc:
'  - The form object to print
'
'Errors
' - Displays a message box for StrechFormToDC errors.
' - Otherwise, there is no error trapping.
'
'--------------------------------------------------------------------------

Sub PrintClient256 (frmSrc As Form)

   Dim hDCWindow As Integer
   Dim WindowWidth As Integer
   Dim WindowHeight As Integer
   Dim WindowRatio As Double
   Dim PrinterWindowWidth As Integer
   Dim PrinterWindowHeight As Integer
   Dim PrinterRatio As Double
   Dim r

   Screen.MousePointer = 11 ' Hourglass

   ' Setup form.
   frmSrc.ScaleMode = PIXELS ' All dimensions must be in pixels.
   hDCWindow = frmSrc.hDC    ' hDC of client area
   WindowWidth = frmSrc.ScaleWidth
   WindowHeight = frmSrc.ScaleHeight
   ' The following must be entered on a single line:
   WindowRatio = (WindowWidth * Screen.TwipsPerPixelX) /
      (WindowHeight * Screen.TwipsPerPixelY)

   ' Setup printer.
   Printer.ScaleMode = PIXELS
   Printer.Print ""; ' Start print job; initialize printer object.
   ' The following must be entered on a single line:
   PrinterRatio = (Printer.ScaleWidth * Printer.TwipsPerPixelX) /
      (Printer.ScaleHeight * Printer.TwipsPerPixelY)

   ' Scale the output to the page size.
   If WindowRatio &gt;= PrinterRatio Then
      PrinterWindowWidth = Printer.ScaleWidth
      ' The following must be entered on a single line:
      PrinterWindowHeight = (PrinterWindowWidth * Printer.TwipsPerPixelX) /
         (WindowRatio * Printer.TwipsPerPixelY)
   Else
      PrinterWindowHeight = Printer.ScaleHeight
      ' The following must be entered on a single line:
      PrinterWindowWidth = (PrinterWindowHeight * Printer.TwipsPerPixelY *
         WindowRatio) / Printer.TwipsPerPixelX
   End If

   ' Print the client area.
   On Error Resume Next
   ' The following must be entered on a single line:
   Call StretchFormToDC(CInt(Printer.hDC), 0, 0, PrinterWindowWidth,
      PrinterWindowHeight, hDCWindow, 0, 0, WindowWidth, WindowHeight)
   If Err Then
      MsgBox Err &amp; ": Error Printing Client Area"
      ' Predefined error codes are commented in the general declarations.
   End If
   On Error GoTo 0

   ' End the print job.
   Printer.EndDoc

   Screen.MousePointer = 0 ' Default

End Sub

'--------------------------------------------------------------------------

' StretchFormToDC
'  - Stretches a specified portion of a form to a device context.
'  - Works with 256 colors.
'  - Works on PostScript and PCL printers (driver must support
'    StretchDIBits).
'  - Allows you to output to other device contexts
'
' hDCDest:
'  - Destination device context.
'  - ScaleMode of device context must be pixels.
'  - If using Printer object, the printer should be initialized. This can
'    be accomplished with Printer.Print ""; or any other printing.
'
' LeftDest, TopDest, WidthDest, HeightDest:
'  - Describe the location and size of the image on the printer in pixels.
'
' hDCSrc:
'  - The source device context; should be from a form.
'
' LeftSrc, TopSrc, WidthSrc, HeightSrc:
'  - Describe the location and size of the source image in pixels.
'
' Errors:
'  - Errors with a predefined code if necessary.
'
'--------------------------------------------------------------------------

' The following must be entered on a single line:
Sub StretchFormToDC (hDCDest As Integer, LeftDest, TopDest, WidthDest,
   HeightDest, hDCSrc As Integer, LeftSrc, TopSrc, WidthSrc, HeightSrc)

   Dim BMI As BITMAPINFO
   Dim hMem As Integer
   Dim lpBits As Long
   Dim r As Integer
   Dim hDCMemory As Integer
   Dim hBmp As Integer
   Dim hBmpPrev As Integer
   Dim hPal As Integer
   Dim hPalPrev As Integer

   Dim RasterCapsDest As Integer
   Dim RasterCapsSrc As Integer
   Dim HasPaletteSrc As Integer
   Dim BitsPixelSrc As Integer
   Dim PlanesSrc As Integer
   Dim PaletteSizeSrc As Integer
   Dim LogPal As LOGPALETTE

   ' Set error trap.
   On Error GoTo SFTDC_ERRORS:

   ' Check that destination supports StretchDIBits.
   RasterCapsDest = GetDeviceCaps(hDCDest, RASTERCAPS)
   If (RasterCapsDest And RC_STRETCHDIB) &lt;&gt; RC_STRETCHDIB Then
      Error ERR_DEVSTRETCHDIB
   End If

   ' Get properties of source device context.
   RasterCapsSrc = GetDeviceCaps(hDCSrc, RASTERCAPS)
   HasPaletteSrc = RasterCapsSrc And RC_PALETTE
   BitsPixelSrc = GetDeviceCaps(hDCSrc, BITSPIXEL)
   PlanesSrc = GetDeviceCaps(hDCSrc, PLANES)
   PaletteSizeSrc = GetDeviceCaps(hDCSrc, SIZEPALETTE)

   ' Limit function use to 256-color palettes.
   If HasPaletteSrc And (PaletteSizeSrc &lt;&gt; 256) Then Error ERR_PALSIZE

   ' Copy source to a bitmap in memory.
   hDCMemory = CreateCompatibleDC(hDCSrc)
   If hDCMemory = 0 Then Error ERR_CREATEMEMDC
   hBmp = CreateCompatibleBitmap(hDCSrc, WidthSrc, HeightSrc)
   If hBmp = 0 Then Error ERR_CREATEBMP
   hBmpPrev = SelectObject(hDCMemory, hBmp)
   ' Create a copy of the system palette and realize it if necessary.
   If HasPaletteSrc Then
      LogPal.palVersion = &amp;H300
      LogPal.palNumEntries = 256
      r = GetSystemPaletteEntries(hDCSrc, 0, 256, LogPal.palPalEntry(0))
      If r = 0 Then Error ERR_GETPALETTE
      hPal = CreatePalette(LogPal)
      If hPal = 0 Then Error ERR_CREATEPAL
      ' Select the palette into the destination and realize it.
      hPalPrev = SelectPalette(hDCMemory, hPal, 0)
      r = RealizePalette(hDCMemory)
   End If
   ' Copy the bitmap to the memory-device context.
   ' The following must be entered on a single line:
   r = BitBlt(hDCMemory, 0, 0, WidthSrc, HeightSrc, hDCSrc, LeftSrc,
</PRE>TopSrc,
<P>
<PRE>      SRCCOPY)
   If r = 0 Then Error ERR_BITBLT
   hBmp = SelectObject(hDCMemory, hBmpPrev)

   ' Fill in necessary parts of bitmap info.
   BMI.bmiHeader.biSize = 40
   BMI.bmiHeader.biWidth = WidthSrc
   BMI.bmiHeader.biHeight = HeightSrc
   BMI.bmiHeader.biPlanes = 1
   If BitsPixelSrc * PlanesSrc = 24 Then
      ' 24-bit True color may require too much memory so
      ' limit to 256-color DIB.
      ' You can get rid of this exception and the routine
      ' should copy 24-bit color bitmaps.
      BMI.bmiHeader.biBitCount = 8 ' 8 bits = 256 colors
   Else
      BMI.bmiHeader.biBitCount = BitsPixelSrc * PlanesSrc
   End If
   BMI.bmiHeader.biCompression = BI_RGB

   ' Allocate memory for bitmap bits.
   ' The following must be entered on a single line:
   hMem = GlobalAlloc(GMEM_MOVEABLE, (CLng(WidthSrc *
   BMI.bmiHeader.biBitCount + 31) \ 32) * 4 * HeightSrc)

   If hMem = 0 Then Error ERR_BITMEM
   lpBits = GlobalLock(hMem)

   ' Get the bits and color information from the bitmap.
   ' The following must be entered on a single line:
   r = GetDIBits(hDCMemory, hBmp, 0, HeightSrc, lpBits, BMI,
</PRE>DIB_RGB_COLORS)
<P>
<PRE>   If r = 0 Then Error ERR_GETDIB

   ' Stretch the device-independent bitmap to the printer.
   ' The following must be entered on a single line:
   r = StretchDIBits(hDCDest, LeftDest, TopDest, WidthDest, HeightDest, 0,
</PRE>0,
<P>
<PRE>      WidthSrc, HeightSrc, lpBits, BMI, DIB_RGB_COLORS, SRCCOPY)
   If r = 0 Then Error ERR_STRETCHDIB

   ' Free up memory used for bitmap bits.
   r = GlobalUnlock(hMem)
   If r &lt;&gt; 0 Then Error ERR_UNLOCKMEM
   r = GlobalFree(hMem)
   If r &lt;&gt; 0 Then Error ERR_FREEMEM

   ' Select the default palette back if necessary.
   If HasPaletteSrc Then
      r = SelectPalette(hDCMemory, hPalPrev, 0)
      If r = 0 Then Error ERR_SELPAL
      r = DeleteObject(hPal)
      If r = 0 Then Error ERR_DELPAL
   End If

   ' Delete created objects.
   r = DeleteObject(hBmp)
   If r = 0 Then Error ERR_DELBMP
   r = DeleteDC(hDCMemory)
   If r = 0 Then Error ERR_DELMEMDC

   On Error GoTo 0
</PRE>Exit Sub
<P>
<PRE>' Clean up predefined errors if necessary.
</PRE>SFTDC_ERRORS:
<PRE>   Select Case Err
      Case ERR_CREATEBMP
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_GETPALETTE, ERR_CREATEPAL
         hBmp = SelectObject(hDCMemory, hBmpPrev)
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_BITBLT
         If HasPaletteSrc Then
            r = SelectPalette(hDCMemory, hPalPrev, 0)
            r = DeleteObject(hPal)
         End If
         hBmp = SelectObject(hDCMemory, hBmpPrev)
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_BITMEM
         If HasPaletteSrc Then
            r = SelectPalette(hDCMemory, hPalPrev, 0)
            r = DeleteObject(hPal)
         End If
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_GETDIB, ERR_STRETCHDIB
         r = GlobalUnlock(hMem)
         r = GlobalFree(hMem)
         If HasPaletteSrc Then
            r = SelectPalette(hDCMemory, hPalPrev, 0)
            r = DeleteObject(hPal)
         End If
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_UNLOCKMEM, ERR_FREEMEM
         If HasPaletteSrc Then
            r = SelectPalette(hDCMemory, hPalPrev, 0)
            r = DeleteObject(hPal)
         End If
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_SELPAL, ERR_DELPAL
         r = DeleteObject(hBmp)
         r = DeleteDC(hDCMemory)
         Error Err
      Case ERR_DELBMP
         r = DeleteDC(hDCMemory)
         Error Err
      Case Else
         Error Err
   End Select
   Error Err

End Sub

</PRE><h2>REFERENCES</h2>
 

<UL><LI>"Programming Windows 3.1: The Microsoft Guide to Writing Applications
   for Windows 3.1," Charles Petzold, Microsoft Press, 1992.

<LI>"Microsoft Windows Software Development Kit: Programmer's Reference."

<LI>Windows SDK Help file shipped with the Professional Editions of the
   Microsoft Visual Basic Programming System for Windows, versions 2.0 and
   3.0.

<LI>Windows SDK Knowledge Base Articles <B><A HREF="../WIN16SDK/Q81498.htm">Q81498</A></B> and <B><A HREF="../WIN16SDK/Q80080.htm">Q80080</A></B>.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 dump<BR>
KBCategory: kbprint kbprg kbcode<BR>
KBSubcategory: APrgPrint<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 20, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

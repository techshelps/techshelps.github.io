

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Accessing Property in Initialize Event Causes Infinite Loop </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171979">
<META NAME="KBModify" CONTENT="1997/08/04">
<META NAME="KBCreate" CONTENT="1997/07/25">
<META NAME="Keywords" CONTENT="PrgOther VB4ALL vbwin kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  If a property of an object is referred to in its own Initialize event, then Visual Basic will fire the Initialize event for that object so that it can be instantiated. An infinite recursion will result until stack space runs out and you receive the...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAO4,QAW6,QBXS,QAH4,QABA,QA5F,QAMA,QBWC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Accessing Property in Initialize Event Causes Infinite Loop</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171979</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If a property of an object is referred to in its own Initialize event, then
Visual Basic will fire the Initialize event for that object so that it can
be instantiated. An infinite recursion will result until stack space runs
out and you receive the following error:
<P>
<PRE>   Run-time error '28':
   Out of stack space

</PRE>This will occur for "built-in" objects, such as Forms, and objects created
using Visual Basic classes.
<P>
<P><h2>CAUSE</h2>
 
<P>
Before a property of an object can be accessed, the object must be
initialized. This is, in fact, the whole point of the Initialize event; it
allows the developer to place the object in a satisfactory state by
initializing private data before the properties and methods of an object
are invoked. The properties and methods may have to rely on the internal
data of the object being in a stable state.
<P>
Consequently, the Initialize event must be completed before a property or
method of an object can be accessed, and therefore it is not unexpected
that the Initialize event is fired again when a property is referred to in
the Initialize event.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If you are trying to set a property of a Visual Basic built-in object, then
it may be possible to refer to the property in an event that occurs later
than the Initialize event. For example, rather than setting the Caption of
a Form in the Initialize event, set it in the Load event or the Activate
event.
<P>
An alternative to referring directly to Form1, which is a global object
pointer, is to use the Me keyword. When referring directly to Form1 in the
Initialize event of the Form, the global object Form1 has not been created
so Visual Basic tries to instantiate it. This process causes the infinite
recursion. Use the Me Keyword to avoid this recursion.
<P>
If you are trying to set a property for an object created with class
modules in Visual Basic, it may be appropriate to create a Method for
initializing data or setting initial values for properties, for which the
client program would be responsible for calling after instantiating an
object. (Perhaps a good analogous example of this is the OLE API function
OLEInitialize, which client programs written in C must explicitly call
before using OLE services).
<P>
Another way to accomplish this is to set the private data on which a
property relies in the Initialize event. For example, if a Visual Basic
property of a class uses a private data member like so:
<P>
<PRE>   Private lPrivProp1 As Long

   Public Property Get lProp1() As Long
   lProp1 = lPrivProp1
   End Property

   Public Property Let lProp1(vNewValue As Long)
   lPrivProp1 = vNewValue
   End Property

</PRE>then in the Initialize event of the class module in which this property is
contained, it is not appropriate to try and set the public property of the
class, but rather to set the private data member to a value.
<P>
<P><h2>STATUS</h2>
 
<P>
This is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps To Reproduce the Problem</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>In the Initialize event of Form1, add the following line of code:
<P>
<P><PRE>      Form1.Caption = "Hello world"
</PRE>
<P><LI>Run the project by pressing the F5 key. Eventually Visual Basic will run
   out of stack space.
<P>
</OL><h3>Steps To Work Around the Problem</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>In the Initialize event, place the following line of code:
<P>
<P><PRE>      Me.Caption = "Hello world"
</PRE>
<P><LI>Run the project by pressing the F5 key. The Form should appear with a
   "Hello World" caption.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: hang<BR>
Keywords          : PrgOther VB4ALL vbwin kberrmsg<BR>
Version           : 4.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Avoid Rounding &amp; Overflow Probs on Pentium Processors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126455">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1995/02/23">
<META NAME="Keywords" CONTENT="kbhw kbprg kb3rdparty">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Intel Corporation has identified two minor bugs in the Pentium processor relating to the conversion of floating point values to integer numbers when using the Floating Point Integer Store (FIST) instruction. These bugs involve the processing of exc...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QAK2,QAL3,QAKC,QA5W,QA4Q,QAH4,QBS0,QBC6,QAAP,QATS,QAKD,QAEJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Avoid Rounding &amp; Overflow Probs on Pentium Processors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126455</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Intel Corporation has identified two minor bugs in the Pentium processor
relating to the conversion of floating point values to integer numbers when
using the Floating Point Integer Store (FIST) instruction. These bugs
involve the processing of exceptions for a narrow range of bounds for
floating point numbers and involve unexpected behavior in two rounding
modes for six specific operands. Programmers can easily work around the
first bug by range checking prior to converting the values. Programmers can
avoid the second bug by not overriding the default rounding modes.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Different programming languages handle conversions from floating point to
integer in different ways. C, C++, and FORTRAN programs are most likely
safe; that is, they are not likely to be affected without explicit
modification of rounding modes by the programmer. Basic programs are more
likely to be affected by the bugs.
<P>
Application programs in general are not affected. Applications should
include appropriate error checking and take appropriate actions to recover
from exceptions. To do this, applications need to do explicit range
checking prior to conversion or implement explicit exception handling. If
an application relies on explicit exception handling, the possibility of
encountering the bug exists. Applications written in languages that use
exception handling will most likely use range checking, thereby allowing
the application to be compiled with a no-check option for performance
reasons.
<P>
<P><h3>FIST Overview</h3>
 
<P>
The FIST instruction is used to convert floating point numbers to signed
integers. For example, in a C or FORTRAN program, when an integer variable
is assigned a floating point value, that value must be truncated to an
integer before being stored. Other conversions from floating point to
integer are also possible; for example, Basic and Pascal round instead of
truncating the fractional part.
<P>
The FIST instruction operates in one of four rounding modes: chop (also
known as truncate), nearest (nearest or even), up, and down. The default
type conversions done by C and FORTRAN use the chop rounding mode, whereas
Basic uses nearest. The processor indicates whether the input operand is an
integer by means of a precision exception (PE) flag. The PE flag is set to
true if the number to be converted was not already an integer; that is, it
had a fractional part. It is unchanged otherwise. The effect of rounding is
shown in the rounding direction( C1) flag. If an input value is rounded to
a number with a greater magnitude, the C1 flag is set; otherwise, it is
cleared.
<P>
FIST converts floating point numbers to 16, 32, or 64-bit signed integers.
Because the range of a floating point number is larger than any of these
formats, some floating point numbers cannot be converted to integers. For
example, the largest 16-bit integer is 32767, so an attempt to convert
32768.5 to a 16-bit integer results in an exception (in this case, the
invalid operation exception (IE)). The processing of an exception is
controlled by the exception mask in the floating point control register. If
an invalid operation exception mask is set, the exception is masked,
otherwise, it is unmasked.
<P>
For example, applications running under Microsoft Windows version 3.1 begin
with all floating point exceptions masked. Different applications may
change the exception masks and provide their own methods for handling
exceptions. For example Microsoft Visual C++ sets the invalid operation
exception to unmasked, while leaving the precision exception masked. An
application developed in C++ will see a pop-up window appear when a FIST
instruction attempts to convert a number that is out of bounds, unless the
exception handling is changed.
<P>
<P><h3>Undetected Overflow</h3>
 
<P>
A bug has been identified by Intel in FIST instructions that convert a
floating point number to either a 16- or 32-bit signed integer. The FISTP
instruction that stores to a 64-bit integer is not affected. The error
occurs when a rounding mode is set to "nearest" or "up" for one limited
range of floating point values in the out of bounds region. For this range,
regardless of the exception mask, the value 0 is written to memory, the PE
flag is set, the IE flag is not set, and no IE exception is raised.
<P>
In the figures below, floating point values from A and B can be converted
to integers. Values outside this range should raise an exception. This bug
affects values in the C and D range only.
<P>
16-Bit FIST
<PRE>                                                 65535.5 -
          -32768.5     0      32767.5            65536.0
</PRE>&lt;-------------[--------|--------]-------------------|--------&gt;
<PRE>   overflow       Normal Range        overflow
              A                 B                   C


</PRE>32-Bit FIST
<PRE>                                                          4,294,967,295.5 -
      -2,147,483,648.5     0      2,147,483,647.5         4,294,967,296.0
</PRE>&lt;-------------[------------|------------]-----------------------|--------&gt;
<PRE>   overflow           Normal Range             overflow
              A                         B                       D

</PRE>For example, take a number outside the range of a 32-bit signed integer,
such as 4,294,967,295.7. This is rounded mathematically to 4,294,967,296.
Due to the bug, the Pentium processor does not raise an exception to this
number. It simply writes a 0 into memory and does not transfer control to a
handler or raise the IE flag.
<P>
<P><h3>Applications that Use Microsoft Visual Basic</h3>
 
<P>
Microsoft Visual Basic automatically promotes data types to handle mixed
type operations. This avoids the overflow condition for many cases. For
example:
<P>
<PRE>   IntX = SngY*IntZ
   IntX = 65535.7*2

</PRE>However, implicit conversions may be affected. The following Visual Basic
version 3.0 code produces different results depending on the processor:
<P>
<PRE>   Dim X As Integer
   Dim Y As Single
   Y = 65535.5
   X = Y
   MsgBox Cstr(X)

</PRE>The above code should result in a run-time error 6 "Overflow" message. On a
Pentium processor-based machine, this code results in a return of zero (0).
A simple way to avoid this error is to include a range check in your code.
For example:
<P>
<PRE>   If (x)&gt;=65535.5
   Then Error 6

</PRE>The only programs affected would be those that explicitly trap error 6
(overflow) and involve either explicit assignment of a floating-point
expression to an Integer data type or a Long data type or explicit
conversion of a floating point expression using CInt() or CLng().
<P>
Programs that employ explicit bounds checking to prevent overflow
conditions should not be affected.
<P>
If bounds checking adversely affects performance in a loop, migrating the
code to a C language dynamic-link library (DLL) may be a better option.
<P>
<P><h3>Program Results</h3>
 
<P>
At the assembly level, the recommended workaround is the insertion of the
FRNDINT (Floating Point Round to Integer) instruction immediately preceding
the FIST instruction. FRNDINT will correctly round the floating point value
before executing the FIST instruction (as opposed to FISTP); the correction
will also need to preserve its input. Future versions of Visual Basic will
include this fix.
<P>
NOTE: Any method that forces the processor to emulate floating point
instructions will avoid the problem, at the cost of reduced performance and
speed.
<P>
<P><h3>Rounding Mode Errors</h3>
 
<P>
For six specific operands, the results of the FIST instructions are not as
expected. There are flag differences in all four rounding modes. There is
also the possibility of an incorrect number being stored in the "up" and
"down" rounding modes. In the "nearest" and "chop" rounding modes, which
are most frequently used, the value stored to memory is correct. This bug
affects the 16-, 32-, and 64-bit variants of the instruction.
<P>
The following table shows the affected numbers, rounding modes, and
expected and actual values:
<P>
<PRE>   Operand     | Rounding | Exp. | Actual | Exp. | Actual | Exp. | Actual
(any one of)   |  mode    | mode |  mode  |  PE  |   PE   |  C1  |   C1
</PRE> 
<PRE>1/16 (0.0625)  |  nearest |  0   |   0    |   1  |  unch. |  0   |   0
1/8 (0.125)    |   chop   |  0   |   0    |   1  |  unch. |  0   |   0
3/16 (0.1875)  |   down   |  0   |   0    |   1  |  unch. |  0   |   0
               |    up    |  1   |   0    |   1  |  unch. |  1   |   0
-1/16 (-0.0625)|  nearest |  0   |   0    |   1  |  unch. |  0   |   0
-1/8 (-0.125)  |   chop   |  0   |   0    |   1  |  unch. |  0   |   0
-3/16 (-0.1875)|   down   | -1   |   0    |   1  |  unch. |  1   |   0
               |    up    |  0   |   0    |   1  |  unch. |  0   |   0

</PRE>For six numbers (1/16, 1/8, 3/16, -1/16, -1/8, and -3/16) incorrect results
can occur. In all rounding modes, the PE flag is not set consistently with
the rounding that occurred; it remains unchanged. For the three positive
numbers in the "up" rounding mode, FIST stores an incorrect value (0
instead of 1); similarly, for the three negative numbers in the "down"
rounding mode, FIST gives an incorrect result (0 instead of -1). In each of
these cases, the C1 bit is also not set correctly. However, in the
"nearest" and "chop" rounding modes, the value stored to memory is always
correct, as is the C1 bit.
<P>
<P><h3>Program Results</h3>
 
<P>
Incorrect results from the second bug are only returned when the rounding
mode is set to "up" or "down." Therefore, it should not affect an
application unless the application explicitly changes the rounding mode
from the language default. If an application changes to "up" or "down"
rounding mode, it can no longer rely on language-provided floating-point-
value-to-integer-number conversion facilities and must provide its own by,
for example, using FRNDINT.
<P>
The incorrect status information in the PE flag, affecting all rounding
modes, should be insignificant in most applications. If rounding occurs,
the PE flag is already set. The PE exception is also typically masked. The
C1 bit is only used by an exception handler, so the incorrect values are
insignificant.
<P>
<P><h3>Workaround</h3>
 
<P>
At the assembly level the recommended workaround for the second FIST bug is
the same for the first; inserting the FRNDINT instruction immediately
preceding the FIST instruction.
<P>
Application programmers can avoid rounding errors in the second bug by not
overriding the default rounding modes.
<P>
NOTE: Any method that forces the processor to emulate floating point
instructions will avoid both problems, at the cost of reduced performance
and speed.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbhw kbprg kb3rdparty<BR>
KBSubcategory: RefsThird<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

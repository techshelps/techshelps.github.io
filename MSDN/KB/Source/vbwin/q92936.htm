

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Get Windows 3.1 Version Number in VB with GetVersion </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q92936 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/11/19">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  From a Visual Basic program, you can determine the Windows version by calling the Windows 3.1 API function GetVersion from the Windows kernel module. The GetVersion function can help your program accommodate differences in the way API calls operate...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QBS0,QALG,QAY5,QAUD,QAH4,QBV8,QAB9,QAKD,QAKC,QBME,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Get Windows 3.1 Version Number in VB with GetVersion</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q92936 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
This information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 1.0, 2.0, and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
From a Visual Basic program, you can determine the Windows version by
calling the Windows 3.1 API function GetVersion from the Windows kernel
module. The GetVersion function can help your program accommodate
differences in the way API calls operate between different versions of
Windows (such as differences between API parameters or return values).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code example below shows how to make the GetVersion function call,
which takes no parameters. The return value is a DWORD (double-word) value,
which translates into a long integer (32-bit value) in Visual Basic.
<P>
The GetVersion function changed in Windows 3.1 from a WORD value to
a DWORD (double-word) value. The low-order word returns the major (low
byte) and minor (high byte) version numbers of Windows, and the high-
order word returns the major (high byte) and minor (low byte) versions
of MS-DOS, if the function is successful.
<P>
For details on the GetVersion function, see pp. 469-470 in the "Microsoft
Windows Software Development Kit Programmer's Reference Vol. 2: Functions."
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Create a new form and add two text boxes (Text1 and Text2) and a command
   button (Command1).

<P><LI>Add the following declaration to the General Declarations section:
<P>
<PRE>   Declare Function GetVersion Lib "kernel" () As Long

</PRE><P><LI>Add following code to the command button's Click event:
<P>
<PRE>   Sub Command1_Click ()
      I&amp; = GetVersion()

      Windows&amp; = I&amp; And &amp;HFFFF&amp;
      Dos&amp; = (I&amp; And &amp;HFFFF0000) / 65536

      ' The low byte is derived by masking off high byte.
      Lowbyte$ = Str$(Dos&amp; And &amp;HFF)
      ' The high byte is derived by masking off low byte and shifting.
      Highbyte$ = LTrim$(Str$((Dos&amp; And &amp;HFF00) / 256))
      ' Assign MS-DOS version to Text property.
      Text1.Text = Highbyte$ + "." + Lowbyte$

      Lowbyte$ = Str$(Windows&amp; And &amp;HFF)
      ' The high byte is derived by masking off low byte and shifting.
      Highbyte$ = LTrim$(Str$((Windows&amp; And &amp;HFF00) / 256))
      ' Assign Windows version to Text property.
      Text2.Text = Lowbyte$ + "." + Highbyte$
   End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
"Microsoft Windows Software Development Kit Programmer's Reference Vol. 2:
Functions", pp. 469-470.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

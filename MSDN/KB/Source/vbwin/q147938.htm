

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO: Getting Data from Temp Tables Created by Stored Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147938">
<META NAME="KBModify" CONTENT="1996/08/08">
<META NAME="KBCreate" CONTENT="1996/03/05">
<META NAME="Keywords" CONTENT="kbprg kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  It is common to have stored procedures use temporary tables to build a result set. When using RDO (Remote Data Object) to call this type of stored procedure it appears as though RDO does not return any results, only an empty result set and no error...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QBXS,QAO2,QABM,QAB9,QBVV,QBWS,QAL3,QALQ,QBF0,QAY2,QAYY,QAXB,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>RDO: Getting Data from Temp Tables Created by Stored Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 8, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147938</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, 32-bit only,
   for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is common to have stored procedures use temporary tables to build a
result set. When using RDO (Remote Data Object) to call this type of stored
procedure it appears as though RDO does not return any results, only an
empty result set and no errors.
<P>
Testing this same query with the Microsoft SQL Server version 6.0 ISQL
utility produces the expected results, which leads you to believe RDO is
restricted from reading these temporary tables.
<P>
This is not an RDO restriction and RDO CAN retrieve data from a temporary
table created in a stored procedure. However, no data access library can
create a SCROLLABLE CURSOR on a temporary table created within a stored
procedure. Temporary tables that are created within a stored procedure are
DESTROYED when that stored procedure ends. If the table is not there, no
data access library can possibly open a scrollable cursor on it, and go
back to it when the next rowset is needed or when the user tries to update,
insert or delete it.
<P>
ISQL does not open a cursor, nor use a cursor library, so it just reads
data off the pipe, one row at a time, read-only, forward-only (this is also
the default mode of dblib so many people are used to working this way).
The good news is that RDO can do this as well. You just need to tell SQL
Server not to open a server-side cursor on the temporary table. This is
done by setting the RowsetSize property to 1 and opening the result set as
forward-only and read-only (just like ISQL does). RDO uses 100 as the
default for RowsetSize, since this is the optimal setting for most cursor
operations and when it is set to anything greater than 1, SQL Server' ODBC
driver MUST attempt to create a server-side cursor, since fat rowsets
require the ability to scroll and possibly update.
<P>
Remember that using cursors is much different than the read-only,
forward-only, rowset size of 1, approach to getting data back to the
client. To support the operations that cursors do (like scrolling
backwards, doing positioned updates, etc.), the source of the data has to
live for the entire time the cursor is open. RDO can operate in a cursor
mode, or a "fire hose" mode, which allows you to perform whatever
functionality you want.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Program</h3>
 
<P>
Step 1: Create the Stored Procedure
 
<P>
This stored procedure simply creates a temporary table called "#temptest,"
filling it with all the rows from the Authors table in the Pubs database.

<OL><P><LI>Open the SQL Server 6.0 ISQL utility and change the default database to
   Pubs.

<P><LI>Paste the following code into the Query window and click the Execute
   Query button, or press CTRL+E, to execute the Transact-SQL code:
<P>
   create proc TempTableTest as
   select * into #testtemp from authors
   select * from #testtemp

<P><LI>The following confirmation message displays
<P>
   "This command did not return data, and it did not return any rows"
<P>
   which indicates that the Transact-SQL code created the stored procedure
   correctly.
<P>
</OL><h3>Step 2: Create the Visual Basic Code</h3>
 
<P>
The following Visual Basic code opens a connection to the server, creates a
prepared statement for the stored procedure, sets the result set size to 1
and opens the result set as forward-only, read-only. When you run this
code, all the author IDs and last names appear in the debug window.
<P>
This sample code uses a "DSN-less" ODBC connection so you do not need to
set up a DSN (Data Source Name) with the ODBC Admin utility.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button (Command1) and a listbox (list1) to Form1.

<P><LI>Paste the following code into the General Declarations section of Form1:
<P>
<PRE>   Private Sub Command1_Click()
     Dim cn As rdoConnection
     Dim ps As rdoPreparedStatement
     Dim rs As rdoResultset
     Dim strConnect As String

     strConnect = "driver={SQL Server};server=myserver;" &amp; _
       "database=pubs;uid=sa;pwd="
     rdoEnvironments(0).CursorDriver = rdUseOdbc
     Set cn = rdoEnvironments(0).OpenConnection( _
       dsName:="", _
       Prompt:=rdDriverNoPrompt, _
       ReadOnly:=False, _
       Connect:=strConnect)

     Set ps = cn.CreatePreparedStatement( _
       Name:="ps1", _
       SqlString:="{call TempTableTest }")
     ps.RowsetSize = 1
     Set rs = ps.OpenResultset( _
       Type:=rdOpenForwardOnly, _
       LockType:=rdConcurReadOnly)

     While Not rs.EOF
       list1.AddItem rs(0) &amp; ", " &amp; rs(1)
       rs.MoveNext
     Wend
   End Sub

</PRE><P><LI>Note that you need to change your DATABASE, UID, and PWD parameters in
   the OpenConnection method.

<P><LI>Start the program or press the F5 key.

<P><LI>Click the Command1 button to execute the stored procedure and display
   the results in the list control.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
<PRE>   For complete documentation, refer to the "Microsoft ODBC 2.0
   Programmer's Reference and SDK Guide."

   Hitchhiker's Guide to Visual Basic and SQL Server, Microsoft Press.
   ISBN: 1-55615-906-4.).
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb432<BR>
KBCategory: kbprg kbcode kbhowto<BR>
KBSubcategory: APrgDataODBC<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 8, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

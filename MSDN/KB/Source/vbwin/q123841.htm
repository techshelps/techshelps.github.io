

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create a FORTRAN DLL and Call It from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123841">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/12/13">
<META NAME="Keywords" CONTENT="kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows you how you can create a FORTRAN Dynamic Link Library (DLL) for Microsoft Windows and call the procedures it contains from Microsoft Visual Basic for Windows. You must have Microsoft FORTRAN Optimizing Compiler version 5.1 (or la...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUD,QAGI,QAB9,QAH4,QBHQ,QDL9,QBWO,QBWN,QAMA,QABI,QA4Q,QBWQ,QAP2,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create a FORTRAN DLL and Call It from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123841</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft FORTRAN for MS-DOS and OS/2 version 5.1
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows you how you can create a FORTRAN Dynamic Link Library
(DLL) for Microsoft Windows and call the procedures it contains from
Microsoft Visual Basic for Windows. You must have Microsoft FORTRAN
Optimizing Compiler version 5.1 (or later) for MS-DOS and OS/2 to create a
FORTRAN DLL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are several steps to linking DLLs written in FORTRAN to Visual Basic
programs. These steps are briefly described below and explained in detail
later in this article.
<P>
First, create or modify the FORTRAN procedures. You can use Programmer's
Workbench to create or modify FORTRAN procedures. You can use SUBROUTINE
and FUNCTION procedures. The procedures must follow these rules:

<UL><LI>Use the default FORTRAN or Pascal calling convention.

<LI>Use data types that Visual Basic can use. See the "Compatible Data Types
   in FORTRAN and Visual Basic" section in this article.
<P>
</UL>Next, create the module-definition (.DEF) file. This file gives Windows-
specific information to the Segmented-Executable Linker. This information
is later used by Windows to dynamically link the library to your Visual
Basic application.
<P>
Now you're ready to compile the source code to produce an object file, and
then link it to actually create the DLL. Note that Visual Basic expects all
DLL procedures to take far pointers to values passed by reference. Windows
also imposes some restrictions on DLLs. You can use compiler switches to
create a DLL-ready object file, but you will need to have the appropriate
static-link (.LIB) library to create the DLL.
<P>
Next, write the Visual Basic procedure declarations for each procedure.
These will tell Visual Basic several things:

<UL><LI>The name and type of each procedure.

<LI>The name and location of the DLL.

<LI>The order and type of its formal arguments.

<LI>The data type a FUNCTION will return.
<P>
</UL>Finally, write the procedure calls. The procedure calls will be identical
to calls made to Visual Basic procedures.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Make sure you have the appropriate library. Check the FORTRAN\LIB
   directory for the file LDLLFEW.LIB. If you don't have this file, you
   will need to create it from your original FORTRAN program disks. If you
   already have this file, skip to step 2; otherwise, follow these steps:
<P>
   a. Be sure the LIB.EXE program is in a directory in the current PATH.
<P>
   b. Insert Disk 1, and run SETUP.EXE.
<P>
   c. Press the ENTER key to go to the Main Menu.
<P>
   d. Choose "Load or build additional libraries" from the Main Menu,
<P><PRE>      and press the ENTER key.
</PRE><P>
   e. Follow the on-screen instructions to if you need to change the
<P><PRE>      source of the component libraries. Then press the ENTER key.
</PRE><P>
   f. Specify the destination for the library files. This should be
<P><PRE>      the directory where your combined libraries are already
      installed (probably C:\FORTRAN\LIB). Then press the ENTER key.
</PRE><P>
   g. Highlight "MS-DOS and Windows" in the Target Operating Systems
<P><PRE>      list, and press the spacebar to select it. Deselect any other
      entries, and press the ENTER key.
</PRE><P>
   h. Highlight "Yes" to build FORTRAN Windows DLL libraries, and press
<P><PRE>      the ENTER key.
</PRE><P>
   i. Highlight "Yes" to build combined libraries, and press the ENTER key.
<P>
   j. Highlight "Emulator math" in the Math Options list, and press
<P><PRE>      the spacebar to select it. Deselect any other entries, and press
      the ENTER key.
</PRE><P>
   k. Make sure "Large memory model" is highlighted in the Memory Models
<P><PRE>      list,  and press the ENTER key.
</PRE><P>
   l. You may select either "Yes" or "No" to include GRAPHICS.LIB in
<P><PRE>      the combined libraries. Then press the ENTER key.
</PRE><P>
   m. You may select either "Yes" or "No" to include error
<P><PRE>      descriptions in combined libraries. Then press the ENTER key.
</PRE><P>
   n. Select "No" to the "Install C dependent libraries?" question,
<P><PRE>      and press the ENTER key.
</PRE><P>
   o. Select "Yes" to delete the component libraries when finished,
<P><PRE>      and press the ENTER key.
</PRE><P>
   p. You may choose to rename any of the default libraries; this step
<P><PRE>      does not affect the creation of the LDLLFEW.LIB file.
</PRE><P>
   q. Confirm that your responses are displayed accurately, and press the
<P><PRE>      ENTER key on the "NO CHANGES" entry to begin building the libraries.
</PRE><P>
   r. Press the ENTER key to begin building the combined libraries at
<P><PRE>      the prompt.
</PRE><P>
   s. Exit the Setup program when it finishes.

<P><LI>Create the FORTRAN procedures.
<P>
   a. Using Programmer's Workbench or another text editor, create a file
<P><PRE>      called FDLL.FOR, and type the following code beginning at column 7:
</PRE><P>
<P><PRE>      SUBROUTINE fsub (x [REFERENCE])
<PRE></PRE>        INTEGER*4 x
        x = x + 1
      END

      INTEGER*2 FUNCTION ffunc (y [VALUE])
        INTEGER*2 y
        ffunc = y + 1
      END

      SUBROUTINE fstring (fstr [REFERENCE])
        CHARACTER*20 fstr
        fstr = 'Jack Be Nimble'
      END

   b. Save the file, but don't exit the editor.

   NOTE: This source code defines three procedures. The first, fsub, takes
   a long (4-byte) integer by reference. It then increments the long
   integer that was passed to it by 1. The second procedure, ffunc,
   takes a short (2-byte) integer by value, and returns a short integer
   equal to the value of the integer incremented by 1. The last, fstring,
   takes a string value by reference, and assigns the string "Jack Be
   Nimble" to the string passed to it.

</PRE><P><LI>Create the module-definition (.DEF) file.
<P>
   a. Using the text editor, create a new file called FDLL.DEF and type in
<P><PRE>      the following lines:
</PRE><P>
<P><PRE>      ; FDLL.DEF - Module Definition file for FDLL.FOR
      ;
<PRE></PRE>      LIBRARY            FDLL
      DESCRIPTION        'Sample FORTRAN DLL'
      EXETYPE            WINDOWS 3.0
      CODE               PRELOAD MOVEABLE DISCARDABLE
      DATA               PRELOAD MOVEABLE SINGLE
      HEAPSIZE           1024
      EXPORTS            fsub
                         ffunc
                         fstring
                         WEP

   b. Save the file, and exit the editor.

   NOTE: This is a fairly standard FORTRAN module definition file for a
   DLL. A similar one can be found on page 136 of the Microsoft FORTRAN
   version 5.1 Advanced Topics manual. The most significant parts you
   will need to change for future DLLs you create are the LIBRARY,
   DESCRIPTION, and EXPORTS entries.

</PRE><P><LI>Compile and link the FORTRAN project.
<P>
   a. At the MS-DOS prompt, type:
<P>
<PRE>         fl /c /Aw /Gw fdll.for

      NOTE: The /c option creates an object file, FDLL.OBJ, without
      linking. The /Aw and /Gw options are required to create Windows DLLs.

   b. At the MS-DOS prompt, type:

         link /NOE /NOD fdll.obj, fdll.dll, , ldllfew.lib, fdll.def;

      NOTE: The /NOE and /NOD options prevent loading of the default
      FORTRAN static-link libraries. When LINK is done, you should have
      a file called FDLL.DLL.

   c. Ensure that you don't have a file called FDLL.DLL in the
      WINDOWS\SYSTEM directory. Rename or move it to a different directory
      if you do. Copy the FDLL.DLL you just created to the WINDOWS\SYSTEM
      directory.

</PRE><P><LI>Write the Visual Basic procedure declarations.
<P>
   a. Start Visual Basic for Windows. A new project will load with Form1
<P><PRE>      showing.
</PRE><P>
   b. In the general declarations section of the form, add this code:
<P>
<P><PRE>      Declare Sub fsub Lib "fdll.dll" (d As Long)
      Declare Function ffunc Lib "fdll.dll" (ByVal n As Integer) As Integer
      Declare Sub fstring Lib "fdll.dll" (ByVal fstr As String)
</PRE>
<P><LI>Place two command buttons (Command1 and Command2) and two text controls
   (Text1 and Text2) on Form1. Arrange them so that Command1 is near Text1,
   and Command2 is near Text2. Add the following code to each command
   button:
<P>
<PRE>   Sub Command1_Click ()
      Dim lngTest as Long
      lngTest = CLng(Val(Text1.Text))
      Call fsub(lngTest)
      Text1.Text = CStr(lngTest)
   End Sub

   Sub Command2_Click ()
     Dim intCheck as Integer
     intCheck = CInt(Val(Text2.Text))
     intCheck = ffunc(intCheck)
     Text2.Text = CStr(intCheck)
   End Sub

</PRE><P><LI>Add a third command button (Command3) and add the following code to its
   Click() event:
<P>
<PRE>   Sub Command3_Click()
      Dim fstr As String
      fstr = Space$(20)  ' Pad string before making call.
      Call fstring(fstr)
      MsgBox fstr        ' Display the results.
   End Sub

</PRE><P><LI>Run the program. When you click the Command1 or Command2 button, you
   will see incrementing values appear in the text boxes associated with
   each button.
<P>
   When you click the Command3 button, you will see the message "Jack Be
   Nimble" displayed.
<P>
</OL><h3>Additional Notes</h3>
 
<P>
DLL procedure and library names are not case sensitive to Visual Basic.
Also, the Declare statements can be in any module in your project. If they
are in a .BAS file, then they will be global to your project. If they are
in a .FRM file, the DLL functions can only be called from within that form.
<P>
You may get a general protection (GP) fault when you call a procedure in
your DLL. The most likely cause is that your Declare does not exactly match
the FORTRAN procedure. Check these areas:

<UL><LI>Be sure you use Declare Sub for SUBROUTINE and Declare Function for
   FUNCTION procedures, and ensure that all arguments are of the correct
   type and match up correctly.

<LI>Be sure you use the ByVal keyword in the Declare statement for any
   arguments that have the [VALUE] attribute in the FORTRAN procedure. By
   default, FORTRAN procedures expect all arguments to be passed by
   reference, and by default, Visual Basic passes all arguments by
   reference.
<P>
</UL>Always make sure you are using the most recent DLL that you created. If
you create the DLL in another directory, you must either copy it to the
WINDOWS\SYSTEM directory, or specify a full path to the DLL in the Declare
statement.
<P>
<P><h3>Compatible Data Types in FORTRAN and Visual Basic</h3>
 
<P>
The following table shows conversion information between some FORTRAN data
types and Visual Basic data types:
<P>
<PRE>FORTRAN data types      Visual Basic data types
</PRE></OL> 
<P>
<PRE>INTEGER*2               Integer
INTEGER*4               Long
REAL                    Single
REAL*4                  Single
DOUBLE PRECISION        Double
REAL*8                  Double
LOGICAL*2               Integer
LOGICAL*4               Long
CHARACTER*n             String*n (Passed ByVal)

</PRE>For more information on calling DLLs, please see Chapter 24, "Calling
Procedures in DLLs" of the Programmer's Guide for Microsoft Visual Basic
version 3.0 for Windows.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 5.10 GPF<BR>
KBCategory: kbprg kbtshoot<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Launch a Win32 Application from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129797">
<META NAME="KBModify" CONTENT="1997/11/24">
<META NAME="KBCreate" CONTENT="1995/05/04">
<META NAME="Keywords" CONTENT="APrgOther vb432 VB4WIN">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A Windows application can consist of more than one process, and a process can consist of more than one thread. The Microsoft Win32 application program interface (API) supports multitasking, which creates the effect of simultaneous execution of mult...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAUQ,QAPN,QAW6,QAMA,QAGB,QAHT,QAJZ,QAMR,QBWS,QA5F,QAY5,QATX,QBSO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Launch a Win32 Application from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129797</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A Windows application can consist of more than one process, and a process
can consist of more than one thread. The Microsoft Win32 application
program interface (API) supports multitasking, which creates the effect of
simultaneous execution of multiple processes and threads. This article
describes processes and threads, and explains how to create and use them
from Microsoft Visual Basic version 4.0, with a step-by-step example.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A process is a program that is loaded into memory and prepared for
execution. Each process has a private virtual address space. A process
consists of the code, data, and other system resources such as files,
pipes, and synchronization objects that are accessible to the threads of
the process. Each process is started with a single thread, but additional
independently executing threads can be created.
<P>
A thread can execute any part of the program's code, including a part
executed by another thread. Threads are the basic entity to which the
operating system allocates CPU time. Each thread maintains a set of
structures for saving its context while waiting to be scheduled for
processing time. The context includes the thread's set of machine
registers, the kernel stack, a thread environment block, and a user stack
in the address space of the thread's process. All threads of a process
share the virtual address space and can access the global variables and
system resources of the process.
<P>
A multitasking operating system divides the available CPU time among the
threads that need it. In Windows, the Win32 API is designed for preemptive
multitasking; this means that the system allocates small slices of CPU time
among the competing threads. The currently executing thread is suspended
when its time slice elapses, allowing another thread to run. When the
system switches from one thread to another, it saves the context of the
suspended thread and restores the saved context of the next thread in the
queue.
<P>
Because each time slice is small (approximately 20 milliseconds), it
appears that multiple threads are executing at the same time. This is
actually the case on multiprocessor systems where the executable threads
are distributed among the available processors. On a single processor
system, however, using multiple threads does not result in more
instructions being executed. In fact, the system can slow down if it is
forced to keep track of too many threads.
<P>
<P><h3>How to Launch Win32 Applications from Visual Basic</h3>
 
<P>
There are two ways to launch another Win32 application from a Microsoft
Visual Basic version 4.0 application:

<UL><LI>Use the Visual Basic shell command. This spawns a new process and
   returns its process ID. However, to be able to do anything useful, a
   process handle is required, which can be obtained by a subsequent call
   to the OpenProcess Win32 API function.

<LI>Use the CreateProcess Win32 API function that creates both a process
   object and a main thread object. Both the process and the initial thread
   are assigned a 32-bit identifier that remains valid until the respective
   object (process or thread) terminates. The 32-bit identifier can be used
   to uniquely identify the object within the system. The new process and
   new thread handles are also created with full access rights. All these
   four values are returned in the PROCESS_INFORMATION structure that is
   passed by reference to CreateProcess.
<P>
</UL>The process handle returned by either of the two methods can then be used
with other Win32 APIs such as TerminateProcess to manipulate the newly
launched application.
<P>
It is important to understand that at creation time, the system gives each
object an initial usage count of one. Then, just before CreateProcess
returns, the function opens both the process and the thread object and
places the process-relative handles for each in the hProcess and hThread
members of the PROCESS_INFORMATION structure.
<P>
When CreateProcess opens these objects, the usage count for each increments
to two. This means that before the Windows NT Executive can free the
process object, the process must terminate (decrementing the usage count to
one) and the parent process must call CloseHandle (decrementing the usage
count to zero). To free the thread object, the thread must terminate and
the parent process must close the handle to the thread object.
<P>
CAUTION: It is very important to close these handles. Failure to do so can
result in a system memory leak because some Windows NT Executive objects
are never destroyed.
<P>
Similar considerations are required when obtaining a process handle with
OpenProcess. In this case too, the usage count is incremented by one, and
unless the handle is closed, the process object will remain in memory even
when the process itself has terminated.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
   Private Type PROCESS_INFORMATION
<P><PRE>      hProcess As Long
      hThread As Long
      dwProcessId As Long
      dwThreadId As Long
</PRE>   End Type
<P>
   Private Type STARTUPINFO
<P><PRE>      cb As Long
      lpReserved As String
      lpDesktop As String
      lpTitle As String
      dwX As Long
      dwY As Long
      dwXSize As Long
      dwYSize As Long
      dwXCountChars As Long
      dwYCountChars As Long
      dwFillAttribute As Long
      dwFlags As Long
      wShowWindow As Integer
      cbReserved2 As Integer
      lpReserved2 As Long
      hStdInput As Long
      hStdOutput As Long
      hStdError As Long
</PRE>   End Type
<P>
<PRE>   Private Declare Function CreateProcess Lib "kernel32" Alias _
      "CreateProcessA" (ByVal lpApplicationName As String, ByVal _
      lpCommandLine As String, lpProcessAttributes As Any, _
      lpThreadAttributes As Any, ByVal bInheritHandles As Long, _
      ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal _
      lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, _
      lpProcessInformation As PROCESS_INFORMATION) As Long

   Private Declare Function OpenProcess Lib "kernel32.dll" (ByVal _
      dwAccess As Long, ByVal fInherit As Integer, ByVal hObject _
      As Long) As Long

   Private Declare Function TerminateProcess Lib "kernel32" (ByVal _
      hProcess As Long, ByVal uExitCode As Long) As Long

   Private Declare Function CloseHandle Lib "kernel32" (ByVal _
      hObject As Long) As Long

   Const SYNCHRONIZE = 1048576
   Const NORMAL_PRIORITY_CLASS = &amp;H20&amp;

</PRE><P><LI>Add the following code to the Form1_Click event:
<P>
   Dim pInfo As PROCESS_INFORMATION
   Dim sInfo As STARTUPINFO
   Dim sNull As String
<P>
   sInfo.cb = Len(sInfo)
   success&amp; = CreateProcess(sNull, "Calc.exe", ByVal 0&amp;, ByVal 0&amp;, _
<P><PRE>      1&amp;, NORMAL_PRIORITY_CLASS, ByVal 0&amp;, sNull, sInfo, pInfo)
</PRE><P>
<PRE>   ' ProcessID&amp; = Shell("Calc.exe", vbNormalFocus)
   ' ProcessHandle&amp; = OpenProcess(SYNCHRONIZE, True, ProcessID&amp;)

   MsgBox "Calculator has been launched!"

   ret&amp; = TerminateProcess(pInfo.hProcess, 0&amp;)
   ret&amp; = CloseHandle(pInfo.hThread)
   ret&amp; = CloseHandle(pInfo.hProcess)

   ' ret&amp; = TerminateProcess(ProcessHandle&amp;, 0&amp;)
   ' ret&amp; = CloseHandle(ProcessHandle&amp;)
   ' ret&amp; = CloseHandle(ProcessHandle&amp;)

   MsgBox "Calculator has terminated!"

</PRE><P><LI>Press the F5 key to run the program. Click Form1. The Windows Calculator
   program launches, and a message tells you so. When you click the OK
   button on the MsgBox, the Calculator program terminates, and another
   message tells you so.
<P>
</OL>To see how this method works using the Shell and OpenProcess method, change
the commented code into executed code, change the rest of the code into
comments except for the two MsgBox statements.
 
<PRE>Keywords          : APrgOther vb432 VB4WIN
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Read a Large File into Memory by Calling API Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100513">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/06/22">
<META NAME="Keywords" CONTENT="kbui kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates how to call Windows API functions to read a file of any size (including a huge file such as a bitmap) into memory and how to write a block of memory (including a huge memory block) out to a file.  The information in this a...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANG,QA7H,QA4Q,QDL9,QBWO,QBWN,QAY5,QBS0,QANF,QBWQ,QBFN,QAB9,QACJ,QAH4,QBW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Read a Large File into Memory by Calling API Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100513</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- The Visual Basic programming system for Windows, versions 2.0 and 3.0
- Microsoft Windows, version 3.1 or higher
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to call Windows API functions to read a file
of any size (including a huge file such as a bitmap) into memory and how
to write a block of memory (including a huge memory block) out to a file.
<P>
The information in this article applies only to Windows version 3.1 or
higher because it uses Windows API functions introduced in Windows
version 3.1.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Perform the following steps to create a sample program that demonstrates
how to read a large file into memory and write that memory back out to
a file:

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>From the File menu, choose New Module (ALT, F, M). Module1 is created.

<P><LI>Add the following code to the general-declarations section of Module1:
<P>
<PRE>   ' OpenFile() Structure
   Type OFSTRUCT
      cBytes As String * 1
      fFixedDisk As String * 1
      nErrCode As Integer
      reserved As String * 4
      szPathName As String * 128
   End Type

   ' OpenFile() Flags
   Global Const OF_READ = &amp;H0
   Global Const OF_WRITE = &amp;H1
   Global Const OF_READWRITE = &amp;H2
   Global Const OF_SHARE_COMPAT = &amp;H0
   Global Const OF_SHARE_EXCLUSIVE = &amp;H10
   Global Const OF_SHARE_DENY_WRITE = &amp;H20
   Global Const OF_SHARE_DENY_READ = &amp;H30
   Global Const OF_SHARE_DENY_NONE = &amp;H40
   Global Const OF_PARSE = &amp;H100
   Global Const OF_DELETE = &amp;H200
   Global Const OF_VERIFY = &amp;H400
   Global Const OF_CANCEL = &amp;H800
   Global Const OF_CREATE = &amp;H1000
   Global Const OF_PROMPT = &amp;H2000
   Global Const OF_EXIST = &amp;H4000
   Global Const OF_REOPEN = &amp;H8000

   ' Enter each of the following Declare statements on one, single line:
   Declare Function OpenFile Lib "Kernel" (ByVal lpFilename As
      String, lpReOpenBuff As OFSTRUCT, ByVal wStyle As Integer) As Integer
   Declare Function hRead Lib "kernel" Alias "_hread" (ByVal hFile As
      Integer, lpMem As Any, ByVal lSize As Long) As Long
   Declare Function hWrite Lib "Kernel" Alias "_hwrite" (ByVal hFile
      As Integer, lpMem As Any, ByVal lSize As Long) As Long
   Declare Function lClose Lib "kernel" Alias "_lclose" (ByVal hFile
      As Integer) As Integer

   ' Global Memory Flags
   Global Const GMEM_FIXED = &amp;H0
   Global Const GMEM_MOVEABLE = &amp;H2
   Global Const GMEM_NOCOMPACT = &amp;H10
   Global Const GMEM_NODISCARD = &amp;H20
   Global Const GMEM_ZEROINIT = &amp;H40
   Global Const GMEM_MODIFY = &amp;H80
   Global Const GMEM_DISCARDABLE = &amp;H100
   Global Const GMEM_NOT_BANKED = &amp;H1000
   Global Const GMEM_SHARE = &amp;H2000
   Global Const GMEM_DDESHARE = &amp;H2000
   Global Const GMEM_NOTIFY = &amp;H4000
   Global Const GMEM_LOWER = GMEM_NOT_BANKED

   Global Const GHND = (GMEM_MOVEABLE Or GMEM_ZEROINIT)
   Global Const GPTR = (GMEM_FIXED Or GMEM_ZEROINIT)

   ' Enter each of the following Declare statements on one, single line:
   Declare Function GlobalAlloc Lib "Kernel" (ByVal wFlags As
       Integer, ByVal dwBytes As Long) As Integer
   Declare Function GlobalLock Lib "Kernel" (ByVal hMem As Integer)
       As Long
   Declare Function GlobalUnlock Lib "Kernel" (ByVal hMem As Integer)
       As Integer
   Declare Function GlobalFree Lib "Kernel" (ByVal hMem As Integer)
       As Integer

</PRE><P><LI>Add the following code to the Form_Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()

      Dim InpFile As String
      Dim OutFile As String
      Dim hFile As Integer
      Dim fileStruct As OFSTRUCT
      Dim FSize As Long
      Dim BytesRead As Long
      Dim BytesWritten As Long
      Dim hMem As Integer
      Dim lpMem As Long
      Dim r As Integer

      Me.Show

      'Insert the name of a bitmap or file that is greater than 64K.
      '256COLOR.BMP is less than 5K in size, however, the routine
      'below still demonstrates how to read and write a file of any
      'size
      InpFile = "C:\WINDOWS\256COLOR.BMP"
      OutFile = "C:\WINDOWS\TEST.BMP"

      'Get the size of the file to be read
      FSize = FileLen(InpFile)

      If FSize &gt; 0 Then

         'Allocate a block of memory equal to the size of the input file.
         hMem = GlobalAlloc(GPTR, FSize)

         If hMem &lt;&gt; 0 Then
            lpMem = GlobalLock(hMem)

            'Read the file into memory
            hFile = OpenFile(InpFile, fileStruct, OF_READ Or
                             OF_SHARE_DENY_NONE)
            BytesRead = hRead(hFile, ByVal lpMem, FSize)

            MsgBox Format(BytesRead) &amp; " bytes read into memory"

            r = lClose(hFile)

            'Write the file back to disk to verify the file was
            'read correctly
            hFile = OpenFile(OutFile, fileStruct, OF_CREATE Or
                             OF_WRITE Or OF_SHARE_DENY_NONE)
            BytesWritten = hWrite(hFile, ByVal lpMem, FSize)

            MsgBox Format(BytesWritten) &amp; " bytes written to output file"

            r = lClose(hFile)

            'Free resources
            r = GlobalUnlock(hMem)
            r = GlobalFree(hMem)
         Else
             MsgBox "Not enough memory to store file"
         End If
      Else
         MsgBox "Input file is zero bytes in length"
      End If
      End
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S) or press F5 to run the
   program. Form1 will be displayed and the program will end.

<P><LI>Use PaintBrush or some other bitmap editor to open C:\WINDOWS\TEST.BMP
   to verify that it is the same bitmap as C:\WINDOWS\256COLOR.BMP.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbui kbprg kbcode<BR>
KBSubcategory: APrgWindow<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

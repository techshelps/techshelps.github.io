

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Call SQL Stored Procedures from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q146651">
<META NAME="KBModify" CONTENT="1996/02/20">
<META NAME="KBCreate" CONTENT="1996/02/18">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to call Microsoft SQL stored procedures from Microsoft Visual Basic for Windows. A stored procedure is a precompiled collection of SQL statements, often including control-of-flow language.  MORE INFORMATION  The method of...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUD,QA5V,QABM,QAB9,QAPN,QAGI,QAH7,QAH6,QAD7,QALW,QAPF,QBXS,QA5F,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Call SQL Stored Procedures from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 20, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q146651</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to call Microsoft SQL stored procedures from
Microsoft Visual Basic for Windows. A stored procedure is a precompiled
collection of SQL statements, often including control-of-flow language.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The method of calling depends on whether the SQL stored procedure returns
records or not. For example:

<OL><P><LI>Stored procedures that do not return records (or rows) can be executed
   from Visual Basic with the ExecuteSQL() method as follows:
<P>
<P><PRE>      i% = MyDb.ExecuteSQL("sp_name")
</PRE><P>
   This executes the stored procedure sp_name and returns the affected
   number of rows in i%. The ExecuteSQL method is strictly for action
   queries such as:
<P>
<P><PRE>      Delete Authors where name like "fred%"
</PRE><P>
   The ExecuteSQL() method is valid only for SQL statements that do not
   return records (or rows). An SQL statement that uses "SELECT..." returns
   records, while an SQL statement that uses "DELETE..." does not. Neither
   Execute() nor ExecuteSQL() return a recordset, so using ExecuteSQL() on
   a query that selects records produces an error.

<P><LI>Stored procedures that return records (or rows) require a Dynaset or
   Snapshot to capture the values. Listed below are two examples:
<P>
   Example Using a Data Control on a Visual Basic Form:
<P>
<P><PRE>      Data1.Options = dbSQLPassThrough
      Data1.Recordsource = "sp_name"  ' name of the stored procedure.
<PRE></PRE>      Data1.Refresh   ' Refresh the data control.

   When you use the SqlPassThrough bit, Visual Basic's Microsoft Access
   database engine ignores the syntax used and passes the command
   through to the SQL server.

   Alternative Example Using Object Variables:

   Dim Ds as Recordset
   ' Open your desired database here.
   Set MyDB = DBEngine.Workspaces(0).OpenDatabase(...
   Set Ds = MyDB.OpenRecordset("sp_name", dbOpenDynaset, _
   dbSQLPassThrough)

   You can also use 'dbOpenSnapshot' in place of 'dbOpenDynaset' above.

   How to Pass Parameters to a Stored Procedure
   --------------------------------------------

   To pass parameters, include them after the name of the stored procedure
   in a string. For example:

      ' String specifying SQL.
      command.SQLx = "My_StorProc parm1, parm2, parm3"
      ...
      ' For stored procedure that doesn't return records.
      i = MyDB.ExecuteSQL(SQLx)
      ...
      'For stored procedure that returns records.
      set Ds = MyDB.OpenRecordset(SQLx, dbOpenDynaset, dbSQLPassThrough)

   The object variable (Ds) contains the first set of results from the
   stored procedure (My_StorProc).

   Another Example
   ---------------

   The following contains more example code showing both methods:

      Dim db as Database
      Dim l as Long
      Dim Ss as Recordset
      Set Db = DBEngine.Workspaces(0).OpenDatabase _
      ("", False, False, "ODBC;dsn=yourdsn;uid=youruid;pwd=yourpwd:")
      ' For SPs that don't return rows.
      l=Db.ExecuteSQL("YourSP_Name")
      ' For SPs that return rows.
      Set Ss = Db.OpenRecordset("YourSP_Name", dbOpenSnapshot, _
       dbSQLPassThrough)
      Col1.text = Ss(0) ' Column one.
      Col2.text = Ss!ColumnName
      Col3.Text=Ss("ColumnName")

</PRE></OL><h2>REFERENCES</h2>
 
<P>
More information about calling stored procedures is documented in the
following Microsoft SQL manual which covers the Visual Basic Library for
SQL Server:

<UL><LI>"Microsoft SQL Server Programmer's Reference for Visual Basic"
<P>
</UL>See the functions SqlRpcInit% (pages 200-201), SqlRpcParam%, and
SqlRpcSend%. These functions call stored procedures more quickly than do
the methods described above.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 20, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

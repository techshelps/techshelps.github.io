

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Tips to Improve Performance While Using OLE Servers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138072">
<META NAME="KBModify" CONTENT="1997/02/26">
<META NAME="KBCreate" CONTENT="1995/10/11">
<META NAME="Keywords" CONTENT="IAPOLE vb4all vb4win kbole">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article lists tips to keep in mind when instantiating an OLE server object, when calling a method, or when using a property of the object.  MORE INFORMATION  Tip One -------  Here are two ways in which an object could be created using early bi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAPN,QAH4,QAW6,QABH,QABI,QBE7,QBE6,QAIF,QAUD,QA9Q,QAO3,QANE,QAB4,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Tips to Improve Performance While Using OLE Servers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138072</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS
kbole
<P>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists tips to keep in mind when instantiating an OLE server
object, when calling a method, or when using a property of the object.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Tip One</h3>
 
<P>
Here are two ways in which an object could be created using early binding:

<UL><LI>Dim x As New MyClass
   Call x.MyMethod
<P>
   -or-

<LI>Dim x As MyClass
   Set x = New MyClass
   Call x.MyMethod
<P>
</UL>The latter code is faster and more efficient because it creates an instance
of the object only while executing the Set statement. The former code
doesn't instantiate the object until the statement that calls a method of
the object.
<P>
In the former code, each call to a member of an object checks to see if it
has been instantiated. If not it is instantiated at that point, the call is
made. In the latter code, no such check is made, so it is faster. It is the
responsibility of the application developer to ensure that an object
variable has been properly instantiated before calling any of its members.
<P>
Another thing to keep in mind is that the former code guarantees that you
always have a reference to an object. Therefore, even if you:
<P>
<PRE>   Set x = Nothing

</PRE>and later check:
<P>
<PRE>   If x Is Nothing Then

</PRE>x is instantiated at that point. Such a check will always return a value of
False. Whereas in the latter code, you are always free to set x to Nothing
and check for it correctly later.
<P>
<P><h3>Tip Two</h3>
 
<P>
While calling members of an out-of-process OLE Server such as an OLE EXE
server, if you need to make repetitive calls to members that return quickly
(for example, members like the height property of the Form object that
don't use many instruction cycles), it will be faster to call a single
method that bundles all these other "lightweight" properties into an array
or returns them as parameters to this single method. This is because the
time taken by the marshalling code for a cross-process call to execute is
much more than what is needed to perform the task that the member does.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbole<BR>
KBSubcategory: IAPOLE vb4win vb4all<BR>
Additional reference words: optimization speed quick 4.00<BR>
Keywords            : IAPOLE vb4all vb4win kbole<BR>
Version             : 4.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

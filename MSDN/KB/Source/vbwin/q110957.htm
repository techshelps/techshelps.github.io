

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Selected Prop of List Box Can Cause Click Event &amp; Out of Stack </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110957">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1994/02/03">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Selected property applies to list box and file list box controls. When you change the selected state of a list box item by using code to set the Selected property at run time, a Click event occurs -- just as if you had actually clicked with the...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QAPN,QA2Q,QAO4,QBWS,QAH4,QAG2,QAFF,QBS0,QA28,QATJ,QAIJ,QAE1,QBVV,QALQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Selected Prop of List Box Can Cause Click Event &amp; Out of Stack</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110957</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Selected property applies to list box and file list box controls. When
you change the selected state of a list box item by using code to set the
Selected property at run time, a Click event occurs -- just as if you had
actually clicked with the mouse. A Click event does not occur if you set
the item's Selected property to a value that keeps the item's current
selected or unselected state.
<P>
You need to take care when changing the Selected property within the Click
event procedure for a list or file list box. Clicking an item in a list
control causes a Click event and can change a selection. That changed
selection can affect whether your code's subsequent change to an item's
Selected property causes another Click event. The resulting second click
event can cause recursion and "Out of Stack Space" or other errors if you
designed your Click event procedure incorrectly. The More Information
section below provides examples showing how to avoid recursion problems.
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Selected property determines the selection status of an item in a list
box or file list box control. The Selected property is an array of Boolean
values with the same number of items as the List property. The Selected
property is available at run time, but not at design time. Here is the
syntax:
<P>
<PRE>   [form.]{filelistbox|listbox}.Selected(index)[ = {True|False}]

</PRE>The Selected property settings are:
<P>
<PRE>   True  = The item is selected.
   False = (Default) The item is not selected.

</PRE>The Selected property is particularly useful where users can make multiple
selections. You can quickly check which items in a list are selected. Your
code can use this property to select or deselect items in a list.
<P>
If only one item is selected, you can use the ListIndex property to get the
index of the selected item. However, in a multiple selection, the
ListIndex property returns the index of the item contained within the focus
rectangle, whether or not the item is actually selected. Multiple selection
mode can be set with the MultiSelect property.
<P>
<P><h3>Changing Item's Selected Property Can Cause Second Click Event</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a list box (list1) to Form1. (Or you can use a file list box.)

<P><LI>Add the following code to the Form Load event:
<P>
<PRE>   Sub Form_Load ()
      For i = 1 To 5
         list1.AddItem Str$(i)  'Add more than 2 items to the list box.
      Next
   End Sub

</PRE><P><LI>Add the following code to the List1 Click event:
<P>
<PRE>   Sub List1_Click ()
      Static x   ' Preserve the value of x between Click events.
      x = x + 1  ' Increment the count of Click events.
      Print x    ' Print the cumulative number of click events.
      ' The following statement only causes a second event when an item
      ' other than the first item is clicked. Clicking the first item
      ' (item 0) does not cause a second event, because list1.Selected(0)
      ' is already True:
      list1.Selected(0) = True   ' Selects the first item.
   End Sub

</PRE><P><LI>Start the program, or press the F5 key. Click any list box item other
   than the first. That causes two Click events. Click the first item in
   the list box. That causes just one Click event. Click more items to
   repeat the same behavior. Close the form to end the program.
<P>
</OL><h3>How to Make File List Box Items That Can Be Scrolled, But Not Selected</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a file list box to Form1.

<P><LI>a. Add the following code to the File1 Click event:
<P>
<PRE>      Sub File1_Click ()
         ' If no item is selected in the file list box, exit the sub:
         If File1.ListIndex = -1 Then Exit Sub
         File1.Selected(File1.ListIndex) = False
      End Sub

      NOTE: If you left out the above If statement, then the
      File1.Selected(File1.ListIndex) statement would give the following
      error when you click the file list box:

         Invalid property array index (Error 381)

      The index value of the File1.Selected() property must be greater
      than 0. By default, File1.ListIndex starts as -1.

   b. Instead, you can add the following code to the File1 Click event. In
      this example, the focus always reverts to the first item when you
      click any other item. The first item remains unselected (without
      highlight). The focus is indicated by a dotted box around the item.

      Sub File1_Click ()
         ' NOTE: If you delete the following line, you get "Out of Stack
         ' Space" due to recursion (about 30 iterations):
         If File1.ListIndex = -1 Then Exit Sub
         File1.Selected(0) = True
         File1.Selected(0) = False  'Resets first item to nonselected.
      End Sub

</PRE><P><LI>Start the program, or press the F5 key. Now you can click items in the
   file list box, but they won't be selected or highlighted.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

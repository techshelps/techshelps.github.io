

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: How To Add New Menu Items to the System Menu </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153092">
<META NAME="KBModify" CONTENT="1997/10/13">
<META NAME="KBCreate" CONTENT="1996/06/28">
<META NAME="Keywords" CONTENT="APrgOther vb416 VB4WIN kbsample kbfile kbhowto kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Sometimes it is desirable to add a new menu item to a window's System menu. This can be accomplished by using the AppendMenu API call and a Windows sub-classing control such as Message Blaster(tm). This article explains how to implement this action...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAH4,QBS0,QANF,QAFF,QAB5,QAVI,QAGI,QA7O,QAOE,QAMN,QAK7,QAY2,QACI,QAEV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: How To Add New Menu Items to the System Menu</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 13, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153092</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>4.00    | 4.00
</PRE>WINDOWS | WINDOWS NT
kbusage kbfile kbhowto
<P>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sometimes it is desirable to add a new menu item to a window's System menu.
This can be accomplished by using the AppendMenu API call and a Windows
sub-classing control such as Message Blaster(tm). This article explains how
to implement this action and provides a code sample.
<P>
In order to use the Message Blaster control, you can download the sample,
free of charge, from the Microsoft Software Library.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Msgblast.exe">Msgblast.exe</A> <I>(size: 131854 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from
               Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Download the Message Blaster Control.

<P><LI>Start Visual Basic, or choose New Project from the File menu if Visual
   Basic is already running. Form1 is created by default.

<P><LI>From the Tools menu, go to the Custom Controls option and add the
   MSGBLAST.VBX control to the project.

<P><LI>Place a Message Blaster Control on the form.

<P><LI>Place a Command button on Form1. Change the Caption to "&amp;ADD."

<P><LI>Add the following code to the general declarations section of Form1:
<P>
   Option Explicit
<P>
<PRE>   Private Declare Function RemoveMenu% Lib "User" (ByVal hMenu%, ByVal _
      nPosition%, ByVal wFlags%)
   Private Declare Function GetSystemMenu Lib "User" (ByVal hWnd%, ByVal _
      revert%) As Integer
   Private Declare Function GetWindowLong Lib "User" (ByVal hWnd As _
      Integer,ByVal nIndex As Integer) As Long
   Private Declare Function SetWindowLong Lib "User" (ByVal hWnd As _
      Integer, ByVal nIndex As Integer, ByVal dwNewLong As Long) As Long
   Private Declare Function AppendMenu Lib "User" (ByVal hMenu As _
      Integer, ByVal wFlags As Integer, ByVal wIDNewItem As Integer, _
      ByVal lpNewItem As Any) As Integer

   Private Const MF_STRING = &amp;H0
   Private Const MF_BYCOMMAND = &amp;H0
   Private Const WM_SYSCOMMAND = &amp;H112

   'Enter the line below as one line of code
   Private Sub RemoveControlMenuItemByPosition(frm As Form, iPosition As
   Integer)
     Dim iHSysMenu As Integer
     Dim iReturn As Integer
     Dim lDW As Long
     Dim lRR As Long
     iHSysMenu = GetSystemMenu(frm.hWnd, 0)
     iReturn = RemoveMenu(iHSysMenu, iPosition, MF_BYPOSITION)
     lDW = GetWindowLong(frm.hWnd, -16)   'Window style
     lDW = lDW And &amp;HFFFEFFFF    'Turn off bits for Maximize arrow button
     lRR = SetWindowLong(frm.hWnd, -16, lDW)
   End Sub

   Private Sub RemoveControlMenuItemByCommand(frm As Form, lCommand As _
     Long)
     Dim iHSysMenu As Integer
     Dim iReturn As Integer
     Dim lDW As Long
     Dim lRR As Long
     iHSysMenu = GetSystemMenu(frm.hWnd, 0)
     iReturn = RemoveMenu(iHSysMenu, lCommand, MF_BYCOMMAND)
     lDW = GetWindowLong(frm.hWnd, -16)   'Window style
     lDW = lDW And &amp;HFFFEFFFF    'Turn off bits for Maximize arrow button
     lRR = SetWindowLong(frm.hWnd, -16, lDW)
   End Sub

   Private Sub cmdRemoveMenuItems_Click()
     Call RemoveControlMenuItemByPosition(Me, 0)
   End Sub

</PRE><P><LI>Place the following code in the Form Load Event:
<P>
<PRE>   Private Sub Form_Load()
     MsgBlaster1.hWndTarget = Me.hWnd
     MsgBlaster1.MsgList(0) = WM_SYSCOMMAND
   End Sub

</PRE><P><LI>Place the following code in the Message event of the Message Blaster
   Control:
<P>
<PRE>   'Enter the line below as one line of code
   Private Sub MsgBlaster1_Message(MsgVal As Integer, wParam As Integer,
   lParam As Long, ReturnVal As Long)
     Select Case wParam
       Case 1
         MsgBox "You clicked to About"
       Case 2
         MsgBox "You clicked on Help"
       Case 3
       'This option removes the custom added menu items and the separator.
       Dim iHSysMenu As Integer
       Dim iReturn As Integer
       iHSysMenu = GetSystemMenu(Me.hWnd, 0)
       Call RemoveControlMenuItemByCommand(Me, 1)
       Call RemoveControlMenuItemByCommand(Me, 2)
       Call RemoveControlMenuItemByCommand(Me, 3)
     End Select
   End Sub

</PRE><P><LI>Place the following code in the Command1 Click event:
<P>
<PRE>   Private Sub Command1_Click()
     Dim iReturn As Integer
     Dim iHSysMenu As Integer
     iHSysMenu = GetSystemMenu(Me.hWnd, 0)
     iReturn = AppendMenu(iHSysMenu, MF_STRING, 1, "About...")
     iReturn = AppendMenu(iHSysMenu, MF_STRING, 2, "Help...")
     iReturn = AppendMenu(iHSysMenu, MF_STRING, 3, "Remove items...")
   End Sub

</PRE><P><LI>Press the F5 key or choose Start from the Run menu to run the project.
<P><PRE>    Click the Add button. View the System menu and note that the new
    items have been added.
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../VBWIN/Q110498.htm">Q110498</A></B>
   TITLE     : How to Add Items into Control Menu Box of Visual Basic Form

   ARTICLE ID: <B><A HREF="../VBWIN/Q110104.htm">Q110104</A></B>
   TITLE     : Using MSGBLAST.VBX Control to Process Windows Messages from
               VB
</PRE></OL> 
<PRE>Keywords          : APrgOther vb416 VB4WIN kbsample kbfile kbhowto kbusage
Version           : 4.00 | 4.00
Platform          : NT WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 13, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

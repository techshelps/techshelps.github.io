

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 How to Create Scrollable Viewports in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71068 ">
<META NAME="KBModify" CONTENT="1997/01/08">
<META NAME="KBCreate" CONTENT="1991/04/05">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  You can create scrollable viewports in Visual Basic by using standard Basic calls. The viewports can include bitmaps, graphics, or other controls.  MORE INFORMATION  This information is included with the Help file provided with Microsoft Profession...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAYS,QA7O,QAB5,QAOE,QAMN,QBXQ,QBXS,QA5F,QAMA,QACI,QAB2,QANJ,QAFF,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 How to Create Scrollable Viewports in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71068 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0, 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can create scrollable viewports in Visual Basic by using standard
Basic calls. The viewports can include bitmaps, graphics, or other
controls.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This information is included with the Help file provided with Microsoft
Professional Toolkit for Visual Basic version 1.0, Microsoft Visual Basic
version 2.0, and Microsoft Visual Basic version 3.0.
<P>
To create a scrollable picture with clipping, you must have two picture
controls. The first picture control is called the stationary parent picture
control. Within the parent picture control, you need to create a movable
child picture control.
<P>
It is the child picture control that will be moved within the parent
picture control. Moving the child picture within the parent picture control
creates the clipping effect. During run time when you move the child
picture, it will be clipped by the boundaries of the parent picture. If you
plan on using Visual Basic graphics methods to draw on the picture instead
of loading a bitmap then you must set the child picture controls AutoRedraw
property to true.
<P>
To create these two picture controls, do the following:

<OL><P><LI>Choose the picture box control from the Toolbox window in Visual Basic.

<P><LI>Draw a picture on the form. This is the parent picture.

<P><LI>Again choose the picture box control from the Toolbox window.

<P><LI>Draw the second picture on top of and within the boundaries of
   the first picture control. This is the child picture.

<P><LI>Optional: If you want the viewport to resize when the user changes the
   form size, then add the following code to the form's resize event:
<P>
<PRE>Sub Form_Resize ()
   ' When the form size is changed, the Picture1 dimensions are changed
   ' to match.
   Picture1.Height = form1.Height
   Picture1.Width = form1.Width
   ' Re-Initializes picture postitions &amp; scroll bars.
   Picture1.Move 0, 0, Scalewidth - Vscroll1.Width, scaleheight -
</PRE></OL>Hscroll1.Height
<PRE>   Picture2.Move 0, 0
   Hscroll1.Top = Picture1.Height
   Hscroll1.Left = 0
   Hscroll1.Width = Picture1.Width
   Vscroll1.Top = 0
   Vscroll1.Left = Picture1.Width
   Vscroll1.Height = Picture1.Height
   Hscroll1.Max = Picture2.Width - Picture1.Width
   Vscroll1.Max = Picture2.Height - Picture1.Height
   ' Checks to see if scroll bars  are needed
   VScroll1.Visible = (Picture1.Height &lt; Picture2.Height)
   HScroll1.Visible = (Picture1.Width &lt; Picture2.Width)
End Sub

</PRE>The sample application below shows how to create a scrollable bitmap
within a viewport. Perform the sequence above to create a parent/child
picture control. Add a horizontal scroll bar and a vertical scroll bar
to the form.
<P>
Make sure that the path to your bitmap is correct. Several of the
properties are set during run time, which could have been set during
design time as well.
<P>
Moving the thumb of the two scroll bars will move the child picture
within the parent picture. The handle (upper-left corner of the picture)
to the child picture will be located either at (0,0) of the parent picture
or to the left and/or right of the parent picture. Because the clipping
region is that of the parent picture, the child picture will appear to
move across the parent picture viewport.
<P>
Add the following code to the appropriate event procedures:
<P>
<PRE>Sub Form_Load ()
   Const PIXEL = 3
   Add the following constant only in Visual Basic 1.0:
   '  Const TRUE = -1
   Const NONE = 0

   ' Set design properties, included here for simplicity.
   Form1.ScaleMode = PIXEL
   Picture1.ScaleMode = PIXEL

   ' AutoSize is set to TRUE so that the boundaries of
   ' Picture2 are expanded to the size of the actual bitmap.
   Picture2.AutoSize = TRUE

   ' Get rid of annoying borders.
   Picture1.BorderStyle = NONE
   Picture2.BorderStyle = NONE

   ' Load the picture that you want to display.
   Picture2.Picture = LoadPicture("c:\win\party.bmp")

   ' Initialize location of both pictures.
   Picture1.Move 0, 0, ScaleWidth - VScroll1.Width,_
   ScaleHeight - HScroll1.Height
   Picture2.Move 0, 0

   ' Position the horizontal scroll bar.
   HScroll1.Top = Picture1.Height
   HScroll1.Left = 0
   HScroll1.Width = Picture1.Width

   ' Position the vertical scroll bar.
   VScroll1.Top = 0
   VScroll1.Left = Picture1.Width
   VScroll1.Height = Picture1.Height

   ' Set the Max value for the scroll bars.
   HScroll1.Max = Picture2.Width - Picture1.Width
   VScroll1.Max = Picture2.Height - Picture1.Height

   ' Determine if child picture will fill up screen.
   ' If so, then there is no need to use scroll bars.

   VScroll1.Visible = (Picture1.Height &lt; Picture2.Height)
   HScroll1.Visible = (Picture1.Width &lt; Picture2.Width)
End Sub

Sub HScroll1_Change ()
  ' Picture2.Left is set to the negative of the value because
  ' as you scroll the scroll bar to the right, the display
  ' should move to the Left, showing more of the right
  ' of the display, and vice-versa when scrolling to the
  ' left.

   Picture2.Left = -HScroll1.Value

End Sub

Sub VScroll1_Change ()
  ' Picture2.Top is set to the negative of the value because
  ' as you scroll the scroll bar down, the display
  ' should move up, showing more of the bottom
  ' of the display, and vice-versa when scrolling up.

  Picture2.Top = -VScroll1.Value

End Sub

</PRE>NOTE: This technique will not work on any version of Windows NT if any of
the Visual Basic lightweight controls (for example, Label Control) are
children of the scrolling control and positioned outside of the screen's
viewing area. This is due to the way that Windows NT handles drawing to
nonlogical areas of the screen. To work around the problem, do not use
lightweight controls as children of the scrolling control.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>
Additional reference words: 1.00 2.00 3.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

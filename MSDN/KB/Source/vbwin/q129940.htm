

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Out of Stack Space Error Caused by Property Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129940">
<META NAME="KBModify" CONTENT="1995/10/30">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbprg kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Using a non-reserved Visual Basic keyword within a Property Procedure of the same name creates a recursive call to that Property statement resulting in this error:    Out of Stack Space Error.  CAUSE =====  Visual Basic allows you to define Propert...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAGI,QAB9,QAUD,QAEB,QAHE,QBWC,QAH4,QAB4,QAXC,QA5F,QAMA,QAAP,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Out of Stack Space Error Caused by Property Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129940</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using a non-reserved Visual Basic keyword within a Property Procedure of
the same name creates a recursive call to that Property statement resulting
in this error:
<P>
<PRE>  Out of Stack Space Error.

</PRE><h2>CAUSE</h2>
 
<P>
Visual Basic allows you to define Properties and Methods that have the same
name as non-reserved keywords because many keywords (such as Left) in
previous versions of Visual Basic are used frequently by OLE servers. If
you take advantage of this in your own Class, an "Out of Stack Space error"
can occur in a Property Get Procedure when both of the following conditions
are met:

<UL><LI>A call to the non-reserved keyword with the same name as the Property
   is located within a Property Get Procedure.

<LI>The Property Get Procedure returns a Variant or Object.
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
Typically, if one of the following conditions is true, Visual Basic can
determine whether to call the Property Get procedure or the non-reserved
keyword:

<UL><LI>The Property Get procedure doesn't return a Variant or Object.
<P>
   -or-

<LI>The call to the non-reserved keyword takes a different number of
   parameters then the Property Get procedure takes.
<P>
</UL>For example, given the following Property Get Property procedure, the
Visual Basic Left function would be called instead of the Property Get
procedure:
<P>
<PRE>   Property Get Left() as String
      Left = Left("Hello World",10)  ' Visual Basic Left function called
   End Property

</PRE>Because the Property Get Procedure expects 0 parameters and the Visual
Basic function expects 2, the Visual Basic Left function is called.
<P>
If, however, the Property Get Procedure returns either a Variant or an
Object, the Property Get Procedure is called, regardless of the number of
Parameters the Property Procedure expects. This occurs because Objects,
which are now supported in Variants, can have a default property, which can
take parameters themselves. When you call a function that returns a Variant
or Object, and you pass the incorrect number of parameters, Visual Basic
realizes that you intended to pass the parameters to the default property
of the Object, so it generates a call to the default property with those
parameters. In this case, the "Incorrect Number of Parameters" message is
not generated because it is not necessarily known how many parameters are
expected by the default property.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a Command Button (Command1) to Form1.

<P><LI>Add the following code to the Command1_Click procedure:
<P>
<PRE>   Sub Command1_Click()
      Dim clsClass1 As New Class1
      MsgBox clsClass1.Left
   End Sub

</PRE><P><LI>Insert a Class Module (Class1) by choosing Class Module from the Insert
   Menu (ALT, I, C).

<P><LI>Add the following code to the Class1 module:
<P>
   Property Get Left() ' This returns a Variant by default
<P><PRE>      Const cTempStr = "Summer"
      Left = Left(cTempStr, 3)
</PRE>   End Property

<P><LI>Press the F5 key to run the program.

<P><LI>Click the Command1 button. An 'Out of Stack Space' Error message appears
   at this point, where you might expect to see a Message Box with the
   phrase "Sum."
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: IAPVBA<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

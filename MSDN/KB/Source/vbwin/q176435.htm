

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Compiling to Native Code Can Be Slow </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176435">
<META NAME="KBModify" CONTENT="1997/11/07">
<META NAME="KBCreate" CONTENT="1997/11/07">
<META NAME="Keywords" CONTENT="vb5all">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When compiling a large project to native code, especially with optimizations selected, the compile time may be so long as to give the appearance of having  hung  the machine. Because there is no status bar to indicate the progress of the compiler, ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QBS0,QAW6,QAMR,QBVP,QALY,QAU3,QBXS,QACE,QAFH,QAYK,QAX6,QAPF,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Compiling to Native Code Can Be Slow</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176435</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When compiling a large project to native code, especially with
optimizations selected, the compile time may be so long as to give the
appearance of having "hung" the machine. Because there is no status bar to
indicate the progress of the compiler, the only indicator available is to
watch for hard drive activity, which may only occur once or twice a minute
as this is a CPU intensive activity.
<P>
<P><h2>CAUSE</h2>
 
<P>
This is by design. Compiling to native code takes more time than compiling
to p-code. There are some techniques suggested below for taking advantage
of some Visual Basic language features to speed up compile time.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Using the techniques outlined below can result in significantly faster
compile time. In some cases it has reduced compile time for large projects
from over an hour to less than 10 minutes.
<P>
<P><h3>Minimize the Dots</h3>
 
<P>
When referencing objects in Visual Basic, you use the dot syntax '.' to
navigate an object's hierarchy of collections, objects, properties, and
methods. It is not uncommon to create very lengthy navigation strings. For
example:
<P>
<PRE>   ' Refers to cell A1 on Sheet1 in the first workbook
   ' of an Microsoft Excel spreadsheet.
   Application.Workbooks.Item(1).Worksheets.Item_
   ("Sheet1").Cells.Item(1,1)

</PRE>In addition to being a rather lengthy string to type, this line of code is
fairly difficult to read and it is extremely inefficient.
<P>
The compiler must resolve each dot every time a dot is encountered. To
write applications that compile quickly, minimize the use of dots when
referencing an object.
<P>
You can usually minimize the dots by analyzing the objects and methods
available to you. For example, the above line of code can be shortened by
removing the Item method (this is the default method for collections
anyway, so you'll rarely use it in code) and by using the more efficient
Range method:
<P>
<PRE>   ' Refers to cell A1 on Sheet1 in the first workbook
   ' of an Microsoft Excel spreadsheet.
   Application.Workbooks(1).Worksheets("Sheet1").Range("A1")

</PRE>You can shorten this even further by rewriting the code so that it refers
to the active sheet in the active workbook, instead of a specific sheet in
a specific workbook:
<P>
<PRE>   ' Refers to cell A1 on the active sheet in the
   ' active workbook.
   Range("A1")

</PRE>Of course, the above example assumes it's OK to refer to cell A1 of any
sheet that happens to be active.
<P>
<P><h3>Use Set and With...End With</h3>
 
<P>
Using the Set statement also allows you to shorten navigation strings and
gives you a bit more control over your code. The following example uses the
Dim and Set statements to create variables that refer to frequently-used
objects:
<P>
<PRE>   Dim xlRange As Object
   Set xlRange = Application.ActiveSheet.Cells(1,1)
   xlRange.Font.Bold = True
   xlRange.Width = 40

</PRE>Visual Basic provides the With...End With construct to set an implied
object within code:
<P>
<PRE>   With Application.ActiveSheet.Cells(1,1)
      .Font.Bold = True
      .Width = 40
   End With

</PRE><h2>REFERENCES</h2>
 
<P>
Books Online, Programmer's Guide, Optimizing Objects
 
<PRE>Keywords          : vb5all
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Poor Performance with the GoSub Statement </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174808">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1997/10/06">
<META NAME="Keywords" CONTENT="vb5all">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A project compiled in native code shows poor performance. This behavior occurs because the project contains calls to subroutines using the GoSub statement.  CAUSE =====  The GoSub statement has not been optimized in Visual Basic.  RESOLUTION  Inste...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBS0,QAGI,QAJN,QAY5,QAFF,QAPN,QAB9,QBWS,QBE7,QBE6,QBV8,QBA8,QABA,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Poor Performance with the GoSub Statement</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174808</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A project compiled in native code shows poor performance. This behavior
occurs because the project contains calls to subroutines using the GoSub
statement.
<P>
<P><h2>CAUSE</h2>
 
<P>
The GoSub statement has not been optimized in Visual Basic.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Instead of using sub-routines, use functions in a module or place your code
inside an event.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GoSub statement is still provided for backward compatibility to older
versions of Visual Basic. However, the GoSub statement was not optimized
because of potential problems it can cause with the stack. Therefore, you
should not use subs of functions in your project. You will get much better
performance by calling a function in a module or placing the code inside an
event.
<P>
The following section contains instructions on how to create a sample
program that demonstrates the performance differences between inline code,
calling a function in a module, and calling a sub-routine using the GoSub
statement.
<P>
For each method, the values of two variables are swapped 1,000,000 times
and the time to perform this task is shown on a message box. Each method is
in a project that is compiled to native code. The following are the results
when this project was run on a Pentium 200Mhz computer with 64Mb of memory
running Windows NT Server version 4.0:

<UL><LI>Inline code           .016 seconds
<LI>Function call         .031 seconds
<LI>GoSub Statement      2.260 seconds
<P>
</UL>Your results may vary depending on the system configuration used to run
this test. Note that the time differences will not be evident if you run
the projects from within the Visual Basic IDE. To see the performance
difference, you need to compile each project as a native code executable
file.
<P>
To create the sample project, you will need to create four projects:

<OL><P><LI>Inline Code project - contains inline code. This project will be
   compiled to a native code executable file.

<P><LI>Function Call project - contains a project that calls a function in a
   module. This project will be compiled to a native code executable file.

<P><LI>GoSub Statement project - contains a subroutine that is called within
   the Click event using the GoSub statement. This project will be
   compiled to a native code executable file.

<P><LI>Sample project - contains the code to call the first three executable
   files. This project can be run within the Visual Basic IDE.
<P>
</OL><h3>Create the Inline Code Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Copy the following code to the Code window Form1:
<P>
<P><PRE>      Option Explicit
      Private Sub Form_Load()
<PRE></PRE>         Dim lngCounter As Long, x As Long, y As Long, tmp As Long
         Dim tmrStart As Double
         Dim strMsg As String

         tmrStart = Timer

         For lngCounter = 1 To 1000000
            x = 100
            y = 500

            tmp = x
            x = y
            y = tmp
         Next lngCounter

         strMsg = "Inline took " &amp; Str(Timer - tmrStart) &amp; " seconds."
         MsgBox (strMsg)
         End
      End Sub

</PRE><P><LI>From the File menu, click Make Project1.exe to display the Make Project
   dialog box. Name the executable "Inline" and click OK. The default
   compilation option in Visual Basic is native code.

<P><LI>Close the project.
<P>
</OL><h3>Create the Function Call Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>From the Project menu, click Add Module to add a module to the project.
   The Add Module dialog box appears. Click OK. The Module1 code window is
   displayed.

<P><LI>Copy the following code to the Code window of Module1:
<P>
<P><PRE>      Option Explicit
      Dim x As Long, y As Long, tmp As Long
      Public Sub Swap()
<PRE></PRE>         Dim lngCounter As Long
         Dim tmrStart As Double
         Dim strMsg As String

         tmrStart = Timer

         For lngCounter = 1 To 1000000
            x = 100
            y = 500
            tmp = x
            x = y
            y = tmp
         Next lngCounter

         strMsg = "Function Call took " &amp; Str(Timer - tmrStart)
         strMsg = strMsg &amp; " seconds."
         MsgBox (strMsg)
         End

      End Sub

</PRE><P><LI>From the File menu, click Make Project1.exe to display the Make Project
   dialog box. Name the executable "FunctionCall" and click OK. The default
   compilation option in Visual Basic is native code.

<P><LI>Close the project.
<P>
</OL><h3>Create the GoSub Statement Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Copy the following code to the Code window of Form1:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         Dim lngCounter As Long, x As Long, y As Long, tmp As Long
         Dim tmrStart As Double
         Dim strMsg As String

         tmrStart = Timer

         x = 100
         y = 500

         For lngCounter = 1 To 1000000
            GoSub Swap
         Next lngCounter

         strMsg = "GoSub took " &amp; Str(Timer - tmrStart) &amp; " seconds."
         MsgBox (strMsg)
         End

         Swap:
            tmp = x
            x = y
            y = tmp
         Return

      End Sub


</PRE><P><LI>From the File menu, click Make Project1.exe to display the Make Project
   dialog box. Name the executable "GoSub" and click OK. The default
   compilation option in Visual Basic is native code.

<P><LI>Close the project.
<P>
</OL><h3>Create the Sample Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Add three CommandButtons to Form1.

<P><LI>Copy the following code to the Code window of Form1. Enter the pathname
   of each executable file you created earlier in the sections marked
   with &lt;&lt;&lt;.
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         Command1.Caption = "Inline"
         Command2.Caption = "Go Sub"
         Command3.Caption = "Function Call"
      End Sub

      Private Sub Command1_Click()
         Shell ("&lt;path&gt;inline.exe")'&lt;&lt;&lt; Change &lt;path&gt; to the path of
                                   '    inline.exe
      End Sub

      Private Sub Command2_Click()
         Shell ("&lt;path&gt;Gosub.exe") '&lt;&lt;&lt; Change &lt;path&gt; to the path
                                   '    of GoSub.exe
      End Sub

      Private Sub Command3_Click()
         Shell ("&lt;path&gt;FunctionCall.exe")  '&lt;&lt;&lt; Change &lt;path&gt; to the path
                                           '    of FunctionCall.exe
      End Sub

</PRE><P><LI>Press the F5 key to run the program. Click each CommandButton to see the
   results of inline coding, calling a function in a module, and using the
   GoSub statement to call a subroutine.
<P>
 (c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
</OL>Arsenio Locsin, Microsoft Corporation
 
<PRE>Keywords          : vb5all
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

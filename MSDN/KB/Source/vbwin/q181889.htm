

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: VB Hangs While Automating Excel Using OLE Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181889">
<META NAME="KBModify" CONTENT="1998/03/04">
<META NAME="KBCreate" CONTENT="1998/02/27">
<META NAME="Keywords" CONTENT="vb5all VBKBAutomation">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Your application hangs while automating Microsoft Excel 97 via the OLE control.  CAUSE =====  This problem occurs while automating a Microsoft Excel 97 object that is using in-place activation in an OLE control. The problem does not occur with all ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QBS0,QAW6,QAH4,QBXS,QAMN,QA7O,QAOE,QAB5,QA9Q,QAIJ,QBWS,QAKP,QDJO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: VB Hangs While Automating Excel Using OLE Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181889</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Your application hangs while automating Microsoft Excel 97 via the OLE
control.
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem occurs while automating a Microsoft Excel 97 object that is
using in-place activation in an OLE control. The problem does not occur
with all methods or properties. This problem has been reported with the
following method/properties in the Microsoft Excel object library:
<P>
<PRE>   PrintOut
   Delete

</PRE><h2>RESOLUTION</h2>
 
<P>
A workaround is to not activate the object while running the automation
code. However, if you need to activate the object, do so in a separate
window instead of using in-place activation. For example, this line
activates the object in a separate window:
<P>
<PRE>   OLE1.DoVerb vbOLEOpen

</PRE>Another workaround is to deactivate the object before calling the
automation code that causes Visual Basic to hang. For example, the PrintOut
and Delete methods cause this problem to occur. Before using these methods,
you can deactivate the object prior to calling the method, then optionally
reactivate the object after calling the method. See the MORE INFORMATION
section later in this article for an example.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>On the Project menu, click References, and then select the Microsoft
   Excel 8.0 object library.

<P><LI>Place an OLE control on Form1 and create a new Microsoft Excel
   worksheet. The OLE control properties should be:
<P>
<PRE>      Property    Value
      -----------------

      Name        OLE1

      Class       Excel.Sheet.8

</PRE><P><LI>Place a CommandButton on Form1.

<P><LI>Copy the following code to the Code Window of Form1:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim xlBook As Excel.Workbook
         Set xlBook = OLE1.object
         OLE1.DoVerb vbOLEShow 'or OLE1.DoVerb vbOLEUIActivate
         xlBook.Worksheets("Sheet1").Range("A1").Value = "Hello"
         xlBook.Worksheets("Sheet1").PrintOut
         Set xlBook = Nothing
      End Sub

</PRE><P><LI>On the Run menu, click Start, or press the F5 key to start the program.

<P><LI>Click the CommandButton. Visual Basic hangs after it encounters the
   PrintOut method. The object will be correctly printed, but Visual Basic
   stops responding. You must select End Task in the task list (by
   pressing the CTRL+ALT+DEL keys) to end the Visual Basic project and
   Excel. Repeat until both Excel and the Visual Basic project are removed
   from the task list.

<P><LI>Repeat the steps again with the code modified as follows:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim xlBook As Excel.Workbook
         Set xlBook = OLE1.object
         OLE1.DoVerb vbOLEShow 'or OLE1.DoVerb vbOLEUIActivate
         xlBook.Worksheets("Sheet1").Range("A1").Value = "Hello"
         Command1.SetFocus 'causes deactivation of object
         xlBook.Worksheets("Sheet1").PrintOut
         OLE1.DoVerb vbOLEShow 'optional: reactivates object
         Set xlBook = Nothing
      End Sub

</PRE></OL>The problem is avoided by deactivating the object before calling the
PrintOut method. Setting focus to any control on the form will deactivate
the OLE control object.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: locks freezes crashes<BR>
Keywords          : vb5all VBKBAutomation<BR>
Technology        : ole<BR>
Version           : WINDOWS:5.0,97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbpending<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

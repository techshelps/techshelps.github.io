

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create a Transparent Bitmap Using Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94961 ">
<META NAME="KBModify" CONTENT="1996/07/25">
<META NAME="KBCreate" CONTENT="1993/01/26">
<META NAME="Keywords" CONTENT="kbgraphic kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A transparent image shows the background behind it instead of the image itself. You can use an icon editor such as the IconWorks sample program provided with Visual Basic to create icons that contain transparent parts. This article shows you how to...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAH2,QAK6,QAB2,QBS0,QANF,QAG9,QADR,QAI4,QACJ,QBWS,QA2Q,QAY5,QAPW,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create a Transparent Bitmap Using Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94961 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows,
<PRE>  versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A transparent image shows the background behind it instead of the image
itself. You can use an icon editor such as the IconWorks sample program
provided with Visual Basic to create icons that contain transparent parts.
This article shows you how to make certain parts of a bitmap transparent.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Here are the six general steps required to create a transparent bitmap:

<OL><P><LI>Store the area, or background, where the bitmap is going to be drawn.

<P><LI>Create a monochrome mask of the bitmap that identifies the transparent
   areas of the bitmap by using a white pixel to indicate transparent areas
   and a black pixel to indicate non-transparent areas of the bitmap.

<P><LI>Combine the pixels of the monochrome mask with the background bitmap
   using the And binary operator. The area of the background where the
   non-transparent portion of the bitmap will appear is made black.

<P><LI>Combine an inverted copy of the monochrome mask (step 2) with the source
   bitmap using the And binary operator. The transparent areas of the
   source bitmap will be made black.

<P><LI>Combine the modified background (step 3) with the modified source bitmap
   (step 4) using the Xor binary operator. The background will show through
   the transparent portions of the bitmap.

<P><LI>Copy the resulting bitmap to the background
<P>
</OL><h3>Example Code</h3>
 
1. Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
<PRE>   if Visual Basic is already running. Form1 is created by default.

</PRE><P><LI>Add the following controls to Form1 with the associated property values:
<P>
<PRE>   Control          Name (or CtlName)  Property Settings
   -----------------------------------------------------------------
   Picture          pictSource         Picture ="WINDOWS\THATCH.BMP"
   Picture          pictDest           Picture ="WINDOWS\ARCHES.BMP"
   Command button   cmdCopy            Caption ="Copy"

</PRE><P><LI>From the File menu, choose New Module (ALT, F, M). Module1 is created.

<P><LI>Add the following code to the cmdCopy_Click event procedure of Form1.
   This code calls the TransparentBlt() function to copy a source bitmap
   to a destination (background) picture control. White (QBColor(15)) areas
   of the bitmap are made transparent against the background bitmap.
<P>
<PRE>   Sub cmdCopy_Click ()
     Call TransparentBlt(pictDest, pictSource.Picture, 10, 10, QBColor(15))
   End Sub

</PRE><P><LI>Add the following code the general declarations section of Module1.
   Enter each Declare statement as one, single line:
<P>
   Type bitmap
<P><PRE>      bmType As Integer
      bmWidth As Integer
      bmHeight As Integer
      bmWidthBytes As Integer
      bmPlanes As String * 1
      bmBitsPixel As String * 1
      bmBits As Long
</PRE>   End Type
<PRE>   Declare Function BitBlt Lib "GDI" (ByVal srchDC As Integer, ByVal srcX
      As Integer, ByVal srcY As Integer, ByVal srcW As Integer, ByVal srcH
      As Integer, ByVal desthDC As Integer, ByVal destX As Integer, ByVal
      destY As Integer, ByVal op As Long) As Integer
   Declare Function SetBkColor Lib "GDI" (ByVal hDC As Integer, ByVal
      cColor As Long) As Long
   Declare Function CreateCompatibleDC Lib "GDI" (ByVal hDC As Integer)
      As Integer
   Declare Function DeleteDC Lib "GDI" (ByVal hDC As Integer) As Integer
   Declare Function CreateBitmap Lib "GDI" (ByVal nWidth As Integer, ByVal
      nHeight As Integer, ByVal cbPlanes As Integer, ByVal cbBits As
      Integer, lpvBits As Any) As Integer
   Declare Function CreateCompatibleBitmap Lib "GDI" (ByVal hDC As Integer,
      ByVal nWidth As Integer, ByVal nHeight As Integer) As Integer
   Declare Function SelectObject Lib "GDI" (ByVal hDC As Integer, ByVal
      hObject As Integer) As Integer
   Declare Function DeleteObject Lib "GDI" (ByVal hObject As Integer) As
      Integer
   Declare Function GetObj Lib "GDI" Alias "GetObject" (ByVal hObject As
      Integer, ByVal nCount As Integer, bmp As Any) As Integer
   Const SRCCOPY = &amp;HCC0020
   Const SRCAND = &amp;H8800C6
   Const SRCPAINT = &amp;HEE0086
   Const NOTSRCCOPY = &amp;H330008

</PRE><P><LI>Add the following Sub procedure to the general declarations section of
   Module1. TransparentBlt() accepts six parameters: a destination picture
   control (dest), a source bitmap to become transparent (srcBmp), the X,Y
   coordinates in pixels where you want to place the source bitmap on the
   destination (destX and destY), and the RGB value for the color you want
   to be transparent. TransparentBlt() copies the source bitmap to any X,Y
   location on the background making areas transparent.
<P>
<PRE>   Sub TransparentBlt (dest As Control, ByVal srcBmp As Integer, ByVal
      destX As Integer, ByVal destY As Integer, ByVal TransColor As Long)
      Const PIXEL = 3
      Dim destScale As Integer
      Dim srcDC As Integer  'source bitmap (color)
      Dim saveDC As Integer 'backup copy of source bitmap
      Dim maskDC As Integer 'mask bitmap (monochrome)
      Dim invDC As Integer  'inverse of mask bitmap (monochrome)
      Dim resultDC As Integer 'combination of source bitmap &amp; background
      Dim bmp As bitmap 'description of the source bitmap
      Dim hResultBmp As Integer 'Bitmap combination of source &amp; background
      Dim hSaveBmp As Integer 'Bitmap stores backup copy of source bitmap
      Dim hMaskBmp As Integer 'Bitmap stores mask (monochrome)
      Dim hInvBmp As Integer  'Bitmap holds inverse of mask (monochrome)
      Dim hPrevBmp As Integer 'Bitmap holds previous bitmap selected in DC
      Dim hSrcPrevBmp As Integer  'Holds previous bitmap in source DC
      Dim hSavePrevBmp As Integer 'Holds previous bitmap in saved DC
      Dim hDestPrevBmp As Integer 'Holds previous bitmap in destination DC
      Dim hMaskPrevBmp As Integer 'Holds previous bitmap in the mask DC
      Dim hInvPrevBmp As Integer 'Holds previous bitmap in inverted mask DC
      Dim OrigColor As Long 'Holds original background color from source DC
      Dim Success As Integer 'Stores result of call to Windows API
      If TypeOf dest Is PictureBox Then 'Ensure objects are picture boxes
        destScale = dest.ScaleMode 'Store ScaleMode to restore later
        dest.ScaleMode = PIXEL 'Set ScaleMode to pixels for Windows GDI
        'Retrieve bitmap to get width (bmp.bmWidth) &amp; height (bmp.bmHeight)
        Success = GetObj(srcBmp, Len(bmp), bmp)
        srcDC = CreateCompatibleDC(dest.hDC)    'Create DC to hold stage
        saveDC = CreateCompatibleDC(dest.hDC)   'Create DC to hold stage
        maskDC = CreateCompatibleDC(dest.hDC)   'Create DC to hold stage
        invDC = CreateCompatibleDC(dest.hDC)    'Create DC to hold stage
        resultDC = CreateCompatibleDC(dest.hDC) 'Create DC to hold stage
        'Create monochrome bitmaps for the mask-related bitmaps:
        hMaskBmp = CreateBitmap(bmp.bmWidth, bmp.bmHeight, 1, 1, ByVal 0&amp;)
        hInvBmp = CreateBitmap(bmp.bmWidth, bmp.bmHeight, 1, 1, ByVal 0&amp;)
        'Create color bitmaps for final result &amp; stored copy of source
        hResultBmp = CreateCompatibleBitmap(dest.hDC, bmp.bmWidth,
           bmp.bmHeight)
        hSaveBmp = CreateCompatibleBitmap(dest.hDC, bmp.bmWidth,
           bmp.bmHeight)
        hSrcPrevBmp = SelectObject(srcDC, srcBmp)     'Select bitmap in DC
        hSavePrevBmp = SelectObject(saveDC, hSaveBmp) 'Select bitmap in DC
        hMaskPrevBmp = SelectObject(maskDC, hMaskBmp) 'Select bitmap in DC
        hInvPrevBmp = SelectObject(invDC, hInvBmp)    'Select bitmap in DC
        hDestPrevBmp = SelectObject(resultDC, hResultBmp) 'Select bitmap
        Success = BitBlt(saveDC, 0, 0, bmp.bmWidth, bmp.bmHeight, srcDC,
           0, 0, SRCCOPY) 'Make backup of source bitmap to restore later
        'Create mask: set background color of source to transparent color.
        OrigColor = SetBkColor(srcDC, TransColor)
        Success = BitBlt(maskDC, 0, 0, bmp.bmWidth, bmp.bmHeight, srcDC,
           0, 0, SRCCOPY)
        TransColor = SetBkColor(srcDC, OrigColor)
        'Create inverse of mask to AND w/ source &amp; combine w/ background.
        Success = BitBlt(invDC, 0, 0, bmp.bmWidth, bmp.bmHeight, maskDC,
          0, 0, NOTSRCCOPY)
        'Copy background bitmap to result &amp; create final transparent bitmap
        Success = BitBlt(resultDC, 0, 0, bmp.bmWidth, bmp.bmHeight,
           dest.hDC, destX, destY, SRCCOPY)
        'AND mask bitmap w/ result DC to punch hole in the background by
        'painting black area for non-transparent portion of source bitmap.
        Success = BitBlt(resultDC, 0, 0, bmp.bmWidth, bmp.bmHeight,
           maskDC, 0, 0, SRCAND)
        'AND inverse mask w/ source bitmap to turn off bits associated
        'with transparent area of source bitmap by making it black.
        Success = BitBlt(srcDC, 0, 0, bmp.bmWidth, bmp.bmHeight, invDC,
           0, 0, SRCAND)
        'XOR result w/ source bitmap to make background show through.
        Success = BitBlt(resultDC, 0, 0, bmp.bmWidth, bmp.bmHeight,
           srcDC, 0, 0, SRCPAINT)
        Success = BitBlt(dest.hDC, destX, destY, bmp.bmWidth, bmp.bmHeight,
           resultDC, 0, 0, SRCCOPY) 'Display transparent bitmap on backgrnd
        Success = BitBlt(srcDC, 0, 0, bmp.bmWidth, bmp.bmHeight, saveDC,
           0, 0, SRCCOPY) 'Restore backup of bitmap.
        hPrevBmp = SelectObject(srcDC, hSrcPrevBmp) 'Select orig object
        hPrevBmp = SelectObject(saveDC, hSavePrevBmp) 'Select orig object
        hPrevBmp = SelectObject(resultDC, hDestPrevBmp) 'Select orig object
        hPrevBmp = SelectObject(maskDC, hMaskPrevBmp) 'Select orig object
        hPrevBmp = SelectObject(invDC, hInvPrevBmp) 'Select orig object
        Success = DeleteObject(hSaveBmp)   'Deallocate system resources.
        Success = DeleteObject(hMaskBmp)   'Deallocate system resources.
        Success = DeleteObject(hInvBmp)    'Deallocate system resources.
        Success = DeleteObject(hResultBmp) 'Deallocate system resources.
        Success = DeleteDC(srcDC)          'Deallocate system resources.
        Success = DeleteDC(saveDC)         'Deallocate system resources.
        Success = DeleteDC(invDC)          'Deallocate system resources.
        Success = DeleteDC(maskDC)         'Deallocate system resources.
        Success = DeleteDC(resultDC)       'Deallocate system resources.
        dest.ScaleMode = destScale 'Restore ScaleMode of destination.
      End If
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S) to run the program.

<P><LI>Click the Copy button. The thatched pattern in the first picture is
   copied onto the second picture (an image of arches) making the arches
   show through areas of the previously white thatched pattern.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbgraphic kbprg kbcode kbwebcontent<BR>
KBSubcategory: APrgGrap<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

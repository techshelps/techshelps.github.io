

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create Data Bound Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161273">
<META NAME="KBModify" CONTENT="1997/08/13">
<META NAME="KBCreate" CONTENT="1996/12/19">
<META NAME="Keywords" CONTENT="vb5all vb5howto VBKBCtrl VBKBDB VBKBDesignTime VBKBEnv kbusage kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic allows a user's custom ActiveX control to have properties that are “bound” to database fields. This article describes how to bind these properties.  MORE INFORMATION  When defining a bindable property for a control, do the following:  ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QA7O,QAMB,QBWC,QAFF,QAB5,QBWS,QAOE,QAMN,QA7N,QBS0,QBJZ,QAHV,QA2Q,QAG2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create Data Bound Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 13, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161273</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions,
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic allows a user's custom ActiveX control to have properties that
are “bound” to database fields. This article describes how to bind these
properties.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When defining a bindable property for a control, do the following:

<OL><P><LI>With the code window of your custom ActiveX control visible, click
   Procedure Attributes from the Tools menu.

<P><LI>Click Advanced.

<P><LI>In the Name field, select the property you want to be bindable.
<P>
</OL>The following options are available for bindable properties and should be
considered:

<OL><P><LI>Property binds to DataField.
<P>
   This means that the DataField property, exposed at design-time, will
   define the database field for which this property is bound. Only
   one property can use the DataField property to bind to a database
   field. If you have many bindable properties, you must use the
   DataBindings collection (see next option).

<P><LI>Show in DataBindings collection at design-time.
<P>
   This exposes a DataBindings property at design-time. When used,
   this property displays a dialog that allows you to choose which
   bindable properties are bound to which database fields.

<P><LI>Property will call CanPropertyChange before changing.
<P>
   The CanPropertyChange function asks the container if a property
   bound to a data source can be changed.
<P>
</OL><h3>Step-by-Step Example</h3>
 
<P>
The following example creates a custom ActiveX control with two bindable
properties:

<OL><P><LI>Start a new ActiveX Control project. UserControl1 is added by default.

<P><LI>Add  two Textbox controls, Text1 and Text2, to UserControl1.

<P><LI>Add the following code to the General Declarations of the UserControl1
   section:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Sub UserControl_Initialize()
<PRE></PRE>         Text1.Text = "Caption"
         Text1.Left = 0
         Text2.Text = "Subcaption"
         Text2.Left = 0
         Text2.Font.Name = "Arial"
         Text2.Font.Size = 7
      End Sub

      Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
         Caption = PropBag.ReadProperty("Caption", "")
         SubCaption = PropBag.ReadProperty("SubCaption", "")
      End Sub

      Property Let Caption(strNewValue As String)
         If CanPropertyChange("Caption") Then
            Text1.Text = strNewValue
            PropertyChanged "Caption"
         End If
      End Property

      Property Get Caption() As String
         Caption = Text1.Text
      End Property

      Property Let SubCaption(strNewValue As String)
         If CanPropertyChange("SubCaption") Then
            Text2.Text = strNewValue
            PropertyChanged "Caption"
         End If
      End Property

      Property Get SubCaption() As String
         SubCaption = Text2.Text
      End Property

      Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
         PropBag.WriteProperty "Caption", Caption, ""
         PropBag.WriteProperty "SubCaption", SubCaption, ""
      End Sub

      Private Sub Text1_Change()
         PropertyChanged "Caption"
      End Sub

      Private Sub Text2_Change()
         PropertyChanged "SubCaption"
      End Sub

</PRE><P><LI>To make the properties "Caption" and "SubCaption" bindable, click
   Procedure Attributes from the Tools menu.

<P><LI>Select "Caption" from the Name field, and the click Advanced.

<P><LI>Select the "Property is data bound" option.

<P><LI>Select the "Show in DataBindings collection at design-time" option.

<P><LI>Select the "Property will call CanPropertyChange before changing"
   option.

<P><LI>Select the "This property binds to DataField" option.

<P><LI>Click Apply.

<P><LI>Repeat steps 6 to 8 for the "SubCaption" property, and click Apply.
<P><PRE>    Do not repeat step 9 as only one property can be bound to the
    DataField.
</PRE>
<P><LI>Click OK.
<P>
</OL>The "Caption" property is now defined as a bindable property that obtains
the database field to which it is bound from the exposed DataField
property. The "SubCaption" property is defined as bindable through the use
of the DataBindings collection.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: databound user-defined multiple<BR>
Keywords          : vb5all vb5howto VBKBCtrl VBKBDB VBKBDesignTime VBKBEnv kbusage kbhowto<BR>
Technology        : kbole<BR>
Version           : 5.00<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 13, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Use Freelocks in a Multi-User Environment </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122958">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/11/17">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains when and where to use the FreeLocks statement in your database program to prevent unintentional read locks.  MORE INFORMATION  The database engine in Microsoft Visual Basic relies on background processing to keep all records c...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAA8,QBS0,QA5V,QABT,QAEF,QBFN,QAZV,QAXB,QAB5,QAB4,QAAP,QACI,QAC1,QBD2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>When to Use Freelocks in a Multi-User Environment</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122958</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains when and where to use the FreeLocks statement in your
database program to prevent unintentional read locks.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The database engine in Microsoft Visual Basic relies on background
processing to keep all records current in a recordset and to remove read
locks. Usually, read locks are removed and data in local dynaset objects is
updated only when no other actions (including mouse moves) are occurring.
If data processing is so intense that normal background management of locks
is unable to keep up, you may encounter various lock errors, usually Error
3186:
<P>
<PRE>   Couldn't save; currently locked by user '&lt;UserName&gt;' on machine
   '&lt;MachineName&gt;'.

</PRE>or Error 3260:
<P>
<PRE>   Couldn't update; currently locked by user '&lt;UserName&gt;' on machine
   '&lt;MachineName&gt;'.

</PRE>Certain operations, such as using a Seek method on a Table object,
temporarily lock a recordset and prevent others from accessing the table.
Performing a Seek places a read lock on the index while the seek is
performed. After the Seek is finished, if the database engine is not
allowed time to release its read lock, other users may be locked out from
manipulating the table.
<P>
This is where the FreeLocks statement comes in handy. According to the
Visual Basic online Help, the FreeLocks statement "suspends data
processing, allowing the database to release locks on record pages and make
all data in your local Dynaset objects current in a multiuser environment."
<P>
In addition to FreeLocks, if your program is tying up Windows and the CPU,
you should follow the FreeLocks command with a DoEvents statement.
FreeLocks allows the database engine to release its read locks; DoEvents
allows Windows to catch up on processing background tasks such as
repainting portions of the screen or processing user input. DoEvents should
be used carefully, however, because it allows your VB code to be reentrant.
<P>
You will want to implement the FreeLocks statement after the following
operations:

<UL><LI>Opening Recordsets: Using CreateDynaset and CreateSnapShot, places a
   read lock on the table while the object is initialized. For example:
<P>
   Dim db As Database, ds As DynaSet
   Set db = OpenDatabase("Bibio.MDB")
   Set ds = db.CreateDynaset("Select * From Authors")
   FreeLocks

<LI>Searching: Use FreeLocks after performing a Seek, FindFirst,
   FindPrevious, FindNext or FindLast. Searches place a read lock on an
   index, if available, or on the table while the search is performed. For
   Example:
<P>
   Dim db As Database, tb As Table
   Set db = OpenDatabase("Biblio.MDB")
   Set tb = db.OpenTable("Titles")
   tb.Index = "Au_ID"
   tb.Seek "=", 6
   FreeLocks

<LI>Deleting and Updating records: Performing a Delete or Update on a
   recordset locks the page that the current record is on while the
   record is removed or added to the table. Use FreeLocks immediately
   following the Update. For example:
<P>
   ds.Edit
   ds("Favorite Music").Value = "Jazz"
   ds.Update
   FreeLocks

<LI>Error Events: If you implement error trapping in your program, you
   should add a FreeLocks statement in the On Error event to handle the
   case where a database error occurs. For example:
<P>
   Error_Handler:
<PRE>      If (Err = 3186) Or (Err = 3260) Then   'Currently Locked DB Errors

         FreeLocks
         ...
      End If
      Resume

</PRE></UL>NOTE: while it is useful to implement the FreeLocks statement, you must be
careful not to implement too many of them. Overuse of FreeLocks may result
in poor performance.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgData<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Setup Wizard Dependency Files </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178354">
<META NAME="KBModify" CONTENT="1997/12/22">
<META NAME="KBCreate" CONTENT="1997/12/19">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  A dependency (.DEP) file contains information about the run-time requirements of an application or component; it contains information regarding which files are needed, how the files are to be registered, and where they should be installed on the cl...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAA1,QBS0,QDI2,QAJG,QDL9,QBWO,QBWN,QBBI,QABA,QBWQ,QBVV,QAPF,QAMA,QDNN,QDIZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Setup Wizard Dependency Files</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178354</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A dependency (.DEP) file contains information about the run-time
requirements of an application or component; it contains information
regarding which files are needed, how the files are to be registered, and
where they should be installed on the client's machine. You can create
dependency files for standard Visual Basic projects, ActiveX controls,
ActiveX documents, and other ActiveX components.
<P>
When a component is used in another project, the dependency information for
the component is incorporated into the project's dependency information.
This dependency information is used solely by the Setup Wizard. When you
use the Setup Wizard to generate a setup for your project, the Setup Wizard
refers to the project's dependency information to determine which files
should be distributed with your project and how those files should be
installed.
<P>
All of the ActiveX controls that ship with Visual Basic have a companion
dependency file. It is strongly recommended that you generate a dependency
file for your component, especially if you intend that the component be
used in other Visual Basic projects. The Setup Wizard, which is included
with Visual Basic Professional and Enterprise editions, gives you the
option to generate a dependency file automatically for your project or
component. The dependency file may also be generated using a text editor if
you cannot use the Setup Wizard to create one. The remainder of this
article describes the syntax for a dependency file.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A dependency file is a standard Windows .INI file and can be read and
written to using the standard Windows API's (GetPrivateProfileString and
WritePrivateProfileString).
<P>
There are few items to note for dependency files:

<UL><LI>Dependency files may have multiple sections. The section order
   is not significant.

<LI>Entries are not case-sensitive.

<LI>Comments are allowed when preceded by a semi-colon (;).

<LI>The dependency file name is important. The filename prefix
   must match the filename of the component it describes. For
   example, a dependency file MYOCX.DEP would correspond to a
   component such as MYOCX.OCX or MYOCX.DLL.
<P>
</UL>Each section in a .DEP file uses the following syntax:
<P>
[Component Filename]
Dest = &lt;Destination&gt;
UsesN = &lt;Dependent File&gt;
Register = &lt;Method of Registration&gt;
Version = &lt;Component version&gt;
Date = &lt;Component Date&gt;
Time = &lt;Component Time&gt;
ProgramIconTitle = &lt;Title for Shortcut&gt;
ProgramIconCmdLine = &lt;Command Line for Shortcut&gt;
<P>
<P><h3>Dest=</h3>
 
<P>
The Dest= key indicates the destination directory for the component. This
value may be a relative path, a full path, or a path based on any of the
following macros (for example, it may be simply a macro, or it may be a
macro followed by a backslash and a relative path):
<P>
<PRE> $(AppPath)            Indicates the path the user selects
                       during setup.

 $(WinSysPath)         Indicates the \Windows\System or
                       \Windows\System32 directory.

 $(WinPath)            Indicates the \Windows directory.

 $(ProgramFiles)       Indicates the directory specified at
                       HKEY_LOCAL_MACHINE\Software\
                       Microsoft\Windows\CurrentVersion\
                       ProgramFilesDir.

 $(CommonFiles)        Indicates the directory specified at
                       HKEY_LOCAL_MACHINE\Software\
                       Microsoft\Windows\CurrentVersion\
                       CommonFilesDir.

 $(CommonFilesSys)     Indicates $(CommonFiles)\System under
                       Windows 95 and NT 4.0, or the same as
                       $(WinSysPath) under NT 3.51.

 $(MSDAOPath)          The location stored in the registry
                       for DAO components.

</PRE>The Dest= key applies only to the component to which the section applies.
By default, all files dependent on the component will also be placed in the
same location. To override the location for a "child," you can create a
section for the "child" and specify a different destination in that
section.
<P>
<P><h3>UsesN=</h3>
 
<P>
The UsesN= key (where N is an integer) indicates a dependent file for the
component. A file specified by a UsesN= key is required for the component
defined by that section. In a section, N must be sequential and must start
with 1. For an illustration, refer to the sample section below:
<P>
<PRE>   [MyOCX.OCX]
   Dest = $(WinSysPath)
   Uses1 = MyDLL.DLL
   Uses2 = MyOCX.TXT

</PRE>In this example, MyDLL.DLL and MyOCX.TXT are dependent files for MyOCX.OCX.
<P>
NOTE: If the UsesN keys are not ordered sequentially, or if a number is
skipped, depended files may not be recognized in the section and may not be
acknowledged by the Setup Wizard.
<P>
<P><h3>Register=</h3>
 
<P>
"Register=" indicates whether the file should be registered and, if so, how
it should be registered. The valid values for this key are:
<P>
<PRE>    None                  If a value is omitted for this key,
                          the file is not registered.

    $(DllSelfRegister)    The file supports self-registration
                          and self-unregistration via a DLL
                          entry point.

    $(ExeSelfRegister)    The file is a local server that
                          supports self-registration through
                          the command-line parameter
                          "/RegServer" and self-unregistration
                          through the command-line parameter
                          "/UnRegServer."

    $(TLBRegister)        The file is a .TLB file and should be
                          registered.

    Filename              The file is registered by calling
                          Regedit.exe with this filename as a
                          Command-line parameter.

    $(Remote)             Used only by Visual Basic to indicate
                          that the file is a .VBR file.

</PRE>If the Register= key is omitted altogether, the file is not registered.
<P>
<P><h3>Version=</h3>
 
<P>
(Not Required)
<P>
The Version= key indicates the version of the component that is needed. The
Setup Wizard with Microsoft Visual Basic 5.0 can detect that a .DEP file is
out of date using the Version= key. The version is specified in the format
a.b.c.d. For example:
<P>
<PRE>   Version = 4.50.10.11

</PRE><h3>Date=</h3>
 
<P>
(Not Required)
<P>
The Date= key is the date stamp of the component that is needed. The Setup
Wizard can detect that a .DEP file is out-of-date using this key. This
value must always be in the format d/m/yyyy or dd/mm/yyyy, even when using
a localized Setup Wizard. For example:
<P>
<PRE>    Date = 10/5/1996

     -or-

    Date = 04/03/1997

</PRE>NOTE: This key is ignored if a value is specified for the Version= key.
<P>
<P><h3>Time=</h3>
 
<P>
(Not Required)
<P>
The Time= key is the time stamp of the component that is needed. The Setup
Wizard can detect that a .DEP file is out-of-date using this key. This
value must always be in the 24-hour format hh:mm:ss, even when using a
localized Setup Wizard. For example:
<P>
<PRE>   Time = 14:05:32

</PRE>NOTE: This key is ignored if a value is specified for the Version= key.
<P>
<P><h3>ProgramIconTitle= and ProgramIconCmdLine=</h3>
 
<P>
(Not Required)
<P>
The ProgramIconTitle= key indicates that a shortcut (or Program Manager
icon for Windows NT 3.51) should be created if the file is installed. The
value for the ProgramIconTitle= is the title given to the shortcut (or
icon). The value may be quoted or unquoted. For example:
<P>
<PRE>     ProgramIconTitle = My Program Title

</PRE>If you indicate that a shortcut should be created, then you can give the
command line for the shortcut by specifying a value for the
ProgramIconCmdLine= key. The path that you use for the command-line value
may contain the macros listed for the Dest= key. For example:
<P>
<PRE>     ProgramIconCmdLine = $(AppPath)\Readme.txt

</PRE><h3>Localized Components</h3>
 
<P>
Some components may have different dependencies based on the language. To
install a component based on the language setting for the client's
computer, you may specify a section with the component name followed by the
language ID.
<P>
For example, VBRUN500.DLL has a satellite DLL for all languages (with the
exception of English):
<P>
<PRE>   [VBRUN500.DLL]
   Dest = $(WinSysPath)
   
   [VBRUN500.DLL &lt;000C&gt;]     ;000C = primary language ID for French
   Uses1 = VB5FR.DLL
   
   [VBRUN500.DLL &lt;0007&gt;]     ;0007 = primary language ID for German
   Uses1 = VB5DE.DLL

</PRE>In this example, if VBRUN500.DLL is installed and the client's language
settings are French, VB5FR.DLL will also be installed. Likewise, if
VBRUN500.DLL is installed and the client's language settings are German,
VB5DE.DLL will be installed.
<P>
<P><h3>Sample Dependency File</h3>
 
<P>
The following is a sample .DEP file for a component named MyOCX.OCX. This
dependency file would be named MyOCX.DEP:
<P>
<PRE>    [MyOCX.OCX]
    Register = $(DLLSelfRegister)
    Dest = $(WinSysPath)
    Date = 1/23/1996
    Time = 10:15:33
    Version = 1.1.13.6
    Uses1 = MyDLL.DLL
    Uses2 = MyServer.EXE
    Uses3 = VBRUN500.DLL

    [MyServer.EXE]
    Dest = $(WinPath)
    Date = 1/23/1996
    Time = 18:52:48
    Version = 1.0.1.0
    Uses1 = VBRUN500.DLL
    Register = $(ExeSelfRegister)
    ProgramIconTitle = My Program
    ProgramIconCmdLine = $(WinSysPath)\MyOCX.OCX

    [MyDLL.DLL]
    Register = $(DLLSelfRegister)
    Version = 1.0.1.0

    [VBRUN500.DLL]
    Dest = $(WinSysPath)

    ;Additional Files for International Support
    [VBRUN500.DLL &lt;0007&gt;]
    Uses1 = VB5DE.DLL

    [VBRUN500.DLL &lt;000C&gt;]
    Uses1 = VB5FR.DLL

</PRE>MyOCX.OCX is a self registering file that is installed in the
Windows\System directory. MyOCX.OCX has 3 dependent files; MyDLL.DLL,
MyServer.EXE, and VBRUN500.DLL.
<P>
MyServer.EXE is a self-registering file that is installed in the Windows
directory. MyServer.EXE has only one dependent file, VBRUN500.DLL. If
MyServer.EXE is installed during setup, a shortcut is created with the
title "My Program" and the command line Windows\System\MyOCX.OCX.
<P>
MyDLL.DLL is also a self-registering file. A destination for MyDLL.DLL is
not specified; thus, it will be placed in the destination path for its
parent, MyOCX.OCX.
<P>
VBRUN500.DLL will not be registered because a Register= key is not
specified in its section. VBRUN500.DLL will be placed in the Windows\System
directory. If VBRUN500.DLL is installed during setup, VB5DE.DLL will be
installed if the language setting is German and VB5FR.DLL will be installed
if the language setting is French. If the language setting is set to
something other than French or German, no additional files will be
installed.
<P>
<P><h3>How Setup Wizard Searches for Dependency Information</h3>
 
<P>
When the Setup Wizard needs to find dependency information for a file (for
example, MyOCX.OCX), it will follow a specific path. The Setup Wizard will
use the following methods to locate a section entitled [MyOCX.OCX]; when
the section is found, the search ends.

<OL><P><LI>If the file has been located in a .DEP file, it will use the
   information in the .DEP file in which it was first found.

<P><LI>The Setup Wizard will look in the default master dependency
   file for Visual Basic 5.0 (VB5DEP.INI). Information that is
   placed in the default master dependency file overrides that
   which might be found elsewhere.

<P><LI>The Setup Wizard will look for a dependency file named
   MyOCX.DEP. If the dependency file is found, it will search
   for the section entitled [MyOCX.OCX].

<P><LI>It will search for a .DEP file associated with the parent of
   MyOCX.OCX and possibly continue up the parent chain until a
   section entitled [MyOCX.OCX] is located.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information about how the Setup Wizard combines dependency
files with the Visual Basic project and the VB5DEP.INI file to create a
setup program, a Setup.LST, and a project .DEP file, refer to the section
"Using the Visual Basic Setup Wizard" in chapter 17 of the Visual Basic 5.0
Programmer's Guide.
<P>
Chapter 17 "Distributing Your Applications," Visual Basic 5.0 Programmer's
Guide.
 
<PRE>Keywords          : vb5all vb5howto
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

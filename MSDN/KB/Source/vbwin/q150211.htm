

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine if a Program Is Running as a DLL or an EXE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150211">
<META NAME="KBModify" CONTENT="1996/04/29">
<META NAME="KBCreate" CONTENT="1996/04/23">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to determine whether the Enterprise Edition of Microsoft Visual Basic, which creates DLL or EXE files, is presently running an EXE or DLL program. This is useful to know if both an EXE and a DLL version of a program have ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBS0,QAPN,QBWS,QDNN,QADK,QAJH,QATX,QACI,QAP2,QAMA,QBJZ,QA7O,QA7N,QA2Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine if a Program Is Running as a DLL or an EXE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150211</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, 32-bit only,
   for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to determine whether the Enterprise Edition of
Microsoft Visual Basic, which creates DLL or EXE files, is presently
running an EXE or DLL program. This is useful to know if both an EXE and a
DLL version of a program have been created, and different actions need to
take place based on which version is loaded.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are several ways to determine whether a running program was loaded as
an EXE or DLL.
<P>
<P><h3>Method 1 - Place the information in one of the resource stamps</h3>
 
<P>
Choose the Options button when making the EXE or DLL. In the Version
Information section, select File Description, and type in the type of file
to be compiled. To test this in the running program, enter the code below
to see a MsgBox with the correct type:
<P>
<PRE>   If App.FileDescription = "EXE" Then
      MsgBox "I am an EXE"
   ElseIf App.FileDescription = "DLL" Then
      MsgBox "I am a DLL"
   End If

</PRE><h3>Method 2 - Conditional Compilation</h3>
 
<P>
If the version information fields are being used, use Conditional
Compilation to determine if a program is a DLL or an EXE, as in the
following code:
<P>
<PRE>   #If EXE Then
      Msgbox "I am an EXE"
   #Else
      MsgBox "I am a DLL"
   #EndIf

</PRE>Before compiling the EXE, from the Tools menu, select Options, select
Advanced Tab, and type the following in the Conditional Compilation
Arguments field:
<P>
<PRE>   EXE=1

</PRE>If a DLL is being compiled, type the following in the Conditional
Compilation Arguments field:
<P>
<PRE>   EXE=0

</PRE>In Method 2, code that is not required for a DLL or an EXE is not compiled.
This is significant if a DLL and an EXE version of a program need to behave
differently.
<P>
<P><h3>Method 3 - Use the Windows API to dynamically determine the file extension</h3>
 
<P>
If the Instance handle of the program is passed to the GetModuleFileName
API function, the full path is returned to the program. Microsoft Visual
Basic exposes the hInstance as a property of the App object. For example:

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>In the General Declarations section of Form1, place the following:
<P>
<P><PRE>      Private Declare Function GetModuleFileName Lib "kernel32" Alias _
      "GetModuleFileNameA" (ByVal hModule As Long, _
      ByVal lpFileName As String, ByVal nSize As Long) As Long
</PRE><P>
<P><PRE>      Option Compare Text
</PRE>
<P><LI>In the Click event of Form1, place the following:
<P>
<P><PRE>      Private Sub Form_Click()
<PRE></PRE>         Dim sFilePath As String * 255
         Dim sVarFilePath As String
         Dim sFileExt As String

         GetModuleFileName App.hInstance, sFilePath, Len(sFilePath)
         'Trim out the trailing characters

         sVarFilePath = Trim(sFilePath)

         'Capture the file extension
         sFileExt = Mid(sVarFilePath, Len(sVarFilePath) - 3, 3)

         'Make the comparison
         If sFileExt = "EXE" Then
            MsgBox "I am an EXE"
         Else
            MsgBox "I am a DLL"
         End If

         End Sub

</PRE><P><LI>Compile the program as an EXE. Click on the form, and it correctly
   informs the user whether it was loaded as an EXE or a DLL.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb432<BR>
KBCategory: kbprg kbhowto<BR>
KBSubcategory: PrgOther
<P>

<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

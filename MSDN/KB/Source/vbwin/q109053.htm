

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Using RecordCount with VB Dynasets, Snapshots, and Tables </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109053">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1993/12/21">
<META NAME="Keywords" CONTENT="kbprg kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The RecordCount property, when used with a Dynaset or Snapshot, can sometimes return an incorrect number of records. This applies to the Microsoft Access database engine that is built into Visual Basic version 3.0.  CAUSE =====  For Dynasets and Sn...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAPN,QAX3,QAG8,QBS0,QA7O,QDMH,QAKC,QDN3,QBC6,QAXB,QAUD,QAMN,QAB5,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Using RecordCount with VB Dynasets, Snapshots, and Tables</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109053</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0.
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The RecordCount property, when used with a Dynaset or Snapshot, can
sometimes return an incorrect number of records. This applies to the
Microsoft Access database engine that is built into Visual Basic
version 3.0.
<P>
<P><h2>CAUSE</h2>
 
<P>
For Dynasets and Snapshots, the RecordCount property does not automatically
return the number of records that exist in the recordset. RecordCount
returns the number of records accessed. If you don't do a MoveLast method
immediately before checking the record count, you will get an incorrect,
smaller count.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To determine the number of records in a Dynaset or Snapshot, use the
MoveLast method before checking the RecordCount property. This
requirement is by design.
<P>
NOTE: If you add or delete records to a table within a transaction, and
then roll back the transaction, the value of the RecordCount property is
not adjusted accordingly.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design because otherwise, Visual Basic would have to do
an implicit MoveLast. This would be very slow with large record sets and
especially with remote databases, so the decision is left up to the
programmer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: If your data is displayed in a Grid control, the RecordCount will
be one greater than the last line number in the grid because the grid
starts at zero.
<P>
<P><h3>How to Count Records in Whole Table Quickly by Using ListTables Method</h3>
 
<P>
The following steps count the number of records in a table without
opening the table:

<OL><P><LI>Create a Snapshot of the Tabledefs collection using the ListTables
   method. The ListTables method creates a Snapshot with one record for
   each Table or QueryDef in a specified database.

<P><LI>Examine the RecordCount field of the record corresponding to your table
   in that Snapshot. That RecordCount field is not a property; it is a
   field in a record in a Snapshot that is returned by the ListTables
   method.
<P>
</OL>The following sample program performs the above two steps:
<P>
<PRE>   Sub Form_Load ()
   Const DB_TABLE = 1  ' Constant taken from DATACONS.TXT file.
   Dim db As Database
   Dim snap As Snapshot
   Set db = OpenDatabase("C:\VB3\BIBLIO.MDB")
   Set snap = db.ListTables()  ' Copy Table information to Snapshot.
   Do While Not snap.EOF
      If snap("TableType") = DB_TABLE Then
      'Enter the Table name for which you want a record count:
         If snap("Name") = "Authors" Then
            MyRecordCount = snap("RecordCount")
         End If
      End If
      snap.MoveNext  ' Move to next record.
   Loop
   snap.Close
   form1.Show  ' Must Show form1 in Load event before Print works.
   Print MyRecordCount
   End Sub

</PRE></OL><h3>How to Count Records in Snapshot, Dynaset, or Data Control</h3>
 
<P>
NOTE: A MoveLast will be slow on a large table or set. Only use the method
in the section below for counting subsets of the table. To count the number
of records that comprise the whole table, use the ListTables Method given
above.
<P>
If you are using a Snapshot, Dynaset, or the data control, you can count
the records in the current recordset by first doing a MoveLast. Then use
the RecordCount property. This count is only accurate for that instant,
because another user could be simultaneously adding or deleting records to
the underlying table. By design, a data control is linked to a Dynaset.
<P>
A MoveLast on a recordset variable (a Dynaset or Snapshot) is faster than
MoveLast on a data control. You can create a separate Snapshot variable of
your data control's recordset and invoke a MoveLast on that Snapshot.
<P>
The following program shows how to use MoveLast and the RecordCount
property to count the number of records in a Dynaset.
<P>
<PRE>   Sub Form_Load ()
      Dim MyDB As Database, MyDyna As Dynaset
      Set MyDB = OpenDatabase("C:\VB3\BIBLIO.MDB")
      Set MyDyna = MyDB.CreateDynaset("Authors")
      MyDyna.MoveLast
      MyRecordCount = MyDyna.RecordCount
      MyDyna.Close
      form1.Show
      Print MyRecordCount
   End Sub

</PRE><h3>Records Must Be Properly Added Before They Are Counted</h3>
 
<P>
The Addnew method allocates space for a new record in your database. You
then add data to the various table fields in the new record. You then do
an Update method to write the new record to the table.
<P>
The Update method saves the contents of the copy buffer to a specified
Table or Dynaset. Use Update to save any changes to a record after using
Edit or AddNew. With a data control, if an Edit or AddNew operation is
pending when you move to another record or close the recordset, Update
is automatically invoked if not stopped during the Validate event.
<P>
NOTE: In the Professional Edition, if you are not using a data control
and move to another record or close the recordset while an Edit or
AddNew operation is pending, any existing changes will be lost and no
error will occur.
<P>
<P><h3>Loops and RecordCount</h3>
 
<P>
Use EOF instead of RecordCount in loops. For example, don't use this:
<P>
<PRE>   For i = 1 to ds.RecordCount ' Bad code
   ...
   Next

</PRE>Use the following instead:
<P>
<PRE>   Do Until ds.EOF             ' Good code
   ...
   Loop

</PRE><h2>REFERENCES</h2>
 

<UL><LI>"Microsoft Visual Basic Version 3.0: Professional Features Book 2: Data
   Access Guide," page 24 (RecordCount field) and pages 61-63 (RecordCount
   property).
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

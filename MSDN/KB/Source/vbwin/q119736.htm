

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Implement the BackColor Property in VBX Custom Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119736">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/08/22">
<META NAME="Keywords" CONTENT="kbprg kbtool kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Control Development Kit (CDK) provides a set of standard properties that you can use in your custom control. Most of these standard properties do not need any additional code. All you need to do is include these properties in your property list...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QAPN,QAH4,QA7O,QAOE,QAMN,QAPF,QAEV,QABB,QAG9,QBSO,QAUD,QAH6,QAGI,QAYC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Implement the BackColor Property in VBX Custom Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119736</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Control Development Kit (CDK) provides a set of standard properties
that you can use in your custom control. Most of these standard properties
do not need any additional code. All you need to do is include these
properties in your property list. A few of the standard properties,
however, do require some additional work on the part of the developer. For
example, to implement the BackColor property, you need to write some
additional code. This article shows by example how to do it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The CDK documentation states that to support the BackColor property, you
must send a WM_CTLCOLOR message to get a brush that contains the background
color. (See page 39 of the CDK documentation for more information.)
However, the CDK documentation does not specifically describe where you
need to put this code or how it should be structured. The Circ3 example
implements a functional BackColor property, but the code is not very
generic.
<P>
<P><h3>Example</h3>
 
<P>
The following sample code demonstrates how to add a generic BackColor
property to your custom control. Essentially, you add code to your Control
Procedure to monitor the following messages:
<P>
<PRE>   VBM_SETPROPERTY - so you can determine when the backcolor changes.
   WM_ERASEBKGND - so you can repaint the background.
   WM_PAINT - BeginPaint sends the WM_ERASEBKGND message.

</PRE>Process VBM_SETPROPERTY so that you can determine when the BackColor
property is set. When the property is set, invalidate the window. You can
do this by calling InvalidateRect. Be sure to specify TRUE as the third
argument so that the background will be repainted.
<P>
When a section of the window is invalidated, a WM_PAINT message is posted
to the window. In your handling of the WM_PAINT message, you will usually
call BeginPaint. BeginPaint will send a WM_ERASEBKGND message to your
application if the InvalidateRect call specified that the background
needed to be erased.
<P>
Handle the painting of the background in your WM_ERASEBKGND handler. Send a
WM_CTLCOLOR message to the parent window. The parent window will return a
handle to a brush of the correct color. Then you can use that brush to
paint your window.
<P>
NOTE: Do not delete the brush.
<P>
<P><h3>Sample Code - Example Implementation of BackColor Property</h3>
 
<P>
Below is a code snippet taken from a control procedure that implements the
BackColor property:
<P>
<PRE>   // Check to see whether BackColor has been set.
   case VBM_SETPROPERTY:
       if( wp == IPROP_BACKCOLOR )
           InvalidateRect(hwnd, NULL, TRUE);  // Force a repaint.

       break;

   // Paint the background.
   case WM_ERASEBKGND:
   {
       HBRUSH hbr, hbrOld=NULL;
       RECT rect;

       // Get window coordinates, and normalize.
       GetWindowRect(hwnd, &amp;rect);
       rect.right = rect.right - rect.left;  // Get width.
       rect.bottom = rect.bottom - rect.top; // Get height.
       rect.left = rect.top = 0;

       // Get a brush with the background color.
       hbr = (HBRUSH)SendMessage(GetParent(hwnd), WM_CTLCOLOR, (HDC)wp,
                                 MAKELONG(hwnd, 0));

       // If we got a brush, select it into our DC.
       if( hbr )
           hbrOld = SelectObject((HDC)wp, hbr);

       // Paint the background.
       FillRect((HDC)wp, &amp;rect, hbr);

       // If we selected an object, restore old object.
       if( hbrOld )
           SelectObject((HDC)wp, hbrOld);

       // Return a non-zero, indicating we processed a message.
       return 1;
   }

   // Paint the control (assumes we have a PaintRoutine).
   case WM_PAINT:
       if( wp ) PaintRoutine(hwnd, (HDC) wp);  // Paint to given HDC.
       else                                    // Paint to window's HDC.
       {
           PAINTSTRUCT ps;

           BeginPaint(hwnd, &amp;ps);
           PaintRoutine(hwnd, ps.hdc);
           EndPaint(hwnd, &amp;ps);
       }
       break;

</PRE><h3>Sample Code - Example PaintRoutine</h3>
 
<P>
Here is some code for an example PaintRoutine:
<P>
<PRE>   void PaintRoutine(HWND hwnd, HDC hdc)
   {
       RECT rect;
       char msg[] = "Painting the control";

       // TextOut will work with any DC.
       TextOut(hdc, 0, 0, msg, sizeof(msg) - 1);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbtool kbcode<BR>
KBSubcategory: TlsCDK<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use DDE to Display Microsoft Access Data in VB 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96845 ">
<META NAME="KBModify" CONTENT="1995/10/18">
<META NAME="KBCreate" CONTENT="1993/03/29">
<META NAME="Keywords" CONTENT="kbinterop kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates how to use DDE to obtain and display data from a Microsoft Access database. While Microsoft Access does not support poking data into a database, it does provide several LinkTopics, so you can get information out from a dat...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QA5V,QAFF,QAH4,QAML,QAE1,QAUJ,QDN9,QAZV,QAPN,QABM,QBS0,QDKY,QAB9,QARR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use DDE to Display Microsoft Access Data in VB 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 18, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96845 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows, version 2.0
- Microsoft Professional Toolkit for Microsoft Visual Basic programming
<PRE>  system for Windows, version 1.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to use DDE to obtain and display data from a
Microsoft Access database. While Microsoft Access does not support poking
data into a database, it does provide several LinkTopics, so you can get
information out from a database.
<P>
Using supported LinkTopics, you can receive:

<UL><LI>The contents of a Microsoft Access table
<LI>The result of a stored query in the Microsoft Access database
<LI>The result of a SQL expression that you pass to Microsoft Access
<LI>Specifics about a Microsoft Access database
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Below you'll find example code and a detailed list of the LinkTopics
and LinkItems supported by Microsoft Access. For the most updated list
of LinkTopics and LinkItems supported by Microsoft Access, query on the
following words in the Microsoft Knowledge Base:
<P>
<PRE>   access and DDE and item and topic and server

</PRE><h3>LinkTopics Supported</h3>
 
<P>
Here are the LinkTopics supported by Microsoft Access:
<P>
<PRE>System              : List of supported LinkTopics.
&lt;Database&gt;          : &lt;Database&gt; is the filename of an existing database.
&lt;TableName&gt;         : &lt;TableName&gt; is a table within the specified database.
&lt;QueryName&gt;         : &lt;QueryName&gt; is a query within the specified database.
</PRE>SQL &lt;SQL Statement&gt; : Result of a SQL Query where &lt;SQL Statement&gt; is a
<PRE>                      valid SQL expression.

</PRE><h3>LinkItems Supported for Each LinkTopic</h3>
 
<P>
Here are the LinkItems supported for each LinkTopic and the results they
return
<P>
System:
<P>
<PRE>   SysItems    - List of LinkItems supported by the System LinkTopic.
   Formats     - List of formats Microsoft Access can post to the
</PRE>clipboard.
<PRE>   Status      - Busy or Ready.
   Topics      - List of all open databases.
   &lt;Macro&gt;     - Name of a macro to be executed.

</PRE>Database:
<P>
<PRE>   TableList   - List of tables
   QueryList   - List of queries
   MacroList   - List of scripts
   ReportList  - List of reports
   FormList    - List of forms
   ModuleList  - List of modules
   &lt;Macro&gt;     - The name of a macro to be executed.

</PRE>Table Name, Query Name, and SQL &lt;expression&gt;:
<P>
<PRE>   All         - All the data in the table including the column names.
   Data        - All rows of data without the column names.
   FieldCount  - Count of columns in the table or query results.
   FieldNames  - List of Columns.
   NextRow     - The next row in the table or query. When the conversation
                 begins, NextRow returns the first row. If the current row
                 is the last record, a NextRow request fails.
   PrevRow     - The previous row in the table or query. If PrevRow is the
                 first request over a new channel, the last row of the
                 table or query is returned. If the current row is the
                 first record, a PrevRow request fails.
   FirstRow    - Data in the first row.
   LastRow     - Data in the last row.
   &lt;Macro&gt;     - The name of a macro to be executed.

</PRE>Although all three LinkTopics (table name, query name, and SQL expression)
return contents from the database and all three support the same LinkItems,
their syntax structures differ slightly. Each LinkTopic must specify the
database the object is in, a semicolon (;), the keyword (TABLE, QUERY, or
SQL), and the name of an existing table, query, or SQL expression. Here are
the syntax structures:
<P>
<PRE>   [db Name];TABLE &lt;Table name&gt;
   [db Name];QUERY &lt;Query name&gt;
   [db Name];SQL &lt;SQL expression&gt;;

</PRE>Here are examples:
<P>
<PRE>   Text1.LinkTopic = "C:\ACCESS\NWIND.MDB;TABLE Employees"
   Text1.LinkTopic = "C:\ACCESS\NWIND.MDB;QUERY Sales Totals"
   Text1.LinkTopic = "C:\ACCESS\NWIND.MDB;SQL Select * from Employees;"

</PRE>Note that all SQL statements must end with a semicolon (;).
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>From the File menu, choose Add File. In the Files box, select the
   GRID.VBX custom control file. The grid tool appears in the Toolbox.

<P><LI>Add two list boxes (List1 and List2) to Form1. The List1 box holds the
   list of Tables and the List2 box holds the Queries.

<P><LI>Add two command buttons (Command1 and Command2) to Form1, placing the
   Command1 button beneath the List1 box and the Command2 button beneath
   the List2 box. Change the following properties:
<P>
<PRE>   Default    Name           Caption
   -----------------------------------------
   Command1   GetTableList   Get &amp;Table List
   Command2   GetQueryList   Get &amp;Query List

</PRE><P><LI>Add a grid control (Grid1) to Form1 giving it the following properties:
<P>
<PRE>   Default   Name    FixedCols
   ---------------------------
   Grid1     Grid1   0

   The user chooses to display a table or the results of a query in Grid1.

</PRE><P><LI>Add two text boxes (Text1 and Text2) to Form1. The Text2 box acts as the
   destination for the data added to List1 and List2, so the user doesn't
   need to see this text box. But the Text1 box needs to be visible to the
   user because it acts as the destination for individual rows returned
   from a query or table.

<P><LI>Add two more command buttons to Form1, placing them beneath the Text1
   box. Give the two command buttons the following properties:
<P>
<PRE>   Default    Name      Caption
   ----------------------------------
   Command3   NextRow   &amp;Next Row
   Command4   PrevRow   &amp;Previous Row

</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
   Const None = 0
   Const Automatic = 1
   Const Manual = 2
   Const dbname = "C:\ACCESS\NWIND.MDB"  ' Change Paths as necessary
   Const accesspath = "C:\ACCESS\MSACCESS.EXE "

<P><LI>Add the following three Sub procedures to the General Declarations
   section of Form1:
<P>
<PRE>   Sub ClearGrid ()
      ' Select all grid cells.
      Grid1.SelStartCol = 0
      Grid1.SelStartRow = 0
      Grid1.SelEndCol = Grid1.Cols - 1
      Grid1.SelEndRow = Grid1.Rows - 1
      ' Clear the cells.
      Grid1.Clip = ""
      ' Clean up the grid.
      Grid1.Col = Grid1.FixedCols
      Grid1.Row = Grid1.FixedRows
      Grid1.SelEndCol = Grid1.SelStartCol
      Grid1.SelEndRow = Grid1.SelStartRow
   End Sub

   Sub PopulateGrid (IsTable%, QueryOrTable$)
      If IsTable% Then
         Text1.LinkTopic = "MSACCESS|" + dbname + ";TABLE " + QueryOrTable$
      Else
         Text1.LinkTopic = "MSACCESS|" + dbname + ";QUERY " + QueryOrTable$
      End If
      Text1.LinkItem = "FieldCount"
      text1.linkmode = Manual
         text1.linkrequest
      Grid1.Cols = Val(Text1.Text)

      Text1.LinkItem = "FieldNames"
      Grid1.FixedRows = 0      ' Cannot additem to a fixed row
      Grid1.AddItem Text1.Text, 0
      Grid1.FixedRows = 1

      On Error GoTo LastRowErr
      Text1.LinkItem = "LastRow"
      Grid1.AddItem Text1.Text, 1
      Text1.LinkItem = "PrevRow"
      Do
         Grid1.AddItem Text1.Text, 1
         Text1.LinkRequest
      Loop
      Exit Sub
   LastRowErr:
      Exit Sub  ' Error occurs when last row is reached
   End Sub

   Sub GetList (L As ListBox, ListType$)
      text2.LinkMode = Manual
      text1.linkrequest
      text2.LinkTopic = "MSAccess|" + dbname
      text2.LinkItem = ListType$
      text2.LinkMode = Automatic
      StartPos% = 1
      Do
         Pos% = InStr(StartPos%, text2.Text, Chr$(9))
         If Pos% = 0 Then Exit Do
         L.AddItem Mid$(text2.Text, StartPos%, Pos% - StartPos%)
         StartPos% = Pos% + 1
      Loop
   End Sub

</PRE><P><LI>Add the following code to the Form_Load event of Form1:
<P>
<P><PRE>    Sub Form_Load ()
       result% = Shell(accesspath + dbname, 1)
    End Sub
</PRE>
<P><LI>Add the following code to the GetQueryList_Click event procedure:
<P>
<P><PRE>    Sub GetQueryList_Click ()
       GetList List2, "QueryList"
    End Sub
</PRE>
<P><LI>Add the following code to the GetQueryList_Click event procedure:
<P>
<P><PRE>    Sub GetTableList_click ()
       GetList List1, "TableList"
    End Sub
</PRE>
<P><LI>Add the following code to the List1_Click event procedure:
<P>
<P><PRE>    Sub List1_Click ()
       Table$ = List1.Text
       ClearGrid
       PopulateGrid True, Table$
    End Sub
</PRE>
<P><LI>Add the following code to the List2_Click event procedure:
<P>
<P><PRE>    Sub List2_Click ()
       Query$ = List2.Text
       ClearGrid
       PopulateGrid False, Query$
    End Sub
</PRE>
<P><LI>Add the following code to the NextRow_Click event procedure:
<P>
<P><PRE>    Sub NextRow_click ()
       On Error GoTo NextRowErrHand:
       Text1.LinkItem = "NextRow"  ' Get the next row of results
<PRE></PRE>         text1.linkmode = manual
         text1.linkrequest
       Exit Sub
    NextRowErrHand:
       MsgBox "Last row reached"
       Exit Sub
    End Sub

</PRE><P><LI>Add the following code to the PrevRow_Click event procedure:
<P>
<P><PRE>    Sub PrevRow_Click ()
       On Error GoTo PrevRowErrHand
       Text1.LinkItem = "PrevRow"
<PRE></PRE>         text1.linkmode = manual
         text1.linkrequest
       Exit Sub
    PrevRowErrHand:
       MsgBox "First Row Reached"
       Exit Sub
    End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S) to run the program.
<P><PRE>    Microsoft Access is shelled with the NWIND.MDB sample database open
    and Form1 showing on the screen.
</PRE>
<P><LI>Choose the Get Table List button to see a list of all the tables in the
<P><PRE>    NWIND database displayed in the List1 box.
</PRE>
<P><LI>Choose the Get Query List button to see a list of the previously
<P><PRE>    defined queries that exist in the NWIND database displayed in the List2
    box.
</PRE>
<P><LI>Select one of the items in either the List1 or List2 box to see the
<P><PRE>    results displayed in Grid1.
</PRE>
<P><LI>Choose the Next Row button to see the second row displayed in the Text1
<P><PRE>    box. Continue to choose the Next Row button to display successive rows
    until you get to the last row. When you get to the last row, a message
    box appears to tell you that you reached the last row.
</PRE>
<P><LI>Choose the Prev Row button. The row previous to the one displayed in
<P><PRE>    the Text1 box is displayed.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00<BR>
KBCategory: kbinterop kbprg kbcode<BR>
KBSubcategory: IAPDDE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 18, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

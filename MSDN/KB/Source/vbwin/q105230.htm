

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Can't Set Formal Parameter When Setting Object Vars </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105230">
<META NAME="KBModify" CONTENT="1995/12/18">
<META NAME="KBCreate" CONTENT="1993/10/13">
<META NAME="Keywords" CONTENT="kbprg kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When trying to use the Set keyword to assign a value to a formal parameter passed to a Visual Basic Sub or Function procedure, you may get a  Can't Set formal parameter  error at compile or run time.  Specifically, trying to use a Set statement on ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QAPN,QAHE,QBS0,QAYL,QAW6,QAFF,QAB4,QAB9,QAAP,QAY5,QAKD,QAGI,QABA,QBE7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Can't Set Formal Parameter When Setting Object Vars</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 18, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105230</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows,
<PRE>  versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When trying to use the Set keyword to assign a value to a formal parameter
passed to a Visual Basic Sub or Function procedure, you may get a "Can't
Set formal parameter" error at compile or run time.
<P>
Specifically, trying to use a Set statement on an object variable that is a
formal parameter of a procedure results in this error.
<P>
<P><h2>CAUSE</h2>
 
<P>
This behavior is by design. You cannot use a procedure's formal parameter
as the destination of a Set statement.
<P>
Object variables can be parameters of a Sub or Function procedure, but if
an object variable is a parameter, its value cannot be changed inside the
called procedure.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You can use a Set statement on an array of objects that is passed as a
parameter. For example, you can modify the code shown in the "Steps to
Reproduce Behavior" section to the following to prevent the error:
<P>
<PRE>Sub Form_Load ()
   ReDim X(0) As Form
   Call MySub1(X())
End Sub

Sub MySub1 (FormalParameterX() As Form)
   Set FormalParameterX(0) = Form1
   FormalParameterX(0).Caption = "Success"    ' Form's caption will change.
End Sub

</PRE><h2>RESOLUTION</h2>
 
<P>
If you make the object variable Global instead of passing it as a
parameter, you can use Set statements inside procedures.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Objects as parameters can be thought of as a copy of the structure that
defines the object. If Set statements were allowed on these objects, this
would change the value inside the routine, but upon returning from the
routine the changes would be lost and the object variable would revert back
to its original value.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the Form_Load procedure:
<P>
<PRE>   Sub Form_Load ()
      Dim X As Form
      Call MySub1(X)
   End Sub

   Sub MySub1 (FormalParameterX As Form)
      Set FormalParameterX = Form1       ' Can't Set formal parameter error
      FormalParameterX.Caption = "Success"    ' This is never executed.
   End Sub

</PRE><P><LI>Attempt to run or compile the application to generate the "Can't
   Set formal parameter" error.
<P>
</OL><h3>More Steps to Reproduce Behavior</h3>
 
<P>
Here is another set of steps that result in the error:

<OL><P><LI>Start a new project in Visual Basic and add the following procedure to
   the application:
<P>
<PRE>   Sub s (tb As Table)
      Set tb = Nothing
   End Sub

</PRE><P><LI>Press the F5 key to run the application. The error "Can't Set Formal
   Parameter" should occur immediately.
<P>
</OL>NOTE: Trying to force these objects to be passed by value by setting the
ByVal keyword results in this error:
<P>
<PRE>   Expected: Integer or Long or Single or Double or Currency or
   String or Variant.

</PRE></OL>ByVal is allowed with the variable types listed in the error message,
but it is not allowed with any other variable type.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 18, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

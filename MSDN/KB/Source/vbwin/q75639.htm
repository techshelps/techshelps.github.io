

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Windows Initialization Files from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q75639 ">
<META NAME="KBModify" CONTENT="1997/04/03">
<META NAME="KBCreate" CONTENT="1991/08/26">
<META NAME="Keywords" CONTENT="APrgINI kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  There are several Microsoft Windows API functions that can manipulate information within a Windows initialization file. GetProfileInt(), GetPrivateProfileInt(), GetProfileString(), and GetPrivateProfileString() allow a Microsoft Visual Basic for Wi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QBS0,QAY5,QAUJ,QAB9,QBV8,QBBI,QAGQ,QBFY,QAGI,QAH4,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Accessing Windows Initialization Files from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q75639 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 2.00 3.00
WINDOWS
kbprg kbcode
<P>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are several Microsoft Windows API functions that can manipulate
information within a Windows initialization file. GetProfileInt(),
GetPrivateProfileInt(), GetProfileString(), and GetPrivateProfileString()
allow a Microsoft Visual Basic for Windows program to retrieve information
from a Windows initialization file based on an application name and key
name. WritePrivateProfileString() and WriteProfileString() are used to
create or update items within Windows initialization files.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows initialization files contain information that defines your Windows
environment. Examples of Windows initialization files are WIN.INI and
SYSTEM.INI, which are commonly found in the C:\WINDOWS directory. Microsoft
Windows and Windows-based applications can use the information stored in
these files to configure themselves to meet your needs and preferences. For
a description of initialization files, review the WIN.INI file that comes
with Microsoft Windows.
<P>
An initialization file is composed of at least an application name and a
key name. The contents of Windows initialization files have the following
format:
<P>
<PRE>   [Application name]
   keyname=value

</PRE>There are four API function calls [GetProfileInt(), GetPrivateProfileInt(),
GetProfileString(), and GetPrivateProfileString()] that you can use to
retrieve information from these files. The particular function to call
depends on whether you want to obtain string or numerical data.
<P>
The GetProfile family of API functions is used when you want to get
information from the standard WIN.INI file that is used by Windows. The
WIN.INI file should be part of your Windows directory (C:\WINDOWS). The
GetPrivateProfile() family of API functions is used to retrieve information
from any initialization file that you specify. The formal arguments
accepted by these API functions are described farther below.
<P>
The WriteProfileString() and WritePrivateProfileString() functions write
information to Windows initialization files. WriteProfileString() is used
to modify the Windows initialization file, WIN.INI.
WritePrivateProfileString() is used to modify any initialization file that
you specify. These functions search the initialization file for the key
name under the application name. If there is no match, the function adds to
the user profile a new string entry containing the key name and the key
value specified. If the key name is found, it will replace the key value
with the new value specified.
<P>
To declare these API functions within your program, include the following
Declare statements in the global module or the General Declarations section
of a Visual Basic for Windows form:
<P>
<PRE>   Declare Function GetProfileInt% Lib "Kernel"(ByVal lpAppName$,
           ByVal lpKeyName$, ByVal nDefault%)

   Declare Function GetProfileString% Lib "Kernel" (ByVal lpAppName$,
           ByVal lpKeyName$, ByVal lpDefault$, ByVal lpReturnedString$,
           ByVal nSize%)

   Declare Function WriteProfileString% Lib "Kernel"(ByVal lpAppName$,
           ByVal lpKeyName$, ByVal lpString$)

   Declare Function GetPrivateProfileInt% Lib "Kernel"
           (ByVal lpAppName$, ByVal lpKeyName$, ByVal nDefault%,
           ByVal lpFileName$)

   Declare Function GetPrivateProfileString% Lib "Kernel"
           (ByVal lpAppName$, ByVal lpKeyName$, ByVal lpDefault$,
           ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)

   Declare Function WritePrivateProfileString% Lib "Kernel"
           (ByVal lpAppName$, ByVal lpKeyName$, ByVal lpString$,
           ByVal lpFileName$)

</PRE>NOTE: Each Declare statement must be on a single line.
<P>
The formal arguments to these functions are described as follows:
<P>
<PRE>   Argument           Description
   ----------------------------------------------------------------------

   lpAppName$         Name of a Windows-based application that appears in
                      the initialization file.

   lpKeyName$         Key name that appears in the initialization file.

   nDefault$          Specifies the default value for the given key if the
                      key cannot be found in the initialization file.

   lpFileName$        Points to a string that names the initialization
                      file. If lpFileName does not contain a path to the
                      file, Windows searches for the file in the Windows
                      directory.

   lpDefault$         Specifies the default value for the given key if the
                      key cannot be found in the initialization file.

   lpReturnedString$  Specifies the buffer that receives the character
                      string.

   nSize%             Specifies the maximum number of characters (including
                      the last null character) to be copied to the buffer.

   lpString$          Specifies the string that contains the new key value.

</PRE>Below are the steps necessary to create a Visual Basic for Windows sample
program that uses GetPrivateProfileString() to read from an initialization
file that you create. The program, based on information in the
initialization file you created, shells out to the Calculator program
(CALC.EXE) that comes with Windows. The sample program demonstrates how to
use GetPrivateProfileString() to get information from any initialization
file.

<OL><P><LI>Create an initialization file using a text editor (for example, the
   Notepad program supplied with Windows) and save the file with the name
   "NET.INI". Type in the following lines as the contents of the
   initialization file (NET.INI):
<P>
<P><PRE>      [NetPaths]
      WordProcessor=C:\WINWORD\WINWORD.EXE
      Calculator=C:\WINDOWS\CALC.EXE
</PRE><P>
   NOTE: If CALC.EXE is not in the C:\WINDOWS directory (as indicated after
   "Calculator=" above), replace C:\WINDOWS\CALC.EXE with the correct path.

<P><LI>Save the initialization file (NET.INI) to the root directory of your
   hard disk (for example, C:\) and exit the text editor.

<P><LI>Start Visual Basic for Windows.

<P><LI>Create a form called Form1.

<P><LI>Create a push button called Command1.

<P><LI>Within the Global Declaration section of Form1, add the following
   Windows API function declarations. Note that the Declare statement below
   must appear on a single line.
<P>
<P><PRE>      Declare Function GetPrivateProfileString% Lib "kernel"
<PRE></PRE>        (ByVal lpAppName$, ByVal lpKeyName$,ByVal lpDefault$,
        ByVal lpReturnString$,ByVal nSize%, ByVal lpFileName$)

</PRE><P><LI>Within the (Command1) push button's click event, add the following
   code:
<P>
<PRE>      Sub Command1_Click ()
         '* If an error occurs during SHELL statement then handle the
         '* error.
         On Error GoTo FileError

         Dim lpAppName$, lpKeyName$, lpDefault$, lpReturnString$,
             lpFileName$
         Dim Size%, Valid%, Path$, Succ%

         '* Compare these to the NET.INI file that you created in step 1
         '* above.
         lpAppName$ = "NetPaths"
         lpKeyName$ = "Calculator"
         lpDefault$ = ""
         lpReturnString$ = Space$(128)
         Size% = Len(lpReturnString$)

         '* This is the path and name the NET.INI file.
         lpFileName$ = "c:\net.ini"

         '* This call will cause the path to CALC.EXE (that is,
         '* C:\WINDOWS\CALC.EXE) to be placed into lpReturnString$. The
         '* return value (assigned to Valid%) represents the number of
         '* characters read into lpReturnString$. Note that the
         '* following assignment must be placed on one line.
         Valid% = GetPrivateProfileString(lpAppName$, lpKeyName$,
                                          lpDefault$, lpReturnString$,
                                          Size%, lpFileName$)

         '* Discard the trailing spaces and null character.
         Path$ = Left$(lpReturnString$, Valid%)

         '* Try to run CALC.EXE. If unable to run, FileError is called.
         Succ% = Shell(Path$, 1)
         Exit Sub

      FileError:
         MsgBox "Can't find file", 16, "Error lpReturnString"
         Resume Next
      End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgINI<BR>
Keywords            : APrgINI kbcode kbprg<BR>
Version             : 1.00 2.00 3.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

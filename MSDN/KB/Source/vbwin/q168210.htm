

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Get Return Parameters from a Stored Procedure with DAO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168210">
<META NAME="KBModify" CONTENT="1997/05/08">
<META NAME="KBCreate" CONTENT="1997/05/07">
<META NAME="Keywords" CONTENT="vb4all vb4win vb5all vb5howto VBKBDAO VBKBDB VBKBJet VBKBObj kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Although RDO has the capability to execute stored procedures that return parameters, DAO does not. It is possible to run these stored procedures with a little bit of creative SQL.  NOTE: The SQL code used is SQL Server's Transact SQL. Other servers...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAHE,QAH4,QA2Q,QABM,QBWS,QAB9,QBXS,QA5A,QAG2,QBS0,QALW,QACJ,QAI5,QANF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Get Return Parameters from a Stored Procedure with DAO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168210</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although RDO has the capability to execute stored procedures that return
parameters, DAO does not. It is possible to run these stored procedures
with a little bit of creative SQL.
<P>
NOTE: The SQL code used is SQL Server's Transact SQL. Other servers may
require slightly different syntax but the concept is the same.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
RDO gives the programmer direct access to input and output parameters
through the rdoParameters collection of the PreparedStatement object. DAO
has no equivalent functionality, but SQL does. The following Visual Basic
code connects to a SQL Server, creates a stored procedure that has a
return parameter, one input parameter, one input/output parameter and one
output parameter, runs the stored procedure, and retrieves the output
parameter values:

<OL><P><LI>Start a new Project. Form1 is created by default.

<P><LI>Under the Tools - References menu, select the proper DAO reference.

<P><LI>Add a Command Button to the form.

<P><LI>In the Command1_Click() event, add the following code:
<P>
<P><PRE>    Private Sub Command1_Click()
</PRE><P>
<P><PRE>       Dim db As Database
       Dim rs As Recordset
       Dim strConnect As String
       Dim strSQL As String
       Dim strResult As String
</PRE><P>
<P><PRE>       'Set connect string.
       strConnect = "ODBC;DSN=DSN_SP_TEST;"
</PRE><P>
<P><PRE>       'Open the database
       Set db = DBEngine.Workspaces(0).OpenDatabase("", False, False, _
<PRE></PRE>                                                    strConnect)

       'Check to see if sp exists and delete it if it does.
       strSQL = "if exists "
       strSQL = strSQL &amp; "(SELECT * from sysobjects "
       strSQL = strSQL &amp; "WHERE id = object_id('dbo.sp_ReturnParams') "
       strSQL = strSQL &amp; "AND sysstat &amp; 0xf = 4) "
       strSQL = strSQL &amp; "DROP PROCEDURE dbo.sp_ReturnParams"
       MsgBox strSQL
       db.Execute strSQL, dbSQLPassThrough

       'Create the stored procedure. It really does not do much.
       'It simply sets the variables and returns
       strSQL = "/****** Object:  Stored Procedure dbo.sp_ReturnParams */"
       strSQL = strSQL &amp; vbCrLf &amp; "CREATE PROCEDURE dbo.sp_ReturnParams"
       strSQL = strSQL &amp; vbCrLf &amp; "/* Declare Parameters */"
       strSQL = strSQL &amp; vbCrLf &amp; "  @intInput       int = Null,  "
       strSQL = strSQL &amp; vbCrLf &amp; "  @strInputOutput varchar(20) = " _
                                                           &amp; "Null OUTPUT,"
       strSQL = strSQL &amp; vbCrLf &amp; "  @strOutput      varchar(20) = " _
                                                           &amp; "Null OUTPUT"
       strSQL = strSQL &amp; vbCrLf &amp; "AS"
       strSQL = strSQL &amp; vbCrLf &amp; "BEGIN"
       strSQL = strSQL &amp; vbCrLf &amp; "  SET NOCOUNT ON /* stops messages */"
       strSQL = strSQL &amp; vbCrLf &amp; "  DECLARE @intReturn int " _
                                                   &amp; "/* Declare return */"
       strSQL = strSQL &amp; vbCrLf &amp; "  SELECT @intReturn = 43 " _
                                                   &amp; "/* Set the return */"
       strSQL = strSQL &amp; vbCrLf &amp; "  SELECT @strInputOutput = " _
                                                   &amp; "'Param InOut Test'"
       strSQL = strSQL &amp; vbCrLf &amp; "  SELECT @strOutput = 'Param Out Test'"
       strSQL = strSQL &amp; vbCrLf &amp; "  RETURN @intReturn"
       strSQL = strSQL &amp; vbCrLf &amp; "END"
       MsgBox strSQL
       db.Execute strSQL, dbSQLPassThrough

       'Get ready to call procedure.
       'Declare the variables in SQL and then set them
       'in SQL code. Then retrieve the values as a recordset.
       strSQL = "SET NOCOUNT ON /* stops unwanted messages */"
       strSQL = strSQL &amp; vbCrLf &amp; "/* Declare the variables */"
       strSQL = strSQL &amp; vbCrLf &amp; "DECLARE @intIn       int"
       strSQL = strSQL &amp; vbCrLf &amp; "DECLARE @strInOut     varchar(20)"
       strSQL = strSQL &amp; vbCrLf &amp; "DECLARE @strOut      varchar(20)"
       strSQL = strSQL &amp; vbCrLf &amp; "DECLARE @intRet      int"
       strSQL = strSQL &amp; vbCrLf &amp; "/* Populate In Parameters */"
       strSQL = strSQL &amp; vbCrLf &amp; "SELECT @intIn = 5"
       strSQL = strSQL &amp; vbCrLf &amp; "SELECT @strInOut = 'In/Out In'"
       strSQL = strSQL &amp; vbCrLf &amp; "/* Execute the procedure */"
       strSQL = strSQL &amp; vbCrLf &amp; "EXECUTE @intRet = sp_ReturnParams "
       strSQL = strSQL &amp; "@intIn, @strInOut OUTPUT, @strOut OUTPUT"
       strSQL = strSQL &amp; vbCrLf &amp; "/* Select back the records */"
       strSQL = strSQL &amp; vbCrLf &amp; "SELECT @intRet AS param1, @intIn "
       strSQL = strSQL &amp; "AS param2, @strInOut AS param3, @strOut AS _
                                                        param4"
       Set rs = db.OpenRecordset(strSQL, dbOpenSnapshot, dbSQLPassThrough)

       'Display the data in the parameters in a messagebox
       strResult = "intReturn = " &amp; rs.Fields("param1")
       strResult = strResult &amp; vbCrLf &amp; "intInPut = " &amp; rs.Fields("param2")
       strResult = strResult &amp; vbCrLf &amp; "strInPutOutput = " &amp; _
                                                        rs.Fields("param3")
       strResult = strResult &amp; vbCrLf &amp; "strOutput = " &amp; _
                                                        rs.Fields("param4")
       MsgBox strResult
    End Sub

</PRE><P><LI>In the ODBC Administrator applet, create a DSN named DSN_SP_TEST that
   connects to an SQL Server that you have the necessary rights to.

<P><LI>Run the project. The code should connect to the server, create a stored
   procedure named dbo.sp_ReturnParams, execute it passing in some values,
   and display a message box with the return parameters.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
Jon Fowler, Microsoft Corporation.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : vb4all vb4win vb5all vb5howto VBKBDAO VBKBDB VBKBJet VBKBObj kbhowto<BR>
Version             : 4.0 5.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

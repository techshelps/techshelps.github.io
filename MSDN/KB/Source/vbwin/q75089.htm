

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDE from Visual Basic for Windows to Excel for Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q75089 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1991/08/12">
<META NAME="Keywords" CONTENT="kbinterop kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to initiate a dynamic data exchange (DDE) conversation between a Visual Basic destination application and a Microsoft Excel source application.  This article demonstrates how to:   - Prepare a Microsoft Excel for Windows ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAGI,QAZ2,QAK6,QAMA,QA5F,QAY2,QAD2,QDO5,QAYV,QBJZ,QAH4,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DDE from Visual Basic for Windows to Excel for Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q75089 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
- Microsoft Excel for Windows, version 5.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to initiate a dynamic data exchange (DDE)
conversation between a Visual Basic destination application and a
Microsoft Excel source application.
<P>
This article demonstrates how to:

<UL><LI>Prepare a Microsoft Excel for Windows document for active DDE.
<LI>Initiate a manual DDE link (information updated upon request from the
   destination) between Visual Basic (the destination) and Excel (the
   source).
<LI>Use the LinkRequest method to update information in Visual Basic (the
   destination) based on information contained in Excel (the source).
<LI>Initiate a automatic DDE link (information updated automatically from
   source to destination) between Visual Basic (the destination) and Excel
   (the source).
<LI>Use the LinkPoke method to send information from Visual Basic (the
   destination) to Excel (the source).
<LI>Change the LinkMode property between automatic and manual.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
A destination application sends commands through DDE to the source
application to establish a link. Through DDE, the source provides data to
the destination at the request of the destination or accepts information
at the request of the destination.
<P>
The procedure below is as an example showing how to establish a DDE
conversation between Visual Basic and Excel for Windows.
<P>
<P><h3>STEP ONE: Create the Source Spreadsheet in Excel</h3>
 

<OL><P><LI>Start Excel. A document (spreadsheet) with Sheet1 as the title is
   created by default.

<P><LI>From the File menu, choose Save As, and save the document (spreadsheet)
   naming it SOURCE.XLS

<P><LI>Exit Excel. For this example to function properly, Excel must not
   be loaded and running.
<P>
</OL><h3>STEP TWO: Create the Destination Application in Visual Basic</h3>
 
<P>
The destination is the application that performs the link operations. It
prompts the source to send information or informs the source that
information is being sent to it.

<OL><P><LI>Start Visual Basic (VB.EXE). Form1 is created by default.

<P><LI>Add the following controls to Form1, and give them the properties
   indicated:
<P>
<PRE>   Default Name   Caption            Name
   -------------------------------------------------
   Text1          (not applicable)   Text1
   Option1        Manual Link        ManualLink
   Option2        Automatic Link     AutomaticLink
   Command1       Poke               Poke
   Command2       Request            Request

</PRE><P><LI>Add the following code to the general Declaration section of Form1:
<P>
   Const AUTOMATIC = 1
   Const MANUAL = 2
   Const NONE = 0

<P><LI>Add the following code to the Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()
      'This procedure starts Excel and loads SOURCE.XLS, the
      'spreadsheet created above.
      Dim ErrorTries As Integer
      ErrorTries = 0
      On Error GoTo errorhandler

      z% = Shell("c:\EXCEL\excel SOURCE.XLS", 1)

      DoEvents         'Process Windows events to ensure that
                       'Excel executes before making any attempt
                       'to perform DDE.

      Text1.LinkMode = NONE    'Clear DDE link if it already exists.

      'Set up link with Excel:
      'Unremark the next line for use with Excel 4.
      'Text1.LinkTopic = "Excel|source.xls"

      'Remark out the next line when using Excel 4
      Text1.LinkTopic = "Excel|C:\VB3\[SOURCE.XLS]Sheet1"

      Text1.LinkItem = "R1C1"  'Set link to first cell on spreadsheet.
      Text1.LinkMode = MANUAL  'Establish a manual DDE link.
      ManualLink.Value = True
      Exit Sub

   errorhandler:
      If Err = 282 And ErrorTries &lt; 15 Then
         ErrorTries = ErrorTries + 1
         DoEvents
         Resume
      Else
         Error Err
      End If

   End Sub

</PRE><P><LI>Add the following code to the Click event procedure of the Manual Link
   button:
<P>
<PRE>   Sub ManualLink_Click ()
      Request.Visible = TRUE    'Make request button valid.
      Text1.LinkMode = NONE     'Clear DDE Link.
      Text1.LinkMode = MANUAL   'Reestablish new LinkMode.
   End Sub

</PRE><P><LI>Add the following code to the Click event procedure of the
   Automatic Link button:
<P>
<PRE>   Sub AutomaticLink_Click ()
      Request.Visible = FALSE     'No need for button with automatic link.
      Text1.LinkMode = NONE       'Clear DDE Link.
      Text1.LinkMode = AUTOMATIC  'Reestablish new LinkMode.
   End Sub

</PRE><P><LI>Add the following code to the Click event procedure of the
   Request button:
<P>
<PRE>   Sub Request_Click ()
      'With a manual DDE link this button will be visible and when
      'selected it will request an update of information from the source
      'application to the destination application.
       Text1.LinkRequest
   End Sub

</PRE><P><LI>Add the following code to the Click event procedure of the Poke
   button:
<P>
<PRE>   Sub Poke_Click ()
      'With any DDE link this button will be visible and when selected
      'it will poke information from the destination application to the
      'source application.
      Text1.LinkPoke
   End Sub

</PRE></OL><h3>STEP THREE: Run the Visual Basic Destination Application</h3>
 
<P>
You have two choices:

<UL><LI>Run the Visual Basic destination application from the Visual Basic
   environment by skipping to step 4 below.
<LI>Save the application. Then create an .EXE file, and run it from Windows
   by beginning with step 1 below.

</UL><OL><P><LI>From the Visual Basic File menu, choose Save, and save the Form and
   Project naming both DEST.

<P><LI>From the File menu, choose Make EXE File. Name it DEST.EXE.

<P><LI>Exit from Visual Basic.

<P><LI>Run the application from Windows if an .EXE file or from the Visual
   Basic environment.

<P><LI>Form1 of the destination application will be loaded and Excel will
   automatically start with the document SOURCE.XLS loaded.

<P><LI>Make sure the main title bar in Excel reads "Microsoft Excel," not
   "Microsoft Excel - SOURCE.XLS." If the title bar is incorrect, make
   sure the SOURCE.XLS window is not maximized. To do this choose Arrange
   from the Window menu.
<P>
</OL><h3>STEP FOUR: Experiment with DDE between Visual Basic and Excel</h3>
 

<OL><P><LI>Try typing some text in R1C1 in the spreadsheet. Then click the Request
   button. The text appears in the text box.
<P>
   Be sure to press the ENTER key after entering text into an Excel cell
   before clicking the Request button in the Visual Basic program. If you
   don't, a "Timeout while waiting for DDE response" error message will
   display because of the TEXT1.LINKREQUEST statement. This occurs because
   while entering text into a cell, Excel is in a polling loop for data
   entry. No real data is transferred to the cell until you press ENTER.
   Therefore, Visual Basic continues to request the data from the cell, but
   Excel does not pay attention to the request until it exits the polling
   loop, which results in the DDE time-out message.

<P><LI>Choose the Automatic Link button and then type some more text in
   R1C1 of the spreadsheet. The text is automatically updated in the
   Visual Basic text box.

<P><LI>Type some text in the text box in the Visual Basic application and
   choose the Poke button. The text is sent to R1C1 in the Excel
   spreadsheet.
<P>
</OL>Note: If you have the Ignore Remote Requests option selected in the
Excel Workspace dialog box, you will not be able to establish DDE from
Visual Basic. Make sure the Ignore Remote Requests option isn't selected.
<P>
For Visual Basic version 1.0 add the following constants to the general
declarations of the form:
<P>
<PRE>   CONST TRUE = -1
   CONST FALSE = NOT TRUE

</PRE></OL>For more information on DDE between Visual Basic and other Windows-based
applications, query on the following words in the Microsoft Knowledge Base:
<P>
<PRE>   DDE and Visual Basic
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 4.00<BR>
KBCategory: kbinterop kbprg kbcode<BR>
KBSubcategory: IAPDDE<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

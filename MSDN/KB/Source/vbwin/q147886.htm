

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How VB Can Get Windows Status Information via API Calls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147886">
<META NAME="KBModify" CONTENT="1996/10/08">
<META NAME="KBCreate" CONTENT="1996/03/01">
<META NAME="Keywords" CONTENT="kbui kbprg kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Visual Basic for Windows sample program below demonstrates how you can obtain system status information similar to the information displayed in the Windows Program Manager About box. The sample program displays the following information using t...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBW6,QBWQ,QBS0,QDIR,QAGX,QAY5,QAH4,QDNG,QAB9,QAP2,QBWP,QA7H V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How VB Can Get Windows Status Information via API Calls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 8, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147886</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard, Professional, and Enterprise Editions of Microsoft
<PRE>  Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual Basic for Windows sample program below demonstrates how you can
obtain system status information similar to the information displayed in
the Windows Program Manager About box. The sample program displays the
following information using the Windows API functions indicated:

<UL><LI>The Windows version number with the GetVersion function.

<LI>The CPU processor type.

<LI>Whether Windows is running in enhanced mode or standard mode on a 16-bit
   operating system. This does not apply to Microsoft Windows 95 or
   Microsoft Windows NT.

<LI>The amount of free memory.

<LI>The percentage of free system resources with SystemHeapInfo on a 16-bit
   operating system. This does not apply to Microsoft Windows 95 or
   Microsoft Windows NT.
<P>
</UL>NOTE: The SystemHeapInfo API function is new to Microsoft Windows version
<PRE>      3.1 and is not available in Microsoft Windows, version 3.0. All other
      API functions listed above are available in both Windows versions 3.0
      or 3.1.

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Create Example Program</h3>
 

<OL><P><LI>Run Visual Basic for Windows, or if Visual Basic for Windows is already
   running, click New Project on the File menu (press ALT, F, N). Form1 is
   created by default.

<P><LI>On the File menu, click Add Module (press ALT, F, M). Module1 is
   created by default.

<P><LI>Enter the following code into the General Declarations section of a
   code module:
<P>
   #If Win32 Then
<P><PRE>       Type SYSTEM_INFO
<PRE></PRE>               dwOemID As Long
               dwPageSize As Long
               lpMinimumApplicationAddress As Long
               lpMaximumApplicationAddress As Long
               dwActiveProcessorMask As Long
               dwNumberOrfProcessors As Long
               dwProcessorType As Long
               dwAllocationGranularity As Long
               dwReserved As Long
       End Type
       Type OSVERSIONINFO
               dwOSVersionInfoSize As Long
               dwMajorVersion As Long
               dwMinorVersion As Long
               dwBuildNumber As Long
               dwPlatformId As Long
               szCSDVersion As String * 128
       End Type
       Type MEMORYSTATUS
               dwLength As Long
               dwMemoryLoad As Long
               dwTotalPhys As Long
               dwAvailPhys As Long
               dwTotalPageFile As Long
               dwAvailPageFile As Long
               dwTotalVirtual As Long
               dwAvailVirtual As Long
       End Type

       Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" _
          (LpVersionInformation As OSVERSIONINFO) As Long
       Declare Sub GlobalMemoryStatus Lib "kernel32" (lpBuffer As _
          MEMORYSTATUS)
       Declare Sub GetSystemInfo Lib "kernel32" (lpSystemInfo As _
          SYSTEM_INFO)

       Public Const PROCESSOR_INTEL_386 = 386
       Public Const PROCESSOR_INTEL_486 = 486
       Public Const PROCESSOR_INTEL_PENTIUM = 586
       Public Const PROCESSOR_MIPS_R4000 = 4000
       Public Const PROCESSOR_ALPHA_21064 = 21064
   #Else
      ' Constants for GetWinFlags.
      Global Const WF_CPU286 = &amp;H2
      Global Const WF_CPU386 = &amp;H4
      Global Const WF_CPU486 = &amp;H8
      Global Const WF_80x87 = &amp;H400
      Global Const WF_STANDARD = &amp;H10
      Global Const WF_ENHANCED = &amp;H20
      Global Const WF_WINNT = &amp;H4000

      ' Type for SystemHeapInfo.
      Type SYSHEAPINFO
         dwSize As Long
         wUserFreePercent As Integer
         wGDIFreePercent As Integer
         hUserSegment As Integer
         hGDISegment As Integer
      End Type

      Declare Function GetVersion Lib "kernel" () As Long
      Declare Function GetWinFlags Lib "kernel" () As Long
      'Enter each of the following Declare statements as one, single line:
      Declare Function GetFreeSpace Lib "kernel" (ByVal wFlags As Integer)_
         As Long
      Declare Function GlobalCompact Lib "kernel" _
         (ByVal dwMinFree As Long) As Long
      Declare Function SystemHeapInfo Lib "toolhelp.dll" _
         (shi As SYSHEAPINFO) As Integer
   #End If

</PRE><P><LI>Enter the following code into the Form_Load procedure of Form1:
<P>
<PRE>   Private Sub Form_Load()
      Dim msg As String         ' Status information.
      Dim nl As String          ' New-line.
      nl = Chr$(13) + Chr$(10)  ' New-line.

      Show
      MousePointer = 11   ' Hourglass.

      #If Win32 Then
          ' Get operating system and version.
          Dim verinfo As OSVERSIONINFO
          verinfo.dwOSVersionInfoSize = Len(verinfo)
          ret% = GetVersionEx(verinfo)
          If ret% = 0 Then
              MsgBox "Error Getting Version Information"
              End
          End If
          Select Case verinfo.dwPlatformId
              Case 0
                  msg = msg + "Windows 32s "
              Case 1
                  msg = msg + "Windows 95 "
              Case 2
                  msg = msg + "Windows NT "
          End Select

          ver_major$ = verinfo.dwMajorVersion
          ver_minor$ = verinfo.dwMinorVersion
          build$ = verinfo.dwBuildNumber
          msg = msg + ver_major$ + "." + ver_minor$
          msg = msg + " (Build " + build$ + ")" + nl + nl

          ' Get CPU type and operating mode.
          Dim sysinfo As SYSTEM_INFO
          GetSystemInfo sysinfo
          msg = msg + "CPU: "
          Select Case sysinfo.dwProcessorType
              Case PROCESSOR_INTEL_386
                  msg = msg + "Intel 386" + nl
              Case PROCESSOR_INTEL_486
                  msg = msg + "Intel 486" + nl
              Case PROCESSOR_INTEL_PENTIUM
                  msg = msg + "Intel Pentium" + nl
              Case PROCESSOR_MIPS_R4000
                  msg = msg + "MIPS R4000" + nl
              Case PROCESSOR_ALPHA_21064
                  msg = msg + "DEC Alpha 21064" + nl
              Case Else
                  msg = msg + "(unknown)" + nl

          End Select
          msg = msg + nl
          ' Get free memory.
          Dim memsts As MEMORYSTATUS
          Dim memory&amp;
          GlobalMemoryStatus memsts
          memory&amp; = memsts.dwTotalPhys
          msg = msg + "Total Physical Memory: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl
          memory&amp; = memsts.dwAvailPhys
          msg = msg + "Available Physical Memory: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl
          memory&amp; = memsts.dwTotalVirtual
          msg = msg + "Total Virtual Memory: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl
          memory&amp; = memsts.dwAvailVirtual
          msg = msg + "Available Virtual Memory: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl _
               + nl

          ' Get free system resources.
          ' Not applicable to 32-bit operating system (Windows NT).
      #Else
          ' Get operating system and version.
          ver&amp; = GetVersion()
          status&amp; = GetWinFlags()

          If status&amp; And WF_WINNT Then
              msg = msg + "Microsoft Windows NT "
          Else
              msg = msg + "Microsoft Windows "
          End If
          ver_major$ = Format$(ver&amp; And &amp;HFF)
          ver_minor$ = Format$(ver&amp; \ &amp;H100, "00")
          msg = msg + ver_major$ + "." + ver_minor$ + nl

          ' Get CPU type and operating mode.
          msg = msg + "CPU: "
          If status&amp; And WF_CPU286 Then msg = msg + "80286"
          If status&amp; And WF_CPU386 Then msg = msg + "80386"
          If status&amp; And WF_CPU486 Then msg = msg + "80486"
          If status&amp; And WF_80x87 Then msg = msg + " with 80x87"
          msg = msg + nl
          msg = msg + "Mode: "
          If status&amp; And WF_STANDARD Then msg = msg + "Standard" + nl
          If status&amp; And WF_ENHANCED Then msg = msg + "Enhanced" + nl

          ' Get free memory.
          memory&amp; = GetFreeSpace(0)
          msg = msg + "Memory free: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl
          memory&amp; = GlobalCompact(&amp;HFFFFFFFF)
          msg = msg + "Largest free block: "
          msg = msg + Format$(memory&amp; \ 1024, "###,###,###") + "K" + nl

          ' Get free system resources.
          ' The SystemHeapInfo API function became available in Windows
          '  version 3.1.
          msg = msg + "System resources: "
          If ver&amp; &gt;= &amp;H310 Then
              Dim shi As SYSHEAPINFO
              shi.dwSize = Len(shi)
              If SystemHeapInfo(shi) Then
                  If shi.wUserFreePercent &lt; shi.wGDIFreePercent Then
                      msg = msg + Format$(shi.wUserFreePercent) + "%"
                  Else
                      msg = msg + Format$(shi.wGDIFreePercent) + "%"
                  End If
              End If
          Else
              msg = msg + "n/a"
          End If
      #End If
      MsgBox msg, 0, "About " + Caption
      MousePointer = 0
   End Sub

</PRE><P><LI>Press the F5 key to run the program.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 VB4WIN vb4all API RESOURCE<BR>
KBCategory: kbui kbprg kbcode kbhowto<BR>
KBSubcategory: APrgWindow
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 8, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

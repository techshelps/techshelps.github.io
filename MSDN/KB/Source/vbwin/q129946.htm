

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Object Instances Are Not Freed from Memory </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129946">
<META NAME="KBModify" CONTENT="1996/02/22">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="kbprg kbole kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  If you use class modules to build a linked list, Visual Basic will free the memory it can when the variable containing the head of the list goes out of scope. However if you build a circular list (a list in which an object references itself) and at...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBE6,QBE7,QBXS,QAH4,QBS0,QBW6,QAG1,QAPN,QA0K,QAFF,QANF,QAY2,QBJZ,QBVV,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Object Instances Are Not Freed from Memory</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 22, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129946</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If you use class modules to build a linked list, Visual Basic will free the
memory it can when the variable containing the head of the list goes out of
scope. However if you build a circular list (a list in which an object
references itself) and attempt to destroy all references to the circular
reference, Visual Basic will retain the instances of the objects in memory
while the program is running because the references to the objects actually
still exist. As a result, memory is lost until the OLE Server's Terminate
event is  called, which is when the last instance of the class is freed.
<P>
<P><h2>CAUSE</h2>
 
<P>
Under any of the following conditions, the Visual Basic internal terminate
event is not called, so the object instances are not freed from memory:

<UL><LI>Building a circular linked list.
<LI>Executing an End statement.
<LI>Choosing Restart from the Run menu.
<LI>Clicking the End button on an Error dialog.
<P>
</UL><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add three command buttons (Command1, Command2, and Command3) to Form1.

<P><LI>Add the following code to the general declarations of Form1:
<P>
<PRE>   Sub addx(y As Class1)
      Dim x As New Class1
      Set y.v = x
   End Sub

   Sub CircularRef()
      Dim x As New Class1
      Set x.v = x
      Set x.v1 = x
      Set x.v2 = x
      Set x.v3 = x
      Set x.v4 = x
      Set x.v5 = x
      Set x.v6 = x
      Set x.v7 = x
      Set x.v8 = x
      Set x.v9 = x
      Set x.v10 = x
      Set x.v11 = x
      Set x.v12 = x
      Set x.v13 = x
      Set x.v14 = x
      Set x.v15 = x
      Set x.v16 = x
      Set x.v17 = x
      Set x.v18 = x
      Set x.v19 = x
      Set x.v20 = x
      Set x = Nothing
   End Sub

</PRE><P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Private Sub Command1_Click()
   #If Win32 Then
      Dim ut As MEMORYSTATUS
      ut.dwLength = 32
      GlobalMemoryStatus ut
      Print ut.dwAvailPhys
   #Else
      Dim fspace As Long
      fspace = GetFreeSpace(0)
      Print fspace
   #End If
   End Sub

</PRE><P><LI>Add the following code to the Command2_Click event procedure:
<P>
<PRE>   Private Sub Command2_Click()
      Dim y As New Class1
      Dim x As Class1
      Dim i As Integer

      For i = 1 To 1000
         addx y
         Set y = y.v
      Next
   End Sub

</PRE><P><LI>Add the following code to the Command3_Click event procedure:
<P>
<PRE>   Private Sub Command3_Click()
      Dim i As Integer
      For i = 1 To 1000
         CircularRef
      Next
   End Sub

</PRE><P><LI>From the Insert menu, choose Module to add Module1 to the project.

<P><LI>Add the following code to the general declarations section of Module1:
<P>
   #If Win32 Then
<P><PRE>      Public Type MEMORYSTATUS
<PRE></PRE>         dwLength As Long
         dwMemoryLoad As Long   ' percent of memory in use
         dwTotalPhys As Long    ' bytes of physical memory
         dwAvailPhys  As Long   ' free physical memory bytes
         dwTotalPageFile As Long ' bytes of paging file
         dwAvailPageFile As Long ' free bytes of paging file
         dwTotalVirtual As Long ' user bytes of address space
         dwAvailVirtual As Long ' free user bytes
      End Type

      Declare Sub GlobalMemoryStatus Lib "kernel32" (lpBuffer As _
         MEMORYSTATUS)
   #Else
      Declare Function GetFreeSpace Lib "Kernel" (ByVal wFlags As Integer)_
         As Long
   #End If

</PRE><P><LI>From the Insert menu, choose Class Module to add Class1 to the project.

<P><LI>Add the following code to the general declarations section of Class1:
<P>
   Public v As Variant
   Public v1 As Variant
   Public v2 As Variant
   Public v3 As Variant
   Public v4 As Variant
   Public v5 As Variant
   Public v6 As Variant
   Public v7 As Variant
   Public v8 As Variant
   Public v9 As Variant
   Public v10 As Variant
   Public v11 As Variant
   Public v12 As Variant
   Public v13 As Variant
   Public v14 As Variant
   Public v15 As Variant
   Public v16 As Variant
   Public v17 As Variant
   Public v18 As Variant
   Public v19 As Variant
   Public v20 As Variant

<P><LI>Run the program. Press the Command1 button to print the initial free
<P><PRE>    memory. Press the Command2 button to create a linked list. Press
    the Command1 button again, and notice that the free memory is the same.
    Then press Command3 to create a circular list. Press the Command1
    button again, and notice that the available free memory has dropped.
</PRE><P>
</OL>NOTE:  When running the sample code on Windows NT, memory may fluctuate
such that the return values from GetFreeSpace() will vary even in the case
where the article reports that the values should not vary. To obtain
accurate results, you should press Command1 several times until the
memory reading has steadied and given five to six identical readings. On 16-
bit operating systems such as Windows for WorkGroups, memory
fluctuation is not a concern and the sample will perform as described.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbole kbprb<BR>
KBSubcategory: PrgOptMemMgt
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 22, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

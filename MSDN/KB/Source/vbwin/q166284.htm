

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use ODBC API SQLTables Function with Visual Basic and RDO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166284">
<META NAME="KBModify" CONTENT="1997/06/24">
<META NAME="KBCreate" CONTENT="1997/04/02">
<META NAME="Keywords" CONTENT="kb3rdparty vb5all vb5howto VBKBDB VBKBNet VBKBObj VBKBRDO kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Using the rdoTables collection is generally the best way to retrieve the tables from an rdoConnection because the collection is built-in and requires very little code.  If you want to take advantage of anything that the rdoTables collection does no...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAY5,QATX,QA9E,QAH4,QA4Q,QANF,QBV8,QAB9,QBVR,QAI4,QDIT,QA7H,QANG,QACJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use ODBC API SQLTables Function with Visual Basic and RDO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166284</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using the rdoTables collection is generally the best way to retrieve the
tables from an rdoConnection because the collection is built-in and
requires very little code.
<P>
If you want to take advantage of anything that the rdoTables collection
does not provide, you can use the ODBC API SQLTables function. For example,
SQLTables is a little faster at returning the table names; this can be
especially apparent with an Oracle database. Also, the SQLTables function
can return the table owner with each table. This article demonstrates each
method in code so you can chose which is best for your situation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example uses the rdoTables collection and the SQLTables ODBC
API function to fill two list boxes with the table names and print the
performance numbers.
<P>
For this example, SQL Server and the Pubs database are used, but you can
change the DSN, UID, and PWD to match any ODBC database.

<OL><P><LI>Start a new project in Visual Basic and choose "Standard EXE." Form1 is
   created by default.

<P><LI>Add one CommandButton, Command1, and two list boxes, List1 and List2,
   to Form1.

<P><LI>Paste the following code into the General Declarations section of Form1:
<P>
<P><PRE>      Dim cn As New rdoConnection
</PRE><P>
<PRE>         Private Sub Form_Load()
           'establish rdoConnection to use hDbc for SQLTables

           'SQL Server example
           'cn.Connect = _
           '  "Driver={SQL Server}; Server=MyServer; " &amp; _
           '  "Database=Pubs; " &amp; _
           '  "Uid=sa; Pwd="

           'Oracle example
           cn.Connect = _
             "Driver={Microsoft ODBC Driver for Oracle}; " &amp; _
             "connectstring=dsenterprise.world; " &amp; _
             "Uid=demo; Pwd=demo"
           cn.EstablishConnection
         End Sub

         Private Sub Command1_Click()
           Dim sngT As Single, intN As Integer

           'Get tables using ODBC API
           List1.Clear
           intN = 0
           sngT = Timer
           aTables = GetODBCTables(hDbc:=cn.hDbc, Owner:=True, _
             TableType:="'TABLE', 'VIEW'")
           Dim i As Integer
           For i = 0 To UBound(aTables) - 1
             List1.AddItem aTables(i)
             intN = intN + 1
           Next i
           Debug.Print intN, "odbc tables: ", Timer - sngT

           DoEvents

           'Get tables using rdoTables collection
           List2.Clear
           intN = 0
           sngT = Timer
           intN = cn.rdoTables.Count
           For i = 0 To intN - 1
             List2.AddItem cn.rdoTables(i).Name
           Next i
           Debug.Print intN, "rdo tables: ", Timer - sngT
         End Sub

         Public Function GetODBCTables(ByVal hDbc As Long, _
           Optional Owner = True, _
           Optional TableType = "'TABLE', 'VIEW', 'SYSTEM TABLE'") _
           As Variant

           On Error GoTo ehGetDSNTables
           Dim intHstmt As Long, intRc As Integer
           Dim strErrMsg As String * SQL_MAX_MESSAGE_LENGTH
           Dim strSqlState As String * 5
           Dim arrTables() As Variant, intCounter As Integer
           Dim strTable As String
           Dim strName As String * 255, strOwner As String * 255
           Dim lngLenRead As Long


           intRc = SQLAllocStmt(ByVal hDbc, intHstmt)
           intRc = SQLTables(ByVal intHstmt, ByVal 0&amp;, SQL_NTS, _
             ByVal 0&amp;, SQL_NTS, ByVal 0&amp;, SQL_NTS, _
             ByVal CStr(TableType), Len(TableType))
           If intRc &lt;&gt; SQL_SUCCESS Then
             GoTo ehGetDSNTables
           End If

           strOwner = String(255, 0)       'Init string to hold data.
           strName = String(255, 0)        'Init string to hold data.

           intRc = SQLFetch(intHstmt)
           If intRc &lt;&gt; SQL_SUCCESS Then
             GoTo ehGetDSNTables
           End If

           intCounter = 0
           ReDim Preserve arrTables(intCounter)
           While intRc &lt;&gt; SQL_NO_DATA_FOUND
             intRc = SQLGetData(ByVal intHstmt, 2, SQL_C_CHAR, _
               ByVal strOwner, 254, lngLenRead)
             intRc = SQLGetData(ByVal intHstmt, 3, SQL_C_CHAR, _
               ByVal strName, 254, lngLenRead)
             strTable = IIf(Owner, Mid(strOwner, 1, _
               InStr(strOwner, Chr(0)) - 1) &amp; ".", "")
             strTable = strTable &amp; Mid(strName, 1, _
               InStr(strName, Chr(0)) - 1)
             ReDim Preserve arrTables(intCounter)
             arrTables(intCounter) = strTable
             intCounter = intCounter + 1

             strOwner = String(255, 0)    'Init string to hold data.
             strName = String(255, 0)     'Init string to hold data.
             intRc = SQLFetch(intHstmt)
           Wend
           intRc = SQLFreeStmt(ByVal intHstmt, SQL_CLOSE)

           GetODBCTables = arrTables
           Exit Function
         ehGetDSNTables:
           intRc = SQLError(ByVal henv, ByVal hDbc, _
             ByVal intHstmt, strSqlState, 0, strErrMsg, _
             SQL_MAX_MESSAGE_LENGTH, 0)
           Debug.Print "(" &amp; strSqlState &amp; ")" &amp; strErrMsg
         End Function

</PRE><P><LI>From the Project menu, select Add Module, and then click on Module1.
   Then paste the following code into the General Declarations section
   of Module1:
<P>
<P><PRE>      'As an alternative you could include the entire ODBC32.TXT file
      Global Const SQL_NTS As Long = -3
      Global Const SQL_MAX_MESSAGE_LENGTH As Long = 512
</PRE><P>
<P><PRE>      Global Const SQL_NO_DATA_FOUND As Long = 100
      Global Const SQL_SUCCESS As Long = 0
</PRE><P>
<P><PRE>      Global Const SQL_CHAR As Long = 1
      Global Const SQL_C_CHAR As Long = SQL_CHAR
      Global Const SQL_CLOSE As Long = 0
</PRE><P>
<P><PRE>      Declare Function SQLAllocStmt Lib "odbc32.dll" (ByVal hDbc&amp;, _
<PRE></PRE>        phstmt&amp;) As Integer
      Declare Function SQLTables Lib "odbc32.dll" (ByVal hstmt&amp;, _
        szTblQualifier As Any, ByVal cbTblQualifier%, szTblOwner As Any, _
        ByVal cbTblOwner%, szTblName As Any, ByVal cbTblName%, _
        szTblType As Any, ByVal cbTblType%) As Integer
      Declare Function SQLFetch Lib "odbc32.dll" (ByVal hstmt&amp;) As Integer
      Declare Function SQLGetData Lib "odbc32.dll" (ByVal hstmt&amp;, _
        ByVal icol%, ByVal fCType%, ByVal rgbValue As String, _
        ByVal cbValueMax&amp;, pcbValue&amp;) As Integer
      Declare Function SQLFreeStmt Lib "odbc32.dll" _
        (ByVal hstmt&amp;, ByVal fOption%) As Integer
      Declare Function SQLError Lib "odbc32.dll" _
        (ByVal henv&amp;, ByVal hDbc&amp;,_
      ByVal hstmt&amp;, ByVal szSqlState$, pfNativeError&amp;, _
        ByVal szErrorMsg$,_
        ByVal cbErrorMsgMax%, pcbErrorMsg%) As Integer

</PRE><P><LI>Change the DSN, UID, and PWD in Form1 to match the ODBC database you are
   using.

<P><LI>Start the program or press the F5 key.

<P><LI>Click the Command1 button to execute the code, fill each list box, and
   display the table count and performance numbers in the debug window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
In Visual Basic Books Online see:
<PRE>  Guide to Building Client Server Applications in Visual Basic (Enterprise)
    Part 3: Data Access Options
      Using the ODBC API
        ODBC API Overview
          Retrieving Information about ODBC Data Sources

 (c) Microsoft Corporation 1997, All Rights Reserved.
</PRE></OL>Contributions by Jon Fowler, Microsoft Corporation
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kb3rdparty vb5all vb5howto VBKBDB VBKBNet VBKBObj VBKBRDO kbhowto<BR>
Version             : 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

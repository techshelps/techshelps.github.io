

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Pass Numeric Variables to a C DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94960 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/01/26">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows by example how to pass numeric variables from Visual Basic for Windows to a C DLL. The first example shows how to call C functions with single parameters of all numeric types. The second example shows how to pass multiple paramet...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBJZ,QAUD,QBS0,QAHH,QBXS,QAH4,QAD7,QAH7,QAH6,QBFY,QBE7,QBE6,QAY2,QBWS,QAFF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Pass Numeric Variables to a C DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94960 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft QuickC for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by example how to pass numeric variables from Visual
Basic for Windows to a C DLL. The first example shows how to call C
functions with single parameters of all numeric types. The second example
shows how to pass multiple parameters and how to pass variables by
reference so they can be manipulated on the C side.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Example One</h3>
 

<OL><P><LI>Start Visual Basic or if you are in Visual Basic, choose New Project
   from the File menu (ALT, F, N). Form1 is created by default.

<P><LI>Place five command buttons (Command1, Command2, Command3, Command4, and
   Command5) on Form1.

<P><LI>Add two Text boxes (Text1 and Text2) to Form1.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<PRE>   Declare Function noparams Lib "passnums.dll" () As Integer
   Declare Function passint Lib "passnums.dll" (ByVal x%) As Integer
   Declare Function passlong Lib "passnums.dll" (ByVal x&amp;) As Long
   Declare Function passfloat Lib "passnums.dll" (ByVal x!) As Single
   Declare Function passdouble Lib "passnums.dll" (ByVal x#) As Double

</PRE><P><LI>Add the following code to the click event of each command buttons:
<P>
<PRE>   Sub Command1_Click ()
      text1.Text = Str$(noparams())
      text2.Text = "Noparams"
   End Sub

   Sub Command2_Click ()
      i% = 21
      text1.Text = Str$(passint(55))
      text2.Text = Str$(passint(i%))
   End Sub

   Sub Command3_Click ()
      i&amp; = 45000
      text1.Text = Str$(passlong(40000))
      text2.Text = Str$(passlong(i&amp;))
   End Sub

   Sub Command4_Click ()
      i! = 1.35
      text1.Text = Str$(passfloat(1.23))
      text2.Text = Str$(passfloat(i!))
   End Sub

   Sub Command5_Click ()
      i# = 1234.5678
      text1.Text = Str$(passdouble(1.23456))
      text2.Text = Str$(passdouble(i#))
   End Sub

</PRE><P><LI>Start Microsoft QuickC for Windows, or if it's already running, choose
   New from the File menu.

<P><LI>Add the following code to the new file:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;
   /*  Noparams takes no parameters and returns a 2 */
   extern int far pascal noparams()
   {
   return(2);
   }
   /* add 32 to the integer passed in */
   extern int far pascal passint(int a)
   {
   a += 32;
   return(a);
   }
   /* passlong() takes a long integer and adds 7 to it */
   extern long far pascal passlong(long x)
   {
   x += 7;
   return(x+7);
   }
   // passfloat passes a floating point number
   extern float far pascal passfloat(float x)
   {
      return (x += (float) 1.45927);
   }
   // passdouble passes a floating point number
   extern double far pascal passdouble(double x)
   {
      return (x+=(double) 1.45927);
   }

   NOTE: Microsoft C and Borland C return values of type Double
   differently. Therefore the passdouble example above won't work
   in Borland C. Use the following code in Borland C:

   // return a value through y
   void FAR PASCAL _export passdouble(double x, double *y)
   {
    // do processing here
    // use '*y =' instead of a return statement
       *y = x;
   }

   Borland C is manufactured by a vendor independent of Microsoft;
   Microsoft makes no warranty, implied or otherwise, regarding Borland
   C's performance or reliability.

</PRE><P><LI>From the File menu, choose Save As, and save the file as PASSNUMS.C.

<P><LI>From the File menu, choose New, and Type these .DEF file lines:
<P>
<PRE>    LIBRARY     PASSNUMS
    EXETYPE     WINDOWS 3.1
    DATA        PRELOAD MOVABLE SINGLE
    CODE        PRELOAD MOVABLE DISCARDABLE
    EXPORTS
                noparams   @1
                passint    @2
                passlong   @3
                passfloat  @4
                passdouble @5
</PRE></OL>10. From the File menu, choose Save As, and save the file as PASSNUMS.DEF.

<OL><P><LI>From the Project Menu, choose Open and enter PASSNUMS.

<P><LI>Choose the OK button. Add PASSNUMS.C and PASSNUMS.DEF to the project.

<P><LI>From the Options menu, choose Project. Set the program type to Windows
<P><PRE>    DLL and set the compiler memory model to Large.
</PRE>
<P><LI>From the Project menu, choose Rebuild All. This creates PASSNUMS.DLL.

<P><LI>Return to Visual Basic and run the program. Pressing any of the command
<P><PRE>    buttons will change the contents of the two text boxes.
</PRE><P>
</OL><h3>Example Two</h3>
 

<OL><P><LI>Start Visual Basic, or if Visual Basic is already running, from the File
   menu, choose New Project (ALT, F, N). Form1 is created by default.

<P><LI>Place two command buttons (Command1, Command2) on Form1.

<P><LI>Add 2 Text boxes (Text1, Text2) to Form1.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<PRE>   ' Enter each of the following Declare statements on one, single line:
   Declare Function bunchparam Lib "multvars.dll" (ByVal w%,
      ByVal x&amp;, ByVal y!, ByVal z#) As Double
   Declare Function bunchbyref Lib "multvars.dll"
      (x%, y&amp;, z!, a#) As Double

</PRE><P><LI>Add the following code to the click events of the Command buttons:
<P>
<PRE>   Sub Command1_Click ()
      i% = 123
      j&amp; = 40000
      k! = 1.234
      l# = 1234.567
      text1.Text = Str$(bunchparam(123, 40000, 1.2345, 1.2345))
      text2.Text = Str$(bunchparam(i%, j&amp;, k!, l#))
   End Sub

   Sub Command2_Click ()
      i% = 12
      j&amp; = 40000
      k! = 123.455
      l# = 123455.678
      x# = bunchbyref(i%, j&amp;, k!, l#)
      text1.Text = Str$(i%) + Str$(j&amp;) + Str$(k!) + Str$(l#)
      text2.Text = Str$(x#)
   End Sub

</PRE><P><LI>Start Microsoft QuickC for Windows or choose New from the File menu.

<P><LI>Add the following code to the new file:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;
   /* bunchparam() adds double-precision values and an integer. */
   extern double far pascal bunchparam(int a, long b, float c, double d)
   {
   return(a+b+c+d);
   }
   extern double far pascal bunchbyref(int *a, long *b, float *c, double *d
   )
   {
   *a += 55;
   *b += 77;
   *c += (float) 123.456;
   *d += 12345.678;
   return(*a+*b);
   }

</PRE><P><LI>From the File menu, choose Save As, and save the file as MULTVARS.C.

<P><LI>From the File menu, choose New, and type these .DEF file lines:
<P>
<PRE>   LIBRARY     MULTVARS
   EXETYPE     WINDOWS 3.1
   DATA        PRELOAD MOVABLE SINGLE
   CODE        PRELOAD MOVABLE DISCARDABLE
   EXPORTS
               bunchparam @1
               bunchbyref @2

</PRE><P><LI>From the File menu, choose Save As, and save the file as MULTVARS.DEF.

<P><LI>From the Project Menu, choose Open and enter MULTVARS.

<P><LI>Choose the OK button. Add MULTVARS.C and MULTVARS.DEF to the project.

<P><LI>From the Options menu, choose Project. Set the program type to
<P><PRE>    Windows DLL and set the compiler memory model to Large.
</PRE>
<P><LI>From the Project menu, choose Rebuild All. This creates MULTVARS.DLL.

<P><LI>Return to Visual Basic and run the program. Pressing either Command
<P><PRE>    button will change the contents of the text boxes.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: 32-bit BASIC Does Not Convert UNICODE/ANSI in Binary Field </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q179845">
<META NAME="KBModify" CONTENT="1998/01/26">
<META NAME="KBCreate" CONTENT="1998/01/23">
<META NAME="Keywords" CONTENT="vb432 VB4WIN vb5all">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When using a binary field to store text in a Microsoft Jet 2.5 or earlier database, 32-bit applications cannot read text written by 16-bit applications and vice versa.  CAUSE =====  Unlike Memo fields, the 32-bit programs do no automatic ANSI/UNICO...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QA1S,QA5F,QAMA,QA7O,QA7N,QATZ,QATY,QDN9,QBXS,QAY5,QATX,QAMB,QAZV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: 32-bit BASIC Does Not Convert UNICODE/ANSI in Binary Field</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 26, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q179845</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
<LI>Microsoft Visual Basic Professional and Enterprise Editions, 32-bit
   only, for Windows, version 4.0
<LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using a binary field to store text in a Microsoft Jet 2.5 or earlier
database, 32-bit applications cannot read text written by 16-bit
applications and vice versa.
<P>
<P><h2>CAUSE</h2>
 
<P>
Unlike Memo fields, the 32-bit programs do no automatic ANSI/UNICODE
conversion on binary fields.
<P>
<P><h2>RESOLUTION</h2>
 

<OL><P><LI>Use the StrConv() function to perform explicit ANSI/UNICODE conversion.
<P>
<P><PRE>    -or-
</PRE>
<P><LI>Use MEMO fields instead of OLE/Binary fields for storing text. This is
   the preferred method.
<P>
</OL><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Because the nature of data in a binary field is not predetermined, BASIC
does no conversion when reading or writing data to these fields. This
behavior creates a problem when 16-bit and 32-bit programs inter-operate,
because 16-bit programs represent text as ANSI characters (1 byte per
character) and 32-bit programs normally represent text as UNICODE
characters (2 bytes per character).
<P>
32-bit programs can represent text as ANSI, but require explicit use of the
StrConv() function to translate between UNICODE and ANSI, for example:
<P>
<PRE>   strANSI = StrConv(strUNICODE, vbFromUnicode)

   strUNICODE = StrConv(strANSI, vbUnicode)

</PRE></OL>This function can be applied to reading and writing BLOB data as well.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this code "as is" without warranty of any kind,
either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Create a Jet 2.x database (DB1.MDB) using Access 2.0 or the VisData
   utility in Visual Basic 4.0 16-bit.

<P><LI>Create a table (Table1) with a numeric field (ID) and an OLE/Long
   Binary field (BLOB).

<P><LI>In Visual Basic 4.0 16-bit or Access 2.0, create a form with a
   CommandButton (Command1) and the following code:
<P>
<P><PRE>      Private Sub Command1_Click()
      Dim db As Database, rs As Recordset
      Set db = DBEngine(0).OpenDatabase("DB1.MDB")  ' VB4
<PRE></PRE>      Set db = CurrentDB()                          ' Access 2.0
      Set rs = db.OpenRecordset("Table1")
      rs.AddNew
      rs!id = 1
      rs!blob = "Test Message"
      rs.Update
      rs.Close
      db.Close
      End Sub

</PRE><P><LI>Run the form and click the CommandButton to add a row to the database.

<P><LI>In Visual Basic 4.0 32-bit, Visual Basic 5.0, or Access 95 or later,
   create a form with two CommandButtons (Command1 and Command2) and the
   following code:
<P>
<P><PRE>      Private Sub Command1_Click()
      Dim db As Database, rs As Recordset
      Set db = DBEngine(0).OpenDatabase("d:\win16app\vb4\db1.mdb")
      Set rs = db.OpenRecordset("Table1")
      Debug.Print rs!id, rs!blob
      Debug.Print rs!id, StrConv(rs!blob, vbUnicode)
      rs.Close
      db.Close
      End Sub
</PRE>   
<P><PRE>      Private Sub Command2_Click()
      Dim db As Database, rs As Recordset
      Set db = DBEngine(0).OpenDatabase("d:\win16app\vb4\db1.mdb")
      Set rs = db.OpenRecordset("Table1")
      rs.Edit
      rs!blob = StrConv("32-bit test message", vbFromUnicode)
      rs.Update
      rs.Close
      db.Close
      End Sub
</PRE><P>
   NOTE: You must add a reference to Microsoft Data Access Objects 3.0
   or 3.5 if running this code in Visual Basic 4.0 or 5.0 respectively.

<P><LI>Run the form and click Command1. The first line of output will contain
   the ID and a series of question marks illustrating that the ANSI to
   UNICODE conversion has not taken place. The second line of output, using
   the StrConv() function, correctly outputs the text.

<P><LI>Click Command2 to write converted data. You can click Command1 again to
   see that the data has been correctly converted from UNICODE to ANSI and
   back again.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Visual Basic Help Topic: StrConv()
<P>
(c) Microsoft Corporation 1998, All Rights Reserved.
Contributions by Malcolm Stewart, Microsoft Corporation
 
<PRE>Keywords          : vb432 VB4WIN vb5all
Component         : dao jet
Version           : WINDOWS:4.0,5.0,7.0,97
Platform          : WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 26, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

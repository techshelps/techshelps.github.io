

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: How Visual Basic 4.0 Calls C and Fortran DLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161825">
<META NAME="KBModify" CONTENT="1998/01/16">
<META NAME="KBCreate" CONTENT="1997/01/06">
<META NAME="Keywords" CONTENT="APrgOther CLIss FL32Iss FORTLngIss vbwin kbsample">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This sample demonstrates how a Visual Basic 4.0 application calls Fortran and Visual C DLL's. Specifically, it shows how to pass fixed length strings to and from those DLL's.  The following file is available for download from the Microsoft Software...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QATJ,QA28,QAMA,QBFY,QA5F,QANE,QATX,QA56,QA55,QAD7,QAH7,QAH6,QBWP,QBBI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: How Visual Basic 4.0 Calls C and Fortran DLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 16, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161825</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 32-bit only, for Windows, version 4.0
<LI>Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
   4.1, 4.2
<LI>Microsoft FORTRAN PowerStation 32 for Windows NT, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample demonstrates how a Visual Basic 4.0 application calls Fortran
and Visual C DLL's. Specifically, it shows how to pass fixed length
strings to and from those DLL's.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Vbstring.exe">Vbstring.exe</A> <I>(size: 25888 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic 4.0 replaced the string management system used by previous
versions of Visual Basic with a more robust string management system.
Visual Basic 4.0 relies on the OLE automation data types, such as BSTR and
safe arrays, to manage string usage. However, passing arrays of numeric
types, integers, or reals were not changed. For instance, before passing an
array of strings to a DLL, the strings must be converted to an array of
bytes, and then converted back to strings on return from the DLL. Please,
refer to VB4DLL.TXT that ships with Visual Basic 4.0 for more information.
<P>
All new C DLL's should use the syntax described in the VB4DLL.TXT file
because the API calls that are employed allow for improved error handling.
The programmer can do something in the event of an error, such as display a
message box and abort the operation.
<P>
Please note that the new Fortran DLL's cannot use the syntax described in
VB4DLL.TXT because they have no direct access to the correct API
functions.
<P>
The sample also demonstrates different methods you can use to resolve the
function symbol within the DLL. A mismatch in the function symbol results
in a Visual Basic runtime error, "Specified DLL function not found (Error
453)." The sample includes two methods to resolve C function symbols and
three methods to resolve Fortran function symbols.
<P>
Each source file contains more information pertinent to that language.
<P>
This sample also enables you to choose whether the data is passed to either
the C or Fortran DLL.
<P>
This sample shows how to pass a:

<UL><LI>two dimensional array of 4-byte integers.
<LI>two dimensional array of 8-byte floating point numbers.
<LI>string.
<LI>one dimensional array of strings.
<LI>two dimensional array of strings.
<LI>one dimensional array of 4-byte integers, a one dimensional array of
   8-byte floating point numbers, and a one dimensional array of strings.
<P>
</UL><h3>Sample Files</h3>
 
<P>
<PRE>cdll.c               C source file to build 32-bit DLL

fordll.for           Fortran source file for FPS NT 1.0 reference
fordll32.f90         Fortran source file for the 32-bit DLL

vbstring.vbp         Visual Basic 4.0 project file
vbstring.frm         Visual Basic form including event handlers


</PRE><h3>Building DLLs</h3>
 
<P>
This sample assumes you are using the following development environments:

<UL><LI>Microsoft Visual C++, version 4.0
<LI>Microsoft FORTRAN PowerStation for Windows 95 and Windows NT,
   version 4.0
<P>
</UL>You will need to setup the environment before running BUILDDLL.BAT.

<OL><P><LI>At an MS-DOS command-line prompt type: C:\MSDEV\BIN\VCVARS32.BAT

<P><LI>Build the C DLL. At the command-line prompt type: BUILDDLL C

<P><LI>Build the Fortran DLL. At the same prompt type: BUILDDLL Fortran

<P><LI>Start Visual Basic 4.0 and open the project file VBSTRING.VBP.

<P><LI>Run the Visual Basic application by creating an executable file (.exe)
   or running the program from within Visual Basic.
<P>
</OL>IMPORTANT: The DLLs must be in the \WINDOWS\SYSTEM directory, the directory
containing the Visual Basic executable file, or one of the environment file
paths.
<P>
<P><h3>Notes on Arrays in Different Languages</h3>
 
<P>
Given an upper bound of n, note that in Visual Basic all of the array
ranges are specified as "1 to n". When a lower bound is not specified,
Visual Basic, by default, assumes 0&lt;=index&lt;=n where "n" is inclusive. C
array subscripts are assumed to be in the range 0&lt;=index&lt;=n-1. Fortran
array ranges are 1&lt;=index&lt;=n. You need to be careful when you assign the
index ranges, and make sure that they match. If you exceed them, you will
probably get an Access Violation, an Unhandled Exception, or a random run-
time error in your Visual Basic Application.
<P>
<PRE>Language     Declaration                Range         # Items in Array
--------     -----------                -----         ----------------

Basic        Dim X(10) As Integer       0&lt;=index&lt;=10         11
Basic*       Dim X(1 to 10) As Integer  1&lt;=index&lt;=10         10
C            int X[10];                 0&lt;=index&lt;=9          10
Fortran      integer X(10)              1&lt;=index&lt;=10         10
Fortran*     integer X(0:9)             0&lt;=index&lt;=9          10

</PRE></OL>* With lower bound specified. C is always zero-based.
 
<PRE>Keywords          : APrgOther CLIss FL32Iss FORTLngIss vbwin kbsample
Technology        : kbole
Version           : WINDOWS:4.0
Platform          : NT WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 16, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

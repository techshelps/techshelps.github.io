

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Access Database RAM Cache Is Faster Data File Method </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107871">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1993/11/30">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Before Microsoft Access was available, many Basic programs read disk files into string arrays. Then wrote them back to disk. You may be able to improve the speed and flexibility of file operations by instead using a Microsoft Access database with a...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QBS0,QDKY,QAMA,QA5F,QDN9,QAYY,QBF0,QAPN,QBW6,QA5C,QAU3,QAMR,QABU,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Microsoft Access Database RAM Cache Is Faster Data File Method</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107871</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Before Microsoft Access was available, many Basic programs read disk files
into string arrays. Then wrote them back to disk. You may be able to
improve the speed and flexibility of file operations by instead using
a Microsoft Access database with a RAM cache.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic limits variable-length string arrays to 64K bytes. However,
fixed-length string arrays are limited only by memory, and a Microsoft
Access database can contain many megabytes of data.
<P>
The Microsoft Access database engine used by Visual Basic uses a robust,
RAM-based caching scheme for speedy data access.
<P>
You can open a Microsoft Access database using a dynaset, which is a set of
pointers to the original data. When you update the dynaset, you actually
update the underlying physical table on disk. Dynasets are live; they
are not just copies of the data. You can specify a large Microsoft Access
data buffer, or cache, in RAM to obtain speeds faster than older Basic file
input/output methods.
<P>
Please read the PERFORM.TXT file for performance tuning tips for data
access in Visual Basic version 3.0 and Microsoft Access version 1.1 for
Windows. The PERFORM.TXT file is in your Visual Basic directory. A
related PERFORM.TXT file is installed with Microsoft Access.
<P>
A copy of the PERFORM.TXT file can also be found by searching for the
following words in this knowledge base:
<P>
<PRE>   PERFORM.TXT and Visual and Basic

</PRE>Using a table object variable usually gives faster access to a database
than using a data control bound to a database.
<P>
Using a Microsoft Access Data Buffer in RAM
 
<P>
You can specify the size of the Microsoft Access buffer, or cache, in RAM
by adding an [ISAM] section to your initialization file. Specify the [ISAM]
section in the VB.INI file for Visual Basic, or in the &lt;appname&gt;.INI file
for your Visual Basic application. For example, use the following cache if
your computer has at least eight megabytes of RAM installed:
<P>
<PRE>   MAXBUFFERSIZE = 4096

</PRE>This gives the Microsoft Access engine a four-megabyte dedicated cache.
<P>
You can also specify ReadAheadPages and other parameters. Please read
the PERFORM.TXT file for more information.
<P>
Using the above Microsoft Access caching scheme can be faster than using
Basic file input/output statements with a disk-caching product such as the
SMARTDRV.SYS driver that ships with most MS-DOS versions 4.x and later.
<P>
In one test on a PC with a 486 chip and 50-megahertz clock speed, a Seek
method used on a cached table took less than .6 milliseconds. FindFirst
methods with simple criteria took only .7 to .9 milliseconds. Performance
is about the same whether you use the primary key or any other index that
is either defined as unique or resolves to a single record pointer.
<P>
For sample data manager source code, please see the following article in
the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q99643.htm">Q99643</A></B>
<PRE>TITLE     : Data Manager Source Code Available on the Internet
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

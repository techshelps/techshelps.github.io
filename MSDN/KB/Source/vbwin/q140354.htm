

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Input Function Doesn't Ignore EOF </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140354">
<META NAME="KBModify" CONTENT="1996/02/26">
<META NAME="KBCreate" CONTENT="1995/11/29">
<META NAME="Keywords" CONTENT="kbbuglist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  With Visual Basic 4.0, code that uses the Input$ function and assumes that Visual Basic will return an empty value if input is attempted past the end of file fails. This code returns run-time error number 62 -  Input past end of file . If run with ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QBWS,QAMM,QABI,QAGB,QA5F,QAMA,QAYY,QBFN,QAVX,QAUD,QAGI,QAB9,QABH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Input Function Doesn't Ignore EOF</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 26, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140354</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional and Enterprise Editions of Microsoft Visual
   Basic for Windows, 16-bit and 32-bit, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, version 3.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
With Visual Basic 4.0, code that uses the Input$ function and assumes that
Visual Basic will return an empty value if input is attempted past the end
of file fails. This code returns run-time error number 62 - "Input past end
of file". If run with Visual Basic 3.0, no error is received.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Users should not assume that Visual Basic will return an empty value if a
program attempts to access a file location that doesn't exist because it is
past the end of file location. The Lof function can be used to determine
the length of a file, and no input should be attempted past this value. To
fix code that currently does this, an explicit check for the end of file
can be added before attempting to read data. This can be performed by using
the Loc and Lof functions to check whether the file location (Loc) after an
upcoming read will be greater than the length of file (Lof). The example
below includes code that implements this fix.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching the problem and will
post more information here in the Microsoft Knowledge Base when it is
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce</h3>
 

<OL><P><LI>Start Visual Basic, or if it already running, click New Project on the
   File menu.

<P><LI>Add a new command button on the form.

<P><LI>Insert the following code in the Command1_Click event:
<P>
<PRE>   Private Sub Command1_Click ()
       Dim string1 As String * 20
       Dim string2 As String * 4
       Dim i As Integer

       Open "test.dat" For Output As #1
       For i = Asc("A") To Asc("Z")
           Print #1, Chr$(i);
       Next i
       Close #1

       Open "test.dat" For Binary As #1
       Do
           'If (Loc(1) + 20) &gt; LOF(1) Then Exit Sub
           string1 = Input$(20, 1)
           Debug.Print string1
           'If (Loc(1) + 4) &gt; LOF(1) Then Exit Sub
           string2 = Input$(4, 1)
           Debug.Print string2
       Loop Until EOF(1)
       Close #1
   End Sub

</PRE><P><LI>Press the F5 key, or click Start on the Run menu (ALT, R, S) to run the
   project.

<P><LI>Click the command button on the form. The error mentioned above is
   generated on the second iteration of the loop, before the first
   uncommented statement. The above code will work without error with
   Visual Basic 3.0, causing the following sequence of assignments:
<P>
<P><PRE>      string1 = "ABCDEFGHIJKLMNOPQRST"
      string2 = "UVWX"
<PRE></PRE>      string1 = "YZ                  "
      string2 = "    "

   Uncommenting the commented lines in the above procedure causes Visual
   Basic to check whether the next call to Input$ will read past the end of
   the file, avoiding the error. Additional code would be required to mimic
   exactly the functionality of Visual Basic 3.0. After determining that
   the next call to Input$ would read past the end of file, this new code
   would call Input$, but only read up to the end of file, not past it.
   Since this isn't implemented in the example code, the procedure exits
   before the last two characters ("YZ") are read.

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q142246.htm">Q142246</A></B>
<PRE>TITLE     : BUG: Sequential File I/O Does Not Handle Embedded Nulls
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: buglist4.00 4.00 vb4all vb4win<BR>
KBCategory: kbbuglist kbprg<BR>
KBSubcategory: IAPVBA<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 26, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

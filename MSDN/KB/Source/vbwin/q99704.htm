

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Implement the DLookup Function in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99704 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/06/06">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Microsoft Access provides a set of domain, or record set, functions that are useful in getting the value of one field based on criteria involving another field. The DLookup domain function is particularly useful.  Although Visual Basic does not con...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA5V,QAN0,QAPF,QAUD,QAMB,QA7O,QAY5,QAB9,QA7N,QAH4,QATX,QBV8,QBXS,QAB5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Implement the DLookup Function in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99704 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic Programming System for Windows, version 3.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Access provides a set of domain, or record set, functions that
are useful in getting the value of one field based on criteria involving
another field. The DLookup domain function is particularly useful.
<P>
Although Visual Basic does not contain the DLookup function, you can write
the equivalent using Visual Basic code. This article describes how to
implement the DLookup domain function in Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In Microsoft Access, the DLookup domain function returns the value of a
field for a given set of criteria. The syntax for the DLookup function is
as follows:
<P>
<PRE>   DLookup(expr, domain , criteria)

   Argument   Description
   ----------------------------------------------------------------
   expr       String expression identifying the field that contains
              the data you want to return. Operands in expr can
              include the name of a table field.

   domain     String expression identifying the records that
              constitute the record set. It can be a table name,
              query name, or SQL expression that returns data.

   criteria   Optional string expression used to restrict the range
              of data on which DLookup is performed. For example,
              criteria could be the SQL expression's WHERE clause
              without the word WHERE. If criteria is omitted, DLookup
              evaluates expr against the entire record set.

</PRE><h3>Step-by-Step to a Custom Visual Basic DLookup Function</h3>
 
The following steps show by example how to create a Visual Basic custom
DLookup function.

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Add the following controls with the associated properties to Form1:
<P>
<PRE>   Control          Name       Property Settings
   -------------------------------------------------------------
   Command Button   Command1   Caption = "Lookup"
   Label            Label2
   Data             Data1      Databasename = "BIBLIO.MDB"
                               RecordSource = "Authors"
   Label            Label1     DataSource = Data1
                               DataField = Author

</PRE><P><LI>Add the following code to the general declarations section of Form1:
<P>
   Dim gDefaultDatabase As Database

<P><LI>Add the following code to the general section of Form1:
<P>
<PRE>   'Enter the following two lines as one, single line:
   Function DLookup (ByVal FieldName As String, ByVal RecSource
      As String, ByVal Criteria As String) As Variant

      Dim dsResult As Dynaset
      Dim ReturnValue As Variant

      On Local Error GoTo Error_DLookup:

      'Create a dynaset based on the record source or SQL string provided
      Set dsResult = gDefaultDatabase.CreateDynaset(RecSource)

      'Find the first record that meets the criteria provided
      dsResult.FindFirst Criteria

      'See if we found any records
      If Not dsResult.NoMatch Then

         'Return the value of the field
         DLookup = dsResult(FieldName).Value

      Else

          DLookup = Null

      End If

   DLookup_Exit:
   Exit Function

   Error_DLookup:
       'Display the error and get out
       MsgBox "Error (" &amp; Err &amp; "): " &amp; Error(Err) &amp; " in DLookup", 64
       Resume DLookup_Exit:

   End Function

</PRE><P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()

      'Get the first book title for the current author.
      'Enter the following two lines as one, single line:
      Label2.Caption = DLookup("Title", "Titles", "Au_ID = " &amp;
         Format(data1.Recordset("Au_ID")))
   End Sub

</PRE><P><LI>Add the following code to the Form_Load event procedure of Form1:
<P>
<PRE>   'Cause the records to be read from the database. This is
   'needed to initialize the Database property.
   data1.Refresh

   'Keep the default database in a global variable to be used
   'by the DLookup function
   Set gDefaultDatabase = data1.Database

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S) or press F5 to run the
   program.

<P><LI>Click the directional arrows on the Data control to display different
   author names in Label1.

<P><LI>Click the Lookup button and title to display one of the author's books
   in Label2.
<P>
</OL>As demonstrated in this example program, you can use DLookup to return a
field value such as book title based on the value of another field such as
author ID.
<P>
<P><h3>Examples Showing How to Use DLookup</h3>
 
Below are some more examples showing how you can use the DLookup function.
<P>
In the following example, from the Authors table in the Visual Basic
BIBLIO.MDB sample database, DLookup uses the Au_ID field to return the
corresponding author name for the author whose ID is 17. Assume that
the variable AuthorName is a string.
<P>
<PRE>   AuthorName = DLookup("Author", "Authors", "Au_ID = 17")

</PRE></OL>If the criteria argument contains non-numeric text other than field
names, you must enclose the text in single quotation marks. In the
following example from the Titles table of the BIBLIO.MDB database,
ISBN is the name of a field, and 0895886448 is a string literal.
<P>
<PRE>   BookTitle1 = DLookup("Title", "Titles", "ISBN = '0895886448'")
   BookTitle2 = DLookup("Title", "Titles", "Au_Id = 17")

</PRE>Even if more than one record satisfies criteria, DLookup returns only
one field. If no record satisfies criteria, or if the domain contains no
records, DLookup returns a Null.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataAcc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

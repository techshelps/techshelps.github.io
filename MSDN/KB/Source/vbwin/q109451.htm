

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Find Num of Days Between Dates Outside of Normal Range </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109451">
<META NAME="KBModify" CONTENT="1998/03/20">
<META NAME="KBCreate" CONTENT="1994/01/04">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  To find the number of days between any two dates, you can take the difference between the values returned by the DateSerial function for two dates. However, the DateSerial function only supports dates from January 1, 100 through December 31, 9999. ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGJ,QBS0,QAY5,QAOX,QACE,QAUD,QA4Q,QAB9,QBV8,QAYV,QAKC,QBC6,QAH4,QAGX,QAG8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Find Num of Days Between Dates Outside of Normal Range</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 20, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109451</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbprg kbcode
<P>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To find the number of days between any two dates, you can take the
difference between the values returned by the DateSerial function for two
dates. However, the DateSerial function only supports dates from January 1,
100 through December 31, 9999.
<P>
To support a much wider range of dates, use the AstroDay function as in
this example:
<P>
<PRE>   Function AstroDay(inyear, inmonth, inday)
   ' The AstroDay function returns the Astronomical Day for any given date.
   y = inyear + (inmonth - 2.85) / 12
   AstroDay=Int(Int(Int(367*y)-1.75*Int(y)+inday)-.75*Int(.01*y))+1721119
   ' NOTE: Basic's Int function returns the integer part of a number.
   End Function

</PRE>For example, the number of days between February 28, 12000 and March 1,
12000 is 2 because the year 12000 is a leap year:
<P>
<PRE>   Print AstroDay(12000, 3, 1) - AstroDay(12000, 2, 28)   'Prints 2

</PRE>In addition, the AstroWeekDay function defined farther below returns the
day of the week, Sunday through Monday, for any given AstroDay.
AstroWeekDay supports dates outside the range (January 1, 100 through
December 31, 9999) of Visual Basic's WeekDay function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The AstroDay function defined in this article is a modified version of the
Julian date formula used by astronomers.
<P>
Visual Basic's DateSerial function returns a Variant of VarType 7 (Date)
containing a date that is stored internally as a double-precision number.
This number represents a date from January 1, 100 through December 31,
9999, where January 1, 1900 is 2. Negative numbers represent dates prior to
December 30, 1899.
<P>
Leap years are accurately handled by both Visual Basic's DateSerial
function and the Astronomical Day function (AstroDay) defined in this
article.
<P>
A leap year is defined as all years divisible by 4, except for years
divisible by 100 that are not also divisible by 400. Years divisible by 400
are leap years. 2000 is a leap year. 1900 is not a leap year.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Double-click the form to open the code window. Add the following code to
   the Form Load event:
<P>
<PRE>   Sub Form_Load ()

      form1.Show  ' Must first Show form in Load event for Print to work.
      Print AstroDay(12000, 3, 1) - AstroDay(12000, 2, 28)  'Prints 2
      Print AstroDay(-12400, 3, 1) - AstroDay(-12400, 2, 28)  'Prints 2
      Print AstroDay(12000, 3, 1) - AstroDay(-12000, 2, 28) 'Prints 8765822
      Print AstroDay(1902, 2, 28) - AstroDay(1898, 3, 1)  'Prints 1459 days
      Print AstroWeekDay(AstroDay(1993, 12, 1))  ' Prints Wednesday
      Print AstroWeekDay(AstroDay(12000, 3, 2))  ' Prints Thursday

      ' You can also use Visual Basic's DateSerial function as follows to
      ' find the number of days between two dates:
      Print DateSerial(1902, 2, 28) - DateSerial(1898, 3, 1)

      ' Visual Basic's WeekDay function returns an integer betw 1 (Sunday)
      ' and 7 (Saturday), which represents the day of the week for a date
      ' argument:
      Print "Day of week = " &amp; Weekday(DateSerial(1898, 3, 1))

   End Sub

</PRE><P><LI>In the Object box on the Form1.Frm code window, select (general).
   Add the following functions:
<P>
   Function AstroDay(inyear, inmonth, inday)
<PRE>   ' The AstroDay function returns the Astronomical Day for any given date.
   y = inyear + (inmonth - 2.85) / 12
   AstroDay=Int(Int(Int(367*y)-1.75*Int(y)+inday)-.75*Int(.01*y))+1721119
   ' NOTE: Basic's Int function returns the integer part of an number.
   End Function

   Function AstroWeekDay (aday)
   ' The AstroWeekDay function returns the day of the week, Sunday through
   ' Monday, for any given AstroDay. The aday parameter must be a day
   ' number returned by the AstroDay function.
   weekdayx = (aday - 3) Mod 7
   Select Case weekdayx
   Case 0
      AstroWeekDay = "Sunday"
   Case 1
      AstroWeekDay = "Monday"
   Case 2
      AstroWeekDay = "Tuesday"
   Case 3
      AstroWeekDay = "Wednesday"
   Case 4
      AstroWeekDay = "Thursday"
   Case 5
      AstroWeekDay = "Friday"
   Case 6
      AstroWeekDay = "Saturday"
   End Select
   End Function

</PRE><P><LI>Start the program (or press the F5 key). Close the form to end the
   program.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 20, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

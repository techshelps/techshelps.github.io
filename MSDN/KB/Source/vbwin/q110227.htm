

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: ODBC Database Remains Open After a Close Method Used </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110227">
<META NAME="KBModify" CONTENT="1997/07/09">
<META NAME="KBCreate" CONTENT="1994/01/17">
<META NAME="Keywords" CONTENT="APrgDataODBC kbinterop kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Using a Close method on a database opened with Open Database Connectivity (ODBC) drivers doesn't close the database. The ODBC database process keeps running. To close the connection successfully, you must end the Visual Basic application.  CAUSE ==...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA9E,QAGB,QAZV,QAPN,QAI5,QBG2,QAAW,QABA,QA1S,QABI,QBWS,QA39,QAH4,QDN9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: ODBC Database Remains Open After a Close Method Used</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110227</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using a Close method on a database opened with Open Database Connectivity
(ODBC) drivers doesn't close the database. The ODBC database process keeps
running. To close the connection successfully, you must end the Visual
Basic application.
<P>
<P><h2>CAUSE</h2>
 
<P>
After Visual Basic executes the Close method on an ODBC connection, the
Microsoft Access engine in Visual Basic maintains a persistent connection
in case the user reopens the database later in the program. This makes the
program more efficient.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If a Visual Basic program does not reopen the ODBC connection after doing a
Close method, a time-out occurs and the connection closes automatically.
<P>
You can control the time-out period by placing the following line in your
VB.INI or &lt;vb_exe_app_name&gt;.INI file, where x is the number of seconds:
<P>
<PRE>   [ODBC]
   ConnectionTimeout=x

</PRE>The default ConnectionTimeout is usually 600 seconds (10 minutes). The
lowest supported ConnectionTimeout value is 1 second. A ConnectionTimeout
value of 0 says to never cause a time-out.
<P>
To enforce the fastest possible time-out, you can set ConnectionTimeout
to 1. In addition, you can add the following code after you close the
database to make sure the connection is terminated:
<P>
<PRE>   db.Close      ' Close database, using database object variable (db).
   Start = Timer
   Do            ' This loop pauses a second to allow a time-out
      FreeLocks  ' Tell Microsoft Access engine that program is idle.
      DoEvents   ' Tell Windows to do any pending events.
   Loop While Timer &lt;= Start + 1

</PRE>This loop delays for a second after the db.Close. The FreeLocks statement
tells the database engine that the user is idle. If you run the Visual
Basic program with ConnectionTimeout set to 1 in your VB.INI or
&lt;vb_exe_app_name&gt;.INI file, the database engine will disconnect the
one-second-old connection to the server.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design for all ODBC database connections.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Reproducing the Behavior</h3>
 
<P>
For example, using a Close method on a database opened via an ODBC
connection to a Sybase SQL server leaves the Sybase session open. You can
confirm this by executing sp_who on the Sybase server.
<P>
As another example, assume you have a Visual Basic application on a timer
that regularly checks SQL Server version 4.2a on OS/2. To avoid wasting
an SQL user connection between the timed checks, you might want the Close
method to release the user connection. However, the Close method doesn't
release the user connection.
<P>
NOTE: You can create Dynaset or Snapshot objects against ODBC databases,
but you cannot use the OpenTable method to directly open ODBC tables.
<P>
<P><h3>Additional VB.INI or &lt;vb_exe_app_name&gt;.INI Settings</h3>
 
<P>
The following additional settings for the VB.INI or &lt;vb_exe_app_name&gt;.INI
initialization file are useful for handling ODBC databases and time-outs:
<P>
Entry for [Debug]:
<P>
<PRE>   Section              Value   Effect
   ----------------------------------------------------------------
   RmtTrace             0      Use asynchronous query execution
                               if possible; no ODBC API tracing
                               (default).

                        8      Trace ODBC API calls in ODBCAPI.TXT
                               in the Microsoft Access directory.

                       16      Force synchronous query execution.

                       24      Trace ODBC API calls; force
                               asynchronous query execution.

</PRE>Entries for [ODBC]:
<P>
<PRE>   Section              Value   Effect
   ----------------------------------------------------------------
   TraceSQLMode         0      No tracing of SQL queries (default).

                        1      Trace SQL queries sent to ODBC in
                               SQLOUT.TXT in the Microsoft Access
                               directory.

   QueryTimeout         S      Wait S seconds for queries sent to
                               ODBC, and then stop trying to process
                               the query results (for asynchronous
                               queries only). (Default: 60 seconds).

   LoginTimeout         S      Wait S seconds for ODBC login response,
                               and then stop trying to connect to a
                               server. (Default: 20 seconds).

   ConnectionTimeout    S      Wait S seconds, and then close idle
                               ODBC connections. (Default: 600
                               seconds).

   AsyncRetryInterval   M      Retry asynchronous queries every M
                               milliseconds. (Default: 500
                               milliseconds).

   AttachCaseSensitive  0      Attach the first table whose name
                               matches the specified string,
                               regardless of case.

                        1      Attach a table only if its name
                               exactly matches the specified string.

   AttachableObjects  string   A list of object types you can attach.
                               (Default: 'TABLE', 'VIEW', 'SYSTEM TABLE',
                               'ALIAS', 'SYNONYM'.)

   SnapshotOnly         0      Get index information when tables are
                               attached so that dynasets are allowed
                               (default).

                        1      Ignore index information when tables
                               are attached so that only snapshots
                               are allowed.

</PRE><h2>REFERENCES</h2>
 
<P>
"Microsoft Visual Basic for Windows Professional Features Book 2:
<PRE> Data Access Guide," pages 149-154 in Appendix C.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: jet caching<BR>
Keywords            : APrgDataODBC kbinterop kbfasttip<BR>
Version             : 3.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

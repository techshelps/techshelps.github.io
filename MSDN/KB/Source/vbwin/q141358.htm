

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use the Win32 DrawEdge API Function to Draw 3D Effects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141358">
<META NAME="KBModify" CONTENT="1995/12/18">
<META NAME="KBCreate" CONTENT="1995/12/17">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Win32 API features a new function called DrawEdge. Its purpose is to draw 3D effects for all Windows applications. Microsoft Windows NT version 3.51 and Microsoft Windows 95 both use the DrawEdge function for all of their 3D effects.  The Windo...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA0K,QAXQ,QAY5,QAFF,QDL9,QBWO,QBWN,QAYS,QAMN,QBV8,QDIT,QAL3,QAH4,QBS0,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use the Win32 DrawEdge API Function to Draw 3D Effects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 18, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141358</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional and Enterprise Editions of Microsoft Visual
   Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Win32 API features a new function called DrawEdge. Its purpose is to
draw 3D effects for all Windows applications. Microsoft Windows NT version
3.51 and Microsoft Windows 95 both use the DrawEdge function for all of
their 3D effects. "The Windows Interface Guidelines for Software Design"
(by Microsoft Press) also suggests that all Windows programmers use the
DrawEdge function when adding 3D effects to their applications. The
advantages of using the DrawEdge function are:
<P>
- It provides a consistent 3D look and feel for all applications.
- It saves the programmer from having to convert their 3D code to a flat
<PRE>  version for use with monochrome displays and printers.
</PRE>- It insures that your 3D effects redraw properly when the system colors
<PRE>  change.
</PRE>- It allows you to avoid using and distributing THREED32.OCX to add 3D
<PRE>  effects to your application.
</PRE>- It allows for maximum portability to future versions of Windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code sample is a module of all of the declarations needed to
use the DrawEdge function with Visual Basic 4.0 for Windows.
<P>
<PRE>'***********************************************************************
' DrawEdge.bas - Contains API declarations and constants for the
'                DrawEdge API function.
'***********************************************************************
</PRE>Option Explicit
Public Type RECT
<PRE>        Left As Long
        Top As Long
        Right As Long
        Bottom As Long
</PRE>End Type
<P>
Public Const BDR_RAISEDOUTER = &amp;H1
Public Const BDR_SUNKENOUTER = &amp;H2
Public Const BDR_RAISEDINNER = &amp;H4
Public Const BDR_SUNKENINNER = &amp;H8
<P>
Public Const BDR_OUTER = &amp;H3
Public Const BDR_INNER = &amp;HC
Public Const BDR_RAISED = &amp;H5
Public Const BDR_SUNKEN = &amp;HA
<P>
Public Const EDGE_RAISED = (BDR_RAISEDOUTER Or BDR_RAISEDINNER)
Public Const EDGE_SUNKEN = (BDR_SUNKENOUTER Or BDR_SUNKENINNER)
Public Const EDGE_ETCHED = (BDR_SUNKENOUTER Or BDR_RAISEDINNER)
Public Const EDGE_BUMP = (BDR_RAISEDOUTER Or BDR_SUNKENINNER)
<P>
Public Const BF_LEFT = &amp;H1
Public Const BF_TOP = &amp;H2
Public Const BF_RIGHT = &amp;H4
Public Const BF_BOTTOM = &amp;H8
<P>
Public Const BF_TOPLEFT = (BF_TOP Or BF_LEFT)
Public Const BF_TOPRIGHT = (BF_TOP Or BF_RIGHT)
Public Const BF_BOTTOMLEFT = (BF_BOTTOM Or BF_LEFT)
Public Const BF_BOTTOMRIGHT = (BF_BOTTOM Or BF_RIGHT)
Public Const BF_RECT = (BF_LEFT Or BF_TOP Or BF_RIGHT Or BF_BOTTOM)
<P>
Public Const BF_DIAGONAL = &amp;H10
<P>
<PRE>' For diagonal lines, the BF_RECT flags specify the end point of the
' vector bounded by the rectangle parameter.
</PRE>Public Const BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL Or BF_TOP _
Or BF_RIGHT)
Public Const BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL Or BF_TOP Or BF_LEFT)
Public Const BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL Or BF_BOTTOM _
Or BF_LEFT)
Public Const BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL Or BF_BOTTOM _
Or BF_RIGHT)
<P>
<PRE>Public Const BF_MIDDLE = &amp;H800        ' Fill in the middle
Public Const BF_SOFT = &amp;H1000         ' For softer buttons
Public Const BF_ADJUST = &amp;H2000       ' Calculate the space left over
Public Const BF_FLAT = &amp;H4000         ' For flat rather than 3D borders
Public Const BF_MONO = &amp;H8000         ' For monochrome borders

</PRE>Public Declare Function DrawEdge Lib "user32" (ByVal hdc As Long, _
<PRE>    qrc As RECT, ByVal edge As Long, ByVal grfFlags As Long) As Boolean

'***********************************************************************
' DrawEdge.frm - Demonstrates a simple example of how to use DrawEdge.
'***********************************************************************
</PRE>Option Explicit
<P>
<PRE>'***********************************************************************
' Prepares the form and Picture1 for use with DrawEdge.
'***********************************************************************
Private Sub Form_Load()
    '-------------------------------------------------------------------
    ' Always set the ScaleMode to pixels when using API drawing
    ' functions.
    '-------------------------------------------------------------------
    ScaleMode = vbPixels
    With Picture1
        '---------------------------------------------------------------
        ' The next line is not required if you put your drawing code
        ' in the Paint event.
        '---------------------------------------------------------------
        .AutoRedraw = True
        '---------------------------------------------------------------
        ' Set the Backcolor, set the Borderstyle to none, and size
        ' the picture box to a more realistic button size.
        '---------------------------------------------------------------
        .BackColor = vb3DFace
        .BorderStyle = 0
        .Move 60, 10, 90, 30
        '-------------------- -------------------------------------------
        ' Make sure the picture box uses the pixel ScaleMode, and
        ' set the tag of the control to a caption for later use with
        ' DrawControl.
        '---------------------------------------------------------------
        .ScaleMode = vbPixels
        .Tag = "DrawEdge Test"
    End With
    '-------------------------------------------------------------------
    ' Draw the initial button.
    '-------------------------------------------------------------------
    DrawControl Picture1, Picture1.Tag, EDGE_RAISED
End Sub

'***********************************************************************
' When the picture box gets a click event, an etched box is drawn on
' the upper left corner of the form.
'***********************************************************************
Private Sub Picture1_Click()
    Dim r As RECT   ' used by DrawEdge to determine where to draw
    '-------------------------------------------------------------------
    ' Location of the etched box.
    '-------------------------------------------------------------------
    With r
        .Left = 10
        .Top = 10
        .Right = 50
        .Bottom = 50
    End With
    '-------------------------------------------------------------------
    ' Draw it.
    '-------------------------------------------------------------------
    DrawEdge hdc, r, EDGE_ETCHED, BF_RECT
End Sub

'***********************************************************************
' When the user presses the mouse down on the picture box a sunken edge
' is drawn to simulate a depresessed button.
'***********************************************************************
Private Sub Picture1_MouseDown(Button%, Shift%, X!, Y!)
    DrawControl Picture1, Picture1.Tag, EDGE_SUNKEN
End Sub

'***********************************************************************
' When the user releases the mouse over the picture box a standard
' button is drawn.
'***********************************************************************
Private Sub Picture1_MouseUp(Button%, Shift%, X!, Y!)
    DrawControl Picture1, Picture1.Tag, EDGE_RAISED
End Sub

'***********************************************************************
' The DrawControl helper function is designed to make it easier to
' draw a button on a picture box.
'***********************************************************************
Private Sub DrawControl(picControl As PictureBox, _
    strCaption As String, Optional vntEdge)

    Dim r As RECT    ' Holds the location of the DrawEdge rectangle.
    Dim intOffset%   ' Used to shift the caption when the button is
                     ' pressed.
    '-------------------------------------------------------------------
    ' If the user doesn't provide a Edge flag, then use a default value.
    '-------------------------------------------------------------------
    vntEdge = IIf(IsMissing(vntEdge), EDGE_RAISED, vntEdge)
    '-------------------------------------------------------------------
    ' Clear the picture control and determine where to draw the new
    ' rectangle and caption.
    '-------------------------------------------------------------------
    With picControl
        .Cls
        r.Left = .ScaleLeft
        r.Top = .ScaleTop
        r.Right = .ScaleWidth
        r.Bottom = .ScaleHeight
        If vntEdge = EDGE_SUNKEN Then intOffset = 2
        .CurrentX = (.ScaleWidth - .TextWidth(strCaption) _
                    + intOffset) / 2
        .CurrentY = (.ScaleHeight - .TextHeight(strCaption) _
                    + intOffset) / 2
    End With
    '-------------------------------------------------------------------
    ' Draw the caption, then draw the rectangle.
    '-------------------------------------------------------------------
    Picture1.Print strCaption
    DrawEdge picControl.hdc, r, CLng(vntEdge), BF_RECT
    '-------------------------------------------------------------------
    ' If AutoRedraw is True, then any drawing done by an API call cannot
    ' be seen until until the picture box gets refreshed.
    '-------------------------------------------------------------------
    If picControl.AutoRedraw Then picControl.Refresh
End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbui kbcode kbhowto<BR>
KBSubCategory:<BR>
Additional reference words: 4.00 DRAW EDGE THREED SSPANEL vb4win vb432<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 18, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

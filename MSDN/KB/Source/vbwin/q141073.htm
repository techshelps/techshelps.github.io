

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Windows API Functions to Better Manipulate Text Boxes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141073">
<META NAME="KBModify" CONTENT="1996/05/07">
<META NAME="KBCreate" CONTENT="1995/12/11">
<META NAME="Keywords" CONTENT="kbprg kbdocerr kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  By calling Windows API functions from Microsoft Visual Basic for Windows, you can retrieve text box (or edit control) information that you cannot obtain using only Visual Basic for Windows's built-in features.  NOTE: In Visual Basic versions 2.0, 3...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBV4,QAMB,QBT6,QAHP,QAY5,QATX,QBS0,QBXT,QA5V,QAIB,QBV8,QAB9,QDL9,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Windows API Functions to Better Manipulate Text Boxes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 7, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141073</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By calling Windows API functions from Microsoft Visual Basic for Windows,
you can retrieve text box (or edit control) information that you cannot
obtain using only Visual Basic for Windows's built-in features.
<P>
NOTE: In Visual Basic versions 2.0, 3.0, and 4.0 for Windows, you can use
the new HWND property of a text box instead of calling the GetFocus()
function.
<P>
This article supplies a sample program that performs the following useful
features (making use of the Windows message constants shown in parentheses,
obtained by calling Windows API routines):

<UL><LI>Copies a specific line of text from the text box (EM_GETLINE).
<LI>Retrieves the number of lines within the text box (EM_GETLINECOUNT).
<LI>Positions the cursor at a specific character location (EM_GETSEL) in the
   text box.
<LI>Retrieves the line number of a specific character location in the text
   box (EM_LINEFROMCHAR).
<LI>Retrieves the amount of lines before a specified character position in
   the text box (EM_LINEINDEX).
<LI>Retrieves the amount of characters in a specified line in the text box
   (EM_LINELENGTH).
<LI>Replaces specified text with another text string (EM_REPLACESEL).
<P>
</UL>For a separate article that explains how to specify the amount of text
allowable within a text control, query on the following word in the
Microsoft Knowledge Base:
<P>
<PRE>   EM_LIMITTEXT

</PRE><h2>MORE INFORMATION</h2>
 
<P>
NOTE: As of 3/25/92, the code below corrects the VBKNOWLG.HLP file shipped
with the Microsoft Professional Toolkit for Visual Basic version 1.0 for
Windows.
<P>
NOTE: Using the SelStart, SelLength, and SelText properties may be easier
than using EM_GETSEL and EM_REPLACESEL below.
<P>
The Windows API file USER.EXE defines the SendMessage function that returns
or performs a specific event on your edit control. To create an example
that displays specific information about your edit control, do the
following:

<OL><P><LI>Create a form (Form1), and add the following controls and properties:
<P>
<PRE>   Control    Control Name    Height   Left    Top     Width
   ------------------------------------------------------------
   Label      aGetLine                 360     120
   Label      aGetLineCount            360     480
   Label      aGetSel                  360     840
   Label      aLineFromChar            360     1200
   Label      aLineIndex               360     1560
   Label      aLineLength              360     1920
   Label      aReplaceSel              360     2280
   Command    Command1        375      360     2640    1815
   Text       Text1           1815     2640    480     3495
   Text       Text2           375      2520    2640    3615

</PRE><P><LI>Set each label's AutoSize property to True.

<P><LI>Set the Text1.MultiLine property to True.

<P><LI>Change the Command1.Caption to "Insert this text ---&gt;".

<P><LI>Add the following code to the global Declarations section of Form1:
<P>
<PRE>   Private Declare Function GetFocus% Lib "user" ()
   ' Enter the following Declare as one, single line:
   Private Declare Function SendMessage&amp; Lib "user"(ByVal hWnd%, ByVal
</PRE></OL>wMsg%,
<P>
<PRE>         ByVal wParam%, ByVal lParam As Any)
   ' lParam is actually a double word, or long, but declaring
   ' lParam "As Any" allows flexibility for certain cases of
   ' using SendMessage.

</PRE><P><LI>After adding the code listed below to your form, run the program.
   Whenever a key is released, the labels will be updated with the new
   information about your text box.
<P>
<PRE>   Private Sub Form_Load ()
      Show
      X% = fReplaceSel("")   '* Used to display the correct text.
   End Sub

   Private Sub Text1_KeyUp (KeyCode As Integer, Shift As Integer)
      '* Update the text control information whenever the key
      '* is pressed and released.
      CharPos&amp; = fGetSel()
      LineNumber&amp; = fLineFromChar(CharPos&amp;)
      X% = fGetLine(LineNumber&amp;)
      X% = fGetLineCount()
      X% = fLineIndex(LineNumber&amp;)
      X% = fLineLength(CharPos&amp;)
   End Sub

   Private Sub Command1_Click ()
      '* This routine will insert a line of text at the current location
      '* of the caret.

      D$ = Text2.text
      CharPos&amp; = fGetSel()
      X% = fReplaceSel(D$)
      X% = fSetSel(CharPos&amp;)

      '* Text has been inserted at the caret location.  No update the
      '* text controls information.
      Call Text1_KeyUp(0, 0)
      Text1.SetFocus
   End Sub

   Private Function fGetLineCount&amp; ()
      '* This function will return the number of lines in the edit control.
      Const EM_GETLINECOUNT = &amp;H400 + 10

      Text1.SetFocus
      ' In versions 2.00 and 3.00, you need to use a long integer to avoid
      ' a bad DLL calling convention error message. As an alternative,
      ' you can use the new HWND property instead of GetFocus():
      Pos&amp; = SendMessage(GetFocus(), EM_GETLINECOUNT, 0&amp;, 0&amp;)
      ' Use the following Pos&amp; if you have Visual Basic version 1.0:
      ' Pos&amp; = SendMessage(GetFocus(), EM_GETLINECOUNT, 0%, 0%)
      aGetLineCount.Caption = "GetLineCount = " + Str$(Pos&amp;)
      fGetLineCount = Pos&amp;
   End Function

   Private Function fGetLine (LineNumber As Long)
      '* This function copies a line of text specified by LineNumber
      '* from the edit control. The first line starts at zero.

      Const MAX_CHAR_PER_LINE = 80
      Const EM_GETLINE = &amp;H400 + 20

      byteLo% = MAX_CHAR_PER_LINE And (255)  '[changed 3/25/92]
      byteHi% = Int(MAX_CHAR_PER_LINE / 256) '[changed 3/25/92, two lines:]
      Buffer$ = chr$(byteLo%) + chr$(byteHi%) + Space$(MAX_CHAR_PER_LINE-2)

      Text1.SetFocus
      Pos&amp; = SendMessage(GetFocus(), EM_GETLINE, CINT(LineNumber), Buffer$)
      aGetLine.Caption = "GetLine = " + Buffer$
      fGetLine = Pos&amp;

   End Function

   Private Function fGetSel&amp; ()
      '* This function returns the starting/ending position of the
      '* current selected text.  This is the current location of the
      '* cursor if start is equal to ending.
      '* LOWORD-start position of selected text
      '* HIWORD-first no selected text

      Const EM_GETSEL = &amp;H400 + 0

      Text1.SetFocus
      location&amp; = SendMessage(GetFocus(), EM_GETSEL, 0, 0&amp;)
      ending% = location&amp; \ &amp;H10000
      starting% = location&amp; And &amp;H7FFF
      aGetSel.Caption = "Caret Location = " + Str$(starting%)
      fGetSel = location&amp; mod 65536
   End Function

   Private Function fLineFromChar&amp; (CharPos&amp;)
      '* This function will return the line number of the line that
      '* contains the character whose location(index) specified in the
      '* third argument of SendMessage. If the third argument is -1,
      '* then the number of the line that contains the first character
      '* of the selected text is returned. If start = end from GetSel,
      '* then the current caret location is used. Line numbers start
      '* at zero.

      Const EM_LINEFROMCHAR = &amp;H400 + 25

      Text1.SetFocus
      Pos&amp; = SendMessage(GetFocus(), EM_LINEFROMCHAR, CINT(CharPos&amp;), 0&amp;)
      aLineFromChar.Caption = "Current Line = " + Str$(Pos&amp;)
      fLineFromChar = Pos&amp;
   End Function

   Private Function fLineIndex (LineNumber As Long)
      '* This function will return the number of bytes that
      '* precede the given line. The returned number reflects the CR/LF
      '* after each line. The third argument to SendMessage specifies
      '* the line number, where the first line number is zero. If the
      '* third argument to SendMessage is -1, then the current line
      '* number is used.

      Const EM_LINEINDEX = &amp;H400 + 11

      Text1.SetFocus
      Pos&amp; = SendMessage(GetFocus(), EM_LINEINDEX, CINT(LineNumber), 0&amp;)
      aLineIndex.Caption = "#Char's before line = " + Str$(Pos&amp;)
      fLineIndex = Pos&amp;
   End Function

   Private Function fLineLength&amp; (CharPos As Long)
      '* This function will return the length of a line in the edit
      '* control. CharPos specifies the index of the character that
      '* is part of the line that you would like to find the length. If
      '* this argument is -1, the current selected character is used as
      '* the index.

      Const EM_LINELENGTH = &amp;H400 + 17
      Text1.SetFocus
      Pos&amp; = SendMessage(GetFocus(), EM_LINELENGTH, CINT(CharPos), 0&amp;)
      aLineLength.Caption = "LineLength = " + Str$(Pos&amp;)
      fLineLength = Pos&amp;
   End Function

   Private Function fSetSel&amp; (Pos&amp;)
      '* This function selects all characters in the current text that
      '* are within the starting and ending positions given by
      '* Location. The low word is the starting position and the high
      '* word is the ending position. If you set start to end, this
      '* can be used to position the cursor within the edit control.

      Const EM_SETSEL = &amp;H400 + 1
      location&amp; = Pos&amp; * 2 ^ 16 + Pos&amp;
      Text1.SetFocus
      X% = SendMessage(GetFocus(), EM_SETSEL, 0%, location&amp;)
      fSetSel = Pos&amp;
   End Function

   Private Function fReplaceSel (Buffer$)
      '* This function will replace the current selected text with the
      '* new text specified in Buffer$. You must call SendMessage with
      '* the EM_GETSEL constant to select text.

      Const EM_REPLACESEL = &amp;H400 + 18
      Text1.SetFocus
      Pos&amp; = SendMessage(GetFocus(), EM_REPLACESEL, 0%, Buffer$)
      aReplaceSel.Caption = "String inserted = " + Buffer$
      fReplaceSel = Pos&amp;
   End Function

</PRE></OL><h2>REFERENCES</h2>
 
<P>
"Programming Windows: The Microsoft Guide to Writing Applications for
Windows 3," Charles Petzold, Microsoft Press, 1990
<P>
"Microsoft Windows Software Development Kit: Reference Volume 1,"
version 3.0.
<P>
WINSDK.HLP file shipped with Microsoft Windows 3.0 Software Development Kit
<P>
The Professional and Enterprise Editions of Visual Basic 4.0 contain all
the necessary SDK references in the MSDN/VB Starter Kit.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 4.00 docerr vb4win vb416<BR>
KBCategory: kbprg kbdocerr kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 7, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

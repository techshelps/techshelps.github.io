

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Validating Text Box Data Causes Extra LostFocus Events </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96846 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1993/03/29">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Using the LostFocus event to validate data in a text box can cause excess LostFocus events after the data is determined invalid and focus is set back to the text box. Setting the focus back to the text box, as is the custom when data is invalid, ca...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBT6,QBV4,QBS0,QADO,QAHP,QAPN,QAO4,QAH4,QATX,QAMB,QAMN,QAKR,QA7O,QAOE,QAHT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Validating Text Box Data Causes Extra LostFocus Events</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96846 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  MS-DOS, version 1.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using the LostFocus event to validate data in a text box can cause excess
LostFocus events after the data is determined invalid and focus is set back
to the text box. Setting the focus back to the text box, as is the custom
when data is invalid, causes a LostFocus event to occur in the control that
just received the focus. If that control is also validating data in its
LostFocus event and no data (or invalid data) is entered, that control
could set the focus back to itself, triggering a LostFocus event in the
text box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To work around the problem, you need to handle the intended LostFocus event
and ignore those generated as a side-effect of handling invalid data. Using
a Dim Shared variable in Visual Basic for Windows or Visual Basic for
MS-DOS, you can use the LostFocus event to validate text box data. A Dim
Shared variable holding either the TabIndex of the next control to be
validated or a flag indicating that any control can be validated next,
allows you to ignore unintended LostFocus events in other controls.
<P>
The example below demonstrates how to use a Dim Shared variable to validate
Text box data in the LostFocus event. The example gives step-by-step
instructions for Visual Basic for Windows, but you can use the exact same
code and controls in Visual Basic for MS-DOS without modification.
<P>
<P><h3>Steps to Create Example</h3>
 
1. Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
<PRE>   if Visual Basic is already running. Form1 is created by default.

</PRE><P><LI>Add two text boxes (Text1 and Text1) to Form1.

<P><LI>Add the following code to the General Declarations section of Form1. (In
   Visual Basic for MS-DOS, add the code to the form-level code.)
<P>
   Dim Shared Focus As Integer
<P>
   Function IsValid (t1 As TextBox) As Integer
<P><PRE>      If t1.Text = "" Then
<PRE></PRE>         IsValid = False
      Else              ' add other data restrictions here
         IsValid = True
      End If
   End Function

</PRE><P><LI>Add the following code to the Form_Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()
      Focus = -1
   End Sub

</PRE><P><LI>Add the following code to the Text1_LostFocus event procedure:
<P>
<PRE>   Sub Text1_LostFocus ()
      If Not IsValid(Text1) And (Focus = -1 Or Focus = Text1.TabIndex) Then
         MsgBox "Text in Text1 invalid"
         Focus = Text1.TabIndex
         Text1.SetFocus
      Else
          Focus = -1
      End If
   End Sub

</PRE><P><LI>Add the following code to the Text2_LostFocus event procedure:
<P>
<PRE>   Sub Text2_LostFocus ()
      If Not IsValid(Text2) And (Focus = -1 Or Focus = Text2.TabIndex) Then
         MsgBox "Text in Text2 invalid"
         Focus = Text2.TabIndex
         Text2.SetFocus
      Else
         Focus = -1
      End If
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S) to run the program. Text
   boxes Text1 and Text2 both contain the default text, their Name
   property.

<P><LI>Delete the text in Text1.

<P><LI>Press the Tab key to move the focus to Text2. The Text1_LostFocus event
   detects that there is no text in the text box, displays a message box
   stating that the text in the Text1 box is invalid, and sets the focus
   back to the Text1 box.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 b_vbmsdos<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

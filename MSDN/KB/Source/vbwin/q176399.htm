

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: VB5.0 OLE Automation Error - 2147418107 (80010005) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176399">
<META NAME="KBModify" CONTENT="1998/01/27">
<META NAME="KBCreate" CONTENT="1997/11/06">
<META NAME="Keywords" CONTENT="vb5all kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When a compiled Visual Basic 5.0 application makes calls to an ActiveX server via a timer event, the following error may occur:      Run-time error '-2147418107 (80010005)': Automation error   CAUSE =====  After the first WM_TIMER event is fired, s...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAGI,QAH4,QAB4,QAPN,QAAP,QAO4,QAEV,QAIF,QDL9,QBWO,QBWN,QAFF,QA5F,QATK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: VB5.0 OLE Automation Error - 2147418107 (80010005)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176399</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a compiled Visual Basic 5.0 application makes calls to an ActiveX
server via a timer event, the following error may occur:
<P>
<PRE>   "Run-time error '-2147418107 (80010005)': Automation error"

</PRE><h2>CAUSE</h2>
 
<P>
After the first WM_TIMER event is fired, subsequent WM_TIMER events cannot
be processed until the first event is completed. The error message equates
to:
<P>
<PRE>   "It is illegal to call out while inside message filter."

</PRE><h2>RESOLUTION</h2>
 
<P>
Three workarounds have been implemented with success:
<P>
<P><h3>Workaround 1</h3>
 
<P>
Set a boolean flag in the timer event (see code listed in the Steps to
Reproduce Behavior section below).

<OL><P><LI>Select Project….Add Module and add a standard module
</OL>2. Type the following code into the module:
<P>
<PRE>   Public flag As Boolean

</PRE><P><LI>   Change the Timer1_Timer event code to read as follows:
<PRE>   Private Sub Timer1_Timer()
        If Not flag Then
           flag = True
           RetStr = t.Test(100000)
           flag = False
        End If
        Text1.Text = RetStr
   End Sub

</PRE></OL>By doing this, the timer can't call the server until the previous call is
completed.
<P>
<P><h3>Workaround 2</h3>
 
<P>
Create the server as a DLL, not an EXE. ActiveX DLLs are in-process
servers. An in-process server would not use Remote Procedure Call engine
(RPC). (See the MORE INFORMATION below.)
<P>
<P><h3>Workaround 3</h3>
 
<P>
Place error handling in effect to ignore the error:
<P>
<PRE>   Private Sub Timer1_Timer()
      On Error Resume Next
      RetStr = t.Test(100000)
   End Sub

</PRE><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Timers in Microsoft Windows are fired by Windows placing WM_TIMER messages
in a windows message queue. For example, an application receives the first
timer's WM_TIMER message in its window proc. This causes Visual Basic to
fire the first timer's Timer event, which calls the ActiveX server through
the Remote Procedure Call engine (RPC) because ActiveX EXE servers run in a
separate process.
<P>
While the Visual Basic application is waiting for the RPC call to complete,
the RPC engine allows the Visual Basic application to sit and poll its
message queue. This is allowed primarily for screen redraw (if WM_PAINT
messages come in because the user was switching around windows), so the
application can update its windows while it is waiting for the RPC call to
complete.
<P>
If, while Visual Basic waits for the first RPC call to complete, it
processes a second WM_TIMER message coming in through the RPC message
filter, this causes Visual Basic to fire the second timer's Timer event,
which attempts to call the ActiveX server again through the RPC engine.
However, the RPC engine explicitly does not allow an application to make an
RPC call when it is in the RPC message filter, so it returns an error that
Visual Basic returns to the user.
<P>
At the point at which Visual Basic gets the WM_TIMER message, there is no
way for Visual Basic to know whether firing the Timer event will cause an
RPC call to be made. In fact, because ActiveX servers can be transparently
remote, there is no way for Visual Basic to know, when it is calling an
object method, whether that method will be routed through the RPC engine.
Thus, there is no way for Visual Basic to know ahead of time that the RPC
engine is going to throw an error.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
Note: Error will not reproduce unless the projects have been compiled.
<P>
<P><h3>Server</h3>
 

<OL><P><LI>Start a new ActiveX EXE project.

<P><LI>Change the following properties:
<P>
<P><PRE>      Project Name:TestDelayServer
      Class Name: cTestClass
</PRE>
<P><LI>Place the following code into cTestClass:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Public Function Test(Optional delay As Long = 1000) as String
<PRE></PRE>         Dim index As Long
         Dim Y As String
         Dim X As String
         Y = "a;lskdjf;laksdjf;lkasjd;flkajsmd;lfkjma;sldkfj;laskdj"
         For index = 1 To delay
             X = Right(Y, CInt(Len(Y) / 2))
             X = ""
         Next
         Test = "I'm here"
      End Function

</PRE><P><LI>Compile the EXE.

<P><LI>Run the EXE to register it.
<P>
</OL><h3>Client</h3>
 

<OL><P><LI>Start a new Standard EXE.

<P><LI>Select TestDelayServer from the Project - References menu.

<P><LI>Insert a Command Button, Timer Control and TextBox Control.

<P><LI>Place the following code into Form1's code window:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Dim t As New TestDelayServer.cTestClass
      Dim f As Form
      Public RetStr As String
</PRE><P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>          Set f = New Form1
          f.Show
      End Sub

      Private Sub Form_Load()
          Timer1.Interval = 1000
          Timer1.Enabled = True
      End Sub

      Private Sub Timer1_Timer()
         RetStr =  t.Test(100000)
         Text1.Text = RetStr
      End Sub

</PRE><P><LI>Save the project.

<P><LI>Compile the EXE.

<P><LI>Run the compiled EXE. Note that the Automation error occurs.
</OL> 
<PRE>Keywords          : vb5all kberrmsg
Technology        : ole
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

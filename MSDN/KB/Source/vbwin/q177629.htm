

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use the OLE_COLOR Property Data Type </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177629">
<META NAME="KBModify" CONTENT="1997/12/08">
<META NAME="KBCreate" CONTENT="1997/12/04">
<META NAME="Keywords" CONTENT="vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  An ActiveX control property can be any valid data type, such as long or string. Visual Basic provides some special data types for ActiveX control properties, such as OLE_COLOR. This article demonstrates how to use the OLE_COLOR data type.  MORE INF...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAG9,QA7O,QAOE,QAMN,QAB5,QAPG,QAHV,QBXS,QANF,QAH4,QBWC,QAP2,QAVX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use the OLE_COLOR Property Data Type</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177629</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An ActiveX control property can be any valid data type, such as long or
string. Visual Basic provides some special data types for ActiveX control
properties, such as OLE_COLOR. This article demonstrates how to use the
OLE_COLOR data type.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The OLE_COLOR data type is internally represented as a 32-bit long integer.
However, what makes OLE_COLOR data type unique is that when a property of
this type is selected, Visual Basic displays the color palette in the
Visual Basic property window and accepts a selection, the same way that the
color palette is displayed for the BackColor property of a Form.
<P>
An OLE_COLOR property can also be used with the standard color selection
window in a custom property page.
<P>
The steps below describe how to create a simple ActiveX control with a
property of type OLE_COLOR.
<P>
<P><h3>Create ActiveX Control</h3>
 
<P>
The following steps describe how to create an ActiveX control, with a
property name ControlColor of type OLE_COLOR. The control will be designed
so the BackColor of the custom control is set to the ControlColor property.

<OL><P><LI>In Visual Basic 5.0, create a new ActiveX Control project.

<P><LI>From the Project menu, choose Project1 Properties. In the Project Name
   field, type "OleColorControl" without the quotes. Click OK.

<P><LI>View the code for the UserControl and copy the following code:
<P>
<P><PRE>      Option Explicit
      Private CurrentColor As OLE_COLOR
</PRE><P>
<P><PRE>      Public Property Get ControlColor() As OLE_COLOR
<PRE></PRE>         'Retrieve the current value of ControlColor

         ControlColor = CurrentColor

      End Property

      Public Property Let ControlColor(ByVal NewColor As OLE_COLOR)
         CurrentColor = NewColor
         UserControl.BackColor = NewColor
         PropertyChanged "ControlColor"

      End Property

      Private Sub UserControl_InitProperties()
         'The InitProperties in this example is optional, however the
         'ReadProperties and WriteProperties are required.
         '
         'Set the default ControlColor value to gray.

         Me.ControlColor = &amp;H8000000F
      PropertyChanged "ControlColor"

      End Sub

      Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
         'Without ReadProperties &amp; WriteProperties the ControlColor
         'property would only work in the design environment.
         'The following line of code reads the BackColor property from the
         'PropertyBag. If there is no value for the BackColor property in
         'the PropertyBag, the default is set to &amp;H8000000F (gray).

         Me.ControlColor = PropBag.ReadProperty("BackColor", &amp;H8000000F)

      End Sub

      Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
         'The following line of code saves the BackColor property to the
         'PropertyBag if the ControlColor property is not set, then set to
         'the default, gray.

         Call PropBag.WriteProperty("BackColor", Me.ControlColor,
      &amp;H8000000F)

      End Sub

</PRE><P><LI>Save the Project and compile the OleColorControl.Ocx.
<P>
</OL><h3>Creating the Test Container</h3>
 
<P>
The test container is designed to test the OleColorControl created in the
steps above.

<OL><P><LI>Create a new Standard EXE project in Visual Basic 5.0. Form1 is created
   by default.

<P><LI>From the Project menu, choose Components. Select the OleColorControl
   created in the above steps.

<P><LI>Add a OleColorControl to Form1.

<P><LI>From the Properties Window, choose the ControlColor property. Note that
   the Color Palette is displayed. Make a selection.

<P><LI>Run the Project.
<P>
   NOTE: Without the use of ReadProperties and WriteProperties, the control
   would still change colors when you selected a new color for ControlColor
   in the design environment. However, because the control gets
   reinitialized when the form is executed, the color would return to gray
   when the form is run.
</OL> 
<PRE>Keywords          : vb5all vb5howto
Version           : WINDOWS:5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Rotate a Pen Windows Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120073">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/08/31">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Some Pen Windows operating systems allow the rotation of the screen from O to 270 degrees to allow for greater comfort for the user's hand. Unfortunately, there is no straightforward way to use this capability from within a Visual Basic program.  H...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIB,QBXT,QA5V,QBS0,QACI,QAFF,QAU9,QATX,QADX,QAK8,QDIR,QANF,QAH4,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Rotate a Pen Windows Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120073</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Some Pen Windows operating systems allow the rotation of the screen from O
to 270 degrees to allow for greater comfort for the user's hand.
Unfortunately, there is no straightforward way to use this capability from
within a Visual Basic program.
<P>
However, if you change some settings in the SYSTEM.INI file, you may be
able to rotate your application relative to the screen. The SYSTEM.INI file
contains the information that Pen Windows operating system looks at as it
loads the display drivers.
<P>
NOTE: The Professional Edition of Visual Basic version 3.0 for Windows has
the Pen Controls, which you can use to create Pen Windows applications. The
Pen Windows operating system is required to load these controls and use
them in your applications. Therefore, the sample code shown in the More
Information section below requires that you have both the Professional
Edition of Visual Basic version 3.0 for Windows and the Pen Windows
operating system, which is available through Original Equipment
Manufacturers (OEMs).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Applicable Settings in the SYSTEM.INI File</h3>
 
<P>
The following entries in SYSTEM.INI relate to the display orientation and
rotation:
<P>
[boot]
display.drv=vgap.drv  ' Sets the video driver that supports inking.
<P>
[Display Driver]
DisplayOrientation=n  ' Specifies the tablet orientation. The value
<PRE>                      ' of n is the number of times the screen and
                      ' tablet have been rotated 90 degrees
                      ' counterclockwise (default is zero).

</PRE>OrientatableDrivers={list of drivers}
<PRE>                      ' Specifies on a single line, the path to the
                      ' rotatable screen drivers.

</PRE>OrientatableDrivers=driver1,driver2,driver3,driver4
<PRE>                      ' Each driver in the line represents the driver
                      ' for 0, 90, 180, 270 degrees right, in that
                      ' order.

</PRE>Using the API calls GetPrivateProfileString, WritePrivateProfileString and
ExitWindows, you can change the display orientation by using the sample
code listed below.
<P>
<P><h3>Step-by-Step Instructions for Creating the Program</h3>
 

<OL><P><LI>Start a new project in Visual Basic. This creates Form1 by default.

<P><LI>Copy and paste the sample code (listed below) into a text document by
   using an editor such as NOTEPAD.EXE.

<P><LI>Review the code in the file line by line. As instructed by the comments
   in the code, change each of the long continued lines of code into one,
   single line of code.

<P><LI>Save the file as a text file with the name PEN.FRM.

<P><LI>Start Visual Basic. Choose the Remove File option from the File menu,
   and remove the default Form1.FRM already in the project.

<P><LI>Choose Add File from the File menu, and add the PEN.FRM file to your
   project.

<P><LI>Choose Project from the Options menu, and select Form1 for the Start Up
   Form in the dialog box.

<P><LI>Run the program. Click the various command buttons to get the different
   rotations written on the buttons.
<P>
</OL><h3>Sample Code</h3>
 
<P>
VERSION 2.00
Begin Form Form1
<PRE>      Caption         =   "Change Screen Orientation"
      ClientHeight    =   3315
      ClientLeft      =   1320
      ClientTop       =   1830
      ClientWidth     =   5925
      Height          =   3780
      Left            =   1230
      LinkTopic       =   "Form1"
      ScaleHeight     =   3315
      ScaleWidth      =   5925
      Top             =   1455
      Width           =   6105
      Begin ListBox List1
         Height          =   1395
         Left            =   240
         TabIndex        =   5
         Top             =   600
         Width           =   2535
      End
      Begin CommandButton Command6
         Caption         =   "270 degrees Orientation"
         Height          =   375
         Left            =   3120
         TabIndex        =   3
         Top             =   1680
         Width           =   2295
      End
      Begin CommandButton Command5
         Caption         =   "180 degrees Orientation"
         Height          =   375
         Left            =   3120
         TabIndex        =   2
         Top             =   1200
         Width           =   2295
      End
      Begin CommandButton Command3
         Caption         =   "Exit"
         Height          =   615
         Left            =   1920
         TabIndex        =   4
         Top             =   2400
         Width           =   1935
      End
      Begin CommandButton Command2
         Caption         =   "90 degrees Orientation"
         Height          =   375
         Left            =   3120
         TabIndex        =   1
         Top             =   720
         Width           =   2295
      End
      Begin CommandButton Command1
         Caption         =   "0 degrees Orientation"
         Height          =   375
         Left            =   3120
         TabIndex        =   0
         Top             =   240
         Width           =   2295
      End
      Begin Label Label1
         Caption         =   "List of Orientations:"
         Height          =   255
         Left            =   240
         TabIndex        =   6
         Top             =   360
         Width           =   1695
      End
   End

   ' Declare the API's used:
   ' Place the following four lines on one, single line:
   Declare Function GetPrivateProfileString Lib "Kernel" (ByVal
      lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault
      As String, ByVal lpReturnedString As String, ByVal nSize As Integer,
      ByVal lpFileName As String) As Integer

   ' Place the following two lines on one, single line:
   Declare Function ExitWindows Lib "User" (ByVal dwReturnCode As Long,
   ByVal wReserved As Integer) As Integer

   ' Place the following three lines on one, single line:
   Declare Function WritePrivateProfileString Lib "Kernel" (ByVal
   lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString
   As Any, ByVal lplFileName As String) As Integer

   ' Dimension the variables to hold each of the display driver's names:
   Dim rotation1$
   Dim rotation2$
   Dim rotation3$
   Dim rotation4$

   ' Set the constant to restart Windows:
   Const EW_RESTARTWINDOWS = &amp;H42

   Sub Command1_Click ()
      ' This will change the screen orientation to 0 deg.

      ' Check to see whether the driver for the degree mode exists:
      If Len(rotation1$) = 0 Then
         ' Place the following two lines on one, single line:
         MsgBox "This Rotation is Not Supported under current system
                 configuration.", 16, "Error Rotating Screen"
         Exit Sub
      End If

      ' Restore screen to normal:
      Call Rotate(rotation1$, "0")
   End Sub

   Sub Command2_Click ()
      ' This will change the screen orientation to 90 deg.

      ' Check to see whether the driver for the degree mode exists:
      If Len(rotation2$) = 0 Then
         ' Place the following two lines on one, single line:
         MsgBox "This Rotation is Not Supported under current system
                 configuration.", 16, "Error Rotating Screen"
         Exit Sub
      End If
      ' Rotate the screen.
      Call Rotate(rotation2$, "1")
   End Sub

   Sub Command3_Click ()
       Unload Me
       End
   End Sub

   Sub Command5_Click ()
      ' This will change the screen orientation to 180 deg.
      ' Check to see whether the driver for the degree mode exists:
      If Len(rotation3$) = 0 Then
         ' Place the following two lines on one, single line:
         MsgBox "This Rotation is Not Supported under current system
                 configuration.", 16, "Error Rotating Screen"
         Exit Sub
      End If
      ' Rotate the screen:
      Call Rotate(rotation3$, "2")
   End Sub

   Sub Command6_Click ()
      ' This will change the screen orientation to 270 deg.
      ' Check to see whether the driver for the degree mode exists:
      If Len(rotation4$) = 0 Then
         ' Place the following two lines on one, single line:
         MsgBox "This Rotation is Not Supported under current system
                 configuration.", 16, "Error Rotating Screen"
         Exit Sub
      End If
      ' Rotate the screen:
      Call Rotate(rotation4$, "3")
   End Sub

   Sub Form_Load ()
      ' Set up the variables for GEtPrivatePrfileString:
      Dim lpApplicationName As String
      Dim lpKeyName As String
      Dim lpszDefault As String
      Dim lpReturnedString As String
      Dim nSize As Integer
      Dim lpFileName As String

      lpReturnedString = Space$(1024)  ' Initialize the buffer to spaces.
      lpFileName = "System.ini"        ' Set fileName to the SYSTEM.INI.
      lpApplicationName = "Display Driver"    ' Set the section name to the
                                              ' Display drivers section.
      lpKeyName = "OrientableDrivers"   ' Obtain the list of orientable
                                        ' drivers.
      nSize = Len(lpReturnedString)     ' Set the size of the return
                                        ' buffer.

      ' Get the list of orientable drivers:
      ' Place the following two lines on one, single line:
      x% = GetPrivateProfileString(lpApplicationName, lpKeyName,
         lpszDefault, lpReturnedString, nSize, lpFileName)
      ' Place the following two lines on one, single line:
      rotation1$ = Mid$(lpReturnedString, 1, InStr(1, lpReturnedString,
         ",") - 1)
      ' Place the following two lines on one, single line:
      rotation2$ = Mid$(lpReturnedString, Len(rotation1$) + 2,
         Len(lpReturnedString))
      rotation2$ = Mid$(rotation2$, 1, InStr(1, rotation2$, ",") - 1)
      ' Place the following two lines on one, single line:
      rotation3$ = Mid$(lpReturnedString, Len(rotation1$) + Len(rotation2$)
         + 3, Len(lpReturnedString))
      rotation3$ = Mid$(rotation3$, 1, InStr(1, rotation3$, ",") - 1)
      ' Place the following two lines on one, single line:
      rotation4$ = Mid$(lpReturnedString, Len(rotation1$) + Len(rotation2$)
         + Len(rotation3$) + 4, Len(lpReturnedString))
      rotation4$ = Mid$(rotation4$, 1, Len(rotation4$))
      ' Fill the list box:
      list1.AddItem "1 - 0 degrees   " &amp; rotation1$
      list1.AddItem "2 - 90 degrees  " &amp; rotation2$
      list1.AddItem "3 - 180 degrees " &amp; rotation3$
      list1.AddItem "4 - 270 degrees " &amp; rotation4$
   End Sub

   Sub Rotate (RotationDriver$, Orientation$)
      ' This sub modifies the SYSTEM.INI file to rotate the screen
      ' orientation.
      Dim lpApplicationName As String
      Dim lpKeyName As String
      Dim lpString As String
      Dim lpFileName As String

      ' Change the display driver entry in the SYSTEM.INI:
      lpFileName = "System.ini"
      lpApplicationName = "boot"
      lpKeyName = "display.drv"
      lpString = Trim$(RotationDriver$)

      ' Place the following two lines on one, single line:
      x% = WritePrivateProfileString(lpApplicationName, lpKeyName,
         lpString, lpFileName)

      ' Change the Display Orientation entry of the SYSTEM.INI:
      lpApplicationName = "Display Driver"
      lpKeyName = "DisplayOrientation"
      lpString = Orientation$

      ' Place the following two lines on one, single line:
      x% = WritePrivateProfileString(lpApplicationName, lpKeyName,
         lpString, lpFileName)

      ' Restart Windows so that the changes will take effect.
      ' Place the following two lines on one, single line:
      MsgBox "The system will now restart so that the changes can be made",
         16, "Change screen Orientation"
      x% = ExitWindows(EW_RESTARTWINDOWS, 0&amp;)
   End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
Pen Windows API section of Microsoft Developer Network (MSDN) CD 7.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 penwindows<BR>
KBCategory: kbprg kbcode<BR>
KBSubCategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

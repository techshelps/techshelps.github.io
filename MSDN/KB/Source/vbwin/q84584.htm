

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB Grid Custom Control Refreshes on All Cell Change Events </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q84584 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/05/17">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Grid custom control (GRID.VBX) will refresh (update the control's contents) on all change events occurring to cells in the grid. So, for example, when you enter text into a cell in the grid, a refresh of the grid occurs after every letter of a ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAXB,QARR,QBT6,QBV4,QAH4,QAO4,QAPN,QAHP,QBS0,QBXS,QAFF,QA5V,QAY4,QAMN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB Grid Custom Control Refreshes on All Cell Change Events</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q84584 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Professional Toolkit for Microsoft Visual Basic programming
<PRE>  system for Windows, versions 1.0, 2.0, and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Grid custom control (GRID.VBX) will refresh (update the control's
contents) on all change events occurring to cells in the grid. So, for
example, when you enter text into a cell in the grid, a refresh of the
grid occurs after every letter of a word is entered. This behavior is
by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
It is normal behavior for the Grid control to refresh whenever a
change occurs to a cell contained in it. This is desirable behavior,
because it ensures that current information is always displayed in the
grid.
<P>
However, slowdowns due to the refreshing time can be a problem. If a
grid is large enough, it can take a significant amount of time to
refresh it. If there is a large number of data items to enter, the
wait is compounded. There is no way to toggle the refresh of the grid
when text is entered into a cell; it always occurs. However, there are
methods to minimize the number of change events that occur to the grid,
thus minimizing the wait. Two of these methods are shown below.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start Visual Basic for Windows or from the File menu, choose New
   Project (ALT F N) if Visual Basic for Windows is already
   running. Form1 is created by default.

<P><LI>From the File menu, choose Add File. In the Files box, select the
   GRID.VBX custom control file. The Grid tool appears in the
   Toolbox.

<P><LI>Add a Grid control to default Form1 by double-clicking its icon
   in the Toolbox. Also add a text box control in the same manner.

<P><LI>Set the following properties for Grid1: Cols = 10, Rows = 20. Size
   the grid so that you can see all the columns and rows. Also, set
   the Text property of Text1 to "" (blank).

<P><LI>Add the following code:
<P>
<PRE>   Sub Form_Load ()
      Form1.Show               ' This code fills the grid with ASCII values
      For columns = 0 To 9     ' to show the effect of refreshing Grid1.
         For rows = 0 To 9
            Grid1.Row = rows
            Grid1.Col = columns
            Grid1.Text = Chr$(63 + rows + columns)
         Next rows
      Next columns
      Text1.SetFocus
   End Sub

   Sub Text1_KeyPress (KeyAscii As Integer)
      Grid1.Text = Text1.Text  ' This sets the contents of Grid1.Text to
   End Sub                     ' what is entered into Text1.

</PRE><P><LI>Press the F5 key to run the program.
<P>
   Enter some text into Text1. Notice how every entry on the keyboard
   causes the grid to update. You can tell this is occurring by the
   flickering of the contents of Grid1 on every key press.
<P>
   If direct entry of data into a cell is desired, a slight
   modification to the code above significantly reduces the number of
   times the grid refreshes. The code below allows entry of text into
   a text box, and the contents are transferred to a cell in the grid
   when the user presses the ENTER key. To demonstrate this behavior,
   change the code in the Text1_KeyPress event to the following:
<P>
<PRE>   Sub Text1_KeyPress (KeyAscii As Integer)
      If KeyAscii = 13 Then       ' Did the user press the ENTER key?
         Grid1.Text = Text1.Text  ' Yes - assign Text1.Text to Grid1.Text.
         KeyAscii = 0             ' Suppresses the default "beep" sound.
         Text1.Text = ""          ' Clear the text box for the next entry.
      End If
   End Sub

   This change filters the input somewhat by only updating Grid1.Text
   when the user presses the ENTER key. (If you want to change it to
   some other value, use a different KeyAscii value.) The benefit of
   this method is that an update only occurs whenever the user presses
   the ENTER key, not on every key press event.

   Yet another alternative is to first store the data entered in the
   text box into an array. Then, when data entry is complete,
   transfer the contents of the array to the grid. This forces all
   changes to the grid to be done in one refresh, thus reducing the
   total waiting time required for the grid to refresh. To
   accomplish this, do the following:

</PRE><P><LI>Add a command button to Form1. Set the Caption property to "Place
   array items into grid".

<P><LI>Add the following code to the general Declarations section of Form1:
<P>
   Dim Words$(100)
   Dim GridNum As Integer
<PRE>   ' (Add the following to the Command1 Click event procedure:)

   Sub Command1_Click ()
      For y = 0 To (GridNum - 1)
         Grid1.Row = Int(19 * Rnd + 1) ' Sets the row &amp; column to a random
         Grid1.Col = Int(9 * Rnd + 1)  ' place in the grid, and prints the
         Grid1.Text = Words$(y)        ' item there.
      Next y
      Erase Words$             ' Clears the array.
      GridNum = 0              ' Resets the array item counter.
      Text1.SetFocus           ' Sets the focus back to the text box.
   End Sub

</PRE><P><LI>Replace the code in the Text1_KeyPress event of Form1 with the
   following:
<P>
<PRE>   Sub Text1_KeyPress (KeyAscii As Integer)
      If KeyAscii = 13 Then
         Words$(GridNum) = Text1.Text ' Transfers contents of Text1.Text
                                      ' to a string array.
         Text1.Text = ""
         GridNum = GridNum + 1  ' Increments the array item counter to
                                ' prepare for the next word to be
                                ' entered.
         Debug.Print GridNum    ' Prints the current record number in
                                ' the immediate window. (optional)
         KeyAscii = 0
      End If
   End Sub

</PRE><P><LI>Press the F5 key to run the program. Enter a few words, pressing the
<P><PRE>    ENTER key after each word. Notice that the grid does not refresh after
    the ENTER key is pressed. The items are being placed into an array with
    each press of the ENTER key. When you are finished, choose Command1 to
    place the new items in the grid. The grid will refresh only once now,
    as the new items are randomly placed in the grid.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsCus<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

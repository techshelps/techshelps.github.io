

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Long Field Names May Cause GP Fault in VB.EXE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113281">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1994/03/30">
<META NAME="Keywords" CONTENT="APrgDataIISAM kbbuglist kbinterop kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic may generate a general protection (GP) fault when attempting to compile or run from within the environment or in VB.EXE at 002F:????. The offset may vary. 002F:08AF, 002F:0293, 002F:0860 were reproduced in testing with the code in this...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBKN,QAH4,QAUJ,QA7O,QA7N,QBXS,QAY2,QBWS,QA5E,QAKP,QAZV,QA5F,QAMA,QDKY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Long Field Names May Cause GP Fault in VB.EXE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113281</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbinterop kbprg kbbuglist
<P>
 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows, version 3.0
 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Visual Basic may generate a general protection (GP) fault when attempting
to compile or run from within the environment or in VB.EXE at 002F:????.
The offset may vary. 002F:08AF, 002F:0293, 002F:0860 were reproduced in
testing with the code in this article.
<P>
<P><h2>CAUSE</h2>
 
<P>
When Visual Basic attempts to parse the code for compilation as it is
creating an EXE or attempting to run from within the Visual Basic
environment, a GP fault occurs if the field name accessed by the Table
object is longer than 41 characters and there is a space in the name.
<P>
If you do not have a space in the name, Visual Basic will give you an
"Identifier too long" error message.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Replace the problem line of code to avoid the problem. For example, using
the code listed in the "Steps to Reproduce Problem" below:
<P>
Replace: TB![AFieldNameThisLong CausesTheUAEPromlemInVBEXE] = 6
<PRE>         ' Problem line of code

with:    X$ = "AFieldNameThisLong CausesTheUAEPromlemInVBEXE"
         TB.Fields(X$).value = 6

</PRE>or:    TB.Fields("AFieldNameThisLong CausesTheUAEPromlemInVBEXE").Value = 6
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. We are researching this problem and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Problem</h3>
 
<P>
To re-create the problem, you must first create the sample database with
the long field name in it. This can be done using the Data Manager
(DATAMGR.EXE).

<OL><P><LI>Run DATAMGR.EXE. The file should be in your \VB directory.

<P><LI>Choose New Database from the File Menu. Then choose the Microsoft Access
   1.1 Database option, and enter the name TESTDB.MDB.

<P><LI>You will now see the Tables dialog box. From here choose the New command
   button, and enter the name Table1.

<P><LI>From the Fields dialog box, choose the New command button to add a new
   field. Give the field this name:
<P>
<P><PRE>       AFieldNameThisLong CausesTheUAEProblemInVBEXE
</PRE>
<P><LI>Make the field type an integer, and then exit the Data Manager.
   TESTDB.MDB is now created.
<P>
</OL>Enter the following code from the Visual Basic environment. It is not
necessary that the database TESTDB.MDB already exist. The GP fault occurs
while the code is being parsed and before it can be run.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button (Command1) to the form.

<P><LI>Add the following code to the Command1_Click event:
<P>
<PRE>   Sub Command1_Click ()
      Dim DB As Database
      Dim TB As Table
      Set DB = OpenDatabase("TestDB.MDB")
      Set TB = DB.OpenTable("Table1")
      TB.AddNew
      ' Error occurs on the following line
      TB![AFieldNameThisLong CausesTheUAEPromlemInVBEXE] = 6
      TB.Close
      DB.Close
   End Sub

</PRE><P><LI>Choose Make EXE or attempt to run the code from the environment. A GP
   fault is the result.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: buglist3.00 GPF gp-fault fixlist4.00<BR>
KBCategory: kbinterop kbprg kbbuglist<BR>
KBSubcategory: APrgDataIISAM<BR>
Keywords          : APrgDataIISAM kbbuglist kbinterop kbprg<BR>
Version           : 3.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

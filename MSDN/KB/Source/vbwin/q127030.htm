

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Find a Window Handle Based on an Instance Handle </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q127030">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1995/03/09">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Shell function in Microsoft Visual Basic is used to execute an application. Often, it is useful to get a Window handle (hWnd) to the application so you can manipulate it using the Windows APIs. Unfortunately, the Shell function returns an Insta...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAY5,QBS0,QBV8,QAB9,QAUD,QABI,QABH,QA01,QAGQ,QACJ,QBIC,QAJH,QANF,QAGU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Find a Window Handle Based on an Instance Handle</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q127030</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Shell function in Microsoft Visual Basic is used to execute an
application. Often, it is useful to get a Window handle (hWnd) to the
application so you can manipulate it using the Windows APIs. Unfortunately,
the Shell function returns an Instance handle (hInstance), which is
different from a Window handle. This article shows by example how to use
the GetWinHandle() function to return a Window handle based on an Instance
handle.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
By using the FindWindow() and GetWindow() APIs, you can loop through the
Window handle list. For each window handle, you can check to see if it has
a parent window with GetParent(). If the Window handle does not have a
parent handle, you've reached the main window for an application. You can
call GetWindowWord() to check the instance handle of the application versus
the instance handle received from the Shell() function.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic (ALT, F, N). Form1 is created by
   default.

<P><LI>Add a new module to the project (ALT, F, M), and enter the following
   declarations and function:
<P>
<PRE>   ' Constants used
   Global Const GW_HWNDNEXT = 2
   Global Const GWW_HINSTANCE = (-6)

   ' Enter each of the following declarations as one, single line:
   Declare Function GetParent Lib "User" (ByVal hWnd As Integer) As Integer
   Declare Function GetWindow Lib "User" (ByVal hWnd As Integer,
      ByVal wCmd As Integer) As Integer
   Declare Function GetWindowWord Lib "User" (ByVal hWnd As Integer,
      ByVal nIndex As Integer) As Integer
   Declare Function FindWindow Lib "User" (ByVal lpClassName As Any,
      ByVal lpWindowName As Any) As Integer
   Declare Function GetWindowText Lib "User" (ByVal hWnd As Integer,
      ByVal lpString As String, ByVal aint As Integer) As Integer

   Function GetWinHandle (hInstance%) As Integer
      ' Function receives an instance handle as a parameter and returns
      ' the windows handle of the window with a matching instance handle.
      Dim tempHwnd%

      ' Grab the first window handle that Window's finds:
      tempHwnd% = FindWindow(0&amp;, 0&amp;)

      ' Loop until there are no more window handles:
      Do Until tempHwnd% = 0
        ' Check if you have the applications Parent window:
        If GetParent(tempHwnd%) = 0 Then

             ' Check the instance handle for the app:
             If hInstance% = GetWindowWord(tempHwnd%, GWW_HINSTANCE) Then
               ' Found a match:
               GetWinHandle = tempHwnd%
               Exit Do
             End If
         End If
         tempHwnd% = GetWindow(tempHwnd%, GW_HWNDNEXT)
      Loop
   End Function

</PRE><P><LI>Add a command button (Command1) to Form1, and place the following code
   in its Click event.
<P>
<PRE>   Sub Command1_Click ()
      Dim hInst As Integer         ' Instance handle from Shell function.
      Dim hWndApp As Integer       ' Window handle from GetWinHandle.
      Dim buffer As String         ' Holds caption of Window.
      Dim numChars As Integer      ' Count of bytes returned.

      ' Shell to an application and get its window handle:
      hInst = Shell("calc.exe")
      hWndApp = GetWinHandle(hInst)

      ' Verify that you have the correct handle by displaying
      ' its window caption in a message box:
      buffer = Space$(128)
      numChars = GetWindowText(hWndApp, buffer, Len(buffer))

      MsgBox "You shelled to the Application: " &amp; Left$(buffer, numChars)
   End Sub

</PRE><P><LI>Press the F5 key to run the application. Click the command button to see
   that the Calculator is shelled to and to see a message box displaying
   "You shelled to the Application: Calculator."
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubCategory: APrgWindow<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

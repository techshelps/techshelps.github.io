

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Manipulate Icons in the System Tray with Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162613">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1997/01/24">
<META NAME="Keywords" CONTENT="APrgOther">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  One of the new features of the Windows 95 and Windows NT 4.0 user interface is the taskbar status area. This article demonstrates how to use Visual Basic to add, modify, and delete status or notification indicators in the taskbar status area.  MORE...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEV,QANS,QBS0,QAY5,QAPN,QAH6,QAD7,QAKD,QAH7,QAYC,QAB9,QBV8,QAMN,QBWS,QAKJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Manipulate Icons in the System Tray with Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162613</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
One of the new features of the Windows 95 and Windows NT 4.0 user interface
is the taskbar status area. This article demonstrates how to use Visual
Basic to add, modify, and delete status or notification indicators in the
taskbar status area.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The taskbar status area is located to the right of the Start button,
and provides you with status or notification indicators about your
programs. Icons with ToolTips are typically used as indicators in the
taskbar status area. The following are some examples of how to use the
taskbar status area:

<UL><LI>You can adjust the consumption level of your laptop's batteries by
   clicking a vertical graph in the taskbar status area and adjusting it
   in the window that appears. The graph indicates the amount of power
   left in your laptop computer's batteries.

<LI>You can track your favorite stock by creating an icon that changes
   when your stock changes price. Click the icon to display a chart of
   the stock.

<LI>You can adjust the volume control on a multimedia device by clicking
   the icon and displaying more controls.
<P>
</UL>To manipulate an icon in the taskbar status area, use the Windows API
function Shell_NotifyIcon in the Shell32.dll file. This function allows you
to add, modify, delete, set a ToolTip string, and send a callback message
to execute mouse events. Visual Basic does not directly accept callback
messages or functions. However, there are three ways to work around this
limitation:

<OL><P><LI>The Hard Way: Create a control that accepts callbacks. Refer to the
   Microsoft Systems Journal article cited in the References section of
   this article for a way to create a control that accepts callbacks. To
   create this control, you need Visual C++.

<P><LI>The Easy Way: Use a third-party control that intercepts messages, such
   as the Message Blaster control.

<P><LI>The Simple Way: Use a Visual Basic intrinsic control to serve as a
   Window that reacts to the callback message. This article contains a
   sample program that uses this method. With this method, you want to use
   an event in a control that is rarely used. The event will be exclusively
   used to process the callback message.
<P>
</OL>The next section explains the Shell_NotifyIcon function and the
requirements to use this function.
<P>
<P><h3>Shell_NotifyIcon Function</h3>
 
<P>
You use the Shell_NotifyIcon function to send a message to a system to add,
modify, or delete an icon from the taskbar status area. The function
returns True if the message is sent successfully or False if the function
is unsuccessful. The arguments of the functions are as follows:
<P>
<PRE>   dwMessage: A message to execute an action. This parameter can be one of
   the following values:

      NIM_ADD: Adds an icon to the status area.
      NIM_DELETE: Deletes an icon from the status area.
      NIM_MODIFY: Modifies an icon in the status area.

   The values of these messages can be found in the header file,
   Shellapi.h.

   pnid: A pointer to a NOTIFYICONDATA structure. To pass this argument to
   the function, create a user-defined data type called NOTIFYICONDATA
   (shown later in this section) and pass this data type by value.

</PRE></OL>The NOTIFYICONDATA structure contains the following elements:
<P>
<PRE>   cbSize: Passes the size of the NOTIFYICONDATA data type.
      Data Type: Long.
      Value: Use the Len function with the variable declared as this data
      type as the argument.

   hWnd: Handle of the window used to receive the notification message.
      Data Type: Long.
      Value: The hWnd property of the control used to receive this message.

   uId: Identifier of the icon in the status area.
      Data Type: Long.
      Value: Any value within the limits of the Long data type. The sample
      program uses vbNull.

   uFlags: Array of flags that indicate which of the other members contain
   valid data.
      Data Type: Long.
      Value: Any combination of the following constants to indicate that
      the member of this structure is valid and will be used:

         NIF_ICON: Passing this flag indicates that the value for the
         hIcon will be the icon that appears in the taskbar status area.

         NIF_MESSAGE: Passing this flag indicates that the uCallBackMessage
         value will be used as the callback message.

         NIF_TIP: Passing this flag indicates that the value of szTip will
         be used as the ToolTip for the icon in the taskbar status area.

   uCallBackMessage: Identifier of the notification message sent to the
   window that is used to receive the messages.
      Data Type: Long.
      Value: The message used to identify that a mouse event has occurred
      within the rectangular boundaries of the icon in the taskbar status
      area.

   hIcon: Handle of the icon that is displayed in the taskbar status area.
      Data Type: Long.
      Value: The image that will be used as an icon in the taskbar status
      area. This can be the icon property of a control, an image from an
      image control, or any icon image.

   szTip: String to be used as the ToolTip text.
      Data Type: Fixed-length string 64 bytes long.
      Value: Any null-terminated string under 64 bytes.

</PRE>The next section explains how to use this function in a sample program to
manipulate icons in the taskbar status area.
<P>
<P><h3>The Sample Program</h3>
 
<P>
The sample program consists of a form containing two command buttons and
the common dialog box control. When you click Add Icon, you set the values
of the NOTIFYICONDATA data type. In this data type, you set the following
values:
<P>
<PRE>   cbSize: The length of the variable that uses the Len function.

   hWnd: The handle of the window used to receive the callback messages. In
   the sample program, the form is used as the window to receive the
   messages.

   uId: The icon identifier. Although you can use any number, the sample
   program uses the vbNull constants.

   uFlags: Array flags indicate what members of this structure are valid.
   The sample program uses all the flags for maximum versatility.

   uCallBackMessage: The message that is sent when mouse activity occurs on
   the icon in the taskbar status tray. The mouse message that is sent maps
   to a mouse event in the control specified in the hWnd value. You should
   use a mouse message that can handle the messages exclusively. For
   example, the sample program uses the WM_MOUSEMOVE message because this
   message maps to the MouseMove event of the form. Rarely used in its
   intended form, the MouseMove event is a suitable event for this purpose.

   hIcon: The icon that is to be displayed in the taskbar status area. The
   sample program uses the form icon.

   szTip: The ToolTip string. The string must be terminated with a null
   character so the vbNullChar constant is concatenated to the string.

</PRE>After setting the data, you then call the Shell_NotifyIcon function and
pass the NOTIFYICONDATA along with a message to add the icon to the taskbar
status area.
<P>
When you pass the mouse pointer over the icon in the taskbar status area,
the form receives the message WM_MOUSEMOVE. This message maps to the form's
MouseMove event. The X argument is the product of one of the mouse
constants that indicates the mouse input (such as a left-click,
right-click, single-click, or double-click) and the TwipsPerPixelX property
of the screen. The mouse input is produced by dividing the X argument with
this property. The mouse input is then used in a Select Case statement to
execute a series of instructions.
<P>
For example, when you double-click the icon, the common dialog box appears
and allows you to select a different icon. The hIcon value of the
NOTIFYICONDATA data type is changed to the new icon. The Shell_NotifyIcon
function is called with the new data type and a message to modify the icon
in the taskbar status area.
<P>
If you right-click the icon, you execute the InputBox function that changes
the ToolTip text. The new string is null terminated with the vbNullChar
constant and the szTip value is changed to the new string. The
Shell_NotifyIcon function is called with the new NOTIFYICONDATA data and a
message to modify the icon.
<P>
When you click Delete Icon or exit the application, the Shell_NotifyIcon
function is called with a message to delete the icon.
<P>
<P><h3>Steps To Create Sample Program</h3>
 

<OL><P><LI>Start Visual Basic. If it is already running, go to the File menu and
   click New Project.

<P><LI>Place two CommandButtons and a common dialog box control on Form1.

<P><LI>Copy the following code to the Form1 code window:
<P>
<P><PRE>      'Declare a user-defined variable to pass to the Shell_NotifyIcon
      'function.
      Private Type NOTIFYICONDATA
<PRE></PRE>         cbSize As Long
         hWnd As Long
         uId As Long
         uFlags As Long
         uCallBackMessage As Long
         hIcon As Long
         szTip As String * 64
      End Type

      'Declare the constants for the API function. These constants can be
      'found in the header file Shellapi.h.

      'The following constants are the messages sent to the
      'Shell_NotifyIcon function to add, modify, or delete an icon from the
      'taskbar status area.
      Private Const NIM_ADD = &amp;H0
      Private Const NIM_MODIFY = &amp;H1
      Private Const NIM_DELETE = &amp;H2

      'The following constant is the message sent when a mouse event occurs
      'within the rectangular boundaries of the icon in the taskbar status
      'area.
      Private Const WM_MOUSEMOVE = &amp;H200

      'The following constants are the flags that indicate the valid
      'members of the NOTIFYICONDATA data type.
      Private Const NIF_MESSAGE = &amp;H1
      Private Const NIF_ICON = &amp;H2
      Private Const NIF_TIP = &amp;H4

      'The following constants are used to determine the mouse input on the
      'the icon in the taskbar status area.

      'Left-click constants.
      Private Const WM_LBUTTONDBLCLK = &amp;H203   'Double-click
      Private Const WM_LBUTTONDOWN = &amp;H201     'Button down
      Private Const WM_LBUTTONUP = &amp;H202       'Button up

      'Right-click constants.
      Private Const WM_RBUTTONDBLCLK = &amp;H206   'Double-click
      Private Const WM_RBUTTONDOWN = &amp;H204     'Button down
      Private Const WM_RBUTTONUP = &amp;H205       'Button up

      'Declare the API function call.
      Private Declare Function Shell_NotifyIcon Lib "shell32" _
         Alias "Shell_NotifyIconA" _
         (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean

      'Dimension a variable as the user-defined data type.
      Dim nid As NOTIFYICONDATA

      Private Sub Command1_Click()
         'Click this button to add an icon to the taskbar status area.

         'Set the individual values of the NOTIFYICONDATA data type.
         nid.cbSize = Len(nid)
         nid.hWnd = Form1.hWnd
         nid.uId = vbNull
         nid.uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
         nid.uCallBackMessage = WM_MOUSEMOVE
         nid.hIcon = Form1.Icon
         nid.szTip = "Taskbar Status Area Sample Program" &amp; vbNullChar

         'Call the Shell_NotifyIcon function to add the icon to the taskbar
         'status area.
         Shell_NotifyIcon NIM_ADD, nid
      End Sub

      Private Sub Command2_Click()
         'Click this button to delete the added icon from the taskbar
         'status area by calling the Shell_NotifyIcon function.
         Shell_NotifyIcon NIM_DELETE, nid
      End Sub

      Private Sub Form_Load()
         'Set the captions of the command button when the form loads.
         Command1.Caption = "Add an Icon"
         Command2.Caption = "Delete Icon"
      End Sub

      Private Sub Form_Terminate()
         'Delete the added icon from the taskbar status area when the
         'program ends.
         Shell_NotifyIcon NIM_DELETE, nid
      End Sub

      Private Sub Form_MouseMove _
         (Button As Integer, _
          Shift As Integer, _
          X As Single, _
          Y As Single)
          'Event occurs when the mouse pointer is within the rectangular
          'boundaries of the icon in the taskbar status area.
          Dim msg As Long
          Dim sFilter As String
          msg = X / Screen.TwipsPerPixelX
          Select Case msg
             Case WM_LBUTTONDOWN
             Case WM_LBUTTONUP
             Case WM_LBUTTONDBLCLK
             CommonDialog1.DialogTitle = "Select an Icon"
             sFilter = "Icon Files (*.ico)|*.ico"
             sFilter = sFilter &amp; "|All Files (*.*)|*.*"
             CommonDialog1.Filter = sFilter
             CommonDialog1.ShowOpen
             If CommonDialog1.filename &lt;&gt; "" Then
                Form1.Icon = LoadPicture(CommonDialog1.filename)
                nid.hIcon = Form1.Icon
                Shell_NotifyIcon NIM_MODIFY, nid
             End If
             Case WM_RBUTTONDOWN
                Dim ToolTipString As String
                ToolTipString = InputBox("Enter the new ToolTip:", _
                                  "Change ToolTip")
                If ToolTipString &lt;&gt; "" Then
                   nid.szTip = ToolTipString &amp; vbNullChar
                   Shell_NotifyIcon NIM_MODIFY, nid
                End If
             Case WM_RBUTTONUP
             Case WM_RBUTTONDBLCLK
          End Select
      End Sub

</PRE><P><LI>Press the F5 key to run the project or on the Tools menu, click Run
   Project. Click Add Icon to add an icon to the taskbar status area.
   Double-click the icon to change the icon. Right-click the icon to change
   the ToolTip string. Click Delete Icon to remove the icon from the
   taskbar status area.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
"Hardcore Visual Basic," Bruce McKinney, Microsoft Press, 1995
Microsoft Win32 SDK, Shell_NotifyIcon and NOTIFYICONDATA
"Microsoft Systems Journal," February 1996, "The Visual Programmer," page
93, Joshua Trupin
"Visual Basic Programmer's Journal," March 1996, "Q &amp; A," page 136, Carl
Franklin
 
<PRE>Keywords          : APrgOther
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Troubleshooting Tips for the MSComm Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143113">
<META NAME="KBModify" CONTENT="1996/11/11">
<META NAME="KBCreate" CONTENT="1996/01/28">
<META NAME="Keywords" CONTENT="kbusage kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The MSComm control encapsulates much of the functionality provided by the communications functions of the Windows API. This encapsulation makes these functions easier to use but does limit the functionality of the MSComm control. Here are some tips...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBWO,QDJ9,QABA,QBWS,QAOE,QAB5,QA7O,QAMN,QDL9,QBWQ,QBWN,QAPN,QAO0,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Troubleshooting Tips for the MSComm Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 11, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143113</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard, Professional, and Enterprise Editions of Microsoft Visual
<PRE>  Basic, 16-bit and 32-bit, for Windows, version 4.0
</PRE>- Standard and Professional Editions of Microsoft Visual Basic, version
<PRE>  3.0, for Windows
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The MSComm control encapsulates much of the functionality provided by the
communications functions of the Windows API. This encapsulation makes these
functions easier to use but does limit the functionality of the MSComm
control. Here are some tips for troubleshooting the MSComm control.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>If you are using Visual Basic 3.0, make sure that you are using the
   updated MSComm.VBX, dated 5/12/93. If you do not have the updated
   MSComm.VBX, you can download MSComm.Exe, a self-extracting file, from
   the following services:
<P>
<P><PRE>    - Microsoft's World Wide Web Site on the Internet
<PRE></PRE>         On the www.microsoft.com home page, click the Support icon
         Click Knowledge Base, and search for Mscomm.exe
         Open the article, and click the button to download the file

    - Internet (anonymous FTP)
         ftp ftp.microsoft.com
         Change to the Softlib\Mslfiles directory
         Get Mscomm.exe

    - The Microsoft Network
         On the Edit menu, click Go To, and then click Other Location
         Type mssupport
         Double-click the MS Software Library icon
         Find the appropriate product area
         Download Mscomm.exe

    - Microsoft Download Service (MSDL)
         Dial (206) 936-6735 to connect to MSDL
         Download Mscomm.exe

   For additional information, please see the following article(s) in the
   Microsoft Knowledge Base:

      ARTICLE-ID: <B><A HREF="../VBWIN/Q101944.htm">Q101944</A></B>
      TITLE     : UPD: New MSCOMM Control Available

</PRE><P><LI>If you are using Windows for Workgroups 3.11, obtain the updated version
   of SERIAL.386 by downloading WG1001.Exe, a self-extracting file, from
   the Microsoft Software Library (MSL) on the following services:
<P>
<P><PRE>    - Microsoft's World Wide Web Site on the Internet
<PRE></PRE>         On the www.microsoft.com home page, click the Support icon
         Click Knowledge Base, and search for WG1001.EXE
         Open the article, and click the button to download the file

    - Internet (anonymous FTP)
         ftp ftp.microsoft.com
         Change to the Softlib\Mslfiles directory
         Get WG1001.EXE

    - The Microsoft Network
         On the Edit menu, click Go To, and then click Other Location
         Type mssupport
         Double-click the MS Software Library icon
         Find the appropriate product area
         Download WG1001.EXE

    - Microsoft Download Service (MSDL)
         Dial (206) 936-6735 to connect to MSDL
         Download WG1001.EXE

      ARTICLE-ID: <B><A HREF="../VBWIN/Q112418.htm">Q112418</A></B>
      TITLE     : BUG: Serial Port Driver for WFW 3.11 Sends Extra Byte

</PRE><P><LI>Use the Windows Accessories Terminal application (HyperTerminal in
   Windows 95) to determine if a connection can be established independent
   of Visual Basic. This will determine if a connection can be made using
   only the communication functions in the Windows API. If a connection can
   not be made, examine the physical elements of the connection. Is the
   proper cable being used? Is it connected to the serial port? If a
   connection can be made, note the settings that were used and use the
   same settings with the MSComm control.

<P><LI>Use the Visual Basic VBTerm and Dialer sample applications with the
   appropriate settings. If these work, use this code as a starting point
   for your application. If they don't work, first try the suggestions
   below on these samples. If these suggestions fix the problem, then use
   the samples as a starting point. Otherwise start with the simplest code
   possible and use the following suggestions as a starting point.

<P><LI>Set the RTSEnable property of the MSComm control to True. Many modems
   and other communication devices use the RTS signal for handshaking.

<P><LI>If the Visual Basic application using the MSComm control is running on a
   Windows for Workgroups 3.11 machine with a 16550AF UART chip and the
   InBufferSize property is greater than 1024, COMxFIFO=0 must be added to
   the [386Enh] section of the System.ini file. This entry disables the
   FIFO buffer of COMx's 16550 UART. If a serial port does not have a 16550
   UART, this setting is ignored. The default value is 1 (enabled).

<P><LI>Set the RThreshold property to 1. If you set the RThreshold property to
   any other value, you may have trouble unless all of your data consists
   of fixed-length packets.

<P><LI>Set the Interval property to 55 for best performance. (The default of
   1000 is too long.)

<P><LI>Set the InputLen property to 0 unless there is an overriding reason not
   to.

<P><LI>Always receive data when data is available. Don't rely on the
<P><PRE>    RThreshold property to tell you if data is available. Use the OnComm
    event procedure. Double-buffer the incoming data. Extract the data from
    the buffer and process it. Clean up the buffer to remove the processed
    data. For example:
</PRE><P>
<P><PRE>    Sub Comm1_OnComm ()
       Static ReceiveBuffer As String
       ReceiveBuffer = ReceiveBuffer &amp; Comm1.Input
       'Always buffer incoming data no matter what generated the OnComm
       'event.
       If Len(ReceiveBuffer &gt;= Limit) Then
<PRE></PRE>         Call Process(Left$(ReceiveBuffer,Limit))
         ReceiveBuffer = Right$(ReceiveBuffer, Len(ReceiveBuffer) - Limit)
         'Cleans-up buffer.
       End If
    End Sub
    'If you are looking for a terminating character sequence instead of
    'length, then the test would use InStr instead of Len.

   This procedure double-buffers the received data and, unless the program
   is bound to fail because of some other performance problems, provides
   good security for the received data. It is extremely important to handle
   every character as it comes in at high baud rates.

</PRE></OL><h2>REFERENCES</h2>
 
<P>
If the MSComm control is not satisfactory, the communication APIs available
in Windows may provide the necessary solution. Daniel Appleman's "Visual
Basic Programmer's Guide To The Windows API" book is an excellent resource
for the 16-bit communications APIs as is the VBComDem sample (<B><A HREF="../VBWIN/Q75856.htm">Q75856</A></B>). For
information on using the 32-bit communications APIs see "Create
Communications Programs for Windows 95 with the Win32 Comm API" in the
December 1994 issue of the Microsoft Systems Journal.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage kbhowto<BR>
KBSubcategory: PrgCtrls<BR>
Additional reference words: 4.00 vb4win vb4all<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 11, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Modify Properties of an Object Passed ByVal </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161308">
<META NAME="KBModify" CONTENT="1997/03/17">
<META NAME="KBCreate" CONTENT="1996/12/19">
<META NAME="Keywords" CONTENT="kbusage vb5all vb5howto VBKBProgramming kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When you pass an object by value to a procedure, you can modify its properties in the procedure. Using ByVal with an object parameter affects how the object can be redefined in the procedure. If an object variable is passed to a procedure by using ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBXS,QAKD,QAH6,QAH7,QAD7,QAFF,QBFY,QABA,QAYL,QAL3,QAOX,QAB9,QANF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Modify Properties of an Object Passed ByVal</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161308</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you pass an object by value to a procedure, you can modify its
properties in the procedure. Using ByVal with an object parameter affects
how the object can be redefined in the procedure. If an object variable is
passed to a procedure by using the ByVal keyword and the object parameter
is set to a different object, the object variable still references the
original object. Conversely, if an object variable is passed to a procedure
by reference and the object parameter is set to a different object, the
object variable references this different object. This article provides
examples that highlight the functionality of the ByVal keyword.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Consider the following sample code where Class1 has one public text
property called Description:
<P>
<PRE>      Private Sub PassByVal(ByVal C As Class1)
         C.Description = "Modified Value"
      End Sub
   
      Private Sub Form_Load()
         Dim MyClass As Class1
         Set MyClass = New Class1
         MyClass.Description = "Original Value"
         PassByVal MyClass
         MsgBox MyClass.Description
      End Sub

</PRE>In this case, the message box displays "Modified Value" even though the
object is passed by value. You might expect that the ByVal would prevent
the procedure from modifying the property. However, when used with objects,
ByVal affects the procedure's ability to redefine the object.
<P>
If an object variable is passed to a procedure by using the ByVal keyword
and the object parameter is set to a different object, the object variable
still references the original object. Consider the following example code
with the same definition of Class1:
<P>
<PRE>      Private Sub PassByValSet(ByVal C As Class1)
         Dim A As Class1
         Set A = New Class1
         A.Description = "New Value"
         Set C = A
      End Sub
   
      Private Sub Form_Load()
         Dim MyClass As Class1
         Set MyClass = New Class1
         MyClass.Description = "Original Value"
         PassByValSet MyClass
         MsgBox MyClass.Description
      End Sub

</PRE>In this case, the message box displays "Original Value" because the
ByVal prevents the procedure from redefining the object with "Set C = A."
This is how ByVal works with objects.
<P>
Conversely, if an object variable is passed to a procedure by reference
and the object parameter is set to a different object, the object variable
references this different object. The following example, using the same
Class1, illustrates this:
<P>
<PRE>      Private Sub PassByRefSet(C As Class1)
         Dim A As Class1
         Set A = New Class1
         A.Description = "New Value"
         Set C = A
      End Sub
   
      Private Sub Form_Load()
         Dim MyClass As Class1
         Set MyClass = New Class1
         MyClass.Description = "Original Value"
         PassByRefSet MyClass
         MsgBox MyClass.Description
      End Sub

</PRE>In this example, the message box displays "New Value" because the object is
passed by reference and the procedure is allowed to redefine it with "Set C
= A."
<P>
If you need to modify an object parameter's properties within a procedure
without modifying the object passed, you need to create a copy of the
object in the procedure. The example of this method below includes all
the points previously discussed.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new Standard EXE project. Form1 is added by default.

<P><LI>Add a CommandButton to Form1.

<P><LI>Add the following code to the General declarations section of Form1:
<P>
<P><PRE>      ' This procedure modifies the description of the object
      ' passed in as expected
      Private Sub PassByRef(C As Class1)
<PRE></PRE>         C.Description = "Modified Value"
      End Sub
   
      ' You might expect that this procedure would not modify the
      ' Description property of the object that was passed in.
      ' However, it does modify it.
      Private Sub PassByVal(ByVal C As Class1)
         C.Description = "Modified Value"
      End Sub
   
      ' This procedure redefines the original object to the new
      ' object with a new value for the description field.
      Private Sub PassByRefAndSet(C As Class1)
         Dim A As Class1
         Set A = New Class1
         A.Description = "New Value"
         Set C = A
      End Sub
   
      ' This procedure does not redefine the original object.
      ' However, within the scope of the procedure, it is redefined.
      Private Sub PassByValAndSet(ByVal C As Class1)
         Dim A As Class1
         Set A = New Class1
         A.Description = "New Value"
         Set C = A
      End Sub
   
      ' This procedure shows how to redefine the object within the
      ' procedure to a copy of itself. Changes made in the locally-
      ' redefined parameter will not be reflected back to the
      ' original object.
      Private Sub PassByValAndCopy(ByVal C As Class1)
         Set C = C.Copy
         C.Description = "Modified Value"
      End Sub
   
      Private Sub Command1_Click()
         Me.AutoRedraw = True
   
         Print "Passing object by reference to modify property ";
         Dim MyClass1 As Class1
         Set MyClass1 = New Class1
         MyClass1.Description = "Original Value"
         PassByRef MyClass1
         Print "results in: "; MyClass1.Description
         Set MyClass1 = Nothing
   
         Print "Passing object by value to modify property ";
         Dim MyClass2 As Class1
         Set MyClass2 = New Class1
         MyClass2.Description = "Original Value"
         PassByVal MyClass2
         Print "results in: "; MyClass2.Description
         Set MyClass2 = Nothing
   
         Print "Passing object by reference to set object ";
         Dim MyClass3 As Class1
         Set MyClass3 = New Class1
         MyClass3.Description = "Original Value"
         PassByRefAndSet MyClass3
         Print "results in: "; MyClass3.Description
         Set MyClass3 = Nothing
   
         Print "Passing object by value to set object ";
         Dim MyClass4 As Class1
         Set MyClass4 = New Class1
         MyClass4.Description = "Original Value"
         PassByValAndSet MyClass4
         Print "results in: "; MyClass4.Description
         Set MyClass4 = Nothing
   
         Print "Passing object by value to set copy of object ";
         Dim MyClass5 As Class1
         Set MyClass5 = New Class1
         MyClass5.Description = "Original Value"
         PassByValAndCopy MyClass5
         Print "results in: "; MyClass5.Description
         Set MyClass5 = Nothing
      End Sub

</PRE><P><LI>Add a Class Module, Class1, to the project.

<P><LI>Put the following code in the Class1 module:
<P>
<P><PRE>      Public Description As String
</PRE>   
<P><PRE>      ' Create a member by member copy of Class1
      Public Function Copy() As Class1
<PRE></PRE>         Dim Ret As Class1
         Set Ret = New Class1
         Ret.Description = Me.Description
         Set Copy = Ret
      End Function

</PRE><P><LI>Save the project.

<P><LI>Run the project, and click the button. The results of the five tests
   should be printed on the form. They should look like this:

</OL></UL><LI>Passing object by reference to modify property results in: Modified
   Value

<LI>Passing object by value to modify property results in: Modified Value

<LI>Passing object by reference to set object results in: New Value

<LI>Passing object by value to set object results in: Original Value

<LI>Passing object by value to set copy of object results in: Original Value
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage vb5all vb5howto VBKBProgramming kbhowto<BR>
Version             : 5.00<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

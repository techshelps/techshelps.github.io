

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Retrieve Info from RAISERROR Function in SQL Server DB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120763">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/09/19">
<META NAME="Keywords" CONTENT="kbinterop kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains how to return the error message generated by the RAISERROR function in Microsoft SQL Server. You can use the RAISERROR function in a SQL stored procedure or trigger on a SQL Server database to set a global error number and ret...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAUD,QABM,QBS0,QAB9,QAY5,QAKP,QBV8,QBXS,QA9E,QALW,QAGI,QAKC,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Retrieve Info from RAISERROR Function in SQL Server DB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120763</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to return the error message generated by the
RAISERROR function in Microsoft SQL Server. You can use the RAISERROR
function in a SQL stored procedure or trigger on a SQL Server database to
set a global error number and return a user-defined error message.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When Visual Basic encounters a return value from the RAISERROR function,
all it knows is that the "ODBC Call Failed" and Err is set to 3146. The
entire ODBC error message is included in the Error$ function. To return the
entire error message generated by the RAISERROR function, use the Error$
function in your error trap routine. For example:
<P>
<PRE>   If Err = 3146 then
      MsgBox Error$
   End If

</PRE>Note that this is different from performing a 'MsgBox Error$(Err)' command,
which returns only the "ODBC Call Failed" message.
<P>
Unfortunately, the only way to return the error number set by RAISERROR is
to include the number in the error message and parse the return string.
However, the Microsoft Access 2.0/Visual Basic 3.0 Compatibility Layer
appends the error number to the end of the error message automatically.
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
The following demonstrates an example stored procedure that generates
a RAISERROR message.

<OL><P><LI>In the SQL Administration Facility (SAF), run the following code to
   create the stored procedure:
<P>
   create procedure my_error @custname varchar(18) = null
   as
   if @custname is null
<P><PRE>      begin
      raiserror 50001 'You Must Enter a Field Name! (#50001)'
</PRE>   end
   else
<P><PRE>      begin
      select * from TempTbl
      where TempTbl.Last_Name = @custname
</PRE>   end

<P><LI>In Visual Basic, start a new project (ALT F, N). Form1 is created by
   default.

<P><LI>Place a command button (Command1) on the form and enter the following
   code in the Click() event:
<P>
<PRE>   Sub Command1_Click ()
      Const DB_SQLPassThrough = 64  ' Set the passthrough constant.

      Dim db As database            ' Dimension the local variables.
      Dim ds As dynaset
      Dim conn As String
      Dim sql As String

      On Error GoTo Trap            ' Set up the error trap.

      ' Append the SQL Server database:
      conn = "odbc;dsn=texas;database=playpen;uid=sa;pwd=;"
      Set db = OpenDatabase("", False, False, conn)

      ' Run the stored procedure:
      sql = "my_error"
      Set ds = db.CreateDynaset(sql, DB_SQLPassThrough)

      ' Print the returned record (never get here because of the error).
      For i = 0 To ds.Fields.Count - 1
         Print ds(i)
      Next i
   Exit Sub

   Trap:
      If Err = 3146 Then   ' ODBC call failed.
          MsgBox Error$
      Else
          MsgBox "Error:" &amp; Err &amp; "-" &amp; Error$
      End If
      On Error GoTo 0
      Exit Sub
   End Sub

</PRE><P><LI>Press the F5 key to run the program. Click the command button, and you
   should get error 3146 with the complete error message including the ODBC
   information and the following user-defined error message:
<P>
   You Must Enter a Field Name! (#50001)
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbinterop kbprg kbcode<BR>
KBSubCategory: APrgDataODBC<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

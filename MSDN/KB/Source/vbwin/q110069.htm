

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use Wildcards in SQL Query to Make Dynasets &amp; Snapshots </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110069">
<META NAME="KBModify" CONTENT="1996/02/18">
<META NAME="KBCreate" CONTENT="1994/01/12">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  You can build a Dynaset or Snapshot based upon wildcard field-search characters in an SQL query. The find methods (FindFirst, FindLast, FindNext, and FindPrevious) can also search a Dynaset or Snapshot using wildcard search characters in an SQL que...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAN0,QA7O,QAPN,QA7N,QBD7,QAHH,QABM,QAKD,QAZV,QBT6,QBTC,QBS0,QBWS,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use Wildcards in SQL Query to Make Dynasets &amp; Snapshots</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110069</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can build a Dynaset or Snapshot based upon wildcard field-search
characters in an SQL query. The find methods (FindFirst, FindLast,
FindNext, and FindPrevious) can also search a Dynaset or Snapshot using
wildcard search characters in an SQL query.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
By using the Like statement in the SQL query language, you can search
for database field values using the asterisk (*) and question mark (?)
characters as wildcards. The * and ? wildcards let you find a wider set of
field values beginning or ending with any desired root. For example, the
following SQL syntax selects the records from a table where the
Authorfield field values begin with the letter b:
<P>
<PRE>   Select * from XTable Where Authorfield Like 'b*'

</PRE>NOTE: The Seek method, which only applies to Table object variables, cannot
use SQL queries or wildcard search characters. The Seek method is limited
to finding a single record using the comparison operators: &gt;, &gt;=, &lt;=, &lt;, =,
and &lt;&gt;.
<P>
<P><h3>Asterisk (*) Wildcard Usage</h3>
 
<P>
In the SQL syntax for the Like statement, the asterisk (*) acts as a
wildcard place holder for any number of characters, from zero up to the
field length. A search for b* finds any field value beginning with the
letter b. A search for *b finds any field value ending with b. A search for
*xxxx* finds any field value that contains the xxxx substring. A search for
* by itself matches all field values.
<P>
<P><h3>Question Mark (?) Wildcard Usage</h3>
 
<P>
In the SQL syntax for the Like statement, the question mark (?) acts as a
wildcard place holder for a single character. A search for ??b* finds any
field value that has b in the third character. A query for *b?? finds any
field value with b as the third from the last character.
<P>
<P><h3>Speed Considerations</h3>
 
<P>
Of the following two techniques, 1 is faster than 2:

<OL><P><LI>For greater speed, invoke the SQL wildcard field search only once to
   build the Dynaset or Snapshot of records that match your search
   criteria. Then use the fast move methods (MoveFirst, MoveLast,
   MoveNext, and MovePrevious) or click the data control to quickly
   navigate between all the records that match the specified search
   criteria. For example:
<P>
   Dim MyDS As Dynaset, MyDB As database, SQLx As String
   SQLx = "Select * from Authors Where Author Like 'b*' "
<PRE>   Set MyDB = OpenDatabase("BIBLIO.MDB")   'Open a database.
   Set MyDS = MyDB.CreateDynaset(SQLx)     'Create Dynaset using SQLx.
   While Not MyDS.Eof
      Print MyDS!author
      MyDS.MoveNext
   Wend

   The Eof property is True after MoveNext moves past the last record.

   Visual Basic creates a Dynaset or Snapshot very quickly when using
   indexes. Subsequent find methods are relatively slow and sequential, as
   shown in technique 2 below.

</PRE><P><LI>A slower technique is to create a Dynaset composed of the entire table
   and then to use multiple find methods. Each FindNext would re-invoke the
   SQL wildcard field search to find the next matching record. This adds
   query time overhead. After finding a certain number of records, the
   total time taken would be slower than with technique 1 described above.
<P>
   Dim MyDS As Dynaset, MyDB As Database, SQLx As String
   SQLx = "author Like 'b*'"
<PRE>   Set MyDB = OpenDatabase("BIBLIO.MDB")     'Open a database.
   Set MyDS = MyDB.CreateDynaset("Authors")  'Create Dynaset with table.
   MyDS.FindFirst SQLx      'Find first record matching criteria.
   Do Until MyDS.NoMatch
      Print MyDS!author
      MyDS.FindNext SQLx    'Find next record matching criteria.
   Loop

   You can invoke the FindNext method until Nomatch = True, as shown.

</PRE></OL><h3>Example Using SQL Wildcard Search with a Data Control</h3>
 
<P>
The Text1 box in the following program shows individual records of the
Author field of the BIBLIO.MDB database. When you click the Command1
button, the program automatically appends and prefixes the * wildcard
search character to any search string that you enter in the Text2 text box.
That widens the resulting recordset shown in Text1. You can browse the
recordset shown in Text1 by clicking the data control.

<OL><P><LI>Start Visual Basic or begin a New Project. Form1 is created by default.

<P><LI>Double-click the form. Add the following to the Form Load event code:
<P>
<PRE>   Sub Form_Load ()
      text1.Text = "Enter ar* in Text2 and click Command1. Also try *z* "
      text2.Text = "*"  'A lone asterisk finds all records.
   End Sub

</PRE><P><LI>Add a data control (Data1) to Form1.

<P><LI>Add a text box (Text1) to Form1. Give Text1 the following properties in
   order to bind it to the data control and to the Author field in the
   database table:
<P>
   DataSource = Data1
   DataField = Author

<P><LI>Add a second text box (Text2) without setting any properties. You can
   change the wildcard criteria for database queries in Text2 at run time.

<P><LI>Add a command button (Command1) to Form1. Add the following code to its
   Click event:
<P>
<PRE>   Sub Command1_Click ()

      Dim SQLX As String, SearchText As String

      'Optional: In Text2, append &amp; prefix the * wildcard to widen search:
      If Right$(text2.Text, 1) &lt;&gt; "*" Then text2.Text = text2.Text &amp; "*"
      If Left$(text2.Text, 1) &lt;&gt; "*" Then text2.Text = "*" &amp; text2.Text
      'Remove the above 2 lines if you want the user to enter the asterisk
      SearchText = text2.Text

      ' The following SQL syntax selects all records from the Authors table
      ' where the Author field matches the SearchText string, using any *
      ' or ? wildcard characters. The result is ordered by the Au_id field:
      SQLx = "Select * From Authors Where Author Like '" &amp; SearchText
      SQLx = SQLx &amp; "' Order By Au_id"
      Data1.DatabaseName = "biblio.mdb" ' Tells Data1 the database name.
      Data1.RecordSource = SQLx ' Data1 control will use SQLx query string.
      Data1.Refresh ' Update the data control with results of SQL query.

   End Sub

</PRE><P><LI>Start the program by pressing the F5 key. When a lone asterisk (*) is in
   the Text2 box, clicking the Command1 button finds all the records.
<P>
   Enter ar in Text2 and click Command1. The program changes the query to
   *ar*. That finds all Author field values that contain the letters ar.
<P>
   Enter z or *z* and click Command1 to find all Author field values that
   contain the letter z anywhere in the field.
<P>
   Close the form to end the program.
<P>
</OL>To change the way the program automatically adds the * wildcard, you can
modify or remove the If Left$... and If Right$... statements.
<P>
<P><h3>The Seek Method Does Not Support Wildcard Searches</h3>
 
<P>
The Seek method, which works only with Table object variables, is very fast
but doesn't support wildcard searches. Seek is mainly useful for finding a
single record that matches a given criteria. The find and move methods are
more practical than the Seek method for finding a group of records.
<P>
The Seek method feature that is closest to a wildcard search is a
comparison operator: &gt;, &gt;=, &lt;=, or &lt;. For example, you could find the first
record that is greater than or equal to your search key value as follows:
<P>
<PRE>   Dim MyDB As Database, MyTable As Table
   Set MyDB = OpenDatabase("BIBLIO.MDB")      ' Open a database.
   Set MyTable = MyDB.OpenTable("Publishers") ' Open a table.
   MyTable.Index = "PrimaryKey"               ' Define current index.
   MyTable.Seek "&gt;=", 3         ' Seek a record with PrimaryKey &gt;= 3.
   If MyTable.NoMatch Then
      MsgBox "match was not found"
   Else
      MsgBox "match was found"
   End If
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 faster slow speedy quick quicker<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataAcc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

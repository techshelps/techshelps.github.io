

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 How to Get Windows Master List (Task List) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q78001 ">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1991/10/31">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  By calling the Windows API functions GetWindow, GetWindowText, and GetWindowTextLength, you can get the window titles of all windows (visible and invisible) currently loaded.  The list of all of the window titles is known as the master list. The Wi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAE1,QDL9,QBWQ,QBWO,QBWN,QAOE,QAMA,QAH4,QAMB,QAPN,QAUJ,QAB9,QAY5,QAMN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 How to Get Windows Master List (Task List)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q78001 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By calling the Windows API functions GetWindow, GetWindowText, and
GetWindowTextLength, you can get the window titles of all windows (visible
and invisible) currently loaded.
<P>
The list of all of the window titles is known as the master list. The
Windows Task Manager contains a list of the window titles for each of the
top-level windows (normally one per application). This list is known as the
task list.
<P>
The sample program listed below demonstrates how to activate an application
by using a list of the top-level windows (a task list).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This information is included with the Help file provided with Microsoft
Professional Toolkit for Visual Basic version 1.0, Microsoft Visual Basic
version 2.0, and Microsoft Visual Basic version 3.0.
<P>
The task list is generally a subset of the master list. The Windows API
functions support methods of getting the master list, not the task list.
However, from the master list you can get a list of all top-level windows
closely resembling the task list. The only difference is that the list
containing the top-level windows may have more entries than the task list
because it is possible for an application to be removed from the task list
even though it is part of the master list.
<P>
The example below demonstrates how to get the names of all top-level
windows. The names of child windows can also be obtained by calling the
GetWindow API function using the GW_CHILD constant. Although the code
example only provides an example of using the constants GW_HWNDFIRST and
GW_HWNDNEXT as arguments to GetWindow, the value of the other constants
such as GW_CHILD are provided in the code.
<P>
Here are the steps necessary to construct a sample program that
demonstrates how to load the task list into a Visual Basic combo box:

<OL><P><LI>Start Visual Basic or choose New Project from the File menu (ALT+F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Change the caption property of Form1 to AppActivate.

<P><LI>Add the following controls to Form1, and change the Name property as
   indicated:
<P>
<PRE>   Control          Default Name    Name
   ---------------------------------------------------------
   Label Control    Label1          Label1
   Combo Box        Combo1          Combo_ListItem
   Command Button   Command1        Command_Ok

</PRE><P><LI>Change the Caption properties of the controls as follows:
<P>
<PRE>   Control           Name          Caption
   -----------------------------------------------------------
   Label Control     Label1        Application to AppActivate:
   Command Button    Command_OK    OK

</PRE><P><LI>Add the following code to the general declarations section of Form1:
<P>
   DefInt A-Z
<P>
<PRE>   'Windows API function declarations:
   'Enter each entire Declare statement on one, single line:
   Declare Function GetWindow Lib "user" (ByVal hWnd%, ByVal wCmd%)
      As Integer
   Declare Function GetWindowText Lib "user" (ByVal hWnd%, ByVal lpSting$,
      ByVal nMaxCount%) As Integer
   Declare Function GetWindowTextLength Lib "user" (ByVal hWnd%) As Integer

   'Declare constants used by GetWindow.
   Const GW_CHILD = 5
   Const GW_HWNDFIRST = 0
   Const GW_HWNDLAST = 1
   Const GW_HWNDNEXT = 2
   Const GW_HWNDPREV = 3
   Const GW_OWNER = 4

</PRE><P><LI>Add the following code to the Form_Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()
      Call LoadTaskList

      'If no items are in the task list, end the program.
      If Combo_ListItem.ListCount &gt; 0 Then
         Combo_ListItem.Text = Combo_ListItem.List(0)
      Else
         MsgBox "Nothing found in task list", 16, "AppActivate"
         Unload Form1
      End If
   End Sub

</PRE><P><LI>Add the following code to the Click event procedure of the Command_Ok
   button:
<P>
<PRE>   Sub Command_Ok_Click ()
      'Get the item selected from the text portion of the combo box.
      f$ = Combo_ListItem.Text

      'Resume if "Illegal function call" occurs on AppActivate statement.
      On Local Error Resume Next

      AppActivate f$
   End Sub

</PRE><P><LI>Add the following code to the general declarations section of Form1:
<P>
<PRE>   Sub LoadTaskList ()
      'Get the hWnd of the first item in the master list
      'so we can process the task list entries (top-level only).
      CurrWnd = GetWindow(Form1.hWnd, GW_HWNDFIRST)

      'Loop while the hWnd returned by GetWindow is valid.
      While CurrWnd &lt;&gt; 0
         'Get the length of task name identified by CurrWnd in the list.
         Length = GetWindowTextLength(CurrWnd)

         'Get task name of the task in the master list.
         ListItem$ = Space$(Length + 1)
         Length = GetWindowText(CurrWnd, ListItem$, Length + 1)

         'If there is a task name in the list, add the item to the list.
         If Length &gt; 0 Then
            Combo_ListItem.AddItem ListItem$
         End If

         'Get the next task list item in the master list.
         CurrWnd = GetWindow(CurrWnd, GW_HWNDNEXT)

         'Process Windows events.
         x = DoEvents()
      Wend
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT+R, S) to run the program.
<P>
</OL>10.From the combo box, select the window title of an application currently
<PRE>   running in Windows. Choose the OK button to activate the application.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 vb3only<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

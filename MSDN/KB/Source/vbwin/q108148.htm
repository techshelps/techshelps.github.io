

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Delete a Field from a Populated Table </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108148">
<META NAME="KBModify" CONTENT="1995/10/26">
<META NAME="KBCreate" CONTENT="1993/12/07">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article shows by code example how to delete one or more fields from an existing table.  Field definitions cannot be removed from the TableDef of the table, but once the Field has been appended to the Fields collection, you can create a new Tab...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGB,QA7O,QA7N,QAEF,QAGC,QBXS,QAZV,QACI,QA1S,QBCT,QAPN,QAMB,QATX,QDKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Delete a Field from a Populated Table</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 26, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108148</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows by code example how to delete one or more fields from
an existing table.
<P>
Field definitions cannot be removed from the TableDef of the table, but
once the Field has been appended to the Fields collection, you can create a
new TableDef, minus the unwanted fields, and then copy the data from the
old table into the new table. An intermediate step uses a Microsoft Access
database as a staging area. This will work for databases other than
Microsoft Access because the Microsoft Access database is used and deleted,
with the data never having been affected by the intermediate stage.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Instructions for Creating the Program</h3>
 
<P>
To create a Visual Basic utility program that allows selective field
deletions, follow these steps:

<OL><P><LI>Start a new project in Visual Basic. This creates Form1 by default.

<P><LI>From the File menu, choose New Module, or click on the Toolbar icon
   second from the left.

<P><LI>From the File menu, choose Add File, and add the CMDIALOG.VBX custom
   control to your project.

<P><LI>On the form, create the following controls, and set the design-time
   properties shown:
<P>
<PRE>   Control          Name        Property
   --------------------------------------------------------------
   Common Dialog    Cmdialog1   (defaults)
   Command Button   Pickdb      Caption="Which Database?"
   Command Button   Command1    Caption="Copy table minus fields"
   Text Box         Text1       (defaults)
   List Box         List1       (defaults)
   List Box         List2       (defaults)
   Label            Label1      Caption="Tables in Database"
   Label            Label2      Caption="Select Field(s) to Remove"
   Label            Label3      Caption=""

</PRE><P><LI>Position the textbox in the vicinity of the Pickdb button, so it will
   display the path and filename of the database selected.

<P><LI>Position the Label1 label over the List1 list box, and position Label2
   under List2.

<P><LI>Position Label3 over List2.

<P><LI>Add the following code to the form load event:
<P>
<PRE>   Sub Form_Load ()
      ' set gtempdir to an appropriate directory in the global .BAS module
      On Error Resume Next
      Kill gtempdir &amp; "tempDB.mdb"
      Set gdb1 = CreateDatabase(gtempdir &amp; "tempDB.mdb", DB_LANG_GENERAL)
      command1.Enabled = False
   End Sub

</PRE><P><LI>Add the following code to the Command1_Click event:
<P>
<PRE>   Sub Command1_Click ()

      Dim dbsource As database
      Dim dbdest As database

      Set dbsource = gdb2  ' the database with table to be modified
      Set dbdest = gdb1    ' the temp base

      ' Indexes can be compound (defined to include several fields) and
      ' one or more of the fields int he compound index may be deleted.
      ' Therefore, to simplify the copy process, no indexes are copied
      ' to the new table. You must make note of the indexes on the old
      ' table and re-create them based on the new fields by using Data
      ' Manager, the VISDATA sample application, or code.

      Cls
      currentx = 0: currenty = 0
      ' Place the following Print statement on one, single line:
      Print DCopyStruct(dbsource, dbdest, (label3), "tempctable",
         gdelfield_arr(), gdelfields_count)
      Print DCopyData(dbsource, dbdest, (label3), "tempctable")

      ' Reset storage arrays and counters for next operation:
      ReDim gdelfield_arr(1 To 1)
      ReDim gfieldorder_arr(1 To 1)
      gdelfields_count = 0
      gfieldorder_count = 0

      ' Copy back from temp after deleting old table:
      Set dbsource = gdb1  ' the temp base
      Set dbdest = gdb2    ' the database with table to be modified

      ' NOTE: If the table was defined in Microsoft Access to be in a
      ' relationship (using primary/foreign keys) to other tables, you will
      ' not be able to Delete it without undoing those relationships first.
      ' In that case, use something like the following to create the new
      ' table, and place it all on one, single line:
      response = MsgBox("Delete old table from database?", 3,
         "Decision    Time!")

      Select Case response
      Case 6
         ' If Okay, delete the old table:
         gdb2.TableDefs.Delete label3
         ' Place the following Print statement on one, single line:
         Print DCopyStruct(dbsource, dbdest, "tempctable", (label3),
            gdelfield_arr(), gdelfields_count)
         Print DCopyData(dbsource, dbdest, "tempctable", (label3))
      Case 7
         ' Copy the new table with "new" appended to its name:
         ' Place the following Print statement on one, single line:
         Print DCopyStruct(dbsource, dbdest, "tempctable",
            (label3) &amp; "new", gdelfield_arr(), gdelfields_count)
         Print DCopyData(dbsource, dbdest, "tempctable", (label3) &amp; "new")
      Case 2
         ' Place the following MsgBox statement on one, single line:
         MsgBox "Cancelling copy of the new table back to the database.",
            0, "Decision Made"
      End Select

      Set dbsource = Nothing
      Set dbdest = Nothing

      gdb2.Close

      command1.Enabled = False
      list1.Clear
      list2.Clear
   End Sub

</PRE><P><LI>Add the following code to the Pickdb_Click event:
<P>
<PRE>   Sub Pickdb_Click ()
      ' Reset global storage arrays and counters for next operation:
      ReDim gdelfield_arr(1 To 1)
      ReDim gfieldorder_arr(1 To 1)
      gdelfields_count = 0
      gfieldorder_count = 0

      ' Enter the following two lines as one, single line:
      cmdialog1.Filter = "Access (*.MDB)|*.mdb|Btrieve (*.DDF)|*.ddf|dBase
         (*.DBF)|*.dbf|FoxPro (*.DBF)|*.dbf|Paradox (*.DB)|*.db"
      cmdialog1.Action = 1
      text1 = cmdialog1.Filename ' Display the choice
      prompt$ = "Type the database connect string. For Access, press ENTER"
      title$ = "Connect string for OpenDatabase"
      connect$ = InputBox$(prompt$, title$, "Access")

      Select Case connect$
      Case ""
         Exit Sub

      Case "Btrieve"
         dbname$ = text1

      Case "Access"
         dbname$ = text1
         connect$ = ""

      Case Else
         dbname$ = StripFileName((text1))
         Debug.Print "else!"
      End Select

      ' Open the database with Exclusive set to True:
      Set gdb2 = OpenDatabase(dbname$, True, False, connect$)
      Set gtabledefs = gdb2.TableDefs
      ' List the tables in list1
      For i = 0 To gdb2.TableDefs.Count - 1
         If (gdb2.TableDefs(i).Attributes And DB_SYSTEMOBJECT) = 0 Then
            list1.AddItem gdb2.TableDefs(i)
         End If
      Next i

      command1.Enabled = True

   End Sub

</PRE><P><LI>Add the following code to the Form_QueryUnload event:
<P>
<PRE>   Sub Form_QueryUnload (Cancel As Integer, UnloadMode As Integer)
      Debug.Print "Query unload"
      gdb1.Close
      ' Make sure the original database is explicitly closed:
      On Error Resume Next
   gdb2.Close

   Kill gtempdir &amp; "tempDB.mdb"

   End Sub

</PRE><P><LI>Add the following code to the List1_DblClick event:
<P>
<PRE>   Sub List1_DblClick ()

      list2.Clear

      ' Place the following two lines on one, single line:
      For i = 0 To
         gdb2.TableDefs(list1.List(list1.ListIndex)).Fields.Count - 1

         ' Place the following two lines on one, single line:
         list2.AddItem
            gdb2.TableDefs(list1.List(list1.ListIndex)).Fields(i).Name

         ' Display the table name of the table that has its fields
         ' displayed in List2:
         label3 = gdb2.TableDefs(list1.List(list1.ListIndex))
      Next i

   End Sub

</PRE><P><LI>Add the following code to the List2_DblClick event:
<P>
<PRE>   Sub list2_DblClick ()

      ' Increment the global counter of the fields to be deleted:
      gdelfields_count = gdelfields_count + 1

      ' Increase the size of the global array holding the name of the field
      ' to be deleted:
      ReDim Preserve gdelfield_arr(1 To gdelfields_count) As String

      ' Store the field name to be deleted:
      gdelfield_arr(gdelfields_count) = list2.List(list2.ListIndex)

      ' Remove it from the list:
      list2.RemoveItem list2.ListIndex

   End Sub

</PRE><P><LI>Add the following code to the code module's General Declarations and
<P><PRE>    merge it with the DATACONS.TXT file. Give the code module's code window
    the focus, choose Load Text from the File menu. Then browse for
    DATACONS.TXT at the root of the Visual Basic directory, and
    choose Merge.
</PRE><P>
   Global gdb1 As Database
   Global gdb2 As Database
   Global gtable1 As table
   Global gtable2 As table
   Global gtabledefs As TableDefs
   Global gdelfield_arr() As String
   Global gdelfields_count As Integer
<P>
   Global gfieldorder_arr() As Integer
   Global gfieldorder_count As Integer
<P>
<PRE>   ' Set the following to an appropriate directory:
   Global Const gtempdir = "C:\temp\"

   Global Const DB_LANG_GENERAl = ";LANGID=0x0809;CP=1252;COUNTRY=0"

 15. Add the following code to the code module:

   ' Place the following Function statement on one, single line:
   Function DCopyData (from_db As Database, to_db As Database, from_nm As
      String, to_nm As String) As Integer

   On Error GoTo CopyErr
   Dim ds1 As Dynaset, ds2 As Dynaset
   Dim i As Integer, skip  As Integer
   Set ds1 = from_db.CreateDynaset(from_nm)
   Set ds2 = to_db.CreateDynaset(to_nm)
   While ds1.EOF = False
      skip = False
      ds2.AddNew
      For i = 0 To ds1.Fields.Count - 1

         For n = 1 To gfieldorder_count
            If gfieldorder_arr(n) = i Then
            skip = True
            Exit For
            End If
         Next n

         If Not skip Then ds2(i) = ds1(i)
      Next
      ds2.Update
      ds1.MoveNext
   Wend

   DCopyData = True
   GoTo CopyEnd

   CopyErr:
   ShowError
   CopyData = False
   Resume CopyEnd

   CopyEnd:

   End Function

 16. Add the following code to the code module:

   ' Place the following Function statement on one, single line:
   Function DCopyStruct (from_db As Database, to_db As Database,
      from_nm As String, to_nm As String, delarray() As String,
      delfields As Integer) As Integer

   On Error GoTo CSErr
   Dim i As Integer, skip As Integer
   Dim tbl As New Tabledef    'table object
   Dim fld As Field           'field object
   Dim ind As Index           'index object

   ' Search to see if the table exists:
   namesearch:
   For i = 0 To to_db.TableDefs.Count - 1
      If UCase(to_db.TableDefs(i).Name) = UCase(to_nm) Then
         ' Place the following two lines on one, single line:
         If MsgBox(to_nm+" already exists, delete it?",
            4," DCopyStruct ")=YES Then

            to_db.TableDefs.Delete to_db.TableDefs(to_nm)
         Else
            to_nm = InputBox("Enter New Table Name:")
            If to_nm = "" Then
               Exit Function
            Else
               GoTo namesearch
            End If
         End If
         Exit For
      End If
   Next

   ' Strip off owner if needed
   If InStr(to_nm, ".") &lt;&gt; 0 Then
      to_nm = Mid(to_nm, InStr(to_nm, ".") + 1, Len(to_nm))
   End If
   tbl.Name = to_nm

   'create the fields
   For i = 0 To from_db.TableDefs(from_nm).Fields.Count - 1
      Set fld = New Field
      skip = False

      For n = 1 To delfields

         If from_db.TableDefs(from_nm).Fields(i).Name = delarray(n) Then
            ' Track the field ordinal position for the DCopyData call:
            gfieldorder_count = gfieldorder_count + 1
            ReDim Preserve gfieldorder_arr(1 To gfieldorder_count)
            gfieldorder_arr(gfieldorder_count) = i - 1
            skip = True
            Exit For
         End If
      Next n
      If Not skip Then
         fld.Name = from_db.TableDefs(from_nm).Fields(i).Name
         fld.Type = from_db.TableDefs(from_nm).Fields(i).Type
         fld.Size = from_db.TableDefs(from_nm).Fields(i).Size
         fld.Attributes = from_db.TableDefs(from_nm).Fields(i).Attributes
         tbl.Fields.Append fld
      End If
   Next

   ' Append the new table:
   to_db.TableDefs.Append tbl

   DCopyStruct = True
   GoTo CSEnd

   CSErr:
   ShowError
   DCopyStruct = False
   Resume CSEnd

   CSEnd:

   End Function

 17. Add the following code to the code module:

   Sub ShowError ()
      Dim s As String
      Dim crlf As String
      crlf = Chr(13) + Chr(10)
      s = "The following Error occurred:" + crlf + crlf
      ' Add the error string:
      s = s + Error$ + crlf
      ' Add the error number:
      s = s + "Number: " + CStr(Err)
      ' Beep and show the error:
      Beep
      MsgBox (s)
   End Sub

</PRE><P><LI>Add the following code to the code module:
<P>
   Function StripFileName (fname As String) As String
<P><PRE>      On Error Resume Next
      Dim i As Integer
      For i = Len(fname) To 1 Step -1
<PRE></PRE>         If Mid(fname, i, 1) = "\" Then
           Exit For
         End If
      Next
      StripFileName = Mid(fname, 1, i - 1)
   End Function

</PRE><P><LI>Save the project.
<P>
</OL><h3>Step-by-Step Instructions for Using the Program</h3>
 

<OL><P><LI>Press the F5 key and click the Which Database? button. Then
   browse for the database to modify.

<P><LI>Click OK to the dialog. Then type in the correct connect string in the
   Input box that follows. Press Cancel on the Input box if you don't want
   to open the database.

<P><LI>Double-click the table names displayed in List1 to get the field names
   displayed in List2.

<P><LI>Double-clicking on the fields will remove them from the list and build a
   list of fields to be deleted. This will not actually affect the table's
   fields.

<P><LI>When you have selected all the fields to be deleted, Click the button
   labeled "Copy table minus fields." This will cause a new table to be
   created minus the fields in a temporary database.

<P><LI>When prompted to delete the old table, you can choose to delete,
   not delete, or cancel.

<P><LI>If you choose not to delete the old table, a new table will be created
   in the original database with "new" appended to the end.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 26, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

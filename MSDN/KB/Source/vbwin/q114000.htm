

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Nesting OLE Automation Calls Causes GP Fault </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114000">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1994/04/21">
<META NAME="Keywords" CONTENT="IAPOLE kbbuglist kbole">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Nesting multiple OLE Automation property accesses and/or method invocations within the same procedure may lead to temporary memory loss or a general protection (GP) fault.  CAUSE =====  When Visual Basic makes the cross process calls to perform the...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAGI,QAPN,QBKN,QAIF,QBW7,QAI5,QAB9,QBVP,QA2K,QAH4,QA5F,QAMA,QAJQ,QBWG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Nesting OLE Automation Calls Causes GP Fault</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114000</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbole kbbuglist
<P>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Nesting multiple OLE Automation property accesses and/or method invocations
within the same procedure may lead to temporary memory loss or a general
protection (GP) fault.
<P>
<P><h2>CAUSE</h2>
 
<P>
When Visual Basic makes the cross process calls to perform the property
access or method invocation it does not release the temporary space
allocated until the procedure completes execution.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem has been corrected in Visual
Basic version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Multiple IDispatch Calls Use Up Memory</h3>
 
<P>
In order to access a property or execute a method on a OLE Automation
object, automation controllers (such as Visual Basic) make IDispatch calls
to the server application. Each time a IDispatch call is made, Visual Basic
creates a temporary variable referencing the object. Visual Basic version
3.0 does not release the memory for these temporary variables until the
procedure in which the property access or method invocation resides
completes execution.
<P>
Therefore, if you have multiple property accesses or method invocations
within the same procedure, the amount of free memory steadily decreases
until the procedure completes execution. Nesting multiple OLE Automation
statements that require IDispatch calls within the same procedure can
produce a GP fault in module VBOA300.DLL at 0001:0D03.
<P>
It could be useful to estimate the number of IDispatch calls Visual Basic
makes. The number of IDispatch calls Visual Basic executes for an
individual statement is directly related to the number of properties or
methods that are combined by using the dot notation to perform the
statement. Thus a good rule of thumb is to count the number of "dots" in
the statement. For example, the following statement makes two IDispatch
calls:
<P>
<PRE>   oXLSheet.Range("A1").Value = "Price"

</PRE>Depending on how you access a collection, there will also be implicit
IDispatch calls. For example, if you access a collection without the Item
method, it is implicitly called.
<P>
The following statement makes five IDispatch calls - three explicit "dots"
and two implicit calls to the Item method:
<P>
<PRE>   oXLApp.Workbooks(1).Sheets(1).Range("A1").Value = "Price"

</PRE><h3>Steps to Reproduce Problem</h3>
 

<OL><P><LI>Start Microsoft Excel. Then Start a new project in Visual Basic.
   Form1 is created by default.

<P><LI>Add a command button (Command1) to Form1.

<P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()
      Dim ExcelSheet As Object
      Dim StartCell As Object
      Dim EndCell As Object
      Dim I as Integer
      Set ExcelSheet = CreateObject("excel.sheet.5")
      ' The following For Next loop makes 4000 IDispatch calls:
      For i = 1 to 1000
         Set StartCell=ExcelSheet.Cells(i,1)
         Set EndCell=ExcelSheet.Cells(i,5)
         ExcelSheet.Range(StartCell,EndCell).FormulaArray = "=3"
      Next
      ExcelSheet.Application.Quit
      Set ExcelSheet = Nothing
   End Sub

</PRE><P><LI>Press the F5 key to run program. Then click the command button.
<P>
</OL>An Excel Worksheet is created and data is inserted into the Range of cells
A1:E1000 via OLE automation. The For..Next loop makes 4000 cross-process
calls from Visual Basic to Excel to insert the data into the Range of
cells. Depending on the amount of Virtual Memory available to Windows on
the system, the above code can lead to a low memory state or cause a GP
fault in module VBOA300.DLL at 0001:0D03.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: buglist3.00 3.00 GPF MemLeak fixlist4.00<BR>
W_VBApp<BR>
KBCategory: kbole kbbuglist<BR>
KBSubcategory: IAPOLE<BR>
Keywords          : IAPOLE kbbuglist kbole<BR>
Version           : 3.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

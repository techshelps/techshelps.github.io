

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Get a Window's Class Name and Other Window Attributes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112649">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1994/03/15">
<META NAME="Keywords" CONTENT="APrgWindow VB4ALL VB4WIN vb5all vb5howto vbwin kbcode kbui kbfasttip kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  You could use SPY.EXE, which comes with Microsoft Visual C/C++, to get information such as a window's class name. However, this article shows by example how you can create your own Visual Basic application that does the same thing; displays a windo...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOX,QBS0,QA4Q,QATX,QANF,QAGQ,QAY5,QACJ,QAXC,QAUJ,QAH4,QDL9,QBWO,QBWN,QAMB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Get a Window's Class Name and Other Window Attributes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112649</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You could use SPY.EXE, which comes with Microsoft Visual C/C++, to get
information such as a window's class name. However, this article shows by
example how you can create your own Visual Basic application that does the
same thing; displays a window's class name along with several other
attributes. For example, you might need a window's class name for use in a
function in the Microsoft Windows Application Programming Interface
(Windows API).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This example uses several functions from the Windows API to get information
about the window the cursor is currently over. First, the routine calls
GetCursorPos to get the current position of the cursor. Then it calls
WindowFromPoint to get the handle to the window the cursor is currently
over. Then it calls several other functions in the Windows API to get
specific information pertaining to the window.
<P>
The example finds the following information about the window:

<UL><LI>Window Handle
<LI>Window Text
<LI>Window Class Name
<LI>Window Style
<LI>Window ID Number
<LI>Parent Window Handle (if applicable)
<LI>Parent Window Text (if applicable)
<LI>Parent Window Class Name (if applicable)
<LI>Module File Name
<P>
</UL>The example can be easily expanded to get other window attributes by
calling appropriate functions in the Windows API.
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
THE FOLLOWING SECTION APPLIES TO VISUAL BASIC 4.0 AND 5.0 ONLY:
<P>
This example creates a Visual Basic program that produces results similar
to those produced by SPY.EXE, and makes use of conditional compilation so
that the program can be run in either 16-bit or 32-bit editions of Visual
Basic.
<P>
NOTE: Although the code below works in Visual Basic 5.0, it not
necessary to use the conditional compilation (#If Win16, #ElseIf Win32)
in Visual Basic 5.0 since it requires 32-bit. As a result, you can
shorten the code below by using only the 32-bit declarations.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following declarations to the general declarations section of
   Form1:
<P>
   #If Win16 Then
<P><PRE>      Private Declare Sub GetCursorPos Lib "User" (lpPoint As Long)
      Private Declare Function WindowFromPoint Lib "User" (ByVal ptScreen _
<PRE></PRE>         As Any) As Integer
      Private Declare Function GetModuleFileName Lib "Kernel" (ByVal _
         hModule As Integer, ByVal lpFileName As String, ByVal nSize As _
         Integer) As Integer
      Private Declare Function GetWindowWord Lib "User" (ByVal hwnd As _
         Integer, ByVal nIndex As Integer) As Integer
      Private Declare Function GetWindowLong Lib "User" (ByVal hwnd As _
         Integer, ByVal nIndex As Integer) As Long
      Private Declare Function GetParent Lib "User" (ByVal hwnd As _
         Integer) As Integer
      Private Declare Function GetClassName Lib "User" (ByVal hwnd As _
         Integer, ByVal lpClassName As String, ByVal nMaxCount As _
         Integer) As Integer
      Private Declare Function GetWindowText Lib "User" (ByVal hwnd As _
         Integer, ByVal lpString As String, ByVal aint As Integer) As _
         Integer

   #ElseIf Win32 Then
      Private Type POINTAPI
         x As Long
         y As Long
      End Type

      Private Declare Function GetCursorPos Lib "User32" (lpPoint As _
         POINTAPI) As Long
      Private Declare Function WindowFromPointXY Lib "User32" Alias _
         "WindowFromPoint" (ByVal xPoint As Long, ByVal yPoint As Long) _
         As Long
      Private Declare Function GetModuleFileName Lib "kernel32" Alias _
         "GetModuleFileNameA" (ByVal hModule As Long, ByVal lpFileName As _
         String, ByVal nSize As Long) As Long
      Private Declare Function GetWindowWord Lib "User32" (ByVal hwnd As _
         Long, ByVal nIndex As Long) As Integer
      Private Declare Function GetWindowLong Lib "User32" Alias _
         "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As _
         Long
      Private Declare Function GetParent Lib "User32" (ByVal hwnd As _
         Long) As Long
      Private Declare Function GetClassName Lib "User32" Alias _
         "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As _
         String, ByVal nMaxCount As Long) As Long
      Private Declare Function GetWindowText Lib "User32" Alias _
         "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, _
         ByVal cch As Long) As Long
   #End If
   Const GWW_HINSTANCE = (-6)
   Const GWW_ID = (-12)
   Const GWL_STYLE = (-16)

</PRE><P><LI>Add a timer control (Timer1) to the form.

<P><LI>Set the interval property of the timer to 200.

<P><LI>Add the following code to timer's timer event:
<P>
<PRE>   Sub Timer1_Timer()
   #If Win16 Then
      Dim ptCursor As Long
      Dim sWindowText As String * 100
      Dim sClassName As String * 100
      Dim hWndOver As Integer
      Dim hWndParent As Integer
      Dim sParentClassName As String * 100
      Dim wID As Integer
      Dim lWindowStyle As Long
      Dim hInstance As Integer
      Dim sParentWindowText As String * 100
      Dim sModuleFileName As String * 100
      Static hWndLast As Integer

      Call GetCursorPos(ptCursor)               ' Get cursor position
      hWndOver = WindowFromPoint(ptCursor)      ' Get window cursor is over
      If hWndOver &lt;&gt; hWndLast Then              ' If changed update display
         hWndLast = hWndOver                    ' Save change
         Cls                                      ' Clear the form
         Print "Window Handle: &amp;H"; Hex(hWndOver) ' Display window handle

         r = GetWindowText(hWndOver, sWindowText, 100)      ' Window text
         Print "Window Text: " &amp; Left(sWindowText, r)

         r = GetClassName(hWndOver, sClassName, 100)         ' Window Class
         Print "Window Class Name: "; Left(sClassName, r)

         lWindowStyle = GetWindowLong(hWndOver, GWL_STYLE)   ' Window Style
         Print "Window Style: &amp;H"; Hex(lWindowStyle)

         ' Get handle of parent window:
         hWndParent = GetParent(hWndOver)

         ' If there is a parent get more info:
         If hWndParent &lt;&gt; 0 Then
            ' Get ID of window:
            wID = GetWindowWord(hWndOver, GWW_ID)
            Print "Window ID Number: &amp;H"; Hex(wID)
            Print "Parent Window Handle: &amp;H"; Hex(hWndParent)

            ' Get the text of the Parent window:
            r = GetWindowText(hWndParent, sParentWindowText, 100)
            Print "Parent Window Text: " &amp; Left(sParentWindowText, r)

            ' Get the class name of the parent window:
            r = GetClassName(hWndParent, sParentClassName, 100)
            Print "Parent Window Class Name: "; Left(sParentClassName, r)
         Else
            ' Update fields when no parent:
            Print "Window ID Number: N/A"
            Print "Parent Window Handle: N/A"
            Print "Parent Window Text : N/A"
            Print "Parent Window Class Name: N/A"
         End If

         ' Get window instance:
         hInstance = GetWindowWord(hWndOver, GWW_HINSTANCE)

         ' Get module file name:
         r = GetModuleFileName(hInstance, sModuleFileName, 100)
         Print "Module: "; Left(sModuleFileName, r)
      End If

   #ElseIf Win32 Then
      Dim pt32 As POINTAPI
      Dim ptx As Long
      Dim pty As Long
      Dim sWindowText As String * 100
      Dim sClassName As String * 100
      Dim hWndOver As Long
      Dim hWndParent As Long
      Dim sParentClassName As String * 100
      Dim wID As Long
      Dim lWindowStyle As Long
      Dim hInstance As Long
      Dim sParentWindowText As String * 100
      Dim sModuleFileName As String * 100
      Static hWndLast As Long

      Call GetCursorPos(pt32)               ' Get cursor position
      ptx = pt32.x
      pty = pt32.y
      hWndOver = WindowFromPointXY(ptx, pty)    ' Get window cursor is over
      If hWndOver &lt;&gt; hWndLast Then              ' If changed update display
         hWndLast = hWndOver                    ' Save change
         Cls                                      ' Clear the form
         Print "Window Handle: &amp;H"; Hex(hWndOver) ' Display window handle

         r = GetWindowText(hWndOver, sWindowText, 100)      ' Window text
         Print "Window Text: " &amp; Left(sWindowText, r)

         r = GetClassName(hWndOver, sClassName, 100)         ' Window Class
         Print "Window Class Name: "; Left(sClassName, r)

         lWindowStyle = GetWindowLong(hWndOver, GWL_STYLE)   ' Window Style
         Print "Window Style: &amp;H"; Hex(lWindowStyle)

         ' Get handle of parent window:
         hWndParent = GetParent(hWndOver)

         ' If there is a parent get more info:
         If hWndParent &lt;&gt; 0 Then
            ' Get ID of window:
            wID = GetWindowWord(hWndOver, GWW_ID)
            Print "Window ID Number: &amp;H"; Hex(wID)
            Print "Parent Window Handle: &amp;H"; Hex(hWndParent)

            ' Get the text of the Parent window:
            r = GetWindowText(hWndParent, sParentWindowText, 100)
            Print "Parent Window Text: " &amp; Left(sParentWindowText, r)

            ' Get the class name of the parent window:
            r = GetClassName(hWndParent, sParentClassName, 100)
            Print "Parent Window Class Name: "; Left(sParentClassName, r)
         Else
            ' Update fields when no parent:
            Print "Window ID Number: N/A"
            Print "Parent Window Handle: N/A"
            Print "Parent Window Text : N/A"
            Print "Parent Window Class Name: N/A"
         End If

         ' Get window instance:
         hInstance = GetWindowWord(hWndOver, GWW_HINSTANCE)

         ' Get module file name:
         r = GetModuleFileName(hInstance, sModuleFileName, 100)
         Print "Module: "; Left(sModuleFileName, r)
      End If
   #End If
   End Sub

</PRE><P><LI>Save the project files.

<P><LI>Run the program, and move the mouse over different windows. You will see
   the field values change as you move the mouse over different windows.
<P>
</OL><h3>Step-by-Step Example</h3>
 
<P>
THE FOLLOWING SECTION APPLIES TO VISUAL BASIC 3.0 ONLY:
<P>
This example creates a Visual Basic program that produces results similar
to those produced by SPY.EXE.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following declarations to the general declarations section of
   Form1:
<P>
<PRE>   'VB3Line: Enter the following lines as one line
   Declare Sub GetCursorPos Lib "User" (lpPoint As Long)
   Declare Function WindowFromPoint Lib "User" (ByVal ptScreen As Any) As
      Integer
   Declare Function GetModuleFileName Lib "Kernel" (ByVal hModule As
      Integer, ByVal lpFilename As String, ByVal nSize As Integer) As
      Integer
   Declare Function GetWindowWord Lib "User" (ByVal hWnd As Integer, ByVal
      nIndex As Integer) As Integer
   Declare Function GetWindowLong Lib "User" (ByVal hWnd As Integer, ByVal
      nIndex As Integer) As Long
   Declare Function GetParent Lib "User" (ByVal hWnd As Integer) As Integer
   Declare Function GetClassName Lib "User" (ByVal hWnd As Integer, ByVal
      lpClassName As String, ByVal nMaxCount As Integer) As Integer
   Declare Function GetWindowText Lib "User" (ByVal hWnd As Integer, ByVal
      lpString As String, ByVal aint As Integer) As Integer
   Const GWW_HINSTANCE = (-6)
   Const GWW_ID = (-12)
   Const GWL_STYLE = (-16)

</PRE><P><LI>Add a timer control (Timer1) to the form.

<P><LI>Set the interval property of the timer to 200.

<P><LI>Add the following code to timer's timer event:
<P>
<PRE>   Sub Timer1_Timer()
      Dim ptCursor As Long
      Dim sWindowText As String * 100
      Dim sClassName As String * 100
      Dim hWndOver As Integer
      Dim hWndParent As Integer
      Dim sParentClassName As String * 100
      Dim wID As Integer
      Dim lWindowStyle As Long
      Dim hInstance As Integer
      Dim sParentWindowText As String * 100
      Dim sModuleFileName As String * 100
      Static hWndLast As Integer

      Call GetCursorPos(ptCursor)               ' Get cursor position
      hWndOver = WindowFromPoint(ptCursor)      ' Get window cursor is over
      If hWndOver &lt;&gt; hWndLast Then              ' If changed update display
         hWndLast = hWndOver                    ' Save change
         Cls                                      ' Clear the form
         Print "Window Handle: &amp;H"; Hex(hWndOver) ' Display window handle

         r = GetWindowText(hWndOver, sWindowText, 100)      ' Window text
         Print "Window Text: " &amp; Left(sWindowText, r)

         r = GetClassName(hWndOver, sClassName, 100)         ' Window Class
         Print "Window Class Name: "; Left(sClassName, r)

         lWindowStyle = GetWindowLong(hWndOver, GWL_STYLE)   ' Window Style
         Print "Window Style: &amp;H"; Hex(lWindowStyle)

         ' Get handle of parent window:
         hWndParent = GetParent(hWndOver)

         ' If there is a parent get more info:
         If hWndParent &lt;&gt; 0 Then
            ' Get ID of window:
            wID = GetWindowWord(hWndOver, GWW_ID)
            Print "Window ID Number: &amp;H"; Hex(wID)
            Print "Parent Window Handle: &amp;H"; Hex(hWndParent)

            ' Get the text of the Parent window:
            r = GetWindowText(hWndParent, sParentWindowText, 100)
            Print "Parent Window Text: " &amp; Left(sParentWindowText, r)

            ' Get the class name of the parent window:
            r = GetClassName(hWndParent, sParentClassName, 100)
            Print "Parent Window Class Name: "; Left(sParentClassName, r)
         Else
            ' Update fields when no parent:
            Print "Window ID Number: N/A"
            Print "Parent Window Handle: N/A"
            Print "Parent Window Text : N/A"
            Print "Parent Window Class Name: N/A"
         End If

         ' Get window instance:
         hInstance = GetWindowWord(hWndOver, GWW_HINSTANCE)

         ' Get module file name:
         r = GetModuleFileName(hInstance, sModuleFileName, 100)
         Print "Module: "; Left(sModuleFileName, r)
      End If
   End Sub

</PRE><P><LI>Save the project files.

<P><LI>Run the program, and move the mouse over different windows. You will see
   the field values change as you move the mouse over different windows.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
- Microsoft Windows Software Development Kit (SDK)
- Microsoft Visual Basic for Windows SDK Help file
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ClassName FindWindow<BR>
Keywords          : APrgWindow VB4ALL VB4WIN vb5all vb5howto vbwin kbcode kbui kbfasttip kbhowto<BR>
Version           : 3.0 4.0 5.0<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

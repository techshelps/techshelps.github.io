

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 Adjust Form Size for Different Video Screen Resolutions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q103646">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1993/08/26">
<META NAME="Keywords" CONTENT="kbui kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Different display devices can have different resolutions (twips per pixel ratios). These differences can cause form and control sizes and locations to appear differently than when they were created. Two solutions to this problem are:   - Adjust you...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QBS0,QAO4,QAMB,QAA1,QAYS,QAFF,QAC2,QDI2,QBWS,QAMN,QAGI,QAB5,QAA8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 Adjust Form Size for Different Video Screen Resolutions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q103646</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Different display devices can have different resolutions (twips per pixel
ratios). These differences can cause form and control sizes and locations
to appear differently than when they were created. Two solutions to this
problem are:

<UL><LI>Adjust your form and control sizes and locations at run time to match
   visual elements which are not affected by the screen resolution. For
   example, the sample program given below adjusts the width of the client
   area of a form to match a bitmap which is a fixed number of pixels wide
   and is therefore not affected by screen resolution.
<P>
</UL>In addition, the following techniques will prove useful when creating forms
that are "resolution independent."

<UL><LI>Design your forms for a VGA mode resolution, that is, for the "least
   common denominator." Forms created at higher resolution may not size
   well at smaller resolutions.

<LI>You can make use of the TwipsPerPixelX and TwipsPerPixelY properties of
   both the printer and the screen for positioning controls correctly. The
   TextWidth and TextHeight methods are also handy for calculating the size
   of text to be displayed. They return the size of a given piece of text
   for the current scale mode of the object they are called with; that is,
   form or printer--and for the current font and size. The code below
   demonstrates how to calculate the size of a single character:
<P>
<P><PRE>     Dim FontHeight%, FontWidth%
     FontWidth%  = TextWidth ( "X"  )
     FontHeight% = TextHeight( "Xg" )
</PRE><P>
</UL>-  Beware of resizing your form in the form's resize event. This can create
<PRE>   a cascading resize event, which will quickly exhaust stack space and
   crash your program. The code fragment below demonstrates how to avoid
   this:

     Sub Form1_Resize()
        If InResize% &lt;&gt; -1 Then
           InResize% = -1
           ' Sample code which would trigger a resize event
           form1.Width = frmWidth%
           form1.Height = frmHeight%
           InResize% = 0
        End If
     End Sub

</PRE>-  Make use of the form's move method to minimize calls to the resize
<PRE>   event. The following code issues four separate calls to the resize event

     form1.Top = 0
     form1.left = 0
     form1.Width = 100
     form1.Height = 100

   as opposed to this code which triggers only one resize event:

     Dim bTop%, bLeft%, bWidth%, bHeight%
     bTop% = 0
     bleft% = 0
     bWidth% = 100
     bHeight% = 100
     form1.move bLeft%, bTop%, bWidth%, bHeight%

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Add two labels, one command button, and one picture control to Form1.

<P><LI>Set Picture1's picture property to C:\WINDOWS\WINLOGO.BMP.

<P><LI>Add the following code in the Form Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()
      ' Set up a picture box:
      Picture1.AutoSize = True
      Picture1.Move 0, 0

      ' Set up the labels and command button:
      Xtwips&amp; = Screen.TwipsPerPixelX
      Ytwips&amp; = Screen.TwipsPerPixelY
      Ypixels&amp; = Screen.Height / Ytwips&amp;
      Xpixels&amp; = Screen.Width / Xtwips&amp;
      label1.Caption = "Below is resolution that you are running in"
      label2.Caption = Str$(Xpixels&amp;) + " by " + Str$(Ypixels&amp;)
      label1.Width = Picture1.Width
      label2.Width = Picture1.Width
      label1.Left = 0
      label2.Left = 0
      label1.Top = Picture1.Height + 10
      label2.Top = label1.Top + label1.Height + 10
      command1.Top = label2.Top + label2.Height + 10
      command1.Left = (Picture1.Width - command1.Width) / 2

      ' Size the form to fit the picture box, labels, and command button
      ScaleMode = 1  ' twips
      Width = Width - ScaleWidth + Picture1.Width

      'VB3Line: Enter the following lines as one line
      Height = Height - ScaleHeight + Picture1.Height + label1.Height _
       + label2.Height + command1.Height

   End Sub

</PRE><P><LI>Add the following code in the Command1 Click event procedure:
<P>
<P><PRE>     Sub Command1_Click ()
<PRE></PRE>         End
     End Sub

</PRE><P><LI>Press the F5 key to run the program. Click the Command1 button to exit
   from the example.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbui kbprg kbcode<BR>
KBSubcategory: APrgWindow<BR>
Additional reference words: 3.00
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

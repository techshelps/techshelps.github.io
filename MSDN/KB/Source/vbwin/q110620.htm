

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine the Restored State of a Minimized Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110620">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/01/25">
<META NAME="Keywords" CONTENT="kbinterop kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  It is not possible within Visual Basic to determine programatically whether an iconized form will be restored to a maximized or normal state without using the Windows API (application programming interface) function GetWindowPlacement(). This artic...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QBS0,QBJZ,QAMB,QAB9,QAC2,QBW1,QAY5,QAH4,QBV8,QAUD,QBWS,QDL9,QBXS,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine the Restored State of a Minimized Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110620</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is not possible within Visual Basic to determine programatically whether
an iconized form will be restored to a maximized or normal state without
using the Windows API (application programming interface) function
GetWindowPlacement(). This article gives an example of how to call this
function from a Visual Basic application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following program demonstrates how to determine whether a minimized
form will be restored as maximized or normal. The program requires two
forms with a Label and a Command control on Form 1.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>From the File menu, choose New Form to create Form2.

<P><LI>From the File menu, choose New Module to create a .BAS file and enter
   the following code in the (General) (Declarations) section:
<P>
   Type RECT
<P><PRE>      left As Integer
      top As Integer
      right As Integer
      bottom As Integer
</PRE>   End Type
<P>
   Type POINTAPI
<P><PRE>      x As Integer
      y As Integer
</PRE>   End Type
<P>
   Type WINDOWPLACEMENT
<P><PRE>      length As Integer
       flags As Integer
      showCmd As Integer
      ptMinPosition As POINTAPI
      ptMaxPosition As POINTAPI
      rcNormalPosition As RECT
</PRE>   End Type
<P>
   Global Const WPF_RESTORETOMAXIMIZED = &amp;H0002
<P>
<PRE>   ' Enter the following Declare statement as one, single line:

   Declare Function GetWindowPlacement Lib "User"
      (ByVal hWnd As Integer, lpwndpl As WINDOWPLACEMENT) As Integer

   Function is_max (hWnd As Integer) As Integer
      Dim wp As WINDOWPLACEMENT
      Dim rtn As Integer
      wp.length = Len(wp) ' Initialize size
      rtn = GetWindowPlacement(hWnd, wp)
      If wp.flags = WPF_RESTORETOMAXIMIZED Then
         is_max = True
      Else
         is_max = False
      End If
   End Function

   NOTE: The value of wp.length must be initialized or the call to
   GetWindowPlacement will return an error. There is no mention of this in
   the Microsoft Windows "Programmer s Reference," but it is described as
   a documentation error in the following article in the Microsoft
   Knowledge Base:

   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q89569.htm">Q89569</A></B>.
   TITLE     : DOCERR: GetWindowPlacement Function Always Returns an Error

</PRE><P><LI>Add a Label control and Command control to Form1.

<P><LI>Add the following code to the Command_Click procedure of Form1:
<P>
<PRE>   Sub Command1_Click ()
      If is_max((Form2.hWnd)) Then
         Label1.Caption = "Form 2 will be Maximized"
      Else
         Label1.Caption = "Form 2 will be Normalized"
      End If
   End Sub

   NOTE: Form2.hWnd cannot be passed directly to a function as a parameter.
   It must be enclosed in an extra set of parentheses or stored in a
   temporary variable.

</PRE><P><LI>From the File menu, choose Save Project to save the forms and project.

<P><LI>Run your application by choosing Start from the Run menu or by pressing
   the F5 function key. Minimize Form2, click the Command button on Form1,
   and observe the message displayed in the Label control. Restore Form2,
   maximize it, and then minimize it again. Click the Command button on
   Form1, and again observe the message displayed in the Label control.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbinterop kbprg kbcode<BR>
KBSubcategory: APrgDataODBC<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

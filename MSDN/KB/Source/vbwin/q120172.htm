

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary of Tips to Improve Data Access Speed in VB version 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120172">
<META NAME="KBModify" CONTENT="1995/07/19">
<META NAME="KBCreate" CONTENT="1994/09/04">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article summarizes the techniques for improving the speed of data access in your database applications. There are four main points that will be covered in this article:   - Transactions  - Attached Tables  - ODBC: DB_SQLPassThrough and Execute...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAI5,QA26,QA1S,QBW7,QA9E,QAYY,QA39,QA28,QATJ,QAMB,QABM,QAMR,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Summary of Tips to Improve Data Access Speed in VB version 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 19, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120172</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article summarizes the techniques for improving the speed of data
access in your database applications. There are four main points that will
be covered in this article:

<UL><LI>Transactions
<LI>Attached Tables
<LI>ODBC: DB_SQLPassThrough and ExecuteSQL
<LI>Correct use of the Data Access Object (DAO) Variable
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Transactions</h3>
 
<P>
Implementing transactions can be the most significant way to increase the
speed of data access in your database application. This technique is ideal
for speeding up inserting, updating, appending, or deleting data in a
database. In a nutshell, transactions cache a group of operations in
memory, then commit them all at once rather than committing each individual
operation. They also provide a means for discarding the proposed changes
(rollback).
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q109830.htm">Q109830</A></B>
<PRE>TITLE     : How to Speed Up Data Access by Using BeginTrans &amp; CommitTrans

</PRE>For ODBC sources, however, transactions do have their limitations as
outlined in the following article:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q101518.htm">Q101518</A></B>
<PRE>TITLE     : Transactions on ODBC Data Sources in Visual Basic Version 3.0

</PRE><h3>Attached Tables</h3>
 
<P>
Using attached tables increases performance most when connecting to ODBC
databases such as Microsoft SQL Server, Oracle, and Sybase. With attached
tables, information on the table structure is cached in the Microsoft
Access database.
<P>
This technique increases performance when connecting to the ODBC data
source because you eliminate the overhead of Visual Basic querying the ODBC
data source for this table structure information.
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q108423.htm">Q108423</A></B>
<PRE>TITLE     : How to Attach an External Database Table to a VB 3.0 Database

</PRE>ARTICLE-ID: <B><A HREF="../ACCESS/Q90100.htm">Q90100</A></B>
<PRE>TITLE     : PRB: Remote ODBC Tables Are Read-Only Without a Unique Index

</PRE><h3>ODBC: DB_SQLPassThrough and ExecuteSQL</h3>
 
<P>
If you do not use attached tables to connect to your ODBC data source, you
can use the DB_SQLPassThrough flag when creating recordsets to increase
performance. For action queries such as Insert, Delete, and Update that
take action rather than returning records, you can use the ExecuteSQL
method. By using DB_SQLPassThrough and ExecuteSQL, you increase performance
by delegating execution of the SQL query to the client-server database via
the ODBC connection. There are some limitations, however, when using
DB_SQLPassThrough. Most notably, the recordset returned is Read-Only.
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q106492.htm">Q106492</A></B>
<PRE>TITLE     : How to Call SQL Stored Procedures from Visual Basic

</PRE>ARTICLE-ID: <B><A HREF="../VBWIN/Q115237.htm">Q115237</A></B>
<PRE>TITLE     : How to Use Temporary Tables in SQL Server from Visual Basic

</PRE>ARTICLE-ID: <B><A HREF="../VBWIN/Q106111.htm">Q106111</A></B>
<PRE>TITLE     : PRB: Illegal to Use Find Methods w/ SQL PASSTHROUGH &amp; ODBC DB

</PRE>ARTICLE-ID: <B><A HREF="../VBWIN/Q103976.htm">Q103976</A></B>
<PRE>TITLE     : FIX: Invalid Argument Err on Execute Method w/SQL Passthrough

</PRE><h3>Correct Use of the Data Access Object (DAO) Variable</h3>
 
<P>
You can also increase performance by using the correct data access object
variable(s) for your needs. To do this, you need to understand the
functionality of each of the different DAO variables. Below is a brief
outline of the seven main advantages and disadvantages of each of the data
access object variables and the data control.
<P>
Table Object:

<UL><LI>Provides the fastest way to search for records with SEEK.
<LI>Uses index when performing searches.
<LI>Provides both Read/Write access.
<LI>Cannot use SORT or FILTER, use the Index property instead.
<LI>Opens table for direct access to the base table.
<LI>Changes in records appear immediately as you move through them.
<LI>Cannot be used on ODBC databases or attached tables.
<P>
</UL>Dynaset Object:

<UL><LI>Provides most flexibility - able to use more than one Table.
<LI>Provides both Read/Write access, and returns set of keys to data.
<LI>With ODBC, Write access requires that you set a unique index.
<LI>Only takes advantage of Indexed fields when needed.
<LI>Can use SORT or FILTER.
<LI>Uses JOIN on two or more tables to create supersets or subsets.
<LI>Reflects changes to the records in a multiuser environment.
<P>
</UL>Snapshot Object:

<UL><LI>Provides Read-Only access.
<LI>Creates from existing Dynaset or Snapshot
<LI>Cannot execute Edit, Addnew or Update methods.
<LI>Does not support Transaction statements.
<LI>Can use SORT or FILTER.
<LI>Returns all of the selected data - not keys or pointers to the data.
<LI>Looses the currency of the data quickly in multiuser application.
<P>
</UL>Data Control:

<UL><LI>Easily binds certain controls to it.
<LI>Provides both Read and Write access.
<LI>With ODBC, Write access requires that you set a unique index.
<LI>Does not provide an Index property; use ORDER BY.
<LI>Using the SORT or FILTER property has no effect
<LI>Is subset of Dynaset, not the equivalent.
<LI>Cannot use Parameter Query.
<P>
</UL>For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q103442.htm">Q103442</A></B>
<PRE>TITLE     : Differences Between the Object Variables in VB Version 3.0

</PRE>ARTICLE-ID: <B><A HREF="../VBWIN/Q109218.htm">Q109218</A></B>
<PRE>TITLE     : Using Table Objects Versus Dynaset/Snapshot Objects in VB

</PRE>ARTICLE-ID: <B><A HREF="../VBWIN/Q103808.htm">Q103808</A></B>
<PRE>TITLE     : Limitations of the Data Control in Visual Basic Version 3.0
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 Speed fast faster<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 19, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Determine When the Initialize Event of Class Gets Fired </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q154651">
<META NAME="KBModify" CONTENT="1997/07/14">
<META NAME="KBCreate" CONTENT="1996/08/12">
<META NAME="Keywords" CONTENT="vb4all vb4win kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When you create an instance of one of your class modules in Visual Basic 4.0 code, the Initialize event is the first operation that occurs. You can use this fact to explore the timing of object creation when you declare object variable As New. Belo...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAH4,QBS0,QAW6,QAYL,QAO4,QA01,QAFF,QBXS,QABO,QAHE,QAGI,QAKD,QAGN,QA7H V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Determine When the Initialize Event of Class Gets Fired</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q154651</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you create an instance of one of your class modules in Visual Basic
4.0 code, the Initialize event is the first operation that occurs. You can
use this fact to explore the timing of object creation when you declare
object variable As New. Below is some sample code showing how to
demonstrate the issue.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a Standard Module to the project. Add the following code to the
   General Declarations section of the Module:
<P>
   Option Explicit
   Public g_SomeGlobalFlag as integer

<P><LI>Add a Class Module to the project from the Insert menu.

<P><LI>Add the following code to the General Declarations of Class1:
<P>
   Option Explicit
   Public SomeFlag as integer
<P>
   Public Sub Test()
<P><PRE>     MsgBox "Test was called"
<PRE></PRE>   End Sub

   Private Sub Class_Initialize()
     MsgBox "Class was initialized"
     'This Class_Initialize is used to set Class level and
     'Global Flags. The former is fine and always works;
     'The latter is a Bad idea as we shall see.
     SomeFlag = 42
     g_SomeGlobalFlag = 451
   End Sub

</PRE><P><LI>Add the following code to the General Declarations of Form1:
<P>
   Option Explicit
<P>
<PRE>   Private Sub Command1_Click()
     Dim oClass As Class1
     Set oClass = New Class1
     'The following lines display the flags
     'Both are set correctly.
     Msgbox g_SomeGlobalFlag    'Should be 451
     Msgbox oClass.Someflag     'Should be 42
   End Sub

</PRE><P><LI>Step through the project by pressing the F8 key. Note that the
   Initialize event is fired upon reaching the second line where the Set
   statement is. Because the object is created first, initialization
   of the global flag happens when it should, and the message boxes display
   the correct values. Close Form1 to return to design mode.

<P><LI>Change the code in the Command1_Click() event to the following:
<P>
<PRE>   Private Sub Command1_Click()
     Private Sub Command1_Click()
     Dim oClass As New Class1
     'The following lines display the flags; the global flag is wrong
     'because the object doesn't exist yet!
     MsgBox g_someflag  'Should be 451 - Oops !
     'When you hit this line, the first thing you see is the message box
     'from the Initialize Event, as the object is created by using the
     'oClass in code. By the time SomeFlag is evaluated for display in the
     'Message Box, Initialize has set the value correctly. Initialize
     'always happens before any other event or method call.
     MsgBox oClass.SomeFlag
   End Sub

</PRE><P><LI>Press the F8 key to step through the project. Note that the
   Initialize event isn't called until you call one of the properties or
   the methods of the class.
<P>
</OL>An object variable declared without "As New" must be assigned an existing
object using the Set statement before it can be used. This is known as
EXPLICIT OBJECT CREATION. Until it is assigned an object, the declared
object variable has the special value Nothing, indicating that it does
not refer to any particular instance of an object. If a method is invoked
while the object variable contains Nothing, an error will occur.
<P>
When you declare an object variable using the New keyword, it also contains
the special value Nothing. However, the first time the variable is used
to invoke a property or method of the class, Visual Basic notices that the
variable contains Nothing and creates an instance of the class. The object
must be created before the property or method is actually invoked, so the
Initialize event precedes the property or method call. This is known as
IMPLICIT OBJECT CREATION.
<P>
If you use Class_Initialize to set global flags, you should use EXPLICIT
OBJECT CREATION to make sure you know exactly when the object is declared,
so that global flags are set before they are used. This is particularly
true if your Class Initialize event performs subtle tasks that may not
cause the application to fall over but may affect the outcome of the
program. Note, however, that Class_Initialize is a perfectly safe place to
initialize class data, because it occurs before any other event or method.
<P>
There is also a complementary case that can be of interest: Because
Class_Initialize always happens before any other event or method is
invoked, the following is true:
<P>
<PRE>   'Class module code
    Option Explicit
    Public NowYouSeeIt As String
    Private Sub Class_Initialize()
      MsgBox NowYouSeeIt
    End Sub

   'Form1 code
    Private Sub Form_Load()
      Dim c1 As New Class1
      c1.NowYouSeeIt = "This won't appear in the MsgBox."
    End Sub

</PRE></OL>In other words, Class_Initialize must occur even before a public variable
is set. Therefore, in the example above, the Class_Initialize event is
fired before the value of "NowYouSeeIt" is assigned to the class variable
and the message box comes up with no text in the box.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual Basic Help File.
<P>
The Visual Basic Programmers Guide 4.0 Chapter 7, P.200 and P.218.
<P>
For more information, please see the following articles in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q138065.htm">Q138065</A></B>
   TITLE     : How to Enforce Initialization of a VB OLE Class Object

   ARTICLE-ID: <B><A HREF="../vbapps/Q129449.htm">Q129449</A></B>
   TITLE     : Object Created w/ NEW Instantiated When Passed as Argument
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : vb4all vb4win kbhowto<BR>
Version             : 4.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

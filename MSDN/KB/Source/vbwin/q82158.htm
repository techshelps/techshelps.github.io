

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Set Windows System Colors Using API and Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q82158 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/03/26">
<META NAME="Keywords" CONTENT="kbgraphic kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to use the GetSysColor and SetSysColors API functions to set the system colors for various parts of the display in Microsoft Windows. This allows you to change the Windows display programmatically, instead of using the Wi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QBS0,QDL9,QBWO,QBWN,QAPG,QBWQ,QAMB,QAH4,QBXS,QAPN,QAFF,QAGQ,QAIB,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Set Windows System Colors Using API and Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q82158 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to use the GetSysColor and SetSysColors API
functions to set the system colors for various parts of the display in
Microsoft Windows. This allows you to change the Windows display
programmatically, instead of using the Windows Control Panel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows maintains an internal array of 19 color values that it uses to
paint the different parts of the Windows display. Changing any of
these values will affect all windows for all applications running
under Windows. Note that the SetSysColors routine only changes the
internal system list. This means that any changes made using
SetSysColors will only be valid for the current Windows session. To
make these changes permanent, you need to change the [COLORS] section
of the Windows initialization file, WIN.INI.
<P>
For more information on modifying the Windows initialization file
programmatically, query on the following words in the Microsoft
Knowledge Base:
<P>
<PRE>   GetProfileString and WriteProfileString

</PRE>To use the GetSysColor and SetSysColors functions within a Visual
Basic for Window application, you must first declare them in the
Declarations section of your Code window.
<P>
Declare the Function statement as follows:
<P>
<PRE>Declare Function GetSysColor Lib "User" (ByVal nIndex%) As Long

Declare Sub SetSysColors Lib "User" (ByVal nChanges%,
                                     lpSysColor%,
                                     lpColorValues&amp;)

</PRE>NOTE: Each Declare statement above must be written on one line.
<P>
The parameters are defined as follows:
<P>
<PRE>Parameter         Definition
</PRE> 
<P>
<PRE>nIndex%           Specifies the display element whose color
                  is to be retrieved. See the list below to
                  find the index value for the corresponding
                  display element.

nChanges%         Specifies the number of system colors to
                  be changed.

lpSysColor%       Identifies the array of integer indexes
                  that specify the elements to be changed.

lpColorValues&amp;    Identifies the array of long integers that
                  contain the new RGB color values for each
                  element to be changed.

</PRE>The following system color indexes are defined using the predefined
constants found in the WINDOWS.H file supplied with the Microsoft
Windows Software Development Kit (SDK). The corresponding value is
the value placed in the lpSysColor% array.
<P>
<P><h3>List of System Color Indexes</h3>
 
<P>
Windows.H Definition  Value  Description
 
<P>
<PRE>COLOR_SCROLLBAR         0    Scroll-bar gray area
COLOR_BACKGROUND        1    Desktop
COLOR_ACTIVECAPTION     2    Active window caption
COLOR_INACTIVECAPTION   3    Inactive window caption
COLOR_MENU              4    Menu background
COLOR_WINDOW            5    Window background
COLOR_WINDOWFRAME       6    Window frame
COLOR_MENUTEXT          7    Text in menus
COLOR_WINDOWTEXT        8    Text in windows
COLOR_CAPTIONTEXT       9    Text in caption, size box,
                             scroll bar arrow box
COLOR_ACTIVEBORDER      10   Active window border
COLOR_INACTIVEBORDER    11   Inactive window border
COLOR_APPWORKSPACE      12   Background color of multiple
                             document interface (MDI)
                             applications
COLOR_HIGHLIGHT         13   Items selected item in a
                             control
COLOR_HIGHLIGHTTEXT     14   Text of item selected in a
                             control
COLOR_BTNFACE           15   Face shading on push button
COLOR_BTNSHADOW         16   Edge shading on push button
COLOR_GRAYTEXT          17   Grayed (disabled) text. This
                             color is set to 0 if the
                             current display driver does not
                             support a solid gray color.
COLOR_BTNTEXT           18   Text on push buttons

</PRE>The following is an example of how to set the system colors for
different parts of the Windows display:

<OL><P><LI>Start Visual Basic for Windows, or from the File menu, choose New
   Project (press ALT, F, N) if Visual Basic for Windows is already
   running. Form1 is created by default.

<P><LI>Create the following controls for Form1:
<P>
<PRE>   Control         Name      Property Setting
   ------------------------------------------------------------

   Command button  Command1  Caption = "Change all Colors"
   Command button  Command2  Caption = "Change selected Colors"

   (In Visual Basic version 1.0 for Windows, set the CtlName
    Property for the above objects instead of the Name property.)

</PRE><P><LI>Add the following code to the general Declarations section of Form1:
<P>
<PRE>   Declare Function GetSysColor Lib "User" (ByVal nIndex%) As Long
   ' Enter the following Declare statement as one, single line:
   Declare Sub SetSysColors Lib "User" (ByVal nChanges%, lpSysColor%,
      lpColorValues&amp;)
   Const COLOR_BACKGROUND = 1
   Const COLOR_ACTIVECAPTION = 2
   Const COLOR_WINDOWFRAME = 6
   Dim SavedColors(18) As Long

</PRE><P><LI>Add the following code to the Form_Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()

      ' Save current system colors:
      For i% = 0 To 18
         SavedColors(i%) = GetSysColor(i%)
      Next i%

   End Sub

</PRE><P><LI>Add the following code to the Form_Unload event procedure of Form1:
<P>
<PRE>   Sub Form1_Unload ()

      ' Restore system colors:
      ReDim IndexArray(18) As Integer
      For i% = 0 To 18
         IndexArray(i%) = i%
      Next i%
      SetSysColors 19, IndexArray(0), SavedColors(0)

   End Sub

</PRE><P><LI>Add the following code to the Command1_Click event procedure of Form1:
<P>
<PRE>   Sub Command1_Click ()

      ' Change all display elements:
      ReDim NewColors(18) As Long
      ReDim IndexArray(18) As Integer
      For i% = 0 to 18
         NewColors(i%) = QBColor(Int(16 * Rnd))
         IndexArray(i%) = i%
      Next i%
      SetSysColors 19, IndexArray(0), NewColors(0)

   End Sub

</PRE><P><LI>Add the following code to the Command2_Click event procedure of Form1:
<P>
<PRE>   Sub Command2_Click ()

      ' Change desktop, window frames, and active caption:
      ReDim NewColors(18) As Long
      ReDim IndexArray(18) As Integer
      For i% = 0 to 18
         NewColors(i%) = QBColor(Int(16 * Rnd))
         IndexArray(i%) = i%
      Next i%
      SetSysColors 19, IndexArray(0), NewColors(0)

   End Sub

</PRE><P><LI>From the Run menu, choose Start, or press the F5 key, to run the
   program.
<P>
</OL>Choosing the Change All Colors button will cause all the different parts of
the Windows display to be assigned a randomly generated color. Choosing the
Change Selected Elements button will cause only the desktop, active window
caption, and window frames to be assigned a random color. To restore the
original system colors, double-click the Control-menu box to end the
application.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbgraphic kbprg kbcode<BR>
KBSubcategory: APrgGrap APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

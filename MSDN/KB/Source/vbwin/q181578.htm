

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Callback Visual Basic Functions From a C DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181578">
<META NAME="KBModify" CONTENT="1998/02/25">
<META NAME="KBCreate" CONTENT="1998/02/23">
<META NAME="Keywords" CONTENT="VBKBDLL kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  With the new AddressOf operator in Microsoft Visual Basic 5.0, you can pass a DLL the pointer to a Microsoft Visual Basic function and have the DLL call that function through the pointer. This article gives you some sample code to get started and a...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAY5,QAH6,QAD7,QBV8,QAB9,QA5F,QAMA,QAH7,QA56,QA55,QBFY,QAGI,QAO3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Callback Visual Basic Functions From a C DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 25, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181578</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With the new AddressOf operator in Microsoft Visual Basic 5.0, you can pass
a DLL the pointer to a Microsoft Visual Basic function and have the DLL
call that function through the pointer. This article gives you some sample
code to get started and also demonstrates how to pass strings from your DLL
to Microsoft Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To use this article, follow the steps below to create a Microsoft Visual
Basic 5.0 .exe project and a Microsoft Visual C++ 5.0 .dll project. Then
run your Microsoft Visual Basic program to test it.
<P>
<P><h3>Steps to Create the Microsoft Visual Basic 5.0 Project</h3>
 

<OL><P><LI>Create a new Standard EXE project in Microsoft Visual Basic 5.0.

<P><LI>Add a Command button to Form1.

<P><LI>Add the following declare statement to the General Declarations section
   of Form1:
<P>
<P><PRE>      Private Declare Sub ExecuteCallback Lib "vcvbdll" ( _
<PRE></PRE>         ByVal pFunc as Long)

</PRE><P><LI>Add the following code to the Click event of the Command button:
<P>
<P><PRE>      Call ExecuteCallback(AddressOf MyCallback)
</PRE>
<P><LI>Add a new module to the project, and add the following code to the
   module.
<P>
<PRE>      Sub MyCallback(ByVal parm as String)
         MsgBox "You are inside the VB callback function!"
         MsgBox "Parameter passed in was: " &amp; parm
      End Sub

</PRE></OL><h3>Steps to Create the Microsoft Visual C++ 5.0 Project</h3>
 

<OL><P><LI>Create a new Microsoft Visual C++ 5.0 MFC AppWizard (dll) project
   named "vcvbdll" and accept all of the default options.

<P><LI>Add the following code to the end of the vcvbdll.cpp file:
<P>
   Sample Code
   -----------
<P>
<P><PRE>      void __stdcall ExecuteCallback(long cbAddress) {
<PRE></PRE>         // Declare the function pointer, with one string argument.
         typedef void (__stdcall *FUNCPTR)(BSTR pbstr);
         FUNCPTR vbFunc;

         // Point the function pointer at the passed-in address.
         vbFunc = (FUNCPTR)cbAddress;

         // Call the function through the function pointer.
         vbFunc(SysAllocString(L"Hi! This message came from your DLL!"));
      }

</PRE><P><LI>Add the following line to the end of the vcvbdll.def file to export the
   ExecuteCallback function:
<P>
<P><PRE>      ExecuteCallback
</PRE>
<P><LI>Compile the project, and copy the .dll to the \Windows\System directory
   to test it.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Visual Basic 5.0 Books Online: AddressOf
<P>
For additional information about using the AddressOf operator for
callbacks, see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q171729.htm">Q171729</A></B>
   TITLE     : HOWTO: Do Generic Callbacks Using a Helper DLL

</PRE></OL>(c) Microsoft Corporation 1998, All Rights Reserved. Contributions by Joe
Crump, Microsoft Corporation
<P>
 
<PRE>Keywords          : VBKBDLL kbcode
Version           : win95:5.0;winnt:5.0
Platform          : Win95 winnt
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 25, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

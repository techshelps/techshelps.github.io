

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Handle Quotes and Pipes in Concatenated SQL Literals </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178070">
<META NAME="KBModify" CONTENT="1997/12/16">
<META NAME="KBCreate" CONTENT="1997/12/15">
<META NAME="Keywords" CONTENT="VB4WIN vb5all vb5howto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Building concatenated SQL statements based on user-typed text values can result in invalid SQL statements. This article provides a solution to the problem of building concatenated SQL.  MORE INFORMATION  When building concatenated SQL statements, y...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QBS0,QAGU,QA1S,QA2Q,QAY2,QAB4,QAH4,QAB9,QAG2,QAPN,QBWS,QAYZ,QAAP,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Handle Quotes and Pipes in Concatenated SQL Literals</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178070</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions
   for Windows, version 4.0
<LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
<LI>Microsoft Visual Basic Standard and Professional Editions for Windows,
   version 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Building concatenated SQL statements based on user-typed text values can
result in invalid SQL statements. This article provides a solution to the
problem of building concatenated SQL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When building concatenated SQL statements, you can run into the following
problems based on incorporating user-typed text into the SQL statement:
<P>
<P><h3>User Types the Delimiter Character</h3>
 
<P>
If the user types the same character you use to delimit the text field,
such as:
<P>
<PRE>   LName contains: O'Brien

   SQL = "SELECT * FROM Employees WHERE LastName='" &amp; LName &amp; "'"

   SQL now contains:
   SELECT * FROM Employees WHERE LastName='O'Brien'

</PRE>this can result in the following error messages when you execute the SQL
statement:
<P>
<PRE>   Run-time error 3075
   Syntax error in query expression '...'

</PRE>One solution is to replace the apostrophe delimiter with quotes ("), such
as:
<P>
<PRE>   SQL = "SELECT * FROM Employees WHERE LastName=""" &amp; LName &amp; """"

</PRE>However, the user could easily type O"Brien by mistake (forgetting to
release the SHIFT key when typing the apostrophe) and the problem
reappears. In addition, SQL Server uses " to delimit table and field names.
If the user-supplied value exceeds the maximum length of an identifier
name, SQL Server will return a syntax error.
<P>
The solution is to replace the apostrophe in the variable with two
apostrophes so that SQL contains:
<P>
<PRE>   SELECT * FROM Employees WHERE LastName='O''Brien'

</PRE><h3>User Types the Pipe Symbol</h3>
 
If the user types the pipe symbol (|), such as:
<P>
<PRE>   Password contains: A2|45

   SQL = "SELECT * FROM SecurityLevel WHERE UID='" &amp; UserID &amp; "'"
   SQL = SQL &amp; " AND PWD='" &amp; Password &amp; "'"

   SQL now contains:
   SELECT * FROM SecurityLevel WHERE UID='JohnDoe'
   AND PWD='A2|45'

</PRE>and you are querying a Jet database, it can cause either the "Syntax Error"
given above or the following error:
<P>
<PRE>   Run-time error 3061
   Too few parameters. Expected n.

</PRE>The pipe symbol causes problems because Jet uses pipe symbols to delimit
field or parameter names embedded in a literal string, such as:
<P>
<PRE>   SELECT "|LastName|, |FirstName|" FROM Employees

</PRE>This was considered easier for beginner users to learn than concatenation
when building ad hoc queries through the Access Query designer. However,
when used inadvertently in building a SQL statement, it can result in an
error.
<P>
The solution is to replace the pipe symbol with a concatenated expression
so that SQL contains:
<P>
<PRE>   SELECT * FROM SecurityLevel WHERE UID='JohnDoe'
   AND PWD='A2' &amp; chr(124) &amp; '45'

</PRE><h3>Implementing the Solution</h3>
 
<P>
The solution to both these problems can be addressed via substring
replacement. The sample functions, ReplaceStr, SQLFixup and JetSQLFixup,
are provided below to illustrate the technique.
<P>
WARNING:
Microsoft provides code examples for illustration only, without warranty
either expressed or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose. This
code is provided 'as is' and Microsoft does not guarantee that the
following code can be used in all situations. Microsoft does not support
modifications of the code to suit customer requirements for a particular
purpose.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. For product versions that don't
not support the line-continuation character, remove the underscore and
combine that line with the next lines as a single statement when re-
creating this code.
<P>
<PRE>   Function ReplaceStr (TextIn, ByVal SearchStr As String, _
                        ByVal Replacement As String, _
                        ByVal CompMode As Integer)
   Dim WorkText As String, Pointer As Integer
     If IsNull(TextIn) Then
       ReplaceStr = Null
     Else
       WorkText = TextIn
       Pointer = InStr(1, WorkText, SearchStr, CompMode)
       Do While Pointer &gt; 0
         WorkText = Left(WorkText, Pointer - 1) &amp; Replacement &amp; _
                    Mid(WorkText, Pointer + Len(SearchStr))
         Pointer = InStr(Pointer + Len(Replacement), WorkText, _
                         SearchStr, CompMode)
       Loop
       ReplaceStr = WorkText
     End If
   End Function

   Function SQLFixup(TextIn)
     SQLFixup = ReplaceStr(TextIn, "'", "''", 0)
   End Function

   Function JetSQLFixup(TextIn)
   Dim Temp
     Temp = ReplaceStr(TextIn, "'", "''", 0)
     SQLFixup = ReplaceStr(Temp, "|", "' &amp; chr(124) &amp; '", 0)
   End Function

</PRE>SQLFixup should be used if your SQL statement is going to be used with Jet
SQL pass-through queries or with ODBCDirect, RDO, or ADO to a non-Jet back-
end database:
<P>
<PRE>   LName contains: O'Brien

   SQL = "SELECT * FROM Employees WHERE LastName='" &amp; _
         SQLFixup(LName) &amp; "'"

   SQL now contains:
   SELECT * FROM Employees WHERE LastName='O''Brien'

</PRE>JetSQLFixup should be used if Jet is your database back-end, or if doing a
non-Pass-through query to an ODBC datasource:
<P>
<PRE>   UserID cntains: JohnDoe
   Password contains: A2|4'5

   SQL = "SELECT * FROM SecurityLevel WHERE UID='" &amp; _
         JetSQLFixup(UserID) &amp; "' AND PWD='" &amp; JetSQLFixup(Password) &amp; "'"

   SQL now contains:
   SELECT * FROM SecurityLevel WHERE UID='JohnDoe'
   AND PWD='A2' &amp; chr(124) &amp; '4''5'

</PRE><h2>REFERENCES</h2>
 
<P>
Microsoft Jet Database Engine Programmer's Guide
<P>
Visual Basic Help topic: InStr
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q147687.htm">Q147687</A></B>
   TITLE     : HOWTO: Query for Literal Special Characters in a Where
               Clause

</PRE>Microsoft Corporation 1997, All Rights Reserved.
Contributions by Malcolm Stewart, Microsoft Corporation
 
<PRE>Keywords          : VB4WIN vb5all vb5howto
Version           : WINDOWS:1.0,1.1,2.0,3.0,4.0,5.0,7.0,97
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

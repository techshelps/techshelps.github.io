

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Build a Windows Message Handler with AddressOf in VB5 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170570">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1997/06/24">
<META NAME="Keywords" CONTENT="vb5all kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Prior to the release of Visual Basic 5.0, many developers used third-party Windows message-handling tools or developed their own with tools such as Microsoft Visual C++. With the addition of the AddressOf function to Visual Basic 5.0, developers ca...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAFF,QAPN,QDL9,QBWQ,QBWO,QBWN,QAH4,QAY5,QABA,QAEV,QBXS,QBV4,QA5F,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Build a Windows Message Handler with AddressOf in VB5</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170570</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
<LI>Microsoft Visual Studio 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Prior to the release of Visual Basic 5.0, many developers used third-party
Windows message-handling tools or developed their own with tools such as
Microsoft Visual C++. With the addition of the AddressOf function to Visual
Basic 5.0, developers can now create their own Windows message-handling
routines within their Visual Basic applications.
<P>
For example, when a user right-clicks on a textbox in Windows 95 or Windows
NT 4.0, the operating system automatically displays a default context menu.
This default behavior occurs before the Visual Basic application fires the
MouseUp event. Without the use of a Windows message handler, there is no
way to replace the default context menu with a custom built context menu.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
WARNING: Using AddressOf may cause unpredictable results if you don't
completely understand the concept of function callbacks. You must
understand how the Basic portion of the callback works, and also the code
of the DLL into which you are passing your function address. Debugging such
interactions is difficult because the program runs in the same process as
the development environment. In some cases, systematic debugging may not be
possible. See details in the REFERENCES section of this article for more
information.
<P>
The following sample shows how to build a Windows message handler to trap
and discard the right-click message to replace the default context menu
with a custom built one:

<OL><P><LI>Create a new Standard EXE project. Form1 is created by default.

<P><LI>Use the Menu Editor to add two menu items to the form:
<P>
<P><PRE>    - For the first item, set its Caption property to "My Popup," its Name
      property to "mnuPopup," and its Visible property to "False."
</PRE><P>
<P><PRE>    - For the second item, set its Caption property to "My Context," its
      Name property to "mnuPopupContext," and use the arrow keys to indent
      the item to be a submenu of the first item.
</PRE>
<P><LI>Add two CommandButtons and a textbox to the form:
<P>
<P><PRE>    - For the first CommandButton, set its Name property to "cmdHook" and
      its Caption property to "&amp;Hook."
</PRE><P>
<P><PRE>    - For the second CommandButton, set its Name property to "cmdUnHook"
      and its Caption property to "&amp;UnHook."
</PRE><P>
<P><PRE>    - For the textbox, set its Name property to "txtHook" and its Text
      property to "Right Click On Me!"
</PRE>
<P><LI>Add the following code to the form:
<P>
<P><PRE>      Private Sub cmdHook_Click()
<PRE></PRE>          Hook
      End Sub

      Private Sub cmdUnHook_Click()
          UnHook
      End Sub

      Private Sub Form_Load()
          gHW = txtHook.hWnd
      End Sub

      Private Sub txtHook_MouseUp(Button As Integer, Shift As Integer, _
                                  X As Single, Y As Single)
          If Button = vbRightButton Then
              PopupMenu mnuPopup
          End If
      End Sub

</PRE><P><LI>Add a Module to the project.

<P><LI>Add the following code to the new Module:
<P>
<P><PRE>    Declare Function CallWindowProc Lib "user32" Alias "CallWindowProcA" _
<PRE></PRE>           (ByVal lpPrevWndFunc As Long, _
            ByVal hWnd As Long, _
            ByVal Msg As Long, _
            ByVal wParam As Long, _
            ByVal lParam As Long) As Long

    Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" _
           (ByVal hWnd As Long, _
            ByVal nIndex As Long, _
            ByVal dwNewLong As Long) As Long

    Public Const GWL_WNDPROC = -4

    Public Const WM_RBUTTONUP = &amp;H205

    Global lpPrevWndProc As Long
    Global gHW As Long

    Public Sub Hook()
        lpPrevWndProc = SetWindowLong(gHW, GWL_WNDPROC, _
                                     AddressOf WindowProc)
    End Sub

    Public Sub UnHook()
        Dim lngReturnValue As Long
        lngReturnValue = SetWindowLong(gHW, GWL_WNDPROC, lpPrevWndProc)
    End Sub

    Function WindowProc(ByVal hw As Long, _
                        ByVal uMsg As Long, _
                        ByVal wParam As Long, _
                        ByVal lParam As Long) As Long

        Select Case uMsg
            Case WM_RBUTTONUP
                Form1.PopupMenu Form1.mnuPopup
            Case Else
                WindowProc = CallWindowProc(lpPrevWndProc, hw, _
                                           uMsg, wParam, lParam)
        End Select
    End Function

</PRE><P><LI>Save the project and run it. Right-click on the textbox and notice that
   the default context menu appears before the custom menu. Click on the
   CommandButton marked "Hook" to enable the Windows message handler.
   Right-click on the textbox and note that the default context menu no
   longer appears. Be sure to click on the CommandButton marked "UnHook"
   before quitting the application. Always disable a custom Windows message
   handler before the application terminates. Clicking the End button
   while this sample is running with the Windows message handler still
   enabled will cause an IPF.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
This as an advanced topic for users experienced with using callbacks,
typically C developers. If you are not familiar with the use of callbacks,
then the following references may apply:
<P>
The Visual Basic 5.0 Programmers Guide to the Win32 API by Dan Appleman,
ISBN 1-56276-446-2 published by Ziff-Davis
<P>
The Win32 SDK Online Help
<P>
(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by David Sceppa, Microsoft Corporation

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: AddressOf<BR>
Keywords          : vb5all kbhowto<BR>
Version           : 5.0 97<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

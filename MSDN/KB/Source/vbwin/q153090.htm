

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Pass a Visual Basic Array to an Excel Worksheet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153090">
<META NAME="KBModify" CONTENT="1996/07/17">
<META NAME="KBCreate" CONTENT="1996/06/28">
<META NAME="Keywords" CONTENT="kbusage kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  One of the enhancements that Visual Basic 4.0 offers over previous versions is the ability to pass an array of values to a Microsoft Excel spreadsheet with a single command. This is done by a simple assignment of an array to a Microsoft Excel range...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QAH7,QAH6,QAD7,QA4Q,QANF,QAIJ,QAPN,QAW6,QAFF,QACJ,QDMR,QDIV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Pass a Visual Basic Array to an Excel Worksheet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153090</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
One of the enhancements that Visual Basic 4.0 offers over previous versions
is the ability to pass an array of values to a Microsoft Excel spreadsheet
with a single command. This is done by a simple assignment of an array to a
Microsoft Excel range.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
Method 1:

<OL><P><LI>Start a new project. Form1 is created by default.

<P><LI>Place a Command button on the form.

<P><LI>Add the following code to the Form1 code window:
<P>
   Option Explicit
<P>
<PRE>   Private Sub Command1_Click()
     Dim o As Object
     Dim i As Integer
     Dim iNumbers(1 To 10) As Integer
     For i = LBound(iNumbers) To UBound(iNumbers)
       iNumbers(i) = Int(Rnd * 100) + 1
     Next i
     Set o = CreateObject("excel.application")
     o.Visible = True
     o.Workbooks.Add
     o.sheets("sheet1").Range("A1:J1").Value = iNumbers
   End Sub

</PRE><P><LI>Press the F5 key or select Start from the Run menu to start the program.
   You should see a new instance of Microsoft Excel created with the first
   row of the sheet populated with random numbers.
<P>
</OL>Method 2:
<P>
The code sample above uses a hard-coded range. You can change the UBound of
the Array making your code more flexible so you can specify the Starting
column and Row for output on the spreadsheet. The array will then be
entered irrespective of its size. Instead of simply using the range object,
you incorporate the cells object to build up the relevant strings. To
implement this behavior, use the following code:
<P>
<PRE>   Private Sub Command1_Click()
     Dim o As Object
     Dim i As Integer
     Dim iNumbers(1 To 10) As Integer
     Dim iStartRow As Integer
     Dim iStartCol As Integer
     iStartRow = 1
     iStartCol = 1
     For i = LBound(iNumbers) To UBound(iNumbers)
       iNumbers(i) = Int(Rnd * 100) + 1
     Next i
     Set o = CreateObject("excel.application")
     o.Visible = True
     o.Workbooks.Add
     o.sheets("sheet1").range(o.cells(iStartRow, iStartCol).address, _
       o.cells(iStartRow, ((iStartCol - 1) + _
       UBound(iNumbers))).address).Value = iNumbers
   End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbusage kbhowto<BR>
KBSubcategory: IapOle
<P>

<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: GetTempFileName API Function May Fail on 32-bit Platforms </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137034">
<META NAME="KBModify" CONTENT="1996/10/10">
<META NAME="KBCreate" CONTENT="1995/09/19">
<META NAME="Keywords" CONTENT="kbprg kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  GetTempFileName is an API function used to create a temporary filename. Although this function is supported on both 16-bit and 32-bit platforms, minor differences in its calling conventions exist. Additionally, when used with a 32-bit platform such...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWO,QAY5,QDL9,QBWQ,QBWN,QAH6,QATX,QAH7,QAD7,QBS0,QBXT,QA5V,QAIB,QBWP,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: GetTempFileName API Function May Fail on 32-bit Platforms</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137034</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
GetTempFileName is an API function used to create a temporary filename.
Although this function is supported on both 16-bit and 32-bit platforms,
minor differences in its calling conventions exist. Additionally, when used
with a 32-bit platform such as Windows 95 or Windows NT, GetTempFileName
might fail. This article discusses the function's cross-platform
portability and explains the cause and resolution of its failure on 32-bit
platforms.
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using the GetTempFileName API function on a 32-bit platform, one of
the following symptoms may appear:

<UL><LI>The function passes back a null parameter for the filename and returns
   0. This is more likely to happen in Windows NT.

<LI>The function passes back a pathname without a filename and returns 0.
   This more likely to happen in Windows 95.
<P>
</UL><h2>CAUSE</h2>
 
<P>
Contrary to its usage on 16-bit platforms where only the drive letter is
passed, GetTempFileName requires you to pass the drive letter and the
pathname when used on 32-bit platforms. Furthermore, the pathname specified
must contain existing directories. For example, examine the following
function declarations:

<UL><LI>For 16-bit platforms such as Windows 3.1 and Windows for Workgroups:
<P>
<PRE>   Declare Function GetTempFileName Lib "Kernel" (ByVal cDriveLetter as _
      Integer, ByVal lpPrefixString As String, ByVal wUnique As Integer, _
      ByVal lpTempFileName As String) As Integer

</PRE><LI>For 32-bit platforms such as Windows NT and Windows 95:
<P>
<PRE>   Private Declare Function GetTempFileName Lib "kernel32" _
      Alias "GetTempFileNameA" (ByVal lpszPath As String, _
      ByVal lpPrefixString As String, ByVal wUnique As Long, _
      ByVal lpTempFileName As String) As Long

</PRE></UL>Notice how the first parameter is the only parameter that changes in the
declarations. In 16-bit, the first parameter is an integer representing a
drive letter. The pathname is specified by the function not by the user
(see the Visual Basic 3.0 Windows 3.1 SDK help file for more information).
<P>
In 32-bit, however, the first parameter is a string that gives the
pathname. So if you were to cease a temporary file in the C drive root
directory, the first parameter will be assigned a different value for each
case:

<UL><LI>For 16-bit:    cDriveLetter = 2 (Integer representation of drive C)

<LI>For 32-bit:    lpszPath = "C:\"
<P>
</UL>If lpszPath is an invalid path or if it contains a nonexistent directory,
GetTempFileName will pass back the lpTempFileName parameter with a null
value or with a pathname only. The return value of the function in both
cases will be zero.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce and Resolve Behavior</h3>
 

<OL><P><LI>Create a new project in 32-bit Visual Basic 4.0. Form1 is created by
   default.

<P><LI>Copy the following code into the General Declarations section of Form1:
<P>
<PRE>   Private Declare Function GetTempFileName Lib "kernel32" _
      Alias "GetTempFileNameA" (ByVal lpszPath As String, _
      ByVal lpPrefixString As String, ByVal wUnique As Long, _
      ByVal lpTempFileName As String) As Long

   Private Sub Form_Click()
      Dim lpszPath As String
      Dim lpPrefixString As String
      Dim wUnique As Long
      Dim lpTempFileName As String

      ' Because the C:\windows directory, probably, doesn't exist,
      ' using this line will cause the problem to occur:
      lpszPath = "C:\windows"     ' Line A

      ' To resolve the problem, change the previous line into a comment
      ' and change the following line from a comment into an executed line:
      ' lpszPath = "C:\windows"    ' Line B

      lpPrefixString = "shn"

      ' If wUnique is nonzero, it will be appended
      ' to the temporary filename. If the parameter is zero,
      ' Windows uses the current system time to create a
      ' number to append to the filename.
      wUnique = 0

      ' Initialize variable
      lpTempFileName = Space$(100)
      Print GetTempFileName(lpszPath, lpPrefixString,_
         wUnique, lpTempFileName)

      ' If running under Windows 95, use the following line to get
      ' rid of the null character
      ' Print Mid$(lpTempFileName, 1, InStr(lpTempFileName, Chr$(0)) - 1)
      Print lpTempFileName
   End Sub

</PRE><P><LI>Start the program by pressing the F5 key.

<P><LI>Notice how the problem is reproduced. Change Line A into a comment and
   make Line B into an executed line. Then repeat step 3. The problem
   should now disappear.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubcategory: APrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

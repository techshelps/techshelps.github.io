

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Implement Optional Parameter with UserConnection Designer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170371">
<META NAME="KBModify" CONTENT="1997/07/14">
<META NAME="KBCreate" CONTENT="1997/06/19">
<META NAME="Keywords" CONTENT="vb5all kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Due to a limitation of ODBC, the UserConnection Designer cannot directly implement a query based on stored procedures with optional parameters. This article discusses two alternatives to work around this limitation.  The first alternative is to cre...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QA2Q,QA5V,QAG2,QAPN,QAH4,QBS0,QAHT,QBWS,QA4F,QAY2,QAB5,QAB9,QBCF,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Implement Optional Parameter with UserConnection Designer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170371</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Due to a limitation of ODBC, the UserConnection Designer cannot directly
implement a query based on stored procedures with optional parameters. This
article discusses two alternatives to work around this limitation.
<P>
The first alternative is to create two (or more) query objects based on
user-defined SQL. Both query objects use ODBC call syntax to invoke the
same stored procedure; one using a parameter, the other without. Depending
on the situation, the client code can decide which query to use.
<P>
The second option is to add a public method to the UserConnection object.
This method will decide the ODBC call syntax dynamically, with or without
parameters, and return the correct results.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample uses SQL Server and the Pubs sample database. This
sample uses a ListBox and two CommandButtons to demonstrate the two
approaches described above. The ListBox is loaded with values from the
au_id column of the authors table. When an item from the list is selected,
it is then passed to the stored procedure and the record count reflecting
the single record is returned. If no list item is selected, no parameter is
passed to the stored procedure and the total record count is again
returned.
<P>
<P><h3>Task One: Create the Example Stored Procedure</h3>
 
<P>

<OL><P><LI>This SQL Server stored procedure accepts an optional input parameter as
   au_id and returns a resultset of the count of total selected records.

<P><LI>To create this stored procedure, place the following CREATE PROCEDURE
   T-SQL in the SQL window of ISQL/W and execute it:
<P>
<P><PRE>      CREATE PROCEDURE TestProc (@IDCol varchar(11) = NULL) AS
<PRE></PRE>         IF @IDCol = NULL
            select count(au_id) from authors
         ELSE
            select count(au_id) from authors where au_id = @IDCol

</PRE></OL><h3>Task Two: Create the UserConnection</h3>
 

<OL><P><LI>Start a new project in Visual Basic and choose "Standard EXE." Form1
   is created by default.

<P><LI>From the Project menu, select Components, select the Designer tab, and
   then place a check next to Microsoft UserConnection.

<P><LI>From the Project menu, select Add ActiveX Designer, and then select
   Microsoft UserConnection. This will bring up a dialog titled
   UserConnection1 Properties.

<P><LI>On the Connection tab, select either a DSN or DSN-less connection and
   fill in the appropriate information. If you select DSN-less, make sure
   you specify a database in the Other ODBC Attributes area with
   database=Pubs. On the Authentication tab, fill in your username and
   password, and place a check next to Save Connection Information for
   Design Time. On the Miscellaneous tab, in the Other section, choose
   Use ODBC cursor library because you have more than one Select statement
   in the stored procedure.

<P><LI>Click OK to save this information and return to the Designer window.

<P><LI>Insert a new Query by right-clicking on UserConnection1 and choosing
   Insert Query or by clicking on the Insert Query toolbar icon. Change
   the name of the Query from Query1 to TestProc1.

<P><LI>From the Source of Query, choose Based on User-Defined SQL. Then type
   the following SQL into the TextBox:
<P>
<P><PRE>      {call TestProc (?)}
</PRE>
<P><LI>Click OK to save this information.

<P><LI>Repeat Step 6 through 8 to add another new query. Name this query as
   TestProc2. Type the following SQL into the TextBox of User-Defined SQL:
<P>
<P><PRE>      {call TestProc ()}
</PRE><P>
<P>
</OL><h3>Task Three: Build the Visual Basic Code</h3>
 

<OL><P><LI>Add two CommandButtons, Command1 and Command2, to Form1.

<P><LI>Add a ListBox control, List1, to Form1.

<P><LI>Paste the following code in the General Declaration section of Form1:
<P>
<P><PRE>      Dim cn As New UserConnection1
</PRE><P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim rs As rdoResultset

         If List1.ListIndex = -1 Then
            cn.TestProc2
         Else
            cn.TestProc1 (List1.Text)
         End If
         Set rs = cn.LastQueryResults
         MsgBox rs(0) &amp; " records selected"
         rs.Close
         List1.ListIndex = -1
      End Sub

      Private Sub Command2_Click()
         Dim rs As rdoResultset
         If List1.ListIndex = -1 Then
            Set rs = cn.TestProc3
         Else
            Set rs = cn.TestProc3(List1.Text)
         End If
         MsgBox rs(0) &amp; " records selected"
         rs.Close
      End Sub

      Private Sub Form_Load()
         List1.AddItem "648-92-1872"
         List1.AddItem "722-51-5454"
         List1.AddItem "756-30-7391"

         Command1.Caption = "Alternative 1"
         Command2.Caption = "Alternative 2"

         cn.EstablishConnection
      End Sub

</PRE><P><LI>Paste the following code under UserConnection object: (Hint: Select View
   Code from the UserConnection toolbar.)
<P>
<P><PRE>      Public Function TestProc3(Optional theID As Variant) As rdoResultset
<PRE></PRE>         Dim sCallSyntax As String
         If IsMissing(theID) Then
            sCallSyntax = "{call TestProc()}"
         Else
            sCallSyntax = "{call TestProc('" &amp; theID &amp; "')}"
         End If
         Set TestProc3 = Me.OpenResultSet(sCallSyntax)
      End Function

</PRE><P><LI>Start the program or press the F5 key.
<P>
</OL>NOTE: Two CommandButtons demonstrate two ways to do the same thing;
Alternative 1 uses two query objects to call the same stored procedure vs.
Alternative 2 which uses a custom method in the UserConnection object to
dynamically decide the ODBC call syntax, with or without parameters.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q166281.htm">Q166281</A></B>
   TITLE     : HOWTO: Create and Implement a UserConnection

</PRE></OL>(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by Adrian Chiang, Microsoft Corporation
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : vb5all kbhowto<BR>
Version             : 5.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Override Implicit Declaration with Declared Variable </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147665">
<META NAME="KBModify" CONTENT="1996/02/29">
<META NAME="KBCreate" CONTENT="1996/02/28">
<META NAME="Keywords" CONTENT="kbprg PrgOther">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic's implicit declaration of a form variable with the same name as each form class allows form manipulation code to be written without explicitly creating an instance of each form class. This is convenient, but can also lead to confusion,...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAYL,QAH4,QAJQ,QAW6,QAMA,QA5F,QAI2,QBXS,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Override Implicit Declaration with Declared Variable</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 29, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147665</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, version 4.0, for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic's implicit declaration of a form variable with the same name
as each form class allows form manipulation code to be written without
explicitly creating an instance of each form class. This is convenient, but
can also lead to confusion, especially when code is creating and
manipulating multiple instances of the same form class. By overriding
Visual Basic's implicit declaration with an explicit declaration, this
confusion can be avoided.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Rather than thinking of each form listed in the Project window as an
entity, one may think of a form has a template, or form class, that may be
used to create concrete instances. With the ability to declare public
variables, functions, and procedures on forms in Visual Basic 4.0, this
analogy becomes even more solid. Public variables are just properties of
the form, while public functions and procedures become the form's methods.
<P>
With this idea in mind, one can create and display two instances of an
existing form class with code like this:
<P>
<PRE>   Dim MyFormObject1 As Form1
   Dim MyFormObject2 As Form2

   Set MyFormObject1 = New Form1
   Set MyFormObject2 = New Form2
   MyFormObject1.Show
   MyFormObject2.Show

</PRE>While this style of coding has many advantages, Visual Basic 4.0 also does
some work behind the scenes to allow the manipulation of a form without
previously declaring a variable to hold the reference to that form. Visual
Basic does the equivalent of automatically declaring an object variable
with the same name as each form class. When a program with a startup form
begins, or the first time a property or method of a form class is called,
Visual Basic creates a form object from the form class and assigns it to
the implicitly declared reference. In the example below, the caption
property that is set is of the automatically declared Form2 variable and
automatically created object of type Form2. Because of Visual Basic's
implicit declaration and creation of the form, this code works properly.
<P>
<PRE>   Private Sub Form_Load()
      Form2.Caption = "Hello VB World"
   End Sub

</PRE>People familiar with the use of OLE servers from Visual Basic may have
heard the statement that 'the first time a property or method of a [class]
is referenced, Visual Basic creates [an object] from the [class].' This
sounds suspiciously like Visual Basic's behavior when an object variable as
been declared 'As New'. With this kind of declaration, Visual Basic will
automatically create an object when a property or method is referenced, if
an object doesn't already exist (see pages 200-201 of the Programmer's
Guide for more information). Visual Basic's implicit declaration of form
variables can be thought of as this sort of equivalent Visual Basic
statement:
<P>
<PRE>   Public MyForm As New MyForm

</PRE>If one chooses to follow the convention that all form objects should be
created and destroyed explicitly, it is easy to accidentally refer to a
property or method of the form when the form object does not exist (either
because it hasn't been explicitly created or because it has been previously
destroyed). By default, because of the above implicit declaration, Visual
Basic will happily create a new instance of the given form class and allow
the code to proceed unheeded. This can easily lead to logic errors that can
be difficult to find. To avoid this problem, one can override the implicit
declaration with their own explicit declaration. Doing so will cause Visual
Basic to correctly raise error 91, "Object variable not set," if a property
or method of a non-existing form is referenced.
<P>
A declaration should be placed in a module for each form in the project,
for example:
<P>
<PRE>   Public MyForm As MyForm
   Public MySecondForm as MySecondForm

</PRE>After these declarations, each form must be created with a Set statement
before being used, for example:
<P>
<PRE>   Sub Main()
      Set MyForm = New MyForm
      MyForm.Show
   End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 29, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

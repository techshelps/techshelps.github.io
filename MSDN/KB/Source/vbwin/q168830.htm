

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Cast an Object to a Different Interface </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168830">
<META NAME="KBModify" CONTENT="1997/05/22">
<META NAME="KBCreate" CONTENT="1997/05/21">
<META NAME="Keywords" CONTENT="kbcode vb5all VBKBVBA kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When using an object that has multiple interfaces, you may be faced with assigning it to multiple variables of different object types to get at relevant interfaces. This is made more difficult by having to keep track of the different variables and ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QAW6,QBXS,QBFY,QAFF,QAR8,QBBS,QAY5,QAK4,QBV8,QBF9,QBE7,QBE6,QAB5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Cast an Object to a Different Interface</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168830</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using an object that has multiple interfaces, you may be faced with
assigning it to multiple variables of different object types to get at
relevant interfaces. This is made more difficult by having to keep track of
the different variables and clean them up properly. This article gives code
for a simple function to allow casting an object to a different interface
without the need to create additional object variables or keep track of
them.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below illustrates a common problem when utilizing objects
that have multiple interfaces:
<P>
<PRE>   Dim Shape As IShape, C As ICircle, S As ISquare
   Set C = New ICircle
   Set Shape = C
   Shape.SetXY 100, 100
   C.Radius = 50
   Shape.Draw Me
   Set C = Nothing
   Set S = New ISquare
   Set Shape = S            ' Critical line
   Shape.SetXY 300, 200
   S.Side = 50
   Shape.Draw Me
   Set Shape = Nothing
   Set S = Nothing

</PRE>If you forget to set the Shape object to S on the "Critical line," you will
still be manipulating the Circle object in subsequent code. In addition,
it's difficult to tell you are using the Shape object to get at additional
interfaces or what object it's currently set to.
<P>
To clear up this problem, create global functions in your application to
cast the variables to their alternate interfaces. The example above
requires only one function to cast to the IShape interface:
<P>
<PRE>   Function IShape(oShape As IShape) As IShape
     Set IShape = oShape
   End Function

</PRE>You can then reference this function to perform the casting:
<P>
<PRE>   IShape(C).SetXY 100, 100
   C.Radius = 50
   IShape(C).Draw Me

</PRE>Or more efficiently:
<P>
<PRE>   With IShape(C)
     .SetXY 100, 100
     C.Radius = 50
     .Draw Me
   End With

</PRE>You no longer have to define, set, or otherwise keep track of additional
variables for casting purposes. Giving the function the same name as the
interface helps with program clarity.
<P>
<P><h3>Step-by Step Example</h3>
 

<OL><P><LI>Create a new project with the following objects:
<P>
<PRE>   Type            Name
   ---------------------------
   Class Module    IShape
   Class Module    ICircle
   Class Module    ISquare
   Form            Form1

</PRE><P><LI>Type the following code in the IShape Class Module:
<P>
<P><PRE>      Option Explicit
</PRE>   
<P><PRE>      Public Sub SetXY(ByVal NewX As Long, ByVal NewY As Long)
      End Sub
</PRE>   
<P><PRE>      Public Sub Draw(oDrawSpace As Object)
      End Sub
</PRE>
<P><LI>Type the following code into the ICircle Class Module:
<P>
<P><PRE>      Option Explicit
      Implements IShape
</PRE>   
<P><PRE>      Dim X As Long, Y As Long, iRadius As Long
</PRE>   
<P><PRE>      Private Sub IShape_Draw(oDrawSpace As Object)
<PRE></PRE>        oDrawSpace.Circle (X, Y), iRadius
      End Sub
   
      Private Sub IShape_SetXY(ByVal NewX As Long, ByVal NewY As Long)
        X = NewX
        Y = NewY
      End Sub
   
      Public Property Let Radius(ByVal NewVal As Long)
        iRadius = NewVal
      End Property

</PRE><P><LI>Type the following code in the ISquare Class Module:
<P>
<P><PRE>      Option Explicit
      Implements IShape
</PRE>   
<P><PRE>      Dim X As Long, Y As Long, Side As Long
</PRE>   
<P><PRE>      Private Sub IShape_Draw(oDrawSpace As Object)
<PRE></PRE>        oDrawSpace.Line (X, Y)-(X + Side, Y + Side), , B
      End Sub
   
      Private Sub IShape_SetXY(ByVal NewX As Long, ByVal NewY As Long)
        X = NewX
        Y = NewY
      End Sub
   
      Public Property Let SideLength(ByVal NewVal As Long)
        Side = NewVal
      End Property

</PRE><P><LI>Add a CommandButton to the lower edge of the form.

<P><LI>Type the following code in the form module:
<P>
<P><PRE>      Option Explicit
</PRE>   
<P><PRE>      Private Sub Command1_Click()
</PRE>   
<P><PRE>      Dim C As ICircle, S As ISquare
<PRE></PRE>        Set C = New ICircle
        Set S = New ISquare
      ' Manipulate circle shape (using With)
        C.Radius = 250
        With IShape(C)
          .SetXY 400, 400
          .Draw Me
        End With
      ' Manipulate square shape (without using With)
        IShape(S).SetXY 700, 300
        S.SideLength = 300
        IShape(S).Draw Me
      End Sub
   
      Function IShape(oShape As IShape) As IShape
        Set IShape = oShape
      End Function

</PRE><P><LI>Run the project and click the CommandButton. You will see a circle
   and a square drawn on the form background.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Visual Basic Help topic "Implements Statement"
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode vb5all VBKBVBA kbhowto<BR>
Technology          : kbole<BR>
Version             : 5.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

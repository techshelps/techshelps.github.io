

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Check if Program Is Running in the IDE or an EXE File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177636">
<META NAME="KBModify" CONTENT="1997/12/05">
<META NAME="KBCreate" CONTENT="1997/12/04">
<META NAME="Keywords" CONTENT="vb5all vb5howto VBKBDebug">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates how to determine if your program is running in the Visual Basic IDE or as a compiled executable file. You might want to check where your program is running if you need to add debugging information that would not be visible...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAFI,QAH4,QBWS,QBS0,QAUJ,QAJN,QA01,QAY2,QAPN,QAJQ,QAJH,QARM,QAG0,QAIJ,QABH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Check if Program Is Running in the IDE or an EXE File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 5, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177636</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to determine if your program is running in
the Visual Basic IDE or as a compiled executable file. You might want to
check where your program is running if you need to add debugging
information that would not be visible in the compiled version of your
program.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two methods you can use to determine if your program is running
from the IDE or the EXE.
<P>
<P><h3>Method 1: EXE File Name Differs from Project Name</h3>
 
<P>
The App object contains general information about the program, such as the
executable file name. If the project name and the compiled version of the
project have different file names, then you can use the App.EXEName
property to determine if the EXE is running or if your project is running
in the IDE. If the program is running from the Visual Basic IDE, the
EXEName property returns the project name. When a program is running from
an executable, the EXEName property contains the EXE file name.
<P>
<P><h3>Method 2: EXE File Name and the Project Name Are the Same</h3>
 
<P>
If the project name and the compiled version share the same name, then use
the GetModuleFileName API function to determine if your program is running
from the IDE or from a compiled version. GetModuleFileName retrieves the
full path and filename for the executable file containing the specified
module. If the function returns a path to the Visual Basic development
environment (IDE) file, VB5.EXE, then the program is running in the IDE.
Otherwise, the program is running from an executable file.
<P>
GetModuleFileName requires the following arguments:

<UL><LI>hModule:    the handle to the module whose filename you want. Use the
<PRE>               hInstance property of the APP object for this parameter.

</PRE><LI>lpFilename: a pointer to buffer to receive module path. Create a string
<PRE>               variable 255 characters long and pass that variable for
               this parameter.

</PRE><LI>nSize:      the size of buffering characters. Use 255 for this
<PRE>               parameter.

</PRE></UL>The next section illustrates how to create a sample project that implements
both of these methods.
<P>
<P><h3>Sample Project</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Add two CommandButtons to Form1.

<P><LI>Copy the following code to the Code window of Form1:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Declare Function GetModuleFileName Lib "kernel32" _
<PRE></PRE>         Alias "GetModuleFileNameA" _
         (ByVal hModule As Long, _
         ByVal lpFileName As String, _
         ByVal nSize As Long) As Long

      Private Sub Form_Load()
         'Set the command button names
         Command1.Caption = "Different Project and Executable Names"
         Command2.Caption = "Similar File Names"
      End Sub

      Private Sub Command1_Click()
          'Click this button if the project name and the compiled file
          'name are different.
          MsgBox VB.App.EXEName
      End Sub

      Private Sub Command2_Click()
         'Click this button if the project name and the compiled file
         'name are the same.

         Dim strFileName As String
         Dim lngCount As Long

         strFileName = String(255, 0)
         lngCount = GetModuleFileName(App.hInstance, strFileName, 255)
         strFileName = Left(strFileName, lngCount)

         If UCase(Right(strFileName, 7)) &lt;&gt; "VB5.EXE" Then
             MsgBox "Compiled Version"
         Else
             MsgBox "IDE Version"
         End If
      End Sub

</PRE><P><LI>Save the project with the IDEApp project name.

<P><LI>Compile two different executable files from this project. Use the
   default file name, IDEApp.exe, for the first executable file. For the
   second executable file, use the file name EXEApp. To compile the
   project, complete the following steps:
<P>
<P><PRE>    - From the File menu, click Make IDEApp.exe. The Make Project dialog
      box appears.
</PRE><P>
<P><PRE>    - Use the default file name or type your file name in the File name
      text box.
</PRE><P>
<P><PRE>    - Click OK to create the executable file and to close the Make project
      Dialog box.
</PRE>
<P><LI>On the Run menu, click Start or press the F5 key to start the program.
   Click the Different Project and Executable Names button. A message box
   displays with the message, "IDEApp," to indicate that the program is
   running from the IDE. Click the Similar File Names button. A message box
   displays with the message, "IDE Version," to indicate the program is
   running from the IDE. Close down the project.

<P><LI>Run either executable file and click the CommandButtons. A message box
   is shown indicating the program is running from an executable file.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For information about determining if a 16-bit Visual Basic application is
running in the design environment, please see the following article in
the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q118819.htm">Q118819</A></B>
   TITLE     : HOWTO: Tell Whether an App Runs in VB Design Environment
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: exe executable running design-time run-time runtime<BR>
Keywords          : vb5all vb5howto VBKBDebug<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 5, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

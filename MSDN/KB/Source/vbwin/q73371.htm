

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB3 Scrolling Text Box Programmatically and Specifing Lines </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q73371 ">
<META NAME="KBModify" CONTENT="1997/01/09">
<META NAME="KBCreate" CONTENT="1991/06/24">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  By making a call to the Windows API function SendMessage, you can scroll text a specified number of lines or columns within a Microsoft Visual Basic for Windows text box. By using SendMessage, you can also scroll text programmatically, without user...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBV4,QBT6,QBS0,QAHP,QAMB,QBXT,QA5V,QAIB,QATX,QBXQ,QAAL,QAB9,QAGI,QADO,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB3 Scrolling Text Box Programmatically and Specifing Lines</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q73371 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By making a call to the Windows API function SendMessage, you can
scroll text a specified number of lines or columns within a Microsoft
Visual Basic for Windows text box. By using SendMessage, you can also
scroll text programmatically, without user interaction. This technique
extends Visual Basic for Windows' scrolling functionality beyond the
built-in statements and methods. The sample program below shows how to
scroll text vertically and horizontally a specified number of lines.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic for Windows itself does not offer a statement for scrolling
text a specified number of lines vertically or horizontally within a text
box. You can scroll text vertically or horizontally by actively clicking
the vertical and horizontal scroll bars for the text box at run time;
however, you do not have any control over how many lines or columns are
scrolled for each click of the scroll bar. Text always scrolls one line or
one column per click the scroll bar. Furthermore, no built-in Visual Basic
for Windows method can scroll text without user interaction. To work around
these limitations, you can call the Windows API function SendMessage, as
explained below.
<P>
<P><h3>Example</h3>
 
To scroll the text a specified number of lines within a text box
requires a call to the Windows API function SendMessage using the
constant EM_LINESCROLL. You can invoke the SendMessage function from
Visual Basic for Windows as follows:
<P>
r&amp; = SendMessage&amp; (hWd%, EM_LINESCROLL, wParam%, lParam&amp;)
<P>
<PRE>     hWd%     The window handle of the text box.
     wParam%  Parameter not used.
     lParam&amp;  The low-order 2 bytes specify the number of vertical
              lines to scroll. The high-order 2 bytes specify the
              number of horizontal columns to scroll. A positive
              value for lParam&amp; causes text to scroll upward or to the
              left. A negative value causes text to scroll downward or
              to the right.
     r&amp;       Indicates the number of lines actually scrolled.

</PRE>The SendMessage API function requires the window handle (hWd% above)
of the text box. To get the window handle of the text box, you must
first set the focus on the text box using the SetFocus method from
Visual Basic. Once the focus has been set, call the GetFocus API
function to get the window handle for the text box. Below is an
example of how to get the window handle of a text box.
<P>
<PRE>     ' The following appears in the general declarations section of
     ' the form:
     Declare Function GetFocus% Lib "USER" ()

     ' Assume the following appears in the click event procedure of a
     ' command button called Scroll.
     Sub Command_Scroll_Click ()
          OldhWnd% =  Screen.ActiveControl.Hwnd
          ' Store the window handle of the control that currently
          ' has the focus.

          ' For Visual Basic 1.0 for Windows use the following line:
          ' OldhWnd% =  GetFocus ()

          Text1.SetFocus
          hWd% = GetFocus()
     End Sub

</PRE>To scroll text horizontally, the text box must have a horizontal
scroll bar, and the width of the text must be wider than the text box
width. Calling SendMessage to scroll text vertically does not require
a vertical scroll bar, but the length of text within the text box
should exceed the text box height.
<P>
Below are the steps necessary to create a text box that will scroll
five vertical lines or five horizontal columns each time you click the
command buttons labeled "Vertical" and "Horizontal":

<OL><P><LI>From the File menu, choose New Project (press ALT, F, N).

<P><LI>Double-click Form1 to bring up the code window.

<P><LI>Add the following API declaration to the General Declarations
    section of Form1. Note that you must put all Declare statements on a
    separate and single line. Also note that SetFocus is aliased as
    PutFocus because there already exists a SetFocus method within Visual
    Basic for Windows.
<P>
    Declare Function GetFocus% Lib "user" () ' For Visual Basic 1.0 only.
    Declare Function PutFocus% Lib "user" Alias "SetFocus" (ByVal
<PRE>                                                           hWd%)
    Declare Function SendMessage&amp; Lib "user" (ByVal hWd%,
                                              ByVal wMsg%,
                                              ByVal wParam%,
                                              ByVal lParam&amp;)

</PRE><P><LI>Create a text box called Text1 on Form1. Set the MultiLine
    property to True and the ScrollBars property to Horizontal (1).

<P><LI>Create a command button called Command1 and change the Caption
    to "Vertical".

<P><LI>Create a another command button called Command2 and change the
    Caption to "Horizontal".

<P><LI>From the General Declarations section of Form1, create a procedure
    to initialize some text in the text box as follows:
<P>
    Sub InitializeTextBox ()
       Text1.Text = ""
       For i% = 1 To 50
<PRE>          Text1.Text = Text1.Text + "This is line " + Str$(i%)

          ' Add 15 words to a line of text.
          For j% = 1 to 10
             Text1.Text = Text1.Text + " Word "+ Str$(j%)
          Next j%

          ' Force a carriage return (CR) and linefeed (LF).
          Text1.Text = Text1.Text + Chr$(13) + Chr$(10)

          x% = DoEvents()
       Next i%
    End Sub

</PRE><P><LI>Add the following code to the load event procedure of Form1:
<P>
    Sub Form_Load ()
       Call InitializeTextBox
    End Sub

<P><LI>Create the actual scroll procedure within the General Declarations
    section of Form1 as follows:
<P>
    ' The following two lines must appear on a single line:
    Function ScrollText&amp; (TextBox As Control, vLines As Integer, hLines
<PRE>                          As Integer)
       Const EM_LINESCROLL = &amp;H406

       ' Place the number of horizontal columns to scroll in the high-
       ' order 2 bytes of Lines&amp;. The vertical lines to scroll is
       ' placed in the low-order 2 bytes.
       Lines&amp; = Clng(&amp;H10000 * hLines) + vLines

       ' Get the window handle of the control that currently has the
       ' focus, Command1 or Command2.
       SavedWnd%  = Screen.ActiveControl.Hwnd
       ' For Visual Basic 1.0 use the following line instead of the one
       ' used above.
       ' SavedWnd% = GetFocus%()

       ' Set the focus to the passed control (text control).
       TextBox.SetFocus

       ' For Visual Basic 1.0, get the handle to current focus (text
       ' control).
       ' TextWnd% = GetFocus%()

       ' Scroll the lines.
       Success&amp; = SendMessage(TextBox.HWnd, EM_LINESCROLL, 0, Lines&amp;)
       ' For Visual Basic 1.0 use the following line instead of the one
       ' used above.
       ' Success&amp; = SendMessage(TextWnd%, EM_LINESCROLL, 0, Lines&amp;)

       ' Restore the focus to the original control, Command1 or
       ' Command2.
       r% = PutFocus% (SavedWnd%)

       ' Return the number of lines actually scrolled.
       ScrollText&amp; = Success&amp;

    End Function

</PRE><P><LI>Add the following code to the click event procedure of Command1
    labeled "Vertical":
<P>
    Sub Command1_Click ()
       ' Scroll text 5 vertical lines upward.
       Num&amp; = ScrollText&amp;(Text1, 5, 0)
    End Sub

<P><LI> Add the following code to the click event procedure of Command2
     labeled "Horizontal":
<P>
     Sub Command2_Click ()
<PRE>         ' Scroll text 5 horizontal columns to the left.
         Num&amp; = ScrollText&amp;(Text1, 0, 5)
     End Sub

</PRE><P><LI>Run the program. Click the command buttons to scroll the text five
    lines or columns at a time.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd APrgWindow
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Write to the NT Event Log from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q154576">
<META NAME="KBModify" CONTENT="1997/07/16">
<META NAME="KBCreate" CONTENT="1996/08/09">
<META NAME="Keywords" CONTENT="APrgOther vb432 vb4win vb5all vb5howto kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Event logging in Windows provides a standard, centralized way for Windows and any other applications to record important software and hardware events. It also supplies a standard user interface for viewing the logs and a programming interface for e...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAO4,QAMA,QAY5,QAY2,QA5F,QDMH,QAGI,QBV8,QBWP,QABA,QAJH,QAIJ,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Write to the NT Event Log from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q154576</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
<LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Event logging in Windows provides a standard, centralized way for Windows
and any other applications to record important software and hardware
events. It also supplies a standard user interface for viewing the logs and
a programming interface for examining the logs.
<P>
Using the Win32 API Visual Basic, you can write events into the Event Log
and report important events from your own code into the System Log. Below
is a sample showing how to do this. The API functions must be used if an
application is written with Visual Basic 4.0.
<P>
NOTE: Visual Basic 5.0 has built-in functionality for event-logging so the
API functions are unnecessary.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Visual Basic 5.0</h3>
 
<P>
Visual Basic 5.0 exposes three methods and properties of the App object by
which event-logging can be enabled:
<P>
<PRE>    LogMode Property
    LogPath Property
    LogEvent Method

</PRE>The LogMode property returns a value that determines how logging (through
the LogEvent method) will be carried out. (Read-only at runtime).
<P>
The LogPath property returns the path and filename of the file used to
capture output from the LogEvent method. (Read-only at runtime).
<P>
The LogEvent method writes an event into the application's log target. On
Windows NT platforms, the method writes to the NT Event log. On Windows 95
platforms, the method writes to the file specified in the LogPath property;
by default, if no file is specified, events will be written to a file named
vbevents.
<P>
<P><h3>Visual Basic 4.0 (32-bit)</h3>
 
<P>
The following example shows how to send three different types of events.
These steps are for applications written with Visual Basic 4.0 only.
<P>
Information, Warnings, and Errors:

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>From the File Menu, choose Remove file to remove the default form.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Declare Function RegisterEventSource Lib "advapi32.dll" Alias _
<PRE></PRE>        "RegisterEventSourceA" ( ByVal lpUNCServerName As String, _
        ByVal lpSourceName As String) As Long
      Declare Function DeregisterEventSource Lib "advapi32.dll" ( _
        ByVal hEventLog As Long) As Long
      Declare Function ReportEvent Lib "advapi32.dll" Alias  _
      "ReportEventA" (
        ByVal hEventLog As Long, ByVal wType As Integer, _
        ByVal wCategory As Integer, ByVal dwEventID As Long, _
        ByVal lpUserSid As Any, ByVal wNumStrings As Integer, _
        ByVal dwDataSize As Long, plpStrings As Long, _
        lpRawData As Any) As Boolean
      Declare Function GetLastError Lib "kernel32" () As Long
      Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" ( _
        hpvDest As Any,hpvSource As Any, _
        ByVal cbCopy As Long)
      Declare Function GlobalAlloc Lib "kernel32" ( _
         ByVal wFlags As Long, _
         ByVal dwBytes As Long) As Long
      Declare Function GlobalFree Lib "kernel32" ( _
         ByVal hMem As Long) As Long

      Public Const EVENTLOG_SUCCESS = 0
      Public Const EVENTLOG_ERROR_TYPE = 1
      Public Const EVENTLOG_WARNING_TYPE = 2
      Public Const EVENTLOG_INFORMATION_TYPE = 4
      Public Const EVENTLOG_AUDIT_SUCCESS = 8
      Public Const EVENTLOG_AUDIT_FAILURE = 10

      Public Sub LogNTEvent(sString As String, iLogType As Integer, _
        iEventID As Long)
        Dim bRC As Boolean
        Dim iNumStrings As Integer
        Dim hEventLog As Long
        Dim hMsgs As Long
        Dim cbStringSize As Long
        hEventLog = RegisterEventSource("", App.Title)
        cbStringSize = Len(sString) + 1
        hMsgs = GlobalAlloc(&amp;H40, cbStringSize)
        CopyMemory ByVal hMsgs, ByVal sString, cbStringSize
        iNumStrings = 1
        If ReportEvent(hEventLog, _
           iLogType, 0, _
           iEventID, 0&amp;, _
           iNumStrings, cbStringSize, _
           hMsgs,hMsgs) = 0 Then
           MsgBox GetLastError()
        End If
        Call GlobalFree(hMsgs)
        DeregisterEventSource (hEventLog)
      End Sub

      Sub Main()
        Call LogNTEvent("Information from " &amp; App.EXEName, _
          EVENTLOG_INFORMATION_TYPE, 1001)
        Call LogNTEvent("Warning from " &amp; App.EXEName, _
          EVENTLOG_WARNING_TYPE, 1002)
        Call LogNTEvent("Error from " &amp; App.EXEName, _
          EVENTLOG_ERROR_TYPE, 1003)
        Msgbox "Done"
      End Sub

</PRE><P><LI>Press the F5 key to start the project.
<P>
</OL>You will need to start the NT Applet, EVENTVWR.EXE, to view the events
entered with the code. Because your events are coming from an Application,
you will need to select the "Application" option from the Log Menu and then
press the F5 key to refresh the view. Your events should be there under the
name of Project1.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Developer Support Network (MSDN)
<P>
Platform SDK; Reference; Functions -- Win32 Functions
<P>
Microsoft Visual Basic 5.0 Online Help
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Win32 ReportEvent<BR>
Keywords            : APrgOther vb432 vb4win vb5all vb5howto kbhowto<BR>
Version             : 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Convert Hexadecimal Numbers to Long Integer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161304">
<META NAME="KBModify" CONTENT="1997/03/21">
<META NAME="KBCreate" CONTENT="1996/12/19">
<META NAME="Keywords" CONTENT="kbusage PrgOther vb5all vb5howto VBKBVBA kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Microsoft Visual Basic has a Hex$() function to convert a number into a string of Hexadecimal digits. However, it has no obvious function to perform the inverse conversion. This article details how to use the Val() function to perform the Hexadecim...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAKC,QAY5,QBC6,QAG8,QA4Q,QBV8,QAB9,QATX,QAEQ,QA5F,QA5B,QAMA,QAWN,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Convert Hexadecimal Numbers to Long Integer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161304</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard and Professional Editions for Windows,
   versions 2.0, 3.0
<LI>Microsoft Visual Basic Standard, Professional and Enterprise Editions
   for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Visual Basic has a Hex$() function to convert a number into a
string of Hexadecimal digits. However, it has no obvious function to
perform the inverse conversion. This article details how to use the Val()
function to perform the Hexadecimal to Long Integer conversion, plus a
trap to avoid.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Val() function can be used to convert a string of decimal digits into a
number. It can also be used on a string of hexadecimal digits, but you have
to append the characters "&amp;H" to the string of digits so that the Val()
function will use the correct number base in the conversion process.
<P>
For example:
<P>
<PRE>  A = Val("1234")    ' performs decimal conversion

  A = Val("7FFF")    ' results in 7 - the F's are ignored

  A = Val("&amp;H7FFF")  ' performs hexadecimal conversion

</PRE><h3>Integer Trap</h3>
 
<P>
If you are assigning the results of the conversion to a Long integer
variable, you will probably only want numbers in the range 80000000 to
FFFFFFFF to be treated as negative numbers. However, without taking special
precautions, numbers in the range 8000 to FFFF will also be treated as
negative.
<P>
This occurs because numbers with four or fewer digits are converted
to signed 2-byte integers. When the signed integer intermediate value is
converted to a Long (or 4-byte) integer, the sign is propagated.
<P>
<P><h3>Visual Basic 4.0/Access 95 and Later</h3>
 
<P>
By appending the "&amp;" Long suffix to the hexadecimal string, even small
numbers are treated as Long. The following function performs the
conversion correctly:
<P>
<PRE>      Function HexToLong(ByVal sHex As String) As Long
        HexToLong = Val("&amp;H" &amp; sHex &amp; "&amp;")
      End Function

</PRE><h3>Visual Basic 3.0/Access 2.0 and Earlier</h3>
 
<P>
The method illustrated above will not work in Microsoft Visual Basic 3.0 or
earlier for hexadecimal numbers greater or equal to 80000000. Please see
the REFERENCES section of this article for more information.
<P>
Because this problem does not occur with numbers that fall in the Integer
Trap range, the alternate function given below adds error trapping to try
again without the appended "&amp;" Long suffix:
<P>
<PRE>      Function HexToLong(ByVal sHex As String) As Long
        On Error Resume Next
        HexToLong = Val("&amp;H" &amp; sHex &amp; "&amp;")
        If Err Then
          On Error Goto 0
          HexToLong = Val("&amp;H" &amp; sHex)
        End If
      End Function

</PRE>Usage of either version of the function is as follows:
<P>
<PRE>      A = HexToLong("8000")

</PRE><h2>REFERENCES</h2>
 
<P>
Microsoft Visual Basic Help topic: Val Function
<P>
Microsoft Visual Basic 4.0 ReadMe topic: Coercion of Hexadecimal Values
<P>
For more information, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q95431.htm">Q95431</A></B>
   TITLE     : FIX: Type Mismatch Error If Use VAL Function on Big
               Value
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage PrgOther vb5all vb5howto VBKBVBA kbhowto<BR>
Version             : 2.0 3.0 4.0 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

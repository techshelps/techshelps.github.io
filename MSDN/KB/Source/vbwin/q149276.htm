

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use Icons with the Windows 95 System Tray </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149276">
<META NAME="KBModify" CONTENT="1997/10/31">
<META NAME="KBCreate" CONTENT="1996/03/29">
<META NAME="Keywords" CONTENT="PrgOther vb432 VB4WIN">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The Windows API provides the ability to add, modify, and remove icons from the system tray available in the Windows 95 shell. This functionality can be provided using only the Shell_NotifyIcon function that is exported by Shell32.dll. This API func...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAY5,QDKB,QATX,QANF,QAB9,QBV8,QA5F,QAMA,QDL9,QBWQ,QBWO,QBWN,QA7H V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use Icons with the Windows 95 System Tray</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149276</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Windows API provides the ability to add, modify, and remove icons from
the system tray available in the Windows 95 shell. This functionality can
be provided using only the Shell_NotifyIcon function that is exported by
Shell32.dll. This API function also provides the ability to specify a text
string for the ToolTip that is displayed when a user pauses with the mouse
pointer over the icon. The step-by-step example in this article creates a
Visual Basic program which demonstrates how to use this API function.
<P>
The ability to take some action if the icon in the systray is clicked
depends on a callback function. Because Visual Basic does not support
callback functions directly, there is no way to show a form or execute some
code using solely Visual Basic. A number of options are available that can
provide callback functionality, including the Message Blaster OCX, the OCX
mentioned in the MSJ article referenced below, or the Callback OLE server
detailed in Bruce McKinney's book, "Hardcore Visual Basic," published by
Microsoft Press. For more information on any of these options, see the
REFERENCES section at the end of this article. Because these products do
not ship with Visual Basic, Microsoft Technical Support does not support
their use.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example creates a one-form Visual Basic project that shows
how to use the Shell_NotifyIcon API function.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start Visual Basic. Form1 is created by default.

<P><LI>Change the form's icon property to the icon that should be shown in the
   systray.

<P><LI>Draw three CommandButtons onto the form.

<P><LI>Select Module from the Insert menu to add a single code module to the
   project.

<P><LI>Add the following code, consisting of function, type, and constant
   declarations, to Module1:
<P>
<P><PRE>      Type NOTIFYICONDATA
<PRE></PRE>          cbSize As Long
          hWnd As Long
          uID As Long
          uFlags As Long
          uCallbackMessage As Long
          hIcon As Long
          szTip As String * 64
      End Type

      Global Const NIM_ADD = 0
      Global Const NIM_MODIFY = 1
      Global Const NIM_DELETE = 2
      Global Const NIF_MESSAGE = 1
      Global Const NIF_ICON = 2
      Global Const NIF_TIP = 4

      Declare Function Shell_NotifyIconA Lib "SHELL32" _
      (ByVal dwMessage As Long,  lpData As NOTIFYICONDATA) As Integer

</PRE><P><LI>The following code is a function that takes the parameters that need to
   be set for the NOTIFYICONDATA type and returns a variable of this type.
   Add to Form1:
<P>
<P><PRE>      Private Function setNOTIFYICONDATA(hWnd As Long, ID As Long, _
<PRE></PRE>          Flags As Long, CallbackMessage As Long, Icon As Long, _
          Tip As String) As NOTIFYICONDATA

          Dim nidTemp As NOTIFYICONDATA

          nidTemp.cbSize = Len(nidTemp)
          nidTemp.hWnd = hWnd
          nidTemp.uID = ID
          nidTemp.uFlags = Flags
          nidTemp.uCallbackMessage = CallbackMessage
          nidTemp.hIcon = Icon
          nidTemp.szTip = Tip &amp; Chr$(0)

          setNOTIFYICONDATA = nidTemp
      End Function

</PRE><P><LI>The three procedures in this block of code call the function created in
   step 5 to add, modify, and remove systray icons. Add this code to Form1
   also:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>          'Add an icon.  This procedure uses the icon specified in
          'the Icon property of Form1. This can be modified as desired.

          Dim i As Integer
          Dim s As String
          Dim nid As NOTIFYICONDATA

          s = InputBox("Enter string:")
          nid = setNOTIFYICONDATA(hWnd:=Form1.hWnd, _
                                  ID:=vbNull, _
                                  Flags:=NIF_MESSAGE Or NIF_ICON _
                                  Or NIF_TIP, _
                                  CallbackMessage:=vbNull, _
                                  Icon:=Form1.Icon, _
                                  Tip:=s)

             i = Shell_NotifyIconA(NIM_ADD, nid)
         End Sub

         Private Sub Command2_Click()
             'Modify an existing icon. This procedure uses the icon
             'specified in the Icon property of Form1. This can be modified
             'as desired.

             Dim i As Integer
             Dim s As String
             Dim nid As NOTIFYICONDATA

             s = InputBox("Enter string:")
             nid = setNOTIFYICONDATA(hWnd:=Form1.hWnd, _
                                     ID:=vbNull, _
                                     Flags:=NIF_MESSAGE Or NIF_ICON _
                                     Or NIF_TIP, _
                                     CallbackMessage:=vbNull, _
                                     Icon:=Form1.Icon, _
                                     Tip:=s)

             i = Shell_NotifyIconA(NIM_MODIFY, nid)
         End Sub

         Private Sub Command3_Click()
             'Delete an existing icon.

             Dim i As Integer
             Dim nid As NOTIFYICONDATA

          nid = setNOTIFYICONDATA(hWnd:=Form1.hWnd, _
                                  ID:=vbNull, _
                                  Flags:=NIF_MESSAGE Or NIF_ICON _
                                  Or NIF_TIP, _
                                  CallbackMessage:=vbNull, _
                                  Icon:=Form1.Icon, _
                                  Tip:="")

          i = Shell_NotifyIconA(NIM_DELETE, nid)
      End Sub

</PRE><P><LI>Press the F5 key or select Start from the Run menu to run the
   application. Click the first button and enter a text string to add an
   icon. Click the second button to modify an existing icon, and the third
   to delete the icon.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Hardcore Visual Basic, Bruce McKinney, Microsoft Press 1995.
Microsoft Win32 SDK, Shell_NotifyIcon and NOTIFYICONDATA.
Microsoft Systems Journal, February 1996, The Visual Programmer, page 93.
Visual Basic Programmer's Journal, March 1996, Q&amp;A, page 136.
 
<PRE>Keywords          : PrgOther vb432 VB4WIN
Version           : 4.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

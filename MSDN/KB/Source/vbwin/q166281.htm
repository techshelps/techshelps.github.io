

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create and Implement a UserConnection </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166281">
<META NAME="KBModify" CONTENT="1997/10/16">
<META NAME="KBCreate" CONTENT="1997/04/02">
<META NAME="Keywords" CONTENT="vb5all kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The UserConnection Designer is one of the new ActiveX Designers included with Visual Basic 5.0. It allows you to wrap SQL or a Stored Procedure with code at design time so you can call it as a method at run time. This way, Visual Basic will list th...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAH4,QA2Q,QBWS,QAG2,QAI5,QACI,QAY2,QAUD,QABM,QBCF,QA5A,QABI,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create and Implement a UserConnection</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166281</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Enterprise Edition for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The UserConnection Designer is one of the new ActiveX Designers included
with Visual Basic 5.0. It allows you to wrap SQL or a Stored Procedure with
code at design time so you can call it as a method at run time. This way,
Visual Basic will list the parameters of your stored procedure in the
object browser just as it does with any other VBA method. This new
functionality can replace the rdoPreparedStatement and rdoQuery objects,
although these are still available.
<P>
The following is an excerpt on the UserConnection from Books Online:
<P>
<PRE>  “The UserConnection designer uses Visual Basic's ActiveX designer
  architecture to provide design-time support for programmatic data
  access. It allows you to create connection and query objects at
  design time. These connections and queries are persisted as project-level
  objects. You can pre-set properties, define new properties and methods,
  and write code behind the objects to catch events.”

</PRE><h2>MORE INFORMATION</h2>
 
<P>
This sample uses SQL Server and the Pubs database, but you can change the
DSN, UID, PWD, and SQL to match any ODBC database you may be using.
<P>
<P><h3>Task One: Create the Example Stored Procedure</h3>
 

<OL><P><LI>This sample SQL Server stored procedure accepts an input parameter of
   au_id and returns a resultset and a test output variable. The test
   output variable is hard-coded and has no meaning except to demonstrate
   how to return an output using a UserConnection. If you are not using
   SQL Server, you might have to modify the SQL into an acceptable format
   for your database server.

<P><LI>To create this stored procedure you will need a tool that allows you to
   execute SQL such as ISQL/W or MSQuery included with SQL Server. Select
   the Pubs database, then place the following Create Procedure T-SQL in
   the SQL window of your selected tool and execute it:
<P>
<P><PRE>      Create procedure GetAuthorInfo
<PRE></PRE>        @au_id Varchar(11), @testOut Varchar(10) OUTPUT As
        Select * from authors Where au_id = @au_id
        Select @testOut = 'Hello'


</PRE></OL><h3>Task Two: Create the Userconnection</h3>
 

<OL><P><LI>Start a new project in Visual Basic and choose "Standard EXE." Form1 is
   created by default.

<P><LI>From the Project menu, select Components, select the Designer tab, and
   then place a check next to Microsoft UserConnection.

<P><LI>From the Project menu, select Add ActiveX Designer, then select
   Microsoft UserConnection. This will bring up a dialog titled
   UserConnection1 Properties.

<P><LI>On the Connection tab, select either a DSN or a DSN-Less connection and
   fill in the appropriate information. If you select DSN-less, make sure
   you specify a database in the Other ODBC Attributes area with
   database=pubs. On the Authentication tab, fill in your username and
   password, and place a check next to Save Connection Information for
   Design time. On the Miscellaneous tab in the Other section, choose Use
   ODBC Cursor Library because you have more than one Select statement in
   your stored procedure.

<P><LI>Click OK to save this information, and return to the Designer window.
   Press the F4 key to display the Properties window and change the Name
   property from UserConnection1 to StoredProcs.

<P><LI>Insert a new Query by right-clicking on StoredProcs and choosing
   Insert Query or by clicking on the Insert Query toolbar icon. Change the
   name of the Query from Query1 to GetAuthorInfo. From the Source of
   Query, choose Based on Stored Procedure, then select the stored
   procedure you created earlier, GetAuthorInfo.

<P><LI>If you select the Parameters tab, you can review the input and output
   parameters. Your GetAuthorInfo Query setup is now finished. Click
   OK to close the Dialog.

<P><LI>To place code in the connection event of your UserConnection, select
   View Code from the UserConnection toolbar. Choose UserConnection in
   from the upper-left combo box, then choose the Connect Event from the
   upper-right combo box. Place the following code in the UserConnection
   Connect event:
<P>
<P><PRE>      Debug.Print "Connect"
</PRE><P>
</OL><h3>Task Three: The Userconnection Code</h3>
 

<OL><P><LI>Add a CommandButton, Command1, to Form1 of Project1.

<P><LI>Paste the following code in the General Declarations section of
   Form1:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>        Dim objSP As New StoredProcs             'creatable UC object
        Dim objRs As rdoResultset                'pointer to rdoResultset
        Dim lngRet As Long, strOut As String     'vars to hold output

        objSP.EstablishConnection rdDriverNoPrompt  'establish connection
        lngRet = objSP.GetAuthorInfo("648-92-1872", strOut) 'SP method
        Set objRs = objSP.LastQueryResults          'get results off objRs
        Debug.Print lngRet, strOut, objRs(0)        'output example results
      End Sub

</PRE><P><LI>Start the program or press the F5 key.

<P><LI>Click the Command1 button to execute the UserConnection code. The
   Stored Procedure return value, output value, and the first column of
   the returned resultset will print in the Debug window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
In Visual Basic Books Online see:
<PRE>  Guide to Building Client Server Applications in Visual Basic (Enterprise)
    Part 1: Overview
      Client/Server Tools
        The UserConnection Designer

</PRE></OL>(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
Jon Fowler, Microsoft Corporation
 
<PRE>Keywords          : vb5all kbhowto
Technology        : kbole
Version           : 5.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

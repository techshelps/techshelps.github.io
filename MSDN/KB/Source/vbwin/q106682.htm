

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Default Extension Ignores File Type in VB Common Dialog </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106682">
<META NAME="KBModify" CONTENT="1995/11/17">
<META NAME="KBCreate" CONTENT="1993/11/11">
<META NAME="Keywords" CONTENT="kbprg kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The common dialog custom control (CMDIALOG.VBX) cannot determine which file type you choose in the Open or Save As dialog box under List Files of Type. Your chosen file type correctly displays existing files of that type and filters out other files...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA01,QAOG,QAUD,QAP2,QBTI,QA5F,QAMA,QAFI,QBQU,QAPN,QABA,QBWS,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Default Extension Ignores File Type in VB Common Dialog</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106682</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The common dialog custom control (CMDIALOG.VBX) cannot determine which file
type you choose in the Open or Save As dialog box under List Files of Type.
Your chosen file type correctly displays existing files of that type and
filters out other files. However, Visual Basic code cannot detect which
file type you chose.
<P>
Also, the default file name extension set by the DefaultExt property is not
affected by changes you make under List Files of Type. As a result, a file
name that you enter without an extension will take the extension of
DefaultExt instead of your choice under List Files of Type.
<P>
The above behavior of File Open and File Save As is different from many
other Windows applications, such as Microsoft Excel. Excel determines which
file-type filter you choose and automatically appends that extension to
any file name that you may enter without an extension.
<P>
<P><h2>CAUSE</h2>
 
<P>
This behavior is by design in the common dialog control in Visual Basic.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Instead of using Visual Basic's common dialog custom control, you can write
your own DLL routine in C to call the Windows common dialog routines
located in COMMDLG.DLL. Then you can call that DLL from Visual Basic.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design. A change in the design is under review and
will be considered for inclusion in a future release.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: In Visual Basic 4.0, the common dialog's name property must be
changed from CommonDialog1 to CMDialog1.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a common dialog control to Form1. This requires CMDIALOG.VBX to
   be loaded in Visual Basic. You can load CMDIALOG.VBX automatically
   through your AUTOLOAD.MAK file or by choosing Add File from the File
   menu.

<P><LI>Add the following to the Form Load event code:
<P>
<PRE>   Sub Form_Load ()

     ' Enter the following two lines as one, single line:
     CMDialog1.Filter = "Text Files *.Txt|*.Txt|Basic Files *.Bas|*.Bas|
        All Files *.*|*.*"
     CMDialog1.FilterIndex = 1  'Sets default filter to *.txt.

     CMDialog1.DefaultExt = "TXT"  'Default extension if you enter none.
     ' In the dialog box, the default extension will be applied only if you
     ' enter the filename with no period. If you type the file name with
     ' a period and no extension (such as FILEX.), then CMDialog1.Filename
     ' always returns a blank extension.

     ' Set the common dialog Action property to 1 to execute the File Open
     ' dialog or 2 to execute the File Save As dialog:
     CMDialog1.Action = 1  ' 1=Invokes the File Open common dialog box.

   ' Limitation: The value of FilterIndex doesn't change even if you change
   ' the file type in the Open common dialog box:
     Debug.Print CMDialog1.FilterIndex

    ' The Filename property displays the filename and path that you entered
     ' in the Open dialog:
     Debug.Print CMDialog1.Filename  'Prints filename with path prefix
     ' Debug.Print CMDialog1.Filetitle 'Prints filename without path

   End Sub

</PRE><P><LI>Start the program or press the F5 key. The Open dialog now displays.

<P><LI>Under List Files of Type, select Basic Files *.Bas. Under File Name,
   enter a filename such as TESTFILE without an extension and without
   a period. Click OK.
<P>
   The debug window now shows the following limitations:
<P>
   a. The CMDialog1.FilterIndex property keeps its value of 1.
<P><PRE>      CMDialog1.FilterIndex does not change in response to your changing
      the file type in the Open dialog box. This is by design in the
      common dialog custom control in Visual Basic.
</PRE><P>
   b. The CMDialog1.Filename property returns C:\VB\TESTFILE.TXT, which is
<P><PRE>      the filename you entered plus the default extension .TXT. Notice that
      the program cannot detect the file type you chose in the Open dialog
      box. The default extension .TXT set by the DefaultExt property is
      independent of changes under List Files of Type. These are design
      limitations in the common dialog custom control in Visual Basic.
</PRE><P>
</OL>NOTE: File names that you enter with an extension keep that extension as
desired.
<P>
<P><h3>Workaround for Windows API Programmers</h3>
 
<P>
Visual Basic's common dialog custom controls for Open and Save As pass
their FilterIndex property to the Windows API function GetOpenFileName.
GetOpenFileName is located in the Windows COMMDLG.DLL file. However, Visual
Basic ignores the nFilterIndex value that the GetOpenFileName function
returns. By design, your Visual Basic program cannot access the structure
returned by the GetOpenFileName function, even by calling API routines.
<P>
You can write your own DLL routine in C to call the Windows common dialog
routines located in COMMDLG.DLL. Then call this DLL from Visual Basic.
The following documentation from the Windows Software Development Kit (SDK)
explains how to use the nFilterIndex element of the structure passed to
GetOpenFileName:
<P>
<PRE>   nFilterIndex:
   Specifies an index into the buffer pointed to by the lpstrFiler member.
   The system uses the index value to obtain a pair of strings to use as
   the initial filter description and filter pattern for the dialog box.
   The first pair of strings has an index value of 1. When the user chooses
   the OK button to close the dialog box, the system copies the index of
   the selected filter strings into this location. If the nFilterIndex
   member is 0, the filter in the buffer pointed to by the
   lpstrCustomFilter member is used. If the nFilterIndex member is 0 and
   the lpstrCustomFilter member is NULL, the system uses the first filter
   in the buffer pointed to by the lpstrFilter member. If each of the three
   members is either 0 or NULL, the system does not use any filters and
   does not show any files in the File Name list box of the dialog box.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 3.00 4.00 vb416 vb4win<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubcategory: PrgCtrlsCus<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

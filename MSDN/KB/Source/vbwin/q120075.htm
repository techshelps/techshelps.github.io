

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Convert VB for MS-DOS Programs to VB for Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120075">
<META NAME="KBModify" CONTENT="1996/12/31">
<META NAME="KBCreate" CONTENT="1994/08/31">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article provides information and tips for converting Microsoft Visual Basic version 1.0 for MS-DOS programs to Microsoft Visual Basic for Windows.  To convert Visual Basic for MS-DOS programs, you must have both Visual Basic version 1.0 for MS...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QDL9,QBWQ,QBWO,QBWN,QAMA,QA5F,QAB4,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Convert VB for MS-DOS Programs to VB for Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 31, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120075</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard, Professional, and Enterprise Editions of Microsoft Visual
<PRE>  Basic, 16-bit and 32-bit, for Windows, version 4.0
</PRE>- Standard and Professional Editions of Microsoft Visual Basic
<PRE>  for MS-DOS, version 1.0
</PRE>- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0, 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides information and tips for converting Microsoft Visual
Basic version 1.0 for MS-DOS programs to Microsoft Visual Basic for
Windows.
<P>
To convert Visual Basic for MS-DOS programs, you must have both
Visual Basic version 1.0 for MS-DOS and Visual Basic version 2.0 or
higher for Windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Converting Visual Basic for MS-DOS Applications</h3>
 
<P>
If you have Visual Basic for MS-DOS, you can create applications that
run under both MS-DOS and Windows. Such applications exist as separate
.EXE files for each target environment. There is no way to create a
single file that will run in both environments. When you convert a
Visual Basic application from MS-DOS to Windows, you are faced with the
following problems:

<UL><LI>The binary file formats of the modules are different for the two
   products.
<LI>The appearance of some forms and controls is different.
<LI>There are language differences between Visual Basic for MS-DOS
   and Visual Basic for Windows.
<P>
</UL>Some of these language differences result because Windows and MS-DOS
control their respective environments in very different ways. Other
differences occur because some language components of Visual Basic for
MS-DOS are simply not supported by Visual Basic for Windows.
<P>
You can resolve these problems using the following general procedure. The
rest of this article includes specific information on these general steps.
<P>
To convert an application from MS-DOS to Windows:

<OL><P><LI>Start Visual Basic for MS-DOS and open the project to convert.

<P><LI>Move all procedure declarations into an include file (.BI) and add a
   $INCLUDE metacommand at the module level of each file.

<P><LI>Save each form and code module in text format.

<P><LI>Copy the project's .MAK, .FRM, and .BAS files to a new directory.

<P><LI>Edit the project file (.MAK) to change explicit path names--if used.

<P><LI>Open the project in Visual Basic for Windows and view each form. If an
   error occurs reading the MS-DOS form definition, Visual Basic for
   Windows creates a .LOG file and displays a warning.

<P><LI>Review the .LOG files (if any) to see a listing of incompatibilities.
   Fix these errors using Visual Basic for Windows or a text editor.

<P><LI>Adjust the visual interface of the application to best match the
   capabilities of Windows.

<P><LI>Resolve any conflicts between Visual Basic for Windows keywords and
   existing symbol names. (Symbols are the names of variables, constants,
   objects, procedures, parameters, or labels used in code.)

<P><LI>Convert platform-specific code to work with the target environment.

<P><LI>Run your application in the target environment to verify its behavior
<P><PRE>    and to test your changes.
</PRE><P>
</OL>NOTE: Visual Basic capitalizes keywords automatically based on an internal
convention. In MS-DOS, the convention is all uppercase. In Windows, the
convention is to capitalize the first letter of each keyword. Although the
appearance of your code may change, the content remains the same.
<P>
<P><h3>Moving Procedure Declarations to an Include File</h3>
 
<P>
Visual Basic for MS-DOS uses DECLARE statements to declare Basic and
Quick library procedures (.QLB). Visual Basic for Windows uses
Declare only for DLLs. To avoid syntax errors when you move your
MS-DOS application to Windows, move DECLARE statements to a Visual
Basic for MS-DOS include file (.BI) and add a $INCLUDE metacommand at
the module level of each file. For example:
<P>
<PRE>   '$INCLUDE: 'DOSINC.BI'

</PRE></OL>Visual Basic for Windows does not recognize the $INCLUDE metacommand, so
this statement is treated as a comment. The code will continue to run
correctly in Visual Basic for MS-DOS, however.
<P>
<P><h3>Saving Form and Code Modules in Text Format</h3>
 
<P>
By default, all forms and code modules (.FRM and .BAS) are saved in a
binary format. As mentioned previously, however, the binary format is
not compatible between versions of Visual Basic. To load an MS-DOS
project in Windows, you must first save all of the files in text format.
Once a file is saved in text format, it will continue to be saved in
that format by default.
<P>
To save a form or code module in text format:

<OL><P><LI>Start Visual Basic for MS-DOS and open the project to convert.

<P><LI>From the File menu, choose Save File As. Visual Basic displays the
   Save File As dialog box.

<P><LI>Select the Save as Text check box.

<P><LI>Choose OK.
<P>
</OL><h3>Copying Project Files</h3>
 
<P>
After you save the forms and code modules in text format, copy the entire
project to a new location so you do not overwrite your source application.
Copy only the .MAK file and the files listed in the .MAK file. Because
Windows and MS-DOS custom controls are not compatible, there is no need to
copy files with .QLB extensions. Portions of applications that depend on
custom controls or Quick library procedures (.QLB files) must be rewritten.
<P>
<P><h3>Editing the Project File</h3>
 
<P>
If you saved your modules to a directory other than the current one,
Visual Basic for MS-DOS includes the paths in your project file (.MAK).
Load this file in a text editor, and change the paths to reflect the
directory of the new project.
<P>
<P><h3>Opening the Project and Viewing Forms</h3>
 
<P>
After copying and editing the project files, start Visual Basic for
Windows and open the project. View each form in the project by selecting
the file in the Project window and choosing the View Form button.
<P>
If errors occur, Visual Basic for Windows displays a warning, "Errors
during load." Refer to 'filename.LOG' for details. Make a note of the
file name and choose the OK button to close the dialog box.
<P>
<P><h3>Reviewing the .LOG Files</h3>
 
<P>
Two types of errors (invalid form names and invalid properties) occur when
loading an MS-DOS form in Visual Basic for Windows.
<P>
Forms in Visual Basic for Windows cannot be named MDIForm. If you have a
form with this name in your MS-DOS project, it will generate the following
error in Visual Basic for Windows and the form will not load:
<P>
<PRE>   MDIForm is a class name

</PRE></OL>You must change the form name in the .FRM file using a text editor. For
example:
<P>
<PRE>   Version 1.00
   BEGIN Form tMDIForm  ' Added "t."

</PRE>After making this change, reload the project.
<P>
When you view an MS-DOS form that has a property or property setting not
supported by Visual Basic for Windows, Visual Basic for Windows creates
a .LOG file similar to this one:
<P>
<PRE>   Line 120 :Property BorderStyle in control picJAW could not be set.
   Line 141 :Property Attached in control HScroll1 could not be loaded.
   Line 254 :Property Attached in control VScroll1 could not be loaded.

</PRE>It is important to review the .LOG files to check for properties that
may be used in code or that critically affect the appearance or behavior
of your application.
<P>
When you save a form file in ASCII format, Visual Basic for Windows
omits default property settings, invalid property settings, and invalid
properties. Because Visual Basic for Windows treats omitted property
settings as default values, invalid property settings revert to their
default. For more information, see Appendix A, "ASCII File Formats" of
the Visual Basic for Windows "Programmer's Guide."
<P>
<P><h3>Adjusting the Visual Interface</h3>
 
<P>
When Visual Basic for Windows loads a project created in Visual Basic
for  MS-DOS, it changes the appearance of forms as they are loaded.
These changes are due to  the differences between Visual Basic for MS-
DOS and Visual Basic for Windows:

<UL><LI>The position and size of controls may change because the Visual Basic
   for MS-DOS character coordinates are converted to twips in Visual Basic
   for Windows.

<LI>Colors may change because the Visual Basic for MS-DOS colors are
   converted to RGB values.

<LI>Custom controls are mapped to picture controls.
<P>
</UL>Use the Visual Basic for Windows design tools to adjust the appearance and
placement of controls as appropriate.
<P>
You may be able to define global changes to the appearance of your
application by editing the ASCII form description for each form module
before you load the form in Visual Basic. For information about the format
of the ASCII form description, see Appendix A, "ASCII File Formats" of the
Visual Basic for Windows "Programmer's Guide."
<P>
<P><h3>Converting Platform-Specific Code</h3>
 
<P>
Some applications, such as the sample application CALC.FRM, will run
fine on either MS-DOS or Windows without changing much code. However,
more complex applications can require significant recoding. There are
several categories of platform-specific code that you must change to
move an application from MS-DOS to Windows:

<UL><LI>System calls. Code that relies on MS-DOS interrupts must be rewritten.

<LI>Data type and scoping differences. Visual Basic for Windows and Visual
   Basic for MS-DOS have different default data types. The scoping rules
   for arrays are also different.

<LI>Unsupported keywords. Most of the Visual Basic for MS-DOS keywords that
   are not supported in Windows have functionality that is replaced by
   forms and event-driven programming style.

<LI>Different coding mechanisms. Some features, such as declaring global
   variables and displaying run-time graphics, require different coding
   mechanisms because of language differences between Visual Basic for
   Windows and MS-DOS.
<P>
</UL>The following four sections provide details on these differences.
<P>
<P><h3>System Calls</h3>
 
<P>
Many MS-DOS system calls have some equivalent under Windows. However, the
mechanism for calling Windows functions is very different from using MS-DOS
interrupts. For information on calling Windows functions, see "Calling
Procedures in DLLs" in the Visual Basic for Windows "Programmer's Guide."
<P>
<P><h3>Data Type and Scoping Differences</h3>
 
<P>
In Visual Basic for MS-DOS, the default data type is SINGLE. In Visual
Basic for Windows, the default data type is Variant. This difference can
cause serious errors using Get and Put on existing data files, because the
two data types are different sizes. To avoid this, add a DefSng statement
to each module that doesn't already include a Deftype statement.
<P>
To remain consistent with earlier versions of Basic, Visual Basic for
MS-DOS does not allow shared array variables to be shadowed at the
procedure level. For example, the following code behaves differently in
MS-DOS and Windows:
<P>
<PRE>   ' Module level
   DIM SHARED Array() AS INTEGER
   SUB ChangeArray ()
      ' In MS-DOS, dimensions shared array. In Windows, creates
      ' a new copy of the array (shadows shared array).
      DIM Array(10)
   END SUB

</PRE>To avoid this unexpected behavior, rename the procedure-level array.
<P>
<P><h3>Unsupported Keywords</h3>
 
<P>
Visual Basic for Windows omits about 100 keywords that are supported by
Visual Basic for MS-DOS. Using any of these keywords in the MS-DOS
application that you convert to Windows results in omitted
functionality. You must rewrite any code that relies on these keywords.
<P>
<PRE>ALL             INKEY$          SEEKEQ
BLOAD           INP             SEEKGE
BOF             INSERT          SEEKGT
BSAVE           IOCTL           SEG
CALLS           IOCTL$          SETINDEX
CDECL           ISAM            SETMEM
CHAIN           KEY             SETUEVENT
CHECKPOINT      LIST            SIGNAL
COLOR           LOCATE          SLEEP
COM             LPOS            SOUND
COMMON          LPRINT          SSEG
CREATEINDEX     MKC$            SSEGADD
CSRLIN          MKDMBF$         STACK
CVI             MKI$            STICK
CVC             MKL$            STRIG
CVD             MKS$            SWAP
CVDMBF          MKSMBF$         SYSTEM
CVL             OUT             TEXTCOMP
CVS             PAINT           TRON
CVSMBF          PALETTE         TROFF
DELETEINDEX     PCOPY           UEVENT
DELETETABLE     PEEK            UPDATE
DRAW            PEN             VARPTR
ERDEV           PLAY            VARPTR$
ERDEV$          PMAP            VARSEG
EVENT           POS             VIEW
FIELD           PRESET          WAIT
FILES           RUN             WINDOW
FN              SADD
FRE             SAVEPOINT
GETINDEX$       SCREEN

</PRE>NOTE: Visual Basic for Windows does not support DEF FN functions.
<P>
<P><h3>Different Coding Mechanisms</h3>
 
<P>
The scoping mechanisms in Visual Basic for MS-DOS are different from those
in Visual Basic for Windows, as shown by this table:
<P>
<PRE>Visual Basic MS-DOS construction      Visual Basic for Windows equivalent
</PRE> 
<PRE>COMMON SHARED                         Public

DIM SHARED (at module level)          Dim (at module level).

SHARED attribute (procedure level)    None. Use module-level variable,
                                      which is visible to all procedures.

COMMON                                None. Module-level   only variables
                                      are not useful in Visual Basic for
                                      Windows.

</PRE>Visual Basic for MS-DOS applications cannot display forms and graphics at
the same time. This limitation does not exist in Visual Basic for Windows.
Code that displays graphics must be completely rewritten for use in
Windows.
<P>
Similarly, custom controls are very different in Visual Basic for MS-DOS
and Windows. Custom controls and Basic code that rely on custom controls
must be rewritten for Windows.
<P>
<P><h3>Running Your Converted Application</h3>
 
<P>
To complete the conversion, run your application in Visual Basic for
Windows and test for errors. The following is a list of problems you may
encounter. Only the most likely problems are listed here, along with the
error message you may see.

<UL><LI>Visual Basic for Windows reserves True and False as instrinsic
   constants.
<P>
<P><PRE>      Possible error message - Expected: identifier
</PRE><P>
<P><PRE>      Remove or comment out the constant declarations for TRUE and FALSE.
</PRE>
<LI>Visual Basic for Windows allows executable code only inside a procedure;
   there can be no executable code or labels at the module level of a
   Visual Basic application.
<P>
<P><PRE>      Possible error message -  Invalid outside procedure
</PRE><P>
<P><PRE>      Move module-level executable code into a Sub Main ( ) procedure and
      set it to be the startup procedure. Convert module-level error-
      handling code to local error handlers.
</PRE>
<LI>Visual Basic for Windows does not recognize the DATA statement.
<P>
<P><PRE>      Possible error message - Expected: statement
</PRE><P>
<P><PRE>      Convert the values in the DATA statement(s) to a sequential
      file; replace the DATA statement(s) with a block of code
      that opens, reads, and closes the file.
</PRE>
<LI>Visual Basic for Windows does not recognize the COMMON keyword.
<P>
<P><PRE>      Possible error message - Expected: end-of-statement
</PRE><P>
<P><PRE>      Replace the COMMON SHARED keywords with the keyword PUBLIC.
      Move module-level code into procedures.
</PRE>
<LI>Visual Basic for Windows puts invalid procedure definitions at
   the Declarations level of a module.
<P>
<P><PRE>      Possible error message - Expected: parameter or )
</PRE><P>
<P><PRE>      Cut the procedure code from the Declarations level and paste
      it into a valid procedure definition. Delete the invalid
      procedure definition.
</PRE><P>
</UL><h3>Techniques for Platform-Independent Applications</h3>
 
<P>
Writing an application that will convert easily from MS-DOS to Windows
requires some planning. Here are some suggestions that make the process
easier.

<UL><LI>Start with MS-DOS. The appearance of MS-DOS forms requires less
   adjustment when converted to Windows. Also, because the forms-related
   features of Visual Basic for MS-DOS are a subset of those available in
   Windows, you are less likely to inadvertently use a feature for which
   there is no solution.

<LI>Use the portable subset of the language. The lists of unsupported
   keywords provided earlier in this chapter will give you an idea of
   features to avoid when planning a portable application.

<LI>Debug your MS-DOS application before you convert it to Windows. If you
   start with an application that runs without errors, you can assume that
   errors you encounter when converting are related to differences between
   the two platforms. This will save you a lot of time trouble-shooting.

<LI>Create parallel Include files. In Visual Basic for MS-DOS, place COMMON
   SHARED and constant declarations in an Include file (.BI). For the
   Visual Basic application, add a Basic module (.BAS) with parallel Global
   declarations and appropriate constants.

<LI>Package portable procedures in code modules. Procedures that will run in
   MS-DOS or Windows without modification should be placed in code modules
   (.BAS) that you can share between the two platforms.

<LI>Modularize run-time graphics. Place all run-time graphics procedures in
   a separate module. Visual Basic for MS-DOS does not support graphics
   while forms are showing, and code for MS-DOS graphics is more hardware-
   dependent than similar code for Windows.

<LI>Test portability. When developing a large application, periodically test
   its portability during development. This will help you develop a
   portable coding style.
<P>
</UL><h3>Detecting the Platform at Startup</h3>
 
<P>
Applications created with Visual Basic for Windows include code that will
automatically start Windows if it is not running on your system. This
feature can be used to create an application that will run in either
Windows or MS-DOS.
<P>
The following batch file starts CALCWIN.EXE. If Windows is not available or
cannot start, the batch file runs CALCDOS.EXE instead:
<P>
<PRE>   @ECHO OFF
   CALCWIN.EXE
   IF ERRORLEVEL 1 CALCDOS.EXE

</PRE>The application sets an MS-DOS error code of 1 if it can't start Windows.
Otherwise, the error code is 0 when the application ends.
<P>
NOTE: This feature also applies to MS-DOS sessions. If Windows can't start
because it is already running, the preceding batch file will start
CALCDOS.EXE.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbhowto<BR>
KBSubCategory: PrgOther<BR>
Additional reference words: 1.00 2.00 3.00 4.00 B_VBMSDOS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 31, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

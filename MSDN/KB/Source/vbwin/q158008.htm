

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use MSCOMM32.OCX to Transfer Data on DBCS Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158008">
<META NAME="KBModify" CONTENT="1997/07/03">
<META NAME="KBCreate" CONTENT="1996/10/22">
<META NAME="Keywords" CONTENT="kbcode PrgCtrlsCus vb4all vb5all vb5howto VBKBAX VBKBCtrl vbwin kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article illustrates some techniques using the MSComm32.OCX control for receiving and transmitting binary data on double-byte character set (DBCS) Windows.  MORE INFORMATION  The Communications control, MSCOMM32.OCX, provides serial communicati...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QBS0,QAB5,QA7O,QAOE,QAMN,QAO4,QABI,QAFF,QBJZ,QAYY,QADX,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use MSCOMM32.OCX to Transfer Data on DBCS Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158008</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Professional and Enterprise Editions of Microsoft Visual Basic, 16-bit
   and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article illustrates some techniques using the MSComm32.OCX control for
receiving and transmitting binary data on double-byte character set (DBCS)
Windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Communications control, MSCOMM32.OCX, provides serial communications
for your application by allowing the transmission and reception of data
through a serial port where only a string of characters to the transmit
buffer is permitted. This feature limits you to transmitting only text-
based files.
<P>
The binary data must be converted one byte at a time to a character and
then transmitted. When received, the data must be converted from a
character back into binary data one byte at a time. See the REFERENCES
section below for more information.
<P>
On double-byte character set Windows, such as Korean, Japanese, and Chinese
Windows, binary data will be corrupted if one of the binary values matches
a DBCS lead character. The MSComm control will interpret this byte and the
following byte as one double-byte character and return only one byte for
the equivalent ASCII character. To resolve this problem, which is specific
to DBCS Windows, you can implement certain encoding algorithms that can
convert binary data into text data and vice versa. This article
demonstrates how to convert one byte binary data into ASCII size of three
characters to preserve the lead character. On the receiving end, these
three ASCII characters are converted back into one-byte binary data.
For example:
<P>
<PRE>   ASC('a') = 97  ' 97

</PRE>would be transmitted as three characters:
<P>
<PRE>   '0''9''7'

</PRE>NOTE: The sample code is reading the input file as binary. It is not
necessary to convert each character to ASCII value.
<P>
If you use a modem instead of RS-232 cable, you need to add some codes to
establish the modem connection. For example:

<UL><LI>MSComm1.Output = 'ATDT 999-9999' for Transmitter

<LI>and -

<LI>MSComm1.Output = 'AT' for Receiver
<P>
</UL>Once the connection is established, everything should work the same way.
<P>
WARNING: USE OF THE SAMPLE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this sample code "as is" without warranty of any
kind, either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h3>Sample Code - Transmitter</h3>
 

<OL><P><LI>Start Visual Basic. If Visual Basic is already running, from the File
   menu, choose New Project. Form1 will be created by default.

<P><LI>Place Microsoft Comm Control on Form1. If Microsoft Comm Control cannot
   be found in the control bar, go to Tools menu, choose Custom Controls,
   and then check the Microsoft Comm Control on the List Box.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      ' General Declaration section
</PRE><P>
<P><PRE>       Dim Offset As Long
       Dim FileData As Byte
       Dim FileName As String
</PRE>
<P><LI>Add the following code to the Load event of Form1:
<P>
<P><PRE>      ' Load event of Form
      ' 28800 baud, no parity, 8 data, and 1 stop bit.
      ' In RS-232, maximum speed of 28800 baud can be used
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>          MSComm1.Settings = "28800,N,8,1"
          MSComm1.InputLen = 1
          MSComm1.CommPort = 2
          MSComm1.PortOpen = True

      ' Change the file path to point to the file you want to transfer
          FileName = "d:\sample.hlp"

          Offset = 1
          Open FileName For Binary Access Read As #1
      End Sub

</PRE><P><LI>Add the following code to the OnComm event of MSComm1:
<P>
<P><PRE>      ' ONCOMM event of Comm OLE Control
      ' The following code is needed to make sure that next set of
      ' characters can be transmitted (CommEvent = 2 is triggered from the
      ' receiver side)
</PRE><P>
<P><PRE>      Private Sub MSComm1_OnComm()
<PRE></PRE>          If MSComm1.CommEvent = 2 Then
              temp = MSComm1.Input
              If Offset &lt;= FileLen(FileName) Then
                  Get #1, Offset, FileData
                  q = FileData
                  MSComm1.Output = Format(q, "000")
                  Offset = Offset + 1
              End If
          End If
      End Sub

</PRE><P><LI>Add the following code to the UnLoad event of Form1:
<P>
<P><PRE>      ' UnLoad event of Form
</PRE><P>
<P><PRE>      Private Sub Form_Unload(Cancel As Integer)
<PRE></PRE>          Close #1
      End Sub

</PRE><P><LI>Make sure that the Properties of MSComm1 are changed as follows:
<P>
<PRE>      RThreshold = 1     ' triggers when at least one char is on the buffer
      SThreshold = 3

</PRE></OL><h3>Sample Code - Receiver</h3>
 

<OL><P><LI>Start Visual Basic. If Visual Basic is already running, from the File
   menu, choose New Project. Form1 will be created by default.

<P><LI>Place Microsoft Comm Control on Form1. If Microsoft Comm Control cannot
   be found in the control bar, go to Tools menu, choose Custom Controls,
   and then check the Microsoft Comm Control on the List Box.

<P><LI>Add a CommandButton to Form1. Command1 is created by default.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      ' General Declaration section
</PRE><P>
<P><PRE>      Dim ByteCount As Long
      Dim FileData As Byte
</PRE>
<P><LI>Add the following code to the Load event of Form1:
<P>
<P><PRE>      ' Load event of Form
      ' 28800 baud, no parity, 8 data, and 1 stop bit.
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>          MSComm1.Settings = "28800,N,8,1"
          MSComm1.InputLen = 3
          MSComm1.CommPort = 1
          MSComm1.PortOpen = True

      ' Change the file path to point to the file you want to store
          Open "c:\sample.txt" For Binary Access Write As #1

      End Sub

</PRE><P><LI>Add the following code to the OnComm event of MSComm1:
<P>
<P><PRE>      ' OnComm event
</PRE><P>
<P><PRE>      Private Sub MSComm1_OnComm()
<PRE></PRE>          If MSComm1.CommEvent = 2 And MSComm1.InBufferCount &gt; 0 Then
              FileData = CInt(MSComm1.Input)
              ByteCount = ByteCount + 1
              Put #1, ByteCount, FileData
              MSComm1.Output = Chr$(26)
          End If
      End Sub

</PRE><P><LI>Add the following code to the Click event of Command1:
<P>
<P><PRE>      ' CLICK event of button
</PRE><P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>          MSComm1.Output = Chr$(26)
      End Sub

</PRE><P><LI>Add the following code to the UnLoad event of Form1:
<P>
<P><PRE>      ' UnLoad even of Form
</PRE><P>
<P><PRE>      Private Sub Form_Unload(Cancel As Integer)
<PRE></PRE>          Close #1
      End Sub

</PRE><P><LI>Make sure that the Properties of MSComm1 are changed as follows:
<P>
<P><PRE>      RThreshold = 3
</PRE><P>
</OL>The Transmitter and Receiver codes should be compiled separately and placed
on two separate machines where one machine is the designated transmitter
and the other one is the receiver.
<P>
The event-driven technique generates an OnComm event when there are
characters waiting in the input buffer. Also, the CommEvent property will
contain a numeric 2. For the OnComm event to be triggered, you must set the
Rthreshold property to a value other than its default of zero. The most
common setting for the RThreshold property is 1, meaning that the OnComm
event is triggered if a minimum of one character is waiting in the input
buffer. In this article, the numeric 3 is being used as a value of
RThreshold property because 3 characters at a time are being sent.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on how to use the MSComm control to transmit and
receive binary data on US Windows, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q151899.htm">Q151899</A></B>
   TITLE     : FAQ: Transmitting and Receiving Binary Data with MSComm
               Control
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Comm KBTRADCH KBSIMCH KBKOREA KBJAPAN<BR>
Keywords            : kbcode PrgCtrlsCus vb4all vb5all vb5howto VBKBAX VBKBCtrl vbwin kbhowto<BR>
Version             : 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Set Automatic Scrolling On In a List Box In VB 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113329">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/03/31">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article demonstrates two techniques for turning on automatic scrolling inside a Visual Basic list box by using the SendMessage Windows API function. This could be useful with database applications or any type of application in which the user n...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QAVW,QAVX,QDIV,QAH4,QBWS,QBXQ,QBS0,QAPN,QAMN,QACI,QAFF,QBXS,QA7O,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Set Automatic Scrolling On In a List Box In VB 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113329</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Microsoft Visual Basic programming system for Windows,
<PRE>  versions 1.0, 2.0, and 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates two techniques for turning on automatic scrolling
inside a Visual Basic list box by using the SendMessage Windows API
function. This could be useful with database applications or any type of
application in which the user needs to be able to scroll a list box without
the use of the arrow keys.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Two different techniques are shown below.
<P>
<P><h3>Technique One</h3>
 
<P>
Behavior:
<P>
Once automatic scrolling is turned on, any vertical movement of the mouse
within the entire horizontal region of the desktop containing the list box
will cause the visual selection of an item in the list box. This includes
the capability of driving the scroll bar thumb to its upper and lower
limits.
<P>
Drawbacks:
<P>
With technique one, as long as the automatic scrolling is on, all mouse
movement on the desktop is mapped to the list box. Task switching, by using
the ALT-ENTER key combination, is disabled. Windows is basically waiting
for the completion of a click sequence. Any click anywhere on the desktop
will be directed to the Click event of the list box. The user will need to
double-click any other control to get the expected response from the
control. Double-clicking any other control also turns off the automatic
scrolling.
<P>
NOTE: For those programmers looking for a way to defeat the ability of the
user to task switch away from their application, this technique offers a
method.
<P>
<P><h3>Technique two</h3>
 
<P>
Behavior:
<P>
Once automatic scrolling is turned on, only movement of the mouse within
the list box will cause the visual selection of an item. The scroll bar
thumb will be driven downward once, but will not be driven back up. Mouse
clicks elsewhere on the desktop are processed normally and the automatic
scrolling remains on until the mouse is clicked in the list box.
<P>
Drawbacks:
<P>
The scroll bar of the list box is not driven in both directions based on
mouse movement because mouse movements outside the list box are not
processed by the list box.
<P>
<P><h3>Example of Setting Automatic scrolling for List box</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add two Labels (Label1 and Label2), a Command button (Command1), and a
   List box (List1) to Form1.

<P><LI>Using the following table as a guide, set the properties of the controls
   you added in step 2:
<P>
<PRE>   Control Name   Property     New Value
   ----------------------------------------------------------
   Label1         Caption      Turn off Auto-Scrolling by
                               clicking in the list box
   Label1         Visible      False
   Label2         Visible      False
   Command1       Caption      Turn on Auto-Scroll

</PRE><P><LI>Place the following code in the (general) (declarations) section of
   Form1:
<P>
<PRE>   ' Enter the following Declare statement on one, single line:
   Declare Function SendMessage Lib "User" (ByVal hWnd As Integer,
      ByVal wMsg As Integer, ByVal wparam As Integer,
      ByVal lparam As Any) As Long
   Dim tmp$
   Dim autoselect_on As Integer

</PRE><P><LI>Place the following code in the Form Load event procedure of Form1:
<P>
<PRE>   Sub Form_Load ()
      list1.AddItem "test 1"
      list1.AddItem "test 2"
      list1.AddItem "test 3"
      list1.AddItem "test 4"
      list1.AddItem "test 5"
      list1.AddItem "test 6"
      list1.AddItem "test 7"
      list1.AddItem "test 8"
      list1.AddItem "test 9"
   End Sub

</PRE></OL><h3>Additional Steps for Technique One</h3>
 

<OL><P><LI>Place the following code in the List1 Click event procedure of Form1:
<P>
<PRE>   Sub List1_Click ()
      tmp$ = list1.List(list1.ListIndex)
      label2.Caption = "You selected: " &amp; list1.List(list1.ListIndex)
      label2.Visible = True
   End Sub

</PRE><P><LI>Place the following code in the Command1 Click event procedure of Form1:
<P>
<PRE>   Sub Command1_Click ()
      Const WM_LBUTTONDOWN = &amp;H201
      ' Turn on auto-scrolling:
      r% = SendMessage(list1.hWnd, WM_LBUTTONDOWN, 0&amp;, 0&amp;)
      label1.Visible = True
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S), or press the F5 key
   to run the program. Click the Command1 button. Move the mouse up
   and down inside or outside the List1 box control. Double-click a
   selection from the List1 box control to stop the automatic scrolling.
<P>
</OL><h3>Additional Steps for Technique Two</h3>
 

<OL><P><LI>Place the following code in the List1 Click event procedure of Form1,
   replacing the code referred to in step 6 above. The code in the
   command button is no longer needed.
<P>
<PRE>   Sub List1_Click ()
      Const WM_LBUTTONDOWN = &amp;H201
      tmp$ = list1.List(list1.ListIndex)
      label2.Caption = "You selected: " &amp; list1.List(list1.ListIndex)
      label2.Visible = True

      If Not autoselect_on Then
         autoselect_on = True
         r% = SendMessage(list1.hWnd, WM_LBUTTONDOWN, 0&amp;, 0&amp;)
      Else
         autoselect_on = False
      End If
   End Sub

</PRE><P><LI>From the Run menu, choose Start (ALT, R, S), or press the F5 key to run
<P><PRE>    the program. Click the List1 box. Move the mouse up and down inside the
    List1 box. Click again on a selection from the List1 box to stop the
    automatic scrolling.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

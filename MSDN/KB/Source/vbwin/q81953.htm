

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overflow Error Plotting Points Far Outside Bounds of Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q81953 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/03/23">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic for Windows may give an Overflow error when you plot points on a form or picture box if a point's coordinates far exceed the borders and scale of the form or control. The point at which overflow occurs depends on the ScaleMode property...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QANO,QBC9,QBC8,QA19,QAKD,QAAP,QAB4,QDL9,QBWQ,QBWO,QBWN,QBE7,QBE6,QAII V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Overflow Error Plotting Points Far Outside Bounds of Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q81953 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic programming system for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic for Windows may give an Overflow error when you plot
points on a form or picture box if a point's coordinates far exceed
the borders and scale of the form or control. The point at which
overflow occurs depends on the ScaleMode property value and the points
plotted. In the case of ScaleMode = 0 (User Defined Scale), the size
of the form or picture box and the scale chosen are also determinants.
<P>
A workaround is to trap the error and use a RESUME NEXT statement to
exit the error handler. The example below contains the necessary code
to trap the Overflow error.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Before Visual Basic for Windows can plot a point, it must first
convert the coordinates into their absolute location in twips. If,
after the conversion, one or both coordinates are greater than 32,767
or less than -32,768, an Overflow error is generated. The following
chart lists the ScaleModes, their equivalence in twips, and the values
that will cause a coordinate (z) to overflow:
<P>
<PRE>                   Equivalents
ScaleMode          in Twips (Tp)           Overflow Point (z)
</PRE> 
<P>
<PRE>0 (User defined)   User defined            User defined (see example)
1 (Twips)          1 twip = 1 twip         (z &lt; -32768) or (z &gt; 32767)
2 (Point)          1 point = 20 twips      (z &lt; -1638)  or (z &gt; 1638)
3 (Pixel)          System dependent        System dependent
4 (Character)      x-axis=120 twips/char   (x &lt; -273) or (x &gt; 273)
                   y-axis=240 twips/char   (y &lt; -136) or (y &gt; 136)
5 (Inch)           1 Inch = 1440 twips     (z &lt; -22) or (z &gt; 22)
6 (Millimeter)     1 mm = 56.7 twips       (z &lt; -577) or (z &gt; 577)
7 (Centimeter)     1 cm = 567 twips        (z &lt; -57) or (z &gt; 57)

</PRE>The example below can be used to determine the value that generates
the Overflow error for ScaleMode 0 or 3.
<P>
<P><h3>Example</h3>
 
1. Run Visual Basic for Windows, or from the File menu, choose New
<PRE>   Project (press ALT, F, N) if Visual Basic for Windows is already
   running. Form1 is created by default.

</PRE><P><LI>Add the following controls to Form1:
<P>
<PRE>   Control            Name (use CtlName in Visual Basic 1.0 for Windows)
   ---------------------------------------------------------------------

   Text box           Text1
   Command button     Command1

</PRE><P><LI>Set the MultiLine property for Text1 to True. With ScaleMode = 0
   only, the overflow value is dependent upon the size of the picture
   box or form. If you are testing the overflow value with ScaleMode =
   0, you must size the form appropriately.

<P><LI>Add the following code to the Form1 Form_Load event procedure:
<P>
<PRE>   Sub Form_Load ()
      Command1.Caption = "Find Ranges"

      '* Change ScaleMode to see different results.
      Form1.ScaleMode =  3   ' PIXEL.
   End Sub

</PRE><P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()
      CR$ = Chr$(13) + Chr$(10)  ' Carriage return.

      X = FindValue("X")
      Y = FindValue("Y")

      Text1.Text = "Valid value when..."
      Text1.Text = Text1.Text + CR$ + "-" + Str$(X) + " &lt; X &lt; " + Str$(X)
      Text1.Text = Text1.Text + CR$ + "-" + Str$(Y) + " &lt; Y &lt; " + Str$(Y)
   End Sub

</PRE><P><LI>Add the following general purpose function to the general
   Declarations section:
<P>
   Function FindValue (Which$)
<P><PRE>      On Error GoTo rlhandler
</PRE><P>
<P><PRE>      HiValue = 100000
      LoValue = 0
      Errored = FALSE
      ' Do binary select.
      Do
<PRE></PRE>         NewCheck = Value
         If Errored Then
            Value = HiValue - (HiValue - LoValue) \ 2
         Else
            Value = LoValue + (HiValue - LoValue) \ 2
         End If

         If Which$ = "X" Then
             Form1.PSet (Value, 0)
         Else
            Form1.PSet (0, Value)
         End If

         If ErrorNum = 6 Then
             HiValue = Value
            ErrorNum = 0
         Else
            LoValue = Value
         End If
      Loop Until NewCheck = Value
      FindValue = Value

      Exit Function

   rlhandler:
      ' Err = 6 is OverFlow error.
      If Err = 6 Then
         ErrorNum = Err
      Else
         Form1.Print Err
      End If
   Resume Next

</PRE></OL>End Function

<OL><P><LI>In Visual Basic version 1.0 for Windows, add the following to the
   general declarations section of Form1:
<P>
<P><PRE>       Const FALSE = 0
       Const TRUE = -1
</PRE>
<P><LI>From the Run menu, choose Start (or press the F5 key), and click
   the Command1 button to calculate the point at which the X and Y
   coordinates generate an Overflow error.
<P>
</OL>When the above Click event is triggered, Visual Basic for Windows will
try to set a point on the form. Past the border, Visual Basic for
Windows is plotting points that exceed the visual scope of the control.
Once the program traps the Overflow error, the text box will display
the valid range of coordinates you can use that will not generate the
Overflow error.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgCtrlsStd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Emulate MKI$ and CVI in VB Using Windows HMemCpy </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q87970 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1992/08/13">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic for Windows does not support the MKx$ and CVx family of conversion functions found in earlier versions of Microsoft QuickBasic and Basic Professional Development System (PDS) for MS-DOS. However, you can write functions that provide th...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QATX,QAB9,QBV8,QBE7,QBE6,QBS0,QALG,QDL9,QBWO,QBWN,QAH6,QBWQ,QAKD,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Emulate MKI$ and CVI in VB Using Windows HMemCpy</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q87970 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic for Windows does not support the MKx$ and CVx family of
conversion functions found in earlier versions of Microsoft QuickBasic
and Basic Professional Development System (PDS) for MS-DOS. However,
you can write functions that provide this support using the hmemcpy
API routine provided by Windows version 3.1.
<P>
This article provides example routines that simulate the MKI$, MKL$, MKS$,
MKD$, CVI, CVL, CVS, and CVD functions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The MKx$ functions convert numeric values to strings by placing the ASCII
value of each byte that represents the numeric value into a string.
<P>
<PRE>Function   Description
</PRE> 
<PRE>MKI$       Converts an integer to a 2-byte string
MKL$       Converts a long-integer to a 4-byte string
MKS$       Converts a single precision variable to a 4-byte string
MKD$       Converts a double-precision variable to an 8-byte string

</PRE>The CVx functions convert strings created with the MKx$ functions back
into numeric values.
<P>
<PRE>Function   Description
</PRE> 
<PRE>CVI        Converts a 2-byte string created with MKI$ to an integer
CVL        Converts a 4-byte string created with MKL$ to a long integer
CVS        Converts a 4-byte string created with MKS$ to a single-
           precision number
CVD        Converts an 8-byte string created with MKD$ to a double-
           precision number

</PRE>The hmemcpy API function can be used to emulate these functions as
demonstrated in the example below. Note that the hmemcpy API function
is not provided with Windows version 3.0, so the example below requires
Windows version 3.1.
<P>
The hmemcpy routine copies bytes from a source buffer to a destination
buffer. You can use this routine to copy the value of each byte in a
numeric value to a corresponding byte in a string to emulate the MKx$
functions. Similarly, you can use the same technique to copy the bytes
from a string to a numeric value, to emulate the CVx functions.
<P>
NOTE: The hmemcpy routine requires the addresses pointing to the
actual location of the data to be copied from and written to. Therefore,
it is necessary to pass strings by value (ByVal) in order to pass the
location of the string data, as opposed to passing the location of the
string descriptor. Similarly, it is necessary to initialize the string
size by assigning the string to an appropriate number of characters.
<P>
To use the following routines in your Visual Basic for Windows
application, you must Declare the hmemcpy routine. Add the
following code to the general declarations section of the form:
<P>
<PRE>   ' Enter the following Declare statement on one, single line.
   Declare Sub hmemcpy Lib "kernel" (hpvDest As Any, hpvSource As Any,
      ByVal cbCopy As Long)

   Function MKI$ (x As Integer)
      temp$ = Space$(2)
      hmemcpy ByVal temp$, x%, 2
      MKI$ = temp$
   End Function

   Function CVI (x As String) As Integer
      If Len(x) &lt;&gt; 2 Then
         MsgBox "Illegal Function Call"
         Stop
      End If
      hmemcpy temp%, ByVal x, 2
      CVI = temp%
   End Function

   Function MKL$ (x As Long)
      temp$ = Space$(4)
      hmemcpy ByVal temp$, x&amp;, 4
      MKL$ = temp$
   End Function

   Function CVL (x As String) As Long
      If Len(x) &lt;&gt; 4 Then
         MsgBox "Illegal Function Call"
         Stop
      End If
      hmemcpy temp&amp;, ByVal x, 4
      CVL = temp&amp;
   End Function

   Function MKS$ (x As Single)
      temp$ = Space$(4)
      hmemcpy ByVal temp$, x!, 4
      MKS$ = temp$
   End Function

   Function CVS (x As String) As Single
      If Len(x) &lt;&gt; 4 Then
         MsgBox "Illegal Function Call"
         Stop
      End If
      hmemcpy temp!, ByVal x, 4
      CVS = temp!
   End Function

   Function MKD$ (x As Double)
      temp$ = Space$(8)
      hmemcpy ByVal temp$, x, 8
      MKD$ = temp$
   End Function

   Function CVD (x As String) As Double
      If Len(x) &lt;&gt; 8 Then
         MsgBox "Illegal Function Call"
         Stop
      End If
      hmemcpy temp#, ByVal x, 8
      CVD = temp#
   End Function

</PRE><h2>REFERENCES</h2>
 
<P>
"Microsoft Windows SDK: Programmer's Reference," Volume 2: Functions,"
version 3.1
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgOptMemMgt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

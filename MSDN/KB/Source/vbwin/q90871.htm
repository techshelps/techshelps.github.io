

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Diagnosing General Protection Fault or UAE in VB for Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90871 ">
<META NAME="KBModify" CONTENT="1996/09/06">
<META NAME="KBCreate" CONTENT="1992/10/25">
<META NAME="Keywords" CONTENT="kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes steps you can take to determine the cause of and possibly fix a general protection (GP) fault under Windows version 3.1, or an unrecoverable application error (UAE) under Windows version 3.0.  MORE INFORMATION  When diagnosin...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBKN,QBS0,QAH4,QBJZ,QATX,QDL9,QBWO,QBWN,QBWQ,QAEF,QAJQ,QAKP,QBWS,QAMA,QAMB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Diagnosing General Protection Fault or UAE in VB for Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 6, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90871 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit only, for Windows, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0, 3.0
<LI>Microsoft Visual Basic for Windows, version 1.0
<LI>Microsoft Windows, versions 3.0, 3.1
<LI>Microsoft Windows for Workgroups, versions 3.1, 3.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes steps you can take to determine the cause of and
possibly fix a general protection (GP) fault under Windows version 3.1, or
an unrecoverable application error (UAE) under Windows version 3.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When diagnosing a GP fault, note the address and file where the GP fault
occurred. Sometimes this is a known bug or problem. You can usually use the
address and filename to query the Microsoft Knowledge Base to find a
workaround or resolution.
<P>
However, sometimes the GP fault occurs in a range of address locations, so
the specific address won't help. For example, this is the case with a bug
in Visual Basic version 3.0 when using the IIF statement with temporary
strings. This bug can result in a GP fault occurring within one of two
ranges of addresses in VBRUN300.DLL or VB.EXE. For more information on this
bug, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q127069.htm">Q127069</A></B>
   TITLE     : BUG: GP Faults from Using IIF with Temporary Strings

</PRE>Dr. Watson logs provide the filename and address of the GP fault, but
otherwise are not helpful in tracking down a GP fault created by a Visual
Basic application.
<P>
<P><h3>Typical Causes of GP Faults</h3>
 
<P>
If not caused by a bug in the product, GP faults typically occur for one of
the following reasons:

<UL><LI>Calling a dynamic-link library (DLL) or Windows API routine with
   incorrect parameters.
<P>
   A missing ByVal or ByVal used when it should not be can cause either an
   immediate or delayed GP fault. To determine if a GP fault or UAE is
   caused by custom control or by a call to a Windows API or DLL routine,
   remove references to the DLL routine or custom control temporarily. Then
   rerun the program to see if the GP fault or UAE still occurs. You may
   need to replace such references with statements that simulate return
   values.
<P>
   GP faults that occur in segment 23 of VBRUN300.DLL are more indicative
   of calling a DLL incorrectly. For example, you may have forgotten to put
   "byval" on a DLL call's string parameter. A typical address looks like
   this:
<P>
<P><PRE>      0023:####
</PRE><P>
   The last four digits are not significant (with the exception of the
   range of addresses reported for the IIF bug mentioned above).

<LI>Using a faulty DLL routine or custom control.
<P>
   Corrupted .DLL or .VBX files are not easily identifiable except by
   comparing the original from the installation disk with what is currently
   on your computer. You may have to manually expand a given .DLL or .VBX
   file from the original installation disks, as in this example:
<P>
<P><PRE>      expand A:\VBRUN300.DL_ .\VBRUN300.DLL
</PRE><P>
   This will expand the original VBRUN300.DLL file from the A: drive into
   the current directory. You can then compare date and size with the
   original file in your \WINDOWS\SYSTEM directory. Before replacing the
   current (original) VBRUN300.DLL in the \WINDOWS\SYSTEM directory, back
   it up by renaming or copying it.
<P>
   Chapter 25 of the Programmers Guide lists files required for any given
   Visual Basic version 3.0 program. Programs making use of the Microsoft
   Jet 2.0/Visual Basic 3.0 Compatibility Layer need to reference the
   ACC2COMP.TXT file that comes with the compatibility layer to see a list
   of additional files. The same is true for those using the Microsoft
   Access version 2.5 Service Pack.
<P>
   Check with the vendor of any custom control you are using. There may be
   an update available that fixes problems you are encountering.

<LI>Loading corrupted Visual Basic forms or modules. (The workaround for
   this is given later in this article.)

<LI>Using a corrupted .FRX file. Microsoft has received reports but has been
   unable to fully confirm that a corrupted .FRX file can cause a GP fault.
   Files with the .FRX extension are what Visual Basic uses to store
   bitmaps, icons, and graphics for a given form. If the contents of this
   file are ruined, the GP fault would occur (most likely) during the form
   load process.
<P>
   You may need to rebuild your .FRX file by deleting the .FRX file for the
   form in question. This will cause your form to lose any icons, bitmaps,
   or metafiles it was using, so you'll need to restore each of them, which
   will rebuild the form's .FRX file. Before deleting the .FRX file, ensure
   that you have separate copies of any icons, bitmaps, or metafiles used
   to create the form. It is good practice to keep backup copies of these
   files for any form you create, so you can easily recreate the form if
   necessary.
<P>
</UL>-  Not doing a "clean compile." Microsoft has received reports but has not
<PRE>   been able to confirm that building an .EXE file only after starting
   Visual Basic will reduce otherwise untraceable GP faults. There is a
   known problem with the size of an .EXE file growing after each compile
   while within a single Visual Basic session. It has not been demonstrated
   or conclusively proven that this can introduce GP faults. Doing a clean
   compile may be treating the symptom rather than the actual problem, but
   some users have had success with it.

   For more information about the known problem with the size of an .EXE
   file growing after each compile, please see the following article in the
   Microsoft Knowledge Base:

      ARTICLE-ID: <B><A HREF="../VBWIN/Q119734.htm">Q119734</A></B>
      TITLE     : BUG: Recompiling VB Project May Produce Larger .EXE File

</PRE><LI>Calling an external function in a DLL with a string argument and not
   providing a string large enough for the function to modify.
<P>
   A typical example of this is calling one of the Windows API profile
   string functions such as GetProfileString. If the string you pass is
   smaller than what will be returned, Windows will overwrite the string
   heap and this eventually will lead to a GP fault when Visual Basic
   attempts to perform string management. Typically, string management such
   as heap compression will occur when the current routine is exited or if
   you try to allocate a string that is larger than the largest block of
   available string memory.
<P>
   You can get around this limitation by padding the string with additional
   characters before using it. You may later need to trim the additional
   characters or the string size may be different from what you expected.
   For example:
<P>
   strToPass$ = Space$(255)
<P>
<PRE>   ' ret is # of characters assigned to strToPass$
   ret = CallExternalRoutine(strToPass$, ...)

   actualStr$ = mid$( strToPass$, 1, ret )

</PRE></UL><h3>External Factors That May Influence a GP Fault</h3>
 
<P>
GP faults are not always consistent. If the problem is intermittent across
different computers, analyze the answers to these questions:

<UL><LI>What device drivers are loaded?

<LI>What TSR programs are loaded?

<LI>Are different computers using different versions of Program Manager?

<LI>On which version of MS-DOS or Windows does the problem occur?

<LI>What kind of video display is used by each computer? If you switch to
   the default Windows VGA display that comes with Windows, does the
   problem go away? If so, you may need an update to the video driver you
   are using, or there may be a bug in a custom control you are using that
   causes it to fail at higher resolution or palette sizes.
<P>
</UL><h3>Steps to Follow When You Get a GP Fault</h3>
 

<OL><P><LI>Always exit Windows after the GP fault. However, before exiting, note
   which programs were loaded in memory and what actions were taken that
   ended in the GP fault. The hope is that this paper log will help you
   identify a pattern for troubleshooting.

<P><LI>See if the same procedure repeats the problem (likely).

<P><LI>Use the Chkdsk or Scandisk utility to make sure your hard disk is
   healthy and clean.

<P><LI>Check for viruses.

<P><LI>Press CTRL+ESC to bring up the task list. Is anything in there? Close it
   all out if there is. Better yet, rename your Startup group by pressing
   ALT+ENTER in Program Manager; name it something like Xstartup. Then
   restart Windows, start Visual Basic, and run your application. Does the
   problem go away? If so, it may mean that something else is interfering
   or conflicting that results in the GP fault.
<P>
</OL>A GP fault may be a problem in the code, or it may be a symptom of some
other situation. The key is to localize and repeat the conditions that
resulted in the GP fault in order to better diagnose it. When you can
isolate the minimum activities, programs, and external factors influencing
a GP fault, you can determine if it is a problem with your code or
something else.
<P>
<P><h3>Steps to Clean Code</h3>
 
<P>
To determine if a GP fault or UAE is caused by corrupted code, save the
code in your forms and modules as text. Then load the code as text. This
process cleans the internal representation of the code (P-code).
In Visual Basic 3.0:

<OL><P><LI>In the Project window, select the form or module to clean.

<P><LI>On the File menu, click Save Text, and click OK.

<P><LI>On the File menu, click View Code.

<P><LI>On the File menu, click Load Text, select the same file, and click
   Replace.
<P>
</OL>To determine if a GP fault or UAE is caused by a corrupted form, recreate
the form. To recreate a form, add a new form to your project, and place
new controls and menus on it to match the old form. Copy the code by saving
code as text from the old form and loading as text into the new form.
Finally, remove the old form, and rename the new form.
<P>
Steps to Recreate Form
 
<P>
In Visual Basic 3.0:

<OL><P><LI>On the File menu, click Add Form. Add the same controls and menus
   to this new form as are on the old form.

<P><LI>In the Project window, select the old form or module.

<P><LI>On the File menu, click Save Text, and click OK.

<P><LI>On the File menu, click Remove File.

<P><LI>In the Project window, select the new form.

<P><LI>View the code from the Project window or by clicking Code on the View
   menu.

<P><LI>On the File menu, click Load Text. Select the same code text file,
   and click Replace.

<P><LI>Set the new form Name property to the old form's value.
<P>
</OL>You can also clean a project file (.MAK or .VBP file). Start a new project,
and then add all the forms and modules to the new project.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 3.10 4.00 GPF vb416<BR>
KBCategory: kbprg kbtshoot<BR>
KBSubcategory: PrgOptMemMgt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 6, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

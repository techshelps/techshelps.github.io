

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Implement a Linked List in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166394">
<META NAME="KBModify" CONTENT="1997/04/07">
<META NAME="KBCreate" CONTENT="1997/04/04">
<META NAME="Keywords" CONTENT="vb5all VBCCE VBKBClassModule VBKBObj VBKBVB kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  The linked list, which is a classical data structure with widespread applicability in C++, can also be implemented in Visual Basic with the use of Classes.  A linked list is a set of items organized sequentially, just like an array. In an array, th...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAE1,QBXS,QAO3,QAO2,QAE2,QAMA,QAPN,QA5F,QAH4,QA62,QAW6,QANF,QACI,QAF8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Implement a Linked List in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166394</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The linked list, which is a classical data structure with widespread
applicability in C++, can also be implemented in Visual Basic with the use
of Classes.
<P>
A linked list is a set of items organized sequentially, just like an array.
In an array, the sequential organization is provided implicitly (by
position in the array); in a linked list, you use an explicit arrangement
in which each item is part of a "node" that also contains a "link" to the
next node.
<P>
The primary advantage of linked lists over arrays is that linked lists can
grow and shrink in size during their lifetimes. In particular, their
maximum size need not be known in advance. A secondary advantage is that
they provide flexibility in allowing the items to be rearranged efficiently
without actually moving any data contained in the list.
<P>
A disadvantage of a linked list is that operations such as referencing a
specific element in the list require you to walk the entire list from head
to tail. In an array, this could simply be done by accessing an (n).
Another operation that does not work with a linked list is finding an item
before a given item. To get around these limitations, you can build a
doubly-linked list in which two links for each node are maintained, one to
the item before and one to the item after. The cost of providing this extra
capability is doubling the number of link manipulations per basic
operation. This article will only demonstrate a simple linked list, not a
doubly-linked list.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Program</h3>
 
<P>
The following example creates a linked list of 20 nodes, and then reverses
it using a function named ReverseList. Each node in the list is actually an
instance of a Visual Basic Class created with the New keyword.

<OL><P><LI>Start a new project in Visual Basic and choose "Standard EXE." Form1 is
   created by default.

<P><LI>From the Project menu, choose Add Class Module, Class1 is created by
   default. In the Properties window of the new class module, change the
   name from Class1 to "Node," then Paste the following code into the
   General Declarations section of Node:
<P>
<PRE>      Public key As Integer          'var to hold some data
      Public pnext As node           'pointer to next node in list

</PRE><P><LI>Add a Command button, Command1, to Form1.

<P><LI>Paste the following code into the General Declarations section of Form1:
<P>
<PRE>      Dim head As node               'object pointer to head of list
      Private Sub Form_Load()
        Dim curr As node             'object pointer to current pos in
        Dim i As Integer             'list used in For loop
   
        'CREATE LIST
        Set head = New node          'object pointer to new node
        head.Key = 0                 'dummy head
        Set curr = head              'keep head pointer here
        For i = 1 To 20              'iterate n times to fill list
          Set curr.pnext = New node  'insert new node after current
          Set curr = curr.pnext      'set current one = new node
          curr.Key = i               'set new node key value
        Next i
        Set curr.pnext = New node    'dummy tail
        Set curr = curr.pnext        'move current to dummy tail
        curr.Key = 0                 'set value of dummy tail
        Set curr.pnext = curr        'points to itself to identify end
   
        Debug.Print "before: " &amp; DumpList(head) 'print list
      End Sub
   
      Private Sub Command1_click()
        'RERVERSE LIST
        ReverseList head             'pass in head to ReverseList
        Debug.Print "after: " &amp; DumpList(head)  'print reversed list
      End Sub
   
      Private Sub ReverseList(ByRef head As node)
        'reverse entire list including dummy head and tail
        'Note: head becomes tail, tail becomes head
        Dim curr As node             'object pointer to current node
        Dim nexx As node             'object pointer to next node
        Set curr = head.pnext        'current to node after head
        Set head.pnext = head        'turn head into tail
        While Not curr.pnext Is curr 'walk entire list
          Set nexx = curr.pnext      'pointer to node after current
          Set curr.pnext = head      'current points back to head
          Set head = curr            'move head to current
          Set curr = nexx            'set current = next node
        Wend
        Set curr.pnext = head        'point new head to first node
        Set head = curr              'return head to first position
      End Sub
   
      Private Function DumpList(ByRef head As node) As String
        'walk list and dump to debug window
        Dim strOut As String         'temp var to hold string
        Dim curr As node             'object pointer to current node
        Set curr = head.pnext        'skip dummy head
        While Not curr.pnext Is curr 'walk rest of list to end
          strOut = strOut &amp; " " &amp; CStr(curr.Key)
          Set curr = curr.pnext      'current pointer to next node
        Wend
        DumpList = strOut            'return string
      End Function

</PRE><P><LI>Start the program or press the F5 key. A linked list of 20 nodes will
   be created.

<P><LI>Click the Command1 button to Reverse the list and print the results to
   the debug window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
In Visual Basic Books Online see:
<PRE>  Programmer's Guide (All Editions)
    Part 2: What Can You Do With Visual Basic
      Programming With Objects
        Creating Your Own Classes

</PRE></OL>Algoriths in C++, Robert Sedegwick, ISBN 0-201-51059-6
<P>
(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by Jon
Fowler, Microsoft Corporation
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : vb5all VBCCE VBKBClassModule VBKBObj VBKBVB kbhowto<BR>
Version             : 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Optimize Size and Speed of Visual Basic Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q73798 ">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1991/07/08">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes how to optimize Visual Basic applications for size and speed. It also provides examples for methods outlined in the  Visual Basic Programmer's Guide,  chapter 11,  Optimizing Your Application for Size and Speed.   For additio...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBV4,QBT6,QA26,QAFF,QAPN,QAU3,QAMR,QAHP,QBWS,QAVX,QAA7,QAVW,QAMN,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Optimize Size and Speed of Visual Basic Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q73798 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to optimize Visual Basic applications for size
and speed. It also provides examples for methods outlined in the "Visual
Basic Programmer's Guide," chapter 11, "Optimizing Your Application for
Size and Speed."
<P>
For additional information on this subject, please see the following
article(s) in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q112860.htm">Q112860</A></B>
   TITLE     : How to Optimize Memory Management in VB 3.0 for Windows

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Below are guidelines to help increase speed, available resources, available
RAM, and available disk space in Visual Basic:
<P>
<P><h2>INCREASING SPEED</h2>
 
<P>
You can increase speed in the following ways:
<UL><LI>Preload forms.
<LI>Store graphics as bitmaps.
<LI>Place debug routines in a separate module.
<LI>Use dynamic-link library (DLL) routines.
<LI>Use integer and long variables instead of single, double, or currency
   variables.
<LI>Cache frequently accessed properties in variables.
<P>
</UL><h3>Example #1: Demonstrating Integers Versus Single Variables in a Loop</h3>
 

<OL><P><LI>Start Visual Basic; or choose New Project from the File menu (ALT+
   F, N) if Visual Basic is already running. Form1 is created by default.

<P><LI>Add two command buttons and two labels to Form1.FRM.

<P><LI>Add the following two procedures to the (general) section of Form1.
<P>
<PRE>   Sub Ints ()
    Dim i As Integer
    i = 1
    Do Until i &gt;= 5000         ' = 5000 iterations
      label1.Caption = Str$(i)
      i = i + 1
      DoEvents
    Loop
   End Sub

   Sub Reals ()
    Dim r As Single
    r = 1#
    Do Until r &gt;= 500          ' = 5000 iterations
      label2.Caption = Str$(r)
      r = r + .1
      DoEvents
    Loop
   End Sub

</PRE><P><LI>Add the following code in the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()
    StartTime = Timer
    Call Ints
    EndTime = Timer
    MsgBox "Time for Integer Loop was: " &amp; CStr(EndTime - StartTime)
   End Sub

</PRE><P><LI>Add the following code in the Command2_Click event procedure:
<P>
<PRE>   Sub Command2_Click ()
    StartTime = Timer
    Call Reals
    EndTime = Timer
    MsgBox "Time for Real Loop was: " &amp; CStr(EndTime - StartTime)
   End Sub

</PRE><P><LI>Run the sample. First test how long it takes the integer loop to
   process, then test how long it takes the single loop to process. You
   should see that the integer loop runs faster.
<P>
</OL><h3>Example #2: Demonstrating Cached Properties in Variables</h3>
 

<OL><P><LI>Start Visual Basic; or choose New Project from the File menu (ALT+
   F, N) if Visual Basic is already running. Form1 is created by default.

<P><LI>Add one text box and two command buttons to Form1.FRM.

<P><LI>Add the following code in the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()
    Open "datacons.txt" For Input As #1   ' Open test file.
    nl$ = Chr$(13) + Chr$(10)

    text1.Text = ""                       ' Clear the text box.
    StartTime = Timer
    Do Until EOF(1)                       ' Grab all data into text box.
      Line Input #1, tmp$
      text1.Text = text1.Text + tmp$ + nl$
    Loop
    EndTime = Timer
    Close #1
    MsgBox "Time for Text Loop was: " &amp; CStr(EndTime - StartTime)
   End Sub

</PRE><P><LI>Add the following code in the Command2_Click event procedure:
<P>
<PRE>   Sub Command2_Click ()
    Dim buffer$

    Open "datacons.txt" For Input As #1    ' Open test file.
    nl$ = Chr$(13) + Chr$(10)

    text1.Text = ""                        ' Clear the text box.
    StartTime = Timer
    Do Until EOF(1)                        ' Grab all data into text box.
      Line Input #1, tmp$
      buffer$ = buffer$ + tmp$ + nl$
    Loop
    text1.Text = buffer$
    EndTime = Timer
    Close #1
    MsgBox "Time for Buffered Loop was: " &amp; CStr(EndTime - StartTime)
   End Sub

</PRE><P><LI>Run the sample. First test how long it takes the text loop to process,
   then test how long it takes the buffered loop to process. The buffered
   loop should run much faster.
<P>
</OL><h2>INCREASING DISPLAY SPEED AND APPARENT SPEED</h2>
 
<P>
You can increase display speed and apparent speed in the following ways:
<UL><LI>Turn off the ClipControls property under certain circumstances.
<LI>Use AutoRedraw only when needed.
<LI>Use image controls instead of picture boxes.
<LI>Use line controls instead of the PSet method.
<LI>Preload forms and keep them hidden until needed.
<LI>Use progress indicators when appropriate.
<LI>Preload the default data before showing a form.
<LI>Hide controls that may repaint when resetting their properties.
<LI>Use Show in Form_Load event procedure and reduce code in this event.
<LI>Simplify your starting or startup form.
<LI>Don't call procedures in modules from your startup form.
<P>
</UL><h3>Example #3: Demonstrating the Technique of Hiding Controls</h3>
 

<OL><P><LI>Start Visual Basic; or choose New Project from the File menu (ALT+
   F, N) if Visual Basic is already running. Form1 is created by default.

<P><LI>Add a control array of five text boxes to Form1.FRM.

<P><LI>Add the following to the Form_Resize event procedure:
<P>
<PRE>   Sub Form_Resize ()
    Dim i As Integer
    Dim ht As Integer

    ht = Form1.ScaleHeight / 5
    For i = 0 to 4
      text1(i).Move 0, i * ht, Form1.ScaleWidth, ht
    Next i
   End Sub

</PRE><P><LI>Add the following to the Form_Load event procedure:
<P>
<PRE>   Sub Form_Load ()
    Dim buffer As String
    Dim i As Integer

    Open "datacons.txt" For Input As #1  ' Open test file.
    buffer = Input(LOF(1), 1)            ' Grab all contents.
    Close #1
    For i = 0 to 4                       ' Place in the 5 text controls.
      text1(i).Text = buffer
    Next i
   End Sub

</PRE><P><LI>Run the sample. First grab the left side of Form1 and move
   it to the left, then grab the top of Form1 and move it upward.
   You should see five separate text boxes being re-painted.

<P><LI>To speed up or avoid four controls from being repainted, implement the
   changes listed in steps 7 and 8, then proceed to run the sample with
   actions listed in step 5, above.

<P><LI>Add a picture box; then inside the picture box, add a control
   array of five text boxes to Picture1.

<P><LI>Add the following to the Form_Resize event procedure:
<P>
<PRE>   Sub Form_Resize ()
    Dim i As Integer
    Dim ht As Integer
    Dim wd As Integer

    wd = form1.ScaleWidth
    picture1.Visible = False                    ' Hide the picture
    picture1.Move 0, 0, wd, form1.ScaleHeight   ' and reposition it.

    ht = form1.ScaleHeight / 5
    For i = 0 To 4                              ' Now resize the text
                                                ' boxes...
     text1(i).Move 0, i * ht, wd, ht
    Next i

    picture1.Visible = True                   ' ...and show the picture.
   End Sub

</PRE></OL>This technique adds a resource with the picture box, but helps with the
apparent speed when you resize your form. This technique makes your
application appear more uniform when running.
<P>
<P><h3>Example #4: Demonstrating the Techique of a Simple Startup Form</h3>
 
<P>
This example shows you how to implement a Start-Up form or Display Banner
for your program. In this example, Form1 is the start-up form and Form2 is
the main form of your actual working program.

<OL><P><LI>Start Visual Basic; or choose New Project from the File menu (ALT+
   F, N) if Visual Basic is already running. Form1 is created by default.

<P><LI>Add a second form to your project, Form2.frm.

<P><LI>Add the following to the Form_Load event procedure of Form1.frm:
<P>
<PRE>   Sub Form_Load ()
    Me.Show         ' Show the form.
    Me.Refresh      ' Refresh needed to force repaint of labels, etc.
    Load Form2      ' Load the actual working form.
       ' Assign any default properties, values, etc., for Form2 here.
    Form2.Show      ' Display main form.
    Unload Me       ' Unload me.
   End Sub

</PRE><P><LI>Run this sample. This will display your simple Form1.FRM and load up
   Form2.FRM in the background. Once Form2.FRM is loaded and displayed,
   Form1.FRM is unloaded.
<P>
</OL><h2>INCREASING AVAILABLE RESOURCES</h2>
 
<P>
You can increase available resources in the following ways:
<UL><LI>Create simulated controls using a graphic object.
<LI>Draw graphics images during run time.
<LI>Use the Image control instead of picture boxes.
<P>
</UL><h2>INCREASING AVAILABLE RAM</h2>
 
<P>
You can increase available RAM in the following ways:
<UL><LI>Use Integer variables whenever possible.
<LI>Create dynamic arrays to free arrays when not needed.
<LI>Drop or unload controls and forms when they are not needed.
<LI>Use local variables.
<P>
</UL><h2>INCREASING DISK SPACE</h2>
 
<P>
You can increase disk space in the following ways:
<UL><LI>Build controls at load time.
<LI>Minimize header size.
<LI>Delete unnecessary functions and subroutines.
<LI>Delete unused objects and associated methods.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
"Visual Basic Programmer's Guide," chapter 11, "Optimizing Your Application
for Size and Speed."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00 fast faster<BR>
KBCategory: kbprg kbcode<BR>
KBSubCategory: PrgOptTips<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

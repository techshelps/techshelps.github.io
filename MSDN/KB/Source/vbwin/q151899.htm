

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FAQ:Transmitting and Receiving Binary Data with MSComm Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151899">
<META NAME="KBModify" CONTENT="1996/06/05">
<META NAME="KBCreate" CONTENT="1996/05/30">
<META NAME="Keywords" CONTENT="kbref kbusage kbfaq kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article covers some of the most Frequently Asked Questions (FAQs) about using the Visual Basic 4.0 Communications (MSComm) control for receiving and transmitting binary data. You can find this and other FAQ articles by querying on the keyword ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QALG,QBS0,QAH4,QAH6,QAHH,QAWP,QAXC,QDOP,QAYY,QADK,QAHV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FAQ:Transmitting and Receiving Binary Data with MSComm Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 5, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151899</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article covers some of the most Frequently Asked Questions (FAQs)
about using the Visual Basic 4.0 Communications (MSComm) control for
receiving and transmitting binary data. You can find this and other FAQ
articles by querying on the keyword "FAQ." You can find additional general
references in the Microsoft Knowledge Base by searching on "article list."
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Q. Can the MSComm control (MSComm16.OCX and MSComm32.OCX) be used to
<PRE>   transmit and receive binary data?

</PRE>A. Yes. The MSComm control can be used to transmit and receive binary
<PRE>   data provided neither end of the conversation is using a double byte
   character set (DBCS). The binary data must be converted one byte at a
   time to a character and transmitted. When received, it must be
   converted from a character back into binary data one byte at a time.
   The code fragment below illustrates this process.

   'WARNING: USE OF THE SAMPLE CODE PROVIDED IN THIS ARTICLE IS AT YOUR
   'OWN RISK. Microsoft provides this sample code "as is" without
   'warranty of any kind, either express or implied, including but not
   'limited to the implied warranties of merchantability and/or fitness
   'for a particular purpose.

   'Transmitter Code.
   Dim FileName As String: FileName = "C:\BinFiles\Test.Exe"
   Dim Offset As Long
   Dim FileData As Byte

   Open FileName For Binary Access Read As #1
      For Offset = 1 To FileLen(FileName)
         Get #1, Offset, FileData
         MSComm1.Output = Chr$(FileData)
      Next Offset
   Close #1

   'Receiver Code.
   'Assume That File #1 Has Already Been Opened Elsewhere In The Code
   'And That ByteCount Has Been Dimmed As Long And Initialized To 0.
   Private Sub MSComm1_OnComm()
      Dim TmpStr As String
      Dim StrLen As Long, I As Long
      Dim FileData As Byte

      If MSComm1.CommEvent = comEvReceive Then
         While MSComm1.InBufferCount &gt; 0
            TmpStr = MSComm1.Input
            StrLen = Len(TmpStr)
            For I = 1 To StrLen
               FileData = CByte(Asc(Mid(TmpStr, I, 1)))
               ByteCount = ByteCount + 1
               Put #1, ByteCount, FileData
            Next I
            TmpStr = ""
         Wend
      End If
   End Sub
   'Assume That File #1 Is Properly Closed When All Of The Data Is
   'Received.

</PRE>Q. Why can't machines using a double byte character set (DBCS) use the
<PRE>   MSComm control (MSComm16.OCX and MSComm32.OCX) to transmit and
   receive binary data?

</PRE>A. On DBCS machines (computers running operating system software that
<PRE>   uses one of the double byte character sets), binary data will be
   corrupted if one of the binary values matches a DBCS lead character.
   The MSComm control will interpret this byte and the following byte as
   one double byte character and return only one (now incorrect) byte
   for the "equivalent" ASCII character. For example, lead byte
   characters, such as &amp;H81 with no trailing byte, are translated to ANSI
   0. While this limitation of the MSComm control does not allow binary
   data to be transmitted and received on DBCS systems, it does allow a
   standard "text" stream to be transferred.

</PRE>Q. Does the MSComm control (MSComm16.OCX and MSComm32.OCX) implement any
<PRE>   of the popular binary transfer protocols?

</PRE>A. No. The MSComm control does not implement any binary transfer
<PRE>   protocols like XModem/YModem, ZModem, or Compuserve B, for example. You
   would have to code these protocols yourself or purchase a third-party
   communication control that implements the desired protocols.

</PRE>Q. Can the MSComm control (MSComm16.OCX and MSComm32.OCX) accept byte
<PRE>   arrays?

</PRE>A. The MSComm control does not accept byte arrays. This feature is under
<PRE>   review and will be considered for inclusion in a future release. The
   MSComm control's Input and Output properties only work with Strings.

</PRE>Q. Can Unicode/ANSI conversion be disabled in the MSComm control
<PRE>   (MSComm32.OCX)?

</PRE>A. Unicode/ANSI conversion can not be disabled in the MSComm control.
<PRE>   This feature is under review and will be considered for inclusion in
   a future release. However, this feature would be unnecessary if the
   MSComm control would allow the use of byte arrays to transmit and
   receive binary data. (See question 4 above.)

</PRE>Q. Are the ComInput and ComOutput functions still available in the
<PRE>   Visual Basic 4.0 MSComm control (MSComm16.OCX and MSComm32.OCX)?

</PRE>A. No. The ComInput and ComOutput functions are no longer available in
<PRE>   the Visual Basic 4.0 MSComm control. Since NULLS can be transmitted
   or received properly, as long as the NullDiscard property is set to
   FALSE, and C programmers can access all of the properties and methods
   of the .OCX controls, there is no longer a need for these functions
   in the MSComm control.

</PRE>Q. Can the MSComm control (MSComm16.OCX and MSComm32.OCX) send binary
<PRE>   data at a baud rate greater than 9600 baud?

</PRE>A. Yes. The MSComm control is capable of using baud rates up to and
<PRE>   including 28,800 baud.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all Comm<BR>
KBCategory: kbref kbusage kbfaq kbcode<BR>
KBSubcategory: PrgCtrlsCus
<P>

<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 5, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

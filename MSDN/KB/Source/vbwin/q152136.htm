

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Know Whether Large/Small Font is in Use Under Win95/NT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152136">
<META NAME="KBModify" CONTENT="1996/07/02">
<META NAME="KBCreate" CONTENT="1996/06/05">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Determining whether Windows 95 or Windows NT 3.51 is using large or small fonts can be done from Visual Basic through Windows API calls. The API that retrieves information about the physical font selected for a device context is GetTextMetrics().  ...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADF,QA4Q,QATX,QBWP,QAY5,QBWQ,QABA,QBS0,QBJQ,QBXS,QAB5,QBV8,QAB9,QDL9,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Know Whether Large/Small Font is in Use Under Win95/NT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152136</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Determining whether Windows 95 or Windows NT 3.51 is using large or small
fonts can be done from Visual Basic through Windows API calls. The API
that retrieves information about the physical font selected for a device
context is GetTextMetrics().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The theory of determining whether a large or small font is used under Win95
or Windows NT 3.51 is based on the assumption that the Windows display
driver uses the default value VGASYS.FON for Small Fonts and 8514SYS.FON
for Large Fonts. If the user changes the default system font manually to
any other value, this theory will not apply.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Get the handle of the Desktop window.

<P><LI>Get the Device Context for the entire Desktop window (including borders,
   scroll bars, captions, menus, and so on).

<P><LI>Set the mapping mode to pixels.

<P><LI>Get the size of the system font.

<P><LI>Reset the mapping mode to its original setting.

<P><LI>Release the device context obtained through a call to GetWindowDC.
<P>
</OL>If the system font is more than 16 pixels high, then large fonts are being
used.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   '** TYPES **
   Type TEXTMETRIC
     tmHeight As Integer
     tmAscent As Integer
     tmDescent As Integer
     tmInternalLeading As Integer
     tmExternalLeading As Integer
     tmAveCharWidth As Integer
     tmMaxCharWidth As Integer
     tmWeight As Integer
     tmItalic As String * 1
     tmUnderlined As String * 1
     tmStruckOut As String * 1
     tmFirstChar As String * 1
     tmLastChar As String * 1
     tmDefaultChar As String * 1
     tmBreakChar As String * 1
     tmPitchAndFamily As String * 1
     tmCharSet As String * 1
     tmOverhang As Integer
     tmDigitizedAspectX As Integer
     tmDigitizedAspectY As Integer
   End Type

   '** Win32 API DECLARATIONS **
   Declare Function GetTextMetrics Lib "gdi32" Alias "GetTextMetricsA" _
    (ByVal hdc As Long, lpMetrics As TEXTMETRIC) As Long
   Declare Function GetDesktopWindow Lib "user32" () As Long
   Declare Function GetWindowDC Lib "user32" (ByVal hwnd As Long) As Long
   Declare Function ReleaseDC Lib "user32" (ByVal hwnd As Long, ByVal hdc _
    As Long) As Long
   Declare Function SetMapMode Lib "gdi32" (ByVal hdc As Long, ByVal _
   nMapMode As Long) As Long

   '** CONSTANTS **
   Global Const MM_TEXT = 1

   '** Function **
   Public Function gbl_GetFontRes$()
   Dim hdc, hwnd, PrevMapMode As Long
   Dim tm As TEXTMETRIC

     ' Set the default return value to small fonts
     gbl_GetFontRes$ = "VGA"

     ' Get the handle of the desktop window
     hwnd = GetDesktopWindow()

     ' Get the device context for the desktop
     hdc = GetWindowDC(hwnd)
     If hdc Then
       ' Set the mapping mode to pixels
       PrevMapMode = SetMapMode(hdc, MM_TEXT)

       ' Get the size of the system font
       GetTextMetrics hdc, tm

       ' Set the mapping mode back to what it was
       PrevMapMode = SetMapMode(hdc, PrevMapMode)

       ' Release the device context
       ReleaseDC hwnd, hdc

       ' If the system font is more than 16 pixels high,
       ' then large fonts are being used
       If tm.tmHeight &gt; 16 Then gbl_GetFontRes$ = "8514"
     End If

   End Function
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb432<BR>
KBCategory: kbprg kbhowto<BR>
KBSubcategory: APrgOther
<P>

<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

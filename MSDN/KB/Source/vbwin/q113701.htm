

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Access Multiple Databases in an SQL Query in VB 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113701">
<META NAME="KBModify" CONTENT="1995/07/20">
<META NAME="KBCreate" CONTENT="1994/04/12">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  When accessing data from more than one data source simultaneously in a single query, you will probably want to use the fastest and most general method -- attaching the tables from the different data sources to a single Microsoft Access database. At...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QAZV,QDKY,QABM,QBS0,QAI5,QAPN,QBFY,QDN9,QAY2,QABT,QDI1,QA4F,QBW7,QATX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Access Multiple Databases in an SQL Query in VB 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 20, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113701</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Professional Edition of Microsoft Visual Basic for Windows,
<PRE>  version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When accessing data from more than one data source simultaneously in a
single query, you will probably want to use the fastest and most general
method -- attaching the tables from the different data sources to a single
Microsoft Access database. At that point, queries that span two different
databases can be constructed as if all the tables, attached or local, were
local to the Microsoft Access database. For more information on attaching
tables, please see the following article in the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q108423.htm">Q108423</A></B>
<PRE>TITLE     : How to Attach an External Database Table to a VB 3.0 Database

</PRE>Attaching tables has powerful performance and administrative advantages --
especially if you are executing queries repeatedly. However, sometimes you
might want to take the slower route described in this article when you need
to use ad hoc queries that encompass two or more databases. This article
explains how to construct these slower cross-database queries.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two methods you can use to specify a database outside the one
that's currently open.
<P>
<P><h3>Method One</h3>
 
<P>
Microsoft Access SQL provides an IN clause that allows you to connect to an
external database (a database other than the current database). This method
does, however, limit you to only one external database at a time.
<P>
The IN clause has two parts, database name and connect string. The database
name is a fully-qualified path to the file or directory containing the
database file and the connect string contains the database type and other
parameters as needed.
<P>
To specify an external database, append a semicolon (;) to the connect
part, and enclose it with single or double quotation marks. The following
example uses the IN clause to specify a table (Customers) in a dBASE IV
database (SALES):
<P>
SELECT Customers.CustomerID
FROM Customers
IN "C:\DBASE\DATA\SALES" "dBASE IV;"
WHERE Customers.CustomerID Like "A*"
<P>
In Visual Basic, you can create a dynaset from the above example by
using the following Visual Basic code:
<P>
Dim db As Database
Dim ds As Dynaset
Dim sql As String
<P>
<PRE>' Open a database:
</PRE>Set db = OpenDatabase("C:\VB\BIBLIO.MDB")
<P>
<PRE>' Build the select statement, referencing the external dBASE IV file:
</PRE>sql = "SELECT Customers.CustomerID, FROM Customers"
sql = sql &amp; " IN 'C:\DBASE\DATA\SALES' 'dBASE IV;'"
sql = sql &amp; " WHERE Customers.CustomerID Like 'A*'"
<P>
<PRE>' Create the recordset:
</PRE>Set ds = db.CreateDynaset(sql)
<P>
<PRE>' Loop through and display the records:
</PRE>While Not ds.EOF
<PRE>   For i = 0 To ds.Fields.Count - 1
      Print ds(i); "  ";
   Next i
   Print
   ds.MoveNext
</PRE>Wend
<P>
<P><h3>Method Two</h3>
 
<P>
The Microsoft Access engine incorporated into Visual Basic version 3.0 can
parse SQL queries to include the connect string used to open a database
object. The From clause of the SQL statement accepts a fully qualified
table name, which allows the placement of the connect string in square
brackets before the table name. The connect string is separated from the
table name by a period. This method allows you to connect to multiple
external databases at the same time.
<P>
You can access any table in either of two databases inside a single select
statement by using this syntax:
<P>
SELECT tbl1.fld1,tbl2.fld1
FROM [odbc;dsn=datasource;database=pubs;uid=sa;pwd=].tbl1,
[dbase iii;database=C:\DBASE3].tbl2
WHERE tbl1.fld1 = tbl2.fld1
<P>
This example joins two tables from two different databases, one an ODBC
data source and the other a dBASE III table in the directory C:\DBASE3.
<P>
In general, the connect string used here in square brackets is identical to
the Connect property of a TableDef when attaching or the fourth parameter
of the OpenDatabase statement. It will be in one of three forms depending
on the database (ODBC, ISAM, or Microsoft Access).
<P>
For ODBC databases:
<P>
<PRE>   [odbc;dsn=datasource;database=thedatabasename;uid=sa;pwd=&lt;password&gt;]

</PRE>For ISAM databases:
<P>
<PRE>   [paradox 3.X;database=C:\DATABASE\PARADOX3]
   [foxpro 2.5;database=C:\DATABASE\FOX25]
   [dbase iv;database=C:\DATABASE\DBASEIV]
   [btrieve;database=C:\DATABASE\BTRIEVE\FILE.DDF]

</PRE>For Microsoft Access databases:
<P>
<PRE>   [;database=C:\VB\BIBLIO.MDB]

</PRE>NOTE: the leading semicolon for Microsoft Access databases is important.
This is exactly the same string needed to fill the Connect property of a
TableDef object before attaching the table to a Microsoft Access format
database. The leading semicolon is a place holder for the unneeded database
format specification and allows the "database=" clause to follow.
<P>
<P><h3>Code Example of a Multiple Database Query</h3>
 
<P>
This example creates a dynaset joining two tables from two data sources,
one an SQL Server and the other a Microsoft Access database. The TestTab
table is on the SQL Server and the T1 table is in the Microsoft Access
database.
<P>
Dim db As database
Dim ds As dynaset
Dim sql As String, Uid$, Pwd$
<P>
Set db = OpenDatabase("C:\VB\BIBLIO.MDB")
<PRE>' This obtains a valid database object. It does not have to be a Microsoft
' Access database; the following works equally as well:
' Set db = OpenDatabase("C:\FOXPRO25\", 0, 0, "foxpro 2.5")

' The values here are hard-coded, but you could prompt the user for their
' user id and password.
</PRE>Uid$ = "sa"
Pwd$ = ""
<P>
<PRE>' Build the select statement, concatenating the user's id &amp; password:
</PRE>sql = "SELECT T1.F2, TestTab.F2, TestTab.F3"
sql = sql &amp; " FROM [;database=C:\ACCESS\DB1.MDB].T1 , "
sql = sql &amp; " [odbc;dsn=texas;database=playpen;uid=" &amp; Uid$
sql = sql &amp; ";pwd=" &amp; Pwd$ &amp; "].TestTab"
sql = sql &amp; " WHERE T1.F1 = TestTab.F1"
<P>
<PRE>' Execute the select query:
</PRE>Set ds = db.CreateDynaset(sql)
<P>
<PRE>' Loop through and display the records:
</PRE>While Not ds.EOF
<PRE>   For i = 0 To ds.Fields.Count - 1
      Print ds(i); "  ";
   Next i
   Print
   ds.MoveNext
</PRE>Wend
<P>
<P><h3>Special Note Concerning Secured Microsoft Access Databases</h3>
 
<P>
If the Microsoft Access database is secured, the Visual Basic application
must execute the SetDataAccessOption and SetDefaultWorkspace commands
before executing any data access related code. This is required for a
successful logon because Microsoft Access does not use the "uid=" and
"pwd=" sections of the connect string. For example:
<P>
<PRE>   ' Establish the location of the SYSTEM.MDA files if in another
   ' directory other than the \WINDOWS directory:
   SetDataAccessOption 1, "C:\MYDIR\MYAPP.INI"
   ' Log on to a valid account:
   SetDefaultWorkspace "admin", "&lt;password&gt;"

</PRE>When this is done, queries to the secured Microsoft Access database will
succeed. However, note that because of this process, there is a built-in
limitation for this ad hoc technique; only one secured Microsoft Access
database can be accessed with an ad hoc query. This is because once the
Microsoft Access engine is initialized in a session, with a particular user
name and password combination, those values are retained until the session
(Visual Basic executable program or session of the environment, VB.EXE)
ends.
<P>
However, if more than two secured Microsoft Access databases need to be
accessed for a query, the best approach is to move the actual tables from
secured databases into one secured database. To do this, you need to change
the password for the admin account to "" temporarily during the transfer
operations. Then you could use Visual Basic code, such as that in the data
access sample Visdata, to copy the tables.
<P>
For additional information on Microsoft Access security, please see the
following article in the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VBWIN/Q105990.htm">Q105990</A></B>
<PRE>TITLE     : How Visual Basic Handles Security Set by Microsoft Access
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: APrgDataOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 20, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

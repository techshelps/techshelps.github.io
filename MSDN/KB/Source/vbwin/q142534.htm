

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Create Programs in Visual Basic that Use Remote OLE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142534">
<META NAME="KBModify" CONTENT="1996/11/19">
<META NAME="KBCreate" CONTENT="1996/01/15">
<META NAME="Keywords" CONTENT="kbnetwork kbprg kbwebcontent kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article describes the steps to create a new example program that uses Remote OLE. The first example creates a client-server example illustrating use of a 32-bit client and a 32-bit server application; the second example is of a 16-bit client c...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAA1,QARL,QBXS,QBWS,QAJH,QAH4,QDI2,QAG2,QAY2,QASR,QANN,QAIJ,QAB5,QDIZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Create Programs in Visual Basic that Use Remote OLE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 19, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142534</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, 16-bit and 32-bit,
   for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes the steps to create a new example program that uses
Remote OLE. The first example creates a client-server example illustrating
use of a 32-bit client and a 32-bit server application; the second example
is of a 16-bit client communicating with a 32-bit server application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Both examples are very simple, because the purpose of this article is to
illustrate the most basic steps to get a Remote client and server working.
<P>
In this article, the 32-bit to 32-bit example involves creating the client
and the server applications on the client workstation, and then
distributing the server application onto the server machine. However, there
is no reason why the reverse process of creating the server and client
applications on the server machine, and then creating a setup for the
client could not also occur.
<P>
The 16-bit to 32-Bit example involves creating the 16-bit client and the 32-
bit server applications on the server machine, and then distributing the
client application to a workstation (clearly a 32-bit server cannot be
developed on a 16-bit operating system).
<P>
<P><h3>32-Bit Client to 32-Bit Remote Server Example</h3>
 
<P>
This example uses a 32-bit client and a 32-bit server. Both the client and
the server machines must be run on either Windows 95 or Windows NT 3.51
(that is, a 32-bit operating systems). In this example, the 'client'
workstation needs to have Visual Basic 4.0, 32-bit edition, installed. A
setup program is created for the server application.
<P>
STAGE 1 - CREATION OF THE SERVER APPLICATION

<OL><P><LI>On the client workstation, start a new project in Visual Basic 4.0, 32-
   bit edition. Form1 is created by default. Insert a class module by
   choosing Insert.Class Module from the menu. In the class module, type
   the following code:
<P>
<P><PRE>      Public Sub Test()
      Msgbox "Hi"
      End Sub
</PRE><P>
   Remove unnecessary controls from the project by choosing Tools.Custom
   Controls from the menu, and clearing all the controls. Since no
   controls have been added to the form, all check boxes in the Custom
   Controls list box can be cleared. In addition, remove all unnecessary
   references from the project. This can be accomplished by selecting
   Tools.References and clearing all the entries except for "Visual Basic
   For Applications," "Visual Basic objects and procedures," and "Standard
   OLE Types." This will save time later on when in the distribution stage
   for the server application.

<P><LI>Press F4 to bring up the property window for the class. Set the
   following properties:
<P>
<PRE>      Name:       TestObj
      Instancing:   2 - Creatable Multiuse
      Public:      True

</PRE><P><LI>Choose Tools.Options from the menu, and choose the Project tab. Set the
   following properties:
<P>
<PRE>   Project name:      TestApp

   Select the OLE Server radio button and then press the OK button to
   accept the changes.

</PRE><P><LI>Save the project files to a new directory. Now, choose File.Make EXE
   from the menu. Make the EXE in the same directory as the VBP project
   file. Name the EXE TestAapp.exe.

<P><LI>Go to Tools.Options from the menu, choose the Project tab. Choose the
   ellipsis (three dots) button contained in the right hand side of the
   "Compatible OLE Server" box, and select TestApp.exe from the dialog box.
<P>
   Although this step was not strictly necessary, it is useful because
   after selecting the "Compatible OLE Server", Visual Basic will reuse the
   ID for the server application, so that client applications that are
   bound to that ID will not break if the server application needs to be
   recompiled.

<P><LI>Save the project file again.
<P>
</OL>STAGE 2 - REGISTER THE SERVER APPLICATION ON THE CLIENT WORKSTATION.

<OL><P><LI>Register the server locally by running TestApp.exe. Close down the
   application by choosing Close from the System menu on the upper-left
   corner of Form1. The action of running the server caused it to be
   registered locally.
<P>
</OL>This step is important to ensure that the server application works, and
that it correctly registers.
<P>
STAGE 3 - CREATION OF THE CLIENT APPLICATION.

<OL><P><LI>Start a new project in Visual Basic, 32-bit edition. Form1 is created by
   default. Go to the Click event for Form1 and place the following code:
<P>
<P><PRE>      Dim x as New TestApp.TestObj
      x.Test
</PRE>
<P><LI>Go to Tools.References in the menu, and check the entry for TestApp.

<P><LI>Run the Client application in the Design environment. Click on the form
<P><PRE>    and the server application should be launched and a MsgBox should
    appear.
</PRE>
<P><LI>Stop the client application in the design environment and then close
<P><PRE>    down the server application by choosing Close from the System menu on
    the still displayed Form1 of the server application.
</PRE>
<P><LI>Save the client project files to a new directory. Choose Make EXE for
<P><PRE>    the client application - call it ClientApp.exe. Make the EXE file in
    the same location as the VBP file.
</PRE>
<P><LI>Exit Visual Basic and save the change to the Project file (the change
<P><PRE>    was the location and name of the executable).
</PRE><P>
</OL>STAGE 4 - TEST THE CLIENT APPLICATION LOCALLY.

<OL><P><LI>In Explorer in Windows 95, or File Manager in Windows NT 3.51, double-
<P><PRE>    click on ClientApp.EXE. Click the Form and it should again launch the
    server and bring up a MsgBox of "Hi" if successful. Close down the
    server and client completely.
</PRE><P>
</OL>STAGE 5 - INSTALLATION OF SERVER APPLICATION ON REMOTE MACHINE

<OL><P><LI>Choose the Visual Basic 4 32-bit Setup Wizard. Choose the TestApp.vbp
<P><PRE>    Project file in Step 1. Do not choose the Rebuild EXE option. Choose
    the Next button. If Step 2 appears, simply choose the Next button.
</PRE>
<P><LI>In Step 3 of Setup Wizard you can choose to install the application to
<P><PRE>    a new directory or to floppy disks. For Steps 4 and 5 simply choose the
    Next button.
</PRE>
<P><LI>In Step 6 of Setup Wizard choose the option to Install in Application
<P><PRE>    Directory and check the box labeled:
</PRE><P>
<P><PRE>       "Yes, install remote OLE automation server components"
</PRE><P>
<P><PRE>    Press Next on the Setup Wizard.
</PRE>
<P><LI>In Step 7 press the Finish button to create the compressed files and
<P><PRE>    setup program.
</PRE>
<P><LI>Go to the server machine, and run the setup program from the drive and
<P><PRE>    directory or floppy disks where Setup Wizard placed the compressed
    server files and setup program.
</PRE><P>
   At the completion of the setup program, assuming it completed
   successfully, there should be icons for the RemAuto Connection Manager,
   the Automation Manager, the server TestApp, and an icon to uninstall the
   server application.
<P>
</OL>STAGE 6 - CONFIGURATION OF OLE SERVER APPLICATION

<OL><P><LI>The Setup program should have registered the server application. To
<P><PRE>    ensure it works correctly, run TestApp.exe and then close it down by
    choosing Close from the System menu of Form1.
</PRE>
<P><LI>Start the 32-bit Remote Automation (RemAuto) Connection Manager on the
<P><PRE>    server. Choose the Client Access tab (this is the only tab we are
    concerned with when on the server machine; on the client machine, we
    are only concerned with the Server Connection tab).
</PRE><P>
<P><PRE>    Highlight TestApp.TestObj and choose the "Allow all Remote Creates"
    option, press the Apply button and exit the Remote Connection Manager.
</PRE>
<P><LI>Start the Automation Manager.
<P>
</OL>STAGE 7 - CONFIGURATION OF CLIENT WORKSTATION

<OL><P><LI>Start the 32-bit Remote Connection Manager on the client machine. Go to
<P><PRE>    the Server Connection Tab.
</PRE>
<P><LI>Highlight TestApp.TestObj. Fill in the details for network address,
<P><PRE>    protocol and Authentication. An example would be:
</PRE><P>
<PRE>      Machine:          Machine2
      Protocol:          TCP/IP
      Authentication:       None

   Choose the Remote menu item from the Register menu. Press the Apply
   button and exit the RemAuto Connection Manager.

</PRE><P><LI>Start the Client Application via Explorer or File Manager. Click Form1
<P><PRE>    of the client application and a Msgbox should appear on the Remote
    machine. Click OK to close the message box and watch as the Automation
    Manager returns to 0 connection(s) to 0 object(s) when the client-side
    object reference is destroyed as the object variable goes out of scope.
    Shut down the server and the client applications.
</PRE><P>
</OL><h3>16-Bit Client to 32-Bit Remote Server Example</h3>
 
<P>
To follow through these steps, you will need Visual Basic 4.0 16-bit and 32-
bit editions installed on a workstation that is going to represent the
server machine. The server should be running either Windows 95 or Windows
NT 3.51. A setup program for the client application is created. The client
workstation can be running any operating system such as Windows 3.1,
Windows 3.11, Windows 95, or Windows NT 3.51.
<P>
STAGE 1 - CREATION OF THE SERVER APPLICATION

<OL><P><LI>On the server workstation, start a new project in Visual Basic 4, 32-
   bit Edition.

<P><LI>Insert a class module into the Project by choosing Insert.Class Module
   from the menu and set the properties of the Class to the following:
<P>
<PRE>      Instancing:    Creatable MultiUse
      Name:         RemObject
      Public:        True

   Add the following code to the class module:

      Public Sub MyMessage()
      MsgBox "Hello there"
      End Sub

</PRE><P><LI>Go to Tools.Options from the menu and choose the Project tab. Set
   "Project Name" = RemServer. Select the OLE Server radio button and
   press the OK button.

<P><LI>Choose File.Make EXE from the menu. Change the name of the program to
   RemSer.exe. Before choosing OK, choose the Options button and check the
   "Remote Server Support Files" check box. Now make the EXE file.

<P><LI>Save the project files to the same location as the EXE file.

<P><LI>Choose Tools.Options, and select the Project tab. Select the "Compatible
   OLE Server" and select the EXE file "RemSer.exe". Choose OK, and then
   save the project.

<P><LI>Exit Visual Basic 4 32-bit edition, saving changes to the files. Go to
   File Manager and run the server to ensure that it works.
<P>
</OL>STAGE 2 - CREATION OF THE CLIENT

<OL><P><LI>On the server workstation, start Visual Basic 4, 16-bit Edition. Start
<P><PRE>    a new project, and Form1 is created by default.
</PRE><P>
   Remove unnecessary controls from the project by choosing Tools.Custom
   Controls from the menu, and unchecking all the controls. Since no
   controls have been added to the form, all check boxes in the Custom
   Controls list box can be cleared. In addition, remove all unnecessary
   references from the project. This can be accomplished by selecting
   Tools.References and clearing all the entries except for "Visual Basic
   For Applications," "Visual Basic objects and procedures," and "Standard
   OLE Types." This will save time later on when in the distribution stage
   for the server application.

<P><LI>Choose Tools.. References from the menu. Check the entry for RemServer.

<P><LI>Go to the Form_Click event for Form1, and place the following code:
<P>
<P><PRE>      Dim x As RemServer.RemObject
      Set x = New RemServer.RemObject
      x.MyMessage
</PRE>
<P><LI>Save the project files and make an EXE into the same directory as the
<P><PRE>    project files for the client. From File Manager, run the client EXE on
    the server machine, click on the form and it should launch the server
    and bring up the message box. Shut down the client and server
    applications.
</PRE><P>
</OL>STAGE 3 - CREATION OF THE CLIENT APPLICATION SETUP PROGRAM

<OL><P><LI>Run the 16-bit edition of the Setup Wizard. In Step 1 choose the VBP
<P><PRE>    file for the client application--do not select the Rebuild the Project
    EXE option.
</PRE>
<P><LI>Choose the Next button for Step 2, and in Step 3 choose to install into
<P><PRE>    a brand new directory. In Step4, choose the Add OLE Server button,
    change the 'List Files of Type:' text box to show 'Remote OLE Servers'
    instead of 'Local OLE Servers'. Locate the VBR file for the server
    which should be in the directory where the server EXE was made. It asks
    for details when you select the VBR file - type in the Network address
    (the Machine name), and choose the protocol (TCP/IP recommended). Leave
    Authentication at None. Choose OK and move on to the next step. Skip
    through Step 5 by choosing the Next button, and in Step 6 leave the
    default, which is "Install in Application Directory". Choose the Next
    button and in Step 7 choose the Finish button.
</PRE>
<P><LI>In File Manager, or Explorer, share the directory that contains the
<P><PRE>    server files.
</PRE><P>
</OL>STAGE 4 - SETUP OF THE CLIENT

<OL><P><LI>On the client connect to the shared directory on the server machine
<P><PRE>    containing the compressed files and the setup program, and run the
    setup program to install the client application to the client machine.
</PRE><P>
</OL>STAGE 5 - TESTING IT OUT

<OL><P><LI>Start the Automation Manager on the server.

<P><LI>Run the client and click on the client Form. You should get a Message
<P><PRE>    Box on the server. Close the message box and shut down both the client
    and the server.
</PRE><P>
</OL><h3>16-Bit Client to 16-Bit Remote Server</h3>
 
<P>
In order to construct a 16-bit to 16-bit example, exactly the same steps
used for the 16-bit client to 32-bit server example can be used, except
that Stage 1 - Creation of the Server (steps 1-7 inclusive) would take
place in Visual Basic 4.0, 16-bit Edition. It is imperative to stress that
the server must run on a 32-bit operating system (Windows 95 or Windows NT
3.51) because the Automation Manager must be running, and this program is
only available as a 32-bit application. In general, it is far preferable to
run a 32-bit server because of performance and reliability reasons.
<P>
<P><h3>Troubleshooting Remote OLE Problems</h3>
 
<P>
This article is useful for testing if Remote OLE is working at all - if
the steps to create a new Remote OLE example above have been faithfully
reproduced, and errors still occur, then it could indicate that there is
a network configuration or other software problem. For additional
troubleshooting information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q141824.htm">Q141824</A></B>
   TITLE     : Common Remote OLE Automation Errors
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win remoteole vb4all<BR>
KBCategory: kbnetwork kbprg kbwebcontent kbhowto<BR>
KBSubcategory: iapole
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 19, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

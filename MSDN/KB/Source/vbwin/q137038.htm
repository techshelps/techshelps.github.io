

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Add Menu Controls to a Form from an Add-In </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137038">
<META NAME="KBModify" CONTENT="1995/10/30">
<META NAME="KBCreate" CONTENT="1995/09/19">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  This article explains how to use the AddMenuTemplate method to Add menu controls to a form from an Add-in. It also provides an example demonstrating how the method is used.  MORE INFORMATION  The FormTemplate object of the  Visual Basic Design Envi...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QBXS,QATX,QAF0,QBJZ,QAW6,QBWR,QAMB,QAH4,QADZ,QA7O,QAOE,QAMN,QAH0 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Add Menu Controls to a Form from an Add-In</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137038</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to use the AddMenuTemplate method to Add menu
controls to a form from an Add-in. It also provides an example
demonstrating how the method is used.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The FormTemplate object of the "Visual Basic Design Environment" object
model provides the AddMenuTemplate method. This method allows an add-in to
add menu controls to a form. It can add both top-level menus and submenus.
The syntax for the AddMenuTemplate method is as follows:
<P>
<PRE>   Menu = Form.AddMenuTemplate(Name, Parent)

      Form   - A FormTemplate object
      Name   - A string specifying the Name property for the new menu
      Parent - A ControlTemplate object representing the parent menu item
               that the new menu item become a child of
      Menu   - A ControlTemplate object that will be set to the new menu

</PRE>To add a top-level menu to a form, you must specify a Parent object that is
set to Nothing. The following shows how this is done by passing the keyword
Nothing as the Parent parameter:
<P>
<PRE>   Set MyMenu = MyForm.AddMenuTemplate("mnuFile", Nothing)

</PRE>To add a submenu, you must specify an existing menu ControlTemplate as the
Parent parameter. The syntax is as follows:
<P>
<PRE>   Set MySubMenu = MyForm.AddMenuTemplate("mnuFileOpen", MyMenu)

</PRE>The AddMenuTemplate method adds the new menus to the end of existing menus.
Menus can't be inserted between two existing menus.
<P>
Once you have added a menu, you can modify its properties to:

<UL><LI>Change the caption
<LI>Add a shortcut key
<LI>Make a menu separator
<LI>Enable it
<LI>Hide it
<LI>Turn it into a control array
<LI>And more
<P>
</UL>The object returned by the AddMenuTemplate method is a ControlTemplate
object that references the newly added menu. The properties of the menu can
be set through the Properties collection of the ControlTemplate. For
example, to change the caption, use this:
<P>
<PRE>   MyMenu.Properties("&amp;Caption").Value = "New Caption"

</PRE>You can add an access key to any menu by placing an ampersand (&amp;) in front
of the desired access key in the caption. In the preceding example, C would
be the access key.
<P>
You can only add a shortcut key to a submenu. To set a shortcut key, you
gain access to the Shortcut property in the same manner that you gain
access to the Caption property. The Shortcut property is an enumerated
property. Visual Basic defines constants such as vbMenuAccelCtrlO for
setting the Shortcut property.
<P>
To create a menu separator, first add a submenu. Next, set the Caption
property to a dash. This indicates to Visual Basic that you want a menu
separator instead of a submenu.
<P>
To hide a menu item, set the Visible property to False. This will not
work on a submenu if it is the only visible submenu.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic.

<P><LI>Remove the default form (Form1).

<P><LI>Add a new standard module (Module1.bas by default.)

<P><LI>Put the following code in the standard module:
<P>
<PRE>   ''' MODULE1.BAS
   Option Explicit

   #If Win16 Then
      Declare Function WritePrivateProfileString Lib "KERNEL" ( _
         ByVal AppName As String, ByVal KeyName As String, _
         ByVal keydefault As String, ByVal FileName As String) As Integer
      Declare Function GetPrivateProfileString Lib "KERNEL" ( _
         ByVal AppName As String, ByVal KeyName As String, _
         ByVal keydefault As String, ByVal ReturnString As String, _
         ByVal NumBytes As Integer, ByVal FileName As String) As Integer

   #ElseIf Win32 Then
      Declare Function WritePrivateProfileString Lib "Kernel32" _
         Alias "WritePrivateProfileStringA" (ByVal AppName As String, _
         ByVal KeyName As String, ByVal keydefault As String, _
         ByVal FileName As String) As Long
      Declare Function GetPrivateProfileString Lib "Kernel32" _
         Alias "GetPrivateProfileStringA" (ByVal AppName As String, _
         ByVal KeyName As String, ByVal keydefault As String, _
         ByVal ReturnString As String, ByVal NumBytes As Long, _
         ByVal FileName As String) As Long
   #End If

   Sub Main()
      #If Win16 Then
         Const Section = "Add-Ins16"
      #ElseIf Win32 Then
         Const Section = "Add-Ins32"
      #End If

      Const BufSize = 255
      Dim Ret As Variant
      Dim RetStr As String

      ' Hide the Addin from the Task Manager
      App.TaskVisible = False

      ' Check to see if the entry is already in the VB.ini file.
      ' Add if not.
      RetStr = Space(BufSize)
      Ret = GetPrivateProfileString(Section, "AddinExample.MenuControl", _
         "NotFound", RetStr, BufSize, "VB.INI")
      RetStr = Left(RetStr, Ret)
      If RetStr = "NotFound" Then
         WritePrivateProfileString Section, "AddinExample.MenuControl", _
            "0", "VB.INI"
      End If
   End Sub

</PRE><P><LI>Add a new class module to the project (Class1.cls by default.)

<P><LI>Set the following properties of the class module to the specified
   values:
<P>
<PRE>   Property        Value
   ---------------------------------------
   Instancing      1 - Creatable SingleUse
   Name            MenuControl
   Public          True

</PRE><P><LI>Put the following code in the class module:
<P>
<PRE>   ''' CLASS1.CLS
   Option Explicit

   Private ThisInstance As Object 'VBIDE.Application
   Private AddInMenuLine As Object 'VBIDE.SubMenu
   Private AddInID As Long

   Public Sub ConnectAddIn(VBInstance As Object)
      Set ThisInstance = VBInstance
      Set AddInMenuLine = ThisInstance.AddInMenu.MenuItems.Add( _
         "Menu Control Example")
      AddInID = AddInMenuLine.ConnectEvents(Me)
   End Sub

   Public Sub DisconnectAddIn(Mode As Integer)
      AddInMenuLine.DisconnectEvents AddInID
      ThisInstance.AddInMenu.MenuItems.Remove AddInMenuLine
   End Sub

   Public Sub AfterClick()
      Dim CurrentForm As Object 'VBIDE.FormTemplate
      Dim mnuFile As Object 'VBIDE.ControlTemplate
      Dim mnuFileOpen As Object 'VBIDE.ControlTemplate
      Dim mnuFileSeparator As Object 'VBIDE.ControlTemplate
      Dim mnuFileMRU As Object 'VBIDE.ControlTemplate

      ' Set a reference to the Active Form
      Set CurrentForm = ThisInstance.ActiveProject.ActiveForm

      ' Create the top-level File menu
      Set mnuFile = CurrentForm.AddMenuTemplate("mnuFile", Nothing)
      mnuFile.Properties("Caption").Value = "&amp;File"

      ' Add the Open menu under the File menu
      Set mnuFileOpen = CurrentForm.AddMenuTemplate("mnuFileOpen", mnuFile)
      mnuFileOpen.Properties("Caption").Value = "&amp;Open"
      mnuFileOpen.Properties("Shortcut").Value = vbMenuAccelCtrlO

      ' Add a separator
      Set mnuFileSeparator = CurrentForm.AddMenuTemplate _
         ("mnuFileSeparator", mnuFile)
      mnuFileSeparator.Properties("Caption").Value = "-"

      ' Add MRU under the File menu
      Set mnuFileMRU = CurrentForm.AddMenuTemplate("mnuFileMRU", mnuFile)
      mnuFileMRU.Properties("Caption").Value = "MRU"
      mnuFileMRU.Properties("Visible").Value = False ' Make Invisible
      mnuFileMRU.Properties("Index").Value = 0  ' Make into control array
   End Sub

</PRE><P><LI>Set the following Project Options:
<P>
<PRE>   Option            Value
   ---------------------------------------
   Startup Form      Sub Main
   Project Name      AddinExample
   StartMode         OLE Server
   Error Trapping    Break in Class Module

</PRE><P><LI>Save the project.

<P><LI>Run the project.

<P><LI>Start a second instance of Visual Basic. Form1 is created by default.

<P><LI>Use the Add-In Manager to add the AddinExample.MenuControl Add-In.

<P><LI>Set the focus to Form1.

<P><LI>On the Add-In menu, click Menu Control Example.
<P>
</OL>The Add-In should add a File menu to Form1. Under the file menu will be an
Open submenu. The Open submenu will have CTRL+O as a shortcut key. Below
the Open submenu will be a menu separator. Below the separator there will
be an invisible MRU menu control array.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 vb4win vb4all<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: EnvtDes<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Perform Bit Manipulation In Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113476">
<META NAME="KBModify" CONTENT="1995/06/21">
<META NAME="KBCreate" CONTENT="1994/04/05">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Visual Basic does not explicitly support the Set, Clear, Toggle, and Examine bit manipulation functions. This article describes how to simulate these functions in Visual Basic.  MORE INFORMATION  Bit-level manipulation is common practice for operat...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALG,QBS0,QAUD,QAH4,QAFF,QAJX,QADR,QAEF,QBXS,QAKD,QANY,QBV4,QA4Q,QAMA,QBT6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Perform Bit Manipulation In Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113476</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, versions 2.0 and 3.0
</PRE>- Microsoft Visual Basic for Windows, version 1.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic does not explicitly support the Set, Clear, Toggle, and
Examine bit manipulation functions. This article describes how to simulate
these functions in Visual Basic.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Bit-level manipulation is common practice for operating systems and
programs that need to conserve space. Eight Yes/No, On/Off bits of data may
be stored in a single byte rather than using up 8 bytes. Visual Basic can't
address the bit level directly, but by using logical operators, it can
manipulate bit data by working with one byte at a time.
<P>
<P><h3>Example Code to Handle Bit Manipulation</h3>
 
<P>
The following example manipulates the Bits of a single Byte of data. An
Integer variable is used to store the information after it is retrieved
from the Text box because an integer is the smallest addressable numeric
type available in Visual Basic. Because an integer is stored in two bytes,
you must mask off the high byte to see the results as you manipulate the
low-order byte.

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a Command button (Command1), two Text boxes (Text1 and Text2), and
   five Labels (Label1 ... Label5) to Form1. Stretch each label so that
   it is wide enough to hold about 40 characters.

<P><LI>Add the following code to the Command1_Click event:
<P>
<PRE>   Sub Command1_Click ()
      ' The following clears the high-order byte &amp; returns only the
      ' low order byte:
      Byte% = Text1.Text And &amp;HFF
      Bit% = Text2.Text
      If Bit% &lt;= 7 Then
         Label1.Caption = "The original value of the Byte is " &amp; Byte%
         Temp% = ExamineBit(Byte%, Bit%)
         Enter the following two lines as one, single line of code:
         Label2.Caption =
            "Bit " &amp; Bit% &amp; IIf(Temp%, " is ", " is not ") &amp;   "set"
         Call ClearBit(Byte%, Bit%)
         Enter the following two lines as one, single line of code:
         Label3.Caption =
            "The value with bit " &amp; Bit% &amp; " clear is " &amp; Str$(Byte%)
         Call SetBit(Byte%, Bit%)
         Label4.Caption = "The value with bit " &amp; Bit% &amp; " set is " &amp; Byte%
         Call ToggleBit(Byte%, Bit%)
         Enter the following two lines as one, single line of code:
         Label5.Caption =
            "The value after toggling bit " &amp; Bit% &amp; " is " &amp; Byte%
      Else
         MsgBox ("Please enter a value less than 8 in the Bit TextBox.")
      End If
   End Sub

</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
<PRE>   ' The ClearBit Sub clears the nth bit (Bit%) of an integer (Byte%).
   Sub ClearBit (Byte%, Bit%)
      ' Create a bitmask with the 2 to the nth power bit set:
      Mask% = 2 ^ Bit%
      ' Clear the nth Bit:
      Byte% = Byte% And Not Mask%
   End Sub

   ' The ExamineBit function will return True or False depending on
   ' the value of the nth bit (Bit%) of an integer (Byte%).
   Function ExamineBit% (Byte%, Bit%)
      ' Create a bitmask with the 2 to the nth power bit set:
      Mask% = 2 ^ Bit%
      ' Return the truth state of the 2 to the nth power bit:
      ExamineBit% = ((Byte% And Mask%) &gt; 0)
   End Function

   ' The SetBit Sub will set the nth bit (Bit%) of an integer (Byte%).
   Sub SetBit (Byte%, Bit%)
      ' Create a bitmask with the 2 to the nth power bit set:
      Mask% = 2 ^ Bit%
      ' Set the nth Bit:
      Byte% = Byte% Or Mask%
   End Sub

   ' The ToggleBit Sub will change the state of the nth bit (Bit%)
   ' of an integer (Byte%).
   Sub ToggleBit (Byte%, Bit%)
      ' Create a bitmask with the 2 to the nth power bit set:
      Mask% = 2 ^ Bit%
      ' Toggle the nth Bit:
      Byte% = Byte% Xor Mask%
   End Sub

</PRE><P><LI>Run the program.

<P><LI>Enter a numeric value in the Text1 box indicating the number you want
   to manipulate.

<P><LI>Enter a single digit into the Text2 box indicating which bit you want
   this sample program to change around.
<P>
   NOTE: Count bits starting with the least significant bit as the 0 bit.
   If you enter a value greater than 7 (there are 8 bits, numbered 0 to 7),
   you will be prompted to enter a number between 0 and 7.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 3.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: PrgOther<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

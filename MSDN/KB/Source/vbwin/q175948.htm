

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Running Visual Basic Applications as Windows NT Services </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175948">
<META NAME="KBModify" CONTENT="1997/10/30">
<META NAME="KBCreate" CONTENT="1997/10/29">
<META NAME="Keywords" CONTENT="VB4ALL VB4WIN vb5all VBKBEnv VBKBProgramming">
<META NAME="KBArea" CONTENT="Support; KB; vbwin">
<META NAME="Description" CONTENT="  Microsoft does not currently recommend running Visual Basic applications as Microsoft Windows NT Services because the applications may exhibit unstable behavior when installed and run as Microsoft Windows NT Services. Microsoft Visual Basic 4.0 doe...">
<META NAME="Product" CONTENT="Visual Basic for Windows">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QACK,QAK7,QAMA,QA5F,QAA1,QBWP,QAY5,QATX,QBWS,QAJH,QDI2,QAI5,QAH4,QAGX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Running Visual Basic Applications as Windows NT Services</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175948</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions
   for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft does not currently recommend running Visual Basic applications as
Microsoft Windows NT Services because the applications may exhibit unstable
behavior when installed and run as Microsoft Windows NT Services. Microsoft
Visual Basic 4.0 does not support Callbacks nor is it thread-safe. While
Visual Basic 5.0 is apartment-model thread-safe, there is no way to marshal
calls back into a Visual Basic 5.0 program through the AddressOf operator.
This behavior is by design. This article includes some examples of this
unstable behavior, a short explanation of the possible causes of the
instability, and a possible workaround.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Three Examples of Unstable Behavior</h3>
 

<OL><P><LI>When a Microsoft Visual Basic application displays a dialog and then
   terminates, the name of the .EXE file disappears from the Services
   applet dialog, but the Visual Basic application dialog leaves behind
   a gray rectangle on the user interface.

<P><LI>When the Microsoft Visual Basic application is launched from a
   service, the .EXE file name briefly appears in the Services applet
   dialog but the Visual Basic application does not seem to launch.

<P><LI>Microsoft Visual Basic applications that are OLE Servers will return
   read-only properties successfully and, when the OLE Server terminates,
   the .EXE file name disappears from the Services applet dialog. Yet,
   subsequent attempts to instantiate that OLE Server fail with OLE
   automation errors or the Services process will hang.
<P>
</OL><h3>Why This Unstable Behavior Occurs</h3>
 
<P>
A service in Microsoft Windows NT is a program that is written as a console
application and runs whenever the operating system is running. Services are
commonly employed to provide facilities such as directory replication,
system activity auditing, process monitoring, or communications support.
<P>
Services log on to Microsoft Windows NT under the LocalSystem account,
which is a predefined local account used by system processes.
<P>
A service that runs in the context of the LocalSystem account inherits
these characteristics:

<UL><LI>The service cannot open the registry key HKEY_CURRENT_USER.

<LI>The service can open the registry key HKEY_LOCAL_MACHINE\SECURITY.

<LI>The service has limited access to network resources, such as shares and
   pipes, because it has no credentials and must connect using a null
   session.

<LI>If the service opens a command window and runs a batch file, the user
   could hit CTRL+C to terminate the batch file and gain access to a
   command window with LocalSystem permissions.

<LI>The service cannot share objects with other applications unless they
   are opened using a DACL, which allows a user or group of users access,
   or NULL DACL, which allows everyone access. Specifying a NULL DACL is
   not the same as specifying NULL, which means that access is only
   granted to applications with the same security context.

<LI>Service programs that require anything more than a brief moment to
   perform necessary initialization may be required to create another
   thread to do the common initialization while the main thread
   continues with processing.
<P>
</UL>By convention, Microsoft Windows NT[ASCII 153] Services are designed to be
non-interactive. That is, in most cases, they do their work without any
user interaction. Services are usually configured and controlled with an
applet installed in the Control Panel. This requires that the programmer
add code to provide for these additional requirements:

<UL><LI>Report warnings and errors in the system or application logs. You
   typically can't use output to the screen because there may be no user
   logged on.

<LI>Control the service through a separate application or through a control
   Panel applet. This involves implementing a communication mechanism for
   your service.

<LI>Install and remove the service from the system.
<P>
</UL>However, with Microsoft Visual Basic 4.0, the possibility remains that your
application will eventually post an unhandled error dialog from the
Services process which will hang the Microsoft Visual Basic application.
<P>
The Unattended EXE compile option available with Microsoft Visual Basic 5.0
does address the unexpected dialog problem, but thread safety remains an
issue. Visual Basic 5.0 is apartment-model thread-safe unless or until a
program uses the AddressOf operator. There is currently no way for Visual
Basic to marshal multiple calls back into a Visual Basic 5.0 application
through AddressOf. Therefore, it is not currently recommended that you
install a Microsoft Visual Basic application as a Microsoft Windows NT
Service.
<P>
<P><h3>Workaround</h3>
 
<P>
The Microsoft Technical Article, "NT Service: An OLE Control for Creating
Windows NT Services in Visual Basic," describes an OLE Control that enables
developers to create Visual Basic applications that function as Microsoft
Windows NT services. With the NTService control, you can install a service,
log events, and respond to start, stop, pause, and continue events.
<P>
<P><h3>Other Technologies</h3>
 
<P>
Developers can expect difficulties with efforts to employ Microsoft
technologies such as MAPI, ODBC, DCOM, OLE Automation, and DAO in a
Microsoft Windows NT Service written in Microsoft Visual Basic. For
instance, MAPI contains user interface elements that must be anticipated
and suppressed, and may require access to parts of the registry that are
either unavailable to a service or require a special security context for
use.
<P>
For this reason, and those already noted, Microsoft advises developers to
avoid using these technologies in a Microsoft Windows NT Service written in
Microsoft Visual Basic.
<P>
<P><h3>Microsoft Visual Basic 5.0</h3>
 
<P>
While it is possible to write a Microsoft Windows NT service as an
unattended .EXE in Microsoft Visual Basic 5.0 (as the following code sample
demonstrates), it is still not advisable to implement services because
Microsoft Visual Basic 5.0 is not thread-safe and the possibility still
remains that an unexpected dialog may post from within the Visual Basic run-
time environment.
<P>
This example provides for installing and uninstalling itself as a service
by running the .EXE with a command line parameter as shown here:
<P>
<PRE>   MyService.exe install
   MyService.exe uninstall

</PRE></OL>After installing the service, you will need to configure it using the
Control Panel Services applet. From the applet, you can start, stop, and
pause the service. You can also set it up to start automatically during
boot-up.
<P>
Add the following code to a .BAS module:
<P>
<PRE>   Option Explicit

   Private Const SERVICE_WIN32_OWN_PROCESS = &amp;H10&amp;
   Private Const SERVICE_WIN32_SHARE_PROCESS = &amp;H20&amp;
   Private Const SERVICE_WIN32 = SERVICE_WIN32_OWN_PROCESS + _
                                 SERVICE_WIN32_SHARE_PROCESS

   Private Const SERVICE_ACCEPT_STOP = &amp;H1
   Private Const SERVICE_ACCEPT_PAUSE_CONTINUE = &amp;H2
   Private Const SERVICE_ACCEPT_SHUTDOWN = &amp;H4

   Private Const SC_MANAGER_CONNECT = &amp;H1
   Private Const SC_MANAGER_CREATE_SERVICE = &amp;H2
   Private Const SC_MANAGER_ENUMERATE_SERVICE = &amp;H4
   Private Const SC_MANAGER_LOCK = &amp;H8
   Private Const SC_MANAGER_QUERY_LOCK_STATUS = &amp;H10
   Private Const SC_MANAGER_MODIFY_BOOT_CONFIG = &amp;H20

   Public Const STANDARD_RIGHTS_REQUIRED = &amp;HF0000
   Private Const SERVICE_QUERY_CONFIG = &amp;H1
   Private Const SERVICE_CHANGE_CONFIG = &amp;H2
   Private Const SERVICE_QUERY_STATUS = &amp;H4
   Private Const SERVICE_ENUMERATE_DEPENDENTS = &amp;H8
   Private Const SERVICE_START = &amp;H10
   Private Const SERVICE_STOP = &amp;H20
   Private Const SERVICE_PAUSE_CONTINUE = &amp;H40
   Private Const SERVICE_INTERROGATE = &amp;H80
   Private Const SERVICE_USER_DEFINED_CONTROL = &amp;H100
   Private Const SERVICE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or _
                                       SERVICE_QUERY_CONFIG Or _
                                       SERVICE_CHANGE_CONFIG Or _
                                       SERVICE_QUERY_STATUS Or _
                                       SERVICE_ENUMERATE_DEPENDENTS Or _
                                       SERVICE_START Or _
                                       SERVICE_STOP Or _
                                       SERVICE_PAUSE_CONTINUE Or _
                                       SERVICE_INTERROGATE Or _
                                       SERVICE_USER_DEFINED_CONTROL)

   Private Const SERVICE_DEMAND_START As Long = &amp;H3

   Private Const SERVICE_ERROR_NORMAL As Long = &amp;H1

   Private Enum SERVICE_CONTROL
      SERVICE_CONTROL_STOP = &amp;H1
      SERVICE_CONTROL_PAUSE = &amp;H2
      SERVICE_CONTROL_CONTINUE = &amp;H3
      SERVICE_CONTROL_INTERROGATE = &amp;H4
      SERVICE_CONTROL_SHUTDOWN = &amp;H5
   End Enum

   Private Enum SERVICE_STATE
      SERVICE_STOPPED = &amp;H1
      SERVICE_START_PENDING = &amp;H2
      SERVICE_STOP_PENDING = &amp;H3
      SERVICE_RUNNING = &amp;H4
      SERVICE_CONTINUE_PENDING = &amp;H5
      SERVICE_PAUSE_PENDING = &amp;H6
      SERVICE_PAUSED = &amp;H7
   End Enum

   Private Type SERVICE_TABLE_ENTRY
      lpServiceName As String
      lpServiceProc As Long
      lpServiceNameNull As Long
      lpServiceProcNull As Long
   End Type

   Private Type SERVICE_STATUS
      dwServiceType As Long
      dwCurrentState As Long
      dwControlsAccepted As Long
      dwWin32ExitCode As Long
      dwServiceSpecificExitCode As Long
      dwCheckPoint As Long
      dwWaitHint As Long
   End Type

   Private Declare Function StartServiceCtrlDispatcher _
      Lib "advapi32.dll" Alias "StartServiceCtrlDispatcherA" _
      (lpServiceStartTable As SERVICE_TABLE_ENTRY) As Long
   Private Declare Function RegisterServiceCtrlHandler _
      Lib "advapi32.dll" Alias "RegisterServiceCtrlHandlerA" _
      (ByVal lpServiceName As String, ByVal lpHandlerProc As Long) _
      As Long
   Private Declare Function SetServiceStatus _
      Lib "advapi32.dll" (ByVal hServiceStatus As Long, _
      lpServiceStatus As SERVICE_STATUS) As Long
   Private Declare Function OpenSCManager _
      Lib "advapi32.dll" Alias "OpenSCManagerA" _
      (ByVal lpMachineName As String, ByVal lpDatabaseName As String, _
      ByVal dwDesiredAccess As Long) As Long
   Private Declare Function CreateService _
      Lib "advapi32.dll" Alias "CreateServiceA" _
      (ByVal hSCManager As Long, ByVal lpServiceName As String, _
      ByVal lpDisplayName As String, ByVal dwDesiredAccess As Long, _
      ByVal dwServiceType As Long, ByVal dwStartType As Long, _
      ByVal dwErrorControl As Long, ByVal lpBinaryPathName As String, _
      ByVal lpLoadOrderGroup As String, ByVal lpdwTagId As String, _
      ByVal lpDependencies As String, ByVal lp As String, _
      ByVal lpPassword As String) As Long
   Private Declare Function DeleteService _
      Lib "advapi32.dll" (ByVal hService As Long) As Long
   Declare Function CloseServiceHandle _
      Lib "advapi32.dll" (ByVal hSCObject As Long) As Long
   Declare Function OpenService _
      Lib "advapi32.dll" Alias "OpenServiceA" _
      (ByVal hSCManager As Long, ByVal lpServiceName As String, _
      ByVal dwDesiredAccess As Long) As Long

   '** Change SERVICE_NAME as needed
   Private Const SERVICE_NAME As String = "MyService"

   Private hServiceStatus As Long
   Private ServiceStatus As SERVICE_STATUS

   Sub Main()
      Dim hSCManager As Long
      Dim hService As Long
      Dim ServiceTableEntry As SERVICE_TABLE_ENTRY
      Dim b As Boolean
      Dim cmd As String

      cmd = Trim(LCase(Command()))
      Select Case cmd
         Case "install"                      'Install service on machine
            hSCManager = OpenSCManager(vbNullString, vbNullString, _
                         SC_MANAGER_CREATE_SERVICE)
            hService = CreateService(hSCManager, SERVICE_NAME, _
                       SERVICE_NAME, SERVICE_ALL_ACCESS, _
                       SERVICE_WIN32_OWN_PROCESS, _
                       SERVICE_DEMAND_START, SERVICE_ERROR_NORMAL, _
                       App.Path &amp; "\" &amp; App.EXEName, vbNullString, _
                       vbNullString, vbNullString, vbNullString, _
                       vbNullString)
            CloseServiceHandle hService
            CloseServiceHandle hSCManager
         Case "uninstall"                   'Remove service from machine
            hSCManager = OpenSCManager(vbNullString, vbNullString, _
                         SC_MANAGER_CREATE_SERVICE)
            hService = OpenService(hSCManager, SERVICE_NAME, _
                       SERVICE_ALL_ACCESS)
            DeleteService hService
            CloseServiceHandle hService
            CloseServiceHandle hSCManager
         Case Else                                    'Start the service
            ServiceTableEntry.lpServiceName = SERVICE_NAME
            ServiceTableEntry.lpServiceProc = _
                                           FncPtr(AddressOf ServiceMain)
            b = StartServiceCtrlDispatcher(ServiceTableEntry)
      End Select
   End Sub

   Sub ServiceMain(ByVal dwArgc As Long, ByVal lpszArgv As Long)
      Dim b As Boolean

      'Set initial state
      ServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS
      ServiceStatus.dwCurrentState = SERVICE_START_PENDING
      ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP _
                                      Or SERVICE_ACCEPT_PAUSE_CONTINUE _
                                      Or SERVICE_ACCEPT_SHUTDOWN
      ServiceStatus.dwWin32ExitCode = 0
      ServiceStatus.dwServiceSpecificExitCode = 0
      ServiceStatus.dwCheckPoint = 0
      ServiceStatus.dwWaitHint = 0

      hServiceStatus = RegisterServiceCtrlHandler(SERVICE_NAME, _
                       AddressOf Handler)
      ServiceStatus.dwCurrentState = SERVICE_START_PENDING
      b = SetServiceStatus(hServiceStatus, ServiceStatus)

      '** Do Initialization Here

      ServiceStatus.dwCurrentState = SERVICE_RUNNING
      b = SetServiceStatus(hServiceStatus, ServiceStatus)

      '** Perform tasks -- if none exit

      ''** If an error occurs the following should be used for shutting
      ''** down:
      ''   SetServerStatus SERVICE_STOP_PENDING
      ''   Clean up
      ''   SetServerStatus SERVICE_STOPPED
   End Sub

   Sub Handler(ByVal fdwControl As Long)
      Dim b As Boolean

      Select Case fdwControl
         Case SERVICE_CONTROL_PAUSE
            '** Do whatever it takes to pause here.
            ServiceStatus.dwCurrentState = SERVICE_PAUSED
         Case SERVICE_CONTROL_CONTINUE
            '** Do whatever it takes to continue here.
            ServiceStatus.dwCurrentState = SERVICE_RUNNING
         Case SERVICE_CONTROL_STOP
            ServiceStatus.dwWin32ExitCode = 0
            ServiceStatus.dwCurrentState = SERVICE_STOP_PENDING
            ServiceStatus.dwCheckPoint = 0
            ServiceStatus.dwWaitHint = 0     'Might want a time estimate
            b = SetServiceStatus(hServiceStatus, ServiceStatus)
            '** Do whatever it takes to stop here.
            ServiceStatus.dwCurrentState = SERVICE_STOPPED
         Case SERVICE_CONTROL_INTERROGATE
            'Fall through to send current status.
         Case Else
      End Select
      'Send current status.
      b = SetServiceStatus(hServiceStatus, ServiceStatus)
   End Sub

   Function FncPtr(ByVal fnp As Long) As Long
      FncPtr = fnp
   End Function

</PRE><h2>REFERENCES</h2>
 
<P>
For more information, see the following directory on MSDN:
<P>
<PRE>   \Platform SDK\Windows Base Services\Executables\Services

</PRE>For more detailed information on "Using MAPI from a Windows NT Service",
refer to:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/win32dev/mapi/mapiserv.htm">http://www.microsoft.com/win32dev/mapi/mapiserv.htm</A></B>

</PRE>For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WINNT/Q137890.htm">Q137890</A></B>
   TITLE     : HOWTO: Create A User-Defined Service
</PRE> 
<PRE>Keywords          : VB4ALL VB4WIN vb5all VBKBEnv VBKBProgramming
Version           : WINDOWS:4.0,5.0
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

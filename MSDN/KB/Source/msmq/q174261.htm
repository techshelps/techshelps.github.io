

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: MqPers.exe Sending Persistent COM Objects Using MSMQ in C+ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174261">
<META NAME="KBModify" CONTENT="1998/03/06">
<META NAME="KBCreate" CONTENT="1997/09/23">
<META NAME="Keywords" CONTENT="MQVC">
<META NAME="KBArea" CONTENT="Support; KB; msmq">
<META NAME="Description" CONTENT="  With Microsoft Message Queuing Server it's possible to send the state of COM objects supporting the IPersistStream or IPersistStorage interface. This article discusses what is necessary to take advantage of this feature using Visual C++ and ATL.  M...">
<META NAME="Product" CONTENT="msmq">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBC9,QBC8,QANO,QALS,QBBS,QAH6,QBFY,QAEV,QAHV,QBXT,QA5V,QAIB,QABC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: MqPers.exe Sending Persistent COM Objects Using MSMQ in C+</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174261</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Message Queue Server version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With Microsoft Message Queuing Server it's possible to send the state of
COM objects supporting the IPersistStream or IPersistStorage interface.
This article discusses what is necessary to take advantage of this feature
using Visual C++ and ATL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/MQPers.exe">MQPers.exe</A> <I>(size: 71772 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>Designing the Object Whose State Will Be Sent Over a Queue
 
<P>
The sample has two ActiveX components, Point and Line, which are
implemented using ATL and Visual C++. In addition to the code generated by
the ATL wizard, some additional lines have to be added for IPersistStream
implementation. An object that implements IPersistStream is ready for
sending its state over a MSMQ's queue.
<P>
<P><h3>Sending the Objects State Over the Queue</h3>
 
<P>
We use the #import directive in Visual C++ to manipulate the MSQM COM and
the Point and Line objects. For additional information on how to initialize
OLE when using the #import directive, please see the following article in
the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ADOBJ/Q169496.htm">Q169496</A></B>
   TITLE     : INFO: Using ActiveX Data Objects (ADO) via #import in VC++"

</PRE>The following code shows the declaration for the various ActiveX components
used. The data types are defined in the compiler generated files Mqoa.tlh,
Mqoa.tli, GraphObj.tlh, and GraphObj.tli:
<P>
<PRE>   // For these ActiveX components we need only smart interface pointer
   IMSMQQueueInfosPtr   pQueueInfos;
   IMSMQQueueInfoPtr      pQueueInfo;
   IMSMQQueuePtr      pQueue;
   IUnknownPtr      pIUnknown;

   // Instantiate the following ActiveX components
   IMSMQQueryPtr      pQuery(__uuidof(MSMQQuery));
   IMSMQMessagePtr      pMessage(__uuidof(MSMQMessage));
   ILinePtr         pLine(__uuidof(Line));
   IPointPtr         pPoint(__uuidof(Point));

</PRE>Sending object state requires a pointer to the IUnknown interface. The
MSMQMessage component uses this interface to ask the object for the
IPersistStream interface. The object's IUnknown interface pointer must be
stored in a VARIANT and could then be assigned to the body property of the
MSMQMessage object:
<P>
<PRE>   ...

   if (n == 1) {
   // Initialize point object
      pPoint-&gt;x = 8;
      pPoint-&gt;y = 9;

       // The message body gets the IUnknown pointer
       pMessage-&gt;Body = static_cast&lt;IUnknown*&gt;(pPoint);

   } else {

      ...

   }

   pMessage-&gt;Send(pQueue);

   ...

</PRE><h3>Receiving the Objects State from the Queue</h3>
 
<P>
When an MSMQMessage instructs an ActiveX component to save its state to a
stream, it also asks the component to save its CLSID to the stream. When
receiving an object state, this enables the Microsoft Message Queue Server
to instantiate the ActiveX component belonging to the transmitted CLSID.
<P>
The message body property of the received message actually is a VARIANT
containing an IUnknown pointer to the interface of newly created object.
Now it's up to the program to determine which object state was received and
which object was created. One way to do this is to ask the IUnknown for
ILine or the IPoint interface.
<P>
<PRE>   ...

   // Get the next message
   pMessage = pQueue-&gt;Receive();

   IPointPtr      pPoint((IUnknown*)pMessage-&gt;Body);

   // Check if it's a Point object
   if (pPoint != NULL) {
         cout &lt;&lt; "\nGot a Point Object: " &lt;&lt; pPoint-&gt;x &lt;&lt; "  " &lt;&lt; \
   pPoint-&gt;y &lt;&lt; "\n";

   }
   else {
      ILinePtr   pLine((IUnknown*)pMessage-&gt;Body);

      // Check if it's a Line object
      if (pLine != NULL) {
   cout &lt;&lt; "\nGot a Line Object: " &lt;&lt; pLine-&gt;x1 &lt;&lt; " "
   &lt;&lt;  \       pLine-&gt;y1 &lt;&lt; " " &lt;&lt; pLine-&gt;x2 &lt;&lt; " " &lt;&lt; pLine-&gt;y2 &lt;&lt; "\n";
      }
      else
         cout &lt;&lt; "\nUnknown Object !!!\n";
   }
   pQueue-&gt;Close();

   ...

</PRE>The complete sample source is provided. To compile the project you need
Visual C++ 5.0
<P>
<P><h2>REFERENCES</h2>
 
<P>
MSMQ Online SDK help file
<P>
(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
Michael Zill,
Microsoft Corporation
<P>
 
<PRE>Keywords          : MQVC
Version           : WINNT:1.0
Platform          : winnt
Issue type        : kbfile
Solution Type     : kbsample</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using MSMQ Within an MTS Component in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175726">
<META NAME="KBModify" CONTENT="1997/11/11">
<META NAME="KBCreate" CONTENT="1997/10/27">
<META NAME="Keywords" CONTENT="kbcode MQProg MQVB">
<META NAME="KBArea" CONTENT="Support; KB; msmq">
<META NAME="Description" CONTENT="  This article describes using Microsoft Message Queue Server (MSMQ) from within Microsoft Transaction Server (MTS) components written with Visual Basic. The two MSMQ transactional operations available are the Message Send and Receive operations.  MS...">
<META NAME="Product" CONTENT="msmq">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAY5,QAJG,QAH6,QBXJ,QBXS,QAEV,QBVV,QANF,QAH4,QAPN,QAYC,QATX,QAY2,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using MSMQ Within an MTS Component in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175726</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Message Queue Server version 1.0
<LI>Microsoft Transaction Server 1.0
<LI>Microsoft Visual Basic Standard and Enterprise Editions for Windows,
   version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes using Microsoft Message Queue Server (MSMQ) from
within Microsoft Transaction Server (MTS) components written with Visual
Basic. The two MSMQ transactional operations available are the Message Send
and Receive operations.
<P>
MSMQ send operations can be included in MTS transactions. This action
causes the Send operation to be either committed or rolled back along with
the MTS transaction. As a result the message is not actually sent until the
transaction commits. To include the Send operation in a transaction, use
the MQ_MTS_TRANSACTION constant as the Transaction parameter of the
MSMQMessage.Send method from within a transactional MTS component. MSMQ
enlists the Send operation in the MTS transaction. The destination queue
must be a transactional queue. Note that MQ_MTS_TRANSACTION is the default
value of the optional Transaction parameter on Send/Receive; thus, it can
be omitted to obtain MTS transaction behavior.
<P>
Transactional messages can be sent only to a transactional destination
queue. If the MTS component is not participating in a transaction, the Send
operation described above fails. This is because the message would be
non-transactional, and you cannot send a nontransactional message to a
transactional queue. You cannot always predict whether a component will
participate in a transaction. Therefore, it is important to verify that the
component is participating in the transaction and to use MQ_MTS_TRANSACTION
in the MSMQMessage.Send to a transactional queue only if it is
participating. If it is not participating, use the MQ_NO_TRANSACTION
or MQ_SINGLE_MESSAGE constant with the appropriate queue type.
<P>
The component is participating in the transaction if it is marked as
"Requires [new] Transactions" in MTS Explorer. The component is not
participating in the transaction if it is marked as "Does Not Support
Transactions."
<P>
When the MTS component is marked as "Supports Transaction," it also
participates in a transaction if its caller participates. To send from
such a component, you must dynamically check for the current transaction
existence (use method ObjectContext.IsInTransaction)and use an appropriate
Transaction flag and destination queue.
<P>
For a local MSMQ transactional queue receive operation, specifying
MQ_MTS_TRANSACTION works regardless of whether the component is
transactional or not. The receive operation is included in a transaction
only if the component is transactional.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Visual Basic code demonstrates sending an MSMQ message
containing a string from within an MTS component. The MTS context object is
used to commit or abort the transaction. The context object's
IsInTransaction() method is used to determine whether or not the component
is transactional.
<P>
<PRE>   Public Function MQSend(strSend As String) As String

   Dim qinfoSend As New MSMQQueueInfo
   Dim qSend As MSMQQueue
   Dim qmesMessage As New MSMQMessage

   On Error GoTo SendError

   Dim ctxObject As ObjectContext
   Set ctxObject = GetObjectContext

   ' Add code for database updates if needed.

   qinfoSend.PathName = ".\Localx"
   Set qSend = qinfoSend.Open(MQ_SEND_ACCESS, MQ_DENY_NONE)

   qmesMessage.Body = strSend
   qmesMessage.Label = "VB Sample Message"

   'Since you must send to a transactional MSMQ queue in order to
   'participate in a transaction, you must check to see if the component
   'is transactional and be sure to make the send operation
   'transactional in either case.

   If (ctxObject.IsInTransaction) Then
     qmesMessage.Send qSend, MQ_MTS_TRANSACTION
   Else
     qmesMessage.Send qSend, MQ_SINGLE_MESSAGE
   End If
   qSend.Close

   ctxObject.SetComplete
   Set ctxObject = Nothing
   Exit Function

   SendError:
   ctxObject.SetAbort
   Set ctxObject = Nothing

   MQSend = "SendFailure"
   End Function

</PRE>The following Visual Basic code demonstrates receiving an MSMQ message
containing a string from within an MTS component. The MTS context object is
used to commit or abort the transaction.
<P>
<PRE>   Public Function MQReceive(strReceive As String) As String

   Dim qinfoRcv As New MSMQQueueInfo
   Dim qRcv As MSMQQueue
   Dim qmesMessage As MSMQMessage

   On Error GoTo RcvError

   Dim ctxObject As ObjectContext
   Set ctxObject = GetObjectContext

   ' Add code for database updates if needed.

   qinfoRcv.PathName = ".\Localx"
   Set qRcv = qinfoRcv.Open(MQ_RECEIVE_ACCESS, MQ_DENY_NONE)

   Set qmesMessage = qRcv.Receive(Transaction:=MQ_MTS_TRANSACTION,
   ReceiveTimeout:=0)

   ' or since MQ_MTS_TRANSACTION is the default, simply:
   ' Set qmesMessage = qRcv.Receive(ReceiveTimeout:=0)

   If (Not qmesMessage Is Nothing) Then
     strReceive = qmesMessage.Body
     MQReceive = "MessageReceived"
   Else
     MQReceive = "NoMessage"
   End If
   qRcv.Close

   ctxObject.SetComplete
   Set ctxObject = Nothing
   Exit Function

   RcvError:
   ctxObject.SetAbort
   Set ctxObject = Nothing

   MQReceive = "ReceiveFailure"
   End Function

</PRE><h2>REFERENCES</h2>
 
<P>
For more details on using a single queue for send/receive and to avoid
queue and component type mismatch, see the following Knowledge Base
article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../msmq/Q174387.htm">Q174387</A></B>
   TITLE     : "INFO: Using a Single MSMQ Queue for an MTS Component"
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: viper falcon<BR>
Keywords          : kbcode MQProg MQVB<BR>
Version           : WINDOWS:5.0; WINNT:1.0<BR>
Platform          : WINDOWS winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

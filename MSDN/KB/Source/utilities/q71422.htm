

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Maintaining a Library with NMAKE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71422 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/04/17">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  NMAKE provides several features that ease the process of maintaining a library by incrementally updating only the modules that change. With the $? special macro and macro substitutions, the process involves only one call to LIB (the library mainten...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBHQ,QAHH,QAPN,QAIB,QBXT,QA5V,QAPF,QBFY,QAGI,QACI,QAE1,QBVV,QAW6,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Maintaining a Library with NMAKE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71422 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.01 1.1x 1.20 1.30 1.40 | 1.01 1.1x 1.21
<PRE>MS-DOS                   | OS/2
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft NMAKE Utility for MS-DOS, versions 1.01, 1.11, 1.12, 1.13,
   1.2, 1.3, and 1.4
<LI>Microsoft NMAKE Utility for OS/2, versions 1.01, 1.11, 1.12, 1.13,
   and 1.21
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
NMAKE provides several features that ease the process of maintaining a
library by incrementally updating only the modules that change. With
the $? special macro and macro substitutions, the process involves
only one call to LIB (the library maintenance utility). The text below
presents makefiles that illustrate this procedure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample makefiles below keep MYLIB.LIB up to date with respect to
the four object files listed in the OBJS macro. These object files can
be based on C or assembly language source files. You can extend the
list of source-file types the makefile supports by adding the
appropriate inference rules to the description file.
<P>
Sample makefile 1 includes the following line to maintain the library:
<P>
<PRE>   LIB MYLIB.LIB -+$(?: =-+);

</PRE>The $? macro expands to the list of all dependents that are out-of-
date with respect to the target file. The "$(?: =-+)" part of the
command-line is a macro substitution to be performed on the $? macro.
This substitution instructs NMAKE expand $? to the list of out-of-date
dependents, but then replace all spaces in the expanded list with the
two-character pair "-+".
<P>
For example, assume that only MOD1.OBJ, MOD3.OBJ, and MOD4.OBJ are
each out-of-date with respect to MYLIB.LIB. The $? macro expands to
the following:
<P>
<PRE>   MOD1.OBJ MOD3.OBJ MOD4.OBJ

</PRE>Therefore, $(?: =-+) actually causes the macro to be expanded with
substitution as follows:
<P>
<PRE>   MOD1.OBJ-+MOD3.OBJ-+MOD4.OBJ

</PRE>With the remainder of the command line included for reference, the
NMAKE executes the following command line:
<P>
<PRE>   LIB MYLIB.LIB -+MOD1.OBJ-+MOD3.OBJ-+MOD4.OBJ;

</PRE>Note that the first time you add a module to the library with this
command, LIB generates a "U4155: module not in library" warning to
indicate that LIB is unable to replace a module because it is not
found in the library. You can ignore the warning because LIB simply
adds the module to the library.
<P>
This method works correctly as long as the OBJS macro does not contain
too many modules. If the macro expansion causes the command line to
exceed the MS-DOS or OS/2 command-line length limit (128 or 255
characters, respectively), the LIB call fails. If your library
contains enough modules such that this may occur, then you should use
the NMAKE in-line file capability to generate a response file.
<P>
Sample makefile 2 below demonstrates the response file method. The
makefile creates a response file named MYLIB.LRF that contains the
lines of the makefile between the double angle bracket (&lt;&lt;) tokens.
The contents of the makefile reflect a macro substitution that is very
similar to the method demonstrated above. The major difference is as
follows: an input line in the response file is required for each LIB
prompt. Therefore, the macro substitution must place newline
characters into the file. The following command does this:
<P>
-+$(?: = &amp;^
-+);
<P>
This command instructs NMAKE to expand the macro for out-of-date
dependents by replacing each space with a space, and ampersand (&amp;), a
newline and a "-+" character pair. The caret (^) instructs NMAKE to
interpret the next character literally, to place the newline character
that follows the caret into the macro. (Because you type ENTER to
place a newline character into the file, the end of the macro
substitution must appear on the following line.)
<P>
Therefore, given the same scenario as above, if MOD1.OBJ, MOD3.OBJ,
and MOD4.OBJ are out-of-date with respect to MYLIB.LIB, the $? macro
expands to the following:
<P>
<PRE>   -+MOD1.OBJ &amp;
   -+MOD3.OBJ &amp;
   -+MOD4.OBJ;

</PRE>With this method, you can maintain any number of object files with one
call to LIB.
<P>
Note: NMAKE version 1.1 (provided with Microsoft C versions 6.0 and
6.0a) does not expand the $? macro correctly unless the target-
dependency line uses the multiple dependency operator, a double colon
(::). To work around this problem, modify the makefile to specify a
double colon instead of a single colon for the dependency that
involves the library.
<P>
For more information on macro substitution or in-line files, please
refer to the NMAKE documentation or online help provided with your
compiler. For more information on response files, please refer to the
LIB or LINK documentation or online help.
<P>
<P><h3>Sample NMAKE Makefile 1</h3>
 
<P>
# The OBJS macro lists the object files to keep in the library.
<P>
OBJS = MOD1.OBJ MOD2.OBJ MOD3.OBJ MOD4.OBJ
<P>
.c.obj:
<PRE>    cl /c $?

</PRE>.asm.obj:
<PRE>    masm $?;

</PRE>mylib.lib : $(OBJS)
<PRE>    LIB MYLIB.LIB -+$(?: =-+);


</PRE><h3>Sample NMAKE Makefile 2</h3>
 
<P>
# The OBJS macro lists the object files to keep in the library.
<P>
OBJS = MOD1.OBJ MOD2.OBJ MOD3.OBJ MOD4.OBJ
<P>
.c.obj:
<PRE>    cl /c $?

</PRE>.asm.obj:
<PRE>    masm $?;

</PRE>mylib.lib : $(OBJS)
<PRE>    LIB $*.LIB @&lt;&lt;MYLIB.LRF
</PRE>-+$(?: = &amp;^
-+);
&lt;&lt;KEEP
<P>
# Note: The word "KEEP" after the &lt;&lt; token is optional; it prevents
# NMAKE from deleting the in-line file that it creates. This also
# allows you to view MYLIB.LRF (after you finish running NMAKE) if you
# want to verify what NMAKE writes into the response file. By default,
# NMAKE deletes all in-line files before it terminates.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf 1.10 1.20 1.30 1.40<BR>
KBCategory: kbtool<BR>
KBSubcategory: NmakeIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>"Weak External" Records: Description, Use, and Errors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q72651 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/06/04">
<META NAME="Keywords" CONTENT="kb16bitonly LinkIss kbcode kberrmsg kbtool">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  A  weak external  is a special type of external reference that allows the linker to fix up an address with an alternate symbol. By using a weak external record, a library developer can provide a method for the linker to use an alternate symbol if t...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QA5V,QAWM,QAMO,QAMN,QAKR,QAGI,QAPN,QABA,QBVV,QAY5,QAJH,QAHT,QBSU,QAE2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>"Weak External" Records: Description, Use, and Errors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q72651 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.05 5.1x 5.2x 5.3x 5.50 5.60 | 5.05 5.10 5.11 5.13 5.15
<PRE>MS-DOS                        | OS/2
</PRE>kbtool kbcode kberrmsg kberrmsg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft LINK for MS-DOS, versions 5.05, 5.1x, 5.2x, 5.3x,
   5.5, and 5.6
<LI>Microsoft LINK for OS/2, versions 5.05, 5.1, 5.11, 5.13, and 5.15
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A "weak external" is a special type of external reference that allows
the linker to fix up an address with an alternate symbol. By using a
weak external record, a library developer can provide a method for the
linker to use an alternate symbol if the code does not make any other
references to the module in which the primary symbol resides.
<P>
The Microsoft Incremental Linker (ILINK) does not support weak
external records and returns the following message when it encounters
one:
<P>
<PRE>   fatal error L1246: weak externals not supported

</PRE>To work around this situation, perform a full link.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Macro Assembler (MASM) versions 6.0, 6.0a, 6.0b, and 6.1
support weak externals. When an application defines an EXTRN (or EXTERN in
MASM 6.0 and above) you can also specify an alternate symbol. MASM accepts
the alternate ID and creates in the object file both a standard EXTDEF
record for the primary symbol and a COMENT record for the alternate symbol.
<P>
The COMENT record instructs LINK and the Microsoft Library utility
(LIB) to treat the alternate symbol as a "weak" external reference. If
the object file does not contain any other references to the module in
which the standard symbol resides, LINK uses the weak external address
to fix up the reference.
<P>
For example, some housekeeping functions for an application are
developed in assembler and placed into a library. Another function
calls the housekeeping functions, as in the following example:
<P>
<PRE>   EXTRN _InitHeap:near   ; Use EXTERN in MASM 6.0 and above
   EXTRN _InitFile:near
   EXTRN _InitKbd:near

   InitLib PROC NEAR
      call _InitHeap
      call _InitFile
      call _InitKbd

   InitLib ENDP

</PRE>Each of the functions (_InitHeap, _InitFile, and _InitKbd) resides in
a module that defines the functions and symbols each subsystem uses.
For example, the following LIB listing shows the contents of the
module in which _InitKbd resides:
<P>
<PRE>   KbdStuff          Offset: 00000010H  Code and data size: 915H
     _InitKbd          _ReadKey          _SendKey          _KeyBuffer
     _FlushKey         _ScanCode         _CharCode         _BiosState
     _Int16Handler     _CtrlBrkStat      _EchoState

</PRE>If the program uses any function in the KbdStuff module, LINK places
the entire module into the executable file. If the program does not
use any of the other modules in KbdStuff, the _InitKbd function itself
may not be required. Therefore, by using a regular EXTRN declaration,
dead code (that is, the remainder of the KbdStuff module) is added to
the executable file along with some executed code (_InitKbd) that is
not necessary.
<P>
To avoid these effects, change this same example to use a weak
external. Modify the EXTRN statement for _InitKbd to specify an
alternate symbol, as follows:
<P>
<PRE>   EXTRN _InitKbd(_EmptyInit):near

</PRE>The _EmptyInit code is as follows:
<P>
<PRE>   _EmptyInit PROC NEAR

      ret

   _EmptyInit ENDP

</PRE>LINK can use the weak external _EmptyInit to resolve the reference to
_InitKbd if the program does not refer to any of the other symbols in
the KbdStuff module. If the program refers to some other symbols, LINK
uses the original _InitKbd symbol.
<P>
The same logic applies to data symbols. For example, an application
can set a flag to execute a given code path based on other modules
that are linked into the application. As above, specify the default
and alternate resolutions in the EXTRN statement and assemble the
code. The linker uses the appropriate symbol.
<P>
However, if an application defines the same alternate reference with
two different primary references in two separate modules, LINK
generates the following message and LINK uses the default reference
from the second module in both cases.
<P>
<PRE>   warning L4067: changing default resolution for weak external
                  'symbol' from 'oldresolution' to 'newresolution'

</PRE>The following code example demonstrates this situation:
<P>
<P><h3>MOD1.ASM</h3>
 
<P>
EXTRN Primary1(Alternate):near
<P>
<P><h3>MOD2.ASM</h3>
 
<P>
EXTRN Primary2(Alternate):near
<P>
For more information on the EXTRN directive, refer to the online help
and to chapter 8 of the Microsoft Macro Assembler "Programmer's Guide"
manual for versions 6.0 and 6.1.
<P>
For more information on the weak external (WKEXT) object record
format, refer to the Microsoft "Relocatable Object Module Format".
<P>
An application note is available that describes the Microsoft
relocatable object module format in detail.
<P>
In the United States, to obtain the "Microsoft Relocatable Object
Module Format" application note, call Microsoft Product Support
Services at (206) 454-2030. Outside the United States, contact the
Microsoft subsidiary for your area. To locate your subsidiary, go to the
Microsoft Web site <B><A HREF="http://www.microsoft.com/worldwide/default.htm">http://www.microsoft.com/worldwide/default.htm</A></B>
<P>
This application note is also available in the Microsoft Software Library
and can be found by searching on the word SS0288, the Q number of this
article, or S13472. SS0288 was archived using the PKware file-compression
utility.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf 5.05 5.10 5.11 5.13 5.15 5.20 5.30<BR>
5.31.009 5.50 OMF<BR>
KBCategory: kbtool kbcode kberrmsg kberrmsg<BR>
KBSubcategory: LinkIss<BR>
Keywords            : kb16bitonly LinkIss kbcode kberrmsg kbtool<BR>
Version             : 5.05 5.1x 5.2x 5.3x 5.50 5.60 |<BR>
Platform            : MS-DOS OS/2<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

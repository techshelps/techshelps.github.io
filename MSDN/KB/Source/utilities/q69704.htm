

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Write Advisor Library Callback Routines Under MS-DOS </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69704 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/02/27">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  The Microsoft Professional Advisor Library version 1.0 includes a sample program (MHTEST.EXE) that demonstrates basic use of the help system API. However, this program example was written for OS/2 and there is no MS-DOS example included in the pack...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPF,QAY5,QAH4,QAUD,QBV8,QBHQ,QAB9,QBW6,QAJH,QBFY,QAY2,QAH6,QA8T,QA4Q,QAMA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Write Advisor Library Callback Routines Under MS-DOS</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69704 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
MS-DOS
kbtool kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft HELPMAKE Utility for MS-DOS, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Professional Advisor Library version 1.0 includes a
sample program (MHTEST.EXE) that demonstrates basic use of the help
system API. However, this program example was written for OS/2 and
there is no MS-DOS example included in the package. The sample code
provided below demonstrates how to use the help system functions
under MS-DOS.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The MHTEST.EXE example is built from two source files, HTEST.C and
HELPBACK.C. HTEST.C is a sample front-end application that interfaces
with the library functions. HELPBACK.C is a sample set of call-back
functions, which the library functions require you to have in your
code. Both of these files are written for OS/2 (utilizing OS/2 API
calls) and will not compile and link explicitly for MS-DOS; however, the
program will run under either MS-DOS or OS/2 if it is compiled and linked
for OS/2 and then bound for MS-DOS.
<P>
If an unbound, MS-DOS-only version of the program is desired, the sample
code below illustrates how to write MS-DOS-specific versions of the seven
call-back functions needed by the library. The nature of these
call-back functions is best described in the following paragraph from
the article "Adding Hypertext-Based Help to Your Application Using the
Microsoft Help System" from the "Microsoft Systems Journal," May 1990:
<P>
<PRE>   If you are developing an MS-DOS application, you must provide some
   call-back functions. These call-back functions are involved with
   opening and closing files, reading data from a file, allocating and
   deallocating memory, and locking and unlocking memory. The help
   library imposes this burden upon the programmer because of the
   limited resources available under MS-DOS. If the help engine were to
   use the standard malloc or _dos_allocmem functions to obtain memory
   for itself, it would probably find itself running out of memory if
   it were embedded into a large program, or possibly conflicting with
   the program's own memory management scheme. For example, many
   large programs manage their memory using a virtual memory
   management scheme. By forcing the application to provide call-back
   functions to control memory allocation, the help engine never
   intrudes on the application's own memory management scheme.

</PRE>It is important to note that the sample routines provided below are
only simple templates for the type of functions needed; they do not
include any error checking or error-handling capabilities. The sample
routines are written for use with the large and compact memory models
and will require some minor modifications to avoid compiler warnings
under the small or medium models.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /AL
*/

#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;io.h&gt;
#include &lt;sys\types.h&gt;
#include &lt;sys\stat.h&gt;
#include &lt;dos.h&gt;

#include "help.h"

int pascal far OpenFileOnPath(char far *file_name, int mode)
</PRE>{
<PRE>   return(open(file_name, O_RDONLY | O_BINARY));
</PRE>}
<P>
<PRE>void pascal far HelpCloseFile(int fh)
</PRE>{
<PRE>   close(fh);
</PRE>}
<P>
unsigned long pascal far ReadHelpFile(unsigned fh, unsigned long fpos,
<PRE>                                   char far *pdest, unsigned short cb)
{
   unsigned long cRet = 0;

   if(pdest)
      {
      if(lseek(fh, fpos, SEEK_SET) != -1L)
          cRet = (unsigned long)read(fh, pdest, cb);
      }
   else
      cRet = (unsigned long)filelength(fh);

   return(cRet);
</PRE>}
<P>
unsigned pascal far HelpAlloc(unsigned mem_size)
{
<PRE>   unsigned sel;

   _dos_allocmem((mem_size / 16) + 1, &amp;sel);
   return(sel);
</PRE>}
<P>
<PRE>void pascal far HelpDealloc(unsigned seg)
</PRE>{
<PRE>   if(seg)
      _dos_freemem(seg);
</PRE>}
<P>
<PRE>void far * pascal far HelpLock(unsigned seg)
</PRE>{
<PRE>   return((char far *) (((unsigned long)seg) &lt;&lt; 16) );
</PRE>}
<P>
<PRE>void pascal far HelpUnlock(unsigned seg)
</PRE>{
<PRE>   seg;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf 1.00 helpmake callback  TlsMisc<BR>
KBCategory: kbtool kbcode<BR>
KBSubcategory: TlsMisc<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

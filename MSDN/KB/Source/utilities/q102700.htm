

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: No String in EXE from #pragma Comment(exestr </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102700">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/08/08">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  An attempt to use #pragma comment to place a text string into an executable module fails.  RESOLUTION  The sample code below demonstrates two methods to work around this problem. The first method declares a character array in the application that c...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAMB,QAY4,QAPN,QAH4,QACI,QAR4,QDL9,QBWO,QBWN,QAJH,QBVV,QAKP,QBWP,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: No String in EXE from #pragma Comment(exestr</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102700</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.50
MS-DOS
kbtool kbcode kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft LINK for MS-DOS, version 5.5
<LI>Microsoft C/C++ for MS-DOS, version 8.0, which is included with
   Microsoft Visual C++ for Windows, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An attempt to use #pragma comment to place a text string into an
executable module fails.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The sample code below demonstrates two methods to work around this
problem. The first method declares a character array in the
application that contains the string to embed in the file. This method
places the string into the application's data segment. The second
method is similar to the first except that the compiler places the
string into the application's code segment, and therefore it does not
consume space in the data segment. Either of these methods loads the
string into memory when the application runs.
<P>
A third method is available to applications developed for the
Microsoft Windows operating system. Place the string into a
STRINGTABLE resource. If desired, you can specify the LOADONCALL
attribute so the string is not loaded into memory until the
application requires it.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in Microsoft LINK
version 5.5 for MS-DOS. This problem was corrected in Microsoft
LINK version 5.6 for MS-DOS. This is not a problem in Microsoft LINK
version 1.0 for Windows NT.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The #pragma comment(exestr, &lt;string&gt;) statement places &lt;string&gt; into
the object file. LINK places the string into the executable file; you
can find it with an application that searches executable files for
strings. However, the loader does not load the string into memory. You
can use comment strings to store a version number or similar
information into your executable file.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compiler options needed: none
 */

</PRE>#pragma comment(exestr, "Comment EXESTR")
<P>
<PRE>/*
 * Other methods
 * char data_exestr[] = "Data EXESTR";
 * char __based(__segname("_CODE"))code_exestr[] = "Code EXESTR";
 */

void main()
</PRE>{
}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.50 8.00<BR>
KBCategory: kbtool kbcode kbbuglist kbfixlist<BR>
KBSubcatergory: LinkIss<BR>
Keywords          : kb16bitonly<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

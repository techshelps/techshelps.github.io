

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use Source Profiler to Profile Dynamic-Link Libraries </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q179269">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1998/01/13">
<META NAME="Keywords" CONTENT="TlsMisc kbcode">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  The Microsoft Visual C++ Help discusses two ways to profile a dynamic-link library (DLL), but it does not indicate when to use each example. This article describes a general-purpose method of profiling DLLs.  MORE INFORMATION  The first part of the...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDJ2,QDNN,QASB,QA9N,QBVV,QAPF,QBFY,QA56,QA55,QAPN,QBW4,QBHQ,QAUR,QAGI,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use Source Profiler to Profile Dynamic-Link Libraries</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q179269</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Source Profiler included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Editions, versions 2.0, 2.1, 2.2, 4.0,
      4.0a, 4.1, 4.2, 4.2b, 5.0, 5.0sp1, 5.0sp2, 5.0sp3
</PRE><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Visual C++ Help discusses two ways to profile a dynamic-link
library (DLL), but it does not indicate when to use each example. This
article describes a general-purpose method of profiling DLLs.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The first part of the Help on profiling a DLL describes the use of self-
profiling DLLs, using the PREP option /OM. Self-profiling DLLs are not
necessary, except when profiling DLLs that are dynamically loaded using the
LoadLibrary instruction. Use the following batch file example (name it
Profdll.bat) to profile a single DLL, accessed with LoadLibrary.
Profdll.bat profiles a DLL with the assumption that the .exe file has not
been prepared for profiling.
<P>
<P><h3>Sample Batch File</h3>
 
<P>
<PRE>   COPY %1.dll save
   PREP /OM %1.dll
   COPY %1._ll %1.dll
   PROFILE /I %1 /O %1 %2 %3 %4 %5 %6
   COPY save %1.dll
   PREP /M %1
   PLIST %1

</PRE>If you have a main program (for example, Hearts.exe) that uses a DLL (for
example, Cards.dll) and you want to profile only the DLL, you can run the
batch file as:
<P>
<PRE>   PROFDLL cards hearts

</PRE>Note that the command above generates a warning message that the main
program has not been prepared for profiling. You can ignore this message.
<P>
The second example batch file in the Help shows how to profile multiple
DLLs as well as the calling executable. This example profiles an executable
called "wingame" and two DLLs called "aliens" and "hiscore":
<P>
<P><h3>Sample Batch File</h3>
 
<P>
<PRE>   PREP /OM /FC wingame.exe aliens.dll hiscore.dll
   PROFILE wingame.exe
   PREP /M  wingame
   PLIST wingame &gt;wingame.out

</PRE>This method is most effective when the DLLs are loaded at run time, through
the use of an import library. The Source Profiler, however, does not report
any data for a dynamically loaded DLL if you use function profiling. The
maximum number of DLLs that can be profiled this way is seven. This limit
has been increased to fifteen in Visual C++ version 5.0.
<P>
When you combine import DLLs and LoadLibrary DLLs in a single executable,
the Help is unclear about how to handle this. The first method
provides information about a single DLL, and the second method does not
work for all types of profiling.
<P>
You must combine these two methods when considering larger, more complex
projects. First, create self-profiling objects for all items in the
profile:
<P>
<PRE>   PREP /OM /FT myfile.exe import1.dll loadlib1.dll ...

</PRE>where "myfile.exe" is the executable program, "import1.dll" is a DLL called
through an import library, and "loadlib1.dll" is a DLL called through the
LoadLibrary and GetProcAddress functions.
<P>
Next, use the first method and copy the _LL files over all DLLs loaded
using LoadLibrary:
<P>
<PRE>   copy loadlib1.dll loadlib1.tmp
   copy loadlib1._ll loadlib1.dll

</PRE>The rest of the procedure is the same as for most profiles:
<P>
<PRE>   PROFILE myfile.exe
   PREP /M myfile
   PLIST myfile &gt;&gt; profile.out

</PRE>Putting it all together, you can generalize the process as follows:

<OL><P><LI>PREP /OM /[profiling type] exename dllname1 dllname2 ...
   where [profiling type] is either /FT, /FC, /FV, /LC, or /LV

<P><LI>If a DLL is loaded using LoadLibrary, copy the _LL file over the
   existing .dll file. You should backup the original DLL, just in case:
<P>
<P><PRE>      copy dllname.dll dllname.tmp
      copy dllname._ll dllname.dll
</PRE><P>
   where "dllname" is the name of the DLL accessed using LoadLibrary. Note
   that the _LL file is not created for /LC and /LV profiling types.

<P><LI>Run the remaining PROFILE, PREP, and PLIST steps as outlined above and
   in the Visual C++ Help.
<P>
</OL>You should not try to profile a DLL that may have been loaded at run time
and dynamically in the same application.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++, version 5.0; Profiling DLLs from a Batch File; Profiling
Multiple .dll and .exe Files
<P>
URL: mk:@ivt:vccore/F33/D36/S4D19E.HTM
URL: mk:@ivt:vccore/F33/D36/S4D19F.HTM
<P>
Visual C++, versions 2.0, 2.1, 2.2, 4.0, 4.0a, 4.1, 4.2, 4.2b; search on:
“Profiling DLLs from a batch file”; “Profiling multiple .dll and .exe
files”
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Profile.dll _LL _XE line profiling<BR>
Keywords          : TlsMisc kbcode<BR>
Version           : WINNT:2.0,2.1,2.2,4.0,4.0a,4.1,4.2,4.2b,5.0,5.0sp1,5.0sp2,5.0sp3<BR>
Platform          : winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

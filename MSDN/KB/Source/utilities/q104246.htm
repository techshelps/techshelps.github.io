

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Causes of L2023 : Entry WEP : Export Imported </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104246">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1993/09/13">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  When building a dynamic-link library (DLL) with Visual C++, the following linker error can occur:     L2023 : entry WEP : export imported  CAUSE =====  This error is usually caused by linking with a third-party DLL's import library that publicly ex...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBHQ,QA3P,QBFY,QA56,QA55,QABI,QDL9,QBWQ,QBWO,QBWN,QAAP,QAEQ,QBVV,QAY2,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Causes of L2023 : Entry WEP : Export Imported</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104246</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.30 5.31.009 5.50 5.60
WINDOWS
kbtool kberrmsg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft LINK for MS-DOS, versions 5.3, 5.31.009, 5.5, and 5.6
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When building a dynamic-link library (DLL) with Visual C++, the
following linker error can occur:
<P>
<PRE>   L2023 : entry WEP : export imported

</PRE><h2>CAUSE</h2>
 
<P>
This error is usually caused by linking with a third-party DLL's
import library that publicly exports its WEP (Windows exit procedure)
routine.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Although removing the lines
<P>
<PRE>   EXPORTS
      WEP @1 RESIDENTNAME

</PRE>from your .DEF file may avoid the error, this method is not
recommended because there can be problems with Windows calling the WEP
(either your own or the WEP provided by the DLL run-time library) when
your DLL is unloaded.
<P>
As stated, the most common cause of this error is linking with another
DLL's import library that was built to publicly export a WEP function.
If you are linking your DLL with other third-party or in-house import
libraries, you may want to examine them closely. If some of these
import libraries are yours, you can modify the way they are built so
that they don't put their WEP routines into the import library.
<P>
Either of the following steps will cause a DLL's exported WEP not to
be added to its import library:

<UL><LI>Build the import library using the IMPLIB switch /NOWEP. The /NOWEP
   switch causes IMPLIB not to attempt to put a DLL's WEP function
   into the import library it is creating. This is the default when
   building a DLL with Visual C++ 1.0. This is described in
   IMPLIB.WRI, in the Visual C++ Tech Notes.
<P>
   -or-

<LI>In the DLL's .DEF file, specify the WEP as PRIVATE, using the
   following syntax:
<P>
<P><PRE>      EXPORTS
<PRE></PRE>         WEP @1 RESIDENTNAME PRIVATE

   This will cause the WEP of the DLL to be exported, but will make
   IMPLIB ignore it, so it shouldn't conflict with anything else. This
   is described in the Visual C++ MSCOPTS.HLP file, which can be
   reached from the Visual C++ Professional Edition's Integrated
   Development Environment (IDE) by selecting Help, Build Tools,
   Module-Definition File Statements, EXPORTS, PRIVATE.

</PRE></UL>If you do not have control over the way the other DLLs are built, then
you have a few other options:

<UL><LI>Attempt to obtain (from the DLL's developers) an import library
   without a publicly exported WEP.
<P>
   -or-

<LI>Use the IMPLIB utility with the /NOWEP switch on the DLL you are
   linking to, to create a new import library without a WEP in it. If
   you do this, first make a backup copy of the import library.
<P>
   -or-

<LI>Specify the WEP of the DLL you are building as PRIVATE, as described
   above. This will cause the WEP of THIS DLL to be ignored by IMPLIB,
   so it shouldn't conflict with anything else. This probably won't
   work around the L2023 error, however.
<P>
</UL>You should also make sure that you are linking with /NOE /NOD (no
extended dictionary and no default libraries). You should also be
linking your libraries in the following order:
<P>
<PRE>   Windows libraries, C run-time libraries, third-party DLLs

</PRE>This ensures that the correct WEP is pulled in from the Windows C
run-time libraries (libraries matching the pattern xDLLCEW.LIB).
<P>
NOTE: It is not recommended that you create your own WEP, rather than
exporting the default WEP. DLL termination code should be in an _WEP
routine, which the default WEP will call. This is described on page
119 and 120 of the Visual C++ 1.0 "Programming Techniques" manual, and
on page 27 and 28 of the Visual C++ 1.0 "C/C++ Version 7.0 Update"
manual.
<P>
If for some reason you must use your own WEP routine, you may want to
examine WEP.ASM in the \MSVC\SOURCE\WIN directory. This is the source
for the default WEP that is pulled in from the C run-time libraries.
In such a WEP, if your application is a C++ application, you need to
make sure to call all destructors of global class objects.
<P>
If you are creating a Microsoft Foundation Class (MFC) libraries
version 2.0 DLL, then you can override the CWinApp::ExitInstance()
member function to do your termination processing.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf 1.00 technote<BR>
KBCategory: kbtool kberrmsg<BR>
KBSubcategory: LinkIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Can't Export Symbols Differing Only by Leading Underscores </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172393">
<META NAME="KBModify" CONTENT="1997/08/06">
<META NAME="KBCreate" CONTENT="1997/08/05">
<META NAME="Keywords" CONTENT="LINKIss">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  When you are using the linker supplied with the Visual C++ compiler versions mentioned above to build a DLL and the following applies:  1. You export multiple symbols from a DLL.  2. The symbols differ only by the number of leading underscores or b...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAWN,QADF,QBFY,QBTC,QBCG,QDNN,QAG8,QAKC,QA56,QA55,QAUJ,QATM,QBV8,QA2O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Can't Export Symbols Differing Only by Leading Underscores</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172393</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Linker (LINK.EXE) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.0a, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you are using the linker supplied with the Visual C++ compiler
versions mentioned above to build a DLL and the following applies:

<OL><P><LI>You export multiple symbols from a DLL.

<P><LI>The symbols differ only by the number of leading underscores or by the
   number of leading question marks.

<P><LI>The first letter in the symbol is uppercase.

<P><LI>The symbols are located in an assembly source file.
<P>
</OL>then, the Visual C++ linker incorrectly matches some of the symbol names.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are several workarounds:

<OL><P><LI>Do not use leading underscores or leading question marks to
   differentiate between different symbols.
<P>
</OL>-or-

<OL><P><LI>Use Visual C or Visual C++ instead of assembly.
<P>
</OL>-or-

<OL><P><LI>Use aliases in the EXPORTS section of the .def file as shown below. The
   left-hand side of the "=" symbol is the name of the function that is
   exported by the DLL and an external application/DLL can call. The right-
   hand side is the symbol the linker will use to match during the link
   phase. Note the missing underscore on the right hand side symbol.
<P>
   EXPORTS
<PRE>          _symbol1=symbol1

   Use the following link command to build the DLL:

      link -dll  -out:MYDLL.LIB -def:MYDLL.DEF  MYDLL.OBJ

</PRE></OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code is used to demonstrate the third workaround. The
"-noentry" option is used for the linker in this sample because no entry
point function is defined for the DLL. The "-map" option is used for
comparison with the DUMPBIN output of exported symbols.
<P>
Assembler options needed: /nologo /coff /Cx /c
Linker options : -dll -noentry -map -out:MYDLL.LIB -def:MYDLL.DEF \
<PRE>                 MYDLL.OBJ


    TITLE    mydll.asm

    .386
    .MODEL flat, SYSCALL

    .CODE

    Nosymbol PROC
         ret
    Nosymbol ENDP

    _symbol PROC
        ret
    _symbol ENDP
    __symbol PROC
        ret
    __symbol ENDP

    ___symbol PROC
        ret
    ___symbol ENDP

    ____symbol PROC
        ret
    ____symbol ENDP

    _symbol1 PROC
        ret
    _symbol1 ENDP

    __symbol2 PROC
        ret
    __symbol2 ENDP

    ___symbol3 PROC
        ret
    ___symbol3 ENDP

    ____symbol4 PROC
        ret
    ____symbol4 ENDP

    END

</PRE>Use the following module definition file to build the DLL:
<P>
; The module definition file MYDLL.DEF
<P>
EXPORTS
<PRE>  Nosymbol

  _symbol=symbol
  __symbol=_symbol
  ___symbol=__symbol
  ____symbol=___symbol

  _symbol1=symbol1
  __symbol2=_symbol2
  ___symbol3=__symbol3
  ____symbol4=___symbol4

</PRE>Following are the contents of the mydll.map file:
<P>
mydll
<P>
<PRE> Timestamp is 33e12fbb (Thu Jul 31 17:37:15 1997)

 Preferred load address is 10000000

 Start         Length     Name                   Class
 0001:00000000 00000009H .text                   CODE
 0002:00000000 000000e5H .edata                  DATA

  Address         Publics by Value              Rva+Base   Lib:Object

 0001:00000000       Nosymbol                   10001000 f mydll.obj
 0001:00000001       _symbol                    10001001 f mydll.obj
 0001:00000002       __symbol                   10001002 f mydll.obj
 0001:00000003       ___symbol                  10001003 f mydll.obj
 0001:00000004       ____symbol                 10001004 f mydll.obj
 0001:00000005       _symbol1                   10001005 f mydll.obj
 0001:00000006       __symbol2                  10001006 f mydll.obj
 0001:00000007       ___symbol3                 10001007 f mydll.obj
 0001:00000008       ____symbol4                10001008 f mydll.obj

 entry point at        0000:00000000

 Static symbols

</PRE>Compare the symbols of the above map file output with that of the "DUMPBIN
/exports mydll.dll" output below.
<P>
Microsoft (R) COFF Binary File Dumper Version 5.00.7022
Copyright (C) Microsoft Corp 1992-1997. All rights reserved.
<P>
<P>
Dump of file mydll.dll
<P>
File Type: DLL
<P>
<PRE>         Section contains the following Exports for mydll.dll

                   0 characteristics
            33E12FBA time date stamp Thu Jul 31 17:37:14 1997
                0.00 version
                   1 ordinal base
                   9 number of functions
                   9 number of names

            ordinal hint   name

                  1    0   Nosymbol  (00001000)
                  2    1   ____symbol  (00001004)
                  3    2   ____symbol4  (00001008)
                  4    3   ___symbol  (00001003)
                  5    4   ___symbol3  (00001007)
                  6    5   __symbol  (00001002)
                  7    6   __symbol2  (00001006)
                  8    7   _symbol  (00001001)
                  9    8   _symbol1  (00001005)

     Summary

        1000 .rdata
        1000 .reloc
        1000 .text
</PRE> 
<PRE>Keywords          : LINKIss
Version           : WINDOWS NT:4.0,4.0a,4.1,4.2,4.2b,5.0
Platform          : NT WINDOWS
Issue type        : kbbug</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

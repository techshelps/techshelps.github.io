

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Returning Control to CodeView </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q43648 ">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1989/04/23">
<META NAME="Keywords" CONTENT="CvwIss kbtool">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT=" The following are two software methods of returning control to CodeView during program execution:  1. Use the debug interrupt, Interrupt 3, in your code. Interrupt 3 is    called a microprocessor (or logical) interrupt. It is the interrupt    that C...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAHC,QAUD,QAH4,QAMN,QAHB,QA7O,QAOE,QAB5,QDL9,QBWO,QBWN,QBFY,QALW,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Returning Control to CodeView</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q43648 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.20 3.00 3.11 3.14 4.0 4.01 4.10 | 2.20 3.00 3.11 3.12 | 4.0x 4.10 4.25
<PRE>MS-DOS                            | OS/2                | WINDOWS
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft CodeView for MS-DOS, versions 2.2, 3.0, 3.11, 3.14, 4.0,
   4.01, 4.05, and 4.1
<LI>Microsoft CodeView for OS/2, versions 2.2, 3.0, 3.11, 3.12, and 3.5
<LI>Microsoft CodeView for Windows, versions 3.0, 3.05, 3.06, 3.07,
   4.0, 4.01, and 4.1
<LI>Microsoft CodeView for Win32s, version 4.25
</UL> 
<P>
The following are two software methods of returning control to
CodeView during program execution:

<OL><P><LI>Use the debug interrupt, Interrupt 3, in your code. Interrupt 3 is
   called a microprocessor (or logical) interrupt. It is the interrupt
   that CodeView uses to make breakpoints. Place an Interrupt 3 into
   your code in selected places where you want to return control to
   CodeView.
<P>
   In a program designed for the Microsoft Windows operating system,
   use the DebugBreak() function to insert an Interrupt 3 in the code.
   Using DebugBreak() instead of calling Interrupt 3 directly through
   assembly code is especially important in applications designed for
   Win32s.
<P>
   The following sample program demonstrates the technique. Note that
   you could easily construct a macro to insert breakpoints where
   desired, and you could use inline assembly instead of the int86()
   function:
<P>
<P><PRE>      #include &lt;dos.h&gt;
      #include &lt;stdio.h&gt;
</PRE><P>
<P><PRE>      void main()
      {
<PRE></PRE>         union REGS  inregs;
         int         i = 1;

         for ( ; ; )
            {
             printf("Loop iteration: %d\n", i++);
             int86(0x03, &amp;inregs, &amp;inregs);
            }
      }

</PRE><P><LI>When CodeView runs in MS-DOS, you can use the CTRL+C and CTRL+BREAK
   key combinations to return control to CodeView. This method can be
   useful to break out of a program that is running or that has locked
   up. When CodeView regains control, the displayed debugging
   information depends on when you type the key combination and what
   caused the problem with the application (for example, an infinite
   loop, a bad pointer, and so on). If desired, continue execution in
   the normal manner (press F5, F8, or F10, and so on).
<P>
   MS-DOS checks for the CTRL+C key combination during most I/O
   operations. If the system break flag is on (the AUTOEXEC.BAT file
   includes the command BREAK ON), MS-DOS checks for CTRL+C in other
   operations as well. If you press CTRL+C when an application is
   executing in an infinite loop and MS-DOS interrupts are disabled,
   CodeView may not obtain control.
<P>
   In OS/2, CTRL+BREAK does not return control to CodeView. You can
   use CTRL+C to terminate an application, but you cannot continue
   debugging after CTRL+C as you can in MS-DOS.
<P>
   When you debug an application in 16-bit Windows, CTRL+ALT+SYSRQ
   returns control to the debugger. When you debug a Win32s program,
   CTRL+ALT+F11 returns control to the debugger.
<P>
   No hardware interrupt returns control to CodeView.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 3.00 3.50 4.00 4.10 CONTROL-C CONTROL+C<BR>
CONTROL+BREAK INT3<BR>
KBCategory: kbtool<BR>
KBSubcategory: CvwIss<BR>
Keywords          : CvwIss kbtool<BR>
Version           : 2.20 3.00 3.11 3.14 4.0 4.01 4.1<BR>
Platform          : MS-DOS OS/2 WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Windows User, Kernel, and GDI Symbols in CodeView </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q67711 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/12/12">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  CodeView for Windows (CVW) can view symbolic information in Windows's core code and can set breakpoints inside Windows functions when the debugging versions of USER.EXE, GDI.EXE, KRNL286.EXE, and KRNL386.EXE are installed in your development enviro...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QDL9,QBWO,QBWN,QAY5,QBWQ,QBV8,QAB9,QAUJ,QAGQ,QAE1,QARM,QBXS,QA4B,QAFV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Windows User, Kernel, and GDI Symbols in CodeView</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q67711 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.05 3.14 4.00 4.01 4.10
WINDOWS
kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft CodeView for Windows, versions 3.05, 3.14, 4.0, 4.01,
   and 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
CodeView for Windows (CVW) can view symbolic information in Windows's
core code and can set breakpoints inside Windows functions when the
debugging versions of USER.EXE, GDI.EXE, KRNL286.EXE, and KRNL386.EXE
are installed in your development environment.
<P>
For Windows 3.0, Section 7.3.2 of the "Microsoft Windows Software
Development Kit Tools" manual describes how to install the debugging
version of Windows. The "Microsoft Windows Software Development Kit:
Programming Tools" manual presents similar information for Windows 3.1
beginning on page 73.
<P>
This article discusses using Windows symbols to set breakpoints, list
module names and functions, and disassemble Windows code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For CVW to access Windows symbols, USER.EXE, GDI.EXE, and either
KRNL286.EXE or KRNL386.EXE must be loaded into CVW as dynamic-link
libraries (DLLs). This can be done with the /L command-line switch or
in response to the DLL prompt when CVW starts.
<P>
KRNL286.EXE should be used when debugging applications in standard
mode and KRNL386.EXE should be used when debugging in enhanced mode.
<P>
The symbolic information is available only while viewing assembly
language listings of Windows code. By default, the symbols are not
visible. To view the symbolic information, perform the following two
steps:

<OL><P><LI>From the Options menu, choose Source Window.

<P><LI>In the Source Window dialog box under the heading Assembly Listing,
   check the Show Symbolic Name box. If this box is not checked, no
   symbols appear in any assembly display.
<P>
</OL>When the Source Window option has been set, you can step into Windows
code or break into the debugger with the CTRL+ALT+SYS RQ key
combination and see what function is currently being executed. Note
that you will probably break into a private function within Windows
for which no symbolic information is available.
<P>
When the symbols are loaded, you can set breakpoints at a particular
function name, disassemble a Windows function, list all the modules,
and list all functions contained in those modules.
<P>
Note that whenever you use the name of a Windows function that is
defined with the PASCAL calling convention, you must type the name in
uppercase letters. When the name of a Windows function begins with a
capital letter, such as the GetDC function, the function is defined
with the PASCAL calling convention. The name of a function defined
with the C calling convention, such as the wsprintf function, begins
with a lowercase letter.
<P>
To set a breakpoint, use the BP command or the Watch menu, and specify
the symbol for the function name.
<P>
To disassemble Windows code, use the command
<P>
<PRE>   U [&lt;module&gt;!]&lt;function name&gt;

</PRE></OL>where &lt;module&gt; is the name of the module you want to disassemble and
&lt;function name&gt; is the name of a function in that module. The
character "!" after the module name is required. Disassembly takes
place in the source window.
<P>
In CVW, the X* command lists all available modules. This command lists
the names of all modules in the application and in any loaded DLLs.
<P>
Once a module name is known, the following command lists all the
functions within that module:
<P>
<PRE>   X? [&lt;module&gt;!]*

</PRE><h3>Example</h3>
 
<P>
KRNL386.EXE has a module named LDDEBUG. To list the functions in this
module, enter the following in the command window:
<P>
<PRE>   X? LDDEBUG!*

</PRE>The output window displays many addresses with no symbols, but the
listing includes OUTPUTDEBUGSTRING. This shows that the
OutputDebugString function is implemented in the LDDEBUG module.
<P>
If [&lt;module&gt;!] is not specified, the functions in the current module
are displayed.
<P>
Using the X command by itself displays all public symbols available to
CVW.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10<BR>
KBCategory: kbtool<BR>
KBSubcategory: CvwIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

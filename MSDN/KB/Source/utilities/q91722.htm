

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Placing Application Data into a MOVE Overlay </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q91722 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1992/11/03">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT=" Page 604 of the Microsoft C/C++ version 7.0  Environment and Tools  manual indicates that an application can place data into a Microsoft Overlaid Virtual Environment (MOVE) overlay by declaring a code segment that contains the data and placing the s...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAB4,QAW9,QACI,QBFY,QAYY,QAOT,QBVV,QAY4,QAVX,QAVW,QA9N,QANJ,QAE2,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Placing Application Data into a MOVE Overlay</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q91722 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.30   | 5.30
MS-DOS | WINDOWS
kbtool kbcode kberrmsg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Link Utility for MS-DOS and Windows, versions 5.3
</UL> 
<P>
Page 604 of the Microsoft C/C++ version 7.0 "Environment and Tools"
manual indicates that an application can place data into a Microsoft
Overlaid Virtual Environment (MOVE) overlay by declaring a code
segment that contains the data and placing the segment into an
overlay. To declare data in a code segment, use a __based allocation,
#pragma data_seg, or an assembler module.
<P>
However, when the fast compiler option (/f) is used, placing data into
a code segment may create a file that hangs or does not process its
data correctly. This incorrect behavior is caused by the method the
fast compiler uses to generate code to access data and the method that
the linker performs fixups. To address this situation, use the
optimizing compiler (/f-). The optimizing compiler detects that data
has been placed into a code segment and loads the segment value from
the CS register.
<P>
In some cases, version 5.3 of the Microsoft Linker (LINK) issues the
following error message:
<P>
<PRE>   L1101: invalid object module

</PRE>This can occur without regard to the version of the compiler in use.
Updating to LINK version 5.31.009, which is available in the patches
for C/C++ version 7.0, will most likely prevent error L1101 from
occurring. For more information, search in the Microsoft Knowledge
Base on the following word:
<P>
<PRE>   LNK9208002

</PRE>The article is titled "LNK9208: L1101 From Unsupported Fixup to
Target in Overlay"
<P>
The design of the MOVE assumes that run-time relocations are performed
relative to the root. In other words, an overlay cannot contain any
base fixups to segments other than the root. However, the fast
compiler generates run-time relocations that are relative to the
current overlay. In most cases, compiling with the optimizing compiler
ensures that data in an overlaid code segment generates only offset
fixups.
<P>
LINK version 5.31.009 may issue a new warning message, L4059. The
PATCH.TXT file, distributed with the C/C++ patches, documents the
L4059 warning as follows:
<P>
<PRE>   New warning L4059 has been added. It occurs if code contains far
   segment references to overlaid targets. These references are
   resolved correctly only if they are code references (not data
   references).

</PRE>Because the linker does not have the information to determine whether
a symbol is for code or data, the warning is given for both code
references and data references.
<P>
The following code samples demonstrate creating a data overlay.
<P>
NOTE: Using the technique below is not guaranteed to work for every
kind of data allocation and it has not been fully tested.
<P>
In the first example, the fast compile option (/f) is used, the
printf() statement in the overlay() function fails to print the string
placed into the code segment with the #pragma data_seg. LINK 5.31.009
produces an L4059 warning message. The string is printed correctly
when the optimizing compiler (/f-) is used.
<P>
The second example generates an L1101 error message with LINK 5.3.
However, LINK 5.31.009 does not generate an L1101 error.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
<PRE>/*
 * Compile options needed: /f /AL
 * LINK command: main over, test.exe,,, test.def
 */

</PRE><h3>MAIN.C</h3>
 
<P>
<PRE>#include &lt;stdio.h&gt;

</PRE>extern void overlay(void);
<P>
<PRE>void main()
</PRE>{
<PRE>   overlay();
</PRE>}
<P>
<P><h3>OVER.C</h3>
 
<P>
#pragma data_seg("_CODE")
<P>
<PRE>#include &lt;stdio.h&gt;

void overlay()
</PRE>{
<PRE>   printf("This string comes from an overlay.\n");
</PRE>}
<P>
<P><h3>TEST.DEF</h3>
 
<P>
SEGMENTS
<PRE>   main_text OVL:0
   over_text OVL:1

</PRE> 
<P>
<P><h3>Sample Code #2</h3>
 
<P>
<PRE>/*
   Compile options needed: /AL
   LINK command: sortdemo,,,graphics,sortdemo.def
*/

</PRE><h3>SORTDEMO.C</h3>
 
<P>
Modify the SORTDEMO.C example in C700\SAMPLES\SORTDEMO directory. Add
the following line after the #include directives
<P>
<PRE>   #pragma data_seg("_CODE")

</PRE><h3>SORTDEMO.DEF</h3>
 
<P>
SEGMENTS
<PRE>   sortdemo_text OVL:1

</PRE> 
<P>
For more information on using the SEGMENTS statement in MOVE overlay
syntax, search in the Microsoft Knowledge Base on the following words:
<P>
<PRE>   link and overlay and move

</PRE>The article is titled "LNK9208: L1101 From Unsupported Fixup to
Target in Overlay"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf 5.30  MoveOverlay<BR>
KBCategory: kbtool kbcode kberrmsg<BR>
KBSubcategory: MoveOverlay<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

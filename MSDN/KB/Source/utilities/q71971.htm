

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calculating the Checksum for a Segmented-Executable File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71971 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/05/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  The header of an executable file created by Microsoft LINK contains two different checksum values. The first, located at offset 12-13h in the old .EXE header, is the complemented checksum of all words in the file. The second, located at offset 08-0...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBE6,QBE7,QAE5,QAKD,QAWH,QBVV,QA4Q,QADC,QABI,QADP,QAI4,QALG,QAE2,QAGF,QAKC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calculating the Checksum for a Segmented-Executable File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71971 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.0x 5.1x 5.20 5.3x 5.50 5.60 | 5.0x 5.10 5.11 5.13 5.15
<PRE>MS-DOS                        | OS/2
</PRE>kbtool kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft LINK for MS-DOS, versions 5.0x, 5.1x, 5.2, 5.3x, 5.5,
   and 5.6
<LI>Microsoft LINK for OS/2, versions 5.0x, 5.1, 5.11, 5.13, and 5.15
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The header of an executable file created by Microsoft LINK contains two
different checksum values. The first, located at offset 12-13h in the old
.EXE header, is the complemented checksum of all words in the file. The
second, located at offset 08-0Bh in the new .EXE header, is the 32-bit
checksum of all DWORD values in the file. The text below describes the
process involved to calculate these checksum values.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following information that describes calculating the first checksum is
from page 122 or the "MS-DOS Encyclopedia" (Microsoft Press):
<P>
<PRE>   12-13H (Complemented Checksum) This word contains the one's
   complement of the summation of all words in the .EXE file. Current
   versions of MS-DOS basically ignore this word when they load a .EXE
   program; however, future versions might not. When LINK generates a
   .EXE file, it adds together all the contents of the .EXE file
   (including the .EXE header) by treating the entire file as a long
   sequence of 16-bit words. During this addition, LINK gives the
   Complemented Checksum word (12-13H) a temporary value of 0000H. If
   the file consists of an odd number of bytes, then the final byte is
   treated as a word with a high byte of 00H. Once LINK has totaled
   all words in the .EXE file, it performs a one's complement
   operation on the total and records the answer in the .EXE file
   header at offsets 12-13H. The validity of a .EXE file can then be
   checked by performing the same word-totaling process as LINK
   performed. The total should be FFFFH, because the total will
   include LINK's calculated complemented checksum, which is designed
   to give the file the FFFFH total.

</PRE>The sample code below shows one implementation of this technique.
<P>
Note that Microsoft LINK does not correctly calculate the checksum if the
linker command line includes the /CODEVIEW or /EXEPACK option switches.
However, because the MS-DOS, Microsoft Windows, and OS/2 versions 1.x do
not verify the checksum, this behavior does not present a problem under
normal circumstances. Microsoft LINK version 5.3 and later do not compute a
16-bit or 32-bit checksum. The reserved bytes in the .EXE header are set to
zero.
<P>
The system uses the old .EXE header checksum when an MS-DOS application
runs. However, for any other type of executable file, (an application or
dynamic-link library [DLL] for Windows or OS/2 versions 1.x, or a bound
application), LINK computes a 32-bit checksum for the new .EXE header. This
calculation is only slightly more complicated than that discussed earlier.
<P>
First of all, the checksum is not the sum of every DWORD value in the
physical file. It is the sum of the DWORD values in the executable portion
of the file. As other items, like resources, symbolic information, and so
on, are added to the .EXE file, the checksum value does not change. To
determine the size of the executable file, look at the two words at offset
02h and 04h in the old .EXE file header.
<P>
Second, the 32-bit checksum is the sum of each DWORD value in the
executable file EXCEPT for the checksum itself. Because Microsoft LINK does
not perform a complement operation, the result is NOT FFFFFFFFh when all
DWORD values are summed.
<P>
The following code example demonstrates calculating these checksum values.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compile options needed: none
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;

void Calc16ChkSum(FILE *fp);
void Calc32ChkSum(FILE *fp);
void main(int, char **);

</PRE>FILE *fp;
unsigned long NewHdrOffset, FileSize = 0L;
<PRE>unsigned int PageCnt;

#define NEWHDROFFSET  0x3C   /* Location in Old Header with offset
                                of new header in EXE */

void main (int argc, char * argv[])
</PRE>{
<PRE>   if (argc != 2)
      {
      printf("\n\nUsage: %s &lt;EXEfilename&gt;\n\n", argv[0]);
      exit(-1);
      }

   if ((fp = fopen(argv[1], "rb")) == NULL)
      {
      printf("\n\nError: Unable to open file : %s\n\n", argv[1]);
      exit(-1);
      }

   fread(&amp;PageCnt, sizeof(int), 1, fp); /* Read past the signature */
   fread(&amp;PageCnt, sizeof(int), 1, fp); /* Read the last page size */
   FileSize = PageCnt;
   fread(&amp;PageCnt, sizeof(int), 1, fp); /* Read the full page count */

   if (FileSize == 0L)
      FileSize = PageCnt * 512;
   else
      FileSize += (PageCnt - 1) * 512;

   fseek(fp, NEWHDROFFSET, SEEK_SET);  /* Locate the New EXE offset */
   fread(&amp;NewHdrOffset, sizeof(long), 1, fp);  /* and read it */

   if (NewHdrOffset == 0L)
      Calc16ChkSum(fp);
   else
      Calc32ChkSum(fp);

   fcloseall();
   return;
</PRE>}
<P>
<PRE>void Calc16ChkSum(FILE *fp)
</PRE>{
<PRE>   unsigned int sum16, NxtInt, x;
   unsigned char NxtChar;

   sum16 = 0;
   fseek(fp, 0, SEEK_SET);

   for (x = 0L; x &lt; FileSize / 2L; x++)
      {
      fread(&amp;NxtInt, sizeof(int), 1, fp);
      sum16 += NxtInt;
      }

   /* make sure and get the last byte if odd size... */

   if (FileSize % 2)
      {
      fread(&amp;NxtChar, sizeof(char), 1, fp);
      sum16 += (unsigned int)NxtChar;
      }

   printf("\nThe 16 bit checksum should be FFFF, it is %x\n\n",
         sum16);
}

void Calc32ChkSum(FILE *fp)
</PRE>{
<PRE>   unsigned long sum32, NxtLong, CheckSum32, x;
   unsigned char NxtByte, y;

   sum32 = 0;
   fseek(fp, 0, SEEK_SET);

   /* Calculate the number of DWORDs before the checksum, and add
    * them together.
    * (Note: The checksum *always* starts on a DWORD boundary.) */

   x = (NewHdrOffset + 8) / 4;

   for ( ; x; x--)
      {
      fread(&amp;NxtLong, sizeof(long), 1, fp);
      sum32 += NxtLong;
      }

   /* Read the actual check sum... */

   fread(&amp;CheckSum32, sizeof(long), 1, fp);
   /* Then the rest of the DWORDs in the file. */

   for (x = 0; x &lt; (FileSize - NewHdrOffset - 12) / 4; x++)
      {
      fread(&amp;NxtLong, sizeof(long), 1, fp);
      sum32 += NxtLong;
      }

   /* We have to account for the extra bytes in the file. Basically,
    * they are used to form a long with the high order bytes set to
    * zero. */

   if (0L != (x = FileSize % 4L))
      {
      NxtLong = 0L;
      for (y = 0 ; y &lt; x ; y++)
         {
         fread(&amp;NxtByte, sizeof(char), 1, fp);
         NxtLong += (unsigned long)NxtByte &lt;&lt; (8 * y);
         }
      sum32 += NxtLong;
      }

   printf("\nThe 32-bit checksum should be %lx, it is %lx\n\n",
           CheckSum32, sum32);
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.0x 5.10 5.11 5.13 5.15 5.1x 5.20 5.3x<BR>
LinkIss<BR>
5.50 5.60<BR>
KBCategory: kbtool kbcode<BR>
KBSubcategory: LinkIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

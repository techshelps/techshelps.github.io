

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Purpose of the M-bit and FRAME DATUM Fields </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q66579 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/10/31">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; utilities">
<META NAME="Description" CONTENT="  One of the jobs of the linker is to resolve (fix up) addresses which the compiler or assembler could not resolve. This article clarifies a couple of points discussed in  Article 19: Object Modules  in the  MS-DOS Encyclopedia .  MORE INFORMATION  T...">
<META NAME="Product" CONTENT="Programming Utilities">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIA,QAIB,QBE7,QBE6,QA7O,QA7N,QAC2,QAH4,QAPF,QAJQ,QAE5,QAR5,QAB3,QA5V,QA2O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Purpose of the M-bit and FRAME DATUM Fields</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q66579 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.x 4.x 5.x | 1.x
<PRE>MS-DOS      | OS/2
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft LINK Utility for MS-DOS, versions 3.x, 4.x, and 5.x
<LI>Microsoft LINK Utility for OS/2, versions 1.x
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
One of the jobs of the linker is to resolve (fix up) addresses which the
compiler or assembler could not resolve. This article clarifies a couple of
points discussed in "Article 19: Object Modules" in the "MS-DOS
Encyclopedia".
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The M-bit field in the fixup field of the FIXUPP record is described in the
"MS-DOS Encyclopedia." Its value determines if the linker should calculate
the address from the start of the segment in question (segment-relative),
or from the current location in the code/data (self-relative). The
following is an example:
<P>
<PRE>                   MYSEG Segment

       --&gt;      +-----------------+     &lt;-- Start of segment
      |         |                 |
      |         |                 |
      |         |                 |
      |         |                 |
      |    --&gt;  +-----------------+     &lt;-- Reference to symbol
      |   |     |                 |
          |     |                 |
     (A)  |     |                 |
                /                 \
      |  (B)    \                 /
      |         /                 \
      |   |     \                 /
      |   |     |                 |
      |   |     |                 |
       --&gt; --&gt;  +-----------------+     &lt;-- Symbol
                /                 \
                \                 /
                /                 \
                \                 /
                +-----------------+     &lt;-- End of segment

</PRE>In this example, (A) is the segment-relative address and (B) is the  self-
<PRE>relative address. The self-relative calculation is used when you   want to
</PRE>jump forward a certain number of bytes in the code (for example, a short
jump). The calculation is fairly straightforward. Calculate the segment-
relative address for the symbol. Subtract the segment-relative address of
the reference, and you have the self-relative address for the symbol from
the reference.
<P>
The FRAME DATUM field is used in almost exactly the same manner. It might
seem that the fields TARGET DATUM and TARGET DISPLACEMENT are sufficient to
fix up references in an LEDATA or LIDATA record. To understand why it is
required, see the following example:
<P>
Microsoft C/C++ compilers (16-bit) generate a group called DGROUP that
holds data segments _NULL, _DATA, _CONST, and so forth. The fixups that it
generates are similar to the following:
<P>
<PRE>   frame DGROUP target _CONST
   frame DGROUP target _DATA
   ...

</PRE>For the average MS-DOS program, this is fine. We could, eliminate the FRAME
DATUM field and change target to DGROUP, right? Wrong. Examine ROMable
code; they use the same OBJ. In that case, the linker must know if a
reference to _CONST is a far reference (based on DGROUP) or a near
reference (based on CONST). If we only told it to use DGROUP, it would have
no idea how to resolve the references to _CONST after it moved _CONST to
another segment (for example, ROM based). If we left in the target _CONST
and removed the frame DGROUP, we would have the wrong address for MS-DOS,
right? Hence, FRAME DATUM *is* important.
<P>
The way the FRAME DATUM field affects the fixup makes sense, given the
example above for the M-bit. Just calculate the offset based on the TARGET
segment and add in the offset from the FRAME.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf kbinf<BR>
KBCategory: kbtool<BR>
KBSubcategory: LinkIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

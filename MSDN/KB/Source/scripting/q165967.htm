

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Script Error Occurs When Referencing Non-variant Array </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165967">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1997/03/27">
<META NAME="Keywords" CONTENT="AXSDKSripting kbsample kbprb">
<META NAME="KBArea" CONTENT="Support; KB; scripting">
<META NAME="Description" CONTENT="  When a script attempts to reference the elements of an array returned by a component, the script engine reports:      Object doesn't support this property or method '        .        '   CAUSE =====  The VBSCRIPT active scripting engine supplied by...">
<META NAME="Product" CONTENT="Scripting">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDNQ,QAUD,QAPN,QAJG,QALW,QAG1,QAY5,QAVX,QAVW,QAB4,QBS0,QAY2,QAYL,QAW6,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Script Error Occurs When Referencing Non-variant Array</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165967</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic, Scripting Edition, versions 1.0, 1.1, 2.0, 3.0
<LI>Microsoft JScript, versions 1.0, 2.0
<LI>Internet Explorer (Programming), version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a script attempts to reference the elements of an array returned by a
component, the script engine reports:
<P>
<PRE>   "Object doesn't support this property or method '&lt;object&gt;.&lt;method&gt;'"

</PRE><h2>CAUSE</h2>
 
<P>
The VBSCRIPT active scripting engine supplied by Microsoft only supports
the indexing of SAFEARRAYs of VARIANTs. While VBSCRIPT is capable of
accepting arrays of non-variant type for the purposes of boundary checking
and passing it to other automation objects, the engine does not allow
manipulation of the array contents at this time.
<P>
The JSCRIPT active scripting engine does not provide support for testing
the bounds or indexing SAFEARRAYs of any type including VARIANTs. However,
JSCRIPT is capable of passing SAFEARRAYs from one automation object to
another.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To function correctly with applications and components that host VBSCRIPT,
automation objects should create SAFEARRAYs of VARIANTs. Non-VARIANT data
should be packaged in the VARIANT elements of the SAFEARRAY to be returned
to the VBSCRIPT engine.
<P>
Scripts written in VBSCRIPT should use the TypeName function to check the
data type of a variable. The TypeName function returns the string
"Variant()," excluding the quotes, when passed an array of VARIANTs.
<P>
Scripts written in JSCRIPT should use the typeof operator to test the data
type of a variable. The typeof operator returns the string "unknown,"
excluding the quotes for datatypes unsupported by JSCRIPT.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The VBSARRAY is a simple Active Template Library (ATL) version 2.1
component object that demonstrates this behavior. The component implements
a dual interface Ivbsa that supports three methods: TestBstrs,
TestVariants, and TestPassArray. The first demonstrates the problem by
returning a SAFEARRAY of BSTRs. The second demonstrates the solution by
packaging each of the BSTRs in a VARIANT. The third demonstrates that an
array of non-VARIANT type can be passed from component to VBSCRIPT or
JSCRIPT to component. The data remains intact.
<P>
Here is the implementation of TestVariants:
<P>
<PRE>      // Return a VARIANT array of VARIANTs which hold BSTRs
      STDMETHODIMP Cvbsa::TestVariants(VARIANT * pvaVariant)
      {
         HRESULT hr = NOERROR;
         LPSAFEARRAY psa;
         SAFEARRAYBOUND rgsabound[]  = { 3, 0 }; // 3 elements, 0-based
         int i;

         if (!pvaVariant)
         {
            return E_INVALIDARG;
         }

         VariantInit(pvaVariant);

         psa = SafeArrayCreate(VT_VARIANT, 1, rgsabound);
         if (!psa)
         {
            return E_OUTOFMEMORY;
         }

         VARIANT vFlavors[3];
         for (i = 0; i &lt; 3; i++)
         {
            VariantInit(&amp;vFlavors[i]);
            V_VT(&amp;vFlavors[i]) = VT_BSTR;
         }

         V_BSTR(&amp;vFlavors[0]) = SysAllocString(OLESTR("Vanilla"));
         V_BSTR(&amp;vFlavors[1]) = SysAllocString(OLESTR("Chocolate"));
         V_BSTR(&amp;vFlavors[2]) = SysAllocString(OLESTR("Espresso Chip"));
         if (!V_BSTR(&amp;vFlavors[0]) || !V_BSTR(&amp;vFlavors[1]) ||
             !V_BSTR(&amp;vFlavors[2]))
         {
            hr = E_OUTOFMEMORY;
            goto Error;
         }

         {
                //Plug references to the data into the SAFEARRAY
               LPVARIANT rgElems;
               if (FAILED(hr = SafeArrayAccessData(psa,(LPVOID*)&amp;rgElems)))

            {
               goto Error;
            }
            for (i = 0; i &lt; 3; i++)
            {
               rgElems[i] = vFlavors[i];
            }
            SafeArrayUnaccessData(psa);
         }

         V_VT(pvaVariant) = VT_ARRAY | VT_VARIANT;
         V_ARRAY(pvaVariant) = psa;

         return NOERROR;

   Error:
         for (i = 0; i &lt; 3; i++)
         {
            if (V_BSTR(&amp;vFlavors[i])
            {
               VariantClear(&amp;vFlavors[i]);
            }
         }
         return hr;
   }

</PRE>Here is the JSCRIPT code from VBSARRAY.HTM, the test page included with
the sample, that checks the datatype of a variable:
<PRE>      &lt;SCRIPT LANGUAGE=JSCRIPT&gt;
      function JScriptSafeArrayTest()
      {
         pvaBstr = SimpleComponent.TestBstrs()
         if (typeof(pvaBstr) == "unknown")
         {
            Alert("JSCRIPT cannot handle the type returned by TestBstrs()")
            SimpleComponent.TestPassedArray(pvaBstr)
         }

         pvaVariant = SimpleComponent.TestVariants()
         if (typeof(pvaVariant) == "unknown")
         {
         Alert("JSCRIPT cannot handle the type returned by TestVariants()")
            SimpleComponent.TestPassedArray(pvaVariant)
         }
      }
      &lt;/SCRIPT&gt;

</PRE>To demonstrate the problem and the solution, perform the following steps:

<OL><P><LI>Follow the instructions below on obtaining the sample component
   VBSARRAY.DLL and sample page VBSARRAY.HTM.

<P><LI>Register the component VBSARRAY.DLL using a tool such as REGSVR32.EXE.

<P><LI>Launch Internet Explorer, and load the test page VBSARRAY.HTM.

<P><LI>Follow the instructions on the page, clicking the various buttons and
   observing the resulting behavior.
<P>
</OL>The sample component was created using the Active Template Library version
2.1 including with Visual C++ 5.0 in the Visual Studio 97 environment. If
you have Visual Studio 97, you can load the VBSARRAY project directly.
Otherwise, you can open the relevant source file VBSA.CPP in any editor to
see how the SAFEARRAY is constructed in both the VARIANT and the BSTR
cases. Search for the implementation of both Cvbsa::TestVariants and
Cvbsa::TestBstrs in the source file.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Vbsarray.exe">Vbsarray.exe</A> <I>(size: 71069 bytes)</I> 

</PRE></OL>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>REFERENCES</h2>
 
<P>
Platform SDK Automation Reference
<P>
Microsoft Visual Basic Scripting Edition Language Reference
 
<PRE>Keywords          : AXSDKSripting kbsample kbprb
Technology        : kbAtl kbInetDev
Version           : Win:1.0,1.1,2.0,3.0
Platform          : WINDOWS
Issue type        : kbprb
Solution Type     : kbfile</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

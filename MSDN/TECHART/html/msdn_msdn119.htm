<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 119: Creating a Resizable Control at Run Time</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn119"></a></sup>Tip 119: Creating a Resizable Control at Run Time</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
You can add many different controls, such as <b>Text Boxes</b>, to your Microsoft® Visual Basic® forms. At design time, you can adjust the size and position of the control. This article explains how the user can modify the size of these controls at run time from within a Visual Basic application.</p>
<h2>Resizing Controls at Run Time</h2>
<p>
When designing a Microsoft® Visual Basic® application, you simply add controls to your form as needed. For example, the <b>Text Box</b> control gives your program the features of a mini-word-processing program.</p>
<p>
The size of the control must be set at design time. However, by using two Microsoft Windows® application programming interface (API) functions (<b>GetWindowLong</b> and <b>SetWindowLong</b>), you can let your user resize a control such as a <b>Text Box</b> at run time.</p>
<p>
When you add a control such as a <b>Text Box</b> to your Visual Basic application, you are essentially creating a new window. Every window created under the Windows operating system has certain style attributes associated with it. For example, a <b>Text Box</b> control may have a window style of ES_MULTILINE. This tells Windows that this control is a multiline edit control.</p>
<p>
Normally, a <b>Text Box</b> control cannot be resized at run time. However, by changing the control's style attributes, the user will be able to adjust the physical size of the <b>Text Box</b> while your program is running.</p>
<p>
This is accomplished by calling the <b>GetWindowLong</b> and <b>SetWindowLong</b> functions. First, you call the <b>GetWindowLong</b> function to retrieve the window's current style attributes for the <b>Text Box</b> control. Next, you use the bitwise OR operator to set the WS_THICKFRAME attribute for the <b>Text Box</b> control. A window that has a WS_THICKFRAME attribute is drawn with a thick border around its perimeter. You can use this border to change the size of the window.</p>
<p>
The <b>SetWindowLong</b> function is then run, which tells Windows to modify the style attribute of the <b>Text Box</b> control.</p>
<p>
The final step is to anchor the newly sized <b>Text Box</b> so that its new position and size is registered on the underlying form. The <b>SetWindowPos</b> function accomplishes this task.</p>
<h2>Example Program</h2>
<p>
This program shows how to create a resizable <b>Text Box</b> control at run time in Visual Basic.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetWindowLong Lib "User" (ByVal hWnd As Integer, ByVal
 &nbsp; nIndex As Integer) As Long
Private Declare Function SetWindowLong Lib "User" (ByVal hWnd As Integer, ByVal
 &nbsp; nIndex As Integer, ByVal dwNewLong As Long) As Long
Private Declare Sub SetWindowPos Lib "User" (ByVal hWnd As Integer, ByVal
 &nbsp; hWndInsertAfter As Integer, ByVal X As Integer, ByVal Y As Integer, ByVal CX
 &nbsp; As Integer, ByVal CY As Integer, ByVal wFlags As Integer)
Const SWP_NOSIZE = &amp;H1
Const SWP_NOZORDER = &amp;H4
Const SWP_NOMOVE = &amp;H2
Const SWP_DRAWFRAME = &amp;H20
Const GWL_STYLE = (-16)
Const WS_THICKFRAME = &amp;H40000
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; ResizeControl Text1, Form1
End Sub
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Create a new function called <b>ResizeControl</b>. Add the following code to this function:<pre><code>Function ResizeControl(ControlName As Control, FormName As Form)
 &nbsp;&nbsp; Dim NewStyle As Long
 &nbsp;&nbsp; NewStyle = GetWindowLong(ControlName.hWnd, GWL_STYLE)
 &nbsp;&nbsp; NewStyle = NewStyle Or WS_THICKFRAME
 &nbsp;&nbsp; NewStyle = SetWindowLong(Text1.hWnd, GWL_STYLE, NewStyle)
 &nbsp;&nbsp; SetWindowPos ControlName.hWnd, FormName.hWnd, 0, 0, 0, 0, SWP_NOZORDER Or SWP_NOSIZE Or SWP_NOMOVE Or SWP_DRAWFRAME
End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5 Click the command button. You can now make the <b>Text Box</b> any size you want.</p>
<h2>Additional References</h2>
<p>
"GetWindowLong." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
"SetWindowLong." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
"SetWindowPos." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
<a href="msdn_msdn109.htm">"Tip 109: Modifying an MDI Form's Border Style."</a></p>
</BODY>
</HTML>

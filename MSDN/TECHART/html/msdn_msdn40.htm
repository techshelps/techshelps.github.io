<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 40: Calculating the Number of Bytes Used by Files Stored in a Directory</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn40"></a></sup>Tip 40: Calculating the Number of Bytes Used by Files Stored in a Directory</h1>
<p>
Created: April 1, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can use the Visual Basic® <b>Dir$</b>, <b>FileName</b>, and <b>FileLen</b> functions to calculate the space used by files in a directory.</p>
<h2>When DiskSpaceFree Is Not Enough</h2>
<p>
The <b>DiskSpaceFree</b> function found in SETUPKIT.DLL can tell you the amount of free space available on the specified disk drive. However, if you need to determine how much space is occupied by the files stored in a single directory, you will not be able to use this function.</p>
<p>
How, then, can you find out how much space is used by the files? One solution is to open each file in the directory and move the files pointer to the end of the file. Then you can find out how many bytes are stored in the file. This method, however, is far too slow because each file must be individually opened and closed.</p>
<p>
A better solution is to use the <b>Dir$</b>, <b>FileName</b>, and <b>FileLen</b> functions in Visual Basic® to scan the directory and keep a running total of the number of bytes in each file:
<ul type=disc>
<li>
The <b>Dir$</b> function retrieves the name of a file from a disk. To begin a search for all files in a directory, pass the name of the directory as the first argument to <b>Dir$</b> and the filename pattern to search for as the second argument to <b>Dir$</b>. Because we want to retrieve the length of each individual file stored in the directory, we use a wildcard (*.*) filename. As each name is retrieved from disk, the file's length is added to the variable (in our example program below) <i>FileSize</i>. When no more files exist in the directory, <b>Dir$</b> will return an empty (NULL) string<br><br></li>
<li>
The <b>FileLen</b> function returns the total number of bytes used by the specified file. Using a Do-While loop to retrieve the name and length of each file found in the directory is quicker and less prone to disk errors than the other method described above.</li>
</ul>
<h2>Example Program</h2>
<p>
The program below shows how you can use a Do-While loop to calculate how many bytes are occupied by all the files stored in a directory. The <i>Directory</i> variable is set to the path of the directory you want to work with. After the program has determined the length of all files stored in the directory, it displays the result in the Text Box.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a Text Box control to Form1. Text1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp;&nbsp;&nbsp; Dim FileName As String
 &nbsp;&nbsp;&nbsp; Dim FileSize As Currency
 &nbsp;&nbsp;&nbsp; Dim Directory As String

 &nbsp;&nbsp;&nbsp; Directory = "c:\windows\system\"
 &nbsp;&nbsp;&nbsp; FileName = Dir$(Directory &amp; "*.*")
 &nbsp;&nbsp;&nbsp; FileSize = 0

 &nbsp;&nbsp;&nbsp; Do While FileName &lt;&gt; ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileSize = FileSize + FileLen(Directory &amp; FileName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileName = Dir$
 &nbsp;&nbsp;&nbsp; Loop

 &nbsp;&nbsp;&nbsp; Text1.Text = "Total bytes used = " + Str$(FileSize)
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

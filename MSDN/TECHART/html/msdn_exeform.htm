<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>YAHU, or Yet Another Header Utility</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_exeform"></a></sup>YAHU, or Yet Another Header Utility</h1>
<p>
Ruediger R. Asche<br>
Microsoft Developer Network Technology Group</p>
<p>
January 10, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3274">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the YAHU sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article describes the architecture and implementation of YAHU.EXE, a utility that allows users to analyze executable files for all platforms supported by the Microsoft® Windows®, Windows NT™, and MS-DOS® operating systems. Special consideration is given to code recycling and interface design for applications based on the Microsoft Foundation Class Library (MFC).</p>
<h2>Introduction</h2>
<p>
Let's face it: Header utilities are the giveaways of the early 1990s. If your company has run out of ideas for freebies to send to your valued customers (with propeller beanies being the only possibility left, but the Developer Network team is about the only group of nutheads who can get away with something dorky like that), your marketing staff turns to you, the peon developer, and asks you, "What little tool can you crank out that we can give to our customers as a value-added bonus for our product?" So you dig out the product documentation, come across the structure definitions for the header file format, and bingo! "Let's write a header utility!"</p>
<p>
Well, YAHU is a header utility, pretty much like the utility you developed as a stocking stuffer for version 2.0 of your product, but with two exceptions:
<ol>
<li>
Except for the user interface and selection logic, all the code in YAHU has been shamelessly plagiarized from various sources in the Microsoft® Development Library:<ul type=disc>
<li>
The code for processing MS-DOS® and new executable (NE) files comes from the EXEVIEW sample application (grateful thanks to Scott McCraw).<br><br></li>
<li>
The code for processing portable executable (PE) files comes from two articles in the MSDN Library: <a href="msdn_pefile.htm">"The Portable Executable File Format from Top to Bottom"</a> by Randy Kath, and "Peering Inside the PE: A Tour of the Win32 Portable Executable File Format" (<i>Microsoft Systems Journal 9</i>, March 1994) and the accompanying sample by Matt Pietrek.<br><br></li>
<li>
The code that implements the <b>CPerfData</b> class (which displays the process list) was purloined from the PVIEWER sample in the Win32® Software Development Kit (SDK) for Windows NT™.<br><br></li>
<li>
The hex dump code was purloined from Nigel Thompson's FILEDUMP sample (see Sample Code, Book and Periodical Samples, Animation Techniques for Win32 Samples in the MSDN Library).<br><br></li>
<li>
The code to crank out run-time information about dynamic-link libraries (DLLs) was adapted from Jeffrey Richter's INJLIB code, which accompanies "Load Your 32-bit DLL into Another Process's Address Space Using INJLIB" (<i>Microsoft Systems Journal</i> 5, May 1994) with some help from the DEBUG sample application in the Win32 SDK for Windows NT 3.5 and <a href="msdn_debug.htm">"The Win32 Debugging Application Programming Interface"</a> by Randy Kath.</li>
</ul>
</li>
<li>
YAHU is sort of the ultimate header utility, because it incorporates header file information for almost all known executable file formats, and it can be extended fairly easily for other formats. Also, YAHU includes a number of additional features that I copied and pasted from other sources, as I listed above. Thus, after YAHU, you should look for another tool to stuff your product box with. Sorry.</li>
</ol>
<p>
In this article, I will not elaborate on the code that I pasted from other sources, which is already described elsewhere. The article will focus on the user interface and on any code changes significant enough to merit discussion.</p>
<p>
The entire application took about two weeks to crank out, mostly due to the awesome abstraction mechanisms that the Microsoft Foundation Class Library (MFC) provides. (Don't ask what ate up the rest of my time. . .) If, after reading this article, you are not convinced that MFC is the coolest thing since sliced bread, you are probably more interested in heli-skiing or reading comic strips than you are in working with computers, which is perfectly fine with me.</p>
<h2>What Is the Tool Good for?</h2>
<p>
Let us first play with YAHU a little bit to see what it actually does. From the File menu, choose the Open command and select any executable file. YAHU determines whether the file is an MS-DOS, a 16-bit Windows®, or a 32-bit Windows executable file or DLL, a VxD, or none of the above. Depending on the outcome, YAHU creates one or more multiple-document interface (MDI) child windows in its client area.
<ul type=disc>
<li>
Each file that you load opens a hex dump window, which allows you to view the byte contents of the file as a sequence of hexadecimal values. <br><br></li>
<li>
If YAHU recognizes the file as an executable file, it also creates a window that displays the MS-DOS (old executable) header.<br><br></li>
<li>
A Windows 16-bit NE file opens a window that displays the Windows NE executable header, in addition to the MS-DOS header window.<br><br></li>
<li>
A Windows 32-bit PE file is associated with two windows: an MS-DOS header window, as we discussed, and a window that displays the 32-bit executable header. When the latter window is active, the File menu includes a new command: Execute. If you choose this command, YAHU will execute the file (unless the file specifies a DLL, a device driver, or another non-executable module), and one pane of the 32-bit header display window will display information about DLLs as they are loaded and unloaded.</li>
</ul>
<p>
A second pane in the status bar displays the name and type of the file that is associated with the active window.</p>
<p>
Eventually, YAHU displays a permanent window that shows a list of currently running processes. This window tells you which processes are currently available and allows you to kill individual processes if necessary.</p>
<h2>Application Architecture</h2>
<p>
YAHU is an MFC application that includes many classes. The figure below shows the class hierarchy within YAHU.</p>
<p>
<img src="exeform_1.gif" border=0></p>
<p class=label>
<b>YAHU class hierarchy</b></p>
<p>
In the figure above, all the base classes provided by MFC are shown with a grey background. To add support for other file formats, you need to add the following:
<ul type=disc>
<li>
A class derived from <b>CFileView</b><br><br></li>
<li>
A class derived from <b>CChildFrame</b><br><br></li>
<li>
A document template<br><br></li>
<li>
Modifications to the <b>CViewfileDoc</b> implementation</li>
</ul>
<p>
We will look at extending the application in the final section of this article.</p>
<p>
The classes do the following:</p>
<p>
The <b>CViewfileDoc</b> class, being a derivative of the <b>CDocument</b> class, is the "container" of a document—whenever you open a file, the application creates a new document. The document maps the executable file into the application's address space and exports member functions to access the file mapping. Also, the code in the <b>OnOpenDocument</b> member function determines the document's file type and creates the appropriate view(s) by calling <b>CreateFrame</b> on one or more document templates.</p>
<p>
Each file type is associated with a frame class that is derived from <b>CChildFrame</b>, which is a frame class that associates a splitter window with the frame. Each pane in the splitter window is associated with a view that is derived from <b>CFileView</b>, which is a base class that roughly associates a scrollable list box with its client area. An entry in one of the panes is basically an item in the associated list box.</p>
<p>
The <b>CRawView</b> and <b>CRawFrame</b> classes implement the hex dump windows that are automatically opened for each document. There is nothing interesting about these classes, really. The only difference between <b>CRawFrame</b> and <b>CMDIChildWnd</b> is that <b>CRawFrame</b> displays its client window minimized by default; it accomplishes this by overriding the <b>OnCreateClient</b> member function:</p>
<pre><code>BOOL CRawFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext)
{
  if (!CMDIChildWnd::OnCreateClient(lpcs, pContext)) return FALSE;
 &nbsp;&nbsp;&nbsp; ShowWindow(SW_MINIMIZE);
 &nbsp;&nbsp;&nbsp; return TRUE;
}
</code></pre>
<p>
Ninety-nine percent of <b>CRawView</b> is provided courtesy of Nigel Thompson, and 1 percent is cut-and-paste on my side, honestly. I don't have the slightest idea what Nigel did—I had no inclination to rethink the process for converting bytes to ASCII representations of their hex values and displaying them in a window, so I recycled Nigel's code. Had it taken me any longer than 15 minutes to generate the classes and paste Nigel's code into the classes, I wouldn't have done it.</p>
<p>
Finally, the <b>CPViewDoc</b>, <b>CPView</b> and <b>CNoSysFrame</b> classes are the building blocks of the process list. <b>CPViewDoc</b> is almost identical to <b>CDocument</b>; the only difference is that the <b>OnNewDocument</b> member function of <b>CPViewDoc</b> sets the title of the document to "Process List." <b>CNoSysFrame</b> is almost identical to <b>CMDIChildWnd</b>; the only difference is that <b>CNoSysFrame</b> overrides the <b>PreCreateWindow</b> member function to ensure that the window is displayed without a System menu (because I wanted to make the process list window permanent).</p>
<h3>Modularity Considerations</h3>
<p>
The key to the modularity of YAHU is that each view is responsible for one logical section of the file header. For example, if YAHU detects that a file is a 32-bit PE file, it generates a splitter window consisting of six panes (therefore, six <b>CPEView</b> instances, because each pane accommodates one view). One view displays the resources of a PE file, another view displays the import and export tables, and so on. The associated frame is responsible for "sorting out" the sections of the executable file and dispatching them to the appropriate views. That is, the frame "knows" the sections that a file format comprises and how to obtain the relative starting address of each section, and then calls a member function of one of the panes. The member function dissects that section and displays the information in the list box associated with the pane.</p>
<p>
Thus, YAHU has a three-layer "granularity" that consists of the document, frame, and view classes:
<ul type=disc>
<li>
The document knows how to determine the type of its associated file and dispatches the appropriate frames.<br><br></li>
<li>
The frame knows the sections of the file and dispatches the sections to their respective frames.<br><br></li>
<li>
The view knows how to render each section. The view is also responsible for handling type-specific commands. For example, the PE View menu has an additional item, Execute, that allows the user to execute the given file and compile run-time information. The logic to implement this feature resides in the <b>CPEView</b> file class.</li>
</ul>
<p>
The logic that sorts out the file types and dispatches the appropriate frames is shown below. Note that almost every executable file that is known to a Microsoft operating system begins with an MS-DOS file header. Thus, for portable executables, linear executables (LE), new executables, and MS-DOS executables, YAHU generates an MS-DOS header window as well as a window that contains specific header information. The logic in <b>CViewfileDoc</b> that dispatches windows depending on the file type creates one <b>CDOSFrame</b> object for every document that is created (code from <b>CViewfileDoc::OnOpenDocument</b>):</p>
<pre><code>CFrameWnd *pNewFrame=NULL;
  
  // First check to see if there is an MS-DOS header.
 &nbsp; if (CDOSView::IsMyKindOfFile(m_lpImage))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsprintf(szStatusMessage,"DOS signature found for %s",lpszFileName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewFrame = theApp.m_pDOSTemplate-&gt;CreateNewFrame(this,NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pNewFrame)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theApp.m_pDOSTemplate-&gt;InitialUpdateFrame(pNewFrame, this, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp; }

 // Now look for additional info. Note that an MS-DOS header has already been 
 // created here...
 &nbsp; if (CPEView::IsMyKindOfFile(m_lpImage))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; wsprintf(szStatusMessage,"PE signature found for %s",lpszFileName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewFrame = theApp.m_pPETemplate-&gt;CreateNewFrame(this,NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pNewFrame)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theApp.m_pPETemplate-&gt;InitialUpdateFrame(pNewFrame, this, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; else if (CNEView::IsMyKindOfFile(m_lpImage)) 
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsprintf(szStatusMessage,"NE signature found for %s",lpszFileName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewFrame = theApp.m_pNETemplate-&gt;CreateNewFrame(this,NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pNewFrame)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theApp.m_pNETemplate-&gt;InitialUpdateFrame(pNewFrame, this, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; else if (CLEView::IsMyKindOfFile(m_lpImage))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsprintf(szStatusMessage,"LE signature found for %s",lpszFileName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pNewFrame = theApp.m_pLETemplate-&gt;CreateNewFrame(this,NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pNewFrame)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theApp.m_pLETemplate-&gt;InitialUpdateFrame(pNewFrame, this, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; else if (!pNewFrame)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsprintf(szStatusMessage,"No known signature found for 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %s",lpszFileName);
 &nbsp;&nbsp;&nbsp;&nbsp; pNewFrame = NULL;
 &nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp; m_PriorityFrame=pNewFrame; // last frame created...
</code></pre>
<p>
<b>m_PriorityFrame</b> is a member variable of the <b>CViewfileDoc</b> class. If there are multiple frames, this member variable indicates which of these should receive the initial focus. When a new document has been created, the custom member function <b>CViewfileDoc::ActivateTheRightFrame</b> is invoked, which activates the priority frame. This is necessary because MFC will, by default, always create one frame to go with the document, and, when the application returns from <b>OnOpenDocument</b>, will activate this first frame. This frame is, conveniently enough, <b>CRawFrame</b>, because in the list of document templates generated during startup, <b>CRawFrame</b> comes first. If we didn't use <b>m_PriorityFrame</b>, the active view would always be the hex dump view, which is not what I wanted, with all due respect to Nigel's code.</p>
<p>
The other advantage of <b>CRawFrame</b> coming first in the list of generated templates is that if the file does not have any known signature, YAHU displays only the hex dump window. Once again, YAHU provides this functionality without a single additional line of code. </p>
<p>
Note that because the MS-DOS header, by definition, always starts at file offset 0, the logic in <b>CDOSFrame</b> can accommodate other file types with no modification. In other words, once the logic for the MS-DOS frame was implemented, associating a PE, NE, or LE file with the appropriate MS-DOS frame came for free—I did nothing but add two lines to the code above. This is software designer's heaven, I think—making use of the code that is already there with a single function call—no tricks, no traps, no sales pitches.</p>
<p>
If you don't like the order in which the information is presented in the panes, you can simply change the code in the respective <b>OnInitialUpdate</b> member functions of the frame classes. We will look at that in more detail later in this article.</p>
<h3>Process Monitoring</h3>
<p>
One of the features I had put on the wish list for YAHU was the ability to monitor dynamic loading and unloading of DLLs in a given process. One of the most common problems you encounter when running Windows-based applications is that you may have several versions of a DLL on your disk, and it is not always easy to figure out which version of the DLL was loaded by your application. If your application faults or behaves erratically, knowing the DLLs that your application loads and their paths can save you a significant amount of time. Ideally, YAHU should be able to tell you exactly which DLL is loaded or unloaded from a process, at what time, and where the image of the DLL resides.</p>
<p>
Two problems hinder YAHU's (or any similar utility's) progress in accomplishing this goal:
<ul type=disc>
<li>
The Win32 debugging application programming interface (API) does allow a parent process to monitor DLL loading and unloading events, but the appropriate data structures contain only the DLL's name, not its full path (for example, KERNEL32.DLL, not C:\WINNT\SYSTEM32\KERNEL32.DLL).<p class=tl>
To work around this problem, YAHU employs a technique loosely modeled after Jeffrey Richter's INJLIB sample (which accompanies "Load Your 32-bit DLL into Another Process's Address Space Using INJLIB" in the <i>Microsoft Systems Journal</i> 5, May 1994). YAHU spawns the executable as a debuggee process so it can monitor debug events in the target process. When YAHU encounters a DLL_LOAD_EVENT or DLL_UNLOAD_EVENT, it injects a remote thread into the debuggee process, passing the DLL's base address in a memory block that both YAHU and the debuggee can read from and write to. However, unlike Jeffrey Richter's code, which loads a custom library in the remote thread function, YAHU's remote thread function simply calls <b>GetModuleFileName</b> on that DLL and copies the returned string back into the same shared memory area.</P><p class=tl>
Note that this strategy is necessary only because the debugging API does not present an easy way to retrieve the full path name of a remote DLL.</P></li>
<li>
The strategy explained above works only for 32-bit applications. If you execute a 16-bit application under Windows NT and watch the DLL load and unload events, you will see that only 32-bit DLLs are reported as loaded and unloaded.<p class=tl>
This makes sense, of course. Recall that any 16-bit application running under Windows NT will run in the address space of a 32-bit process called NTVDM/WOW, which executes something close to a 32-bit copy of Windows 3.<i>x</i>. All the Windows NT kernel ever sees is the 32-bit NTVDM.EXE application, which is responsible, among other things, for emulating the 16-bit <b>LoadLibrary</b> and <b>FreeLibrary</b> calls. A 16-bit DLL, as far as the Windows NT kernel is concerned, is nothing but a file that will be mapped somewhere into an NTVDM's address space. NTVDM knows how to resolve the fixup references in the library, execute code there, and so on.</P><p class=tl>
This is similar to the way Windows 3.<i>x</i> handles MS-DOS applications—all that the Windows operating system "sees" of the application is an instance of a Windows-based application, WINOLDAP.EXE.</P></li>
</ul>
<p>
So how do we monitor DLL loading and unloading activity in 16-bit processes under Windows NT? I have good news and bad news. In the Development Library, under Unsupported Tools and Utilities, Windows Tools, you will find a tool called WPS, which was written for Windows 3.<i>x</i>. WPS scans the module list and reports the full path names of all loaded DLLs. In Windows 3.<i>x</i>, DLLs share a single address space, so WPS can grab all DLLs in one global scan.</p>
<p>
The bad news is that WPS uses undocumented information about internal system data structures, so I cannot give you the code for WPS, nor can I use the information myself in YAHU. Sorry.</p>
<p>
The good news is that the copy of the Windows 3.<i>x</i> kernel executed in NTVDM.EXE so closely resembles the real Windows 3.<i>x</i> kernel that the same undocumented data structures still exist under Windows NT, and WPS appears to work fine in an NTVDM process.</p>
<p>
Now I have more bad news. Under Windows NT 3.1, WPS sufficiently displayed all 16-bit DLLs because all 16-bit applications were executed in (and, therefore, all 16-bit DLLs were loaded into) a single NTVDM process. Under Windows NT 3.5, however, you can run a 16-bit application in its own separate address space, which creates a new instance of an NTVDM/WOW process dedicated to executing the 16-bit application. Thus, WPS cannot monitor a 16-bit application that is executed in its own address space <i>unless</i> the 16-bit application has a built-in facility for launching other executables. If that facility exists, you can use it to load WPS into the address space of that process. If that facility does not exist, the only way for you to determine the DLLs loaded by a 16-bit application under Windows NT 3.5 is to launch that application and WPS in the same "standard" NTVDM.</p>
<h2>Extending YAHU to Custom File Formats</h2>
<p>
As I mentioned earlier, you can extend YAHU's functionality fairly easily to work on other file formats such as MS-DOS device drivers, POSIX executables, RIFF files (for example, .WAV or .MID files), OLE structured storage files, and so on. In a fully operational, OLE-based operating system, you could build the functionality for retrieving header information in a custom OLE object that interacts with YAHU in a well-defined way, and simply design a custom control for the desired header format.</p>
<p>
For the time being, however, extending YAHU to other file formats requires adding code to YAHU, as I will explain below.</p>
<p>
Let's assume that you wish to add support for a custom file format used by document files with a .DCT extension. Follow the steps below.</p>
<p>
<b>Step 1.</b> Using ClassWizard, create a new class (<b>CDCTView</b>, or whatever you wish to call it) derived from <b>CFileView</b>. (Include FILEVIEW.H in the source file for the new class.)</p>
<p>
<b>Step 2.</b> Use ClassWizard again to create a new class (for example, <b>CDCTFrame</b>) derived from <b>CChildFrame</b>. (Include CHILDFRM.H in the implementation file for that class.)</p>
<p>
<b>Step 3.</b> The class derived from <b>CFileView</b> should support the following member functions:
<ul type=disc>
<li>
static <b>BOOL</b> <b>IsMyKindOfFile</b>(<b>BYTE *</b><i>lpImage</i>)<p class=tl>
Given a pointer to a file image, this public member function determines whether the file image format matches the file format that the class knows how to decode.</P></li>
<li>
void <b>DispatchDoubleClick</b>(<b>int</b> <i>iVal</i>)<p class=tl>
This member function is invoked when the user double-clicks an entry in the list box that is associated with the view. The <i>iVal</i> parameter specifies the list box index that the user clicked.</P></li>
<li>
void <b>OnInitialUpdate</b>(void)<p class=tl>
(Generate with ClassWizard!) This member should set the caption of the parent frame window to a string that specifies the file format type; for example:</P><pre><code>void CDCTView::OnInitialUpdate()
{
CFileView::OnInitialUpdate();
GetParentFrame()-&gt;SetWindowText("My custom file format for"+GetDocument()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;GetPathName());
};
</code></pre>
</li>
</ul>
<p>
In addition to these members, the view typically contains functions that decode file contents and display them in the window. If you wish to display anything, simply use the <b>CFileView</b> members <b>m_szBuf</b> and <b>AddStringAndAdjust</b>; for example, as follows:</p>
<pre><code>void CDCTView::DisplayDummy()
{
wsprintf(m_szBuf,"Dummy string");
AddStringandAdjust(m_szBuf);
};
</code></pre>
<p>
This will add the entry "Dummy string" to <b>CDCTView</b> and readjust the scroll bars of the list box that is associated with the view.</p>
<p>
<b>Step 4.</b> The <b>CDCTFrame</b> class should support the following member function that is generated with ClassWizard:</p>
<p>
<b>BOOL</b> <b>OnCreateClient</b>(<b>LPCREATESTRUCT</b> <i>lpcs</i>, <i>CCreateContext</i>* <i>pContext</i>)</p>
<p>
The <b>OnCreateClient</b> function should perform the following operations:
<ul type=disc>
<li>
Set the member variables <b>m_iNumberRows</b> and <b>m_iNumberCols</b> to the number of rows and columns of panes that you want in the splitter window.<br><br></li>
<li>
Set the member variable <b>m_ViewClass</b> to the RUNTIME_CLASS that corresponds to the view that you created.<br><br></li>
<li>
Call the base class, which will generate the splitter frame for you.<br><br></li>
<li>
Call the appropriate member functions of the view class to display information in the panes. We will look at an example in a second. If you want the window to pop up without displaying information, you can ignore this step for the time being. </li>
</ul>
<p>
We will look at a typical implementation of the <b>OnCreateClient</b> member function after we complete the last two steps.</p>
<p>
<b>Step 5.</b> In VIEWFILE.CPP, add a member variable to accommodate your template, and change the <b>InitInstance</b> member function by adding a new document template, as shown below. (<i>Do not</i> put the code at the beginning of the function; <b>m_pRawTemplate</b> must be registered first.)</p>
<p>
VIEWFILE.H file:</p>
<pre><code>public:
.
.
.
CMultiDocTemplate *m_pViewTemplate;
CMultiDocTemplate *m_pCDCTTemplate;&nbsp;&nbsp; // ...Or whatever name you choose...
.
.
.
</code></pre>
<p>
VIEWFILE.CPP file:</p>
<pre><code>.
.
.
m_pCDCTTemplate = new MultiDocTemplate(
  IDR_CDCTTYPE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Associate this with menus, icons, etc.
  RUNTIME_CLASS(CViewfileDoc),&nbsp; // Our file document
  RUNTIME_CLASS(CDCTFrame),&nbsp;&nbsp;&nbsp;&nbsp; // The new frame type
  RUNTIME_CLASS(CDCTView)),&nbsp;&nbsp;&nbsp; // Our new view, but this is pretty bogus anyway.
AddDocTemplate(m_pCDCTTemplate);&nbsp;&nbsp; // Register the new template.
</code></pre>
<p>
<b>Step 6.</b> In VIEWFDOC.CPP, edit the <b>CViewfileDoc::OnOpenDocument</b> member function to spawn a new frame when it encounters a document of the appropriate type. The code will probably look something like this:</p>
<pre><code>if (CDCTView::IsMyKindOfFile(m_lpImage))
{ wsprintf(szStatusMessage,"My custom signature found for %s",lpszFileName);
  pNewFrame = theApp.m_pDCTTemplate-&gt;CreateNewFrame(this,NULL);
  if (pNewFrame)
  theApp.m_pDCTTemplate-&gt;InitialUpdateFrame(pNewFrame,this,TRUE);
}
</code></pre>
<p>
The <b>szStatusMessage</b> member holds a string that is displayed whenever a window that is associated with the current document is activated. </p>
<p>
If you have followed the instructions up to this point, you should be able to run YAHU and select a file of your custom type. YAHU will display a hex view of that file and a new empty frame with as many splitter panes as you specified. Displaying the information and reacting to user input is up to the logic in your view and frame classes. You don't have to edit any more existing files after this point.</p>
<h3>Displaying Information</h3>
<p>
Let's look at the <b>CNECFrame::OnCreateClient</b> member function to see what it does to dump header information for custom classes. I will comment on the code as we go along.</p>
<p>
As we discussed before, the code sets up the appropriate number of rows and columns in your splitter window and has the base class create the frame for you:</p>
<pre><code>BOOL CNECFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext) 
{&nbsp; 
 m_iNumberRows = 3;
 m_iNumberCols = 2;
 m_ViewClass = RUNTIME_CLASS(CNEView);
 if (!CChildFrame::OnCreateClient(lpcs,pContext)) return FALSE;
</code></pre>
<p>
In the next code fragment, we use structured exception handling because the new executable header file format contains indirect references. If the file is corrupt, or looks like a new executable but actually isn't, trying to dereference those relative structures may cause GP faults. By wrapping the entire code into structured exception handling and catching GP faults in the <b>__except</b> clause, we allow the code to recover gracefully from working on bad file images.</p>
<pre><code>&nbsp;_try {
</code></pre>
<p>
Let's display the new header information (as opposed to the resources, the import and export information, and so on) in the upper left pane (pane (0, 0)):</p>
<pre><code>CNEView *cfMyPointer = (CNEView *)m_wndSplitter.GetPane(0,0);
</code></pre>
<p>
Below, we call a member function in the <b>CFileView</b> class that knows how to take a data structure and disassemble it into its members. The <b>FillInTaggedData</b> function internally calls <b>AddStringandAdjust</b> to fill its list box. Note that some functions that are fairly generic are defined in the <b>CFileView</b> base class so that all derived classes can use them, whereas some of the more specialized functions are defined in the derived classes. You might want to play with the <b>DisplayDummy</b> function we defined earlier to see what happens here. Note that we decide which pane the output goes to by selecting a pane and then calling a display member function of the view associated with that pane. This can be changed easily at any time. Note also that the <b>CViewfileDoc</b> member functions <b>AdjustPointerAbsolute</b> and <b>AdjustPointerRelative</b> provide us with the pointers into the file image:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PIMAGE_DOS_HEADER lpImage = (PIMAGE_DOS_HEADER)m_AssociatedDocument
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;AdjustPointerAbsolute(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PIMAGE_OS2_HEADER lpNewHeader = (PIMAGE_OS2_HEADER)(unsigned char 
*)m_AssociatedDocument-&gt;AdjustPointerAbsolute(lpImage-&gt;e_lfanew);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cfMyPointer-&gt;FillInTaggedData((unsigned char *)lpNewHeader,&amp;tlNEHeader);
int iModuleEntries = lpNewHeader-&gt;ne_cmod;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HEADERTEMPLATE hT = {"Imported Names: ","%s"};
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char *pImportTable;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pImportTable = m_AssociatedDocument-&gt;AdjustPointerRelative
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (lpNewHeader-&gt;ne_imptab);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char *pModuleTable;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pModuleTable = (unsigned char *)lpNewHeader;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pModuleTable+=((PIMAGE_OS2_HEADER)pModuleTable)-&gt;ne_modtab;
</code></pre>
<p>
Now we move on to the next pane and display some stuff here. You get the idea, so I won't go into details. It's more or less a repeating game of "select a pane, move the file pointer to the next section, and call a member function in the view to display the relevant data."</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cfMyPointer = (CNEView *)m_wndSplitter.GetPane(0,1);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cfMyPointer-&gt;FillInChainedStructures(iModuleEntries, &amp;hT,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (WORD *)pModuleTable,pImportTable);

 .. display more stuff until all information is sucked out
 &nbsp;&nbsp;&nbsp;&nbsp; }
</code></pre>
<p>
Finally, the <b>__except</b> clause at the end, as I explained before, allows us to recover gracefully from corrupted file images:</p>
<pre><code>&nbsp;_except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
 &nbsp; { 
 &nbsp;&nbsp; AfxMessageBox("corrupted file; cannot display all information");
 &nbsp; }
 return TRUE;
};
</code></pre>
<h3>Value-Added Functionality</h3>
<p>
Now we have all the tools we need to display header information in a custom window. What if we want more? Where, for example, do we add the functionality that allows YAHU to execute an application and monitor its DLL usage? How do we implement custom extensions? If we wanted to extend YAHU to display header information for RIFF files, we might want to add a Play command to invoke a sound playback or video display routine. Where would we do it?</p>
<p>
One of the really cool things about Visual C++™ (and inherited by MFC) is that you can keep all of these features strictly local. The changes you make to add new functionality need only go into the view class (in our example, <b>CDCTView</b>). </p>
<p>
Let us assume that your document type is designed to be processed by your application, BESTAPP.EXE (which, unfortunately, doesn't ship with a free .EXE header utility any longer, remember?). What if we wanted to add the custom command "Run BESTAPP" to the File menu to load a copy of the file that is currently displayed? Nothing easier than that. First, load VIEWFILE.RC into Visual C++, and add a custom menu to the identifier that goes with your document template. (Referring to our earlier example, that menu would be associated with the identifier IDR_CDCTTYPE.) Add the Run BESTAPP command to the menu. (Now that you're in the .RC file, you might also want to add an icon for an IDR_CDCTYPE frame and extend the IDR_RAWTYPE string to add your custom .DCT files to the file list in the MFC Open File dialog. Remember, it's all free—you don't need to do anything but modify the resources. I just love MFC!)</p>
<p>
Next, add a member function to the <b>CDCTView</b> class that handles the Run BESTAPP command. That function would probably call <b>CreateProcess</b> with the current file name or call <b>CreateProcess</b> on the file name itself (if there is an association between a .DCT file and BESTAPP.EXE in the Registry).</p>
<p>
If you want the user to be able to initiate further processing by double-clicking an entry in either pane, simply add code to the <b>DispatchDoubleClick</b> member function of the view class. You might want to check the code in <b>CPEView::DispatchDoubleClick</b> for an example for how to do this.</p>
<h2>Summary</h2>
<p>
YAHU is a good example of how MFC lets you do a number of very impressive things in a very short time (especially if you take other people's code and collapse several different applications into one). By sorting out functionalities between views, frames, and documents, you can account for the similarities and differences between file formats in an easy, clean, and extensible way.</p>
<p>
You can extend YAHU in many ways. Items I have on my list (but haven't bothered to implement yet) include in-line display and editing of resources, and a more generous set of value-added options for existing file formats (for example, gathering more profile information at run time). Other features you can implement include extending the set of file formats that can be processed, for example, to POSIX executables or RIFF files.</p>
<p>
The YAHU user interface is currently not very user-friendly. Ideally, YAHU should not have multiple panes, and all the information about the executables should be displayed in a tree view control. At the time I wrote this article, MFC did not support tree view controls, and I didn't really feel like reinventing the wheel. However, to implement a different user interface, you would need to make changes only to the view and frame base classes <b>CFileView</b> and <b>CChildFrame</b>.</p>
<p>
As a final note, please be aware that Windows 95 will provide built-in functionality (such as file viewers) that will make a few of YAHU's tasks obsolete. For more information, see <a href="msdn_fileview.htm">"Creating File Viewers in Windows 95"</a> by Nancy Cluts in the MSDN Library.</p>
</BODY>
</HTML>

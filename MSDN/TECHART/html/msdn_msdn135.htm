<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 135: Preventing a User from Editing the Contents of a Text Box Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn135"></a></sup>Tip 135: Preventing a User from Editing the Contents of a Text Box Control</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Text Box</b> control in Microsoft® Visual Basic® lets your user type text that can later be used within your program. Alternatively, you may want to display some text but do not want the user to be able to edit that text. This article explains how to make a <b>Text Box</b> control's contents read-only.</p>
<h2>Making a Text Box Control Read-Only</h2>
<p>
When developing a program in Microsoft® Visual Basic®, you may want to display some data in a <b>Text Box</b> control. If the <b>MultiLine</b> property is set to True, the text will automatically wrap to the next line. In addition, if the <b>ScrollBars</b> property of the <b>Text Box</b> control is set to 3-Both (or 1-Vertical or 2-Horizontal), your user can scroll through the control's contents.</p>
<p>
However, you might not want your user to be able to edit the text that is stored in the <b>Text Box</b> control. You can set the contents of a <b>Text Box</b> control to read-only status by using the Microsoft Windows® programming application interface (API) <b>SendMessage</b> function.</p>
<p>
The <b>SendMessage</b> function can be used to send an EM_SETREADONLY message to the <b>Text Box</b> control. This makes the <b>Text Box</b> control read-only.</p>
<p>
To use the <b>SendMessage</b> function within your program, include the following <b>Declare</b> statement in the General Declarations section of your project (note that this <b>Declare</b> statement must be typed as a single line of code):</p>
<pre><code>Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" 
 &nbsp; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, 
 &nbsp; ByVal lParam As Long) As Long
</code></pre>
<p>
The <b>SendMessage</b> function requires four arguments, as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=12%><i>hwnd</i></td>
<td width=88%>A long value containing the handle of the <b>Text Box</b> control</td>
</tr>
<tr valign=top>
<td width=12%><i>wMsg</i></td>
<td width=88%>A long value containing the message to be sent, in this case EM_SETREADONLY</td>
</tr>
<tr valign=top>
<td width=12%><i>wParam</i></td>
<td width=88%>An integer value set to True to set the control's read-only flag, or False to remove the control's read-only flag</td>
</tr>
<tr valign=top>
<td width=12%><i>lParam</i></td>
<td width=88%>A long value that should be set to zero (not used by EM_SETREADONLY)</td>
</tr>
</table><br>
<p>
After the program runs the <b>SendMessage</b> function, a long value is returned, indicating success (if the value is nonzero) or false (if the value is zero).</p>
<h2>Example Program</h2>
<p>
This program shows how to prevent a user from editing the contents of a <b>Text Box</b> control without disabling the control itself.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" 
 &nbsp; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, 
 &nbsp; ByVal lParam As Long) As Long
Const WM_USER = &amp;H400
Const EM_SETREADONLY = (WM_USER + 31)
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True and its <b>ScrollBars</b> property to 3-Both.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim RetVal As Long
 &nbsp;&nbsp; RetVal = SendMessage(Text1.hwnd, EM_SETREADONLY, True, ByVal 0&amp;)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Type some text in the <b>Text Box</b> control. Notice that you can use the horizontal and vertical scroll bars to scroll through the text. You can also make changes to the text itself. Click the command button. You can still use the scroll bars or cursor keys to navigate within the <b>Text Box</b> control, but you cannot edit its contents.</p>
<h2>Additional References</h2>
<p>
"EM_SETREADONLY." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
Knowledge Base Q110403. "How to Create a Read-Only Text Box Using SendMessage API."</p>
<p>
"SendMessage." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
<a href="msdn_msdn114.htm">"Tip 114: Preventing a Portion of a Text Box from Scrolling."</a></p>
</BODY>
</HTML>

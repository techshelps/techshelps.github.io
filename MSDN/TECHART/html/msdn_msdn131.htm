<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 131: Determining Whether a DLL File Is 16-Bit or 32-Bit</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn131"></a></sup>Tip 131: Determining Whether a DLL File Is 16-Bit or 32-Bit</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
When programming in Microsoft® Visual Basic®, you use the functions stored in dynamic-link library (DLL) files to add greater scope to your applications. You must, however, use the correct DLL file (16-bit or 32-bit) in your program. This article presents a function that tells you what type of file you are dealing with.</p>
<h2>Determining a File's Type</h2>
<p>
The Microsoft® Windows® application programming interface (API) allows you to perform tasks in your Microsoft Visual Basic® applications that the Basic language itself cannot do. To perform such a task, you must call a function stored in a dynamic-link library (DLL) file.</p>
<p>
However, you must take into consideration whether you are programming in a 16-bit or 32-bit environment. If you're running in a 16-bit environment, then you can only use 16-bit DLL functions. However, if you're running in a 32-bit environment, you may be able to make calls to 16-bit and 32-bit functions, depending on the environment in question.</p>
<p>
Because your application may be run on many different operating systems (Windows version 3.1, Windows 95, OS/2®, Windows NT™, and so on), you need to find out whether files are 16-bit or 32-bit. Then you can determine which API functions can be used in your Visual Basic program.</p>
<p>
In the example program below, you can type the full path of a file you want to check. When you click the command<b> </b>button, the program reads data from the header block of the file and reports its file type.</p>
<p>
Each time an operating system saves a file on disk, the operating system prefixes the file with a header block as the first data stored in the file. This header block contains information that can be used to identify the file's type. For example, an MS-DOS® file has a header containing the two characters "MZ". When you run the <b>ExeType</b> function on this file, you would know that it is either a .COM, .CMD, .PIF, or .BAT file if the file contains the "MZ" signature in its header block.</p>
<h2>Example Program</h2>
<p>
This program shows how you can identify individual file types.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> statements to the General Declarations section of Form1:<pre><code>Option Explicit
Const ordMSDOS = 1
Const ordWindows = 2
Const ordOS2_1 = 3
Const ordNTWin = 4
Const ordNTChar = 5
Const ordDOSUnknown = 7
Const ordNotExe = 0
Const errNoFile = -1
Const errOS2_2 = -2
Const errWinOS2DLL = -3
Const errNEUnknown = -4
Const errNTNonIntel = -5
Const errNTDLL = -6
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Text1.TEXT = ""
End Sub
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; If Text1.TEXT = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; Dim FileToCheck As String
 &nbsp;&nbsp; FileToCheck = Text1.TEXT
 &nbsp;&nbsp; X = ExeType(FileToCheck)
 &nbsp;&nbsp; If X = errNoFile Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File does not exist", 16, "Error"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; Select Case X
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordMSDOS
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is MSDOS EXE file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordWindows
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is a Windows file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordOS2_1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is OS/2 1.x file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordNTWin
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is NT Windows file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordNTChar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is NT character file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordDOSUnknown
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is probably DOS extended file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case ordNotExe
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is not MSDOS EXE file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case errOS2_2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is OS/2 LE file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case errWinOS2DLL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is a DLL executable but not by us", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case errNEUnknown
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is unknown NE system", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case errNTNonIntel
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is unknown type - perhaps a RISC file", 16, "OK"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case errNTDLL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File is executable, but not by us", 16, "OK"
 &nbsp;&nbsp; End Select
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>ExeType</b>. Add the following code to this function:<pre><code>Function ExeType(sSpec As String) As Integer
 &nbsp;&nbsp; 'Check specified file to see if it is an
 &nbsp;&nbsp; 'executable file. If it is, what kind is it?
 &nbsp;&nbsp; Dim sNullChr As String
 &nbsp;&nbsp; sNullChr = Chr$(0)
 &nbsp;&nbsp; Dim hFile As Integer
 &nbsp;&nbsp; hFile = FreeFile
 &nbsp;&nbsp; 'Make sure the file exists on disk
 &nbsp;&nbsp; Dim F As String
 &nbsp;&nbsp; F = Dir$(sSpec)
 &nbsp;&nbsp; If F = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errNoFile
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open sSpec For Binary Access Read Shared As hFile
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; Dim sHeader As String * 128
 &nbsp;&nbsp; Get hFile, 1, sHeader
 &nbsp;&nbsp; 'MSDOS headers start with magic header "MZ"
 &nbsp;&nbsp; Dim sMagic As String * 2
 &nbsp;&nbsp; sMagic = Mid$(sHeader, 1, 2)
 &nbsp;&nbsp; If sMagic &lt;&gt; "MZ" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Could still be a .BAT, .CMD, .PIF, or .COM file
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'but that's not our problem here
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = ordNotExe
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 'Make an integer (Long to prevent overflows) out
 &nbsp;&nbsp; 'of offset &amp;H18 and &amp;H19 and then see if offset
 &nbsp;&nbsp; 'points beyond DOS header. If not, file is MSDOS
 &nbsp;&nbsp; 'EXE. Since Basic strings are 1-based rather than
 &nbsp;&nbsp; '0-based, all hex offsets into file must be
 &nbsp;&nbsp; 'incremented by one.
 &nbsp;&nbsp; Dim iData As Long
 &nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H20, 1)) * 256
 &nbsp;&nbsp; iData = iData + Asc(Mid$(sHeader, &amp;H19, 1)) + 1
 &nbsp;&nbsp; If iData &lt; &amp;H40 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = ordMSDOS
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 'Get the offset of new .EXE header
 &nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H3E, 1)) * 256
 &nbsp;&nbsp; iData = iData + Asc(Mid$(sHeader, &amp;H3D, 1)) + 1
 &nbsp;&nbsp; Get hFile, iData, sHeader
 &nbsp;&nbsp; Close hFile
 &nbsp;&nbsp; 'New .EXE headers start with magic header "NE"
 &nbsp;&nbsp; Dim sMagic2 As String * 2
 &nbsp;&nbsp; Dim sZero As String * 2
 &nbsp;&nbsp; sMagic = Mid$(sHeader, 1, 2)
 &nbsp;&nbsp; sMagic2 = Mid$(sHeader, 3, 2)
 &nbsp;&nbsp; sZero = sNullChr &amp; sNullChr
 &nbsp;&nbsp; 'Check for Windows/OS2 format
 &nbsp;&nbsp; If sMagic = "NE" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Get the executable file flags to check for DLL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;HE, 1))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If iData And &amp;H80 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'This is a DLL (executable but not by us)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errWinOS2DLL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Get the operating system flags (byte, not word)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H37, 1))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If iData And &amp;H2 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType ordWindows&nbsp; 'Windows
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ElseIf iData And &amp;H1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = ordOS2_1&nbsp; 'OS2 1.x
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errNEUnknown&nbsp; 'Unknown NE system
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Check for OS/2 2.x format (cannot execute from Windows or NT)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ElseIf sMagic = "LE" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errOS2_2&nbsp; 'OS/2 LE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Check for NT format
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ElseIf sMagic = "PE" And sMagic2 = sZero Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Get processor flags
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H5, 1))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case iData
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case &amp;H4C, &amp;H4D, &amp;H4E, &amp;H4F 'NT for intel 386, 486, 586, 686
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = ordNTWin&nbsp; 'NT Windows
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errNTNonIntel 'Some sort of RISC or other
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp; 'Get the EXE type flags
 &nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H18, 1))
 &nbsp;&nbsp; If iData And &amp;H20 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = errNTDLL&nbsp; 'executable, but not by us
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 'Get the subsystem flags to identify NT character
 &nbsp;&nbsp; iData = Asc(Mid$(sHeader, &amp;H5D, 1))
 &nbsp;&nbsp; If iData = 3 Then ExeType = ordNTChar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Could also identify Posix files here
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'This is an MSDOS file with a header, but it's not
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'an NE file. Many 16-bit DOS-extended executables fall
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'through here. It could also be a non-EXE file that
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'just happens to have "MZ" as its first two bytes.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExeType = ordDOSUnknown 'probably DOS extended
 &nbsp;&nbsp; End If
End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Type the name of a file in the <b>Text Box</b> and click the command button. A message box will identify what type of file it is.</p>
</BODY>
</HTML>

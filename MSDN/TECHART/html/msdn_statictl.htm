<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_statictl"></a></sup>Static Controls</h1>
<p>
Kyle Marsh<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: March 20, 1992</p>
<h2>Abstract</h2>
<p>
Static controls are child windows used in Microsoft® Windows™-based applications to display text, to draw frames or lines separating other controls, or to display icons. Static controls do not accept user input and do not send notification messages to their parent windows. This article describes how developers can define different types of static controls and can use text styles, frame styles, and rectangle styles to modify the appearance of these controls.</p>
<h2>Introduction</h2>
<p>
Static controls are used to display text, to draw frames and rectangles, and to display icons. Despite the name <i>static</i>, the information in a static control can be changed while the control exists. For example, an application can use a static control to display the amount of disk space that it is using. A static control is a good choice for this information because the user cannot change the amount of disk space used without performing some other operation. When the user performs another operation, such as deleting a file, the application updates the amount of disk space used. </p>
<p>
The application can change the information within a static control by sending a WM_SETTEXT message to the control. If the static control displays text, a pointer to the text must be sent in the<i> lParam</i> of the <b>SendMessage</b> function (or of the <b>SetDlgItemText</b> function if the control is in a dialog box). In the Microsoft® Windows™ version 3.1 graphical environment, a static control that displays an icon can change it by sending an STM_SETICON message to the control with a handle to an icon resource (<b>HICON</b>) in the <i>wParam</i> of <b>SendMessage</b>. An application obtains the handle to the icon by calling <b>LoadIcon</b>. Static controls that do not display text or icons have no user-supplied information to change, so a WM_SETTEXT message sent to the static control will be ignored.</p>
<p>
Static controls might be called "no input controls" because they accept no input from the user. If the user moves the mouse over a static control, Windows sends the control a WM_NCHITTEST message. The static control returns an HTTRANSPARENT value to Windows, which then sends the WM_NCHITTEST message to the static control's parent window. As a result of this processing, the parent window of the static control receives all mouse events. Static controls do not provide any notifications to their parent windows; in other words, they do not send any WM_COMMAND messages.</p>
<p>
Control styles for the static class include text styles, frame styles, rectangle styles, and an icon style.</p>
<h2>Text Styles and Modifiers</h2>
<p>
The five basic text styles for static controls are:
<ul type=disc>
<li>
SS_RIGHT<br><br></li>
<li>
SS_LEFT<br><br></li>
<li>
SS_CENTER<br><br></li>
<li>
SS_LEFTNOWORDWRAP<br><br></li>
<li>
SS_SIMPLE</li>
</ul>
<p>
The SS_NOPREFIX style can modify a static control that has any of these text styles. Although SS_NOPREFIX is called a style, it is really a modifier to the text styles.</p>
<h3>SS_NOPREFIX</h3>
<p>
SS_NOPREFIX instructs the static control not to interpret an ampersand (&amp;) character in a text string as a prefix character for the keyboard access key. The static control normally removes an ampersand in a text string and underlines the following character; the control displays two ampersands (&amp;&amp;) as a single ampersand. When SS_NOPREFIX is used, the static control displays an ampersand as an ordinary character. To modify a text style with the SS_NOPREFIX modifier, you combine the text style with SS_NOPREFIX using the bitwise OR operator; for example, in a resource script file:</p>
<pre><code>CONTROL&nbsp;&nbsp; "Sample &amp;Text", 104, "Static", SS_LEFT | SS_NOPREFIX, 33,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 91, 94, 13 
</code></pre>
<p>
or</p>
<pre><code>LTEXT&nbsp;&nbsp; "This is Left Text with No &amp;Prefix", 104, 33, 91, 94, 13,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SS_NOPREFIX
</code></pre>
<h3>SS_RIGHT</h3>
<p>
The SS_RIGHT text-style static control defines an area that displays<b> </b>the given text. The application determines the size of the control. The control formats the text before it is displayed. When a word extends past the end of the control, the word automatically wraps to the next line. All displayed text is right justified. If the control is too small to display the text after it has been word wrapped, only the text within the size of the control is visible. An <b>RTEXT</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>RTEXT&nbsp;&nbsp; "This is Right Text", 101, 33, 22, 94, 13
</code></pre>
<h3>SS_LEFT</h3>
<p>
The SS_LEFT text-style static control defines an area that displays the given text. The application determines the size of the control. The control formats the text before it is displayed. When a word extends past the end of the control, the word automatically wraps to the next line. All displayed text is left justified. If the control is too small to display the text after it has been word wrapped, only the text within the size of the control is visible. An <b>LTEXT</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>LTEXT&nbsp;&nbsp; "This is Left Text", 101, 33, 22, 94, 13
</code></pre>
<h3>SS_CENTER</h3>
<p>
The SS_CENTER text-style static control defines an area that displays the given text. The application determines the size of the control. The control formats the text before it is displayed. When a word extends past the end of the control, the word automatically wraps to the next line. All displayed text is centered. If the control is too small to display the text after it has been word wrapped, only the text within the size of the control is visible. A <b>CTEXT</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CTEXT&nbsp;&nbsp; "This is Centered Text", 101, 33, 22, 94, 13
</code></pre>
<h3>SS_LEFTNOWORDWRAP</h3>
<p>
The SS_LEFTNOWORDWRAP text-style static control defines an area that displays the given text. The application determines the size of the control. The control formats the text before it is displayed. Words that extend past the end of the control are clipped; no word wrapping is done, and the text is left justified. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "This is Left Text", 104, "Static", 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SS_LEFTNOWORDWRAP, 33, 91, 94, 13 
</code></pre>
<h3>SS_SIMPLE</h3>
<p>
SS_SIMPLE displays text faster than the other static text-style controls because it uses <b>TextOut</b> rather than <b>DrawText</b> to display text. The text that an SS_SIMPLE static control displays is opaque and is clipped to the size of the control. The following conditions must be met for SS_SIMPLE controls to work correctly:
<ol>
<li>
The text must be on one line and should fit within the control. If the text does not fit within the control, it is clipped.<br><br></li>
<li>
The control must never be disabled. SS_SIMPLE static controls do not check to see whether the control is disabled. Text is never grayed.<br><br></li>
<li>
The text must never be changed to a shorter string. SS_SIMPLE static controls do not clear the control's display area when displaying text. If a shorter string is displayed, the part of the original string that is longer than the new shorter string is displayed.<br><br></li>
<li>
The parent window must not respond to a WM_CTLCOLOR message. An SS_SIMPLE control always uses the system colors Window (COLOR_WINDOW) and Window Text (COLOR_WINDOWTEXT) for its window and text regardless of what the control's parent window wants.</li>
</ol>
<p>
When SS_SIMPLE is combined with SS_NOPREFIX, the control uses <b>ExtTextOut</b> to display text. Because <b>ExtTextOut</b> clears the control and displays the new text in one fast operation, the text of an SS_SIMPLE | SS_NOPREFIX static control can be changed with minimal visible flicker, and the new text string can be shorter than the original string.</p>
<p>
A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "Simple Text", 104, "Static", SS_SIMPLE, 33, 91, 94, 13 
</code></pre>
<h2>Frame Styles</h2>
<p>
Static controls can be used to draw frames (boxes that are not filled). Frame-style static controls do not display text. The three frame-style static controls are:
<ul type=disc>
<li>
SS_BLACKFRAME<br><br></li>
<li>
SS_WHITEFRAME<br><br></li>
<li>
SS_GRAYFRAME</li>
</ul>
<h3>SS_BLACKFRAME</h3>
<p>
The SS_BLACKFRAME static control displays a frame around the control that is the same color as the Window Frame (COLOR_WINDOWFRAME). The default Windows color is black. The user can change the color by changing the window frame color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_BLACKFRAME, 33, 91, 94, 13
</code></pre>
<h3>SS_WHITEFRAME</h3>
<p>
The SS_WHITEFRAME static control displays a frame around the control that is the same color as the Window (COLOR_WINDOW). The default Windows color is white. The user can change the color by changing the window color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_WHITEFRAME, 33, 91, 94, 13
</code></pre>
<h3>SS_GRAYFRAME</h3>
<p>
The SS_GRAYFRAME static control displays a frame around the control that is the same color as the Desktop, the screen background (COLOR_BACKGROUND). The default Windows color is gray. The user can change the color by changing the desktop color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_GRAYFRAME, 33, 91, 94, 13&nbsp; 
</code></pre>
<h2>Rectangle Styles</h2>
<p>
Static controls can be used to draw rectangles (boxes that are filled). Rectangle-style static controls do not display text. The three rectangle-style static controls are:
<ul type=disc>
<li>
SS_BLACKRECT<br><br></li>
<li>
SS_WHITERECT<br><br></li>
<li>
SS_GRAYRECT</li>
</ul>
<h3>SS_BLACKRECT</h3>
<p>
The SS_BLACKRECT static control displays a frame around the control and fills the control with a solid color that is the same color as the Window Frame (COLOR_WINDOWFRAME). The default Windows color is black. The user can change the color by changing the window frame color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_BLACKRECT, 33, 91, 94, 13
</code></pre>
<h3>SS_WHITERECT</h3>
<p>
The SS_WHITERECT static control displays a frame around the control and fills the control with a solid color that is the same color as the Window (COLOR_WINDOW). The default Windows color is white. The user can change the color by changing the window color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_WHITERECT, 33, 91, 94, 13
</code></pre>
<h3>SS_GRAYRECT</h3>
<p>
The SS_GRAYRECT static control displays a frame around the control and fills the control with a solid color that is the same color as the Desktop (COLOR_BACKGROUND). The default Windows color is gray. The user can change the color by changing the desktop color in the Control Panel, or an application can call <b>SetSysColors</b>. A <b>CONTROL</b> statement in a dialog box resource file creates this static control:</p>
<pre><code>CONTROL&nbsp;&nbsp; "", 104, "Static", SS_GRAYRECT, 33, 91, 94, 13
</code></pre>
<h2>Icon Styles</h2>
<p>
Static controls can be used to display icons by using the SS_ICON style. Icon-style static controls are sized to fit the icon when it is displayed; the width and height that the application specifies are ignored. When defining an SS_ICON static control in a resource file, the icon must be defined elsewhere in the resource file, and the icon resource name must be specified as the text for the control. The icon name cannot be a file name. An <b>ICON</b> statement in a resource script file creates this static control:</p>
<pre><code>SampleIcon&nbsp;&nbsp; ICON&nbsp; sample.ico
ICON&nbsp;&nbsp; "SampleIcon", 104, 33, 91, 94, 13 
</code></pre>
<p>
In Windows version 3.1, an application can change the icon displayed by an SS_ICON static control. An application can send the STM_SETICON message to an SS_ICON control with a handle to an icon (<b>HICON</b>) in the <i>wParam</i>. <b>SendMessage</b> returns the handle to the previously displayed icon. The Windows version 3.1 STM_GETICON message causes <b>SendMessage</b> to return the handle to the currently displayed icon when sent to an SS_ICON static control.</p>
</BODY>
</HTML>

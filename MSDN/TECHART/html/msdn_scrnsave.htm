<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating 32-Bit Screen Savers with Visual C++ and MFC</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_scrnsave"></a>Creating 32-Bit Screen Savers with Visual C++ and MFC</h1>
<p>
Nigel Thompson<br>
Microsoft Developer Network Technology Group</p>
<p>
December 4, 1994</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3226">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the POP3 sample application for this technical article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3228">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the Animate library for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article describes how to create a 32-bit screen saver for Microsoft® Windows NT™ or Windows™ 95 using Visual C++™ version 2.0 and the Microsoft Foundation Class Library (MFC). The POP3 sample, which accompanies this article, uses simple animation techniques to create a really average screen saver.</p>
<h2>Introduction</h2>
<p>
Let’s come right out in the open and be honest—most screen savers are really screen burners. There, I said it. OK, now we can get on with creating a screen saver that does whatever you want.</p>
<p>
A quick tour of the Win32® software development kit (SDK) documentation reveals that writing a screen saver involves creating some simple code to handle a few messages and linking to the SCRNSAVE library. Having done that, you have a screen saver. But what if you want to use Microsoft Foundation Class Library (MFC) classes to create your masterpiece? At first sight, it looks tough because the SCRNSAVE library normally provides all the startup code, and if we want to use MFC classes, we need to let MFC provide its own startup or nothing much is going to work. </p>
<p>
A more in-depth look at the Win32 SDK documentation reveals that we also apparently need to export certain functions from our application in order to install and run it from the Control Panel. This all sounds like it’s going to be very messy with an MFC architecture underneath.</p>
<p>
Well, as it turns out, we don’t need to use the SCRNSAVE library at all—in fact, creating a screen saver is simply a matter of creating a regular application that has some command line parsing, a special entry in its string table, and .SCR as its file extension. Given those few simple facts, creating a screen saver with MFC doesn’t seem like it will be such a tough job after all, does it?</p>
<h2>Creating the Basic Framework</h2>
<p>
No, that’s <i>basic</i>, not <i>Basic</i>. If you want a Basic framework for a screen saver, that’s in the “Creating Screen Savers with Visual Basic®” class right down the hall. In this classroom, we're creating the basic framework for an MFC-based screen saver.</p>
<p>
What we need is a really cut-down MFC framework onto which we can bolt our own specific window drawing code (the essence of the screen saver). Here are the steps you need to go through to get the project started:
<ol>
<li>
Use the Visual C++™ Class Wizard to create a simple single-document interface (SDI) application with no toolbars, OLE, ODBC, printing, and so forth.<br><br></li>
<li>
Build the application to make sure everything is OK.<br><br></li>
<li>
Remove the document, view, and main frame classes from the project. Delete their associated .CPP and .H files.<br><br></li>
<li>
Add the <b>CSaveWnd</b> class files (SAVEWND.CPP and SAVEWND.H) to the project.<br><br></li>
<li>
If you want to do animation, add the <b>CAnimWnd</b> files (ANIMWND.CPP and ANIMWND.H) to your project.<br><br></li>
<li>
Derive your own window class from <b>CSaveWnd</b> (or <b>CAnimWnd </b>if you want to do animation). The new class need not do anything yet.<br><br></li>
<li>
Modify the <b>InitInstance</b> function in the project's main .CPP file (for example, POP3.CPP) to create a window of your own class.</li>
</ol>
<p>
The last step requires a bit more information.</p>
<h2>How Screen Savers Are Run</h2>
<p>
When Microsoft Windows™ starts a screen saver, either its configuration dialog box is displayed or the screen saver is activated. Windows tells the screen saver what to do by passing a command-line parameter. Table 1 lists the possible command line parameters and what they mean.</p>
<p class=label>
<b>Table 1. Command-Line Parameters</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Parameter</b></td>
<td class=label width=78%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=22%><b>/s</b>, <b>-s</b> or <b>s</b></td>
<td width=78%>Start in screen-saver mode.</td>
</tr>
<tr valign=top>
<td width=22%><b>/c</b>, <b>-c</b> or <b>c</b></td>
<td width=78%>Show configuration dialog box with whatever window is currently active as the parent window.</td>
</tr>
<tr valign=top>
<td width=22%>(None)</td>
<td width=78%>Show the configuration dialog box with no parent window.</td>
</tr>
</table><br>
<p>
The purpose of the /c option is to disable the application that invoked the screen saver (for example, the application from the Control Panel) while the screen saver's Setup dialog box is active. This is necessary so that the user can't click the Setup button in the Control Panel and get another copy of the screen saver running.</p>
<p>
Having looked at the startup options, we can now see how the application starts up and what the <b>InitInstance</b> function has in it (with some of the comments taken out to conserve space):</p>
<pre><code>BOOL CPop3App::InitInstance()
{
 &nbsp;&nbsp; if (((!strcmpi(m_lpCmdLine,"/s") 
 &nbsp;&nbsp; || !strcmpi(m_lpCmdLine,"-s")) 
 &nbsp;&nbsp; || !strcmpi(m_lpCmdLine,"s"))) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run as screen saver.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMyWnd* pWnd = new CMyWnd;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pWnd-&gt;Create();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pMainWnd = pWnd;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return TRUE;
 &nbsp;&nbsp; } else {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run the configuration dialog box.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(((!strcmpi(m_lpCmdLine,"/c") 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || !strcmpi(m_lpCmdLine,"-c")) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || !strcmpi(m_lpCmdLine,"c"))) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run config with current window as parent.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoConfig(CWnd::GetActiveWindow());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run the config dialog box with no parent.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoConfig(NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;
 &nbsp;&nbsp; }
}
</code></pre>
<p>
So if the command line says to run as a screen saver, a new <b>CMyWnd</b> object is created as the main window, and the screen saver runs. In the other cases, the configuration dialog box is shown by the <b>DoConfig</b> function:</p>
<pre><code>void CPop3App::DoConfig(CWnd* pParent)
{
 &nbsp;&nbsp; CConfigDlg dlg(pParent);

 &nbsp;&nbsp; // Set up the current parameters.
 &nbsp;&nbsp; dlg.m_iBackground = GetProfileInt("Config",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Background",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0);

 &nbsp;&nbsp; // Do the dialog.
 &nbsp;&nbsp; if (dlg.DoModal() != IDOK) return;

 &nbsp;&nbsp; // Save the new parameters.
 &nbsp;&nbsp; WriteProfileInt("Config",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Background",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.m_iBackground);
}
</code></pre>
<p>
This is a little simplistic, and I’ve been rather bad in putting literal strings directly in the calls to <b>GetProfileInt </b>and <b>WriteProfileInt</b>, but I wanted to make what’s going on really obvious. As you can see, the current state is read from the .INI file and used to initialize the dialog box. If the user clicks OK to close the dialog box, the new values are saved in the .INI file. Remember that when the application runs as a screen saver, it will always have to get this information from the .INI file, so there is no point in keeping it in variables in the application itself.</p>
<h2>A Screen Saver Window Class</h2>
<p>
All screen savers use basically the same type of window—a pop-up window that is the full size of the screen, has no borders or caption, and is on top of all the other windows. This pop-up window exists so long as the user doesn’t touch the mouse or hit a key. If you create a screen saver using the SCRNSAVE library, you get all this functionality built in. Inasmuch as we aren’t using the SCRNSAVE library, we need to handle all this stuff ourselves. To make life a little simpler (well, more organized at least), I put all the essential elements of a screen saver window into a single class (<b>CSaveWnd</b>) derived from <b>CWnd</b>. So to create your own screen saver window, you can simply derive it from <b>CSaveWnd</b>.</p>
<p>
<b>CSaveWnd</b> has three member functions: <b>Create</b>, <b>PostNcDestroy</b>, and <b>WindowProc</b>. The <b>Create</b> function creates (wow, really?) the window:</p>
<pre><code>BOOL CSaveWnd::Create()
{
 &nbsp;&nbsp; // Register a class with no cursor.
 &nbsp;&nbsp; const char* pszClassName 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = AfxRegisterWndClass(CS_HREDRAW|CS_VREDRAW|CS_SAVEBITS|CS_DBLCLKS,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ::LoadCursor(AfxGetResourceHandle(),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAKEINTRESOURCE(IDC_NULLCURSOR)));

 &nbsp;&nbsp; // Create the window.
 &nbsp;&nbsp; return CWnd::CreateEx(WS_EX_TOPMOST,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszClassName,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WS_POPUP | WS_VISIBLE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ::GetSystemMetrics(SM_CXSCREEN),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ::GetSystemMetrics(SM_CYSCREEN),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);
}
</code></pre>
<p>
Note that the application must provide the IDC_NULLCURSOR used here. This is simply a cursor with nothing visible in it. Using NULL here results in your window having an hourglass cursor.</p>
<p>
The <b>PostNcDestroy</b> function is required to do some cleanup work because the MFC application framework is a bit untidy:</p>
<pre><code>void CSaveWnd::PostNcDestroy() 
{
 &nbsp;&nbsp; // We must delete the window object ourselves because the
 &nbsp;&nbsp; // app framework doesn't do this.
 &nbsp;&nbsp; delete this;
}
</code></pre>
<p>
And finally, the <b>WindowProc</b> function handles all the keyboard and mouse events we care about, as well as a few other messages that might affect the screen saver (for example, cause it to close). Most of this code was taken directly from the Control Panel sources that are used to create the SCRNSAVE library.</p>
<pre><code>LRESULT CSaveWnd::WindowProc(UINT nMsg, WPARAM wParam, LPARAM lParam)
{
 &nbsp;&nbsp; static BOOL&nbsp;&nbsp;&nbsp;&nbsp; fHere = FALSE;
 &nbsp;&nbsp; static POINT&nbsp;&nbsp;&nbsp; ptLast;
 &nbsp;&nbsp; POINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ptCursor, ptCheck;

 &nbsp;&nbsp; switch (nMsg){
 &nbsp;&nbsp; case WM_SYSCOMMAND:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((wParam == SC_SCREENSAVE) || (wParam == SC_CLOSE)) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_DESTROY:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostQuitMessage(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_SETCURSOR:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetCursor(NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_NCACTIVATE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (wParam == FALSE) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_ACTIVATE:
 &nbsp;&nbsp; case WM_ACTIVATEAPP:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(wParam != FALSE) break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Only fall through if we are losing the focus...

 &nbsp;&nbsp; case WM_MOUSEMOVE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!fHere) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetCursorPos(&amp;ptLast);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fHere = TRUE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetCursorPos(&amp;ptCheck);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(ptCursor.x = ptCheck.x - ptLast.x) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(ptCursor.x &lt; 0) ptCursor.x *= -1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(ptCursor.y = ptCheck.y - ptLast.y) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(ptCursor.y &lt; 0) ptCursor.y *= -1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((ptCursor.x + ptCursor.y) &gt; THRESHOLD) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostMessage(WM_CLOSE, 0, 0l);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_LBUTTONDOWN:
 &nbsp;&nbsp; case WM_MBUTTONDOWN:
 &nbsp;&nbsp; case WM_RBUTTONDOWN:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetCursorPos(&amp;ptCursor);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ptCursor.x ++;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ptCursor.y ++;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetCursorPos(ptCursor.x, ptCursor.y);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetCursorPos(&amp;ptCheck);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(ptCheck.x != ptCursor.x &amp;&amp; ptCheck.y != ptCursor.y)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ptCursor.x -= 2;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ptCursor.y -= 2;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetCursorPos(ptCursor.x,ptCursor.y);

 &nbsp;&nbsp; case WM_KEYDOWN:
 &nbsp;&nbsp; case WM_SYSKEYDOWN:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostMessage(WM_CLOSE, 0, 0l);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return CWnd::WindowProc(nMsg, wParam, lParam);
}
</code></pre>
<h2>The POP3 Sample Application</h2>
<p>
Why is it called POP3? Because its predecessors were called POP and POPSCR. (I know how you love this irrelevant detail.)</p>
<p>
The sample uses some classes from my animation library to move a couple of sprites around the screen. The window class architecture looks like this:</p>
<p>
<img src="scrnsave_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The window architecture of the POP3 sample</b></p>
<p>
If you’re interested in how <b>CAnimWnd</b> works, take a look at one of my other articles, <a href="msdn_markpnt.htm">"Creating Programs Without a Standard Windows User Interface Using Visual C++ and MFC."</a></p>
<p>
The <b>CMyWnd</b> class uses two sprites created from bitmap images. It creates a timer and uses the timer ticks to change the position of the sprites on the screen. The configuration dialog box allows the user to select either a black background or the current screen image as the background.</p>
<h2>A Note About Palettes</h2>
<p>
The code in the Animate library is designed to run on 8-bit-per-pixel (bpp) displays. If you’re targeting 4-bpp or 16-bpp displays, you’re going to need to do some extra work. The palette used in the POP3 application is built differently depending on whether the user selects the screen background mode or a black background. If a black background is selected, the palette is built using a color cube, and the sprite images are mapped to that. I could just as easily have used a palette built from the color table in one of the sprites.</p>
<p>
If the user selects the current screen as the background image, the palette is built from the current contents of the system palette. If you don’t do this, the screen will change colors as your animation runs. The side effect of using the current system palette is that your animation has to make do with whatever colors it finds in this palette—not exactly the optimal solution. Tricky stuff, palettes.</p>
<p>
Here’s the way the palettes get created:</p>
<pre><code>BOOL CMyWnd::Create()
{
 &nbsp;&nbsp; // Create the palette we want to use.
 &nbsp;&nbsp; switch (m_iBackMode) {
 &nbsp;&nbsp; case BACK_SCREEN: {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HDC hdcScreen = ::GetDC(NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CDC dcScreen;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dcScreen.Attach(hdcScreen);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a palette for the current screen condition.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Allocate a log pal and fill it with the color table info.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LOGPALETTE* pPal = (LOGPALETTE*) malloc(sizeof(LOGPALETTE) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + 256 * sizeof(PALETTEENTRY));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSERT(pPal);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPal-&gt;palVersion = 0x300; // Windows 3.0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPal-&gt;palNumEntries = (WORD) 256; // table size
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetSystemPaletteEntries(hdcScreen, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 256,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pPal-&gt;palPalEntry);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_Pal.CreatePalette(pPal);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; free(pPal);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } break;

 &nbsp;&nbsp; case BACK_BLACK:
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_Pal.CreateWash();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_Pal.SetSysPalColors();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; if (!CAnimWnd::Create(&amp;m_Pal)) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; m_uiTimer = SetTimer(1, 100, NULL);
 &nbsp;&nbsp; return TRUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}
</code></pre>
<h2>The Small Print</h2>
<p>
The final detail in getting your screen saver up and running is to provide the description string that the Control Panel will insert in the screen savers list of the Control Panel application. This string must have an ID value of 1 (one) and must be placed in the application's string table. The file SCRNSAVE.H defines IDS_DESCRIPTION as 1 for this purpose. So you need to add a string to the string table, and give it an ID value of 1.</p>
</BODY>
</HTML>

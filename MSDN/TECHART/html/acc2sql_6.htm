<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Other Ways of Moving Data</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Other Ways of Moving Data</h1>
<p>
Though the Upsizing Wizard works for most circumstances, there are times when you will want to move your data in some other way. Sometimes the Upsizing Wizard does not move a table, and sometimes the amount of data is too large for the configured server locks to accommodate. Perhaps you upsized once already and now need to add data from another copy of your database to the tables already on the server. </p>
<h3>Exporting Tables</h3>
<p>
<b>To export tables and queries directly to the server</b>
<ol>
<li>
On the <b>File</b> menu, click <b>Save as Export</b>. <br><br></li>
<li>
Click <b>To an external File or Database</b>. <br><br></li>
<li>
In the <b>Save as type </b>box, click <b>ODBC Databases</b>().<br><br></li>
<li>
Type in a table name, and click <b>OK</b>.<br><br></li>
<li>
Select a <b>Data Source,</b> and click <b>OK</b>.<br><br></li>
<li>
Complete your login information, and click <b>OK</b>.</li>
</ol>
<p>
When you create a table on the server this way, the correct data type and data is transferred, but you will not get the other features that the Upsizing Wizard provides. Microsoft Access AutoNumber fields are converted to integer fields but not identity fields. No indexes are created. No table relationships exist. No triggers for enforcing cascading updates and deletes are created. You will need to attend to these matters on the server. Of course, this may be desirable if you plan to optimize the structure, changing the database schema as you migrate to a server environment.</p>
<p>
<b>To link (attach) to a table you have exported</b>
<ol>
<li>
On the <b>File</b> menu, click <b>Get External Data</b>, then click <b>Link Tables</b>.<br><br></li>
<li>
Select <b>ODBC Databases()</b>. <br><br></li>
<li>
Select your SQL Server Data source. <br><br></li>
<li>
Complete the <b>SQL Server Login</b> dialog box.<br><br></li>
<li>
Select the table(s) in the <b>Link Tables</b> dialog box, and click<b> Save password</b> if desired, then click <b>OK</b>. <br><br></li>
<li>
If your table does not have an index, you will be prompted for the unique field. <br><br></li>
<li>
The table is added as <b>dbo_tablename</b>. The dbo stands for database owner. You can rename the table in Microsoft Access to the original table name to avoid confusion. (All tables in SQL Server have owners and the fully qualified name of a table on SQL Server is databasename.owner.tablename, for example, <b>pubs.dbo.authors</b>.)</li>
</ol>
<h3>Creating Append Queries</h3>
<p>
If the table already exists on the server, you can move data to it from Microsoft Access. In Microsoft Access, link/attach to the table. Then, create a new query by selecting data from the Microsoft Access table. With the query open in design view, select <b>Append</b> from the <b>Query</b> menu. When you are prompted for the target table, select the name of the linked SQL Server table. This creates an append query. Run the query to write the designated records to the SQL Server table. This can be a useful method for moving only portions of tables, for example, if you are combining data from several databases or from several tables. If the data size is too large to transfer all at once, use criteria (like OrderID &lt;1000, then OrderID between 1000 and 2000, and so on) to move the data over in pieces.</p>
<h3>The Bulk Copy Program</h3>
<p>
SQL Server offers a command-line program called the Bulk Copy Program (<b>bcp</b>) for moving data into a SQL Server table. The SQL Server Transfer Manager feature uses <b>bcp</b>. To use <b>bcp</b>, create your table in SQL Server and move your Microsoft Access data to a text file. If you are moving data over a slow link wide area network, bcp is a good method for moving only data. If you are distributing data on floppy diskettes for a manual transfer to the server, <b>bcp</b> is also a good choice.</p>
<p>
To use <b>bcp</b> to transfer Microsoft Access data to a SQL Server database, you must first create a text file with the data. On the <b>File</b> menu in Microsoft Access, click <b>Save As/Export</b> and select <b>Save table</b> <i>name</i>: <b>To an external File or Database</b>. In the <b>Save Table</b> screen, select <b>Save</b> as type Text Files and click <b>Export</b>. Complete the rest of the Text Export Wizard, selecting your choice of Delimited or Fixed Width file. Now you have the text file containing your data. For information about bringing the data into SQL Server, see the <i>Microsoft SQL Server Administrator's Companion</i>.</p>
<p>
There are two types of <b>bcp</b>, fast and slow. Fast <b>bcp</b> occurs automatically if no indexes exist on the table and if the <b>Select Into/Bulk Copy</b> option is set to true for the database. Fast bcp does not log the data inserts, so you must dump the entire database following the bcp action for a reliable backup.</p>
<p>
On the server, open a command prompt window. Move to the BINN subdirectory of the SQL Server directory. Enter a command like this:</p>
<pre><code>bcp dbname..tbl in text.txt /fmy.fmt /Sservername /Usa /Ppw
</code></pre>
<h3>Moving AutoNumber Fields</h3>
<p>
The Upsizing Wizard knows all about AutoNumber/counter/identity fields, but if you are moving the data yourself you must deal with this issue. You can define the field on the server's target table as an integer (<b>int</b>) data type and identity field. Use an append query to select all the fields except the AutoNumber field. SQL&nbsp;Server provides new identity numbers for the records as they go into the table; these numbers are different from the original Microsoft Access record numbers. To preserve the Microsoft Access AutoNumber values, mark the identity field as temporarily inactive so it will accept your numbers instead of supplying new ones.
<ol>
<li>
Create but do not execute an append query to move the records from the Microsoft Access table to the linked SQL Server table.<br><br></li>
<li>
Create and execute a SQL Pass-Through Query with the SQL Statement:<p class=tl>
SET IDENTITY_INSERT <i>newtablename</i> ON</P></li>
<li>
Execute the append query. Execute a SQL Pass-Through query:<p class=tl>
SET IDENTITY_INSERT <i>newtablename</i> OFF</P></li>
</ol>
<p>
This plan usually works. There is one possible problem. The SET IDENTITY_INSERT statement is valid only for subsequent statements on the same connection, so it only works if Microsoft Access uses the same connection for the pass-through query as for the append query. For more information on the use of IDENTITY_INSERT, see Knowledge Base article Q152035 INF, "Appending Data from Access Table to SQL Table."</p>
<p>
(If you use Visual Basic for Application code to open a recordset containing an identity field, you must use the <b>dbSeeChanges</b> option.)</p>
</BODY>
</HTML>

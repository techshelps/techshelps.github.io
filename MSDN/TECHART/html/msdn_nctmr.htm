<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Slide Show Using the ActiveX Timer Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_nctmr"></a></sup>Creating a Slide Show Using the ActiveX Timer Control</h1>
<p>
Robert Coleridge</p>
<p>
July 23, 1996</p>
<h3>Contents</h3>
<p>
<a href="#timerintro">Introduction</a><br>
<a href="#timerscript">Controlling the Timer with VBScript</a><br>
<a href="#timerobject">Defining the Timer Object in HTML</a><br>
<a href="#timerref">Timer Events, Methods, and Properties</a></p>
<h2>Abstract</h2>
<p>
This article explains the coding required to create a "slide show" Web page using the ActiveX™ Timer control and Microsoft® Visual Basic® Scripting Edition (VBScript) that displays images at regular intervals within a picture frame. </p>
<h2><a name="timerintro"></a>Introduction</h2>
<p>
To complete this example, you will need ActiveX controls—in particular, the ActiveX Timer control (which can be found in the Microsoft ActiveX Software Development Kit (SDK), available on the MSDN Development Platform)—and a scripting language such as Visual Basic Scripting Edition or JavaScript™. In this example, I will be using Visual Basic Scripting Edition as the scripting language. I will discuss the coding for the slide show in two sections: The first section describes the scripting code used to control the Timer object, and the second section describes the HTML tags for including the Timer object on the Web page. I've also included a reference section listing the events, methods, and properties associated with the Timer control.</p>
<h2><a name="timerscript"></a>Controlling the Timer with VBScript</h2>
<p>
We first need to create a script and place it in our HTML page using the &lt;SCRIPT&gt; tag. This tag has an attribute, LANGUAGE, that identifies the scripting language being used—for example, VBScript or JavaScript. In this example, we will be using VBScript, so the HTML tag looks like this:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
</code></pre>
<p>
Now we can declare some document-scoped variables. We need to keep in mind that VBScript uses only variant data types for variables, so we declare the variables as follows:</p>
<pre><code>Dim aPicturePages(10)&nbsp;&nbsp;&nbsp;&nbsp; 'an array to hold HTML page names
Dim iPictureIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'an index into the above array
Dim iPictureCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'a count of how many pictures to display
</code></pre>
<p>
Next, the variables need to be initialized. We set the index to point to the first entry in the array:</p>
<pre><code>iPictureIndex = 0
</code></pre>
<p>
We need to fill the array with Uniform Resource Locator (URL) names pointing to the pictures to be displayed. These names can be in short form (for example, photo1.htm) or in full URL form (for example, http://example.microsoft.com /coolphoto.htm): </p>
<pre><code>aPicturePages(0) = "photo_1.htm"
aPicturePages(1) = "www.myown.com/pics/photo_2.htm"
aPicturePages(2) = "http://www.misc.com/coolphoto.htm"
...
aPicturePages(n) = "photo_n.htm"
</code></pre>
<p>
To keep track of the number of URLs in the array, we need to initialize a variable to <i>n</i>, where <i>n</i> is the URL count:</p>
<pre><code>iPictureCount = n
</code></pre>
<p>
I have named the Timer control <b>tmrMain</b> (I will use this name later in the HTML &lt;OBJECT&gt; tag). The Timer control has an <b>Interval</b> property, which is used to control the interval between Timer events (that is, the delay between photos in the slide show) in milliseconds. It also has a <b>Timer</b> event, which is triggered every time the interval specified in the <b>Interval</b> property expires. (See <a href="#timerref">Timer Events, Methods, and Properties</a> for a listing of events, methods, and properties associated with the Timer control.) We can set an interval of 5 seconds (that is, 5,000 milliseconds) as follows:</p>
<pre><code>tmrMain.Interval = 5000
</code></pre>
<p>
To write the actual subroutine for the <b>Timer</b> event, we simply increment the index variable and display a picture:</p>
<pre><code>Sub tmrMain_Timer
 &nbsp; 'increment the index
 &nbsp; iPictureIndex = iPictureIndex + 1

 &nbsp; 'perform some bounds checking; if out of bounds, reset index
 &nbsp; if iPictureIndex &gt; iPictureCount then
 &nbsp;&nbsp;&nbsp;&nbsp; iPictureIndex = 0
 &nbsp; end if

 &nbsp; 'fill in location of contents of frame, causing picture to be displayed
 &nbsp; parent.frames("slides").location = aPicturePages(iPictureIndex)
end sub
</code></pre>
<p>
The last line of code before <b>end sub</b> uses the frames collection on the parent page of the executing page to display the picture. The code <code>parent.frames("slides").location</code> points to the frame called "slides" on the parent page of the document that contains the code being executed.</p>
<p>
That is all the VBScript code it takes to set up a "slide show" page. The entire VBScript code looks like this:</p>
<pre><code>'create vars 
Dim aPicturePages(10)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'an array to hold HTML page names
Dim iPictureIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'an index into the above array
Dim iPictureCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'a count of how many pictures to display

'initialize vars 
iPictureIndex = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'set index to first entry
aPicturePages(0) = "photo1.htm"&nbsp;&nbsp; 'initialize URL array
aPicturePages(1) = "photo2.htm"&nbsp;&nbsp; '
aPicturePages(2) = "photo3.htm"&nbsp;&nbsp; '
iPictureCount = 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'store URL count
tmrMain.Interval = 5000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'set timer interval

Sub tmrMain_Timer
 &nbsp; 'increment the index
 &nbsp; iPictureIndex = iPictureIndex + 1

 &nbsp; 'perform some bounds checking; if out of bounds, reset index
 &nbsp; if iPictureIndex &gt; iPictureCount then
 &nbsp;&nbsp;&nbsp;&nbsp; iPictureIndex = 0
 &nbsp; end if

 &nbsp; 'fill in location of contents of frame, causing picture to be displayed
 &nbsp; parent.frames("slides").location = aPicturePages(iPictureIndex)
end sub
</code></pre>
<p>
Since we always try to write concise, tight code, here is an alternative way to write the <b>tmrMain_Timer</b> subroutine more efficiently.</p>
<pre><code>Sub tmrMain_Timer
 &nbsp; 'increment index, wrapping back to zero if overflowed
 &nbsp; iPictureIndex = (iPictureIndex + 1) mod iPictureCount

 &nbsp; 'fill in location of contents of frame, causing picture to be displayed
 &nbsp; parent.frames("slides").location = aPicturePages(iPictureIndex)
end sub
</code></pre>
<p>
That is all it takes to create the first part of our "slide show." We must next add the ActiveX controls to the Web page.</p>
<h2><a name="timerobject"></a>Defining the Timer Object in HTML</h2>
<p>
To use the Timer object, we need to include it on the Web page using the HTML &lt;OBJECT&gt; tag: </p>
<pre><code>&lt;OBJECT
 &nbsp; ID="tmrMain"
 &nbsp; CLASSID="CLSID:59CCB4A0-727D-11CF-AC36-00AA00A47DD2"
 &nbsp; CODEBASE="http://www.myown.com/ax.cab"&gt; 
&lt;PARAM NAME="Interval" VALUE="5000"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
The &lt;OBJECT&gt; tag is used to identify the object being defined, in this case, an object called <b>tmrMain</b>, which has a class ID of "59CCB4A0-727D-11CF-AC36-00AA00A47DD2". The class ID can be obtained from the registry or the type library of the control, or it can be generated by the ActiveX Control Pad, found at <a href="http://www.microsoft.com/workshop/author/cpad/">http://www.microsoft.com/workshop/author/cpad/.</a> If the control is not already loaded into memory, the code for the control can be found at the (hypothetical) URL http://www.myown.com/ax.cab and will be automatically loaded from this location.</p>
<p>
The instance of an object used on the executing page can be initialized with the &lt;PARAM&gt; tag within the &lt;OBJECT&gt;, &lt;/OBJECT&gt; tag pair. You can include multiple &lt;PARAM&gt; tags, each setting a different parameter (identified with the NAME keyword) to a value (specified with the VALUE keyword). In this case, we are initializing the <b>Interval</b> property to 5,000 milliseconds. If you do not specify any &lt;PARAM&gt; tags, default parameter settings will be used.</p>
<h2><a name="timerref"></a>Timer Events, Methods, and Properties</h2>
<p>
The Timer control has one event, one method, and two properties.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Event</b></td>
<td class=label width=41%><b>Description</b></td>
<td class=label width=40%><b>Example (VBScript)</b></td>
</tr>
<tr valign=top>
<td width=19%>Timer</td>
<td width=41%>When the control is enabled and the Interval property is greater than zero, this recurring event is fired at the specified interval.</td>
<td width=40%><pre><code>Sub tmrMain_Timer</code><pre><code>'process event
End Sub</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td class=label width=19%><b>Method</b></td>
<td class=label width=41%><b>Description</b></td>
<td class=label width=40%><b>Example (VBScript)</b></td>
</tr>
<tr valign=top>
<td width=19%>AboutBox</td>
<td width=41%>This property is used to display the About dialog box for this control. It takes no parameters.</td>
<td width=40%><pre><code>tmrMain.AboutBox()</code></pre>
</td>
</tr>
<tr valign=top>
<td class=label width=19%><b>Properties</b></td>
<td class=label width=41%><b>Description</b></td>
<td class=label width=40%><b>Example (VBScript)</b></td>
</tr>
<tr valign=top>
<td width=19%>Interval</td>
<td width=41%>This property is used to set or get the interval (in milliseconds) between Timer events. If the interval value is less than one, the control simply does not trigger the Timer event.</td>
<td width=40%><pre><code>Let tmrMain.Interval = 5000</code><pre><code>Set x = tmrMain.Interval</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=19%>Enabled</td>
<td width=41%>This property is a Boolean flag that is used to turn the timer on and off. It has two values: TRUE (enabled state) and FALSE (disabled state). The default setting is TRUE (enabled).</td>
<td width=40%><pre><code>Let tmrMain.Enabled = TRUE</code><pre><code>Set x = tmrMain.Enabled</code></pre>
</pre>
</td>
</tr>
</table><br>
<p>
<i>Robert Coleridge is a software development engineer with SolutionsIQ.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Exchange Event Scripting Agent</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_eventscr"></a>Microsoft Exchange Event Scripting Agent</h1>
<p>
Thomas Rizzo, Product Manager<br>
Microsoft Corporation</p>
<p>
September 1997 </p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5164">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the Expense Reporting sample for this technical article.</a></p>
<p class=indent>
<b>Editor's note&nbsp;&nbsp;&nbsp;</b>Part 1 of this article has been adapted from the Microsoft® Exchange Event Scripting Agent documentation. The full Microsoft Exchange Event Scripting Agent documentation can be found in the MSDN Library (SDK Documentation, Platform SDK). </p>
<h2>Part 1. An Introduction to the Exchange Scripting Agent</h2>
<p>
Developers are in store for a real treat this year with the introduction of Microsoft Exchange Server version 5.5. Exchange Server 5.5 introduces a slew of new developer technologies, including ADSI/LDAPv3 support, version 1.2 of the Collaboration Data Objects library (CDO), and the subject of this article, the Exchange Scripting Agent.</p>
<h3>Events, Events, Events</h3>
<p>
The Microsoft Exchange Server Scripting Agent lets you use server-side scripts that run as a result of events occurring in folders. Such triggering events include timer events and actions such as posting, editing, or deleting a message. They can take place in private folders (mailboxes) or public folders. You need sufficient folder permissions to install and enable event-driven folder scripts.</p>
<p>
You can write these scripts in Microsoft Visual Basic® Scripting Edition (VBScript), JScript™, or other supported scripting languages, and you can use Microsoft Visual Studio™ (specifically the Microsoft Developer Studio IDE) as your script editor. Script debugging support is provided via the Microsoft Script Debugger (part of Microsoft Internet Information Server version 4.0 or Microsoft Internet Explorer version 4.0).</p>
<p>
You can also create custom agents with programming languages such as Visual Basic, Microsoft Visual C++®, Java, or any other language that supports Component Object Model (COM). However, this topic is beyond the scope of this introductory article. For more details, see "Advanced Topics: Custom Agents" in the Microsoft Exchange Event Scripting Agent documentation.</p>
<h3>Architecture</h3>
<p>
<img src="eventscr1.gif" border=0></p>
<p class=label>
<b>Figure 1. Microsoft Exchange architecture</b></p>
<p>
The Exchange Event Scripting Agent is built on the Exchange architecture. The following elements make up the core architecture of the Exchange Scripting Agent:
<ul type=disc>
<li>
<b>Microsoft Exchange Event Service (events.exe):</b> A Microsoft Windows NT® service that runs on the Microsoft Exchange Server computer. This service is installed as part of the Microsoft Exchange Server 5.5 setup. Using Microsoft Outlook™, you configure this service to monitor events that occur in folders you specify. <br><br></li>
<li>
<b>Folders:</b> The folders upon which event scripting works can be Microsoft Exchange private folders (mailboxes) or public folders. These folders must be stored on the Exchange Server in order for events to fire. Locally stored folders such as .pst files are not able to take advantage of the Exchange Scripting Agent.&nbsp; Examples include Calendar, Contact, or Inbox folders.<br><br></li>
<li>
<b>Microsoft Exchange Scripting Agent:</b> An ActiveX™ scripting engine that processes scripts. This element is a COM object that exposes the <b>IExchangeEventHandler</b> interface. <br><br></li>
<li>
<b>User-created scripts:</b> These scripts, which call Collaborative Data Object (CDO) objects/interfaces, constitute the actual CDO logic that works on folders. Scripts are stored as messages in the folder and, as such, travel with the public folder application. These scripts are visible only through the <b>Agents</b> tab in Microsoft Outlook or through a MAPI utility such as MDBVU32.EXE.</li>
</ul>
<p>
The Exchange Scripting Agent can handle four different events. The first three events involve creating, deleting, and editing a message: Folder_OnMessageCreated, Folder_OnMessageDeleted, and Message_OnChanged. For example, you can write an agent that sends an e-mail notification to users when a new appointment is added into a public calendar. The final event is a timer event: Folder_OnTimer. The timer event can be scheduled so that it runs hourly, daily, or weekly. A tickler is an example of a timer event. The system could remind people that certain tasks are due for a project.</p>
<p>
The Microsoft Exchange Event Service passes the following intrinsic objects when your script is run: 
<ul type=disc>
<li>
<b>EventDetails.Session:</b> The object that represents the CDO session the agent is currently logged on as.<b> </b>Because a script is handed this logged-in CDO session, it automatically has access to all CDO objects such as messages, appointment items, and Exchange directory information for lookups. <br><br></li>
<li>
<b>EventDetails.FolderID:</b> The entry identifier of the folder in which the event took place.<br><br></li>
<li>
<b>EventDetails.MessageID:</b> A message identifier, if a message (and not a timer event) triggered the event.</li>
</ul>
<h2>Part 2. An Example: Expense Reporting</h2>
<p>
The easiest way to explain how the Exchange Scripting Agent works is to provide a sample. The Expense Reporting sample allows users to enter expenses from a Web page. Once submitted, an agent checks the total of the expense report and either approves the report automatically if it is under a certain amount of money, $5,000 in this case, or looks up the submitter's manager in the Exchange directory and routes it to this person for approval. This agent handles the message-creation event.</p>
<p>
The second agent reroutes all expense reports that have not been approved after an hour to the current approving manager's manager, again by looking up that person dynamically in the Exchange directory. The second agent handles a timer event that is fired every hour. </p>
<p>
A quick look at samples of code from the "Process New Expense Report" agent will demonstrate how we were able to easily create and apply this agent to the Exchange Public folder.</p>
<p>
The following code demonstrates how to handle the Folder_OnMessageCreated event. The other events, Folder_OnMessageDeleted, Message_OnChanged, and Folder_OnTimer, have similar syntax. This particular subroutine retrieves specific information about the event through <b>GetEventDetails</b> and then calls <b>CheckTotal</b>, which is shown below. Both of these scripts are written in VBScript. </p>
<pre><code>' DESCRIPTION: This event is fired when a new message is added to the folder.
' CheckTotal checks the total of the expense report and routes accordingly.
Public Sub Folder_OnMessageCreated
 &nbsp; On Error Resume Next
 &nbsp; GetEventDetails
 &nbsp; If Err.Number = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; CheckTotal
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; Script.Response = "GetEventDetails Failed"
 &nbsp; End If
End Sub
</code></pre>
<p>
The <b>CheckTotal</b> subroutine checks the total of a new expense report and calls methods from the Exchange CDO library to look up the submitter's manager and send a message if the total is more than $5,000. The following code illustrates how to call some of these methods:</p>
<pre><code>Private Sub CheckTotal
 &nbsp; Dim msgResponse
 &nbsp; Dim iMsgCount

 &nbsp; On Error Resume Next
 &nbsp; Dim msgManager
 &nbsp; Dim UsersManager
 &nbsp; Dim currentuser
 &nbsp; Dim currentapprover

 &nbsp; iMsgCount = fldrTarget.Messages.Count
 &nbsp; If Err.Number = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; set ExpTotal = msgTarget.Fields("Total")
 &nbsp;&nbsp;&nbsp;&nbsp; Set msgResponse = fldrOutbox.Messages.Add
 &nbsp;&nbsp;&nbsp;&nbsp; If ExpTotal &gt; 5000 then&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgResponse.Subject = "The Total was " &amp; ExpTotal
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgResponse.Text = "This Expense Report has been routed to your Manager"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set msgManager = fldrOutbox.Messages.Add 'Message to Manager
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Find the sender of the expense report
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set currentuser = msgTarget.Sender
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Find that person's manager in the directory
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set UsersManager = currentuser.Manager
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentapprover = UsersManager.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Get the spaces out since we're emailing a URL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentapprover = Replace(currentapprover," ","+")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgManager.Subject = "Approval Required for Expense Report!"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgManager.Text = currentuser.name &amp; " has submitted an expense report for " &amp; ExpTotal &amp; ". Please review it at http://localhost/expense/approve.asp?entryid=" &amp; msgTarget.ID &amp; "&amp;Approver=" &amp; CurrentApprover
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgManager.Recipients.Add "","",1,UsersManager.ID
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgManager.Recipients.Resolve(False)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgManager.Send
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Update the status of the expense report
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgTarget.Fields("Status") = "Awaiting Approval from" &amp; UsersManager.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgTarget.Fields("StatusInt") = 2 'Awaiting Approval
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Put in the database the current approver's name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgTarget.Fields.Add "Approver",8,UsersManager.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgTarget.Update
 &nbsp;&nbsp;&nbsp;&nbsp; Else 'Expense Report &lt; 5000
 &nbsp;&nbsp;&nbsp;&nbsp; . . . . . 'Automatically approve the expense report
End Sub

&lt;/SCRIPT&gt;
</code></pre>
<h2>Summary</h2>
<p>
From the example above, you can easily see how developers like yourselves can take advantage of the Exchange Event Scripting Agent to implement custom tracking and routing applications. The Exchange Event Scripting Agent makes it easy to add scripts or custom COM objects to events inside of Exchange Server. </p>
<p>
Interested in learning more? Be sure to download the full Expense Reporting sample application from the MSDN Online Web site. More information on both the Exchange Scripting Agent and Exchange Collaboration Data Objects Library can be found at <a href="http://www.microsoft.com/exchange/">http://www.microsoft.com/exchange/</a>.</p>
</BODY>
</HTML>

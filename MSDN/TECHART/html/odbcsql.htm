<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Architecture</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Architecture</h1>
<p>
The Microsoft SQL&nbsp;Server ODBC driver uses the standard SQL&nbsp;Server components for communicating from a client application to the database server. Rather than being implemented as a new layer over SQL&nbsp;Server's older native API, DB-Library, the ODBC driver writes directly to the same Network-Library (Net-Library) layer used by DB-Library.&nbsp; The ODBC driver is implemented as a native API to SQL&nbsp;Server and is a functional replacement of the DB-Library DLL. The components involved in accessing a SQL&nbsp;Server from an ODBC application are described in the following sections.</p>
<h3>Application</h3>
<p>
The application makes calls to the ODBC API using SQL statements written in either ODBC SQL syntax or SQL&nbsp;Server Transact-SQL syntax.</p>
<h3>ODBC Driver Manager</h3>
<p>
The ODBC driver manager is a very thin layer that manages the communications between the application and any ODBC drivers with which the application works. The driver manager primarily loads the modules comprising the driver and then passes all ODBC requests to the driver. There are Win32® and Win16 application programming interface versions of the driver manager. The Win32 driver manager is Odbc32.dll; the Win16 driver manager is Odbc.dll.</p>
<h3>SQL&nbsp;Server ODBC Driver</h3>
<p>
The SQL&nbsp;Server ODBC driver is a single DLL that responds to all calls the application makes to the ODBC API. If the SQL statements from the application contain ANSI or ODBC SQL syntax that is not supported by SQL&nbsp;Server, the driver translates the statements into Transact-SQL syntax (the amount of translation is usually minimal) and then passes the statement to the server. The driver also presents all results back to the application. The Win32 SQL&nbsp;Server ODBC driver is Sqlsrv32.dll; the Win16 driver is Sqlsrvr.dll.</p>
<h3>SQL&nbsp;Server Client Network Library</h3>
<p>
The driver communicates with the server through the SQL&nbsp;Server Net-Libraries using the SQL&nbsp;Server application-level protocol called Tabular Data Stream (TDS). The SQL&nbsp;Server TDS protocol is a half-duplex protocol with self-contained result sets (that contain both metadata and data) optimized for database access.</p>
<p>
There is a different Net-Library for each protocol SQL&nbsp;Server supports. The job of the Net-Library is to process TDS packets from the driver while insulating the driver from details of the underlying protocol stack. A SQL&nbsp;Server Net-Library accesses a network protocol by calling a network API supported by the protocol stack. The Net-Libraries supplied by SQL&nbsp;Server for use by SQL&nbsp;Server client applications are listed in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Net-Library</b></td>
<td class=label width=34%><b>Win32 DLL</b></td>
<td class=label width=30%><b>Win16 DLL</b></td>
</tr>
<tr valign=top>
<td width=36%>TCP/IP Windows Sockets</td>
<td width=34%>Dbmssocn.dll</td>
<td width=30%>Dbmssoc3.dll</td>
</tr>
<tr valign=top>
<td width=36%>Named pipes</td>
<td width=34%>Dbnmpntw.dll</td>
<td width=30%>Dbnmp3.dll</td>
</tr>
<tr valign=top>
<td width=36%>Multiprotocol</td>
<td width=34%>Dbmsrpcn.dll</td>
<td width=30%>Dbmsrpc3.dll</td>
</tr>
<tr valign=top>
<td width=36%>Novell SPX/IPX</td>
<td width=34%>Dbmsspxn.dll</td>
<td width=30%>Dbmsspx3.dll</td>
</tr>
<tr valign=top>
<td width=36%>Banyan Vines</td>
<td width=34%>Dbmsvinn.dll</td>
<td width=30%>Dbmsvin3.dll</td>
</tr>
<tr valign=top>
<td width=36%>DECNet</td>
<td width=34%>Dbmsdecn.dll</td>
<td width=30%>N/A</td>
</tr>
<tr valign=top>
<td width=36%>AppleTalk</td>
<td width=34%>Dbmsadsn.dll</td>
<td width=30%>N/A</td>
</tr>
</table><br>
<h3>Network Protocol Stack</h3>
<p>
The network protocol stack transports the TDS packets between the client and the server. The protocol stack has components on both the client and the server.</p>
<h3>Server Net-Library</h3>
<p>
The server Net-Libraries work on the server, passing TDS packets back and forth between SQL&nbsp;Server and its clients. Each SQL&nbsp;Server can work simultaneously with any of the server Net-Libraries installed on the server.</p>
<h3>Open Data Services</h3>
<p>
Open Data Services supports an API defined for writing server applications. An Open Data Services application can either be a server that accepts connections and processes queries (such as SQL&nbsp;Server or a gateway to another DBMS), or it can be an extended stored procedure that allows DLLs written to the Open Data Services API to be run as stored procedures within SQL&nbsp;Server. Open Data Services receives the TDS packets from the underlying Net-Libraries and then passes the information to SQL&nbsp;Server by calling specific Open Data Services callback functions implemented in the SQL&nbsp;Server code. It also encapsulates the results coming back from the server in TDS packets that the Net-Library then sends back to the client.</p>
<h3>SQL&nbsp;Server</h3>
<p>
SQL&nbsp;Server is the server engine that processes all queries from SQL&nbsp;Server clients.</p>
<h3>Overall ODBC and SQL&nbsp;Server Architecture</h3>
<p>
The following illustration shows the overall ODBC and SQL&nbsp;Server architecture.&nbsp; It shows both a Win16 client using TCP/IP and a Win32 client using Novell connecting to the same server.</p>
<p>
<img src="odbcsql_1.gif" border=0></p>
<h3>Performance of ODBC as a Native API</h3>
<p>
One of the persistent rumors about ODBC is that it is inherently slower than a native DBMS API. This reasoning is based on the assumption that ODBC drivers must be implemented as an extra layer over a native DBMS API, translating the ODBC statements coming from the application into the native DBMS API functions and SQL syntax. This translation effort adds extra processing compared with having the application call directly to the native API. This assumption is true for some ODBC drivers implemented over a native DBMS API, but the Microsoft SQL&nbsp;Server ODBC driver is not implemented this way.</p>
<p>
The Microsoft SQL&nbsp;Server ODBC driver is a functional replacement of DB-Library. The SQL&nbsp;Server ODBC driver works with the underlying Net-Libraries in exactly the same manner as the DB-Library DLL. The Microsoft SQL&nbsp;Server ODBC driver has no dependence on the DB-Library DLL, and the driver will function correctly if DB-Library is not even present on the client.</p>
<p>
Microsoft's testing has shown that the performance of ODBC-based and DB-Library–based SQL&nbsp;Server applications is roughly equal.</p>
<p>
The following illustration compares the ODBC and DB-Library implementations.</p>
<p>
<img src="odbcsql_2.gif" border=0></p>
<h3>Driver and SQL&nbsp;Server Versions</h3>
<p>
The following table shows which versions of the Microsoft SQL&nbsp;Server ODBC driver shipped with recent versions and service packs (SP) of Microsoft SQL&nbsp;Server. It also lists the operating system versions under which the drivers are certified to run and the versions of SQL&nbsp;Server against which they are certified to work.</p>
<p>
Newer drivers recognize the capabilities of older databases and adjust to work with the features that exist in the older server. For example, if a user connects a version 2.65 driver to a version 4.21a server, the driver does not attempt to use ANSI or other options that did not exist in SQL&nbsp;Server 4.21a.&nbsp; Conversely, older drivers do not use the features available in newer servers. </p>
<p>
For example, if a version 2.50 driver connects to a version 6.5 server, the driver has no code to use any new features or options introduced in the 6.5 server.</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Driver version</b></td>
<td class=label width=16%><b>Driver date</b></td>
<td class=label width=19%><b>Shipped with SQL&nbsp;Server version</b></td>
<td class=label width=17%><b>SQL&nbsp;Server<br>
versions<br>
supported</b></td>
<td class=label width=34%><b>Operating systems supported</b></td>
</tr>
<tr valign=top>
<td width=14%>2.65.0252</td>
<td width=16%>06/16/97</td>
<td width=19%>6.5 SP3</td>
<td width=17%>6.5<br>
6.0<br>
4.21a</td>
<td width=34%>Windows&nbsp;NT3.5, 3.51, 4.0<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
<tr valign=top>
<td width=14%>2.65.0240</td>
<td width=16%>12/30/96</td>
<td width=19%>6.5 SP2</td>
<td width=17%>6.5<br>
6.0<br>
4.21a </td>
<td width=34%>Windows&nbsp;NT3.5, 3.51, 4.0<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
<tr valign=top>
<td width=14%>2.65.0213</td>
<td width=16%>07/30/96</td>
<td width=19%>6.5 SP1</td>
<td width=17%>6.5<br>
6.0<br>
4.21a </td>
<td width=34%>Windows&nbsp;NT3.5, 3.51, 4.0<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
<tr valign=top>
<td width=14%>2.65.0201</td>
<td width=16%>04/03/96</td>
<td width=19%>6.5</td>
<td width=17%>6.5<br>
6.0<br>
4.21a </td>
<td width=34%>Windows&nbsp;NT3.5, 3.51, 4.0<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
<tr valign=top>
<td width=14%>2.50.0126</td>
<td width=16%>08/17/95</td>
<td width=19%>6.0 SP3<br>
6.0 SP2<br>
6.0 SP1</td>
<td width=17%>6.0<br>
4.21a</td>
<td width=34%>Windows&nbsp;NT3.5, 3.51<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
<tr valign=top>
<td width=14%>2.50.0121</td>
<td width=16%>06/07/95</td>
<td width=19%>6.0</td>
<td width=17%>6.0<br>
4.21a</td>
<td width=34%>Windows&nbsp;NT3.5, 3.51<br>
Windows&nbsp;95<br>
Windows for Workgroups 3.11<br>
Windows 3.1</td>
</tr>
</table><br>
<p>
Note:<b> </b>None of the Microsoft SQL&nbsp;Server ODBC drivers listed is certified to work with Sybase SQL&nbsp;Servers. Applications needing to connect to Sybase SQL&nbsp;Servers must get an ODBC driver certified for use with Sybase from either Sybase or a third-party ODBC driver vendor.</p>
<p>
For more information about versions and Instcat.sql, see "Instcat.sql."</p>
</BODY>
</HTML>

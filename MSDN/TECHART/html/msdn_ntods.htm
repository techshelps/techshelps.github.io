<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing 32-Bit Open Data Services Applications for the Microsoft Windows NT  Operating System</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ntods"></a></sup>Developing 32-Bit Open Data Services Applications for the Microsoft Windows NT  Operating System</h1>
<p>
Christopher Moffatt<br>
Microsoft Technical Resource Group</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows NT™ operating system is an ideal platform for building robust, feature-rich applications for Microsoft Open Data Services and Microsoft SQL Server. The SQL Server Programmer's Toolkit for Windows NT contains a 32-bit, Win32™-based version of Open Data Services, making it possible to develop Open Data Services–based server applications for the Windows NT platform.</p>
<p>
The purpose of this technical article is to introduce Open Data Services developers to the Windows NT platform, address issues involved in porting existing Open Data Services applications for the OS/2® operating system to the Windows NT operating system, and outline some ways in which Open Data Services applications can take advantage of the Win32 application programming interface (API).</p>
<p>
This technical note assumes that you are familiar with the Open Data Services API, C programming in a multithreaded environment, and the following documentation:
<ul type=disc>
<li>
Microsoft Open Data Services Programmer's Reference<br><br></li>
<li>
Microsoft Open Data Services Application Source Book<br><br></li>
<li>
Microsoft Win32 API Programmer's Reference, Volumes 1 &amp; 2<br><br></li>
<li>
Converting OS/2 Applications to Windows</li>
</ul>
<h2>Building Win32-Based Open Data Services Applications</h2>
<p>
The following sections describe issues relevant to building Open Data Services applications using the Microsoft® Win32™ Application Programming Interface (API).</p>
<h3>Libraries</h3>
<p>
The Open Data Services functions for the Win32 API are located in OPENDSNT.DLL. Set the PATH environment variable to include the directory where this dynamic-link library (DLL) resides.</p>
<p>
Another file, OPENDSNT.LIB, contains import definitions that your application will use. Set the LIB environment variable to include the directory where OPENDSNT.LIB resides.</p>
<p>
The Win32 API version of Open Data Services implements an installable server-side Net-Library architecture. Set the PATH environment variable to include the directory where this DLL resides. Currently, only support for named pipes is supported through a DLL called SSNMPNTW.DLL.</p>
<h3>Include Files</h3>
<p>
In the SQL Server Programmer's Toolkit for Microsoft Windows NT™, the Open Data Services disk contains the following include files:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Include file</b></td>
<td class=label width=82%><b>Contains</b></td>
</tr>
<tr valign=top>
<td width=18%>SRV.H</td>
<td width=82%>Main header file that includes all other header files.</td>
</tr>
<tr valign=top>
<td width=18%>SRVCONST.H</td>
<td width=82%>Open Data Services constant definitions.</td>
</tr>
<tr valign=top>
<td width=18%>SRVAPI.H</td>
<td width=82%>Open Data Services API macro definitions and function prototypes.</td>
</tr>
<tr valign=top>
<td width=18%>SRVDBTYP.H</td>
<td width=82%>DB-Library™ definitions (checks to see whether they have already been defined).</td>
</tr>
<tr valign=top>
<td width=18%>SRVMISC.H</td>
<td width=82%>Miscellaneous Open Data Services definitions.</td>
</tr>
<tr valign=top>
<td width=18%>SRVSTRUC.H</td>
<td width=82%>Open Data Services structure definitions.</td>
</tr>
<tr valign=top>
<td width=18%>SRVTOK.H</td>
<td width=82%>Open Data Services token definitions.</td>
</tr>
<tr valign=top>
<td width=18%>SRVTYPES.H</td>
<td width=82%>Open Data Services datatype definitions.</td>
</tr>
</table><br>
<p>
SRV.H is the only Open Data Services include file that you <i>must</i> include in your application source code. This file includes all other header files.</p>
<p>
You can append the path to the INCLUDE environment variable to include the directory where the include files reside. Or you can use the <b>/I</b> compile line switch to point to the include file directory.</p>
<h3>Compiling and Linking</h3>
<p>
The following example shows a simple build file that can be used with the <b>NMAKE</b> utility to compile and link Win32-based Open Data Services applications. <b>NMAKE</b> is a powerful utility for controlling the compilation and linking of development projects; however, the simplest <b>NMAKE</b> file is presented here in the interests of clarity.</p>
<p>
The compile lines include the statement -DDBNTWIN32 to specify the target platform for DB-Library. This statement is included only because the GATEWAY sample application calls DB-Library; it would not be included for an Open Data Services application that does not call DB-Library.</p>
<pre><code>NTLIB=\nt\sdk\lib\i386
DBLIB=\ntsql\dblib\lib
OPENDS=\ntsql\opends\lib
NTLIBS = kernel32.lib ntdll.lib libcmt.lib ntwDBLIB.lib
all: gateway.exe
# Update the object files if necessary
gateway.obj: gateway.c
  cl386 -c -Fs -G3d -DDBNTWIN32 -Di386=1 -DWIN32 gateway.c
gatecbs.obj: gatecbs.c
  cl386 -c -Fs -G3d&nbsp; -DDBNTWIN32 -Di386=1 -DWIN32 gatecbs.c
# Update the exe file if necessary
gateway.exe: gateway.obj gatecbs.obj makefile
  link -machine:i386 -subsystem:console -out:gateway.exe \
 &nbsp; -entry:mainCRTStartup -map:gateway.map gateway.obj gatecbs.obj \ 
 &nbsp; $(NTLIBS) $(DBLIB)\ntwdblib.lib $(OPENDS)\opendsnt.lib
</code></pre>
<h2>Porting OS/2-Based Open Data Services Applications</h2>
<p>
All Open Data Services API calls are completely portable between the OS/2® and Win32 APIs; you should not have to make modifications to any of your Open Data Services calls.</p>
<p>
If you have existing OS/2-based Open Data Services applications that you want to run with the Windows NT operating system, there are two basic approaches you can take:
<ul type=disc>
<li>
<b>Change your source code to replace base OS/2 and Presentation Manager® API calls with equivalent Win32 API calls.</b> Because the C run-time calls and Open Data Services API calls are completely portable between the OS/2 and Windows NT platforms, if you decide to port an OS/2-based application to the Windows NT platform, you need to replace only base OS/2 and/or Presentation Manager API calls with equivalent Win32 API calls. <i>Converting OS/2 Applications to Windows</i> is an exhaustive treatment of this topic and provides an overview of porting considerations, as well as providing in-depth treatment of using Win32 API calls to replace base OS/2 and Presentation Manager API calls. Win32 provides equivalent, and in some cases superior, functionality in replacing OS/2 API calls.<br><br></li>
<li>
<b>Run your character-mode OS/2 application unchanged.</b> The initial release of the Windows NT operating system will provide an OS/2 subsystem that will run OS/2 character-mode applications with binary compatibility. If you have a character-mode Open Data Services application written for OS/2, you should be able to run this on the Windows NT platform without making any changes or having to rebuild the application. Consult the documentation for Windows NT to determine which OS/2 APIs are supported in the OS/2 subsystem.</li>
</ul>
<h3>OS/2 to Win32 API Conversion</h3>
<p>
As mentioned earlier, the topic of converting applications from OS/2 to Win32 is covered extensively in <i>Converting OS/2 Applications to Windows</i>. This section highlights two major areas of functionality that are found in a large number of Open Data Services applications: thread management and synchronization mechanisms. (The information given here is taken directly from <i>Converting OS/2 Applications to Windows</i>.)</p>
<h4>Processes and threads</h4>
<p>
The Win32 API provides equivalent functionality to the OS/2 process and thread calls. You can consider their functionality to be conceptually equivalent, except in the following areas:
<ul type=disc>
<li>
<b>Security:</b> The Win32 API on the Windows NT platform provides complete security, and security access can be assigned to all objects including processes and threads.<br><br></li>
<li>
<b>Parent Process:</b> There is no concept of a parent process in Win32.<br><br></li>
<li>
<b>Exit List Processing:</b> Exit List Processing is not supported in the Win32 API. However, in some cases the DLL load and unload entry point can be used to similar effect.<br><br></li>
<li>
<b>Handles and IDs:</b> In OS/2, processes and threads are identified by an ID that is a global value. In Win32, processes and threads have IDs that are global and HANDLEs that are only valid within a particular process. All functions that manipulate processes and threads require a valid HANDLE.</li>
</ul>
<h4>Semaphores and synchronization</h4>
<p>
There are two types of synchronization provided by both OS/2 and the Win32 API set: mutual exclusion and signaling.</p>
<p>
<b>Mutual exclusion</b></p>
<p>
Mutual exclusion involves denying other threads of execution access to a critical section of code. Both OS/2 and Win32 have mechanisms designed to facilitate mutual exclusion within a process and mutual exclusion between processes.
<ul type=disc>
<li>
<b>DosEnterCritSec</b> and <b>DosExitCritSec</b> provide for mutual exclusion in OS/2 by preventing other threads within a process from executing while a thread is between these two calls. Win32 does not have a similar mechanism. Programs using these calls should organize their code so that all code that accesses a protected resource is located in one place and therefore protectable by the other mutual exclusion mechanisms.<br><br></li>
<li>
<b>DosFSRamSemClear</b> and <b>DosFSRamSemRequest</b> are used for mutual exclusion within a process. Win32 provides the Mutex object to implement this functionality. Calls valid on a Mutex object include <b>CreateMutex</b>, <b>OpenMutex</b>, <b>ReleaseMutex</b>, <b>WaitForSingleObject</b>, and <b>CloseHandle</b>. A Mutex may be shared by more than one process.<br><br></li>
<li>
<b>DosCreateSem</b>, <b>DosOpenSem</b>, <b>DosCloseSem</b>, <b>DosSemRequest</b>, and <b>DosSemClear</b> are used for mutual exclusion between processes. Win32 provides the Semaphore object that provides a superset of these functions. The Win32 Semaphore may be either named or unnamed, thus providing a replacement for either RAM semaphores or System semaphores. Win32 functions that manage Semaphore objects include <b>CreateSemaphore</b>, <b>OpenSemaphore</b>, <b>CloseSemaphore</b>, <b>ReleaseSemaphore</b>, and <b>WaitForSingleObject</b>.</li>
</ul>
<p>
<b>Signaling</b></p>
<p>
OS/2 semaphores can be used for signaling between processes. The OS/2 functions used for this purpose are <b>DosSemSet</b>, <b>DosSemWait</b>, <b>DosSemSetWait</b>, and <b>DosMuxSemWait</b>. Win32 provides the Event object that implements a superset of this functionality. The Win32 functions used to manage the Event object include <b>CreateEvent</b>, <b>OpenEvent</b>, <b>SetEvent</b>, <b>PulseEvent</b>, and <b>ResetEvent</b>.</p>
<h3>Porting the GATEWAY Sample Application</h3>
<p>
This section uses the sample program GATEWAY that is provided with Open Data Services as an example of porting an OS/2 version 1.3 Open Data Services application to the Windows NT platform. Although it is a fairly simple application, it serves as an example of the ease with which the majority of Open Data Services application programs can be ported to the Windows NT platform.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The SQL Server Programmer's Toolkit for Windows NT contains a Windows NT–based version of the sample GATEWAY application.</p>
<p>
To port the GATEWAY application:
<ol>
<li>
Modify GATEWAY.MAK to build Win32 source code. For more information, see "Compiling and Linking," earlier in this technical article.<br><br></li>
<li>
In GATEWAY.C:<p class=tl>
a. Replace the OS.H include file:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=27%>OS/2: </td>
<td width=73%><code>INCL_BAS<br>
#include &lt;os2.h&gt;</code></td>
</tr>
<tr valign=top>
<td width=27%>Win32:</td>
<td width=73%><code>#include &lt;windows&gt;</code></td>
</tr>
</table><br>
<p class=tl>
b. Change the exit call:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=28%>OS/2: </td>
<td width=72%><code>DosExit(EXIT_PROCESS, 1);</code></td>
</tr>
<tr valign=top>
<td width=28%>Win32:</td>
<td width=72%><code>ExitProcess(1);</code></td>
</tr>
</table><br>
<p class=tl>
c. Remove all references to <b>FAR</b> keyword (not required).</P></li>
<li>
In GATECBS.C:<p class=tl>
a. Replace the OS.H include file:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%>OS/2: </td>
<td width=67%><code>INCL_BAS<br>
#include &lt;os2.h&gt;</code></td>
</tr>
<tr valign=top>
<td width=33%>Win32:</td>
<td width=67%><code>#include &lt;windows.h</code></td>
</tr>
</table><br>
<p class=tl>
b. Change semaphore calls:</P><p class=tl>
&nbsp;&nbsp;&nbsp;&nbsp;Declaration</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=29%>OS/2: </td>
<td width=71%><code>ULONG init_remote_SEM;</code></td>
</tr>
<tr valign=top>
<td width=29%>Win32:</td>
<td width=71%><code>HANDLE init_remote_SEM;</code></td>
</tr>
</table><br>
<p class=tl>
c. Create semaphore in <b>init_server</b> function:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=17%>OS/2: </td>
<td width=83%><code>N/A (Not required)</code></td>
</tr>
<tr valign=top>
<td width=17%>Win32:</td>
<td width=83%><code>init_remote_SEM = CreateSemaphore(NULL, 1,1,NULL);</code></td>
</tr>
</table><br>
<p class=tl>
d. Set semaphore in <b>init_remote</b> function:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=20%>OS/2: </td>
<td width=80%><code>DosSemSet(&amp;init_remote_SEM);</code></td>
</tr>
<tr valign=top>
<td width=20%>Win32:</td>
<td width=80%><code>WaitForSingleObject(init-remote_SEM, -1);</code></td>
</tr>
</table><br>
<p class=tl>
e. Clear semaphore in init_remote function (five times):</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=19%>OS/2: </td>
<td width=81%><code>DosSemClear(&amp;init_remote_SEM);</code></td>
</tr>
<tr valign=top>
<td width=19%>Win32:</td>
<td width=81%><code>ReleaseSemaphore(init_remote_SEM, 1,NULL);</code></td>
</tr>
</table><br>
<p class=tl>
f. Remove all references to <b>FAR</b> keyword (not required).</P></li>
</ol>
<h2>Taking Advantage of Win32 API Features in Open Data Services Applications</h2>
<p>
The following sections describe how to take advantage of the unique features of the Win32 API.</p>
<h3>Memory Management in Win32</h3>
<p>
The 32-bit linear virtual memory address space available to processes in the Win32 API makes memory management simpler and cleaner. This applies to Open Data Services programming as well as to any other programming for the Win32 API.</p>
<p>
When you develop applications to run only on the Win32 API, consider using the C run-time functions <b>malloc</b> and <b>free</b> to perform dynamic memory management. The <b>malloc</b> and <b>free</b> functions are not safe to use with Windows 3.<i>x</i> and OS/2 because of the segmented architecture of those systems. However, with Win32 these functions are both safe and elegant. In addition to the standard memory management functions (<b>Global</b> and <b>Local</b> functions, C run-time support), Win32 also provides heap and virtual memory management functions for applications that require specialized memory management.</p>
<h3>Threads in Win32</h3>
<p>
The functionality of the process and thread management functions are roughly equivalent in Win32 and OS/2. However, because the Win32 API supports 32-bit linear memory, the number of threads that an application can create per process is greatly increased. In OS/2, a process can create only a maximum of 53 threads. This is a limitation for the Open Data Services library, because it creates an operating system thread for each client connection. In OS/2, to connect more than 53 DB-Library clients to an Open Data Services application, you must run multiple instances of the application. In Win32, the limit of 53 threads no longer exists.</p>
<h3>Structured Exception Handling</h3>
<p>
The Win32 API supports structured exception handling to aid the development of robust software and is available to developers through compiler support. Consider using this functionality in your application. For more information about structured exception handling, see the <i>Microsoft Win32 API Programmer's Reference</i>, Volume 1 (Chapter 11).</p>
<h3>Symmetric Multiprocessing</h3>
<p>
The Windows NT operating system supports symmetric multiprocessing (SMP), allowing applications with multiple threads of execution to run across multiple processors. Because Open Data Services creates a new operating system thread for each client connection, your Open Data Services application can take advantage of Windows NT SMP support without any additional work being done.</p>
<h2>Sample Code: SQLSNIFF</h2>
<p>
SQLSNIFF is a sample Windows NT–based Open Data Services application. It can be used to view or log the Transact-SQL queries being sent to SQL Server from multiple clients. Instead of connecting directly to a SQL Server, clients connect to this Open Data Service application. Queries received are passed on to SQL Server and the results are returned to the respective clients. SQLSNIFF allows you to view queries, results, and error messages in MDI child windows or to log this data to a file or a SQL Server table.</p>
<p>
The SQLSNIFF sample application is useful as a debugging aid in the following two scenarios:
<ul type=disc>
<li>
<b>Understanding the queries being generated and sent to SQL Server by a third-party front end.</b> If you are experiencing problems with a third-party application, it is often useful to look at the queries that are being generated and sent to SQL Server. Although you cannot view the source code of a third-party application, SQLSNIFF gives you the ability to view the queries being sent to SQL Server by redirecting the client's conversation with SQL Server through SQLSNIFF.<br><br></li>
<li>
<b>Viewing and logging the queries being sent to SQL Server by multiple clients.</b></li>
</ul>
<p>
The sample code described above can be found in the Microsoft Online Software Library or in the Microsoft Forum Software Library on CompuServe® in a file called SQLSNIFF.ZIP. It can be located by searching on the keyword SQLSNIFF, the Q number of this article in the Microsoft KnowledgeBase (Q87961), or S13581. SQLSNIFF.ZIP was archived using the PKWARE file-compression utility.</p>
<p>
SQLSNIFF.ZIP contains the following files:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Filename</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>SQLSNIFF.C</td>
<td width=72%>Main source code file</td>
</tr>
<tr valign=top>
<td width=28%>SQLSNIFF.H</td>
<td width=72%>Source code header file</td>
</tr>
<tr valign=top>
<td width=28%>SQLSNIFF.RC</td>
<td width=72%>Windows-based resource script file</td>
</tr>
<tr valign=top>
<td width=28%>SNIFFCBS.C</td>
<td width=72%>Source code file for ODS callback functions</td>
</tr>
<tr valign=top>
<td width=28%>DIALOGS.DLG</td>
<td width=72%>Dialog box resource script file</td>
</tr>
<tr valign=top>
<td width=28%>DIALOGS.H</td>
<td width=72%>Dialog box header file</td>
</tr>
<tr valign=top>
<td width=28%>DIALOGS.RES</td>
<td width=72%>Windows NT Dialog Editor resource</td>
</tr>
<tr valign=top>
<td width=28%>MAKEFILE</td>
<td width=72%>NMAKE File</td>
</tr>
</table><br>
<h2>References</h2>
<h3>Books</h3>
<p>
<i>Microsoft Open Data Services Programmer's Reference</i> (Part number 28641)</p>
<p>
<i>Microsoft Open Data Services Application Source Book</i> (Part number 098-32078)</p>
<p>
<i>Microsoft Win32 API Programmer's Reference</i>, Volumes 1 &amp; 2 (Microsoft Press)</p>
<p>
<i>OS/2 to Windows Conversion Guide</i> (Part number 098-35176)</p>
<p>
<i>Converting OS/2 Applications to Windows</i> (Part number 098-35176)</p>
<h3>Available Technical Notes</h3>
<p>
<i>Using Microsoft SQL Server on a Banyan VINES Network </i>(Part number 098-30193)</p>
<p>
<i>Query Optimization Techniques: Contrasting various optimizer implementations with Microsoft SQL Server </i>(Part number 098-30199)</p>
<p>
<i>Microsoft Open Data Services: Application sourcebook </i>(Part number 098-32078)</p>
<p>
<i>Using Microsoft SQL Server on a Novell NetWare Network </i>(Part number 098-32655)</p>
<p>
<i>Developing 32-Bit SQL Server Applications for the Microsoft Windows NT Operating System</i> (Part number 098-32659)</p>
<h3>Additional Information</h3>
<p>
To receive more information, contact Microsoft Inside Sales, Systems Software, at 1-800-227-4679.</p>
</BODY>
</HTML>

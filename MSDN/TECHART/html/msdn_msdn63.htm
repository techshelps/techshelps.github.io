<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 63: Preventing List Box from Redrawing (Refreshing)</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn63"></a></sup>Tip 63: Preventing List Box from Redrawing (Refreshing)</h1>
<p>
Created: April 24, 1995 </p>
<h2>Abstract</h2>
<p>
In a Visual Basic® application you can update the contents of a <b>List Box</b> control by using the <b>AddItem</b> or <b>RemoveItem</b> methods. However, if you do not want the contents of the modified List Box to be updated until all items have been added or deleted, you can use the Windows® application programming interface (API) <b>SendMessage</b> function to set a flag (WM_SETREDRAW) telling Windows not to update the control until you specifically ask it to do so. This article explains how you can prevent a <b>List Box</b> control from being updated immediately.</p>
<h2>Using the WM_SETREDRAW Message</h2>
<p>
In a Visual Basic® application, you can use a <b>List Box</b> control to hold items such as names of people. When a user clicks on an item in a <b>List Box</b> control, that item is highlighted and is said to be <i>selected</i>. If a List Box's <b>MultiSelect</b> property is set to True, multiple items can be selected at one time. New items can be added to a <b>List Box</b> control by using the <b>AddItem</b> method, and items can be deleted using the <b>RemoveItem</b> method. However, as soon as you use <b>AddItem</b> or <b>RemoveItem</b>, the List Box's Refresh event is triggered, which in turn updates the contents of the control. This behavior may not be appropriate in cases where you want to suppress the updating process while adding, deleting, or changing a large number of entries.</p>
<p>
You can force your Visual Basic application to update the <b>List Box</b> control at a specific time by using the Windows® application programming interface (API) <b>SendMessage</b> and <b>SendMessageByString</b> functions. You must send the WM_SETREDRAW message to the control to prevent the List Box from being updated. In addition, you must also send the actual data to the List Box by using the <b>SendMessage</b> function—you cannot use the <b>AddItem</b> or <b>RemoveItem</b> methods, because these methods will override the WM_SETREDRAW message.</p>
<p>
Setting the redraw flag to TRUE turns the redraw function on, and setting the redraw flag to FALSE turns the redraw function off. Therefore, in a Visual Basic application that is updating a List Box, you must send the WM_SETREDRAW message before you actually begin manipulating the contents of the control. After you have finished adding or removing items from the <b>List Box</b> control, you can send another WM_SETREDRAW message to turn the redraw function on again. This will cause Windows to display the modified <b>List Box</b> control immediately.</p>
<h2>Example Program</h2>
<p>
The program shown below displays two <b>List Box</b> controls on the form. You can select items from the first List Box by clicking them. Each selected item will be added to the second <b>List</b> <b>Box</b> control when you click the "Show Results" command button.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement should be typed as a single line of code):<pre><code>Const WM_SetRedraw = &amp;HB
Const LB_ADDSTRING = &amp;H401

Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal wMsg As 
 &nbsp; Integer, ByVal wParam As Integer, lParam As Any) As Integer

Declare Function SendMessageByString Lib "User" Alias "PostMessage" (ByVal hWnd 
 &nbsp; As Integer, ByVal wMsg As Integer, ByVal wParam As Integer, ByVal lParam As 
 &nbsp; String) As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  Dim X As Integer
  Dim D As Integer
  Dim S As String
  'Add some dummy data to List1
  For X = 0 To 15
 &nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem "Item #" + Str$(X)
  Next X
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Show Results".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
  'Show updated list box now
  X = SendMessage(List2.hWnd, WM_SetRedraw, 1, 0)
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default. Set its <b>MultiSelect</b> property to True.<br><br></li>
<li>
Add the following code to the DblClick event for List1:<pre><code>Sub List1_DblClick()
 &nbsp;&nbsp; 'Disable the Repaint event
 &nbsp;&nbsp; X = SendMessage(List2.hWnd, WM_SetRedraw, 0, 0)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; S = List1.List(List1.ListIndex)
  ' Must use SendMessageByString instead of
  ' List2.AddItem S to prevent redrawing
 &nbsp;&nbsp; D = SendMessageByString(List2.hWnd, LB_ADDSTRING, 0, S)
End Sub
</code></pre>
</li>
<li>
Add a second <b>List Box</b> control to Form1. List2 is created by default.</li>
</ol>
</BODY>
</HTML>

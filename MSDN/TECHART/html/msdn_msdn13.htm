<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 13: Converting a Number to Hours, Minutes, Seconds</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn13"></a></sup>Tip 13: Converting a Number to Hours, Minutes, Seconds</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
Assume that you are writing a program where some kind of event has to be timed. You retrieve a time value representing the total number of seconds the event took to process its work. The problem is that you want to convert this seconds value to its equivalent minutes and seconds value and display that string to the user. The Visual Basic® Mod operator can do this conversion process for you.</p>
<h2>Using Mod to Calculate Elapsed Time Periods</h2>
<p>
Assuming that you need to time a certain event in your Visual Basic® application, the Mod operator provided in Visual Basic can help you convert the value to an equivalent minutes and seconds value. You can then display this string to users in a more meaningful manner.</p>
<p>
The Visual Basic Mod operator divides two numbers, but returns only the remainder. If you take the number 121 (representing the number of seconds that has passed) and want to determine how many minutes and seconds this is, you would divide 121 by 60 (60 seconds per minute). The result would be 2, with 1 remaining. Then, if you use Mod on the original value again, you'll get 1 as the remainder. This converts 121 to two minutes and 1 second.</p>
<h2>Example Program</h2>
<p>
The following program demonstrates how you can use the Mod operator to convert a number representing a time value to a string.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a Label control to Form1. Label1 is created by default. Set its <b>Caption</b> property to "Enter a value:".<br><br></li>
<li>
Next to Label1, add a Text Box control. Text1 is created by default. Set its <b>Text</b> property to a NULL (empty) string.<br><br></li>
<li>
Add the following code to the LostFocus event for Text1:<pre><code>Sub Text1_LostFocus()
 &nbsp;&nbsp; Dim Isec As Integer
 &nbsp;&nbsp; Isec = Val(Text1.Text)
 &nbsp;&nbsp; BreakSec = Str$(Int(Isec / 60)) &amp; " minutes " &amp; Str$(Isec Mod 60) &amp; " seconds "
 &nbsp;&nbsp; Text2.Text = BreakSec
End Sub
</code></pre>
</li>
<li>
Add a second Label control to Form1 (underneath Label 1). Label2 is created by default. Set its <b>Caption</b> property to "Time passed: ".<br><br></li>
<li>
Beside Label2, add a Text Box control. Text2 is created by default. Set its <b>Text</b> property to a NULL (empty) string.<br><br></li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Exit".<br><br></li>
<li>
Type the following code in the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; End
End Sub
</code></pre>
</li>
</ol>
<p>
When you execute this Visual Basic application, enter a value in the first text box. Press the TAB key to move to the second text box. The program will convert the value you entered to a string representing that value in minutes and seconds. Click on the Exit command button to terminate the program.</p>
</BODY>
</HTML>

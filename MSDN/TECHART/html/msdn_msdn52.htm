<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 52: Modifying a Window's Title Bar Caption</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn52"></a></sup>Tip 52: Modifying a Window's Title Bar Caption</h1>
<p>
Created: April 10, 1995</p>
<h2>Abstract</h2>
<p>
Almost every Windows®-based application displays a caption in its title bar. This caption is usually the application's name. This article will tell you how you can modify the caption of an application.</p>
<h2>Replacing the Title Bar Caption of a Window</h2>
<p>
The Windows® application programming interface (API) provides two functions you can use in your program to modify the caption displayed in a window's title bar. The <b>GetWindowText</b> function retrieves the caption of the title bar and the <b>SetWindowText</b> function sets the caption of the title bar to a new string.</p>
<p>
To declare the <b>GetWindowText</b> function within your Visual Basic® program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form:</p>
<pre><code>Declare Function GetWindowText Lib "User" (ByVal hWnd As Integer, ByVal lpString 
 &nbsp; As String, ByVal aint As Integer) As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>GetWindowText</b> function requires three arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=18%><i>hWnd</i></td>
<td width=82%>An integer value containing the window's handle.</td>
</tr>
<tr valign=top>
<td width=18%><i>lpString</i></td>
<td width=82%>A string buffer long enough to hold the caption text in the titlebar.</td>
</tr>
<tr valign=top>
<td width=18%><i>aint</i></td>
<td width=82%>An integer value set to the length of <i>lpString</i>.</td>
</tr>
</table><br>
<p>
After calling this function, <b>GetWindowText</b> will return an integer value set to the length of the caption's text. This length count does not include the string's terminating NULL character.</p>
<p>
The Windows API <b>SetWindowText</b> function allows you to set the contents of the title bar's caption to a string of your choice. The <b>SetWindowText</b> function requires two arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=18%><i>hWnd</i></td>
<td width=82%>An integer value containing the window's handle.</td>
</tr>
<tr valign=top>
<td width=18%><i>lpString</i></td>
<td width=82%>A string containing the window's new title bar caption.</td>
</tr>
</table><br>
<p>
The example program below retrieves the text stored in the title bar ("Caption Demo") and adds the current time to the string. However, we must take a couple of steps to ensure that Visual Basic displays the new caption correctly.</p>
<p>
First, we use the <b>Left$</b> function to remove the original caption's terminating NULL byte. Later on in the program, we retrieve the current time as a string and append it to the end of the original caption stored in the title bar. If we did not remove the terminating NULL byte from the original caption's string, Visual Basic would stop printing the text before it reached the time portion of the string.</p>
<p>
Approximately every ten seconds, the <b>Timer</b> control is used to update the target window's title bar. However, another step must be included in this routine to prevent Windows from appending the time string more than once.</p>
<p>
The example program below adds the current time to the window's title bar. The first time the Timer executes its code, the original title bar's caption is "Caption Demo". The second time the routine is executed, the original title bar's caption is "Caption Demo 08:12:11" (or whatever the current time happens to be). If we keep appending the current time to the original title bar's caption, the string will soon contain multiple but different time stamps. This is not what we want—we only want one time stamp to be included in the string. This is why the example program searches for the first colon character in the original string (":") and sets the "original" caption's text back to only the actual "Caption Demo" text.</p>
<h2>Example Program</h2>
<p>
The following program shows how to modify an application's title bar. This program adds the current time to the caption of the target window—in this case, our own Visual Basic program. After executing this program, Visual Basic will add the current time to the caption of Form1. The entire string will be updated approximately every ten seconds.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default. Set its <b>Caption</b> property to "Caption Demo".<br><br></li>
<li>
Add a <b>Timer</b> control to Form1. Timer1 is created by default. Set its <b>Interval</b> property to 10000.<br><br></li>
<li>
Add the following <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Declare Function GetWindowText Lib "User" (ByVal hWnd As Integer, ByVal lpString 
 &nbsp; As String, ByVal aint As Integer) As Integer
Declare Function SetWindowText Lib "User" (ByVal hWnd As Integer, ByVal lpString 
 &nbsp; As String) As Integer
</code></pre>
</li>
<li>
Add the following code to the Timer1-Timer event for Timer1:<pre><code>Sub Timer1_Timer()
  Timer1.Enabled = True
  Dim X As Integer
  Dim CurTime As String * 35
  Dim CapText As String * 35
  Dim NewCap As String * 35
  Dim CapLength As Integer
  Dim L As Integer
 &nbsp;&nbsp; 
  CapLength = 30
  X = GetWindowText(Form1.hWnd, CapText, CapLength)
  ' X now equals the length of CapText not including the terminating
  ' NULL character. We MUST remove the NULL character.
  CapText = Left$(CapText, X)
  ' The original caption is up to the first colon in the time string,
  ' minus 3 bytes to go back to end of original caption's text.
  L = InStr(CapText, ":")
  
  If L = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo Adjust
  End If
 &nbsp;&nbsp; 
  CapText = Left$(CapText, L - 3)
Adjust:
  NewCap = ""
  CurTime = Time$
  NewCap = RTrim$(CapText) + " " + RTrim$(CurTime)
  
  X = SetWindowText(Form1.hWnd, NewCap)
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

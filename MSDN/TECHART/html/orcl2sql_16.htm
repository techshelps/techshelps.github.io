<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Other Migration Options and Considerations</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Other Migration Options and Considerations</h1>
<p>
This section discusses various methods for migrating data from an Oracle database to a <br>
SQL Server database.</p>
<h3>Data Migration</h3>
<p>
The simplest method of migrating between Oracle and SQL Server is to develop a series of SQL language scripts that can be applied to each DBMS. These scripts are then run using the query tools for each DBMS, SQL*Plus with Oracle, ISQL/w for SQL Server.</p>
<p>
<img src="orcl2sql_38.gif" border=0></p>
<p>
This process was followed with the sample applications that are part of this document. A set of custom scripts was developed for Oracle, and a second set was developed for SQL Server. Each set of scripts needed to be customized for each respective DBMS. The benefit of this approach is that this process is relatively simple. If changes or modifications need to be made, the appropriate file(s) can be easily altered. The worst part of the process is writing the individual DML statements that are used to load the data.</p>
<p>
The data loading scripts can become overwhelming, however, when hundreds or thousands of rows of data must be entered into the target DBMS. Customized DML statements that work with Oracle may not work with SQL Server. If changes must be made to the data, it must often occur in both the Oracle and SQL Server scripts.</p>
<p>
Consequently, other approaches must be considered. You must determine if you will be migrating data from a currently existing Oracle application, or if you will be developing a new application that may be installed on either Oracle or SQL Server.</p>
<h3>Migrating from Oracle to SQL Server</h3>
<p>
If you are migrating from a currently existing Oracle application, your first inclination may be to use the Oracle export utility. This is not a viable solution, as SQL Server has no facility that can translate the uniquely formatted files created by export.</p>
<p>
The "Oracle Gateway to SQL Server" can be used as a possible intermediate step when performing the migration from Oracle to SQL Server. This facility allows the Oracle DBMS to connect to SQL Server. You can use Oracle SQL statements to copy data from Oracle tables to SQL Server tables. </p>
<p>
Another approach is to develop an ODBC program that can connect simultaneously to both Oracle and SQL Server. This program can be used to read data from Oracle and write the data to the appropriate tables in SQL Server. You may also consider using third-party applications that can connect to each DBMS and transfer data. </p>
<p>
<img src="orcl2sql_39.gif" border=0></p>
<h3>A Multiple DBMS Application</h3>
<p>
If you are developing an application that can be installed on either Oracle or SQL Server, you can use several approaches to load the data. As was explained above, the simplest method is to use SQL scripts with SQL*Plus and ISQL/w.</p>
<p>
You can also use the Oracle SQL*Loader and SQL Server <b>bcp</b> (bulk copy) utilities to load data files. Like SQL*Loader, <b>bcp</b> can load a table from an operating-system file. Unlike SQL*Loader, the <b>bcp</b> utility can also transfer data between a table and file in a format that can be specified by the user. The <b>bcp</b> utility is executed from the command line. You must supply the following information for transferring data to and from SQL Server:
<ul type=disc>
<li>
The name of the database<br><br></li>
<li>
The name of the table or view<br><br></li>
<li>
The name of the operating-system file or disk drive<br><br></li>
<li>
The direction of the transfer (in or out)</li>
</ul>
<p>
In addition, for each column, you can modify the data type, length, and terminator.</p>
<p>
Another approach is to require the development of an ODBC program to load the appropriate data into each DBMS. You could create one or more generic data files that contain the table data. The ODBC program should be written in a generic format using the ODBC Extended SQL extensions. This program should be able to connect to both Oracle and SQL Server.</p>
<p>
<img src="orcl2sql_40.gif" border=0></p>
<p>
This type of approach has several advantages:
<ul type=disc>
<li>
If changes need to be made to the underlying data, it can be done in one location.<br><br></li>
<li>
Changes in table loading logic can be made in one location.<br><br></li>
<li>
Sophisticated error handling routines can be written into the program.<br><br></li>
<li>
The user cannot modify the data loading process.</li>
</ul>
<h3>Oracle Call Interface (OCI)</h3>
<p>
If you have applications that are written using the Oracle Call Interface (OCI), you may want to consider rewriting them using ODBC. The OCI is specific to the Oracle DBMS and cannot be used with SQL Server.</p>
<p>
In most cases, you can replace OCI functions with the appropriate ODBC functions, followed by relevant changes to the supporting program code. The remaining non-OCI program code should require minimal modification. The example shows a comparison of the OCI and ODBC statements required for establishing a connection to an Oracle database. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Oracle Call Interface</b></td>
<td class=label width=51%><b>Oracle ODBC</b></td>
</tr>
<tr valign=top>
<td width=49%><b>rcl = olog(&amp;logon_data_area, &amp;host_data_area,<br>
user_name, -1, (text*) 0, -1, (text) 0, -1,<br>
OCI_LM_DEF);</b></td>
<td width=51%><b>rcl = SQLConnect(hdbc1,<br>
(SQLCHAR*) odbc_dsn, (SQLSMALLINT) SQL_NTS,<br>
(SQLCHAR*) user_name, (SQLSMALLINT) SQL_NTS,<br>
(SQLCHAR*) user_password, (SQLSMALLINT) SQL_NTS);</b></td>
</tr>
</table><br>
<p>
The table suggests conversions between Oracle OCI function calls and ODBC functions. These suggested conversions are approximate. There may not be an exact match in the conversion process. Your program code may require additional revision to obtain similar functionality.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>OCI function</b></td>
<td class=label width=53%><b>ODBC function</b></td>
</tr>
<tr valign=top>
<td width=47%>Obindps</td>
<td width=53%><b>SQLBindParameter</b></td>
</tr>
<tr valign=top>
<td width=47%>Obndra</td>
<td width=53%><b>SQLBindParameter</b></td>
</tr>
<tr valign=top>
<td width=47%>Obndrn</td>
<td width=53%><b>SQLBindParameter</b></td>
</tr>
<tr valign=top>
<td width=47%>Obndrv</td>
<td width=53%><b>SQLBindParameter</b></td>
</tr>
<tr valign=top>
<td width=47%>Obreak</td>
<td width=53%><b>SQLCancel</b></td>
</tr>
<tr valign=top>
<td width=47%>Ocan</td>
<td width=53%><b>SQLCancel, SQLFreeStmt</b></td>
</tr>
<tr valign=top>
<td width=47%>Oclose</td>
<td width=53%><b>SQLFreeStmt</b></td>
</tr>
<tr valign=top>
<td width=47%>Ocof</td>
<td width=53%><b>SQLSetConnectOption</b></td>
</tr>
<tr valign=top>
<td width=47%>Ocom</td>
<td width=53%><b>SQLTransact</b></td>
</tr>
<tr valign=top>
<td width=47%>Ocon</td>
<td width=53%><b>SQLSetConnectOption</b></td>
</tr>
<tr valign=top>
<td width=47%>Odefin</td>
<td width=53%><b>SQLBindCol</b></td>
</tr>
<tr valign=top>
<td width=47%>Odefinps</td>
<td width=53%><b>SQLBindCol</b></td>
</tr>
<tr valign=top>
<td width=47%>Odescr</td>
<td width=53%><b>SQLDescribeCol</b></td>
</tr>
<tr valign=top>
<td width=47%>Oerhms</td>
<td width=53%><b>SQLError</b></td>
</tr>
<tr valign=top>
<td width=47%>Oexec</td>
<td width=53%><b>SQLExecute, SQLExecDirect</b></td>
</tr>
<tr valign=top>
<td width=47%>Oexfet</td>
<td width=53%><b>SQLExecute, SQLExecDirect, and SQLFetch</b></td>
</tr>
<tr valign=top>
<td width=47%>Oexn</td>
<td width=53%><b>SQLExecute, SQLExecDirect</b></td>
</tr>
<tr valign=top>
<td width=47%>Ofen</td>
<td width=53%><b>SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=47%>Ofetch</td>
<td width=53%><b>SQLFetch</b></td>
</tr>
<tr valign=top>
<td width=47%>Oflng</td>
<td width=53%><b>SQLGetData</b></td>
</tr>
<tr valign=top>
<td width=47%>Ogetpi</td>
<td width=53%><b>SQLGetData</b></td>
</tr>
<tr valign=top>
<td width=47%>Olog</td>
<td width=53%><b>SQLConnect</b></td>
</tr>
<tr valign=top>
<td width=47%>Ologof</td>
<td width=53%><b>SQLDisconnect</b></td>
</tr>
<tr valign=top>
<td width=47%>Oopen</td>
<td width=53%><b>SQLExecute, SQLExecDirect</b></td>
</tr>
<tr valign=top>
<td width=47%>Oparse</td>
<td width=53%><b>SQLPrepare</b></td>
</tr>
<tr valign=top>
<td width=47%>Orol</td>
<td width=53%><b>SQLTransact</b></td>
</tr>
</table><br>
<h3>Embedded SQL</h3>
<p>
Many applications are written using the Oracle Programmatic Interface (Pro*C, Pro*Cobol, and so on). This interface supports the use of ANSI-standard embedded SQL. It also includes nonstandard Oracle programmatic extensions.</p>
<p>
Oracle embedded SQL applications can be migrated to SQL Server using the Microsoft Embedded SQL for C development environment. This environment provides adequate but not optimal control over performance and use of SQL Server features compared to an ODBC application.</p>
<p>
Some of the Oracle Pro*C features are not supported in Microsoft's ESQL precompiler. If your Oracle application makes extensive use of these features, a rewrite to ODBC is probably a better migration choice. These features include:
<ul type=disc>
<li>
Host array variables<br><br></li>
<li>
VAR and TYPE statements for data type equivalencing<br><br></li>
<li>
Support for embedded SQL in C++ modules<br><br></li>
<li>
Support for embedded PL/SQL or Transact-SQL blocks<br><br></li>
<li>
Cursor variables<br><br></li>
<li>
Multithreaded application support.<br><br></li>
<li>
Support for the Oracle Communication Area (ORACA)</li>
</ul>
<p>
If your Oracle application has been developed in Cobol, it can be moved to Embedded SQL for Cobol from Micro Focus. Again, you may run into some of the same limitations in Cobol as with the Microsoft ESQL for C precompiler.</p>
<p>
You should convert your Oracle embedded SQL application to the ODBC environment. This migration process is quite easy and offers many advantages. It is important to note that ODBC does not require the use of a precompiler, as does embedded SQL.&nbsp; Consequently, much of the overhead associated with program development is eliminated.</p>
<p>
The table shows the approximate relationship between Embedded SQL statements and ODBC functions.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Embedded SQL statement</b></td>
<td class=label width=52%><b>ODBC function</b></td>
</tr>
<tr valign=top>
<td width=48%>CONNECT</td>
<td width=52%><b>SQLConnect</b></td>
</tr>
<tr valign=top>
<td width=48%>PREPARE</td>
<td width=52%><b>SQLPrepare</b></td>
</tr>
<tr valign=top>
<td width=48%>EXECUTE</td>
<td width=52%><b>SQLExecute</b></td>
</tr>
<tr valign=top>
<td width=48%>DECLARE CURSOR and OPEN CURSOR</td>
<td width=52%><b>SQLExecute</b></td>
</tr>
<tr valign=top>
<td width=48%>EXECUTE IMMEDIATE</td>
<td width=52%><b>SQLExecDirect</b></td>
</tr>
<tr valign=top>
<td width=48%>DESCRIBE SELECT LIST</td>
<td width=52%><b>SQLNumResultCols, SQLColAttributes, SQLDescribeCol</b></td>
</tr>
<tr valign=top>
<td width=48%>FETCH</td>
<td width=52%><b>SQLFetch</b></td>
</tr>
<tr valign=top>
<td width=48%>SQLCA.SQLERRD[2]</td>
<td width=52%><b>SQLRowCount</b></td>
</tr>
<tr valign=top>
<td width=48%>CLOSE</td>
<td width=52%><b>SQLFreeStmt</b></td>
</tr>
<tr valign=top>
<td width=48%>COMMIT WORK, ROLLBACK WORK</td>
<td width=52%><b>SQLTransact</b></td>
</tr>
<tr valign=top>
<td width=48%>COMMIT WORK RELEASE,<br>
ROLLBACK WORK RELEASE</td>
<td width=52%><b>SQLDisconnect</b></td>
</tr>
<tr valign=top>
<td width=48%>SQLCA,&nbsp; SQLSTATE</td>
<td width=52%><b>SQLError</b></td>
</tr>
<tr valign=top>
<td width=48%>ALTER, CREATE, DROP, GRANT, REVOKE</td>
<td width=52%><b>SQLExecute, SQLExecDirect</b></td>
</tr>
</table><br>
<p>
The most significant change in converting embedded SQL programs to ODBC involves the handling of SQL statement errors. The MODE=ORACLE option is often used when developing embedded SQL programs. When this option is used, the SQL Communications Area (SQLCA) is typically used for error handling operations.</p>
<p>
The SQLCA structure provides:
<ul type=disc>
<li>
Oracle error codes<br><br></li>
<li>
Oracle error messages<br><br></li>
<li>
Warning flags<br><br></li>
<li>
Information regarding program events<br><br></li>
<li>
Number of rows processed by most recent SQL statement</li>
</ul>
<p>
In most cases, you should check the value in the <b>sqlca.sqlcode</b> variable following the execution of each SQL statement. If the value is less than zero, an error has occurred. If the value is greater than zero, the requested statement executed with warnings. The Oracle error message text can be retrieved from the <b>sqlca.sqlerrm.sqlerrmc</b> variable.</p>
<p>
In ODBC, a function returns a numeric status code that indicates its success or failure following the requested operation. The status codes are defined as string literals, and include SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NEED_DATA, SQL_ERROR, and others. It is your responsibility to check these return values following each function call.</p>
<p>
An associated SQLSTATE value may be obtained by calling the <b>SQLError</b> function.&nbsp; This function returns the SQLSTATE error code, the native error code (specific to the data source), and the error message text.</p>
<p>
An application typically calls this function when a previous call to an ODBC function returns SQL_ERROR or SQL_SUCCESS_WITH_INFO. However, any ODBC function can post zero or more errors each time it is called, so an application may call <b>SQLError</b> after every ODBC function call.</p>
<p>
Here are examples of error handling for each environment.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Oracle Pro*C and EMBEDDED SQL</b></td>
<td class=label width=50%><b>Oracle ODBC</b></td>
</tr>
<tr valign=top>
<td width=50%>EXEC SQL DECLARE CURSOR C1 CURSOR <br>
&nbsp;&nbsp;&nbsp;&nbsp;FOR SELECT SSN, FNAME, LNAME FROM&nbsp;&nbsp;&nbsp;&nbsp; STUDENT ORDER BY SSN;<br>
EXEC SQL OPEN C1;<br>
if (sqlca.sqlcode) != 0 {<br>
/* handle error condition, <br>
&nbsp;&nbsp;&nbsp;&nbsp;look at sqlca.sqlerrm.sqlerrmc for error&nbsp;&nbsp;&nbsp;&nbsp; description...*/}</td>
<td width=50%>if (SQLExecDirect(hstmtl,<br>
(SQLCHAR*)"SELECT SSN, FNAME, LNAME <br>
&nbsp;&nbsp;&nbsp;&nbsp;FROM STUDENT ORDER BY SSN", <br>
&nbsp;&nbsp;&nbsp;&nbsp;SQL_NTS) != SQL_SUCCESS) {<br>
/* handle error condition, use SQLError <br>
&nbsp;&nbsp;&nbsp;&nbsp;for SQLSTATE details regarding error...*/}</td>
</tr>
</table><br>
<h3>Developer 2000 and Third-party Applications</h3>
<p>
If you have developed an application using Oracle Developer 2000 and want to use it with SQL Server, you may want to consider converting it to Microsoft Visual Basic. Visual Basic is a powerful development environment that works well with both SQL Server and Oracle. You may also want to consider such development tools as the Microsoft Developer Studio visual development system, Powerbuilder, SQL Windows, and others.</p>
<p>
If you are unable to immediately migrate from Developer 2000, consider the Oracle Gateway to SQL Server. It can be used as a possible intermediate step when performing the migration from Oracle to SQL Server.</p>
<p>
This gateway allows the Oracle DBMS to connect to SQL Server. All requests for SQL Server data are automatically translated by the gateway. From the perspective of the Developer 2000 application, this connection is transparent. SQL Server data appears as Oracle data. Very few changes need to be made to the application program code.</p>
<p>
<img src="orcl2sql_41.gif" border=0></p>
<p>
Another intermediate step is to use the Developer 2000 application directly with SQL Server. Developer 2000 can directly access SQL Server using the Oracle Open Client Adapter (OCA). The OCA is ODBC level 1 compliant and has limited support for ODBC level 2 functions.</p>
<p>
The OCA establishes a connection with the SQL Server ODBC driver. When connecting the Developer 2000 tools to SQL Server, you must specify an ODBC data source name as part of the database connection string. When you exit the Developer 2000 application, the OCA connection to the ODBC data source is disconnected.</p>
<p>
The syntax for the logon connect string is demonstrated in the following example. In this example, the user logs on to the SQL Server STUDENT_ADMIN account. The name of the SQL Server ODBC data source is STUDENT_DATA: </p>
<pre><code>STUDENT_ADMIN/STUDENT_ADMIN@ODBC:STUDENT_DATA
</code></pre>
<p>
Using an ODBC driver does not ensure that a Developer 2000 application will work correctly SQL Server. The application program code must be modified to work with a non-Oracle data source. For example, the column security property is Oracle specific and does not work with SQL Server.</p>
<p>
You must change the key mode that is used to identify each row of data. When using Oracle as the data source, a ROWID is used to identify each row. When using SQL Server, you must work with unique primary key values to ensure unique row values.</p>
<p>
The locking mode also must be changed. When using Oracle, Developer 2000 attempts to lock a row of data immediately following any change to that row. When using SQL Server, the locking mode should be set to delayed so that the record is only locked when it is written to the database.</p>
<p>
They are many other issues that must be resolved, including the potential for a deadlock situation if multiple inserts on a table access the same page of data in PL/SQL program block. Refer to the chapter on Locking and Transactions for discussion on these issues.</p>
<h3>Internet Applications</h3>
<p>
Just as Oracle offers its WebServer, SQL Server includes the SQL Server Web Assistant, a tool that you can use to generate standard Hypertext Markup Language (HTML) files from SQL Server data. SQL Server Web Assistant is an integrated part of SQL Server beginning with release 6.5.</p>
<p>
The SQL Server Web Assistant generates HTML files by using Transact-SQL queries, stored procedures, and extended stored procedures. HTML files, also known as Web pages, can be viewed by using any HTML browser. HTML files are resources for displaying information on the World Wide Web (WWW) and on internal networks.</p>
<p>
The architecture of the SQL Server Web Assistant provides improved performance and scalability for noninteractive queries compared to database access solutions provided by Common Gateway Interface (CGI) applications.</p>
<p>
<img src="orcl2sql_42.gif" border=0></p>
<p>
With the SQL Server Web Assistant, you can generate an HTML file on a one-time basis or as a regularly scheduled SQL Server task. An HTML file also can be updated by using a trigger whenever relevant data changes. With this task-scheduling flexibility and the power of Transact-SQL, you can create Web pages to serve a variety of purposes.</p>
<p>
For example, you can use the SQL Server Web Assistant to:
<ul type=disc>
<li>
Schedule a task to automatically update a Web page price list whenever a new item is added or a price is changed, thus publishing a dynamic inventory and price list for customers and sales staff.<br><br></li>
<li>
Publish and distribute management reports including the latest sales statistics, resource allocations, or other SQL Server data.<br><br></li>
<li>
Publish server reports with information about who is currently accessing the server, which locks are being held, and by which users.<br><br></li>
<li>
Use extended stored procedures to publish information outside of SQL Server.<br><br></li>
<li>
Use a table of favorite Web sites to publish server jump lists.</li>
</ul>
<p>
You can create a Web page with the SQL Server Web Assistant in a few simple steps:
<ol>
<li>
Start the SQL Server Web Assistant.<br><br></li>
<li>
Create a query using the Query screen.<br><br></li>
<li>
Schedule the query using the Scheduling screen.<br><br></li>
<li>
Name and add options to the HTML file using the File Options screen.<br><br></li>
<li>
Include some basic formatting for the HTML file using the Formatting screen.</li>
</ol>
<p>
The SQL Server Web Assistant provides an interface for the <b>sp_makewebtask</b> stored procedure. This interface is available only on Intel-based computers. However, you can run the stored procedure that creates the HTML file from any supported platform. For more information, see <i>Microsoft SQL Server What's New in SQL Server 6.5</i>.</p>
<h2>Finding More Information</h2>
<p>
The following are recommended reference guides:
<ul type=disc>
<li>
<i>Inside ODBC</i>. Kyle Geiger, Microsoft Press.<br><br></li>
<li>
<i>Microsoft ODBC 3.0 Programmer's Reference and SDK Guide</i>, Microsoft Press.<br><br></li>
<li>
<i>Microsoft ODBC 2.0 Programmer's Reference and SDK Guide</i>, Microsoft Press.<br><br></li>
<li>
Microsoft SQL Server Books Online.</li>
</ul>
</BODY>
</HTML>

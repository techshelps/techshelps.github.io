<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft ADO and SQL Server Developer's Guide</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_adosql"></a>Microsoft ADO and SQL Server Developer's Guide</h1>
<p>
Joyce Chen and Richard Patterson<br>
Microsoft Corporation</p>
<p>
September 1997</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5185">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the sample files associated with this technical article.</a></p>
<h2><a name="adosql_intro"></a>Introduction</h2>
<p>
Consistently accessing data within the enterprise is a challenge for today's business applications. Open Database Connectivity (ODBC) provides the first step toward overcoming this challenge by enabling applications to access relational databases. However, as developers and system architects want to include nonrelational data sources and to work in environments such as the Internet, they encounter the dilemma of either developing their own data-access paradigms or working with application program interfaces (APIs) that are incompatible in the new environments. Microsoft® ActiveX™ Data Objects (ADO) along with OLE DB solves this dilemma by providing a single model that works with all data sources in a variety of environments.</p>
<p>
ADO provides consistent, high-performance access to data, whether you're creating a front-end database client or middle-tier business object using an application, tool, language, or even an Internet browser. ADO is the single data interface you need to know for one- to <i>n</i>-tier client/server and Web-based, data-driven solution development.</p>
<p>
This paper introduces ADO and the ADO programming model for application developers who are targeting Microsoft SQL Server™. Particular attention is given to taking advantage of SQL Server features with ADO, such as stored procedures and server cursors. The concepts presented in the sections titled "The ADO Object Model" and "Using ADO with Microsoft Visual Basic®, Microsoft Visual Basic Scripting Edition (VBScript), Microsoft Visual C++®, and Java" are applicable to all ADO programmers.</p>
<h3>Sample Application and Code References</h3>
<p>
The Microsoft Visual Basic OutputParam project is referenced and included with this paper. The OutputParam project contains examples on how to use the ADO object model with SQL Server. OutputParam contains two files:
<ul type=disc>
<li>
OutputParam.vbp<p class=tl>
Sample Visual Basic file that contains the OutputParam project settings.</P></li>
<li>
OutputParam.frm<p class=tl>
Sample Visual Basic/ADO file that contains the form and code for the OutputParam project. This form consists of CommandButtons. Each CommandButton corresponds to code that is referenced in each section of this paper.</P></li>
</ul>
</BODY>
</HTML>

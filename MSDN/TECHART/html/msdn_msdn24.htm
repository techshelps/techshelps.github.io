<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 24: Avoiding Errors When Removing Items from a List Box</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn24"></a></sup>Tip 24: Avoiding Errors When Removing Items from a List Box</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
The Visual Basic® List Box control lets you create an array of items that are shown in the control at run time. Your program can add new items to the List Box or delete items from the List Box. However, care must be taken when searching through the entire list to remove items that are selected (highlighted).</p>
<h2>Deleting Items from a List Box</h2>
<p>
When using the List Box control, you can add new items to the array by using the <b>AddItem</b> method. For example, to add the text "Item #1" to the List Box, you would execute the statement:</p>
<pre><code>List1.AddItem "Item #1"
</code></pre>
<p>
This item is added after the last entry in the List1 List Box. The <b>ListCount</b> property, which keeps track of the total number of items in the List Box, is incremented by a value of one each time the <b>AddItem</b> method is used.</p>
<p>
To delete an item from a List Box, you would use the <b>RemoveItem</b> method. The following statement deletes the first element, "Item #1", from the List Box:</p>
<pre><code>List1.RemoveItem (0)
</code></pre>
<p>
After executing the <b>RemoveItem</b> method, the count value stored in <b>ListCount</b> is automatically decremented by a value of one.</p>
<p>
As you can see, the <b>ListCount</b> variable keeps track of how many items are actually stored in the List Box at any given moment. <b>ListCount</b> numbers each item starting with zero, not with one. Therefore, if you have three items in the List Box, they are numbered 0, 1, and 2.</p>
<p>
In a Visual Basic® application, you can select (highlight) an individual item in a List Box by clicking on it. Later on in your program, you can find out which item or items were selected by issuing a statement such as:</p>
<pre><code>If List1.Selected(1) = True Then
 &nbsp;&nbsp; 'do something with selected item here
Else
 &nbsp;&nbsp; 'do something else
End If
</code></pre>
<p>
In other words, the <b>Selected</b> property is set to TRUE if the item was selected, or FALSE if the item was not selected.</p>
<p>
If you are using a MultiSelect List Box, your user can select more than one item at a time. When your program wants to delete all the selected items from a List Box, you simply loop through each entry in the control and issue the <b>RemoveItem</b> method.</p>
<p>
You might use a For-Next loop like the following to accomplish this task in Visual Basic:</p>
<pre><code>For X = 0 to ListCount -1
 &nbsp;&nbsp; If List1.Selected(X) = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.RemoveItem X
 &nbsp;&nbsp; End If
Next X
</code></pre>
<p>
However, this For-Next loop will produce an "Invalid property array index" error. This error occurs because each time the loop is executed, <b>ListCount</b> is reduced by one. Eventually, the value in <b>ListCount</b> is actually higher than the number of items stored in the List Box. Remember, each time you delete an item from a List Box, <b>ListCount</b> gets decremented. In the For-Next loop above, X is set to the total number of items in the List Box, but this value is not adjusted to reflect the actual number of items as each item is removed from the list. This is why Visual Basic generates the "Invalid property array index" error message.</p>
<p>
You can avoid this error in your application program if you use a Do-While loop instead of a For-Next loop. Each time through the loop, the X variable should be incremented by a value of one. If this is done, the code will successfully remove all selected items from the List Box.</p>
<h2>Example Program</h2>
<p>
The program below shows how you can successfully remove all items that are selected (highlighted) from a List Box. When you execute this program in Visual Basic, the List Box will be filled with 16 items. Select several items to delete by clicking the mouse on the items. When you're ready to actually remove these items from the List Box, click the "Delete Selected Items" command button. After a second or two, the List Box will display only those items that were not previously selected.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a List Box control to Form1. List1 is created by default. Set its <b>MultiSelect</b> property to 1-Simple.<br><br></li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Delete Selected Items".<br><br></li>
<li>
In the General Declarations section of Form1, type the following Dim statement:<pre><code>Dim X As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp;&nbsp; For X = 0 To 15
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem "Item #" &amp; Str$(X)
 &nbsp;&nbsp; Next X
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; X = 0
 &nbsp;&nbsp; Do While X &lt; List1.ListCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If List1.Selected(X) = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.RemoveItem X
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = X + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Loop
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

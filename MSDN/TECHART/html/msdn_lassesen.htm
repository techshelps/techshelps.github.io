<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Extended Object Map of Internet Explorer 4.01</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_lassesen"></a>An Extended Object Map of Internet Explorer 4.01</h1>
<p>
Kenneth Lassesen<br>
Microsoft Corporation</p>
<p>
February 1998</p>
<p>
Microsoft® Internet Explorer is the world's Automation browser of choice. Developers can quickly build customized browsers using its browser control inside an application developed with Visual Basic® or Visual C++® development systems. America Online (AOL), MSN™, The Microsoft Network, and other firms provide customized browsers, built around this control to customers.</p>
<p>
Internet Explorer may be automated as an in-process control in an application called the Microsoft Web Browser Control (WebBrowser) or as an out-of-process, stand-alone application in its own window called Microsoft Internet Explorer (IWebBrowser2). Both objects originate in the SHDocVw.dll with an overloading of properties that can become confusing. Both IWebBrowser2 and WebBrowser objects have a <b>FullScreen</b> property that may be set or read. In both, setting the value will trigger an onFullScreen event. WebBrowser does not react to this property's value. IWebBrowser2 will become full screen. </p>
<p>
WebBrowser is a control that has some extended object properties and methods shared by all controls, such as: <b>Move</b>, <b>Zorder</b>,<b> </b>and <b>ShowWhatsThis.</b> Some properties in IWebBrowser2 are replaced with the extended object properties—for example, <b>Left</b>, <b>Top</b>, <b>Width</b>, and <b>Height</b>. With IWebBrowser, the values of <b>Left</b>, <b>Top</b>, <b>Width</b>, and <b>Height</b> are <i>Long </i>values typical for a stand-alone application while with the WebBrowser they are <i>Single </i>values typical for a control<i>.</i> </p>
<p>
The change of event models causes a further complicaton. The Internet Explorer 3.0 events (DwebBrowserEvents) are available in Internet Explorer 4.0 for existing compiled applications but are not available in the Visual Basic integrated development environment (IDE). Care must be taken modifying applications using Internet Explorer events, as Table 1 summarizes:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=30%><b>Compiled using:</b></td>
<td width=43%><b>Some Events will not fire in the following browsers: </b></td>
<td width=27%><b>All Events work with:</b></td>
</tr>
<tr valign=top>
<td width=30%>Internet Explorer 3.0</td>
<td width=43%></td>
<td width=27%>Internet Explorer 3.0</td>
</tr>
<tr valign=top>
<td width=30%></td>
<td width=43%></td>
<td width=27%>Internet Explorer 4.0</td>
</tr>
<tr valign=top>
<td width=30%>Internet Explorer 4.0</td>
<td width=43%>Internet Explorer 3.0</td>
<td width=27%>Internet Explorer 4.0</td>
</tr>
</table><br>
<p class=label>
<b>Table 1. Browser event compatibility</b></p>
<p>
If you are developing an application that will be used with both Internet Explorer 3.0 and Internet Explorer 4.0, remember to use Internet Explorer 3.0 for development because Internet Explorer 3.0 is not forward compatible with Internet Explorer 4.0 events. The map shows how the unique Internet Explorer 3.0 events correspond to the new events. The arguments are not the same, as is shown in the following example:</p>
<pre><code>Internet Explorer 3.0 Event
Private Sub WebBrowser1_NavigateComplete(ByVal URL As String)

Internet Explorer 4.0 Event
Private Sub WebBrowser1_NavigateComplete2(ByVal pDisp As Object, URL As Variant)
</code></pre>
<p>
With most Automation servers, there are distinct <b>print</b>, <b>copy</b>, and <b>select all</b> methods. The methods do not exist as distinct methods with Internet Explorer 4.0. If you wish to print, copy, or select all through Automation, you call the <b>ExecWB </b>method with appropriate arguments. The <b>QueryStatusWB </b>is used to see if these methods are available in the current context (for example, you may not be able to print while the page is being downloaded).</p>
<p>
Internet Explorer has a <b>Document</b> property that connects to whatever is being displayed in Internet Explorer. This may be a Microsoft Word document, a Microsoft Excel spreadsheet, or, typically, an HTML page. An HTML page is represented by the Microsoft HTML Object Library, which is familiar to Web-design engineers and others who use scripting with HTML. The Microsoft HTML Object Library is a very rich object and only the top layer is shown on the map. A few examples of its possible use are shown here.</p>
<p>
The following lines write HTML directly from Visual Basic into the WebBrowser:</p>
<pre><code>'WebBrowser must first navigate to a HTML file.
WebBrowser1.Document.Open
WebBrowser1.Document.Write "&lt;H1&gt;Hello world&lt;/H1&gt;"
WebBrowser1.Document.Close
</code></pre>
<p>
You are able to dynamically create controls on the fly for use from your compiled application. The following sample creates and uses the calendar control:</p>
<pre><code>'WebBrowser must first navigate to a HTML file.
WebBrowser1.Document.Open
WebBrowser1.Document.Write "&lt;<b>object id=</b>calendar <b>classid=</b>clsid:8E27C92B-1264-101C-8A2F-040224009C02 <b>width=</b>372 height=279&gt;&lt;/object&gt; "
WebBrowser1.Document.Close
msgbox "The month is:" + WebBrowser1.Document.calendar.month
</code></pre>
<p>
The final example shows you how to create an evaluate function, dynamically create JavaScript objects, or write code that writes code that writes code that&nbsp;.&nbsp;.&nbsp;. :</p>
<pre><code>'WebBrowser must first navigate to a HTML file.
WebBrowser1.Document.Open
WebBrowser1.Document.Write "&lt;Script&gt; function evaluate(x){return eval(x)}&lt;/SCRIPT&gt;"
WebBrowser1.Document.Close
msgbox WebBrowser1.Document.script.evaluate("5+Math.sin(9)")
' 5.41211848524176 appears like magic
</code></pre>
<p>
In short, Internet Explorer is an awesome control that provides features that extend Visual Basic or Visual C++.</p>
<p>
Figure 1 below represents graphically an extended object map of Internet Explorer 4.01.</p>
<p>
<img src="lassesen1.gif" border=0></p>
<p class=label>
<b>Figure 1. Extended object map of Internet Explorer 4.01</b></p>
<p class=label>
</p>
</BODY>
</HTML>

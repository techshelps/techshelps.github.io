<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Microsoft OLE Automation Servers to Develop Solutions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_ole2soln"></a>Using Microsoft OLE Automation Servers to Develop Solutions</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
October 17, 1995</p>
<p>
<i>Sixteen sample applications are associated with this article. The buttons that access those samples are located throughout the article where each sample is discussed.</i></p>
<h2>Abstract</h2>
<p>
This technical article shows how to use the many OLE Automation servers available in Microsoft® Office and other products to develop solutions to fulfill corporate development needs. Sixteen different servers are discussed, with examples of code provided for each.</p>
<h2>Introduction</h2>
<p>
OLE Automation enables many Microsoft products to work together as a single entity. To appreciate the potential, consider the following scenario:</p>
<p>
A travel industry customer service representative uses a Visual Basic® application as the ultimate business solution. When a customer calls, the application uses the Remote Data Object (RDO) to access data from Microsoft® SQL Server. The application inserts this customer data into Microsoft Excel and creates a variety of pivot tables that it presents to the representative. The application inserts selected data into Microsoft Access and prints for the customer a report of possible flights. The customer selects a list of cities to visit and the application launches Microsoft Project to create and print an itinerary. The application passes the new transaction to Microsoft Word to print a confirmation letter. From Microsoft SQL Server, the application pulls pictures and text and creates a PowerPoint® presentation of the trip for the customer. Entries are made into the representative Schedule+ file for follow-up phone calls. All of these reports and presentations are e-mailed or faxed to the customer using the Messaging API (MAPI), which saves mail, paper, and handling costs. Finally, all of the documents are bound into a unit, by using the Binder, and then saved.</p>
<p>
What do the customer service representatives do now? They do what they did before—the <i>application</i>, not the <i>user</i>, controls all of the products. Representatives need no additional training time—they create no documents in Microsoft PowerPoint or Microsoft Project. They are ready to handle their next customer, and the customer receives a rich set of documents as an extra service.</p>
<p>
Not all products that support OLE features support OLE Automation. For example, many products enable OLE linking and embedding, but not OLE Automation. Linking and embedding allow the user to access the object; OLE Automation allows one program (the controller) to control another program (the server). </p>
<p>
This article serves as a jump start in using OLE Automation servers. There are many OLE Automation servers available—I will not explore any one OLE Automation server in depth. I will only cover the server sufficiently for you to write code that works, to show you what you need, and to send you in the right direction. To prevent version-specific complexities, I will concentrate on the Windows® 95 versions. I would recommend a brief reading of Kenneth Nilsen's "Using the OLE Automation Interface with Visual Basic" (MSDN Library Archive, Conference and Seminar Papers) as a general introduction to OLE and its concepts, or <a href="msdn_objguid.htm">"Your Unofficial Guide to Using OLE Automation with Microsoft Office and Microsoft BackOffice"</a> for a high-level overview. </p>
<p>
Before we look at the servers, I will discuss the OLE Automation controllers and point out a few important general concepts.</p>
<h2>OLE Automation Controllers</h2>
<p>
In this article I use the term <i>controller</i> for anything that controls an OLE Automation server. Other common names are <i>OLE Automation controller</i>, <i>OLE controller</i>, or incorrectly, <i>OLE</i> <i>Automation client</i>. The OLE Automation controller can connect to an OLE Automation server using one of several different methods. The method depends on the controller product and the version of the controller product. </p>
<p>
A controller may connect to a server in one of three ways:
<ul type=disc>
<li>
Late binding<br><br></li>
<li>
Early binding<br><br></li>
<li>
OLE control binding</li>
</ul>
<p>
Once the OLE Automation controller establishes a connection, it controls the server with the same commands that the server uses. The OLE Automation commands require ordered arguments syntax in most earlier controller product versions, such as Visual Basic versions 2.0 or 3.0, or Microsoft Access version 20. All of the 32-bit versions of the controller products (for example, Windows 95 versions) support the preferred named arguments syntax.</p>
<h3>The ABCs: Arguments, Bindings, and Controllers</h3>
<p>
Table 1 shows the OLE connection methods for all of the Microsoft products discussed in this technical article. All future products from Microsoft should support early binding and named arguments. If a product cannot function as an OLE Automation controller, "Controller Binding Allowed" in Table 1 is marked as None. (Note that version 7.0 of a product is the same as a "95" designation, for example, Microsoft Excel 95 is the same as Microsoft Excel version 7.0.)</p>
<p class=label>
<b>Table 1. Relationship of Products, Binding, and Arguments</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Official Name</b></td>
<td class=label width=15%><b>Version</b></td>
<td class=label width=32%><b>Controller Binding Allowed</b></td>
<td class=label width=28%><b>Arguments</b></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Access</td>
<td width=15%>1.1, 2.0</td>
<td width=32%>Late, OLE Control</td>
<td width=28%>Ordered</td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Access</td>
<td width=15%>7.0</td>
<td width=32%>Late, Early, OLE Control</td>
<td width=28%>Ordered, Named</td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Excel</td>
<td width=15%>4.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Excel</td>
<td width=15%>5.0</td>
<td width=32%>Late</td>
<td width=28%>Ordered, Named</td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Excel</td>
<td width=15%>7.0</td>
<td width=32%>Late, Early</td>
<td width=28%>Ordered, Named</td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Graph</td>
<td width=15%>1.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>OLE Messaging</td>
<td width=15%>1.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft PowerPoint</td>
<td width=15%>4.0, 5.0, 7.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Project</td>
<td width=15%>4.0, 7.0</td>
<td width=32%>Late, Early</td>
<td width=28%>Ordered, Named</td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Schedule+</td>
<td width=15%>7.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft SQL Server</td>
<td width=15%>6.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Microsoft Word</td>
<td width=15%>2.0, 6.0, 7.0</td>
<td width=32%>None</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=25%>Visual Basic</td>
<td width=15%>4.0</td>
<td width=32%>Late, Early, OLE Control</td>
<td width=28%>Ordered, Named</td>
</tr>
<tr valign=top>
<td width=25%>Visual Basic</td>
<td width=15%>2.0, 3.0</td>
<td width=32%>Late, OLE Control</td>
<td width=28%>Ordered</td>
</tr>
</table><br>
<h3>A Rose by Any Other Name . . .</h3>
<p>
Depending on the products you are using, there are several different sets of vocabulary to describe OLE components. 
<ul type=disc>
<li>
In this article, I call the program that supplies services to an application a <i>server</i> and the application that uses the services a<i> controller</i>.<br><br></li>
<li>
A variable declared as an <b>Object</b> data type or as an <i>application-defined object type</i><u> </u>("server.object": <b>Excel.Wordsheet</b>, <b>DAO.DBEngine</b>) is called an <i>object</i>.<br><br></li>
<li>
The variable that has been initialized (bound to a server) is called an <i>instance</i>.<br><br></li>
<li>
The set of methods, properties, and objects that the server makes available through an instance is called the <i>class.</i><br><br></li>
<li>
You can <i>create</i> and <i>destroy</i> an instance many times in a procedure. You can modify its properties repetitively.<br><br></li>
<li>
You can <i>declare</i> an object only once in a procedure. You cannot change or modify the class—it exists external to the controller. </li>
</ul>
<h3>Binding the Controller to the Server</h3>
<p>
The easiest way to explain the difference between bindings is to show you some code samples of the three ways of establishing the connection to the server. I will then explain what the differences mean to the developer. For a more technical discussion, see "Information for Visual Basic Programmers" in the "National Language Support Functions" Appendix under OLE Automation in the Win32® Software Development Kit (SDK) documentation.</p>
<h4>Late Binding</h4>
<p>
Late binding declares a variable as an object or a variant. The variable is initialized by calling <b>GetObject</b> or <b>CreateObject</b> and naming the OLE Automation programmatic identifier (ProgID). For example, if the ProgID is "Mom.ApplePie," the code could appear like this:</p>
<pre><code>Dim objPie As Object
Dim objSlice as variant
Set objPie = CreateObject("Mom.ApplePie")
Set objSlice = CreateObject("Mom.PieSlice")
</code></pre>
<p>
Late binding was the first binding method implemented in controller products. Late binding is the friendly name for what C programmers call <b>lDispatch</b>-based binding. It uses a lot of overhead—it is faster than DDE, but slower than early binding. It is available in all products capable of being controllers. All OLE Automation servers support late binding.</p>
<h4>Early Binding</h4>
<p>
Early binding declares a variable as an application-defined object type. Early binding is the friendly name for what C programmers call <i>virtual function table bindings</i> or <i>vtable binding</i>. Although some variables can be declared with <b>New</b> for some servers (this would initialize the variable automatically), avoid using it (see comments in the "Microsoft Schedule+" section later). The variable should be initialized using the <b>CreateObject</b> or <b>GetObject</b> commands. A type library, object library, or dynamic-link library is required to declare a variable as an application-defined object type. This library must be checked in the controller application's References dialog box. The OLE Messaging, Schedule+, and Microsoft Graph OLE Automation servers do not support early binding at present.</p>
<pre><code>Dim objPie As New Mom.ApplePie 'Invalid use of the New Keyword common
</code></pre>
<p>
Or:</p>
<pre><code>Dim objPie As Mom.ApplePie
Set objPie = CreateObject("Mom.ApplePie")
</code></pre>
<h4>OLE Control Binding</h4>
<p>
OLE control binding uses an OLE control to contain the OLE Automation server in a window belonging to the controller. This control is usually used for linking and embedding, but may also be used for OLE Automation<i> if </i>the OLE product supports it. In the following code sample, the <b>ole1</b> variable is a MSOLE2 control:</p>
<pre><code>ole1.Class = "Mom.ApplePie"
ole1.Action = VB.OLEContainerConstants.vbOLEEmbedded
ole1.Action = VB.OLEContainerConstants.vbOLEActivateAuto
ole1.Object.CrustThickness = 3
ole1.Object.Apples = "Granny Smith"
ole1.Object.Slices = 8
</code></pre>
<p>
OLE control binding does late binding to the server.</p>
<h4>Binding Factors</h4>
<p>
Some OLE Automation controller products have three options available for binding—which do you use? Early binding is preferred for several important reasons:
<ul type=disc>
<li>
Early binding checks all of the code against the syntax stored in the type library when you compile the executable or compile Visual Basic for Applications code. Syntax errors are detected during the compile. This is not true with late binding or OLE control binding.<br><br></li>
<li>
Early binding is insensitive to the localized version of the products you are using. Late binding and control binding are sensitive to the localized version. If the user is running the French version of Microsoft Word and you did <i>not</i> use a type library, the commands must be the French version's commands.<br><br></li>
<li>
Early binding performance is significantly faster than late or control binding.</li>
</ul>
<p>
I did some timings of early binding to in-process servers using Visual Basic 4.0. I found that early binding sometimes performed better than having the class instance within the executable. </p>
<p>
Given these factors, I will assume in the remainder of this article that you are always using a library—a type library, an object library, or a DLL—and doing early binding (if it is available). </p>
<h4>Performance Factors</h4>
<p>
OLE Automation servers contained in executables are called <i>out-of-process servers</i>. Servers contained in dynamic-link libraries (DLLs) are called <i>in-process servers</i>. If the controller is 16-bit, the in-process server must be a 16-bit DLL, and if the controller is 32-bit, the in-process server must be a 32-bit DLL. This requirement for in-process servers—that the controller and library both have the same "bitness"—results in data going directly between the DLL and the application with very, very little overhead—literally nothing!</p>
<p>
Out-of-process servers move data indirectly between the controller executable and the server executable. This can result in many milliseconds to pass an integer, but 32-bit executables and 16-bit executables can talk to each other without thunking. This is an important issue if you are <i>writing</i> the server, but inasmuch as we are only talking about <i>using</i> servers, it is a moot issue.</p>
<p>
If performance is critical to the controller, I do the following steps:
<ol>
<li>
Count the number of communications between OLE Automation server and OLE Automation controller and try to reduce the steps by changing the commands or the algorithm.<br><br></li>
<li>
Check to see if the server supports macros or procedures. If so, create the code as a macro or procedure in one or two communications and then call the macro or procedure.</li>
</ol>
<p>
These suggestions assume that I have already coded the commands as recommended in the next section. So let us look at coding commands in the controller application.</p>
<h3>Writing Commands</h3>
<p>
There are several ways of writing commands in the controller code. The ways available in newer products such as Visual Basic 4.0 and Microsoft Access 7.0 are better than the ways required in the older products. Better? Yes, the code is cleaner, easier to understand, and runs faster. My basic rules for writing code in the newer products are:
<ul type=disc>
<li>
Use named arguments.<br><br></li>
<li>
Fully qualify objects and methods.<br><br></li>
<li>
Eliminate requalifying.</li>
</ul>
<h4>Use Named Arguments</h4>
<p>
Most developers have had the frustrating experience of misplacing an argument in a function call. With earlier versions of many products, you were required to give all arguments in the correct argument order for the function to work. At times, this programming approach can get very old—like the instructions from my old social studies teacher, Miss Schooly, who required us to put our name, class, date, and home room on the top of each page (including the back side of pages!). </p>
<p>
The newer version gives the options of named arguments and optional arguments. An illustration may clarify the change.</p>
<pre><code>A$ = SillyWalks(3, ra, cs, rs, 0) 'Ordered Arguments

A$ = SillyWalks(Actor:=rs, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CrazySteps:=cs, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RouteArray:=ra, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Speed:=3) 'Named Arguments
'Note that 0 is dropped because this is the default value.
</code></pre>
<p>
The named argument syntax above is easier to read and more meaningful—especially to anyone who inherits this code! There is no speed lost in the Windows 95 controller products when you use named arguments.</p>
<h4>Fully Qualify Objects and Methods</h4>
<p>
Most developers are familiar with data access objects (DAOs) and will refer to them simply as <b>DBEngine</b> or <b>Database</b> in their code. Well, that's not cool anymore. This way will still work in many products (for backward compatibility), but you should qualify all application-defined object types<i> </i>by their library name (in this case, <b>DAO</b>). The new way is to use <b>DAO.DBEngine</b> or <b>DAO.Database</b> instead. Every object is qualified for some very significant reasons.</p>
<p>
First, this approach allows the developer to know where this object is coming from—this will become a greater and greater problem as more OLE Automation servers are added to the marketplace. If I find a line of code declaring a variable as a <b>DocumentProperty</b> or <b>Permission</b>, can you tell me where to look for documentation on this object? Variables defined as <b>MicrosoftOffice.DocumentProperty</b> or <b>SQLOLE.Permission</b> clarify this quickly. I usually go the extra mile and fully qualify constants by including their object. Figure 1 shows an example of a fully qualified constant with the names of the components.</p>
<p>
<img src="ole2soln_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The structure of a full qualified constant</b></p>
<p>
Second, this approach prevents ambiguous references. If two different OLE Automation servers have the same object name, you will be forced to qualify every instance later—it will happen. It <i>has</i> happened, for example with <b>SQLOLE.Databases</b> and <b>DAO.Databases</b> or with <b>SQLOLE.Properties</b>, <b>DAO.Properties</b>, and <b>Access.Properties</b>.</p>
<p>
Third, if you do not qualify the object, the Visual Basic for Applications engine must search through <i>all</i> of the references to find it. This slows down the application. In short, using qualified objects means faster execution!</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Basic for Applications reconciles an object first against its host and then against the type libraries in the order that they appear in the References dialog box.</p>
<h4>Eliminate Requalifying</h4>
<p>
OLE Automation sends messages back and forth between controller and server. The older versions of controller products could not keep a connection open, so a new connection occurred each time a message needed to be sent, known as <i>requalifying</i> in the documentation. This connection can be kept open in the newer controller products if the <b>With</b> and <b>For ... With</b> commands are used. Some examples may clarify the difference in code. </p>
<pre><code>'Reconnection occurs each time
MyObject.Height = 100
MyObject.Caption = "Hello World"
MyObject.Font.FontSize = 32
MyObject.Font.FontBold = True

'Only two connections
With MyObject
 &nbsp;&nbsp; .Height = 100
 &nbsp;&nbsp; .Caption = "Hello World"
 &nbsp;&nbsp; With .Font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FontSize = 32
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FontBold = True
 &nbsp;&nbsp; End With
End With
</code></pre>
<p>
I recommend always using the <b>With</b> command for early binding—the code is easier to understand and is faster. If you are using late binding, the <b>With</b> command will slow down execution and should be avoided. Table 2 shows the results on a sample automation I wrote to verify this information.</p>
<p class=label>
<b>Table 2. Time to Execute an Automation Sequence with Different Options</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Binding</b></td>
<td class=label width=35%><b>Requalifying</b></td>
<td class=label width=37%><b>Using "With"</b></td>
</tr>
<tr valign=top>
<td width=28%>Early</td>
<td width=35%>16.06 seconds</td>
<td width=37%>14.39 seconds</td>
</tr>
<tr valign=top>
<td width=28%>Late</td>
<td width=35%>25.78 seconds</td>
<td width=37%>28.06 seconds</td>
</tr>
</table><br>
<h3>Writing Code</h3>
<p>
"How do I write OLE Automation code? There is no documentation!" is a frequent complaint from developers new to OLE Automation. This is false—but people cannot see it because they expect a huge tome and get a few lines instead. Because the goal is to write code and not to read thousands of pages, I will start by looking at how to write code.</p>
<p>
The three ways to write code are:
<ul type=disc>
<li>
Using a recorder<br><br></li>
<li>
Using the Object Browser<br><br></li>
<li>
Using the documentation</li>
</ul>
<p>
To be truthful, there is a fourth method: "Firing commands at random, blindfolded and drunk on fatigue." Since I've "been there, done that, ain't going back," I describe it simply as guessing object names, command names, and arguments until you get it right or give up in frustration. If you have been there and don't want to be there again, read the following carefully and get your wall clear for some big maps to these OLE Automation servers.</p>
<h4>Using Recorders</h4>
<p>
My favorite trick is using a recorder to record a series of actions in the server application. I modify this recording to produce OLE Automation code for the controller. Recorders are not available in all products, but third-party developers will fill this void as the OLE Automation paradigm increases. The products with recorders built-in are shown in Table 3. </p>
<p class=label>
<b>Table 3. Recorders Available in OLE Servers</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Product</b></td>
<td class=label width=18%><b>Version</b></td>
<td class=label width=24%><b>Recorder Location</b></td>
<td class=label width=41%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=17%>Microsoft Excel</td>
<td width=18%>4.0, 5.0, 7.0</td>
<td width=24%>Tools / Record Macro</td>
<td width=41%>Check that Options is set to Visual Basic. Code is stored in a module in the active workbook.</td>
</tr>
<tr valign=top>
<td width=17%>Microsoft Project</td>
<td width=18%>4.0, 7.0</td>
<td width=24%>Tools / Record Macro</td>
<td width=41%>Code is stored in module in the active project.</td>
</tr>
<tr valign=top>
<td width=17%>Microsoft Word</td>
<td width=18%>1.0, 2.0 ,6.0, 7.0</td>
<td width=24%>Tools / Macro / Record</td>
<td width=41%>Code is stored in a macro in the template files.</td>
</tr>
</table><br>
<p>
The Microsoft Excel recorder created the following code:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;Range("A1").Select
 &nbsp;&nbsp; ActiveCell.FormulaR1C1 = "Name"
 &nbsp;&nbsp; Range("A1").Select
 &nbsp;&nbsp; With Selection.Font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Name = "Arial Black"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FontStyle = "Bold"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 11
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Strikethrough = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Superscript = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Subscript = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OutlineFont = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Shadow = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Underline = xlNone
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .ColorIndex = 3
 &nbsp;&nbsp; End With
</code></pre>
<p>
You must make some changes for this code to work from a controller:
<ul type=disc>
<li>
Commands must be qualified by an instance.<br><br></li>
<li>
Commands (including constants!) must be prefixed with a dot (".").<br><br></li>
<li>
Arguments must be changed from "=" to ":=".</li>
</ul>
<p>
The resulting controller code becomes:</p>
<pre><code>With ThisSpreadSheet
 &nbsp;&nbsp; .Range("A1").Select&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '&lt;== Dot added
 &nbsp;&nbsp; .ActiveCell.FormulaR1C1 = "Name"&nbsp;&nbsp; '&lt;== Dot added
 &nbsp;&nbsp; .Range("A1").Select&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '&lt;== Dot added
 &nbsp;&nbsp; With .Selection.Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '&lt;== Dot added
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Name = "Arial Black"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FontStyle = "Bold"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 11
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Strikethrough = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Superscript = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Subscript = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OutlineFont = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Shadow = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Underline = Excel.xlNone&nbsp;&nbsp;&nbsp;&nbsp; '&lt;== Library name and dot added
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .ColorIndex = 3
 &nbsp;&nbsp; End With
End With
</code></pre>
<p>
No major rocket science here—just monkey see, monkey do. </p>
<h4>Using the Object Browser</h4>
<p>
The Object Browser is available in all of the Microsoft products that have Visual Basic for Applications built in. Visual Basic 3.0 (or earlier) and Microsoft Access 2.0 (or earlier) do not have Visual Basic for Applications built into them and do not have the Object Browser. (They also do not support named arguments.) When you are viewing a module or code window and you press F2, an Object Browser appears, similar to the one shown in Figure 2. </p>
<p>
<img src="ole2soln_2.gif" border=0></p>
<p class=label>
<b>Figure 2. A sample Object Browser</b></p>
<p>
The topmost drop-down list box shows all the available libraries from the References dialog box. These libraries allow you to "early bind" to OLE Automation servers. The left list box shows the objects in the library. The right list box shows the methods and properties (including constants). The bottom of the dialog box gives additional information about the item in the right list box, including a command button to jump to a Help topic (if available).</p>
<p>
This dialog box makes life simpler. Object variables are declared by taking the first word in the Libraries/Workbooks drop-down list box, "Word," and then adding this word to the desired object in the left list box, "WordBasic," to get "Word.WordBasic." For example:</p>
<pre><code>Dim MyWord as Word.WordBasic
</code></pre>
<p>
To use a method or property, simply select the desired method or property, and click Paste to have a template pasted into your code. For example:</p>
<pre><code>EditFind Find:=, Direction:=, MatchCase:=, WholeWord:=, PatternMatch:=, 
SoundsLike:=, Format:=, Wrap:=
</code></pre>
<p>
(In the above line of code, we added a hard return to make it visible on your screen. If you are pasting the code into your project, be sure to remove the hard return before "SoundsLike".)</p>
<p>
You must then add the dot, qualify it by an instance, remove unneeded named arguments, and supply the appropriate argument values. For example:</p>
<pre><code>With MyWord
 &nbsp;&nbsp; .EditFind Format:=1, Wrap:=1
 &nbsp;&nbsp; </code>' <code>etc.</code>
<code>End With</code>
</pre>
<p>
A word of advice: Most OLE servers have their constant values defined in the library. ALWAYS (I do mean to shout!) use the built-in constants! The numeric values of some constants can change between product versions. Remember to qualify the constants with at least the library name. For example:</p>
<pre><code>MyPreparedStatement.OpenResultset _
 &nbsp;&nbsp;&nbsp; (Type:=RDO.rdOpenForwardOnly, _
 &nbsp;&nbsp;&nbsp;&nbsp; LockType:=RDO.rdConcurRowver, _
 &nbsp;&nbsp;&nbsp;&nbsp; Options:=RDO.rdAsyncEnable)
</code></pre>
<p>
If the type library has many objects that contain constants, include the object name as shown here:</p>
<pre><code>MyPreparedStatement.OpenResultset( _
 &nbsp;&nbsp;&nbsp;&nbsp; Type:=RDO.ResultsetTypeConstants.rdOpenForwardOnly, _
 &nbsp;&nbsp;&nbsp;&nbsp; LockType:=RDO.LockTypeConstants.rdConcurRowver, _
 &nbsp;&nbsp;&nbsp;&nbsp; Options:=RDO.OptionConstants.rdAsyncEnable)
</code></pre>
<p>
If the object browser does not list the OLE server you need, you must put a check mark by its library in the References dialog box, as shown in Figure 3. If the OLE Automation server does not appear in the list, you must add it by selecting the appropriate library file using the <b>Browse...</b> command button. Table 4 (below Figure 3) shows a list of these essential library files and their related products. Select the file listed under the heading Reference File. For more information, see "VBA Editing and Debugging Tools" in Chapter 2 of Eric Wells's <i>Developing Microsoft Excel 5 Solutions</i>.</p>
<p>
<img src="ole2soln_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Selecting a reference</b></p>
<p class=label>
<b>Table 4. Name of Product File Containing Object Browser Information</b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Product</b></td>
<td class=label width=12%><b>Version</b></td>
<td class=label width=20%><b>Reference File</b></td>
<td class=label width=19%><b>Library Name</b></td>
<td class=label width=29%><b>Reference Title</b></td>
</tr>
<tr valign=top>
<td width=20%>Microsoft Access</td>
<td width=12%>7.0</td>
<td width=20%>msaccess.tlb</td>
<td width=19%>Access</td>
<td width=29%>Microsoft Access for Windows 95</td>
</tr>
<tr valign=top>
<td width=20%>Binder</td>
<td width=12%>1</td>
<td width=20%>binder.tlb</td>
<td width=19%>OfficeBinder</td>
<td width=29%>Office Binder 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=20%>DAO</td>
<td width=12%>2.5/3.0</td>
<td width=20%>dao2532.dll</td>
<td width=19%>DAO</td>
<td width=29%>Microsoft DAO 2.5/3.0 Compatibility Library</td>
</tr>
<tr valign=top>
<td width=20%>DAO</td>
<td width=12%>2.5</td>
<td width=20%>dao2516.dll</td>
<td width=19%>DAO</td>
<td width=29%>Microsoft DAO 2.5 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>DAO</td>
<td width=12%>3.0</td>
<td width=20%>dao3032.dll</td>
<td width=19%>DAO</td>
<td width=29%>Microsoft DAO 3.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>Microsoft Excel</td>
<td width=12%>5.0</td>
<td width=20%>xl5en32.olb</td>
<td width=19%>Excel</td>
<td width=29%>Microsoft Excel 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>MS Graph</td>
<td width=12%>5.0</td>
<td width=20%>gren50.olb.</td>
<td width=19%>Graph</td>
<td width=29%>Microsoft Graph 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>MAPI</td>
<td width=12%>7.0</td>
<td width=20%>mdisp32.tlb<br>
mdisp.tlb</td>
<td width=19%>MAPI</td>
<td width=29%>OLE/Messaging 1.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>Office</td>
<td width=12%>7.0</td>
<td width=20%>mso50enu.dll</td>
<td width=19%>MicrosoftOffice</td>
<td width=29%>Microsoft Office 95 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>PowerPoint</td>
<td width=12%>7.0</td>
<td width=20%>powerpnt.tlb</td>
<td width=19%>PowerPoint</td>
<td width=29%>PowerPoint 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>Microsoft Project</td>
<td width=12%>4.1</td>
<td width=20%>pj4en32.olb</td>
<td width=19%>MSProject</td>
<td width=29%>Microsoft Project 4.1 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>RDO</td>
<td width=12%>1.0</td>
<td width=20%>msrdo32.dll</td>
<td width=19%>RDO</td>
<td width=29%>Microsoft Remote Data Object 1.0</td>
</tr>
<tr valign=top>
<td width=20%>Schedule+</td>
<td width=12%>7.0</td>
<td width=20%>sp7en32.olb</td>
<td width=19%>SPL</td>
<td width=29%>Microsoft Schedule+ 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=20%>SQL-DMO</td>
<td width=12%>6.0</td>
<td width=20%>sqlole32.tlb</td>
<td width=19%>SQLOLE</td>
<td width=29%>Microsoft SQLOLE Object Library</td>
</tr>
<tr valign=top>
<td width=20%>Voice Command</td>
<td width=12%>1.0</td>
<td width=20%>vcauto.tlb</td>
<td width=19%>VCmdAuto</td>
<td width=29%>VoiceCommand 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=20%>Voice Text</td>
<td width=12%>1.0</td>
<td width=20%>vtxauto.tlb</td>
<td width=19%>VTxtAuto</td>
<td width=29%>VoiceText 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=20%>Word</td>
<td width=12%>6.0</td>
<td width=20%>wb60en.tlb</td>
<td width=19%>Word</td>
<td width=29%>Microsoft WordBasic Object Library</td>
</tr>
<tr valign=top>
<td width=20%>Word</td>
<td width=12%>7.0</td>
<td width=20%>wb70en32.tlb</td>
<td width=19%>Word</td>
<td width=29%>Microsoft WordBasic 95 Type Library</td>
</tr>
<tr valign=top>
<td width=20%>Word</td>
<td width=12%>7.0</td>
<td width=20%>wd95acc.tlb</td>
<td width=19%>Word95ACC</td>
<td width=29%>Word 95 Objects for Access</td>
</tr>
</table><br>
<h4>The Confession</h4>
<p>
Some problems can frustrate your use of application-specific object types. These are not features, but bugs! They are fixed in the later version of Visual Basic for Applications shipped with Visual Basic 4.0 and Microsoft Access 7.0.</p>
<p>
The Object Browser in Microsoft Excel 7.0 and Microsoft Project 4.1 will display hidden and disabled elements in some servers. Check the server's Help file or the extended map listed below to identify elements that you can use. A simple way to check that the Object Browser displays only enabled elements is to examine the "Microsoft DAO 2.5/3.0 Compatibility Library," found in Microsoft Access, Visual Basic, and some Microsoft Office products—the <b>IndexFields</b> object should <i>not</i> be visible in the Object Browser.</p>
<p>
With the same products (Microsoft Excel 7.0 and Microsoft Project 4.1), you cannot successfully declare a variable as <b>Access.Application</b>. If you try, you will receive an "Object library feature not supported" message. Placing an underscore in front of the object and enclosing it in square brackets will generally resolve this problem. The variable should be declared as <b>Access.[_Application]</b>.</p>
<p>
Further, in Microsoft Excel 7.0 and Microsoft Project 4.1, you cannot use the <b>New</b> keyword when you dimension the application-specific object types. One last confession—some of the type libraries still have bugs in some of their commands; occasionally you will be forced to use late binding.</p>
<h4>Using the Documentation</h4>
<p>
A properly constructed server comes with a type library that points to topics in a Help file. Dream on. The reality of the industry is that many type libraries and Help files often ship as afterthoughts because there was not enough time to complete them, test them, and still meet the product shipment date.</p>
<p>
Microsoft Word is a good example. In Word version 2.0, the programming reference Help file did not ship with the product; it was a separate fulfillment product. In Word version 6.0 and Word 95, the Word type libraries did not ship with the product; they were distributed later for free. A few products succeed in delivering the dream—DAO, SQL Distributed Management Objects (SQL-DMO), and RDO shipped with polished type libraries and Help files.</p>
<p>
You can use a programming reference Help file to write OLE Automation code. The Help file does describe the topics from the perspective of the OLE Automation application, so remember the following:
<ul type=disc>
<li>
Qualify every command with the appropriate object. Use the library name if you cannot identify an object.<br><br></li>
<li>
Always use named arguments. The arguments may not be shown in the correct ordered argument sequence.</li>
</ul>
<p>
A command from Microsoft Word will illustrate this. The following line from the WordBasic Reference gives the arguments for the <b>GetAddress$</b> command in Word 95 (a hard return was added before [SelectDialog] to make the line visible on your screen):</p>
<pre><code>GetAddress$([Name$], [AddressProperties$], [UseAutoText], [DisplaySelectDialog], 
[SelectDialog], [CheckNamesDialog], [MRUChoice], [UpdateMRU])
</code></pre>
<p>
To use this command in Visual Basic, I qualify it with a Word object. For example:</p>
<pre><code>Dim MyWord as Word.WordBasic 
....
With MyWord
 &nbsp; letterAddress$ = .GetAddress$( _
 &nbsp;&nbsp;&nbsp;&nbsp; Name$ :="Ken Lassesen", _
 &nbsp;&nbsp;&nbsp;&nbsp; AddressProperties :="" _
 &nbsp;&nbsp;&nbsp;&nbsp; )
 &nbsp; .StartOfDocument
 &nbsp; .Insert letterAddress$
End With
</code></pre>
<p>
Now that I have explained the general methods of creating OLE Automation code, it is time to look at each Microsoft OLE Automation server.</p>
<h2>OLE Automation Servers</h2>
<p>
OLE Automation servers are like a family—each child inherits a mixture of characteristics that makes all the children look similar in some aspects, but each child has his or her own special characteristics. Different servers may contain very similar objects, commands, and behavior. Servers can also be very dissimilar—so much so, in fact, that a developer can become frustrated when one server does not behave like another server. Each server has its own personality.</p>
<p>
In this section I will not contrast the many servers covered—that would be at least 240 sub-sections. I will, however, give:
<ul type=disc>
<li>
A thumbnail description of the server and some of its uses.<br><br></li>
<li>
A short tabular summary of necessary information about the server.<br><br></li>
<li>
A programmatic identifier (ProgID) and class identifier (CLSID) table for the server.<br><br></li>
<li>
An example of using the server with a very brief discussion of any important points.</li>
</ul>
<p>
An example of a tabular summary of information for a type library is shown in Table 5. The type library is used to do API calls. This API type library is not covered in this article, but it is shipped with the Microsoft Press® book <i>Hard Core Visual Basic</i> by Bruce McKinney.</p>
<p class=label>
<b>Table 5. Quick Summary Example</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=29%>Reference File</td>
<td width=71%>WINAPI32.TLB, WINAPI16.TLB</td>
</tr>
<tr valign=top>
<td width=29%>Reference Title</td>
<td width=71%>Windows API Functions</td>
</tr>
<tr valign=top>
<td width=29%>Object Browser Library Name</td>
<td width=71%>Win</td>
</tr>
<tr valign=top>
<td width=29%>Object Browser Title</td>
<td width=71%>Windows API Functions</td>
</tr>
<tr valign=top>
<td width=29%>Programming Help File </td>
<td width=71%>Use the MSDN Library CD for the SDK documentation and Bruce McKinney's&nbsp; <i>Hard Core Visual Basic</i> book from Microsoft Press. </td>
</tr>
<tr valign=top>
<td width=29%>Extended Map</td>
<td width=71%>Not available at present </td>
</tr>
<tr valign=top>
<td width=29%>Redistribution Rights</td>
<td width=71%>See the McKinney book, or contact Microsoft Press for current rights. </td>
</tr>
<tr valign=top>
<td width=29%>Source Information</td>
<td width=71%>Available in <i>Hard Core Visual Basic</i> by Bruce McKinney, Microsoft Press </td>
</tr>
<tr valign=top>
<td width=29%>Externally Creatable (<b>New</b>)</td>
<td width=71%>False</td>
</tr>
<tr valign=top>
<td width=29%>Server Command</td>
<td width=71%>Multiple-system DLLs </td>
</tr>
<tr valign=top>
<td width=29%><b>CreateObject</b></td>
<td width=71%>Not used. </td>
</tr>
<tr valign=top>
<td width=29%><b>GetObject</b></td>
<td width=71%>Not used. </td>
</tr>
<tr valign=top>
<td width=29%>Terminate Object</td>
<td width=71%>Terminate with controller. </td>
</tr>
</table><br>
<p>
The programmatic identifier and class identifier table for Microsoft Project is shown in Table 6.</p>
<p class=label>
<b>Table 6. Sample Identifier Table</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>ProgID</b></td>
<td class=label width=65%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=35%>MSProject.Application </td>
<td width=65%>{00020AFE-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=35%>MSProject.DocFile</td>
<td width=65%>{00020A00-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=35%>MSProject.Project</td>
<td width=65%>{00020A00-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
Let us examine what these tables contain.</p>
<h3>Reference File</h3>
<p>
This is the name of the file that must be registered in the References dialog box to use the Object Browser or early binding. If the server does not appear in the References dialog box, you must select the reference file name using the Browse command button. Use the Find command in Windows 95 to search your computer for this file.</p>
<p>
The English version is listed first, before any foreign language versions. For example, the Visual Basic for Applications reference file may be one of the following:</p>
<p>
VBAEN32.OLB<br>
VBABRZ32.OLB<br>
VBAFR32.OLB<br>
VBADE32.OLB<br>
VBAIBP32.OLB</p>
<p>
Future versions of all products may have only an English reference file.</p>
<h3>Reference Title</h3>
<p>
This is the name of the server as it appears in the References dialog box.</p>
<h3>Object Browser Library Name</h3>
<p>
This is the name that qualifies all of the server's objects, methods, and constants.</p>
<h3>Object Browser Title</h3>
<p>
This is the name of the server as it appears in the Object Browser dialog box. This name does not appear in the Microsoft Excel 7.0 or Microsoft Project 4.1 Object Browser. (See the earlier section "The Confession.") Although the Object Browser Title and the Reference Title <i>should</i> be the same, some older servers give them different names.</p>
<h3>Programming Help File</h3>
<p>
This is the name of the file that contains detailed information about programming the server. I hate to admit it, but the shipped product may not include this essential documentation. If you must use the product before obtaining this documentation, use the Object Browser. It provides enough essential information to program the server.</p>
<h3>Extended Map</h3>
<p>
An "extended map" is an exhaustive chart showing all of the objects, methods, properties, and lists in an object. It was an idea that I tossed out, and my fab boss, Nigel Thompson, said "Make it so!" A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with the object: I just post the appropriate map on my wall for quick reference, which is a lot faster than clicking objects in a Help file one by one to discover their properties and methods. Figure 4 shows an example of a simple extended map. </p>
<p>
<img src="ole2soln_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Extended map of the Microsoft Office 95 Object Library </b></p>
<h3>Redistribution Rights</h3>
<p>
The Redistribution Rights entry gives you a short description of<i> some</i> restrictions that may apply. This summary is not a legal statement of the rights, nor is it complete. You'll find the legal statement regarding redistribution rights somewhere in the product's documentation or subsequent official notifications.</p>
<h3>Source Information</h3>
<p>
When developers do not find the reference file on their computer, they start to search. They often spend a day reinstalling the product, calling friends, and checking computer bulletin board systems. Finally, they look through the file lists on all of the CD-ROM discs in the Development Platform (28 CD-ROMs for October 1995). Well, that gets old fast, so I include information on where to find the Reference File (or Programming Help File).</p>
<h3>Externally Creatable</h3>
<p>
Can the topmost object be created using the <b>New</b> keyword? A server may contain both objects that <i>are</i> externally creatable and those that are <i>not</i> externally creatable. The name of the object according to the type library is shown. Some objects may be creatable only <i>in some circumstances</i>.</p>
<h3>Server Command</h3>
<p>
This is the value of the <b>LocalServer</b> or <b>LocalServer32</b> property for the Class ID listed in the system registry (removing any path information). This is the file that supplies the server to the application. If the file is an executable (.EXE), the server is an out-of-process server. If the file is a dynamic-link library (.DLL), the server is an in-process server.</p>
<p>
Some server executables require a command-line argument that includes the word <i>Automation</i>. These executables include MSGRAPH.EXE, EXCEL.EXE, WINWORD.EXE, SCHPLS32.EXE, MDISP32.EXE, and POWERPNT.EXE.</p>
<h3>CreateObject</h3>
<p>
When the <b>CreateObject</b> function is called, one of three things could happen: 
<ul type=disc>
<li>
A new instance is automatically created. The <b>Excel.Application</b> server behaves like this.<br><br></li>
<li>
A prior instance is used if available; otherwise, an instance is created. The <b>Word.WordBasic</b> server behaves like this.<br><br></li>
<li>
The call fails because the object is not creatable. The <b>MicrosoftOffice.Properties</b> server behaves like this.</li>
</ul>
<p>
The server's topmost object behavior is described <i>only</i> in this section. Each creatable object may display different behavior.</p>
<h3>GetObject</h3>
<p>
When the <b>GetObject</b> function is called, the response could be one of the following:
<ul type=disc>
<li>
Succeed by creating a system instance.<br><br></li>
<li>
Succeed by seizing a prior system instance.<br><br></li>
<li>
Fail because there are no prior system instances loaded.<br><br></li>
<li>
Fail because it cannot be created.</li>
</ul>
<p>
The server's topmost object behavior is described here. Each creatable object may display different behavior.</p>
<h3>TerminateObject</h3>
<p>
I would love to state that <b>Object.Quit</b> will terminate every server, but I can't. Different servers have many commands and conditions required before the server will terminate. The requirements to terminate the object are listed here in this section. </p>
<h4>ProgID</h4>
<p>
The programmatic identifier (ProgID) is the name of the object in the system registry. This string is used in <b>CreateObject</b> or <b>GetObject</b> to obtain an instance. In some cases, there may be a disagreement between the ProgID and the application-specific object type name shown in the library. The Office Binder shown below illustrates this. </p>
<pre><code>Dim ThisBinder as OfficeBinder.Binder
Set ThisBinder = CreateObject("Office.Binder")
</code></pre>
<p>
I can modify the registry to agree with the type library by creating a .REG file to modify the system registry. The lines below allow me to use <b>OfficeBinder.Binder</b> <i>in addition to</i> <b>Office.Binder</b>. Yes, I can use either, but I must remember to redistribute this file when I install an application that uses it.</p>
<pre><code>REGEDIT
HKEY_CLASSES_ROOT\OfficeBinder.Binder = Microsoft Office Binder
HKEY_CLASSES_ROOT\OfficeBinder.Binder\CLSID = 
  {59850400-6664-101B-B21C-00AA004BA90B}
HKEY_CLASSES_ROOT\OfficeBinder.Binder\CurVer = Office.Binder.95
</code></pre>
<p>
For further information about this, see "Identifying and Registering an Object Class" in <i>The Component Object Model Specification</i> (MSDN Library, Specifications). If you distribute a type library with your application, you should include a .REG file to register it on other PCs.</p>
<h4>CLSID</h4>
<p>
The class identifier (CLSID) is a unique identifier for the server. If several program IDs have the same class identifier, the programmatic identifiers are synonyms. In our sample above, MSProject.DocFile and MSProject.Project are the same.</p>
<h3>A Word of Caution</h3>
<p>
The bad news is that the Quick Summary can be complex because <i>each</i> object in a server may have its own behavior. My advice is simple: Test each object and keep notes.</p>
<h2>The Servers</h2>
<p>
This article covers more than OLE Automation servers—it covers the libraries available in the Object Browser. These libraries are described in three sections:
<ul type=disc>
<li>
Out-of-process servers<br><br></li>
<li>
Library encapsulations<br><br></li>
<li>
In-process servers</li>
</ul>
<h3>Out-of-Process Servers</h3>
<p>
Out-of-process servers are executables that allow controllers, whether 16-bit or 32-bit, to pass data between the controller and the server. The cost of this flexibility is slow data transfer. All the Microsoft Office products are out-of-process servers.</p>
<p>
In general, these servers create a new instance for each <b>CreateObject</b> call or <b>New</b> declaration. The new instances may be system instances, as shown in this example:</p>
<pre><code>Dim obj(0 To 5) As Object
For i = 0 To 5
 &nbsp;&nbsp; Set obj(i) = CreateObject("Excel.Application")
 &nbsp;&nbsp; obj(i).Visible = True
Next I
</code></pre>
<p>
The code above will create six system instances of Microsoft Excel that will continue to exist after the controller closes. The new instances may be documents in a system instance instead. For example.</p>
<pre><code>Dim obj(0 To 5) As Object
For i = 0 To 5
 &nbsp;&nbsp; Set obj(i) = CreateObject("Excel.Sheet")
 &nbsp;&nbsp; obj(i).Visible = True
Next i
obj(0).Parent.Parent.Visible = True
</code></pre>
<p>
This code will create six Microsoft Excel sheets in a single Microsoft Excel instance. The sheets will close as soon as their instance is set to <b>Nothing</b>. The Microsoft Excel application will continue to exist if it was visible when the sheets were set to <b>Nothing</b>.</p>
<p>
Out-of-process servers will <i>usually</i> terminate when <i>all </i>instances are set to <b>Nothing</b>, the application is not visible, and the last instance is set to <b>Nothing</b>.</p>
<p>
The out-of-process OLE Automation servers I will cover are:
<ul type=disc>
<li>
OLE Messaging<br><br></li>
<li>
Microsoft Schedule+<br><br></li>
<li>
Microsoft PowerPoint 7.0<br><br></li>
<li>
Microsoft Project 4.1<br><br></li>
<li>
Microsoft Excel 7.0<br><br></li>
<li>
Microsoft Binder 1.0<br><br></li>
<li>
Microsoft Graph 5.0<br><br></li>
<li>
Microsoft Access 7.0<br><br></li>
<li>
Microsoft Word 7.0<br><br></li>
<li>
Microsoft Voice Text 1.0<br><br></li>
<li>
Microsoft Voice Command 1.0<br><br></li>
<li>
Word 95 Objects for Access</li>
</ul>
<h4>OLE Messaging</h4>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4444">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the MAPIDEMO sample application for this technical article.</a></p>
<p>
The OLE Messaging server works using the Messaging API (MAPI). Table 7 shows a quick summary of the properties of OLE Messaging, which allows you to send, receive, and process electronic mail, including faxes. (Table 8 shows the MAPI ProgIDs.) You can write an obnoxious application to send e-mail to the world, asking everyone to send their VISA number, charge them $20 on their VISA card, automatically delete the flame mail, and process the donations. Of course, you can also do much more commendable work than this.</p>
<p class=label>
<b>Table 7. Quick Summary for OLE Messaging</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Notes </b></td>
</tr>
<tr valign=top>
<td width=29%>Reference File</td>
<td width=71%>MDISP32.TLB, MDISP.TLB</td>
</tr>
<tr valign=top>
<td width=29%>Reference Title</td>
<td width=71%>OLE Messaging 1.0 Object Library </td>
</tr>
<tr valign=top>
<td width=29%>Object Browser Library Name</td>
<td width=71%>MAPI</td>
</tr>
<tr valign=top>
<td width=29%>Object Browser Title</td>
<td width=71%>OLE Messaging 1.0 Object Library</td>
</tr>
<tr valign=top>
<td width=29%>Programming Help File</td>
<td width=71%>OLEMSG.HLP</td>
</tr>
<tr valign=top>
<td width=29%>Extended Map</td>
<td width=71%>None</td>
</tr>
<tr valign=top>
<td width=29%>Redistribution Rights</td>
<td width=71%>Yes</td>
</tr>
<tr valign=top>
<td width=29%>Source Information</td>
<td width=71%>Backoffice SDK, Microsoft Solutions Development Kit 2.0, Win32 SDK</td>
</tr>
<tr valign=top>
<td width=29%>Externally Creatable (<b>New</b>)</td>
<td width=71%>False (Type library may not be used)</td>
</tr>
<tr valign=top>
<td width=29%>Server Command</td>
<td width=71%>MDISP32.EXE /Automation </td>
</tr>
<tr valign=top>
<td width=29%><b>CreateObject</b></td>
<td width=71%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=29%><b>GetObject</b></td>
<td width=71%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=29%>Terminate Object</td>
<td width=71%>Executes a <b>Mapi.Logoff</b>. Sets Objects to <b>Nothing.</b></td>
</tr>
</table><br>
<p class=label>
<b>Table 8. Identifier Table for OLE Messaging</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>ProgID</b></td>
<td class=label width=73%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=27%>MAPI.Session</td>
<td width=73%>{3FA7DEB3-6438-101B-ACC1-00AA00423326}</td>
</tr>
<tr valign=top>
<td width=27%>MAPI.Message</td>
<td width=73%>{3FA7DEB4-6438-101B-ACC1-00AA00423326)</td>
</tr>
<tr valign=top>
<td width=27%>MAPI.Folder</td>
<td width=73%>{3FA7DEB5-6438-101B-ACC1-00AA00423326}</td>
</tr>
</table><br>
<p>
The following code sends an e-mail message to me, so I know that someone has executed the sample. Because I hope to get my boss to give me a $1 bonus for every e-mail I receive, give it a try!</p>
<pre><code>Option Explicit
Sub Create_Message()
 &nbsp;&nbsp; Dim objSession As Object 'MAPI.Session
 &nbsp;&nbsp; Dim objMessage As Object 'MAPI.Message
 &nbsp;&nbsp; Dim&nbsp; objRecip As Object 'MAPI.Recipient
 &nbsp;&nbsp; Set objSession = CreateObject("MAPI.SESSION")
 &nbsp;&nbsp; objSession.Logon
 &nbsp;&nbsp; Set objMessage = objSession.Outbox.Messages.Add
 &nbsp;&nbsp; objMessage.Subject = "Thank you for your article."
 &nbsp;&nbsp; Set objRecip = objMessage.Recipients.Add
 &nbsp;&nbsp; objRecip.Name = "Kenl@Microsoft.Com"
 &nbsp;&nbsp; objRecip.Type = 1&nbsp;&nbsp;&nbsp;&nbsp; ' 1 is the value of the "mapiTo" constant.
 &nbsp;&nbsp; objMessage.Update
 &nbsp;&nbsp; objMessage.Send showDialog:=True
 &nbsp;&nbsp; objSession.Logoff
End Sub
</code></pre>
<p>
At the time of writing, the server is still in its beta version and does not support early binding, so you must use late binding.</p>
<p>
MAPI can become challenging because you may find two mail servers available on your PC: the Mapi.Session server described above and the MSMAPI.MAPISession that is part of MSMAPI.OCX. You can call <b>CreateObject</b> successfully with MSMAPI.MAPISession, but this instance is <i>very</i> different from a OLE Messaging instance.</p>
<h4>Microsoft Schedule+</h4>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4454">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the SPLDEMO sample application for this technical article.</a></p>
<p>
Schedule+ allows events to be scheduled on the user's calendar. Customer representatives can schedule call-backs or enter tasks from Microsoft Project or Microsoft Excel in their calendars, to cite just a few of the new possibilities with this server. It is assumed that the version of Schedule+ in the final version of the Microsoft Exchange Server SDK is installed.</p>
<p class=label>
<b>Table 9. Quick Summary for Schedule+</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>Sp7en32.olb</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft Schedule+ 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>SPL</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft Schedule+ 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>Microsoft Exchange Server SDK:<i>Microsoft Schedule+ Programmer's Guide</i> </td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%><a href="msdn_mapspl95.htm">"Mapping the Schedule+ Type Library: SPL 7.0"</a><p>
<a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects"</a></p>
<p>
<a href="msdn_mapschpm.htm">"Mapping the Schedule+ OLE Automation Server: Programming Model"</a> </p>
</td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>None</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>The reference file may be obtained from the Microsoft Exchange Server SDK. </td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>Yes</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>schdpl32.exe -Automation</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Obtains running system instance or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Obtains running system instance or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Sets <b>Visible</b> to <b>False</b>. Set all instances to <b>Nothing</b>. </td>
</tr>
</table><br>
<p class=label>
<b>Table 10. Identifier Table for Microsoft Schedule+</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>ProgID</b></td>
<td class=label width=66%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=34%>SchedulePlus.Application</td>
<td width=66%>{0482E074-C5B7-101A-82E0-08002B36A333}</td>
</tr>
<tr valign=top>
<td width=34%>Schedule+.Application</td>
<td width=66%>{0482E074-C5B7-101A-82E0-08002B36A333}</td>
</tr>
</table><br>
<p>
The following code reminds you to be Santa Claus for your kids:</p>
<pre><code>Dim appSchPlus As SPL.Application
Set appSchPlus = CreateObject("Schedule+.Application")
Visible = True
With appSchPlus
 &nbsp;&nbsp; .Logon
 &nbsp;&nbsp; .ScheduleSelected.Activate 'Makes visible
 &nbsp;&nbsp; Set MyAppt = .ScheduleSelected.singleappointments.New
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With MyAppt
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SetProperties Text:="Santa Claus", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start:=CVDate("12/24/95 23:30"), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End:=("12/25/95 00:30")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
End With
</code></pre>
<p>
This OLE Automation server has many unique characteristics; for a detailed introduction, see my article <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a></p>
<h4>Microsoft PowerPoint</h4>
<p>
<OBJECT id=sample3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4448">
</OBJECT><a href="javascript:sample3.Click()">Click to open or copy the files in the PPTDEMO sample application for this technical article.</a></p>
<p>
The PowerPoint server allows you to automatically create or update PowerPoint presentations. For example, you could publish yesterday's sales figures each morning as part of an Executive Information System. </p>
<p class=label>
<b>Table 11. Quick Summary for Microsoft PowerPoint</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>POWERPNT.TLB</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>PowerPoint 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>PowerPoint</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>PowerPoint 7.0 Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>VBA_PP.HLP</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%>None</td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>None</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>Part of PowerPoint</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>False</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>powerpnt.exe /AUTOMATION</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Calls <b>Powerpoint.Quit.</b></td>
</tr>
</table><br>
<p class=label>
<b>Table 12. Identifier Table for Microsoft PowerPoint </b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>ProgID</b></td>
<td class=label width=66%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=34%>PowerPoint.Application </td>
<td width=66%>{81C3B541-2E17-101B-AF3C-00AA0038A98A}</td>
</tr>
<tr valign=top>
<td width=34%>PowerPoint.Show</td>
<td width=66%>{EA7BAE70-FB3B-11CD-A903-00AA00510EA3}</td>
</tr>
<tr valign=top>
<td width=34%>PowerPoint.Slide</td>
<td width=66%>{EA7BAE71-FB3B-11CD-A903-00AA00510EA3}</td>
</tr>
<tr valign=top>
<td width=34%>PowerPoint.Template</td>
<td width=66%>{EA7BAE71-FB3B-11CD-A903-00AA00510EA3}</td>
</tr>
</table><br>
<p>
The following code creates a simple slide containing a graphic:</p>
<pre><code>Dim ThisPowerPnt As PowerPoint.Application
Dim ThisPresentation As PowerPoint.Presentation
Dim CurrentSlide As PowerPoint.Slide
 'PowerPoint 7 is the first version as an OLE Server.
Set ThisPowerPnt = CreateObject("PowerPoint.Application")
ThisPowerPnt.AppWindow.Visible = True

Set ThisPresentation = ThisPowerPnt.Presentations.Add( _
 &nbsp;&nbsp; WithWindow:=True _
 &nbsp;&nbsp; )
Set CurrentSlide = ThisPresentation.Slides.Add( _
 &nbsp;&nbsp; Index:=1, _
 &nbsp;&nbsp; Layout:=PowerPoint.SlideLayout.ppLayoutText _
 &nbsp;&nbsp; )
 &nbsp;&nbsp; With CurrentSlide
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Note: Objects are "SlideObects"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Objects(1).Text = "MSDN PowerPoint Programmability"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Objects(2).Text = "Sixteen Point Star"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Objects.AddShape _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type:=PowerPoint.ShapeType.ppShapeSixteenPointStar, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left:=4800, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Top:=4300, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Width:=5000, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Height:=5000
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Units of measurement are in TWIPS (like Visual Basic).
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Objects(3).GraphicFormat.Fill.PresetTextured _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PowerPoint.PresetTexture.ppPresetTextureWovenMat
 &nbsp;&nbsp; End With
</code></pre>
<p>
The sample application changes the graphic's texture every tenth of a second as a special effect. Do not use numbers for constants or unqualified constants such as <b>ppShapeSixteenPointStar</b>; instead, use a fully qualified constant such as <b>PowerPoint.ShapeType.ppShapeSixteenPointStar</b>.</p>
<h4>Microsoft Project</h4>
<p>
<OBJECT id=sample4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4450">
</OBJECT><a href="javascript:sample4.Click()">Click to open or copy the files in the PROJDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Project server allows the information on a project to be retrieved, added to, and updated. Using the MAPI server, reminder notices regarding tasks, deadlines, and milestones can be automatically mailed to members of a team. Reports can be generated for senior management. Meetings can be entered automatically into team members' Schedule+ calendars. A custom front end could be produced to simplify use of Microsoft Project.</p>
<p class=label>
<b>Table 13. Quick Summary for Microsoft Project</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>PJ4EN32.OLB, PJ4ES32.OLB, PJ4DE32.OLB, PJ4FR32.OLB, PJ4SV32.OLB, PJ4IT32.OLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft Project 4.1 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>MSProject</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft Project 4.1 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>VBA_PJ.HLP</td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%>None.</td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>None.</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>Part of Microsoft Project 95</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>False</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>winproj.exe</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Obtains running system instance, or starts a system instance if none exists.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Calls <b>MSProject.Quit</b></td>
</tr>
</table><br>
<p class=label>
<b>Table 14. Identifier Table for Microsoft Project</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>ProgID</b></td>
<td class=label width=66%><b>CLSID </b></td>
</tr>
<tr valign=top>
<td width=34%>MSProject.Application</td>
<td width=66%>{00020AFE-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=34%>MSProject.DocFile</td>
<td width=66%>{00020A00-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=34%>MSProject.Project</td>
<td width=66%>{00020A00-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The following example code adds a series of tasks for a new project:</p>
<pre><code>Dim oProjApp As MSProject.Application
Dim oProjDoc As MSProject.Project
Dim&nbsp; i As Integer
 &nbsp;&nbsp; Set oProjApp = CreateObject("MSProject.Application")
 &nbsp;&nbsp; oProjApp.Visible = True
 &nbsp;&nbsp; oProjApp.FileNew SummaryInfo:=False
 &nbsp;&nbsp; Set oProjDoc = oProjApp.ActiveProject
 &nbsp;&nbsp; For i = 1 To 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oProjDoc.tasks.Add Name:="Task" &amp; i
 &nbsp;&nbsp; Next i
 &nbsp;&nbsp; oProjApp.fileSave
 &nbsp;&nbsp; oProjApp.Quit
</code></pre>
<h4>Microsoft Excel</h4>
<p>
<OBJECT id=sample5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4466">
</OBJECT><a href="javascript:sample5.Click()">Click to open or copy the files in the XLDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Excel server can be used to do complex mathematics, such as trend lines, can be used as a report engine, and can be used to manipulate data using pivot tables. Data may be passed to Microsoft Excel for statistical analysis. </p>
<p class=label>
<b>Table 15. Quick Summary for Microsoft Excel</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>XL5EN32.OLB, XL5BRZ32.OLB, XL5FR32.OLB, XL5DE32.OLB, XL5IBP32.OLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft Excel 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>Excel</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft Excel 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>VBA_XL.HLP </td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%>Not available at present</td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>None</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>Part of Microsoft Excel 95 and Microsoft Excel 5</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>False</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>excel.exe /Automation</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Creates a new system instance, unless a system instance already exists. </td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Calls <b>Excel.Quit</b></td>
</tr>
</table><br>
<p class=label>
<b>Table 16. Identifier Table for Microsoft Excel</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>ProgID</b></td>
<td class=label width=68%><b>CLSID </b></td>
</tr>
<tr valign=top>
<td width=32%>Excel.Addin</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Application</td>
<td width=68%>{00020841-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Backup</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Chart</td>
<td width=68%>{00020811-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.CSV</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Dialog</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.DIF</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Macrosheet</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Sheet</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.SLK</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Template</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.VBAModule</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.Workspace</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=32%>Excel.XLL</td>
<td width=68%>{00020810-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The example code below inserts an array of numbers into a worksheet and charts the information using the Chart object.</p>
<pre><code>Dim ThisExcel As Excel.Application
Dim ThisChart As Excel.Chart
Dim TitleArray As Variant
Dim DataArray As Variant
TitleArray = Array("Dogs", "Cats", "Horses")
DataArray = Array(34, 53, 12)
Set ThisExcel = CreateObject("Excel.application")
With ThisExcel
 &nbsp;&nbsp; .Workbooks.Add
 &nbsp;&nbsp; .Range("A1:C1").Value = TitleArray
 &nbsp;&nbsp; .Range("A2:C2").Value = DataArray
 &nbsp;&nbsp; .Range("A1:C2").Select
 &nbsp;&nbsp; Set ThisChart = .Charts.Add()
 &nbsp;&nbsp; .Visible = True
End With
With ThisChart
 &nbsp;&nbsp; .Type = Excel.Constants.xl3DColumn
 &nbsp;&nbsp; .HasLegend = False
End With
</code></pre>
<p>
The actual sample adds automatic turning of the three-dimensional (3-D) chart in Microsoft Excel to illustrate how a Microsoft Excel presentation can be enhanced. Microsoft Excel Chart is usually used instead of MSGraph because MSGraph lacks the ability to transfer data easily.</p>
<p>
The reference file for Microsoft Excel 95 is the same as that for Microsoft Excel 5.0. (There is no XL7EN32.OLB.)</p>
<h4>Microsoft Binder</h4>
<p>
<OBJECT id=sample6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4438">
</OBJECT><a href="javascript:sample6.Click()">Click to open or copy the files in the BINDDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Binder server allows some types of documents to be combined into a single document. </p>
<p class=label>
<b>Table 17. Quick Summary for Microsoft Binder</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>BINDER.TLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Office Binder 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>OfficeBinder</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Office Binder 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>VBA_BIN.HLP</td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%>Mapping the Office Binder: Binder 1.0</td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>None</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>Part of Office 95</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>False</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>BINDER.EXE</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Creates a new system instance, unless specified file exists.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Sets <b>Visible</b> to <b>False</b>; sets instance to <b>Nothing</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Table 18. Identifier Table for Microsoft Binder</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>ProgID</b></td>
<td class=label width=74%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=26%>Office.Binder</td>
<td width=74%>{59850400-6664-101B-B21C-00AA004BA90B}</td>
</tr>
</table><br>
<p>
The following code creates a binder and adds two existing documents to it:</p>
<pre><code>Sub Create_Binder()
 &nbsp;&nbsp; Dim objBinder As OfficeBinder.Binder, objWord As Object
 &nbsp;&nbsp; Set objBinder = CreateObject("Office.Binder")
 &nbsp;&nbsp; objBinder.Visible = True
 &nbsp;&nbsp; Set objWord = CreateObject("Word.Basic")
 &nbsp;&nbsp; With objWord
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FileNewDefault
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .formatfont Points:=22, Bold:=True, Italic:=True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Insert "Russell says Binders are cool!"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; objWord.insertPara
 &nbsp;&nbsp; objWord.fileSaveAs "c:\Binder Summary.DOC"
 &nbsp;&nbsp; Set objWord = Nothing
 &nbsp;&nbsp; objBinder.Sections.Add filename:="c:\Binder Summary.doc"
 &nbsp;&nbsp; 
 &nbsp;&nbsp; objBinder.Sections(1).Name = "Binder Summary"
 &nbsp;&nbsp; objBinder.SaveAs filename:="Mybinder.obd", saveOption:=3
 &nbsp;&nbsp; '3 is the value of the "bindDisplayDialog" constant
End Sub
</code></pre>
<h4>Microsoft Graph</h4>
<p>
<OBJECT id=sample7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4442">
</OBJECT><a href="javascript:sample7.Click()">Click to open or copy the files in the GRPHDEMO sample application for this technical article.</a></p>
<p>
The MSGraph server allows data to be displayed on a graph. The functionality is similar to Charts in Microsoft Excel but requires fewer system resources to load.</p>
<p class=label>
<b>Table 19. Quick Summary for Microsoft Graph</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>GREN50.OLB, GRBRZ32.OLB, GRFR32.OLB, GRDE32.OLB, GRIBP32.OLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft Graph 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>Graph</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft Graph 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>VBA_GRP.HLP</td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%>Mapping Microsoft Graph 5.0: MSGraph, MSDN Library, October 1995</td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>None.</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>Installed with several Microsoft Office applications.</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>False</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>Graph5.exe /Automation</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Sets <b>Visible </b>to <b>False</b>; sets instances to <b>Nothing</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Table 20. Identifier Table for Microsoft Graph</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>ProgID</b></td>
<td class=label width=65%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=35%>MSGraph.Application</td>
<td width=65%>{000208EC-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=35%>MSGraph.Chart</td>
<td width=65%>{00020801-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The following example code graphs some silly data using the MSGraph server (note the extra hard return before "vbTab"):</p>
<pre><code>Dim ThisGraph As Object 'Graph.Application 
MyData = "Cats" &amp; vbTab &amp; 20 &amp; vbCr &amp; "Dogs" &amp; vbTab &amp; "13" &amp; vbCr &amp; "Horses" &amp; 
vbTab &amp; "4"
Clipboard.SetText MyData
Set ThisGraph = CreateObject("MSGraph.Application")
ThisGraph.Visible = True
SendKeys "%VD", True
SendKeys "%EP", True
ThisGraph.Chart.HasTitle = True
ThisGraph.Chart.ChartTitle.Caption = "Favorite Pets"
ThisGraph.Chart.AutoFormat Gallery:=xlColumn, Format:=2
</code></pre>
<p>
The MSGraph server does not have a simple mechanism for inserting data series. To speed the entry of data, the data was copied to the Clipboard and then inserted into the data sheet using the <b>SendKeys</b> command. Using the Clipboard can greatly speed data transfers with out-of-process servers.</p>
<h4>Microsoft Access Version 7.0</h4>
<p>
<OBJECT id=sample8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4436">
</OBJECT><a href="javascript:sample8.Click()">Click to open or copy the files in the ACCDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Access server makes Microsoft Access reports and forms available to the controller. Although DAO and Microsoft Access share some of the same functionality, the Microsoft Access server exposes the report and form objects that may be used an alternative to Crystal Reports and other products.</p>
<p class=label>
<b>Table 21. Quick Summary for Microsoft Access</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>MSACCESS.TLB</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>Microsoft Access for Windows 95</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>Access</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>Microsoft Access for Windows 95</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>VBA_ACC.HLP, VBAACCSP.HLP</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%><a href="msdn_mapacc95.htm">"Mapping the Microsoft Access 95 Object: MSAccess 7.0"</a></td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>None</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>Installs with Microsoft Access 7.0</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>True (Access.Application)</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>MSACCESS.EXE</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Creates a new system instance each time.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Calls <b>Access.Quit</b></td>
</tr>
</table><br>
<p class=label>
<b>Table 22. Identifier Table for Microsoft Access</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>ProgID</b></td>
<td class=label width=64%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=36%>Microsoft Access.Application</td>
<td width=64%>{B54DCF20-5F9C-101B-AF4E-00AA003F0F07}</td>
</tr>
</table><br>
<p>
The following code previews a report and opens a form using Microsoft Access:</p>
<pre><code>Dim ThisAccess As New Access.Application
With ThisAccess
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OpenCurrentDatabase "E:\Office95\Access\samples\NorthWind.mdb"
 &nbsp; With .DoCmd
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OpenForm FormName:="Orders", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View:=Access.acNormal, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataMode:=Access.acEdit, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowMode:=Access.acNormal
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'WARNING: "WindowMode:=Access.acDialog" will not return until 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' user closes form!
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OpenReport ReportName:="Invoice", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View:=Access.acPreview
 &nbsp; End With
End With
</code></pre>
<p>
Although the Microsoft Access server exposes a DAO, it should not be used because Microsoft Access is an out-of-process server; instead, the in-process DAO server should be used. A controller should <i>never</i> invoke a method that does not return immediately; for example, opening a form with the <b>WindowMode</b> being <b>acDialog</b>. If the server does not return control to the controller in a reasonable time, an OLE time-out may occur, and the controller will appear to "hang" until the server returns.</p>
<h4>Microsoft Word</h4>
<p>
<OBJECT id=sample9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4464">
</OBJECT><a href="javascript:sample9.Click()">Click to open or copy the files in the WORDDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Word server can be used as a form-letter generator, label generator, and report generator. It can also be used as a device for entering documents into databases.</p>
<p class=label>
<b>Table 23. Quick Summary for Microsoft Word</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>WB70EN32.TLB</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>Microsoft WordBasic 95 Type Library</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>Word</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>Microsoft WordBasic 95 Type Library</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>WRDBASIC.HLP</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%>None</td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>Freely redistributable</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>CompuServe®, WWW.Microsoft.Com</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>False</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>WINWORD.EXE /Automation [</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Returns a system instance if available, otherwise creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Returns a system instance if available, otherwise creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Sets instance to <b>Nothing</b>. (Word may be visible.) </td>
</tr>
</table><br>
<p class=label>
<b>Table 24. Identifier Table for Microsoft Word</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>ProgID</b></td>
<td class=label width=67%><b>CLSID </b></td>
</tr>
<tr valign=top>
<td width=33%>Word.Backup</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Bakup</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Basic</td>
<td width=67%>{000209FE-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Document</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Picture</td>
<td width=67%>{00020901-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.RTF</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Template</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=33%>Word.Wizard</td>
<td width=67%>{00020900-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The following code creates a document and records its creation date:</p>
<pre><code>Dim objWord As Word.WordBasic
Set ThisWord = CreateObject("Word.Basic")
With ThisWord
 &nbsp;&nbsp; .AppMaximize
 &nbsp;&nbsp; .FileNewDefault
 &nbsp;&nbsp; .FormatFont _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Points:=22, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bold:=True, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Italic:=True
 &nbsp;&nbsp; .Insert "Welcome to Word OLE&nbsp; Automation"
 &nbsp;&nbsp; .InsertPara
 &nbsp;&nbsp; .FormatFont _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Points:=10, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bold:=False, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Italic:=False
 &nbsp;&nbsp; .Insert "Report Created:"
 &nbsp;&nbsp; .InsertDateTime _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DateTimePic:="YYYY MM DD HH:MM:SS", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InsertAsField:=False
 &nbsp;&nbsp; .InsertPara
End With
</code></pre>
<p>
Microsoft Word is an arcane OLE server. It was the first OLE server and is inconsistent with later OLE servers. All commands are directed to the active document, which may be changed by the user or other applications. Always use named arguments with Microsoft Word; the ordered argument sequences are recorded incorrectly in some documentation, including the type library and what the recorder writes into macros.</p>
<h4>Microsoft Voice Text</h4>
<p>
<OBJECT id=sample10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4460">
</OBJECT><a href="javascript:sample10.Click()">Click to open or copy the files in the VTXTDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Voice Text Object (VTxtAuto) ships with the Microsoft Speech Software Development Kit (SDK). This object allows an application to speak any text aloud. The pronunciation engine is very advanced, and you can have it read a Microsoft Word document through a sound system, switching to Spanish or German when the text changes in the document. See the Speech API SDK documentation for further information (MSDN Library, Platform, SDK, and DDK Documentation), or search future issues of the MSDN Library.</p>
<p class=label>
<b>Table 25. Quick Summary for Microsoft Voice Text</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>VTXTAUTO.TLB</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>VoiceText 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>VTxtAuto</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>VoiceText 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>None at present</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%><a href="msdn_mapvtxt.htm">"Mapping the VoiceText 1.0 Type Library: VTxtAuto"</a></td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>See the Speech API SDK documentation.</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>A component of the Microsoft Speech API SDK.</td>
</tr>
<tr valign=top>
<td width=33%>Behavior</td>
<td width=67%>Only a single instance may exist in the system.</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>Yes (VTxtAuto.VTxtAuto)</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>vcmd.exe</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Sets instances to <b>Nothing</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Table 26. Identifier Table for Microsoft Voice Text</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>ProgID</b></td>
<td class=label width=68%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=32%>Speech.VoiceText</td>
<td width=68%>{FF2C7A52-78F9-11ce-B762-00AA004CD65C}</td>
</tr>
</table><br>
<p>
The following sample code opens a Microsoft Word document and reads it aloud.</p>
<pre><code>Dim Vtxt As New VTxtAuto.VTxtAuto
Dim Word As Word.WordBasic
Set Word = CreateObject("Word.Basic")
Vtxt.Register pszSite:="", pszApp:=App.Title 'Easy way in VB4
Word.FileOpen Name:= "My Sample.Doc"
While Not Word.AtEndOfDocument()
With Word
 &nbsp;&nbsp; .PageDown Count:=1, Select:=1 'Select next paragraph.
 &nbsp;&nbsp; .EditCopy&nbsp; '.Selection is logical here BUT it gives errors on long text.
 &nbsp;&nbsp; A$ = Clipboard.GetText 'So we use the clipboard instead.
 &nbsp;&nbsp; If Len(A$) &gt; 0 Then 'Make sure there is some text to read.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vtxt.Speak pszBuffer:=A$, dwFlags:=VTxtAuto.vtxtst_READING
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; .CharRight Count:=1, Select:=0 'Move to start of next paragraph.
 &nbsp;&nbsp; While Vtxt.IsSpeaking() 'Wait until it is finished before going on.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If fStop Then Vtxt.StopSpeaking: GoTo Stop_Now 'User terminate
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoEvents 'Server runs independent of this application.
 &nbsp;&nbsp; Wend
End With
Wend
Stop_Now:
Word.FileClose
</code></pre>
<p>
Although it is impolite to interrupt someone speaking, the module or global variable <b>fStop</b> allows the user to interrupt. The controller using the VtxtAuto server must register its name before the server can be used. The <b>Word.Selection</b> command often gives errors on long text selections, so I moved the text from Microsoft Word to the controller using the Clipboard instead. Having two sets of server commands mixed prevented me from using <b>With</b> to qualify both objects. I used <b>With</b> to qualify the most frequently used server, Microsoft Word, and requalify the less frequently used server, VTxtAuto.</p>
<h4>Microsoft Voice Command</h4>
<p>
<OBJECT id=sample11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4458">
</OBJECT><a href="javascript:sample11.Click()">Click to open or copy the files in the VCMDDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Voice Command object (<b>VCmdAuto</b>) ships with the Microsoft Speech API SDK. This object allows applications to understand spoken commands. See the Speech API SDK documentation for further information, or search future issues of the MSDN Library.</p>
<p class=label>
<b>Table 27. Quick Summary for Microsoft Voice Command</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>VCAUTO.TLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>VoiceCommand 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>VCmdAuto</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>VoiceCommand 1.0 Type Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>None at present</td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%><a href="msdn_mapvcmd.htm">"Mapping the VoiceCommand 1.0 Type Library: VCmdAuto"</a></td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>See the Speech API SDK documentation.</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>A component of the Microsoft Speech API SDK.</td>
</tr>
<tr valign=top>
<td width=31%>Behavior</td>
<td width=69%>Only a single instance may exist in the system.</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>Yes (VCmdAuto.VCmdAuto)</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>vcmd.exe</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Sets instances to <b>Nothing</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Table 28. Identifier Table for Microsoft Voice Command</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>ProgID</b></td>
<td class=label width=65%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=35%>Speech.VoiceCommand</td>
<td width=65%>{A26D7620-6FA0-11ce-A166-00AA004CD65C}</td>
</tr>
</table><br>
<p>
The following Visual Basic code allows an application to respond to words listed in a list box. The words are in a list box called WordSpoken.</p>
<pre><code>Dim VCmd As Object
Dim VMenu As Object
WordSpoken.AddItem "Stop"
WordSpoken.AddItem "Go"
WordSpoken.AddItem "Yield"
Set VCmd = CreateObject("Speech.VoiceCommand")
Call VCmd.Register("")
Set VMenu = VCmd.MenuCreate("VB Test Program", "TestMenu", 1033&amp;, "", vcmdmc_CREATE_ALWAYS)
For i = 0 To WordSpoken.ListCount - 1
 &nbsp;&nbsp; Call VMenu.Add(i, WordSpoken.List(i))
Next i
VMenu.Active = True


Private Sub Timer1_Timer()
WordSpoken.ListIndex = VCmd.CommandSpoken
End Sub
</code></pre>
<p>
The above sample code requires a timer to periodically check whether a command was spoken. Timers can be simulated with <b>DoEvents</b> loops in other products, as shown below.</p>
<pre><code>Sub Checkforword(ByVal Seconds As Single)
endat = Seconds / (24# * 3600#) + Now
While Now &lt; endat
 &nbsp;&nbsp; DoEvents
 &nbsp;&nbsp; WordSpoken.ListIndex = VCmd.CommandSpoken
Wend
End Sub
</code></pre>
<p>
This is a fun OLE server to play with! If you use this OLE server with the Microsoft Voice Text server, you can spend hours talking to your computer.</p>
<h4>"Word95 Objects for ACCESS"</h4>
<p>
<OBJECT id=sample12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4462">
</OBJECT><a href="javascript:sample12.Click()">Click to open or copy the files in the WACCDEMO sample application for this technical article.</a></p>
<p>
"Word95 Objects for ACCESS" is a custom type library that exposes some parts of Microsoft Word that are useful from Microsoft Access. "Word95 Objects for ACCESS" enables the developer to manipulate Microsoft Word mail merge facilities. It is a subset of the Microsoft WordBasic 95 type library and contains only one object, despite the name claiming to have multiple objects.</p>
<p class=label>
<b>Table 29. Quick Summary for "Word95 Objects for ACCESS"</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>WD95ACC.TLB</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>Word 95 Objects for Access</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>Word95ACC</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>Word 95 Objects for Access</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>WRDBASIC.HLP</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%><a href="msdn_mapwdacc.htm">"Mapping the 'Word95 Objects for ACCESS': Word95Access"</a></td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>None</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>Is installed with Microsoft Access 95</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>False</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>False</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>WINWORD.EXE /Automation</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Returns a system instance if available; otherwise, creates a system instance.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Set instance to <b>Nothing</b>. (May be visible.)</td>
</tr>
</table><br>
<p class=label>
<b>Table 30. Identifier Table for "Word 95 Objects for ACCESS"</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>ProgID</b></td>
<td class=label width=74%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=26%>Word.Basic</td>
<td width=74%>{000209FE-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The following code creates form letters from the first 10 customer records in the Northwind sample database shipped with Microsoft Access 95.</p>
<pre><code>Dim ThisWord As wORD95aCC.Word95Access
Set ThisWord = CreateObject("Word.Basic")
ThisWord.FileOpen Name:=App.Path &amp; "\MyMerge.Doc"
ThisWord.AppShow
With ThisWord
 &nbsp;&nbsp; .MailMergeOpenDataSource Name:="\Office95\ACCESS\Samples\Northwind.mdb", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LinkToSource:=1, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection:="TABLE Customers", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQLStatement:="SELECT * FROM [Customers]"

 &nbsp;&nbsp; .MailMerge CheckErrors:=1, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Destination:=0, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MergeRecords:=1, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From:="1", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To:="10", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MailMerge:=1
End With
</code></pre>
<p>
This type library is the same as the Microsoft Word type library except that only a few of the methods and properties are exposed in the library. When an instance of Word is created using the "Word95 Objects for ACCESS" library, this instance is created as not visible. (When the Word type library is used, it is created as visible.) The <b>.MailMerge</b> method is <i>not</i> exposed by the "Word95 Objects for ACCESS" library, but it is still available. This illustrates an important aspect of the libraries: They show what is recommended, not what is possible. This feature allows hidden methods and properties to be included for backward compatibility. Always write code according to the library model; it shows the recommended methods for the servers.</p>
<h3>Library Encapsulations</h3>
<p>
Library encapsulations are libraries that are neither in-process nor out-of-process servers. They may use objects passed from other servers or be wrappers around API calls. They can simplify development for programmers by exposing unpublished API calls or encapsulating existing API calls in an object model.</p>
<p>
There is only one type library server: the Microsoft Office server. The Windows API type library published by Bruce McKinney in his upcoming Microsoft Press book, <i>Hard Core Visual Basic</i>, is another important server, which I described in my article <a href="msdn_off95api.htm">"Corporate Developer's Guide to Office 95 API Issues."</a></p>
<h4>Microsoft Office 95 Object</h4>
<p>
<OBJECT id=sample13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4446">
</OBJECT><a href="javascript:sample13.Click()">Click to open or copy the files in the OFFDEMO sample application for this technical article.</a></p>
<p>
The Microsoft Office 95 object is very badly misnamed; a more appropriate name would be the "Summary Information object." This object allows manipulation of the document properties of Microsoft Excel, Microsoft Project, and Binder documents. Document properties used to be called Summary Information. If you click the Summary tab in the Properties dialog box in Microsoft Excel (Figure 5), you will see what can be manipulated.</p>
<p>
<img src="ole2soln_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Properties dialog box showing the values that can be manipulated</b></p>
<p class=label>
<b>Table 31. Quick Summary for Microsoft Office</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>Mso5enu.dll</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>Microsoft Office 95 Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>MicrosoftOffice</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>Microsoft Office 95 Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>VBA_OFF.HLP </td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%><a href="msdn_mapoff95.htm">"Mapping the Microsoft Office 95 Object Library: MicrosoftOffice"</a></td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>None. User must own Microsoft Office.</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>Microsoft Office 95</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>False</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>Mso5enu.dll</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Invalid</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Invalid</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Invalid</td>
</tr>
</table><br>
<p class=label>
<b>Table 32. Identifier Table for Microsoft Office</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>ProgID</b></td>
<td class=label width=56%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=44%>There is no ProgID for MicrosoftOffice. </td>
<td width=56%>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</td>
</tr>
</table><br>
<p>
The following code sample receives an object, <b>ThisObject</b>, which has been set to an <b>Excel.Workbook</b>, <b>MSProject.Project</b>, or <b>Office.Binder</b>. The code displays all of the current values of the <b>BuiltinDocumentProperties</b> and <b>CustomDocumentProperties</b> in the document. </p>
<pre><code>List1.Clear
List1.AddItem "Build in Properties"
On Error GoTo BadValue_err
For Each Prop In ThisObject.BuiltinDocumentProperties
 &nbsp;&nbsp; With Prop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AName$ = .Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem .Name &amp; ":= " &amp; .Value
 &nbsp;&nbsp; End With
Next
List1.AddItem "Custom in Properties"
For Each Prop In ThisObject.CustomDocumentProperties
 &nbsp;&nbsp; With Prop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AName$ = .Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem .Name &amp; ":= " &amp; .Value
 &nbsp;&nbsp; End With
Next
On Error GoTo 0
Exit Sub
BadValue_err:
List1.AddItem AName$ &amp; ":= #NULL#"
Resume Next
</code></pre>
<p>
The sample application demonstrates two important points:
<ul type=disc>
<li>
Some property values are not initialized, causing an error to occur. <br><br></li>
<li>
The built-in properties are not the same for the three different objects.</li>
</ul>
<h3>In-Process Servers</h3>
<p>
In-process servers require the controller to be the same "bitness" as the server—that is, if the controller is 16-bit, the server must also be 16-bit. This requirement allows data to be passed directly between the controller and the server, resulting in high-performance data transfer. In-process servers should always use early binding via a type library. All the database engines are in-process servers.</p>
<p>
In general, these servers use a single instance for each application with implicit creation of the root instance. For example, if you open five databases and <i>then</i> create the application (or <b>DBEngine</b>) instance, you will find these five databases as children. If you create additional instances of the application (or <b>DBEngine</b>) instance, the first instance will always be returned.</p>
<p>
In-process servers terminate when the calling application terminates because they are DLLs. Setting all of the instances to <b>Nothing</b> will not unload the DLL. The three Microsoft in-process OLE Automation servers are:
<ul type=disc>
<li>
Data Access Objects<br><br></li>
<li>
SQL Distributed Management Objects (SQL-DMO)<br><br></li>
<li>
Remote Data Objects</li>
</ul>
<h4>Data Access Objects</h4>
<p>
<OBJECT id=sample14 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4440">
</OBJECT><a href="javascript:sample14.Click()">Click to open or copy the files in the DAODEMO sample application for this technical article.</a></p>
<p>
The Data Access Object server allows data to be accessed from Indexed Sequential Access Method (ISAM), Microsoft Access, and ODBC data sources. This server is the most used server of all the servers because data is the essence of business. It may access more different types of databases than the other database servers in this article. This server supports remote OLE Automation—that is, the server may be running on a different computer.</p>
<p class=label>
<b>Table 33. Quick Summary for Data Access Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=33%>Reference File</td>
<td width=67%>DAO2532.TLB, DAO2516.DLL, DAO3032.DLL</td>
</tr>
<tr valign=top>
<td width=33%>Reference Title</td>
<td width=67%>Microsoft DAO x.x Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Library Name</td>
<td width=67%>DAO</td>
</tr>
<tr valign=top>
<td width=33%>Object Browser Title</td>
<td width=67%>Microsoft DAO x.x Object Library</td>
</tr>
<tr valign=top>
<td width=33%>Programming Help File</td>
<td width=67%>DAO.HLP, DAOSDK.HLP</td>
</tr>
<tr valign=top>
<td width=33%>Extended Map</td>
<td width=67%><a href="msdn_mapdao30.htm">"Mapping the Data Access Object: DAO 3.0"</a></td>
</tr>
<tr valign=top>
<td width=33%>Redistribution Rights</td>
<td width=67%>See product documentation for Visual Basic or Microsoft Access.</td>
</tr>
<tr valign=top>
<td width=33%>Source Information</td>
<td width=67%>DAO.HLP ships with Visual Basic, Microsoft Access, and Microsoft Excel. DAOSDK.HLP ships with Visual C++.</td>
</tr>
<tr valign=top>
<td width=33%>Externally Creatable (<b>New</b>)</td>
<td width=67%>True (<b>DAO.DBEngine</b>). Not needed because <b>DBEngine </b>is created automatically when any component of DAO is referenced.</td>
</tr>
<tr valign=top>
<td width=33%>Server Command</td>
<td width=67%>DAO3032.DLL or DAO2516.DLL</td>
</tr>
<tr valign=top>
<td width=33%><b>CreateObject</b></td>
<td width=67%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetObject</b></td>
<td width=67%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=33%>Terminate Object</td>
<td width=67%>Closes all DAO.Workspaces; sets DAO.DBEngine to <b>Nothing</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Table 34. Identifier Table for Data Access Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>ProgID</b></td>
<td class=label width=64%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=36%>DAO.DBEngine</td>
<td width=64%>{00025e15-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.Field</td>
<td width=64%>{00025e4c-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.Group</td>
<td width=64%>{00025e5f-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.Index</td>
<td width=64%>{00025e55-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.PrivateDBEngine</td>
<td width=64%>{00025e19-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.QueryDef</td>
<td width=64%>{00025e7a-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.Relation</td>
<td width=64%>{00025e8b-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.TableDef</td>
<td width=64%>{00025e43-0000-0000-c000-000000000046}</td>
</tr>
<tr valign=top>
<td width=36%>DAO.User</td>
<td width=64%>{00025e68-0000-0000-c000-000000000046}</td>
</tr>
</table><br>
<p>
The following code creates a database and then creates an ad-hoc table. The tables and their fields are then shown in a list box. (Note that you will have to remove the extra hard returns in the "Set MyDB" and "Query:" lines.)</p>
<pre><code>Dim appDAO As New DAO.DBEngine
Dim MyDB As DAO.Database
Set MyDB = appDAO.CreateDatabase(Name:="MSDN1.MDB", 
 &nbsp; Connect:=DAO.Constants.dbLangNorwDan, Option:=DAO.Constants.dbEncrypt)
With MyDB
 &nbsp;&nbsp; .Execute _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Query:="Select 'Dr.Gui' As Name, 'MSDN@Microsoft' As Email, #1/1/52#
 as Birthdate into MyTables"
 &nbsp;&nbsp; For i% = 0 To .TableDefs.Count - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem .TableDefs(i%).Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For j% = 0 To .TableDefs(i%).Fields.Count - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem "&nbsp; Field:" &amp; .TableDefs(i%).Fields(j%).Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next j%
 &nbsp;&nbsp; Next i%
End With
</code></pre>
<p>
There are many other examples of using the DAO in samples shipped with various products, such as Visual Basic or Microsoft Access. Use <b>DAO.Database.Execute</b> to quickly create an ad-hoc table when the default data types assigned by the database engine are acceptable. This command can save many lines of code and can be easier to read. The Microsoft Access server is an out-of-process server; for this reason its DAO child object should be avoided by using the DAO server directly. </p>
<h4>SQL Distributed Management Objects</h4>
<p>
<OBJECT id=sample15 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4456">
</OBJECT><a href="javascript:sample15.Click()">Click to open or copy the files in the SQLDEMO sample application for this technical article.</a></p>
<p>
The SQL Server object is a fair rose, officially named SQL Distributed Management Objects or SQL-DMO. It is called SQLOLE in the type library. (The poor developers could not change names to match the marketing manager's whims and still ship on time.) It exposes the complete Microsoft SQL Server as an object and allows the Microsoft SQL Server administration application to be easily managed. It should not be used for developing end-user applications.</p>
<p class=label>
<b>Table 35. Quick Summary for SQL Distributed Management Objects</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>SQLOLE32.TLB</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft SQLOLE Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>SQLOLE</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft SQLOLE Object Library</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>SQLBOOKS.MVB</td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%><a href="msdn_mapsqldm.htm">"Mapping the SQL Distributed Management Object: SQLOLE 6.0"</a> </td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>See documentation for Microsoft SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>A component of SQL Server and SQL Server tools</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>True (<b>SQLOLE.Application</b>). Not needed because the instance is created automatically when any component of SQLOLE is referenced.</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>SQLOLE32.DLL</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Closes application.</td>
</tr>
</table><br>
<p class=label>
<b>Table 36. Identifier Table for SQL Distributed Management Objects</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>ProgID</b></td>
<td class=label width=59%><b>CLSID</b></td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Alert</td>
<td width=59%>{00026bb0-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Application</td>
<td width=59%>{00026ba0-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Article</td>
<td width=59%>{00026ba0-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Backup</td>
<td width=59%>{00026bb7-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Check</td>
<td width=59%>{00026bbd-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Column</td>
<td width=59%>{00026ba4-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Database</td>
<td width=59%>{00026ba2-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Default</td>
<td width=59%>{00026ba7-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Device</td>
<td width=59%>{00026baf-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Group</td>
<td width=59%>{00026baa-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.HistoryFilter</td>
<td width=59%>{00026bb8-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Index</td>
<td width=59%>{00026bac-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Key</td>
<td width=59%>{00026bad-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Language</td>
<td width=59%>{00026bb2-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Login</td>
<td width=59%>{00026bb1-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Operator</td>
<td width=59%>{00026bb9-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Publication</td>
<td width=59%>{00026bba-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.RemoteLogin</td>
<td width=59%>{00026bb4-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.RemoteServer</td>
<td width=59%>{00026bb3-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Rule</td>
<td width=59%>{00026ba8-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.SQLServer</td>
<td width=59%>{00026ba1-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.StoredProcedure</td>
<td width=59%>{00026bab-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Subscription</td>
<td width=59%>{00026bbc-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Table</td>
<td width=59%>{00026ba3-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Task</td>
<td width=59%>{00026bb5-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Transfer</td>
<td width=59%>{00026bb6-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.Trigger</td>
<td width=59%>{00026bae-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.User</td>
<td width=59%>{00026ba9-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.UserDefinedDatatype</td>
<td width=59%>{00026ba6-0000-0000-C000-000000000046}</td>
</tr>
<tr valign=top>
<td width=41%>SQLOLE.View</td>
<td width=59%>{00026ba5-0000-0000-C000-000000000046}</td>
</tr>
</table><br>
<p>
The following code obtains information on the status of a series of databases on a SQL server.</p>
<pre><code>Dim ThisSQLOLE As New SQLOLE.Application
Dim ThisSQLServer As New SQLOLE.SQLServer
Dim objSQLdb As SQLOLE.Database
ThisSQLServer.Connect ServerName:=ServerName$, Login:="sa", Password:=Null
List1.Clear
For Each objSQLdb In ThisSQLServer.Databases
 &nbsp;&nbsp; With objSQLdb
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If .Status &lt;&gt; SQLOLE.SQLOLE_DBSTATUS_TYPE.SQLOLEDBStat_Inaccessible Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem .Name &amp; "[Size=" &amp; Format$(.Size, "0.0") &amp; " Mbytes, " _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; " Used= " &amp; Format$(.DataSpaceUsage, "0.0") _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; ", Users=" &amp; Format(.Users.Count, "0") &amp; "]"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End With
Next
</code></pre>
<p>
The SQL-DMO server encapsulates the complete essence of SQL Server. The SQL Server Books Online gives many excellent examples of using this object. Kudos to my former boss, Casey Kiernan, for doing an excellent job, and to Ted Hart for creating one of the best examples of a type library!</p>
<h4>Remote Data Object</h4>
<p>
<OBJECT id=sample16 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4452">
</OBJECT><a href="javascript:sample16.Click()">Click to open or copy the files in the RDODEMO sample application for this technical article.</a></p>
<p>
The Remote Data Object (RDO) ships with Visual Basic 4.0 Enterprise Edition. It is a very thin layer over the ODBC API. The RDO does not use the Jet engine. It is fast and requires little memory to run.</p>
<p class=label>
<b>Table 37. Quick Summary for Remote Data Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Property</b></td>
<td class=label width=69%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=31%>Reference File</td>
<td width=69%>MSRDO32.DLL</td>
</tr>
<tr valign=top>
<td width=31%>Reference Title</td>
<td width=69%>Microsoft Remote Data Object 1.0</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Library Name</td>
<td width=69%>RDO</td>
</tr>
<tr valign=top>
<td width=31%>Object Browser Title</td>
<td width=69%>Microsoft Remote Data Object 1.0</td>
</tr>
<tr valign=top>
<td width=31%>Programming Help File</td>
<td width=69%>ENTPRISE.HLP </td>
</tr>
<tr valign=top>
<td width=31%>Extended Map</td>
<td width=69%><a href="msdn_maprdo10.htm">"Mapping the Remote Data Object: RDO 1.0"</a></td>
</tr>
<tr valign=top>
<td width=31%>Redistribution Rights</td>
<td width=69%>May be redistributed <i>only</i> with executables or DLLs generated by Visual Basic 4.0 Enterprise Edition. Not supported with other products.</td>
</tr>
<tr valign=top>
<td width=31%>Source Information</td>
<td width=69%>Visual Basic 4.0 Enterprise Edition</td>
</tr>
<tr valign=top>
<td width=31%>Externally Creatable (<b>New</b>)</td>
<td width=69%>True (<b>RDO.rdoEngine</b>). Not needed because the <b>rdoEngine</b> is created automatically when any component of RDO is referenced.</td>
</tr>
<tr valign=top>
<td width=31%>Server Command</td>
<td width=69%>MSRDO32.DLL</td>
</tr>
<tr valign=top>
<td width=31%><b>CreateObject</b></td>
<td width=69%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetObject</b></td>
<td width=69%>Always returns same instance.</td>
</tr>
<tr valign=top>
<td width=31%>Terminate Object</td>
<td width=69%>Closes application.</td>
</tr>
</table><br>
<p class=label>
<b>Table 38. Identifier Table for Remote Data Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>ProgID</b></td>
<td class=label width=64%><b>CLSID </b></td>
</tr>
<tr valign=top>
<td width=36%>rdoEngine<br>
MicrosoftRDO.rdoEngine</td>
<td width=64%>{A93E470F-62D3-11CE-920A-08002B369A33}</td>
</tr>
</table><br>
<p>
The following sample code populates a list box with the results of an SQL query from an SQL server. It uses the sample "Pubs" database that is installed with Microsoft SQL Server.</p>
<pre><code>Dim DB As rdo.rdoConnection
Dim RS As rdo.rdoResultset

Set DB = rdoEngine.rdoEnvironments(0).OpenConnection( _
 &nbsp;&nbsp; dsName:="Pubs", _
 &nbsp;&nbsp; Connect:="ODBC;Userid=sa;Password=;")
Set RS = DB.OpenResultset( _
 &nbsp;&nbsp; Name:="Select * from Authors;")
While Not RS.EOF
 &nbsp;&nbsp; List1.AddItem (RS(0))
 &nbsp;&nbsp; RS.MoveNext
Wend
RS.Close
</code></pre>
<p>
This is similar to using the Data Access Object described above with the names changed to confuse the innocent. See my article <a href="msdn_intrordo.htm">"Introduction to Using the Remote Data Object"</a> for further information.</p>
<h2>Coding Tips</h2>
<p>
By this time, you should be pointed in the right direction. A few general words of advice may spare you some angst:
<ul type=disc>
<li>
Always fully qualify objects, properties, methods, and constants. Write your code for the person who is going to maintain it.<br><br></li>
<li>
Use the Clipboard to speed data transfer.<br><br></li>
<li>
Use macros or modules to speed execution.<br><br></li>
<li>
Use early binding whenever it is available.<br><br></li>
<li>
Use a splash screen when initializing an OLE Automation server and disable any forms until the OLE Automation server is loaded.</li>
</ul>
<p>
It is very reckless to assume anything about the window state of an OLE Automation server. It is important to remember that if you intend to make the OLE server visible to the user, you should include code to explicitly do the following: 
<ul type=disc>
<li>
Make the server visible.<br><br></li>
<li>
Move the server on the screen.<br><br></li>
<li>
Restore the server from an icon and resize to an appropriate size. </li>
</ul>
<h3>Dream Sweet Dreams</h3>
<p>
This article covers a lot of territory in very few words. I smile when I look at these OLE Automation servers and controllers. This technology pushes the limit of practical corporate solutions to new levels. I am still trying to fully understand what it is possible to produce in one week of hard coding—it's awesome! As new servers are added, the potential grows and the labor hours decrease. Using OLE Automation servers and controllers represents a paradigm shift in how you code. Your learning curve will be steep for a while, but I hope this article flattens it for you. Try the examples, then dream, then code the dream.</p>
<h2>Bibliography</h2>
<p>
Bienick, Paul. "Using OLE in Microsoft Visual FoxPro." (MSDN Library, Conference Papers)</p>
<p>
Gilbert, Michael. "Building Custom Solutions with Schedule+." (MSDN Library Archive, Conference and Seminar Papers)</p>
<p>
Hodges, Douglas. <a href="msdn_oalife.htm">"Managing Object Lifetimes in OLE Automation."</a> January 1995. (MSDN Library, Technical Articles)</p>
<p>
Knowledge Base Q111311. "XL: CreateObject Function Starts Invisible Instance of Excel." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q112194. "How to Navigate Excel Objects from Visual Basic Version 3.0." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q114225. "XL5: OLE Automation Error Using Quit Method with GetObject." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q119469. "INF: How to Use OLE Automation to Modify MS Graph Object." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q120418. "INF: Using OLE Automation to Change a Graph's Type." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q128994. "Behavior of GETOBJECT() with Excel and Word for Windows." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q129252. "XL7: Error Creating OLE Automation Object with Microsoft Excel." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q132535. "PRB: Releasing Object Variable Does Not Close Microsoft Excel." (MSDN Library, Knowledge Base)</p>
<p>
Lassesen, Ken. <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapdao30.htm">"Mapping the Data Access Object: DAO 3.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapacc95.htm">"Mapping the Microsoft Access 95 Object: MSAccess 7.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_msgraph5.htm">"Mapping the Microsoft Graph Object: Graph 5.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapoff95.htm">"Mapping the Microsoft Office 95 Object Library: MicrosoftOffice."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapbindr.htm">"Mapping the Office Binder Object Library: OfficeBinder 1.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapomapi.htm">"Mapping the OLE Messaging Object Library: MAPI 1.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_maprdo10.htm">"Mapping the Remote Data Object: RDO 1.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschpm.htm">"Mapping the Schedule+ OLE Automation Server: Programming Model."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapspl95.htm">"Mapping the Schedule+ Type Library: SPL 7.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapsqldm.htm">"Mapping the SQL Distributed Management Object: SQLOLE 6.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapstole.htm">"Mapping the Standard OLE Types Object Library: StdType 1.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapvba.htm">"Mapping the Visual Basic for Applications Object Library: VBA 2.2."</a> (MSDN Library, Technical Articles)&nbsp; </p>
<p>
Lassesen, Ken. <a href="msdn_mapvcmd.htm">"Mapping the VoiceCommand 1.0 Type Library: VCmdAuto."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapvtxt.htm">"Mapping the VoiceText 1.0 Type Library: VTxtAuto."</a> (MSDN Library, Technical Articles) </p>
<p>
Lassesen, Ken. <a href="msdn_mapwdacc.htm">"Mapping the 'Word95 Objects for ACCESS': Word95Access"</a> (MSDN Library, Technical Articles)</p>
<p>
Microsoft Exchange Server SDK. <i>Microsoft Schedule+ Programmer's Guide</i>.</p>
<p>
Microsoft Solutions Development Kit. <a href="msdn_objguid.htm">"Your Unofficial Guide to Using OLE Automation with Microsoft Office and Microsoft BackOffice"</a> 1995. (MSDN Library, Technical Articles)</p>
<p>
Microsoft Visual FoxPro version 3.0 <i>Developers' Guide.</i> "Creating Objects with OLE Automation." 1995. </p>
<p>
Microsoft Win32 Software Development Kit <i>OLE Programmer's Reference</i>. "OLE Registry Entries." 1995. (MSDN Library, Platform SDK)</p>
<p>
Nilsen, Kenneth. "Using the OLE Automation Interface with Visual Basic." (MSDN Library Archive, Conference and Seminar Papers)</p>
<p>
Wells, Eric. <i>Developing Microsoft Excel 95 Solutions</i>. Redmond, WA: Microsoft Press, 1995. Note especially "VBA Editing and Debugging Tools" in Chapter 2.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 205: Drawing a Gradient Background Pattern on Forms in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn205"></a></sup>Tip 205: Drawing a Gradient Background Pattern on Forms in Visual Basic 4.0</h1>
<p>
February 28, 1996</p>
<h2>Abstract </h2>
<p>
The Microsoft® Visual Basic® version 4.0 Setup program allows you to create a standard installation program for your Visual Basic application. The Setup program, as with other Microsoft Setup programs, draws a gradient background pattern, usually in a blue color. This article explains how to draw gradient backgrounds in a Visual Basic application.</p>
<h2>Using the RealizePalette Function to Draw Backgrounds</h2>
<p>
Most Microsoft® Windows® applications are installed by running a Setup program. These setup programs often display a window in which appears a faded blue background. This same effect can be reproduced in Microsoft Visual Basic® version 4.0 applications by using the Windows application programming interface (API) <b>RealizePalette</b> function.</p>
<p>
To display a window with a gradient background, you simply paint thin rectangles in different colors on the form. This gives the form a fade-to-black effect.</p>
<p>
The <b>RealizePalette</b> function lets you select a logical palette for a device context, such as a window. This allows you to use a larger number of colors in your application without interfering with the colors used by other forms (windows) in your program. After calling the <b>RealizePalette</b> function, you need only select the colors with which you want to paint the rectangles and the gradient background effect is created.</p>
<h2>Example Program</h2>
<p>
This program shows how to draw a gradient background on a form/window in Visual Basic.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function RealizePalette Lib "gdi32" 
 &nbsp; (ByVal hdc As Long) As Long

Dim RedColor(256) As Integer
Dim GreenColor(256) As Integer
Dim BlueColor(256) As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; For I = 1 To 256
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RedColor(I) = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GreenColor(I) = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BlueColor(I) = I
 &nbsp;&nbsp; Next I
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; dummy = RealizePalette(Form1.hdc)
 &nbsp;&nbsp; Form1.Scale (0, 0)-(256, 1)
 &nbsp;&nbsp; For I = 0 To 255
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.Line (I, 0)-(I + 1, 1), RGB(RedColor(I + 1), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GreenColor(I + 1), BlueColor(I + 1)), BF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.ForeColor = RGB(RedColor(I + 1), GreenColor(I + 1), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BlueColor(I + 1))
 &nbsp;&nbsp; Next I
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; dummy = RealizePalette(Form1.hdc)
 &nbsp;&nbsp; Form1.Scale (0, 0)-(1, 256)
 &nbsp;&nbsp; For I = 0 To 255
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.Line (0, I)-(1, I + 1), RGB(RedColor(I + 1), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GreenColor(I + 1), BlueColor(I + 1)), BF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.ForeColor = RGB(RedColor(I + 1), GreenColor(I + 1), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BlueColor(I + 1))
 &nbsp;&nbsp; Next I
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing&nbsp; When you click the first <b>Command Button</b> control, the program draws the black-to-blue gradient background horizontally across the form. Clicking the second <b>Command Button</b> control instructs the program to draw the gradient background vertically down the form.</p>
<h2>Additional References</h2>
<p>
"Color Palettes." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
Knowledge Base Q128637. "How to Draw a Gradient Background."</p>
<p>
"RealizePalette QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

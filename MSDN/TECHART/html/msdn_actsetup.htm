<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending Active Setup</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_actsetup"></a>Extending Active Setup </h1>
<p>
Nancy Winnick Cluts<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
Last updated: November 3, 1997 <br>
(links to latest documentation added in Introduction)</p>
<h4>Changes for the Internet Explorer 4.0 Final Release</h4>
<ul type=disc>
<li>
The explanation of the FTP download process was updated.<br><br></li>
<li>
The download page screen shot was updated.<br><br></li>
<li>
The <b>RegCheck</b> control was rewritten in ATL (it was originally written in MFC).<br><br></li>
<li>
The <b>IsComponentInstalled</b> method now also has the possible return value of 3.<br><br></li>
<li>
The OLE Automation Interface and events for VBScript was updated to reflect changes in flags, options, and additional events and methods.<br><br></li>
<li>
The CIF file documentation was updated to reflect new names, flags, and options.</li>
</ul>
<h2>Introduction</h2>
<p>
When the team that creates the Internet Client SDK (see online documentation at <a href="http://www.microsoft.com/msdn/sdk/inetsdk/asetup/default.asp">http://www.microsoft.com/msdn/sdk/inetsdk/asetup/default.asp</a>) needed a setup utility, they decided to take advantage of Active Setup. Active Setup is included in Internet Explorer 4.0 and provides generic setup technologies for control developers. This article explains what Active Setup is, what utilities it provides, and why and how the SDK team extended it. Active Setup documentation can be found in the Internet Explorer Administration Kit (<a href="http://www.microsoft.com/ie/ieak/">http://www.microsoft.com/ie/ieak/</a>). Detailed information about Active Setup can also be found in the Internet Explorer Deployment Guide, which is available on the Web at <a href="http://www.microsoft.com/ie/corp/default.htm?/ie/corp/deployguide.htm">http://www.microsoft.com/ie/corp/default.htm?/ie/corp/deployguide.htm</a>. It is also important to bear in mind that this article describes just one use of Active Setup and one solution that employs this technology—there is always more than one way to peel a potato (as a cat-lover, I cannot use that other colloquialism). </p>
<h2>What Is Active Setup?</h2>
<p>
Active Setup is a group of technologies designed to componentize your application's setup and make future client updates smaller and easier. To use Active Setup, you create:
<ul type=disc>
<li>
A digitally signed cabinet (.CAB) file containing the bits you’d like to ship to your customers. <br><br></li>
<li>
An information (.INF) file or self-extracting executable (.EXE) file that tells Active Setup what files to install and where. <br><br></li>
<li>
A Component Install File (.CIF) that tells Active Setup all other details about the installation. </li>
</ul>
<p>
Active Setup ensures that only those components that need to be downloaded get downloaded (how many times do you want to download the Visual Basic® 5.0 DLL?) and gives you the opportunity to specify whether you will to prompt the user to skip files. </p>
<p>
If a user is running Internet Explorer 4.0 Preview 2, another bonus everyone gets with Active Setup is smart recovery from a failed download session over the Internet. Just like you, I’ve spent too much time downloading a component only to have my connection dropped. I'm then left wondering what was left to download, what I can safely remove, or even if I could use the previous version of the component (which can be a real problem if you’ve downloaded a new executable without getting all of the new DLLs that you need). From pages that use Active Setup, such as the Internet Client SDK page, users are prompted with a list of installed items and will know to not download those items again.</p>
<h3>Programming Interface Overview</h3>
<p>
Active Setup consists of two ActiveX™ controls that support the implementation of Internet-based component setup. These controls are INSENG.DLL, which contains the COM interface, and ASCTRLS.OCX, which contains an OLE Automation interface that can be used to talk to INSENG.DLL and enables you to display simple text dynamically on a Web page. The sections below describe the OLE Automation interface for Active Setup and the events supported through Visual Basic Scripting Edition (VBScript). These sections will give you an idea of what is supported by Active Setup. It is not final documentation—you'll need to refer to the Internet Client SDK for the scintillating details and updates.</p>
<h4>OLE Automation interface for Active Setup </h4>
<p>
The following methods are supported by Active Setup for Internet Explorer 4.0:</p>
<p>
<b>Abort </b></p>
<p>
This method stops the current download and installation session. </p>
<p>
<b>BaseURL </b></p>
<p>
This method sets a base URL root that can retrieve packages from Internet sites. This URL can be FILE-, FTP-, or HTTP-based. You cannot use this method when the <b>EngineStatus</b> is 2 (installation is in session). </p>
<p>
<b>EngineStatus </b></p>
<p>
This method is used to determine whether the engine is ready for other methods to be called or to inform the user that an operation has failed. The possible return codes are: </p>
<p>
0 — The engine is not ready. No .CIF file is loaded.<br>
1 — The engine is downloading the .CIF file.<br>
2 — Installation is in session.<br>
3 — The engine is ready.</p>
<p>
<b>FinalizeInstall </b></p>
<p>
This method is used at the end of an installation process to reboot the machine (if needed) for the newly installed components to operate correctly. It takes two flags: </p>
<p>
0 — Do not reboot. <br>
2 — The user interface should not prompt the user to reboot. </p>
<p>
The default is to reboot via a user prompt.</p>
<p>
<b>IsComponentInstalled </b></p>
<p>
This method displays the installation and component status to the user. It checks the Registry keys under HKEY_LOCAL_MACHINE\Software\Microsoft\ActiveSetup to determine the installation state and version. The method takes one argument, the Component ID, and returns:</p>
<p>
0 — The component is not installed. <br>
1 — The component has already been installed. <br>
2 — The component is installed but a newer version is available for download.</p>
<p>
<b>ProcessComponents </b></p>
<p>
This method processes the components in the .CAB file and can direct Active Setup to delay a reboot, to not show the progress of the installation, or to not show an end summary to the user. </p>
<p>
<b>ReadyState </b></p>
<p>
This method is used to determine if the control is ready to accept VBScript. It returns:</p>
<p>
0 — The control is not ready. <br>
4 — The control is ready.</p>
<p>
<b>SetAction </b></p>
<p>
This method is used to queue up components Active Setup should install. You give it the ID of the component and define an action. Possible actions include:</p>
<p>
0 — Skip installation of the component.<br>
1 — Install the component.<br>
2 — Uninstall the component. </p>
<p>
You cannot call <b>SetAction</b> during <b>EngineStatus</b> 2 (installation is in session). This method returns 0 if it succeeds.</p>
<p>
<b>SetCIFFile </b></p>
<p>
This method sets the .CIF file for a specified .CAB file. It cannot be called during a download or installation session. The .CIF file can also be set via HTML properties for the INSENG.DLL in the Web page. This method can be called when the <b>EngineStatus</b> method returns 3 (Engine ready).</p>
<p>
<b>Size </b></p>
<p>
Returns size of a component in kilobytes based on values from the .CIF file and a multiplier. </p>
<p>
<b>TotalDependencySize </b></p>
<p>
This method returns the dependency size in kilobytes based on .CIF-data total download size for all components the <b>SetAction</b> method queued up to install in the engine. </p>
<p>
<b>TotalDownloadSize </b></p>
<p>
This method returns the total download size in KB based on .CIF-data total download size for all components the <b>SetAction</b> queued up to install in the engine.</p>
<h4>Events for VBScript </h4>
<p>
The following VBScript events are supported by Active Setup for Internet Explorer 4.0 Preview 2:</p>
<p>
<b>InstallEngine1_OnReadyStateChange </b>— This event returns:</p>
<p>
0 — The control is not ready.<br>
4 — The control is ready.</p>
<p>
This event is the same as the <b>ReadyState</b> method.</p>
<p>
<b>InstallEngine1_OnEngineStatusChange</b> — This event is equivalent to the <b>EngineStatus</b> method described in the previous section.</p>
<p>
<b>InstallEngine1_OnStartInstall</b> — This event returns the total size of the installation when the installation session starts. </p>
<p>
<b>InstallEngine1_OnStopInstall</b> — When the installation session is finished, this event is fired and the result can be:</p>
<p>
0 — Success.<br>
1 — Failure.<br>
2 — A reboot is necessary. </p>
<p>
<b>InstallEngine1_OnStartComponent</b> — This event returns the component’s ID, the total size of the component, and the friendly name of the component as indicated in the .CIF file.</p>
<p>
<b>InstallEngine1_OnStopComponent</b> — This event returns the component’s ID, the result (0 for success or 1 for failure), the phase the component was in when it was stopped, the friendly name of the component as indicated in the .CIF file, and whether a reboot is required. </p>
<h4>The Component Install File </h4>
<p>
The Component Install File (.CIF) is used by Active Setup to determine what to install and how to install it. The following table describes version 1.2 of the .CIF file format. It is correct as this article is being written, but check the final Internet Explorer 4.0 documentation in the Internet Client SDK for the final format. An example of a .CIF file follows this table. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Item</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%><b>[</b><i>Item</i><b>]</b></td>
<td width=65%>Use in the HTML for the Web page with VBScript to denote the item to download.</td>
</tr>
<tr valign=top>
<td width=35%><b>URL1=</b><i>Address,Flags</i> </td>
<td width=65%>Use to download a file. By default, Active Setup will not extract the files. Flags can be used to: <p>
1 — Extract items.</p>
<p>
2 — Use a relative URL from the <b>BaseURL</b> property.</p>
<p>
4 — Delete the source .CAB file after extraction.</p>
<p>
When a flag set to 1 is used, the extraction can be limited to specific items by placing colons between files. For example, if you specify <code>URL1=http:/download/mycab,1,FileA:FileB</code>, only <i>FileA</i> and <i>FileB</i> would be extracted from the .CAB file.</p>
</td>
</tr>
<tr valign=top>
<td width=35%><b>URL2=</b><i>Address, Flags</i> </td>
<td width=65%>Same as <b>URL1</b>.</td>
</tr>
<tr valign=top>
<td width=35%><b>Command1= </b></td>
<td width=65%>The command to launch after the .CAB file(s) are downloaded.</td>
</tr>
<tr valign=top>
<td width=35%><b>Switches1= </b></td>
<td width=65%>Command-line switches for the executable (.EXE) or for the Advpack utility, if needed.</td>
</tr>
<tr valign=top>
<td width=35%><b>Type1= </b></td>
<td width=65%>Used by Active Setup to determine the installation type (if needed). Set the type to 0 for an .INF, 2 for Wextract, or 3 for Win32®.</td>
</tr>
<tr valign=top>
<td width=35%><b>Dependencies=</b><i>Object,Object:N</i> </td>
<td width=65%>Item name needed to install. <i>Object:N</i> directs Active Setup to check whether the item is installed, but does not install it. </td>
</tr>
<tr valign=top>
<td width=35%><b>Size=</b><i>KB amount, multiplier </i></td>
<td width=65%>Used to determine disk-space needs for the client. </td>
</tr>
<tr valign=top>
<td width=35%><b>DisplayName= </b></td>
<td width=65%>Name shown in the installation status gauge.</td>
</tr>
<tr valign=top>
<td width=35%><b>GUID= </b></td>
<td width=65%>ID used to store data about the installation. This can be used to determine whether the application has already installed.</td>
</tr>
<tr valign=top>
<td width=35%><b>Version=</b><i>1,1,1,1</i> </td>
<td width=65%>Version to compare with the current system to see if the newest version installed.</td>
</tr>
<tr valign=top>
<td width=35%><b>Uninstall= </b></td>
<td width=65%>Key in uninstall section to point to for command-line uninstall.</td>
</tr>
<tr valign=top>
<td width=35%><b>SuccessKey= </b></td>
<td width=65%>Registry key and value if the item is installed.</td>
</tr>
<tr valign=top>
<td width=35%><b>Reboot=</b><i>1</i></td>
<td width=65%>Installation of this object will always require a reboot to work correctly.</td>
</tr>
<tr valign=top>
<td width=35%><b>InstalledSize=</b><i>Progdir, Windir</i> </td>
<td width=65%>Size needed for final installation for item.</td>
</tr>
</table><br>
<p>
The following is an example of a .CIF file that might be used to install Internet Explorer 4.0 Preview 2: </p>
<pre><code>[BASEIE40_Win]
DisplayName="Microsoft Internet Explorer 4.0"
Size=8300,0
GUID={89820200-ECBD-11cf-8B85-00AA005B4383}
URL1="Setupw95.cab",3
URL2="ie4_s1.cab",7
URL3="ie4_s2.cab",7
URL4="ie4_s3.cab",7
URL5="ie4_s4.cab",7
; URL6="ie4_s5.cab",7
Command1="ieclean.inf"
Type1=0
Command2="Setup.exe"
Switches2="/QT /gc c:\nashlog.txt"
Type2=2
Version=4,71,TOK_BUILDNUM,TOK_CIFNUM
;UninstallKey="IE40"
Reboot=1
InstalledSize=2800,19300
SuccessKey="IE40,%UNQUOTED_APPVERSION_CDROM%"
</code></pre>
<p>
The <b>[</b><i>ITEM</i><b>]</b> is the identifier for Internet Explorer 4.0, while the <b>DisplayName</b> is set to the friendly name. There are four cabinet files (note that one is commented out) and the IECLEAN.INF file is run after all of the .CAB files have been downloaded.</p>
<h3>Why the SDK Team Uses Active Setup</h3>
<p>
The Internet Client SDK team works on a very aggressive schedule. The audience for the SDK has changed dramatically in recent years (okay, really months, but technology is moving very rapidly). Previous to this SDK, the people downloading an SDK were independent software vendors (ISVs) or independent hardware vendors (IHVs). To support all the new development on the Internet, the INet SDK team needs to provide information for independent content providers (ICPs) and HTML authors as well. An SDK is no longer a tool just for propeller heads like me; the team needs to serve an audience that includes first-time HTML authors and hard-core C++ or Java™ developers. </p>
<p>
Another issue for the SDK team is the sheer size of the SDK. It has become huge, and it is obvious that most people would rather download selected portions of the SDK than download the full SDK. For example, a Web developer creating HTML-based content for the Web probably doesn't want to burn up disk space with user-interface C-based programming information. </p>
<p>
The SDK team decided to fix this problem by “chunking” up the download into bite-sized pieces. By chunking up the SDK, the .CAB files become smaller, which translates into shorter download times for the user. This has proved to be a good decision and the team intends to go back and refine their chunking further, to remove redundancies and provide greater granularity.</p>
<p>
Another bonus that chunking up the SDK provides is the ability to update only the .CAB files that need updating. This means that the user no longer needs to download the entire SDK to get the updated portions. This also means that the team can add technologies more easily without requiring the user to download items she already has. And because Active Setup enables you to keep track of what is installed and where, the SDK team can also make updates more easily (remove what’s no longer needed and leave intact whatever didn’t change).</p>
<p>
Finally, because Active Setup is new for Internet Explorer 4.0, the SDK team can exploit the new technologies contained in Internet Explorer 4.0 and look into some of its other new features, like channels.</p>
<p>
Now, I don’t want you to think that using Active Setup is the only solution to the problems that the SDK team was having. That’s certainly not the case. In order to solve these problems, the team could have decided on any one of the following solutions:
<ul type=disc>
<li>
Use Active Server pages that query the user for which components to install and dynamically create a page with code-download tags for various controls the user wants to install. This solution doesn't scale perfectly, but it can work.<br><br></li>
<li>
Write a Visual Basic control that calls into the ActiveX APIs to do work similar to the ASP solution mentioned above.<br><br></li>
<li>
Write a plug-in that provides the same functionality. The plus side to this solution is that it would work in Netscape Navigator. </li>
</ul>
<h4>An issue to consider</h4>
<p>
Now let’s talk about some issues the team needed to consider when deciding whether to use Active Setup. The biggest issue was that Active Setup requires the support of ActiveX from the browser. This means that anyone who wants to use the new setup program needs to run a browser that supports ActiveX controls. Because the Internet Client SDK is designed for people who want to develop for Internet Explorer 4.0, the team decided that it made sense to use the technology. They also decided to set up a special FTP site for customers who want to download the SDK but are not running a browser that supports ActiveX.</p>
<h3>The Decision to Extend Active Setup</h3>
<p>
Now that you‘ve decided to use Active Setup, why would you want to extend it? Active Setup is a great set of technologies but it isn’t perfect for all installations. The good news is that you can extend it to meet your needs. That’s just what the SDK team did. </p>
<p>
One issue the SDK team solved was that Active Setup assumes that all files are installed in the same directory. In the early beta versions of Internet Explorer 4.0, there is no way to specify different directories for different components. Because a user of the SDK might want to install the C/C++ tools as well as the Java tools, that user might also want to put these files in different places on her system. </p>
<p>
The SDK team also has to deal with license agreements. Depending on what components a user decides to download, she should be prompted with the appropriate license agreement. You wouldn’t want to be prompted for the Java license if you aren’t downloading it—that would be confusing!</p>
<h4>The extended Active Setup</h4>
<p>
Now that we know why the SDK team decided to extend Active Setup, let’s look at how they did it. But first, here's what the installation page for the Internet Client SDK looks like:</p>
<p>
<img src="actsetup1.gif" border=0></p>
<p class=label>
<b>Figure 1. Installation page for the Internet Client SDK</b></p>
<p>
As you can see from Figure 1, the user can choose what to download based on her interests. She is also shown the size of the components, an estimate of the time it will take to download the items, and whether the items are currently installed.</p>
<p>
The extension of Active Setup was done with a 32-bit ActiveX control called REGCHECK.OCX. This control was written using Microsoft® Foundation Classes (MFC) 4.2b and handles all of the selective downloading of the .CAB files for the SDK. To run the control, the team needed to download the .OCX, as well as MSVCRT.DLL, MFC42.DLL, and OLEPRO32.DLL, if those files did not already exist on the client machine. The team also needed to digitally sign the control so that Active Setup would download the .CAB file. </p>
<p>
The control uses a file, HEADGRPH.HTM, in the \help directory of the SDK to store the current download information. This file currently contains a single .GIF. In the future, this file will also include a &lt;SCRIPT&gt;&lt;/SCRIPT&gt; tagset with information about the current status of document files on the user's machine. The &lt;SCRIPT&gt; tagset will have the following format:</p>
<pre><code>&lt;script&gt;
var comp=new Array(5);
comp[0]="n";
comp[1]="n";
comp[2]="n";
comp[3]="n";
comp[4]="n";
&lt;/script&gt;
</code></pre>
<p>
The control exposes a single <b>Status</b> method that does the following:
<ol>
<li>
Verifies that HEADGRPH.HTM exists (that is, was installed correctly) by attempting to open it.<br><br></li>
<li>
Verifies that the &lt;SCRIPT&gt;/&lt;/SCRIPT&gt; tags appear in the file.<br><br></li>
<li>
Verifies that the <b>comp[</b><i>n</i><b>]</b>… entries appear in the file.<br><br></li>
<li>
Opens the registry.<br><br></li>
<li>
Queries the registry for the GUID corresponding to each .CAB containing documentation files.<br><br></li>
<li>
Records the status for each GUID/file.<br><br></li>
<li>
Closes the registry.<br><br></li>
<li>
Maps GUID/file status to entries in the script.<br><br></li>
<li>
Closes HEADGRPH.HTM.</li>
</ol>
<h4>How it all works</h4>
<p>
Aside from the control, the SDK team created some extensive scripting (with VBScript and Jscript™) to extend Active Setup. (Did I use the word "extend" enough for you yet?) When you go to the download page for the SDK, note that there are check boxes that you can check to designate which items you would like to download. If you view the source for the page, you’ll see pages of scripting. Within the source, you'll see that the script checks the buttons (those check boxes) to find out which are marked as already installed and which the user has chosen to download. Then when the user chooses to install (to process), the SDK will download only the .CABs that are marked.</p>
<pre><code>Sub CheckBoxEventHandler( CheckBox, CheckBoxName, LongName, default )

   ' CheckBox is the Form Element.
   ' CheckBoxName is the name of the entry ( a string ).
   ' LongName is a descriptive name ( a string ).
   ' default is a bool indicating the default state of the checkbox.

 &nbsp; dim installed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Has this item been installed before?
 &nbsp; dim answer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Should we reinstall the code?

 &nbsp; dim MB_YESNO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Constant
 &nbsp; dim MB_NO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Constant

 &nbsp; MB_YESNO = 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Type of MessageBox
 &nbsp; MB_NO = 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Return Value of MessageBox
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; if CheckBox.checked then
 &nbsp;&nbsp;&nbsp;&nbsp; installed = frTop.InstallEngine1.IsComponentInstalled( CheckBoxName )
 &nbsp;&nbsp;&nbsp;&nbsp; if installed = 1 then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; answer = MsgBox( LongName &amp; " is already installed.&nbsp; Do you want to reinstall this component ?", MB_YESNO, "Internet Client SDK")       
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if answer = MB_NO then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckBox.checked = FALSE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end if
 &nbsp;&nbsp;&nbsp;&nbsp; end if
 &nbsp; end if&nbsp;&nbsp; 

 &nbsp; if CheckBox.checked then
 &nbsp;&nbsp;&nbsp;&nbsp; Call frTop.InstallEngine1.SetAction( CheckBoxName, 1 )
 &nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp; Call frTop.InstallEngine1.SetAction( CheckBoxName, 0 )
 &nbsp; end if

call UpdateTimeTotals(0)
End Sub
</code></pre>
<h4>Choosing a directory</h4>
<p>
As I mentioned earlier, a limitation of Active Setup 1.0 is that you cannot choose multiple directories for installation. The SDK team’s control prompts the user for the desired installation directory, stores the directory information in the Registry, and calls into the ADPACK.DLL utility to run the SDK .INF file. When the .INF file runs, it reads the Registry information and substitutes the user-desired directory with a default directory.</p>
<h4>Calculating download time</h4>
<p>
Another interesting piece of scripting in the source is the code that calculates the estimated download time for the chosen components. As you can see from the code below, this calculation is based on the assumption that the client is running at 28.8 bps. This is a pretty standard modem connection, and you could alter this code to provide estimated times based on other connection speeds:</p>
<pre><code>Sub UpdateTimeTotals(bTestCondition)

   ' This routine is able to compute an estimated time to download applications.

 &nbsp; dim downloadsize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' The size of the files to be downloaded.
 &nbsp; dim downloadtime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' The total time required to download all applications.
 &nbsp; dim downloadmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' The minutes section of the time required.
 &nbsp; dim downloadhr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' The hour section of the time required.

 &nbsp; ' Request total downloadsize from install engine
 &nbsp; downloadsize = frTop.InstallEngine1.TotalDownloadSize
 &nbsp; 'if ( bTestCondition = TRUE AND downloadsize &gt; 0 ) then
 &nbsp; '&nbsp;&nbsp;&nbsp;&nbsp; if frTop.InstallEngine1.IsComponentInstalled("CommonTech") &lt;&gt; 1 then
 &nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; downloadsize = downloadsize + frTop.InstallEngine1.Size("CommonTech")
 &nbsp; '      end if
 &nbsp; '&nbsp;&nbsp;&nbsp;&nbsp; if frTop.InstallEngine1.IsComponentInstalled("CommonDoc") &lt;&gt; 1 then
 &nbsp; '       &nbsp; downloadsize = downloadsize + frTop.InstallEngine1.Size("CommonDoc")
 &nbsp; '   end if
 &nbsp; 'end if
 &nbsp; downloadtime = CLng(((downloadsize*1024) / 28800) * 8 )
 &nbsp; downloadhr = frTop.Main1.CorrectHour(downloadtime)
 &nbsp; downloadmin = CInt((( downloadtime - CLng( downloadhr * 3600) ) / 60 ))
 &nbsp; 'MsgBox CSTR(downloadtime) + " " + CSTR(downloadhr) + " " + CSTR(downloadmin)

 &nbsp; ' Get ready to formulate the string to display time to user.
 &nbsp; if ( downloadtime &lt; 3600 ) then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frControl.Totals.Caption = CSTR(downloadsize) + " KB" + "/ " + CSTR(downloadmin) + " min"
 &nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( downloadtime = 3600 ) then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frControl.Totals.Caption = CSTR(downloadsize) + " KB" + " / " + " 1 hr"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frControl.Totals.Caption = CSTR(downloadsize)+" KB" +" / " + CSTR(downloadhr) + " hr" + " " + CSTR(downloadmin) + " min"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end if
 &nbsp; end if
End Sub 

Function GetCompTimeStringFromSize( CompSize )
 &nbsp; GetCompTimeStringFromSize = CSTR(CLNG( CompSize / downloadspeed ))
End Function
</code></pre>
<h4>Handling licensing agreements</h4>
<p>
The final area to show you is how the SDK team dealt with popping up appropriate licensing agreements. Depending on what the user checks off, various combinations of licensing agreements should be shown to the user. The user must accept the license agreement terms before the bits can be downloaded. The team used VBScript to check which items were chosen for download and show the appropriate licensing agreements (saved in text files). You can see this code if you view the source from your browser.&nbsp; </p>
<h4>But what about that nifty next button?</h4>
<p>
Okay, there’s one more little item that you might be interested in. At the bottom of the Web page, there’s a nifty bit of text that says “Next” with 4 colored arrows to the right of it. You click that button to continue (okay, so you figured that out already). The SDK team created the .GIF and used JavaScript to handle the click event on it: </p>
<pre><code>&lt;A HREF=”JavaScript::NextPage()”&gt;
</code></pre>
<h4>Summary</h4>
<p>
This article should give you some idea of what Active Setup is and how it can be used in real-world situations (like downloading an SDK!). This article is meant to be used as a simple overview and general guide. It is always best to check the documentation in the Internet Explorer Administration Kit for complete details about this and other Internet Explorer 4.0 technologies.</p>
<p>
<i>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? Drop me a line at </i>nancycl@microsoft.com<i> and let me know.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 59: Retrieving Text Under the Mouse Pointer</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn59"></a></sup>Tip 59: Retrieving Text Under the Mouse Pointer</h1>
<p>
Created: April 17, 1995</p>
<h2>Abstract</h2>
<p>
When developing an application in Visual Basic®, you may need to determine what word or phrase is under the mouse pointer. This article will demonstrate, through the use of an example program, how to retrieve text from a control.</p>
<h2>Retrieving Text from a Control</h2>
<p>
The <b>Instr</b> function in Visual Basic® is a powerful tool you can use to manipulate text strings. The <b>Instr</b> function is used to determine the position of a target string within a larger string. The target string can be defined as a whole word or phrase or simply a character, such as a space character. You can use it in conjunction with the <b>Mid$</b> function to easily remove parts of one string from another. The <b>ParseText</b> routine shown in the example program below is based on using these two Visual Basic functions to retrieve the text under the mouse pointer.</p>
<h2>Example Program</h2>
<p>
The following program shows how to retrieve a word or phrase under the mouse pointer (cursor).
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1 (note that each Words line must be typed as a single line of code): <pre><code>Sub Form_Load()
 &nbsp; 'Make the picture box take up the form's entire client area.
 &nbsp; Form1.Picture1.Top = 0
 &nbsp; Form1.Picture1.Left = 0
 &nbsp; Form1.Picture1.Height = Form1.ScaleHeight
 &nbsp; Form1.Picture1.Width = Form1.ScaleWidth

 &nbsp; ' Create some sample text to work with. This could be
 &nbsp; ' text loaded in from a file.
 &nbsp; ' Note - The text MUST currently end with a space.
 &nbsp; Text$ = "This is an example of how to determine which "
 &nbsp; Text$ = Text$ + "word the cursor is over in a picture "
 &nbsp; Text$ = Text$ + "box. This example is of course "
 &nbsp; Text$ = Text$ + "released into public domain. "

 &nbsp; 'Parse the text into the Words array.
 &nbsp; Call ParseText(Text$, Words())

 &nbsp; 'Create the prompts for the text.
 &nbsp; Words(0).PromptText = "This program"
 &nbsp; Words(3).PromptText = "A model"
 &nbsp; Words(11).PromptText = "The mouse cursor"
 &nbsp; Words(16).PromptText = "A control in VB that can display a Bitmap, MetaFile 
 &nbsp;&nbsp;&nbsp;&nbsp; or Icon"
 &nbsp; Words(17).PromptText = "A control in VB that can display a Bitmap, MetaFile 
 &nbsp;&nbsp;&nbsp;&nbsp; or Icon"
 &nbsp; Words(20).PromptText = "A model"
 &nbsp; Words(26).PromptText = "This program can be copied, modified, and used 
 &nbsp;&nbsp;&nbsp;&nbsp; without violating a copyright."
 &nbsp; Words(27).PromptText = "This program can be copied, modified, and used 
 &nbsp;&nbsp;&nbsp;&nbsp; without violating a copyright."
 &nbsp; Form1.Show
 &nbsp; 'Display the text on the Picture Box.
 &nbsp; Call DisplayText(Words(), Form1.Picture1)
 &nbsp; Form1.Picture1.AutoRedraw = True
End Sub
</code></pre>
</li>
<li>
Add a <b>Picture Box</b> control to Form1. Picture1 is created by default.<br><br></li>
<li>
Add the following code to the MouseMove event for Picture1 (note that the Sub line must be typed as a single line of code):<pre><code>Sub Picture1_MouseMove(Button As Integer, Shift As Integer, X As Single,
 &nbsp;&nbsp;&nbsp;&nbsp; Y As Single)
 &nbsp; Form1.Caption = ""
 &nbsp; For I = 0 To UBound(Words)
 &nbsp;&nbsp;&nbsp;&nbsp; If Y &gt;= Words(I).Top And Y &lt;= Words(I).Bottom Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If X &gt;= Words(I).Left And X &lt;= Words(I).Right Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.Caption = Words(I).PromptText
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Next
End Sub
</code></pre>
</li>
<li>
Create a new Sub procedure called ParseText. Add the following code to this procedure:<pre><code>Sub ParseText(Text$, WordHolder() As WordType)
 &nbsp; 'Find the number of spaces in the text, to determine
 &nbsp; 'approx. how many words are in it.
 &nbsp; Start = 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Start at the beginning.

 &nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp; I = InStr(Start, Text$, Chr$(32))&nbsp;&nbsp; 'Look for a space after 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'the one just found.

 &nbsp;&nbsp;&nbsp;&nbsp; 'If a space was found, add 1 to the counter and move
 &nbsp;&nbsp;&nbsp;&nbsp; 'the start to its location.
 &nbsp;&nbsp;&nbsp;&nbsp; If I &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NumSpaces = NumSpaces + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start = I + 1
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Loop Until I = 0
 &nbsp; ReDim WordHolder(NumSpaces + 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Redimension the array to 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'the # of words in the text.
 &nbsp; Start = 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Reset the starting position.
 &nbsp; WordNum = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Create a counter for the 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'current location in the
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'array.
 &nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp; I = InStr(Start, Text$, Chr$(32))&nbsp;&nbsp; 'Look for a space after
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'the one just found.
 &nbsp;&nbsp;&nbsp;&nbsp; 'If a space was found, make the next word equal to what
 &nbsp;&nbsp;&nbsp;&nbsp; 'was in between it and the previous space.

 &nbsp;&nbsp;&nbsp;&nbsp; If I &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordHolder(WordNum).Word = Mid$(Text$, Start, (I - Start) + 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start = I + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordNum = WordNum + 1
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Loop Until I = 0
End Sub
</code></pre>
</li>
</ol>
<p>
After executing this program, Visual Basic enlarges the Picture Box to fit the entire client area of Form1. Next, it displays the sentences in the <b>Picture Box</b> control. When you move the mouse pointer over selected words in the Picture Box, the phrases associated with the text pointed to by the mouse pointer are shown in the form's titlebar.</p>
</BODY>
</HTML>

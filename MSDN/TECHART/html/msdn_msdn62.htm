<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 62: Retrieving Filenames Associated with an Application</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn62"></a></sup>Tip 62: Retrieving Filenames Associated with an Application</h1>
<p>
Created: April 24, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can use the Windows® application programming interface (API) <b>FindExecutable</b> function to determine which filename extension is associated with a specific Windows-based application.</p>
<h2>Using the FindExecutable Function</h2>
<p>
Using the Windows® File Manager, you can associate a filename extension with a specific application. For instance, all filenames with the .TXT extension are associated with the Notepad application. These associations are stored in the registration database and in the WIN.INI initialization file. Using file associations allows you to double-click a filename and have the associated Windows-based application automatically execute and load that file.</p>
<p>
In a Visual Basic® application, you can use the Windows application programming interface (API) <b>FindExecutable</b> function to retrieve the name of the executable file that is associated with a specific filename. The <b>Declare</b> statement for the <b>FindExecutable</b> function is as follows (note that it must be typed as a single line of code):</p>
<pre><code>Declare Function FindExecutable Lib "shell.dll" (ByVal lpszFile As String, ByVal 
 &nbsp; lpszDir As String, ByVal lpszResult As String) As Integer
</code></pre>
<p>
The <b>FindExecutable</b> function takes three arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>lpszFile</i></td>
<td width=87%>A string containing the filename that is associated with a specific application. </td>
</tr>
<tr valign=top>
<td width=13%><i>lpszDir</i></td>
<td width=87%>A string containing the path of the default directory to use.</td>
</tr>
<tr valign=top>
<td width=13%><i>lpszResult</i></td>
<td width=87%>A string buffer that will hold the application's name. This buffer should be 128 bytes long.</td>
</tr>
</table><br>
<p>
After executing the <b>FindExecutable</b> function, an integer value will be returned indicating success or failure. If the value returned is greater than 32, the function was successful and <i>lpszResult</i> will contain the full path and filename of the executable application associated with the file. If the value returned is less than 32, the function was not successful. <b>FindExecutable</b> can return the following error codes:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=8%>0</td>
<td width=92%>Insufficient system memory or corrupt program file</td>
</tr>
<tr valign=top>
<td width=8%> 2</td>
<td width=92%>File not found</td>
</tr>
<tr valign=top>
<td width=8%>3</td>
<td width=92%>Path not found</td>
</tr>
<tr valign=top>
<td width=8%>5</td>
<td width=92%>Sharing or protection error</td>
</tr>
<tr valign=top>
<td width=8%>6</td>
<td width=92%>Separate data segments required for each task</td>
</tr>
<tr valign=top>
<td width=8%>8</td>
<td width=92%>Insufficient memory to run application</td>
</tr>
<tr valign=top>
<td width=8%>10</td>
<td width=92%>Windows version is incorrect</td>
</tr>
<tr valign=top>
<td width=8%>11</td>
<td width=92%>Program file is invalid</td>
</tr>
<tr valign=top>
<td width=8%>12</td>
<td width=92%>Program requires a different operating system</td>
</tr>
<tr valign=top>
<td width=8%>13</td>
<td width=92%>Program requires MSDOS 4.0</td>
</tr>
<tr valign=top>
<td width=8%>14</td>
<td width=92%>Program type is unknown</td>
</tr>
<tr valign=top>
<td width=8%>15</td>
<td width=92%>Protected memory mode is not supported</td>
</tr>
<tr valign=top>
<td width=8%>16</td>
<td width=92%>When loading a second instance of a program, invalid use of data segments</td>
</tr>
<tr valign=top>
<td width=8%>19</td>
<td width=92%>Cannot execute a compressed program file</td>
</tr>
<tr valign=top>
<td width=8%>20</td>
<td width=92%>Not a valid dynamic-link library (DLL)</td>
</tr>
<tr valign=top>
<td width=8%>21</td>
<td width=92%>Windows 32-bit extensions is required</td>
</tr>
</table><br>
<h2>Example Program</h2>
<p>
When you run the program below, it will return the name of the Windows-based application associated with the file called README.WRI. This, of course, is the Windows Write applet. 
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statement to the General Declarations section of Form1 (note that the <b>Declare</b> statement should be typed as one single line of code):<pre><code>Declare Function FindExecutable Lib "shell.dll" (ByVal lpszFile As String, ByVal 
 &nbsp; lpszDir As String, ByVal lpszResult As String) As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  Text1.Text = ""
  Dim X As Integer
  Dim FileName As String
  Dim DirName As String
  Dim Result As String
  FileName = "README.WRI"
  DirName = "C:\VB\"
  Result = Space$(128)
  X = FindExecutable(FileName, DirName, Result)
 &nbsp; 
  Text1.Text = Result
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

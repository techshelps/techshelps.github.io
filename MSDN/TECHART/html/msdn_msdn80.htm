<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 80: Drawing Borders Around Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn80"></a></sup>Tip 80: Drawing Borders Around Controls</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
You can draw borders of any width around controls such as Text Boxes to give the control a three-dimensional look. This article explains how to add a border to a control.</p>
<h2>Using a Pen and Brush to Draw Borders</h2>
<p>
Through functions included in the Windows® application programming interface (API), you can draw borders around controls in your Visual Basic® application. The <b>CreatePen</b> function can be used to draw lines (solid, invisible, dotted) and the <b>CreateSolidBrush</b> function can be used to fill areas of an object.</p>
<p>
After you have created a pen and brush to use with the specific object (such as a <b>Text Box</b> control) that you want to draw filled lines around, you need to determine the coordinates of the bounding rectangle around the target object. Next, you must intercept the Windows WM_PAINT message. The WM_PAINT message triggers Visual Basic's Paint event. The message is sent to a window when the window needs to have its client area redrawn. The <b>Message Blaster</b> custom control can be used to process the WM_PAINT message. For information on the <b>Message Blaster</b> custom control, see the reference materials listed at the end of this article. Once the Paint event has been triggered, the control is redrawn with the desired borders around its perimeter.</p>
<h2>Example Program</h2>
<p>
The program below shows how to add a three-dimensional look to a <b>Text Box</b> control. This program draws a filled line across the top and down the right-hand border of the <b>Text Box</b>.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
From Visual Basic's Tools menu, select Custom Controls and add the MSGBLAST.VBX to your Toolbox. Add a <b>Message Blaster</b> control to Form1. MsgBlaster1 is created by default.<br><br></li>
<li>
Add the following <b>Dim</b>, <b>Constant</b>, and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Private</b> <b>Declare</b> statement must be typed as a single line of code):<pre><code>Const PS_SOLID = &amp;H0
Const WM_PAINT = &amp;HF
Private Declare Function DeleteObject Lib "GDI" (ByVal hObject As Integer)
 &nbsp;&nbsp; As Integer
Private Declare Function SelectObject Lib "GDI" (ByVal hDC As Integer, ByVal 
 &nbsp;&nbsp; hObject As Integer) As Integer
Private Declare Function Polygon Lib "GDI" (ByVal hDC As Integer, lpPoints As 
 &nbsp;&nbsp; POINTAPI, ByVal nCount As Integer) As Integer
Private Declare Function CreateSolidBrush Lib "GDI" (ByVal crColor As Long)
 &nbsp;&nbsp; As Integer
Private Declare Function GetDC Lib "User" (ByVal hWnd As Integer) As Integer
Private Declare Function CreatePen Lib "GDI" (ByVal nPenStyle As Integer, ByVal 
 &nbsp;&nbsp; nWidth As Integer, ByVal crColor As Long) As Integer
Dim TX As Integer
Dim TY As Integer
Dim DC_FRM As Integer
Dim PT1() As POINTAPI
Dim PT2() As POINTAPI
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; MsgBlaster1.hWndTarget = Form1.hWnd
 &nbsp;&nbsp; MsgBlaster1.MsgList(0) = WM_PAINT
 &nbsp;&nbsp; MsgBlaster1.MsgPassage(0) = -1
End Sub
</code></pre>
</li>
<li>
Add the following code to the Form_Activate event for Form1:<pre><code>Private Sub Form_Activate()
 &nbsp;&nbsp; TX = Screen.TwipsPerPixelX
 &nbsp;&nbsp; TY = Screen.TwipsPerPixelY
 &nbsp;&nbsp; DC_FRM = GetDC(Form1.hWnd)
 &nbsp;&nbsp; Get_Rect
End Sub
</code></pre>
</li>
<li>
Add the following code to the MsgBlaster1_Message event (note that the Private statement must be typed as a single line of code): <pre><code>Private Sub MsgBlaster1_Message(MsgVal As Integer, wParam As Integer, lParam 
 &nbsp; As Long, ReturnVal As Long)
 &nbsp;&nbsp; Shadow
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>Get_Rect</b>. Add the following code to this procedure:<pre><code>Sub Get_Rect()
 &nbsp;&nbsp; ReDim PT1(6) As POINTAPI
 &nbsp;&nbsp; ReDim PT2(6) As POINTAPI
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(0).X = Text1.Left / TX
 &nbsp;&nbsp; PT1(0).Y = Text1.Top / TY
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(1).X = (Text1.Left) / TX + 2
 &nbsp;&nbsp; PT1(1).Y = (Text1.Top) / TY - 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(2).X = (Text1.Left + Text1.Width) / TX + 2
 &nbsp;&nbsp; PT1(2).Y = (Text1.Top) / TY - 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(3).X = (Text1.Left + Text1.Width) / TX + 2
 &nbsp;&nbsp; PT1(3).Y = (Text1.Top + Text1.Height) / TY - 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(4).X = (Text1.Left + Text1.Width) / TX
 &nbsp;&nbsp; PT1(4).Y = (Text1.Top + Text1.Height) / TY
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PT1(5).X = (Text1.Left + Text1.Width) / TX
 &nbsp;&nbsp; PT1(5).Y = (Text1.Top) / TY
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>Shadow</b>. Add the following code to this procedure:<pre><code>Sub Shadow()
 &nbsp;&nbsp; hbr = CreateSolidBrush(RGB(125, 125, 125))
 &nbsp;&nbsp; hpen = CreatePen(PS_SOLID, 1, RGB(125, 125, 125))
 &nbsp;&nbsp; 
 &nbsp;&nbsp; r = SelectObject(DC_FRM, hbr)
 &nbsp;&nbsp; r = SelectObject(DC_FRM, hpen)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; r = Polygon(DC_FRM, PT1(0), 6)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; r = SelectObject(DC_FRM, rbrush)
 &nbsp;&nbsp; r1 = DeleteObject(r)
 &nbsp;&nbsp; r = SelectObject(DC_FRM, rpen)
 &nbsp;&nbsp; r1 = DeleteObject(r)
End Sub
</code></pre>
</li>
<li>
Add a new module to the project. Module.Bas is created by default.<br><br></li>
<li>
Add the following POINTAPI structure to Module.Bas:<pre><code>Type POINTAPI&nbsp;&nbsp; '4 bytes
 &nbsp;&nbsp; X As Integer
 &nbsp;&nbsp; Y As Integer
End Type
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
"Advanced Programming in Visual Basic 3.0 (Accessing the Windows API)." (MSDN Library Archive, Conferences and Seminar Papers, Tech·Ed, March 1994, Visual Basic)</p>
<p>
"Tips and Tricks for Visual Basic." (MSDN Library Archive, Conferences and Seminar Papers, Tech·Ed, March 1994, Visual Basic)</p>
<p>
"Using MSGBLAST.VBX Control to Process Windows Messages from VB." (MSDN Library, Knowledge Base)</p>
</BODY>
</HTML>

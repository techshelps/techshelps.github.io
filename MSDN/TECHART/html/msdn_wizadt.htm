<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Distribute Your Wizard Using the ADT</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_wizadt"></a>How to Distribute Your Wizard Using the ADT</h1>
<p>
Larry W Jordan Jr.<br>
Derik Harris<br>
Microsoft Corporation</p>
<p>
Created: July 15, 1996<br>
Revised: August 7, 1996 </p>
<p>
<i>Larry W Jordan Jr. is a Senior Microsoft Access support engineer.&nbsp; His main focus is VBA,&nbsp; wizard and add-in development and Visual SourceSafe integration.</i></p>
<p>
<i>Derik Harris is a Senior Microsoft Access content engineer.&nbsp; His primary responsibility is writing, editing, and publishing Microsoft Access related material for the Microsoft Knowledge Base and the Microsoft Web site.</i></p>
<h2>Overview</h2>
<p>
This document describes how to use the Microsoft® Access Developer's Toolkit (ADT) for Window® 95 Setup Wizard to create distribution disks that install an add-in, builder, or wizard along with your custom application. The advantage of this technique is that it saves users from having to run the Add-in Manager utility. The installation of the add-in is simple and automatic.</p>
<h2>Introduction</h2>
<p>
You can install a custom add-in (meaning a custom add-in, wizard, or builder) in two ways: you can use the Add-in Manager utility, or you can use distribution disks created with the ADT. If you want to use the Add-in Manager method, you must include a special table in the add-in file (.mda) called USysRegInfo. The USysRegInfo table must have particular fields and data, which specify the Windows Registry entries that will be created when your add-in is installed. If you want to use the distribution disks (created with the ADT) method, the USysRegInfo table is optional for the add-in file. However, you must provide the same Registry information (stored in the USysRegInfo table) to the ADT Setup Wizard when you create distribution disks.</p>
<p>
This document assumes that you are familiar with creating a USysRegInfo table and understand the functionality provided by the Add-in Manager. For more information about the USysRegInfo table and the Add-in Manager, please see the following article in the Microsoft Knowledge Base:</p>
<p>
Article ID: Q153858<br>
Title: INF: How to Create a USysRegInfo Table for Installing Add-ins</p>
<h2>Running the ADT Setup Wizard</h2>
<p>
This document also assumes you know how to use the ADT Setup Wizard. All of the illustrations in this document use a sample wizard called the Function Template Wizard, which you can download from the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_funcwiz">
</object><a href=JavaScript:alink_1.Click()>“The Function Template Wizard.”</a> Any references to the Setup Wizard's interface are limited to the windows (or screens) which pertain to installing an add-in.</p>
<h3>Identifying Components</h3>
<p>
When you run the ADT Setup Wizard to create distribution disks for an add-in, you must first identify the files or components to install. In the screen titled "Add the files that you want your custom Setup program to copy," you must specify the add-in file (.mda) as the main application file. For example:</p>
<p>
<img src="wizadt_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Add files screen in Setup Wizard</b></p>
<p>
Note that this example lists an optional document file. Also, the Destination Folder is set to $(AppPath), which will cause the add-in to be installed using whatever destination path the user specifies. This is not a problem, because the distribution disks created with the Setup Wizard will still be able to install and register the add-in, regardless of the user-specified destination. This flexibility in the destination path is another advantage over the Add-in Manager, which requires that the add-in file (.mda) be stored in the same folder as the Microsoft Access application file (MsAccess.exe).</p>
<h3>Setting Up Shortcuts</h3>
<p>
Desktop shortcuts for add-ins are usually not necessary, because add-ins are available on the Add-ins submenu (on the Tools menu) in Microsoft Access. However, if you have additional files, such as a document file, you may want to add a shortcut to the document.</p>
<h3>Setting Up Registry Entries</h3>
<p>
The screen titled "Add the Registry values that you want your custom Setup program to create" is an important one for ensuring proper registration of an add-in during installation. The Registry values that you need to specify in the ADT Setup Wizard are the same (or similar to) the ones listed in a USysRegInfo table (used by the Add-in Manager). Therefore, before you run the Setup Wizard, you may want to print a copy of your add-in's USysRegInfo table (assuming it has one). For example:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=53%><b>Subkey</b></td>
<td class=label width=9%><b>Type</b></td>
<td class=label width=14%><b>ValName</b></td>
<td class=label width=24%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=53%>HKEY_LOCAL_MACHINE\Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
<td width=9%>0</td>
<td width=14%></td>
<td width=24%></td>
</tr>
<tr valign=top>
<td width=53%>HKEY_LOCAL_MACHINE\Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
<td width=9%>1</td>
<td width=14%>Expression</td>
<td width=24%>=startFuncTemplate()</td>
</tr>
<tr valign=top>
<td width=53%>HKEY_LOCAL_MACHINE\Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
<td width=9%>1</td>
<td width=14%>Library</td>
<td width=24%>|ACCDIR\Function Template Wizard.mda</td>
</tr>
<tr valign=top>
<td width=53%>HKEY_LOCAL_MACHINE\Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
<td width=9%>1</td>
<td width=14%>Description</td>
<td width=24%>This wizard makes it easy to insert function code templates into your database application.</td>
</tr>
</table><br>
<p>
You can enter the Registry values for your add-in (using the same ones specified in the USysRegInfo table) in the <b>Properties</b> section of the "Add the Registry values" screen. The first value to add is the Expression:</p>
<p>
<img src="wizadt_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Add value Expression in registry values screen in Setup Wizard</b></p>
<p>
The properties of the Expression value are as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Top Level for Key</b></td>
<td class=label width=64%><b>HKEY_LOCAL_MACHINE</b></td>
</tr>
<tr valign=top>
<td width=36%>Path to Key</td>
<td width=64%>Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
</tr>
<tr valign=top>
<td width=36%>Value Name</td>
<td width=64%>Expression</td>
</tr>
<tr valign=top>
<td width=36%>Base Value Data on File</td>
<td width=64%>(none)</td>
</tr>
<tr valign=top>
<td width=36%>Value Data Type</td>
<td width=64%>String</td>
</tr>
<tr valign=top>
<td width=36%>Value Data</td>
<td width=64%> =startFuncTemplate()</td>
</tr>
<tr valign=top>
<td width=36%>Component Name</td>
<td width=64%>Application</td>
</tr>
</table><br>
<p>
The second value to add is the Description:</p>
<p>
<img src="wizadt_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Add value Description in registry values screen in Setup Wizard</b></p>
<p>
The properties of the Description value are as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Top Level for Key</b></td>
<td class=label width=66%><b>HKEY_LOCAL_MACHINE</b></td>
</tr>
<tr valign=top>
<td width=34%>Path to Key</td>
<td width=66%>Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
</tr>
<tr valign=top>
<td width=34%>Value Name</td>
<td width=66%>Description</td>
</tr>
<tr valign=top>
<td width=34%>Base Value Data on File</td>
<td width=66%>(none)</td>
</tr>
<tr valign=top>
<td width=34%>Value Data Type</td>
<td width=66%>String</td>
</tr>
<tr valign=top>
<td width=34%>Value Data</td>
<td width=66%>This add-in &lt;describe the functionality of the add-in&gt;</td>
</tr>
<tr valign=top>
<td width=34%>Component Name</td>
<td width=66%>Application</td>
</tr>
</table><br>
<p>
The third value to add is the Library. This setting is important because it results in the creation of the Registry key that your application will use at run time to locate the add-in. In short, it's the actual path to the add-in file (.mda).</p>
<p>
<img src="wizadt_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Add value Library in registry values screen in Setup Wizard</b></p>
<p>
The properties of the Library in this example are as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Top Level for Key</b></td>
<td class=label width=64%><b>HKEY_LOCAL_MACHINE</b></td>
</tr>
<tr valign=top>
<td width=36%>Path to Key</td>
<td width=64%>Software\Microsoft\Access\7.0\Menu Add-Ins\&amp;Function Template Builder</td>
</tr>
<tr valign=top>
<td width=36%>Value Name</td>
<td width=64%>Library</td>
</tr>
<tr valign=top>
<td width=36%>Base Value Data on File</td>
<td width=64%>&lt;Select from the list of identified components&gt;</td>
</tr>
<tr valign=top>
<td width=36%>Value Data Type</td>
<td width=64%>not applicable</td>
</tr>
<tr valign=top>
<td width=36%>Value Data</td>
<td width=64%>$(FilePath)\&lt;name of the add-in file&gt;</td>
</tr>
<tr valign=top>
<td width=36%>Component Name</td>
<td width=64%>Application</td>
</tr>
</table><br>
<p>
When you set these properties, you must enter the path and file name of your add-in in the Value Data box. The ADT Setup Wizard can fill in this box for you automatically if you select your add-in from the "Base Value Data on File" box. If you choose to leave the "Base Value Data on File" box blank, you must type the path and file name of your add-in in the Value Data box. To avoid typing errors, it's easier to set the Value Data property by choosing your add-in file from the "Base Value Data on File" box.</p>
<p>
When you set the Value Data property, you can use different keywords as an "inherited" destination path. For example:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Option</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>$(AppPath)</td>
<td width=75%>Folder where your application is installed.</td>
</tr>
<tr valign=top>
<td width=25%>$(WinPath)</td>
<td width=75%>Folder where Windows is installed.</td>
</tr>
<tr valign=top>
<td width=25%>$(WinSysPath)</td>
<td width=75%>System subfolder of the Windows program folder.</td>
</tr>
<tr valign=top>
<td width=25%>$(FilePath)</td>
<td width=75%>Folder where the file you specified is installed.</td>
</tr>
<tr valign=top>
<td width=25%>$(WorkgroupFile)</td>
<td width=75%>If your custom Setup program installs a Microsoft Access workgroup information (.mdw) file, the folder where the workgroup information file is installed.</td>
</tr>
</table><br>
<h3>Finishing the Setup Wizard</h3>
<p>
You can proceed through the rest of the wizard and set the remaining self-explanatory options. Note that an add-in does not require additional utilities, such as the run-time or workgroup administrator; however, you can include these options if you want.</p>
<h2>Conclusion</h2>
<p>
Using the ADT Setup Wizard to create disks for installing and registering an add-in has two advantages. First, it ensures that the add-in is registered correctly, regardless of the user-selected destination path. Second, it provides users with a simple, automatic way of installing an add-in.</p>
</BODY>
</HTML>

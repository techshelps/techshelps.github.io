<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the Standard OLE Types Object Library: StdType 1.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_mapstole"></a></sup>Mapping the Standard OLE Types Object Library: StdType 1.0</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
October 11, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4486">
</OBJECT><a href="javascript:sample1.Click()">Click here for a diagram of the Standard OLE Types Object Library in various graphics formats.</a></p>
<h2>Abstract</h2>
<p>
This article consists primarily of a graphic map of the Standard OLE Types Object Library (<b>StdType</b>), showing its properties, methods, and objects. This object allows faster and less resource-intensive manipulation of pictures and control fonts. Visual C ++™ and products that contain Visual Basic® for Applications can access the Standard OLE Types object.</p>
<h2>The Standard OLE Types Object</h2>
<p>
The Standard OLE Types Object Library enables the developer to manipulate pictures and fonts. These types allow manipulation of fonts and pictures independent of forms and controls.</p>
<p>
The Standard OLE Types object (<b>StdType</b>) is accessible from Visual C++™ version 4.0 and many products that contain Visual Basic® for Applications, including Microsoft® Excel version 5.0 and higher, Microsoft Access 95, Visual Basic version 4.0, and Microsoft Project. For further information on using this object, see the documentation for these products, and search the Development Library CD. A good starting point is the Visual Basic 4.0 Help file.</p>
<p>
Figure 1 shows the relationship between objects as described by the Object Viewer and online Help files. A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with the object: I just post the appropriate map on my wall for quick reference, which is a lot faster than clicking objects in a Help file one by one to discover their properties and methods.</p>
<p>
Because Figure 1 is difficult to read online, I have included the two most common graphics formats—encapsulated PostScript™ (.EPS) and Windows® metafile (.WMF)—as well as a copy of my original Shapeware® Visio™ version 4.0 file (.VSD). The first two formats can be printed across multiple pages using any of the commercial graphics applications—such as Adobe™ PageMaker™, Corel® Draw, or Microsoft Publisher—or using Microsoft Excel. The original Visio file is included for those who have a copy of Visio and wish to modify the diagram easily. </p>
<p>
<img src="mapstole_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Standard OLE Types object</b></p>
<h3>Object Definitions</h3>
<p>
The objects and collections in Figure 1 are defined in Table 1. The objects are listed in the same sequence as they appear in the map. </p>
<p class=label>
<b>Table 1. Object and Collection Definitions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>&nbsp;Object or Collection</b></td>
<td class=label width=68%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=32%><b>Font </b>object<br>
<b>StdFont</b> object [for <b>New</b>]</td>
<td width=68%>These objects contain information needed to format text for display in the interface of an application or for printed output.</td>
</tr>
<tr valign=top>
<td width=32%><b>Picture </b>object<br>
<b>StdPicture</b> object [for <b>New</b>]</td>
<td width=68%>These objects manipulate bitmaps, icons, and metafiles.</td>
</tr>
</table><br>
<h2>A Sample</h2>
<p>
This object library has some cool uses that are not obvious. The following shows how it is possible to change all the fonts on a form with a single line of code from an OLE Automation controller application. I placed the code in a class module to illustrate how exposing a <b>Font</b> property as part of a class saves writing each individual font characteristic as a separate property.</p>
<pre><code>'In Class1.Cls 
Dim ThisFormFont As New StdType.StdFont

Private Sub Class_Initialize()
ThisForm1.Visible = True
On Error Resume Next 'In case no font in control
For i% = 0 To ThisForm1.Controls.Count
 &nbsp; Set ThisForm1.Controls(i%).Font = ThisFormFont
 &nbsp; 'This causes ALL control fonts to point to ThisFormFont.
Next i%
On Error GoTo 0
End Sub

Public Property Get Font()
Set Font = ThisFormFont
End Property
</code></pre>
<p>
This enables any OLE Automation controller to change all of the fonts in one command, as shown below.</p>
<pre><code>'CONTROLLER application
Dim x As New Project1.Class1
Sub ChangeFormToItalic()
Dim AFont As Font
Set AFont = x.Font 'This causes Afont to point to X.Font.
AFont.Italic = True
End Sub
</code></pre>
<h2>Bibliography</h2>
<p>
Lassesen, Ken. <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> October 1995. (MSDN Library, Technical Articles)</p>
<p>
"Visual Basic Reference" (VB.HLP) is installed with Visual Basic version 4.0. </p>
</BODY>
</HTML>

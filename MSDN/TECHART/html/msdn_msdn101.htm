<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 101: Using the Built-In Windows Icons</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn101"></a></sup>Tip 101: Using the Built-In Windows Icons</h1>
<p>
May 29, 1995</p>
<h2>Abstract</h2>
<p>
There are several icons built into the Windows® operating system that are used by Windows when displaying message boxes. This article explains how to use the built-in icons in your own Visual Basic® applications.</p>
<h2>Displaying the Built-In Windows Icons</h2>
<p>
In a Visual Basic® application, you can use the icons built into the Windows® operating system. These include the hand, exclamation point, question mark, asterisk, and application icons. The CONSTANT.TXT file defines these as follows:</p>
<pre><code>Const IDI_APPLICATION = 32512&amp;
Const IDI_HAND = 32513&amp;
Const IDI_QUESTION = 32514&amp;
Const IDI_EXCLAMATION = 32515&amp;
Const IDI_ASTERISK = 32516&amp;
</code></pre>
<p>
Before you can use one of these icons in your Visual Basic application, you must load the icon using the Windows application programming interface (API) <b>LoadIcon</b> function. This function loads a specified icon into the device context. In the example program below, we want to display the icon in a <b>Picture Box</b> control. Therefore, we must first retrieve a device context for the <b>Picture Box</b> control.</p>
<p>
To retrieve a device context for a window, you use the Windows application programming interface (API) <b>GetWindowDC</b> function, as follows:</p>
<pre><code>Private Declare Function GetWindowDC Lib "User" (ByVal hWnd As Integer) 
 &nbsp; As Integer
</code></pre>
<p>
(Note that this statement must be typed as a single line of code.)</p>
<p>
This function requires only one argument—an integer value containing the window's handle. The device context's handle is returned as an integer value or, if the function was not successful, a value of zero is returned.</p>
<p>
When you have finished using the device context you must remember to release the device context. This can be done by calling the <b>ReleaseDC</b> function, passing it the handle of the device context that you want to release.</p>
<p>
After retrieving the device context, you can call the <b>LoadIcon</b> function to display the specified icon in the device context. Because this is a built-in Windows icon, we set the first argument to a value of zero. The second argument to the <b>LoadIcon</b> function is a constant value telling the function which icon you want to load.</p>
<h2>Example Program</h2>
<p>
This program shows how to use the built-in icons used by the Windows operating system. This program displays the exclamation icon in the <b>Picture Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function DrawIcon Lib "User" (ByVal hDC As Integer, ByVal X 
 &nbsp; As Integer, ByVal y As Integer, ByVal hIcon As Integer) As Integer
Private Declare Function LoadIcon Lib "User" (ByVal hInstance As Integer, ByVal 
 &nbsp; lpIconName As Any) As Integer
Private Declare Function GetWindowDC Lib "User" (ByVal hWnd As Integer) As 
 &nbsp; Integer
Private Declare Function ReleaseDC Lib "User" (ByVal hWnd As Integer, ByVal hDC 
 &nbsp; As Integer) As Integer
Const IDI_EXCLAMATION = 32515&amp;
</code></pre>
</li>
<li>
Add a <b>Picture Box</b> control to Form1. Picture1 is created by default. Set its <b>AutoRedraw</b> property to True.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim hDCCur As Long
 &nbsp;&nbsp; Dim hIcon As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; hDCCur = GetWindowDC(Picture1.hWnd)
 &nbsp;&nbsp; hIcon = LoadIcon(0, IDI_EXCLAMATION)
 &nbsp;&nbsp; X = DrawIcon(hDCCur, 0, 0, hIcon)
 &nbsp;&nbsp; Call ReleaseDC(Picture1.hWnd, hDCCur)
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q88944. “How to Extract a Windows Program Icon—Running or Not.”</p>
<p>
“Specifying a Class Icon” and “Using Built-In Icons” (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Guide to Programming)</p>
</BODY>
</HTML>

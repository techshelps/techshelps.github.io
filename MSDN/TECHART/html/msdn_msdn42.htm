<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 42: Using Bitmaps to Create Custom Cursors</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn42"></a></sup>Tip 42: Using Bitmaps to Create Custom Cursors</h1>
<p>
Created: April 1, 1995</p>
<h2>Abstract</h2>
<p>
The ability to change the appearance of the default Windows® icon can add a great deal of flexibility and user-friendliness to your Visual Basic® application. Visual Basic provides twelve different cursor shapes to choose from. For example, the hourglass cursor is generally used to tell the user of your application that some type of lengthy operation is taking place. When that operation has been completed, the cursor reverts back to its normal pointer shape. This article explains how you can create your own custom cursor shapes.</p>
<h2>Designing Cursors in Visual Basic</h2>
<p>
In simple terms, a cursor is a bitmap image. The bitmap must be 32 x 32 pixels in size. Each cursor, or icon, consists of two separate bitmap images:
<ul type=disc>
<li>
The XOR bitmap is the first bitmap. Its image is combined with the display's image by using the exclusive OR operator.<br><br></li>
<li>
The AND bitmap is the second bitmap. Its image consists of an AND mask that is combined with the XORed bitmap. Used in this way, the AND and XOR operators create the icon's new image.</li>
</ul>
<p>
In Visual Basic, you can use the Windows® <b>CreateCursor </b>function to create a completely new and different cursor shape. To use this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your program:</p>
<pre><code>Declare Function CreateCursor Lib "User" (ByVal hInstance As Integer, ByVal 
 &nbsp; nXhotspot As Integer, ByVal nYhotspot As Integer, ByVal nWidth As Integer, 
 &nbsp; ByVal nHeight As Integer, lpANDbitPlane As Integer, lpXORbitPlan As Integer) 
 &nbsp; As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>CreateCursor</b> function takes six arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=24%><i>hInstance</i></td>
<td width=76%>The application program's handle. This is the instance of the application that will own the newly created cursor.</td>
</tr>
<tr valign=top>
<td width=24%><i>nXhotspot, nYhotspot</i></td>
<td width=76%>These integer values must be set to the X and Y coordinates of the cursor's location.</td>
</tr>
<tr valign=top>
<td width=24%><i>nWidth</i></td>
<td width=76%>The width (in pixels) of the cursor image.</td>
</tr>
<tr valign=top>
<td width=24%><i>nHeight</i></td>
<td width=76%>The height (in pixels) of the cursor image.</td>
</tr>
<tr valign=top>
<td width=24%><i>lpANDbitPlane</i></td>
<td width=76%>This is a string or long value containing a pointer to the AND bitmap's data.</td>
</tr>
<tr valign=top>
<td width=24%><i>lpXORbitPlane</i></td>
<td width=76%>This is a string or long value containing a pointer to the XOR bitmap's data.</td>
</tr>
</table><br>
<p>
The <b>CreateCursor</b> function returns an integer value that identifies the cursor. If this value is zero, the function was unable to create the new cursor.</p>
<p>
Once you have created the cursor, you need to tell Windows to use the new cursor by calling the <b>GetClassWord</b> and <b>SetClassWord</b> functions. Call the <b>GetClassWord</b> function first so that you can save the cursor's handle. Then you can restore the original cursor's image or set the cursor's image to a new one by calling the <b>SetClassWord</b> function.</p>
<p>
The <b>Declare</b> statements for the <b>GetClassWord</b> and <b>SetClassWord</b> functions are:</p>
<pre><code>Declare Function GetClassWord Lib "User" (ByVal hWnd As Integer, ByVal nIndex
 &nbsp; As Integer) As Integer

Declare Function SetClassWord Lib "User" (ByVal hWnd As Integer, ByVal nIndex
 &nbsp; As Integer, ByVal wNewWord As Integer) As Integer
</code></pre>
<p>
Note that each <b>Declare</b> statement must be typed as one line of text.</p>
<p>
To retrieve the default cursor's handle, you pass two arguments to the <b>GetClassWord </b>function: the handle of the window that owns the cursor, and a value specifying the type of information you want to retrieve. In this case, we would specify the GCW_HCURSOR constant (the cursor's default handle). In our application, we save the returned handle to an integer variable so that we can use it again later in the program.</p>
<p>
The <b>SetClassWord </b>function takes an additional argument: the new value for the class information. The class information, of course, refers to the cursor's new image.</p>
<p>
When the <b>SetClassWord </b>function is executed, the new cursor is called into action. In our Visual Basic program, we can restore the cursor to its previous image by simply calling the <b>SetClassWord</b> function with the original cursor's handle (which is why we saved this handle to a variable earlier in the program).</p>
<h2>Example Program</h2>
<p>
The following Visual Basic program displays a different cursor image on the screen. In this example, the <i>XORBitPlane</i> and <i>ANDBitPlane</i> values are used to manipulate the cursor's current image, thereby creating a new cursor. You can create your own custom cursors in Visual Basic by modifying the original cursor as this example program does.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Change Cursor".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
  Dim X As Integer
  Dim nWidth As Integer
  Dim nHeight As Integer
  Dim hInstance As Integer
  Dim hCursor As Integer
  Dim OldCursor As Integer&nbsp;&nbsp;&nbsp; 
  ReDim ANDbitPlane%(100), XORbitPlane%(100)
  For C% = 0 To 100
 &nbsp;&nbsp;&nbsp; ANDbitPlane%(C%) = 63
 &nbsp;&nbsp;&nbsp; XORbitPlane%(C%) = 255
  Next C%

  nWidth = 32
  nHeight = 32
  hInstance = GetModuleHandle("VB.EXE")
  hCursor = CreateCursor(hInstance, 0, 0, nWidth, nHeight, ANDbitPlane%(0),
 &nbsp;&nbsp;&nbsp; XORbitPlane%(0))

  OldCursor = GetClassWord(Form1.hWnd, -12)
  X = SetClassWord(Form1.hWnd, -12, hCursor)
End Sub
</code></pre>
</li>
<li>
Add a second Command Button control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Restore Cursor".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Sub Command2_Click()
  X = SetClassWord(Form1.hWnd, -12, OldCursor)
  Dummy% = DeleteObject(hCursor)
End Sub
</code></pre>
</li>
<li>
Add the following <b>Declare</b> statements to the general declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Declare Function CreateCursor Lib "User" (ByVal hInstance As Integer, ByVal 
 &nbsp; nXhotspot As Integer, ByVal nYhotspot As Integer, ByVal nWidth As Integer,
 &nbsp; ByVal nHeight As Integer, lpANDbitPlane As Integer, lpXORbitPlan As Integer)
 &nbsp; As Integer

Declare Function DeleteObject Lib "GDI" (ByVal hObject As Integer) As Integer

Declare Function GetClassWord Lib "User" (ByVal hWnd As Integer, ByVal nIndex
 &nbsp; As Integer) As Integer

Declare Function GetModuleHandle Lib "Kernel" (ByVal lpModuleName As String)
 &nbsp; As Integer

Declare Function SetClassWord Lib "User" (ByVal hWnd As Integer, ByVal nIndex 
 &nbsp; As Integer, ByVal wNewWord As Integer) As Integer

Declare Function SetCursor Lib "User" (ByVal hCursor As Integer) As Integer
</code></pre>
</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 156: Adding New Icons to the Windows 95 Taskbar</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn156"></a></sup>Tip 156: Adding New Icons to the Windows 95 Taskbar</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® 95 taskbar allows you to quickly switch between applications, launch other applications by using the Start button, and perform many other similar tasks. When developing your own Microsoft Visual Basic® applications, you can also add new icons (that is, programs) to the Windows 95 taskbar. This article explains how you can add icons to and remove icons from the notification area of the Windows 95 taskbar.</p>
<h2>Using the Shell_NotifyIcon Function to Add Taskbar Icons</h2>
<p>
On a typical desktop in the Microsoft® Windows® 95 operating system, you can see that the Clock applet is running and that there are no additional icons on the taskbar—you see only the Clock applet icon. After you run the example program described in this article, the new icon is added to the taskbar. When the mouse pointer is placed on the taskbar, you can see that the new icon has been added to the taskbar.</p>
<p>
It's easy to add a new icon to the taskbar. The example program below shows how to add a new icon to the taskbar, perform functions relevant to that new icon, and then remove the icon from the taskbar. All this functionality is accomplished by using the <b>Shell_NotifyIcon</b> function. You can use the <b>Shell_NotifyIcon</b> function in a Visual Basic application to modify the Windows 95 taskbar. To use this function, you must include the following <b>Declare</b> statement in the General Declarations section of your form:</p>
<pre><code>Declare Function Shell_NotifyIcon Lib "shell32.dll" Alias "Shell_NotifyIconA" 
 &nbsp; (ByVal dwMessage As Long, lpData As NOTIFYICONDATA) As Long
</code></pre>
<p>
The <b>Shell_NotifyIcon</b> function requires only two arguments. The first argument is one of the following three messages you want to send to the Windows 95 taskbar:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=18%>NIM_ADD</td>
<td width=82%>Add a new icon to the taskbar.</td>
</tr>
<tr valign=top>
<td width=18%>NIM_DELETE</td>
<td width=82%>Remove (delete) an icon from the taskbar.</td>
</tr>
<tr valign=top>
<td width=18%>NIM_MODIFY</td>
<td width=82%>Modify an existing icon on the taskbar.</td>
</tr>
</table><br>
<p>
In each case, either a True value is returned if the message was executed successfully or a False value is returned if an error occurred in the attempt to process the message.</p>
<p>
The second argument required by the <b>Shell_NotifyIcon</b> function is the address of a <b>NOTIFYICONDATA</b> structure. This structure contains the information used by the <b>Shell_NotifyIcon</b> function to modify the taskbar as specified. This structure must be defined as follows:</p>
<pre><code>Type NOTIFYICONDATA
 &nbsp;&nbsp; cbSize As Long
 &nbsp;&nbsp; hwnd As Long
 &nbsp;&nbsp; uID As Long
 &nbsp;&nbsp; uFlags As Long
 &nbsp;&nbsp; uCallbackMessage As Long
 &nbsp;&nbsp; hIcon As Long
 &nbsp;&nbsp; szTip As String * pnTOOLTIP_SZ
End Type
</code></pre>
<p>
where:</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td width=21%><i>cbSize</i></td>
<td colspan=3 width=74%>The size of the <b>NOTIFYICONDATA</b> structure itself.</td>
<td width=5%></td>
</tr>
<tr valign=top>
<td width=21%><i>hWnd</i></td>
<td colspan=3 width=74%>The handle of the window that will receive the notification messages associated with an icon on the taskbar.</td>
<td width=5%></td>
</tr>
<tr valign=top>
<td width=21%><i>wID</i></td>
<td colspan=3 width=74%>An application-defined identifier of the taskbar icon.</td>
<td width=5%></td>
</tr>
<tr valign=top>
<td width=21%><i>uFlags</i></td>
<td colspan=3 width=74%>An array of flags indicating which of the other structure members contain valid data. The <i>uFlags</i> argument can be a combination of the following:</td>
<td width=5%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=17%>NIF_ICON</td>
<td colspan=3 width=62%><i>hIcon</i> is valid.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=17%>NIF_MESSAGE</td>
<td colspan=3 width=62%><i>uCallbackMessage</i> is valid.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=17%>NIF_TIP</td>
<td colspan=3 width=62%><i>szTip</i> is valid.</td>
</tr>
<tr valign=top>
<td width=21%><i>uCallbackMessage</i></td>
<td colspan=2 width=45%>An application-defined message identifier.</td>
<td colspan=2 width=34%></td>
</tr>
</table><br>
<p>
When a mouse event occurs over the icon, the identifier is used for notification messages sent to the <i>hWnd</i> window:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=23%><i>hIcon</i></td>
<td width=77%>The handle of the taskbar icon</td>
</tr>
<tr valign=top>
<td width=23%><i>szTip</i></td>
<td width=77%>The text for the taskbar icon's tooltip</td>
</tr>
</table><br>
<p>
Note that the <b>Shell_NotifyIcon</b> function is used to send a particular message to the system. The individual message you send to the taskbar adds a new icon, deletes an existing icon, or modifies an existing icon.</p>
<p>
You can add a new icon to the Windows 95 taskbar by sending a NIM_ADD message. The newly added icon appears on either the right side or the bottom of the toolbar. If the Show Clock option of the taskbar is selected, the new taskbar icon is set to the immediate left of the Clock applet icon. Each time you add a new icon to the taskbar, any and all existing taskbar icons are shifted one position to the left.</p>
<p>
The <b>NOTIFYICONDATA</b> structure must be used when adding, deleting, or modifying icons on the taskbar. This structure contains the information necessary for each particular message you want to send. When adding new icons to the taskbar, for example, the <b>NOTIFYICONDATA</b> structure must contain the handle of the new icon, the identifier of the icon, and optionally, the text for the icon's tooltip. In addition, if your application needs to receive mouse messages for the taskbar icon, then the <b>NOTIFYICONDATA</b> structure must also include the identifier of the callback message that should be sent to your application's window.</p>
<p>
To process the incoming callback messages, however, you must use a subclassing control such as <b>Message Blaster</b>. This third-party control will allow your Visual Basic application to detect when the system has received a mouse message for your taskbar icon. The <i>wParam</i> argument contains the identifier of the taskbar icon that received the mouse message, and the <i>lParam</i> argument contains the actual message. This functionality allows you to insert several icons on the taskbar from within a single Visual Basic application. However, it is highly recommended that you not go overboard when adding these new icons to the taskbar.</p>
<p>
To add a new icon to the taskbar, you need to store information about the icon in the <b>NOTIFYICONDATA</b> structure. In the example program below, you use the <b>CreateNewIcon</b> function to set the values in the <b>NOTIFYICONDATA</b> structure for your new taskbar icon. This function is shown here:</p>
<pre><code>Sub CreateNewIcon(OurWindow As Object, OurMsg As Long, OurToolTip As String)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; NewIcon.uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
 &nbsp;&nbsp; NewIcon.szTip = OurToolTip &amp; Chr$(0)
 &nbsp;&nbsp; NewIcon.hWnd = OurWindow.hWnd
 &nbsp;&nbsp; NewIcon.uID = OurWindow.Icon
 &nbsp;&nbsp; NewIcon.uCallbackMessage = OurMsg
 &nbsp;&nbsp; NewIcon.hIcon = OurWindow.Icon
 &nbsp;&nbsp; NewIcon.cbSize = Len(NewIcon)
 &nbsp;&nbsp; X = Shell_NotifyIcon(NIM_ADD, NewIcon)
End Sub
</code></pre>
<p>
In the routine shown above, notice that several steps have been taken before you actually run the <b>Shell_NotifyIcon</b> function. The <b>cbSize</b> field of the <b>NOTIFYICONDATA</b> structure is set to the actual size of the structure. This is <i>not </i>an optional step. You also tell your application that you want to capture and later process all mouse messages received by the taskbar icon of your application. In addition, you tell the <b>Shell_NotifyIcon</b> function that you want to use the icon specified in the form's <b>Icon</b> property (this is the icon you will see on the taskbar when the example program is run). You also tell <b>Shell_NotifyIcon</b> which messages you need to process—in this case, you want your icon to display a tooltip when the mouse pointer is moved over the icon, you want the icon itself to be displayed on the taskbar, and you want to process incoming mouse messages.</p>
<p>
Alternatively, when you want to remove an icon from the taskbar, you send a NIM_DELETE message to your window. You do not need to modify the contents of the <b>NOTIFYICONDATA</b> structure because that structure already contains the data used by the program to add the new icon to the taskbar. After the NIM_DELETE message is processed by the system, the icon is removed from the taskbar.</p>
<h2>Example Program</h2>
<p>
This program shows how to add a new icon to the Windows 95 taskbar. In addition, it shows how to remove the newly added icon and to receive callback messages, using the <b>Message Blaster</b> custom control, from the new taskbar icon.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Set the following properties to the specified values for Form1:<p class=tl>
<b>BorderStyle</b>: 2-Sizable<br>
<b>MaxButton</b>: True<br>
<b>MinButton</b>: True<br>
<b>ShowInTaskBar</b>: True<br>
<b>WhatsThisHelp</b>: False<br>
<b>WindowState</b>: 0-Normal</P><p class=tl>
Select a new icon for this form (in the <b>Icon</b> property) to any icon that you want. This is the icon that appears on the taskbar when you run the example program.</P></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; MessageBlaster1.hWndTarget = Me.hwnd
 &nbsp;&nbsp; MessageBlaster1.AddMessage WM_USER, POSTPROCESS
 &nbsp;&nbsp; CreateNewIcon Me, WM_USER, "My Little App"
End Sub
</code></pre>
</li>
<li>
Add a <b>Message Blaster</b> control to Form1. MessageBlaster1 is created by default.<br><br></li>
<li>
Add the following code to the MessageBlaster1_Message event (note that the <b>Private</b> statement must be typed as a single line of code):<pre><code>Private Sub MessageBlaster1_Message(ByVal hwnd As Long, ByVal Msg As Long, 
 &nbsp; wParam As Long, lParam As Long, nPassage As Integer, lReturnValue As Long)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Select Case lParam
 &nbsp;&nbsp; Case WM_LBUTTONDOWN
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "My Little App is running!", , App.Title
 &nbsp;&nbsp; Case WM_RBUTTONDOWN
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PopupMenu mnuMain, 0, , , mnuClose
 &nbsp;&nbsp; Case WM_USER + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End
 &nbsp;&nbsp; End Select
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Tools menu, select Menu Editor. Create a menu with the following items:<p class=tl>
<b>Caption: </b>&amp;Main<br>
<b>Name: </b>mnuMain</P><p class=tl>
<b>Caption:</b> &amp;Date<br>
<b>Name:</b> mnuDate</P><p class=tl>
<b>Caption: </b>&amp;Time<br>
<b>Name: </b>mnuTime</P><p class=tl>
<b>Caption: </b>&amp;Close<br>
<b>Name:</b> mnuClose</P></li>
<li>
Add the following code to the Click event for mnuClose:<pre><code>Private Sub mnuClose_Click()
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; DeleteOldIcon
 &nbsp;&nbsp; SendMessage hwnd, WM_USER, 0, WM_USER + 1
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event for mnuDate:<pre><code>Private Sub mnuDate_Click()
 &nbsp;&nbsp; MsgBox "Today is: " &amp; Date, , App.Title
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event mnuTime:<pre><code>Private Sub mnuTime_Click()
 &nbsp;&nbsp; MsgBox "Time is: " &amp; Time, , App.Title
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Insert menu, select Module to create a new module. Module1.Bas is created by default.<br><br></li>
<li>
Add the following code to Module1.Bas (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Option Explicit

Declare Function Shell_NotifyIcon Lib "shell32.dll" Alias "Shell_NotifyIconA" 
 &nbsp; (ByVal dwMessage As Long, lpData As NOTIFYICONDATA) As Long
Public Const NIF_ICON = &amp;H2
Public Const NIF_MESSAGE = &amp;H1
Public Const NIF_TIP = &amp;H4
Public Const NIM_ADD = &amp;H0
Public Const NIM_DELETE = &amp;H2
Public Const MyToolTip As Integer = 64

Type NOTIFYICONDATA
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbSize As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWnd As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uID As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uFlags As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uCallbackMessage As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hIcon As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szTip As String * MyToolTip
End Type

Public NewIcon As NOTIFYICONDATA
</code></pre>
</li>
<li>
Create a new subroutine called <b>CreateNewIcon</b>. Add the following code to this subroutine:<pre><code>Sub CreateNewIcon(OurWindow As Object, OurMsg As Long, OurToolTip As String)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; NewIcon.uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
 &nbsp;&nbsp; NewIcon.szTip = OurToolTip &amp; Chr$(0)
 &nbsp;&nbsp; NewIcon.hWnd = OurWindow.hWnd
 &nbsp;&nbsp; NewIcon.uID = OurWindow.Icon
 &nbsp;&nbsp; NewIcon.uCallbackMessage = OurMsg
 &nbsp;&nbsp; NewIcon.hIcon = OurWindow.Icon
 &nbsp;&nbsp; NewIcon.cbSize = Len(NewIcon)
 &nbsp;&nbsp; X = Shell_NotifyIcon(NIM_ADD, NewIcon)
End Sub
</code></pre>
</li>
<li>
Create a new subroutine called <b>DeleteIcon</b>. Add the following code to this subroutine:<pre><code>Sub DeleteOldIcon()
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; X = Shell_NotifyIcon(NIM_DELETE, NewIcon)
End Sub
</code></pre>
</li>
<li>
Create a new routine called <b>Main</b>. Add the following code to this function:<pre><code>Sub Main()
 &nbsp;&nbsp; Load Form1
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Tools menu, select Options. From the Options windows, select Project. Change the Startup Form to Sub Main. Click OK to save the change to the project.</li>
</ol>
<p>
Run the example program by pressing f5. Notice the icon for the program is on the taskbar. Move the cursor over this taskbar icon and the tooltip text "My Little App" appears. When you use the left mouse button to click the icon, a message box appears that tells you "My Little App is running!". Click the OK command button. When you click the right mouse button on the icon, a pop-up menu appears, listing three options: display the current date, display the current time, and close the application. Note that when you close the application, the icon is removed from the Windows 95 taskbar.</p>
</BODY>
</HTML>

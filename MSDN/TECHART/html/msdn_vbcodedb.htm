<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Using Visual Basic for Applications Code Databases</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_vbcodedb"></a></sup>Creating and Using Visual Basic for Applications Code Databases </h1>
<p>
Microsoft Corporation</p>
<p>
July 1996</p>
<h2>Overview</h2>
<p>
The release of Microsoft® Access version 7.0 afforded new functionality to application development in the form of reusable database code repositories. These databases are similar to other Microsoft Access application databases, except that they contain referenced objects. </p>
<p>
A new model for accessing external objects exists by using the References option on the Tools menu. When you design a code database, you specifically expose the functions through the use of the Public keyword in all routines you want to access externally. </p>
<p>
Take, for example, a function that you use in all of your database applications. Here's one that returns the file-name portion of an absolute path: </p>
<pre><code>&nbsp;&nbsp;&nbsp;Public Function ParseFileName(strFName As String) As String
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo ParseFileName_Err
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim strChar As String
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim strTemp As String
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim i As Integer
 &nbsp; 
 &nbsp;&nbsp; ' Get the file name portion of the passed string
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For i = Len(strFName) To 1 Step -1&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strChar = Mid(strFName, i, 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If strChar = Chr$(92) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ParseFileName = strTemp
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ParseFileName_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strTemp = strChar &amp; strTemp&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next i
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; ParseFileName_End:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; ParseFileName_Err:
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Err.Description, vbCritical, "modMyReusableCode.ParseFileName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume ParseFileName_End
 &nbsp; 
 &nbsp;&nbsp; End Function
</code></pre>
<h3>How To Create the Code Database</h3>
<ol>
<li>
Create a new blank database and name it MyCode.mdb. <br><br></li>
<li>
Create a new module. <br><br></li>
<li>
Create a new function exactly as shown in the previous code.<br><br></li>
<li>
Save and name the module <b>modMyReusableCode</b>. <br><br></li>
<li>
Re-open the <b>modMyReusableCode</b> in Design view.<br><br></li>
<li>
On the <b>Run</b> menu, click <b>Compile All Modules</b>.<br><br></li>
<li>
Close the module. <br><br></li>
<li>
Close the database. </li>
</ol>
<p>
Now you have created the needed components to reuse your functions. Let's use the <b>ParseFileName()</b> function from another database. 
<ol>
<li>
Open the sample database Northwind.mdb (you should have installed this at setup). <br><br></li>
<li>
Create a new, blank form. <br><br></li>
<li>
In the <b>Toolbox</b>, click to clear the <b>Wizard</b> option. <br><br></li>
<li>
Add a button to the form. <br><br></li>
<li>
Add the following code to the <b>OnClick</b> event of the button. <pre><code>Private Sub Command0_Click()
On Error GoTo Command0_Click_Err
MsgBox CurrentDb.Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
MsgBox ParseFileName(CurrentDb.Name)
Command0_Click_End:
Exit Sub
Command0_Click_Err:
MsgBox Err.Description, vbInformation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Resume Command0_Click_End&nbsp;&nbsp;&nbsp; 
End Sub
</code></pre>
</li>
<li>
On the <b>Tools</b> menu, click <b>References</b>. <br><br></li>
<li>
In the <b>Add Reference</b> dialog box, click the <b>Browse</b> button, and click the MyCode.mdb database containing the <b>ParseFileName</b> function. <br><br></li>
<li>
Ensure that the database appears under <b>Available References</b> and that it is checked. <br><br></li>
<li>
Close and save the form as Form1. <br><br></li>
<li>
Open the form. <br><br></li>
<li>
Click the button. Note that the following message boxes will appear in succession:<pre><code>c:\MSOffice\Access\Samples\Northwind.mdb 
Northwind.mdb 
</code></pre>
</li>
</ol>
<p>
The first message box reflects the full path, and the second shows the database name only after passing through the use of the <b>ParseFileName()</b> function. </p>
<h4>A more advanced example</h4>
<p>
The other objects in a referenced database, such as the forms and reports, may be accessed from the calling database, but the context may not always be applicable to the current database application. One useful aspect of the repository database concept is to create objects that you use over and over and bring them into the current database for customization. The next example takes a basic form design, in this case a company splash dialog, and imports the object into the current database.
<ol>
<li>
Open the MyCode.mdb database. <br><br></li>
<li>
Create a new, blank form. <br><br></li>
<li>
Save the form and name it <b>frmMySplashForm</b>. <br><br></li>
<li>
Open the <b>modMyReusableCode</b> in Design view. <br><br></li>
<li>
Create the function shown below. <pre><code>&nbsp;&nbsp;&nbsp;Public Function GetMySplashForm(strDbName As String, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Optional strNewName As Variant) _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Boolean
 &nbsp; On Error GoTo GetMySplashForm_Err
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Export back the splash form to caller database.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCmd.CopyObject strDbName, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IIf(IsMissing(strNewName), "frmMySplashForm", strNewName), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acForm, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "frmMySplashForm"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetMySplashForm = True
 &nbsp;&nbsp; GetMySplashForm_End:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; GetMySplashForm_Err:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Err.Description, vbCritical, "modMyReusableCode.GetMySplashForm"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume GetMySplashForm_End
 &nbsp;&nbsp; End Function
</code></pre>
</li>
<li>
On the <b>Run</b> menu, click <b>Compile All Modules</b>. <br><br></li>
<li>
Close the module. <br><br></li>
<li>
Close the database. <br><br></li>
<li>
Open the sample database Northwind.mdb (in shared mode). <br><br></li>
<li>
Press CTRL+G to display the <b>Immediate</b> window. <br><br></li>
<li>
Type the following line, and then press ENTER: <pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? GetMySplashForm(CurrentDb.Name)
</code></pre>
</li>
</ol>
<p>
When you run the code, the <b>frmMySplashForm</b> form will be imported into the sample database Northwind.mdb. </p>
<h4>Setting absolute paths to repository databases</h4>
<p>
If you set a reference to a type library from Microsoft Access and then move the file that contains that type library to a different directory, Microsoft Access will attempt to locate the file and re-establish the reference. If the <b>RefLibPaths</b> key exists in the registry, Microsoft Access will first search there. If there is no matching entry, Microsoft Access will search for the file first in the current directory, and then in all the directories on the drive. You can create the RefLibPaths key using the registry editor in Microsoft Windows® 95 or Windows NT®, under the registry key \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Access\7.0. For more information about using the registry editor, see the Windows 95 or Windows NT documentation. </p>
<p>
To reference a specific repository database:
<ol>
<li>
Close Microsoft Access. <br><br></li>
<li>
Open the regisrtry editor applications (in Windows 95, Regedit.exe, and in Windows NT® 3.51, Regedt32.exe) <br><br></li>
<li>
Browse to the following branch and key: \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Access\7.0Software <br><br></li>
<li>
Create a new key named RefLibsPath. <p class=tl>
Let's assume that our database MyCode.mdb is located at c:\MSOffice\Access\Samples\MyCode.mdb </P></li>
<li>
Create a new string value named "MyCode.mdb." <br><br></li>
<li>
Set the value of the option to c:\MSOffice\Access\Samples\MyCode.mdb. <br><br></li>
<li>
Open Microsoft Access. <br><br></li>
<li>
From a module, note that MyCode.mdb is listed in the possible reference selection and that when highlighted, it will point to the proper absolute path location of the database. </li>
</ol>
<h2>Summary</h2>
<p>
The techniques described in this article provide you with examples of how powerful a development concept using repository databases can be. There are a few important considerations to keep in mind when you implement referenced databases. 
<ul type=disc>
<li>
There is no way to programmatically set or manipulate a database's references.<p class=tl>
This is a limitation of Microsoft Access version 7.0. The reference must be set using the user interface of the full retail product and cannot be set with the run-time version of Microsoft Access. </P></li>
<li>
You cannot duplicate the names of Public functions or Sub routines in the referenced database.<p class=tl>
Ensure that any functions that you expose for use in your repository databases have unique names and do not conflict with the current database or other repository databases. </P></li>
<li>
Plan for Robustness in the Code.<p class=tl>
Ensure that you have effective error handling in the repository databases and that the databases are compacted and placed in a compiled state before you use them. </P></li>
</ul>
</BODY>
</HTML>

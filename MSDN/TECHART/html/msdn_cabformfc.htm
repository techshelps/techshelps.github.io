<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Signed CAB Files for MFC and ATL Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_cabformfc"></a>Creating Signed CAB Files for MFC and ATL Controls</h1>
<p>
Microsoft Corporation</p>
<p>
If you plan to distribute Microsoft® Foundation Class (MFC) library and Active Template Library (ATL) controls via the Internet, you should package them as signed Cabinet (CAB) files. Signed files assure a user downloading your control that the code is safe. A CAB file contains a compressed version of your control plus information about how your control is to be installed, for example, what DLLs need to be installed along with the OCX. </p>
<p>
The tools you need to create and sign CAB files are provided on the Visual C++® 5.0 CD in the CAB&amp;SIGN directory. The utilities in the CAB&amp;SIGN directory are not installed automatically when you install Visual C++, so you must copy the contents of the CAB&amp;SIGN directory to your hard drive.</p>
<p>
Before you can sign files, you need to get a Software Publisher Certificate. You must apply for your own certificate to a Certification Authority. With the tools in the CAB&amp;SIGN directory you can create a test certificate for testing purposes, but this certificate cannot be used to sign code for distribution. See Step 1 for information about applying for a Software Publisher Certificate.</p>
<p>
These are the steps to create a signed CAB file. Each step is discussed in separate section below:
<ol>
<li>
Get a Software Publisher Certificate (you only need to do this once).<br><br></li>
<li>
Create the CAB file.<br><br></li>
<li>
Sign your files.<br><br></li>
<li>
Embed the signed CAB file in a Web page (optional).</li>
</ol>
<h3>Step 1. Getting a Software Publisher Certificate</h3>
<p>
Before you can sign files, you need to obtain a Software Publisher Certificate (SPC). To do this, you must make a request to a Certification Authority. During the application process, you must generate a key pair and provide the Certification Authority with identification information, such as your name, address, and public key. You must also make a legally binding pledge that you cannot and will not distribute software you know or should have known contains viruses or will otherwise maliciously harm the user's machine or code. </p>
<p>
To apply for a certificate, see "Digital Certificates for Authenticode" at <a href="http://www.microsoft.com/intdev/security/authcode/certs.htm">http://www.microsoft.com/intdev/security/authcode/certs.htm</a>. To create a test certificate to test signing your files, see the section below titled Making A Test Software Publisher Certificate.</p>
<p>
The Certification Authority generates a Software Publisher Certificate that conforms to the industry standard X.509 certificate format with Version 3 extensions. The certificate identifies you and contains your public key. It is stored by the Certification Authority for reference and a copy is returned to you via electronic mail. After accepting the certificate, you should include a copy in all published software signed with the private key. </p>
<h4>Making a test Software Publisher Certificate</h4>
<p>
You can use the MAKECERT and CERT2SPC utilities provided in the CAB&amp;SIGN directory on the Visual C++ 5.0 CD to make a test Software Publisher Certificate. Note that this test SPC is not valid for software publishing, but can be used to test code signing. </p>
<p>
To make a private key file called MYKEY.PVK and a company certificate called CERT.CER, run the MAKECERT utility with the following command:</p>
<pre><code>&nbsp;&nbsp;C:\CAB&amp;SIGN\MAKECERT -u:MyKey -n:CN=MySoftwareCompany -k:MYKEY.PVK CERT.CER
</code></pre>
<p>
<i>MyKey</i> is the name you give to your key and <i>MySoftwareCompany</i> is the name of your company. Note that the MAKECERT utility is case sensitive to command-line options, so you must use lowercase <b>-u</b>, <b>-n</b>, and <b>-k</b>. The value for the <b>-n</b> option must be an uppercase <b>CN=</b>.</p>
<p>
To create a test Software Publisher Certificate (SPC) called CERT.SPC, run the CERT2SPC utility with the following command:</p>
<pre><code>&nbsp;&nbsp;C:\CAB&amp;SIGN\CERT2SPC C:\CAB&amp;SIGN\ROOT.CER CERT.CER CERT.SPC
</code></pre>
<p>
Note that the CERT.SPC file is created from the CERT.CER file you created with MAKECERT and from the ROOT.CER file provided in the CAB&amp;SIGN directory. </p>
<h3>Step 2. Creating a CAB File</h3>
<p>
This section describes creating CAB files for distributing ATL and MFC controls over the Internet. If you need more information about CAB files, see the Cabinet File Reference in the Platform SDK section Setup and System Management Services\Setup API\Overview\Cabinet Files. The Platform SDK is included with the Visual C++ 5.0 online documentation and in the MSDN Library.</p>
<p>
To create a CAB file:
<ol>
<li>
Create an INF file (see Creating an INF File below).<br><br></li>
<li>
Run the CABARC utility (available in the CAB&amp;SIGN directory on the CD). For example:<p class=tl>
C:\CAB&amp;SIGN\CABARC -s 6144 n MYCTL.CAB NEEDED1.DLL NEEDED2.DLL MYCTL.OCX MYCTL.INF</P></li>
</ol>
<p>
CABARC creates a CAB file called MYCTL.CAB. </p>
<p>
You should run CABARC in the directory that contains your source files (the INF, OCX, and DLL files). The files archived in the CAB file should be listed on the command line in the same order they are listed in the INF file. In the example above, the INF file should list NEEDED1.DLL first, then NEEDED2.DLL, then MYCTL.OCX.</p>
<p>
The -s option reserves space in the cabinet for code signing (Step 3). The n command specifies that you want to create a CAB file. For a list of CABARC commands and options, type CABARC alone on the command line:</p>
<pre><code>C:\CAB&amp;SIGN\CABARC 
</code></pre>
<h4>Creating an INF file</h4>
<p>
The INF file is a text file that specifies the files (such as DLLs or other OCXs) that need to be present or downloaded for your control to run. An INF file allows you to bundle all the needed files in one compressed CAB file. By default, files with the same version numbers as existing files on the user's hard disk will not be downloaded. For more information about INF files and their options, including how to create platform-independent INF files, see "Packaging Component Code for Automatic Download" at <a href="http://www.microsoft.com/intdev/security/authcode/codedwld.htm#pack">http://www.microsoft.com/intdev/security/authcode/codedwld.htm#pack</a> or the Platform SDK section Setup and Systems Management Services\Setup API\Overview\INF Files. The Platform SDK is included with the Visual C++ 5.0 online documentation and with the MSDN Library.</p>
<p>
As an example, the following INF will be used to create a CAB file for the ATL Polygon control. You can build POLYGON.DLL by downloading the ATL POLYGON sample files from the Visual C++ 5.0 CD and building a MinSize version. If you build a MinSize version of the Polygon control, you need one additional DLL, ATL.DLL. Since ATL.DLL needs to be registered before POLYGON.DLL, put ATL.DLL first in the INF.</p>
<pre><code>; Sample INF file for POLYGON.DLL
[version] 
; version signature (same for both NT and Win95) do not remove
signature="$CHICAGO$"
AdvancedINF=2.0&nbsp; 
[Add.Code]
polygon.dll=polygon.dll
atl.dll=atl.dll
; needed DLL
[atl.dll]
file-win32-x86=thiscab
FileVersion=2,00,0,7024
DestDir=11
RegisterServer=yes 
[polygon.dll]
file-win32-x86=thiscab
clsid={4CBBC676-507F-11D0-B98B-000000000000} 
FileVersion=1,0,0,1 
RegisterServer=yes&nbsp; 
; end of INF file
</code></pre>
<p>
This INF specifies that ATL.DLL with the given version needs to be installed on the system. If ATL.DLL doesn't exist already on the system, it will be downloaded from the CAB file created with this INF. "thiscab" is a keyword meaning the CAB containing this INF. You can also download a needed DLL from an HTTP location by specifying an absolute or relative path, for example:</p>
<pre><code>file-win32-x86=http://www.mysite.com/mydir/NEEDED.DLL 
</code></pre>
<p>
The keyword "file-win32-x86" identifies the platform as <i>x</i>86-specific.</p>
<p>
You can get the version number of a file by clicking the right mouse button on the file in Windows NT® or Windows 95® Explorer. Select <b>Properties</b> from the list that appears, then select the <b>Version</b> tab on the dialog box that appears. You will sometimes need to insert an extra 0 in the file version. For example, the version number for the ATL.DLL is shown as 2.00.7024 in the dialog box. This becomes 2, 00, 0, 7024 in the INF file. </p>
<p>
The "DestDir" is the directory where the file will be loaded: 11 specifies the system directory WINDOWS/SYSTEM or WINNT/SYSTEM32; 10 specifies the windows directory, WINDOWS or WINNT. If no DestDir is specified (typical case), code is installed in the fixed OCCACHE directory. </p>
<p>
The "clsid" is the CLSID of the control to be installed.</p>
<p>
Once you have created an INF file, run the CABARC utility (available in the CAB&amp;SIGN directory on the Visual C++ 5.0 CD) to create the CAB file. You should run CABARC in the directory that contains your source files. Put the source files in the order they appear in the INF and the INF file last. For example, to make a CAB file for the Polygon control from the INF above, use the following command:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:\CAB&amp;SIGN\CABARC -s 6144 POLYGON.CAB ATL.DLL POLYGON.DLL POLYGON.INF
</code></pre>
<p>
This CAB file contains a compressed version of ATL.DLL and POLYGON.DLL along with the information needed to extract them in the POLYGON.INF file.</p>
<p>
For an example of building a CAB file that downloads an MFC control, see "MFC 4.2b Component Download Information" at <a href="http://www.microsoft.com/visualc/prodinfo/archives/download/mfc42cab.htm">http://www.microsoft.com/visualc/prodinfo/archives/download/mfc42cab.htm</a>. The DLL files you need to include with an MFC control are MSVCRT.DLL, MFC42.DLL, and OLEPRO32.DLL.</p>
<h3>Step 3. Signing a CAB File</h3>
<p>
To sign a CAB file using the Code Signing Wizard:
<ol>
<li>
Run the SIGNCODE utility (available in the CAB&amp;SIGN directory on the Visual C++ 5.0 CD) to launch the Code Signing Wizard.<pre><code>\CAB&amp;SIGN\SIGNCODE
</code></pre>
</li>
<li>
In the <b>Code Signing Wizard</b> dialog box, click <b>Next</b> to advance to the next page.<br><br></li>
<li>
In the <b>Which program would you like to sign?</b> edit box, enter the name of the CAB file you want to sign.<br><br></li>
<li>
In the <b>What would you like to call this program?</b> edit box, enter the name as you want it to appear on the certificate.<br><br></li>
<li>
Click <b>Next</b> to advance to the next page.<br><br></li>
<li>
In the <b>Under which Software Publishing Credentials would you like to sign this program?</b> edit box, enter the name of the Software Publisher Certificate (SPC) file.<br><br></li>
<li>
In the <b>Where can you find the secret, private key that goes with these credentials?</b> edit box, enter the name of the private key (PVK) file.<br><br></li>
<li>
Click <b>Next</b> twice to advance to the last page.<br><br></li>
<li>
Click <b>Sign</b> to sign the CAB file. Your file will be digitally signed.</li>
</ol>
<p>
You can sign your DLLs and OCXs directly, without using a CAB file. The advantages of a CAB file are compression and, if used with an INF file, the bundling of all necessary code together.</p>
<h3>Step 4. Embedding a Signed CAB File on a Web Page</h3>
<p>
ATL and MFC controls are embedded in Web pages using the &lt;OBJECT&gt; tag. Within the &lt;OBJECT&gt; tag, you need to specify three attributes for the control:
<ul type=disc>
<li>
<b>ID</b>&nbsp;&nbsp;The name of the control<br><br></li>
<li>
<b>CLASSID</b>&nbsp;&nbsp;The CLSID of the control<br><br></li>
<li>
<b>CODEBASE</b>&nbsp;&nbsp;The location from which to download the control. CODEBASE can point at a number of different file types successfully. </li>
</ul>
<p>
As an example, the following Web page displays the ATL Polygon control archived in the CAB file created in the Creating an INF File section above. The address http://www.mysite.com/mydir/polygon.cab should be replaced with the actual HTTP address of the CAB file:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ATL 2.0 test page for object PolyCtl&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;OBJECT ID="PolyCtl" 
CLASSID="CLSID:4CBBC676-507F-11D0-B98B-000000000000"
CODEBASE="http://www.mysite.com/mydir/polygon.cab"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub PolyCtl_ClickIn(x, y)
PolyCtl.Sides = PolyCtl.Sides + 1
End Sub
Sub PolyCtl_ClickOut(x, y)
PolyCtl.Sides = PolyCtl.Sides - 1
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
CODEBASE can point directly to an OCX or DLL file:</p>
<pre><code>CODEBASE="http://www.mysite.com/mydir/polygon.dll#version=1,0,0,1"
</code></pre>
<p>
Since this causes only the DLL or OCX file to be downloaded and installed, any necessary supporting DLLs must already be on the client machine. </p>
<p>
If you include the optional version number with a CAB file, the version number should refer to the control being downloaded. For example, since POLYGON.DLL has a version number of 1, 0, 0, 1, the version for the CAB is also 1, 0, 0, 1:</p>
<pre><code>CODEBASE="http://www.mysite.com/mydir/polygon.cab#version=1,0,0,1"
</code></pre>
<p>
If you do not include the version number, older versions of the same control will not be replaced if they are found on the client machine.</p>
</BODY>
</HTML>

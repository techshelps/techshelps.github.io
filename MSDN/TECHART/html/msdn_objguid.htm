<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Your Unofficial Guide to Using OLE Automation with Microsoft Office and Microsoft BackOffice</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_objguid"></a></sup>Your Unofficial Guide to Using OLE Automation with Microsoft Office and Microsoft BackOffice</h1>
<p>
September 1995<br>
0995 Part No. 65283</p>
<h2>Abstract</h2>
<p>
To use this article, you need to be familiar with the Microsoft® Visual Basic® Programming System for Windows® or Visual Basic for Applications, which is included in Microsoft Project, Microsoft Excel, and Microsoft Access.</p>
<p>
For more information about using OLE Automation, see the Microsoft Solutions Development Kit, the Microsoft Developer Network (MSDN), or product-specific documentation.</p>
<p>
Before you start coding, you should understand the basics of object models, OLE Automation, and Microsoft Visual Basic for Applications. </p>
<h2>Using OLE Automation with Microsoft Office and Microsoft BackOffice</h2>
<p>
You are a developer. And as a developer, you know that as businesses evolve, compete, and try harder to stay ahead, they demand better decisions, faster responses, and smarter investments from their organizations. People in these businesses are turning to you for the "custom solutions" that meet these needs—solutions that provide decision support, task automation, and integrate data and messaging services.</p>
<p>
And if you didn't know it, they needed these solutions yesterday.</p>
<p>
To help you build the business solutions your organizations and clients need, this guide provides information on key technologies that are included in Microsoft® Office and Microsoft BackOffice™. Together, these technologies can help you build better solutions faster. They include:
<ul type=disc>
<li>
Object models that provide access to the functionality of Microsoft products.<br><br></li>
<li>
OLE Automation to access the object models.<br><br></li>
<li>
Visual Basic® for Applications as a development environment in many Microsoft products.</li>
</ul>
<p>
This guide also provides detailed object models and code snippets for the following products:
<ul type=disc>
<li>
Microsoft Access for Windows® 95<br><br></li>
<li>
Microsoft Excel for Windows 95<br><br></li>
<li>
OLE Messaging<br><br></li>
<li>
Microsoft Office for Windows 95 Binder<br><br></li>
<li>
Microsoft PowerPoint® for Windows 95<br><br></li>
<li>
Microsoft Project for Windows 95<br><br></li>
<li>
Microsoft Schedule+ for Windows 95<br><br></li>
<li>
Microsoft Word for Windows 95<br><br></li>
<li>
Microsoft SQL Server Networking Series for Windows NT™ Workstation</li>
</ul>
<p>
Finally, because this guide can be a single source for information on so many products, you may want to keep it handy as you design and develop solutions.</p>
<h2>What Is an Object Model?</h2>
<p>
In Microsoft Office, each application's functionality is exposed through an object interface. For the purposes of this guide, an object is defined as an item that can be programmed or controlled, such as a document, text box, or pivot table. An object model is a representation—or conceptual map—of an application's functionality in terms of objects. By interacting with an application's object model, you can manipulate the application to add custom functionality, automate processes, or integrate applications across networks.</p>
<h3>The Object Model Hierarchy</h3>
<p>
An application has many different objects that are organized into various levels, as shown in the object model diagrams in this article. You can think of these levels as tiers in a hierarchy. The topmost tier of each application object hierarchy is typically occupied by a single object: <b>Application</b>. The <b>Application</b> object represents the application itself, and all other objects for that application are below the <b>Application</b> object. The second tier consists of a high-level categorization of objects. The third, fourth, and fifth tiers include a variety of additional objects used to access functionality that the second tier objects contain. You traverse the tiers to find the object you want to use.</p>
<p>
A group of similar objects can be combined in the hierarchy as a collection. You can work with a member of a collection as a single object or as a member of that collection. For example, suppose a boat (object) is a member of a fleet of boats (collection). You can refer to the boat as a single object or as a member of the collection.</p>
<p>
In addition, some objects are grouped into an artificial container, called a <i>metacollection</i>. A metacollection is a wholly contained collection of objects that exist within a defined boundary but are independent of the application's object hierarchy. </p>
<h3>Using Objects</h3>
<p>
Objects have properties and methods. (Although a collection contains groups of objects, a collection itself is also an object, and as such is associated with its own set of properties and methods.) Think of <i>properties</i> as adjectives that describe a characteristic of the object, and <i>methods</i> as verbs that describe what you want the object to do. You use objects by manipulating their properties and methods with lines of code.</p>
<p>
To manipulate the properties and methods of an object, you must sometimes reference all objects that lie on the hierarchical path to that object. You traverse that path down to a specific object by using the dot operator (.), as shown in the following sample lines of code:</p>
<pre><code>'references the Color property of the Boat object
Application.Boat.Color = "blue"
'references the Action method of the Boat object
Application.Boat.Action Go
</code></pre>
<p>
Although these lines of code include the highest hierarchical level, <b>Application</b>, you don't always have to type the entire hierarchical object path to set a property of, or call a method on, a particular object. How far from the top of the hierarchy you must begin depends on the context in which the property setting or method call is made. If you specify the entire hierarchy in your call, you are calling the object explicitly. If you omit higher levels of hierarchy in your object reference, you are calling the object implicitly.</p>
<p>
When should you call objects explicitly and when can you call them implicitly? It's usually a subjective decision, based on how certain you are of the situations in which your code may be called within the application. A good approach is to keep track of the context in which object references are made and traverse the hierarchical object path in your call accordingly. If you are unsure of the context in which the code will be executed, use explicit hierarchy paths to avoid any errors that might occur if you use implicit hierarchy paths.</p>
<h3>Looking Up Objects Online—The Object Browser</h3>
<p>
If your code may be executed in a variety of situation within the application, call objects explicitly. If your code will be executed on in specific, known situations within the application, you can save programming time by calling objects implicitly.</p>
<p>
The Object Browser, which is included in Microsoft Visual Basic for Applications and in Microsoft Visual Basic, provides information (properties and methods) about the object models of applications on your computer that support OLE Automation. When you want to add the object set of an application to the Object Browser, choose References from the Tools menu of the application you are using. (Note that you must have a Visual Basic module open to do this.) Then select the names of the application that you want to add to your Object Browser. When you add the object set of an application to the Object Browser in this way, you are establishing a reference to that application's object model.</p>
<h4>References</h4>
<p>
In addition to providing information about object properties and methods, references provide the following benefits at design time (in other words, when you are programming in Visual Basic):
<ul type=disc>
<li>
Use of the Help file that contains additional information about a selected object in the Object Browser.<br><br></li>
<li>
The ability to use constants that are defined by an application. For example, in the Microsoft Excel code sample in this guide, the constant "xl3DColumn" is used instead of the numeric value (-4100) for the three-dimensional (3-D) column.<br><br></li>
<li>
The ability to declare variables of a specific object type. For example, in the Microsoft Excel code sample in this guide, the variables <i>objXLChart</i> and <i>objXL</i> are dimensioned as Microsoft Excel-specific object types. If you use application-defined object types you will achieve <i>early binding</i> of the objects, methods, and properties against the application's object interface. Early binding means much faster code execution and optimized memory usage. In addition, early-bound code can be run against different language versions (English, French, and others) of a given product.</li>
</ul>
<p>
To take advantage of early binding, you should maintain references to the applications against which you are programming.</p>
<p>
Note that if you try to use an application-defined constant or data type without the appropriate reference, you will get an error message—either "Variable not defined," or "User defined type not defined," or a generic "OLE Automation Error."</p>
<p>
Used together, this guide and the Object Browser are a valuable resource that gives you the convenience of an online reference, along with a clear picture of the object model hierarchies.</p>
<p>
Want to see some examples of how to use objects and manipulate their properties and methods? See the <a href="#objguid_youtry">"Now You Try"</a> section below.</p>
<h2>The OLE Universe</h2>
<p>
OLE has evolved into a powerful, software Esperanto—a global language of sorts—that enables software components to work together in many ways. OLE is part of the operating system, and it consists of two major elements: the Component Object Model (COM), which is the underlying architecture, and a wide and growing range of OLE services that enable software integration. </p>
<p>
Many OLE services are available today, including services that:
<ul type=disc>
<li>
Enable application integration. (Examples of these services include object linking and embedding, visual editing, and drag-and-drop.)<br><br></li>
<li>
Help developers create custom solutions. (Examples of these services include OLE Automation and OLE Controls.)<br><br></li>
<li>
Integrate the enterprise. (Examples include the upcoming OLE Messaging, OLE DB, and OLE Networking services.)</li>
</ul>
<p>
In addition, the list of OLE services available from Microsoft and other vendors continues to expand.</p>
<p>
This guide focuses on one of the OLE services available to developers today—OLE Automation.</p>
<h3>Understanding OLE Automation</h3>
<p>
OLE Automation is an OLE service for integrating development tools and applications. It enables an application to expose its functionality, or to control the functionality of other applications on the same computer or across networks. (Microsoft Visual Basic version 4.0 Enterprise Edition enables Remote Automation between distributed computers.) As a result, applications can be automated and integrated with programming code, creating virtually endless possibilities. </p>
<p>
The two key elements of OLE Automation are:
<ul type=disc>
<li>
Applications or software components, called OLE Automation servers, that can be controlled because their functionality has been exposed and made accessible to other applications. Examples of Microsoft OLE Automation servers are all Microsoft Office applications, Microsoft Schedule+, and Microsoft Project. These OLE Automation servers expose their functionality through object models.<br><br></li>
<li>
Other applications or development tools, called OLE Automation controllers, that can control OLE Automation servers through programming code, by accessing the functionality exposed by the OLE Automation servers. Examples of Microsoft OLE Automation controllers are Microsoft Visual Basic, Microsoft Visual C++™, Microsoft Visual FoxPro™, and Microsoft Visual Basic for Applications (which is built into Microsoft Access, Microsoft Excel, and Microsoft Project).</li>
</ul>
<p>
OLE Automation is the umbrella term for the process by which an OLE Automation controller sends instructions to an OLE Automation server (using the functionality exposed by the OLE Automation server), where they are run.</p>
<p>
Some Microsoft applications (such as Microsoft Access, Microsoft Excel, and Microsoft Project) contain Visual Basic for Applications and expose their functionality in an object model. These applications are both OLE Automation controllers and OLE Automation servers.</p>
<p>
The following section provides a brief overview of some Visual Basic for Applications basics.</p>
<h2>A Quick Look at Visual Basic for Applications</h2>
<p>
Microsoft Visual Basic for Applications is a language engine that includes an advanced editing environment, debugging tools, and uses the Visual Basic programming language. Microsoft has built Visual Basic for Applications into several of its desktop application products (Microsoft Access, Microsoft Excel, and Microsoft Project). Visual Basic for Applications is also the language engine for Microsoft Visual Basic version 4.0.</p>
<p>
Visual Basic for Applications makes it easy to work with application object models because it provides several helpful programming constructs and capabilities, including:
<ul type=disc>
<li>
Getting and setting properties<br><br></li>
<li>
Named arguments<br><br></li>
<li>
"For each" statements<br><br></li>
<li>
"With" statements<br><br></li>
<li>
Object location independence</li>
</ul>
<p>
The following sections contain descriptions of each of these.</p>
<h3>Getting and Setting Properties</h3>
<p>
You can query the setting of a specific property as easily as you can set it, simply by assigning the value of a property to a variable. For example, to set a value for the <b>Boat.Color</b> property, you could write a line of code that looks something like this:</p>
<pre><code>Boat.Color = "blue"
</code></pre>
<p>
If you want to find out the current value of the <b>Boat.Color</b> property, you could assign a variable, such as <i>color_of_boat</i>, to be the value of the property, as shown in this example:</p>
<pre><code>color_of_boat = Boat.Color
</code></pre>
<h3>"With" Statements</h3>
<p>
The <b>With</b> statement allows you to set multiple properties or methods on the same object in one construct. For example, suppose you want to refer to many properties or methods for one object. You can use the <b>With</b> statement to set multiple properties by typing the object name once:</p>
<pre><code>With Boat
 &nbsp;&nbsp; '8.2 and 10 are lengths in meters
 &nbsp;&nbsp; .Color = "blue"
 &nbsp;&nbsp; .Length = 8.2
 &nbsp;&nbsp; .MastHeight = 10
End With
</code></pre>
<h3>"For Each" Statements</h3>
<p>
The <b>For Each</b> statement is convenient when you don't know how many objects are in a collection or you don't know their unique identifiers, and you want to take the same action or set the same property for all of the objects. The <b>For Each</b> statement enables you to cycle through the objects in a collection without specifically listing the objects. For example, suppose you want to make all the boats in the Fleet collection blue. One way to do this is by writing a portion of code that looks like this:</p>
<pre><code>For Each Boat in Fleet
 &nbsp; Boat.color = "blue"
Next
</code></pre>
<p>
The lines of code between the "For Each Boat in Fleet" and "Next" lines will be executed on each object in the Fleet collection. </p>
<h3>Named Arguments</h3>
<p>
With named arguments, you may change only the arguments that need to be changed, regardless of declared order. Use the <b>:=</b> symbol (a colon followed by an equal sign) as the named argument operator. For example, suppose the <b>Boat</b> function has the following properties: <b>Color</b>, <b>Length</b>, and <b>MastHeight</b>:</p>
<pre><code>Boat (color, Length, MastHeight)
</code></pre>
<p>
The traditional statement would be something like:</p>
<pre><code>Boat ("blue", 8.2, 10)
</code></pre>
<p>
Or to change just the <b>MastHeight</b> property (with placeholder commas):</p>
<pre><code>Boat (,,10)
</code></pre>
<p>
Using named arguments, the same statement reads:</p>
<pre><code>Boat MastHeight:=10
</code></pre>
<p>
Another benefit of named arguments is code maintenance—the above statement is much clearer as to which argument is being set.</p>
<h3>Object Location Independence</h3>
<p>
The interface you use when you are programming inside an application is identical to the interface you use when you program from outside the application. For example, if you write code in Microsoft Excel to manipulate a worksheet, you can use the same code in Microsoft Access to manipulate a worksheet in Microsoft Excel. Just copy or cut and paste the code into another application—add the appropriate <b>CreateObject</b> syntax to point the code to the target application, and the code is ready to be run.</p>
<h3><a name="objguid_youtry"></a>Now You Try</h3>
<p>
Now that you've got the basic terms and concepts of object models, OLE Automation, and Visual Basic for Applications under your belt, try your hand at coding with objects. In this section you'll find code samples that can be run in Visual Basic or Visual Basic for Applications. You should be familiar with the language and how the code editor works, including code comments and the line continuation character (an underscore preceded by a space, that continues one line of code onto the next). In addition:
<ul type=disc>
<li>
The sample code exclusively uses the <b>CreateObject</b> function to associate variables and object types. <b>GetObject</b>, or the <b>New</b> keyword in Visual Basic and Microsoft Access (see online Help), are also useful.<br><br></li>
<li>
Where possible, the code uses application-defined object types (to enable early binding) and constants. Microsoft Excel has examples of each with "Dim objXLchart as Excel.Chart" and "x13DColumn."<br><br></li>
<li>
Application-defined object types usually map to the objects found in the Object Browser's lefthand list box. OLE Messaging, Schedule+, and SQL Server, however, use only the Visual Basic "object" data type.<br><br></li>
<li>
If you are using Microsoft Excel or Microsoft Project and you get an "Object Library feature not supported" error message, you may be able to force the mapping of a variable to an object type by using the underscore and brackets syntax in the Microsoft Access example of "Dim objAccess as Access. [_Application]."<br><br></li>
<li>
Object types are reconciled in a specific order: first against the application's type library that the code is running in, then against each application's type library in the order that the applications appear in the Object Browser (Microsoft Access and Visual Basic have a "Priority" button on the References dialog so you can change this). This is why you may need to add additional reference information for common object names. As an example, in the DAO code sample the <i>dsbNwind</i> variable maps to <b>DAO.Database</b> instead of just <b>Database</b>.</li>
</ul>
<h2>Sample Code Reference</h2>
<h3>Distributing Visual Basic for Applications Code</h3>
<p>
If you are planning to distribute Visual Basic for Applications code to users, you should know that each application that uses Visual Basic for Applications manages references "by project." This means that whether you compile Visual Basic for Applications code by running it or by using the "Compile All Modules" command, information on the applications that are referenced at the time of compilation is saved in the application file (the .XLS, .XLA, .MDB, .MDA, or .MPP file, or Visual Basic .VBJ file).</p>
<p>
Managing references by project and storing this information in the application file means that when the file is run on a different computer, the appropriate applications on that computer are referenced automatically. In other words, you (or the user) needn't worry about which applications are or are not referenced in order for the Visual Basic for Applications code to execute properly.</p>
<p>
The one thing required for proper code execution is that the type libraries for all referenced applications must be on the user's computer. In most cases this is not an issue because the type library file is installed with the application. However, if you get a type library from another location (Microsoft Word, for example does not ship with a type library), you must distribute the type library with your files and install it in either \Windows\System or in the same directory as the application's .EXE file.</p>
<h3>Microsoft DAO</h3>
<pre><code>'Requires a reference to the Microsoft DAO 3.0 Object Library.
Option Explicit
Sub Update_Database()
 &nbsp;&nbsp; Dim oDAO as DBEngine
 &nbsp;&nbsp; Dim dbsNwind As DAO.Database, rstEmployees As Recordset, _
 &nbsp;&nbsp;&nbsp;&nbsp; iSalesReps As Integer
 &nbsp;&nbsp; Set oDAO = CreateObject("DAO.DBEngine")
 &nbsp;&nbsp; Set dbsNwind = oDAO.Workspaces(0). _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Points to location of Northwind sample in OfficePro95 &amp; Access95
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OpenDatabase("C:\MSoffice\access\samples\Northwind.mdb")
 &nbsp;&nbsp; Set rstEmployees = dbsNwind.OpenRecordset("Employees")
 &nbsp;&nbsp; With rstEmployees
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do Until .EOF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If ![Title] = "Sales Representative" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iSalesReps = iSalesReps + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Edit
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ![Title] = "Account Executive"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Update
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .MoveNext
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp; End With
 &nbsp; 'Another (faster) way to do this is with a SQL statement.
 &nbsp; 'To run this code, comment out the code between "Set rstEmployees..."
 &nbsp; 'and "End With" and uncomment the three lines below
 &nbsp; 'dbsNwind. Execute "UPDATE Employees SET Title = 'Account Executive'" &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp; '" WHERE Title='Sales Representative'", dbFailOnError
 &nbsp; 'iSalesReps = dbsNwind.RecordsAffected
 &nbsp;&nbsp; MsgBox "There were" &amp; Str$(iSalesReps) &amp; " Sales Representatives"
 &nbsp;&nbsp; dbsNwind.Close
End Sub
</code></pre>
<h3>Microsoft Access</h3>
<pre><code>'Requires a reference to Microsoft Access for Windows 95.
Option Explicit
Sub Show_AccessReport()
 &nbsp;&nbsp; Dim objAccess As Access.[_Application]
 &nbsp;&nbsp; Set objAccess = CreateObject("Access.Application")
 &nbsp;&nbsp; With objAccess
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Points to location of Northwind sample in OfficePro95 &amp; Access95.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OpenCurrentDatabase "C:\MSoffice\access\samples\Northwind.mdb"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Visible = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .DoCmd.OpenReport "Products by Category", acPreview
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'acPreview is an Access-defined constant of value = 2.
 &nbsp;&nbsp; End With
End Sub
</code></pre>
<h3>Microsoft Excel</h3>
<pre><code>'Requires a reference to the Microsoft Excel Object Library.
Option Explicit
Sub Create_Chart()
 &nbsp;&nbsp; Dim objXL As Excel.Application, objXLchart As Excel.Chart, _
 &nbsp;&nbsp;&nbsp;&nbsp; iRotate As Integer
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim MyArray As Variant
 &nbsp;&nbsp; MyArray = Array(1, 2, 3)
 &nbsp;&nbsp; Set objXL = CreateObject("Excel.Application")
 &nbsp;&nbsp; With objXL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Workbooks.Add
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Range("A1:C1").Value = MyArray
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Range("A1:C1").Select
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set objXLchart = .Charts.Add()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Visible = True
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; objXLchart.Type = xl3DColumn&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'xl3DColumn is an Excel-defined constant of value = -4100.
 &nbsp;&nbsp; For iRotate = 30 To 180 Step 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objXLchart.Rotation = iRotate
 &nbsp;&nbsp; Next
End Sub
</code></pre>
<h3>OLE Messaging</h3>
<pre><code>'Requires a reference to the OLE Messaging Object Library.
Option Explicit
Sub Create_Message()
 &nbsp;&nbsp; Dim objSession As Object, objMessage As Object, objRecip As Object

 &nbsp;&nbsp; Set objSession = CreateObject("MAPI.SESSION")
 &nbsp;&nbsp; objSession.Logon
 &nbsp;&nbsp; Set objMessage = objSession.Outbox.Messages.Add
 &nbsp;&nbsp; objMessage.Subject = "Here's the information"
 &nbsp;&nbsp; Set objRecip = objMessage.Recipients.Add
 &nbsp;&nbsp; objRecip.Name = "Mike Loforte"
 &nbsp;&nbsp; objRecip.Type = mapiTo&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; 'mapiTo is an OLE Messaging-defined constant of value = 1.
 &nbsp;&nbsp; objMessage.Update
 &nbsp;&nbsp; objMessage.Send showDialog:=True
 &nbsp;&nbsp; objSession.Logoff
End Sub
</code></pre>
<h3>Microsoft Office Binder</h3>
<pre><code>'Requires a reference to the Office Binder 1.0 Type Library
' and the Microsoft Word 7.0 Object Library.
Option Explicit
Sub Create_Binder()
 &nbsp;&nbsp; Dim objBinder As OfficeBinder.Binder, objWord As WordBasic
 &nbsp;&nbsp; Set objBinder = CreateObject("Office.Binder")
 &nbsp;&nbsp; objBinder.Visible = True
 &nbsp;&nbsp; Set objWord = CreateObject("Word.Basic")
 &nbsp;&nbsp; With objWord
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FileNewDefault
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Formatfont Points:=22, Bold:=True, Italic:=True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Insert "Russell says Binders are cool!"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; objWord.InsertPara
 &nbsp;&nbsp; objWord.FileSaveAs "c:\Binder Summary.DOC"
 &nbsp;&nbsp; Set objWord = Nothing
 &nbsp;&nbsp; objBinder.Sections.Add Filename:="c:\Binder Summary.doc"
 &nbsp;&nbsp; objBinder.Sections(1).Name = "Binder Summary"
 &nbsp;&nbsp; objBinder.SaveAs Filename:="Mybinder.obd", saveOption:=bindDisplayDialog
 &nbsp;&nbsp; 'bindDisplayDialog is a Binder-defined constant of value = 3.
End Sub
</code></pre>
<h3>Microsoft PowerPoint</h3>
<pre><code>'Requires a reference to the PowerPoint 7.0 Object Library.
Option Explicit
Sub Create_Presentation()
 &nbsp;&nbsp; Dim objPPT As PowerPoint.Application, _ 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objPRES As Presentation, objSLIDE As Slide
 &nbsp;&nbsp; Set objPPT = CreateObject("PowerPoint.Application")
 &nbsp;&nbsp; objPPT.AppWindow.Visible = True
 &nbsp;&nbsp; Set objPRES = objPPT.Presentations.Add
 &nbsp;&nbsp; Set objSLIDE = objPRES.SLIDES.Add(1, ppLayOutText)
 &nbsp; 'ppLayOutText is a PPT-defined constant of value = 2.
 With objSLIDE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objects(1).Text = "PowerPoint Programmability"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objects(2).Text = "The FivePointStar AutoShape"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '"4800, ...." are measurement units in TWIPS (like Visual Basic)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objects.AddShape ppShapeFivePointStar, 4800, 4300, 5000, 5000
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'ppShapeFivePointStar is a PPT-defined constant of value = 12
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objects(3).GraphicFormat.Fill.ForeColor.RGB = RGB(255, 255, 0)
 &nbsp;&nbsp; End With
End Sub
</code></pre>
<h3>Microsoft Project</h3>
<pre><code>'Requires a reference to the Microsoft Project 4.1 Object Library.
Option Explicit
Sub Create_Project()
 &nbsp;&nbsp; Dim oProjApp As MSProject.Application, oProjDoc As Project, i As Integer
 &nbsp;&nbsp; Set oProjApp = CreateObject("MSProject.Application")
 &nbsp;&nbsp; oProjApp.Visible = True
 &nbsp;&nbsp; oProjApp.FileNew SummaryInfo:=False
 &nbsp;&nbsp; Set oProjDoc = oProjApp.ActiveProject
 &nbsp;&nbsp; For i = 1 To 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oProjDoc.tasks.Add Name:="Task" &amp; i
 &nbsp;&nbsp; Next i
 &nbsp;&nbsp; oProjApp.FileSave
 &nbsp;&nbsp; oProjApp.Quit
End Sub
</code></pre>
<h3>Microsoft Schedule+</h3>
<pre><code>'Requires a reference to Microsoft Schedule Plus 7.0 Object Library.
Option Explicit
Sub Create_Appointment()
 &nbsp;&nbsp; Dim objSchdPlus As Object, objAppt As Object

 &nbsp;&nbsp; Set objSchdPlus = CreateObject("SchedulePlus.Application")
 &nbsp;&nbsp; objSchdPlus.Logon
 &nbsp;&nbsp; objSchdPlus.ScheduleSelected.Activate
 &nbsp;&nbsp; Set objAppt = objSchdPlus.ScheduleSelected.SingleAppointments.New
 &nbsp;&nbsp; objAppt.SetProperties Text:="Lunch", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start:=Now(), End:=Now() + Format("01:00")
 &nbsp;&nbsp; objSchdPlus.Logoff
End Sub
</code></pre>
<h3>Microsoft Word</h3>
<pre><code>'Requires a reference to the Microsoft Word 7.0 Object Library.
Option Explicit
'Dimensioning the Word object outside of the Sub creates a module-level
'variable that persists after the Sub is done executing.
Public objWord As WordBasic

Sub Create_Document()
 &nbsp;&nbsp; Set objWord = CreateObject("Word.Basic")
 &nbsp;&nbsp; With objWord
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AppMaximize
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FileNewDefault
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Formatfont Points:=22, Bold:=True, Italic:=True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Insert "Brett Says 'Hello World'"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .InsertPara
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Formatfont Points:=10, Bold:=False, Italic:=False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Insert "Brett Says 'Hello World'"
 &nbsp;&nbsp; End With
End Sub
</code></pre>
<h3>Microsoft SQL Server</h3>
<pre><code>'Requires a reference to the Microsoft SQLOLE Object Library.
Option Explicit
Sub Show_SQLStatus()
 &nbsp;&nbsp; Dim objSQL As Object, objSQLdb As Object, sMessage As String
 &nbsp;&nbsp; Set objSQL = CreateObject("Sqlole.SQLServer")
 &nbsp;&nbsp; 'Where Corp_Srv is a SQL Server 6.0 Server with valid user name and password
 &nbsp;&nbsp; objSQL.Connect "Corp_Srv", "username", "password"
 &nbsp;&nbsp; 
 &nbsp;&nbsp; For Each objSQLdb In objSQL.Databases
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If objSQLdb.Status &lt;&gt; SQLOLEDBStat_Inaccessible Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'SQLOLEDBSTAT_Inaccessible is a SQLOLE-defined constant of value 992
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sMessage = sMessage &amp; objSQLdb.Name &amp; "=" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; Format$(objSQLdb.Size) &amp; " Mbytes" &amp; Chr$(10)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next
 &nbsp;&nbsp; objSQL.DisConnect
 &nbsp;&nbsp; MsgBox sMessage
End Sub
</code></pre>
<h2>Object Model Reference</h2>
<p>
When you view an application's object model in the Object Browser, you are actually viewing that application's <i>type library</i>. For example, when you see the Microsoft Excel object model in the Object Browser, you are really looking at XL5EN32.TLB. (The "EN" indicates that this is the English-language version type library.) Type library names and locations are provided for each application.</p>
<h3>Microsoft Access/DAO Object Model</h3>
<p>
The Microsoft Access object model is provided by MSACCESS.TLB, which is included when you install Microsoft Office Professional or Microsoft Access. By default, MSACCESS.TLB is installed in the \MSOFFICE\ACCESS subdirectory. Online Help for this object model is available in ACCESS.HLP.</p>
<p>
The Microsoft DAO object model is provided by DAO3032.DLL or DAO2516.DLL (for DAO version 3.0 or 2.5, respectively), which is included when you install Microsoft Visual C++ version 4.0, Microsoft Excel for Windows 95, Microsoft Visual Basic version 4.0 (Professional and Enterprise editions), or Microsoft Access for Windows 95. By default, DAO3032.DLL or DAO2516.DLL is installed in the . .\DAO subdirectory or \WINDOWS\SYSTEM subdirectory.</p>
<h3>Microsoft Excel Object Model</h3>
<p>
The Microsoft Excel object model is provided by XL5EN32.OLB, which is included when you install Microsoft Office or Microsoft Excel. By default, XL5EN32.OLB is installed in the \MSOFFICE\EXCEL subdirectory. Online Help for this object model is available in VBA_XL.HLP.</p>
<h3>OLE Messaging Object Model</h3>
<p>
The OLE Messaging object model is provided by MDISP.TLB or MDISP32.TLB, which are included when you install the client portion of Microsoft Exchange Server. It will also be shipped in future versions of Windows and Windows NT. By default, MDISP.TLB and MDISP32.TLB are installed in the \WINDOWS\SYSTEM subdirectory. </p>
<p>
Online Help for this object model is available in OLEMSG.HLP, which is included in the Microsoft Exchange Forms Designer and the Microsoft Solutions Development Kit, version 2.0.</p>
<h3>Microsoft Office Binder Object Model</h3>
<p>
The Microsoft Office Binder object model is provided by BINDER.TLB, which is included when you install Microsoft Office. By default, BINDER.TLB is installed in the \MSOFFICE\OFFICE subdirectory. Online Help for the binder object model is available in VBA_BIN.HLP.</p>
<p>
There is a Microsoft Office Object Model (MSO5ENU.DLL) in the References dialog box. Although you do not directly call this object, it provides functionality for the Microsoft Excel, Microsoft Project, and the Microsoft Office Binder document property collection used by the <b>BuiltInDocumentProperties</b> and <b>CustomDocumentProperties</b> collections. You should maintain a reference to this object. For more information about a consistent way to read and write document properties, see the Microsoft Solutions Development Kit, version 2.0.</p>
<p>
Microsoft Graph, which ships with Microsoft Word, Microsoft Access, and Microsoft PowerPoint, has a similar object model to the chart object model in Microsoft Excel, except it does not have a <b>Drawing</b> or <b>PageSetup</b> object. It also does not have a way to progammatically add or change the data set. The <b>Graph</b> object model is provided by GREN50.OLB. By default, GREN50.OLB is installed in the ...\MSGRAPH5 subdirectory.</p>
<h3>Microsoft PowerPoint Object Model</h3>
<p>
The Microsoft PowerPoint object model is provided by POWERPNT.TLB, which is included when you install Microsoft Office or Microsoft PowerPoint. By default, POWERPNT.TLB is installed in the \MSOFFICE\POWERPNT subdirectory. Online Help for this object model is available in VBA_PP.HLP, which is included in the Microsoft Solutions Development Kit, version 2.0.</p>
<h3>Microsoft Project Object Model</h3>
<p>
The Microsoft Project object model is provided by PJ4EN32.OLB, which is included when you install Microsoft Project. By default, PJ4EN32.OLB is installed in the \MSOFFICE\WINPROJ subdirectory. Online Help for this object model is available in VBA_PJ.HLP.</p>
<h3>Microsoft Schedule+ Object Model</h3>
<p>
The Microsoft Schedule+ object model is provided by SP7EN32.OLB, which is included when you install Microsoft Office or Microsoft Schedule+, and is included with the Microsoft Exchange client software when Schedule+ is installed from the Microsoft Exchange server. By default, SP7EN32.OLB is installed in the \MSOFFICE\SCHEDULE subdirectory. Help for this object model is available in the Microsoft Exchange Forms Designer and Microsoft Solutions Development Kit, version 2.0.</p>
<h3>Microsoft Word Object Model</h3>
<p>
The Microsoft Word object model consists of the <b>Wordbasic</b> object. All of the Microsoft Word Basic macro commands are accessible through this object. To find out more about using Word Basic commands, see the online Word Basic Help file, WRDBASIC.HLP, which you can choose to install when you set up Microsoft Word.</p>
<p>
The Microsoft Word type library, WB70EN.TLB, ships with the Microsoft Solutions Development Kit, version 2.0, and the Microsoft Access Developer Sampler CD. You should copy this to your system \Windows\System Directory and add it to the reference dialog&nbsp; using the "Browse" command button. Remember to distribute it to users of your solutions.</p>
<h3>Microsoft SQL Server Object Model</h3>
<p>
The Microsoft SQL Server object model is provided by SQLOLE32.TLB, which is included when you install the Microsoft SQL Server Enterprise Manager client or server utilities. By default, SQLOLE32.TLB is installed in the \SQL60\DLL subdirectory. Online Help for this object model is available in SQLOLE.HLP in the Microsoft Solutions Development Kit, version 2.0.</p>
</BODY>
</HTML>

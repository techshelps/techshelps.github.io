<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 181: Arranging Child Forms in a Cascading Fashion</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn181"></a></sup>Tip 181: Arranging Child Forms in a Cascading Fashion</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to design your Microsoft® Visual Basic® application so that after the user closes one child form on the screen the remaining child forms are automatically cascaded.</p>
<h2>Using the Arrange Method to Cascade Forms</h2>
<p>
When you design a Microsoft® Visual Basic® application in which one form contains several child forms, the user can selectively close a child form to remove it from the screen. However, when you close a child form in this manner, its space is still occupied in the multiple document interface (MDI) form. You can use the <b>Arrange</b> method to automatically cascade all remaining child forms each time a child form is closed or unloaded from memory.</p>
<h2>Example Program</h2>
<p>
This program shows how to arrange child forms in a cascading format whenever child forms are loaded or unloaded.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default. Set its <b>MDIChild</b> property to True. Size the form so that it is relatively small in size.<br><br></li>
<li>
Add the following code to the Unload event for Form1:<pre><code>Private Sub Form_Unload(Cancel As Integer)
 &nbsp;&nbsp; MDIForm1.Arrange 0
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Insert menu, select MDIForm to create an MDI form. MDIForm1 is created by default.<br><br></li>
<li>
Add a menu to MDIForm1. From the Visual Basic Tools menu, select Menu Editor. Type the Caption as "&amp;New Form" and the Name as NewForm.<br><br></li>
<li>
Add the following code to the Click event for NewForm:<pre><code>Private Sub NewForm_Click()
 &nbsp;&nbsp; Static X
 &nbsp;&nbsp; Dim Form As New Form1
 &nbsp;&nbsp; X = X + 1
 &nbsp;&nbsp; Form.Caption = "Child" &amp; X
 &nbsp;&nbsp; MDIForm1.Arrange 0
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click several times on the New Form menu. Each time you click this menu entry, a new child form is created, with each form being named sequentially as Child1, Child2, and so on. When you click the Close button, the child form is unloaded, and the remaining child forms are arranged in a cascading fashion, with no blank positions where the unloaded child forms used to appear.</p>
</BODY>
</HTML>

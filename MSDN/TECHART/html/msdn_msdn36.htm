<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 36: Terminating a Running Application from Within Visual Basic</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn36"></a></sup>Tip 36: Terminating a Running Application from Within Visual Basic</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
From within a Visual Basic® application, you can terminate another Windows®-based application that is currently running. To do this, you send a WM_CLOSE command to the running application. This terminates the program just as if you had clicked on the Close command in the application's control menu. This article explains how you can terminate a program from within a Visual Basic application.</p>
<h2>Terminating Running Applications</h2>
<p>
There are several steps you need to perform in your Visual Basic® program before you can successfully terminate a running application.</p>
<p>
First, you need to determine the running application's window handle. This can be done by calling theWindows® application programming interface (API) <b>FindWindow</b> function. Next, you must use the <b>GetWindow</b> function to make sure that you are not trying to terminate your own Visual Basic program. Second, you must be certain the window handle does not refer to a window that is disabled or otherwise not able to be terminated. As long as the above-mentioned conditions have been met, you can call the <b>PostMessage</b> function to terminate the running application.</p>
<p>
The Windows API <b>PostMessage</b> function is the key to terminating a program running in Windows. After you have determined the application's handle, you simply execute the <b>PostMessage</b> function with the WM_CLOSE command as an argument.</p>
<p>
To declare this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form:</p>
<pre><code>Declare Function PostMessage Lib "User" (ByVal Hwnd As Integer, ByVal wMsg
 &nbsp; As Integer, ByVal wParam As Integer, ByVal lParam As Long) As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>PostMessage</b> function requires four arguments to be passed to it. These arguments are as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hWnd</i></td>
<td width=87%>An integer value set to the window's handle</td>
</tr>
<tr valign=top>
<td width=13%><i>wMsg</i></td>
<td width=87%>An integer value set to the message ID that you want to send to the window</td>
</tr>
<tr valign=top>
<td width=13%><i>wParam</i></td>
<td width=87%>An integer value set to a 16-bit parameter (depends on wMsg)</td>
</tr>
<tr valign=top>
<td width=13%><i>lParam</i></td>
<td width=87%>A string or long value (depends on wMsg)</td>
</tr>
</table><br>
<p>
After calling the <b>PostMessage</b> function, an integer value will be returned. If this value is set to TRUE (nonzero), the function was successful and the target application was terminated.</p>
<h2>Example Program</h2>
<p>
The following Visual Basic program shows how you can terminate an application currently running in Windows. This example assumes that the application you want to terminate is the Windows Solitaire game and that it is currently running in memory.</p>
<p>
When you execute this program, it will display a message box telling you either that Solitaire is not running (in which case the program simply ends) or that Solitaire is running. Click the OK command button and Solitaire will be immediately terminated.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constants</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Declare Function IsWindow Lib "User" (ByVal Hwnd As Integer) As Integer
Declare Function GetWindow Lib "User" (ByVal Hwnd As Integer, ByVal wCmd 
 &nbsp; As Integer) As Integer
Declare Function GetWindowLong Lib "User" (ByVal Hwnd As Integer, ByVal nIndex 
 &nbsp; As Integer) As Long
Declare Function PostMessage Lib "User" (ByVal Hwnd As Integer, ByVal wMsg 
 &nbsp; As Integer, ByVal wParam As Integer, ByVal lParam As Long) As Integer
Declare Function FindWindow Lib "User" (ByVal lpClassName As Any, ByVal 
 &nbsp; lpWindowName As String) As Integer
Const GW_OWNER = 4
Const GWL_STYLE = -16
Const WS_DISABLED = &amp;H8000000
Const WS_CANCELMODE = &amp;H1F
Const WM_CLOSE = &amp;H10
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp;&nbsp; Dim Hwnd As Integer
 &nbsp;&nbsp; Dim Y As Integer&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Hwnd = FindWindow(0&amp;, "Solitaire")
 &nbsp;&nbsp; If Hwnd = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "SOLITAIRE is not running"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Click to quit SOLITAIRE"
 &nbsp;&nbsp; End If&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Y = EndTask(Hwnd)&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; If Y &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "SOLITAIRE terminated"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Error - Cannot terminate SOLITAIRE"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>EndTask</b>. Type the following code for this function:<pre><code>Function EndTask(TargetHwnd As Integer) As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; Dim ReturnVal As Integer
 &nbsp;&nbsp; If TargetHwnd = hWndMe% Or GetWindow(TargetHwnd, GW_OWNER) = hWndMe% Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End
 &nbsp;&nbsp; End If&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; If IsWindow(TargetHwnd) = False Then GoTo EndTaskFail
 &nbsp;&nbsp; If (GetWindowLong(TargetHwnd, GWL_STYLE) And WS_DISABLED) Then GoTo EndTaskSucceed
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If IsWindow(TargetHwnd) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Not (GetWindowLong(TargetHwnd, GWL_STYLE) And WS_DISABLED) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = PostMessage(TargetHwnd, WM_CANCELMODE, 0, 0&amp;)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = PostMessage(TargetHwnd, WM_CLOSE, 0, 0&amp;)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoEvents
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; GoTo EndTaskSucceed
 &nbsp;&nbsp; 
EndTaskFail:
 &nbsp;&nbsp; ReturnVal = False
 &nbsp;&nbsp; GoTo EndTaskEndSub&nbsp;&nbsp;&nbsp; 
EndTaskSucceed:
 &nbsp;&nbsp; ReturnVal = True&nbsp;&nbsp;&nbsp; 
EndTaskEndSub:
 &nbsp;&nbsp; EndTask% = ReturnVal
End Function
</code></pre>
</li>
</ol>
</BODY>
</HTML>

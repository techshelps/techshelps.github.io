<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Authoring for Multiple Platforms</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_multi"></a></sup>Authoring for Multiple Platforms</h1>
<p>
Handan Selamoglu, Microsoft Corporation<br>
Based on a presentation by Kevin Drew Davis, Blue Marble</p>
<p>
November 20, 1996</p>
<h2>Introduction</h2>
<p>
As today’s Web browsers race to embrace new Hypertext Markup Language (HTML) standards from the World Wide Web Consortium (W3C) and (at times) create their own extensions, it’s often difficult to keep up with the latest details: Which browser supports which HTML tags? How can you create sophisticated sites without alienating a large segment of your audience? As a Web author or designer, what are the tricks involved in making your site “degrade gracefully”—that is, ensuring that your site is usable across browsers? This article provides a checklist of guidelines for Web authors who wish to create content for multiple browsers, including Microsoft® Internet Explorer and Netscape Navigator.</p>
<p>
The article is based on the presentation “Making Your Content Viewable on Multiple Platforms,” by Kevin Drew Davis at the Site Builder Conference, October 28-30, 1996, in San Jose, California. Kevin Davis is Director of Interactive Development at Blue Marble (<a href="http://www.bluemarble.com/">http://www.bluemarble.com/</a>).</p>
<h2>General Design Guidelines</h2>
<p>
Before we dive into specifics, here are some general guidelines to follow when designing your Web pages.</p>
<p>
<b>Chart your options.</b> When you author your Web pages, it’s a good idea to start with a chart of features you wish to include on your pages (for example, tables, frames, controls), and map these against the browser support available for each feature. For example, if you’re designing frames, you’ll need to know that Microsoft Internet Explorer 2.1 on the Mac doesn’t support frames, and you’ll need to provide a way for your Mac readers to view the content. Check BrowserWatch (http://browserwatch.iworld.com) for a compilation of browsers and technology support information. For details on HTML support in Internet Explorer 3.0, see <a href="msdn_htmlauth.htm">"HTML Authoring Features for Internet Explorer 3.0"</a> </p>
<p>
<b>Avoid large downloads on your main page.</b> One sure way to alienate your readers is to force them to download a large control or graphic on your home page. If you do decide to include downloads (for example, controls or plug-ins) on your site, specify the system requirements and size of the download and make it optional. It also helps to add a simple script to allow users to cancel out of a lengthy download (see <a href="#addcontrol">Adding Controls to Your Home Page</a> below). </p>
<p>
<b>Remove the resource fork for your images and documents.</b> Resource forks (which store resource and preference information for Apple® Macintosh® files) are Macintosh specific and will take up unnecessary space. Clean up your files by opening them on the PC and selecting “Save As”.</p>
<p>
<b>Double- and triple-check your code.</b> When it comes to HTML syntax errors such as missing quotes or end-tags, not all browsers are as forgiving as Microsoft Internet Explorer. For example, if you miss a closing quotation mark in your HREF statement, Internet Explorer will assume it’s there, but Netscape Navigator will ignore the entire link specification. You can avoid a lot of headaches by making sure that your HTML syntax is clean.</p>
<p>
<b>Layer client-side and server-side image maps, and offer a text option.</b> If you're using a client-side image map, also include a server-side Common Gateway Interface (CGI) script to accommodate browsers that don’t support image maps. It's also important to add a text option so that readers who browse your site with images turned off can find the basic information.</p>
<p>
<b>Use good tools, especially HTML checkers.</b> It's easy to make HTML syntax mistakes (for example, missing delimiters and quotes), even if you're an HTML guru. Avoid headaches by investing in a good HTML editor that will check the syntax of your pages. There are a number of tools out there, for example, SoftQuad's HoTMetaL for the PC and BBEdit for the Macintosh. Choose the one that best fits your needs.</p>
<p>
<b>Know your audience.</b> The choices you make, the technologies you use, and the browsers you target should be determined, in large part, by the usage patterns of your target audience. Are your readers consumers? If so, chances are they're also AOL users. Are they techies? Then they're more likely to use Mac and PC browsers. Are they predominantly Mac users? Remember that they won't be able to view Java™ applets, so code accordingly.</p>
<p>
<b>Branch for browsers where possible.</b> Instead of coding your HTML to comply with the lowest common denominator (which can be very restricting), redirect your users to pages customized for specific browsers. You can use server-side scripting to check for browsers. If you have an international audience, also consider adding language options. (Keep in mind, though, that maintaining multiple sets of pages can be very resource intensive.)</p>
<h2>Proper Graphics Usage</h2>
<p>
<b>Use the 216-color "safety" palette.</b> Here's a little-known fact: The 256-color Windows® palette is different from the color palette available on the Mac. Say you're using the 256-color palette to design your graphics and they look great on your system. This is no guarantee that your graphics will display the same on someone else's machine—they might show up with entirely different colors. To prevent this from happening, use the “safety” palette, which works on everything, including old SVGA monitors. You pay a very small price (you lose only a few colors) to ensure that your graphic displays correctly on different platforms.</p>
<p>
<b>Always include the ALT parameter in your &lt;IMG&gt; statements.</b> Use the ALT parameter in your &lt;IMG&gt; statement to provide a text placeholder for the image; for example:</p>
<pre><code>&lt;IMG SRC="my_image.gif" ALT="Click here for more info"&gt;
</code></pre>
<p>
ALT tags have two advantages: 
<ul type=disc>
<li>
The browser will load the text first, so readers can start reading while they’re waiting for the full graphic.<br><br></li>
<li>
You can provide information to readers who are browsing with graphics turned off.</li>
</ul>
<p>
<b>Always include WIDTH and HEIGHT specs in your &lt;IMG&gt; statements.</b> Internet Explorer formats the page with text first and adds the graphics later. If you don’t specify the size of your graphic, the browser will have to reformat your page when it downloads the graphic and obtains that information. This results in an annoying screen flicker. Instead, give Internet Explorer enough information in the &lt;IMG&gt; statement so it can format your page correctly on the first try.</p>
<p>
<b>Try to provide text-only navigation.</b> Many power users choose to browse the Web with graphics turned off—a perfectly reasonable thing to do if you have a 14.4 connection. Instead of alienating these users, be sure to provide text elements for navigation. Say you have a graphical navigation bar. You can easily duplicate these links with a list of text items at the bottom of your page, or use text and graphics together in your navigation bar.</p>
<p>
<b>Choose the appropriate resolution for your readers.</b> If your audience consists of high-end PC users, you're pretty safe designing for an 800x600 screen. If you're targeting a more general audience, stick with 600x480 and keep your pages short—many of your users won't know how to scroll. (Amazing, but true!)</p>
<h2>Proper Table Usage</h2>
<p>
<b>Avoid nested tables.</b> It may be tempting to do wild and crazy things with tables, for example, you may want to use nested tables to create sophisticated page layouts. After all, HTML doesn't give you many choices for positioning images and words on the screen, so you have to be creative with what you get. Either resist the temptation or be very careful in your implementation. Some browsers (for example, Mosaic) don’t handle nested tables gracefully.</p>
<p>
<b>Lay out text and images before adding table tags.</b> You can ensure that your table data is complete and in the right order if you finalize the table text before you add the formatting tags. This method may also help you realize that you didn't need a table to present the information after all. Use tables for data, which is what they were meant for, not for layout.</p>
<p>
<b>Avoid specifying sizes in &lt;TD&gt; tags.</b> Fonts and sizes may be different on readers’ systems, so specific &lt;TD&gt; size parameters can result in truncated text.</p>
<p>
<b>If you use colors, choose them wisely.</b> Many browsers don’t support cell background colors, so if you’re using this feature, be cautious in your choice of colors. For example, white text on a black background will display correctly with Internet Explorer, but will disappear (because it will appear white on white) in Netscape Navigator 2.0. If you're using color in your tables, choose light backgrounds and dark text.</p>
<h2>Proper Frame Usage</h2>
<p>
<b>Build from the bottom up.</b> Frames can be frustrating if they’re not implemented correctly. Because frames are complicated, it’s best to add them after your site is functional. This way, it’s easier to check and test the functionality of your pages, and you’ll have a better understanding of whether your use of frames is necessary. Note that most users find framed sites confusing, so design wisely.</p>
<p>
<b>Target="_top" is your friend.</b> This target value gets you to full-screen mode no matter how deep you are in your frameset. (It's like a “reset” feature that allows readers to return to the main page.) </p>
<p>
<b>Target="_new" can be confusing.</b> This target setting instructs the browser to open a new browser window. However, you don’t have any control over the size and placement of the new window, so this can be confusing to your users. They may not be aware that a new window is open and thus end up with a plethora of browser windows on their desktop.</p>
<p>
<b>Be careful, consistent, and original in naming frames.</b> Consistency and originality in your frame names will help you avoid conflicts with other framed sites. For example, let’s say you’ve named your table of contents frame "contents". Perfectly logical, isn't it? Precisely, which is why other sites may be using this frame name as well. You may find your table of contents appearing where you least expect it—in another site’s frame. Your frame names don't have to be elegant—just unique—and you can easily make them so by adding your site name as a prefix. </p>
<h2>Using the &lt;OBJECT&gt; Tag</h2>
<p>
<b>Cover all your bases.</b> You can support multiple browsers simply by adding complementary HTML tags to your &lt;OBJECT&gt; statements.</p>
<p>
Here's your typical &lt;OBJECT&gt; tag for placing an object (in this case, a Shockwave control) on your page:</p>
<pre><code>&lt;OBJECT ID="ShockWave1"
 &nbsp; CLASSID="CLSID:166B1BCA-3F9C-11CF-8075-444553540000"
 &nbsp; CODEBASE="http://www.macromedia.com/..."
 &nbsp; WIDTH=100 HEIGHT=100
 &nbsp; &gt;
&lt;PARAM NAME="swURL" VALUE="my_movie.dcr"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
What's wrong with this? Internet Explorer displays it beautifully, and will download the control if it isn't already on your system. Other browsers, however, do not understand the &lt;OBJECT&gt; tag and will not know what to do with this syntax.</p>
<p>
A better approach would be to use:</p>
<pre><code>&lt;OBJECT ID="ShockWave1"
 &nbsp; CLASSID="CLSID:166B1BCA-3F9C-11CF-8075-444553540000"
 &nbsp; CODEBASE="http://www.macromedia.com/..."
 &nbsp; WIDTH=100 HEIGHT=100
 &nbsp; &gt;
&lt;PARAM NAME="swURL" VALUE="my_movie.dcr"&gt;

<b>&lt;EMBED SRC="my_movie.dcr" ALT="Cool Shockwave Movie"</b>

<b> &nbsp; WIDTH=100 HEIGHT=100&gt;</b>

<b>&lt;/EMBED&gt;</b>

&lt;/OBJECT&gt;
</code></pre>
<p>
The &lt;EMBED&gt; tag we've added above allows browsers that don't support &lt;OBJECT&gt; to find and display the Shockwave control.</p>
<p>
What about browsers that don't support either tag (for example, Apple browsers)? You can add a &lt;NOEMBED&gt; tag with a replacement for the control (for example, an image that illustrates the control) to play it safe:</p>
<pre><code>&lt;OBJECT ID="ShockWave1"
 &nbsp; CLASSID="CLSID:166B1BCA-3F9C-11CF-8075-444553540000"
 &nbsp; CODEBASE="http://www.macromedia.com/..."
 &nbsp; WIDTH=100 HEIGHT=100
 &nbsp; &gt;
&lt;PARAM NAME="swURL" VALUE="my_movie.dcr"&gt;
&lt;EMBED SRC="my_movie.dcr" ALT="Cool Shockwave Movie"
 &nbsp; WIDTH=100 HEIGHT=100&gt;
&lt;/EMBED&gt;

<b>&lt;NOEMBED&gt;</b>

<b>&lt;IMG SRC="my_image.gif" ALT="Cool Shockwave Movie"</b>

<b> &nbsp; WIDTH=100 HEIGHT=100&gt;</b>

<b>&lt;/NOEMBED&gt;</b>

&lt;/OBJECT&gt;
</code></pre>
<p>
Now you have a syntax that will work for <i>all</i> browsers.</p>
<p>
If you have a Java applet that performs the same functionality as the Shockwave control, here's how you can provide access to it:</p>
<pre><code>&lt;OBJECT ID="ShockWave1"
 &nbsp; CLASSID="CLSID:166B1BCA-3F9C-11CF-8075-444553540000"
 &nbsp; CODEBASE="http://www.macromedia.com/..."
 &nbsp; WIDTH=100 HEIGHT=100
 &nbsp; &gt;
&lt;PARAM NAME="swURL" VALUE="my_movie.dcr"&gt;

<b>&lt;APPLET CODE="my_applet"</b>

<b> &nbsp; WIDTH=100 HEIGHT=100&gt;</b>

<b>&lt;IMG SRC="my_applet.gif" ALT="Cool Java applet"</b>

<b> &nbsp; WIDTH=100 HEIGHT=100&gt;</b>

<b>&lt;/APPLET&gt;</b>

&lt;/OBJECT&gt;
</code></pre>
<p>
Again, the IMG statement provides a static image to be displayed in browsers that support neither objects nor applets.</p>
<p>
The Blue Marble site (<u>http://www.bluemarble.com</u>/) provides a good example of this approach: The home page contains an HTML Layout Control for special effects. Mac users see an animated .GIF instead, and virtually everyone who comes to the site sees the essential elements.</p>
<h2>Using Scripting</h2>
<p>
<b>Java is not entirely stable on some platforms.</b> Keep this in mind before you add Java code to your pages, and be sure to test your code on various browsers (see <a href="#testpage">Testing Your Pages</a> below).</p>
<p>
<b>Scripting is currently available only to Internet Explorer and Netscape Navigator users.</b> For example, the AOL browser does not support MicrosoftVisual Basic® Scripting Edition (VBScript) or JavaScript, so try not to make it mandatory for viewing your site. Make sure that your site functions (at least at some level) without the scripting code.</p>
<p>
<b>Declare your scripting language.</b> If you don't specify the scripting language you're using in the &lt;SCRIPT&gt; tag, for example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
...
&lt;/SCRIPT&gt;
</code></pre>
<p>
the browser will assume the default language set for the browser. Since scripting languages use different syntax, you may end up with scripting errors.</p>
<p>
<b>Use comment tags.</b> Delimit your script with comment tags:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
...
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Otherwise, your script will be displayed as text in browsers that don't support the &lt;SCRIPT&gt; tag, and Netscape Navigator will attempt to read the code as JavaScript, resulting in syntax errors.</p>
<h2><a name="addcontrol"></a>Adding Controls to Your Home Page</h2>
<p>
If you're adding a large control (let's say, the HTML Layout Control) to your home page for downloading, be sure to give your users the option to cancel out of the download. A simple script that checks the <i>DrawBuffer</i> property of the control will do this for you:</p>
<pre><code>sub window_onload
 &nbsp; on error resume next
 &nbsp; REM
 &nbsp; c.drawbuffer=140000
 &nbsp; if (err) then
 &nbsp; REM
 &nbsp;&nbsp;&nbsp;&nbsp; document.write "&lt;html&gt;&lt;body bgcolor=FFFFF&gt;&lt;center&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; Put HTML here for users who cancel out of downloading
 &nbsp;&nbsp;&nbsp;&nbsp; the control
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/center&gt;&lt;/html&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; document.close
 &nbsp; end if
end sub
</code></pre>
<h2><a name="testpage"></a>Testing Your Pages</h2>
<p>
Finally, test your Web pages using as many browsers as possible, especially:
<ul type=disc>
<li>
Internet Explorer<br><br></li>
<li>
Netscape Navigator<br><br></li>
<li>
Mosaic<br><br></li>
<li>
Lynx</li>
</ul>
<p>
Mosaic provides a good "safety" test—if your pages work in Mosaic, they're likely to work in the majority of browsers. Lynx is a text-only browser, so it allows you to ensure that your site works with graphics turned off.</p>
<h2>In Summary</h2>
<p>
As a Web author or developer, you have no control over the browsers your readers are using. Following the tips we've provided in this article will help you ensure that your Web site displays and functions correctly (or, at least, "degrades gracefully") on most browser platforms. The four rules of thumb: Know your audience, know your browsers, use good tools, and create great sites!</p>
</BODY>
</HTML>

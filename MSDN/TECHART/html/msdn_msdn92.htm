<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 92: Using the Shell Statement to Execute MS-DOS Programs</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn92"></a></sup>Tip 92: Using the Shell Statement to Execute MS-DOS Programs</h1>
<p>
May 22, 1995</p>
<h2>Abstract</h2>
<p>
From within a Visual Basic® application, you can execute an MS-DOS® program. This article explains how to use the <b>Shell</b> statement in conjunction with the Windows® application programming interface (API) <b>GetNumTasks</b> function to execute an MS-DOS program.</p>
<h2>Running MS-DOS Programs</h2>
<p>
A very popular set of utilities called PKZIP and PKUNZIP can be found on bulletin board systems throughout the world. These two utilities are used to compress and decompress a group of related files. The resulting ZIP file can then be distributed as one single entity. Because these programs are used by people daily, you may need to allow your user to execute these MS-DOS programs (or an entirely different MS-DOS program) from within your Visual Basic® application program.</p>
<p>
Visual Basic's <b>Shell</b> function can be used to execute another program. To run a program, you would issue the statement:</p>
<pre><code>X = Shell("program name",[windowstate]])
</code></pre>
<p>
The program name must be a valid MS-DOS or Windows®-based-application name and may optionally include any command-line parameters needed by the program. The second parameter tells Visual Basic how to execute the program. There are five possible values for this argument, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=12%>1</td>
<td width=88%>Normal size, program retains focus</td>
</tr>
<tr valign=top>
<td width=12%>2</td>
<td width=88%>Minimized, program retains focus</td>
</tr>
<tr valign=top>
<td width=12%>3</td>
<td width=88%>Maximized, program retains focus</td>
</tr>
<tr valign=top>
<td width=12%>4</td>
<td width=88%>Normal size, Visual Basic application retains focus</td>
</tr>
<tr valign=top>
<td width=12%>5</td>
<td width=88%>Minimized, program does not retain focus</td>
</tr>
</table><br>
<p>
While the MS-DOS program is executing, you can use the <b>SendKeys</b> statement to send specific keystrokes to the application. In this manner, you can actually control what the MS-DOS program does or provide some required input.</p>
<p>
In addition, you can determine when the secondary program has terminated by using the <b>GetNumTasks</b> function. To use the <b>GetNumTasks</b> function in your Visual Basic application, you must include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form:</p>
<pre><code>Private Declare Function GetNumTasks Lib "Kernel" () As Integer
</code></pre>
<p>
The <b>GetNumTasks</b> function does not require any arguments but simply returns an integer value set to the number of tasks that are currently running under Windows. Therefore, to determine when your MS-DOS program has finished executing, call <b>GetNumTasks</b> first, saving the value it returns in a variable. After the MS-DOS program has finished executing, call the <b>GetNumTasks</b> function a second time to find out if the number of tasks has decreased by a value of one. If the value has decreased, you know that your MS-DOS program has finished executing and you can return control to your Visual Basic application.</p>
<h2>Example Program</h2>
<p>
This program shows how you can use the <b>Shell</b> function and the <b>GetNumTasks</b> function to execute an MS-DOS program. This program assumes that you have the PKUNZIP program stored in the UTILS directory and that you have previously created a destination directory called DESTDIR on your hard drive.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following statements to the General Declarations section of Form1:<pre><code>Dim ActiveApps As Integer
Private Declare Function GetNumTasks Lib "Kernel" () As Integer
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim AppDir As String
 &nbsp;&nbsp; Dim Zip As String
 &nbsp;&nbsp; Dim Y As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; AppDir = "c:\destdir"
 &nbsp;&nbsp; ActiveApps = GetNumTasks()
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Zip = "c:\utils\pkunzip " &amp; "c:\destdir\" &amp; "test.zip" &amp; " " &amp; AppDir
 &nbsp;&nbsp; X = Shell(Zip, 2)
 &nbsp;&nbsp; SendKeys "%{enter}EXIT%{ }n"
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Do While GetNumTasks() &lt;&gt; ActiveApps
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y = DoEvents()
 &nbsp;&nbsp; Loop
 &nbsp;&nbsp; MsgBox "Pkunzip is finished", 0, "Demo Program"
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q96844. "How to Determine When a Shelled Process Has Terminated."</p>
</BODY>
</HTML>

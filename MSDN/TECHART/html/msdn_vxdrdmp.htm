<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The VxD Writer's Resource Book, or VxD Writing as a Martial Art</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_vxdrdmp"></a></sup>The VxD Writer's Resource Book, or VxD Writing as a Martial Art</h1>
<p>
Ruediger R. Asche<br>
Microsoft Developer Network Technology Group</p>
<p>
November 1995</p>
<h2>Abstract</h2>
<p>
Following up on the Microsoft® Development Library's <a href="msdn_lildev.htm">"The Little Device Driver Writer,"</a> this article presents an overview of virtual device driver (VxD) programming and a comprehensive reading list.</p>
<h2>Introduction</h2>
<p>
With the introduction of the Microsoft® Windows® 95 operating system, virtual device drivers (VxDs) have evolved from a very special and somewhat playful concept to an integral system component. Almost all device drivers in Windows 95 are implemented as VxDs. Consequently, many tasks that were previously solved by MS-DOS® or Microsoft Windows® user-mode drivers must now be tackled by VxDs. The information about writing VxDs is rather scattered. In this article, I will present a road map for writing Windows 95 VxDs. Every item on the Microsoft Development Library CD that is related to VxD writing should be included here. (Throughout this article, all titles that start with a Q number are located in the Knowledge Base and Bug Lists section of the Development Library. Other Development Library locations are indicated in parentheses after the title.) I have also snooped around in the world outside Microsoft. Whatever I could find about writing VxDs is somewhere in here also.</p>
<p>
It is my hope that whatever your experience in writing VxDs, this article will present something new and helpful to you.</p>
<h3>Organization of the Road Map</h3>
<p>
This article is designed to provide information to anyone involved in VxD writing in any form. The analogy I chose is the level ranking scheme I experienced in my Tae Kwon Do school. You should assess yourself according to the following scheme to decide where to start reading.</p>
<p>
<b><i>White Belt:</i></b> You are a white belt student if you don't know anything about PC architecture, let alone Windows architecture, or where to start. After reading this article, you will hopefully pass this state.</p>
<p>
<b><i>Yellow Belt:</i></b> You have a blurry idea about how to go about things, but you need to figure out how an IBM®-compatible PC works.</p>
<p>
<b><i>Blue Belt:</i></b> You know the Intel architecture, but you don't know a whole lot about the Windows enhanced-mode operating system (VMM and VxD) architecture.</p>
<p>
<b><i>Purple Belt:</i></b> You know (roughly) how the VMM (virtual machine manager) and VxDs work, but you have never built a VxD and don't know how to debug one.</p>
<p>
<b><i>Brown Belt:</i></b> You are familiar with writing VxDs, but you need more information on how to use VMM and VxD services. You want to write a VxD that needs to virtualize a hardware device or that supports an MS-DOS terminate-and-stay-resident (TSR) program that your company has shipped for a long time.</p>
<p>
<b><i>Black Belt:</i></b> You are an experienced VxD writer and want to enhance the functionality of the VMM through a VxD into an exciting and previously unexplored area.</p>
<p>
As happens frequently in the martial arts, you will want to go back and forth in your studies in order to review previous materials and peek into more advanced areas of study.</p>
<p>
There is not a whole lot of text in this article. I feel that most of what is out there in the market covers the area of VxD programming fairly comprehensively, and I'd rather let the material speak for itself instead of generating useless noise. However, in a few places I added a paragraph or two to clarify where certain things fit in.</p>
<h3>Disclaimers</h3>
<p>
I have not tried to stick to any particular party line while compiling this list. There is a long and continuous discussion about what can and/or should be done with VxDs, and what the problems and advantages of describing undocumented data structures are. I certainly do have an opinion about these issues, but the most important thing in this article was to present you with as close to a one-stop shopping place for VxD information as I could get. Some of the sources I refer you to contain information that is not documented and/or endorsed by Microsoft.</p>
<p>
I annotated everything I introduce, assuming that you are a professional developer whose primary interest is to build a stable and working device driver that does something useful (you will notice that a lot of samples demonstrate rather playful little diagnostic tools that may or may not be of use to you). I annotated and sorted all of the sources of information in a way that I feel makes it easier for you to find a safe and efficient way through the jungle of VxD programming.</p>
<h3>And Finally...</h3>
<p>
Information management is not an easy task. I have tried to make this compilation as comprehensive and well organized (in other words, useful) as possible, but I don't say there's nothing that fell through the cracks. I encourage you to submit your own recommendations for articles and other material. The magazines I consulted are <i>Dr. Dobb's Journal</i>, <i>Windows/DOS Developer's Journal</i>, <i>Windows Sources</i>, and <i>PC Magazine</i>.</p>
<h2>All Levels: What Everyone Should Know</h2>
<p>
This section contains items that are useful for beginners as well as advanced device driver writers.</p>
<p>
Hazzah, Karen. <i>Writing Windows VxDs and Device Drivers</i>. Lawrence, KA: R&amp;D Publications, Inc., 1995.</p>
<p>
My comment: Probably the only really systematic and thorough introduction to VxD writing in existence at the time this article was written. Contains some fundamentals about hardware architecture as well as an introduction to the VMM and a number of working VxD samples.</p>
<p>
Windows Device Driver Kit (Product Documentation, DDKs)</p>
<p>
Although the DDK is, strictly speaking, not necessary to write VxDs, you'll probably want to refer to the DDK documentation to determine details of the system services.</p>
<p>
<a href="msdn_lildev.htm">"The Little Device Driver Writer"</a> (Technical Articles, Windows Articles, Driver Articles)</p>
<p>
OK, how's that for some shameless self-promotion? This article has been around for over a year now, but it is pretty much a one-size-fits-all introduction to device driver writing. It contains a little bit of operating system architecture, a discussion of tools and debugging, and even a mention of Santa Claus. So there. You won't find any more self-promotion in this article, I promise.</p>
<h2>Yellow Belt Level: The PC Architecture</h2>
<p>
The VMM is an operating system that, among other things, divides CPU time between tasks. Although Windows 95 refines the smallest schedulable unit to be a thread instead of a process, and the notion of a process itself has also taken on a different meaning with Windows 95, the concept of a virtual machine (VM) is still central to the VMM. Except for some rather specialized types of VxDs, every VxD must be aware of the existence of VMs and be able to arbitrate between VMs.</p>
<p>
To understand virtual machines, you must familiarize yourself with the architecture of the Intel® 80386-compatible (and later) processors, to which Windows 95 is tailored. There are many books available that cover the 80386 architecture. I found it most useful to go back to the source:</p>
<p>
<i>The 386 DX Microprocessor Programmer's Reference Manual</i>. Intel Corporation, 1990 (order number 230985-003).</p>
<p>
Here are a few Knowledge Base articles and specifications that you may find useful for more information on architectural issues:</p>
<p>
Q57480, "Intel Phone Number for Information About EMS Specification"</p>
<p>
Q99357, "Hardware Interrupt Priorities—Background and Usage"</p>
<p>
Q104418, "Direct Memory Access (DMA) Channels and Descriptions"</p>
<p>
Q52196, "Serial Communications Parity Definition"</p>
<p>
Q71704, "MS-DOS: Reasons for A20 Line Switching"</p>
<p>
"Extended Memory Specification (XMS) 3.0" (Specifications)</p>
<p>
"Extended Capabilities Port (ECP) Specifications" (Specifications)</p>
<p>
"Microsoft Flash File System Media Control Structures Specification 1.0" (Specifications)</p>
<p>
You might also want to check another technical article, "The Tao of Interrupts" (MSDN Library Archive Edition, Technical Articles, Windows Articles, Driver Articles, Windows [16-bit] Only), for some general (as well as more specific) information on interrupts.</p>
<p>
The market contains a myriad of books and articles about PC architecture. Most of the information is buried in discussions about system diagnostic tools. Here are four pretty random selections I found:</p>
<p>
Kyle, Jim and Chip Rabinowitz. "How the 8259 Programmable Interrupt Controller Manages External I/O Devices." <i>Microsoft Systems Journal</i> 4 (May 1989).</p>
<p>
Knoblaugh, Rick. "Eavesdropping on Interrupts." <i>Dr. Dobb's Journal</i> (November 1993).</p>
<p>
Miles, Troy A. "Writing PCMCIA Software." <i>Dr. Dobb's Journal</i> (June 1994).</p>
<p>
Prosise, Jeff. "DMA and Memory Managers." <i>PC Magazine</i> (December 6, 1994).</p>
<h2>Blue Belt Level: The Windows 95 and VMM Architecture</h2>
<p>
Windows 95 is an evolved operating system. Thus the architecture of Windows 95 is also the architecture of Windows 3.<i>x</i> as well as the architecture of MS-DOS; there is even a small part of Windows architecture that is relevant to VxD writers. The following list covers the necessary pieces of all of the above operating systems. First, let's look at the material that is on the Development Library CD:</p>
<p>
Q32905, "Windows Version History"</p>
<p>
Q118331, "How to Search for Windows DDK Articles by KB Subcategory"</p>
<p>
Q51737, "Expanded Memory under Windows 3.0"</p>
<p>
Q82787, "Meaning of LocalTSRs= in SYSTEM.INI"</p>
<p>
<i>MS-DOS Programmer's Reference 6.0</i> (Books and Periodicals)</p>
<p>
"MS-DOS 6 Specifications" (Specifications)</p>
<p>
"EMM386 I/O Trapping Extensions" (Specifications)</p>
<p>
"TSR Support in Microsoft Windows Version 3.1" (MSDN Library Archive Edition, Technical Articles, Windows Articles, Driver Articles, Windows [16-bit] Only)</p>
<p>
"Floating-Point in Microsoft Windows" (MSDN Library Archive Edition, Technical Articles, Windows Articles, Driver Articles, Windows [16-bit] Only)</p>
<p>
"Microsoft Windows for Workgroups Version 3.1: Architecture Highlights" (MSDN Library Archive Edition, Backgrounders and White Papers, Operating Systems)</p>
<p>
"Microsoft Windows Operating System 3.1 and Improved Hard Disk Access" (MSDN Library Archive Edition Backgrounders and White Papers, Operating Systems)</p>
<p>
The following group of Knowledge Base articles elaborates on specific VxDs or parts of the VMM. Several of these articles also present VxD code that you may find useful on the brown and black belt levels.</p>
<p>
Q75006, "Virtual Communications Driver Functional Structure"</p>
<p>
Q75008, "Virtual Display Device I/O Trapping"</p>
<p>
Q75009, "Using Call_Priority_VM_Event"</p>
<p>
Q75864, "Async VMM Services May Be Called by Interrupt Handlers"</p>
<p>
Q77403, "SAMPLE: User Interaction w/ a VxD Using Message Mode Services"</p>
<p>
Q78151, "Using the Interrupt 2Fh Critical Section Services"</p>
<p>
Q78325, "Ring Protection Under Windows 3.1"</p>
<p>
Q83658, "INF: Version Information Resources in VxDs"</p>
<p>
Q83726, "Int 12h and Windows Enhanced Mode (demonstrates Assign_Device_V86_Pages service)"</p>
<p>
Q90796, "Instanced Data Management in Enhanced Mode Windows"</p>
<p>
Q92407, "API Translation Buffers in Enhanced Mode Windows"</p>
<p>
Q100579, "Claiming Critical Sections on Timer Ticks"</p>
<p>
This group of items focuses on new elements of the Windows 95 architecture:</p>
<p>
King, Adrian. "Windows, the Next Generation: An Advance Look at the Architecture of Chicago" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, January 1994)</p>
<p>
Pietrek, Matt. "Stepping Up to 32 Bits: Chicago's Process, Thread, and Memory Management" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, August 1994)</p>
<p>
Oney, Walter. "Extend Your Application with Dynamically Loaded VxDs Under Windows 95" (Microsoft Systems Journal, 1995 Volume 10, May 1995)</p>
<p>
"Plug and Play SCSI: Designing to the New Standard" (Technical Articles)</p>
<p>
Q117567, "How 16-Bit and 32-Bit Programs Multitask in Windows 95"</p>
<p>
"Microsoft Windows and the Plug and Play Framework Architecture" (Backgrounders)</p>
<p>
"Networking in Windows 95: Adding Value to Connected Windows-Based PCs" (Backgrounders)</p>
<p>
"PCMCIA Card Support in Windows 95" (Backgrounders)</p>
<p>
"Plug and Play BIOS Functionality and Windows 95" (Backgrounders)</p>
<p>
The following items give you a good idea on how to tackle the mysterious area of DMA programming:</p>
<p>
"Virtual DMA Services (VDS) Specification 1.0" (Specifications)</p>
<p>
Q124729, "How to Program DMA Transfers in the Protected Mode Windows Environment"</p>
<p>
Q63937, "SAMPLE: DMA in Windows 3.0"</p>
<p>
"Ask Dr. GUI #13: Safe DMA" (MSDN Library Archive Edition, Technical Articles, Ask Dr. GUI)</p>
<p>
Also, the <i>Virtual Device Adaptation Guide</i> (VDAG) from the Windows 3.0 and Windows 3.1 DDKs provides a very good introduction to the enhanced-mode Windows architecture. The Windows 3.1 DDK is in the Development Library under Product Documentation, DDKs.</p>
<p>
Believe it or not, the VMM has been around for a long time—to be more precise, since Windows version 2.11. This almost antique article provides some of the pioneer information about the very early days of the VMM:</p>
<p>
Duncan, Ray. "Microsoft Windows-386: Creating a Virtual Machine Environment." <i>Microsoft Systems Journal</i> 2 (September 1987).</p>
<p>
King, Adrian. <i>Inside Windows 95</i>. Redmond, WA: Microsoft Press, 1994.</p>
<p>
The following article is an excellent discussion of the new layered file system architecture and how a VxD can hook into it:</p>
<p>
Mitchell, Stan. "Monitoring Windows 95 File Activity in Ring 0." <i>Windows/DOS Developer's Journal</i> 6 (June 1995).</p>
<p>
Re-read the "Disclaimers" section earlier in this article, and then check out the following books:</p>
<p>
Schulman, Andrew. <i>Unauthorized Windows 95</i>. Foster City, CA: An International Data Group Company, 1995.</p>
<p>
Schulman, Andrew. <i>Unauthorized Windows 95: A Developer's Resource Kit.</i> Foster City, CA: An International Data Group Company, 1995.</p>
<h2>Purple Belt Level: Building and Debugging VxDs</h2>
<p>
In the Tae Kwon Do school I used to attend, the promotion to purple belt was very special because it meant that in your promotion test you had to break a board to pass. At your purple level, you have acquired all the knowledge to write a VxD, but you don't yet know how to do it. Let's go over the necessary materials.</p>
<h3>Tools</h3>
<p>
To build a VxD, you will need an assembler or a 32-bit C compiler (or both) to build object files, and a linker that can generate VxD executables. The linker that is shipped with Visual C++™ 2.2 and later accepts the directive <b>/VxD</b>, which has the linker emit an LE file that is required for VxDs. If you choose to use Microsoft tools, you will want to check with the product documentation for Visual C++. Also, to use the assembler, you may want to check with MASM documentation:</p>
<p>
<i>Macro Assembler 6.11 for Windows NT</i> <i>(32-bit)</i> (Product Documentation, Languages)</p>
<p>
However, you do not need to rely on Microsoft tools to build your VxD. I found one article that describes an alternative tool. This is not an endorsement—I do not imply that this tool is any better or worse than any of the other tools out there. I have never used anything but Microsoft tools and therefore do not know anything about the quality and ramifications of this tool:</p>
<p>
Nicolaisen, Nancy. "VxDs Made Easy." <i>Windows Sources</i> 3 (April 1995).</p>
<p>
To debug a VxD, you can use either WDEB386.EXE (which, ironically, is documented in Chapter 5 of <i>Programming Tools</i> in the Windows 3.1 SDK) or NuMega's SoftICE for Windows debugger. Here are some articles on the Development Library CD that relate to debugging with WDEB386:</p>
<p>
Q58010, "WDEB386 Debugger's Use of COM Port"</p>
<p>
Q64123, "PRB: Encountering an INT01 with WDEB386"</p>
<p>
Q74605, "Advanced WDEB386 Features and Tips"</p>
<p>
Q75252, "Tips on Installing WDEB386"</p>
<p>
Q76473, "PRB: No Output from VxD Debug_Out and Trace_Out Macros"</p>
<p>
Q77987, "Debugging GP Faults with WDEB386"</p>
<p>
Q85897, "WDEB386-Compatible Timing Card Available"</p>
<p>
Q105275, "Using the 'BR' Command in WDEB386.EXE"</p>
<p>
Q73333, "PRB: WDEB386 Does Not Find Driver Symbol Files"</p>
<p>
"Ask Dr. GUI #8: Ctrl+Alt+Del Behavior" (MSDN Library Archive Edition, Technical Articles, Ask Dr. GUI)</p>
<p>
<a href="msdn_dynvxd.htm">"Enhancing WDEB386 with External Debugger Commands"</a> (Technical Articles)</p>
<p>
An interesting tidbit of information on kernel debugging can be found in:</p>
<p>
Bonneau, Paul and Neil Sandlin. "Debugging Hung Applications Revisited." <i>Windows/DOS Developer's Journal</i> 5 (February 1994).</p>
<p>
The sample pointed to by article Q76301, "SAMPLE: Basic Virtual Device (VxD) Structure," contains a VxD skeleton on which you can build your own VxD. A good starting point for Windows 95 VxDs written in C is the CVXD32 sample from the Windows 95 DDK (available on the Microsoft Development Platform).</p>
<h4>Information about device driver writing</h4>
<p>
The following sources can be used for information on the VxD development cycle:</p>
<p>
Thielen, D. and Bryan Woodruff. <i>Writing Windows Virtual Device Drivers</i>. Reading, MA: Addison-Wesley, 1994.</p>
<p>
Prosise, Jeff. "Adventures in Flatland with VxDs." <i>PC Magazine</i> (May 31, 1994), pp. 291-297.</p>
<p>
<a href="msdn_chicvxd.htm">"What's New in Windows 95 for VxD Writers?"</a> (Technical Articles, Windows Articles, Driver Articles)</p>
<p>
"VxD Samples: Demonstrate the Use of a Generic VxD" (Sample Code, Book and Periodical Samples, Microsoft Systems Journal Samples)</p>
<p>
Finally, here are some items on the Development Library CD that I found to be useful regarding VxD programming in general:</p>
<p>
"Relocatable Object Module Format" (MSDN Library Archive Edition, Technical Articles, C/C++ Articles)</p>
<p>
Q65673, "Explanation of Device Development Kit (DDK)"</p>
<p>
Q118891, "Installing and Using the Debugging Version of Windows"</p>
<p>
Q46734, "Where to Find Information on Writing TSRs"</p>
<p>
Q84000, "Obtaining a Virtual Device (VxD) ID Number"</p>
<p>
And here are outside items I found that elaborate on a system service:</p>
<p>
Bonneau, Paul. "Windows Q&amp;A." <i>Windows/DOS Developer's Journal</i> 6 (March 1995).</p>
<p>
Matthews, Don. "Porting VxDs from Windows 3.1 to Windows 95." <i>Dr. Dobb's Journal</i> (November 1995).</p>
<p>
Oney, Walter. "Building Device Drivers That Conform to the Windows 95 Plug and Play Standard." <i>Microsoft Systems Journal</i> 10 (December 1995).</p>
<h2>Brown Belt Level: Using VxDs to Virtualize Hardware and to Support MS-DOS Applications</h2>
<p>
One of the blessings and curses (at the same time!) of VxDs is that they are extremely powerful. It is a blessing because it makes the operating system very extensible; it is a curse because there are no defined interfaces between VxDs that do more than they are supposed to do, which makes VxD writing messy at times. There are a number of well-defined purposes of VxDs:
<ul type=disc>
<li>
Providing virtualization assistance for non-standard devices<br><br></li>
<li>
Replacing stock VxDs for non-standard hardware<br><br></li>
<li>
Implementing Plug and Play device drivers<br><br></li>
<li>
Implementing layered I/O drivers for Windows 95<br><br></li>
<li>
Providing support for MS-DOS applications and TSRs</li>
</ul>
<p>
On the brown belt level, we will look at the material that helps you with these tasks.</p>
<p>
The following material on the Development Library CD deals with the above issues. Most of these items are sample VxDs or TSRs that demonstrate specific programming techniques.</p>
<p>
"Understanding the Windows Virtual Pen" (MSDN Library Archive Edition, Technical Articles, Windows for Pen Computing Articles)</p>
<p>
"Callback: A VxD Sample That Demonstrates New Windows 95 Features" (Sample Code, Technical Article Samples, Win32 and Windows NT Samples)</p>
<p>
"WIN95VXD: Demonstrates Dynamic VxD Loading Capabilities of Windows 95" (Sample Code, Book and Periodical Samples, Microsoft Systems Journal Samples)</p>
<p>
"GDOSMEM: Demonstrates Shared Global Memory" (Sample Code, Product Samples, Languages and System Toolkits)</p>
<p>
"TDOSMEM: Passes Data Between a Windows Application and an MS-DOS TSR" (Sample Code, Product Samples, Languages and System Toolkits)</p>
<p>
Prosise, Jeff. "DOS Q&amp;A" ( Microsoft Systems Journal, 1995 Volume 10, May 1995) [discusses the use of a hidden VM]</p>
<p>
Pietrek, Matt. "Under the Hood" (Microsoft Systems Journal, 1995 Volume 10, September 1995) [discusses a performance-monitoring VxD]</p>
<p>
Q94702, "Architecture of Windows Pen Drivers"</p>
<p>
Q93469, "Complete Text PW0519: Virtual DMA Services (VDS)"</p>
<p>
Q124727, "How to Program DMA for Linear Addresses under Windows"</p>
<p>
Q67590, "SAMPLE: VxD Helps MS-DOS Application Query Screen State"</p>
<p>
Q68250, "SAMPLE: Capturing Global Interrupts in Enhanced Mode"</p>
<p>
Q68975, "I/O Device Serialization and Virtualization"</p>
<p>
Q74471, "Using Selectors from _Allocate_LDT_Selector Service"</p>
<p>
Q74472, "Initializing Virtual Devices and Hooking Interrupts"</p>
<p>
Q74516, "Binding a TSR to a VxD"</p>
<p>
Q89494, "SAMPLE: Hot Keys in Windows 386 Enhanced Mode"</p>
<p>
Also, the Windows 95 DDK (on the Development Platform) contains a large number of VxD samples. If you have the Platform, check them out.</p>
<p>
Here are some third-party articles I found that fit into this category:</p>
<p>
Olsen, Thomas. "Making Windows and DOS Programs Talk." <i>Windows/DOS Developer's Journal</i> 3 (May 1992). [discusses the possibilities of VMs to communicate via a VxD]</p>
<p>
Bonneau, Paul. "Identify the Running DOS Application from Windows." <i>Windows/DOS Developer's Journal</i> 3 (December 1992).</p>
<p>
Olsen, Thomas. "WinGate." <i>Windows/DOS Developer's Journal</i> 5 (January 1994).</p>
<p>
Tomlinson, Paula. "Virtualizing a DOS Device Driver with a VxD." <i>Windows/DOS Developer's Journal</i> 5 (May 1994).</p>
<p>
Tomlinson, Paula. "Yielding from a VxD: A Windows Cold Boot." <i>Windows/DOS Developer's Journal</i> 5 (July 1994).</p>
<p>
Mashlan, Robert. "Capturing Hot Keys in Windows." <i>Windows/DOS Developer's Journal</i> 6 (January 1995).</p>
<p>
Bonneau, Paul. "A VxD to Monitor DOS Output." <i>Windows/DOS Developer's Journal</i> 5 (May 1994). This is an update in the material covered in the following article:</p>
<p>
Bonneau, Paul. "Windows Q&amp;A." <i>Windows/DOS Developer's Journal</i> 6 (January 1995).</p>
<h2>Black Belt Level: Using VxDs to Do Everything Else</h2>
<p>
Unlike Windows NT kernel-mode device drivers, VxDs have the interesting property that, besides their original purpose as outlined in the brown belt section, they give you virtually unlimited access to the computer's resources. On the positive side, this property of VxDs allows you to accomplish fairly elaborate tasks, such as making very sophisticated TSRs compatible with enhanced-mode Windows, or even extend the scope of Windows (for example, by providing mechanisms that allow virtual machines to communicate with each other). On the downside, however, VxDs make it rather easy and attractive to take a deep plunge into sleaze country and do very bad things with VxDs, such as providing access to system data structures for applications.</p>
<p>
The following information is not for the squeamish. I urge you to use extreme caution when utilizing these sources—think twice or three times before deciding to use any of this in your code. For a few of these techniques, there is a legitimate use; everything else is relying on version-specific and, in parts, undocumented information.</p>
<p>
Let's first look at bimodal interrupt handlers (BIHs). This is basically a hack that was introduced into the Windows 3.1 VMM to relieve the problem of poor virtualized interrupt performance. A BIH is a user-mode interrupt handler that can be registered with the VMM to bypass the virtualization engine. There are two sources of information about BIHs:</p>
<p>
"Bimodal Interrupt Handlers" (MSDN Library Archive Edition ,Technical Articles, Windows Articles, Driver Articles, Windows [16-bit] Only)</p>
<p>
Hazzah, Karen. "Fast Interrupt Handling without VxDs." <i>Windows/DOS Developer's Journal</i> 4 (June 1993).</p>
<p>
Note that BIHs are not really a VxD programming issue; you do NOT write a VxD or VxD-related code to implement BIHs. Under Windows 95, the BIH support code has not changed; that is, existing BIHs will still work, but you should seriously consider writing a VxD to handle your interrupts instead.</p>
<p>
Other areas that are frequently addressed by VxDs are communication between virtual machines, and supporting virtual machines in the enhanced-mode Windows environment. Here are a few locations of VxD samples and articles that cover this area:</p>
<p>
"WINPOST and POSTMSG: Send Messages from an MS-DOS Application to a Windows Application," which accompanies the following <i>Microsoft Systems Journal</i> article:</p>
<p>
"MS-DOS Questions &amp; Answers" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, November 1994)</p>
<p>
Q72899, "SAMPLE: Calling PostMessage from a Virtual Device (VxD)"</p>
<p>
Q73185, "SAMPLE: Calling 16-bit Code from a Virtual Device (VxD)"</p>
<p>
"VDMD: Helps a Virtual Machine Determine Its Window State," which accompanies the following <i>Microsoft Systems Journal</i> article:</p>
<p>
"MS-DOS Questions &amp; Answers" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, May 1994)</p>
<p>
"V1INSTD: Determines Multiple Instances of the Same MS-DOS VM," which accompanies the following <i>Microsoft Systems Journal</i> article:</p>
<p>
"MS-DOS Questions &amp; Answers" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, July 1994)</p>
<p>
"MS-DOS Questions &amp; Answers" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, September 1994) [describes a VxD that allows a VM to emulate a hot key into enhanced-mode Windows]</p>
<p>
Q89705, "How VMs Can Communicate with VxDs"</p>
<p>
Q120565, "How to Read Text Mode Screen of MS-DOS Session in Windows"</p>
<p>
This last subsection contains material that is extremely interesting but also very dangerous:</p>
<p>
"VXD: Contains a VxD that Uses DPMI and Accesses the CR3 Register" (Sample Code, Book and Periodical Samples, Microsoft Systems Journal Samples, 1992 Volume 7, October 1992)</p>
<p>
Schulman, Andrew. "Go Anywhere and Do Anything with 32-bit Virtual Device Drivers for Windows" (MSDN Library Archive Edition, Books and Periodicals, Microsoft Systems Journal, 1992 Volume 7, October 1992)</p>
<p>
Schulman, Andrew. "Vexed by VxDs." <i>InfoWorld</i> (February 27, 1995).</p>
<p>
Schulman, Andrew. "Undocumented Corner." <i>Dr. Dobb's Journal</i> (December 1993). [a VxD displaying the list of VxDs]</p>
<p>
Zytaruk, Kelly. "Undocumented Corner." <i>Dr. Dobb's Journal</i> (January 1994). [a VM control block dissected]</p>
<p>
Zytaruk, Kelly. "Undocumented Corner." <i>Dr. Dobb's Journal</i> (February 1994). [discusses a VM explorer]</p>
<p>
Shmidt, Alex. "Undocumented Corner: Calling Ring 3 from Ring 0." <i>Dr. Dobb's Journa</i>l (March 1994).</p>
<p>
Mueller, Klaus. "Undocumented Corner." <i>Dr. Dobb's Journal</i> (April 1994). [think globally, act locally—about instanced data and Device_CB_area]</p>
<p>
Okazaki, Taku. "Undocumented Corner." <i>Dr. Dobb's Journal</i> (September 1994). [global EMM interface]</p>
<p>
Knoblaugh, Rick. "A Windows I/O Monitor." <i>Dr. Dobb's Journal</i> (September 1994).</p>
<p>
Schulman, Andrew. "Windows 90+5." <i>Dr. Dobb's Journal</i> (January 1995). [excerpts from <i>Unauthorized Windows 95</i>]</p>
<p>
Bonneau, Paul. "Windows Questions &amp; Answers." <i>Windows/DOS Developer's Journal</i> 5 (August 1994). [undocumented information on how a VxD can create a VM]</p>
<p>
Lawless, James. "Tech Tips." <i>Windows/DOS Developer's Journal</i> 5 (November 1994). [autostart of executables using the Int 21h callout interface]</p>
<p>
The most ambitious task I have ever seen a VxD attack is to try to make multitasking, timeslicing TSRs compatible with enhanced-mode Windows. Before there was Windows, there was a rather flourishing niche market for TSRs that multitasked DOS applications. Most of these TSRs would hook the timer interrupt and switch the applications' stacks after a given number of timer ticks.</p>
<p>
Being a multitasking operating system itself that uses virtualization as the core of DOS application multitasking, Windows enhanced mode does not work with these TSRs very well. Back when I was a support engineer for Microsoft, I had to deal with two projects along these lines, and I have a fairly good understanding of just WHY it is not a good idea to try to tweak the VMM to support such TSRs. Before I present you with a Knowledge Base article that I never finished about this topic, let me refer you to an article in which a colleague presents his observations about and approach to the same problem:</p>
<p>
Offen, Dave. "A Windows VxD for DOS Timeslice Multitasking." <i>Windows/DOS Developer's Journal</i> 6 (May 1995).</p>
<h3>And Here's My Take on the VMM with Third-Party Mulitaskers</h3>
<p>
A valid (and fairly well-known) technique for TSRs to implement limited multitasking under DOS is to hook into the timer interrupt and switch between stacks (and possibly program segment prefixes, or PSPs) of multiple processes (which may be other TSRs, code sequences embedded in the TSR, or TSR client applications), thereby preemptively multitasking between those processes. While this strategy works well under plain DOS, it is generally very hard to adapt to work with enhanced-mode Windows.</p>
<p>
When running in enhanced mode, Windows will provide a virtual environment to DOS applications and TSRs, even if they execute in the context of a protected-mode virtual machine such as the Windows environment executing in the system virtual machine. Here are some of the implications that follow from that design:
<ul type=disc>
<li>
The TSR will never "see" physical hardware interrupts but instead will only receive virtual interrupts that the VMM or a VxD has reflected into it. Thus, the virtual machine manager will always process interrupts first. There is no way for a real-mode application to process interrupts before the VMM. This architecture is enforced by the architecture of the Intel 80386 processor and affects the performance of interrupt processing. While a TSR can fairly efficiently multitask under plain DOS, the virtual interrupt environment under enhanced-mode Windows will slow down interrupt processing dramatically for applications running in virtual machines as well as global TSRs. A second level of multitasking above the virtual environment will not only not increase performance and responsiveness, but will typically further decrease it.<br><br></li>
<li>
Memory allocated dynamically from within a TSR will only be valid in the context of the virtual machine that ran when the allocation code was executing. Thus, if the global TSR is not sensitive to the possibility of running under an operating system that maintains a different level of multitasking, dynamically allocated memory from the TSR may not be valid at all times. Therefore, the TSR would need to submit a switch VM and callback (Int 2Fh, ax=1685) call every time it tries to access that kind of memory. A related issue is the possibility of concurrent access to the same data by multiple virtual machines. The TSR might need to implement some of the techniques outlined in the Knowledge Base article titled "How a TSR Can Serialize Access to Its Data" (Q84053).<br><br></li>
<li>
The DOS protected-mode interface (DPMI) environment provided by the VMM does not allow stacks to be switched while processing an interrupt reflected from protected mode to V86 mode. Trying to switch stacks on a (virtual) timer interrupt and not restoring it before returning from the interrupt will break the VMM and is therefore not feasible.<br><br></li>
<li>
Task-switching TSRs typically hook into many interrupts to make task switching more responsive. However, not all interrupts that real-mode TSRs will see under plain DOS will be reflected to V86 mode handlers for VMs running in protected mode. For example, keyboard and mouse interrupts reflected into the system virtual machine will typically not be reflected to the real-mode handler by the Windows drivers. Thus, if the TSR depends on processing those interrupts, it may not work as expected when running in the context of a protected-mode VM.<br><br></li>
<li>
The timing behavior in virtual machines will differ from plain DOS; that is, timer ticks will not be reflected into virtual machines in the same frequency that a TSR will see them under DOS.<br><br></li>
<li>
Windows may choose to assign different PSPs to processes running in different VMs; thus, task switchers that switch PSPs must be able to restore different PSPs if a Windows task switch has taken place between saving and restoring a process's PSP.<br><br></li>
<li>
The virtual machine manager keeps a critical section to prevent non-reentrant code, such as MS-DOS code, from being accessed from several processes concurrently. When several V86-mode threads are multitasked within the context of one virtual machine, it is the responsibility of the multitasking TSR to serialize access to critical code on both its own process level and the VMM's process level.<p class=tl>
To do so, the TSR should observe the INDOS flag provided by DOS as well as the Begin Critical Section (Int 2Fh, ax=1681h) and End Critical Section (Int 2Fh, ax=1682h) calls. Note that there is no possibility for enhanced-mode Windows to be sensitive to a mechanism to prevent reentrancy via a TSR-provided flag. For example, if the TSR code keeps a local flag that indicates whether a process can enter critical code or not, the VMM cannot be made aware of this flag and may still switch VMs and reenter the critical code.</P></li>
</ul>
<p>
Note that the issues discussed here are but some of the more common problems that can arise while trying to adapt those multitasking TSRs to work with the VMM. Many more issues may come up in specific setups.</p>
<p>
In general, it is very hard to make two preemptive multitasking operating systems cooperate with each other. Normally, the necessary effort to adapt TSR-based multitasking operating systems to run while enhanced-mode Windows multitasks below it includes at least the following:
<ul type=disc>
<li>
To rewrite the TSR to be Windows-aware<br><br></li>
<li>
To write a VxD that assists the TSR-based scheduler, possibly relocating code into or repeating it in the VxD<br><br></li>
<li>
To establish very close communication channels between the TSR and the VxD<br><br></li>
<li>
To instance data across virtual machines<br><br></li>
<li>
To take into account the possibility that one or more VMs run in protected mode (or even change their execution modes dynamically) and therefore may behave differently than under V86 mode</li>
</ul>
<p>
It may very well be the case that this effort is more costly than redesigning the TSR-based operating system altogether. In an ideal situation, the TSR would be deactivated entirely while Windows is running, and mechanisms that Windows and the VMM provide would be used to achieve the necessary multitasking. If this approach is not feasible, there are basically two possibilities to redesign the TSR to make it cooperate with the VMM more easily:
<ul type=disc>
<li>
The multitasking scheme is mapped to the VMM's multitasking; that is, each process will run in a VM of its own. This way, the VMM's already existing multitasking capabilities are taken advantage of, and arbitration conflicts between processes will be resolved by the VMM's built-in mechanisms. This solution may require a VxD that cooperates with the TSR to relocate process code and data into VMs.<br><br></li>
<li>
The entire scheduling mechanism as well as all processes themselves are executed in the context of only one VM, preferably a V86-mode VM because, due to the protected-mode/real-mode issues mentioned earlier, a V86-mode VM behaves more like "real" DOS and therefore runs the TSR with fewer modifications. This way, the entire multitasking scheme does not interfere with Windows multitasking in the first place.</li>
</ul>
<p>
In any case, the enhanced-mode startup broadcasts Int 2Fh, ax= 1605h and 1606h, respectively, can be used to inform the task switcher to switch to Windows-aware behavior. Likewise, the termination broadcasts can be used to reverse that behavior. Note that by using this technique, only one TSR can be shipped that is capable of working both with and without support by Windows.</p>
<p>
A TSR may create a new VM by monitoring the enhanced-mode Windows TSR identification broadcast Int 2Fh, ax = 160bh. This broadcast allows the TSR to specify an executable image file that is to be executed in the context of the system virtual machine. If this executable is not a Windows-based application, a new virtual machine is created.</p>
<p>
Any attempt to keep the multitasking on the TSR level fully functional even while Windows is multitasking below it is very likely to fail. At the very least, it will require a very good understanding of the architecture and the functionality of the VMM as well as a long development cycle for the adaptation.</p>
</BODY>
</HTML>

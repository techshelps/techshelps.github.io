<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The IShellLink Interface</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_shellnk2"></a>The IShellLink Interface</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: October 20, 1994</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3006">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the SHORTCUT sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
The next version of the Microsoft® Windows® operating system, Windows 95, has a new shell and a way to create shell links (also known as shortcuts) to items or objects in the shell. Shell links provide an easy method for users to access and manipulate objects regardless of the location and name of the object. For example, if a shell link is created to a text file, and if the original text file is subsequently renamed, the original shell link is updated by the shell without needing user intervention (that is, the user does not have to recreate the shell link). This is the second of two articles covering shell links. (The first article, <a href="msdn_shellnk1.htm">"Using Shell Links in Windows 95,"</a> contains background information about shell links and discusses the method used to create and resolve them.) This article provides background information on <b>IShellLink</b>, the interface provided to create and manipulate shell links, and covers how the shell preserves links. A companion sample application for the two articles, SHORTCUT, implements a shell link.</p>
<h2>The IShellLink Interface</h2>
<p>
The new shell in the next version of the Microsoft® Windows® operating system, Windows 95, uses an OLE interface to provide developers with functions (commonly known as <i>methods</i> in the object-oriented programming world) to manipulate shell links. An OLE interface provides easy methods for inserting, editing, viewing, and activating linked and embedded objects, and modifying the properties of objects. The interface that the shell defines to expose shell links is the <b>IShellLink</b> interface. This article details the methods exposed by the <b>IShellLink</b> interface and explains the heuristics that the shell uses to preserve a shell link to an object that has been renamed or moved.</p>
<h2>Item Identifiers and ID Lists</h2>
<p>
The shell employs the use of object identifiers within the shell name space. All objects that are browsable by the shell (such as files, directories, servers, and workgroups) have an identifier that is unique among the objects within the parent folder. These identifiers are referred to as the Item IDs and are defined in the SHLOBJ.H file as <b>SHITEMID</b>. All parent folders also have their own item identifiers and can keep a list of items, known as an ID List (<b>ITEMIDLIST</b> in SHLOBJ.H).</p>
<p>
ID Lists are allocated by the shell and may be passed across some of the shell interfaces (that is, <b>IShellFolder</b>). It is important to remember that each item identifier in an ID List is only meaningful within the context of the parent folder.</p>
<h2>Supported Methods</h2>
<p>
The <b>IShellLink</b> interface provides a group of methods that other applications can access to provide shell links within the application. These methods are exported via the <i>vtable</i>.</p>
<h3>IShellLink::QueryInterface</h3>
<p>
<b>Syntax:</b></p>
<pre><code>QueryInterface (REFIID riid, LPVOID FAR* ppvObj);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>riid</i>: The identifier of the interface requested. To get access to the <b>IShellLink</b> interface, this parameter should be <i>IID_IShellLink</i>.<br><br></li>
<li>
<i>PpvObj</i>: The pointer to the variable that receives the interface. This parameter will be filled in with a pointer to the <b>IShellLink</b> interface. The returned pointer subsequently can be used to access the other methods provided by the <b>IShellLink</b> interface.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Returns a pointer to the requested interface, in this case the <b>IShellLink</b> interface, if the interface is supported. Otherwise, it returns an error. Once this pointer is retrieved, the application can use the pointer to gain access to the other functions or methods provided for the interface.</p>
<h3>IShellLink::AddRef</h3>
<p>
<b>Syntax:</b></p>
<pre><code>ULONG AddRef (void);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
None.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Increments a reference count for each new copy of an <b>IShellLink</b> interface pointer. The return value for this method is the value of the reference count. Many applications use this value for testing or diagnostic purposes. The reference count is decremented when the <b>Release</b> method is called.</p>
<h3>IShellLink::Release</h3>
<p>
<b>Syntax:</b></p>
<pre><code>ULONG Release ();
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
None.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Decrements the reference count on the <b>IShellLink</b> interface. When the reference count reaches zero, the shell link object will be deleted and the pointer to the object will be invalid. This method returns the current reference count on the <b>IShellLink</b> object.</p>
<h3>IShellLink::GetPath</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetPath(LPSTR pszFile, int cchMaxPath, WIN32_FIND_DATA *pfd, DWORD fFlags);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszFile</i>: A pointer to a text buffer that will receive the path.<br><br></li>
<li>
<i>cchMaxPath</i>: The maximum number of characters for the path.<br><br></li>
<li>
<i>pfd</i>: A pointer to a structure containing information about the shell link object.<br><br></li>
<li>
<i>fFlags</i>: Flags specifying the type of path information to retrieve.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the current fully qualified path for the shell link object. The string containing the path is copied into the <i>pszFile</i> parameter. The <i>pfd</i> parameter is a pointer to the <b>WIN32_FIND_DATA</b> structure. This is the same information that is returned when making a call to <b>FindFirstFile</b> and <b>FindNextFile</b>, and includes the file’s attributes, creation time, and so on. The <i>fFlags</i> parameter supports two flags: SLGP_SHORTPATH, which returns the standard short (8.3) filename, and SLGP_UNCPRIORITY, which returns the Universal Naming Convention (UNC) path to the file.</p>
<h3>IShellLink::SetPath</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetPath (LPCSTR pszFile);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pszFile</i>: A pointer to a text buffer containing the new path for the shell link object.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the current path of the shell link object to the path specified by the <i>pszFile </i>parameter. For example, if an application is creating a shell link to a text file, STUFF.TXT, that resides in the C:\STUFF directory, the string passed to the <b>SetPath</b> method would be "C:\STUFF\STUFF.TXT".</p>
<h3>IShellLink::GetIDList</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetIDList (LPCITEMIDLIST * ppidl);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>ppidl</i>: A pointer to an ID List.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the current ID List for the shell link object.</p>
<h3>IShellLink::SetIDList</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetIDList (LPCITEMIDLIST pidl);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pidl</i>: A pointer to an ID List.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the ID List for the shell link object. This is useful when an application needs to set a shell link to an object that isn't a file, such as to Control Panel, another computer, or a printer.</p>
<h3>IShellLink::GetDescription</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetDescription (LPSTR pszName, int cchMaxName);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszName</i>: A pointer to a text buffer that will receive the description text.<br><br></li>
<li>
<i>cchMaxName</i>: The maximum number of characters for the description.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the description of the shell link object. The description string is copied into the buffer pointed to by the <i>pszName</i> parameter.</p>
<h3>IShellLink::SetDescription</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetDescription (LPCSTR pszName);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pszName</i>: A pointer to a text buffer containing the new description.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the description for the shell link object to the text provided in the <i>pszName</i> parameter. The description can be anything that the application chooses to provide. The description used by the SHORTCUT sample is simply "Shortcut to &lt;<i>FileName</i>&gt;".</p>
<h3>IShellLink::GetWorkingDirectory</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetWorkingDirectory (LPSTR pszDir, int cchMaxPath);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszDir</i>: A text buffer that will receive the working directory.<br><br></li>
<li>
<i>cchMaxPath</i>: The maximum number of characters for the working directory.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the current working directory for the shell link object. The working directory will be copied into the string that is pointed to by the <i>pszDir </i>parameter. If the working directory is larger than the buffer provided, the string will be truncated (that is, the shell will copy, at most, the number of characters specified in the <i>cchMaxPath</i> parameter).</p>
<h3>IShellLink::SetWorkingDirectory</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetWorkingDirectory (LPCSTR pszDir);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pszDir</i>: A text buffer that specifies the new working directory.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the current working directory for the shell link object to the path listed in the <i>pszDir</i> parameter. The working directory of the object needs to be set only if this is something that the link object requires. For example, if your application were to create a shell link to a Microsoft Word document that used a template or other objects that reside in a special directory, your application could set the working directory via this method.</p>
<h3>IShellLink::GetArguments</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetArguments (LPSTR pszArgs, int cchMaxPath);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszArgs</i>: A text buffer that will receive the arguments.<br><br></li>
<li>
<i>cchMaxPath</i>: The maximum number of characters for the arguments.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the current arguments associated with the shell link object.</p>
<h3>IShellLink::SetArguments</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetArguments (LPCSTR pszArgs);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pszArgs</i>: A text buffer containing the new arguments.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the arguments for the shell link object. This is useful in a case where you create a link to an application that takes special flags as arguments, such as a compiler.</p>
<h3>IShellLink::GetHotkey</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetHotkey (WORD *pwHotkey);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>pwHotKey</i>: A pointer to the hot key.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the hot key for the shell link object.</p>
<h3>IShellLink::SetHotkey</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetHotkey (WORD wHotkey);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>wHotKey</i>: A pointer to a hot key.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the hot key for the shell link object. This allows you to specify that your shell link should be invoked whenever a special hot key is pressed. For example, you could set up a shell link to a utility that will back up a specific directory whenever the user presses a key combination such as &lt;ALT&gt;+&lt;B&gt;.</p>
<h3>IShellLink::GetShowCmd</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetShowCmd (int *piShowCmd);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>piShowCmd</i>: A pointer to a show command.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the show command for the shell link object.</p>
<h3>IShellLink::SetShowCmd</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetShowCmd (int iShowCmd);
</code></pre>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>iShowCmd</i>: The show command to set.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the show command for the shell link object. The show command is the show state of the window a la <b>WinMain</b> and can be one of the following:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=29%><b>SW_HIDE</b></td>
<td width=71%>Hide the window.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_MINIMIZE</b></td>
<td width=71%>Minimize the window.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_RESTORE</b></td>
<td width=71%>Activate and display the window. If the window had been previously maximized or minimized, the window will be restored to its original size and position.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOW</b></td>
<td width=71%>Activate the window in its current size and position.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOWMAXIMIZED</b></td>
<td width=71%>Activate and maximize the window.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOWMINIMIZED</b></td>
<td width=71%>Activate and minimize the window.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOWNA</b></td>
<td width=71%>Show the window in its current state, but do not activate it.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOWNOACTIVE</b></td>
<td width=71%>Show the window in its most recent size and position, but do not activate it.</td>
</tr>
<tr valign=top>
<td width=29%><b>SW_SHOWNORMAL</b></td>
<td width=71%>Activate and display the window. This style also includes the <b>SW_RESTORE</b> option and will restore the window to its original size and position.</td>
</tr>
</table><br>
<h3>IShellLink::GetIconLocation</h3>
<p>
<b>Syntax:</b></p>
<pre><code>GetIconLocation (LPSTR pszIconPath, int cchIconPath, int *piIcon);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszIconPath</i>: A pointer to a text buffer that receives the icon location.<br><br></li>
<li>
<i>cchIconPath</i>: The maximum number of characters in the icon location.<br><br></li>
<li>
<i>piIcon</i>: A pointer to the icon.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Gets the icon location for the shell link object.</p>
<h3>IShellLink::SetIconLocation</h3>
<p>
<b>Syntax:</b></p>
<pre><code>SetIconLocation (LPCSTR pszIconPath, int iIcon);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>pszIconPath</i>: A pointer to a text buffer containing the new icon path.<br><br></li>
<li>
<i>iIcon</i>: An index to the icon.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Sets the location for the shell link icon. If you want to change the icon for the shell link object, use the <b>SetIconLocation</b> method.</p>
<h3>IShellLink::Resolve</h3>
<p>
<b>Syntax:</b></p>
<pre><code>Resolve (HWND hwnd, UINT fFlags);
</code></pre>
<p>
<b>Parameters:</b>
<ul type=disc>
<li>
<i>hwnd</i>: The handle to a window.<br><br></li>
<li>
<i>fFlags</i>: Flags that direct the shell in resolving the shell link.</li>
</ul>
<p>
<b>Description:</b></p>
<p>
Resolves a shell link. The system searches for the shell link object and updates the shell link path and its ID List, if necessary. For more detailed information about how the shell resolves links to objects that have been moved or renamed, please refer to the following section, "How Shell Links Are Preserved." If the shell needs to post a dialog box prompting the user for more information, it will use the handle to the window passed in the <i>hwnd</i> parameter as the parent window of the dialog box. The supported flags for this method are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=20%>SLR_NO_UI</td>
<td width=80%>Directs to shell not to display a dialog box if it cannot resolve the shell link.</td>
</tr>
<tr valign=top>
<td width=20%>SLR_UPDATE</td>
<td width=80%>When the resolve method is called, the shell marks a link as "dirty" if the object the link points to has changed (date, location, size, and so on). This flag directs the shell to save the link if the link object has been changed. The developer is thus saved the step of calling <b>IPersistFile::IsDirty</b> to determine whether the link has changed.</td>
</tr>
</table><br>
<h2>How Shell Links Are Preserved</h2>
<p>
One of the nice things that the shell does for you with shell links is automatically attempt to resolve shell links whose targets have been renamed or moved. When a shell link is created, the shell saves information about the link. Most of this information is the same information found in the <b>WIN32_FIND_DATA</b> structure (that is, file attributes, creation time, last access time, last write time, and file size). When the <b>IShellLink::Resolve</b> method is called, the first thing the shell does is to simply get the path associated with the current link via a pointer to its ID List. The shell searches for the link object in that path and, if it finds it, resolves the link.</p>
<p>
If the link object is not found, the shell first looks for an object with the same file creation time and attributes in the same directory but with a different name. This will resolve a link to an object that has been renamed.</p>
<p>
If the link object is still not found, the system first searches the subdirectories of the current directory. It will continue recursively searching the directory tree looking for a match with either the name or the creation time. If it does not find a match, it will ultimately display a dialog box prompting the user for a location (a browse button). An application can suppress the dialog box by specifying the SLR_NO_UI flag when it calls the <b>Resolve</b> method.</p>
<h2>Summary</h2>
<p>
You now should have the information you need to create and manipulate shell links programmatically in your application. The <b>IShellLink</b> interface provides the methods you need. You can use some or all of the methods—it's your choice. The information given here is based upon preliminary information (on a beta operating system, no less) and is subject to change before the final release of Windows 95. It is also worth noting that the <b>IShellLink</b> interface is provided for the Windows 95 shell, and the steps you take here to fully exploit the Windows 95 shell may not be the exact same steps that you would take in exploiting the shell of future operating systems.</p>
</BODY>
</HTML>

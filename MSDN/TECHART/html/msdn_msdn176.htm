<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 176: Sending Files to the Recycle Bin in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn176"></a></sup>Tip 176: Sending Files to the Recycle Bin in Visual Basic 4.0</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
When using the Microsoft® Windows® 95 operating system, you can delete a file from disk by dragging the file or sending the file to the Recycle Bin. The file is not actually removed from disk but is only marked for deletion by the system. When the Recycle Bin is emptied, however, the file is physically removed from the disk. This article explains how to send files to the Recycle Bin in a Microsoft Visual Basic® version 4.0 application.</p>
<h2>Using the SHFileOperation Function to Delete Files</h2>
<p>
When you use the Microsoft® Windows® 95 operating system, any files that you delete are stored in the Recycle Bin. The files are not physically removed from the disk, but they appear to have been deleted. If you want, the files (or directories) that you have moved to the Recycle Bin can be restored and thus again be made available. However, if you want to physically remove the files stored in the Recycle Bin from your hard disk, you must empty the Recycle Bin. After the Recycle Bin has been emptied, you cannot recover the deleted files. The space occupied by the deleted files is also freed.</p>
<p>
In a Microsoft Visual Basic® version 4.0 application, you can send files to the Recycle Bin by calling the Windows application programming interface (API) <b>SHFileOperation</b> function. This function lets you manipulate files by moving, copying, renaming, or deleting them.</p>
<p>
The <b>SHFileOperation</b> function requires a pointer to a <b>SHFILEOPSTRUCT</b> structure that contains the name(s) of the file(s) you want to perform an operation on, as well as the type of operation (for example, deleting a file) you want to carry out.</p>
<p>
When deleting multiple filenames, each filename specified in the <b>SHFILEOPSTRUCT</b> structure must be separated by a NULL character. The entire list of filenames must be terminated by two consecutive NULL characters.</p>
<p>
The <i>fFlags</i> field in the <b>SHFILEOPSTRUCT</b> structure must be set to the operation you want to perform on the selected file(s). In this case, set this field to FO_DELETE, which tells the operating system that you want to delete the file by sending it to the Recycle Bin. In addition, because you are sending the file to the Recycle Bin, use the FOF_ALLOWUNDO flag. This flag preserves the information required to undelete a file should you later decide not to physically remove the file from the hard disk.</p>
<h2>Example Program</h2>
<p>
This program shows how to send files to the Recycle Bin in Windows 95.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Public Const FO_DELETE = &amp;H3
 &nbsp;&nbsp; Public Const FOF_ALLOWUNDO = &amp;H40
Declare Function SHFileOperation Lib "shell32.dll" Alias "SHFileOperationA" 
 &nbsp; (lpFileOp As SHFILEOPSTRUCT) As Long
</code></pre>
</li>
<li>
Create a new function called <b>ShellDelete</b>. Add the following code to this function:<pre><code>Public Function ShellDelete(ParamArray vntFileName() As Variant)

 &nbsp;&nbsp; Dim I As Integer
 &nbsp;&nbsp; Dim sFileNames As String
 &nbsp;&nbsp; Dim SHFileOp As SHFILEOPSTRUCT

For I = LBound(vntFileName) To UBound(vntFileName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sFileNames = sFileNames &amp; vntFileName(I) &amp; vbNullChar
 &nbsp;&nbsp; Next
sFileNames = sFileNames &amp; vbNullChar

 &nbsp;&nbsp; With SHFileOp
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .wFunc = FO_DELETE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .pFrom = sFileNames
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fFlags = FOF_ALLOWUNDO
 &nbsp;&nbsp; End With

 &nbsp;&nbsp; ShellDelete = SHFileOperation(SHFileOp)

 &nbsp;&nbsp; End Function
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim FileToKill As String

 &nbsp;&nbsp; FileToKill = "c:\test*.txt"
 &nbsp;&nbsp; ShellDelete FileToKill
 &nbsp;&nbsp; MsgBox "File(s) deleted"
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Insert menu, select Module to create a new module. MODULE1.BAS is created by default.<br><br></li>
<li>
Add the following <b>TYPE</b> structure to MODULE1.BAS:<pre><code>Type SHFILEOPSTRUCT
 &nbsp;&nbsp; hWnd As Long
 &nbsp;&nbsp; wFunc As Long
 &nbsp;&nbsp; pFrom As String
 &nbsp;&nbsp; pTo As String
 &nbsp;&nbsp; fFlags As Integer
 &nbsp;&nbsp; fAborted As Boolean
 &nbsp;&nbsp; hNameMaps As Long
 &nbsp;&nbsp; sProgress As String
End Type
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the <b>Command Button</b> control. A dialog box appears, asking whether you really want to delete the selected files. (All files with the name TEST*.TXT stored in the root directory of the hard drive will be deleted.) Click the Yes button to confirm the delete request.</p>
<h2>Additional References</h2>
<p>
"Managing the Recycle Bin to Free Disk Space." (MSDN Library, Windows Resource Kit, Windows 95)</p>
<p>
"Recycle Bin Integration." (MSDN Library, Specifications)</p>
<p>
"SHFileOperation QuickInfo." (MSDN Library, Platform SDK)</p>
<p>
"SHFILEOPSTRUCT QuickInfo." (MSDN Library, Platform SDK)</p>
</BODY>
</HTML>

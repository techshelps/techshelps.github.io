<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 204: Changing the Screen Resolution at Run Time in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn204"></a></sup>Tip 204: Changing the Screen Resolution at Run Time in Visual Basic 4.0</h1>
<p>
February 28, 1996</p>
<h2>Abstract </h2>
<p>
Because Microsoft Windows 95 users may have different screen resolution settings, you may need to set the screen resolution to a specific setting while your Microsoft® Visual Basic® version 4.0 application is running. This article explains how to change your screen resolution from within Visual Basic.</p>
<h2>Setting the Screen Resolution</h2>
<p>
Under the Microsoft® Windows® 95 operating system, you can set your screen resolution by running the Display applet in Control Panel. In a Microsoft Visual Basic® version 4.0 application, you can use the Windows application programming interface (API) <b>EnumDisplaySettings</b> and <b>ChangeDisplaySettings</b> functions to change the screen resolution while your program is running.</p>
<p>
The <b>EnumDisplaySettings</b> function allows you to retrieve information about your display's graphics modes. This information is then stored in a <b>DEVMODE</b> structure.</p>
<p>
After you have interrogated the computer system with the <b>EnumDisplaySettings</b> function, you use the <b>ChangeDisplaySettings</b> function to tell the operating system to use a different screen resolution.</p>
<p>
The <b>ChangeDisplaySettings</b> function lets you set the screen resolution to a different graphics mode. The <b>DEVMODE</b> structure holds the graphics mode information to which you want to change.</p>
<p>
In the example program below, you first retrieve the current screen resolution information by calling the <b>EnumDisplaySettings</b> function. The <b>DEVMODE</b> structure contains the graphics modes information for the display type. Next, you modify the <b>dmPelsWidth</b> and <b>dmPelsHeight</b> fields in the <b>DEVMODE</b> structure to reflect the new screen resolution you want to set. Finally, you call the <b>ChangeDisplaySettings</b> function to tell the operating system to set the new screen resolution as the default resolution.</p>
<h2>Example Program</h2>
<p>
This program shows how to set the screen resolution from within a Visual Basic application.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Option Explicit
Private Declare Function EnumDisplaySettings Lib "user32" Alias 
 &nbsp; "EnumDisplaySettingsA" (ByVal lpszDeviceName As Long, 
 &nbsp; ByVal iModeNum As Long, lpDevMode As Any) As Boolean

Private Declare Function ChangeDisplaySettings Lib "user32" Alias 
 &nbsp; "ChangeDisplaySettingsA" (lpDevMode As Any, ByVal dwflags As Long) As Long

Const CCDEVICENAME = 32
Const CCFORMNAME = 32
Const DM_PELSWIDTH = &amp;H80000
Const DM_PELSHEIGHT = &amp;H100000

Private Type DEVMODE
 &nbsp;&nbsp; dmDeviceName As String * CCDEVICENAME
 &nbsp;&nbsp; dmSpecVersion As Integer
 &nbsp;&nbsp; dmDriverVersion As Integer
 &nbsp;&nbsp; dmSize As Integer
 &nbsp;&nbsp; dmDriverExtra As Integer

 &nbsp;&nbsp; dmFields As Long
 &nbsp;&nbsp; dmOrientation As Integer
 &nbsp;&nbsp; dmPaperSize As Integer
 &nbsp;&nbsp; dmPaperLength As Integer
 &nbsp;&nbsp; dmPaperWidth As Integer
 &nbsp;&nbsp; dmScale As Integer
 &nbsp;&nbsp; dmCopies As Integer
 &nbsp;&nbsp; dmDefaultSource As Integer
 &nbsp;&nbsp; dmPrintQuality As Integer
 &nbsp;&nbsp; dmColor As Integer
 &nbsp;&nbsp; dmDuplex As Integer
 &nbsp;&nbsp; dmYResolution As Integer
 &nbsp;&nbsp; dmTTOption As Integer
 &nbsp;&nbsp; dmCollate As Integer

 &nbsp;&nbsp; dmFormName As String * CCFORMNAME
 &nbsp;&nbsp; dmUnusedPadding As Integer
 &nbsp;&nbsp; dmBitsPerPel As Integer
 &nbsp;&nbsp; dmPelsWidth As Long
 &nbsp;&nbsp; dmPelsHeight As Long
 &nbsp;&nbsp; dmDisplayFlags As Long
 &nbsp;&nbsp; dmDisplayFrequency As Long
End Type
Dim DevM As DEVMODE
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim a As Boolean
 &nbsp;&nbsp; Dim i&amp;
 &nbsp;&nbsp; i = 0
 &nbsp;&nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = EnumDisplaySettings(0&amp;, i&amp;, DevM)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1
 &nbsp;&nbsp; Loop Until (a = False)
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; Dim b&amp;
 &nbsp;&nbsp; DevM.dmFields = DM_PELSWIDTH Or DM_PELSHEIGHT

 &nbsp;&nbsp; DevM.dmPelsWidth = 800
 &nbsp;&nbsp; DevM.dmPelsHeight = 600

 &nbsp;&nbsp; b = ChangeDisplaySettings(DevM, 0)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing&nbsp; Click the first <b>Command Button</b> control. This retrieves all the graphics modes for your display. Next, click the second <b>Command Button</b> control to change the display's screen resolution to 800 x 600 graphics mode.</p>
<h2>Additional References</h2>
<p>
"ChangeDisplaySettings QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"EnumDisplaySettings QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

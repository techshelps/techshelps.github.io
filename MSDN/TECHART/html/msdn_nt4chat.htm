<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing WAN Traffic in Windows NT 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_nt4chat"></a>Managing WAN Traffic in Windows NT 4.0 </h1>
<p>
Microsoft Corporation</p>
<p>
February 24, 1997</p>
<h2>1. Introduction</h2>
<p>
Microsoft® Windows NT® systems automatically generate traffic to perform various tasks, for example synchronizing a back domain controller (BDC) with a primary domain controller (PDC). Also, many types of client actions generate network activity. On networks interconnected via wide area network (WAN) links, this communication can cause significant and unwanted phone charges. Therefore, this article has three purposes:
<ul type=disc>
<li>
Categorize this traffic, both for communication between two Windows NT Servers and for communication between a Windows NT Workstation and a Windows NT Server.<br><br></li>
<li>
Briefly explain why this traffic occurs (this won't be in depth but should provide adequate information).<br><br></li>
<li>
Provide some guidelines for how this traffic might be reduced or controlled.</li>
</ul>
<p>
This article doesn't cover all traffic that occurs in a network. Rather, this article deals with traffic encountered by default installations or most common installations and tries to address those areas of traffic that are most configurable.</p>
<p>
It is important to note that this paper does <i>not</i> discuss WAN traffic that would normally be spoofed by routers, for example TCP and NetBIOS keepalives.</p>
<p>
Most of this information is extracted directly from the Microsoft Official Curriculum (MOC) course number 689, "Supporting Microsoft Windows NT Server 4.0 Enterprise Technologies."</p>
<h2>2. Windows NT Server to Windows NT Server Communication</h2>
<p>
For a connection between two Windows NT Servers, the following will be explored: 
<ul type=disc>
<li>
<b>Account synchronization.</b> Traffic generated by synchronization of the directory services database between the primary domain controller (PDC) and back domain controllers (BDC).<br><br></li>
<li>
<b>Trust relationships.</b> Traffic generated during the establishment of a trust relationship, as well as the importing of trusted accounts. Also includes traffic generated by pass-through authentication.<br><br></li>
<li>
<b>Server browser traffic.</b> Traffic generated by server announcements, master browser elections, and browse list exchanges between browser services.<br><br></li>
<li>
<b>Windows Internet Naming Service (WINS) replication.</b> Traffic generated by the replication of WINS-server database records to another WINS server.<br><br></li>
<li>
<b>Directory replication.</b> Traffic generated during the automatic duplication of a directory structure among computers.<br><br></li>
<li>
<b>Domain Name Service (DNS) server.</b> Traffic generated due to recursive name lookups, as well as traffic generated during one DNS-server replication to another DNS server.</li>
</ul>
<p>
Given the following assumptions:
<ul type=disc>
<li>
<b>Directory services:</b> two changes per hour = 39,400 bytes for three BDCs<br><br></li>
<li>
<b>Trust relationships:</b> 10 pass-through authentications per day<br><br></li>
<li>
<b>Browser:</b> four server announcements every 12 minutes; three BDCs exchange browse lists every 12 minutes with the PDC.<br><br></li>
<li>
<b>WINS replication:</b> three record changes per hour = 32,400 bytes<br><br></li>
<li>
<b>DNS:</b> one zone transfer of six records per hour<br><br></li>
<li>
<b>Directory replication:</b> two file changes per day = 26,000 bytes</li>
</ul>
<p>
the approximate percentage breakdown of types of traffic with Windows NT Server to Windows NT Server communication on a network is listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=53%><b>Activity</b></td>
<td class=label width=47%><b>Percentage of Traffic</b></td>
</tr>
<tr valign=top>
<td width=53%>Browser</td>
<td width=47%>51%</td>
</tr>
<tr valign=top>
<td width=53%>Directory Services</td>
<td width=47%>31%</td>
</tr>
<tr valign=top>
<td width=53%>WINS Replication</td>
<td width=47%>8%</td>
</tr>
<tr valign=top>
<td width=53%>Trust Relationships</td>
<td width=47%>5%</td>
</tr>
<tr valign=top>
<td width=53%>Directory Replication</td>
<td width=47%>4%</td>
</tr>
<tr valign=top>
<td width=53%>DNS</td>
<td width=47%>1%</td>
</tr>
</table><br>
<h3>2.1. Account Synchronization</h3>
<p>
User logon validation requests are processed by either the PDC or a BDC. Changes to the accounts database are made only at the PDC. To ensure that each BDC properly validates logon requests, it is important that each BDC has an exact copy of the directory services database maintained on the PDC.</p>
<p>
User accounts database synchronization occurs on three databases maintained by the system: the security accounts manager (SAM) accounts database, the SAM built-in database, and the local security authority (LSA) database. Synchronization occurs:
<ul type=disc>
<li>
When a BDC is installed or restarted.<br><br></li>
<li>
When forced by the administrator via Server Manager.<br><br></li>
<li>
Automatically by domain controllers, depending on registry information.</li>
</ul>
<p>
This article is concerned with traffic caused by the last instance. The amount of traffic depends on the configuration of the NetLogon service, which is responsible for carrying out synchronization.</p>
<p>
By default, the PDC verifies its databases every five minutes, looking for changes to any of the three previously mentioned databases. When a change is detected, the PDC sends a message to all BDCs that need the notification. The PDC maintains a table of each BDC and the version ID of their databases—if a BDC has an up-to-date database, it is not notified of the update. By default, Windows NT Server 4.0 will send the announcement to a maximum of ten BDCs at one time. After each of the ten BDCs complete synchronization, another BDC will be notified. This process continues until all BDCs have been informed. </p>
<h4>Controlling traffic</h4>
<p>
The domain controller synchronization traffic parameters for the NetLogon service are found in the registry at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NetLogon\Parameters. The following NetLogon service registry parameters can be adjusted:</p>
<p>
<b>ReplicationGovernor</b></p>
<p>
Controls the percentage of network bandwidth the Net Logon service can use while performing user accounts synchronization. The default value for this parameter is 100. This means that during a synchronization event, 100 percent of the network bandwidth can be used by the NetLogon service while the primary domain controller is buffering 128K of data at a time. This can be very disastrous in a WAN environment, where users are also competing for bandwidth. By adding this parameter to the NetLogon key, and configuring it to a value of 50, the NetLogon service will only buffer 50 percent as much data (64K) for transmission, and only have synchronization messages on the network 50 percent of the time.</p>
<p>
If this is set too low, synchronization will tie up WAN connections longer and take longer to complete. It is generally recommended that <i>ReplicationGovernor</i> never be set lower than 25.</p>
<p>
<b>Pulse (in seconds)</b></p>
<p>
Controls how often the primary domain controller looks for changes to its directory services database, and sends synchronization messages to the backup domain controllers that need updating. The value is set by default to five minutes; it can be increased to a maximum of 48 hours. Use caution when setting this value high, as it can result in backup domain controllers that are not synchronized with the primary domain controller for a long period of time. This could cause a full synchronization event to occur.</p>
<p>
<b>PulseMaximum (in seconds)</b></p>
<p>
Controls how often the primary domain controller will send a pulse message to each backup domain controller, even if its user accounts database is up-to-date. The value is set by default to two hours; it can be increased to 48 hours, reducing the number of pulse messages.</p>
<p>
<b>ChangeLogSize </b></p>
<p>
Controls the size of the change log, which controls the number of changes that can be made to the user accounts database before a full synchronization event occurs. The default value is 64K, which equates to about 2,000 changes (changes average 32 bytes each). In an environment with a large number of users that are frequently changing passwords, it is possible for this limit to be met, causing entries in the file to be overwritten. This may force a full synchronization to occur, generating excess traffic as more information is sent to the backup domain controllers than is really necessary.</p>
<p>
<b>PulseConcurrency</b></p>
<p>
Controls the number of BDCs that the PDC simultaneously sends announcements to when a synchronization event occurs. The default number in Windows&nbsp;NT Server 4.0 is 10. Increasing this number will increase the amount of network bandwidth that user accounts database synchronization requires. A lower number spreads the synchronization out over a longer period of time.</p>
<p>
<b>ExpectedDialupDelay (in seconds)</b></p>
<p>
This parameter specifies the time it takes for a dialup router to dial when sending a message from this client machine to a domain trusted by this client machine. By default, NetLogon assumes a domain controller connection can be established in 15 seconds. Setting <i>ExpectedDialupDelay</i> informs NetLogon to expect a delay in addition to this 15 seconds.</p>
<p>
This parameter should remain zero unless a dialup router exists between this machine and its trusted domain.</p>
<p>
If this parameter is set too high, legitimate cases where no domain controller is available in a trusted domain will take an extraordinary amount of time to detect.</p>
<p>
Based on the <i>ExpectedDialupDelay</i>, NetLogon adjusts the following two times:
<ol>
<li>
When discovering a domain controller in a trusted domain, NetLogon sends a 3 mailslot message to the trusted domain at (5 + <i>ExpectedDialupDelay</i>/3) second intervals. Synchronous discoveries will not be timed out for 3 times that interval.<br><br></li>
<li>
An API call over a secure channel to a discovered domain controller will time out only after (45 + <i>ExpectedDialupDelay</i>) seconds.</li>
</ol>
<p>
<b>ScavengeInterval (in seconds)</b></p>
<p>
Adjusts the interval at which NetLogon performs the following scavenging operations:
<ul type=disc>
<li>
Checking to see if a password on a secure channel needs to be changed<br><br></li>
<li>
Checking to see whether a secure channel has been idle for a long time<br><br></li>
<li>
On domain controllers, sending a mailslot message to each trusted domain that has yet to have its domain controller discovered<br><br></li>
<li>
On PDC, attempting to add the <i>domainname</i>&lt;1B&gt; NetBIOS name if it hasn't already been successfully added</li>
</ul>
<p>
None of these operations is critical. Setting <i>ScavengeInterval </i>for 15 minutes is optimal in all but extreme cases. For instance, if a domain controller is separated from a trusted domain by an expensive line such as an Integrated Services Digital Network (ISDN). this parameter might be adjusted upward to avoid frequent automatic discovery of domain controllers in a trusted domain.</p>
<p>
This parameter can be set as high as 2 days.</p>
<h3>2.2. Trust Relationships</h3>
<p>
In an environment where there is centralized administration and individual control of distributed resources, establishing a master accounts domain with multiple resource domains is a good solution. Trust relationships are a necessary component of this solution as they allow user accounts from the accounts domain to have access to resources in the resource domains.</p>
<h4>Establishing a trust</h4>
<p>
To establish a trust, one domain must permit a second domain to trust it. Then the second domain adds the first domain as a trusted domain. Once this is accomplished, the administrator of a trusting domain can assign permissions for local resources to accounts that reside in the trusted domain.</p>
<p>
Whenever a user in the trusted domain attempts to access resources in a trusting domain, the trusting domain passes account authentication on to the trusted domain.</p>
<h4>Relative Impact on the network</h4>
<p>
Trust relationships generate network traffic in three ways:</p>
<p>
<b>Establishing a relationship.</b> The process of establishing a trust relationship generates about 110 frames and 16,000 bytes of network traffic. This process is only performed one time per trust relationship established.</p>
<p>
<b>Trusted accounts.</b> Using trusted accounts also generates a lot of traffic. This traffic occurs whenever the trusting domain's administrator needs to assign permissions to a trusted account for a local resource or add a trusted account to a local group.</p>
<p>
<b>Pass-through authentication.</b> This is the most frequent type of trust relationship traffic. There are two different types of pass-through authentication: when a user in a trusted domain attempts to access a resource in a trusting domain and when a user at a Windows&nbsp;NT Workstation computer that is a member of a trusting domain attempts to log on using a trusted account.</p>
<h4>Controlling traffic</h4>
<p>
Although trust relationships do not produce a high percentage of traffic, there are two ways to reduce trust-related traffic.</p>
<p>
<b>Reduce the number of trusts</b></p>
<p>
The obvious means of reducing trust relationship traffic is to reduce the number of trusts. This means giving up the benefits of the master domain/resource domain model. However, it may be worth reviewing existing or planned resource domains to ensure that each one is appropriate and necessary.</p>
<p>
Verify that each one-way trust is appropriate. For example, in an environment where two domains trust each other, are both trusts really required? If not, break the non-essential trust.</p>
<p>
There is very little maintenance traffic related to trust relationships. Once the trust has been established, most of the traffic is generated by importing and verifying trusted accounts and by pass-through authentication.</p>
<p>
<b>Use group accounts</b></p>
<p>
To reduce the traffic associated with the verification of trusted accounts:
<ol>
<li>
At the trusted domain, add the appropriate users to a global group.<br><br></li>
<li>
At the trusting domain, add the trusted global group to a local group or local resource.</li>
</ol>
<p>
By adding a set of users from a global group, as opposed to adding the users individually to a local group or resource, the traffic required to verify the Security ID (SIDs) and associate names with the SIDs can be reduced. In a simple test, the lookup of a single SID for a global group took 552 bytes, whereas the same lookup for SIDs for two trusted user accounts took 636 bytes. While this is not that much extra traffic, it is only for two users. Often, many users from a trusted domain are allowed access to a resource in a trusting domain. By using a global group, the traffic required to look up those accounts can be reduced, which could be substantial over a period of time.</p>
<h3>2.3. Server Browser Traffic</h3>
<p>
In order to locate network resources effectively, browsing is implemented by default on a Microsoft Windows&nbsp;NT Server network.</p>
<p>
The Windows NT domain master browser (DMB) exchanges computer browse lists with BDCs several times per hour. Since Microsoft recommends at least one BDC at each site, a company's domain will often span multiple sites, thereby causing browser network traffic across any intermittent ISDN routers.</p>
<p>
Twelve minutes after an Master Browser (MBR) boots and every twelve minutes thereafter, the MBR connects to the DMB that is also the&nbsp; Primary Domain Controller (PDC). This is done by sending a request to the NetBIOS name (<i>domainname&lt;</i>0x1B&gt;) that is owned by the DMB. The MBR then sends the local browse list to, and receives the global browse list from, the DMB. This causes the first connection over the WAN and usually lasts several seconds.</p>
<p>
Browsing communication uses Remote Procedure Call (RPC) over a named-pipe connection. After the named-pipe connection is closed, the logical network connection is entertained by the redirector for ten more minutes—when the MBR redirector's <b>KeepConn</b> parameter expires by default. Although this logical connection does not incur ISDN router costs, frames sent to disconnect after the ten minute period cause another ISDN connection to be established, which incurs costs.</p>
<p>
Two minutes later—24 minutes after booting—the MBR connects again to the DMB for a browse list exchange. This occurs every 12 minutes.</p>
<p>
In addition to the client-to-server browser traffic, there are several additional types of browser traffic generated between servers that account for many frames on the network. The basics of the server browsing process are:
<ul type=disc>
<li>
Upon startup, the primary domain controller of a domain assumes the role of domain master browser of the domain.<br><br></li>
<li>
Upon startup, each backup domain controller of the domain becomes either a backup browser or a local master browser, depending on whether there is already a master browser for that domain on that subnet.<br><br></li>
<li>
Every 15 minutes, each master browser (on each subnet) announces itself&nbsp; to the master browsers of other domains on the local subnet.<br><br></li>
<li>
Every 12 minutes, each domain master browser contacts WINS for a listing of all <i>domainname</i>&lt;1B&gt; domains.<br><br></li>
<li>
Every 12 minutes, each master browser contacts the domain master browser to update the browse lists.<br><br></li>
<li>
Every 12 minutes, each backup browser contacts its local master browser to retrieve an updated browse list.</li>
</ul>
<p>
All computers with server components (that is, the ability to share network resources) announce themselves to the master browser in their local domain. Servers that operate in any capacity as a potential browser, backup browser, or master browser become involved in several other communications as well:
<ul type=disc>
<li>
Browser elections occur whenever the master browser cannot be located on the local subnet and whenever a domain controller initializes.<br><br></li>
<li>
Master browsers in different domains communicate with each other so that servers and resources can be accessed throughout the network.<br><br></li>
<li>
Backup browsers receive updated browse lists from the local master browser.</li>
</ul>
<p>
Browsing certainly produces a large share of the server-to-server traffic on the network. Optimizing browser traffic may mean reducing the traffic to allow the user more bandwidth, or it may mean increasing the traffic to provide for more up-to-date browse lists to the user when requested.</p>
<h4>Controlling traffic</h4>
<p>
Most of the traffic generated by browsing is initiated automatically by the appropriate browsing computers. These are the domain master browser, the master browsers, and the backup browsers. There are three general methods to reduce traffic: reduce the network protocols used, reduce the number of browser entries, or increase the amount of time between browser updates.</p>
<p>
<b>Reduce network protocols</b></p>
<p>
The browsing process operates separately on each installed and bound protocol. So, if TCP/IP, NWLink IPX/SPX, and NetBEUI are all active on the network, each set of browser traffic, elections, host announcements, workgroup announcements, and so on occur on each protocol independently. This triples the amount of network traffic related to browsing with the only product being a browse list for three independent protocols. Eliminating one or two of these protocols will greatly reduce the traffic generated for browsing.</p>
<p>
<b>Reduce browser entries</b></p>
<p>
Disable the server component on computers that do not require sharing of resources. This will reduce the size of the browse lists and, therefore, the traffic passing between browser servers. Each type of client, whether it's Microsoft Windows® for Workgroups, Microsoft Windows 95, or Microsoft Windows&nbsp;NT, has a method for disabling the server service. Every server requires&nbsp; 27 bytes in the browse list, plus additional space for the server comment, if needed. Consider reducing server comments.</p>
<p>
<b>Optimization parameters</b></p>
<p>
Browsing parameters are found in the registry under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Browser\Parameters. The following two parameters can be configured to control the amount of network traffic generated by the browser:
<ul type=disc>
<li>
<b><i>MasterPeriodicity</i>.</b> Specifies how frequently a master browser contacts the domain master browser. The default value is 720 seconds (12 minutes), with a minimum of 300 seconds (five minutes), and a maximum value of 4,294,967 seconds (0x418937 in hex or 71,582.78 minutes). This parameter is added as a REG_DWORD, and can be changed dynamically without restarting the computer. This parameter should be added on the master browsers. This parameter does affect WAN traffic, as each subnet that a domain has a member on has a master browser for the domain on that subnet.<br><br></li>
<li>
<b><i>BackupPeriodicity</i>.</b> Specifies how frequently a backup browser contacts the master browser. Adding this parameter as a REG_DWORD requires restarting your computer. The default value for <i>BackupPeriodicity</i> is 720 seconds. Configuring it to 1800 seconds (30 minutes) will reduce the frequency of browse list updates. This parameter does not affect the WAN because backup browsers always communicate with a local master browser, never with a remote one.</li>
</ul>
<h3>2.4. WINS Replication</h3>
<p>
In many large organizations, it is likely that one WINS server will not be sufficient to offer the required level of fault tolerance and performance. Even though a single WINS server can support 10,000 WINS clients, it is recommended to have a backup server. WINS supports the ability of having multiple WINS servers for clients to register and query, while allowing these servers to replicate, or share, their databases with each other. The benefit of this database sharing is that eventually each WINS server will know about all of the other WINS clients that have registered with its WINS partners. This offers faster name resolution for clients.</p>
<p>
There are three distinct portions to the WINS replication process:
<ul type=disc>
<li>
The replication relationship must be established. <br><br></li>
<li>
Before any replication can take place, the database version numbers must be verified. <br><br></li>
<li>
Records can be replicated from one database to another. The amount of traffic generated during replication depends on the size of the records in the WINS database, how many records have been updated, and the frequency of the replication.</li>
</ul>
<p>
<b>WINS Record Sizes</b></p>
<p>
The size of each entry in the WINS database will vary, depending on the type of entry being added.</p>
<p>
The amount of data stored for a normal (unique) client computer with a single network adapter card is between 40 and 280 bytes, depending on whether the client has configured a scope ID (which can be up to 240 characters). A client without a configured scope ID would require 40 bytes in the database for each name registered.</p>
<p>
If the client is <i>multihomed</i> (having multiple network adapters configured for TCP/IP), the amount of data stored will vary depending upon the number of IP addresses configured for the computer. It will range from 40 bytes to 280 bytes per host.</p>
<p>
If the name registered is an Internet group name, such as <i>domainname</i>&lt;1C&gt;, the entry can be up to 480 bytes if it contains the maximum number of registered hosts (which is 25).</p>
<p>
Knowing an average record size will help in determining how much traffic will be generated during WINS replication events.</p>
<h4>Controlling traffic</h4>
<p>
WINS database replication is especially a concern in WANs with slow link speeds. When replicating database entries between WINS servers, these entries are accumulated and delivered in the fewest number of frames possible.</p>
<p>
WINS replication partners can be configured as either <i>push</i> or <i>pull</i> partners. Push partners send announcements to their configured partners when a specific number of database entries have changed. Pull partners request updates when notified by the push partner and at configured intervals. A relationship in which each partner replicates its database with the other would require each server to be both a pull partner and push partner.</p>
<p>
<b>Push partners</b></p>
<p>
Via WINS manager, configure WINS to initiate the push notification after a specific number of record updates have been accumulated. The default value is 20. There is no designated time interval for initiating push notifications and replications. Increasing the number of database updates required before sending a push notification will reduce the frequency of WINS replication and batch more updated records in a single transfer operation.</p>
<p>
Often, this value is set to a percentage of the total names in the database. For example, the record update count might be set to 25 percent of records in the database. This allows for more control over the replication.</p>
<p>
<b>Pull partners</b></p>
<p>
The pull partner requests changes that have occurred since a specific version number. When using WINS Manager to add a WINS server as a pull partner, you can configure replication to occur at a specific time interval. For example, you might configure WINS to send pull requests every 30 minutes for local WINS servers, every hour for remote WINS servers connected by high-speed links (T1 or higher), and every six hours for remote WINS servers connected by means of slow links (56K). This allows more control over the timing of how frequently data is transferred.</p>
<h3>2.5. Directory Replication</h3>
<p>
The Directory Replicator service for Windows&nbsp;NT Server allows automatic replication, or duplication, of a directory tree between multiple computers, without the intervention of a network administrator. It is most commonly used for replicating user logon scripts from the primary domain controller of a domain to backup domain controllers, ensuring that no matter which domain controller a user is validated by, the user can run its logon script.</p>
<p>
<b>Relative impact on the network</b></p>
<p>
Replication of logon scripts should be fairly simple and infrequent, as they generally are not very large in size, often less than 4K, and don't change frequently. But, if the Directory Replication service needs to replicate other files, logon scripts can be larger in size, and change more frequently, thus requiring more network traffic for replication.</p>
<h4>Controlling traffic</h4>
<p>
The Directory Replicator service on Windows&nbsp;NT Server provides the ability to automatically duplicate a source tree to multiple other computers. This process can involve a number of frames, depending on the amount of data to be replicated. By default, the export server checks every five minutes for data to be replicated. This frequency interval can be configured in the registry. This process generates very little network activity unless data on the export server has changed.</p>
<p>
A sample directory containing 16 files and 426,000 bytes of data took 1,425 frames and approximately 42 seconds to replicate, whereas deleting one file from that same export list took only 251 frames and 48 seconds to verify and update.</p>
<p>
Additionally, every five minutes (default configuration) the export server will notify each import computer or domain with a list of its first level directories.</p>
<p>
<b>Directory structure</b></p>
<p>
The best way to reduce the amount of traffic generated by the Directory Replicator service is to use a flat, shallow directory structure. Having very large, or deep, and frequently changing top-level replicated directories is very taxing on the Directory Replicator service. The Directory Replicator service checks and then copies an entire top-level directory if any file in that directory has changed. Because some file is likely to change in large directories, the Directory Replicator is constantly rechecking and recopying these directories. It would generate far less traffic if multiple, shallower top-level directories were used in place of a smaller number of deep directory structures. This would put as many of the files as possible in directories where changes are very infrequent.</p>
<p>
<b>Using server manager to control replication</b></p>
<p>
It can be beneficial to prevent the Directory Replicator service from exporting specific directories during certain periods of the day. To prevent the export server from replicating directories during heavy network usage times, a lock can be added to the export server. This can be done using Server Manager, or the Server option in Control Panel.</p>
<p>
To prevent the export server from replicating directories:
<ol>
<li>
From the Control Panel, double-click <b>Server</b>.<br><br></li>
<li>
From the <b>Server </b>dialog box, click <b>Replication</b>.<br><br></li>
<li>
In the <b>Directory Replication</b> dialog box, under <b>Export Directories</b>, choose <b>Manage</b>.<br><br></li>
<li>
Select the directory, and then choose <b>Add Lock</b>.</li>
</ol>
<p>
This can be used to help limit the traffic to times when there is less user-generated network traffic.</p>
<p>
Also in the <b>Directory Replication</b> dialog box is the <b>Wait Until Stabilized</b> option for each exported directory. When the <b>Wait Until Stabilized</b> option is selected, it causes the import computer to recopy the entire subtree whenever any file in that subtree changes. With this option disabled, the import computer will check the time, date, name, attributes, and size of each file individually and copy only those files which have changed.</p>
<p>
<b>Registry parameters</b></p>
<p>
Controlling the amount of data transferred in a replication process often involves updating the registry with new values. Directory replication entries are found in the registry under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Replicator\Parameters. The following are the two most common parameters to modify to control the Directory Replicator service:</p>
<p>
<b><i>Interval</i>.</b> This determines how often the originating server (called the export server) checks for updates to its specified directory structure and how often it sends notifications to its target computers (called import computers) to retrieve the new data. The default value for <i>Interval</i> is 5 minutes. This can be increased to 60 minutes or more (on the export server) to reduce the frequency of replication. Of course, this will also increase the replication delay for each individual change.</p>
<p>
<b><i>Pulse</i>.</b> This acts as a counter to control how often an import computer contacts an export server. If an import computer fails to hear from the export server after [<i>Pulse </i>x<i> Interval</i>] minutes, it will contact the export server for an update. The default value of Interval is 5 minutes (as described above), while the default value of Pulse is 2 minutes. With these parameters, if the import computer has not heard from the export server after 10 minutes, it will initiate communications with the export server. Increasing the <i>Pulse</i> parameter will increase the time intervals for the import computer to contact the export server, allowing more time for the export server to contact the import computer.</p>
<h3>2.6. DNS Server</h3>
<p>
In larger organizations, a single DNS name server may not be sufficient to provide name resolution services for the clients. In this environment, it may be necessary to implement primary and secondary servers for a zone. A zone is a database file that contains records for a particular domain.</p>
<p>
DNS server-to-server traffic is comprised of zone transfers. This traffic does not occur by default, but must be configured by the administrator. A primary name server is the server that maintains the database file for a particular zone. A secondary zone server does not maintain the database, but receives a copy of the database from the primary name server for the zone. This is very similar to the relationship between a PDC and a BDC for a Windows&nbsp;NT domain.</p>
<h4>Relative impact on the network</h4>
<p>
The replication of zone information produces network traffic. When a secondary name server starts up, it contacts its primary name server and initiates replication of the zone. This is called a zone transfer.</p>
<h4>Controlling traffic</h4>
<p>
DNS server-to-server traffic consists of zone replication. It is possible to control the replication of the zone between the primary and secondary name servers. To do so, select the <b>SOA Record </b>tab from the <b>Zone Properties </b>dialog box in <b>DNS Manager</b>. </p>
<p>
The following values can be configured. The most important value is the refresh interval. The smaller it is, the more frequent zone transfers will occur. This provides a more up-to-date zone file at the secondary name server at the expense of increased network traffic.</p>
<p>
<b>Refresh Interval.</b> Designates the amount of time the secondary name server will wait before querying the primary name server, to see whether the database file has changed, and initiating a zone transfer. The default value is 60 minutes.</p>
<p>
<b>Retry Interval.</b> Designates the amount of time the secondary name server will wait, after a failed zone transfer, before re-attempting the zone transfer. The default value is 10 minutes.</p>
<p>
<b>Expire Time.</b> Designates the amount of time that the secondary name server will continue to respond to name queries even though it cannot connect to the primary name server for an update.</p>
<h2>3. Windows NT Workstation to Windows NT Server Communication</h2>
<p>
Client to server traffic is generated by a client computer communicating with a server computer. Types of client-to-server traffic that this section will analyze include: 
<ul type=disc>
<li>
<b>Browser.</b> Traffic generated by a client when registering itself as a possible provider of network resources and retrieving a list of backup browsers, a list of servers on the network, and a list of resources on a server.<br><br></li>
<li>
<b>Domain Name System (DNS).</b> Traffic generated by TCP/IP hosts during TCP/IP host name resolution. Usually generated by TCP/IP utilities such as Ping and Telnet, or applications such as Microsoft Internet Explorer.<br><br></li>
<li>
<b>Intranet browsing.</b> Traffic generated by the browser application when downloading pages from a web site.</li>
</ul>
<p>
Given the following assumptions:
<ul type=disc>
<li>
<b>Browser:</b> Host announcements every 12 minutes and retrieve browse list five times per day<br><br></li>
<li>
<b>File sessions:</b> Seven sessions established per day<br><br></li>
<li>
<b>Intranet browsing:</b> Browse two times a day for 64K page<br><br></li>
<li>
<b>Logon validation:</b> One logon event per day<br><br></li>
<li>
<b>DHCP: </b>Lease duration of three days (default)<br><br></li>
<li>
<b>WINS: </b>Register and renew four names every three days. Resolve five names per day.<br><br></li>
<li>
<b>DNS: </b>Five host queries per day</li>
</ul>
<p>
the approximate percentage breakdown of types of traffic using Windows NT Workstation to Windows NT Server communication on a network is listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>Activity</b></td>
<td class=label width=56%><b>Percentage of Traffic</b></td>
</tr>
<tr valign=top>
<td width=44%>Internet Explorer</td>
<td width=56%>48%</td>
</tr>
<tr valign=top>
<td width=44%>Browser</td>
<td width=56%>31%</td>
</tr>
<tr valign=top>
<td width=44%>File Session</td>
<td width=56%>12%</td>
</tr>
<tr valign=top>
<td width=44%>Logon Validation</td>
<td width=56%>6%</td>
</tr>
<tr valign=top>
<td width=44%>DHCP</td>
<td width=56%>1%</td>
</tr>
<tr valign=top>
<td width=44%>WINS</td>
<td width=56%>1%</td>
</tr>
<tr valign=top>
<td width=44%>DNS</td>
<td width=56%>1%</td>
</tr>
</table><br>
<h3>3.1. Client Browser Traffic</h3>
<p>
After users have successfully logged on to the network, accessing network resources is generally their next step. To assist users in the process of locating network resources, Microsoft networking implements a network service called the Browser. The client browsing process is as follows:
<ul type=disc>
<li>
Servers are added to the browse list by issuing announcements to the master browser.<br><br></li>
<li>
The master browser shares the list of servers (as well as domains) with the backup browsers.<br><br></li>
<li>
A client computer retrieves a list of backup browser computers from the master browser.<br><br></li>
<li>
The client computer contacts a backup browser to retrieve a list of servers.<br><br></li>
<li>
The client contacts the server to retrieve a list of shared resources on the server.</li>
</ul>
<p>
Each of these steps produces network traffic.</p>
<p>
Because a lot of the automatic browser traffic is broadcast-based, browsing a subnet is a simple process. However, most routers are not configured to forward browser broadcasts, and as such, browsing servers on remote subnets is not as simple. Fortunately, it is possible to browse network resources throughout the enterprise, and still not forward the browser broadcasts, by implementing WINS.</p>
<h4>Relative impact on the network</h4>
<p>
The process of browsing can have a relatively large impact on the network traffic that a client generates. To some extent, browsing happens automatically. Other aspects of browsing, such as the retrieval of a browse list, is initiated by the user.</p>
<p>
The portion of the browsing process that uses Browser frames is based almost entirely on broadcast packets, the majority of which are very similar. Properties include:
<ul type=disc>
<li>
Frame sizes generally between 200 and 300 bytes in size<br><br></li>
<li>
Media access control layer broadcasts and IP layer subnet broadcasts using UDP Port 138 (NetBIOS Datagram Service)</li>
</ul>
<h4>Controlling traffic</h4>
<p>
To provide for efficient resource location throughout the enterprise, the Computer Browser service is implemented. This network resource browsing comes at the expense of increased network traffic. </p>
<p>
<b>Disabling unnecessary server components</b></p>
<p>
One method of reducing client-related browsing traffic is to disable the server component on computers that are not required to provide shared resources on the network. If a computer rarely shares network resources, consider disabling its server component. This will remove the announcements, and reduce the size of the browse list that must be maintained and transferred upon request.</p>
<p>
Every server requires 27 bytes in the browse list, plus additional space for the comment, if assigned. Consider limiting or reducing the size of computer comments.</p>
<p>
<b>Controlling the number of potential browsers</b></p>
<p>
The number of backup browsers in a network is automatically determined by the browsing software. When another backup browser is needed, a potential browser is notified by the master browser that it should become a backup browser. You can&nbsp; configure a computer to never become a browser server as follows:
<ul type=disc>
<li>
In Windows&nbsp;NT, set the <i>MaintainServerList</i> parameter to No. The <i>MaintainServerList</i> parameter can be found in the registry at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Browser\Parameters<br><br></li>
<li>
In Windows 95, double-click <b>Network </b>in the Control Panel, click <b>File and printer sharing for Microsoft Networks</b>, and then click <b>Properties.</b> Click <b>Browse Master</b> in the <b>Properties</b> box and then, in the Value box, click <b>Disabled</b>.<br><br></li>
<li>
In Microsoft Windows for Workgroups, add <i>MaintainServerList</i> to the [network] section of System.ini, and set it to No.</li>
</ul>
<p>
This will reduce the registration, renewal and release of the &lt;1E&gt; NetBIOS names with WINS or b-node broadcasts.</p>
<p>
<b>Eliminating unnecessary network protocols</b></p>
<p>
The browsing system is protocol dependent, meaning that browsing occurs on a protocol-by-protocol basis. If a network uses three protocols, all browser announcements and elections will be repeated three times, one for each protocol. Reducing the number of protocols, if possible, will have a large impact on reducing browser related network traffic.</p>
<h3>3.2. DNS</h3>
<p>
When users want to access a computer using standard Windows networking commands and utilities, such as Network Neighborhood, or the <b>net</b> command, the NetBIOS name of the target computer must be resolved into an IP address. This is often accomplished by WINS. When users want to access a computer using TCP/IP utilities, such as Internet Explorer or Ping, the IP host name of the target computer must be resolved into an IP address. This process, called host name resolution, can be accomplished using the DNS.</p>
<h4>Relative impact on the network</h4>
<p>
DNS traffic generated from a client computer consists of a query request and response. As such, there is not a lot of traffic for a single request. The impact that client-based DNS traffic has on the network is a result of how often names need to be resolved. That is, the number of query requests that are issued determines the impact that client DNS queries have on network traffic.</p>
<p>
Another factor that impacts the traffic on the network is the need for DNS servers to perform recursive lookups. DNS servers have the ability to pass a query request to another DNS server, or to a WINS server, when it cannot resolve the name. Thus, a single query request from a client computer might actually generate more than the simple query and response frame.</p>
<h4>Controlling traffic</h4>
<p>
A simple address lookup takes only two directed frames. Optimization efforts should be focused on reducing recursion traffic that may result if a client's DNS server does not have the requested address. There are three methods for reducing recursion traffic:
<ul type=disc>
<li>
Do not configure recursion. Of course, this limits the functionality of DNS by not being able to provide all requested names, or it requires the addition of all host names to each DNS server, which is an administrative burden.<br><br></li>
<li>
Ensure that the DNS server that will most likely resolve most of the names for a particular client is designated as its DNS server. This reduces the chance of a recursive lookup and its associated traffic.<br><br></li>
<li>
Increase the time to live (TTL) of cached entries. When one DNS server sends a name lookup request to another DNS server, the original DNS server, upon receiving the address, will cache that address for a period of time, which is the TTL of the record. By default, the TTL of a cached resolved name is 60 minutes. The default for a NetBIOS name resolved by a recursive lookup using WINS is 10 minutes. These TTLs are configurable using DNS Manager.</li>
</ul>
<p>
<b>To configure the TTL for all records of a zone:</b>
<ol>
<li>
Start <b>DNS Manager</b>, and then select the zone you want.<br><br></li>
<li>
From the <b>DNS</b> menu, click <b>Properties</b>.<br><br></li>
<li>
In the <b>Zone Properties </b>dialog box, click the <b>SOA Record </b>tab.<br><br></li>
<li>
In the <b>Minimum Default TTL </b>box, select or type the desired TTL.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
This configures the default TTL for all records in the zone. It is also possible to configure the TTL of individual records so that the most commonly accessed records can be cached for a longer time.</p>
<p>
<b>To configure the TTL for an individual record:</b>
<ol>
<li>
Start <b>DNS Manager</b>, and then from the <b>Options</b> menu, click <b>Preferences</b>.<br><br></li>
<li>
In the <b>Preferences </b>dialog box, click <b>Expose TTL</b>.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
Now, whenever you create or edit a record, the <b>TTL</b> box is displayed in the <b>Properties</b> dialog box for the record. Configure it as desired on a record-by-record basis.</p>
<p>
<b>To configure the TTL for WINS records:</b>
<ol>
<li>
Start <b>DNS Manager</b>, and then select the zone you want.<br><br></li>
<li>
From the <b>DNS</b> menu, click <b>Properties</b>.<br><br></li>
<li>
In the <b>Zone Properties </b>dialog box, click the <b>WINS Lookup </b>tab.<br><br></li>
<li>
Click <b>Advanced</b>, and then in the <b>Cache Timeout Value</b> box, type or select the desired value.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
By increasing the TTL of resolved names, the amount of network traffic can be reduced by eliminating the need to recursively query a second attempt for a recently resolved name.</p>
<h3>3.3. Intranet Browsing</h3>
<p>
More and more, users are going to Web sites to retrieve static information rather than establishing file connections. One appeal of this process is the graphical interface and the ability to browse information in a quick and easy manner. Another benefit to using Web sites is the ability to share information with users outside the corporate network.</p>
<h4>Relative impact on the network</h4>
<p>
Intranet browsing can generate a very large percentage of the network traffic that is initiated by a client computer. The process of finding and connecting to a Web site creates a very small amount of traffic, but the amount of information that is downloaded, which often includes graphics, can be quite large.</p>
<h4>Controlling traffic</h4>
<p>
The most effective optimization of intranet browsing traffic is during the creation of Web pages because the majority of Web traffic is caused by the size of the files being copied across the network.</p>
<p>
Because intranet browsing can generate very significant amounts of network traffic, anything that can be done to reduce the traffic generated can be beneficial in the overall scheme of network usage.</p>
<p>
Keep Web site pages small. As a general rule, it is good HTML design to limit scrolling of pages. Keeping them small will assist in the downloading of a single page, but make sure necessary information is available on other pages that can be loaded.</p>
<p>
Limit the size of graphics or .avi files used. Each file must be downloaded to the client computer. The larger the files (especially graphics), the more network traffic generated to download the file. Reuse common graphics throughout the intranet.</p>
<p>
Increase the client's local cache. When browsing an intranet, pages are downloaded to the client and placed in a directory called the cache. When the designated amount of disk space for the cache is used and more files are required, the cache must be emptied (deleted). Thus, a previously loaded file must be copied over the network again, instead of loading it from the local hard disk cache.</p>
<p>
Consider whether security is a big concern at your site. With security enabled, additional authentication traffic is required for each session that is established. Allowing anonymous connections will prevent the authentication traffic from occurring on the network.</p>
</BODY>
</HTML>

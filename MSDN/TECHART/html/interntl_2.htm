<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing DBCS Applications</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Developing DBCS Applications</h1>
<p>
Windows developers targeting the Asian marketplace can build database applications for Microsoft SQL Server 6.5 using a variety of DBCS character sets (Chinese, Japanese, or Korean). There are a many special considerations, coding techniques, and database issues that affect the development of DBCS applications that use SQL Server for database operations. </p>
<p>
This paper addresses SQL Server-specific issues only and is not a comprehensive guide about how to create DBCS-enabled Windows applications. For a comprehensive guide on how to build DBCS-enabled applications, see<i> Developing International Software for Windows 95 and Windows NT</i>.</p>
<p>
This section divides the topic of building DBCS-enabled SQL Server applications into client application design issues and database administration issues.</p>
<h3>DBCS Client Application Design Issues</h3>
<p>
Windows application developers building database applications using ODBC must be aware of several critical issues when building DBCS-enabled applications that communicate with Microsoft SQL Server. These issues include DBCS string handling, using Input Method Editors, sizing ODBC buffers, and using certain ODBC canonical functions.</p>
<h4>Handling DBCS Strings</h4>
<p>
DBCS-enabled applications must be coded to ensure proper handling of DBCS strings. If your code doesn't handle DBCS strings properly, you can separate a lead-byte from a trail-byte and mistakenly treat a single character as two separate characters. Any code that manipulates strings must check for double-byte pairs including search, edit, move, replace, delete, and insert operations. Display operations must be programmed properly to handle DBCS strings, including cursor placement, backspacing, and character selection operations. For more information about building DBCS-enabled Windows applications, see <i>Developing International Software for Windows 95 and Windows NT</i>.</p>
<h4>Handling DBCS Input</h4>
<p>
A standard 101-key keyboard cannot represent all the characters in a DBCS character set, so Windows-based DBCS and Unicode applications use an Input Method Editor (IME) to enable input of extended characters. For more information about IME coding techniques, see <i>Developing International Software for Windows 95 and Windows NT</i>.</p>
<h4>Sizing ODBC Data Buffers</h4>
<p>
ODBC uses a variety of buffers when communicating with the SQL Server ODBC driver. All of these buffers are sized in bytes, not characters. Your buffers must be large enough to handle the total bytes required for a DBCS string to avoid truncation. If a DBCS string is truncated you can inadvertently separate a lead-byte from a trail-byte, which would corrupt your data.</p>
<p>
It is impossible to determine the number of characters in a DBCS string without processing it first. Therefore, using an ODBC variable-length character data type such as SQL_VARCHAR or SQL_LONGVARCHAR is recommended when working with columns that contain DBCS strings.</p>
<h4>Use of ODBC LENGTH Canonical Function</h4>
<p>
If you use ODBC canonical syntax to call functions in SQL statement text by way of <b>SQLPrepare</b> or <b>SQLExecDirect</b>, it is important to understand how the ODBC canonical <b>LENGTH</b> function works against a SQL Server running a DBCS code page. This function maps to the Transact-SQL <b>DATALENGTH</b> function that returns the length in bytes, not characters, of the string upon which it operates.</p>
<h3>DBCS Database Administration Issues</h3>
<p>
The SQL Server 6.5 engine is fully DBCS-enabled. Several SQL Server-specific DBCS issues that apply to database administrators are discussed in this section. These topics include DBCS object names, size of character columns, and use of Transact-SQL functions when manipulating DBCS strings.</p>
<h4>DBCS Object Names</h4>
<p>
All Transact-SQL statements, functions, and system stored procedures support the use of DBCS strings for object names. This means that you can name tables, views, and all other SQL Server objects using DBCS strings. Be aware that object names are limited to 30 bytes.</p>
<h4>Sizing Character Columns</h4>
<p>
SQL Server table columns are sized in bytes not characters. Size your columns to be large enough to handle the total bytes required for a DBCS string to avoid truncation. If a DBCS string is truncated you can inadvertently separate a lead-byte from a trail-byte, which could corrupt your string. </p>
<p>
For example, a DBCS string that contains 20 characters may consume 22 bytes of storage because the last two characters are full-width characters. If you attempt to store this string in a column of type <b>char(21)</b> the trailing byte of the last full-width character would be truncated, which would corrupt the string.</p>
<h4>Transact-SQL String Functions</h4>
<p>
Most Transact-SQL functions that manipulate character strings have been fully DBCS-enabled. This table describes each string function from a DBCS perspective. For a detailed description of each of these functions, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=21%><b>DBCS-enabled</b></td>
<td class=label width=58%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=21%>CONVERT</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Truncates DBCS-strings by ensuring that if a truncation occurs involving a full-width character, both bytes of the full-width character are truncated not just the trailing byte.</td>
</tr>
<tr valign=top>
<td width=21%>ASCII</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Returns the integer value representing the code point for single-byte (usually ASCII) characters only. If you try to use it on a double-byte character it returns an error.</td>
</tr>
<tr valign=top>
<td width=21%>CHAR</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Returns the corresponding single-byte (usually ASCII) character using the integer value representing the code-point for the corresponding single-byte character. This function returns an error if you pass the integer code-point for a double-byte character.</td>
</tr>
<tr valign=top>
<td width=21%>CHARINDEX</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Searches a DBCS string for the first occurrence of a character (either single- or double-byte) and returns an integer value representing its logical (not byte) position in the string. </td>
</tr>
<tr valign=top>
<td width=21%>LOWER / UPPER</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Returns the lower- or upper-case equivalent of a single-byte character. Returns the same character if there is no lower- or upper-case equivalent or if it is a double-byte character.</td>
</tr>
<tr valign=top>
<td width=21%>LTRIM / RTRIM</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Removes leading or trailing spaces in DBCS strings.</td>
</tr>
<tr valign=top>
<td width=21%>PATINDEX</td>
<td width=21%>Partially</td>
<td width=58%>This function is DBCS-enabled when working with character data types (same as CHARINDEX). It is not DBCS-enabled when searching a <b>text</b> data type, however.</td>
</tr>
<tr valign=top>
<td width=21%>REPLICATE</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Replicates either single-byte or double-byte characters.</td>
</tr>
<tr valign=top>
<td width=21%>REVERSE</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Reverses DBCS strings.</td>
</tr>
<tr valign=top>
<td width=21%>RIGHT</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Extracts the rightmost <i>n</i> characters (not bytes) from a DBCS-string.</td>
</tr>
<tr valign=top>
<td width=21%>STUFF</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Inserts a DBCS-string into another DBCS-string using characters (not bytes) as the index.</td>
</tr>
<tr valign=top>
<td width=21%>SUBSTRING</td>
<td width=21%><font face="Wingdings">ü</font></td>
<td width=58%>Removes a DBCS-string from another DBCS-string using characters (not bytes) as the index and counter.</td>
</tr>
</table><br>
</BODY>
</HTML>

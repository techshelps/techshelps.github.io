<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 117: Changing a Menu's Shortcut Key at Run Time</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn117"></a></sup>Tip 117: Changing a Menu's Shortcut Key at Run Time</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
When you use the Menu Editor in Microsoft® Visual Basic®, you can assign a shortcut or accelerator key to each individual menu entry. This article shows how you can change this shortcut key at run time within your Visual Basic application.</p>
<h2>Setting Shortcut Keys in Visual Basic Menus</h2>
<p>
The Microsoft® Visual Basic® Menu Editor lets you easily design a menu system for your application. When your program is run, the user can click a menu entry to perform some kind of operation. As an alternative to using the mouse to select a menu entry, the user can type a keystroke combination such as ALT+S to invoke the menu selection. These keystroke combinations are called <i>access</i> or <i>accelerator keys</i>.</p>
<p>
After you have designed your menu structure in the Visual Basic Menu Editor, you may decide to change the access key for a specific menu entry at run time. The example program below changes the ALT+F access key for the File menu to ALT+E.</p>
<p>
To change a menu entry's access key at run time, you need to process the keystrokes at the form-level. That is, the KeyDown event for the underlying form will need to be monitored.</p>
<p>
The KeyDown event in Visual Basic is triggered each time a user presses a key on the keyboard. The event is triggered for the control that has the focus. In this case, the control is the form that the menu is attached to.</p>
<p>
The KeyDown event tells you which key or combination of keys was just pressed on the keyboard. The <i>KeyCode</i> argument gives you a unique number that identifies each individual key on the keyboard. For example, if the <i>KeyCode</i> value returned is 9, you know that the TAB key was just pressed.</p>
<p>
In the example program below, you use the KeyDown event to determine if the user pressed the CTRL+E keystroke combination. If CTRL+E was pressed, the program displays a message box telling you that the File menu item was selected. In all other cases, the KeyDown event simply ignores the incoming keystrokes.</p>
<h2>Example Program</h2>
<p>
This program shows how to change a menu item's shortcut key from within a Visual Basic application.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1:<pre><code>Option Explicit
Dim ShortCut As String * 1
</code></pre>
</li>
<li>
From the Visual Basic Tools menu, click Menu Editor to create a single menu item. In the Caption field, type "&amp;File", and in the Name field, type "mnuFile". Click OK to create the menu structure and to return to the design mode in Visual Basic.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Command1.Caption = "Change ShortCut"
 &nbsp;&nbsp; KeyPreview = True
End Sub
</code></pre>
</li>
<li>
Add the following code to the KeyDown event for Form1:<pre><code>Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
 &nbsp;&nbsp; If Shift And 2 &lt;&gt; 2 Then Exit Sub
 &nbsp;&nbsp; If KeyCode = Asc(ShortCut) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mnuFile_Click
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event for mnuFile:<pre><code>Private Sub mnuFile_Click()
 &nbsp;&nbsp; MsgBox "Menu was selected"
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Change Item".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; ShortCut = "E"
 &nbsp;&nbsp; mnuFile.Caption = "Fil" &amp; "&amp;" &amp; LCase$(ShortCut)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Notice the menu at the top of the form. The menu entry says "File" with the letter <i>F </i>underlined. The letter <i>F</i> is the menu entry's access key. Click the command button. The menu changes to "File" with the letter <i>e</i> designated as the access key. Press CTRL+E on the keyboard; a message box pops up saying that that menu item was just clicked.</p>
</BODY>
</HTML>

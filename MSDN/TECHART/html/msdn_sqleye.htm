<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLEYE: A SQL Server Analysis Tool</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_sqleye"></a></sup>SQLEYE: A SQL Server Analysis Tool</h1>
<p>
Peter Williams<br>
Microsoft Corporation</p>
<p>
Created: October 6, 1994</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3192">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the SQLEYE sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article describes SQLEYE, which is a Windows NT™–based open data services (ODS) application that can be used to view or log the information being sent between SQL Server and its clients.</p>
<h2>Introduction</h2>
<p>
SQLEYE is a "pass-through" gateway application that can be used to view or log the information being sent between SQL Server and its clients. A client application that normally connects directly to SQL Server can instead connect to SQLEYE. SQLEYE will, in turn, connect to SQL Server, providing a link that is transparent to the application.</p>
<p>
Once the communication link has been established, SQLEYE allows you to view and or log the following:
<ul type=disc>
<li>
Queries being sent to SQL Server<br><br></li>
<li>
Results returned<br><br></li>
<li>
Row counts<br><br></li>
<li>
Messages<br><br></li>
<li>
Errors<br><br></li>
<li>
Attentions</li>
</ul>
<p>
It is also possible to attach timing information to each of the above.</p>
<p>
<img src="sqleye_1.gif" border=0></p>
<p class=label>
<b>Information displayed by SQLEYE (the main window title reflects the startup parameters)</b></p>
<p>
The Transact-SQL™ queries can be recorded in script files on a per-connection basis. These files can be used to replay the activity of the client application.</p>
<p>
Files that hold Statistics IO and Statistics TIME information can also be created. These script files can be used to populate statistics tables against which ad-hoc queries can then be run.</p>
<p>
Most SQL Server applications work transparently through SQLEYE without any modification, including open database connectivity (ODBC) applications such as Microsoft<b>®</b> Access® version 2.0, when you use the SQL Server ODBC driver.</p>
<h2>Typical Uses of SQLEYE</h2>
<ul type=disc>
<li>
Application developers can use SQLEYE as a simple way of confirming the queries being sent to SQL Server. <br><br></li>
<li>
If third-party applications are suspected of causing system problems, systems administrators and support staff can monitor their activity using SQLEYE. Scripts can also be built to replay this activity.<br><br></li>
<li>
Statistical information can be collected on a serverwide basis.<br><br></li>
<li>
The visual display can be used to provide a high level view of server activity.<br><br></li>
<li>
If only selected users connect via SQLEYE, it is possible to pause SQLEYE and restrict new logins for those users only.</li>
</ul>
<h2>Screen Display</h2>
<p>
If you choose to display information on the screen, a new child window is created for each new user connection. These windows display the information using various color codes to distinguish the different information types. When these windows are minimized, the icon can be related to the specific application. The icon is mapped to the application name using the SQLEYE.MAP file, which should be in the same directory as SQLEYE.EXE.</p>
<p>
The format of SQLEYE.MAP is:</p>
<pre><code>&lt;SQL application name&gt; &lt;tab&gt; &lt;The icon file (normally the application's .EXE)&gt; &lt;cr,lf&gt;
</code></pre>
<p>
The supplied SQLEYE.MAP file contains mappings for the standard SQL Server applications. This file can be edited as needed.</p>
<p>
When minimized, various overlay icons are used to display the state of the respective connection:
<ul type=disc>
<li>
Up arrow: Transact-SQL being sent to SQL Server<br><br></li>
<li>
Up arrow with RPC: Stored procedure being called on SQL Server<br><br></li>
<li>
Hourglass: Waiting for SQL Server to process the request<br><br></li>
<li>
Down arrow: Results being returned to the client<br><br></li>
<li>
A ghost: A window that remains after the connection is closed</li>
</ul>
<p>
If no application-specific icon has been specified in SQLEYE.MAP, a default face icon is used and the hourglass overlay is replaced with the eyes opening on the default icon.</p>
<h2>Menu Options</h2>
<h3>The File Menu</h3>
<p>
Excluding the log file, SQLEYE can produce three types of files listed in the File menu:
<ul type=disc>
<li>
<b>Build Transact-SQL scripts</b> creates <i>spid</i>.SQL scripts on a per-connection basis. (Files are named <i>spid</i>.SQL, where <i>spid</i> is the server connection ID displayed in the window titles.) Note: If the same connection number is reused, the Transact-SQL is appended to the existing file.<br><br></li>
<li>
<b>Record Statistics IO</b> generates two .SQL files (SQLREADS.SQL and SQLWRITE.SQL) in which it records page reads and page writes. The structure of the files is a series of insert statements that can be used to populate statistics tables on a SQL database. In SQLREADS.SQL, each line contains the user name, application name, host name, object name, scan count, logical reads, physical reads, and the first 255 bytes of the query. SQLWRITE.SQL contains similar information for page writes.<br><br></li>
<li>
<b>Record Statistics Time</b> generates a file called SQLCPU.SQL. Each line in this file contains the user name, application name, host name, CPU time, elapsed time, and the first 255 bytes of the query.</li>
</ul>
<h3>The View Menu</h3>
<p>
The displayed data is controlled by the View menu:
<ul type=disc>
<li>
<b>Set the clear buffer flag</b> clears all of the display windows when they next receive a data item to display.<br><br></li>
<li>
<b>Queries, Results, Row counts, Messages, Errors, Attentions</b> toggle the display of various data elements. The current data in the window remains unchanged, but new information is filtered in line with the new menu selections. <br><br></li>
<li>
<b>Timings</b> prepends the current time to each new line within the window as it is generated.</li>
</ul>
<p>
The View menu is grayed if the gateway is started without the Screen Display check box selected.</p>
<h3>The Log Menu</h3>
<p>
You can log all information in a file called SQLEYE.LOG. This file can be configured dynamically any time through the options in the Log menu, which are similar to the options in the View menu. </p>
<h3>The Gateway Menu</h3>
<p>
The gateway can be controlled using the Gateway menu.
<ul type=disc>
<li>
<b>Start the gateway</b> starts the open data services (ODS) gateway.<br><br></li>
<li>
<b>Pause the gateway</b> prevents new users from connecting via SQLEYE. Users who are already connected are unaffected. The only exception is the System Administrator who can still make new connections. The System Administrator can pause SQLEYE remotely by sending the <b>pause sqleye</b> command from a query window. SQLEYE will recognize this command and will not pass it to SQL Server.<br><br></li>
<li>
<b>Restart the gateway</b> reverses the effects of pausing the gateway. The System Administrator can restart SQLEYE remotely by sending the <b>restart sqleye</b> command from a query window. SQLEYE will recognize this command and will not pass it to SQL Server.</li>
</ul>
<p>
Shutting down the gateway prevent new users from connecting via SQLEYE (including the System Administrator). Once all existing connections though SQLEYE have been closed, SQLEYE will display a message and terminate itself. This can only be done remotely and is analogous to the SQL Server <b>Shutdown</b> command. The System Administrator must send the <b>shutdown sqleye</b> command from a query window. SQLEYE will recognize this command and will not pass it to the SQL Server.</p>
<p>
Although it is possible to terminate SQLEYE from the console, this is analogous to shutdown with "no wait" (it will not wait for users to disconnect before termination). Although warnings are displayed, it is up to the user to ensure that it is safe to shut down SQLEYE in this way.</p>
<h3>The Messages Menu</h3>
<p>
You can use the <b>Send to all users</b> option to send a DB-Library message to all users connected via SQLEYE. Some applications may not display these messages.</p>
<h3>The Window Menu</h3>
<p>
This menu controls the windows and their properties.
<ul type=disc>
<li>
<b>Auto-Tile</b> makes effective use of the screen area through retiling. When this option is selected, as new connections are established or existing connections dropped, the windows that are not minimized are retiled and windows that are minimized are rearranged. Several of the System menu options are grayed out if this option is selected. (This option may not be appropriate in environments where the connections change rapidly.)<br><br></li>
<li>
<b>Auto-Scroll</b> sets display windows to scroll automatically when new information is displayed, giving an up-to-date view of activity. (This option is processor-intensive. It is recommended that you keep the number of non-minimized windows to a minimum when using this option.)<br><br></li>
<li>
<b>Start Minimized</b> creates new display windows in an initially minimized state. (This is normally the least processor-intensive option.)<br><br></li>
<li>
<b>Ghosts</b> keeps the screen information for a client connection after the client connection has been disconnected. A special icon identifies these windows, and the Close option in the System menu is enabled. (If left unattended, this option can result in very large numbers of windows within the display area.)</li>
</ul>
<p>
The recommended configuration (and the default starting option) is for new windows to be created in the minimized state using little processor time and giving a general overview of server activity. Any windows that are of particular interest can be restored. They will automatically be tiled and will begin to scroll as new information arrives.</p>
<h2>Connecting to Other Servers</h2>
<p>
Although a default server name is specified when SQLEYE is started, it is possible to override this setting and log into several different servers simultaneously via one instance of SQLEYE. To do this, the client application should append @<i>servername</i> to the login ID. For example, user Fred who wishes to connect via SQLEYE to a SQL Server called OtherServer should specify a user name of Fred@OtherServer. SQLEYE will then login to OtherServer using the user name Fred.</p>
<h2>Installing SQLEYE</h2>
<h3>Files Needed</h3>
<p>
To run SQLEYE in the default minimum configuration, you will need the files listed below.</p>
<p>
Application-specific files:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=38%>SQLEYE.EXE</td>
<td width=62%>Main program</td>
</tr>
<tr valign=top>
<td width=38%>SQLEYE.MAP</td>
<td width=62%>Icon mapping file described earlier</td>
</tr>
</table><br>
<p>
General SQL Server DLLs (supplied with SQL Server) and normally installed in the \SQL\DLL directory:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=38%>DBNMPNTW.DLL</td>
<td width=62%>Named pipe Net-Library (client side)</td>
</tr>
<tr valign=top>
<td width=38%>SSNMPNTW.DLL</td>
<td width=62%>Named pipe Net-Library (server side)</td>
</tr>
<tr valign=top>
<td width=38%>NTWDBLIB.DLL</td>
<td width=62%>Windows NT™ DB-Library</td>
</tr>
<tr valign=top>
<td width=38%>OPENDSNT.DLL</td>
<td width=62%>ODS library run time</td>
</tr>
</table><br>
<p class=indent>
<b><B>Important Note</B>&nbsp;&nbsp;&nbsp;</b>OPENDSNT.DLL ships with all version of SQL Server and can also be licensed separately. </p>
<p class=indent>
Please read your Microsoft SQL Server and Microsoft Open Data Services license agreements for further details. The following installation instructions assume that you have valid licenses for the necessary DLLs.</p>
<p>
If you are using a protocol other than named pipes, the relevant Net-Libraries are required.</p>
<h3>Setup Modes</h3>
<h4>1. Separate machines</h4>
<p>
If you are installing SQLEYE on a server that is not running SQL Server, no further setup is necessary. SQLEYE will start on the default pipe (\\.\pipe\sql\query). This will appear to the client application as if it were SQL Server.</p>
<h4>2. SQLEYE on an alternate pipe</h4>
<p>
If you are installing SQLEYE on the same machine as SQL Server, either SQL Server or SQLEYE will need to be started on an alternate pipe. </p>
<p>
To start SQLEYE on an alternate pipe:
<ul type=disc>
<li>
Create a key in the registry called HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SQLServer\SQLEYE. (It need not be called SQLEYE, this is only a suggested name.) This name must be specified as the registry key when starting SQLEYE.<br><br></li>
<li>
Add a value within this key called ListenOn with a value of SSNMPNTW,\\.\pipe\sqleye\query. (Again, the name SQLEYE is a suggestion.)<p class=tl>
At this point, you can start SQLEYE by leaving the server field blank (this will default to the local server) and specifying <b>sqleye</b> as the registry key.</P></li>
<li>
To allow a client to connect to SQLEYE, you must now use the advanced section of the client configuration utility to add a new entry. For example, on a Windows® workstation, specify a DLL name of <b>dbnmp3</b> and a connection string of \\&lt;servername&gt;\pipe\sqleye\query.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Only those clients that have been configured in this way can connect via SQLEYE. All other clients will connect directly to the SQL Server.</p>
<p>
Other Net-Libraries may be used; please see the <i>SQL Server Configuration Guide</i> for further information.</p>
<h4>3. SQL Server on an alternate pipe</h4>
<ul type=disc>
<li>
Add the registry key for SQLEYE as above, except that we will now set the ListenOn for SQLEYE to SSNMPNTW,\\.\pipe\sql\query.<br><br></li>
<li>
Modify the ListenOn for SQL Server held in HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SQLServer\Server to an alternate pipe name.<br><br></li>
<li>
To allow SQLEYE to connect, use the advanced section of the client configuration utility on the server to add a new entry for SQL Server's new pipe name. This time, we use the DLL name <b>dbnmpntw</b> and the pipe name now used for the ListenOn in the Server section.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;No client configuration is now necessary; all clients will connect via SQLEYE. However, if SQLEYE is not running, no clients will be able to connect to SQL Server (unless you inform them of the new pipe name).</p>
<p>
Other Net-Libraries may be used; please see the <i>SQL Server Configuration Guide</i> for further information.</p>
<h4>4. Multiple copies of SQLEYE</h4>
<p>
To run several instances of SQLEYE on the same machine, you will need to create a registry key for each instance, because each instance must have a unique pipe name.</p>
<h2>Starting SQLEYE</h2>
<p>
When you start SQLEYE, an initialization dialog that requires the following information is displayed:
<ul type=disc>
<li>
<b>SQL Server to Direct Queries to:</b> The default SQL Server to which clients connecting to SQLEYE will be routed.<br><br></li>
<li>
<b>SQL Registry Key:</b> The registry key that contains the ListenOn information, as discussed in the "Installing SQLEYE" section above.<br><br></li>
<li>
<b>Screen Display:</b> Controls the presence of any data display windows. If this option is not checked, the View menu will be grayed.</li>
</ul>
<h2>Command-Line Options</h2>
<p>
You can specify various command-line parameters to allow SQLEYE to be started from a batch file:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=6%></td>
<td width=36%>/r &lt;registry key&gt;</td>
<td width=58%>This should contain a ListenOn value</td>
</tr>
<tr valign=top>
<td width=6%></td>
<td width=36%>/s &lt;server name&gt;</td>
<td width=58%>The default server to connect to</td>
</tr>
<tr valign=top>
<td width=6%></td>
<td width=36%>/m &lt;start minimized&gt;</td>
<td width=58%>SQLEYE will start minimized</td>
</tr>
<tr valign=top>
<td width=6%></td>
<td width=36%>/a</td>
<td width=58%>Auto-start (no configuration screen)</td>
</tr>
<tr valign=top>
<td width=6%></td>
<td width=36%>/l</td>
<td width=58%>Log only (the Screen Display check box is not selected)</td>
</tr>
</table><br>
</BODY>
</HTML>

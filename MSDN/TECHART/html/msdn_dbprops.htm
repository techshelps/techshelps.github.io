<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Custom Database Properties in Application Development</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_dbprops"></a></sup>Using Custom Database Properties in Application Development </h1>
<p>
Microsoft Corporation</p>
<p>
July 1996</p>
<h2>Overview</h2>
<p>
There are many acceptable ways to capture data in the information-gathering process of the various dialog boxes in a wizard and in custom applications that interact with the user. Many developers will use public variables to hold the selection, and then reference the variables in code as needed. Other techniques involve saving the data to tables or writing the output to an external file. One of the more powerful methods is to use custom database properties. </p>
<p>
The benefits of this approach include: 
<ul type=disc>
<li>
A visual dialog to create and manipulate entries. <br><br></li>
<li>
Static values that can be retrieved from any form. <br><br></li>
<li>
Easy implementation.<br><br></li>
<li>
Less memory usage. </li>
</ul>
<p>
This technique makes debugging and testing your custom wizards much easier because you can test any wizard dialog box as though you had stepped through the previous dialog boxes. </p>
<h2>How to Create Custom Database Properties</h2>
<p>
Custom database properties are created using the <b>Database Properties</b> dialog box in Microsoft® Access: 
<ol>
<li>
Press F11 to bring focus to the Database window. <br><br></li>
<li>
On the <b>File</b> menu, click <b>Database Properties</b>. <br><br></li>
<li>
In the <b>Database Properties</b> dialog box, click the <b>Custom</b> tab. <br><br></li>
<li>
Add your custom property.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This article uses <b>DBName</b> as an example. </p>
<h2>How to Return Custom Database Properties</h2>
<p>
The following function will return values from the custom database properties: </p>
<pre><code>Function GetCustomProps(PropName As String) As Variant
 &nbsp; 
  ' **********************************************
  ' Function: GetCustomProps
  '
  ' Purpose:
  ' Based upon the passed value, a variant
  ' is returned containing the requested
  ' custom property value.
  '
  '
  ' Returns: Boolean
  ' **********************************************
 &nbsp; 
 &nbsp; On Local Error GoTo GetCustomProps_Err
 &nbsp; 
 &nbsp; Dim db As DATABASE, prp As Property
 &nbsp; 
 &nbsp; Set db = CodeDb
 &nbsp; Set prp = db.Containers(0).Documents("UserDefined").Properties(PropName)
 &nbsp; 
 &nbsp; If IsNull(prp) Then
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' A null value may break certain
 &nbsp;&nbsp;&nbsp;&nbsp; ' aspects of formulas used in the
 &nbsp;&nbsp;&nbsp;&nbsp; ' wizard and default values.
 &nbsp;&nbsp;&nbsp;&nbsp; GetCustomProps = False
 &nbsp; 
 &nbsp; Else
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; GetCustomProps = prp
 &nbsp; 
 &nbsp; End If
GetCustomProps_End:
 &nbsp; 
 &nbsp; Exit Function
GetCustomProps_Err:
 &nbsp; 
 &nbsp; GetCustomProps = Err.Number
 &nbsp; Resume GetCustomProps_End
End Function
</code></pre>
<h2>How to Modify Existing Values of Custom Properties</h2>
<p>
The following code will enable you to manipulate existing entries: </p>
<pre><code>Function SetCustomProps(PropName As String, PropValue As Variant) As Boolean
 &nbsp; 
  ' **********************************************
  ' Function: SetCustomProps
  '
  ' Purpose:
  ' Save the specified custom property and its
  ' associated value in the custom database
  ' property values.
  '
  '
  ' Returns: Boolean
  ' **********************************************
 &nbsp; 
 &nbsp; On Local Error GoTo SetCustomProps_Err
 &nbsp; 
 &nbsp; Dim db As DATABASE, prp As Property
 &nbsp; 
 &nbsp; Set db = CodeDb
 &nbsp; Set prp = db.Containers(0).Documents("UserDefined").Properties(PropName)
 &nbsp; prp = PropValue
 &nbsp; 
 &nbsp; SetCustomProps = True
SetCustomProps_End:
 &nbsp; 
 &nbsp; Exit Function
SetCustomProps_Err:
 &nbsp; 
 &nbsp; SetCustomProps = Err.Number
 &nbsp; Resume SetCustomProps_End
End Function
</code></pre>
<h3>Setting Defaults Before Releasing Your Application</h3>
<p>
You should have a function dedicated to resetting your custom properties to default values before shipping your application or wizard. You never want an end user to see testing information or erroneous information the first time that the end user starts your application. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following example assumes that you have added a custom string property named <b>DBName</b>. </p>
<pre><code>Sub SetDefaults()
 &nbsp; 
 &nbsp; On Error Resume Next
 &nbsp; 
 &nbsp; Dim Result As Integer
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ' Reset all custom wizard properties.
 &nbsp; Result = SetCustomProps("DBName", "N/A")
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; MsgBox "All Properties Set to Defaults!", vbInformation, "YourAppName"
 &nbsp; 
End Sub
</code></pre>
<h2>Putting the Functions Together</h2>
<p>
The following piece of code saves the name of the database the user selected: </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following example assumes that you have added a custom string property named <b>DBName</b>. </p>
<pre><code>' Save the selected database name.
 &nbsp;&nbsp;&nbsp;&nbsp; Result = SetCustomProps("DBName", CStr(Me!MRU))
 &nbsp;&nbsp;&nbsp;&nbsp; If Not (Result = True) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = "There was an internal error in the wizards ability to save"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; " the 'DBName' option to the custom properties..." &amp; vbCrLf &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Error# = " &amp; Format$(Result)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbInformation, "YourAppName"
 &nbsp;&nbsp;&nbsp;&nbsp; End If
</code></pre>
<p>
Once the values are saved, they can be retrieved at any time. In the case of a wizard, the user may click the <b>Back</b> button to return to the previous dialog box. By adding the following code to the form's <b>OnOpen</b> event, you can retrieve the previous values easily: </p>
<pre><code>If Len(OpenArgs) Then
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' Existence of OpenArgs indicates that the wizard
 &nbsp;&nbsp;&nbsp;&nbsp; ' page is being accessed by the user returning
 &nbsp;&nbsp;&nbsp;&nbsp; ' to the page from a previous page.
 &nbsp;&nbsp;&nbsp;&nbsp; Me!txtDBName = GetCustomProps("DBName")
 &nbsp; 
End If
</code></pre>
<p>
The above code uses the existence of the OpenArgs value to act as a flag that another dialog box is returning to the page and that the values should be retrieved to reflect the user's previous selections. </p>
</BODY>
</HTML>

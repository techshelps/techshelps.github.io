<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Expert Agent Add-In for Microsoft Visual Basic 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vb5addin65"></a>An Expert Agent Add-In for Microsoft Visual Basic 5.0</h1>
<p>
Valor Whisler<br>
Applications Architect </p>
<p>
June 10, 1997</p>
<p>
<i>Valor Whisler is an applications architect specializing in high quality UI and applications development using Visual Basic. Valor designed and developed the first commercial add-in for Visual Basic: VB AppFramework.</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5148">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the the source code for Expert Agent.</a></p>
<h2>Abstract</h2>
<p>
This document introduces add-ins and then develops the idea of an <i>expert agent</i> add-in. This expert agent is a vision of a set of comprehensive development services that take development with Microsoft® Visual Basic® to a new level. I hope that readers will agree and bring the agent to life. </p>
<p>
This document provides a limited discussion of building an add-in; for more details, examine the Visual Basic sample add-in projects, projects generated using the add-in template (seen when creating a new project), or add-in projects created with the Wizard Manager.</p>
<h2>Introduction</h2>
<p>
Imagine that you could extend Visual Basic to provide new functionality and that you could customize the development environment so that it would be tailored to your particular needs. Imagine intelligent assistants that can make coding suggestions, help assure standardized code, or generally clean up your code. Imagine wizards that can automate those tedious tasks and provide "macro-like" functions to generate code and user interfaces. Now stop imagining this—all of these capabilities are here today with the Visual Basic 5.0 extensibility model and add-in interface.</p>
<p>
Anything that you can do from the keyboard, you can do from an add-in. But even more important than the automation of repetitive tasks is the ability to embellish add-ins with high-level business, architectural, or procedural logic. An add-in can be used as a "wrapper" that provides the experience and expertise of key engineers to all developers—every minute of every day. We have all heard about artificial intelligence and we have also heard how distant a dream it really is. It is, however, possible today to provide <i>intelligence assistance</i>, and that's what the expert agent is all about.</p>
<p>
Add-ins can be created with Visual Basic. In fact, the wizards that ship with Visual Basic are themselves add-ins created in Visual Basic. These wizards have been included to help automate several different kinds of programming tasks. To get a quick look at what an add-in can do, load the Visual Basic Wizard Manager add-in that comes with the product. This add-in assists in the development of new add-ins that use a wizard-style interface. </p>
<p>
This is the second release of the Visual Basic extensibility model. The first release provided a solid base to work with. This release is a substantial upgrade from the original, providing many new features and more functionality, as well as a greatly enhanced object model. One of the most beneficial enhancements, the ability to manipulate code, is now available. There are features that allow you to extend your add-in interface directly into the Visual Basic IDE (Integrated Development Environment) so that it can be docked and linked like the Project Explorer, Properties window, and Toolbox. Other features leverage the new capability to have multiple projects open within the same instance of Visual Basic. Finally, there are less obvious features that address the needs of power users, such as the ability to iterate through all contained objects.</p>
<h2>Creating an Add-In</h2>
<p>
This section provides a brief discussion of how to create a simple add-in. The easiest way to create an add-in is to use the Visual Basic Addin template. To do this, from the <b>File</b> menu click <b>New Project</b>. When the New Project dialog box appears, select the <b>Addin</b> icon and proceed. Visual Basic will add three components: 
<ul type=disc>
<li>
<b>AddIn</b> (Code Module) — This module contains a function that writes an entry to the vbaddin.ini file. This entry is required to tell Visual Basic that your add-in should appear on the list of add-ins available to Visual Basic.<br><br></li>
<li>
<b>frmAddIn</b> (Form) — This form is meant to provide the developer with the beginnings of the add-in interface.<br><br></li>
<li>
<b>Connect</b> (Class Module) — This module contains the operational code for the add-in interaction with Visual Basic. </li>
</ul>
<p>
Connecting an add-in to Visual Basic in version 5.0 is completely different than in version 4.0. In version 4.0, a developer had to write the connect and disconnect procedures from scratch. Using a new capability in version 5, a developer merely has to implement the IDTExtensibility add-in interface that is contained in the VBIDE (Visual Basic Integrated Development Environment) object. Once this interface is implemented, four methods are available in the class module that implements the interface. These methods are all that is needed to connect, disconnect, and manage the connection between Visual Basic and your add-in. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>For more information on implementing another object's interface, see the <i>Implements</i> keyword in Visual Basic.</p>
<p>
Once connected, most of the work the add-in will do will utilize the <b>VBInst</b> object that is passed into the add-in by Visual Basic within the <b>OnConnection</b> method. This object represents the root of a set of objects that allow you to query, manipulate, and receive session events regarding the Visual Basic IDE. This includes such things as adding components or controls and setting properties, or, in the case of the expert agent, reviewing and modifying code. A summarized version of the <b>VBInstance</b> object is shown below:</p>
<p>
<img src="vb5addin65a.gif" border=0></p>
<p class=label>
<b>Figure 1. Summarized VBInstance object diagram</b></p>
<p>
The objects on the left of the diagram (<b>Events</b>, <b>Addins</b>, <b>CommandBars</b>, <b>Windows</b>, and <b>CodePanes</b>) all function with reference to the VBIDE itself. The objects on the right of the diagram, starting with the <b>VBProjects</b> collection, all relate to manipulating Visual Basic projects. The <b>Designer</b> and <b>VBForm</b> objects are depicted with a wavy border to indicate that many possible types of designers belong here, one of which is the VBForm designer.</p>
<h2>Expert Agent Services</h2>
<p>
This section develops the idea of an <i>expert agent</i>. This is a mythical product that has yet to be produced, but which is possible, given the Visual Basic 5.0 extensibility model. Perhaps a reader of this paper will undertake the task of actually producing such an agent. All of the services provided by the agent pertain to core code, not interface. The expert agent will provide the following six services:</p>
<p>
<img src="vb5addin65b.gif" border=0></p>
<p class=label>
<b>Figure 2. Six services provided by the expert agent</b></p>
<h3>Expert Agent Services</h3>
<ul type=disc>
<li>
<b>Pattern Finder</b> — provides assistance by suggesting syntax or organizational changes in code. For example, the Pattern Finder may:<ul type=disc>
<li>
Replace the sequential use of calls to a particular object with the "With&nbsp;.&nbsp;.&nbsp;.&nbsp;End With" construct.<br><br></li>
<li>
Provide suggestions to replace long object resolutions (too many dots) with intermediate objects.<br><br></li>
<li>
Look for old syntax, which may still be supported but not optimal, with newer calling conventions.<br><br></li>
<li>
Look for an inordinate use of "Public" variables and highlight these.</li>
</ul>
</li>
<li>
<b>Naming Janitor</b> — looks for adherence to standard naming conventions, both variable prefixes and use of abbreviations.<br><br></li>
<li>
<b>Type Checker</b> — provides two types of services related to datatypes: (1) ensures that all variables have their datatype explicitly declared, and (2) ensures that all function calls pass in the correct datatypes and have appropriate datatype variables declared for function returns.<br><br></li>
<li>
<b>Error Wrapper</b> — scans the code base, pointing out areas where error handling routines should be provided. For example, the agent might be instructed to look for areas where arrays or strings are being manipulated; these types of routines can generate errors.<br><br></li>
<li>
<b>Scope Detective</b> — makes sure that all variables are declared with appropriate scope in mind. For example, a variable that is declared at a modular level, but only used in a single procedure should, in fact, be declared in that procedure.<br><br></li>
<li>
<b>Cleanup Master</b> — checks to see whether all objects are destroyed within the scope that they are created. It also checks to see that all forms are unloaded and set to nothing, and it can be made to check that other structures that allocate memory are cleared—for example, erasing arrays.</li>
</ul>
<h2>Implementing the Expert Agent</h2>
<p>
This section provides a discussion and code segments that illustrate how such an agent can be implemented. In addition, two working sample projects are provided: an agent add-in and an agent test project.</p>
<p>
The agent will primarily use three kinds of objects supplied by the VBIDE: <i>CodePanes</i>, <i>CodeModules</i>, and <i>Members</i>. The <b>CodePane</b> object represents a visible code window. A given component can have several <b>CodePane</b> objects. The <b>CodeModule</b> object represents the code within a component. A component can only have one <b>CodeModule</b> object. A member of a code module is an identifier that has module-level scope and can be considered a property, method, or event of that code module. Using these objects it is possible to view and manipulate every line of code in a Visual Basic project.</p>
<p>
<img src="vb5addin65c.gif" border=0></p>
<p class=label>
<b>Figure 3. Getting at Visual Basic code</b></p>
<p>
A special code pane, the <b>ActiveCodePane</b>, represents the code window that has the focus in a project. The following code example gets a handle to the <b>ActiveCodePane</b> and its <b>CodeModule</b> objects when the expert agent form is activated. It sets the <b>CodeModule</b> to a modular-level variable: <i>ThisCodeModule</i>. This variable is then used in a later procedure to get all of the members for the module.</p>
<pre><code>'&lt;Private&gt;---------------------------------------------
Private ThisCodeModule&nbsp; As VBIDE.CodeModule
'&lt;/Private&gt;--------------------------------------------
Option Explicit
Private Sub Form_Activate()
 &nbsp;&nbsp; Dim ThisCodePane As VBIDE.CodePane
 &nbsp;&nbsp; On Error GoTo InvalidObject
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- destroy previous CodeModule object
 &nbsp;&nbsp; Set ThisCodeModule = Nothing
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- get the active pane and its module
 &nbsp;&nbsp; Set ThisCodePane = VBInstance.ActiveCodePane&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Set ThisCodeModule = ThisCodePane.CodeModule
Cleanup:
 &nbsp;&nbsp; Set ThisCodePane = Nothing
End Sub
</code></pre>
<p>
The <b>CodeModule</b> object contains a <b>Members</b> collection that represents the actual code. There are seven types of member objects:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Type</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Method</b></td>
<td width=73%>Represents a method (procedure, or proc)</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Property</b></td>
<td width=73%>Represents a property procedure</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Variable</b></td>
<td width=73%>Represents a modular level variable</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Event</b></td>
<td width=73%>Represents an event</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Enum</b></td>
<td width=73%>Represents an enumerated value</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_Const</b></td>
<td width=73%>Represents a modular level constant</td>
</tr>
<tr valign=top>
<td width=27%><b>vbext_mt_EventSink</b></td>
<td width=73%>Represents an event sink </td>
</tr>
</table><br>
<p>
The <b>Member</b> object contains several properties—some of which define the starting location and number of lines of code belonging to the particular Member. This information is then supplied to the <b>Lines</b> method of a <b>CodeModule</b> object to retrieve the actual code. The following code example retrieves a line of code from <i>ThisCodeModule</i>, the variable that was set in the previous code example.</p>
<pre><code>'-------------------------------------------------------
'&lt;Purpose&gt; retrieves lines of code
'-------------------------------------------------------
Private Function RetrieveCode(StartLine As Long, EndLine As Long) As String
 &nbsp;&nbsp; RetrieveCode = ThisCodeModule.Lines(StartLine, EndLine)
End Function
</code></pre>
<p>
Once the agent has access to all of the code, it can begin its analysis. Each service contains a set of rules that are used to analyze the code. These rules will provide ways to recognize patterns within the code and then to recommend alternative approaches. Experts in various programming domains will create the rules themselves. For instance, a set of database rules may be devised by a database expert and a set of object rules devised by an OOP expert. An important part of the expert agent system will be a facility to edit, store, and retrieve the rules.</p>
<h2>Sample Projects</h2>
<p>
A sample set of projects is provided to further illustrate the expert agent concept. The ExpertAgent.vbp project contains the add-in code and a simple example of how the agent can look for repeated references in code. The TextXAgent.vbp project contains some code that can be used to test the scanning of code for such references. The AgentIni.vbp project and .exe can be used to configure the expert agent as a Visual Basic add-in.</p>
<p>
To use the projects:
<ol>
<li>
Open the ExpertAgent project, run it, and leave it running. (It will appear as if nothing happens.) <br><br></li>
<li>
Run the AgentIni project or .exe to configure the add-in.<br><br></li>
<li>
Open the TextXAgent project in a separate instance of Visual Basic.<br><br></li>
<li>
In the TextXAgent project, click <b>Add-Ins</b> and point to the <b>Add-In Manager </b>menu. Select <b>Expert Agent</b> as an available add-in.<br><br></li>
<li>
In the TextXAgent project, open the MainModule and make sure the Code window has focus.<br><br></li>
<li>
Select Expert Agent from the <b>Add-Ins</b> menu.<br><br></li>
<li>
Click the <b>Get Procs</b> button.<br><br></li>
<li>
Click the proc named <b>Main</b> in the list. (The procedure listing will show up at the bottom of the form.)<br><br></li>
<li>
Click the <b>Pattern Finder</b> button and step through the procedure.<br><br></li>
<li>
Once you have stepped through all of the code, click the <b>Get Recommendations</b> button.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If you wish to explore the add-in code, place breakpoints in the ExpertAgent Project.</p>
<p>
The expert agent sample product has the ability to analyze every line of code in a Visual Basic project. Its ability to recognize and correct problems is entirely simplistic but does provide a framework to expand upon.</p>
<h2>Conclusion</h2>
<p>
The extensibility model in Visual Basic 5.0 now provides a way to review and modify all of the code within a Visual Basic project. It is possible to build clever tools that analyze a code base and look for patterns. Domain experts could establish what patterns such a tool would look for and how they might be recognized. The domain experts could then recommend alternative patterns of code that might provide a more efficient or more standardized application of logic. The expert agent projects provide a simple proof-of-concept for such a system.</p>
</BODY>
</HTML>

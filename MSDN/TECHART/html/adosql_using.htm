<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using ADO with Visual Basic, VBScript, Visual C++, and Java</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="adosql_using"></a>Using ADO with Visual Basic, VBScript, Visual C++, and Java</h1>
<p>
The ADO object model is implemented as an OLE automation (ActiveX) DLL. This means ADO objects are programmable in any language that supports COM and OLE automation DLLs, such as Visual Basic, VBScript, Visual C++, and Java. </p>
<p>
ADO is cross language, which means it is consistent among different programming languages. ADO is freely redistributable. Because ADO is built on top of OLE DB, OLE DB components are required for redistribution. If the ODBC Provider is used as a provider, the ODBC Provider must be redistributed as well. </p>
<h3>Using ADO in Visual Basic Applications</h3>
<p>
Visual Basic applications can create an ADO object at design time or run time. ADO objects such as OLE Automation DLLs can be used as built-in objects in Visual Basic at design time. You can find out if these DLLs exist by clicking <b>References</b> on the <b>Project</b> menu. ADO objects can be declared using the Dim statement. </p>
<p>
The example shows specifying ADO objects at design time:</p>
<pre><code>Dim cn as New ADODB.Connection
Dim cmd as New ADODB.Command
Dim rs as New ADODB.Recordset
</code></pre>
<p>
All the examples shown in the ADO object model section use this approach.</p>
<p>
If the existence of the OLE Automation DLLs is not recognized at design time, you can create objects (classes) that are inside OLE Automation DLLs at run time. The <b>CreateObject</b> function creates an object at run time. The <i>class</i> of the object is passed as a String argument to <b>CreateObject</b>. The class names can be found using the Object Browser.</p>
<p>
ADO createable object classes are: ADODB.Connection, ADODB.Command, and ADODB.Recordset.</p>
<p>
This example shows creating an ADO object at run time specifying its class:</p>
<pre><code>Set rs=CreateObject("ADODB.Recordset")
</code></pre>
<h3>Using ADO in Visual Basic Script Web Pages</h3>
<p>
ADO can be used in VBScript language inside HTML or Active Server Pages. VBScript code is almost identical to Visual Basic code. For VBScript code to work in an HTML or Active Server Pages, the code must be inserted within a pair of HTML tags or under the Scripting section. </p>
<p>
VBScript cannot load ADO constants from the ADO type library; therefore, unless the ADO constants declaration file is included in VBScript code, the literal values of ADO constants must be specified. The Adovbs.inc file contains all the ADO constant definitions and can be included in your script.</p>
<p>
To use ADO objects in VBScript, first include the Adovbs.inc file, and then use the <b>CreateObject</b> method to create ADO objects. The Adovbs.inc file can be found in the OLE DB SDK redist directory.</p>
<p>
The example shows using ADO in a VB Scripting Web page to list customers' first and last names in a table:</p>
<pre><code>&lt;%@ LANGUAGE = VBScript %&gt;
&lt;HTML&gt;
&lt;TITLE&gt;Using ADO in a Visual Basic Script Web Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;LANGUAGE="VBS"&gt;
&lt;!--#include file="adovbs.inc"--&gt;
&lt;CENTER&gt;
&lt;H1&gt;&lt;font size=4&gt;Using ADO in a Visual Basic Script Web Page&lt;/H1&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;
&lt;%set myConnection = CreateObject("ADODB.Connection")
 &nbsp; myConnection.Open "DSN=pubs;UID=sa"
 &nbsp; SQLQuery = "select title_id,title from titles"
 &nbsp; set RSTitleList =&nbsp; myConnection.Execute(SQLQuery)%&gt;
&lt;TABLE align=center COLSPAN=8 CELLPADDING=5 BORDER=0 WIDTH=200&gt;
&lt;!-- BEGIN column header row --&gt;
 &nbsp; &lt;TR&gt; 
 &nbsp; &lt;TD&nbsp; VALIGN=TOP BGCOLOR="#800000"&gt;
&lt;FONT STYLE="ARIAL NARROW" COLOR="#ffffff" SIZE=1&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; Title ID&lt;/FONT&gt;
 &nbsp; &lt;/TD&gt;
 &nbsp; &lt;TD ALIGN=CENTER BGCOLOR="#800000"&gt;
&lt;FONT STYLE="ARIAL NARROW" COLOR="#ffffff" SIZE=1&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; Title&lt;/FONT&gt;
 &nbsp; &lt;/TD&gt;
 &nbsp; &lt;/TR&gt;
&lt;!-- Get Data --&gt;
&lt;% do while not RStitleList.EOF %&gt;
 &nbsp; &lt;TR&gt;
 &nbsp; &lt;TD BGcolor ="f7efde" align=center&gt;&lt;font style ="arial narrow" size=1&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;%=RStitleList("title_id")%&gt;&lt;/font&gt;
 &nbsp; &lt;/TD&gt;
 &nbsp; &lt;TD BGcolor ="f7efde" align=center&gt;&lt;font style ="arial narrow" size=1&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;%=RSTitleList("title") %&gt; &nbsp; &lt;/font&gt;
 &nbsp; &lt;/TD&gt;
 &nbsp; &lt;/TR&gt;
&lt;% RSTitleList.MoveNext%&gt;
&lt;%loop %&gt;
&lt;!-- Next Row --&gt;
&lt;/TABLE&gt;
&lt;/center&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Visual C++</h3>
<p>
Like any automation DLLs, a Visual C++ application can use the <b>CoCreateInstance</b> function to get pointers for ADO automation interfaces. The ADO globally unique identifiers (GUIDs) are defined in the Adoid.h file, and the ADO interfaces header is defined in the adoint.h file. </p>
<p>
Visual C++ version 5.0 introduced the #import directive, a new mechanism for manipulating OLE automation DLLs. Visual C++ version 5.0 applications can use the #import directive as an alternative for instantiating ADO interface pointers, instead of including Adoid.h and Adoint.h files.</p>
<p>
The example shows using the ADO Connection object to establish a connection in Visual C++:</p>
<pre><code>#include &lt;adoid.h&gt; &nbsp; 
#include &lt;adoint.h&gt; &nbsp; 

HRESULT Connect(char *m_strSource, char* m_strUser, char* m_strPassword, ADOConnection** piConnection) 
{
 &nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrSource = NULL;
 &nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrUser = NULL;
 &nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrPassword = NULL;
 &nbsp; HRESULT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr;
 &nbsp; WCHAR&nbsp;&nbsp; wszBuff[512];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // String Buffer (WCHAR)
 &nbsp; ADOConnection* piTmpConnection;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; 
 &nbsp; // Open the database.
 &nbsp; *piConnection = NULL;

 &nbsp; hr = CoInitialize(NULL);
 &nbsp; if (FAILED(hr))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_exit;
 &nbsp; 
 &nbsp; // Gets an interface pointer for the ADO connection object.&nbsp;&nbsp; 
 &nbsp; hr = CoCreateInstance(CLSID_CADOConnection, 
NULL, CLSCTX_INPROC_SERVER, IID_IADOConnection, (LPVOID *)&amp;piTmpConnection);
 &nbsp; if (FAILED(hr))&nbsp;&nbsp; return hr;

 &nbsp; MultiByteToWideChar(CP_ACP, 0, m_strSource, -1, wszBuff, 512);
 &nbsp; bstrSource = SysAllocString(wszBuff);
 &nbsp; MultiByteToWideChar(CP_ACP, 0, m_strUser, -1, wszBuff, 512);
 &nbsp; bstrUser = SysAllocString(wszBuff);
 &nbsp; MultiByteToWideChar(CP_ACP, 0, m_strPassword, -1, wszBuff, 512);
 &nbsp; bstrPassword = SysAllocString(wszBuff);&nbsp;&nbsp; 
 &nbsp; 
 &nbsp; // Establish a connection.
hr = piTmpConnection-&gt;Open( bstrSource, bstrUser, bstrPassword );&nbsp;&nbsp;&nbsp; 
 &nbsp; if (FAILED(hr)) goto err_exit;
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; *piConnection = piTmpConnection;

err_exit:
 &nbsp; SysFreeString(bstrSource);
 &nbsp; SysFreeString(bstrUser);&nbsp;&nbsp;&nbsp; 
 &nbsp; SysFreeString(bstrPassword);

 &nbsp; return hr;
}
</code></pre>
<h3>Java</h3>
<p>
Java applications can be used to import to the ADODB classes and then declare variables to associate with the ADO objects or to create the ADO objects with the new operators.</p>
<p>
The example shows using the ADO Connection object to establish a connection in Java:</p>
<pre><code>import msado10.*;

_Connection&nbsp;&nbsp; m_conn = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_Recordset&nbsp;&nbsp; m_rs = null;
_Command&nbsp;&nbsp; m_cmd = null;

void OpenConnection()
{
String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s;
Properties&nbsp;&nbsp; properties;
 &nbsp;&nbsp;&nbsp;&nbsp; 
try
{&nbsp;&nbsp; properties = m_conn.getProperties();

 &nbsp; m_conn.Open("dsn=pubs", "sa", "");
 &nbsp; properties = null;
}
catch (Exception e)
{&nbsp;&nbsp; System.out.println("\nUnable to make a connection \n"); 
}
}
</code></pre>
</BODY>
</HTML>

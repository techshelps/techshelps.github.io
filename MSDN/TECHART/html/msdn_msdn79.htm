<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 79: Closing All MDI Child Windows at One Time</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn79"></a></sup>Tip 79: Closing All MDI Child Windows at One Time</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can simultaneously close all child windows of a running Visual Basic® application.</p>
<h2>Using the Count Property of MDI Forms</h2>
<p>
The multiple document interface (MDI) feature of Visual Basic® allows you to create applications that have multiple forms within a single parent form. This allows you to use the multitasking functions of the Windows® operating system in your programs.</p>
<p>
The Windows Notepad is an example of an MDI application. You can open several text files at one time and move between each document with a click of the mouse.</p>
<p>
When you create a child form while your program is executing, you must also remember to close all the open child windows before your application terminates. Otherwise, you could cause some unforeseen problems with other applications.</p>
<p>
The count property of a control, such as a form, can be used to determine how many members of that particular collection exist. In this case, the collection refers to the child forms of the parent form. We can, therefore, determine how many child forms exist in our application program by executing a statement such as:</p>
<pre><code>X = Forms.Count
</code></pre>
<p>
After this statement executes, the variable <i>X</i> will contain the number of child forms that we have created. It is important to decrement this value by one because the count starts with the value of one, not zero. Once we know how many child forms we have created within our application program, we can use the <b>TypeOf</b> statement in a loop to close each child form that exists. The <b>TypeOf</b> statement is used to determine the type of object you are dealing with. In this case, we want to find out if the object is a form (Form1, the name of the child form).</p>
<p>
The final step to removing the child forms from the parent form is to use the <b>Unload</b> statement. Therefore, to remove all child forms from our program while it is running, we simply check each object in the form, making sure that it is indeed a child form of the MDI form, and execute an <b>Unload</b> statement to close the form.</p>
<h2>Example Program</h2>
<p>
The following program shows how to close all child forms at one time. Run the program by pressing the F5 function key. The MDIForm1 form is displayed. Double-click the client area of MDIForm1 to create a child form (Form1). Do this until you have several child forms visible on the screen. Click the "Close Children" menu option to close all child windows.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default. Set the <b>MDIChild</b> property to True.<br><br></li>
<li>
From Visual Basic's Insert menu, click "MDI Form" to create a Multiple Document Interface form. MDIForm1 is created by default.<br><br></li>
<li>
Add the following code to the DblClick event for MDIForm1:<pre><code>Private Sub MDIForm_DblClick()
 &nbsp;&nbsp; Dim X As New Form1
 &nbsp;&nbsp; X.Show
End Sub
</code></pre>
</li>
<li>
From Visual Basic's Tools menu, click Menu Editor. Set the Caption field to "&amp;Close Children" and the Name field to "mnuClose".<br><br></li>
<li>
Add the following code to the mnuClose_Click event:<pre><code>Private Sub mnuClose_Click()
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; For X = (Forms.Count - 1) To 0 Step -1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If TypeOf Forms(X) Is Form1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unload Forms(X)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next X
End Sub
</code></pre>
</li>
<li>
From Visual Basic's Tools menu, select Project Options. Set the StartUp Form to MDIForm1.</li>
</ol>
</BODY>
</HTML>

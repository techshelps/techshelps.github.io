<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 107: Detecting Double-Click Events in Combo Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn107"></a></sup>Tip 107: Detecting Double-Click Events in Combo Box Controls</h1>
<p>
June 5, 1995</p>
<h2>Abstract</h2>
<p>
When developing an application in Microsoft® Visual Basic®, you may want to let the user double-click the edit portion of a <b>Combo Box</b> control. This article explains how to process this double-click event by using the <b>Message Blaster</b> custom control.</p>
<h2>Using Message Blaster to Detect Double-Clicks on Combo Boxes</h2>
<p>
In a Microsoft® Visual Basic® application, you can use a <b>Combo Box</b> control to allow your user to easily select an item. Unfortunately, the <b>Combo Box</b> control only responds to single-click events, not to double-click events in the box's edit portion.</p>
<p>
You can, however, use a subclassing control such as <b>Message Blaster</b> to detect when a user has double-clicked the combo box. Before you can do this, you need to use two Microsoft Windows® application programming interface (API) functions—<b>GetWindow</b> and <b>GetClassName</b>.</p>
<p>
The <b>GetWindow</b> function retrieves the handle of a window that has a specific relationship to the source window. In other words, we need to determine the <b>Combo Box's</b> handle. The <b>Combo Box</b> window is actually a sibling window of our Visual Basic application's main form. Next, we need to call the <b>GetClassName</b> function to make sure that the edit portion of the <b>Combo Box</b> is the window we are dealing with.</p>
<p>
If you are using a combo box with its <b>Style</b> property set to 0 - Drop Down Combo, detecting a double-click message is relatively straightforward. Just retrieve the handle of the <b>Combo Box's</b> edit window, and then tell <b>Message Blaster</b> to intercept the Windows WM_LBUTTONDBLCLK message.</p>
<p>
On the other hand, if you are using a <b>Combo Box</b> with its <b>Style</b> property set to 1 - Simple Combo, the procedure is a little different. Because the edit portion of the <b>Combo Box</b> is already displayed, you need to call <b>GetWindow</b> to retrieve the handle of the edit window.</p>
<p>
After you have retrieved the edit window's handle, you must call the <b>GetClassName</b> function. This function is called so that we can be certain we are processing a double-click message for only the edit portion of the <b>Combo Box</b>. </p>
<h2>Example Program</h2>
<p>
This program shows how your Visual Basic application can respond to a double-click event when such an event is detected in the edit portion of a <b>Combo Box </b>control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
From the Insert menu, select Custom Control. Add the <b>Message Blaster</b> custom control to this project.<br><br></li>
<li>
Add a <b>Message Blaster</b> control to Form1. MsgBlast1 is created by default.<br><br></li>
<li>
Add the following code to the Message event for MsgBlaster1 (note that the first two lines of code must be typed as a single line of text):<pre><code>Private Sub MsgBlaster1_Message(MsgVal As Integer, wParam As Integer,
 &nbsp; lParam As Long, ReturnVal As Long)
 &nbsp;&nbsp; MsgBox "Combo1 box double-clicked"
End Sub
</code></pre>
</li>
<li>
Add a <b>Combo Box</b> control to Form1. Combo1 is created by default. Set its <b>Style</b> property to 1-Simple Combo.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Private Declare Function GetWindow Lib "User" (ByVal hWnd As Integer,
 &nbsp; ByVal wCmd As Integer) As Integer
Private Declare Function GetClassName Lib "User" (ByVal hWnd As Integer,
ByVal lpClassName As String, ByVal nMaxCount As Integer) As Integer
Const WM_LBUTTONDBLCLK = &amp;H203
Const GW_CHILD = 5
Const GW_HWNDNEXT = 2
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim hWndList As Integer
 &nbsp;&nbsp; Dim hWndEdit As Integer
 &nbsp;&nbsp; Dim Buf As String * 10
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Combo1.AddItem "Item #1"
 &nbsp;&nbsp; Combo1.AddItem "Item #2"
 &nbsp;&nbsp; Combo1.AddItem "Item #3"
 &nbsp;&nbsp; 
 &nbsp;&nbsp; hWndList = GetWindow(Combo1.hWnd, GW_CHILD)
 &nbsp;&nbsp; Select Case Combo1.Style
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Case 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBlaster1.hWndTarget = hWndList
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBlaster1.MsgList(0) = WM_LBUTTONDBLCLK
 &nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWndEdit = GetWindow(hWndList, GW_HWNDNEXT)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Buf = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = GetClassName(hWndEdit, Buf, Len(Buf))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If StrComp(Trim(Buf), "Edit" &amp; Chr$(0)) = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBlaster1.hWndTarget = hWndEdit
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBlaster1.MsgList(0) = WM_LBUTTONDBLCLK
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End Select
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. When you double-click the edit portion of the <b>Combo Box</b> control, a message box will confirm this action. You can also change the <b>Style</b> property of the <b>Combo Box</b> to 0 - Drop Down Combo to get the same effect.</p>
<h2>Additional References</h2>
<p>
"GetClassName." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
"GetWindow." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
Knowledge Base Q110104. "Using MSGBLAST.VBX Control to Process Windows Messages from VB."</p>
</BODY>
</HTML>

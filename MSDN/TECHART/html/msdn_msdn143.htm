<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 143: Determining Whether the Windows 95 Taskbar Is Visible or Hidden</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn143"></a></sup>Tip 143: Determining Whether the Windows 95 Taskbar Is Visible or Hidden</h1>
<p>
August 31, 1995</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® 95 taskbar allows you to easily launch Windows-based programs and to determine which applications are currently running. The taskbar can also display status information, such as the current time. This article will explain how you can determine, from within a Visual Basic® program, whether the taskbar is visible or hidden.</p>
<h2>Customizing the Windows 95 Taskbar</h2>
<p>
The taskbar in Microsoft® Windows® 95 is an area of the screen that contains icons that let you easily switch from one application to another, launch new applications, or display status information.</p>
<p>
You can easily customize certain aspects of the taskbar. From the Start menu, choose Settings/Taskbar. Windows 95 will display the current settings for the taskbar. For example, if you set the autohide option, the taskbar is always hidden from view. To see the taskbar, move the mouse pointer over the area of the screen where the taskbar is located. The taskbar will immediately appear.</p>
<p>
You can use the <b>SHAppBarMessage</b> function in Visual Basic® to determine whether the taskbar is visible or hidden. To use the <b>SHAppBarMessage</b> function in your program, you must include the following <b>Declare</b> statement in the General Declarations section of your program (note that this <b>Declare</b> statement must be typed as a single line of code):</p>
<pre><code>Private Declare Function SHAppBarMessage Lib "shell32.dll" 
 &nbsp; (ByVal dwMessage As Long, pData As APPBARDATA) As Long
</code></pre>
<p>
The <b>SHAppBarMessage</b> function requires two arguments. The first argument identifies the appbar message you want to send. The <i>dwMessage</i> argument may be set to one of the following values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%>ABM_ACTIVATE</td>
<td width=67%>Notifies the system that an appbar has been activated</td>
</tr>
<tr valign=top>
<td width=33%>ABM_GETAUTOHIDEBAR</td>
<td width=67%>Retrieves the handle of the autohide appbar associated with a particular edge of the screen</td>
</tr>
<tr valign=top>
<td width=33%>ABM_GETSTATE</td>
<td width=67%>Retrieves the autohide and always-on-top states of the window's taskbar</td>
</tr>
<tr valign=top>
<td width=33%>ABM_GETTASKBARPOS</td>
<td width=67%>Retrieves the bounding rectangle of the window's taskbar</td>
</tr>
<tr valign=top>
<td width=33%>ABM_NEW</td>
<td width=67%>Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar.</td>
</tr>
<tr valign=top>
<td width=33%>ABM_QUERYPOS</td>
<td width=67%>Requests a size and screen position for an appbar</td>
</tr>
<tr valign=top>
<td width=33%>ABM_REMOVE</td>
<td width=67%>Unregisters an appbar, removing bar from the system's internal list</td>
</tr>
<tr valign=top>
<td width=33%>ABM_SETAUOTOHIDEBAR</td>
<td width=67%>Registers or unregisters an autohide appbar for an edge of the screen</td>
</tr>
<tr valign=top>
<td width=33%>ABM_SETPOS</td>
<td width=67%>Sets the size and screen position of an appbar</td>
</tr>
<tr valign=top>
<td width=33%>ABM_WINDOWPOSCHANGED</td>
<td width=67%>Notifies the system when an appbar's position has changed</td>
</tr>
</table><br>
<p>
The second argument required by the <b>SHAppBarMessage</b> function is a pointer to an <b>APPBARDATA</b> structure. The actual contents of this structure depend on the message you send to the system. Because we are retrieving the state of the taskbar, we don't need to set any of the fields in the <b>APPBARDATA</b> structure. Instead, we must set the <i>dwMessage</i> argument to the constant value ABM_GETSTATE to retrieve the current state of the taskbar.</p>
<p>
After we have called the <b>SHAppBarMessage</b> function, a value is returned indicating the state of the taskbar. If this value is zero, we know the taskbar is not in autohide mode or always-on-top mode. If the value returned is &amp;H1, the taskbar is in autohide mode; if the value returned is &amp;H2, the taskbar is in always-on-top mode.</p>
<h2>Example Program</h2>
<p>
This program shows how to determine whether the taskbar in Windows 95 is visible or hidden.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare </b>statements to the General Declarations section of Form1 (note that the <b>Declare </b>statement must be typed as a single line of code):<pre><code>Private Declare Function SHAppBarMessage Lib "shell32.dll" 
 &nbsp; (ByVal dwMessage As Long, pData As APPBARDATA) As Long
Const ABS_ALWAYSONTOP = &amp;H2
Const ABS_AUTOHIDE = &amp;H1
Const ABM_GETSTATE = &amp;H4
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1.<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim IsThere As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; IsThere = BarExists()
 &nbsp;&nbsp; If IsThere = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = "TaskBar not in auto-hide or always-on-top mode"
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; If IsThere = ABS_ALWAYSONTOP Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = "TaskBar always-on-top"
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; If IsThere = ABS_AUTOHIDE Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = "TaskBar in auto-hide"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>BarExists</b>. Add the following code to this function.<pre><code>Function BarExists() As Integer
 &nbsp;&nbsp; Dim Bardata As APPBARDATA
 &nbsp;&nbsp; BarExists = SHAppBarMessage(ABM_GETSTATE, Bardata)
End Function
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a new module to the project. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>TYPE</b> structures to Module1.Bas:<pre><code>Type RECT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Top As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bottom As Long
End Type
Type APPBARDATA
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbSize As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwnd As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uCallbackMessage As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uEdge As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rc As RECT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lParam As Long '&nbsp; message specific
End Type
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the command button. If the Windows 95 taskbar is visible, a message to that effect is displayed in the text box. If the taskbar is hidden, however, the text box will display the text "Taskbar in auto-hide." If neither the <b>Auto-Hide</b> nor the <b>Always-on-Top</b> property of the taskbar is set, then the text box will display the message "Taskbar is not in auto-hide or always-on-top mode."</p>
<h2>Additional Reference</h2>
<p>
"APPBARDATA." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 195: Modifying a File's Date and Time Stamp in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn195"></a></sup>Tip 195: Modifying a File's Date and Time Stamp in Visual Basic 4.0</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
In a Microsoft® Visual Basic® version 4.0 application, you may need to modify the date and time stamp of a file. This article explains how this can be accomplished.</p>
<h2>Setting a New Date and Time Stamp for a File</h2>
<p>
To modify a file's date and time stamp in a Microsoft® Visual Basic® version 4.0 application, you must perform several steps. First, you need to call the Microsoft Windows® messaging application programming interface (MAPI) <b>SystemTimeToFileTime</b> function. This function converts a system time to a file time. The system time you want to convert must be stored in a <b>SYSTEMTIME</b> structure. The converted time is then stored in a <b>FILETIME</b> structure.</p>
<p>
Next, you must use the Windows MAPI <b>LocalFileTimeToFileTime</b> function. This function converts, as its name suggests, a local file time to a time that is based on the Coordinated Universal Time (UTC). This newly converted time information can then be used in your application by the Windows MAPI <b>SetFileTimeWrite</b> function.</p>
<p>
You must retrieve a handle to the file whose date and time stamp you want to modify. This can be done by calling the Windows MAPI <b>CreateFile</b> function. When you have the file's handle, a call to the <b>SetFileTimeWrite</b> function actually updates the date and time stamp of the file.</p>
<h2>Example Program</h2>
<p>
This program shows how to modify the date and time stamp of a file.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Type FILETIME
 &nbsp;&nbsp; dwLowDateTime As Long
 &nbsp;&nbsp; dwHighDateTime As Long
End Type

Private Type SYSTEMTIME
 &nbsp;&nbsp; wYear As Integer
 &nbsp;&nbsp; wMonth As Integer
 &nbsp;&nbsp; wDayOfWeek As Integer
 &nbsp;&nbsp; wDay As Integer
 &nbsp;&nbsp; wHour As Integer
 &nbsp;&nbsp; wMinute As Integer
 &nbsp;&nbsp; wSecond As Integer
 &nbsp;&nbsp; wMilliseconds As Integer
End Type

Private Const GENERIC_WRITE = &amp;H40000000
Private Const OPEN_EXISTING = 3
Private Const FILE_SHARE_READ = &amp;H1
Private Const FILE_SHARE_WRITE = &amp;H2

Private Declare Function SetFileTimeWrite Lib "kernel32" Alias 
 &nbsp; "SetFileTime" (ByVal hFile As Long, ByVal MullP As Long, 
 &nbsp; ByVal NullP2 As Long, lpLastWriteTime As FILETIME) As Long
Private Declare Function SystemTimeToFileTime Lib "kernel32" 
 &nbsp; (lpSystemTime As SYSTEMTIME, lpFileTime As FILETIME) As Long
Private Declare Function CreateFile Lib "kernel32" Alias "CreateFileA" 
 &nbsp; (ByVal lpFileName As String, ByVal dwDesiredAccess As Long, ByVal 
 &nbsp; dwShareMode As Long, ByVal lpSecurityAttributes As Long, ByVal 
 &nbsp; dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, 
 &nbsp; ByVal hTemplateFile As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) 
 &nbsp; As Long
Private Declare Function LocalFileTimeToFileTime Lib "kernel32" 
 &nbsp; (lpLocalFileTime As FILETIME, lpFileTime As FILETIME) As Long
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim Year As Integer, Month As Integer
 &nbsp;&nbsp; Dim Day As Integer, Hour As Integer
 &nbsp;&nbsp; Dim Minute As Integer, Second As Integer
 &nbsp;&nbsp; Dim TimeStamp As Variant
 &nbsp;&nbsp; Dim Filename As String
 &nbsp;&nbsp; Dim X As Integer

 &nbsp;&nbsp; Year = 1996
 &nbsp;&nbsp; Month = 1
 &nbsp;&nbsp; Day = 1
 &nbsp;&nbsp; Hour = 1
 &nbsp;&nbsp; Minute = 0
 &nbsp;&nbsp; Second = 0

 &nbsp;&nbsp; TimeStamp = DateSerial(Year, Month, Day) + TimeSerial(Hour, Minute, Second)
 &nbsp;&nbsp; Filename = "c:\autoexec.bat"

 &nbsp;&nbsp; X = ModifyFileStamp(Filename, TimeStamp)
 &nbsp;&nbsp; MsgBox "The time and date stamp was updated"
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>ModifyFileStamp</b>. Add the following code to this function:<pre><code>Function ModifyFileStamp(Filename As String, TimeStamp As Variant) 
 &nbsp; As Integer
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; Dim Handle As Long
 &nbsp;&nbsp; Dim System_Time As SYSTEMTIME
 &nbsp;&nbsp; Dim File_Time As FILETIME
 &nbsp;&nbsp; Dim Local_Time As FILETIME

 &nbsp;&nbsp; System_Time.wYear = Year(TimeStamp)
 &nbsp;&nbsp; System_Time.wMonth = Month(TimeStamp)
 &nbsp;&nbsp; System_Time.wDay = Day(TimeStamp)
 &nbsp;&nbsp; System_Time.wDayOfWeek = WeekDay(TimeStamp) - 1
 &nbsp;&nbsp; System_Time.wHour = Hour(TimeStamp)
 &nbsp;&nbsp; System_Time.wSecond = Second(TimeStamp)
 &nbsp;&nbsp; System_Time.wMilliseconds = 0

 &nbsp;&nbsp; 'convert the system time to a file time
 &nbsp;&nbsp; X = SystemTimeToFileTime(System_Time, Local_Time)

 &nbsp;&nbsp; 'convert local file time to file time based on UTC
 &nbsp;&nbsp; X = LocalFileTimeToFileTime(Local_Time, File_Time)

 &nbsp;&nbsp; 'open the file so we can get a file handle to the file
 &nbsp;&nbsp; Handle = CreateFile(Filename, GENERIC_WRITE, FILE_SHARE_READ Or 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_SHARE_WRITE, ByVal 0&amp;, OPEN_EXISTING, 0, 0)

 &nbsp;&nbsp; 'now change the file time and date stamp
 &nbsp;&nbsp; X = SetFileTimeWrite(Handle, ByVal 0&amp;, ByVal 0&amp;, File_Time)
 &nbsp;&nbsp; CloseHandle Handle

End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the <b>Command Button</b> control. The date and time stamp of the AUTOEXEC.BAT file is immediately updated.</p>
<h2>Additional References</h2>
<p>
"File Times." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"LocalFileTimeToFileTime QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"SetFileTime QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"SystemTimeToFileTime QuickInfo Overview Group." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

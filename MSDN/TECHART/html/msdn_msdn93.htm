<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 93: Retrieving the Names of Installed Printers</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn93"></a></sup>Tip 93: Retrieving the Names of Installed Printers</h1>
<p>
May 22, 1995</p>
<h2>Abstract</h2>
<p>
The Windows® initialization file, WIN.INI, contains a list of all printers attached to the computer system. This article contains an example program that retrieves the name of each printer stored in the WIN.INI initialization file.</p>
<h2>Using GetProfileString and GetPrivateProfileString</h2>
<p>
The Devices section of the WIN.INI initialization file contains the names of all printers attached to your computer system. You can retrieve this list of printer names by using two Windows® application programming interface (API) functions.</p>
<p>
The Windows API <b>GetProfileString</b> and <b>GetPrivateProfileString</b> functions can be used to retrieve the name of a printer as stored in the WIN.INI file. For a complete discussion of these functions, see the articles listed in the "Additional References" section of this article.</p>
<h2>Example Program</h2>
<p>
This program retrieves the names of all installed printers from the WIN.INI initialization file. The printer names are displayed in a <b>List Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b>, <b>Declare</b>, and <b>Type</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Option Explicit
Private Type WindowsDevice
 &nbsp; WindowsDeviceUserName As String
 &nbsp; WindowsDeviceShortName As String
 &nbsp; WindowsDevicePortName As String
End Type
Private Declare Function GetProfileString Lib "Kernel" (ByVal lpAppName 
 &nbsp; As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal 
 &nbsp; lpReturnedString As String, ByVal nSize As Integer) As Integer
Private Declare Function GetPrivateProfileString Lib "Kernel" (ByVal lpAppName 
 &nbsp; As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal 
 &nbsp; lpReturnedString As String, ByVal nSize As Integer, ByVal lpFileName As 
 &nbsp; String) As Integer
Private Declare Function GetProfileKeys Lib "Kernel" Alias "GetProfileString" 
 &nbsp; (ByVal lpAppName As String, ByVal lpKeyName As Long, ByVal lpDefault As 
 &nbsp;&nbsp; String, ByVal lpReturnedString As String, ByVal nSize As Integer) As Integer
Private Declare Function GetPrivateProfileKeys Lib "Kernel" Alias 
 &nbsp; "GetPrivateProfileString" (ByVal lpAppName As String, ByVal lpKeyName As 
 &nbsp; Long, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal 
 &nbsp; nSize As Integer, ByVal lpFileName As String) As Integer
Const WINDOWS_SECTION_NAME = "windows"
Const DEVICES_SECTION_NAME = "devices"
Const DEVICE_KEY_NAME = "device"
Const NO_PRINTER = "(none)"
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1 (note that the List1.AddItem statement must be typed as a single line of code):<pre><code>Private Sub Command1_Click()
Dim OrgPrinter As WindowsDevice
Call GetDefaultPrinter(OrgPrinter)
Text1.Text = OrgPrinter.WindowsDeviceUserName

Dim NumPrinters As Integer
ReDim InstalledPrinters(0) As WindowsDevice
Call GetInstalledPrinters(InstalledPrinters())
For NumPrinters = 1 To UBound(InstalledPrinters)
List1.AddItem InstalledPrinters(NumPrinters).WindowsDeviceUserName + " 
on " + InstalledPrinters(NumPrinters).WindowsDevicePortName
Next
List1.AddItem NO_PRINTER, 0
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>GetDefaultPrinter</b>. Add the following code to this function:<pre><code>Private Sub GetDefaultPrinter(recDefaultPrinter As WindowsDevice)
Dim StrPos As Integer
Dim DefaultPrinter As String
Dim RC As Integer
DefaultPrinter = GetString(WINDOWS_SECTION_NAME, DEVICE_KEY_NAME, "", "")
StrPos = InStr(DefaultPrinter, ",")
recDefaultPrinter.WindowsDeviceUserName = Left$(DefaultPrinter, StrPos - 1)
DefaultPrinter = Mid$(DefaultPrinter, StrPos + 1)
StrPos = InStr(DefaultPrinter, ",")
recDefaultPrinter.WindowsDeviceShortName = Left$(DefaultPrinter, StrPos - 1)
recDefaultPrinter.WindowsDevicePortName = Mid$(DefaultPrinter, StrPos + 1)
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>GetInstalledPrinter</b>. Add the following code to this function (note that the InstalledPrinter lines must be typed as a single line of code):<pre><code>Private Sub GetInstalledPrinters(recInstalledPrinters() As WindowsDevice)
Dim StrPos As Integer
Dim PrtSub As Integer
Dim InstalledPrinter As String
ReDim PrinterNames(0) As String
Call GetKeyNames(DEVICES_SECTION_NAME, PrinterNames(), "")
ReDim recInstalledPrinters(UBound(PrinterNames))
For PrtSub = 1 To UBound(PrinterNames)
InstalledPrinter = GetString(DEVICES_SECTION_NAME, PrinterNames(PrtSub), 
"", "")
StrPos = InStr(InstalledPrinter, ",")
recInstalledPrinters(PrtSub).WindowsDeviceUserName = 
PrinterNames(PrtSub)
recInstalledPrinters(PrtSub).WindowsDeviceShortName = 
Left$(InstalledPrinter, StrPos - 1)
InstalledPrinter = Mid$(InstalledPrinter, StrPos + 1)
StrPos = InStr(InstalledPrinter, ",")
If StrPos &gt; 0 Then
recInstalledPrinters(PrtSub).WindowsDevicePortName = 
Left$(InstalledPrinter, StrPos - 1)
Else
recInstalledPrinters(PrtSub).WindowsDevicePortName = 
InstalledPrinter
End If
Next
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>GetString</b>. Add the following code to this function (note that the Function and KeyValueLength lines must each be typed as a single line of code):<pre><code>Function GetString(SectionName As String, KeyName As String, DefaultValue 
As String, ProfileName As String) As String
Dim KeyValueLength As Integer
Dim KeyValue As String
KeyValue = Space$(256)
If Trim$(ProfileName) = "" Then
KeyValueLength = GetProfileString(SectionName, KeyName, DefaultValue, 
KeyValue, Len(KeyValue))
Else
KeyValueLength = GetPrivateProfileString(SectionName, KeyName, 
DefaultValue, KeyValue, Len(KeyValue), ProfileName)
End If
GetString = Left$(KeyValue, KeyValueLength)
End Function
</code></pre>
</li>
<li>
Create a new function called <b>GetKeyName</b>. Add the following code to this function (note that the Sub and KeyNamesLength lines must each be typed as a single line of code):<pre><code>Sub GetKeyNames(SectionName As String, KeyNames() As String, ProfileName 
 &nbsp; As String)
 &nbsp;&nbsp; Dim StrPos As Integer
 &nbsp;&nbsp; Dim KeyCount As Integer
 &nbsp;&nbsp; Dim Start As Integer
 &nbsp;&nbsp; Dim KeyNamesLength As Integer
 &nbsp;&nbsp; Dim KeyNameString As String
 &nbsp;&nbsp; KeyNameString = Space$(1024)
 &nbsp;&nbsp; If Trim$(ProfileName) = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNamesLength = GetProfileKeys(SectionName, 0, "", KeyNameString, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Len(KeyNameString))
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNamesLength = GetPrivateProfileKeys(SectionName, 0, "", 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNameString, Len(KeyNameString), ProfileName)
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; KeyCount = 0
 &nbsp;&nbsp; ReDim KeyNames(0)
 &nbsp;&nbsp; If KeyNamesLength &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNameString = Left$(KeyNameString, KeyNamesLength)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Right$(KeyNameString, 1) &lt;&gt; Chr$(0) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNameString = KeyNameString + Chr$(0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNamesLength = Len(KeyNameString)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrPos = InStr(Start, KeyNameString, Chr$(0))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If StrPos &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyCount = KeyCount + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReDim Preserve KeyNames(KeyCount)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyNames(KeyCount) = Mid$(KeyNameString, Start, StrPos - Start)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If StrPos &lt; KeyNamesLength Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start = StrPos + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing the F5 function key. Click the <b>Command</b> <b>Button</b> control. The name of the default printer is displayed in the <b>Text Box</b> control, and a list of all installed printers is displayed in the <b>List Box</b> control.</p>
<h2>Additional References</h2>
<p>
Knowledge Base Q105839. "Changing WIN.INI Printer Settings from VB using Windows API."</p>
<p>
"Accessing Initialization Files." (MSDN Library, Periodicals)</p>
<p>
"Querying Windows for Printer Information." (MSDN Library, Periodicals)</p>
<p>
<a href="msdn_msdn30.htm">"Tip #30: Retrieving the Default Printer's Name from WIN.INI."</a></p>
</BODY>
</HTML>

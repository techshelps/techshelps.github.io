<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EZPRINT: No-Frills Printing in Visual Basic and C</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ezprint"></a></sup>EZPRINT: No-Frills Printing in Visual Basic and C</h1>
<p>
Dennis Crain<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: April 19, 1993</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="72">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the EZPRINT sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
Printing from applications written for the Microsoft® Windows™ version 3.1 operating system can be trying at times. This article describes a convenient method for printing from applications using a dynamic-link library (DLL) called EZPRINT.DLL. EZPRINT provides three exported functions—<b>StartDocument</b>, <b>PrintObject</b>, and <b>EndDocument</b>—to start the printing job, print various objects on the page, and end the printing job. The sample DLL code and Visual Basic™ code that calls EZPRINT are included with this article. You may use the DLL as is or modify it to meet your needs. In its present form, EZPRINT prints text, rectangles, and lines with various attributes.</p>
<p>
This article was written for developers who have relatively little printing experience and whose printing needs involve text placement and simple line drawing only. Experienced developers can also use EZPRINT as a framework for implementing more sophisticated printing capabilities.</p>
<h2>Forgot Something, Didn't You?</h2>
<p>
It is two in the morning and you've just put the final touches on the user interface for your application. The back-end was finished months ago, and tonight you finally see the light at the end of the tunnel. Your application glows at you in the dimly lit room as a sense of accomplishment overcomes you. Gradually, the self-applause changes to concern as you realize that your application needs to print. Sadly, you recall that you decided to cross this bridge when you came to it. Well, here you are and just where do you start? You've heard something about <b>StartDoc</b> and <b>EndDoc</b> but they sound intimidating. And what was that <b>AbortProc</b> all about? At this point, you wish you were writing a character-based application.</p>
<p>
Does this sound familiar? If it does, the EZPRINT dynamic-link library (DLL) and this article are just for you. The article provides in-depth documentation for using the DLL as is.</p>
<p>
However, if you are accomplished at basic printing, you may be looking for a convenient framework for building more advanced printing capabilities. The article touches on the design and implementation of the DLL, which you can extend for your own purposes. I've included the code for EZPRINT as a sample of a specific implementation. The sample uses a pseudo-object-oriented approach that can be extended easily to support more complex drawing features, bitmaps, and metafiles.</p>
<h2>Overview of EZPRINT</h2>
<p>
Simplicity is the prime goal of the EZPRINT printing method. Three functions are exported from EZPRINT.DLL: <b>StartDocument</b>, <b>PrintObject</b>, and <b>EndDocument</b>. These functions permit you to start the printing process, place various objects on the page, and end the printing process. Using EZPRINT's present form, you can print text objects, line objects, and rectangle objects with text style, fill, and pen attributes.</p>
<h3>Keep It Simple</h3>
<p>
To achieve the goal of simplicity, EZPRINT employs three strategies:
<ul type=disc>
<li>
It applies a logical (world) coordinate system to the page.<br><br></li>
<li>
It uses the Microsoft® Windows™ version 3.1 <b>PrintDlg</b> common dialog function.<br><br></li>
<li>
It isolates the code for printing objects in a single function.</li>
</ul>
<h4>The logical coordinate system</h4>
<p>
The use of a logical (world) coordinate system enhances the simplicity of EZPRINT. The page is treated as a 1000 x 1000-unit grid (Figure 1). The upper-left corner of the page is described as the <i>x</i> and <i>y</i> ordered pair (0,0). The lower-right corner is described as (1000, 1000). This coordinate system allows you to place objects on the printed page independently of page dimensions and paper orientation.</p>
<p>
<img src="ezprint_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Logical (world) coordinate system of a page</b></p>
<p>
Many developers deal with only one mapping mode, MM_TEXT, which maps one logical unit to one device unit. EZPRINT allows the application to experiment with the MM_ANISOTROPIC mapping mode, which provides full control over coordinate mapping. In the MM_ANISOTROPIC mode, the application sets the window and viewport extents to any desired value. For a comprehensive discussion of mapping modes, see the "Coordinate Mapping" technical article by Ron Gery on the Developer Network CD (look under Technical Articles, Windows Articles, GDI Articles, in the Source index).</p>
<p>
By default, EZPRINT sets the logical coordinate system, mapping mode, origin, and extents of the printer device context (DC) as follows:</p>
<pre><code>SetMapMode(pd.hDC, MM_ANISOTROPIC );
SetWindowOrg(pd.hDC, 0, 0 );
SetWindowExt(pd.hDC, 1000, 1000 );
SetViewportOrg(pd.hDC, PhysicalPage.XOrg, PhysicalPage.YOrg );
SetViewportExt(pd.hDC, PhysicalPage.XExt, PhysicalPage.YExt );
</code></pre>
<p>
These settings allow you to specify the center of the page as the (500, 500) ordered pair, regardless of paper size and orientation.</p>
<p>
In this implementation of the MM_ANISOTROPIC mapping mode, one logical unit is mapped to the total number of device units divided by 1000. For example, if the width of a page is 2000 device units, one logical unit maps to 2000/1000, or two device units.</p>
<h4>The PrintDlg common dialog function</h4>
<p>
EZPRINT uses the <b>PrintDlg</b> function provided by the Windows common dialogs. If you are using EZPRINT as is, you can choose to display the Print dialog box before printing by setting the <i>bEnablePrintDialog</i> parameter of the <b>StartDocument</b> function to TRUE (see the "Technical Reference" section later in this article for more information).</p>
<p>
By default, EZPRINT disables three features of the Print dialog box by setting bits in the <b>Flags</b> member of the <b>PRINTDLG</b> structure:
<ul type=disc>
<li>
The PD_HIDEPRINTTOFILE flag hides and disables the Print to File check box.<br><br></li>
<li>
The PD_NOPAGENUMS flag disables the Pages option button and its associated edit controls.<br><br></li>
<li>
The PD_NOSELECTION flag disables the Selection option button.</li>
</ul>
<p>
If you wish to enable these features, you must modify the source code for EZPRINT.</p>
<p>
The <b>PrintDlg</b> function also eases the drudgery of obtaining a printer DC. Contrast the <b>NewGetPrinterDC</b> and <b>OldGetPrinterDC</b> functions: <b>NewGetPrinterDC</b> obtains a printer DC using <b>PrintDlg</b>, while <b>OldGetPrinterDC</b> uses the more convoluted method required before Windows 3.1. If your application must print in earlier versions of Windows (before version 3.1), you must either use <b>OldGetPrinterDC</b> or ship COMMDLG.DLL with your application.</p>
<pre><code>PRINTDLG pd;

HDC NewGetPrinterDC()
{
 &nbsp;&nbsp; //Set all structure members to zero.
  memset(&amp;pd, 0, sizeof(PRINTDLG));
 &nbsp;&nbsp; //Initialize the necessary PRINTDLG structure members.
  pd.lStructSize = sizeof(PRINTDLG);
 &nbsp;&nbsp; //Initialize flags.
  pd.Flags = PD_RETURNDC | PD_RETURNDEFAULT;
 &nbsp;&nbsp; //If successful, return hdc; else return NULL.
  return ( (PrintDlg(&amp;pd) != 0) ? pd.hDC : NULL )
}

HDC OldGetPrinterDC()
{
  static char szPrinter [80] ;
  char *szDevice, *szDriver, *szOutput ;
  char szWin[] = "windows";
  char szDev[] = "device";

  GetProfileString ((LPSTR)szWin, (LPSTR)szDev, ",,,", szPrinter, 80) ;

  if (NULL != (szDevice = strtok (szPrinter, "," )) &amp;&amp;
 &nbsp;&nbsp; NULL != (szDriver = strtok (NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ", ")) &amp;&amp;
 &nbsp;&nbsp; NULL != (szOutput = strtok (NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ", ")))

  return CreateDC (szDriver, szDevice, szOutput, NULL) ;
}
</code></pre>
<h4>Isolating the code in a single function</h4>
<p>
The <b>PrintObject</b> function is an entry point into EZPRINT.DLL. <b>PrintObject</b> calls the <b>PrintObjectIndirect</b> function, which wraps the printing functionality of EZPRINT. This single-function approach is not truly object-oriented, but it permits you to expand printing capabilities in a logical, coherent manner without rocking the boat too much. Each printable object is implemented as a case through a switch statement. For example, the code below implements a line object (PO_LINE). For simplicity, I've removed the code for all objects except lines. For the complete sample, see the PRINT.C file.</p>
<pre><code>&nbsp;&nbsp;//The local function in EZPRINT that is called by PrintObject handles 
  //all implementation-level stuff for printing an object.
int PrintObjectIndirect(LPPRINTSTRUCT lpPStruct)
{
  int nSuccess = 1;

  //Implement the implementation for each printable object.
  switch (lpPStruct-&gt;nPrintObject)&nbsp; {
 &nbsp;&nbsp; case PO_TEXT:
 &nbsp;&nbsp;&nbsp;&nbsp; //See sample code for details.
 &nbsp;&nbsp; break;
 &nbsp;&nbsp; case PO_RECT:
 &nbsp;&nbsp;&nbsp;&nbsp; //See sample code for details.
 &nbsp;&nbsp; break;
 &nbsp;&nbsp; case PO_GRID:
 &nbsp;&nbsp;&nbsp;&nbsp; //See sample code for details.
 &nbsp;&nbsp; break;
 &nbsp;&nbsp; case PO_LINE:
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; HPEN hOldPen, hPen;
 &nbsp;&nbsp;&nbsp;&nbsp; POINT pt[2];
 &nbsp;&nbsp;&nbsp;&nbsp; int&nbsp; nPenStyle;
 &nbsp;&nbsp;&nbsp;&nbsp; int&nbsp; nLineWidth;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Specify the style of the pen based on the PRINTSTRUCT flags 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //set by the application.
 &nbsp;&nbsp;&nbsp;&nbsp; nPenStyle = (lpPStruct-&gt;uiPenFlags &amp; PEN_DASH) ? PS_DASH : 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (lpPStruct-&gt;uiPenFlags &amp; PEN_DOT) ? PS_DOT :
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (lpPStruct-&gt;uiPenFlags &amp; PEN_DASHDOT) ? PS_DASHDOT :
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (lpPStruct-&gt;uiPenFlags &amp; PEN_DASHDOTDOT) ? 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PS_DASHDOTDOT : PS_SOLID;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the width of the pen. The default is 0, which forces
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //a pen width of 1 pixel regardless of the mapping mode.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //If PEN_THICK is specified, we use a pen width of 2 (this
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //is not necessarily 2 pixels in MM_ANISOTROPIC mapping mode).
 &nbsp;&nbsp;&nbsp;&nbsp; nLineWidth = (lpPStruct-&gt;uiPenFlags &amp; PEN_THICK) ? 2 : 0;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create the pen based on the above attributes.
 &nbsp;&nbsp;&nbsp;&nbsp; hPen = CreatePen(nPenStyle, nLineWidth, BLACK);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //x, y origin.
 &nbsp;&nbsp;&nbsp;&nbsp; pt[0].x = lpPStruct-&gt;nXOrg;
 &nbsp;&nbsp;&nbsp;&nbsp; pt[0].y = lpPStruct-&gt;nYOrg;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //x, y extent. These are not really extents; they represent
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //a destination.
 &nbsp;&nbsp;&nbsp;&nbsp; pt[1].x = lpPStruct-&gt;nXExt;
 &nbsp;&nbsp;&nbsp;&nbsp; pt[1].y = lpPStruct-&gt;nYExt;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Select the pen into the printer DC.
 &nbsp;&nbsp;&nbsp;&nbsp; hOldPen = SelectObject(hPrtDC, hPen);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw the line.
 &nbsp;&nbsp;&nbsp;&nbsp; Polyline(hPrt, pt, sizeof(pt) / sizeof(POINT));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Delete the pen, now that drawing is complete.
 &nbsp;&nbsp;&nbsp;&nbsp; DeleteObject(SelectObject(hPrtDC, hOldPen));
 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;
 &nbsp;&nbsp; case PO_NEWPAGE:
 &nbsp;&nbsp;&nbsp;&nbsp; //See sample code for details.
 &nbsp;&nbsp; break;
 &nbsp;&nbsp; default:
 &nbsp;&nbsp; break;
  }
  return(nSuccess)
}
</code></pre>
<h2>Using EZPRINT in Visual Basic</h2>
<p>
You may call EZPRINT.DLL from any application written for Windows. The basic strategy is to place objects on a page at specific locations. Remember, the page is treated as a 1000 x 1000-unit grid. This section describes how to use EZPRINT.DLL in Visual Basic™.</p>
<p>
You must include the following constants, user-defined type, and function declarations in your Visual Basic application:</p>
<pre><code>Global Const TEXTLEN = 256
Global Const PO_TEXT = 0
Global Const PO_RECT = 1
Global Const PO_LINE = 2
Global Const PO_NEWPAGE = 4
Global Const PO_GRID = 5

' Object Flags
Global Const TEXT_NORMAL = &amp;H0
Global Const TEXT_BOLD = &amp;H1
Global Const TEXT_ITALIC = &amp;H2
Global Const TEXT_UNDERLINED = &amp;H4
Global Const TEXT_STRIKEOUT = &amp;H8
Global Const TEXT_RECT = &amp;H10
Global Const TEXT_LEFT = &amp;H20
Global Const TEXT_RIGHT = &amp;H40
Global Const TEXT_CENTER = &amp;H80
Global Const TEXT_EXPANDTABS = &amp;H100
Global Const TEXT_SINGLELINE = &amp;H200
Global Const TEXT_NOCLIP = &amp;H400

Global Const FILL_NONE = &amp;H0
Global Const FILL_GRAY = &amp;H1
Global Const FILL_LTGRAY = &amp;H2
Global Const FILL_BLACK = &amp;H4

Global Const PEN_SOLID = &amp;H0
Global Const PEN_DOT = &amp;H1
Global Const PEN_DASH = &amp;H2
Global Const PEN_THIN = &amp;H4
Global Const PEN_THICK = &amp;H8
Global Const PEN_DASHDOT = &amp;H10
Global Const PEN_DASHDOTDOT = &amp;H20

Type PrintStruct
 &nbsp;&nbsp; PrintObject As Integer
 &nbsp;&nbsp; TextFlags As Integer
 &nbsp;&nbsp; FillFlags As Integer
 &nbsp;&nbsp; PenFlags As Integer
 &nbsp;&nbsp; XOrg As Integer
 &nbsp;&nbsp; YOrg As Integer
 &nbsp;&nbsp; XExt As Integer
 &nbsp;&nbsp; YExt As Integer
 &nbsp;&nbsp; PointSize As Integer
 &nbsp;&nbsp; Text As String * TEXTLEN
End Type

'Function Declarations

Declare Function StartDocument% Lib "EZPRINT.DLL" 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ByVal EnablePrintDlg As Integer)&nbsp;&nbsp; 'This should be on one line.
Declare Function EndDocument% Lib "EZPRINT.DLL" ()
Declare Function PrintObject% Lib "EZPRINT.DLL" (PS As PrintStruct)
</code></pre>
<p>
The following Visual Basic code demonstrates how to print a single page with the text "Report Title" appearing at the top of the page, centered in a bounding rectangle the width of the page. The code allocates a print structure, and then calls the <b>StartDocument</b> function. Note that the Print dialog box is not enabled because the value of the second parameter in <b>StartDocument</b> is FALSE. Objects are then printed on the page at various <i>x</i> and <i>y</i> locations. To start a new page, set the <b>PrintObject</b> member of <b>PrintStruct</b> to PO_NEWPAGE. Once printing is complete, the code calls the <b>EndDocument</b> function.</p>
<pre><code>Sub Form_Load ()
  'Allocate a print structure.
  Dim PS As PrintStruct

  'Start the document.
  nSuccess% = StartDocument(hWnd, FALSE)
  If nSuccess% = False Then End

  'Print objects. In this case, print a line of text. If you wanted to print
  'more objects (such as lines or more text), you would add code here.

  PS.PrintObject = PO_TEXT
  PS.XOrg = 0
  PS.YOrg = 12
  PS.XExt = 1000
  PS.YExt = 24
  PS.PointSize = 12
  PS.Text = ASCIIZ(" Report Title ")
  PS.TextFlags = TEXT_ITALIC Or TEXT_BOLD Or TEXT_CENTER
  linespacing% = PrintObject(PS)

  'End the document.
  EndDocument()
End Sub
</code></pre>
<h2>Technical Reference</h2>
<h3>The PRINTSTRUCT Data Structure</h3>
<p>
The <b>PRINTSTRUCT</b> structure defines the type of object to be printed, its location (origin and extents), and its characteristics.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>C Structure</b></td>
<td class=label width=50%><b>Visual Basic Defined Type</b></td>
</tr>
<tr valign=top>
<td width=50%><code>typedef struct tagPRINTSTRUCT<br>
{<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPrintObject<br>
 &nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp; uiTextFlags<br>
 &nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp; uiFillFlags<br>
 &nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp; uiPenFlags<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nXOrg<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nYOrg<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nXExt<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nYExt<br>
 &nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPointSize<br>
 &nbsp; char&nbsp;&nbsp;&nbsp;&nbsp; szText[256]<br>
} PRINTSTRUCT<br>
</code></td>
<td width=50%><code>Type PrintStruct<br>
 &nbsp; PrintObject&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; TextFlags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; FillFlags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; PenFlags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; XOrg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; YOrg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; XExt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; YExt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; PointSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Integer<br>
 &nbsp; Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As String*256<br>
End Type</code></td>
</tr>
</table><br>
<p>
<b>PRINTSTRUCT</b> members are described below.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Member</b></td>
<td class=label colspan=2 width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%><b>nPrintObject</b></td>
<td colspan=2 width=74%>Specifies the type of object to print or display. This member can take one of the following values:</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td class=label width=30%><b>Value</b></td>
<td class=label width=44%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>PO_GRID</td>
<td width=44%>Prints a grid on the page. Used for formatting purposes only during the development of a report format.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>PO_LINE</td>
<td width=44%>Prints a line object.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>PO_NEWPAGE</td>
<td width=44%>Instructs the printer to eject the page or begin a new page.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>PO_RECT</td>
<td width=44%>Prints a rectangle object.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>PO_TEXT</td>
<td width=44%>Prints a text object.</td>
</tr>
<tr valign=top>
<td width=26%><b>uiTextFlags</b></td>
<td colspan=2 width=74%>Specifies the attributes to be applied to text. This member can take any combination of the following values:</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td class=label width=30%><b>Value</b></td>
<td class=label width=44%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_BOLD</td>
<td width=44%>Uses a bold weight.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_CENTER</td>
<td width=44%>Centers the text in the rectangle specified by the origins and extents provided in nXOrg, nYOrg, nXExt, and nYExt.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_EXPANDTABS</td>
<td width=44%>Expands tab characters. The number of characters per tab is eight.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_ITALIC</td>
<td width=44%>Uses the italic font.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_LEFT</td>
<td width=44%>Aligns the text to the left of the point specified by nXOrg and nYOrg.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_NOCLIP</td>
<td width=44%>Draws text without clipping it to the bounding rectangle.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_NORMAL </td>
<td width=44%>Applies normal attributes to the font.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_RECT</td>
<td width=44%>Encloses the text in a rectangle.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_RIGHT</td>
<td width=44%>Aligns the text to the right of the point specified by nXOrg and nYOrg.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_SINGLELINE</td>
<td width=44%>Specifies that only a single line of text is to be printed. The default is multiple lines of text.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_STRIKEOUT</td>
<td width=44%>Uses the strikeout font.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>TEXT_UNDERLINED</td>
<td width=44%>Uses the underlined font.</td>
</tr>
<tr valign=top>
<td width=26%><b>uiFillFlags</b></td>
<td colspan=2 width=74%>Specifies the type of fill to be used for rectangle objects. This member can take one of the following values:</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td class=label width=30%><b>Value</b></td>
<td class=label width=44%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>FILL_BLACK</td>
<td width=44%>Uses a black fill.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>FILL_DKGRAY</td>
<td width=44%>Uses a dark gray fill.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>FILL_GRAY</td>
<td width=44%>Uses a gray fill.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>FILL_LTGRAY</td>
<td width=44%>Uses a light gray fill.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>FILL_NONE</td>
<td width=44%>Uses no fill.</td>
</tr>
<tr valign=top>
<td width=26%><b>uiPenFlags</b></td>
<td colspan=2 width=74%>Specifies the size and style of the pen used for drawing lines and rectangle boundaries. This member can take one of the following values:</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td class=label width=30%><b>Value</b></td>
<td class=label width=44%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>LINE_DASH</td>
<td width=44%>Uses a dashed-line style.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>LINE_DOT</td>
<td width=44%>Uses a dotted-line style.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>LINE_SOLID</td>
<td width=44%>Uses a solid-line style.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>LINE_THICK</td>
<td width=44%>Uses a double-pixel-width line.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=30%>LINE_THIN</td>
<td width=44%>Uses a single-pixel-width line.</td>
</tr>
<tr valign=top>
<td width=26%><b>XOrg</b></td>
<td colspan=2 width=74%>Specifies the x-origin, in logical units, of the rectangle that bounds the object to be printed. The point (0,0) is located in the upper-left corner of the page.</td>
</tr>
<tr valign=top>
<td width=26%><b>YOrg</b></td>
<td colspan=2 width=74%>Specifies the y-origin, in logical units, of the rectangle that bounds the object to be printed. If the print object is PO_TEXT, this value specifies the upper-left corner of a rectangle bounding the text.</td>
</tr>
<tr valign=top>
<td width=26%><b>XExt</b></td>
<td colspan=2 width=74%>Specifies the x-extent, in logical units, of the rectangle that bounds the object to be printed. The extents (1000, 1000) describe the point located at the lower-right corner of the page. Please remember that this is an "extent" (defined as the logical distance from XOrg that the rightmost boundary of the rectangle will extend to), and not a member of an ordered point.</td>
</tr>
<tr valign=top>
<td width=26%><b>YExt</b></td>
<td colspan=2 width=74%>Specifies the y-extent, in logical units, of the rectangle that bounds the object to be printed. See my comments above regarding the nature of an extent.</td>
</tr>
<tr valign=top>
<td width=26%><b>nPointSize</b></td>
<td colspan=2 width=74%>Specifies the point size of the font.</td>
</tr>
<tr valign=top>
<td width=26%><b>szText</b></td>
<td colspan=2 width=74%>Consists of a null-terminated string representing the text that is printed when nPrintObject is set to PO_TEXT. This string may contain a maximum of 256 characters.</td>
</tr>
</table><br>
<h3>Functions Exported from EZPRINT</h3>
<h4>StartDocument</h4>
<p>
The <b>StartDocument</b> function checks for the presence of a printer and initializes it. This function must be called only once, before sending print objects to the printer.</p>
<p>
<b>Syntax</b></p>
<pre><code>BOOL StartDocument(HWND hWnd, BOOL bEnablePrintDialog)
</code></pre>
<p>
<b>Parameters</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=25%><i>hWnd</i></td>
<td width=75%>Handle to a window that is the parent of the printer dialog box (generally the application's main overlapped window).</td>
</tr>
<tr valign=top>
<td width=25%><i>bEnablePrintDialog</i></td>
<td width=75%>Flag (TRUE or FALSE) indicating whether the Print dialog box should be displayed.</td>
</tr>
</table><br>
<p>
<b>Return value</b></p>
<p>
TRUE if successful; FALSE if unsuccessful.</p>
<h4>PrintObject</h4>
<p>
The <b>PrintObject</b> function draws lines, rectangles, and text to the printer.</p>
<p>
<b>Syntax</b></p>
<pre><code>int PrintObject( <i>lpPS </i>)
</code></pre>
<p>
<b>Parameter</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>lpPS</i></td>
<td width=87%>Pointer to the <b>PRINTSTRUCT</b> data structure discussed earlier in this section.</td>
</tr>
</table><br>
<p>
<b>Return value</b></p>
<p>
If the <b>nPrintObject</b> member <b>PrintStruct</b> is set to PO_TEXT, the <b>PrintObject</b> function returns the interline distance required for single line spacing. If the <b>nPrintObject</b> member of <b>PRINTSTRUCT</b> is set to any value other than PO_TEXT, the <b>PrintObject</b> function returns TRUE if the call was successful, and FALSE otherwise.</p>
<h4>EndDocument</h4>
<p>
The <b>EndDocument</b> function terminates the printing process. This function must be called after the <b>StartDocument</b> function, and only after all print objects have been sent to the printer.</p>
<p>
<b>Syntax</b></p>
<pre><code>BOOL EndDocument(HWND hWnd)
</code></pre>
<p>
<b>Parameter</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hWnd</i></td>
<td width=87%>Handle to a window that is the parent of the printer dialog box (generally the application's main overlapped window).</td>
</tr>
</table><br>
<p>
<b>Return value</b></p>
<p>
TRUE if successful; FALSE if unsuccessful.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 65: Separating a Path into Individual Fields</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn65"></a></sup>Tip 65: Separating a Path into Individual Fields</h1>
<p>
Created: April 24, 1995</p>
<h2>Abstract</h2>
<p>
When developing an application in Visual Basic®, you may need to ask the user to enter a fully qualified path, such as when saving a data file to disk. However, your program may need to determine if the specified directory and filename are valid DOS names, or you may need to use the individual elements of the path in some other way. This article demonstrates how you can write a procedure to extract the individual path, filename, and filename extension from a fully qualified path.</p>
<h2>Parsing the Elements of a Path</h2>
<p>
The Visual Basic® <b>InStr</b> and <b>Left$</b> functions provide the tools you need to parse, or extract, certain text from a larger text string. The <b>InStr</b> function lets you search for a specific character within a text string. If it finds the target character, <b>InStr</b> returns the character's position in the text string. Once you know where the target text is, you can use the <b>Left$ </b>function to retrieve only a specific portion of the original text string. In the example program below, we want to retrieve the directory name from the path. Therefore, we first call <b>InStr</b> to search the target string (Full) for the "\" backslash character. The backslash character tells us that the name of a directory was specified in the path. If the backslash character is found, we use the <b>Left$</b> function to extract this directory name and store it in the variable <i>Pname</i>. We know that the name of the directory starts at the string's first position and ends at the position returned by <b>InStr</b>. This same technique is used to extract the filename extension from the specified filename, only the <b>InStr</b> function is told to search for the '.' (period character) and the <b>Mid$</b> function is used to extract the actual filename's extension.</p>
<h2>Example Program</h2>
<p>
The following program shows how you can separate a fully qualified path into separate directory, filename, and filename extension fields.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  Dim FullName As String
  Dim X As Integer
  Dim PathName As String
  Dim FileName As String
  Dim ExtName As String
  
  FullName = "c:\winword\legal\filename.exe"
  X = BreakDown(FullName, FileName, PathName, ExtName)
 &nbsp;&nbsp;&nbsp; 
  Text1.Text = ""
  Text1.Text = "Pathname&nbsp; &gt; " &amp; PathName &amp; Chr(13) &amp; Chr(10)
  Text1.Text = Text1.Text &amp; "FileName&nbsp; &gt; " &amp; FileName &amp; Chr(13) &amp; Chr(10)
  Text1.Text = Text1.Text &amp; "Extension &gt; " &amp; ExtName &amp; Chr(13) &amp; Chr(10)
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>BreakDown</b>. Add the following code to this function (note that the BreakDown line must be typed as a single line of code):<pre><code>BreakDown(Full As String, FName As String, PName As String, Ext As String) As Integer
  If Full = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp; BreakDown = False
 &nbsp;&nbsp;&nbsp;&nbsp; Exit Function
  End If

  If InStr(Full, "\") Then 
FName = Full
 &nbsp;&nbsp;&nbsp;&nbsp; PName = ""
 &nbsp;&nbsp;&nbsp;&nbsp; Sloc% = InStr(FName, "\")
 &nbsp;&nbsp;&nbsp;&nbsp; Do While Sloc% &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PName = PName + Left$(FName, Sloc%)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FName = Mid$(FName, Sloc% + 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sloc% = InStr(FName, "\")
 &nbsp;&nbsp;&nbsp;&nbsp; Loop

  Else
 &nbsp;&nbsp;&nbsp;&nbsp; PName = ""
 &nbsp;&nbsp;&nbsp;&nbsp; FName = Full
  End If

  Dot% = InStr(Full, ".")
  If Dot% &lt;&gt; 0 Then 
 &nbsp;&nbsp;&nbsp;&nbsp; Ext = Mid$(Full, Dot%)
  Else
 &nbsp;&nbsp;&nbsp;&nbsp; Ext = ""
  End If
  BreakDown = True
End Function
</code></pre>
</li>
</ol>
</BODY>
</HTML>

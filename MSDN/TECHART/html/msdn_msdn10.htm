<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 10: Formatting a Disk</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn10"></a></sup>Tip 10: Formatting a Disk</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can format a diskette in a floppy drive from within a Visual Basic® application. Microsoft® Windows® does not provide any functions to format a diskette, but it can be done by using the <b>WinExec</b> application programming interface (API) function.</p>
<h2>Formatting Disks</h2>
<p>
The Windows® <b>WinExec</b> application programming interface (API) function can execute any Windows-based or non-Windows-based program. To call the <b>WinExec</b> function, you must first add its <b>Declare</b> statement to the Global Declarations section of your Visual Basic® application. Following is the <b>WinExec</b> function declaration:</p>
<pre><code>Declare Function WinExec Lib "Kernel" (ByVal lpCmdFile As String, ByVal 
 &nbsp; fuCmdShow As Integer) As Integer
</code></pre>
<p>
(Note that this <b>Declare</b> statement must be typed as a single line of text.)</p>
<p>
To execute a program, you would call the <b>WinExec</b> function with the statement:</p>
<pre><code>x = WinExec(lpCmdFile, fuCmdShow)
</code></pre>
<p>
specifying the following parameters:</p>
<pre><code>lpCmdFile&nbsp;&nbsp; \A string containing the name of the application to execute
fuCmdShow&nbsp;&nbsp; \An integer value that tells WinExec how to show the application 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \when it is executed. This may be one of the following constants:
 &nbsp; SW_HIDE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \The window is hidden and activation passes to another window.
 &nbsp; SW_MINIMIZE&nbsp; \The window is minimized and activation passes to another 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \window.
 &nbsp; SW_RESTORE&nbsp;&nbsp; \The window is activated and displayed in its original size and 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \at its original location.
 &nbsp; SW_SHOW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \The window is activated and displayed in its current size and 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \at its current location.
 &nbsp; SW_SHOWMAXIMIZED&nbsp;&nbsp; \The window is maximized and activated.
 &nbsp; SW_SHOWMINIMIZED&nbsp;&nbsp; \The window is minimized and activated.
 &nbsp; SW_SHOWMINNOACTIVE&nbsp; \The window is minimized but the active window is not 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \changed.
 &nbsp; SW_SHOWNA&nbsp;&nbsp;&nbsp; \The window is displayed at its current location in its current 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \size but the active window is not changed.
 &nbsp; SW_SHOWNOACTIVATE&nbsp;&nbsp; \The window is displayed at its most recent location in 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \its most recent size but the active window is not 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \changed.
 &nbsp; SW_SHOWNORMAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \The window is activated and displayed in its original 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \size and at its original location.
</code></pre>
<p>
After the <b>WinExec</b> function is called, it returns an integer value greater than 32 if the application was successful. Otherwise, one of the following error codes is returned:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Error Code</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>0</td>
<td width=79%>Out of memory</td>
</tr>
<tr valign=top>
<td width=21%>2</td>
<td width=79%>File not found</td>
</tr>
<tr valign=top>
<td width=21%>3</td>
<td width=79%>Path not found</td>
</tr>
<tr valign=top>
<td width=21%>5</td>
<td width=79%>Sharing/protection error</td>
</tr>
<tr valign=top>
<td width=21%>6</td>
<td width=79%>Each task requires separate data segments</td>
</tr>
<tr valign=top>
<td width=21%>10</td>
<td width=79%>Windows version is incorrect</td>
</tr>
<tr valign=top>
<td width=21%>11</td>
<td width=79%>Not valid .EXE file</td>
</tr>
<tr valign=top>
<td width=21%>12</td>
<td width=79%>Cannot execute OS/2 application</td>
</tr>
<tr valign=top>
<td width=21%>13</td>
<td width=79%>Cannot execute DOS 4.0 application</td>
</tr>
<tr valign=top>
<td width=21%>14</td>
<td width=79%>EXE type is unknown</td>
</tr>
<tr valign=top>
<td width=21%>15</td>
<td width=79%>Protected memory mode not supported by Windows</td>
</tr>
<tr valign=top>
<td width=21%>16</td>
<td width=79%>Cannot load another instance of .EXE file</td>
</tr>
<tr valign=top>
<td width=21%>17</td>
<td width=79%>Cannot load second instance in large-frame EMS mode</td>
</tr>
<tr valign=top>
<td width=21%>18</td>
<td width=79%>Cannot load protected-mode application in real mode</td>
</tr>
</table><br>
<p>
The <b>lpCmdFile</b> argument must be a string containing the name of the application program you want to execute, as well as any command line parameters required by the application program itself. If the argument does not include the full path, Windows will search for the application in the following order:
<ol>
<li>
The current directory<br><br></li>
<li>
The Windows directory<br><br></li>
<li>
The Windows System directory<br><br></li>
<li>
The directory that contains the current task's application file<br><br></li>
<li>
All directories in the PATH environment variable<br><br></li>
<li>
Network directories</li>
</ol>
<p>
As stated earlier, the <b>WinExec</b> function can execute any Windows-based or MS-DOS®–based program. This includes .EXE, .COM, and .BAT files. In addition, <b>WinExec</b> can also be used to execute Windows screen savers (files that have the .SRC file extension) and program information files (files that have the .PIF file extension). Windows is shipped with several .PIF files that you can use in conjunction with the <b>WinExec</b> function. One of these files is called DOSPRMPT.PIF. This particular .PIF file contains information that Windows needs to run an MS-DOS program. The .PIF file tells Windows, for example, how much memory should be set aside to run the MS-DOS program.</p>
<p>
We can tell Windows to execute the FORMAT command in Visual Basic with the following statement:</p>
<pre><code>x = WinExec("dosprmpt.pif&nbsp; /c c:\dos\format b: &lt; c:\response.tmp", SW_HIDE)
</code></pre>
<p>
Each time MS-DOS formats a diskette, it asks you to press the enter key to initiate the procedure. After the disk has been formatted, the program asks you to type a Volume Label name and/or press the enter key. Next, you are asked if you wish to format another diskette, to which you respond with a "y" or "n" key.</p>
<p>
This problem is easily solved. To respond to the prompts from the FORMAT command, we first need to create a file called RESPONSE.TMP. This file contains the keystrokes we want to pass on to the FORMAT command, just as if we had typed them at the keyboard ourselves. DOS's redirection capabilities will allow us to pass the contents of the RESPONSE.TMP file to the FORMAT.COM program.</p>
<h2>Example Program</h2>
<p>
The following program formats a floppy disk in drive B.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
In the General Declarations section of Form1, add the following three statements:<pre><code>Const Resp_File = "c:\response.tmp"
Const SW_HIDE = &amp;H0
Dim ActiveApps As Integer
</code></pre>
</li>
<li>
In addition, add the following two <b>Declare</b> statements (note that each statement should be typed as a single line of text):<pre><code>Declare Function WinExec Lib "Kernel" (ByVal lpCmdLine As String, ByVal nCmdShow 
 &nbsp; As Integer) As Integer
Declare Function GetNumTasks Lib "Kernel" () As Integer
</code></pre>
</li>
<li>
Add a command button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Format Disk".<br><br></li>
<li>
Add the following code to the Click event of Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Cmd = Chr(13) &amp; Chr(10) &amp; Chr(13) &amp; Chr(10) &amp; "N" &amp; Chr(13) &amp; Chr(10)
 &nbsp;&nbsp; FileNum = FreeFile
 &nbsp;&nbsp; Open Resp_File For Output As #FileNum
 &nbsp;&nbsp; Print #FileNum, Cmd
 &nbsp;&nbsp; Close #FileNum&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; ActiveApps = GetNumTasks()
 &nbsp;&nbsp; X = WinExec("dosprmpt.pif /c c:\dos\format b: &lt;c:\response.tmp", SW_HIDE)&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Do While GetNumTasks() &lt;&gt; ActiveApps
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = DoEvents()
 &nbsp;&nbsp; Loop&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Kill Resp_File
End Sub
</code></pre>
</li>
</ol>
<p>
Execute this demonstration program by pressing the F5 function key or by selecting Run from the Visual Basic menu. Insert a floppy diskette into drive B and click the "Format Disk" command button. Visual Basic will format the diskette in drive B and return control to the demonstration program.</p>
</BODY>
</HTML>

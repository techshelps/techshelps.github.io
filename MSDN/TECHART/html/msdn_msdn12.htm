<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 12: Redirecting the Output of a Shelled DOS Program</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn12"></a></sup>Tip 12: Redirecting the Output of a Shelled DOS Program</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
When you execute a DOS program through the Visual Basic® <b>shell</b> command, the only way you can use the redirection capabilities of DOS is to save the DOS program output to a text file. Then your Visual Basic program can read the data from the text file and perform program operations based on this same data.</p>
<h2>Retrieving Output from a DOS Program</h2>
<p>
Saving the output of a DOS command that is executed from within your Visual Basic® program may be necessary. For example, if you execute the <b>dir</b> command, you will obviously want to save the file list so that you can use it in your Visual Basic application. Or, if the DOS program returns an ErrorLevel value, you may need to perform tasks depending on this value.</p>
<p>
The redirection facility provided in DOS allows you to send the output of a DOS command to a text file. Unfortunately, the Visual Basic <b>shell</b> command will not allow you to specify DOS commands that have command line parameters telling it to redirect the output in this manner. However, if you first create a batch file that contains the DOS command and then use <b>shell</b> to execute the batch file, the desired results can be achieved.</p>
<p>
Another problem occurs when executing DOS commands or programs via <b>shell</b>: You need to know when the DOS program has finished executing. This problem can be solved by calling the Windows® <b>GetNumTasks</b> application programming interface (API) function. <b>GetNumTasks</b> tells you how many programs are currently being executed on the computer system in both DOS and Windows.</p>
<p>
Therefore, to determine when your batch file has finished executing, you simply call <b>GetNumTasks</b> first, saving the value it returns in a variable. After executing the <b>shell</b> statement, you call <b>GetNumTasks</b> again to find out if the number of tasks has decreased by one. If it has, you know that your batch file (or other DOS program) has finished doing its work.</p>
<p>
To use the <b>GetNumTasks</b> function in your Visual Basic applications, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form:</p>
<pre><code>Declare Function GetNumTasks Lib "Kernel" () As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>GetNumTasks</b> function does not require any arguments; you simply call it. It returns an integer value set to the number of tasks that are currently running.</p>
<h2>Example Program</h2>
<p>
This program creates a batch file that contains the DOS command "DIR C:\*.*&nbsp; &gt; C:\DIRLIST.DAT". This batch file tells DOS to issue a <b>dir</b> command on drive C and send the output of that command to the text file called DIRLIST.DAT. The Visual Basic program then displays the contents of DIRLIST.BAT in the Text Box. 
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
In the general declarations section of Form1, add the following <b>Declare</b> statement (note that this statement should be typed as a single line of text):<pre><code>Declare Function GetNumTasks Lib "Kernel" () As Integer
</code></pre>
</li>
<li>
Add a command button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Execute DIR".<br><br></li>
<li>
Add the following code to the Click event of Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Dim Num_Apps As Integer, NewFile As Integer
 &nbsp;&nbsp; Dim File_Data As String, DosCmd As String
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 'Create a batch file with the DIR *.EXE command
 &nbsp;&nbsp; 'and redirect the output to a textfile DIRLIST.TXT.
 &nbsp;&nbsp; DosCmd = "DIR C:\*.* &gt; c:\DIRLIST.DAT"
 &nbsp;&nbsp; NewFile = FreeFile
 &nbsp;&nbsp; Open "C:\DIRBAT.BAT" For Output As #NewFile
 &nbsp;&nbsp; Print #NewFile, DosCmd
 &nbsp;&nbsp; Close #NewFile
 &nbsp;&nbsp; 'Call the Shell command to execute DIRBAT.BAT.
 &nbsp;&nbsp; Num_Apps = GetNumTasks()
 &nbsp;&nbsp; X = Shell("C:\DIRBAT.BAT", 2)
 &nbsp;&nbsp; 'Wait until DIR has finished doing its thing.
 &nbsp;&nbsp; Do While GetNumTasks() &lt;&gt; Num_Apps
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = DoEvents()
 &nbsp;&nbsp; Loop
 &nbsp;&nbsp; 'Display the filenames in the Text Box.
 &nbsp;&nbsp; NewFile = FreeFile
 &nbsp;&nbsp; Open "C:\DIRLIST.DAT" For Input As #NewFile
 &nbsp;&nbsp; Text1.Text = ""
 &nbsp;&nbsp; While Not EOF(NewFile)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line Input #NewFile, File_Data
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = Text1.Text &amp; File_Data &amp; Chr(13) &amp; Chr(10)
 &nbsp;&nbsp; Wend
 &nbsp;&nbsp; Close #NewFile
End Sub
</code></pre>
</li>
<li>
Add another command button to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Exit".<br><br></li>
<li>
Add the following code to the Click Event of Command2:<pre><code>Sub Command2_Click()
 &nbsp;&nbsp; End
End Sub
</code></pre>
</li>
<li>
Add a Text Box to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True. Make sure the text box is large enough to display a directory list.</li>
</ol>
<p>
Execute this demonstration program by pressing the F5 function key. Click the "Execute DIR" command button. After a second or two, a list of the files found on drive C will be shown in the Text Box. Click the Exit command button to terminate the application.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 29: Displaying MDI Child Windows as Icons Without Showing Child Windows First</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn29"></a></sup>Tip 29: Displaying MDI Child Windows as Icons Without Showing Child Windows First</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
When designing a MDI application in Visual Basic®, you first create the primary MDI form and add secondary child forms to the MDI form. After your program is executed, you can initially display the child forms as minimized icons. These icons will appear at the bottom of the primary MDI form's window.</p>
<p>
However, when the icons are displayed on the form, you can actually see each child form quickly displayed in its normal size on the MDI form. This article explains how you can prevent Windows® from flashing these child windows before they are shown as minimized icons. The icons will be minimized immediately without this side effect.</p>
<h2>Minimizing and Displaying Child Icons Immediately</h2>
<p>
The key to minimizing child windows immediately, without first having them displayed in their normal size and at their normal positions within the MDI form, is to set each child window's <b>WindowState</b> property to 1-Minimized. Next, call the Windows® application programming interface (API) <b>ShowWindow</b> function to display the child windows as minimized icons.</p>
<p>
The <b>ShowWindow</b> function is used to set a window's visibility status. You can tell the function to display the window as minimized, hidden, or any number of other states. To declare this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your MDI form:</p>
<pre><code>Declare Function ShowWindow Lib "User" (ByVal hWnd%, ByVal nCmdShow%) As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
To call the <b>ShowWindow</b> function, you pass the window's handle and the visibility status you want to apply to the window. The visibility status may be one of the constants in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=30%><b>SW_HIDE</b></td>
<td width=70%>Window is hidden.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_MINIMIZE</b></td>
<td width=70%>Window is minimized.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_RESTORE</b></td>
<td width=70%>Window is restored to original size/position.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOW</b></td>
<td width=70%>Windows is restored to original size/position and activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWMAXIMIZED</b></td>
<td width=70%>Window is maximized and activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWMINIMIZED</b></td>
<td width=70%>Window is minimized and activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWMINNOACTIVE</b></td>
<td width=70%>Window is minimized but not activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWNA</b></td>
<td width=70%>Window is shown at current size/position but not activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWNOACTIVATE</b></td>
<td width=70%>Window is shown at most recent size/position but not activated.</td>
</tr>
<tr valign=top>
<td width=30%><b>SW_SHOWNORMAL</b></td>
<td width=70%>Window is restored to original size/position.</td>
</tr>
</table><br>
<p>
To change the visibility status of a window with the <b>ShowWindow</b> function, you must first determine the window's handle. In our case, we need to retrieve the handle for the child window. This can be done with the statement:</p>
<pre><code>X% = Form2.hWnd
</code></pre>
<p>
where Form2 is the name of the form whose handle we want to retrieve and the X variable will contain the handle number. Every Visual Basic form has an <b>hWnd</b> property that is set to the form's handle. Once the <b>ShowWindow</b> function is called, the child window will be immediately iconized on the MDI form.</p>
<h2>Example Program</h2>
<p>
The following program shows how you can display a MDI form's child windows as icons without first having the child windows flashed on the MDI form in their normal size and position.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Create an MDI form. MDIForm1 is created by default. <br><br></li>
<li>
Add a child form to MDIForm1. Form2 is created by default. Set its <b>WindowState</b> property to 1-Minimized. Set its <b>MDIChild</b> property to True.<br><br></li>
<li>
Add a second child form to MDIForm1. Form3 is created by default. Set its <b>WindowState</b> property to 1-Minimized. Set its <b>MDIChild</b> property to True.<br><br></li>
<li>
Set the application's StartUp form to MDI_Test.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statement to the General Declarations section of MDIForm1 (note that the <b>Declare</b> statement must be typed as one single line of text):<pre><code>Declare Function ShowWindow Lib "User" (ByVal hWnd%, ByVal nCmdShow%) As Integer
Const SW_MINIMIZE = &amp;H6
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for MDIForm1:<pre><code>Sub MDIForm_Load()
 &nbsp;&nbsp; Dim x As Integer
 &nbsp;&nbsp; x = ShowWindow%(Form2.hWnd, SW_MINIMIZE)
 &nbsp;&nbsp; x = ShowWindow%(Form3.hWnd, SW_MINIMIZE)
End Sub
</code></pre>
</li>
</ol>
<p>
To execute this demonstration program, press the F5 function key. The two child forms will be immediately displayed as icons near the bottom of the MDIForm1 form.</p>
</BODY>
</HTML>

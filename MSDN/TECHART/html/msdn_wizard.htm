<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>We're Off to See the Wizard</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_wizard"></a>We're Off to See the Wizard</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Developer Network Technology Group</p>
<p>
October 1994</p>
<p>
Revised: February 1995 (PSN_HASHELP segment removed from code in "Example: Processing Notifications" section)</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3060">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files for the WIZARD sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
There is a new control provided with the Microsoft® Windows® 95 operating system called the Wizard control. This control is based on the property sheet control included in the common control library, COMCTL32, and was designed to make it easier for developers to create wizards within their applications. This article takes a light-hearted look at this new Wizard control. The accompanying sample, WIZARD, implements a handy tool that is used for generating a performance review. The user is prompted for information such as work habits and attitude, and the information gathered is then translated into a form that manager-types can appreciate.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The information contained in this article is based on preliminary information that is subject to change before the final release of Windows 95. I will update this article with any new information about the Wizard control as I receive it.</p>
<h2>What Is a Wizard?</h2>
<p>
It's a person who wears a funny pointed hat with stars on it and makes magic happen. At least, that's one way to define it. The term <i>wizard</i>, when used in the context of an application, refers to a piece of code that walks the user through a series of steps (in the form of dialog boxes) in order to accomplish a complex task. Many applications today take advantage of wizards during application or device setup operations. For example, the illustration below is the Printer Installation Wizard used by the Microsoft® Windows® 95 operating system.</p>
<p>
<img src="wizard_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Printer Installation Wizard</b></p>
<p>
A wizard is basically a property sheet with extra buttons and no tabs. In a standard property sheet, the user can navigate among its pages by clicking tabs. There is no special navigation order to conform to, and the user doesn't even have to look at every page. In contrast, when running a wizard, the user is taken through a series of dialog boxes synchronously. The user can always go backward or forward, but the application determines the order in which the steps must be taken or the information must be filled out. If the application requires input for a particular page, it can disallow paging forward by disabling the Next button.</p>
<p>
Another difference between property sheets and wizards is the buttons that are presented to the user. A property sheet, as shown below, has an OK, Cancel, Apply Now, and an optional Help button. These buttons are used for all the different pages within the property sheet. The buttons that reside at the bottom of a page in a wizard, typically the Back, Next, and Cancel buttons, apply only to the currently active page.</p>
<p>
<img src="wizard_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The Properties For Display property sheet</b></p>
<h2>Creating a Wizard</h2>
<p>
No witches' broomsticks are needed to get your wizard to appear, but creating a wizard does involve filling out a bit of paper work. Much of this is the same paper work you would do if you were creating a property sheet.</p>
<p>
The first step in creating a wizard is to create a dialog box for each page of information you want to collect. You can do this with the same resource editor you use for standard dialog boxes. One difference between a property sheet page and a typical dialog box is that, for the dialog box, you should remove the OK and Cancel buttons that are included in the default template.</p>
<p>
After you've created the dialog boxes, the application must fill out a <b>PROPSHEETPAGE</b> structure for each page (dialog box) that will be displayed. Then the application must fill out a <b>PROPSHEETHEADER</b> structure for the overall property sheet. The .<i>dwFlags</i> field of this structure must include the PSH_WIZARD flag to specify that the property sheet is a wizard. Finally, the application must call the <b>PropertySheet</b> function. The code below, from the WIZARD sample in the Windows 95 Software Development Kit (SDK), demonstrates how to fill out these structures to create a wizard.</p>
<pre><code>//&nbsp; FUNCTION: FillInPropertyPage(PROPSHEETPAGE *, int, LPSTR, LPFN) 
//
//&nbsp; PURPOSE: Fills in the given PROPSHEETPAGE structure. 
//
//&nbsp; COMMENTS:
//
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This function fills in a PROPSHEETPAGE structure with the
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; information the system needs to create the page.
// 
void FillInPropertyPage( PROPSHEETPAGE* psp, int idDlg, LPSTR pszProc, DLGPROC 
 &nbsp;&nbsp;&nbsp; pfnDlgProc)
{
 &nbsp;&nbsp; // Set the size of this structure.
 &nbsp;&nbsp; psp-&gt;dwSize = sizeof(PROPSHEETPAGE);
 &nbsp;&nbsp; // No special flags.
 &nbsp;&nbsp; psp-&gt;dwFlags = 0;
 &nbsp;&nbsp; // The instance associated with this application.
 &nbsp;&nbsp; psp-&gt;hInstance = rvInfo.hInst;
 &nbsp;&nbsp; // The dialog box template to use.
 &nbsp;&nbsp; psp-&gt;pszTemplate = MAKEINTRESOURCE(idDlg);
 &nbsp;&nbsp; // Don't use a special icon in the caption bar.
 &nbsp;&nbsp; psp-&gt;pszIcon = NULL;
 &nbsp;&nbsp; // The dialog procedure that handles this page.
 &nbsp;&nbsp; psp-&gt;pfnDlgProc = pfnDlgProc;
 &nbsp;&nbsp; // The title for this page.
 &nbsp;&nbsp; psp-&gt;pszTitle = pszProc;
 &nbsp;&nbsp; // No special application-specific data.
 &nbsp;&nbsp; psp-&gt;lParam = 0;

}

//&nbsp; FUNCTION: CreateWizard(HWND)
//
//&nbsp; PURPOSE: Create the Wizard control.
//
//&nbsp; COMMENTS:
//&nbsp; 
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This function creates the wizard property sheet.
//
int CreateWizard(HWND hwndOwner, HINSTANCE hInst)
{
 &nbsp;&nbsp; PROPSHEETPAGE psp[NUM_PAGES];
 &nbsp;&nbsp; PROPSHEETHEADER psh;

 &nbsp;&nbsp; // For each of the pages that I need, fill in a PROPSHEETPAGE structure.
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[0], IDD_INFO, "Your Information", YourInfo);
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[1], IDD_WORKHABITS, "Work Habits", WorkHabits);
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[2], IDD_TEAMWORK, "Team Work", TeamWork);
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[3], IDD_RELIABILITY, "Reliability", Reliability);
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[4], IDD_GOALS, "Attainment of Goals", Goals);
 &nbsp;&nbsp; FillInPropertyPage( &amp;psp[5], IDD_ADAPTATION, "Adaptability to Change", 
 &nbsp;&nbsp;&nbsp;&nbsp; Adaptation);

 &nbsp;&nbsp; // Fill in the size of the PROPSHEETHEADER structure.
 &nbsp;&nbsp; psh.dwSize = sizeof(PROPSHEETHEADER);
 &nbsp;&nbsp; // Specify that this is a wizard property sheet with no Apply Now button.
 &nbsp;&nbsp; psh.dwFlags = PSH_PROPSHEETPAGE | PSH_WIZARD | PSH_NOAPPLYNOW;
 &nbsp;&nbsp; // Specify the parent window.
 &nbsp;&nbsp; psh.hwndParent = hwndOwner;
 &nbsp;&nbsp; // The caption for the wizard.
 &nbsp;&nbsp; psh.pszCaption = (LPSTR) "Review Wizard";
 &nbsp;&nbsp; // The number of pages in this wizard.
 &nbsp;&nbsp; psh.nPages = sizeof(psp) / sizeof(PROPSHEETPAGE);
 &nbsp;&nbsp; // Point to the array of property sheet pages.
 &nbsp;&nbsp; psh.ppsp = (LPCPROPSHEETPAGE) &amp;psp;

 &nbsp;&nbsp; // Create and run the wizard.
 &nbsp;&nbsp; return (PropertySheet(&amp;psh));
}
</code></pre>
<p>
When you've supplied the information, compiled the code, and run it, you should see a page that looks like this:</p>
<p>
<img src="wizard_3.gif" border=0></p>
<p class=label>
<b>Figure 3. First page of Performance Review Wizard</b></p>
<h2>Who Is That Man Behind the Curtain?</h2>
<p>
Although the Wizard control simplifies the task of creating a wizard, it doesn't perform magic: You still have to do a lot of work yourself. The code above simply filled out the structures and called the function to create and run the wizard. If you want those dialog boxes to gather the data and use the information entered in them, you still need to do some work in your dialog box functions.</p>
<p>
Each dialog box function, as specified by the .<i>pfnDlgProc</i> member of the <b>PROPSHEETPAGE </b>structure, must process the messages and notifications it receives. Property sheets rely heavily on notifications, packaged as WM_NOTIFY messages. The code used to trap the notifications is very similar to the code used for standard property sheets. There are, however, three new notifications associated with wizards:
<ul type=disc>
<li>
PSN_WIZBACK, sent to the property sheet page when the Back button is clicked.<br><br></li>
<li>
PSN_WIZNEXT, sent to the property sheet page when the Next button is clicked.<br><br></li>
<li>
PSN_WIZFINISH, sent to the property sheet page when the Finish button is clicked.</li>
</ul>
<p>
When these notifications are sent, the default action is to advance to the next page or to move back to the previous page. The handler can disallow this by setting the notification result to 1. But let's say that you want to create a wizard that branches to a specific page dependent upon some feedback from the user. For example, let's say that your wizard installs a piece of software, and your application must prompt for extra information depending upon whether the user prefers a standard setup or a custom setup. The default behavior is for the next page in the array of property sheet pages to be displayed. You can override that behavior and branch to a specific page by setting the notification result to the ID of the dialog box that should be shown. In our example above, your application would branch past the custom dialog boxes for a standard setup but could, by default, display the custom dialog boxes in order.</p>
<p>
The PSN_APPLYNOW notification, which is sent to standard property sheets when the Apply Now button is pressed, is not sent to wizards for obvious reasons (there is no Apply Now button). The PSN_SETACTIVE notification is sent when a page is becoming active. When the page receives this notification, it can prevent itself from being activated and return activation to another page. Setting the notification result to 1 will set the activation to the next or previous page (depending upon the button pressed) in the array of property sheet pages. Setting the notification to the ID of another dialog box will cause the specified dialog box to be activated.</p>
<p>
If you would like more detailed information about property sheets in general and the structures and messages that are used with them, the Windows 95 SDK and the technical article <a href="msdn_commctl6.htm">"Win32 Common Controls, Part 6: Tab Controls and Property Sheets"</a> in the MSDN Library contain the background material you will need.</p>
<h3>Example: Processing Notifications</h3>
<p>
The following code, from the WIZARD sample, demonstrates how an application can trap the different notifications that are sent to a wizard. In this code, the dialog procedure initializes the text buffers with NULL strings upon the first entrance into the wizard and whenever the dialog box receives a PSN_RESET notification. When this dialog box receives the PSN_WIZNEXT notification, it saves the information that has been entered into the text fields. If this dialog box is called again and receives a PSN_SETACTIVE notification, the text buffers are reinitialized with the information that has been previously entered into the text fields. This dialog box also sets the Next button as the only enabled function when it receives the PSN_SETACTIVE notification. Because this is the first dialog box that is entered in the wizard, the Back button should not be enabled.</p>
<pre><code>//&nbsp; FUNCTION: YourInfo(HWND, UINT, UINT, LONG)
//
//&nbsp; PURPOSE:&nbsp; Processes messages for "Your Information" page. 
//
//&nbsp; MESSAGES:
//&nbsp; 
//&nbsp; WM_INITDIALOG - intializes the page.
//&nbsp; WM_NOTIFY - processes the notifications sent to the page.
//
BOOL APIENTRY YourInfo(HWND hDlg, UINT message, UINT wParam,
 &nbsp; LONG lParam)
{

  switch (message)
  {
 &nbsp;&nbsp; case WM_INITDIALOG:
 &nbsp;&nbsp;&nbsp;&nbsp; // Initialize the text buffers with NULL.
 &nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszName, "");
 &nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszTitle, "");
 &nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszProject, "");
 &nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszDepartment, "");
 &nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_NOTIFY:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (((NMHDR FAR *) lParam)-&gt;code) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_KILLACTIVE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg,&nbsp; DWL_MSGRESULT, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_RESET:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Reset to the original values.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszName, "");;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszTitle, "");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszProject, "");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(rvInfo.pszDepartment, "");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg,&nbsp; DWL_MSGRESULT, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_SETACTIVE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(GetDlgItem(hDlg, IDE_NAME), WM_SETTEXT, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPARAM)rvInfo.pszName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(GetDlgItem(hDlg, IDE_TITLE), WM_SETTEXT, 0, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPARAM)rvInfo.pszTitle);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(GetDlgItem(hDlg, IDE_PROJECT), WM_SETTEXT, 0, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPARAM)rvInfo.pszProject);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(GetDlgItem(hDlg, IDE_DEPARTMENT), WM_SETTEXT, 0, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPARAM)rvInfo.pszDepartment);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_WIZNEXT:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The Next button was pressed - get the text info entered.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendDlgItemMessage(hDlg, IDE_NAME, WM_GETTEXT, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (WPARAM)MAX_PATH, (LPARAM) rvInfo.pszName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendDlgItemMessage(hDlg, IDE_TITLE, WM_GETTEXT, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszTitle);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendDlgItemMessage(hDlg, IDE_PROJECT, WM_GETTEXT, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszProject);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendDlgItemMessage(hDlg, IDE_DEPARTMENT, WM_GETTEXT, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszDepartment);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FALSE;
  }
  return TRUE;&nbsp;&nbsp; 
}
</code></pre>
<h2>Wizard Messages</h2>
<p>
There are three messages that are especially useful when working with wizard controls. The first, PSM_PRESSBUTTON, can be useful for property sheets in general. The others, PSM_SETFINISHTEXT and PSM_SETWIZBUTTONS, are used exclusively for wizard controls. Each message has a macro associated with it that the application can use instead of sending the message.</p>
<h3>PSM_PRESSBUTTON</h3>
<p>
PSM_PRESSBUTTON indicates the button specified in <i>wParam</i> to be "pressed." The button can have one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=25%>PSBTN_BACK</td>
<td width=75%>Press the Back button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_NEXT</td>
<td width=75%>Press the Next button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_FINISH</td>
<td width=75%>Press the Finish button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_OK</td>
<td width=75%>Press the OK button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_APPLYNOW</td>
<td width=75%>Press the Apply Now button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_CANCEL</td>
<td width=75%>Press the Cancel button.</td>
</tr>
<tr valign=top>
<td width=25%>PSBTN_HELP</td>
<td width=75%>Press the Help button.</td>
</tr>
</table><br>
<p>
The macro to use to send the PSM_PRESSBUTTON message is:</p>
<pre><code>(VOID)PropSheet_PressButton(hPropSheetDlg, iButton);
</code></pre>
<h3>PSM_SETFINISH</h3>
<p>
PSM_SETFINISH enables the Finish button, hides the Back button, and sets the text on the Finish button to the text specified in <i>lParam</i>. The macro to use to send the PSM_SETFINISH message is:</p>
<pre><code>(VOID)PropSheet_SetFinishText(hPropSheetDlg, lpszText);
</code></pre>
<h3>PSM_SETWIZBUTTONS</h3>
<p>
PSM_SETWIZBUTTONS specifies which buttons should be enabled within the wizard. It is only supported in wizard controls. <i>lParam</i> specifies which buttons are enabled. This parameter can be a combination of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=25%>PSWIZB_BACK</td>
<td width=75%>Enable the Back pushbutton.</td>
</tr>
<tr valign=top>
<td width=25%>PSWIZB_NEXT</td>
<td width=75%>Enable the Next pushbutton.</td>
</tr>
<tr valign=top>
<td width=25%>PSWIZB_FINISH</td>
<td width=75%>Enable the Finish pushbutton.</td>
</tr>
</table><br>
<p>
The macro to use to send the PSM_SETWIZBUTTONS message is:</p>
<pre><code>(VOID)PropSheet_SetWizButtons (hPropSheetDlg, dwFlags);
</code></pre>
<h2>You've Got the Ruby Slippers. Now What?</h2>
<p>
Now that you've gotten the information from the wizard, it's time to click those heels together and get back to Kansas. In the WIZARD sample, the information is gathered in order to generate text for a performance review. While the wizard is running, the results entered by the user are kept in a structure, and these results are used to generate the review. This review is generated via indexes into a string table, and the resulting buffer is displayed in a multiline edit field in the main window. The code below is what the WIZARD sample used to generate the final text buffer.</p>
<pre><code>//&nbsp; FUNCTION: GenerateReview(void)
//
//&nbsp; PURPOSE: Generate the review. 
//
//&nbsp; COMMENTS:
//&nbsp; 
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This function generates the review based upon the answers
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; given to the Wizard. The function translates lame reality into
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; impressive-sounding manager-speak via a string table.
//
void GenerateReview( HWND hDlg )
{
  char lpBuf1[MAX_LINE];&nbsp; // Buffers for the lines in the review.
  char lpBuf2[MAX_LINE];
  char lpBuf3[MAX_LINE];
  char lpBuf4[MAX_LINE];
  char lpBuf5[MAX_LINE];


  wsprintf(lpReview, "Name: %s%C%C%C%CTitle: %s%C%C%C%CDepartment:&nbsp; 
 &nbsp;&nbsp; %s%C%C%C%CMain Project: %s%C%C%C%C",
 &nbsp;&nbsp; rvInfo.pszName, 0x0d, 0x0a, 0x0d, 0x0a, 
 &nbsp;&nbsp; rvInfo.pszTitle, 0x0d, 0x0a, 0x0d, 0x0a, 
 &nbsp;&nbsp; rvInfo.pszDepartment, 0x0d, 0x0a, 0x0d, 0x0a, 
 &nbsp;&nbsp; rvInfo.pszProject,0x0d, 0x0a, 0x0d, 0x0a );

  // Add a line describing work habits.
  if (LoadString(rvInfo.hInst, rvInfo.iWorkHabits, lpBuf1, sizeof(lpBuf1)))
 &nbsp;&nbsp; lstrcat(lpReview, lpBuf1);

  // Add a line describing teamwork.
  if (LoadString(rvInfo.hInst, rvInfo.iTeamWork, lpBuf2, sizeof(lpBuf2)))
 &nbsp;&nbsp; lstrcat(lpReview, lpBuf2);

  // Add a line describing reliability.
  if (LoadString(rvInfo.hInst, rvInfo.iReliability, lpBuf3, sizeof(lpBuf3)))
 &nbsp;&nbsp; lstrcat(lpReview, lpBuf3);

  // Add a line describing goals.
  if (LoadString(rvInfo.hInst, rvInfo.iGoals, lpBuf4, sizeof(lpBuf4)))
 &nbsp;&nbsp; lstrcat(lpReview, lpBuf4);

  // Add a line describing adaptability.
  if (LoadString(rvInfo.hInst, rvInfo.iAdaptation, lpBuf5, sizeof(lpBuf5)))
 &nbsp;&nbsp; lstrcat(lpReview, lpBuf5);
}
</code></pre>
<p>
If you build and run the sample now, you can fill in the appropriate information, check the boxes that most accurately reflect your skills and work habits, and have a review generated for you. Just for grins, I filled one out and picked the last option in the list for each of the questions asked. Here is the result:</p>
<p>
<img src="wizard_4.gif" border=0></p>
<p class=label>
<b>Figure 4. The generated review</b></p>
<h2>Summary</h2>
<p>
This article covers the basic steps you need to take to use the Wizard control in Windows 95. If you made the effort to copy the files used to create the WIZARD sample, build it, and run it, you have a good idea of what the Wizard control buys you. The sample can be easily altered to be used for practical purposes. It could even be altered to create a genuine performance review. Of course, from now on I'll never get away with using the phrases that I have used in the past on my performance review to get a better rating. I did this for your enjoyment, so the least you can do is let me know if you enjoyed it.</p>
</BODY>
</HTML>

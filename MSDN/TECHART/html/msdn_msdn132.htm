<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 132: Preventing Duplicate Items from Being Added to List Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn132"></a></sup>Tip 132: Preventing Duplicate Items from Being Added to List Box Controls</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
You can maintain a list of items in the Microsoft® Visual Basic® <b>List Box</b> control. This article explains how to add new items to the <b>List Box</b> control by first checking to see if the entry already exists in the list.</p>
<h2>Using SendMessage to Search for Duplicate Items</h2>
<p>
When developing an application in Microsoft® Visual Basic®, you can use the <b>List Box</b> control to create and maintain a list of items. To add new items to the list, you use the <b>AddItem</b> method. The <b>AddItem</b> method does not automatically report that a duplicate item already exists in the <b>List Box</b> control—you must verify this before you actually add the new item to the list.</p>
<p>
You can search a <b>List Box</b> control for a specific item by using the Microsoft Windows® application programming interface (API) <b>SendMessage</b> function. <b>SendMessage</b> allows you to send a message to the operating system. In this case, you want to tell <b>SendMessage</b> to issue an LB_FINDSTRING message to the <b>List Box</b> control.</p>
<p>
The LB_FINDSTRING message lets you search a <b>List Box</b> control for an entry that matches the target string. The first argument to this message defines the type of search you want to perform. You need to specify a value of zero to begin the search operation at the first entry in the <b>List Box</b> control. The second argument to the LB_FINDSTRING message is a NULL-terminated string that is the actual item you want to search for.</p>
<p>
If the LB_FINDSTRING message returns a value of –1 (minus 1), you know that the target string was not found in the <b>List Box</b> control. You can then use the <b>AddItem</b> method to add the new item to the <b>List Box</b> control. If the item already exists in the list, however, you can simply display a message box or perform some other procedure to inform the user that a duplicate entry already exists in the <b>List Box</b> control.</p>
<h2>Example Program</h2>
<p>
This program shows how to determine if a <b>List Box</b> control already contains the item you are trying to add to the control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function SendMessageFind Lib "user32" Alias "SendMessageA" 
 &nbsp; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal 
 &nbsp; lParam As String) As Long
Const WM_USER = &amp;H400
Const LB_ERR = (-1)
Const LB_FINDSTRING = &amp;H18F
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; List1.AddItem "Item #1"
 &nbsp;&nbsp; List1.AddItem "Item #2"
 &nbsp;&nbsp; List1.AddItem "Item #3"
 &nbsp;&nbsp; List1.AddItem "Item #4"
End Sub
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Duplicate".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; CheckForDupes
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>CheckForDupes</b>. Add the following code to this function:<pre><code>Sub CheckForDupes()
 &nbsp;&nbsp; Dim Ret As Long
 &nbsp;&nbsp; Dim A As String
 &nbsp;&nbsp; A = Text1.TEXT
 &nbsp;&nbsp; Ret = SendMessageFind(List1.hwnd, LB_FINDSTRING, 0, (A))
 &nbsp;&nbsp; If Ret = LB_ERR Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem Text1.TEXT
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.ListIndex = Ret
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Duplicate entry - cannot add to List Box", 16, "Error"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. The <b>List Box</b> control has five items in it. Type a new entry in the <b>Text Box</b> control. Click the Duplicate command button. The program searches the <b>List Box</b> control for the entry you typed in the <b>Text Box </b>control. If the entry was not found, the program adds it to the <b>List Box</b> control. Alternatively, if the entry already exists in the <b>List Box</b> control, a message box is displayed informing you of this fact.</p>
<h2>Additional References</h2>
<p>
<a href="msdn_listbox.htm">"List Box Controls."</a> (MSDN Library, Technical Articles)</p>
<p>
"SendMessage." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
<a href="msdn_msdn68.htm">"Tip 68: Removing Duplicate Items from List Box Controls."</a></p>
</BODY>
</HTML>

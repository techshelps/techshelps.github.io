<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 47: Changing the Default MS-DOS Icon</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn47"></a></sup>Tip 47: Changing the Default MS-DOS Icon</h1>
<p>
Created: April 5, 1995</p>
<h2>Abstract</h2>
<p>
When you execute an MS-DOS® program from within a Visual Basic® application, your MS-DOS program uses the default MS-DOS icon. This article explains how, using some functions from Windows®, you can change this default icon to a different icon of your choice.</p>
<h2>Substituting One Icon for Another</h2>
<p>
The key to changing the default MS-DOS® icon to one of your choosing is to use the Windows® <b>ExtractIcon</b> function. The <b>Declare</b> statement for the <b>ExtractIcon</b> function is:</p>
<pre><code>Declare Function ExtractIcon Lib "Shell" (ByVal hInst%, ByVal lpExeName$, ByVal
 &nbsp;&nbsp; hIcon%) As Integer
</code></pre>
<p>
Note that this statement must be typed as a single line of code.</p>
<p>
The <b>ExtractIcon</b> function requires three arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=19%><i>hInst</i></td>
<td width=81%>The program's instance handle.</td>
</tr>
<tr valign=top>
<td width=19%><i>lpszExeName</i></td>
<td width=81%>The name of the program that contains the icon you want to extract.</td>
</tr>
<tr valign=top>
<td width=19%><i>iIcon</i></td>
<td width=81%>The index number associated with the icon you want to retrieve. If this value is -1, the total number of icons in the file will be returned.</td>
</tr>
</table><br>
<p>
To extract an icon from a program's executable file (.EXE) or from a dynamic-link library (.DLL) file, you need to know the application's instance handle and the index number of the specific icon you want to retrieve from the file. Calling the <b>ExtractIcon</b> function returns the handle of the icon.</p>
<p>
The next step is to use the <b>SetClassWord</b> function to retrieve the handle of the default icon used by the specified window. After the Shell method has executed the TEST.BAT file (in our demonstration program below), we use the <b>SetClassWord</b> function to actually change the default icon to another icon.</p>
<p>
You should note that we are changing the icon for the MS-DOS window to another icon, and that this new icon will be used by all other applications within this same window class (DOS). This is why, in the demonstration program below, we take the final step of deleting the new MS-DOS icon just before the program is terminated.</p>
<h2>Example Program</h2>
<p>
The following program shows how the default MS-DOS icon can be changed to a different icon from within a Visual Basic application.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each statement must be typed as a single line of text):<pre><code>Const SWP_NOSIZE = 1
Const SWP_NOMOVE = 2
Const SWP_NOACTIVATE = &amp;H10
Const SWP_SHOWWINDOW = &amp;H40
Const SWP_HIDEWINDOW = &amp;H80
Const SWP_FLAGS = SWP_NOMOVE Or SWP_NOSIZE Or SWP_NOACTIVATE
Const SWP_SHOW = SWP_SHOWWINDOW Or SWP_FLAGS
Const SWP_HIDE = SWP_HIDEWINDOW Or SWP_FLAGS
Const HWND_BOTTOM = 1
Const GCW_HICON = (-14)
Const GCW_HMODULE = (-16)

Declare Function GetModuleUsage Lib "Kernel" (ByVal hWnd%) As Integer

Declare Function ExtractIcon Lib "Shell" (ByVal hInst%, ByVal lpExeName$,
 &nbsp; ByVal hIcon%) As Integer

Declare Function DestroyIcon Lib "User" (ByVal hIcon%) As Integer

Declare Function FindWindow Lib "User" (ByVal lpClassName As Any, ByVal 
 &nbsp; lpCaption As Any) As Integer

Declare Function SetWindowPos Lib "User" (ByVal h%, ByVal hb%, ByVal X%, ByVal 
 &nbsp; y%, ByVal cx%, ByVal cy%, ByVal F%) As Integer

Declare Function GetClassWord Lib "User" (ByVal hWnd%, ByVal nIndex%) As Integer

Declare Function SetClassWord Lib "User" (ByVal hWnd%, ByVal nIndex%, ByVal 
 &nbsp; wNewWord%) As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  Dim DosFile As String, IconFile As String
  DosFile = "C:\TEST.PIF"
  IconFile = "C:\VB\ICONS\ARROWS\ARW01RT.ICO"
  Call LaunchPif(DosFile, IconFile)
End Sub
</code></pre>
</li>
<li>
Create a new subroutine procedure called <b>LaunchPif</b>. Add the following code to this procedure:<pre><code>Sub LaunchPif(PifFile As String, IconName As String)
  Dim Res As Integer&nbsp;&nbsp;&nbsp;&nbsp; 
  Dim MyInst As Integer&nbsp; 
  Dim PifIcon As Integer 
  Dim OldIcon As Integer 
  Dim PifhWnd As Integer 
  Dim PifInst As Integer
 &nbsp;&nbsp; 
  PifInst = Shell(PifFile, 2)
  MyInst = GetClassWord((Form1.hWnd), GCW_HMODULE)
  If Dir$(IconName) &lt;&gt; "" Then
 &nbsp;&nbsp;&nbsp;&nbsp; IconName = IconName &amp; Chr$(0)
 &nbsp;&nbsp;&nbsp;&nbsp; PifIcon = ExtractIcon(MyInst, IconName, 0)
  Else
 &nbsp;&nbsp;&nbsp;&nbsp; PifIcon = 0
  End If
  If GetModuleUsage(PifInst) &lt;&gt; 0 And PifIcon &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; PifhWnd = FindWindow(0&amp;, "TEST")
 &nbsp;&nbsp;&nbsp;&nbsp; OldIcon = SetClassWord(PifhWnd, GCW_HICON, PifIcon)
 &nbsp;&nbsp;&nbsp;&nbsp; Res = SetWindowPos(PifhWnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_HIDE)
 &nbsp;&nbsp;&nbsp;&nbsp; Res = SetWindowPos(PifhWnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_SHOW)
  End If
  Do While GetModuleUsage(PifInst) &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp; DoEvents
  Loop

  If PifIcon &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; Res = SetClassWord(PifhWnd, GCW_HICON, OldIcon)
 &nbsp;&nbsp;&nbsp;&nbsp; Res = DestroyIcon(PifIcon)
  End If
End Sub
</code></pre>
</li>
<li>
Using Notepad, create a DOS batch file called TEST.BAT in the root directory of drive C. Type the "dir" command as the text for this batch file.<br><br></li>
<li>
Create a new .PIF file in the root directory of drive C. Set the program filename to TEST.BAT. Click on the windowed and background options to run TEST.BAT as a windowed, background task.<br><br></li>
<li>
Save the project as DOSBOX.MAK. Select Make EXE File from Visual Basic's File menu to create an executable program file called C:\DOSMAK.EXE.<br><br></li>
<li>
In Program Manager, add the DOSBOX.EXE program to an existing program group or create a new program group. In the properties window, type the program's filename as "C:\DOSBOX.EXE" and click on the Run Minimized option.</li>
</ol>
<p>
From Program Manager, execute the DOSBOX.EXE program file. You will see the TEST icon temporarily displayed on the desktop. The TEST icon has been modified to show the new arrow icon instead of the regular MS-DOS icon used by default. Next, the program will display its own icon on the desktop. Click the DOSBOX icon and select Close from its Control menu to terminate the program.</p>
</BODY>
</HTML>

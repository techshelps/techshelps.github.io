<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 103: Preventing the CTRL+TAB and CTRL+F6 Key Combinations from Activating Child Windows</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn103"></a></sup>Tip 103: Preventing the CTRL+TAB and CTRL+F6 Key Combinations from Activating Child Windows</h1>
<p>
June 5, 1995</p>
<h2>Abstract</h2>
<p>
A multiple-document interface (MDI) window can contain multiple child windows. A user can switch between child windows by pressing the ctrl+tab or ctrl+f6 key combinations. This article explains how you can prevent the user from using these keys to switch to another child window.</p>
<h2>Using Message Blaster to Disable Keystrokes</h2>
<p>
Many Microsoft® Windows®-based applications use multiple-document interface (MDI) windows to display several child windows to the user. For instance, Word for Windows lets you work with several different documents at the same time. Each text file is displayed in its own child window.</p>
<p>
When users want to switch from one child window to another, they press either ctrl+tab or ctrl+F6. The next window in the list is then brought to the top of the window list (that is, it becomes the currently active window).</p>
<p>
In a Visual Basic® application, you can disable this window-switching by intercepting the messages sent to Windows. The WM_SYSCOMMAND message triggers the event that switches between child windows. The <b>Message</b> <b>Blaster</b> custom control can be used to process this WM_SYSCOMMAND message in your Visual Basic program. You can retrieve <b>Message</b> <b>Blaster</b> from the Microsoft Development Library. For information on the <b>Message</b> <b>Blaster</b> custom control, see "Additional References" at the end of this article. </p>
<p>
The general idea, however, is to capture the WM_SYSCOMMAND that is sent to Windows when the ctrl+f6 or ctrl+tab combination is pressed. To do this, you must register the <b>Message</b> <b>Blaster</b> control to the target control—in this case, the first child window (Form1). To prevent a user from activating other child windows, execute the following statement:</p>
<pre><code>MsgBlaster1=MsgPassage(0)
</code></pre>
<p>
After you have disabled a child window in this manner, the user will not be able to minimize or maximize the target window. In addition, the resize and move options are also disabled.</p>
<h2>Example Program</h2>
<p>
This program shows how to disable the ctrl+f6 and ctrl+tab key combinations so that the user cannot move to the next MDI child window. Run the example program by pressing F5. The program displays two child windows (Form1 and Form2) within an MDI document window. Normally, you can press the ctrl+tab or ctrl+F6 keys to switch between the child windows. The <b>Message</b> <b>Blaster</b> control has been used to disable these two key combinations if you try to use them in Form1. Click Form2 to bring that child window to the top. Unlike Form 1, the Form 2 child window will process the ctrl+tab and ctrl+f6 key combinations.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
From the Visual Basic Insert menu, select MDI Form. MDIForm1 is created by default.<br><br></li>
<li>
Set Form1's <b>MDIChild</b> property to True.<br><br></li>
<li>
From the Visual Basic Insert menu, select Form. Form2 is created by default. <br><br></li>
<li>
Set the Form 2 <b>MDIChild</b> property to True.<br><br></li>
<li>
From the Visual Basic Tools menu, select Custom Controls. Add a <b>Message</b> <b>Blaster</b> control to Form1. MsgBlaster1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1:<pre><code>Option Explicit
Const WM_SYSCOMMAND = &amp;H112
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; MsgBlaster1.hWndTarget = Form1.hWnd
 &nbsp;&nbsp; MsgBlaster1.MsgList(0) = WM_SYSCOMMAND
End Sub
</code></pre>
</li>
<li>
Add the following code to the MsgBlaster1_Message event for Form1 (note that the first two lines below must be typed as a single line of code):<pre><code>Private Sub MsgBlaster1_Message(MsgVal As Integer, wParam As Integer,
 &nbsp; lParam As Long, ReturnVal As Long)
 &nbsp;&nbsp; MsgBlaster1.MsgPassage(0) = 0
End Sub
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for MDIForm1:<pre><code>Private Sub MDIForm_Load()
 &nbsp;&nbsp; Form1.Show
 &nbsp;&nbsp; Form2.Show
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
"The Elements of MDI." (MSDN Library Archive, Books and Periodicals, "Programming Windows 3.1" by Charles Petzold, PART 5 Data Exchange and Links, Chapter 18 The Multiple-Document Interface [MDI])</p>
<p>
Knowledge Base Q110104. "Using MSGBLAST.VBX Control to Process Windows Messages."</p>
</BODY>
</HTML>

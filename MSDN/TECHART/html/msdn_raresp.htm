<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Remote Automation Enigmas: When, Why, and How</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_raresp"></a></sup>The Remote Automation Enigmas: When, Why, and How</h1>
<p>
Ken Bergmann<br>
Microsoft Developer Network Technology Group</p>
<p>
November 15, 1995<br>
<br>
Revised: July 1996 by Mark Gendron (notes about DCOM and a clarification of the definition of three-tiered architecture)</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4577">
</OBJECT><a href="javascript:sample1.Click()">Click to view or copy the files for the REPGEN sample application.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4579">
</OBJECT><a href="javascript:sample2.Click()">Click to view or copy the files for the REPGNTST sample application.</a></p>
<h2>Abstract</h2>
<p>
This technical article illuminates the details of the Remote Automation architecture as it exists today. It also discusses the different issues involved in the construction or deployment of Remote Automation solutions. This article assumes a solid knowledge of the Microsoft® Visual Basic® language, and a firm understanding of the OLE Automation model and usage.</p>
<h2>Remote Automation: Up Close and Personal</h2>
<p>
In the last few months, I have noticed a phenomenon. And I don't mean the World Wide Web. I am talking about the inundation of client/server developers with a lot of hype about three-tiered architectures and distributed processing. At the heart of this blizzard of information is a new buzzword: Remote Automation. At developer conferences, on the Net, in press articles, the mantra is: "Remote Automation will help you. Use Remote Automation in your system and distribute the load. Remote Automation is your friend."</p>
<p>
Take a break, folks. Remote Automation won't work for every system; it will only help in a very small percentage of situations. The trick is understanding when it will help, and then milking it for all it's worth.</p>
<p>
This article covers three main topics:
<ul type=disc>
<li>
The first section (<a href="#detailsraresp">"The Details of Remote Automation"</a>) is for those who have used OLE servers before and who have some understanding of Remote Automation, but who need the details of how to turn their OLE server into a Remote Automation server. <br><br></li>
<li>
The second section (<a href="#buildraresp">"How to Build a Remote Automation Server"</a>) moves through an example of a Remote Automation server that allows clients to print Microsoft® Access reports from a remote database. The samples in this section are designed to illustrate several key Remote Automation concepts.<br><br></li>
<li>
The third section (<a href="#perspectraresp">"Remote Automation in Perspective"</a>) outlines some of the more abstract concepts of developing Remote Automation solutions. These concepts should be helpful for anyone wanting to understand the differences among the variety of Remote Automation architectures.</li>
</ul>
<h2><a name="detailsraresp"></a>The Details of Remote Automation</h2>
<p>
Here are some of the specifics about the components and what they do for each part of the system.</p>
<h3>Remote Automation vs DCOM </h3>
<p>
Remote Automation is the model of choice for 16-bit platforms or for 32-bit platforms that do not implement the Distributed Component Object Model (DCOM) protocol. Microsoft Windows® 95 is an example of a 32-bit platform that does not implement DCOM. Remote Automation is also the "migration mechanism" of choice from platforms (either 16-bit or 32-bit) that do not support DCOM, to those that do support DCOM. </p>
<p>
DCOM is "an application-level protocol for object-oriented remote procedure calls useful for distributed, component-based systems of all types." A working paper that describes DCOM in greater detail may be found at http://www.microsoft.com/oledev/olecom/dcomspec.txt. </p>
<h3>Server Components</h3>
<ul type=disc>
<li>
<i>RACMGR32.EXE (Remote Automation Connection Manager for 32-bit operating systems)</i>. This application is run to set up an OLE server to accept Remote Automation requests. This application allows the user to specify which network protocol to use, which security contexts are allowed, and other information for the Automation. Information maintained in this application is stored in the system registry.<br><br></li>
<li>
<i>RACMGR16.EXE (Remote Automation Connection Manager for 16-bit operating systems)</i>. This application serves the same purpose as RACMGR32.EXE, except that it runs on 16-bit operating systems.<br><br></li>
<li>
<i>AUTMGR32.EXE (Automation Manager for 32-bit operating systems)</i>. This application uses the settings from the registry, which are configured above, to proctor Remote Automation requests from the network through the automation proxy to the appropriate Remote Automation servers. This application must be running for a computer to accept Remote Automation requests.<br><br></li>
<li>
<i>AUTPRX32.DLL (Remote Automation proxy for 32-bit applications)</i>. The Automation Manager uses this dynamic-link library (DLL) to act as a proxy with a local automation client. This proxy relays automation requests to the Automation Manager over the network and from the network to the local automation client.<br><br></li>
<li>
AUTPRX16.DLL <i>(Remote Automation proxy for 16-bit applications on 32-bit operating systems)</i>. This proxy performs the same as AUTPRX32.DLL, but serves 16-bit applications.<br><br></li>
<li>
AUTPRX.DLL <i>(Remote Automation proxy for 16-bit applications on 16-bit operating systems)</i>. This proxy performs the same as AUTPRX16.DLL, except that it runs on 16-bit operating systems.</li>
</ul>
<p>
Figure 1 shows where the pieces go in your system.</p>
<p>
<img src="raresp_1.gif" border=0></p>
<p class=label>
<b>Figure 1. How the components fit into the system</b></p>
<p>
Here are the system requirements for Remote Automation today:
<ul type=disc>
<li>
A 32-bit operating system for a server platform—Microsoft Windows NT™ or Windows® 95<br><br></li>
<li>
A Windows version 3.1 or later client machine<br><br></li>
<li>
Visual Basic® (16-bit) as a minimum development platform for the client executable<br><br></li>
<li>
Visual Basic (32-bit) Enterprise Edition as a minimum development environment for the server executable</li>
</ul>
<h3>How to Set Up the Remote Automation Components</h3>
<p>
As should be apparent from Figure 1, you need to have the Remote Automation proxy running on the client machine and the Remote Automation Manager running on the server machine.</p>
<p>
Following are the steps to get an existing system with both sets of source code (client and server) up and running remotely. First, the steps to create a client installation package:
<ol>
<li>
Open the server's project file in the Design Environment. Click the Tools/Options menu item. Select the Project tab. Ensure that OLE server is checked in the StartMode frame. Click OK.<br><br></li>
<li>
Click the File/Make EXE menu item. Click the Options button. Ensure that the Remote Server Support Files option is checked. Click OK. Click OK again to build the executable.<br><br></li>
<li>
If you already have an executable for the client, go to the next step; if not, build this executable now.<br><br></li>
<li>
Open the Visual Basic 4.0 Setup Wizard. Enter the path and file name for the project file for the client source code. Choose any options you want here. Click the Next button. If you chose to build a new executable, this happens now. Continue with the next step when the Setup Wizard is at Step 4.<br><br></li>
<li>
The Setup Wizard should be at Step 4. If your client application uses any local automation servers, these should be listed in the list box. Click the Add OLE Servers button.<br><br></li>
<li>
You should be at a file navigation dialog box. Change the Files of Type combo box to display Remote OLE Servers (*.vbr). There should be a .VBR file in the same directory as the server executable. Select this file and click OK.<br><br></li>
<li>
You should be at a Remote OLE Server Details dialog box. Enter the name of the server machine in the Network Address text box. Select your primary network protocol from the Network Protocol combo box. Select the authentication level you want from the Authentication combo box. Click OK.<br><br></li>
<li>
Continue through the Setup Wizard until you reach Step 6. Choose Install in Application Directory in the Deployment Model frame. Ensure that the check box for Remote Automation support files is <i>cleared </i>(not checked). Click the Next button.<br><br></li>
<li>
Go ahead and finish the Setup Wizard. When done, you will have a complete client installation package. Run the SETUP.EXE that was created to install the client software on a client machine.</li>
</ol>
<p>
To create an installation package for the server executable:
<ol>
<li>
Open the Visual Basic 4.0 Setup Wizard. Enter the path and file name for the project file for the server source code. Select any options you want here. Click the Next button. If you chose to build a new executable, now is the time to do so. Continue with the next step when the Setup Wizard is at Step 6.<br><br></li>
<li>
When the Setup Wizard is at Step 6, select "Install as an OLE Automation shared component" in the Deployment Model frame. Ensure that the box for Remote Automation support files is checked. Click the Next button.<br><br></li>
<li>
Go ahead and finish the Setup Wizard. When done, you will have a complete server installation package. Run the SETUP.EXE that was created to install the server software on a server machine.</li>
</ol>
<p>
At this point, you should have installation packages for both your client and your server. Install the software on the respective machines. The server installation should create a Remote Automation Management Folder or Group. The two icons created in this folder or group can be used to set up and administer all of the Remote Automation services for the server machine.</p>
<p>
Run the Automation Manager application. This is the component to which the clients will connect. It will pass on client requests to the OLE servers that are local to it. Now install the client software on a client machine. During installation, information about the remote server is inserted into the registry of the client machine.</p>
<h3>Peripheral Issues</h3>
<p>
These are the basics, but there are some other issues involved. If you want the user at a client machine to have control of the server name or network transport that is used to connect to the server machine, you will also need to install RACMGR32.EXE to the client. Setup Wizard does not currently do this for you. For an unattended system, there must be a facility to ensure that the Automation Manager is started when the system reboots. For situations where the network address of the server machine changes, you will need to provide update mechanisms for the clients to run on their local machines.</p>
<p>
These issues bring up the subject of CLIREG32.EXE, a handy tool included by the Setup Wizard while creating a setup package for client installation. Its purpose is to modify the registry of a client machine to include the necessary entries for the client to perform Remote Automation against the server. This utility accepts the following parameters:
<ul type=disc>
<li>
&lt;VBR File&gt; = the name of the remote server's .VBR file. This file is included with the installation package. It contains the information to register the server's .TLB file, which is also included.<br><br></li>
<li>
-s = Specifies the network address (server name) for the server machine.<br><br></li>
<li>
-p = Specifies the network protocol used to communicate with the server machine.<br><br></li>
<li>
-a = Specifies the authentication level used by the server machine.<br><br></li>
<li>
-t = Specifies the type library file.<br><br></li>
<li>
-u = Installs the registry entries from the .VBR file.<br><br></li>
<li>
-q = Specifies quiet mode (runs with no dialog boxes).<br><br></li>
<li>
-l = Logs any error information to the CLIREG.LOG file.<br><br></li>
<li>
-nologo = Specifies not to display any copyright information.</li>
</ul>
<p>
This is essentially the same information that can be viewed and modified using RACMGR32.EXE. The difference is that RACMGR32.EXE requires the entries for the type library to already exist in the registry, whereas CLIREG32.EXE will install the entries if they don't exist. Using the application's command-line interface, it would be very easy to create a batch file to call this application and handle the registration and configuration in one step. This would be ideal for upgrading clients when a server name or OLE server type library changes.</p>
<h2><a name="buildraresp"></a>How to Build a Remote Automation Server</h2>
<p>
Building a Remote Automation server is really not much different from building any other automation server—or so it appears at first. Indeed, implementing Remote Automation servers is no different from implementing any other automation server.</p>
<p>
However, the design of Remote Automation servers presents many issues that can directly affect the architecture of a Remote Automation server. Many of these issues are not nearly as critical to the design of local automation servers because the cost involved in moving data locally is so much less than moving it remotely. With that in mind, here are some things to remember throughout this section. To be able to talk about how to build a Remote Automation server, I included the REPGEN and REPGNTST samples so that I can point out some important considerations that went into the server design. This server is a learning tool, and certainly not intended as a real product. But for the sample to be effective, it needs to serve a purpose and show some real functionality. I use this example to show the basics of building an automation server to help you focus on the real issues and not get bogged down in the details of the class design.</p>
<h3>Designing the Server Interface</h3>
<p>
The samples have both server (RepGen) and client (RepGenTest) components. The server exposes, among other things, a list of reports from Microsoft Access for Windows 95. This server provides the basics of a network printing utility. It allows the user to print reports without having to have Microsoft Access loaded on the user's machine. This is what my class definition looks like:</p>
<pre><code>Private AccessApp&nbsp;&nbsp; As Access.Application
Private sDBName&nbsp;&nbsp;&nbsp;&nbsp; As String
Private sCurrentRep As String
Public fPhaseTwo&nbsp;&nbsp;&nbsp; As Boolean

Public Property Get DBName() As String
Public Property Let DBName(ByVal sVal As String)

Public Function GetReport(ByVal sRepName As String) As Object
Public Function InitializeAccess(ByVal sDBName As String) As Boolean
Public Function ReportList() As Variant
Public Sub PrintReport(Optional fAsync As Boolean)
Private Sub ReportPrint()
Public Sub TerminateAccess()
</code></pre>
<p>
Notice that I don't expose the application object and that I have limited the scope of all variables as much as possible. In the case of the <i>fPhaseTwo</i> variable, I don't need property procedures because there isn't much to it and I wanted to minimize this code as much as possible. Remote servers should always be written as tightly as possible.</p>
<h3>Object References</h3>
<p>
I always try to give users of my server as much power as possible without slowing down the access mechanisms, so I am just providing the client with a reference to a report object. Essentially, once users have this reference they can do whatever they want with it. Note that this isn't always the best idea; if it weren't making a point for me, I would probably remove the object reference on the <b>GetReport</b> routine. The following lines of code from the function show why:</p>
<pre><code>sCurrentRep = sRepName
AccessApp.DoCmd.OpenReport sCurrentRep, acPreview
Set GetReport = AccessApp.Reports(sCurrentRep)
</code></pre>
<p>
There are two reasons I wouldn't usually return an object reference like this. First, the Report object I am returning is a user-interface construct (window). This generally isn't a good idea because you can't guarantee the life of such a window. Specifically, in this case, I can't be sure what the users are going to do to it; they could easily freeze the interface on the remote machine.</p>
<p>
Second, the reference returned from the function will require a cross-process call every time the user accesses the object. Cross-process calls are very expensive for an application, especially when the processes are on two different machines.</p>
<h3><a name="notifyraresp"></a>Notifications Between the Client and the Server</h3>
<p>
For those who would like to understand what callbacks and asynchronous processes look like in code, the <b>PrintReport</b> routine shows one mechanism used to disjoint processes:</p>
<pre><code>Public Sub PrintReport(Optional fAsync As Boolean)
If IsMissing(fAsync) Then
 &nbsp;&nbsp; ReportPrint
Else
 &nbsp;&nbsp; If fAsync Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fPhaseTwo = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmMain.Enabled = True
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportPrint
 &nbsp;&nbsp; End If
End If
End SubEnd If
</code></pre>
<p>
In this example, I didn't use a standard callback routine. Instead I implemented a two-phased commit. The point is this: Don't always assume that standard implementations will provide the most efficient support for the features in your system. If you don't need the overhead of implementing full callback routines, don't use them. In this example, I wanted the user to have the choice of printing reports either in real time or asynchronously. A two-phased commit allows me to provide this with almost no code duplication. Here is what the synchronous process flow would look like:</p>
<p>
<img src="raresp_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Synchronous (real-time) process flow</b></p>
<p>
Here is what the asynchronous process flow would look like:</p>
<p>
<img src="raresp_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Asynchronous process flow</b></p>
<p>
You can see that including the flag (fAsync) makes it possible for the client to request a report to be printed asynchronously. The client can have the report printed in real time simply by omitting the flag. Of course, I could just as easily have reversed these conditions and required a flag for printing synchronously and no flag for printing asynchronously; it would depend on what I expected the normal usage of my server to be.</p>
<p>
The other important point to glean from this concerns the implementation of a local callback routine. Many developers consider callbacks to be useful only in distributed applications. As Figure 3 shows, local callback routines can be very effective in delegating the normal processes that exist in a client/server system. For more information about callback routines and process linkages, see the next section, "Remote Automation in Perspective."</p>
<h2><a name="perspectraresp"></a>Remote Automation in Perspective</h2>
<p>
The object of this section is to understand, at a fairly high level, the decisions that go into particular implementations of Remote Automation servers. It also attempts to tie in the benefits or shortcomings of Remote Automation with the issues faced in online transaction processing (OLTP) client/server development today.</p>
<h3>The Simple Case</h3>
<p>
The most basic use for Remote Automation is fairly trivial. A Remote Automation server is instantiated on a machine by a non-local client. The non-local client gives the server information, which it uses to do some form of processing. Once the processing is completed, the server returns control to the non-local client. The server is then released by the non-local client. Here's what this looks like:</p>
<p>
<img src="raresp_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Simple use of Remote Automation</b></p>
<p>
Here are some cases in which you might use this:
<ul type=disc>
<li>
Performing intense calculations on data that requires lookups. For example, computing taxes, risk analysis of loans, stellar cartography, and the like.<br><br></li>
<li>
Massaging data based on business rules. For example, building match codes, retrieving or creating universal ID numbers, performing full-text searches of the Library of Congress for words sounding like "Vogon."<br><br></li>
<li>
Encapsulating departmental processing routines into a common server. This might include&nbsp; routines for calculating the number of paydays for your department in the current quarter, figuring out the best time of day to ask your boss for a raise, or returning the full title of anyone in the company when given an e-mail name (assuming you weren't using Microsoft Mail or Exchange).<br><br></li>
<li>
Launching processes that require custom software. For example, printing reports using "My Favorite Report Writer for OS/2," retrieving data from the Internal Revenue Service, or writing a really cool app to e-mail the daily Dilbert cartoon from the Internet to 4,000 of your closest friends.</li>
</ul>
<p>
This list is not very extensive and most things on this list have no reason to be distributed. This kind of distribution just doesn't have much impact on the OLTP solutions prevalent today. </p>
<h3>Callback Routines and Asynchronous Processing</h3>
<p>
The next most complex use for Remote Automation is still pretty basic, but now the system can operate asynchronously. In this case, the client passes a callback reference to the server before requesting the server to commence processing. The server takes the data and the callback handle, and returns control to the client by exiting the routine. It then wakes up on its own, processes the data, and executes the callback method of the callback object on the nonlocal client.</p>
<p>
<img src="raresp_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Using Remote Automation for callback routines</b></p>
<p>
The classification list and the performance numbers for this approach are the same as above when the client is controlling the server. The difference is that the client machine may be active while the server is processing. This approach has some other subtleties that are not relevant at this level of discussion. Suffice it to say that this approach usually achieves only the smallest of performance gains and the implementation can be tricky at best.</p>
<h3>The Three-Tiered Model</h3>
<p>
The most common use for Remote Automation is for controlling a server that proctors services from a set of nonlocal servers to a set of nonlocal clients. In this case, there are at least three different machines that communicate, theoretically, via Remote Automation. </p>
<p>
Note that the term "three-tiered" is a <i>logical</i> concept and is not meant to describe a physical implementation. "Three-tiered" refers to a logical separation of User Services, Business Services, and Data Services in a system design. The actual architecture being illustrated here could best be described as a "three-tiered model implemented using three machines." The distinction may seem trivial, but it is not. A system may be implemented using three machines, and yet not represent a "three-tiered" model. In such a case, referring to the system as "three-tiered" would be misleading. </p>
<p>
Figure 6 shows the communication paths between the machines and their physical relation to each other.</p>
<p>
<img src="raresp_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Communication in the three-tiered model</b></p>
<p>
Some reasons to use this approach might be:
<ul type=disc>
<li>
You need to obtain a high level of abstraction between your front end and your data. Usually this means you are pulling data from more than one source, such as CD-ROMs, or local and remote databases. If you just want another layer between your Microsoft SQL Server and your Visual Basic code, don't use this method.<br><br></li>
<li>
You need a fire wall between your data network and your applications network. This usually occurs when you have the database on a server on one network and an application running on another network. The middleware (server) will sit on the fence, and both networks fall within its purview. Applications on the second network have no privileges into the first network; they can only manipulate the server, which can in turn manipulate the data on the first network.<br><br></li>
<li>
You have self-contained processes, such as batch report printers or data processors, that can be run in a scaled environment. These processes usually accept either limited startup information and only process predefined sets of data, or can be designed to operate on a job-by-job basis. The information for a job is sent to a proctoring server, which hands out the job to a "grunt boy" (also known as a processor). The client can then monitor the job through the server. The server can be designed to spawn "grunt boys" as required to handle the current load of jobs.<br><br></li>
<li>
You have several steps of data processing that must be coordinated but cannot tie up an end user's machine. By using this type of proctor to facilitate the processing, you can free the end user's machine, periodically interrupting it as the job progresses. This type of process can be differentiated from the previous case in that the previous case required no callbacks or knowledge of the client or the processors to perform its tasks.</li>
</ul>
<h2>Summary</h2>
<p>
So now you have had a look at the three main types of Remote Automation. If you understand them, it should not be hard to choose the right implementation for your system. But remember the discussion about implementing callback routines (<a href="#notifyraresp">"Notifications Between the Client and the Server"</a>): The best-case solution might not follow standard rules of implementation. Instead, it might require innovative use of common technologies. </p>
</BODY>
</HTML>

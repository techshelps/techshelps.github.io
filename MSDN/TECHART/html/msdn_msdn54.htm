<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 54: Preventing a Window Form from Being Resized</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn54"></a></sup>Tip 54: Preventing a Window Form from Being Resized</h1>
<p>
Created: April 10, 1995</p>
<h2>Abstract</h2>
<p>
In many Windows®-based applications, the user can resize a window by dragging one of the window's borders to a new position. This article will tell you how to prevent a form from being resized. You can also modify the example program so that it will allow the user to resize the form only to a certain size.</p>
<h2>Using Get/SetWindowPlacement to Size a Form</h2>
<p>
In a Visual Basic® application, you can use the Windows® application programming interface (API) <b>GetWindowPlacement</b> and <b>SetWindowPlacement</b> functions to restrict a form's size. Each time Visual Basic loads a form or the form is resized by the user, the Resize event is triggered. By including code in the Resize event, you can prevent a form from being resized smaller, larger, or at all.</p>
<p>
The <b>GetWindowPlacement</b> function returns the specified window's current location, visibility status, and its minimized and maximized positions. The <b>SetWindowPlacement</b> function sets the specified window's current location, visibility status, and its minimized and maximized positions. Both functions use the same type structures and arguments.</p>
<p>
To declare these two functions within your program, include the following <b>Declare</b> statements in the Global Module or General Declarations section of your application's form (note that each <b>Declare</b> statement must be typed as one single line of text):</p>
<pre><code>Declare Sub GetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWnd
 &nbsp; As WINDOWPLACEMENT)

Declare Function SetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWndPl 
 &nbsp; As WINDOWPLACEMENT) As Integer
</code></pre>
<p>
The <b>GetWindowPlacement</b> or <b>SetWindowPlacement</b> function must be called with two arguments: The <i>hWnd</i> argument must contain the handle of the window that you want to retrieve information for; the <i>lpWndPl</i> argument is a <b>WINDOWPLACEMENT</b> structure that will hold the window's information.</p>
<p>
The <b>WINDOWPLACEMENT</b> structure uses the <b>RECT</b> and <b>POINTAPI</b> structures as well, and is defined as follows:</p>
<pre><code>Type WINDOWPLACEMENT&nbsp;&nbsp;&nbsp; '22 bytes
  Length As Integer
  Flags As Integer
  ShowCmd As Integer
  PtMinPosition As POINTAPI
  PtMaxPosition As POINTAPI
  RcNormalPosition As RECT
End Type
</code></pre>
<p>
The <b>RECT</b> structure, which describes the coordinates of a rectangle, is defined as follows:</p>
<pre><code>Type RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '8 bytes
  Left As Integer
  Top As Integer
  Right As Integer
  Bottom As Integer
End Type
</code></pre>
<p>
The values in the <b>RECT</b> structure represent the position of the window, in screen coordinates.</p>
<p>
And, finally, the <b>POINTAPI</b> structure is defined as follows:</p>
<pre><code>Type POINTAPI&nbsp;&nbsp; '4 bytes
  X As Integer
  Y As Integer
End Type
</code></pre>
<p>
The following table describes each field in the <b>WINDOWPLACEMENT</b> structure.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=20%>Length</td>
<td width=80%>An integer value that must be set to 22, the length of this structure.</td>
</tr>
<tr valign=top>
<td width=20%>Flags</td>
<td width=80%>An integer value containing either WPF_SETMINPOSITION (the <b>PtMinPosition</b> specifies the X,Y location of the window when minimized) or WPF_RESTORETOMAXIMIZED (the SW_<b>SHOWMINIMIZED</b> constant must be specified in the <b>ShowCmd</b> parameter; it indicates the window should be maximized the next time it is restored).</td>
</tr>
<tr valign=top>
<td width=20%>ShowCmd</td>
<td width=80%>An integer value that describes the visibility flags.</td>
</tr>
<tr valign=top>
<td width=20%>PtMinPosition</td>
<td width=80%>A <b>POINTAPI</b> structure containing the X,Y location of the window when it is minimized.</td>
</tr>
<tr valign=top>
<td width=20%>PtMaxPosition</td>
<td width=80%>A <b>POINTAPI</b> structure containing the X,Y location of the window when it is maximized.</td>
</tr>
<tr valign=top>
<td width=20%>RcNormalPosition</td>
<td width=80%>A <b>RECT</b> structure containing the position of the window when it is restored (set to its normal size).</td>
</tr>
</table><br>
<p>
After we call the <b>GetWindowPlacement</b> function, we can retrieve the window's current size and save these values in variables for later use in our application.</p>
<p>
Because we want to prevent the user from resizing a form, we insert code in the form's resize event. This code uses the <b>GetWindowPlacement</b> function to retrieve the form's current size. If the window's size is not the same as it was when our program was first executed, we call <b>SetWindowPlacement</b>, which sets the window's size back to its original coordinates. This function has the same arguments as the <b>GetWindowPlacement</b> function.</p>
<h2>Example Program</h2>
<p>
The example program below uses the <b>GetWindowPlacement</b> and <b>SetWindowPlacement</b> functions to prevent the form from being resized. You can optionally add code to allow the window to be resized only to a specific size, if desired.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the general declarations section of Form1:<pre><code>Dim lpRect As RECT
  Dim lpWnd As WINDOWPLACEMENT
  Dim nPoint As POINTAPI
  Dim lpRect2 As RECT
  Dim lpWnd2 As WINDOWPLACEMENT
  Dim nPoint2 As POINTAPI
  Dim lpWndPl As WINDOWPLACEMENT
  Dim X As Integer
  Dim FormWidth As Integer
  Dim FormHeight As Integer
  Dim FormWidth2 As Integer
  Dim FormHeight2 As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  'Get the form's current size and position.
  lpWnd.Length = 22&nbsp;&nbsp; 'set length of lpWnd first!
  
  Call GetWindowPlacement(Form1.hWnd, lpWnd)
  FormWidth = lpWnd.RcNormalPosition.Right - lpWnd.RcNormalPosition.Left
  FormHeight = lpWnd.RcNormalPosition.Bottom - lpWnd.RcNormalPosition.Top
End Sub
</code></pre>
</li>
<li>
Add the following code to the Form_Resize event for Form1:<pre><code>Sub Form_Resize()
  lpWnd2.Length = 22&nbsp;&nbsp; 'set length of lpWnd2 first!
  Call GetWindowPlacement(Form1.hWnd, lpWnd2)
  FormWidth2 = lpWnd2.RcNormalPosition.Right - lpWnd2.RcNormalPosition.Left
  FormHeight2 = lpWnd2.RcNormalPosition.Bottom - lpWnd2.RcNormalPosition.Top
  
  If FormWidth &lt;&gt; FormWidth2 Then
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo NoWidthChange
  End If
  If FormHeight &lt;&gt; FormHeight2 Then
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo NoHeightChange
  End If
 &nbsp;&nbsp; 
  Exit Sub
'Do not allow form's width or height to be changed. Reset to original values.

NoWidthChange:
  X = SetWindowPlacement(Form1.hWnd, lpWnd)
  Exit Sub
NoHeightChange:
  X = SetWindowPlacement(Form1.hWnd, lpWnd)
  
End Sub
</code></pre>
</li>
<li>
Add a new BAS module to the project. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statements and type structures to Module1.Bas (note that each <b>Declare</b> statement should be typed as a single line of text):<pre><code>Declare Sub GetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWnd
 &nbsp; As WINDOWPLACEMENT)

Declare Function SetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWndPl 
 &nbsp; As WINDOWPLACEMENT) As Integer

Type RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '8 bytes
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type

Type POINTAPI&nbsp;&nbsp; '4 bytes
 &nbsp;&nbsp; X As Integer
 &nbsp;&nbsp; Y As Integer
End Type

Type WINDOWPLACEMENT&nbsp;&nbsp;&nbsp; '22 bytes
 &nbsp;&nbsp; Length As Integer
 &nbsp;&nbsp; Flags As Integer
 &nbsp;&nbsp; ShowCmd As Integer
 &nbsp;&nbsp; PtMinPosition As POINTAPI
 &nbsp;&nbsp; PtMaxPosition As POINTAPI
 &nbsp;&nbsp; RcNormalPosition As RECT
End Type
</code></pre>
</li>
<li>
Run the program. Try to resize the form by clicking and dragging one of the form's borders. The form will immediately reset to its previous size.</li>
</ol>
</BODY>
</HTML>

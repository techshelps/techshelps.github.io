<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing Distributed Applications Using Microsoft SQL Server 6.5 Replication</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_sqlrepl"></a>Developing Distributed Applications Using Microsoft SQL Server 6.5 Replication</h1>
<p>
Thomas Casey<br>
Microsoft Corporation</p>
<p>
August 1997</p>
<h2>Introduction</h2>
<p>
The use of replication is becoming more prevalent in business applications. The need for data warehousing and improved Online Transaction Processing (OLTP) performance through the offloading of data for decision support to secondary servers is growing rapidly. Additionally, leveraging multiple SQL Servers improves performance, data availability, and local site autonomy through distributed processing.</p>
<p>
Microsoft SQL Server 6.5 replication provides high volume, continuous replication of data while maintaining transactional consistency. The scalability of this solution allows application developers and database administrators to deploy replication for a variety of application architectures.</p>
<p>
Several factors unique to database applications that use replication must be considered during the design phase of such projects. Several common replication scenarios are presented in this paper. While you can add replication to an existing database application, there is no substitute for incorporating the constraints and leveraging the power of replication in the initial design phases of a database project. Doing so improves the flexibility of the solution, reduces deployment time, and maximizes scalability.</p>
<p>
You can administer replication through SQL Enterprise Manager, an easy-to-use graphical interface. However, the system components of replication are also exposed through SQL-DMO (Distributed Management Objects) and system stored procedures. Developers of widely deployed applications often rely upon SQL scripts or DMO for administering and monitoring replication in a production environment. For these users, a more intimate knowledge of the replication architecture is often helpful. </p>
<p>
This paper provides an overview of the Microsoft SQL Server 6.5 replication architecture and covers many of the factors that contribute to a database and application design suitable for replication. It is intended to supplement the SQL Server 6.5 documentation by providing details about the structure and interaction of the system components used to implement replication. Additionally, it provides a starting point for application design and deployment considerations, including integrated security requirements and troubleshooting suggestions.</p>
<p>
While this paper applies to some aspects of the SQL Server 6.0 implementation of replication, it specifically targets SQL Server 6.5 replication.</p>
</BODY>
</HTML>

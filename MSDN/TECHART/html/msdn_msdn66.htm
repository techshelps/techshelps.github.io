<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 66: Disabling Task-Switching with the SetSysModalWindow Function</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn66"></a></sup>Tip 66: Disabling Task-Switching with the SetSysModalWindow Function</h1>
<p>
Created: April 24, 1995</p>
<h2>Abstract</h2>
<p>
When developing an application in Visual Basic®, you may need to perform a task that should not be interrupted. This article explains how to use the Windows® application programming interface (API) <b>SetSysModalWindow</b> and <b>LockInput</b> functions to disable task-switching.</p>
<h2>Preventing a User from Switching to Another Application</h2>
<p>
The Windows® application programming interface (API) <b>SetSysModalWindow</b> function can be used to prevent a user from switching to a different Windows-based application while your program is executing. The ALT+TAB, CTRL+ESC, ALT+F4, and ALT+ESC keystroke combinations will not bring up the Task Manager or any other application—these keystrokes will simply be ignored. For a discussion of the <b>SetSysModalWindow</b> function, see "Additional References" below.</p>
<p>
In addition, the <b>LockInput</b> function can be used to force all input to your Visual Basic® application only. No other application will receive any mouse or keyboard data. The <b>Declare</b> statement for the <b>LockInput</b> function is as follows (note that it must be typed as a single line of code):</p>
<pre><code>Declare Function LockInput Lib "User" (ByVal hReserved As Integer, ByVal 
 &nbsp; hwndInput As Integer, ByVal fLock As Integer) As Integer
</code></pre>
<p>
The <b>LockInput</b> function requires three arguments:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=15%><i>hReserved</i></td>
<td width=85%>An integer value that must be set to a value of zero.</td>
</tr>
<tr valign=top>
<td width=15%><i>hwndInput</i></td>
<td width=85%>An integer value containing the window's handle. This is the window that will receive all input.</td>
</tr>
<tr valign=top>
<td width=15%><i>fLock</i></td>
<td width=85%>An integer value set to TRUE (nonzero) to lock input or FALSE (zero) to unlock input.</td>
</tr>
</table><br>
<p>
When your program is terminated, you must use the <b>LockInput</b> function to restore input to other Windows-based programs. In addition, you must destroy the system modal window; otherwise the user will not be able to switch to any other Windows-based applications and will have to reboot the computer system.</p>
<h2>Example Program</h2>
<p>
The program below shows how you can prevent a user from switching to another Windows-based application while your program is executing.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Set the following properties for Form1:<pre><code>ClipControls = False
ControlBox = false
MaxButton = False
MinButton = False
</code></pre>
</li>
<li>
Add the following <b>Dim</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Declare Function GetActiveWindow Lib "User" () As Integer
Declare Function SetFocusAPI Lib "User" Alias "SetFocus" (ByVal Hwnd As Integer) 
 &nbsp; As Integer
Declare Function SetSysModalWindow Lib "User" (ByVal Hwnd As Integer) As Integer
Declare Function LockInput Lib "User" (ByVal hReserved As Integer, ByVal 
 &nbsp; hwndInput As Integer, ByVal fLock As Integer) As Integer
Dim TopHwnd As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()

  Dim X As Integer
 &nbsp;&nbsp; 
  Show
  DoEvents
  TopHwnd = GetActiveWindow()
 &nbsp;&nbsp; 
  X = SetFocusAPI(TopHwnd)
  X = SetSysModalWindow(TopHwnd)
  X = LockInput(0, TopHwnd, 1)
End Sub
</code></pre>
</li>
<li>
Add the following code to the Form_Unload event for Form1:<pre><code>Sub Form_Unload(Cancel As Integer)
  X = LockInput(0, TopHwnd, 0)
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Quit".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; X = LockInput(0, TopHwnd, 0)
 &nbsp;&nbsp; End
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q72674. "How to Create a System-Modal Program/Window in Visual Basic." (Development Library, Knowledge Base and Bug Lists)</p>
</BODY>
</HTML>

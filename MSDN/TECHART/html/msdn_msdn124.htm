<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 124: Determining Available Disk Drives in Visual Basic</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn124"></a></sup>Tip 124: Determining Available Disk Drives in Visual Basic</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Drive List Box</b> control in Microsoft® Visual Basic® reports the names of each drive connected to the computer system. This article explains another method you can use to determine which disk drives are available.</p>
<h2>Retrieving Disk Drives</h2>
<p>
The <b>Drive List Box</b> control provided in Microsoft® Visual Basic® displays a list of all available disk drives attached to the computer system. You can, however, retrieve this same information without using a <b>Drive List Box</b> control in your application.</p>
<p>
The Visual Basic <b>CurDir$</b> function identifies your current drive and directory. The syntax for the <b>CurDir$</b> function is:</p>
<pre><code>X$ = CurDir$
</code></pre>
<p>
or</p>
<pre><code>CurDir$ = "C:\TEMP"
</code></pre>
<p>
When the first statement above is executed, <b>CurDir$</b> retrieves the current path into the <i>X</i> string variable. The second statement above tells <b>CurDir$</b> to switch to the TEMP directory on drive C. If you attempt to change to a nonexistent drive or directory, the <b>CurDir$</b> function will generate an error condition.</p>
<p>
In the example program, you use a For-Next loop to cycle through all possible disk drives that may be installed in the computer system. Each time through the loop, you ask <b>CurDir$</b> to change to a new, higher disk drive letter. When the function reports that it cannot switch to the specified drive, you know that you have found the last available disk drive.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve all valid disk drives without using a <b>Drive List Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Text1.Text = ""
 &nbsp;&nbsp; For X = Asc("C") To Asc("Z")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c$ = CurDir$(Chr$(X) &amp; ":\")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Err Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err = 0&nbsp;&nbsp;&nbsp;&nbsp; 'no such drive
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = Text1.Text &amp; " " &amp; Chr$(X)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next X
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the command button. The <b>Text Box</b> control shows which disk drives are installed in the computer system.</p>
</BODY>
</HTML>

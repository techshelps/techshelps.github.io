<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Bars in Microsoft Access 97: Tips and Tricks</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_command"></a></sup>Command Bars in Microsoft Access 97: Tips and Tricks</h1>
<p>
Robert Flake<br>
Microsoft Corporation</p>
<p>
December 18, 1996</p>
<h2>Introduction</h2>
<p>
The following articles contain useful information about using the new command bars feature in Microsoft® Access 97. In previous versions of Microsoft Access, the only way to create and modify menu bars, toolbars, and shortcut menus was to use menu bar macros or the Customize Toolbar dialog box. In some cases, you had to use Windows® API calls to in order to make certain modifications to these elements of the user interface.</p>
<p>
In Microsoft Access 97, menu bars, drop-down menus, toolbars, and shortcut menus are all types of command bars. You can add and modify these command bars by using the Customize dialog box and the property sheets available by pointing to <b>Toolbars</b> on the <b>View</b> menu and then clicking <b>Customize</b>. You can also use the new command bar object model to create and modify command bars in Visual Basic®.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In order to program with command bars in Microsoft Access 97, you must first set a reference to the Microsoft Office object library. Click <b>References</b> on the <b>Tools</b> menu while in module Design view, and select the check box next to Microsoft Office 8.0 Object Library.</p>
<p>
Once you've set a reference to the Microsoft Office object library, you can view the Microsoft Office objects, properties, and methods in the Object Browser. The objects that you can use to program command bars include the <b>CommandBar</b>, <b>CommandBarControl</b>, <b>CommandBarButton</b>, <b>CommandBarComboBox</b>, and <b>CommandBarPopup</b> objects, and the <b>CommandBars</b> and <b>CommandBarControls</b> collections.</p>
<p>
These new features are described in the Microsoft Office 97 and Microsoft Access 97 Help topics. The following sections give useful tips and solutions to common command bar problems that may not be covered explicitly in the Help topics, or they point out especially useful techniques for working with command bars.</p>
<h2><a name="comvisualbasic"></a>Creating Custom Shortcut Menus in Visual Basic</h2>
<p>
The new command bars object model in Microsoft Office 97 lets you programmatically create and modify the various kinds of command bars: menu bars, toolbars, and pop-up menus. Pop-up menus appear in three ways: as menus that drop down from menu bars, as submenus that cascade off menu commands, and as shortcut menus. Shortcut menus (also called "right-click menus") are menus that appear on the screen when you right-click a particular area on the screen; for example, a blank area on a form or report, or a form control.</p>
<p>
In Microsoft Access 97, you can create a custom shortcut menu by using the Customize dialog box. For more information, see the section <a href="#dialogbox">"Creating Custom Shortcut Menus Using the Customize Dialog Box."</a> You can also create custom shortcut menus by using Visual Basic. To do this, you use the <i>Position</i> argument of the <b>Add</b> method of the CommandBars collection. To create a custom shortcut menu named OrdersPopup, you can use the following syntax:</p>
<pre><code>Dim mybar as CommandBar
Set mybar = CommandBars.Add(Name:="OrdersPopup", _
 &nbsp; Position:=msobarPopup)
</code></pre>
<p>
Once you create a custom shortcut menu, you can modify its properties by using Visual Basic. For an example of creating and modifying a custom shortcut menu, see <a href="#exampleshortcut">"Example: Creating a Custom Shortcut Menu."</a></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the <b>Add</b> method to create a custom shortcut menu, but you can't change an existing command bar of another type to a shortcut menu by using Visual Basic. The <b>Position</b> property for command bars has an <b>msoBarPopup</b> setting. However, this setting is read-only; it is used to determine whether an existing command bar is a pop-up menu. You can't set this property to change the type of a command bar to <b>msoBarPopup</b>.</p>
<p>
You can change the type of a command bar by using the Toolbar Properties dialog box in Microsoft Access (see the section <a href="#dialogbox">"Creating Custom Shortcut Menus Using the Customize Dialog Box"</a>). However, if you want to change an existing command bar to a shortcut menu in Visual Basic, you must use the <b>Delete</b> method to delete the existing command bar and the <b>Add</b> method to create the new shortcut menu. You can also copy an existing pop-up command bar and then modify it to include the controls you want. For information about copying a command bar, see the section <a href="#copyingbars">"Copying Command Bars."</a></p>
<h3><a name="exampleshortcut"></a>Example: Creating a Custom Shortcut Menu</h3>
<p>
This example creates a custom shortcut menu named OrdersPopup, and adds commands to this shortcut menu. The example also sets the <b>ShortcutMenuBar</b> property of the Orders form to the name of this custom shortcut menu. When you right-click in a blank area of the Orders form, Microsoft Access displays the shortcut menu. Note that the procedure uses the GetID function to determine the ID numbers for several built-in Microsoft Access commands. For information on this function, see <a href="#findingid">"Finding the ID Number for a Built-in Command."</a></p>
<pre><code>Sub CreateOrdersShortcut()
 &nbsp;&nbsp; Dim cmdBar as CommandBar
 &nbsp;&nbsp; Dim ctlNew as CommandBarButton
 &nbsp;&nbsp; Const conShortcutAlreadyCreated = 5
 &nbsp;&nbsp; On Error GoTo CreateOrdersShortcut_Err
 &nbsp;&nbsp; Set cmdBar = CommandBars.Add(Name:="OrdersPopUp", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Position:=msoBarPopup)
 &nbsp;&nbsp; ' Add the built-in controls Filter By Form, Apply Filter/Sort
 &nbsp;&nbsp; ' and Remove Filter/Sort. The GetID function finds the ID value
 &nbsp;&nbsp; ' for each of these built-in controls.
 &nbsp;&nbsp; With cmdbar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Controls.Add msoControlButton, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetID("Filter Context Menu", "Filter By Form")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Controls.Add msoControlButton, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetID("Records", "Apply Filter/Sort")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Controls.Add msoControlButton, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetID("Records", "Remove Filter/Sort")
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; ' Add a command button control that prints the current record.
 &nbsp;&nbsp; Set ctlnew = cmdbar.Controls.Add(msoControlButton)
 &nbsp;&nbsp; With ctlnew
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .BeginGroup = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Caption = "Print Current Record"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' The = and () aren't required for the OnAction property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' setting, but they can be used to distinguish functions
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' from macros.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OnAction = "=PrintRecord()"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Style = msoButtonCaption
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; ' Attach the new shortcut menu to the Orders form.
 &nbsp;&nbsp; DoCmd.OpenForm "Orders"
 &nbsp;&nbsp; Forms!Orders.ShortcutMenuBar = "OrdersPopup"
CreateOrdersShortcut_Bye:
 &nbsp;&nbsp; Exit Sub
CreateOrdersShortcut_Err:
 &nbsp;&nbsp; ' You can't create a command bar if a command bar of the same
 &nbsp;&nbsp; ' name already exists. This If clause checks for the error
 &nbsp;&nbsp; ' message that occurs if a command bar named "OrdersPopup"
 &nbsp;&nbsp; ' already exists and deletes this command bar. The procedure
 &nbsp;&nbsp; ' then resumes, and adds the new shortcut menu.
 &nbsp;&nbsp; If Err = conShortcutAlreadyCreated Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CommandBars("OrdersPopup").Delete
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Err.Description, vbOKOnly, "Error = " &amp; Err.Number
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume CreateOrdersShortcut_Bye
 &nbsp;&nbsp; End If
End Sub
Function PrintRecord ()
 &nbsp;&nbsp; ' This function runs from the command button control "Print
 &nbsp;&nbsp; ' Current Record" on the shortcut menu. It selects the current
 &nbsp;&nbsp; ' record in the Orders form and prints this record.
 &nbsp;&nbsp; RunCommand acCmdSelectRecord
 &nbsp;&nbsp; DoCmd.PrintOut acSelection
End Function
</code></pre>
<h2><a name="findingid"></a>Finding the ID Number for a Built-in Command</h2>
<p>
When you add a built-in control to a custom command bar in Visual Basic, you use the <i>Id</i> argument of the <b>Add</b> method of the <b>CommandBarControls</b> collection. For example, you may want to create a custom menu that has several built-in controls and several custom controls. You can determine the ID value to use with the <i>Id</i> argument by using the <b>Id</b> property for the control. The following function returns the ID for a built-in control. You pass the name of the control in the <i>strControlName</i> argument and the name of the command bar the control appears on in the <i>strBarName</i> argument. For example, you could determine the ID value for the <b>New Database…</b> command that appears on the <b>File</b> menu on the main Microsoft Access menu bar by calling the <b>GetID</b> function using the following arguments:</p>
<pre><code>Dim lngControlId as Long
lngcontrolID = GetID("File", "New Database...")
</code></pre>
<p>
In this example, the name of the command bar is "File". This particular command bar is a pop-up menu that appears when you click <b>File</b> on the main menu bar. You must pass the exact command bar name in the <i>strBarName</i> argument. Note also that you must pass the control name exactly as it appears on the command bar. In this example, this means that the <b>New Database…</b> command name must be passed with the trailing three periods.</p>
<p>
You can use the <b>GetID</b> function with the <b>Add</b> method of the <b>CommandBarControls</b> collection to add the specified control to a command bar. For an example, see the section <a href="#exampleshortcut">"Example: Creating a Custom Shortcut Menu."</a></p>
<pre><code>Function GetID(strBarName As String, strControlName As String) As Long
 &nbsp;&nbsp; Dim cbr As CommandBar, cbrctl As CommandBarControl
 &nbsp;&nbsp; On Error GoTo GetID_Err
 &nbsp;&nbsp; Set cbr = CommandBars(strBarName)
 &nbsp;&nbsp; Set cbrctl = cbr.Controls(strControlName)
 &nbsp;&nbsp; ' The ID value of the control is the setting of its
 &nbsp;&nbsp; ' Id property.
 &nbsp;&nbsp; GetID = cbrctl.Id
GetID_Bye:
 &nbsp;&nbsp; Exit Function
GetID_Err:
 &nbsp;&nbsp; MsgBox Err.Description, vbOKOnly, "Error = " &amp; Err.Number
 &nbsp;&nbsp; Resume GetId_Bye
End Function
</code></pre>
<p>
For example, if you enter the following in the Debug window:</p>
<pre><code>? GetID("Insert", "Module")
</code></pre>
<p>
The function returns 621, the ID number for the built-in <b>Module</b> command on the <b>Insert</b> menu.</p>
<p>
To add this command to a custom menu, you could use the following syntax:</p>
<pre><code>Set ctlnew = Controls.Add(msoControlButton, 621)
</code></pre>
<p>
Or you could use the <b>GetID</b> function directly in the code that adds the command:</p>
<pre><code>Set ctlnew = Controls.Add(msoControlButton, _
 &nbsp; GetID("Insert", "Module"))
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you use this function, you must know the complete and correct name for the command bar that contains the control whose ID value you want to find. This is the name you use for the <i>strBarName</i> argument passed to the function. The command bar name is not always the name you see in the user interface. For example, the name of the pop-up menu that appears when you click a command that has subcommands is not necessarily the name of the command. For example, when you click the <b>Filter</b> command on the <b>Records</b> menu, you see a submenu containing commands such as <b>Filter By Form</b> and <b>Filter By Selection</b>. The name of this pop-up submenu is <b>Filter Context Menu</b>, not <b>Filter</b>.</p>
<p>
To find the name of a command bar, use the <b>Name</b> property. For example, to find the name of the pop-up submenu mentioned in the previous paragraph, use the following syntax:</p>
<pre><code>CommandBars("Records").Controls("Filter").CommandBar.Name
</code></pre>
<p>
Microsoft Access supplies a number of built-in shortcut menus, each of which has a name. Although almost all built-in controls on these shortcut menus are also available on other menus, you may want to find the ID value for a built-in control on one of the shortcut menus. To see a function that when run lists all of the command bars in your application (including the shortcut menus) and their names, see <a href="#examplelisting">"Example: Listing the Names of Command Bars in Your Application."</a></p>
<h3><a name="examplelisting"></a>Example: Listing the Names of Command Bars in Your Application</h3>
<p>
This example lists the names of all the command bars in the <b>CommandBars</b> collection. Command bars can be one of three types, as defined by the <b>Type</b> property: toolbars (represented by the intrinsic constant <b>msoBarTypeNormal</b>), menu bars (<b>msoBarTypeMenuBar</b>), or pop-up menus, which include submenus and shortcut menus (<b>msoBarTypePopup</b>).</p>
<pre><code>Sub ListCommandBars()
 &nbsp;&nbsp; Dim cbr As CommandBar
 &nbsp;&nbsp; For Each cbr In CommandBars
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; listbar 1, cbr
 &nbsp;&nbsp; Next cbr
End Sub
Sub listbar(level As Integer, thisbar As CommandBar)
 &nbsp;&nbsp; Dim cbrctl As CommandBarControl
 &nbsp;&nbsp; Dim indent As Integer
 &nbsp;&nbsp; ' Indent the command bar depending on its level in
 &nbsp;&nbsp; ' the menu structure.
 &nbsp;&nbsp; For indent = 1 To level
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print "&nbsp;&nbsp; ";
 &nbsp;&nbsp; Next indent
 &nbsp;&nbsp; Select Case thisbar.Type
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarTypeMenuBar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print "Menu Bar: " &amp; thisbar.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarTypeNormal
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print "Toolbar: " &amp; thisbar.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarTypePopup
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print "Popup: " &amp; thisbar.Name
 &nbsp;&nbsp; End Select
 &nbsp;&nbsp; For Each cbrctl In thisbar.Controls
 &nbsp;&nbsp; ' If the control doesn't have a command bar associated
 &nbsp;&nbsp; ' with it, then don't print it.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If cbrctl.Type &lt;&gt; 1 And cbrctl.Type &lt;&gt; 2 _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And cbrctl.Type &lt;&gt; 4 And cbrctl.Type &lt;&gt; 16 _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And cbrctl.Type &lt;&gt; 18 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; listbar level + 1, cbrctl.CommandBar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next cbrctl
End Sub
</code></pre>
<h2><a name="dialogbox"></a>Creating Custom Shortcut Menus Using the Customize Dialog Box</h2>
<p>
With the new command bars feature in Microsoft Office 97, you can create and modify the various kinds of command bars: menu bars, toolbars, and pop-up menus. Pop-up menus appear in three ways: as menus that drop down from menu bars, as submenus that cascade off menu commands, and as shortcut menus. Shortcut menus (also called "right-click menus") are menus that appear when you right-click a particular area on the screen; for example, a blank area on a form or report, or a form control.</p>
<p>
In Microsoft Access 97, you can create a custom shortcut menu by using the Customize dialog box, available by pointing to <b>Toolbars</b> on the <b>View</b> menu and then clicking <b>Customize</b>. To create a custom shortcut menu, click the <b>New</b> button in the Customize dialog box and name your new shortcut menu. Set any toolbar properties you want, making sure to set the <b>Type</b> property to <b>Popup</b>. You'll see a message telling you that the menu will disappear from view. You can see the menu by selecting the Shortcut Menus check box in the Customize dialog box, and then clicking <b>Custom</b> on the menu bar that appears.</p>
<p>
You can add controls to this custom menu just as you can for toolbars and menu bars, and set the control properties using the Control Properties dialog box. To attach the custom shortcut menu to a particular form, form control, or report, set the form, form control, or report's <b>ShortcutMenuBar</b> property to the name of the custom shortcut menu.</p>
<p>
You can also add custom shortcut menus to your application by using Visual Basic. For more information, see the section <a href="#comvisualbasic">"Creating Custom Shortcut Menus in Visual Basic."</a> Note, however, that you can only change the type of an existing command bar to <b>Popup</b> by using the Toolbar Properties dialog box. You can't change a command bar of another type to a shortcut menu by using Visual Basic.</p>
<h2>Adding Built-in Menus to Your Custom Command Bars</h2>
<p>
With the new command bars feature in Microsoft Office 97, you can create and modify the various kinds of command bars: menu bars, toolbars, and pop-up menus. In Microsoft Access 97, you use the Customize dialog box, available by pointing to <b>Toolbars</b> on the <b>View</b> menu and then clicking <b>Customize</b>, to create command bars and set their properties.</p>
<p>
When you create a new command bar, you use the <b>Add</b> button on the Customize dialog box to create and name the new command bar. You can then add built-in controls to the command bar by using the <b>Commands</b> tab in the <b>Customize</b> dialog box. There's a selection in the <b>Categories</b> list, <b>Built-in Menus</b>, that you can use to add any of the various built-in menus and their commands to your command bar.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;If you modify a built-in menu that you've added to your custom command bar, the built-in menu will be modified everywhere it appears in the product. For example, if you rename a command in your command bar, this command will also be renamed in any of the built-in menu bars or toolbars on which it normally appears.</p>
<p>
To avoid this problem, don't use the <b>Built-in Menus</b> selection. Instead, use the <b>New Menu</b> selection in the <b>Categories</b> list on the <b>Commands</b> tab to add a new blank menu to your command bar, and then drag the built-in commands you want to this menu. You can name the menu the same name as the corresponding built-in menu. For example, you could add a new menu, rename it "File", and then add all the built-in commands normally found on the <b>File</b> menu to your command bar.</p>
<h2>Using the Position Property with Command Bars</h2>
<p>
The <b>Position</b> property for command bars is primarily used to set the position of a command bar after it's created or when you want to move an existing command bar. However, there's some additional functionality of this property that's not immediately apparent.</p>
<p>
The <b>Position</b> property applies to all command bars. The syntax for setting this property is:</p>
<pre><code>CommandBars("commandbarname").Position = msoBarPosition constant
</code></pre>
<p>
You can set this property to one of seven intrinsic constants (see Table 1).</p>
<p class=label>
<b>Table 1. Intrinsic Constants of the Position Property</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Constant</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>msoBarLeft</b>, <b>msoBarTop</b>, <b>msoBarRight</b>, <b>msoBarBottom</b></td>
<td width=50%>Indicates where the command bar appears on the screen.</td>
</tr>
<tr valign=top>
<td width=50%><b>msoBarFloating</b></td>
<td width=50%>Indicates that the command bar isn't docked.</td>
</tr>
<tr valign=top>
<td width=50%><b>msoBarPopup</b></td>
<td width=50%>Read-only. Indicates that the command bar is a shortcut menu.</td>
</tr>
<tr valign=top>
<td width=50%><b>msoBarMenuBar</b> (This constant is incorrectly listed as <b>msoBarMenu</b> in the Help topic for the <b>Position</b> property.)</td>
<td width=50%>Indicates that the command bar is a Macintosh® system menu bar (and replaces the built-in system menu bar). This constant does NOT indicate that this command bar is a Microsoft Access menu bar, and indeed this command bar can't be used with Microsoft Access.</td>
</tr>
</table><br>
<p>
Note that these constants are also used with the <i>Position</i> argument of the <b>Add</b> method of the CommandBars collection, which you use to add command bars and set their type and position. An important difference between the two, however, is that the <b>msoBarPopup</b> setting is read-only for the <b>Position</b> property. You can't change an existing command bar to a shortcut menu by using the <b>Position</b> property after the command bar has been created. You could delete the command bar and use the <b>Add</b> method to add it as a shortcut menu (as long as you didn't need the existing command bar anymore). You could also copy an existing shortcut menu, and modify it to contain the controls you want. For more information, see the section <a href="#comvisualbasic">"Creating Custom Shortcut Menus in Visual Basic."</a></p>
<h3>Example: Using the Position Property</h3>
<p>
This example repositions the specified command bar in the specified screen location, at the top, bottom, right, or left of the screen, or makes it undocked. You pass the name of the command bar in the <i>strBarName</i> argument and the desired location (one of the intrinsic constants for the <b>Position</b> property setting) in the <i>intLocation</i> argument.</p>
<pre><code>Function MoveCommandBar(strBarName As String, intLocation As Integer)
 &nbsp;&nbsp; Dim cbr As CommandBar
 &nbsp;&nbsp; Set cbr = CommandBars(strBarName)
 &nbsp;&nbsp; With cbr
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If .Visible = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case intLocation
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarTop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Position = msoBarTop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarBottom
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Position = msoBarBottom
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarRight
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Position = msoBarRight
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarLeft
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Position = msoBarLeft
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarFloating
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Position = msoBarFloating
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case msoBarPopup
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "You can't change an existing" &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " command bar to a shortcut menu."
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Invalid Position Argument"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End With
End Function
</code></pre>
<h2><a name="copyingbars"></a>Copying Command Bars</h2>
<p>
Often, you'll want to create a command bar that contains almost all of the controls from an existing command bar. For example, you may have just created a custom toolbar that you use for one of your forms, and you want to create other very similar toolbars for other forms that contain the same controls with just a few modifications. The following function will copy a specified command bar and its controls to a new command bar. You can then make any modifications you want to this command bar. Note that there is no way to copy a command bar in its entirety by using the user interface; you must use Visual Basic.</p>
<pre><code>Function CopyCommandBar(strOrigCBName As String, strNewCBName As String) As Boolean
 &nbsp;&nbsp; ' This procedure copies the command bar named in the
 &nbsp;&nbsp; ' strOrigCBName variable to the new command bar named
 &nbsp;&nbsp; ' in the strNewCBName variable.
 &nbsp;&nbsp; Dim cbrOriginal As CommandBar, intOrigCount As Integer
 &nbsp;&nbsp; Dim cbrCopy As CommandBar, cbrCtl As CommandBarControl
 &nbsp;&nbsp; On Error GoTo CBCopy_Err
 &nbsp;&nbsp; Set cbrOriginal = CommandBars(strOrigCBName)
 &nbsp;&nbsp; intOrigCount = cbrOriginal.Controls.Count
 &nbsp;&nbsp; Set cbrCopy = CommandBars.Add(strNewCBName)
 &nbsp;&nbsp; ' Make sure the new command bar is visible.
 &nbsp;&nbsp; cbrCopy.Visible = True
 &nbsp;&nbsp; For Each cbrCtl In cbrOriginal.Controls
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbrCtl.Copy cbrCopy
 &nbsp;&nbsp; Next cbrCtl
Exit Function
CBCopy_Err:
 &nbsp;&nbsp; MsgBox Err.Description
 &nbsp;&nbsp; Exit Function
End Function
</code></pre>
<h2>Adding a Combo Box Control to a Command Bar</h2>
<p>
One of the useful new features of command bars is the ability to add different types of controls to your command bars. The following example shows you how to add a combo box control to the main menu bar and fill the combo box list with values from a table. This example also shows how to delete the combo box control when you no longer need it. For example, you may want to display this combo box control when a certain form (for example, the Orders form) is open, and remove it when the form is closed or no longer has the focus. To do this, you could run the AddCombo procedure when the form's Open event occurs, and run the RemoveCombo procedure when the form's Unload event occurs.</p>
<p>
This example can be used as is with any of the sample applications supplied with Microsoft Access. (Note, however, that the main menu bar for the Northwind Traders database is called NorthwindCustomMenuBar, not Menu Bar.) To use it with your application, replace the table and field names with those from your database.</p>
<pre><code>Sub AddCombo()
 &nbsp;&nbsp; ' This procedure adds a combo box control to the menu bar
 &nbsp;&nbsp; ' and adds CompanyName information from the Customers table.
 &nbsp;&nbsp; Dim mybar As CommandBar, mycontrol As CommandBarComboBox
 &nbsp;&nbsp; Dim dbs As Database, rst As Recordset, intI As Integer
 &nbsp;&nbsp; Set mybar = CommandBars("Menu Bar")
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; ' See if the control already exists
 &nbsp;&nbsp; Set mycontrol = mybar.Controls("Customers")
 &nbsp;&nbsp; If Err = 0 Then Exit Sub&nbsp;&nbsp; ' Control exists so exit procedure.
 &nbsp;&nbsp; ' Add control to menu bar.
 &nbsp;&nbsp; Set mycontrol = _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mybar.Controls.Add(Type:=msoControlComboBox, Id:=1)
 &nbsp;&nbsp; Set dbs = CurrentDb
 &nbsp;&nbsp; Set rst = dbs.OpenRecordset("Customers", dbOpenDynaset)
 &nbsp;&nbsp; rst.MoveFirst
 &nbsp;&nbsp; intI = 1
 &nbsp;&nbsp; ' Fill combo box with names from the Customers table.
 &nbsp;&nbsp; While Not rst.EOF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With mycontrol
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddItem Text:=rst!CompanyName, Index:=intI
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intI = intI + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rst.MoveNext
 &nbsp;&nbsp; Wend
 &nbsp;&nbsp; ' Set combo box properties
 &nbsp;&nbsp; With mycontrol
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Caption = "Customers"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Width = 200
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .DropDownLines = 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .DropDownWidth = 300
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' This is the function called when an item is
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' selected from the list.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OnAction = "=ShowCustomerInfo()"
 &nbsp;&nbsp; End With
End Sub
Function ShowCustomerInfo()
 &nbsp;&nbsp; ' This procedure runs when an item is selected from the combo
 &nbsp;&nbsp; ' box created in the AddCombo procedure. It displays a message
 &nbsp;&nbsp; ' box showing the name, title, and phone number of the contact
 &nbsp;&nbsp; ' for the company you select in the combo box list.
 &nbsp;&nbsp; Dim mybar As CommandBar, mycontrol As CommandBarComboBox
 &nbsp;&nbsp; Dim dbs As Database, rst As Recordset
 &nbsp;&nbsp; Dim strCriteria As String
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Set mybar = CommandBars("Menu Bar")
 &nbsp;&nbsp; Set mycontrol = mybar.Controls("Customers")
 &nbsp;&nbsp; Set dbs = CurrentDb
 &nbsp;&nbsp; ' Create a recordset containing a single record that matches
 &nbsp;&nbsp; ' the company name selected from the combo box.
 &nbsp;&nbsp; ' This If clause handles the case where the company name
 &nbsp;&nbsp; ' contains an embedded apostrophe.
 &nbsp;&nbsp; If InStr(mycontrol.Text, "'") &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strCriteria = "Select ContactName, ContactTitle," &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " Phone From Customers Where CompanyName" &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " = " &amp; """" &amp; mycontrol.Text &amp; """"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strCriteria = "Select ContactName, ContactTitle," &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " Phone From Customers Where CompanyName" &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " = '" &amp; mycontrol.Text &amp; "'"
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; Set rst = dbs.OpenRecordset(strCriteria)
 &nbsp;&nbsp; MsgBox "Name = " &amp; rst!ContactName &amp; vbCrLf &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Title = " &amp; rst!ContactTitle &amp; vbCrLf &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Phone = " &amp; rst!Phone
End Function
Sub RemoveCombo()
 &nbsp;&nbsp; ' This procedure removes the combo box control created
 &nbsp;&nbsp; ' in the AddCombo procedure from the menu bar.
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim mybar As CommandBar, mycontrol As CommandBarComboBox
 &nbsp;&nbsp; Set mybar = CommandBars("Menu Bar")
 &nbsp;&nbsp; Set mycontrol = mybar.Controls("Customers")
 &nbsp;&nbsp; mycontrol.Delete
End Sub
</code></pre>
</BODY>
</HTML>

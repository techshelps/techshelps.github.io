<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 121: Modifying a Text Box's Appearance at Run Time</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn121"></a></sup>Tip 121: Modifying a Text Box's Appearance at Run Time</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Text Box</b> control in Microsoft® Visual Basic® is a mini-word-processing program that lets your user type either single or multiple lines of text. At design time, you set the <b>MultiLine</b> property either to False (single) or to True (multiline). This property cannot be changed at run time. However, during run time you can use <b>Scroll Bar</b> controls to give the impression that your <b>Text Box</b> can be made single or multiline at run time, regardless of the <b>MultiLine</b> property setting.</p>
<h2>Changing a Control's Features at Run Time</h2>
<p>
When designing a Microsoft® Visual Basic® application, you can set the <b>MultiLine</b> property of a <b>Text Box</b> to True or False. If this property is set to False, only a single line of text can be typed in the <b>Text Box</b> control. If the <b>MultiLine</b> property is set to True, many lines of text can be typed in the control. In addition, if the <b>ScrollBars</b> property is set to 3-Both, you can scroll through the text both vertically and horizontally.</p>
<p>
There's only one problem—the <b>MultiLine</b> property cannot be dynamically switched at run time, which means that the <b>Text Box</b> is set to what it was in the design phase of the program.</p>
<p>
However, by using the Microsoft Windows® application programming interface (API) <b>SetScrollRange</b> function, you can add code to your Visual Basic application that will allow you to create a work-around solution. This enables you to change the <b>Text Box's</b> appearance from single to multiline at run time.</p>
<p>
The <b>SetScrollRange</b> function lets you set the minimum and maximum indicator positions of a scroll bar. To use this function, add the following <b>Declare</b> statement to the General Declarations section of your form (note that the <b>Declare</b> statement must be typed as a single line of code):</p>
<pre><code>Private Declare Sub SetScrollRange Lib "User" (ByVal hWnd As Integer, ByVal nBar
 &nbsp; As Integer, ByVal nMinPos As Integer, ByVal nMaxPos As Integer, ByVal
 &nbsp; bRedraw As Integer)
</code></pre>
<p>
The <b>SetScrollRange</b> function requires five arguments, as follows.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hWnd</i></td>
<td colspan=2 width=87%>An integer value containing the window or scroll bar's handle</td>
</tr>
<tr valign=top>
<td width=13%><i>nBa</i>r</td>
<td colspan=2 width=87%>An integer value set to one of the following values:</td>
</tr>
<tr valign=top>
<td width=13%></td>
<td width=31%>ESB_ENABLE_BOTH</td>
<td width=56%>Both arrows enabled</td>
</tr>
<tr valign=top>
<td width=13%></td>
<td width=31%>ESB_DISABLE_LTUP</td>
<td width=56%>Left or Up arrow disabled</td>
</tr>
<tr valign=top>
<td width=13%></td>
<td width=31%>ESB_DISABLE_RTDN</td>
<td width=56%>Right or Down arrow disabled</td>
</tr>
<tr valign=top>
<td width=13%></td>
<td width=31%>ESB_DISABLE_BOTH</td>
<td width=56%>Both arrows disabled</td>
</tr>
<tr valign=top>
<td width=13%><i>nMinPos</i></td>
<td colspan=2 width=87%>An integer value containing the minimum indicator position</td>
</tr>
<tr valign=top>
<td width=13%><i>nMaxPos</i></td>
<td colspan=2 width=87%>An integer value containing the maximum indicator position</td>
</tr>
<tr valign=top>
<td width=13%><i>bRedraw</i></td>
<td colspan=2 width=87%>An integer value, when set to True, to redraw the scroll bar</td>
</tr>
</table><br>
<p>
To disable the scroll bars in this Visual Basic program, you simply call <b>SetScrollRange</b> with the minimum and maximum position indicators set to the same value. When you want to enable the scroll bars again, you call <b>SetScrollRange</b> with the minimum and maximum position indicators set to 1 and 100, respectively. When you change the position indictors to 1 and 100, you can scroll through the contents of the <b>Text Box</b> control regardless of the <b>MultiLine</b> property setting. This gives the impression that the <b>Text Box</b> control is <b>MultiLine</b> when it is indeed set to single-line status.</p>
<h2>Example Program</h2>
<p>
This program shows how to create a <b>Text Box</b> control that can be switched at run time from single-line to multiline status, with or without scroll bars.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of text):<pre><code>Private Declare Sub SetScrollRange Lib "User" (ByVal hWnd As Integer, 
 &nbsp; ByVal nBar As Integer, ByVal nMinPos As Integer, 
 &nbsp; ByVal nMaxPos As Integer, ByVal&nbsp;&nbsp; bRedraw As Integer)
Const ESB_DISABLE_BOTH = 3
Const ESB_ENABLE_BOTH = 1
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True. Set its <b>ScrollBars</b> property to 3-Both.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Disable".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim hWnd As Integer
 &nbsp;&nbsp; Dim Min As Integer
 &nbsp;&nbsp; Dim Max As Integer
 &nbsp;&nbsp; Min = 1
 &nbsp;&nbsp; Max = Min
 &nbsp;&nbsp; Call SetScrollRange(Text1.hWnd, ESB_DISABLE_BOTH, Min, Max, 1)
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Enable".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; Dim hWnd As Integer
 &nbsp;&nbsp; Dim Min As Integer
 &nbsp;&nbsp; Dim Max As Integer
 &nbsp;&nbsp; Min = 1
 &nbsp;&nbsp; Max = 100
 &nbsp;&nbsp; Call SetScrollRange(Text1.hWnd, ESB_ENABLE_BOTH, Min, Max, 1)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the <b>Text Box</b> control and type several lines of text. Notice that you can use the scroll bars to scroll through the text in the control. Click Disable. Now you cannot use the scroll bars to scroll through the <b>Text Box </b>control. To enable the scroll bars again, click Enable.</p>
<h2>Additional References</h2>
<p>
"SetScrollRange." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
"Scroll Bar Range and Position." (MSDN Library Archive, Books and Periodicals, Programming Windows 3.1 by Charles Petzold, PART 1 Getting Started)</p>
</BODY>
</HTML>

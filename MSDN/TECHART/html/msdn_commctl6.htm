<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32 Common Controls, Part 6: Tab Controls and Property Sheets</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_commctl6"></a>Win32 Common Controls, Part 6: Tab Controls and Property Sheets</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: June 24, 1994</p>
<p>
Revised: November 3, 1994<br>
New information regarding wizards under "Creating a Property Sheet" section.<br>
New information in PSN_SETACTIVE under "Property Sheet Notifications" section; addition of new notifications: PSN_QUERYCANCEL, PSN_WIZBACK, PSN_WIZFINISH, and PSN_WIZNEXT.<br>
Change to PROPSHEETPAGE code: LPFNRELEASEPROPSHEETPAGE <i>pfnRelease</i> changed to CALLBACK * <i>pfnCallback</i>.<br>
Change to PROPSHEETHEADER code; addition to <b>DWORD</b> <i>dwFlags</i> of PSH_MULTILINETABS, PSH_WIZARD, PSH_USEPSTARTPAGE, PSH_NOAPPLYNOW, and PSH_USECALLBACK; and addition of <b>LPSCTR</b> <i>pStartPage</i> member.<br>
New messages added under "Property Sheet Messages" section: PSM_GETTABCONTROL, PSM_PRESSBUTTON, PSM_SETCURSELID, PSM_SETFINISHTEXT, and PSM_SETWIZBUTTONS.</p>
<p>
Revised: February 1995<br>
Removal of PSN_HASHELP notification.<br>
PSM_ADDPAGE and PSM_REMOVEPAGE now implemented.</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2701">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the PROPS sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
The next release of the Microsoft® Windows® operating system (called Windows 95) will present a new set of common controls to developers of Windows-based applications. These controls are provided in a new dynamic-link library (DLL) called COMCTL32.DLL. The controls allow developers to integrate existing applications into the new Windows 95 shell more thoroughly and seamlessly. COMCTL32.DLL is included with Windows 95 and will also be supported in Win32s® (running on Windows version 3.1) and in Windows NT™. Note that these controls are 32-bit only—they will not be supported in 16-bit Windows environments.</p>
<p>
This article describes property sheets and one new common control (the tab control). It is the sixth (and final) article in a series of articles introducing the new common controls. The other articles in the series cover the following topics:
<ul type=disc>
<li>
<a href="msdn_commctl1.htm">Part 1: The basics</a><br><br></li>
<li>
<a href="msdn_commctl2.htm">Part 2: Status bars and toolbars</a><br><br></li>
<li>
<a href="msdn_commctl3.htm">Part 3: Trackbars, progress bars, and up-down controls</a><br><br></li>
<li>
<a href="msdn_commctl4.htm">Part 4: Header windows and list view windows</a><br><br></li>
<li>
<a href="msdn_commctl5.htm">Part 5: Image lists and tree view windows</a></li>
</ul>
<p>
Parts 2–6 of the series have associated code samples that demonstrate the use of the Win32® common controls.</p>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;The PROPS executable file associated with this article was built and tested using the Windows 95 Preliminary Development Kit. The executable will run only on Windows 95; it will not run under Windows 3.1 or Windows NT. If you have Windows 95 installed on your machine, but you have problems running this sample, copy the project files to your system using the button above, rebuild the project, and run the executable.</p>
<p>
Please note that this article is based on preliminary information that is subject to change before the final version of Windows 95.</p>
<h2>Tab Controls</h2>
<p>
A tab control is similar to a notebook divider, which separates topics or sections of information and helps you access a particular topic or section easily. In the next release of the Microsoft® Windows® operating system (called Windows 95), the tab control and property sheet combination is based on the same design principle—the tab control allows the user to switch between property sheets containing information that the user can view and/or set. A property sheet contains one or more <i>pages</i>. An application typically defines a group of dialog boxes as property-sheet pages, and uses tab controls to provide access to a certain page of information. Tab controls can also be used to carry out a specific command instead of providing access to a page; this is similar to the way some menu names (usually followed by an exclamation point) provide immediate access to actions.</p>
<p>
The dialog box in Figure 1 has tabs that switch between the Font, Alignment, and Number settings for formatting cells. Previous versions of Windows used individual dialog boxes to display each group of settings. In Windows 95, all the attributes are in one dialog box, and the user clicks the tab controls to switch from one set to the next. The Windows 95 shell makes extensive use of tabs in the Control Panel.</p>
<p>
<img src="commctl6_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Tab controls in a property sheet</b></p>
<h3>Tab Styles and Default Behavior</h3>
<p>
The table below lists the window styles that you can specify when creating tab controls. The default styles are TCS_TABS and TCS_SINGLELINE. This combination produces a tab control that looks like a notebook divider and includes a single line of left-justified text.</p>
<p class=label>
<b>Table 1. Tab Control Styles</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Style</b></td>
<td class=label width=64%><b>Use</b></td>
</tr>
<tr valign=top>
<td width=36%>TCS_BUTTONS</td>
<td width=64%>Creates a tab control that looks and works like a button.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_FIXEDWIDTH</td>
<td width=64%>Creates a tab control with a fixed width.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_FOCUSONBUTTONDOWN</td>
<td width=64%>Specifies that the tab will receive the input focus when the user clicks it. This style is used in conjunction with the TCS_BUTTONS style.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_MULTILINE</td>
<td width=64%>Allows multiple rows of tabs in the tab control.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_OWNERDRAWFIXED</td>
<td width=64%>Specifies an owner-drawn tab control. The parent window of the tab control is responsible for drawing the tab control.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_RAGGEDRIGHT</td>
<td width=64%>Specifies that tabs will not be stretched to fill the row. By default, the tab control will stretch each tab item (text, icon, or combination of text and icon displayed in the tab) equally to fill the tab control.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_RIGHTJUSTIFY</td>
<td width=64%>Right-justifies the text in the tab control. The text is left-justified by default.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_SHAREIMAGELISTS</td>
<td width=64%>Indicates that the tab control shares an image list. Because the image list is shared, it is not created when the tab control is created, or destroyed when the tab control is destroyed.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_SINGLELINE</td>
<td width=64%>Allows only a single row of tabs in the tab control.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_SORTASCENDING</td>
<td width=64%>Indicates that tabs are sorted in ascending order.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_SORTDESCENDING</td>
<td width=64%>Indicates that tabs are sorted in descending order.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_SORTNONE</td>
<td width=64%>Indicates that tabs are not sorted at all.</td>
</tr>
<tr valign=top>
<td width=36%>TCS_TABS</td>
<td width=64%>Creates tabs that look like notebook dividers, and draws a border around the display area. </td>
</tr>
<tr valign=top>
<td width=36%>TCS_TOOLTIPS</td>
<td width=64%>Supports ToolTips for the tab control window.</td>
</tr>
</table><br>
<h3>Creating a Tab Control</h3>
<p>
You can create a tab control by calling the <b>CreateWindow</b> or <b>CreateWindowEx</b> function, specifying the WC_TABCONTROL window class and a combination of tab styles listed in Table 1 above. As with the other common controls, the WC_TABCONTROL window class is registered when the dynamic-link library for Win32® common controls (COMCTL32.DLL) is loaded. You can call the <b>InitCommonControls</b> function to ensure that the DLL is loaded.</p>
<p>
However, to include tabs in the window, the application must also fill out the <b>TC_ITEM</b> or <b>TC_ITEMHEADER</b> structure. These two structures specify the attributes of the tabs. <b>TC_ITEM</b> and <b>TC_ITEMHEADER</b> are nearly identical—the only difference between the two structures is the lack of the <i>lParam</i> member in <b>TC_ITEMHEADER</b>. The <i>lParam</i> member is used for application-defined data. If the application wishes to store more than four extra bytes of data per tab within the tab item structure, <i>lParam</i> will not be sufficient. Instead, the application should define its own structure consisting of the <b>TC_ITEMHEADER</b> structure followed by application-defined data, then set the number of extra bytes per tab using the TCM_SETITEMEXTRA message. For example, if my application stored information about a baseball player for each tab, I would define a structure that looks something like this:</p>
<pre><code>typedef struct _PLAYER_TAB {
  TC_ITEMHEADER tci;&nbsp;&nbsp;&nbsp; // tab item information
  LPSTR lpstrName;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // player's name
  LPSTR lpstrTeam;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // player's team
  LONG lERA;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // player's ERA
  LONG lSalary;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // player's salary--should this be a float?
} PLAYER_TAB 
</code></pre>
<p>
After adding the tab, the application would send the TCM_SETITEMEXTRA message to set the amount of extra data to <b>sizeof</b>(PLAYER_TAB). If the application wanted to store a pointer to the structure above without including <b>TC_ITEMHEADER</b> in the structure, it could use the <b>TC_ITEM</b> structure instead and store the pointer to the structure in the <i>lParam</i> field.</p>
<p>
The <b>TC_ITEM</b> structure contains information about a tab item. The structure is listed below.</p>
<pre><code>typedef struct _TC_ITEM {
 &nbsp; UINT mask;
 &nbsp; UINT state;
 &nbsp; UINT stateMask;
 &nbsp; LPSTR pszText;
 &nbsp; int cchTextMax;
 &nbsp; int iImage;
 &nbsp; LPARAM lParam;
} TC_ITEM;
</code></pre>
<p>
The <b>TC_ITEM</b> structure contains the following members:
<ul type=disc>
<li>
<b>UINT</b> <i>mask</i>: The items of the tab to get or to set. This can be one flag or a combination of the flags listed in Table 2.<br><br></li>
<li>
<b>UINT</b> <i>state</i>: The state of the tab, as listed in Table 3.<br><br></li>
<li>
<b>UINT</b> <i>stateMask</i>: A mask specifying the states of the tab to get or to set.<br><br></li>
<li>
<b>LPSTR</b> <i>pszText</i>: If the <b>TC_ITEM</b> structure is setting information about a tab, this member specifies the address of a null-terminated string containing the tab text. If the structure is receiving information, this member specifies the address of the buffer to receive the tab text.<br><br></li>
<li>
<b>int</b> <i>cchTextMax</i>: The maximum number of characters in the text buffer specified by <i>pszText</i>.<br><br></li>
<li>
<b>int</b> <i>iImage</i>: Index into the tab control's image list, or –1 if no image exists for the tab.<br><br></li>
<li>
<b>LPARAM</b> <i>lParam</i>: Application-defined data (up to four bytes) for each tab item within the tab control.</li>
</ul>
<p class=label>
<b>Table 2. Tab Masks</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Mask</b></td>
<td class=label width=73%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=27%>TCIF_TEXT</td>
<td width=73%>The <i>pszText</i> and <i>cchTextMax</i> members are valid.</td>
</tr>
<tr valign=top>
<td width=27%>TCIF_IMAGE</td>
<td width=73%>The <i>iImage</i> member is valid.</td>
</tr>
<tr valign=top>
<td width=27%>TCIF_PARAM</td>
<td width=73%>The <i>lParam</i> member is valid.</td>
</tr>
<tr valign=top>
<td width=27%>TCIF_STATE</td>
<td width=73%>The <i>state</i> member is valid.</td>
</tr>
</table><br>
<p class=label>
<b>Table 3. Tab State Flags</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Flag</b></td>
<td class=label width=62%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=38%>TCIS_FOCUSED</td>
<td width=62%>The tab has the input focus.</td>
</tr>
<tr valign=top>
<td width=38%>TCIS_SELECTED</td>
<td width=62%>The tab is selected.</td>
</tr>
<tr valign=top>
<td width=38%>TCIS_DROPHILITED</td>
<td width=62%>The tab is the drop highlight target.</td>
</tr>
<tr valign=top>
<td width=38%>TCIS_DISABLED</td>
<td width=62%>The tab is disabled.</td>
</tr>
<tr valign=top>
<td width=38%>TCIS_HIDDEN</td>
<td width=62%>The tab is hidden.</td>
</tr>
</table><br>
<p>
Now that you've read the details and perused the structure, it's time to take a look at some simple code that fills out the <b>TC_ITEM</b> structure and create a tab within a tab control by calling the <b>TabCtrl_InsertItem</b> macro. The following code snippet creates a tab control that contains text and has no image list associated with it:</p>
<pre><code>TC_ITEM tie;

tie.mask = TCIF_TEXT | TCIF_STATE | TCIF_IMAGE;
tie.state = 0;
tie.iImage = -1;
tie.pszText = "Tab 1";

if (TabCtrl_InsertItem(hwndTab, i, &amp;tie) == -1) 
{
 &nbsp;&nbsp; // The insert failed--display an error box.
 &nbsp;&nbsp; MessageBox(NULL, "TabCtrl_InsertItem failed!", NULL, MB_OK);
 &nbsp;&nbsp; return NULL;
}
</code></pre>
<h3>So I Have a Tab. Now What?</h3>
<p>
So far, you've created the tab control and inserted tab items, but the tab control still doesn't have much functionality. The application must now manage the window associated with the tabs. There are two ways to do this: the easy way and the hard way. The easy way is to use property sheets in conjunction with tabs, as described in the section on property sheets later in this article.</p>
<p>
Here's how you add functionality the hard way: When the user selects a tab, the tab control sends a WM_COMMAND message, specifying the TCN_SELCHANGE notification, to manage the switch between logical pages of information. The application processes this notification and makes the appropriate changes to the focus window. For example, to create an edit control to use within each tab, the application would assign the memory handle (send an EM_SETHANDLE message to the edit control) for the incoming page. Although this method certainly works, a better way to handle paging between tabs is to let the system do the grunt work for you and to use property sheets instead.</p>
<h3>Tab Control Notifications</h3>
<p>
Two notifications are sent to tab controls in the form of WM_COMMAND messages: TCN_SELCHANGING and TCN_SELCHANGE. TCN_SELCHANGING is sent to notify a tab control that the current selection is changing; TCN_SELCHANGE is sent to a tab control when the selection has changed. The tab control can disallow the selection from changing by returning NULL in response to the TCN_SELCHANGING notification.</p>
<h3>Tab Control Messages and Macros</h3>
<p>
You send messages to tab controls to do things such as add tabs, remove tabs, or change the tab control's appearance or behavior. As with the other common controls, each message has a corresponding macro that you can use instead of sending the message explicitly. This section lists the new messages that manipulate tab controls. In the macros listed below, <b>HWND</b> <i>hwnd</i> refers to the handle to the tab control, unless noted otherwise. </p>
<h4>TCM_ADJUSTRECT</h4>
<pre><code>wParam = fLarger;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ type of adjustment to perform
lParam = prc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ coordinates of the rectangle
</code></pre>
<p>
<b>Description:</b> Given a rectangle, the TCM_ADJUSTRECT message calculates the display area of a tab control.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> (<b>BOOL</b> <i>fLarger</i>) is TRUE, <i>prc</i> is a display rectangle and will be filled in with the appropriate window rectangle. If it is FALSE,<i> prc</i> is a window rectangle and will be filled in with the appropriate display rectangle. <i>lParam</i> (<b>RECT FAR</b> * <i>prc</i>) is the address of a structure containing the original coordinates. This structure will also receive the new coordinates based on the adjusted calculation.</p>
<p>
<b>Return value:</b> None.</p>
<p>
<b>Macro:</b> (<b>void</b>)<b>TabCtrl_AdjustRect</b>(<i>hwnd</i>, <i>fLarger</i>, <i>prc</i>); </p>
<h4>TCM_DELETEALLITEMS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_DELETEALLITEMS message removes all tabs from a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_DeleteAllItems</b>(<i>hwnd</i>, <i>i</i>); </p>
<h4>TCM_DELETEITEM</h4>
<pre><code>wParam = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab to delete
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_DELETEITEM message removes a tab from a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>i</i>) is the index of the tab to delete. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_DeleteItem</b>(<i>hwnd</i>, <i>i</i>); </p>
<h4>TCM_GETBKCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETBKCOLOR message retrieves the background color of the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The background color of the window (<b>COLORREF</b>).</p>
<p>
<b>Macro:</b> <b>COLORREF TabCtrl_GetBkColor</b>(<i>hwnd</i>);</p>
<h4>TCM_GETCURSEL</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETCURSEL message gets the tab that is currently selected in the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The index of the selected tab if successful; –1 otherwise.</p>
<p>
<b>Macro:</b> <b>int</b> <b>TabCtrlView_GetCurSel</b>(<i>hwnd</i>);</p>
<h4>TCM_GETIMAGELIST</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETIMAGELIST message gets the handle of an image list used to draw the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The handle of the specified image list if successful; NULL otherwise.</p>
<p>
<b>Macro:</b> <b>HIMAGELIST</b> <b>TabCtrlView_GetImageList</b>(<i>hwnd</i>);</p>
<h4>TCM_GETITEM</h4>
<pre><code>wParam = iItem;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab
lParam = (TC_ITEM FAR *)pitem;&nbsp;&nbsp; \\ structure receiving tab information
</code></pre>
<p>
<b>Description:</b> The TCM_GETITEM message gets some or all of a tab's attributes.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index of the tab. <i>lParam</i> (<b>TC_ITEM</b> <b>FAR</b> <i>* pitem</i>) is the tab structure to fill in. The <i>mask</i> member specifies the attributes to get. If the <i>mask</i> member specifies the TCIF_TEXT flag, the <i>pszText</i> member must contain the address of the buffer that receives the tab text, and the <i>cchTextMax</i> member must specify the size of the buffer. If the <i>mask</i> member specifies the TCIF_STATE flag, the <i>stateMask</i> member specifies which tab states are to be returned.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_GetItem</b>(<i>hwnd</i>, <i>iItem</i>, <i>pitem</i>);</p>
<h4>TCM_GETITEMCOUNT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETITEMCOUNT message gets the number of tabs in a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The number of tabs.</p>
<p>
<b>Macro:</b> (<b>int</b>)<b>TabCtrl_GetItemCount</b>(<i>hwnd</i>);</p>
<h4>TCM_GETITEMRECT</h4>
<pre><code>wParam = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab
lParam = (RECT FAR *)prc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ bounding rectangle
</code></pre>
<p>
<b>Description:</b> The TCM_GETITEMRECT message gets the bounding rectangle for a tab in the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>i</i>) is the index of the tab. <i>lParam</i> (<b>RECT</b> <b>FAR</b><i> * prc</i>) is the bounding rectangle.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_GetItemRect</b>(<i>hwnd</i>, <i>i</i>, <i>prc</i>);</p>
<h4>TCM_GETROWCOUNT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETROWCOUNT message gets the number of rows in a tab control. This message is valid only for tab controls that have the TCS_MULTILINE style.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The number of rows.</p>
<p>
<b>Macro:</b> (<b>int</b>)<b>TabCtrl_GetRowCount</b>(<i>hwnd</i>);</p>
<h4>TCM_GETTEXTBKCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETTEXTBKCOLOR message gets the background text color in a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The background color of the text (<b>COLORREF</b>).</p>
<p>
<b>Macro:</b> (<b>COLORREF</b>)<b>TabCtrl_GetTextBkColor</b>(<i>hwnd</i>);</p>
<h4>TCM_GETTEXTCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETTEXTCOLOR message gets the color of the text in a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The text color (<b>COLORREF</b>).</p>
<p>
<b>Macro:</b> (<b>COLORREF</b>)<b>TabCtrl_GetTextColor</b>(<i>hwnd</i>);</p>
<h4>TCM_GETTOOLTIPS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_GETTOOLTIPS message gets the handle for the ToolTip control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> The handle of the ToolTip control. </p>
<p>
<b>Macro:</b> (<b>HWND</b>)<b>TabCtrl_GetToolTips</b>(<i>hwnd</i>);</p>
<h4>TCM_HITTEST</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (TC_HITTESTINFO FAR *)pinfo;&nbsp; \\ position to hit test
</code></pre>
<p>
<b>Description:</b> The TCM_HITTEST message determines which tab is at a specified position in the tab control. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>TC_HITTESTINFO</b> <b>FAR</b><i> * pinfo</i>) specifies the structure containing the position to hit test. The<i> pt</i> member is the position to hit test in client coordinates. The <i>flags</i> member specifies the results of the hit test. The possible flags are listed in Table 4, below.</p>
<p class=label>
<b>Table 4. Tab Hit Test Flags</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Flag</b></td>
<td class=label width=72%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=28%>TCHT_NOWHERE</td>
<td width=72%>The position is inside the tab control's client area but not over the tab.</td>
</tr>
<tr valign=top>
<td width=28%>TCHT_ONITEMICON</td>
<td width=72%>The position is over the tab's icon.</td>
</tr>
<tr valign=top>
<td width=28%>TCHT_ONITEMLABEL</td>
<td width=72%>The position is over the tab's text.</td>
</tr>
<tr valign=top>
<td width=28%>TCHT_ONITEM</td>
<td width=72%>The position is over the tab's icon or text. This is a combination of the TCHT_ONITEMICON and TCHT_ONITEMLABEL flags.</td>
</tr>
</table><br>
<p>
<b>Return value:</b> The index of the tab at the specified position; –1 otherwise.</p>
<p>
<b>Macro:</b> (<b>int</b>)<b>TabCtrl_HitTest</b>(<i>hwnd</i>, <i>pinfo</i>);</p>
<h4>TCM_INSERTITEM</h4>
<pre><code>wParam = iItem;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab
lParam = (const TC_ITEM FAR *)pitem;&nbsp; \\ new tab information
</code></pre>
<p>
<b>Description:</b> The TCM_INSERTITEM message inserts a new tab in a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index of the new tab. <i>lParam</i> (<b>const</b> <b>TC_ITEM</b> <b>FAR</b><i> * pitem</i>) specifies the attributes of the new tab. </p>
<p>
<b>Return value:</b> The index of the new tab if successful; –1 otherwise.</p>
<p>
<b>Macro:</b> (<b>int</b>)<b>TabCtrl_InsertItem</b>(<i>hwnd</i>, <i>iItem</i>, <i>pitem</i>);</p>
<h4>TCM_REMOVEIMAGE</h4>
<pre><code>wParam = iIndex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the index of the image
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_REMOVEIMAGE message removes an image from a tab control's image list. The tab control will update the image index for each tab so that each tab remains associated with its correct image.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>i</i>) is the index of the image. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise. </p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_RemoveImage</b>(<i>hwnd</i>, <i>i</i>);</p>
<h4>TCM_SETBKCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (COLORREF)clrBk;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ background color to set 
</code></pre>
<p>
<b>Description:</b> The TCM_SETBKCOLOR message sets the background color of the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>COLORREF</b> <i>clrBk</i>) specifies the background color to set (CLR_NONE for no background color).</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetBkColor</b>(<i>hwnd</i>, <i>clrBk</i>);</p>
<h4>TCM_SETCURSEL</h4>
<pre><code>wParam = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_SETCURSEL message selects the specified tab.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>i</i>) is the index of the tab to select. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The index of the selected tab if successful; NULL otherwise.</p>
<p>
<b>Macro:</b> <b>int</b> <b>TabCtrlView_SetCurSel</b>(<i>hwnd, i</i>);</p>
<h4>TCM_SETIMAGELIST</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (HIMAGELIST) himl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ handle of the image list
</code></pre>
<p>
<b>Description:</b> The TCM_SETIMAGELIST message sets the image list used to draw the tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>HIMAGELIST</b> <i>himl</i>) is the handle to the image list.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetImageList</b>(<i>hwnd</i>, <i>himl</i>);</p>
<h4>TCM_SETITEM</h4>
<pre><code>wParam = iItem;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the tab
lParam = (const TC_ITEM FAR *)pitem;&nbsp; \\ new tab attributes
</code></pre>
<p>
<b>Description:</b> The TCM_SETITEM message sets a tab's attributes. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index of the tab in the tab control. <i>lParam</i> (<b>const</b> <b>TC_ITEM</b> <b>FAR</b><i> * pitem</i>) specifies the structure that contains the new tab attributes. The <i>mask </i>member specifies the attributes to get. If the <i>mask </i>member specifies the TCIF_TEXT flag, the <i>pszText</i> member specifies the address of a null-terminated string, and the <i>cchTextMax </i>member is ignored. If the <i>mask </i>member specifies the TCIF_STATE flag, the <i>stateMask</i> member specifies which tab states are to be changed, and the <i>state</i> member contains the new values for those states.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetItem</b>(<i>hwnd</i>, <i>iItem</i>, <i>pitem</i>);</p>
<h4>TCM_SETITEMEXTRA</h4>
<pre><code>wParam = cb;&nbsp;&nbsp;&nbsp;&nbsp; \\ the number of extra bytes needed
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_SETITEMEXTRA message sets the number of extra bytes for a tab.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the number of extra bytes for each tab. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetItemExtra</b>(<i>hwnd</i>, <i>cb</i>);</p>
<h4>TCM_SETITEMSIZE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELPARAM(x,y);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the new size for the tab
</code></pre>
<p>
<b>Description:</b> The TCM_SETITEMCOUNT message sets the size of a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>MAKELPARAM</b> (<i>x</i>, <i>y</i>)) is the new width and height for the tab control.</p>
<p>
<b>Return value:</b> The old width and height of the tab control. </p>
<p>
<b>Macro:</b> (<b>DWORD</b>)<b>TabCtrl_SetItemSize</b>(<i>hwnd</i>, <i>x</i>, <i>y</i>);</p>
<h4>TCM_SETPADDING</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELPARAM(cx, cy);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_SETPADDING message sets the amount of space between the edges of the tab control and its associated text or image.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>MAKELPARAM</b>( <i>cx</i>, <i>cy</i>)) is the amount of padding between the tab control and its associated text or image.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>void</b>)<b>TabCtrl_SetPadding</b>(<i>hwnd</i>, <i>cx</i>, <i>cy</i>);</p>
<h4>TCM_SETTEXTBKCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (COLORREF)clrText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new background text color
</code></pre>
<p>
<b>Description:</b> The TCM_SETTEXTBKCOLOR message sets the background text color of a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>COLORREF</b> <i>clrText</i>) is the new background text color.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetTextBkColor</b>(<i>hwnd</i>, <i>clrText</i>);</p>
<h4>TCM_SETTEXTCOLOR</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (COLORREF)clrText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new text color
</code></pre>
<p>
<b>Description:</b> The TCM_SETTEXTCOLOR message sets the text color in a tab control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> (<b>COLORREF</b> <i>clrText</i>) is the new text color.</p>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>TabCtrl_SetTextColor</b>(<i>hwnd</i>, <i>clrText</i>);</p>
<h4>TCM_SETTOOLTIPS</h4>
<pre><code>wParam = hwndTT;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ handle of a ToolTip control
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TCM_SETTOOLTIPS message sets the handle for the ToolTip control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>HWND</b> <i>hwndTT</i>) is the handle to the ToolTip control. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>void</b>)<b>TabCtrl_SetToolTips</b>(<i>hwnd</i>, <i>hwndTT</i>);</p>
<h2>Property Sheets</h2>
<p>
A property sheet, also known as a tabbed dialog, is a window that allows the user to view and edit the properties of an item or an object. For example, a spreadsheet application can use a property sheet to allow the user to set the font and border properties of a cell. Property sheets are used extensively within the new Windows 95 shell to display and change the properties of shell items and the desktop. Application developers who want to give their software a consistent look and feel with the new shell are encouraged to use property sheets.</p>
<p>
Figure 2 illustrates a property sheet that allows the user to view and change the properties of a slider. Each group of properties is marked by a tab. Each tab has a separate sheet (called a <i>page</i>) that the user can access to view and change the associated properties. The property sheet in Figure 2 has two tabs: <i>Slider Range</i> and <i>Slider Page and Line Size</i>. The user selects a tab to bring the associated page to the foreground of the property sheet and to change the values.</p>
<p>
<img src="commctl6_2.gif" border=0></p>
<p class=label>
<b>Figure 2. An example of a property sheet</b></p>
<p>
A property sheet and the pages it contains are actually dialog boxes. The property sheet is a system-defined modeless dialog box, and each page is an application-defined modeless dialog box. The property sheet is a container for the pages and is responsible for managing the pages. It includes a frame, a title bar, a system menu, and four buttons: OK, Cancel, Apply Now, and (optionally) Help. A property sheet must have at least one page and may have up to 24 pages. </p>
<p>
Each page manages its own control windows (that is, edit controls and list box controls) much like a typical dialog box. The application provides a dialog box template and dialog procedure for each page. Each page in a property sheet has a label and (optionally) an icon. When the property sheet creates the tab for the page, it displays the label and icon in the tab. If the property sheet has only one page, the tab for the page is not displayed. All property sheet pages should use a non-bold font (the dialog box template should specify the DS_NOBOLD style). If you want to give your property sheet a three-dimensional look, add the DS_3DLOOK style to the dialog box template. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;At the time that this article was written, the DS_NOBOLD and DS_3DLOOK styles were not supported in the tools provided with Microsoft Visual C++™.</p>
<p>
Wizard controls are based on property sheets and are designed to make it easier for the developer to create wizards. For detailed information about wizard controls, see <a href="msdn_wizard.htm">"We're Off to See the Wizard"</a> in the MSDN Library.</p>
<h3>Creating a Property Sheet</h3>
<p>
You use the <b>PropertySheet</b> function to create a property sheet. If this function is successful, it returns a handle to the property sheet and automatically sets the size and initial position of the property sheet. The function bases the initial position of the property sheet on the largest page specified in the array of pages and the owner window's size and position. You can force the pages to match the width of the four buttons at the bottom of the property sheet by setting the width of the widest page to 190 dialog units.</p>
<p>
To create a property sheet, you should define an array of <b>PROPSHEETPAGE</b> structures for each page, then fill out a <b>PROPSHEETHEADER</b> structure and call the <b>PropertySheet</b> function. This function will create handles for the pages before adding the pages to the property sheet. The order of the array determines the order of the pages in the property sheet, so be sure to define the pages in the array in the order that you want them shown in the tabs.</p>
<p>
Once a property sheet has been created, an application can add and remove pages dynamically by sending the PSM_ADDPAGE and PSM_REMOVEPAGE messages or their corresponding macros. By default, when a property sheet is destroyed, all of its pages are destroyed in first in, last out (FILO) order. That is, the last page that the application specified in the array of pages will be the first page destroyed.</p>
<p>
When creating a page for a wizard, developers are encouraged to use the built-in constants specifying the size of the page:
<ul type=disc>
<li>
WIZ_CXDLG: The width, in dialog units, of the wizard page.<br><br></li>
<li>
WIZ_CYDLG: The height, in dialog units, of the wizard page.<br><br></li>
<li>
WIZ_CXBMP: The standard wizard size bitmap in a page.<br><br></li>
<li>
WIZ_BODYX: The width of the body of the wizard page.<br><br></li>
<li>
WIZ_BODYY: The height of the body of the wizard page.</li>
</ul>
<h3>Converting Dialog Boxes into Property Sheets</h3>
<p>
The first thing I did when I decided to use property sheets was to take an existing sample and use its dialog boxes for the pages in my property sheet. I made three major changes to my dialog templates:
<ul type=disc>
<li>
I removed the OK, Cancel, and Help buttons from the dialog templates. The property sheet automatically includes four buttons: OK, Cancel, Apply Now, and (optionally) Help.<br><br></li>
<li>
I added the DS_3DLOOK dialog style to the dialog templates. This style gives the pages the same three-dimensional look as the rest of the built-in dialog boxes.<br><br></li>
<li>
I added the DS_NOBOLD dialog style to the dialog templates. This style ensures that a non-bold font is used within the dialog box.</li>
</ul>
<p>
I also took this opportunity to review some of my dialog boxes and decided that I could use two pages in place of my original four dialog boxes. This added a little extra work to the conversion, but it improved the organization of my pages and gave my sample a more polished look.</p>
<h4>Creating the property sheet</h4>
<p>
Next, I created the pages in my property sheet and the property sheet itself. I created a function that fills out a <b>PROPSHEETPAGE</b> structure for the two pages, fills out the <b>PROPSHEETHEADER</b> structure, and calls the <b>PropertySheet</b> function. I replaced the <b>DialogBox</b> function calls in my code with a call to my <b>CreatePropertySheet</b> function, which creates the property sheet. I used the code below to create the property sheet and its pages.</p>
<pre><code>int CreatePropertySheet(HWND hwndOwner)
{
 &nbsp;&nbsp; PROPSHEETPAGE psp[2];
 &nbsp;&nbsp; PROPSHEETHEADER psh;

 &nbsp;&nbsp; psp[0].dwSize = sizeof(PROPSHEETPAGE);
 &nbsp;&nbsp; psp[0].dwFlags = PSP_USETITLE;
 &nbsp;&nbsp; psp[0].hInstance = hInst;
 &nbsp;&nbsp; psp[0].pszTemplate = MAKEINTRESOURCE(IDD_RANGE);
 &nbsp;&nbsp; psp[0].pszIcon = NULL;
 &nbsp;&nbsp; psp[0].pfnDlgProc = Range;
 &nbsp;&nbsp; psp[0].pszTitle = "Slider Range";
 &nbsp;&nbsp; psp[0].lParam = 0;

 &nbsp;&nbsp; psp[1].dwSize = sizeof(PROPSHEETPAGE);
 &nbsp;&nbsp; psp[1].dwFlags = PSP_USETITLE;
 &nbsp;&nbsp; psp[1].hInstance = hInst;
 &nbsp;&nbsp; psp[1].pszTemplate = MAKEINTRESOURCE(IDD_PROPS);
 &nbsp;&nbsp; psp[1].pszIcon = NULL;
 &nbsp;&nbsp; psp[1].pfnDlgProc = PageSize;
 &nbsp;&nbsp; psp[1].pszTitle = "Slider Page and Line Size";
 &nbsp;&nbsp; psp[1].lParam = 0;
 &nbsp;&nbsp; 
 &nbsp;&nbsp; psh.dwSize = sizeof(PROPSHEETHEADER);
 &nbsp;&nbsp; psh.dwFlags = PSH_PROPSHEETPAGE;
 &nbsp;&nbsp; psh.hwndParent = hwndOwner;
 &nbsp;&nbsp; psh.hInstance = hInst;
 &nbsp;&nbsp; psh.pszIcon = NULL;
 &nbsp;&nbsp; psh.pszCaption = (LPSTR) "Slider Properties";
 &nbsp;&nbsp; psh.nPages = sizeof(psp) / sizeof(PROPSHEETPAGE);
 &nbsp;&nbsp; psh.ppsp = (LPCPROPSHEETPAGE) &amp;psp;

 &nbsp;&nbsp; return (PropertySheet(&amp;psh));
}
</code></pre>
<h4>Changing the dialog procedure</h4>
<p>
When you convert a dialog procedure from managing a dialog box to managing a property sheet page, the major changes that you need to make involve the handling of the OK and Cancel buttons. Typically, a dialog box procedure is notified that the OK or Cancel button has been pressed via a WM_COMMAND message. When the dialog procedure gets this message, it generally verifies the information entered into the dialog box controls and calls the <b>EndDialog</b> function to destroy the dialog box. The following code demonstrates how a typical dialog box procedure manages the OK button:</p>
<pre><code>case WM_COMMAND:
 &nbsp;&nbsp; if (LOWORD(wParam) == IDOK)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMin = GetDlgItemInt(hDlg, IDE_MIN, &amp;bErr, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMax = GetDlgItemInt(hDlg, IDE_MAX, &amp;bErr, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage( hWndCurrent, TBM_SETRANGE, TRUE, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAKELONG(uMax,uMin));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EndDialog(hDlg, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (TRUE);
 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;
</code></pre>
<p>
In a property sheet, the OK and Cancel notifications are no longer sent to the dialog box procedure. Instead, the dialog procedure must handle a group of page notifications. Some of these notifications require that the dialog procedure set the DWL_MSGRESULT window byte to either TRUE or FALSE. See the "Property Sheet Notifications" section later in this article for details on each of the notifications.</p>
<p>
My application needed to handle the following notifications:
<ul type=disc>
<li>
PSN_APPLY: This notification is sent when the user clicks the Apply Now button. This is also the time to validate any changes the user has made.<br><br></li>
<li>
PSN_KILLACTIVE: This notification is sent when the user clicks one of the tabs in the property sheet and switches pages.<br><br></li>
<li>
PSN_RESET: This notification is sent when the user clicks the Cancel button.<br><br></li>
<li>
PSN_SETACTIVE: This notification is sent when a page is coming into focus. The application should take this opportunity to initialize the controls for that page.</li>
</ul>
<p>
Initially, I found it difficult to differentiate between the OK and Apply Now buttons. They both require that the page validate and apply the changes the user has made. The only difference is that pressing OK causes the property sheet to be destroyed after the changes are applied—pressing Apply Now does not. As a result, if the user decides to apply some changes and later chooses to cancel out of the property sheet, the application should reset the properties to their initial values rather than saving the applied values.</p>
<p>
Another change you must make when you convert a dialog procedure from handling a dialog box to handling a property sheet page is to remove the <b>EndDialog</b> call. The <b>EndDialog</b> function is not called for a property sheet page because it destroys the entire property sheet instead of destroying only the page.</p>
<h4>Any other changes?</h4>
<p>
When a page is created, the dialog procedure for the page receives a WM_INITDIALOG message (as it does when a dialog box is created); however, the <i>lParam</i> parameter points to the <b>PROPSHEETPAGE</b> structure used to create the page. The dialog procedure may save the pointer to this structure and use it later to modify the page. Although I did not modify any pages in my sample, I went ahead and saved this pointer in case I needed it later. (Obviously, I would have removed the pointer information from production code.)</p>
<h4>How about some sample code?</h4>
<p>
I'm glad you asked. I used the following code to manage a property sheet page that sets the range in a slider:</p>
<pre><code>BOOL APIENTRY Range(
 &nbsp;&nbsp; HWND hDlg,
 &nbsp;&nbsp; UINT message,
 &nbsp;&nbsp; UINT wParam,
 &nbsp;&nbsp; LONG lParam)
{
 &nbsp;&nbsp; static PROPSHEETPAGE * ps;
 &nbsp;&nbsp; BOOL bErr;
 &nbsp;&nbsp; static UINT uMin, uMax, uMinSave, uMaxSave;

 &nbsp;&nbsp; switch (message)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case WM_INITDIALOG:&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Save the PROPSHEETPAGE information.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ps = (PROPSHEETPAGE *)lParam;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (TRUE);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case WM_NOTIFY:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (((NMHDR FAR *) lParam)-&gt;code) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_SETACTIVE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize the controls.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMinSave = SendMessage( hWndSlider, TBM_GETRANGEMIN, 0L,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0L);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMaxSave = SendMessage( hWndSlider, TBM_GETRANGEMAX, 0L, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0L);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemInt(hDlg, IDE_MIN, uMinSave, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemInt(hDlg, IDE_MAX, uMaxSave, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_APPLY:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMin = GetDlgItemInt(hDlg, IDE_MIN, &amp;bErr, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uMax = GetDlgItemInt(hDlg, IDE_MAX, &amp;bErr, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage( hWndSlider, TBM_SETRANGE, TRUE, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAKELONG(uMin, uMax));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg, DWL_MSGRESULT, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_KILLACTIVE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg, DWL_MSGRESULT, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case PSN_RESET:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Reset to the original values.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage( hWndSlider, TBM_SETRANGE, TRUE, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAKELONG(uMinSave, uMaxSave));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg, DWL_MSGRESULT, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return (FALSE);
}
</code></pre>
<h4>Can I use one piece of code for both a dialog box and a property sheet page?</h4>
<p>
You can write a single piece of code that works both in a property sheet and in a dialog box, but this is not as easy as having dedicated code for each. If you are using shared code, follow these guidelines:
<ul type=disc>
<li>
Make sure that the dialog procedure does not call the <b>EndDialog</b> function when it is handling a property sheet.<br><br></li>
<li>
Write handlers for the OK, Cancel, and Help notifications and use them for the PSN_APPLY, PSN_RESET, and PSN_HELP notifications.<br><br></li>
<li>
If you decide to use a single template for both a property sheet page and a dialog box, place the OK and Cancel buttons outside the dimensions of the dialog box and disable these buttons when handling a property sheet. When the dialog procedure is handling a dialog box, resize the dialog box to include these buttons upon receiving the WM_INITDIALOG message.</li>
</ul>
<h3>Hey, My Screen Is Flashing!</h3>
<p>
If you happen to use a single template for all of the pages in your property sheet, the user may encounter annoying screen flashes when switching between pages. Your application can minimize or eliminate these flashes by responding to the WM_SHOWWINDOW message. The following code snippet demonstrates one method of eliminating the screen flash:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;case WM_SHOWWINDOW:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check if the window is being shown via a ShowWindow.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (wParam &amp;&amp; !LOWORD(lParam))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // It is, so post a message to myself.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostMessage(hDlg, WM_APP, 0, 0L);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_APP:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Remove the rectangle for the page from the invalid list.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValidateRect(hDlg, NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invalidate any and all controls within the page.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateRect(GetDlgItem(hDlg, ID_CONTROL1), NULL, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateRect(GetDlgItem(hDlg, ID_CONTROL2), NULL, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateRect(GetDlgItem(hDlg, ID_CONTROLn), NULL, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
</code></pre>
<p>
An application that uses this method repaints only the controls that need repainting inside the page, instead of repainting the whole window when the WM_SHOWWINDOW message is sent. A page will also need to call <b>InvalidateRect</b> with the <i>fErase</i> parameter set to TRUE for controls that do not completely paint their client area during a WM_PAINT message (for example, for a list box that is not full).</p>
<h3>Property Sheet Extensions</h3>
<p>
You can use pages from one property sheet to extend the functionality of another property sheet. That is, a property sheet can use pages created by another property sheet. Pretty cool, eh? This extension resides in a dynamic-link library (DLL). For the extension to work, the original module that created the property sheet must include the <b>AddPropSheetPageProc</b> callback function that the extension DLL calls to add its pages to the property sheet. The extension DLL must include the <b>ExtensionPropSheetPageProc</b> callback function to get the address of the <b>AddPropSheetPageProc</b> function from the module that created the original property sheet. The extension DLL must also export the <b>ExtensionPropSheetPageProc</b> callback function. </p>
<p>
The property sheet extensions topic really deserves its own article—adding the information to this article would likely cause information overload, so I will not go into details here. If you would like to see another article covering property sheet extensions, let me know.</p>
<h3>Property Sheet Notifications</h3>
<p>
A property sheet sends notification messages to the dialog procedure for a page when the page gains or loses the activation, and when the user selects the OK, Cancel, Apply Now, or Help button. The notifications are sent in the form of WM_NOTIFY messages. The <i>lParam</i> member is a pointer to an <b>NMHDR</b> structure describing the notification. The <i>hwndFrom</i> member contains the window handle of the property sheet, and the <i>hwndTo</i> member contains the window handle of the page. </p>
<p>
Some notifications require the dialog procedure to return either TRUE or FALSE in response to the WM_NOTIFY message. For example, the PSN_HASHELP notification requires a response of TRUE if it supports the Help button; otherwise, the button is disabled. The return value from the dialog procedure must be set using the <b>SetWindowLong</b> function rather than simply returning TRUE or FALSE. The value that is to be returned is set in the DWL_MSGRESULT window attribute as follows:</p>
<pre><code>SetWindowLong(hDlg, DWL_MSGRESULT, value);
</code></pre>
<h4>PSN_APPLY</h4>
<p>
This notification is sent to the dialog procedure for the page when the user clicks the OK or Apply Now button. PSN_APPLY indicates that the user wants the current changes to take effect. When the dialog procedure for the page receives this notification, it should set the DWL_MSGRESULT window attribute for the page to TRUE if it could not process this message and wishes focus to change to the page. When you convert an existing dialog box into a property sheet page, handle the OK button when you process the PSN_APPLY notification, but remember: Don't call the <b>EndDialog</b> function. Note that the current page will receive the PSN_KILLACTIVE notification before it receives PSN_APPLY, and set the DWL_MSGRESULT window attribute for the page to FALSE for the PSN_APPLY notification to be sent.</p>
<h4>PSN_HELP</h4>
<p>
This notification is sent to the dialog procedure for the page when the user clicks the Help button. The page should call <b>WinHelp</b> or display help text in whatever way is appropriate when it receives this message.</p>
<h4>PSN_KILLACTIVE</h4>
<p>
This notification is sent to the dialog procedure for the page when the page is about to lose activation because the user pressed the OK or Apply Now button. The page should do validation at this point and set the DWL_MSGRESULT window attribute for the page to TRUE if it should not lose activation at this time (this should be accompanied by a message box to the user describing the problem). The page should set DWL_MSGRESULT to FALSE when it is okay to lose the activation. In this case, the property sheet sends the PSN_APPLY notification to each page, directing the page to apply the new properties to the corresponding item. If the page determines that the user's changes are not valid, it should set DWL_MSGRESULT to TRUE and display a dialog box informing the user of the problem. The page remains active until it sets DWL_MSGRESULT to FALSE in response to a PSN_KILLACTIVE message. An application can also use the PSM_APPLY message to simulate clicking the Apply Now button.</p>
<h4>PSN_QUERYCANCEL</h4>
<p>
This notification is sent to the dialog procedure for a page when the Cancel button has been clicked. The page can reject a cancel by setting the notification result to a nonzero value.</p>
<h4>PSN_RESET</h4>
<p>
This notification is sent to the dialog procedure for a page when the user clicks the Cancel button and wishes to cancel all changes since the last Apply Now command. When you convert an existing dialog into a property sheet page, handle the Cancel button when you process the PSN_RESET notification, with one major exception: Do not call the <b>EndDialog</b> function. A page should take this opportunity to perform clean-up operations.</p>
<h4>PSN_SETACTIVE</h4>
<p>
This notification is sent to the dialog procedure for a page when the page is about to become the active page. The page should take this opportunity to perform any initializing it needs at this time. Note that the PSN_SETACTIVE message is sent before the page is visible to reduce screen flashing. A property sheet can have only one active page at a time, and the page that has the activation is at the foreground of the overlapping stack of pages. The user activates a page by selecting its tab; an application activates a page by using the PSM_SETCURSEL message. The page receiving the activation notification can prevent itself from being activated and set the activation to another page. If the notification result is set to –1, the next or previous page (depending upon the button that was clicked) will be activated. To set the activation to a specific page, the notification result is set to the ID of the dialog box to be activated.</p>
<h4>PSN_WIZBACK</h4>
<p>
This notification is sent to the dialog procedure for a wizard page when the Back button is clicked. The page can prevent the action by setting the notification result to –1. The page can branch activation to another page that is out of order by setting the notification result to the ID of the dialog box to be activated.</p>
<h4>PSN_WIZFINISH</h4>
<p>
This notification is sent to the dialog procedure for a wizard page when the Finish button is clicked. The page can prevent the action by setting the notification result to a nonzero value.</p>
<h4>PSN_WIZNEXT</h4>
<p>
This notification is sent to the dialog procedure for a wizard page when the Next button is clicked. The page can prevent the action by setting the notification result to –1. The page can branch activation to another page that is out of order by setting the notification result to the ID of the dialog box to be activated.</p>
<h3>Property Sheet Structures</h3>
<p>
Two new structures that support property sheets have been defined in Windows: <b>PROPSHEETPAGE</b> and <b>PROPSHEETHEADER</b>. These structures are used in conjunction with the new property sheet notifications and messages. These two new structures are described below.</p>
<h4>PROPSHEETPAGE</h4>
<pre><code>typedef struct _PROPSHEETPAGE {
  DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwSize; 
  DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwFlags; 
  HINSTANCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hInstance; 
  union {
 &nbsp;&nbsp; LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszTemplate; 
 &nbsp;&nbsp; LPCDLGTEMPLATE&nbsp; pResource; 
  };
  union {
 &nbsp;&nbsp; HICON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hIcon; 
 &nbsp;&nbsp; LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszIcon; 
  };
  LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszTitle; 
  DLGPROC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfnDlgProc; 
  LPARAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lParam; 
  CALLBACK * pfnCallback;
  UINT FAR * pcRefParent; 
} PROPSHEETPAGE, FAR *LPPROPSHEETPAGE;
</code></pre>
<p>
The <b>PROPSHEETPAGE</b> structure describes a page in a property sheet. When the page is first created, the <i>lParam</i> of the WM_INITDIALOG message points to this structure. By default, a property sheet uses the name string specified in the dialog box template as the label for a page. You can override the name string by including the PSP_USETITLE value in the <i>dwFlags</i> member of the <b>PROPSHEETPAGE</b> structure that defines the page. When PSP_USETITLE is specified, the <i>pszTitle</i> member must contain the address of the label string for the page. The <b>PROPSHEETPAGE</b> structure has the following members:
<ul type=disc>
<li>
<b>DWORD</b> <i>dwSize</i>: The size of the structure. This member should be initialized with <b>sizeof(PROPSHEETPAGE)</b> or some larger value if there is any extra data that follows the <b>PROPSHEETPAGE</b> structure. The <i>dwSize</i> member allows clients to include this structure in a larger structure and have that data available for the life of the dialog box. This is a convenient way to implement dialog instance data.<br><br></li>
<li>
<b>DWORD</b> <i>dwFlags</i>: A combination of flags that determine the look and behavior of the page. These flags indicate which of the other fields in this structure are valid.<p class=tl>
PSP_DEFAULT: Use the default behavior and meaning of the fields.</P><p class=tl>
PSP_DLGINDIRECT: Use <i>pResource</i> instead of <i>pszTemplate</i> in the first union, which means that the template is supplied in memory, not loaded from a resource.</P><p class=tl>
PSP_USEHICON: Use the <i>hIcon</i> field for the small icon on the tab.</P><p class=tl>
PSP_USEICONID: Use the <i>pszIcon</i> field as the name of the icon resource to load for use on the tab.</P><p class=tl>
PSP_USETITLE: Use the s<i>pszTitle</i> field as a pointer to a string or a resource identifier rather than using the title stored in the dialog template.</P><p class=tl>
PSP_USERELEASEFUNC: Call the release function that is specified by <i>pfnCallback</i> when the <b>HPROPSHEETPAGE</b> is created. An application uses the release function to do any cleanup work associated with the property sheet, such as releasing resources and freeing up memory.</P><p class=tl>
PSP_USEREFPARENT: Maintain a reference count for the life of the <b>HPROPSHEETPAGE</b> created using this structure.</P></li>
<li>
<b>HINSTANCE</b> <i>hInstance</i>: The instance from which to load the template, icon, or title string.<br><br></li>
<li>
<b>LPCSTR</b> <i>pszTemplate</i>: The name of the dialog template or a resource identifier to use to create this page.<br><br></li>
<li>
<b>LPCDLGTEMPLATE</b> <i>pResource</i>: A pointer to the dialog template resource in memory.<br><br></li>
<li>
<b>HICON</b> <i>hIcon</i>: A handle to the icon used to draw the tab for this page.<br><br></li>
<li>
<b>LPCSTR</b> <i>pszIcon</i>: The resource that contains the icon to be placed on the tab for this dialog box.<br><br></li>
<li>
<b>LPCSTR</b> <i>pszTitle</i>: A pointer to a string or a resource identifier to use as the title instead of the title stored in the dialog template.<br><br></li>
<li>
<b>DLGPROC</b> <i>pfnDlgProc</i>: The dialog procedure that controls the page.<br><br></li>
<li>
<b>LPARAM</b> <i>lParam</i>: Application-defined data that can be used to store dialog-specific data.<br><br></li>
<li>
<b>CALLBACK</b> <b>*</b> <i>pfnCallback</i>: The procedure to be called when the property sheet is destroyed. This callback must return a nonzero value.<br><br></li>
<li>
<b>UINT FAR</b> * <i>pcRefParent</i>: A pointer to the reference count for the property sheet.</li>
</ul>
<h4>PROPSHEETHEADER</h4>
<pre><code>typedef struct _PROPSHEETHEADER {
  DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwSize;
  DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwFlags;
  HWND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwndParent;
  HINSTANCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hInstance;
union {
 &nbsp;&nbsp;&nbsp;&nbsp; HICON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hIcon;
 &nbsp;&nbsp;&nbsp;&nbsp; LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszIcon;
  };
  LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pszCaption;
  UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPages;
union {
 &nbsp;&nbsp;&nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nStartPage;
 &nbsp;&nbsp;&nbsp;&nbsp; LPCSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pStartPage;&nbsp; // PSH_USEPSTARTPAGE: name of page or string id
  };
union {
LPCPROPSHEETPAGE ppsp;
HPROPSHEETPAGE FAR *phpage;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADER, FAR *LPPROPSHEETHEADER;
</code></pre>
<p>
The <b>PROPSHEETHEADER</b> structure describes a property sheet. The structure has the following members:
<ul type=disc>
<li>
<b>DWORD</b> <i>dwSize</i>: The size of the structure. This member should be initialized to <b>sizeof(PROPSHEETHEADER)</b>. It is used as a method of version checking to allow for future enhancements.<br><br></li>
<li>
<b>DWORD</b> <i>dwFlags</i>: A combination of flags that determine the look and behavior of the property sheet. These flags indicate which of the other fields in this structure are valid.<p class=tl>
PSH_DEFAULT: Use the default meaning for all structure members.</P><p class=tl>
PSH_MULTILINETABS: Support multiline tabs.</P><p class=tl>
PSH_NOAPPLYNOW: Hide the Apply Now button.</P><p class=tl>
PSH_PROPSHEETPAGE: Use property sheet pages rather than an array or page handles.</P><p class=tl>
PSH_PROPTITLE: Use the string referred to by <i>pszTitle</i> as the title string.</P><p class=tl>
PSH_USECALLBACK: Use the callback procedure specified in the <i>pfnCallback</i> member.</P><p class=tl>
PSH_USEHICON: Use the handle to the icon specified by the <i>hIcon</i> field for the caption of the property sheet dialog.</P><p class=tl>
PSH_USEICONID: Use the <i>pszIcon</i> field for the string or resource identifier for the icon.</P><p class=tl>
PSH_USEPSTARTPAGE: Use the <i>pStartPage</i> member as the initial page.</P><p class=tl>
PSH_WIZARD: This property sheet is a wizard.</P></li>
<li>
<b>HWND</b> <i>hwndParent</i>: The handle to the parent window of the property sheet. The property sheet itself is a modal dialog box, so this window is disabled when the property sheet is active.<br><br></li>
<li>
<b>HINSTANCE</b> <i>hInstance</i>: The instance to use if resource loading is required. This member must be initialized if <i>pszIcon</i> or <i>pszCaption</i> identifies a resource to load.<br><br></li>
<li>
<b>HICON</b> <i>hIcon</i>: The handle of the icon to use for the caption of the dialog box. The icon should be a small icon.<br><br></li>
<li>
<b>LPCSTR</b> <i>pStartPage</i>: The name of the page or the string identifier for the page to use as the initial page.<br><br></li>
<li>
<b>LPCSTR</b> <i>pszIcon</i>: The identifier of the icon resource to load and use in the caption of the dialog box.<br><br></li>
<li>
<b>LPCSTR</b> <i>pszCaption</i>: A pointer to a null-terminated string or a string identifier to use in the caption of the dialog box. A string in the form "Properties for &lt;pszCaption&gt;" is displayed in the tab.<br><br></li>
<li>
<b>UINT</b> <i>nPages</i>: The number of pages in the property sheet.<br><br></li>
<li>
<b>UINT</b> <i>nStartPage</i>: The zero-based index of the page to be selected initially.<br><br></li>
<li>
<b>LPCPROPSHEETPAGE</b> <i>ppsp</i>: A pointer to an array of <b>PROPSHEETPAGE</b> structures.<br><br></li>
<li>
<b>HPROPSHEETPAGE FAR</b> *<i>phpage</i>: A pointer to an array of <b>HPROPSHEETPAGE</b> handles. The order of this array defines the order of the pages. These pages are guaranteed to be destroyed in the reverse order specified here, so one page can add dependent pages.</li>
</ul>
<h3>Property Sheet Functions</h3>
<p>
Windows provides three new functions to manage property sheets and their pages. This section lists these new functions, their parameters, and return values.</p>
<h4>CreatePropertySheetPage</h4>
<pre><code>HPROPSHEETPAGE CreatePropertySheetPage(LPCPROPSHEETPAGE lppsp);
</code></pre>
<p>
<b>Description:</b> The <b>CreatePropertySheetPage</b> function creates a new page for a property sheet. An application uses this function to create a property sheet that includes the new page, or it uses the PSM_ADDPAGE message to add the new page to an existing property sheet. </p>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>lppsp</i>: The address of a <b>PROPSHEETPAGE</b> structure describing the page to be included in a property sheet. </li>
</ul>
<p>
<b>Return value:</b> The handle of the new property sheet if successful; NULL otherwise.</p>
<h4>DestroyPropertySheetPage</h4>
<pre><code>BOOL DestroyPropertySheetPage(HPROPSHEETPAGE hPSPage);
</code></pre>
<p>
<b>Description:</b> The <b>DestroyPropertySheetPage</b> function destroys a property sheet page. An application must call this function for pages that have been created with the <b>CreatePropertySheetPage</b> function. </p>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>hPSPage</i>: Handle of the property sheet page to delete.</li>
</ul>
<p>
<b>Return value:</b> TRUE if successful; FALSE otherwise.</p>
<h4>PropertySheet</h4>
<pre><code>int PropertySheet(LPCPROPSHEETHEADER lppsph);
</code></pre>
<p>
<b>Description:</b> The <b>PropertySheet</b> function creates a property sheet and adds the pages defined in the <b>PROPSHEETHEADER</b> structure. </p>
<p>
<b>Parameter:</b>
<ul type=disc>
<li>
<i>lppsph</i>: The address of a <b>PROPSHEETHEADER</b> structure that defines the pages of a property sheet. </li>
</ul>
<p>
<b>Return value:</b> A positive value if successful; –1 otherwise. The supported return values are:
<ul type=disc>
<li>
ID_PSREBOOTSYSTEM, which means that a page sent the PSM_REBOOTSYSTEM message to the property sheet and the computer must be restarted for the user's changes to take effect.<br><br></li>
<li>
ID_PSRESTARTWINDOWS, which means that a page sent the PSM_RESTARTWINDOWS message to the property sheet and Windows must be restarted for the user's changes to take effect.</li>
</ul>
<h3>Property Sheet Messages</h3>
<p>
Windows provides 16 new messages to handle property sheets and their pages. This section details these new messages, their parameters, return values, and associated macros. Remember that property sheets are part of the new common control library—it is a good idea to call the <b>InitCommonControls</b> function to ensure that the common-control DLL has been loaded before sending any of these messages.</p>
<h4>PSM_ADDPAGE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (HPROPSHEETPAGE)hPage;&nbsp;&nbsp; \\ handle of the page to add
</code></pre>
<p>
<b>Description:</b> The PSM_ADDPAGE message adds a page to the end of an existing property sheet. Note that the property sheet will not resize dynamically added pages. If you must add a page, make sure that its size is no larger than the maximum size already in use. Since the size of the property sheet cannot change after it has been created, the new page must be no larger than the largest page currently in the property sheet. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the handle of the page to add.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_AddPage</b>(<i>hPropSheetDlg</i>, <i>hPage</i>);</p>
<h4>PSM_APPLY</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_APPLY message is sent to the property sheet to simulate clicking the Apply Now button. This message returns TRUE if and only if every page successfully saved its information.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> TRUE if every page successfully saved its data; FALSE otherwise. </p>
<p>
<b>Macro:</b> (<b>BOOL</b>)<b>PropSheet_Apply</b>(<i>hPropSheetDlg</i>);</p>
<h4>PSM_CANCELTOCLOSE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_CANCELTOCLOSE message is sent when a change has been made that cannot be canceled in the property sheet (for example, a change to the registry). The Cancel button will be disabled, and the OK button label will be changed to Close.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_CancelToClose</b>(<i>hPropSheetDlg</i>);</p>
<h4>PSM_CHANGED</h4>
<pre><code>wParam = hwnd;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ handle of the page window
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_CHANGED message is sent to the property sheet when information in the page has changed. The property sheet may change the name of the page in the list of pages to italic text. The Apply Now button will also be enabled. (This button is initially disabled when a page becomes active, indicating that there are no property changes to apply yet.) When the page receives user input through one of its controls, indicating that the user has edited a property, the page should send the PSM_CHANGED message to the property sheet. If the user subsequently clicks the Apply Now or Cancel button, the page should reinitialize its controls and then send the PSM_UNCHANGED message to re-disable the Apply Now button. Sometimes, the Apply Now button causes a page to change a property sheet, and the change cannot be undone. When this happens, the page should send the PSM_CANCELTOCLOSE message to the property sheet. The message causes the property sheet to change the label of the Cancel button to Close, indicating to the user that the applied changes cannot be canceled.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the handle of the page window. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None.</p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_Changed </b>(<i>hPropSheetDlg</i>, <i>hwndPage</i>);</p>
<h4>PSM_GETTABCONTROL</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_GETTABCONTROL message gets the handle to the tab control. </p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_GetTabControl</b>(<i>hPropSheetDlg</i>);</p>
<h4>PSM_GETPAGE</h4>
<pre><code>wParam = index;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the page
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> If the user has visited (tabbed to) a page, the PSM_GETPAGE message retrieves the window handle of the dialog box for the page at the specified <i>index</i>, and returns NULL otherwise.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index of the page to retrieve. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The handle of the property page. </p>
<p>
<b>Macro:</b> (<b>HWND</b>)<b>PropSheet_GetPage</b>(<i>hPropSheetDlg</i>, <i>index</i>);</p>
<h4>PSM_PRESSBUTTON</h4>
<pre><code>wParam = iButton;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the id of the Button
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_PRESSBUTTON message causes the specified button to be “pressed.”</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the ID of the button. It can be one of the values listed below. <i>lParam</i> is not used.
<ul type=disc>
<li>
PSBTN_BACK: Press the Back button.<br><br></li>
<li>
PSBTN_NEXT: Press the Next button.<br><br></li>
<li>
PSBTN_FINISH: Press the Finish button.<br><br></li>
<li>
PSBTN_OK: Press the OK button.<br><br></li>
<li>
PSBTN_APPLYNOW: Press the Apply Now button.<br><br></li>
<li>
PSBTN_CANCEL: Press the Cancel button.<br><br></li>
<li>
PSBTN_HELP: Press the Help button.</li>
</ul>
<p>
<b>Return value:</b> None.</p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_PressButton</b>(<i>hPropSheetDlg</i>, <i>iButton</i>);</p>
<h4>PSM_QUERYSIBLINGS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELPARAM(x,y);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the new size for the tab
</code></pre>
<p>
<b>Description:</b> The PSM_QUERYSIBLINGS message is forwarded to each property sheet page until a property page returns a nonzero value, which becomes the return value of this message. This is a convenient message for passing information between property pages when the property pages don't know about one another. For example, the printer property page extensions use this message to communicate with the property sheet pages provided by the system.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are the parameters for the forwarded message.</p>
<p>
<b>Return value:</b> The return value of the forwarded message. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_QuerySiblings</b>(<i>hPropSheetDlg</i>, <i>wParam</i>, <i>lParam</i>);</p>
<h4>PSM_REBOOTSYSTEM</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_REBOOTSYSTEM message is sent when MS-DOS® needs to be restarted for the changes specified in the property sheet to take effect. The page should only send this notification in response to a PSN_APPLY or PSN_KILLACTIVE notification. Note that this notification supersedes all PSN_RESTARTWINDOWS notifications that precede or follow. This message will cause the property sheet return value to be ID_REBOOTSYSTEM if the user selects OK to close the property sheet.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_RebootSystem</b>(<i>hPropSheetDlg</i>);</p>
<h4>PSM_REMOVEPAGE</h4>
<pre><code>wParam = index;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index of the page
lParam = (HPROPSHEETPAGE)hPage;&nbsp;&nbsp; \\ the page to remove
</code></pre>
<p>
<b>Description:</b> The PSM_REMOVEPAGE message removes a page from an existing property sheet. If <i>hPage</i> is NULL or does not exist, the property sheet will remove the page at the location specified by the <i>index</i> parameter. When a page is defined, an application may specify the address of a <b>ReleasePropSheetPageProc</b> callback function that the property sheet calls when it is removing the page. Using a <b>ReleasePropSheetPageProc</b> function gives an application the opportunity to perform clean-up operations for individual pages. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index of the page. <i>lParam</i> is the handle of the page to remove.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_RemovePage</b>(<i>hPropSheetDlg</i>, <i>index</i>, <i>hPage</i>);</p>
<h4>PSM_RESTARTWINDOWS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_RESTARTWINDOWS message is sent when Windows needs to be restarted for changes specified by the property sheet to take effect. The page should only send this notification in response to a PSN_APPLY or PSN_KILLACTIVE notification. This will cause the property sheet to return ID_PSRESTARTWINDOWS if the user selects OK to close the property sheet.</p>
<p>
<b>Parameters:</b> <i>wParam</i> and <i>lParam</i> are not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_RestartWindows</b>(<i>hPropSheetDlg</i>);</p>
<h4>PSM_SETCURSEL</h4>
<pre><code>wParam = index;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ index to the tab
lParam = (HPROPSHEETPAGE)hPage;&nbsp;&nbsp; \\ the page to select
</code></pre>
<p>
<b>Description:</b> The PSM_SETCURSEL message is sent to the property sheet to change focus to a different page. If <i>hPage</i> is NULL or cannot be found, the property sheet will set the active page at location <i>index</i>.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the index to the tab. <i>lParam</i> is the page to select.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_SetCurSel</b>(<i>hPropSheetDlg</i>, <i>index</i>, <i>hPage</i>);</p>
<h4>PSM_SETCURSELID</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (int)id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the index to the tab or handle of the page
</code></pre>
<p>
<b>Description:</b> The PSM_SETCURSELID message sets the active page by the ID of the tab or the <i>hPage</i> as specified in <i>lParam</i>.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the index of the tab or the handle of the page to activate.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_SetCurSelById</b>(<i>hPropSheetDlg</i>, <i>id</i>);</p>
<h4>PSM_SETFINISHTEXT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (LPSTR)lpszText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the text of the button
</code></pre>
<p>
<b>Description:</b> The PSM_SETFINISHTEXT message enables the Finish button, hides the Back button, and sets the text on the Finish button to the text specified in <i>lParam</i>. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the text of the button.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_SetFinishText</b>(<i>hPropSheetDlg</i>, <i>lpszText</i>);</p>
<h4>PSM_SETWIZBUTTONS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (DWORD)dwFlags;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the buttons to enable
</code></pre>
<p>
<b>Description:</b> The PSM_SETWIZBUTTONS message specifies which buttons should be enabled within the wizard. It is only supported in wizard-style property sheets.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> specifies which buttons are enabled. This parameter can be a combination of the following values:
<ul type=disc>
<li>
PSWIZB_BACK: Enable the Back button.<br><br></li>
<li>
PSWIZB_NEXT: Enable the Next button.<br><br></li>
<li>
PSWIZB_FINISH: Enable the Finish button.</li>
</ul>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_SetWizButtons</b> (<i>hPropSheetDlg</i>, <i>dwFlags</i>);</p>
<h4>PSM_UNCHANGED</h4>
<pre><code>wParam = hwndPage;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ handle of the page window
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PSM_UNCHANGED message is sent to the property sheet when the information in the page has reverted to its previously saved state. The property sheet cancels any changes caused by PSM_CHANGED. The Apply Now button may be disabled if no pages with registered changes remain.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the handle of the property sheet page that has been saved. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None. </p>
<p>
<b>Macro:</b> (<b>VOID</b>)<b>PropSheet_UnChanged</b>(<i>hPropSheetDlg</i>, <i>hwndPage</i>);</p>
<h2>Summary</h2>
<p>
This article marks the end of my series on the new Win32 common controls. I must say that at this point I am tempted to simply say, "Ta-da!" However, as a parting gesture, I'll attempt a summary of what you've learned in this article.</p>
<p>
Tabs, used in conjunction with property sheets, provide an efficient means of displaying the properties of objects and allowing the user to change these properties. Property sheets are best used in areas where you previously used a stack of cascading modal dialog boxes. Property sheets give the user the ability to go back and forth among logical groupings of properties instead of having to save changes individually. Because property sheets are so simple to implement, they are a good candidate to add to the list of changes that you, the application developer, are undoubtedly planning to make to take advantage of the new built-in features of Windows 95.</p>
<p>
So there you have it. TADA.WAV!</p>
</BODY>
</HTML>

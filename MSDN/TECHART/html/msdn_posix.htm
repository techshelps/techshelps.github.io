<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Windows NT POSIX Compatibility</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_posix"></a></sup>Understanding Windows NT POSIX Compatibility</h1>
<p>
Ray Cort<br>
Microsoft Corporate Technology Team</p>
<p>
Created:&nbsp; May/June 1993</p>
<h2>Abstract</h2>
<p>
This article will discuss the following topics:
<ul type=disc>
<li>
What is POSIX?<br><br></li>
<li>
Implementation in Windows NT™<br><br></li>
<li>
Application conformance<br><br></li>
<li>
Verification and conformance<br><br></li>
<li>
Windows NT POSIX files<br><br></li>
<li>
Running POSIX applications<br><br></li>
<li>
Restrictions on POSIX applications</li>
</ul>
<h2>What Is POSIX?</h2>
<p>
POSIX stands for <i>Portable Operating System Interface</i> for computing environments. POSIX began as an effort by the IEEE community to promote the portability of applications across UNIX® environments by developing a clear, consistent, and unambiguous set of standards. However, POSIX is not limited to the UNIX environment. It can also be implemented on non-UNIX operating systems, as was done with the IEEE Standard 1003.1-1990 (POSIX.1) Implementation on Virtual Memory System (VMS), Multiprogramming Executive (MPE), and the Conversion Technology Operating System (CTOS). POSIX actually consists of a set of standards that range from POSIX.1 to POSIX.12.</p>
<p>
As the following table shows, most of these standards are still in the proposal state. This article deals with the Microsoft® Windows NT™ implementation of a POSIX subsystem to support the international ISO/IEC IS 9945-1:1990 standard (also called POSIX.1). POSIX.1 defines a C language source code-level application programming interface (API) to an operating system environment.</p>
<p class=label>
<b>Family of POSIX standards</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b><br>
Standard</b></td>
<td class=label width=15%><b>ISO<br>
Standard?</b></td>
<td class=label width=72%><b><br>
Description</b></td>
</tr>
<tr valign=top>
<td width=13%>POSIX.0</td>
<td width=15%>No</td>
<td width=72%>A Guide to POSIX Open Systems Environment. This is not a standard in the same sense as POSIX.1 or POSIX.2. It is more of an introduction and overview of the other standards.</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.1</td>
<td width=15%>Yes</td>
<td width=72%>Systems API (C Language)</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.2</td>
<td width=15%>No</td>
<td width=72%>Shell and tools (IEEE-approved standard)</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.3</td>
<td width=15%>No</td>
<td width=72%>Testing and verification</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.4</td>
<td width=15%>No</td>
<td width=72%>Real-time and threads</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.5</td>
<td width=15%>Yes</td>
<td width=72%>ADA language bindings to POSIX.1</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.6</td>
<td width=15%>No</td>
<td width=72%>System security</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.7</td>
<td width=15%>No</td>
<td width=72%>System administration</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.8</td>
<td width=15%>No</td>
<td width=72%>Networking<br>
Transparent file access<br>
Protocol-independent network interface<br>
Remote Procedure Calls (RPC)<br>
Open system interconnect protocol-dependent<br>
  application interfaces</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.9</td>
<td width=15%>Yes</td>
<td width=72%>FORTRAN language bindings to POSIX.1</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.10</td>
<td width=15%>No</td>
<td width=72%>Super-computing Application Environment Profile (AEP)</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.11</td>
<td width=15%>No</td>
<td width=72%>Transaction Processing AEP</td>
</tr>
<tr valign=top>
<td width=13%>POSIX.12</td>
<td width=15%>No</td>
<td width=72%>Graphical user interface</td>
</tr>
</table><br>
<h3>POSIX Implementation in Windows NT</h3>
<p>
The POSIX subsystem is implemented in Windows NT as a protected server (Figure 1). POSIX applications communicate with the POSIX subsystem through a message-passing facility in the Executive known as a Local Procedure Call (LPC).</p>
<p>
<img src="posix_1.gif" border=0></p>
<p class=label>
<b>Figure 1. POSIX subsystem in Windows NT</b></p>
<p>
The POSIX subsystem, as well as each POSIX application, runs in its own protected address space that protects it from any other application that might be running on Windows NT. POSIX applications are preemptively multitasked with respect to each other and to other applications running in the system.</p>
<h4>POSIX conformance</h4>
<p>
For a system to be given a certificate of POSIX.1 conformance, it must meet the following requirements:
<ul type=disc>
<li>
The system must support all of the interfaces as defined in the ISO/IEC 9945-1.<br><br></li>
<li>
The vendor must supply a POSIX.1 Conformance Document (PCD) with their implementation as specified in ISP/IEC 9945-1.<br><br></li>
<li>
The implementation must pass the appropriate National Institute of Standards and Technology (NIST) test suite.</li>
</ul>
<h3>Application Compliance to POSIX.1</h3>
<p>
Many people talk about a "POSIX-compliant" application, but what does that really mean? For POSIX.1, there are four categories of compliance, ranging from a very strict compliance to a very loose compliance. The various categories are outlined in the following subsections.</p>
<h4>Strictly conforming POSIX.1 applications</h4>
<p>
A strictly conforming POSIX.1 application (Figure 2) requires only the facilities described in the POSIX.1 standard and applicable language standards. This type of application accepts the following:
<ul type=disc>
<li>
Any behavior described in ISO/IEC 9945-1 as unspecified or implementation-defined.<br><br></li>
<li>
Symbolic constants.<br><br></li>
<li>
Any value in the range permitted by ISO/IEC 9945-1.</li>
</ul>
<p>
<img src="posix_2.gif" border=0></p>
<p class=label>
<b>Figure 2.</b></p>
<p>
This is the strictest level of application conformance. Applications at this level should be able to move across implementations with just a recompilation. At the time of this writing, the only language interface that has been standardized for POSIX.1 is the C language interface. (As shown in Figure 2, a strictly conforming POSIX application can use 110 calls from the standard C libraries.)</p>
<h4>Applications conforming to ISO/IEC and POSIX.1</h4>
<p>
An ISO/IEC-conforming POSIX.1 application (Figure 3) is one that uses only the facilities described in ISO/IEC 9945-1 and approved conforming language bindings for ISO or IEC standards. This type of application must include a statement of conformance that documents all options and limit dependencies, and all other ISO or IEC standards used.</p>
<p>
<img src="posix_3.gif" border=0></p>
<p class=label>
<b>Figure 3.</b></p>
<p>
This level of conformance is not as strict as the previous one for two reasons. First, it allows a POSIX.1 application to make use of other ISO or IEC standards, such as Graphical Kernel System (GKS). Second, it allows POSIX.1 applications within this level to require options or limit values beyond the minimum. For example, such an application could require that the implementation support filenames of at least 16 characters. The POSIX.1 minimum is 14 characters.</p>
<h4>Applications conforming to POSIX.1 and &lt;<i>National Body</i>&gt;</h4>
<p>
A<i> &lt;National Body&gt;</i>–conforming POSIX.1 application (Figure 4) differs from an ISO/IEC-conforming POSIX.1 application because this type of application may also use specific standards of a single ISO/IEC organization, such as the American National Standards Institute (ANSI) or British Standards Institute (BSI). This type of application must include a statement of conformance that documents all options and limit dependencies, and all other &lt;<i>National Body</i>&gt; standards used.</p>
<p>
<img src="posix_4.gif" border=0></p>
<p class=label>
<b>Figure 4.</b></p>
<p>
For example, you could have a &lt;<i>National Body</i>&gt;–conforming POSIX application that used calls from a BSI-standard set of calls.</p>
<h4>POSIX.1-conforming applications that use extensions</h4>
<p>
A conforming POSIX.1 application using extensions (Figure 5) is an application that differs from a conforming POSIX.1 application only because it uses nonstandard facilities that are consistent with ISO/IEC 9945-1. Such an application must fully document its requirements for these extended facilities.</p>
<p>
<img src="posix_5.gif" border=0></p>
<p class=label>
<b>Figure 5.</b></p>
<p>
This is the lowest level of conformance; almost any C program could satisfy this with the appropriate documentation.</p>
<p>
This current release of Windows NT supports strictly conforming POSIX.1 applications, and ISO/IEC-conforming POSIX.1 applications. Windows NT supports the latter because only 110 of the 149 functions of standard C are part of POSIX.1, and standard C is itself an ISO standard (ISO/IEC 9899).</p>
<h4>Conformance testing</h4>
<p>
Windows NT is in the process of being verified for POSIX.1 conformance, and will be submitted to NIST for the Federal Information Processing Standards Publication (FIPS) 151-2 certification. FIPS 151-2 incorporates POSIX.1 as a reference standard and also requires a number of the optional features defined in POSIX.1 to promote application portability among conforming implementations. An implementation that conforms to FIPS 151-2 also conforms to POSIX.1. Note that conformance is specific to the manufacturer, hardware platform, and model number on which the implementation is tested.</p>
<h3>Running POSIX Applications</h3>
<p>
POSIX applications can be started from a Windows NT console window (command prompt), File Manager, Program Manager, or by invocation from within another POSIX application.</p>
<h4>The POSIX files</h4>
<p>
The following files are required to support the POSIX subsystem and run POSIX applications:
<ul type=disc>
<li>
PSXSS.EXE, the POSIX subsystem server<br><br></li>
<li>
PSXDLL.DLL, the POSIX dynamic-link library<br><br></li>
<li>
POSIX.EXE, the POSIX console session manager</li>
</ul>
<h4>File systems</h4>
<p>
POSIX requires a certain amount of functionality from the file system, such as the ability for a file to have more than one name (or <i>hard links</i>), and case-sensitive file naming. Neither FAT nor HPFS supports these features, which is another reason why a new file system was required for Windows NT. NTFS supports both hard links and case-sensitive naming. If you want to run in a POSIX-conforming environment, you need at least one NTFS disk partition on your computer.</p>
<p>
You can run POSIX applications from any Windows NT file system. If the application does not need to access the file system, the application will run with no problems. However, if the application does require access to the file system, there is no way to guarantee that it will behave correctly on a non-NTFS disk partition.</p>
<h4>Bypass traverse checking</h4>
<p>
By default, when you install Windows NT for the first time, the user right "Bypass traverse checking" is granted to everyone. This right allows a user to change directories through a directory tree even if the user has no permission for those directories.</p>
<p>
If you want to run in a POSIX-conforming environment, you must disable this privilege for your account by using either the User Manager or User Manager for Domains tool as follows (you must be an administrator to do this):
<ol>
<li>
Select the account.<br><br></li>
<li>
Choose User Rights from the Policies menu to display the dialog box in Figure 6. Be sure the Show Advanced User Rights check box is marked.<br><br></li>
<li>
Specify the Bypass traverse checking right.<br><br></li>
<li>
Choose Remove.</li>
</ol>
<p>
<img src="posix_6.gif" border=0></p>
<p class=label>
<b>Figure 6.</b></p>
<h4>Printing</h4>
<p>
The POSIX subsystem itself does not directly support printing, but Windows NT supports redirection and piping between subsystems. If your POSIX application writes to stdout, and you have connected or redirected either your serial or parallel ports to a printer, you can redirect the output of a POSIX application to that printer. For example, the following sequence of commands will send the output of a POSIX application that writes to stdout, to a network printer:</p>
<pre><code>NET USE LPT1: \\MYSERVER\PRINTER
POSIXAPP.EXE &gt; LPT1:
</code></pre>
<h4>Network access</h4>
<p>
The POSIX.1 specification does not have a requirement for access to remote file systems, but as with any of the other subsystems, the POSIX subsystem and POSIX applications have transparent access to any Win32™ remotely connected file system.</p>
<h4>Communicating with other subsystems</h4>
<p>
Windows NT supports a common command processor that can execute commands from any of the subsystem. Furthermore, Windows NT supports the piping of input and output between commands of different subsystems. So, it is possible to do the following:</p>
<p>
Windows NT supports a common command processor that can run commands from any of the subsystems. In addition, Windows NT supports piped input and output between commands of different subsystems. For example, you could type the following command to list the contents of the current directory, then pipe the results through the <b>more</b> command to the console:</p>
<pre><code>ls -l | more
</code></pre>
<p>
The <b>ls</b> utility is implemented in the POSIX subsystem and generates output as shown in Figure 7.</p>
<p>
<img src="posix_7.gif" border=0></p>
<p class=label>
<b>Figure 7.</b></p>
<p>
Figure 8 illustrates how a POSIX application interacts with other components of the Windows NT operating system.</p>
<p>
<img src="posix_8.gif" border=0></p>
<p class=label>
<b>Figure 8.</b></p>
<p>
A certain amount of functionality can be gained by using a single command shell of Windows NT. From a programming point of view, although not elegant, it is possible to put a Win32 graphical front-end on a POSIX application by using the redirection of stdin and stdout.</p>
<h4>Restrictions on POSIX applications</h4>
<p>
With this release of Windows NT, POSIX applications have no direct access to any of the facilities and features of the Win32 subsystem, such as memory-mapped files, networking, graphics, or dynamic data exchange.</p>
<h3>Further Information</h3>
<p>
For further information on the POSIX standards, contact either or both of the following resources.</p>
<p>
For information on POSIX.1 (ANSI/IEEE 1003.1-1990, ISO/IEC 9945-1:1990):</p>
<p>
Publication Sales<br>
IEEE Service Center<br>
P.O. Box 1331<br>
445 Hoes Lane<br>
Piscataway, NJ 08855-1331</p>
<p>
For information on other POSIX standards:</p>
<p>
IEEE Computer Society<br>
Attention: Assistant Director/Standards<br>
1730 Massachusetts Ave. NW<br>
Washington, DC 20036</p>
</BODY>
</HTML>

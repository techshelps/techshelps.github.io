<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rotating Messages with the ActiveX Timer and Text Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_nctxt"></a></sup>Rotating Messages with the ActiveX Timer and Text Controls</h1>
<p>
Steve Kirk<br>
Microsoft Developer Network Technology Group</p>
<p>
July 27, 1996</p>
<h3>Contents</h3>
<p>
<a href="#nctxtintro">Introduction</a><br>
<a href="#nctxtobject">Creating Instances of the Objects</a><br>
<a href="#nctxtscript">Creating the Script</a><br>
<a href="#nctxtref">Text Control Events, Methods, and Properties</a></p>
<h2>Abstract</h2>
<p>
This article explains how the ActiveX™ Text control can be used with the ActiveX Timer control and Microsoft® Visual Basic® Scripting Edition (VBScript) to create a continuously changing text message.</p>
<h2><a name="nctxtintro"></a>Introduction</h2>
<p>
In this article, we'll explain how to cycle a text object, randomly, through a series of stored messages by implementing ActiveX objects and Visual Basic Scripting Edition. We will first create instances of the ActiveX Timer and Text objects in Hypertext Markup Language (HTML) and initialize the properties of the objects. We will then add VBScript code to the HTML page to store data and to provide methods for the ActiveX objects.</p>
<p>
To complete this example, you will need the ActiveX Text and Timer controls, which can be found in the Microsoft ActiveX SDK (the ActiveX SDK can be downloaded from the SDK section of the <i>MSDN Online</i> Web site at <a href="http://www.microsoft.com/msdn/">http://www.microsoft.com/msdn/</a>), and a scripting language such as Microsoft Visual Basic Scripting Edition or Netscape Communications JavaScript. In this example, we will be using Visual Basic Scripting Edition as our scripting language.</p>
<h2><a name="nctxtobject"></a>Creating Instances of the Objects</h2>
<p>
The following HTML code fragment creates the ActiveX Text control and initializes its properties. Using the HTML &lt;OBJECT&gt; tag, we define this object as <b>txtFactoid</b> and indicate that it will be an ActiveX Text control by specifying its class ID. (The class ID can be obtained from the registry or the type library of the control, or it can be generated by the ActiveX Control Pad, available from <a href="http://www.microsoft.com/workshop/author/cpad/">http://www.microsoft.com/workshop/author/cpad/.</a>) We also set properties to determine the size and font of the Text control using the &lt;PARAM&gt; tag.</p>
<pre><code>&lt;OBJECT ID="txtFactoid" WIDTH=130 HEIGHT=130
CLASSID="CLSID:8BD21D10-EC42-11CE-9E0D-00AA006002F3"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="VariousPropertyBits" VALUE="-1400879085"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="ScrollBars" VALUE="2"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="Size" VALUE="6350;3457"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="SpecialEffect" VALUE="0"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="FontName" VALUE="Garamond"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="FontCharSet" VALUE="0"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="FontPitchAndFamily" VALUE="2"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="FontWeight" VALUE="0"&gt;
 &nbsp;&nbsp; &lt;PARAM NAME="FontHeight" VALUE="200"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
The next piece of code is the &lt;OBJECT&gt; tag for the ActiveX Timer object. The key properties are the class ID, which identifies this object as an ActiveX Timer, the interval, which specifies how often (in milliseconds) the timer fires, and the object ID, which is used to associate this timer with the VBScript subroutine that is called each time the timer fires.</p>
<pre><code>&lt;OBJECT ID="tmrFactoid" WIDTH=0 HEIGHT=0
CLASSID="CLSID:59CCB4A0-727D-11CF-AC36-00AA00A47DD2"&gt;
 &nbsp; &lt;PARAM NAME="Interval" VALUE="2000"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
(For more information on the ActiveX Timer control, see <a href="msdn_nctmr.htm">"Creating a Slide Show Using the ActiveX Timer Control"</a>.)</p>
<h2><a name="nctxtscript"></a>Creating the Script</h2>
<p>
The following VBScript code is placed between the &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags on the HTML page. The first statement dimensions an array to hold the strings for the various titles. Strings are then assigned to the elements of the array: </p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
dim strFactoids(14)
strFactoids(0) = "Scientists have…" 
'lines for elements (1) to (13) skipped here
strFactoids(14) = "Jojoba, a shrub related to boxwood…"
</code></pre>
<p>
In Visual Basic Scripting Edition, the Web page is an implied object called <b>Window</b>, and one of its events is the <b>Load</b> event. The link between object events and the corresponding VBScript code is a naming convention that combines the object ID with the event, separated by an underscore. Following this convention, we can see that subroutine <b>Window_Onload</b> will be called when the Web page loads. Subroutine <b>Window_OnLoad</b> first calls <b>Randomize</b>, to initialize the seed number for the <b>RND</b> function, then calls <b>SetFactoid</b> to initialize <b>txtFactoid</b>:</p>
<pre><code>sub Window_Onload()
'Init random number sequence
Randomize
'Set inital value of txtFactoid
Call SetFactoid
end sub
</code></pre>
<p>
Subroutine <b>tmrFactoid_Timer</b> is called when the <b>Timer</b> event for the Timer object <b>tmrFactoid</b> occurs. Note that the <b>interval</b> property of <b>tmrFactoid</b> determines how often, in milliseconds, this event happens:</p>
<pre><code>Sub tmrFactoid_Timer()
Call SetFactoid
end sub
</code></pre>
<p>
The final subroutine, <b>SetFactoid</b>, picks one of the text strings stored in the <b>strFactoid()</b> array and uses it to set the value property of <b>txtFactoid</b>:</p>
<pre><code>Sub SetFactoid()
 &nbsp; txtFactoid.Locked = False
 &nbsp; txtFactoid.Value = strFactoids(Int((UBound(strFactoids) + 1) * Rnd))
end sub
</code></pre>
<h2><a name="nctxtref"></a>Text Control Events, Methods, and Properties</h2>
<p>
The tables below list the events, methods, and properties supported by the Text control. For a similar listing for the ActiveX Timer control, please see <a href="msdn_nctmr.htm">"Creating a Slide Show Using the ActiveX Timer Control"</a>.</p>
<p class=label>
<b>Table 1. ActiveX Text Control Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Event</b></td>
<td class=label width=69%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%>AfterUpdate</td>
<td width=69%>Occurs after data in a control is changed through the user interface.</td>
</tr>
<tr valign=top>
<td width=31%>BeforeDragOver</td>
<td width=69%>Occurs when a drag-and-drop operation is in progress.</td>
</tr>
<tr valign=top>
<td width=31%>BeforeDropOrPaste</td>
<td width=69%>Occurs when the user is about to drop or paste data onto an object.</td>
</tr>
<tr valign=top>
<td width=31%>BeforeUpdate</td>
<td width=69%>Occurs before data in a control is changed.</td>
</tr>
<tr valign=top>
<td width=31%>Change</td>
<td width=69%>Occurs when the Value property changes.</td>
</tr>
<tr valign=top>
<td width=31%>DblClick</td>
<td width=69%>Occurs when the user points to an object and then clicks a mouse button twice.</td>
</tr>
<tr valign=top>
<td width=31%>Enter, Exit</td>
<td width=69%><b>Enter</b> occurs before a control actually receives the focus from a control on the same HTML layout. <b>Exit</b> occurs immediately before a control loses the focus to another control on the same HTML layout.</td>
</tr>
<tr valign=top>
<td width=31%>Error</td>
<td width=69%>Occurs when a control detects an error and cannot return the error information to a calling program.</td>
</tr>
<tr valign=top>
<td width=31%>KeyDown, KeyUp</td>
<td width=69%>Occur in sequence when a user presses and releases a key. <b>KeyDown</b> occurs when the user presses a key. <b>KeyUp</b> occurs when the user releases a key.</td>
</tr>
<tr valign=top>
<td width=31%>KeyPress</td>
<td width=69%>Occurs when the user presses an ANSI key.</td>
</tr>
<tr valign=top>
<td width=31%>MouseDown, MouseUp</td>
<td width=69%>Occur when the user clicks a mouse button. <b>MouseDown</b> occurs when the user presses the mouse button; <b>MouseUp</b> occurs when the user releases the mouse button.</td>
</tr>
<tr valign=top>
<td width=31%>MouseMove</td>
<td width=69%>Occurs when the user moves the mouse.</td>
</tr>
</table><br>
<p class=label>
<b>Table 2. ActiveX Text Control Methods</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Method</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%>Copy</td>
<td width=70%>Copies the contents of the control to the Clipboard.</td>
</tr>
<tr valign=top>
<td width=30%>Cut</td>
<td width=70%>Removes selected information from the control and transfers it to the Clipboard.</td>
</tr>
<tr valign=top>
<td width=30%>GetFromClipboard, GetText</td>
<td width=70%><b>GetFromClipboard</b> moves data from the Clipboard to the control. <b>GetText</b> retrieves a text string from the Clipboard using a specified format.</td>
</tr>
<tr valign=top>
<td width=30%>Move</td>
<td width=70%>Moves the control.</td>
</tr>
<tr valign=top>
<td width=30%>Paste</td>
<td width=70%>Transfers the contents of the Clipboard to the control.</td>
</tr>
<tr valign=top>
<td width=30%>PutInClipboard</td>
<td width=70%>Moves data from the control to the Clipboard.</td>
</tr>
<tr valign=top>
<td width=30%>SetFocus</td>
<td width=70%>Moves the focus to the control.</td>
</tr>
<tr valign=top>
<td width=30%>StartDrag</td>
<td width=70%>Initiates a drag-and-drop operation for the control. </td>
</tr>
<tr valign=top>
<td width=30%>Zorder</td>
<td width=70%>Places the control at the front or back of the z order.</td>
</tr>
</table><br>
<p class=label>
<b>Table 3. ActiveX Text Control Properties</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Property</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%>AutoSize</td>
<td width=70%>Specifies whether the control automatically resizes to display its entire contents.</td>
</tr>
<tr valign=top>
<td width=30%>AutoTab</td>
<td width=70%>Specifies whether an automatic tab occurs when a user enters the maximum allowable number of characters into the control.<p>
Values:</p>
<p>
<i>True</i>: Tab occurs.</p>
<p>
<i>False</i>: Tab does not occur (default).</p>
</td>
</tr>
<tr valign=top>
<td width=30%>AutoWordSelect</td>
<td width=70%>Specifies whether a word or a character is the basic unit used to extend a selection.<p>
Values:</p>
<p>
<i>True</i>: Uses a word as the basic unit (default).</p>
<p>
<i>False</i>: Uses a character as the basic unit.</p>
</td>
</tr>
<tr valign=top>
<td width=30%>BackColor</td>
<td width=70%>Specifies the background color of the control.</td>
</tr>
<tr valign=top>
<td width=30%>BackStyle</td>
<td width=70%>Control background style.<p>
Constants, values, and descriptions:</p>
<p>
fmBackStyleTransparent, value: 0—The background is transparent.</p>
<p>
fmBackStyleOpaque, value: 1—The background is opaque (default).</p>
</td>
</tr>
<tr valign=top>
<td width=30%>BorderColor</td>
<td width=70%>Specifies the color of the control’s border.</td>
</tr>
<tr valign=top>
<td width=30%>BorderStyle</td>
<td width=70%>Specifies the type of border used by the control.<p>
Constants, values, and descriptions:</p>
<p>
fmBorderStyleNone, value: 0—The control has no visible border line.</p>
<p>
fmBorderStyleSingle, value: 1—The control has a single-line border (default).</p>
</td>
</tr>
<tr valign=top>
<td width=30%>CodeBase</td>
<td width=70%>Specifies the URL of the control’s Component Object Model (COM) object.</td>
</tr>
<tr valign=top>
<td width=30%>DragBehavior</td>
<td width=70%>Specifies whether the system enables the drag-and-drop feature for the control.</td>
</tr>
<tr valign=top>
<td width=30%>Enabled</td>
<td width=70%>Specifies whether the control can receive the focus and respond to user-generated events.</td>
</tr>
<tr valign=top>
<td width=30%>EnterFieldBehavior</td>
<td width=70%>Specifies the selection behavior when entering the control.<p>
Constants, values, and descriptions:</p>
<p>
fmEnterFieldBehaviorSelectAll, value: 0—Selects the entire contents of the edit region when entering the control (default).</p>
<p>
fmEnterFieldBehaviorRecallSelection, value: 1—Leaves the selection unchanged. Visually, this uses the selection that was in effect the last time the control was active.</p>
</td>
</tr>
<tr valign=top>
<td width=30%>EnterKeyBehavior</td>
<td width=70%>Defines the effect of pressing <small>enter</small>.<p>
Values:</p>
<p>
<i>True</i>: Pressing <small>enter</small> creates a new line.</p>
<p>
<i>False</i>: Pressing <small>enter</small> moves the focus to the next object in the tab order (default).</p>
</td>
</tr>
<tr valign=top>
<td width=30%>Font</td>
<td width=70%>Defines the characteristics of the text used by the control.</td>
</tr>
<tr valign=top>
<td width=30%>ForeColor</td>
<td width=70%>Foreground color of the control.</td>
</tr>
<tr valign=top>
<td width=30%>Height</td>
<td width=70%>Height, in points, of the control.</td>
</tr>
<tr valign=top>
<td width=30%>HideSelection</td>
<td width=70%>Specifies whether selected text remains highlighted when the control does not have the focus.</td>
</tr>
<tr valign=top>
<td width=30%>ID</td>
<td width=70%>The name of the control.</td>
</tr>
<tr valign=top>
<td width=30%>IMEMode</td>
<td width=70%>Specifies the default run-time mode of the Input Method Editor (IME) for a control. This property applies only to applications written for the Far East and is ignored in other applications.<p>
Constants, values, and descriptions:</p>
<p>
fmIMEModeNoOp, value: 0—Does not control IME (default).</p>
<p>
fmIMEModeOn, value: 1—IME on.</p>
<p>
fmIMEModeOff, value: 2—IME off. English mode.</p>
<p>
fmIMEModeDisable, value: 3—IME off. User can't turn on IME by keyboard.</p>
<p>
fmIMEModeHiragana, value: 4—IME on with full-width Hiragana mode.</p>
<p>
fmIMEModeKatakanaDbl, value: 5—IME on with full-width Katakana mode.</p>
<p>
fmIMEModeKatakanaSng, value: 6—IME on with half-width Katakana mode.</p>
<p>
fmIMEModeAlphaDbl, value: 7—IME on with full-width alphanumeric mode.</p>
<p>
fmIMEModeAlphaSng, value: 8—IME on with half-width alphanumeric mode.</p>
</td>
</tr>
<tr valign=top>
<td width=30%>IntegralHeight</td>
<td width=70%>Indicates whether the control displays full lines of text in a list or partial lines.</td>
</tr>
<tr valign=top>
<td width=30%>Left</td>
<td width=70%>The distance between the control and the left or top edge of the HTML layout that contains it.</td>
</tr>
<tr valign=top>
<td width=30%>Locked</td>
<td width=70%>Specifies whether text can be edited.</td>
</tr>
<tr valign=top>
<td width=30%>MaxLength</td>
<td width=70%>Specifies the maximum number of characters a user can enter in the control.</td>
</tr>
<tr valign=top>
<td width=30%>MouseIcon</td>
<td width=70%>Assigns a custom icon to the control.</td>
</tr>
<tr valign=top>
<td width=30%>MousePointer</td>
<td width=70%>Specifies the type of pointer displayed when the user positions the mouse over the control.</td>
</tr>
<tr valign=top>
<td width=30%>MultiLine</td>
<td width=70%>Specifies whether the control can accept and display multiple lines of text.</td>
</tr>
<tr valign=top>
<td width=30%>PasswordChar</td>
<td width=70%>Specifies whether placeholder characters are displayed instead of the characters actually entered in control.</td>
</tr>
<tr valign=top>
<td width=30%>ScrollBars</td>
<td width=70%>Specifies whether a control, form, or page has vertical scroll bars, horizontal scroll bars, or both.</td>
</tr>
<tr valign=top>
<td width=30%>SelectionMargin</td>
<td width=70%>Specifies whether the user can select a line of text by clicking in the region to the left of the text.</td>
</tr>
<tr valign=top>
<td width=30%>SpecialEffect</td>
<td width=70%>Specifies the visual appearance of control.<p>
Constants, values, and descriptions:</p>
<p>
fmSpecialEffectFlat, value: 0—Object appears flat, distinguished from the surrounding form by a border, a change of color, or both. Default for Image and Label, valid for all controls.</p>
<p>
fmSpecialEffectRaised, value: 1—Object has a highlight on the top and left and a shadow on the bottom and right. Not valid for check boxes or option buttons.</p>
<p>
fmSpecialEffectSunken, value: 2—Object has a shadow on the top and left and a highlight on the bottom and right. The control and its border appear to be carved into the form that contains them. Default for CheckBox and OptionButton, valid for all controls (default).</p>
<p>
fmSpecialEffectEtched, value: 3—Border appears to be carved around the edge of the control. Not valid for check boxes or option buttons.</p>
<p>
fmSpecialEffectBump, value: 6—Object has a ridge on the bottom and right and appears flat on the top and left. Not valid for check boxes or option buttons.</p>
</td>
</tr>
<tr valign=top>
<td width=30%>TabIndex</td>
<td width=70%>Specifies the position of the control object in the HTML layout's tab order.</td>
</tr>
<tr valign=top>
<td width=30%>TabKeyBehavior</td>
<td width=70%>Determines whether tabs are allowed in the edit region<p>
Values:</p>
<p>
<i>True</i>: Pressing TAB inserts a tab character in the edit region.</p>
<p>
<i>False</i>: Pressing TAB moves the focus to the next object in the tab order (default).</p>
</td>
</tr>
<tr valign=top>
<td width=30%>TabStop</td>
<td width=70%>Indicates whether the control can receive focus when the user tabs to it.</td>
</tr>
<tr valign=top>
<td width=30%>Text</td>
<td width=70%>The actual text value of the control.</td>
</tr>
<tr valign=top>
<td width=30%>TextAlign</td>
<td width=70%>Specifies how text is aligned in the control.<p>
Constants, values, and descriptions:</p>
<p>
fmTextAlignLeft, value: 1—Aligns the first character of displayed text with the left edge of the control's display or edit area (default).</p>
<p>
fmTextAlignCenter, value: 2—Centers the text in the control's display or edit area.</p>
<p>
fmTextAlignRight, value: 3—Aligns the last character of displayed text with the right edge of the control's display</p>
</td>
</tr>
<tr valign=top>
<td width=30%>Top</td>
<td width=70%>The distance between the control and the top edge of the HTML Layout that contains it.</td>
</tr>
<tr valign=top>
<td width=30%>Value</td>
<td width=70%>The text content of the control.</td>
</tr>
<tr valign=top>
<td width=30%>Visible</td>
<td width=70%>Specifies whether the control is visible or hidden.</td>
</tr>
<tr valign=top>
<td width=30%>Width</td>
<td width=70%>Width, in points, of the control.</td>
</tr>
<tr valign=top>
<td width=30%>WordWrap</td>
<td width=70%>Indicates whether the contents of the control automatically wrap at the end of a line.</td>
</tr>
</table><br>
</BODY>
</HTML>

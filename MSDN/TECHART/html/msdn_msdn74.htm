<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 74: Scrolling Through Two List Box Controls Simultaneously</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn74"></a></sup>Tip 74: Scrolling Through Two List Box Controls Simultaneously</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
You can add code to your Visual Basic® application to allow a user to scroll through the contents of two separate <b>List Box</b> controls at the same time. This article explains how you can add this functionality to your program.</p>
<h2>The TopIndex Property of List Box Controls</h2>
<p>
When using a <b>List Box</b> control, the user can click the mouse on the scroll bar to move up or down the list of items. If the user clicks the mouse on an individual item, that item is said to be <i>selected</i>. The <b>ListIndex</b> property is a unique value that represents the selected item's position within the <b>List Box</b>.</p>
<p>
You can also scroll through a <b>List Box</b> control by using the <b>TopIndex</b> property. This property, however, can only be changed at run time, not during design time. The <b>TopIndex</b> property moves you through the items in the <b>List Box</b> control. In other words, it works just as if the user had used the scroll bar.</p>
<p>
Let's assume that you have two <b>List Box</b> controls on a form in your Visual Basic® application. As you scroll through the items in the first <b>List Box</b> control, you want to also scroll through the same items in the second <b>List Box</b> control.</p>
<p>
In an application, you can use the <b>TopIndex</b> property to move a specific item in the <b>List Box</b> control so that that item appears at the top of the <b>List Box</b>. The following statement, for example, moves the third item in the <b>List Box</b> to the top of the control:</p>
<pre><code>List1.TopIndex = (2)
</code></pre>
<p>
In the example program below, we want to scroll through both <b>List Box</b> controls at the same time. To do this, we use a <b>Timer</b> control so that the second <b>List Box</b> control is updated as soon as the item is selected in the first <b>List Box</b> control.</p>
<p>
We first use a static variable—that is, a variable whose contents do not change when we exit a procedure—to keep track of the currently selected item in the first <b>List Box</b>. Each time a new item is selected in the <b>List Box</b>, this variable is set to that item's <b>TopIndex</b> value.</p>
<p>
Next, we set the <b>ListIndex</b> property of the second <b>List Box</b> control equal to that of the first <b>List Box</b> control. This highlights the two items in each <b>List Box</b> that have the same <b>ListIndex</b> value. It doesn't matter what the actual item is—the items are both selected based on their position within the controls.</p>
<p>
Each time you select an item in the first <b>List Box</b>, that same item is also selected in the second <b>List Box</b>.</p>
<h2>Example Program</h2>
<p>
This example program shows how to scroll through the contents of two <b>List Box</b> controls simultaneously.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1:<pre><code>Option Explicit
DefInt A-Z
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 'Initialize two list boxes with alphabet
 &nbsp;&nbsp; For X = 1 To 26
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem Chr$(X + 64)
 &nbsp;&nbsp; Next X
 &nbsp;&nbsp; For X = 1 To 26
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.AddItem Chr$(X + 64)
 &nbsp;&nbsp; Next X
 &nbsp;&nbsp; timer1.Interval = 1
 &nbsp;&nbsp; timer1.Enabled = True
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.<br><br></li>
<li>
Add a second <b>List Box</b> control to Form1. List2 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; End
End Sub
</code></pre>
</li>
<li>
Add a <b>Timer</b> control to Form1. Timer1 is created by default.<br><br></li>
<li>
Add the following code to the Timer1 event for Timer1:<pre><code>Private Sub timer1_Timer()
 &nbsp;&nbsp; Static PrevList1
 &nbsp;&nbsp; Dim TopIndex_List1 As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; 'Get the index for the first item in the visible list.
 &nbsp;&nbsp; TopIndex_List1 = List1.TopIndex
 &nbsp;&nbsp; 
 &nbsp;&nbsp; 'See if top index has changed.
 &nbsp;&nbsp; If TopIndex_List1 &lt;&gt; PrevList1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Set the top index of List2 equal to List1,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'so that the list boxes scroll together.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.TopIndex = TopIndex_List1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrevList1 = TopIndex_List1
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 'Select the item in the same position in both list boxes.
 &nbsp;&nbsp; If List1.ListIndex &lt;&gt; List2.ListIndex Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.ListIndex = List1.ListIndex
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
<h2>Additional Information</h2>
<p>
This article expands upon and is intended to replace Knowledge Base article Q103809.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the Schedule+ 7.0 Object Library: SPL 7.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_mapspl95"></a></sup>Mapping the Schedule+ 7.0 Object Library: SPL 7.0</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
December 18, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4539">
</OBJECT><a href="javascript:sample1.Click()">Click here for a diagram of the Schedule+ 7.0 Object Library in various graphics formats.</a></p>
<h2>Abstract</h2>
<p>
This article presents a graphic map of the Microsoft® Schedule+ 7.0 Object Library (SPL), showing its properties, methods, and child objects. This type library manipulates the Schedule+ OLE Automation server. Any Microsoft Visual Basic®-based language (Access Basic, Visual Basic, and Visual Basic for Applications) and Visual C++® can access the SPL server.</p>
<h2>The Microsoft Schedule+ 95 Type Library</h2>
<p>
The Microsoft® Schedule+ 95 Object Library (SPL) allows the developer to manipulate the Schedule+ OLE Automation server. This server can be viewed in three different ways. The view described by the type library is outlined in this article; the other views are described in the other two mapping articles listed in the bibliography. </p>
<p>
The SPL assumes that the Microsoft Exchange Server Beta 2 or later version of Schedule+ is installed. The SPL will not bind with the earlier versions of Schedule+ (including the version shipped with Microsoft Office 95). Whatever version of Schedule+ you are using, you should include the SPL because it provides constants for Schedule+ OLE Automation and templates for methods and properties in the Object Browser.</p>
<p>
The SPL does not show Schedule+ tables such as <b>Contacts,</b> <b>Appointments,</b> <b>Tasks</b>, or <b>Events.</b> You can get these tables through the <b>Schedule</b> object's <b>Properties</b> method. Note that you cannot use the SPL as the sole source of information (as can be done with other type libraries); you must refer to the Schedule+ Software Development Kit (SDK) documentation and other sources. My other extended mapping articles on the Schedule+ server, listed in the bibliography, are a good starting point. For a general introduction to OLE Automation, see <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> For an introduction to Schedule+ OLE Automation, see "Schedule+&nbsp; OLE Automation" in the <i>Microsoft Developer Network News</i> and <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a></p>
<p>
Figure 1 shows the relationship between objects as described by the Object Browser in Microsoft Visual Basic®. A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with the objects: I just post the three appropriate extended maps for Schedule+ on my wall for quick reference, which is a lot faster than clicking objects in a Help file one by one to discover their properties and methods.</p>
<p>
Because the figure is difficult to read online, I have included the two most common graphics formats—encapsulated PostScript™ (.EPS) and Windows® metafile (.WMF)—as well as a copy of the original Shapeware® Visio™ version 4.0 file (.VSD). The first two formats can be opened and the figure printed across multiple pages using Microsoft Excel or a commercial graphics application such as Adobe™ PageMaker™, CorelDRAW®, or Microsoft Publisher. The original Visio file is included for those who wish to modify the diagram easily.</p>
<p>
<img src="mapspl95_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Microsoft Schedule+ 7.0 Object Library </b></p>
<p>
Following are some of the characteristics of Schedule+ OLE Automation that are different from other OLE Automation servers.
<ul type=disc>
<li>
Schedule+ is a single-document interface (SDI) and not a multiple-document interface (MDI). The <b>Visible</b> property applies to each document (<b>Schedule</b> object) and not to the application.<br><br></li>
<li>
The <b>Application</b> object does not have a graphical user interface (GUI) equivalent.<br><br></li>
<li>
There are no localized versions of the SPL, nor is Schedule+ OLE Automation localized. Even if you are using a localized version of Schedule+, you must use the English OLE Automation words (with or without a type library).<br><br></li>
<li>
Properties that are not initialized may be reported as error 450,"Wrong number of arguments or invalid property assignment", or as an "OLE Automation error". The following code shows the error:<pre><code>Dim SPlusApplication as Object
On Error Resume Next
Set SPlusApplication = CreateObject("SchedulePlus.Application")
Debug.Print SPlusApplication.UserName&nbsp; 'Not logged on
Debug.Print Err.Number,Err.Description
'Reports: -2147219351&nbsp;&nbsp; OLE Automation error
SPlusApplication.Logon
Debug.Print SPlusApplication.UserName&nbsp; 'Logged on
'Reports KenL
</code></pre>
</li>
<li>
Item objects have many <b>Property</b> objects. The <b>Property</b> objects that are initialized are enumerated by the <b>Properties</b> method. The <b>Properties </b>method is overloaded.<ul type=disc>
<li>
<b>Item.Properties</b> returns a count of the number of initialized properties.<br><br></li>
<li>
<b>Item.Properties</b>(idx%) returns a <b>Property</b> object.</li>
</ul>
</li>
</ul>
<p>
The following routine illustrates the use of <b>Table</b>, <b>Item</b>, and <b>Property</b> objects. An <b>Item</b> object (or <b>Schedule </b>object) is passed to the routine, which then enumerates the <b>Property</b> objects, <b>Table </b>objects, and the first <b>Item</b> object of each <b>Table </b>object. This process is done by recursion to each <b>Item </b>object found. Three tables (<b>Appointments</b>, <b>Events</b>, and <b>Tasks</b>) are merged <b>Table</b> objects that require special handling. A merged <b>Table</b> object requires the object to be set to a range before all of the properties of the <b>Table </b>object are valid.</p>
<pre><code>Sub DebugItem(AnItem As Object, Optional indent)
Dim i%, j%, ind%
If IsMissing(indent) Then
 &nbsp;&nbsp; ind% = 0
Else
 &nbsp;&nbsp; ind% = Val(indent)
End If
If ind &lt; 1 Then ind = 1
If TypeName(AnItem) &lt;&gt; "Item" Then Debug.Print "Not an 'Item'": Exit Sub
For i% = 0 To AnItem.Properties - 1
 &nbsp;&nbsp; Debug.Print Space(ind); AnItem.Properties(i%).Name
 &nbsp;&nbsp; If TypeName(AnItem.Properties(i%)) = "Table" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If AnItem.Properties(i%).Name = "Appointments" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Or AnItem.Properties(i%).Name = "Events" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Or AnItem.Properties(i%).Name = "Tasks" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AnItem.Properties(i%).SetRange Now - 365, Now + 365
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AnItem.Reset
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print Space(ind); "Table with "; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AnItem.Properties(i%).Rows; " rows"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If AnItem.Properties(i%).Rows = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print Space(ind); String(20, "-")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DebugItem AnItem.Properties(i%).Item, (ind% + 2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; If AnItem.Properties(i%).Count = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print Space(ind); _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "="; AnItem.Properties(i%).Value
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For j% = 0 To AnItem.Properties(i%).Count - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print Space(ind); "="; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AnItem.Properties(i%).Value(j%)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next j%
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End If
Next i%
End Sub
</code></pre>
<p>
<b>Value</b> is the default property of the <b>Property</b> object. The properties shown in Figure 1 are data members on the objects and not <b>Property</b> objects. When you use SPL, <b>Property</b> objects may be obtained only by using the <b>Properties</b> method. The <b>TypeName</b> function can be used to illustrate this confusion, as shown in the examples in Table 1.</p>
<p class=label>
<b>Table 1. Examples of the Confusion Possible with the Properties Property</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=55%><b>Command</b></td>
<td class=label width=45%><b>Reports</b></td>
</tr>
<tr valign=top>
<td width=55%><pre><code>Schedule.properties(1)</code></pre>
</td>
<td width=45%><pre><code>11/30/95 8:32:02 PM</code></pre>
</td>
</tr>
<tr valign=top>
<td width=55%><pre><code>TypeName(Schedule.properties(1))</code></pre>
</td>
<td width=45%><pre><code>Property</code></pre>
</td>
</tr>
<tr valign=top>
<td width=55%><pre><code>Schedule.properties(1).value</code></pre>
</td>
<td width=45%><pre><code>11/30/95 8:32:02 PM</code></pre>
</td>
</tr>
<tr valign=top>
<td width=55%><pre><code>TypeName(Schedule.properties(1).value)</code></pre>
</td>
<td width=45%><pre><code>Date</code></pre>
</td>
</tr>
<tr valign=top>
<td width=55%><pre><code>Schedule.properties(1).class</code></pre>
</td>
<td width=45%><pre><code>7 (SPTY_DATETIME)</code></pre>
</td>
</tr>
</table><br>
<p>
The objects in Figure 1 are defined in Table 2. The objects are listed in the same sequence as they appear on the map.</p>
<p class=label>
<b>Table 2. Object Definitions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Object</b></td>
<td class=label width=77%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=23%><b>Application</b> object</td>
<td width=77%>Reports information about the SDI application.</td>
</tr>
<tr valign=top>
<td width=23%><b>Schedule</b> object</td>
<td width=77%>Represents one schedule in the <b>Application</b> object. This is also an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=23%><b>Table</b> object</td>
<td width=77%>Represents a table of <b>Item</b> records storing information. It is not a collection.</td>
</tr>
<tr valign=top>
<td width=23%><b>Item</b> object</td>
<td width=77%>Represents an object that may be a <b>Property</b> or a <b>Table</b>.</td>
</tr>
<tr valign=top>
<td width=23%><b>Property</b> object</td>
<td width=77%>Represents information about a characteristic of an object. Multiple values may be stored in one <b>Property</b> object (see <b>Count</b> to determine number). </td>
</tr>
</table><br>
<h2>Bibliography</h2>
<p>
Lassesen, Ken. <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschpm.htm">"Mapping the Schedule+ OLE Automation Server: Programming Model."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. "Schedule+ OLE Automation." <i>Developer Network News</i> 5 (January/February 1996) (MSDN Library, Periodicals, Microsoft Developer Network News, 1996 Volume 5)</p>
<p>
Lassesen, Ken. <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> (MSDN Library, Technical Articles)</p>
<p>
Microsoft Exchange Server SDK. <i>Microsoft Schedule+ Programmer's Reference</i>. (MSDN Library, Platform, SDK, and DDK Documentation)</p>
</BODY>
</HTML>

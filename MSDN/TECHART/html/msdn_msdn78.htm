<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 78: Retrieving the Names of All Printers</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn78"></a></sup>Tip 78: Retrieving the Names of All Printers</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
When Windows® is executed, it uses the WIN.INI initialization file to determine what printer is attached to the computer system. This article explains how to determine the names of all printers as stored in the Devices section of the WIN.INI file.</p>
<h2>Populating a List Box Control with Printer Names</h2>
<p>
You can retrieve the names of all printers attached to the computer system by using the Windows® application programming interface (API) <b>GetProfileString</b> function. To declare this function in your Visual Basic® application, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your program:</p>
<pre><code>Private Declare Function GetProfileString Lib "Kernel" (ByVal lpAppName
 &nbsp; As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal 
 &nbsp; lpReturnedString As String, ByVal nSize As Integer) As Integer
</code></pre>
<p>
(Note that this <b>Declare</b> statement must be typed as a single line of code.)</p>
<p>
The <b>GetProfileString</b> function requires five arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=24%><i>lpAppName</i></td>
<td width=76%>A string containing the section name. Not case-sensitive.</td>
</tr>
<tr valign=top>
<td width=24%><i>lpKeyName</i></td>
<td width=76%>A string containing the entry name to retrieve. Not case-sensitive. If this is a long value set to zero, a list of all entries found in the specified section will be returned in <i>lpReturnedString</i>.</td>
</tr>
<tr valign=top>
<td width=24%><i>lpDefault</i></td>
<td width=76%>A string containing the default value to return if no entry is found.</td>
</tr>
<tr valign=top>
<td width=24%><i>lpReturnedString</i></td>
<td width=76%>A string buffer that will hold the information the function retrieves.</td>
</tr>
<tr valign=top>
<td width=24%><i>nSize</i></td>
<td width=76%>An integer value set to the maximum number of characters to be stored in <i>lpReturnedString</i>.</td>
</tr>
</table><br>
<p>
Calling the <b>GetProfileString</b> function returns an integer value. This value is a count of the number of characters that were stored in the <i>lpReturnedString</i> buffer, but does not include the terminating NULL byte. (Each entry returned in <i>lpReturnedString</i> is terminated by a NULL character.) When your program is retrieving more than a single entry, the last entry in the buffer is marked with two consecutive NULL bytes to signal the end of the list.</p>
<p>
Because we want to retrieve the names of all printers stored in the devices section of the WIN.INI file, we would execute the following statement:</p>
<pre><code>RetVal = GetProfileString(Section, 0&amp;, "", Buffer, Len(Buffer))
</code></pre>
<p>
This tells the <b>GetProfileString</b> function to retrieve all entries stored in the "devices" section of WIN.INI (notice the <i>0&amp;</i> argument to tell the function to provide us with a list of the entries).</p>
<h2>Example Program</h2>
<p>
The example program below populates a <b>List Box </b>control with the names of all printers attached to the computer system.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statement to the General Declarations section of Form1 (note that this <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetProfileString Lib "Kernel" (ByVal lpAppName As 
  String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal 
  lpReturnedString As String, ByVal nSize As Integer) As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim RetVal As Integer
 &nbsp;&nbsp; Dim Buffer As String
 &nbsp;&nbsp; Dim Section As String
 &nbsp;&nbsp; Dim Start As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Buffer = Space$(1024)
 &nbsp;&nbsp; Section = "devices"
 &nbsp;&nbsp; RetVal = GetProfileString(Section, 0&amp;, "", Buffer, Len(Buffer))
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Do Until Left$(Buffer, 1) = Chr$(0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start = InStr(Buffer, Chr$(0))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem Left$(Buffer, Start - 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Buffer = Right$(Buffer, Len(Buffer) - Start)
 &nbsp;&nbsp; Loop
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.</li>
</ol>
<h2>Additional References</h2>
<p>
"Querying Windows for Printer Information." (MSDN Library, Books and Periodicals)</p>
<p>
Knowledge Base Q105839. "Changing WIN.INI Printer Settings from VB Using Windows API."</p>
<p>
Knowledge Base Q75639. "Accessing Windows Initialization Files from Visual Basic."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 2: Detecting the Cancel Button When Using the Common Dialog Box</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn2"></a></sup>Tip 2: Detecting the Cancel Button When Using the Common Dialog Box</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
To give your programs a professional look and to make them consistent with other Microsoft® Windows®-based applications, Visual Basic® provides the common dialog control. This control allows you to include standard dialog boxes (Open, Save As, Printer, Font, Color and Help) in your application programs.</p>
<p>
When the dialog box is displayed, users can make various selections, depending on which dialog box is displayed. After users make their decisions, they click the OK command button, which returns control to your application program. Your program can then retrieve the specific values the users specified in the dialog box and use these in your program to perform some action.</p>
<p>
However, if a user clicked the Cancel command button in the dialog box, your program must be able to process this condition appropriately so that special error conditions can be monitored. The <b>CancelError</b> property of the dialog box provides a method of error-checking in your applications.</p>
<h2>Common Dialog Box Control</h2>
<p>
Using the common dialog box control is straightforward. It provides easy access to six of the most commonly used dialog boxes. Setting the <b>Action</b> property of the common dialog control tells Visual Basic which dialog box you want to display in your application. As shown below, there are six dialog boxes that are considered to be standard controls.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=61%>DLG_FILE_OPEN</td>
<td width=39%>Open</td>
</tr>
<tr valign=top>
<td width=61%>DLG_FILE_SAVE</td>
<td width=39%>Save As</td>
</tr>
<tr valign=top>
<td width=61%>DLG_COLOR</td>
<td width=39%>Color</td>
</tr>
<tr valign=top>
<td width=61%>DLG_FONT</td>
<td width=39%>Font</td>
</tr>
<tr valign=top>
<td width=61%>DLG_PRINT</td>
<td width=39%>Print</td>
</tr>
<tr valign=top>
<td width=61%>DLG_HELP</td>
<td width=39%>Help</td>
</tr>
</table><br>
<p>
Let's assume that you want to include the Color dialog box in your own application program. First, you would draw a common dialog control on your form. When your program is executed, the common dialog control is invisible. Therefore, you can place the control anywhere on your form because it won't interfere with your program's appearance. Also, note that you need only place one common dialog control on your form to call any or all of the six dialog boxes—you don't need a separate control for each type of dialog box you want to display.</p>
<p>
Next, you set the <b>Action</b> property of the common dialog control to specify which dialog box you want to use. If you want to call up the Color dialog box, for example, you would set the Action property to a value of 3.</p>
<p>
When you execute your application program, you set values for the various properties of the dialog box you are using. Once the <b>Action</b> property statement is executed at run time, the dialog box will be displayed on your form. After the user has clicked the dialog box's OK command button, your program regains control and you can test the various options the user selected in the dialog box.</p>
<p>
To prevent errors from occurring in your application, such as specifying a nonexistent color in the Color dialog box, you can use the <b>CancelError</b> property. This property lets you know if the user clicked the Cancel button on the dialog box. Each of the six dialog boxes uses the <b>CancelError</b> property. The <b>CancelError</b> property lets you set a trap for the Cancel button. When this property is set to True, Visual Basic generates an error (CDERR_CANCEL or 32755) that you can trap in your program. If CancelError is set to False, no error occurs—the dialog box simply closes and returns a NULL value.</p>
<h2>Example Program</h2>
<p>
The following program demonstrates how you can set a trap to find out if the user pressed the Cancel button of a dialog box.
<ol>
<li>
Start a new project. Form1 is created by default.<br><br></li>
<li>
Draw a common dialog control on Form1.<br><br></li>
<li>
Draw a command button on your form. Command1 is created by default.<br><br></li>
<li>
Add the following lines of code to the click event of Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; CMDialog1.CancelError = True
 &nbsp;&nbsp;&nbsp; On Error GoTo ErrButton
 &nbsp;&nbsp; CMDialog1.Flags = CC_RGBINIT Or CC_FULLOPEN
 &nbsp;&nbsp; CMDialog1.Action = 3
 &nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp; Form1.BackColor = CMDialog1.Color
ErrButton:
Exit Sub
</code></pre>
</li>
</ol>
<p>
This program displays a single command button on your form. When you click this command button, the Color dialog box is displayed. You can select a new color for the form's background color and press the OK command button. In this case, the color of Form1 will be changed to the color you selected.</p>
<p>
On the other hand, if you click the Cancel button in the Color dialog box, the program does nothing. The trap set by <b>CancelError</b> allows your application to detect when the Cancel button is pressed and to process this condition accordingly.</p>
</BODY>
</HTML>

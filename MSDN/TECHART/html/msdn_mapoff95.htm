<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the Microsoft Office 95 Object Library: MicrosoftOffice</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_mapoff95"></a></sup>Mapping the Microsoft Office 95 Object Library: MicrosoftOffice</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
October 3, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4427">
</OBJECT><a href="javascript:sample1.Click()">Click here for a diagram of the Microsoft Office 95 Object Library in various graphics formats.</a></p>
<h2>Abstract</h2>
<p>
This article consists primarily of a graphic map of the Microsoft® Office 95 Object Library (<b>MicrosoftOffice</b>), showing its properties, methods, and child object. The name of this object is misleading because it does not involve Microsoft Office at all. This object manipulates summary information in the document. The documents must be Microsoft Excel 95, Microsoft Project 95, or Binder documents <i>only</i>. Any Visual Basic®-based language (Access Basic, Visual Basic, and Visual Basic for Applications) and Visual C can access the <b>MicrosoftOffice</b> object.</p>
<h2>The Microsoft Office 95 Object</h2>
<p>
The Microsoft® Office 95 Object Library enables the developer to manipulate summary information in <i>open documents </i>that include summary information. The only documents currently supported (as of October 1995) are Microsoft Excel 95, Microsoft Project 95, and Binder documents. The developer cannot create the <b>DocumentProperties</b> object. The developer uses one of the following objects:
<ul type=disc>
<li>
<b>Excel.WorkBook.CustomDocumentProperties</b><br><br></li>
<li>
<b>Excel.WorkBook.BuiltinDocumentProperties</b><br><br></li>
<li>
<b>Binder.Section.CustomDocumentProperties</b><br><br></li>
<li>
<b>Binder.Section.BuiltinDocumentProperties</b><br><br></li>
<li>
<b>MSProject.Project.CustomDocumentProperties</b><br><br></li>
<li>
<b>MSProject.Project.BuiltinDocumentProperties</b></li>
</ul>
<p>
The Microsoft Office 95 object (<b>MicrosoftOffice</b>) is accessible from Visual C and many Visual Basic for Application–based products. These include Microsoft Excel version 5.0 and higher, Microsoft Access 95, Visual Basic® version 4.0, Microsoft Project, and Visual C++™ version 4.0. For further information on using this object, see your Microsoft Office product documentation and search the MSDN Library CD. A good starting point is my article <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a></p>
<p>
Figure 1 shows the relationship between objects as described by the Object Browser in Visual Basic for Applications and the Microsoft Office online Help files. A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with the object: I just post the appropriate map on my wall for quick reference, which is a lot faster than clicking objects in a Help file one by one to discover their properties and methods.</p>
<p>
I have included the two most common graphics formats—encapsulated PostScript™ (.EPS) and Windows® metafile (.WMF)—as well as a copy of my original Shapeware® Visio™ version 4.0 file (.VSD). The first two formats can be printed across multiple pages using any of the commercial graphics applications—such as Adobe™ PageMaker™, Corel® Draw, or Microsoft Publisher—or using Microsoft Excel. The original Visio file is included for those who have a copy of Visio and wish to modify the diagram easily.</p>
<p>
<img src="mapoff95_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Microsoft Office 95 Object</b></p>
<h3>Object Definitions</h3>
<p>
The objects and collections in Figure 1 are defined in Table 1. The objects are listed in the same sequence as they appear in the map. </p>
<p class=indent>
<B><b>Note</b></B> &nbsp;&nbsp; You cannot create an instance. This object applies to open data files supporting summary information.</p>
<p class=label>
<b>Table 1. Object and Collection Definitions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>&nbsp;&nbsp;Object or Collection</b></td>
<td class=label width=65%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=35%><b>DocumentProperties</b> collection</td>
<td width=65%>This collection contains the <b>DocumentProperty</b> objects. This is also known as the summary information.</td>
</tr>
<tr valign=top>
<td width=35%><b>DocumentProperty </b>object</td>
<td width=65%>This object represents one property in a document’s summary information.</td>
</tr>
</table><br>
<h2>Bibliography</h2>
<p>
Lassesen, Ken. <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> (MSDN Library, Technical Articles, Visual Basic Articles)</p>
<p>
"Microsoft Office Binder Visual Basic Reference" (VBA_BIN.HLP) is installed with Microsoft Office 95.</p>
</BODY>
</HTML>

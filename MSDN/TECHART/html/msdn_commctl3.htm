<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32 Common Controls, Part 3: Trackbars, Progress Bars, and Up-Down Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_commctl3"></a>Win32 Common Controls, Part 3: Trackbars, Progress Bars, and Up-Down Controls</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Developer Network Technology Group</p>
<p>
March 1994</p>
<p>
Revised: November 1994 (added new section, "Up-Down Notifications," to include information on UDN_DELTAPOS)<br>
February 1995 (addition of WM_VSCROLL message support; change in "Progress Bar Default Behavior" section)<br>
June 1995 (UDN_DELTAPOS notification is sent to the parent of the control, not to the control)</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2307">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the Slider sample application for this technical article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2308">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the Progress sample application for this technical article.</a></p>
<p>
<OBJECT id=sample3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2309">
</OBJECT><a href="javascript:sample3.Click()">Click to open or copy the files in the Updown sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
The next release of the Microsoft® Windows® operating system (called Windows 95) presents a new set of common controls to developers of Windows-based applications. These controls are provided in a new dynamic-link library (DLL) called COMCTL32.DLL. The controls allow developers to integrate existing applications into the new Windows 95 shell more thoroughly and seamlessly. COMCTL32.DLL is included with Windows 95 and will also be supported in Win32s® (running on Windows version 3.1) and in Windows NT™. Note that these controls are 32-bit only—they will not be supported in 16-bit Windows environments. </p>
<p>
This article describes three new common controls: trackbars, progress bars, and up-down controls. It is the third in a series of articles introducing the new common controls. The other articles in the series cover the following topics:
<ul type=disc>
<li>
<a href="msdn_commctl1.htm">Part 1: The basics</a><br><br></li>
<li>
<a href="msdn_commctl2.htm">Part 2: Status bars and toolbars</a><br><br></li>
<li>
<a href="msdn_commctl4.htm">Part 4: Header windows and list view windows</a><br><br></li>
<li>
<a href="msdn_commctl5.htm">Part 5: Image lists and tree view windows</a><br><br></li>
<li>
<a href="msdn_commctl6.htm">Part 6: Tab controls and property sheets</a></li>
</ul>
<p>
Parts 2–6 of the series have associated code samples that demonstrate the use of the Win32® common controls.</p>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;The Slider, Progress, and Updown executable files associated with this article were built and tested using the Windows 95 Preliminary Development Kit. The executables will run only on Windows 95; they will not run under Windows 3.1 or Windows NT. If you have Windows 95 installed on your computer but you have problems running these samples, copy the project files to your system using the buttons above, rebuild the project, and run the executables.</p>
<p>
Please note that this article is based on preliminary information that is subject to change before the final version of Windows 95.</p>
<h2>Trackbars</h2>
<p>
A trackbar is a horizontal window that is used as a scrolling control. A trackbar contains a slider and tick marks. When the user drags the slider to the left or to the right, the control sends WM_HSCROLL (for horizontal trackbars) and WM_VSCROLL (for vertical trackbars) messages to indicate the change in the position of the slider. The tick marks indicate how many points you can move left or right. Figure 1 shows a simple trackbar with a range of one to ten. You can create a trackbar by using the <b>CreateWindow</b> or <b>CreateWindowEx</b> function and specifying the TRACKBAR_CLASS class name. Once you have created a trackbar, you can set the minimum and maximum positions for the slider, draw tick marks, and set the selection by using trackbar messages.</p>
<p>
<img src="commctl3_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The anatomy of a trackbar</b></p>
<h3>Trackbar Styles and Default Behavior</h3>
<p>
Trackbars behave like scroll bars, and many of the styles and notifications for trackbars are similar to those of scroll bars. The styles that you can specify when creating a trackbar are listed in Table 1 below. By default, the tick marks are on the right for vertical trackbars and on the bottom for horizontal trackbars. When a user drags the slider or clicks to the right or left of the slider, the slider moves in the appropriate direction, tick by tick. In other words, scrolling is not continuous—you scroll in increments indicated by the tick marks. For example, a trackbar with 10 ticks and a range of 1–100 allows the user to scroll only in increments of 10. You can change the granularity or frequency of ticks by sending the TBM_SETTICFREQ message.</p>
<p class=label>
<b>Table 1. Trackbar Styles</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Style</b></td>
<td class=label width=71%><b>Use</b></td>
</tr>
<tr valign=top>
<td width=29%>TBS_AUTOTICKS</td>
<td width=71%>Adds tick marks when you set the range on the trackbar via the TBM_SETRANGE message.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_VERT</td>
<td width=71%>Specifies a vertical trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_HORZ</td>
<td width=71%>Specifies a horizontal trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_TOP</td>
<td width=71%>Places ticks on the top of a horizontal trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_BOTTOM</td>
<td width=71%>Places ticks on the bottom of a horizontal trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_LEFT</td>
<td width=71%>Places ticks on the left of a vertical trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_RIGHT</td>
<td width=71%>Places ticks on the right of a vertical trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_BOTH</td>
<td width=71%>Places ticks on both sides of the trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_NOTICKS</td>
<td width=71%>Specifies that no ticks will be placed on the trackbar.</td>
</tr>
<tr valign=top>
<td width=29%>TBS_ENABLESELRANGE</td>
<td width=71%>Allows you to set the range on the trackbar.</td>
</tr>
</table><br>
<p>
When you select a range for a trackbar, a blue line is drawn in the channel of the trackbar, and two arrows are drawn where the tick marks are placed to indicate the beginning and end of the selection range. The Properties for System Virtual Memory page in the Microsoft® Windows® 95 Control Panel System applet provides an example of this control. You will notice a trackbar showing the amount of virtual memory (see Figure 2). The blue line in the trackbar shows the range of the current settings.</p>
<p>
<img src="commctl3_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Trackbar with selection range</b></p>
<h3>Creating a Trackbar Window</h3>
<p>
You can create a simple trackbar window by calling the <b>CreateWindow</b> or <b>CreateWindowEx</b> function, specifying the TRACKBAR_CLASS and a combination of trackbar styles listed above. This window class is registered when the dynamic-link library for Win32 common controls (COMCTL32.DLL) is loaded. You can call the <b>InitCommonControls</b> function to ensure that the DLL is loaded.</p>
<p>
The code below creates and initializes a trackbar with standard items such as range, initial position, and selection. The first line of code shows how you would call the function.</p>
<pre><code>// An example of how to call the Create function. This call creates a 
// horizontal trackbar with the ticks on the top. The page size is set 
// to 25, the initial position of the slider is 2, the range is from 1 to
// 50, there will be 10 ticks, the selection (blue line) will go from
// the second tick to the fifth tick, and the trackbar will be redrawn.
hWndTrackBar = MyCreateTrackBar ( hWnd, TBS_AUTOTICKS | TBS_TOP, ID_TRACKBAR,
 &nbsp;&nbsp; hInstance, rclSlider, 25, 2, MAKELONG(1,50), 5, MAKELONG(5,20), TRUE);

// Function that creates a trackbar.
// Parameters:
//&nbsp;&nbsp;&nbsp; HWND hWndParent - Parent window of the trackbar.
//&nbsp;&nbsp;&nbsp; DWORD dwStyles - Window styles for the trackbar.
//&nbsp;&nbsp;&nbsp; WORD wID - ID of the trackbar.
//&nbsp;&nbsp;&nbsp; HINSTANCE hInst - Current instance.
//&nbsp;&nbsp;&nbsp; RECT rclTrack - Size and position of the trackbar.
//&nbsp;&nbsp;&nbsp; LONG lPageSize - Sets the page size; use 0 to ignore.
//&nbsp;&nbsp;&nbsp; LONG lPosition - Sets the initial position.
//&nbsp;&nbsp;&nbsp; LONG lRange - Sets the range.
//&nbsp;&nbsp;&nbsp; LONG lFreq - Sets the frequency of ticks; use 0 to ignore.
//&nbsp;&nbsp;&nbsp; LONG lSelection - Sets the selection; use 0 to ignore.
//&nbsp;&nbsp;&nbsp; BOOL bRedraw - Redraw flag: TRUE to redraw; otherwise, FALSE.
//
HWND MyCreateTrackBar ( HWND hWndParent, DWORD dwStyles, WORD wID, HINSTANCE 
 &nbsp; hInst, RECT rclTrack, LONG lPageSize, LONG lPosition, LONG lRange, 
 &nbsp; LONG lFreq, LONG lSelection, BOOL bRedraw)
{
  HWND hWndSlider;

  // Create the trackbar.
  hWndSlider&nbsp; = CreateWindowEx(
 &nbsp;&nbsp; 0L,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No extended styles.
 &nbsp;&nbsp; TRACKBAR_CLASS,&nbsp; // Trackbar class name.
 &nbsp;&nbsp; "",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No default text.
 &nbsp;&nbsp; WS_CHILD | WS_VISIBLE | dwStyles,&nbsp;&nbsp; // Window styles.
 &nbsp;&nbsp; rclTrack.x, rclTrack.y, rclTrack.cx, rclTrack.cy,&nbsp;&nbsp; // Size and position.
 &nbsp;&nbsp; hWndParent,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Parent window handle.
 &nbsp;&nbsp; (HMENU)wID,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ID for the trackbar.
 &nbsp;&nbsp; hInst,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Current instance.
 &nbsp;&nbsp; NULL);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No class data.

  if (hWndSlider == NULL)
 &nbsp;&nbsp; return NULL;

  // Set the page size.
  if (lPageSize)
 &nbsp;&nbsp;&nbsp;&nbsp; SendMessage(hWndSlider, TBM_SETPAGESIZE, 0L, lPageSize);

  // Set the tick frequency.
  if (lFreq)
 &nbsp;&nbsp;&nbsp;&nbsp; SendMessage(hWndSlider, TBM_SETTICFREQ, lFreq, 0L);

  // Set the initial range.
  SendMessage(hWndSlider, TBM_SETRANGE, FALSE, lRange);

  // Set the initial position.
  SendMessage(hWndSlider, TBM_SETPOS, FALSE, lPosition);

  // Set the selection.
  if (lSelection)
 &nbsp;&nbsp;&nbsp;&nbsp; SendMessage(hWndSlider, TBM_SETSEL, FALSE, lSelection);

  // Redraw if specified.
  if (bRedraw)
  {
 &nbsp;&nbsp;&nbsp;&nbsp; InvalidateRect(hWndSlider, NULL, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp; UpdateWindow(hWndSlider);
  }

  return hWndSlider;
}
</code></pre>
<p>
I created a small sample called Slider that demonstrates the different trackbar styles and how they work. Slider illustrates three trackbars:
<ul type=disc>
<li>
Trackbar with default styles<br><br></li>
<li>
Horizontal trackbar with tick marks on the top and a selection set<br><br></li>
<li>
Vertical trackbar with the ticks on the left</li>
</ul>
<p>
In the Slider application, the status bar at the bottom of the screen indicates the current notification being sent to the trackbar that has the keyboard focus.</p>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;The Slider executable file was built and tested using the Windows 95 Preliminary Development Kit. The executable will run only on Windows 95; it will not run under Windows 3.1 or Windows NT. If you have Windows 95 installed on your machine but you have problems running this sample, copy the project files to your system, rebuild the project, and run the executable.</p>
<p>
<OBJECT id=sample4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2310">
</OBJECT><a href="javascript:sample4.Click()">Click to open or copy the Slider project files.</a></p>
<h3>Trackbar Notification Messages</h3>
<p>
A trackbar notifies its parent window of user actions by sending WM_HSCROLL and WM_VSCROLL messages. If you are familiar with scroll bar notifications, you will be very comfortable working with trackbar notifications, which are very similar.</p>
<p>
Table 2 below lists the possible notifications that are sent to trackbar windows. In each case, the low-order word of <i>lParam</i> specifies the position of the slider, and the high-order word is the handle of the trackbar. The <i>wParam</i> parameter specifies the action.</p>
<p class=label>
<b>Table 2. Trackbar Notification Messages</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Message</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%> TB_BOTTOM</td>
<td width=75%>The user has pressed the <small>end</small> key on the keyboard.</td>
</tr>
<tr valign=top>
<td width=25%>TB_ENDTRACK</td>
<td width=75%>The user has released the mouse after dragging the slider.</td>
</tr>
<tr valign=top>
<td width=25%>TB_LINEDOWN</td>
<td width=75%>The user has pressed either <small>down arrow</small> or <small>right arrow</small> on the keyboard. Horizontal trackbars that receive this notification scroll to the right by default.</td>
</tr>
<tr valign=top>
<td width=25%>TB_LINEUP</td>
<td width=75%>The user has pressed either <small>up arrow</small> or <small>left arrow</small> on the keyboard. Horizontal trackbars that receive this notification scroll to the left by default.</td>
</tr>
<tr valign=top>
<td width=25%>TB_PAGEDOWN</td>
<td width=75%>The user has clicked to the right of the slider on a horizontal trackbar, has clicked below the slider on a vertical trackbar, or has pressed the <small>pagedown</small> key on the keyboard.</td>
</tr>
<tr valign=top>
<td width=25%>TB_PAGEUP</td>
<td width=75%>The user has clicked to the left of the slider on a horizontal trackbar, has clicked above the slider on a vertical trackbar, or has pressed the <small>pageup</small> key on the keyboard.</td>
</tr>
<tr valign=top>
<td width=25%>TB_THUMBPOSITION</td>
<td width=75%>The trackbar should move to the absolute position specified by the high-order word of <i>wParam</i> (nPos).</td>
</tr>
<tr valign=top>
<td width=25%>TB_THUMBTRACK</td>
<td width=75%>The user is dragging the slider.</td>
</tr>
<tr valign=top>
<td width=25%>TB_TOP</td>
<td width=75%>The user has pressed to <small>home</small> key on the keyboard.</td>
</tr>
</table><br>
<h3>Trackbar Messages</h3>
<p>
This section lists the messages that you can send to trackbar windows to add or remove tick marks, to set or clear selections, and to make other changes.</p>
<h4>TBM_CLEARSEL</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after selection is cleared
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_CLEARSEL message clears the current selection in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the trackbar is redrawn after the selection is cleared. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_CLEARTICS</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after tick marks are cleared
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_CLEARTICS message removes the tick marks from a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the trackbar is redrawn after the tick marks are cleared. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_GETCHANNELRECT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (LPRECT)lprc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ bounding rectangle
</code></pre>
<p>
<b>Description:</b> The TBM_GETCHANNELRECT message gets the rectangle bounding the channel that the slider slides in.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is a pointer to the bounding rectangle for the channel.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_GETLINESIZE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETLINESIZE message gets the amount to move the slider when the user presses the <small>lineup</small> or <small>linedown</small> key. The default increment is one tick.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The current line size.</p>
<h4>TBM_GETNUMTICS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETNUMTICS message gets the number of tick marks in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The number of tick marks.</p>
<h4>TBM_GETPAGESIZE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETPAGESIZE message gets the amount to move the slider when the user presses the <small>pageup</small> or <small>pagedown</small> key. The default is calculated to be the difference between the maximum range and the minimum range divided by five. </p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The current page size.</p>
<h4>TBM_GETPOS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETPOS message gets the current position of the slider in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that specifies the current position.</p>
<h4>TBM_GETPTICS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETPTICS message gets the address of the array containing the positions of tick marks for a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The address of the array.</p>
<h4>TBM_GETRANGEMAX</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETRANGEMAX message gets the maximum position for the slider in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that specifies the maximum position.</p>
<h4>TBM_GETRANGEMIN</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETRANGEMIN message gets the minimum position for the slider in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that specifies the minimum position.</p>
<h4>TBM_GETSELEND</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETSELEND message gets the ending position of the current selection in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that specifies the ending position.</p>
<h4>TBM_GETSELSTART</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETSELSTART message gets the starting position of the current selection in a trackbar.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that specifies the starting position.</p>
<h4>TBM_GETTHUMBRECT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (LPRECT)lprc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ bounding rectangle for the slider
</code></pre>
<p>
<b>Description:</b> The TBM_GETTHUMBRECT message gets the rectangle bounding the slider (thumb).</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is a pointer to the bounding rectangle for the slider.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_GETTIC</h4>
<pre><code>wParam = iTic;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ zero-based index of the tick mark
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETTIC message gets the position of a tick mark in a trackbar. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is the zero-based index identifying a tick mark. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The position of the specified tick mark. Returns –1 if <i>wParam</i> does not specify a valid index.</p>
<h4>TBM_GETTICPOS</h4>
<pre><code>wParam = iTic;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ zero-based index of the tick mark
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_GETTICPOS message gets the current physical position of a tick mark in a trackbar.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the zero-based index identifying a tick mark. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The physical position, in client coordinates, of the specified tick mark. Returns –1 if <i>wParam</i> does not specify a valid index.</p>
<h4>TBM_SETLINESIZE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = iLine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the new line size
</code></pre>
<p>
<b>Description:</b> The TBM_SETLINESIZE message sets the amount to move the slider when the user presses the <small>lineup</small> or <small>linedown</small> key. The default increment is one tick.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the new line size.</p>
<p>
<b>Return value:</b> The previous line size.</p>
<h4>TBM_SETPAGESIZE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = iPage;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the new page size
</code></pre>
<p>
<b>Description:</b> The TBM_SETPAGESIZE message sets the amount to move the slider when the user presses the <small>pageup</small> or <small>pagedown</small> key. The default is calculated to be the difference between the maximum range and the minimum range divided by five.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the new page size.</p>
<p>
<b>Return value:</b> The previous page size.</p>
<h4>TBM_SETPOS</h4>
<pre><code>wParam = (BOOL)fPosition;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to set the position
lParam = (LONG)lPosition;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new slider position
</code></pre>
<p>
<b>Description:</b> The TBM_SETPOS message sets the current position of the slider in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the message sets the slider to the position given by<i> lParam</i>. Otherwise, the message ensures that the current position is within the current range, but does not move the slider. <i>lParam</i> is the new position of the slider.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETRANGE</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw slider after range is set
lParam = MAKELONG(lMin, lMax);&nbsp; \\ minimum and maximum slider position
</code></pre>
<p>
<b>Description:</b> The TBM_SETRANGE message sets the minimum and maximum positions for the slider in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the range is set. <i>lParam</i> specifies the minimum and maximum positions for the slider.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETRANGEMAX</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw slider after range is set
lParam = lMaximum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ Maximum position for the slider
</code></pre>
<p>
<b>Description:</b> The TBM_SETRANGEMAX message sets the maximum position for the slider in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the range is set. <i>lParam</i> is the maximum position for the slider.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETRANGEMIN</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after minimum is set
lParam = lMinimum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ minimum position for the slider
</code></pre>
<p>
<b>Description:</b> The TBM_SETRANGEMIN message sets the minimum position for the slider in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the range is set. <i>lParam</i> is the minimum position for the slider.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETSEL</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after selection is set
lParam = MAKELONG(lStart, lEnd);&nbsp; \\ start and end selection positions
</code></pre>
<p>
<b>Description:</b> The TBM_SETSEL message sets the starting and ending positions of the selection in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the selection is set. <i>lParam</i> specifies the starting and ending positions for the selection.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETSELEND</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after end selection is set
lParam = lEnd;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ end selection position
</code></pre>
<p>
<b>Description:</b> The TBM_SETSELEND message sets the position of the end of the selection in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the selection is set. <i>lParam</i> is the ending position for the selection.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETSELSTART</h4>
<pre><code>wParam = (BOOL)fRedraw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ TRUE to redraw after start selection is set
lParam = lStart;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ start selection position
</code></pre>
<p>
<b>Description:</b> The TBM_SETSELSTART message sets the starting position of the current selection in a trackbar.</p>
<p>
<b>Parameters:</b> If <i>wParam</i> is TRUE, the slider is redrawn after the selection is set. <i>lParam</i> is the starting position of the selection.</p>
<p>
<b>Return value:</b> None.</p>
<h4>TBM_SETTIC</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = (LONG)lPosition;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ position of the tick mark
</code></pre>
<p>
<b>Description:</b> The TBM_SETTIC message sets the position of a tick mark in a trackbar.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> is the position of the tick mark. This parameter must specify a positive value.</p>
<p>
<b>Return value:</b> TRUE if the tick mark is set; otherwise, returns FALSE.</p>
<h4>TBM_SETTICFREQ</h4>
<pre><code>wParam = iFrequency;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ frequency of ticks to set
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The TBM_SETTICFREQ message sets the frequency of ticks in the trackbar.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the desired frequency of ticks. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> None.</p>
<h2>Progress Bars</h2>
<p>
A progress bar is a window that an application can use to indicate the progress of a lengthy operation. Progress bars are often used in setup or installation programs that copy a large number of files. The application sets the range and current position of the progress bar (similar to a scroll bar) and has the ability to advance the current position. The progress bar can include text that indicates progress either as a percentage of the entire range or as the value of the current position. Figure 3 shows a simple progress bar.</p>
<p>
<img src="commctl3_3.gif" border=0></p>
<p class=label>
<b>Figure 3. A simple progress bar</b></p>
<h3>Progress Bar Default Behavior</h3>
<p>
A progress bar displays the system highlight color to indicate the progress of an operation. The progress bar has a range and a current position. The range represents the entire duration of the operation, and the current position represents the progress that the application has made toward completing the operation. The window procedure uses the range and current position to determine the percentage of the progress bar to fill with the highlight color. By default, the minimum range of a progress bar is zero, and the maximum range is 100. The increment value is set to 10.</p>
<h3>Creating a Progress Bar Window</h3>
<p>
You can create a progress bar by using the <b>CreateWindow</b> or <b>CreateWindowEx</b> function and specifying the PROGRESS_CLASS window class. This window class is registered when the dynamic-link library (DLL) for Win32 common controls (COMCTL32.DLL) is loaded. You can call the <b>InitCommonControls</b> function to ensure that the DLL is loaded.</p>
<p>
The following code creates a simple progress bar window in the parent's window procedure. A timer is created to send messages to advance the progress bar.</p>
<pre><code>// Function that creates a progress bar.
// Parameters:
//&nbsp;&nbsp;&nbsp; HWND hWndParent - Parent window of the progress bar.
//&nbsp;&nbsp;&nbsp; RECT rclPos - Size and position of the progress bar.
//&nbsp;&nbsp;&nbsp; WORD wID - ID of the progress bar.
//&nbsp;&nbsp;&nbsp; HINSTANCE hInst - Current instance.
//&nbsp;&nbsp;&nbsp; LONG lRange - Sets the range.
//&nbsp;&nbsp;&nbsp; LONG lStep - Sets the stepping.
//
HWND MyCreateProgressBar( HWND hWndParent, RECT rclPos, WORD wID,
 &nbsp;&nbsp;&nbsp;&nbsp; HINSTANCE hInst, LONG lRange, LONG lStep)
(
  HWND hWndProgress;
 
  hWndProgress&nbsp; = CreateWindowEx(
 &nbsp;&nbsp;&nbsp;&nbsp; OL,
 &nbsp;&nbsp;&nbsp;&nbsp; PROGRESS_CLASS,
 &nbsp;&nbsp;&nbsp;&nbsp; "",
 &nbsp;&nbsp;&nbsp;&nbsp; WS_CHILD | WS_VISIBLE,
 &nbsp;&nbsp;&nbsp;&nbsp; rclPos.x, rclPos.y, rclPos.cx, rclPos,cy,
 &nbsp;&nbsp;&nbsp;&nbsp; hWndParent,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; (HMENU)wID,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; hInst,
 &nbsp;&nbsp;&nbsp;&nbsp; NULL);

  if (hWndProgress == NULL)

  // Set the range for the progress bar.
  SendMessage(hWndProgress, PBM_SETRANGE, 0L, lRange);

  // Set the step.
  SendMessage(hWndProgress, PBM_SETSTEP, lStep, 0L);

  return (hWndProgress);
}
.
.
.
RECT rcl;&nbsp;&nbsp; // Holds size of the progress bar.

switch(message)
{
 &nbsp;&nbsp; case WM_CREATE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcl.x = 10; rcl.y = 100; rcl.cx = 500; rcl.cy = 20;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWndProgress = CreateProgressBar( hWnd, rcl, ID_PROGRESS,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hInst, MAKELONG(0,20),1);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_TIMER:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (uCurrent &lt; uMax)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Increment (step) the progress bar.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(hWndProgress, PBM_STEPIT,0L,0L);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uCurrent++;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We are at the end of the range - kill the timer.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KillTimer(hWnd, 1000);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uCurrent = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; case WM_COMMAND:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch( LOWORD( wParam ))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDM_STOP:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Stop the progress indicator.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(hWndProgress, PBM_SETPOS,0L,0L);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KillTimer(hWnd, 1000);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDM_START:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uCurrent = uMin;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetTimer(hWnd, 1000, 500, NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp; }
</code></pre>
<p>
I have included a sample called Progress that demonstrates the use of a progress indicator. You can use the button below to see how it works.</p>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;The Progress executable file was built and tested using the Windows 95 Preliminary Development Kit. The executable will run only on Windows 95; it will not run under Windows 3.1 or Windows NT. If you have Windows 95 installed on your computer but you have problems running this sample, copy the project files to your system, rebuild the project, and run the executable.</p>
<p>
<OBJECT id=sample5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2311">
</OBJECT><a href="javascript:sample5.Click()">Click to open or copy the Progress project files.</a></p>
<h3>Progress Bar Messages</h3>
<p>
This section lists the messages that you can send to progress bar windows. For example, you can adjust the range to convenient integers by using the PBM_SETRANGE message and use the PBM_SETPOS message to set the current position to a specified value. These messages are also documented in the Programmer's Reference for Windows 95.</p>
<h4>PBM_DELTAPOS</h4>
<pre><code>wParam = nIncrement;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ amount to advance the position
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PBM_DELTAPOS message advances the position for a progress bar by the specified increment and redraws the bar. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is the amount to advance the position. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The previous position.</p>
<h4>PBM_SETPOS</h4>
<pre><code>wParam = nNewPos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ the new position
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PBM_SETPOS message sets the position for a progress bar and redraws it to reflect the new position. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is the new position. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The previous position.</p>
<h4>PBM_SETRANGE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELONG(nMinRange, nMaxRange); \\ minimum and maximum range values
</code></pre>
<p>
<b>Description:</b> The PBM_SETRANGE message sets the range (minimum and maximum values) for a progress bar and redraws the bar. </p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> specifies the minimum and maximum range values. By default, the minimum value is 0, and the maximum value is 100.</p>
<p>
<b>Return value:</b> The previous range values if successful; otherwise, returns 0. The low-order word of the return value specifies the previous minimum value, and the high-order word of the return value specifies the previous maximum value.</p>
<h4>PBM_SETSTEP</h4>
<pre><code>wParam = nStepInc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new step increment
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PBM_SETSTEP message specifies the step increment for a progress bar. The step increment is the amount by which the progress bar increases its position whenever it receives a PBM_STEPIT message. By default, the step increment is set to 10.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the new step increment. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The previous step increment.</p>
<h4>PBM_STEPIT</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The PBM_STEPIT message advances the position for a progress bar by the step increment and redraws it. An application sets the step increment by sending the PBM_SETSTEP message. When the position exceeds the maximum range value, this message resets the position so that the progress indicator starts over again from the beginning.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The previous position.</p>
<h2>Up-Down Controls</h2>
<p>
An up-down<i> </i>control is a small window that contains up and down arrows that the user can click to increment or decrement a value. An up-down control is similar to a scroll bar, but it consists only of arrows. (It also has a much sillier name.) You can use an up-down control alone as a simplified scroll bar, or with another control (called a <i>buddy control</i>—yet another silly name). In Figure 4, the up-down control is paired with an edit control to create a spin box; however, you can use any other type of control as the designated buddy control. When users click an arrow or use the arrow keys on the keyboard, the up-down control increments or decrements the value in the edit control. </p>
<p>
<img src="commctl3_4.gif" border=0></p>
<p class=label>
<b>Figure 4. A typical spin box</b></p>
<p>
You can create an up-down control by using the <b>CreateWindow</b> or <b>CreateWindowEx</b> function and specifying UPDOWN_CLASS for the class. To add an up-down control to a dialog box template, specify the UPDOWN_CLASS window class in your template. This window class is registered when the dynamic-link library for Win32 common controls (COMCTL32.DLL) is loaded. You can call the <b>InitCommonControls</b> function to ensure that the DLL is loaded.</p>
<p>
The range of an up-down control specifies the upper and lower bound for the position. (The position of an up-down control is the integer the user adjusts by using the up and down arrows. Unlike a scroll bar's position, the position of an up-down control is updated automatically.) The upper bound may be less than the lower bound, in which case the up arrow decrements the position and the down arrow increments it.</p>
<p>
Here are some of the things you can do to an up-down control:
<ul type=disc>
<li>
Set the minimum and maximum values for the buddy control.<br><br></li>
<li>
Set the rate at which the value is incremented.<br><br></li>
<li>
Set the numeric base for the value.</li>
</ul>
<h3>Up-Down Styles and Default Behavior</h3>
<p>
You can specify different window styles to control the characteristics of an up-down control. For example, you can change the way the up-down control positions itself relative to its buddy control, determine whether it sets the text of its buddy control, and determine whether it processes the <small>up arrow</small> and <small>down arrow</small> keys on the keyboard. </p>
<p>
Table 3 lists the window styles that you can specify for up-down controls.</p>
<p class=label>
<b>Table 3. Up-Down Window Styles</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Style</b></td>
<td class=label width=75%><b>Use</b></td>
</tr>
<tr valign=top>
<td width=25%>UDS_ALIGNLEFT</td>
<td width=75%>Aligns the up-down control on the left edge of the buddy control. The width of the buddy control is decreased to accommodate the width of the up-down control.</td>
</tr>
<tr valign=top>
<td width=25%>UDS_ALIGNRIGHT</td>
<td width=75%>Aligns the up-down control on the right edge of the buddy control. The width of the buddy control is decreased to accommodate the width of the up-down control.</td>
</tr>
<tr valign=top>
<td width=25%>UDS_ARROWKEYS</td>
<td width=75%>Intercepts the up and down arrow keys in the buddy control.</td>
</tr>
<tr valign=top>
<td width=25%>UDS_AUTOBUDDY</td>
<td width=75%>Sets the buddy control to be the previously created window control. </td>
</tr>
<tr valign=top>
<td width=25%>UDS_HORZ</td>
<td width=75%>Draws the two buttons of the up-down control side by side. If you do not specify this style, the buttons are drawn one above the other.</td>
</tr>
<tr valign=top>
<td width=25%>UDS_NOTHOUSANDS</td>
<td width=75%>Specifies that a separator should not be inserted between groups of three digits in the buddy control. By default, the separator is inserted.</td>
</tr>
<tr valign=top>
<td width=25%>UDS_SETBUDDYINT</td>
<td width=75%>Calls the <b>SetDlgItemInt</b> function to update the buddy control each time the number changes. This is handy if your buddy control is an edit control that is spinning numbers.</td>
</tr>
<tr valign=top>
<td width=25%> UDS_WRAP</td>
<td width=75%>Wraps back to the opposite limit if the user attempts to exceed the minimum/maximum limit. </td>
</tr>
</table><br>
<p>
Note that some of the styles, such as UDS_SETBUDDYINT, UDS_ALIGNLEFT, and UDS_ALIGNRIGHT, affect the up-down control's buddy control.</p>
<p>
By default, the position of the up-down control does not change if the user attempts to increment or decrement it beyond the upper or lower limit. You can change this behavior by using the UDS_WRAP style, which "wraps" the position to the opposite extreme (for example, if your range is 1–10, incrementing the position past 10 wraps it back to 1).</p>
<p>
The range of an up-down control may not exceed 32,767 positions. The range may be inverted; that is, the lower limit of the range may be greater than the upper limit. However, note that the up arrow always moves the current position toward the upper limit, and the down arrow always moves the current position toward the lower limit. If the range is zero (that is, the lower limit is equal to the upper limit) or the control is disabled, the control draws grayed arrows for both buttons.</p>
<p>
The buddy control must have the same parent as the up-down control. If the buddy control resizes, and the UDS_ALIGNLEFT or UDS_ALIGNRIGHT style is used, you must send the UDM_SETBUDDY message to re-anchor the up-down control on the appropriate border of the buddy control. The UDS_AUTOBUDDY style calls the <b>GetWindow</b> function with GW_HWNDPREV to choose the best buddy control. In the case of a dialog resource, the UDS_AUTOBUDDY style chooses the previous control listed in the resource script. If the z-order of the windows changes, sending a UDM_SETBUDDY message with a NULL handle will cause a new buddy to be selected; otherwise, the original auto-buddy choice is maintained.</p>
<p>
The UDS_ARROWKEYS style subclasses the buddy control to capture the VK_UP and VK_DOWN arrow key messages. The UDS_HORZ style draws the two buttons side by side with left and right arrows instead of up and down arrows. The only notifications that an up-down window receives are WM_HSCROLL and WM_VSCROLL notifications. UDS_HORZ sends a WM_HSCROLL message instead of a WM_VSCROLL message.</p>
<h3>Creating an Up-Down Window</h3>
<p>
The following code demonstrates how easy it is to create a spin box as part of a dialog box. Note that the Dialog Editor does not currently support spin boxes, so you will have to add this code after creating your dialog template. When the user chooses OK from the dialog box, the current selection in the spin box is retrieved and saved, and the dialog box is dismissed.</p>
<pre><code>// Function that creates a spin box.
// Parameters:
//&nbsp;&nbsp;&nbsp; DWORD dwStyles - Window styles for the up-down control.
//&nbsp;&nbsp;&nbsp; int x,y,cx,cy - Default size and position.
//&nbsp;&nbsp;&nbsp; HWND hWndParent - Parent window of the up-down control.
//&nbsp;&nbsp;&nbsp; int nID - ID of the spin box.
//&nbsp;&nbsp;&nbsp; HINSTANCE hInst - Current instance.
//&nbsp;&nbsp;&nbsp; HWND hWndBuddy - Handle to the buddy control.
//&nbsp;&nbsp;&nbsp; int nUpper, nLower, nPos - Sets the range and initial position.
//
HWND MyCreateUpDownControl(DWORD dwStyles, int x, int y, int cx, int cy, 
 &nbsp;&nbsp;&nbsp; HWND hWndParent, int nID, HINSTANCE hInst, HWND hWndBuddy, int nUpper,
 &nbsp;&nbsp;&nbsp; int nLower, int nPos )
{
  HWND hWndUpDown;

  // Create the up-down control.
  hWndUpDown = CreateWindowEx (
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0L,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No extended styles.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UPDOWN_CLASS,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Up-down window class.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No default text.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WS_CHILD | WS_BORDER | WS_VISIBLE | dwStyles, // Window styles.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x, y, cx, cy,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Size and position.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWndParent,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Handle to parent.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nID,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ID of the up-down control.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hInst,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Current instance.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No control data.

  if (hWndUpDown != NULL)
  {
 &nbsp;&nbsp; // Set the buddy control.
 &nbsp;&nbsp; SendMessage( hWndUpDown, UDM_SETBUDDY, (LONG)hWndBuddy, 0L );

 &nbsp;&nbsp; // Set the range.
 &nbsp;&nbsp; SendMessage( hWndUpDown, UDM_SETRANGE, 0L, MAKELONG(nUpper,nLower));

 &nbsp;&nbsp; // Set the initial positon.
 &nbsp; SendMessage( hWndUpDown, UDM_SETPOS, 0L, MAKELONG( nPos, 0));
  } 
  return (hWndUpDown);
}

BOOL APIENTRY Spin(
 &nbsp;&nbsp; HWND hDlg,
 &nbsp;&nbsp; UINT message,
 &nbsp;&nbsp; UINT wParam,
 &nbsp;&nbsp; LONG lParam)
{
 &nbsp;&nbsp; static HWND hWndUpDown, hWndBuddy;
 &nbsp;&nbsp; BOOL bErr;

 &nbsp;&nbsp; switch (message)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case WM_INITDIALOG:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get a handle to the edit (buddy) control.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWndBuddy = GetDlgItem(hDlg, IDE_BUDDY);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create the up-down control.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hWndUpDown = MyCreateUpDownControl(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDS_WRAP | UDS_ARROWKEYS | UDS_ALIGNRIGHT |
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDS_SETBUDDYINT, 0, 0, 8, 8, hDlg, ID_UPDOWN, hInst, hWndBuddy, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAX_SPIN,MIN_SPIN,1);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hWndUpDown)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (FALSE);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case WM_COMMAND:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (LOWORD(wParam))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDOK:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iNumLines = (int)GetDlgItemInt(hDlg, IDE_BUDDY, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;bErr, FALSE );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateRect(hWndMain, NULL, TRUE); 

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDCANCEL:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EndDialog(hDlg, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; 
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return (FALSE);&nbsp;&nbsp; 

}
</code></pre>
<p>
Now that I have shown you the steps for creating an up-down control, I can tell you about a helper function called <b>CreateUpDownControl</b> that you can use to create an up-down control. In fact, you can call the <b>CreateUpDownControl</b> function in the same way that you call <b>MyCreateUpDownControl</b> in the code above.</p>
<p>
I have included a sample called UpDown that demonstrates an up-down control used in combination with an edit control. You can click the button below to see how it works.</p>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;The UpDown executable file was built and tested using the Windows 95 Preliminary Development Kit. The executable will run only on Windows 95; it will not run under Windows 3.1 or Windows NT. If you have Windows 95 installed on your computer but you have problems running this sample, copy the project files to your system, rebuild the project, and run the executable.</p>
<p>
<OBJECT id=sample6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="2312">
</OBJECT><a href="javascript:sample6.Click()">Click to open or copy the UpDown project files.</a></p>
<h3>Up-Down Messages</h3>
<p>
You can send messages to an up-down control to get or change its attributes, its buddy control, its range, its position, and so on. An up-down control notifies its parent window whenever its position changes by sending it a WM_VSCROLL message. This section lists the messages that you can send to up-down windows.</p>
<h4>UDM_GETACCEL</h4>
<pre><code>wParam = nAccels;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ number of accelerators to get
lParam = (LPUDACCEL) aAccels;&nbsp;&nbsp; \\ array that receives the accelerator values
</code></pre>
<p>
<b>Description:</b> The UDM_GETACCEL message gets information about the accelerators for an up-down control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the number of accelerators to retrieve. If this value exceeds the number of existing accelerators, the message returns information for existing accelerators only. <i>lParam</i> is the address of an array of <b>UDACCEL</b> structures that contain the information about the accelerators. The array must have the same number of elements as the number of accelerators given by <i>wParam</i>. A <b>UDACCEL</b> structure consists of the following members:
<ul type=disc>
<li>
<b>int</b> <i>nSec</i>: Amount of elapsed time, in seconds, before the position-change increment specified by <i>nInc</i> is used.<br><br></li>
<li>
<b>int</b> <i>nInc</i>: Position-change increment to use after the time specified by <i>nSec</i> elapses.</li>
</ul>
<p>
<b>Return value:</b> The current number of accelerators for the control.</p>
<h4>UDM_GETBASE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_GETBASE message gets the current base value for an up-down control.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value in which the low-order word specifies the current base value. Returns a value of 10 for decimal and a value of 16 for hexadecimal.</p>
<h4>UDM_GETBUDDY</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_GETBUDDY message gets the handle of the current buddy control.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value in which the low-order word is the handle of the current buddy control.</p>
<h4>UDM_GETPOS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_GETPOS message gets the current position of an up-down control.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> The low-order word of the return value indicates the current position. The high-order word is nonzero if an error occurred.</p>
<h4>UDM_GETRANGE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_GETRANGE message gets the upper and lower limits for an up-down control.</p>
<p>
<b>Parameters:</b> Not used.</p>
<p>
<b>Return value:</b> A 32-bit value that contains the upper and lower limits. The low-order word is the upper limit for the control, and the high-order word is the lower limit.</p>
<h4>UDM_SETACCEL</h4>
<pre><code>wParam = nAccels;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ number of accelerators to set
lParam = (LPUDACCEL)aAccels;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ array of accelerators to set
</code></pre>
<p>
<b>Description:</b> The UDM_SETACCEL message sets the accelerators for an up-down control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the number of accelerators to set. <i>lParam</i> is the address of an array of <b>UDACCEL</b> structures that contain information about the accelerators to add. The array must have the same number of elements as the number of accelerators given by <i>wParam</i>.</p>
<p>
<b>Return value:</b> TRUE if successful, FALSE otherwise. </p>
<h4>UDM_SETBASE</h4>
<pre><code>wParam = nBase;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new base value
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_SETBASE message sets the base value for an up-down control. The base value determines whether the buddy control displays numbers in decimal or hexadecimal digits. Hexadecimal numbers are always unsigned; decimal numbers are signed. If the buddy control is a list box, the up-down control sets its current selection instead of its text.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the new base value for the control. Specify 10 for decimal and 16 for hexadecimal. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> The previous base value if successful; otherwise, returns zero.</p>
<h4>UDM_SETBUDDY</h4>
<pre><code>wParam = (HWND)hwndBuddy;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ handle of the new buddy control
lParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
</code></pre>
<p>
<b>Description:</b> The UDM_SETBUDDY message sets the buddy control for an up-down control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is the handle of the buddy control. <i>lParam</i> is not used.</p>
<p>
<b>Return value:</b> A 32-bit value in which the low-order word is the handle of the previous buddy control.</p>
<h4>UDM_SETPOS</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELONG(nPos,0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ new position for the up-down window
</code></pre>
<p>
<b>Description:</b> The UDM_SETPOS message sets the current position for an up-down control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. The high order word in <i>lParam</i> contains the new position for the control. This value should be in the range specified by the upper and lower limits for the control.</p>
<p>
<b>Return value:</b> The previous position.</p>
<h4>UDM_SETRANGE</h4>
<pre><code>wParam = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ not used
lParam = MAKELONG(nUpper, nLower);&nbsp; \\ upper and lower limits for the control
</code></pre>
<p>
<b>Description:</b> The UDM_SETRANGE message sets the upper and lower limits for an up-down control.</p>
<p>
<b>Parameters:</b> <i>wParam</i> is not used. <i>lParam</i> specifies the upper and lower limits for the control.</p>
<p>
<b>Return value:</b> None.</p>
<h2>Up-Down Notifications</h2>
<p>
The up-down control has one unique notification sent to it in the form of a WM_NOTIFY message. This notification, UDN_DELTAPOS, is sent to the parent of the up-down control when the position of the control is changing (that is, when the user has indicated a change in the value by pressing the up or down arrow). This notification is sent <i>before </i>the actual WM_VSCROLL message is sent. This gives the application a chance to view, change, or disallow the action. If the application wishes to disallow the change in the value, it returns a nonzero value in response to this notification.</p>
<p>
The structure passed to the application as part of the WM_NOTIFY message is the <b>NM_UPDOWN</b> structure. This structure consists of the following members:
<ul type=disc>
<li>
<b>NMHDR</b> <i>hdr</i>: Contains information about the notification message.<br><br></li>
<li>
<b>int</b> <i>iPos</i>: The new position after the WM_SCROLL message is processed.<br><br></li>
<li>
<b>int</b> <i>iDelta</i>: The change in position.</li>
</ul>
<h2>Summary</h2>
<p>
Now you know how to create and use three more of the new common controls that are built into Windows 95. You can finally use built-in controls for trackbars, spin boxes, and progress indicators. My next article (Part 4 of this series) will cover two controls that you probably haven't had the chance to implement yourself (isn't that special?): column headers and list view controls.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 152: Determining the Status of Virtual Keys on the Keyboard</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn152"></a></sup>Tip 152: Determining the Status of Virtual Keys on the Keyboard</h1>
<p>
September 5, 1995</p>
<h2>Abstract</h2>
<p>
Within a Microsoft® Visual Basic® application, you can determine the status of any virtual key on the keyboard. This article explains how to retrieve and set the status of virtual keys.</p>
<h2>Toggling the Status of a Specific Key on the Keyboard</h2>
<p>
In a Microsoft® Visual Basic® application, you can use the <b>GetKeyboardState</b> function to retrieve the current status of any key on the keyboard. To use this function in your program, you must add the following <b>Declare</b> statement to the General Declarations section of your form:</p>
<pre><code>Private Declare Sub GetKeyboardStateByString Lib "user32" Alias 
 &nbsp; "GetKeyboardState" (ByVal pbKeyState As String)
</code></pre>
<p>
The <b>SetKeyboardState</b> function is used to change the status of one or more keys on the keyboard. Its <b>Declare</b> statement is as follows:</p>
<pre><code>Private Declare Sub SetKeyboardStateByString Lib "user32" Alias 
 &nbsp; "SetKeyboardState" (ByVal lppbKeyState As String)
</code></pre>
<p>
Both the <b>GetKeyboardState</b> and <b>SetKeyboardState</b> functions require one argument—a buffer large enough to hold the status of all 256 virtual keys on the keyboard. Each byte in this array corresponds to one virtual key. If a toggle key, such as num lock, is off, the low-order bit of its status byte is 0. On the other hand, if the toggle key is on, the low-order bit is 1. For other virtual keys, the key is down if the high-order bit is 1, and the key is up if the high-order bit is 0.</p>
<p>
You can use the example program below to toggle the state of the num lock key. You do this by first calling the <b>GetKeyboardState</b> function to retrieve the status of all 256 virtual keys. A 256-byte string holds this information. Next, you isolate (using the <b>Mid$</b> function) the byte that corresponds to the num lock key.</p>
<p>
When you want to turn the num lock key on, you set its status to 1. Alternatively, if you want to toggle the num lock key off, you set its status to 0.</p>
<p>
The final step is to tell the operating system that you have changed the status of a virtual key on the keyboard. You do this by calling the <b>SetKeyboardState</b> function, which copies the new keyboard status array to the operating system. When the program carries out this function, the status of the num lock key is immediately changed.</p>
<h2>Example Program</h2>
<p>
This program shows how to turn the num lock key on and off.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Sub GetKeyboardStateByString Lib "user32" Alias 
 &nbsp; "GetKeyboardState" (ByVal pbKeyState As String)
Private Declare Sub SetKeyboardStateByString Lib "user32" Alias 
 &nbsp; "SetKeyboardState" (ByVal lppbKeyState As String)
Const VK_NUMLOCK = &amp;H90
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "On".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim NumLockKey As String * 256
 &nbsp;&nbsp; NumLockKey = Space$(256)
 &nbsp;&nbsp; GetKeyboardStateByString (NumLockKey)
 &nbsp;&nbsp; Mid$(NumLockKey, VK_NUMLOCK + 1, 1) = Chr$(1)
 &nbsp;&nbsp; Call SetKeyboardStateByString(NumLockKey)
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Off".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; Dim NumLockKey As String * 256
 &nbsp;&nbsp; NumLockKey = Space$(256)
 &nbsp;&nbsp; GetKeyboardStateByString (NumLockKey)
 &nbsp;&nbsp; Mid$(NumLockKey, VK_NUMLOCK + 1, 1) = Chr$(0)
 &nbsp;&nbsp; Call SetKeyboardStateByString(NumLockKey)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the On command button to turn on the num lock key. Click the Off command button to turn off the num lock key.</p>
<h2>Additional References</h2>
<p>
"GetKeyboardState." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"SetKeyboardState." (MSDN Library, SDK Documentation, Platform SDK).</p>
<p>
"Virtual-Key Codes." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

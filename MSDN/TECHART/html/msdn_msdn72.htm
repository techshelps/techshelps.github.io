<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 72: Positioning the Cursor over a Control That Receives Focus</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn72"></a></sup>Tip 72: Positioning the Cursor over a Control That Receives Focus</h1>
<p>
May 1, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Default</b> property of a <b>Command Button</b> can be used to place the focus on the control at run time. If this property is set to True, the <b>Command Button</b> receives the focus; if it is set to False, the <b>Command Button</b> does not have the focus. In addition, the <b>SetFocus</b> method can be used to shift the focus to a specific control or form. However, the mouse pointer's position is not changed. This article explains how you can position the mouse pointer over the control that has just received the focus.</p>
<h2>Using SetCursorPos to Change Cursor Position</h2>
<p>
Whenever you use the <b>SetFocus</b> method to move the focus to a different control or form, the mouse pointer's position is not changed. In many situations, it would be nice if the position of the mouse pointer could follow the control that has the focus. We can implement this feature in a Visual Basic® application by using the <b>SetCursorPos</b> function provided in the Windows® application programming interface (API). The <b>Declare</b> statement for the <b>SetCursorPos</b> function is:</p>
<pre><code>Declare Sub SetCursorPos Lib "User" (ByVal X As Integer, ByVal Y As Integer)
</code></pre>
<p>
As you can see, this function takes two arguments. The <i>X</i> argument represents the horizontal position of the cursor and the <i>Y</i> argument represents the vertical position of the cursor. To successfully move the cursor using <b>SetCursorPos</b>, you must first determine the correct coordinates to use with the function.</p>
<p>
How do we actually determine the position of a control on the screen? First, we know that the <b>Command Button</b> control has both <b>Width</b> and <b>Height</b> properties that tell us the exact size of the control; ditto for the <b>Form</b> control. To calculate the approximate coordinates of the center point of the <b>Command</b> <b>Button</b>, we can add the left position of the <b>Command Button</b> to the <b>Form</b>'s left position, and divide this value by the half the width of the <b>Command Button</b>, which gives us the center position of the <b>Command Button</b>.</p>
<p>
However, we also need to adjust the values we calculate for the width of the form's border and title bar. The final step is to divide this value we have just calculated by the <i>TwipsPerPixelX</i> and <i>TwipsPerPixelY</i> values to obtain the control's true center position on the screen. It is then a simple matter to call the <b>SetCursorPos</b> function to move the mouse pointer to this new location.</p>
<p>
Each time a control receives the focus, the GotFocus event for that control is triggered. In addition, the focus can be shifted to a control by clicking that control. In this case, the Click event is triggered. By including code that positions the mouse pointer at the center of the control in these two events, you can successfully position the cursor over any control as soon as it receives the focus.</p>
<h2>Example Program</h2>
<p>
The program below shows how to move the mouse pointer to the control that has just received the focus.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statement to the General Declarations section of Form1 (note that this <b>Declare</b> statement should be typed as one single line of code):<pre><code>Declare Sub SetCursorPos Lib "User" (ByVal X As Integer, ByVal Y As Integer)
</code></pre>
</li>
<li>
Add a <b>Label</b> control to Form1. Label1 is created by default. Set its <b>Caption</b> property to "Save Changes?"<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Yes".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Dim X As Integer, Y As Integer
 &nbsp;&nbsp; X = (Form1.Left + Command2.Left + Command2.Width / 2 + 60) /
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Screen.TwipsPerPixelX
 &nbsp;&nbsp; Y = (Form1.Top + Command2.Top + Command2.Height / 2 + 360) /
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Screen.TwipsPerPixelY
 &nbsp;&nbsp; SetCursorPos X, Y
 &nbsp;&nbsp; Command2.SetFocus
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "No".<br><br></li>
<li>
Add the following code to the GotFocus event for Command2:<pre><code>Sub Command2_GotFocus()
 &nbsp;&nbsp; Dim X As Integer, Y As Integer
 &nbsp;&nbsp; X = (Form1.Left + Command2.Left + Command2.Width / 2 + 60) /
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Screen.TwipsPerPixelX
 &nbsp;&nbsp; Y = (Form1.Top + Command2.Top + Command2.Height / 2 + 360) /
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Screen.TwipsPerPixelY
 &nbsp;&nbsp; SetCursorPos X, Y
End Sub
</code></pre>
</li>
</ol>
<p>
Run the program by pressing the F5 function key. Notice that the Yes <b>Command Button </b>has the focus. Press the TAB key once. The focus has now been placed on the No <b>Command Button</b>. In addition, the mouse pointer is positioned over the second <b>Command Button</b>.</p>
<p>
Run the program a second time. Using the mouse, click the No <b>Command Button</b>. The <b>Command Button</b> receives the focus and the mouse pointer is positioned over the button. This demonstrates that no matter which one is used to move the focus—the TAB key or the mouse—the mouse pointer can be programmed to follow control that has the focus.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversion Strategy</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="btrieve_conver"></a>Conversion Strategy</h1>
<p>
Converting an application from one database environment to another takes time, patience, and resources. Because of the differences in complexity between platforms, the conversion process would be difficult to accomplish in one step. A multiple-step conversion process provides multiple analysis points and makes the overall project development process more flexible. The strategy presented in this paper simplifies the conversion process by focusing on the different aspects of the application conversion process in stages.</p>
<p>
This strategy provides a framework you can use when converting an application from a Btrieve-based implementation to a full ODBC and structured query language (SQL) implementation that accesses Microsoft SQL Server. Converting the application in several steps creates separate checkpoints that allow you to evaluate the status and direction of the conversion process at each stage of the project life cycle. The conversion strategy addresses the following three areas:
<ul type=disc>
<li>
Creating a wrapper DLL <br><br></li>
<li>
Converting the application to ODBC and SQL<br><br></li>
<li>
Using server resources effectively</li>
</ul>
<p>
Figure 1 presents the application architecture implemented at each stage of the conversion process. The components of Figure 1 will be analyzed in detail throughout the next two sections of this paper.</p>
<p>
<img src="btrieve01.gif" border=0></p>
<p class=label>
<b>Figure 1. The application architecture</b></p>
<h3>Starting Point: Btrieve Application</h3>
<p>
Btrvapp.exe is the starting point. Btrvapp.exe is a simple data-entry and reporting application that maintains information about book titles, the publishers that own these titles, and sales information for each title. The application accesses two Btrieve files, Sales.btr and Titlepub.btr, through the Btrieve microkernel engine. The Sales.btr file contains sales information for each title, and Titlepub.btr maintains the title and publisher information for each title. Each of these files has two keys that correspond to a publisher and a Title ID. The application uses these keys to position itself within these files when it performs all searches. The application uses ISAM row-at-a-time searching techniques and result processing to perform its operations. Btrvapp.exe uses Btrieve concurrent transactions to manage the locks in the data file while information is updated, inserted, or deleted. The application performs the following operations:
<ul type=disc>
<li>
An option to search for a particular title by its TitleID. The output of the search contains details about the title, its publisher, its recent sales, and a year-to-date sales total. <br><br></li>
<li>
An option to add a title and its corresponding publisher information.<br><br></li>
<li>
An option to add sales items for a title.<br><br></li>
<li>
An option to update the year-to-date sales for all titles owned by a particular publisher. The output of the search contains details about each title affected and its new year-to-date sales total.</li>
</ul>
<h3>Stage 1: Wrapper DLL Disguises Microsoft SQL Server as Btrieve</h3>
<p>
The goal of this stage in the conversion process is to provide a layer of abstraction between the base application and Microsoft SQL Server. Using the concept of a wrapper DLL, the base application, Btrvapp.exe, will be able to access SQL Server data without modification to its code. Essentially, the wrapper will make SQL Server look like Btrieve to Btrvapp.exe. The wrapper uses Btrieve-like result set processing techniques to access two unnormalized tables, <i>bsales</i> and <i>titlepublisher</i>. These tables are structured to maintain the exact same details as the Sales.btr and Titlepub.btr files accessed by using Btrvapp.exe. Although the ODBC and SQL implementation techniques presented in the wrapper DLL are not optimal, they present an initial access methodology that is similar to Btrieve.</p>
<h3>Stage 2: A New ODBC and SQL Application That Accesses Microsoft SQL&nbsp;Server</h3>
<p>
Odbcapp.exe is a full ODBC and SQL application that accesses SQL Server data directly. It is more efficient in the way it accesses SQL Server than the techniques implemented in the wrapper DLL. The application accesses data in three normalized tables, <i>titles</i>, <i>publishers</i>, and <i>sales</i>, taking advantage of the relational model provided by SQL&nbsp;Server. Odbcapp.exe also uses several of SQL Server's performance enhancing features such as indexes, default result set SQL, and stored procedures to process result sets.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an OLE Server DLL for Localized Strings</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_accatm"></a>Using an OLE Server DLL for Localized Strings</h1>
<p>
Larry W Jordan Jr.<br>
Derik Harris<br>
Microsoft Corporation</p>
<p>
Created: August 16, 1996<br>
Revised: August 30, 1996 </p>
<p>
<i>Larry W Jordan Jr is a Senior Microsoft Access support engineer.&nbsp; His main focus is VBA,&nbsp; wizard and add-in development and Visual SourceSafe integration.</i></p>
<p>
<i>Derik Harris is a Senior Microsoft Access content engineer.&nbsp; His primary responsibility is writing, editing, and publishing Microsoft Access related material for the Microsoft Knowledge Base and the Microsoft Web site.</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4940">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the LOCALATM project files.</a></p>
<h2>Overview</h2>
<p>
This document describes how to create a custom application that allows the user to select a localized language for the user interface (UI) of a Microsoft Access database. The technique uses an in-process OLE Server dynamic link library (DLL), created using Microsoft Visual Basic version 4.0, for storing and retrieving localized strings and icons, which you can use in forms, message boxes, and other UI elements.</p>
<p>
An OLE Server DLL is necessary because Microsoft Access, unlike other programming tools such as the Microsoft Windows SDK , Microsoft Visual C++ or Microsoft Visual Basic, doesn’t have the ability to use a resource file (*.res). Using a programming tool you can create a Resource Script File (*.rc) that is compiled into a *.res file. You can then use the *.res file to identify specific language strings and elements based on the ID value of a resource.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This document assumes you have a thorough knowledge of creating and compiling an OLE Server DLL in Visual Basic version 4.0. For more information about creating OLE servers, see the documentation and samples on "Creating OLE Servers" included with Visual Basic.</p>
<h2>Introduction</h2>
<p>
In this document you will learn step-by-step how to create a Microsoft Access application similar to the Automated Teller Machine (Atm.vbp) sample application included with Visual Basic version 4.0. This process involves the following steps:
<ol>
<li>
Create the Resource Script file (*.rc) that contains localized strings.<br><br></li>
<li>
Compile the *.rc file into a resource (*.res) file using the Resource Compiler included with Visual Basic version 4.0 Professional or Enterprise Edition.<br><br></li>
<li>
Create an in-process OLE Server DLL project in Visual Basic.<br><br></li>
<li>
Create a Reference to the OLE Server DLL from the Microsoft Access database.<br><br></li>
<li>
Create procedures in the Microsoft Access database that call the OLE Server DLL using OLE Automation.</li>
</ol>
<p>
The benefit of using an OLE Server DLL is that it uses a separate *.res file which is easy to share among developers and applications. Other advantages of this technique include:
<ul type=disc>
<li>
You can use the OLE Server DLL in an early or late binding scenario.<br><br></li>
<li>
Performance is improved because strings, bitmaps, icons, and data are loaded on demand from the *.res file, instead of when a form or a module is loaded. <br><br></li>
<li>
Since localized strings are stored in a separate file, they can be used in multiple applications and modified independently.</li>
</ul>
<p>
An alternative technique is to declare the localized strings in your Microsoft Access database.</p>
<p>
For example: </p>
<pre><code>‘ ------------------------------------
‘ language specific strings
‘ ------------------------------------
Public Const ID_ENGLISH_WELCOME = "Welcome"
Public Const ID_FRENCH_WELCOME = "Bienvenue"
Public Const ID_GERMAN_WELCOME = "Willkommen"
Public Const ID_ITALIAN_WELCOME = "Benvenuti"
Public Const ID_SPANISH_WELCOME = "Bienvenido"
Public Const ID_JAPANESE_WELCOME = "Youkoso"
</code></pre>
<p>
The disadvantage of this approach is that you can’t share these localized strings among multiple Microsoft Access databases; this would require copying the localized string module to each database. </p>
<h3>Step 1: Creating The Resource Script File (*.rc)</h3>
<p>
An *.rc file is a text file that has a specific structure for assigning a text string or image file to a unique Resource ID. For example:</p>
<pre><code>//////////////////////////////////////////////////////////////////////////////
//
// AccATM32.RC Resources file for the Microsoft Access ATM sample.
//
//

//////////////////////////////////////////////////////////////////////////////
//
// Icons
//
27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRUSA.ICO"
59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRFRAN.ICO"
91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRGERM.ICO"
123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRITALY.ICO"
155&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRSPAIN.ICO"
187&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICON&nbsp; MOVEABLE PURE&nbsp;&nbsp; "CTRJAPAN.ICO"

//////////////////////////////////////////////////////////////////////////////
//
// String Table
//

STRINGTABLE DISCARDABLE 
BEGIN
 &nbsp;&nbsp; 16&nbsp;&nbsp;&nbsp;&nbsp; "Welcome"
 &nbsp;&nbsp; 17&nbsp;&nbsp;&nbsp;&nbsp; "Please enter your pin number:"
 &nbsp;&nbsp; 18&nbsp;&nbsp;&nbsp;&nbsp; "Please choose an account:"
 &nbsp;&nbsp; 19&nbsp;&nbsp;&nbsp;&nbsp; "Checking account"
 &nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp;&nbsp; "Savings Account"
 &nbsp;&nbsp; 21&nbsp;&nbsp;&nbsp;&nbsp; "Please enter an amount:"
 &nbsp;&nbsp; 22&nbsp;&nbsp;&nbsp;&nbsp; "OK"
 &nbsp;&nbsp; 23&nbsp;&nbsp;&nbsp;&nbsp; "Your transaction is being processed..."
 &nbsp;&nbsp; 24&nbsp;&nbsp;&nbsp;&nbsp; "Thank you for using our ATM"
 &nbsp;&nbsp; 25&nbsp;&nbsp;&nbsp;&nbsp; "The following amount will be withdrawn from your: Checking account"
 &nbsp;&nbsp; 26&nbsp;&nbsp;&nbsp;&nbsp; "US Dollars"
END

STRINGTABLE DISCARDABLE 
BEGIN
 &nbsp;&nbsp; 48&nbsp;&nbsp;&nbsp;&nbsp; "Bienvenue"
 &nbsp;&nbsp; 49&nbsp;&nbsp;&nbsp;&nbsp; "Veuillez entrer votre code:"
 &nbsp;&nbsp; 50&nbsp;&nbsp;&nbsp;&nbsp; "Veuillez choisir un compte:"
 &nbsp;&nbsp; 51&nbsp;&nbsp;&nbsp;&nbsp; "Compte chèque"
 &nbsp;&nbsp; 52&nbsp;&nbsp;&nbsp;&nbsp; "Compte épargne"
 &nbsp;&nbsp; 53&nbsp;&nbsp;&nbsp;&nbsp; "Veuillez entrer le montant:"
 &nbsp;&nbsp; 54&nbsp;&nbsp;&nbsp;&nbsp; "OK"
 &nbsp;&nbsp; 55&nbsp;&nbsp;&nbsp;&nbsp; "Votre transaction est en cours de traitement..."
 &nbsp;&nbsp; 56&nbsp;&nbsp;&nbsp;&nbsp; "Merci d'avoir utilisé notre guichet automatique de banque"
 &nbsp;&nbsp; 57&nbsp;&nbsp;&nbsp;&nbsp; "Le montant suivant va être débité de votre: Compte chèque"
 &nbsp;&nbsp; 58&nbsp;&nbsp;&nbsp;&nbsp; "Francs Français"
END
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This *.rc file example contains localized strings in multiple languages. For efficiency you may want to create separate *.rc files for each language.</p>
<h3>Step 2: Compiling The *.rc File Into A Resource (*.res) File</h3>
<p>
To compile the *.rc file, run the Resource Compiler (Rc.exe) from Visual Basic at a command prompt. For example:</p>
<pre><code>C:\VB\RC Accatm32.rc
</code></pre>
<p>
This creates the Accatm32.res file for you to add to your Visual Basic OLE Server DLL project.</p>
<h3>Step 3: Creating The OLE Server DLL</h3>
<p>
To create an OLE Server DLL in Visual Basic, follow these steps:
<ol>
<li>
Create a new Visual Basic Project.<br><br></li>
<li>
Add the compiled Accatm32.res file to the project.<br><br></li>
<li>
Remove the default Form1 file from the project.<br><br></li>
<li>
Add a standard module.<br><br></li>
<li>
Add a class module.<br><br></li>
<li>
Create the String and Icon functions.<br><br></li>
<li>
Set the project settings for the OLE Server DLL.<br><br></li>
<li>
Compile the project into an OLE Server DLL file.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This section does not describe each step in detail because it assumes you are familiar with creating an OLE Server DLL. The discussion is limited to those steps that require specific action to create the Automated Teller Machine sample application.&nbsp; </p>
<h4>Adding a Standard Module</h4>
<p>
Add a standard module to your project and create a Sub Main() procedure. You can leave the procedure blank since its only purpose is to meet the OLE Server DLL's requirement for a startup form.</p>
<h4>Creating the Class Module</h4>
<p>
Add a class module to your project and set its&nbsp; properties as follows:</p>
<p class=label>
<b>Table1. Class Module Properties</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=50%>Instancing</td>
<td width=50%>2-Createable - MultiUse</td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>OLEAccATM</td>
</tr>
<tr valign=top>
<td width=50%>Public</td>
<td width=50%>True</td>
</tr>
</table><br>
<h4>Creating the String and Icon Functions</h4>
<p>
The first function to add to the class module is <code>GetLocalizedResStr().</code> In Microsoft Access you use this function as a method to request a string from the resource file.</p>
<pre><code>Public Function GetLocalizedResStr(intResourceId As Integer) As Variant

 &nbsp;&nbsp; On Error GoTo GetLocalizedResStr_Err
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Dim strRes As Variant
 &nbsp;&nbsp; 
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; ' load resource string
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; strRes = LoadResString(intResourceId)
 &nbsp;&nbsp; GetLocalizedResStr = strRes

GetLocalizedResStr_End:

 &nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; 
GetLocalizedResStr_Err:

 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; ' Raise the exception
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; Err.Raise vbObjectError + 27, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "OLEAccATM.GetLocalizedResStr", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Description
 &nbsp;&nbsp; Resume GetLocalizedResStr_End
 &nbsp;&nbsp; 
End Function
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This error trapping uses the Raise method of the Err object, which is the recommended technique when building OLE Servers.</p>
<p>
In Microsoft Access, use the following code to call the method:</p>
<pre><code>Sub TestLocalizedString()

 &nbsp; ' --------------------------------------------
 &nbsp; ' instantiate the OLE Interface
 &nbsp; ' --------------------------------------------
 &nbsp; Dim objAccATM As New OLEAccATM
 &nbsp; 
 &nbsp; ' --------------------------------------------
 &nbsp; ' holds language constant
 &nbsp; ' --------------------------------------------
 &nbsp; Dim intLang As Integer
 &nbsp; 
 &nbsp; intLang = 16 ' english
 &nbsp; 
 &nbsp; MsgBox objAccATM.GetLocalizedResStr(0 + intLang)

End Sub
</code></pre>
<p>
If you call this function from the Debug window, a message box displays the word "Welcome," which comes from the resource ID of 16 in the OLE Server DLL.</p>
<p>
The second function to add to the class module is <code>GetLocalizedResIcon()</code> and is a method when called within Microsoft Access.</p>
<p>
Since Microsoft Access has no methods to load icons or bitmaps from variant data types, you can use the OLE Server DLL to extract the icon file from the compiled resource file for the requested language and save it to a disk file. You can then set the Picture property of Microsoft Access controls to the saved icon file, as shown here:</p>
<pre><code>Public Function GetLocalizedResIcon(intResourceId As Integer, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strPathFileName As String) As Integer

 &nbsp;&nbsp; On Error GoTo GetLocalizedResIcon_Err
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Dim varResPict As Variant
 &nbsp;&nbsp; 
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; ' load resource picture
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; SavePicture LoadResPicture(intResourceId, vbResIcon), strPathFileName
 &nbsp;&nbsp; GetLocalizedResIcon = True

GetLocalizedResIcon_End:

 &nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; 
GetLocalizedResIcon_Err:

 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; ' Raise the exception
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; Err.Raise vbObjectError + 27, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "OLEAccATM.GetLocalizedResIcon", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Description
 &nbsp;&nbsp; Resume GetLocalizedResIcon_End
 &nbsp;&nbsp; 

End Function
</code></pre>
<p>
In Microsoft Access, use the following code to call the method:</p>
<pre><code>Dim strPathFileNameIcon As String

' --------------------------------------------
' holds language constant
' --------------------------------------------
Dim intLang As Integer
 &nbsp; 
intLang = 16 ' english

' --------------------------------------------
' load appropriate logo
' --------------------------------------------
strPathFileNameIcon = “C:\My Documents\MyIcon.ico"
If objAccATM.GetLocalizedResIcon(11 + intLang, strPathFileNameIcon) Then
 &nbsp; Me!frmLogo.Picture = strPathFileNameIcon
End If
</code></pre>
<h4>Setting the Project Settings for the OLE Server DLL</h4>
<p>
In Visual Basic, use the <b>Project</b> tab of the <b>Options</b> dialog box to set the following:
<ol>
<li>
Project Name: OLELocalizedAccATM. <br><br></li>
<li>
StartMode: OLE Server.<br><br></li>
<li>
Startup Form: Sub Main.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;OLELocalizedAccATM is the name to use when you create a Reference to the DLL in your database.</p>
<h4>Compiling the Project into an OLE Server DLL file</h4>
<p>
In Visual Basic, to compile your project into an OLE Server DLL, go to the File menu and click Make OLE DLL File.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The remainder of this document shows how the sample Microsoft Access AccATM.mdb uses the OLE Server DLL. The discussion does not cover all of the sample database's forms and code; it is limited to the objects necessary for using the OLE Server DLL.</p>
<h3>Step 4: Creating A Reference To The OLE Server DLL From The Microsoft Access Database</h3>
<p>
Open the sample AccATM.mdb database and open any module. Go to the Tools menu and click References. In the References dialog box, select OLELocalizedAccATM.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Microsoft Access version 7.0 does not provide a way to create references programmatically. You must create the reference through the user interface of the full-retail version, not a run-time version.</p>
<h3>Step 5: Creating Procedures In The Microsoft Access Database That Call The OLE Server DLL Using OLE Automation</h3>
<p>
The main form in the AccATM database allows you to select a language:</p>
<p>
<img src="accatm_1.gif" border=0></p>
<p class=label>
<b>Figure 1. ATM main form </b></p>
<p>
Each button loads the input form and passes the desired language variable in the OpenArgs of the OpenForm method. For example, here's the code that is executed on the OnClick event of the English button:</p>
<pre><code>Private Sub cmdEnglish_Click()
 &nbsp;&nbsp; 
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; ' input form
 &nbsp;&nbsp; ' --------------------------------------------
 &nbsp;&nbsp; DoCmd.OpenForm "frmInput", , , , , acDialog, "16"

End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The number 16 is the Resource ID for English in the OLE Server DLL.</p>
<p>
When the input form is loaded, it passes the language Resource ID (which it received from the navigation form) to the OLE Server DLL and retrieves all the necessary localized strings. The input form is populated and displayed with the appropriate localized strings.</p>
<p>
The Input form appears in Design view as follows:</p>
<p>
<img src="accatm_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Input form design view</b></p>
<p>
The form's module contains the following code in the General Declaration Section:</p>
<pre><code>Option Compare Database
Option Explicit

 &nbsp; ' --------------------------------------------
 &nbsp; ' instantiate the OLE Interface
 &nbsp; ' --------------------------------------------
 &nbsp; Dim objAccATM As New OLEAccATM 

 &nbsp; ' --------------------------------------------
 &nbsp; ' holds language constant
 &nbsp; ' --------------------------------------------
 &nbsp; Dim intLang As Integer
</code></pre>
<p>
And the following code is assigned to the form’s OnLoad event:</p>
<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; 
 &nbsp; On Local Error GoTo Form_Load_Err
 &nbsp;&nbsp; 
 &nbsp; Dim Msg As String
 &nbsp; Dim strReturned As String
 &nbsp; Dim strPathFileNameIcon As String
 &nbsp; Dim boolResult As Boolean
 &nbsp; 
 &nbsp; ' --------------------------------------------
 &nbsp; ' set to language constant passed in open args
 &nbsp; ' --------------------------------------------
 &nbsp; intLang = CInt(IIf(VarType(OpenArgs) = vbString, OpenArgs, "16"))
 &nbsp; 
 &nbsp; ' --------------------------------------------
 &nbsp; ' load appropriate logo
 &nbsp; ' --------------------------------------------
 &nbsp; strPathFileNameIcon = GetAppPath()
 &nbsp; strPathFileNameIcon = strPathFileNameIcon &amp; "MyIcon.ico"
 &nbsp; If objAccATM.GetLocalizedResIcon(11 + intLang, strPathFileNameIcon) Then
 &nbsp;&nbsp;&nbsp;&nbsp; Me!frmLogo.Picture = strPathFileNameIcon
 &nbsp;&nbsp;&nbsp;&nbsp; boolResult = SetCustomProps("AppIcon", strPathFileNameIcon)
 &nbsp; End If
 &nbsp; 
 &nbsp; ' --------------------------------------------
 &nbsp; ' set application title
 &nbsp; ' --------------------------------------------
 &nbsp; strReturned = objAccATM.GetLocalizedResStr(8 + intLang)
 &nbsp; boolResult = SetCustomProps("AppTitle", strReturned)
 &nbsp; Application.RefreshTitleBar
 &nbsp; 
 &nbsp; ' --------------------------------------------
 &nbsp; ' set option based upon the passed language
 &nbsp; ' and load from the OLE Interface
 &nbsp; ' --------------------------------------------
 &nbsp; Me.Caption = objAccATM.GetLocalizedResStr(0 + intLang)
 &nbsp; Me.lblPINCode.Caption = objAccATM.GetLocalizedResStr(1 + intLang)
 &nbsp; Me.fraAccount.Caption = objAccATM.GetLocalizedResStr(2 + intLang)
 &nbsp; Me.lblChecking.Caption = objAccATM.GetLocalizedResStr(3 + intLang)
 &nbsp; Me.lblSavings.Caption = objAccATM.GetLocalizedResStr(4 + intLang)
 &nbsp; Me.lblAmount.Caption = objAccATM.GetLocalizedResStr(5 + intLang)
 &nbsp; Me.lblUSDollars.Caption = "US Dollars"
 &nbsp; Me.cmdOK.Caption = objAccATM.GetLocalizedResStr(6 + intLang)
 &nbsp; 
Form_Load_End:

 &nbsp; Exit Sub

Form_Load_Err:

 &nbsp; Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
 &nbsp; Msg = Msg &amp; Err.Description
 &nbsp; MsgBox Msg, vbInformation, "Form_Load"
 &nbsp; Resume Form_Load_End

End Sub
</code></pre>
<p>
The <code>Form_Load()</code> procedure calls two functions from two global modules named modMain and modProperties respectively.</p>
<pre><code>Function GetAppPath() As String
 &nbsp; On Local Error Resume Next
 &nbsp; Dim strPathFileName, i As Integer
 &nbsp; Dim strHold As String
 &nbsp; strPathFileName = CurrentDb.Name
 &nbsp; For i = Len(strPathFileName) To 1 Step -1
 &nbsp;&nbsp;&nbsp;&nbsp; If Mid(strPathFileName, i, 1) = Chr(92) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetAppPath = Left(strPathFileName, i)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Next i
End Function

Function SetCustomProps(PropName As String, PropValue As Variant) As Boolean
 &nbsp; 
  ' ==============================================
  ' Function: SetCustomProps
  '
  ' Purpose:
  ' Save the specified custom property and its associated value 
  ' Returns: Boolean
  ' ==============================================
 &nbsp; 
 &nbsp; On Local Error GoTo SetCustomProps_Err
 &nbsp; 
 &nbsp; Const conPropNotFoundError = 3270
 &nbsp; Dim db As DATABASE, prp As Property
 &nbsp; 
 &nbsp; Set db = CurrentDb
 &nbsp; Set prp = db.Properties(PropName)
 &nbsp; prp = PropValue
 &nbsp; 
 &nbsp; SetCustomProps = True

SetCustomProps_End:
 &nbsp; 
 &nbsp; Exit Function

SetCustomProps_Err:
 &nbsp; 
 &nbsp; If Err.Number = conPropNotFoundError Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set prp = db.CreateProperty(PropName, dbText, PropValue)
 &nbsp;&nbsp;&nbsp;&nbsp; db.Properties.Append prp
 &nbsp;&nbsp;&nbsp;&nbsp; SetCustomProps = True
 &nbsp;&nbsp;&nbsp;&nbsp; Resume SetCustomProps_End
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Err.Description, vbInformation
 &nbsp; End If
 &nbsp; Resume SetCustomProps_End

End Function
</code></pre>
<p>
If you click the French button on the main form, the Input form appears as follows:</p>
<p>
<img src="accatm_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Input form in form view</b></p>
<h4>Here's an explanation of the code assigned to the On_Load event of the Input form:</h4>
<p>
First, set the picture to the correct country:</p>
<pre><code>' --------------------------------------------
' load appropriate logo
' --------------------------------------------
strPathFileNameIcon = GetAppPath()
strPathFileNameIcon = strPathFileNameIcon &amp; "MyIcon.ico"
If objAccATM.GetLocalizedResIcon(11 + intLang, strPathFileNameIcon) Then
 &nbsp; Me!frmLogo.Picture = strPathFileNameIcon
 &nbsp; 
End If
</code></pre>
<p>
The path and file name to save the icon to is established by using the <code>GetAppPath()</code> function, which returns the path of the current database. For example, if <code>GetAppPath()</code> returns "c:\My Documents\", then the strPathFileNameIcon variable contains "c:\My Documents\MyIcon.ico." This path and file are passed to the OLE Server DLL through the <code>GetLocalizedResIcon()</code> method which extracts the appropriate icon and saves it to "c:\My Documents\MyIcon.ico." You then set the imgLogo control’s Picture property to the name of the saved icon file. </p>
<p>
Second, set the application's AppIcon property:</p>
<pre><code>boolResult = SetCustomProps("AppIcon", strPathFileNameIcon)
</code></pre>
<p>
The <code>SetCustomProps()</code> function is called to create, if necessary, and set the custom database property "AppIcon" to the path where the icon is saved. The Microsoft Access Application object queries the database for the existence of this property and shows the icon in the title bar of Microsoft Access.</p>
<p>
Third, set the application's AppTitle property:</p>
<pre><code>' --------------------------------------------
' set application title
' --------------------------------------------
strReturned = objAccATM.GetLocalizedResStr(8 + intLang)
boolResult = SetCustomProps("AppTitle", strReturned)
Application.RefreshTitleBar
</code></pre>
<p>
The <code>SetCustomProps()</code> function is called to create, if necessary, and set the custom database property "AppTitle" to the text string returned from <code>GetLocalizedResStr()</code>. The Microsoft Access Application object queries the database for the existence of this property and shows the text string in the title bar of Microsoft Access.</p>
<p>
Last, set the text on the form to the appropriate localized strings:</p>
<pre><code>' --------------------------------------------
' set option based upon the passed language
' and load from the OLE Interface
' --------------------------------------------
Me.Caption = objAccATM.GetLocalizedResStr(0 + intLang)
Me.lblPINCode.Caption = objAccATM.GetLocalizedResStr(1 + intLang)
Me.fraAccount.Caption = objAccATM.GetLocalizedResStr(2 + intLang)
Me.lblChecking.Caption = objAccATM.GetLocalizedResStr(3 + intLang)
Me.lblSavings.Caption = objAccATM.GetLocalizedResStr(4 + intLang)
Me.lblAmount.Caption = objAccATM.GetLocalizedResStr(5 + intLang)
Me.lblUSDollars.Caption = "US Dollars"
Me.cmdOK.Caption = objAccATM.GetLocalizedResStr(6 + intLang)
</code></pre>
<p>
Each text control on the form is set to a localized string returned from the GetLocalizedResStr() function based on the Resource ID.</p>
<h2>Conclusion</h2>
<p>
Using an OLE Server DLL in Microsoft Access allows you to create a single database for multiple languages instead of a separate database for every language. The primary advantage of using this technique is that all of your localization strings are stored separately, which allows you to update them independently.</p>
</BODY>
</HTML>

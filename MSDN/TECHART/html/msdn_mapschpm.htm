<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the Schedule+ OLE Automation Server: Programming Model</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_mapschpm"></a></sup>Mapping the Schedule+ OLE Automation Server: Programming Model</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
December 14, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4538">
</OBJECT><a href="javascript:sample1.Click()">Click here for a diagram of the Microsoft Schedule+ Automation Server in various graphics formats.</a></p>
<h2>Abstract</h2>
<p>
This article consists primarily of a graphic map of a programming model of the Microsoft® Schedule+ OLE Automation server, showing its properties, methods, and child objects. The map displays the members corresponding to the Schedule+ graphical user interface (GUI) and is the first in a series of extended maps describing different views of the Schedule+ server. Any Visual Basic®-based language (Access Basic, Visual Basic, and Visual Basic for Applications) and Visual C++® can access the Schedule+ OLE Automation server.</p>
<h2>The Microsoft Schedule+ OLE Automation Server Programming Model</h2>
<p>
The map of the programming model of the Microsoft® Schedule+ OLE Automation server displays the members corresponding to the Schedule+ graphical user interface (GUI). The Schedule+ OLE Automation server can be viewed in three different ways. The view corresponding to the GUI is described in this article; the other views are described in my adjunct articles, <a href="msdn_mapspl95.htm">"Mapping the Schedule+ 7.0 Object Library: SPL 7.0"</a> and <a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects,"</a> which are available in the MSDN Library.</p>
<p>
Schedule+ is OLE Automation-centric and contains many members that are not accessible or visible from the GUI. This programming model represents a <i>subset</i> of the Schedule+ OLE Automation server members, a subset that corresponds to the GUI for Schedule+. Although a type library of this view could be created, such a type library would limit the developer psychologically and technically to this subset alone. The map included in this article represents a traditional OLE Automation server view of Schedule+ that conceals many powerful features discussed in my other articles.</p>
<p>
Figure 1 shows the relationship between objects as described by the <i>Microsoft Schedule+ Programmer's Guide</i> in the Microsoft Exchange Server Software Development Kit (SDK). A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with Schedule+: I just post the three appropriate extended maps for Schedule+ on my wall for quick reference, which is a lot faster than clicking topics in a Help file, one by one, to discover their properties and methods.</p>
<p>
Because Figure 1 is difficult to read online, I have included the two most common graphics formats—encapsulated PostScript™ (.EPS) and Microsoft Windows® metafile (.WMF)—as well as a copy of my original Shapeware® Visio™ version 4.0 file (.VSD). The first two formats can be printed across multiple pages using any of the commercial graphics applications (such as Adobe™ PageMaker™, CorelDRAW®, or Microsoft Publisher) or using Microsoft Excel. The original Visio file is included for those who have a copy of Visio and want to modify the diagram easily.</p>
<p>
<img src="mapschpm_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The programming model of the Microsoft Schedule+ OLE Automation server</b></p>
<p>
Some characteristics of the Schedule+ OLE Automation server are different from common OLE Automation servers. Furthermore, the Schedule+ documentation uses terms in a different way from the documentation of other OLE Automation servers. For example, Schedule+ has an oxymoronic method called <b>Properties</b>. In the programming model, the following characteristics are significant. 
<ul type=disc>
<li>
Most of the properties are <b>Property </b>objects. This is not intuitive, so a simple example may better explain this concept. For most OLE Automation servers, you will get a standard data type when you apply <b>TypeName</b> to a property, as shown below:<pre><code>Set X = new stdtype.Stdfont
? TypeName (X.Size)
Currency
</code></pre>
<p class=tl>
With Schedule+, you do not get a standard data type; instead, you get a <b>Property</b> object whose default property is its <b>Value</b> property, as shown below:</P><pre><code>? Typename(Item.Billing)
Property
? Typename(Item.Billing.Value)
String
</code></pre>
</li>
<li>
Some properties are not <b>Property</b> objects but standard data types. These properties make up the properties part of the <b>Property</b>, <b>Table</b>, <b>Application</b>, or <b>Schedule</b> objects. The extended map indicates which properties are <b>Property</b> objects and which properties are standard data types.<pre><code>? Typename(Schedule.CanUndo)
Boolean
</code></pre>
</li>
<li>
Some properties can be either a <b>Property</b> object or a standard data type, depending on the context. See the extended map for clarification.<pre><code>? TypeName(Item.ChangeNumber)
Property
? TypeName(Item.ChangeNumber.ChangeNumber)
Double
</code></pre>
</li>
<li>
The <b>Properties </b>method (without an argument) returns a <b>long</b> number that is the count of<i> not</i> <i>empty</i> <b>Property</b> objects (that is, <b>IsEmpty</b> returns False). Properties that are standard data types are <i>not </i>included in the <b>Property </b>objects returned by the <b>Properties</b> method (with an argument). For example, if <b>Schedule.Properties</b> returns 10, then <b>Schedule</b> actually has 19 properties: 10 <b>Property </b>objects and 9 properties that are standard data types.<br><br></li>
<li>
A <b>Property </b>object <b>Value</b> property is reported as <b>Empty</b> by the <b>TypeName</b> function if no value has been assigned. You cannot use <b>Class</b> of the <b>Property</b> object to determine which type of value can be assigned, because it is set to 255, signifying no value.<pre><code>? IsEmpty(Item.CountryHome), _
  IsEmpty(Item.CountryHome.Value), _
  Item.CountryHome.Class
True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 255 
Item.CountryHome="NeverNeverLand"
? IsEmpty(Item.CountryHome), _
  IsEmpty(Item.CountryHome.Value), _
  Item.CountryHome.Class
False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8
</code></pre>
</li>
<li>
The <b>GetProperty</b> and <b>GetProperties</b> methods <i>do not</i> return <b>Property</b> objects; rather, they return the <b>Value </b>properties of the <b>Property</b> object in a two-dimensional variant array, as shown below:<pre><code>? Typename(Item.GetProperties("CityLand"))
Variant()
? propData = Item.GetProperties("CityLand")
? UBound(propData,1),UBound(propData,2)
 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0
</code></pre>
<p class=tl>
If the <b>Property</b> object is empty, the value returned is "Error 438."</P><pre><code>? propData(Xq(0,0)), propData(0,0)
Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error 438
</code></pre>
</li>
<li>
The <b>GetProperty </b>and <b>GetProperties</b> methods do not distinguish between an empty <b>Property</b> object, a standard data type property, and a nonexistent property. <pre><code>PropData=Schedule.GetProperties("CanUndo")
? PropData(0,0), Schedule.CanUndo
Error 438&nbsp;&nbsp;&nbsp;&nbsp; True

PropData=Schedule.GetProperties("SoundLevel")
? PropData(0,0), IsEmpty(Schedule.SoundLevel)
Error 438&nbsp;&nbsp;&nbsp;&nbsp; True

PropData=Schedule.GetProperties("BillGates"):
? PropData(0,0)
Error 438
</code></pre>
</li>
</ul>
<p>
A good understanding of the <b>Property </b>object, the <b>Properties</b> method, and object properties is essential for doing OLE Automation with Schedule+. For additional information and caveats, read my adjunct articles, <a href="msdn_mapspl95.htm">"Mapping the Schedule+ 7.0 Object Library: SPL 7.0"</a> and <a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects."</a></p>
<h3>Object Definitions</h3>
<p>
The objects and collections in Figure 1 are defined in the table below. The objects are listed in the same sequence as they appear in the map. </p>
<p class=label>
<b>Table 1. Object Definitions </b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>&nbsp;Object</b></td>
<td class=label width=67%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=33%><b>Application </b>object</td>
<td width=67%>This object reports information about the single-document interface (SDI) application.</td>
</tr>
<tr valign=top>
<td width=33%><b>Schedule </b>object</td>
<td width=67%>This object represents one schedule in the <b>Application</b> object. This is also an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Table </b>object</td>
<td width=67%>This object represents a table of <b>Item</b> records that store information.  Although it resembles a collection, it is not a collection object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Item </b>object</td>
<td width=67%>This object represents an object that may be a <b>Property</b> object or a <b>Table</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Property</b> object</td>
<td width=67%>This object represents information about a characteristic of an object. There may be multiple values stored in one <b>Property</b> object. (See <b>Count</b> to determine the number.) </td>
</tr>
<tr valign=top>
<td width=33%><b>Access</b> object</td>
<td width=67%>This object stores access control information for a user's schedule file. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Alarm</b> object</td>
<td width=67%>This object represents a single alarm in the <b>AlarmsToRing</b> table. This object is an <b>Item </b>object.</td>
</tr>
<tr valign=top>
<td width=33%><b>SingleAppointment</b> object</td>
<td width=67%>This object represents an appointment that occurs only once. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>RecurringAppointment</b> object</td>
<td width=67%>This object represents recurring appointments recorded as a pattern described by the properties. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Appointment </b>object</td>
<td width=67%>This object represents an appointment. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>SingleTask </b>object</td>
<td width=67%>This object represents a task that occurs only once. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>RecurringTask </b>object</td>
<td width=67%>This object represents recurring tasks recorded as a pattern described by the properties. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Task </b>object</td>
<td width=67%>This object represents a task. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>SingleEvent </b>object</td>
<td width=67%>This object represents an event that occurs only once. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>RecurringEvent </b>object</td>
<td width=67%>This object represents recurring events recorded as a pattern described by the properties. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Event </b>object</td>
<td width=67%>This object represents an event. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>DeletedItem </b>object</td>
<td width=67%>This object contains the path to a deleted object. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Project </b>object</td>
<td width=67%>This object represents a project. This object is an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>Contact </b>object</td>
<td width=67%>This object represents a single contact. This object is an <b>Item</b> object.</td>
</tr>
</table><br>
<h2>Bibliography</h2>
<p>
Lassesen, Ken. <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschio.htm">"Mapping the Schedule+ OLE Automation Server: Internal Objects."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapspl95.htm">"Mapping the Schedule+ 7.0 Object Library: SPL 7.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. "Schedule+ OLE Automation." <i>Developer Network News</i>, January/February 1996, Number 1. (MSDN Library, Periodicals, Microsoft Developer Network News)</p>
<p>
Lassesen, Ken. <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> (MSDN Library, Technical Articles)</p>
<p>
Microsoft Exchange Server SDK. <i>Microsoft Schedule+ Programmer's Guide</i>. (MSDN Library)</p>
</BODY>
</HTML>

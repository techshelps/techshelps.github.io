<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 173: Launching Applications in Visual Basic</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn173"></a></sup>Tip 173: Launching Applications in Visual Basic</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to control the way in which a launched Microsoft® Visual Basic® application is run.</p>
<h2>Using the CreateProcess Function to Launch Applications</h2>
<p>
Under the Microsoft® Windows® 95 operating system, you can use the Windows application programming interface (API) <b>CreateProcess</b> function to load and run any application (or process) you want. Using this function, you have complete control over how the launched application is run.</p>
<p>
To use the <b>CreateProcess</b> function, add the following <b>Declare</b> statement to the General Declarations section of your Microsoft Visual Basic® project or to a BAS module:</p>
<pre><code>Declare Function CreateProcessA Lib "kernel32" (ByVal lpApplicationName As Long, 
 &nbsp; ByVal lpCommandLine As String, ByVal lpProcessAttributes As Long, ByVal 
 &nbsp; lpThreadAttributes As Long, ByVal bInheritHandles As Long, ByVal 
 &nbsp; dwCreationFlags As Long, ByVal lpEnvironment As Long, ByVal 
 &nbsp; lpCurrentDirectory As Long, lpStartupInfo As STARTUPINFO, 
 &nbsp; lpProcessInformation As PROCESS_INFORMATION) As Long
</code></pre>
<p>
As you can see, the <b>CreateProcess</b> function requires ten arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=25%><i>lpApplicationName</i></td>
<td width=75%>The name of the process you want to launch.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpCommandLine</i></td>
<td width=75%>The command line to be passed to the launched process.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpProcessAttributes</i></td>
<td width=75%>Points to a <b>SECURITY_ATTRIBUTES</b> structure for the created process.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpThreadAttributes</i></td>
<td width=75%>Points to a <b>SECURITY_ATTRIBUTES</b> structure for the primary thread of the created process.</td>
</tr>
<tr valign=top>
<td width=25%><i>BInheritHandle</i></td>
<td width=75%>If True, the created process inherits handles from the calling application.</td>
</tr>
<tr valign=top>
<td width=25%><i>DwCreationFlags</i></td>
<td width=75%>A combination of one or more creation flags for controlling the priority class and the creation of the process.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpEnvironment</i></td>
<td width=75%>Points to an environment block for the new process. If set to NULL, the new process uses the calling process's environment block.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpCurrentDirectory</i></td>
<td width=75%>A string containing the drive and directory for the new process. If NULL, the calling process's drive and directory are used.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpStartupInfo</i></td>
<td width=75%>A <b>STARTUPINFO</b> structure that specifies the appearance of the main window for the new process.</td>
</tr>
<tr valign=top>
<td width=25%><i>LpProcessInformation</i></td>
<td width=75%>A <b>PROCESS_INFORMATION</b> structure that receives identification information about the new process.</td>
</tr>
</table><br>
<p>
The example program below launches the Windows 95 Notepad application. Note that you specify the complete path to Notepad and launch the application as a normal process (NORMAL_PRIORITY_CLASS).</p>
<p>
After you call the <b>CreateProcess</b> function to launch the Notepad application, notice that Notepad retains the focus. You cannot switch to another running application. This is accomplished by executing the Windows API <b>WaitForSingleObject</b> function.</p>
<p>
The <b>WaitForSingleObject</b> function forces the system to wait until a specific process has finished its work. You pass the handle of the process you want to wait for and the length of time, in milliseconds, to pause. In the example program below, the time-out value is set to INFINITE, which means that the system will not resume running until the user has quit Notepad.</p>
<p>
The final step you must perform, after the user has quit Notepad, is to close the open handle for the just-launched process. This removes all references to Notepad having been launched.</p>
<h2>Example Program</h2>
<p>
This program shows how to launch a Windows or MS-DOS® application from within Microsoft Visual Basic. Control remains with the launched application until you quit that application.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim AppToLaunch As String
 &nbsp;&nbsp; AppToLaunch = "c:\windows\notepad.exe"
 &nbsp;&nbsp; Call ExecuteAndWait(AppToLaunch)
End Sub
</code></pre>
</li>
<li>
Create a new subroutine called <b>ExecuteAndWait</b>. Add the following code to this subroutine:<pre><code>Public Sub ExecuteAndWait(cmdline$)
 &nbsp;&nbsp; Dim NameOfProc As PROCESS_INFORMATION
 &nbsp;&nbsp; Dim NameStart As STARTUPINFO
 &nbsp;&nbsp; Dim X As Long

 &nbsp;&nbsp; NameStart.cb = Len(NameStart)
 &nbsp;&nbsp; X = CreateProcessA(0&amp;, cmdline$, 0&amp;, 0&amp;, 1&amp;, NORMAL_PRIORITY_CLASS, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0&amp;, 0&amp;, NameStart, NameOfProc)
 &nbsp;&nbsp; X = WaitForSingleObject(NameOfProc.hProcess, INFINITE)
 &nbsp;&nbsp; X = CloseHandle(NameOfProc.hProcess)
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Insert menu, select Module to add a new module to your project. Module1.Bas is created by default.<br><br></li>
<li>
Add the following code to Module1.Bas (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Type STARTUPINFO
 &nbsp;&nbsp; cb As Long
 &nbsp;&nbsp; lpReserved As String
 &nbsp;&nbsp; lpDesktop As String
 &nbsp;&nbsp; lpTitle As String
 &nbsp;&nbsp; dwX As Long
 &nbsp;&nbsp; dwY As Long
 &nbsp;&nbsp; dwXSize As Long
 &nbsp;&nbsp; dwYSize As Long
 &nbsp;&nbsp; dwXCountChars As Long
 &nbsp;&nbsp; dwYCountChars As Long
 &nbsp;&nbsp; dwFillAttribute As Long
 &nbsp;&nbsp; dwFlags As Long
 &nbsp;&nbsp; wShowWindow As Integer
 &nbsp;&nbsp; cbReserved2 As Integer
 &nbsp;&nbsp; lpReserved2 As Long
 &nbsp;&nbsp; hStdInput As Long
 &nbsp;&nbsp; hStdOutput As Long
 &nbsp;&nbsp; hStdError As Long
End Type
Type PROCESS_INFORMATION
 &nbsp;&nbsp; hProcess As Long
 &nbsp;&nbsp; hThread As Long
 &nbsp;&nbsp; dwProcessID As Long
 &nbsp;&nbsp; dwThreadID As Long
End Type
Global Const NORMAL_PRIORITY_CLASS = &amp;H20&amp;
Global Const INFINITE = -1&amp;
Declare Function CloseHandle Lib "kernel32" (hObject As Long) As Boolean
Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, 
 &nbsp; ByVal dwMilliseconds As Long) As Long
Declare Function CreateProcessA Lib "kernel32" (ByVal lpApplicationName As Long, 
 &nbsp; ByVal lpCommandLine As String, ByVal lpProcessAttributes As Long, ByVal 
 &nbsp; lpThreadAttributes As Long, ByVal bInheritHandles As Long, ByVal 
 &nbsp; dwCreationFlags As Long, ByVal lpEnvironment As Long, ByVal 
 &nbsp; lpCurrentDirectory As Long, lpStartupInfo As STARTUPINFO, 
 &nbsp; lpProcessInformation As PROCESS_INFORMATION) As Long
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the <b>Command Button</b> control. This immediately starts the Windows Notepad application. Notice that you are unable to switch to another running application until you quit Notepad.</p>
</BODY>
</HTML>

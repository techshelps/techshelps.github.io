<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Is Microsoft Transaction Server?</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>What Is Microsoft Transaction Server?</h1>
<p>
Microsoft Transaction Server (MTS) is a component-based model and run-time environment that simplifies the task of developing application components by allowing you to perform work by using transactions. These application components implement business rules and run from the middle tier in a three-tier application. For example, in the case of a bank, records in one or more database systems represent the durable state of the business, such as the amount of money in an account. The application components update that state to reflect changes, such as debits (increases) and credits (decreases). </p>
<p>
Microsoft Transaction Server protects applications from anomalies caused by concurrent updates or system failures and maintains the ACID properties: 
<ul type=disc>
<li>
<i>Atomicity</i> ensures that all updates completed under a specific transaction are committed (and made durable) or that all are aborted and rolled back to their previous state. <br><br></li>
<li>
<i>Consistency</i> means that a transaction is a correct transformation of the system state, preserving the state invariants. <br><br></li>
<li>
<i>Isolation</i> protects concurrent transactions from reading partial and uncommitted results, which might create inconsistencies in the application state. Resource managers use transaction-based synchronization protocols to isolate the uncommitted work of active transactions. <br><br></li>
<li>
<i>Durability</i> means that committed updates to managed resources (such as database records) survive failures, including communication failures, process failures, and server-system failures. Transactional logging even allows you to recover the durable state after disk media failures. </li>
</ul>
<p>
Transaction Server makes transaction management transparent to the component developer. Developers do not have to write <b>begin</b> or <b>end </b>transaction into their application code. </p>
<p>
The intermediate states of a transaction aren't visible outside the transaction, and either all the work happens or none of it does. This allows you to develop application components as if each transaction executes sequentially and without regard to concurrency. This is a tremendous simplification for application developers. </p>
<p>
You can declare that a component is transactional, in which case Transaction Server associates transactions with the component's objects. A component can participate in the transaction of the component calling it, enabling developers to coordinate the work of many components written in different languages and running on different systems as a single, atomic unit. When an object method is executed, the services that resource managers and resource dispensers (such as the ODBC resource dispenser to manage pools of database connections) perform on its behalf execute under a transaction. This can also include work that it performs for other Transaction Server objects. Work from multiple objects can be composed into a single atomic transaction. </p>
<p>
Without transactions, error recovery is extremely difficult, especially when multiple objects update multiple databases. The possible combinations of failure modes are too great even to consider. Using transactions simplifies error recovery. Resource managers automatically undo the work of the transaction, and the application retries the entire business transaction. </p>
<p>
Transactions also provide a simple concurrency model. You can rely on a transaction's isolation to prevent one client's work from interfering with another client's work. Microsoft Transaction Server allows you to write components as if there were only one client executing at a time. </p>
<p>
Microsoft Transaction Server performs all of this essential management automatically. Writing applications as if they run in isolation reduces development time dramatically and allows programmers to concentrate on business functions. Transaction Server handles concurrency, resource pooling, security, context management, and other system-level complexities, insulating the programmer from these issues. </p>
<p>
The basic architecture of Microsoft Transaction Server consists of:
<ul type=disc>
<li>
<b>Base processes</b>, the processes that request work from the server solution, usually on a desktop or in a browser.<br><br></li>
<li>
<b>Application components</b>, the business logic written as ActiveX controls and deployed in the Transaction Server run-time environment.<br><br></li>
<li>
<b>Transaction Server Executive</b>, the mechanism that provides and manages server functionality for application components.<br><br></li>
<li>
<b>Resource dispensers</b>, the managers of the shared state—including database connections—in a process.<br><br></li>
<li>
<b>Resource managers</b>, the system services that manage durable data. Microsoft SQL&nbsp;Server, durable message queues, and transactional file systems are all examples of resource managers.</li>
</ul>
<p>
Microsoft Transaction Server is a key Active Server technology. Active Server technology is a broad strategy to enable businesses to easily develop and deploy server solutions for the Internet and intranets. Just as the combination of Windows, Microsoft Office, and OLE development tools reduced the skill set and cost requirements for deploying solutions on the desktop, Active Server lowers the skill set and cost requirements for solutions in the distributed world of Internet and intranet servers. More than 80 vendors are supporting Microsoft Transaction Server including IBM, Sybase, and Informix. Microsoft Transaction Server can also handle cross-platform commits, such as commits between DB2 on OS/390 (MVS) and Microsoft SQL&nbsp;Server on Windows&nbsp;NT.</p>
<p>
Microsoft Transaction Server application components—the business logic that runs on the server—can be written with any language that produces ActiveX DLLs. Developers and businesses that use these languages for desktop solutions can now use them for server solutions. Since ActiveX is a language-neutral technology supported by most major development tool vendors, developers can use popular third-party products to build Transaction Server applications. Major tools vendors planning support for Microsoft Transaction Server in 1997 include:
<ul type=disc>
<li>
Microsoft Visual&nbsp;Studio development system (Microsoft Visual&nbsp;Basic® programming system, Microsoft Visual&nbsp;C++® development system, Microsoft Visual&nbsp;J++ development software, Microsoft Visual FoxPro® database management system, and Microsoft Visual&nbsp;InterDev Web development software)<br><br></li>
<li>
MicroFocus COBOL<br><br></li>
<li>
Borland Delphi<br><br></li>
<li>
PowerSoft PowerBuilder and Optima++</li>
</ul>
<p>
Microsoft Transaction Server support for Java is of particular interest to Internet programmers because all Transaction Server middle-tier services are provided to ActiveX components written in Java. This contrasts with other middleware approaches, where Java is used as a simple front end to back-end Object Request Brokers (ORBs) and TP monitor applications. All<b> </b>Transaction Server server functionality is available for developers building in Java. In a sense, Transaction Server is the industry's first transaction-processing monitor for Java.</p>
<h3>Server Programming Issues</h3>
<p>
A server application must include these basic components:
<ul type=disc>
<li>
<b>Client</b> logic, including forms and the user interface.<br><br></li>
<li>
A <b>network</b> protocol, to link the client with the server.<br><br></li>
<li>
A network <b>receiver</b>, to listen to the network, accept incoming calls from clients, and manage congestion.<br><br></li>
<li>
A<b> connection</b> manager, to track work and system resources on behalf of each client.<br><br></li>
<li>
A <b>queue</b> manager, in case client calls start to back up.<br><br></li>
<li>
A <b>thread</b> <b>pool</b>, to avoid having to dedicate a thread to each user.<br><br></li>
<li>
A <b>context</b> manager, to track each user's concurrent identity and state.<br><br></li>
<li>
A <b>configuration</b> manager, to manage thread and server resources.<br><br></li>
<li>
A <b>security</b> manager, to prevent unauthorized access to the application or data.<br><br></li>
<li>
The actual <b>service logic</b>, to perform the business function of the application.<br><br></li>
<li>
A <b>database</b> <b>connection manager</b>,<b> </b>to allocate database connections for multiple users. <br><br></li>
<li>
The <b>database</b> design.</li>
</ul>
<h3>Automatic Thread and Process Management</h3>
<p>
Solutions running on servers require a sophisticated application infrastructure to support increasing numbers of concurrent clients. Microsoft Transaction Server provides all necessary, automated services for easy management and development of transactions on Windows&nbsp;NT.</p>
<p>
Automatic thread pool to components ensures that developers do not have to program thread management—the creation, allocation, and termination of system threads—into their solution. This enables easier scalability in a multiuser environment, while lowering the skill set required to build server solutions. </p>
<p>
To date, developers have had to include the creation and termination of threads in an application to enable a large number of concurrent users to share a server application. Allocating one system thread per user can result in poor performance in a multiuser environment. Building a thread pool that shares system threads across users is a complex solution requiring sophisticated programming to address issues like deadlocks, starvation, and race conditions. These issues need to be addressed regardless of the developer's programming language, even if the developer is using Java.</p>
<p>
This is a good example of the basic server functionality that can consume 30 to 40 percent of a development project. It diverts development resources from building advanced functionality into a solution, and it increases the support complexity of the solution after it has been deployed.</p>
<h3>Object Instance Management</h3>
<p>
Object instance management and just-in-time activation—deactivating and reactivating an object while a client holds a reference to it—enable Transaction Server applications to scale more efficiently than most component applications built with traditional object-oriented infrastructure approaches, including ORBs. From the client's perspective, only a single instance of the object exists from the time the client creates it to the time it is finally released. In actuality, the object may be deactivated and reactivated many times. ActiveX uses an object-oriented infrastructure called Component Object Model (COM). </p>
<p>
Applications consist of components that invoke services from other components. With basic COM objects, clients have control over object lifetimes—client references are bound to the same object instance for as long as the reference is held. Transaction Server extends the COM model with just-in-time activation, which gives component developers additional control over object lifetimes and allows server resources to be used more efficiently. </p>
<p>
During method execution, a Transaction Server object can use either the <b>SetComplete</b> or <b>SetAbort</b> methods to indicate that the object does not need to maintain state after returning from the call. As a result, the Transaction Server Executive can deactivate the object after the method call returns. The object remains deactivated until the client makes another call to it. As long as the object is deactivated, only limited server resources need be allocated to it, namely those required to maintain the object context and its association with the client references. Other server resources, such as memory for the object's private data and database connections, do not need to remain allocated to the object and can be used for other purposes. Only when the object is subsequently called is it reactivated, at which time it can reacquire any resources that it needs to service the call.</p>
<h3>Database Connection Pool</h3>
<p>
Transaction Server includes several resource dispensers that make it easier for a developer to share system resources across multiple, concurrent application components, including one for a reusable pool of ODBC database connections. Application components make standard ODBC database calls. The ODBC resource dispenser transparently provides fast allocation of new connections from a shared pool, providing a significant performance improvement in a multiuser environment. The ODBC resource dispenser also simplifies the development of robust server applications by automatically including the work of components in transactions.</p>
<h3>Shared Property Manager</h3>
<p>
Many multiuser applications require common access to shared information stored in memory. Scenarios for this type of function include:
<ul type=disc>
<li>
Global variables in Visual&nbsp;Basic.<br><br></li>
<li>
Highly volatile data, such as stock market information, that you may not want to write to disk.</li>
</ul>
<p>
Programming applications that share information in memory across multiple concurrent users can create difficulties, including:
<ul type=disc>
<li>
Locking<br><br></li>
<li>
Resource management<br><br></li>
<li>
Name collisions</li>
</ul>
<p>
Microsoft Transaction Server includes a prebuilt resource dispenser called the Shared Property Manager. The Shared Property Manager enables multiple users to easily access shared global data without complex programming.</p>
<h3>Automatic Transactions Through MS DTC</h3>
<p>
Microsoft Transaction Server is integrated with the Microsoft Distributed Transaction Coordinator (MS DTC), a general purpose, distributed transaction manager. MS DTC is included with Microsoft Transaction Server. </p>
<p>
Most high-end mainframe systems use transactions as the basis for their application processing. Transactions provide a way to bundle a set of operations or events into a single unit of execution. A transaction is a collection of events that follow ACID properties—Atomicity, Consistency, Isolation, and Durability. To users, a transaction is a single event that either happens or doesn't happen. To developers, a transaction allows components to participate in distributed environments.</p>
<h3>Process Isolation</h3>
<p>
Microsoft Transaction Server enables multiple components to work together across different packages, with each package operating in its own protected address space in memory. This is critical when, for example, you are integrating a software component purchased from a third party into an existing solution. Bugs in the new component can corrupt the existing solution. Testing is important, but it cannot always find all problems. </p>
<p>
Microsoft Transaction Server provides developers with a safe mechanism for rapidly integrating new software into existing solutions without compromising mission-critical integrity:
<ul type=disc>
<li>
Related components can be grouped in a package, each running in its own server process.<br><br></li>
<li>
Data corruption in one component cannot propagate to components in another package.<br><br></li>
<li>
Deploying components into multiple packages is transparent to the component developer.<br><br></li>
<li>
Transactions can span components running in multiple packages.</li>
</ul>
<p>
<img src="sql_mts_1.gif" border=0></p>
<h3>Automatic Distributed Security Service</h3>
<p>
Microsoft Transaction Server provides a distributed security service for component-based solutions. This security service relies on Windows&nbsp;NT security to authenticate users, and it maps on top of the Windows&nbsp;NT domain topology.</p>
<p>
Transaction Server provides two complimentary security models—<i>declarative</i> and <i>programmatic</i>.</p>
<p>
Declarative security is automatic and is specified when components are added to a package. Administrators declare which users and groups have access to parts of a solution by using Transaction Server Explorer. These users and groups can be mapped to existing Windows&nbsp;NT users and groups without having to code security into each of the individual components. This enables solution-specific security, even for prebuilt components purchased from third parties.</p>
<p>
For example, a human resources application has two methods:
<ul type=disc>
<li>
<b>view_payroll_table</b><br><br></li>
<li>
<b>change_payroll_table</b></li>
</ul>
<p>
Transaction Server lets you declare that only employees in the human resources department can access <b>view_payroll_table</b>, and only managers can access <b>change_payroll_table.</b></p>
<p>
To ensure security without impacting performance, Microsoft Transaction Server introduces the concept of a role and sets security only at the "front gate." The role is very similar to a group except that it only applies to that MTS server. Much like a group, you add users to the role. Components and even interfaces then use the roles to grant access. Roles are added to interfaces and/or components. Users in a role have access to the component or interface and those outside of the role do not. </p>
<p>
MTS components always run as the same user. By default, this is the interactive user of the machine, but this can be set to any Windows&nbsp;NT account (user or group). When a client tries to access the component, MTS impersonates the client and performs an access-control list (ACL) check. An ACL is a compilation of access control elements (ACE) that specify a user and groups and their access permissions on that object; every user or group can be identified by a unique security identifier (SID). The ACL check either allows or denies access. MTS also gathers information about the client, such as the SID, so additional programmatic security can be made available. After this is accomplished, MTS stops impersonating the client. The component is instantiated and runs as the user specified in the package properties.</p>
<p>
Programmatic security enables developers to code custom access control directly into their components.</p>
<p>
Microsoft Transaction Server supports predefined security roles that enable end users to rapidly integrate components from different ISVs into a solution with good security, without having to configure the security attributes of each component. At development time, ISVs use security roles to define generic security groups, such as managers and administrators, that restrict access to the appropriate component methods and interfaces. Businesses then rapidly integrate components from different vendors into a solution, mapping predefined security roles to existing Windows&nbsp;NT groups. </p>
<h3>Integration with DCOM</h3>
<p>
Microsoft Transaction Server is integrated with the Distributed Component Object Model (DCOM) for component-to-component communications across a network.</p>
<p>
DCOM is simply "COM with a longer wire," an evolution of the Component Object Model used in millions of Windows systems today. COM is the core object technology for ActiveX. DCOM is:
<ul type=disc>
<li>
Language neutral, enabling components written in COBOL to work with components written in Java.<br><br></li>
<li>
Cross-platform, running on the Windows®&nbsp;95 operating system, Windows&nbsp;NT, and Solaris today.<br><br></li>
<li>
Open technology, with Microsoft submitting DCOM for licensing on other platforms through the Open Group.</li>
</ul>
<p>
In addition to the Open Group initiative, both Software AG and Digital Equipment Corporation are in the process of licensing DCOM to non-Microsoft platforms, including most major implementations of UNIX. UNIX systems supporting DCOM can be clients to Microsoft Transaction Server applications.</p>
<h3>Integration with Microsoft Internet Information Server</h3>
<p>
Microsoft Transaction Server is tightly integrated with Microsoft Internet Information Server (IIS), enabling businesses to easily project server solutions over the Internet and intranets.</p>
<p>
IIS is the only World Wide Web server that:
<ul type=disc>
<li>
Is integrated with Windows&nbsp;NT Server.<br><br></li>
<li>
Is a comprehensive Web server solution.<br><br></li>
<li>
Makes it easy to develop Web-based applications.</li>
</ul>
<p>
IIS version 3.0 introduces Active Server Pages, a technology that makes it easy to integrate server business solutions with HTML Web content. ActiveX server pages enable Web content creators to:
<ul type=disc>
<li>
Easily make dynamic Web server pages by freely intermixing HTML with inline script.<br><br></li>
<li>
Separate Web content from business logic.<br><br></li>
<li>
Use any scripting language.<br><br></li>
<li>
Use any HTML authoring tool.<br><br></li>
<li>
Target any browser.<br><br></li>
<li>
Invoke ActiveX components to run business logic.</li>
</ul>
<p>
<img src="sql_mts_2.gif" border=0></p>
<p>
HTML content deployed as Active Server Pages can invoke business components running in Transaction Server. This extends Transaction Server scalability and component flexibility to Internet applications, combining "RAD" and "RAS" for the Internet.</p>
<h3>No Client Footprint</h3>
<p>
Microsoft Transaction Server does not require additional software running on the client system for either "fat" or "thin" client support.
<ul type=disc>
<li>
Any HTML browser can access Transaction Server applications by using HTML, HTTP, and IIS.<br><br></li>
<li>
Any Windows&nbsp;95 or Windows&nbsp;NT version 4.0 Workstation client running DCOM can access Transaction Server applications.</li>
</ul>
<p>
This approach to client integration contrasts sharply with existing middleware products that require client libraries or client nodes to provide integration with the desktop. </p>
<h3>Application Partitioning</h3>
<p>
Microsoft Transaction Server enables businesses to partition solutions across servers, providing enhanced performance and scalability:
<ul type=disc>
<li>
Solutions consist of collections of components.<br><br></li>
<li>
Components are divided into multiple packages.<br><br></li>
<li>
Packages can work with each other across a network through DCOM.<br><br></li>
<li>
This application partitioning is transparent to the component developer.</li>
</ul>
<p>
<img src="sql_mts_3.gif" border=0></p>
<p>
For example, a customer-management application might consist of the following components:
<ul type=disc>
<li>
Order management<br><br></li>
<li>
Credit<br><br></li>
<li>
Sales<br><br></li>
<li>
Inventory</li>
</ul>
<p>
These components can be deployed in:
<ul type=disc>
<li>
A single package on a single server.<br><br></li>
<li>
Two packages in a single server.<br><br></li>
<li>
Two packages across two servers. </li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 164: Copying Files from One Directory to Another</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn164"></a></sup>Tip 164: Copying Files from One Directory to Another</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to copy files from one directory to another in a Microsoft® Visual Basic® application.</p>
<h2>Using the FileCopy Statement</h2>
<p>
In a Microsoft® Visual Basic® application, you can use the <b>FileCopy</b> statement to copy a file to a different directory and/or disk drive. The <b>FileCopy</b> statement requires two arguments: the name of the file you want to copy, and the name to be given to the new file. The target name can include the path of a directory or a specific disk drive. However, note that the <b>FileCopy</b> statement does not generate any warning errors if the target file already exists. In such situations, the target file overwrites the existing file.</p>
<p>
Unfortunately, the <b>FileCopy</b> statement does not allow you to specify a wildcard source filename. Using MS-DOS®, you could copy a group of files by issuing a command such as:</p>
<pre><code>COPY *.* C:\NEWFILES
</code></pre>
<p>
This command tells MS-DOS to copy all the files in the current directory to the NEWFILES directory on drive C.</p>
<p>
To accomplish this same task in Visual Basic, you must use the <b>Dir$</b> function to retrieve the name of each individual file in the source directory. Then you use the <b>FileCopy</b> statement to copy that individual file to the target directory.</p>
<p>
A While-Wend routine can be used to quickly retrieve the names of all files in the target directory. As shown in the <b>CopyFile</b> subroutine in the example program below, the <b>Dir$</b> function returns the name of each file it finds. When <b>Dir$</b> returns an empty text string (""), you know that all files have been processed.</p>
<h2>Example Program</h2>
<p>
This program shows how to copy all files from the source directory to the destination directory.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; text1.Text = ""
 &nbsp;&nbsp; text2.Text = ""
End Sub
</code></pre>
</li>
<li>
Add a <b>Label</b> control to Form1. Label1 is created by default. Set its <b>Caption</b> property to "Source directory:".<br><br></li>
<li>
Add a second <b>Label</b> control to Form1. Label2 is created by default. Set its <b>Caption</b> property to "Destination directory:". Position this <b>Label</b> control just below Label1.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Position the <b>Text Box</b> control so that it is directly adjacent to the first <b>Label</b> control.<br><br></li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default. Position the <b>Text Box</b> control so that it is directly adjacent to the second <b>Label</b> control.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Copy Files".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim SourceDir As String
 &nbsp;&nbsp; Dim TargetDir As String
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; Dim P As Integer

 &nbsp;&nbsp; SourceDir = text1.Text
 &nbsp;&nbsp; TargetDir = text2.Text
 &nbsp;&nbsp; CopyFile SourceDir, TargetDir, P
 &nbsp;&nbsp; MsgBox "Number of files copied = " &amp; Str$(P)
End Sub
</code></pre>
</li>
<li>
Create a new subroutine called <b>CopyFile</b>. Add the following code to this subroutine:<pre><code>Sub CopyFile(SrcDir As String, TrgtDir As String, NumFiles As Integer)
 &nbsp;&nbsp; Dim OldDir As String&nbsp; 'source dir name
 &nbsp;&nbsp; Dim NewDir As String 'target dir name
 &nbsp;&nbsp; Dim FileName As String 'source filename
 &nbsp;&nbsp; Dim sType As String 'file type (extension)

 &nbsp;&nbsp; OldDir = SrcDir
 &nbsp;&nbsp; If Right$(OldDir, 1) &lt;&gt; "\" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OldDir = OldDir &amp; "\"
 &nbsp;&nbsp; End If

 &nbsp;&nbsp; NewDir = TrgtDir
 &nbsp;&nbsp; If Right$(NewDir, 1) &lt;&gt; "\" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NewDir = NewDir &amp; "\"
 &nbsp;&nbsp; End If

 &nbsp;&nbsp; NumFiles = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'returns # files copied

 &nbsp;&nbsp; FileName = Dir$(OldDir &amp; "*.*")
 &nbsp;&nbsp; While FileName &lt;&gt; ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileCopy (OldDir &amp; FileName), (NewDir &amp; FileName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Err = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NumFiles = NumFiles + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beep
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Error$, MB_ICONEXCLAMATION, ("Error copying file " 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; FileName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileName = Dir$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'get next matching file

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoEvents&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'allow processes to occur
 &nbsp;&nbsp; Wend
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Type the name of the source directory (the directory containing the files you want to copy) in the first <b>Text Box</b> control. Type the name of the destination directory in the second <b>Text Box</b> control. Click the <b>Copy Files Command Button</b> control. All files stored in the source directory are copied to the destination directory. A message box then appears indicating how many files were actually copied.</p>
</BODY>
</HTML>

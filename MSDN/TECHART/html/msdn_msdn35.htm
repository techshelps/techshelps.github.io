<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 35: Determining a Window's Size and Position</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn35"></a></sup>Tip 35: Determining a Window's Size and Position</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
You can use two Windows® application programming interface (API) functions to determine the exact size and position of a window within your Visual Basic® application: The <b>GetWindowRect</b> function returns the screen coordinates of the window's normal position, and the <b>GetWindowPlacement</b> function reports the window's position both when minimized or maximized, in addition to the window's normal position. This article explains how you can use these two functions in a Visual Basic application.</p>
<h2>Retrieving a Window's Size and Position</h2>
<p>
The Windows® <b>GetWindowRect</b> application programming interface (API) function returns the specified window's position. You can also determine the exact size, in screen coordinates, of the window by using this function.</p>
<p>
To declare this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your application's form:</p>
<pre><code>Declare Sub GetWindowRect Lib "User" (ByVal hWnd As Integer, lpRect As RECT)
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>GetWindowRect</b> function can be called by passing it two arguments. The <i>hWnd</i> argument must contain the handle of the window that you want to retrieve information for. After calling <b>GetWindowRect</b>, the function stores the window information in the second argument—a rectangle (<b>RECT</b>) structure. Call the <b>GetWindowRect</b> function with the following statement:</p>
<pre><code>Call GetWindowRect(Form1.hWnd, lpRect)
</code></pre>
<p>
This function stores its results in the RECT structure (in this case, <b>lpRect</b>). The <b>RECT</b> structure is defined as follows:</p>
<pre><code>Type RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '8 bytes
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
</code></pre>
<p>
These values represent the position of the window, in screen coordinates. To calculate the exact size of the window (including the borders, title bars, and so forth), you would issue the following statements:</p>
<pre><code>FormWidth = lpRect.Right - lpRect.Left
FormHeight = lpRect.Bottom - lpRect.Top
</code></pre>
<p>
On the other hand, the <b>GetWindowPlacement</b> function is a little more involved. Its <b>Declare</b> statement is:</p>
<pre><code>Declare Sub GetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWnd As WINDOWPLACEMENT)
</code></pre>
<p>
You specify the first argument as the window's handle, and the second argument as a pointer to the <b>WINDOWPLACEMENT</b> structure. This structure will be filled with the window's minimized, maximized, and normal position coordinates. The <b>WINDOWPLACEMENT</b> structure uses the <b>RECT</b> and <b>POINTAPI</b> structures as well, and looks like this:</p>
<pre><code>Type WINDOWPLACEMENT&nbsp;&nbsp;&nbsp; '22 bytes
 &nbsp;&nbsp; Length As Integer
 &nbsp;&nbsp; Flags As Integer
 &nbsp;&nbsp; ShowCmd As Integer
 &nbsp;&nbsp; PtMinPosition As POINTAPI
 &nbsp;&nbsp; PtMaxPosition As POINTAPI
 &nbsp;&nbsp; RcNormalPosition As RECT
End Type
</code></pre>
<p>
where the <b>POINTAPI</b> structure is:</p>
<pre><code>Type POINTAPI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '4 bytes
 &nbsp;&nbsp; X As Integer
 &nbsp;&nbsp; Y As Integer
End Type 
</code></pre>
<p>
The following table describes each field in the <b>WINDOWPLACEMENT</b> structure.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=18%>Length</td>
<td width=82%>An integer value that must be set to 22, the length of the structure.</td>
</tr>
<tr valign=top>
<td width=18%>Flags</td>
<td width=82%>An integer value containing either WPF_SETMINPOSITION (the ptMinPosition specifies the X, Y location of the window when minimized) or WPF_RESTORETOMAXIMIZED (the SW_SHOWMINIMIZED constant must be specified in the ShowCmd parameter. It indicates the window should be maximized the next time it is restored).</td>
</tr>
<tr valign=top>
<td width=18%>ShowCmd</td>
<td width=82%>An integer value that describes the visibility flags.</td>
</tr>
<tr valign=top>
<td width=18%>ptMinPosition</td>
<td width=82%>A <b>POINTAPI</b> structure containing the X, Y location of the window when it is minimized.</td>
</tr>
<tr valign=top>
<td width=18%>ptMaxPosition</td>
<td width=82%>A <b>POINTAPI</b> structure containing the X, Y location of the window when it is maximized.</td>
</tr>
<tr valign=top>
<td width=18%>RcNormalPosition</td>
<td width=82%>A <b>RECT</b> structure containing the position of the window when it is restored (set to its normal size).</td>
</tr>
</table><br>
<h2>Example Program</h2>
<p>
The program below uses the <b>GetWindowRect</b> function to display the window's size in the first text box and the <b>GetWindowPlacement</b> function to display the window's left, right, top, and bottom coordinates.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a Text Box control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a second Text Box control to Form1. Text2 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to Get Window Info.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Dim lpRect As RECT
 &nbsp;&nbsp; Dim lpWnd As WINDOWPLACEMENT
 &nbsp;&nbsp; Dim nPoint As POINTAPI
 &nbsp;&nbsp; Dim hWnd As Integer
 &nbsp;&nbsp; Dim FormWidth As Integer
 &nbsp;&nbsp; Dim FormHeight As Integer&nbsp; 
 &nbsp;&nbsp; Call GetWindowRect(Form1.hWnd, lpRect)
 &nbsp;&nbsp; FormWidth = lpRect.Right - lpRect.Left
 &nbsp;&nbsp; FormHeight = lpRect.Bottom - lpRect.Top&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Text1.Text = "Form Width = " + Str$(FormWidth) + Chr(13) + Chr(10)
 &nbsp;&nbsp; Text1.Text = Text1.Text + "Form Height = " + Str$(FormHeight) 
 &nbsp;&nbsp; lpWnd.Length = 22
 &nbsp;&nbsp; Call GetWindowPlacement(Form1.hWnd, lpWnd)
 &nbsp;&nbsp; FormWidth = lpWnd.RcNormalPosition.Right - lpWnd.RcNormalPosition.Left
 &nbsp;&nbsp; FormHeight = lpWnd.RcNormalPosition.Bottom - lpWnd.RcNormalPosition.Top
 &nbsp;&nbsp; Text2.Text = "Form Width = " + Str$(FormWidth) + Chr(13) + Chr(10)
 &nbsp;&nbsp; Text2.Text = Text2.Text + "Form Height = " + Str$(FormHeight)
End Sub
</code></pre>
</li>
<li>
Add a new BAS module to the project. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statements and structures to Module1.Bas (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Declare Sub GetWindowRect Lib "User" (ByVal hWnd As Integer, lpRect As RECT)
Declare Sub GetWindowPlacement Lib "User" (ByVal hWnd As Integer, lpWnd
 &nbsp; As WINDOWPLACEMENT)
Type RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '8 bytes
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
Type POINTAPI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '4 bytes
 &nbsp;&nbsp; X As Integer
 &nbsp;&nbsp; Y As Integer
End Type
Type WINDOWPLACEMENT&nbsp;&nbsp;&nbsp; '22 bytes
 &nbsp;&nbsp; Length As Integer
 &nbsp;&nbsp; Flags As Integer
 &nbsp;&nbsp; ShowCmd As Integer
 &nbsp;&nbsp; PtMinPosition As POINTAPI
 &nbsp;&nbsp; PtMaxPosition As POINTAPI
 &nbsp;&nbsp; RcNormalPosition As RECT
End Type
</code></pre>
</li>
</ol>
</BODY>
</HTML>

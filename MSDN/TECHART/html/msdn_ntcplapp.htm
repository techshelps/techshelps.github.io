<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Win32 Control Panel Applets with Visual C++</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ntcplapp"></a></sup>Creating Win32 Control Panel Applets with Visual C++</h1>
<p>
Nigel Thompson<br>
Microsoft Developer Network Technology Group</p>
<p>
July 24, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4329">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the NTCPLAPP sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article describes a simple step-by-step process for building Win32® Control Panel applets using Microsoft® Visual C++™ and a single C++ class module. The accompanying NTCPLAPP sample application was built using Microsoft Visual C++ version 2.2 and tested on Microsoft Windows NT™ version 3.51 and Microsoft Windows® 95. </p>
<h2>Introduction</h2>
<p>
Creating Control Panel applets is not something most of us do very often. I found the need to create one while building a Microsoft® Windows NT™ service application. In order to manage my service, I needed some sort of user interface, and putting that in the Control Panel seemed the logical thing to do. Creating Control Panel applets, as they are called, does involve quite a bit of digging through the documentation to find out exactly what you need to do. I've been through that process and have built a single C++ class (<b>CControlPanel</b>) to do the grunt work for you. This article describes the steps you need to follow to build your own applet. I kept my sample very simple, providing only one applet in the sample. If you want to modify it to support multiple applets, you should find that relatively easy to do. One warning about the code in <b>CControlPanel</b>: Because the code sample uses a global C++ object pointer, you cannot have more than one object (<b>CControlPanel</b>) in the applet you create. This should not be a limitation because one <b>CControlPanel</b> object can support multiple applets.</p>
<h2>The Steps</h2>
<p>
My application was created in C:\APPS\NTCPLAPP2 and the target applet was copied to C:\NT351\SYSTEM23. Obviously, your own development configuration might be different from mine, so bear this in mind while following these instructions.
<ol>
<li>
Start Visual C++™ and create a new project. I called mine <b>MyCplApp</b>. Set the project type to "MFC AppWizard (dll)" and choose the option "Use MFC in a static library." This will create a dynamic-link library (DLL) that is not dependent on any DLLs other than those that ship with every system.<br><br></li>
<li>
From the Project Settings menu, set the link options so that the output file is created in your &lt;systempath&gt;\SYSTEM32 directory. This prevents your having to copy the applet for testing every time you make a change. Set the output file extension to .CPL. My destination entry was: C:\NT351\SYSTEM32\MYCPLAPP.CPL.<br><br></li>
<li>
From the Project Settings menu, set the debug options as follows: <p class=tl>
Executable: &lt;systempath&gt;/SYSTEM32/CONTROL.EXE<br>
Working Directory: C:\APPS\NTCPLAPP2&nbsp; (your source code directory)<br>
Additional DLLs: &lt;systempath&gt;/SYSTEM32/MYCPLAPP.CPL&nbsp; (your executable) </P><p class=tl>
When you click the Run button, the Control Panel will start and then load your applet, so you can set breakpoints and debug it.</P></li>
<li>
Copy the CTRLPAN.CPP and CTRLPAN.H files from the NTCPLAPP sample to your new project. From the Project Files menu, add CTRLPAN.CPP to your project.<br><br></li>
<li>
Edit the main application header file (MYCPLAPP.H) and add the headers and a Control Panel object as shown in the code here:<pre><code>// MYCPLAPP.H : Main header file for MYCPLAPP.DLL
//

#ifndef __AFXWIN_H__
#error include 'stdafx.h' before including this file for PCH
#endif
#ifdef IDC_STATIC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
#undef IDC_STATIC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
#endif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
#include "resource.h"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
#include "mypanel.h"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
#include "mydialog.h"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.

/////////////////////////////////////////////////////////////////////////////
// CMyCplAppApp
// See MYCPLAPP.CPP for the implementation of this class.
//

class CMyCplAppApp : public CWinApp
{
public:
CMyCplAppApp();

// Overrides
// ClassWizard generated virtual function overrides
//{{AFX_VIRTUAL(CMyCplAppApp)
//}}AFX_VIRTUAL

//{{AFX_MSG(CMyCplAppApp)
// NOTE - ClassWizard will add and remove member functions here.
//&nbsp;&nbsp;&nbsp; DO NOT EDIT what you see in these blocks of generated code!
//}}AFX_MSG
DECLARE_MESSAGE_MAP()

// local data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &lt;-- You add this.
CMyPanel m_Control;&nbsp;&nbsp; // &lt;-- You add this.
};
</code></pre>
</li>
<li>
Create a new class, <b>CMyPanel</b>, derived from <b>CControlPanel</b> in two new files: MYPANEL.H and MYPANEL.CPP. Add MYPANEL.CPP to the project. Here's MYPANEL.H from the NTCPLAPP sample:<pre><code>// MYPANEL.H

#include "ctrlpan.h"

class CMyPanel : public CControlPanel
{
public:
virtual LONG OnInquire(UINT uAppNum, NEWCPLINFO* pInfo); 
virtual LONG OnDblclk(HWND hwndCPl, UINT uAppNum, LONG lData); 
};
</code></pre>
<p class=tl>
As you can see, it's very simple and overrides only two member functions from <b>CMyPanel</b>. We'll look at the implementation of MYPANEL.CPP later.</P></li>
<li>
Open the project's .DEF file (MYCPLAPP.DEF) and add an export statement for the <b>CPlApplet</b> function:<pre><code>; MYCPLAPP.DEF : Declares the module parameters for the DLL.

LIBRARY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYCPLAPP
DESCRIPTION&nbsp; 'MYCPLAPP Windows Dynamic Link Library'

EXPORTS
; Explicit exports can go here
CPlApplet
</code></pre>
</li>
<li>
Open the project's .RC file (MYCPLAPP.RC) and use the Resource - New menu to add a new icon. Create the icon for your Control Panel applet. I gave mine this ID: <b>IDI_MYICON</b>.<br><br></li>
<li>
Use the Resource - New menu again to add the dialog box for your applet. I gave mine this ID: <b>IDD_MYDIALOG</b>.<br><br></li>
<li>
Run ClassWizard and create a class for your dialog box. I called mine <b>CMyDialog</b> in the MYDIALOG.H and MYDIALOG.CPP files.<p class=tl>
Add member variables as needed. I added a single integer value, so there would be something simple to show in the sample.</P></li>
<li>
In your <b>CMyPanel</b> implementation file (MYPANEL.CPP), you must now implement the <b>OnInquire</b> and <b>OnDblclk</b> member functions. You may also want to use <b>OnInit</b> and <b>OnStop</b>. (See the discussion later in the "Implementing OnGetCount, OnInit, and OnStop" section for more details on these functions.)<br><br></li>
<li>
Update all the dependencies on your project and build it. If it builds OK, you should be able to click the Run button and see the Windows Control Panel start. The Control Panel will load all the applets, including yours. If you set breakpoints in your code, they should be hit now.</li>
</ol>
<h2>Implementing OnInquire and OnDblclk</h2>
<p>
To implement even the simplest applet, you must override <b>CControlPanel::OnInquire</b> and <b>CControlPanel::OnDblclk</b>. <b>OnInquire</b> is called to get information about your icon, caption, and so on. Here's how I implemented it for the sample:</p>
<pre><code>LONG CMyPanel::OnInquire(UINT uAppNum, NEWCPLINFO* pInfo) 
{
 &nbsp;&nbsp; // Fill in the data.
 &nbsp;&nbsp; pInfo-&gt;dwSize = sizeof(NEWCPLINFO); // Important
 &nbsp;&nbsp; pInfo-&gt;dwFlags = 0;
 &nbsp;&nbsp; pInfo-&gt;dwHelpContext = 0;
 &nbsp;&nbsp; pInfo-&gt;lData = 0;
 &nbsp;&nbsp; pInfo-&gt;hIcon = ::LoadIcon(AfxGetResourceHandle(),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAKEINTRESOURCE(IDI_MYICON));
 &nbsp;&nbsp; strcpy(pInfo-&gt;szName, "My Applet");
 &nbsp;&nbsp; strcpy(pInfo-&gt;szInfo, "My Control Panel Applet");
 &nbsp;&nbsp; strcpy(pInfo-&gt;szHelpFile, "");
 &nbsp;&nbsp; return 0; // OK (Don't send CPL_INQUIRE msg)
}
</code></pre>
<p>
The entries you might change are the icon ID (if yours isn't IDI_MYICON), the name, and the information string that appears in the Control Panel status bar when your applet is selected. You might also create a Help file, in which case you need to supply its filename (and possibly its path, if it isn't in the same location as the applet) in the <b>szHelpFile</b> field.</p>
<p>
The implementation of <b>OnDblclk</b> is a bit longer because it really does all the work of the applet. It essentially does three things:
<ol>
<li>
Loads the current state. (I saved mine in the registry.)<br><br></li>
<li>
Shows the dialog box with the current state and allows the user to make changes.<br><br></li>
<li>
Saves or discards the new information (OK or Cancel operations).</li>
</ol>
<p>
Here's how I did this for the sample:</p>
<pre><code>LONG CMyPanel::OnDblclk(HWND hwndCPl, UINT uAppNum, LONG lData)
{
 &nbsp;&nbsp; // Create the dialog box using the parent window handle.
 &nbsp;&nbsp; CMyDialog dlg(CWnd::FromHandle(hwndCPl));

 &nbsp;&nbsp; // Set the default value.
 &nbsp;&nbsp; dlg.m_iMyValue = 0;

 &nbsp;&nbsp; // Read the current state from the registry.
 &nbsp;&nbsp; // Try opening the registry key:
 &nbsp;&nbsp; // HKEY_CURRENT_USER\Control Panel\&lt;AppName&gt;
 &nbsp;&nbsp; HKEY hcpl;
 &nbsp;&nbsp; if (RegOpenKeyEx(HKEY_CURRENT_USER,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Control Panel",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KEY_QUERY_VALUE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;hcpl) == ERROR_SUCCESS) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HKEY happ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (RegOpenKeyEx(hcpl,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MyPanel",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KEY_QUERY_VALUE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;happ) == ERROR_SUCCESS) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Yes we are installed
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DWORD dwType = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DWORD dwSize = sizeof(dlg.m_iMyValue);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegQueryValueEx(happ,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MyValue",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;dwType,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (BYTE*)&amp;dlg.m_iMyValue,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;dwSize);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegCloseKey(happ);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegCloseKey(hcpl);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; // Show the dialog box.
 &nbsp;&nbsp; if (dlg.DoModal() != IDOK) return 0;

 &nbsp;&nbsp; // Update the registry.
 &nbsp;&nbsp; // Try creating/opening the registry key.
 &nbsp;&nbsp; if (RegOpenKeyEx(HKEY_CURRENT_USER,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Control Panel",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KEY_WRITE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;hcpl) == ERROR_SUCCESS) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HKEY happ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DWORD dwDisp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (RegCreateKeyEx(hcpl,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MyPanel",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_OPTION_NON_VOLATILE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KEY_WRITE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;happ,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;dwDisp) == ERROR_SUCCESS) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the value.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegSetValueEx(happ,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MyValue",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_DWORD,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (BYTE*)&amp;dlg.m_iMyValue,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(dlg.m_iMyValue));

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Finished with keys.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegCloseKey(happ);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegCloseKey(hcpl);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; return 0;
}
</code></pre>
<p>
This looks a bit complex, but most of it is dealing with opening registry keys. For this sample, I chose to keep the data in the registry under HKEY_CURRENT_USER\Control Panel\&lt;AppName&gt; and used a key called MyValue to store the single value the dialog box allows the user to vary. So this sample stores data on a per-user basis. In other words, different users could use this dialog box to set personal preferences. If your need is for something user-independent, you probably want to store your data under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\&lt;yourservice&gt;.</p>
<h2>Implementing OnGetCount, OnInit, and OnStop</h2>
<p>
If your Control Panel utility contains more than one applet, you'll need to override <b>OnGetCount</b> to report how many applets you have, and your <b>OnInquire</b> function will need to respond once for each applet. You may also have some global memory allocation to do. If so, do this in the <b>OnInit</b> function, because this is the only place your applet can fail and have the Control Panel respond sensibly (that is, by not running the applet). Use the <b>OnStop</b> function to clean up any global allocations.</p>
<p>
You should note that the Control Panel will run your applet once when the Control Panel initially starts up in order to get a count of the applets and the icons for each applet. It will then run your applet again if the user double-clicks its icon. That's why my sample does all its state reading in the <b>OnDblclk</b> function. It's redundant to do it in the <b>OnInit</b> function because this means doing all the work reading the state information just to show the icon, as well as showing the dialog box if the applet is actually run. </p>
<h2>Reference Material</h2>
<p>
The Control Panel uses the single entry point, <b>CPlApplet</b>, to communicate with your applet. It sends <b>CPL_DBLCLK</b>, <b>CPL_EXIT</b>, <b>CPL_GETCOUNT</b>, <b>CPL_INIT</b>, <b>CPL_INQUIRE</b>, <b>CPL_NEWINQUIRE</b>, <b>CPL_SELECT</b> and <b>CPL_STOP </b>messages to this function. For more information, see the Win32® SDK documentation for these messages. </p>
</BODY>
</HTML>

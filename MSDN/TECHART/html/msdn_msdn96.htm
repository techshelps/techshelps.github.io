<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 96: Centering a Form over Another Form</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn96"></a></sup>Tip 96: Centering a Form over Another Form</h1>
<p>
May 29, 1995</p>
<h2>Abstract</h2>
<p>
You can position a form so it appears centered within another form. This article explains how to center a form within its parent form. This same technique can be applied to centering controls such as <b>Picture Box</b> controls over other controls.</p>
<h2>Centering Forms in Visual Basic</h2>
<p>
When developing an application in Visual Basic®, you may need to position a form so it is centered over another form. You can position a form in this way by using Visual Basic's <b>Left</b>, <b>Top</b>, <b>Height</b>, and <b>Width</b> properties.</p>
<p>
The <b>Left</b> property defines the position of the form's left edge and the <b>Top</b> property defines the position of the form's top edge. In the same manner, the <b>Width</b> and <b>Height</b> properties define how wide and high the form is. It is easy enough to center a form on a container by calculating the width and height of the form and dividing that value by two to center it within the control. </p>
<p>
To center a form within a parent form, take the width of Form1 and Form2, subtract these two values, and divide the result by two. Next, add Form1's width to the result to determine the position of Form2's left edge within Form1. This will center Form2 horizontally within Form1.</p>
<p>
In the same manner, you can center a form vertically within another form by using the <b>Top</b> and <b>Height</b> properties of each form, dividing by two, and setting Form2's <b>Top</b> property to the result.</p>
<h2>Example Program</h2>
<p>
This program shows how to center a form over another form. After you run this example program by pressing the F5 function key, click the <b>Command Button</b>. The program displays Form2 centered over its "parent," Form1.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
Form2.Show
CentreFormWithParent Form2, Form1
End Sub
</code></pre>
</li>
<li>
From the Insert menu, select Form to create a second form. Form2 is created by default. Change this form's size so it is smaller than Form1.<br><br></li>
<li>
Create a new function called <b>CreateFormWithParent</b>. Add the following code to this function:<pre><code>Sub CenterFormWithParent(aForm As Form, aParent As Form)
 &nbsp;&nbsp; aForm.Left = aParent.Left + (aParent.Width - aForm.Width) / 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; aForm.Top = aParent.Top + (aParent.Height - aForm.Height) / 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If (aForm.Left + aForm.Width) &gt; Screen.Width Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aForm.Left = Screen.Width - aForm.Width
 &nbsp;&nbsp; Else
 &nbsp;&nbsp; If aForm.Left &lt; 0 Then aForm.Left = 0
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If (aForm.Top + aForm.Height) &gt; Screen.Height Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aForm.Top = Screen.Height - aForm.Height
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If aForm.Top &lt; 0 Then aForm.Top = 0
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 76: Detecting Right Mouse Button Clicks on List Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn76"></a></sup>Tip 76: Detecting Right Mouse Button Clicks on List Box Controls</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
When using a <b>List Box</b> control in a Visual Basic® application, the user can click on an item with the left mouse button. That item then becomes selected. This article explains how you can select items with the right mouse button instead of the left mouse button.</p>
<h2>Intercepting Right Mouse Button Click Events</h2>
<p>
The LB_GETITEMRECT message can be used to determine which item in a <b>List Box</b> was selected. This message retrieves the coordinates of a bounding rectangle for the selected item in the <b>List Box</b> control. To invoke this message, you must tell it the entry number, starting at zero, whose dimensions you want to retrieve, as well as a RECT structure that will hold the coordinate information.</p>
<p>
To determine which item a user clicked on with the right mouse button, you trap the MouseUp event. The MouseUp event can be used to determine which mouse button was pressed and the mouse's current X and Y coordinates on the form or control.</p>
<p>
Once we have determined the mouse's position over the <b>List Box</b> control, we can use the Windows® application programming interface (API) <b>SendMessage</b> function to return the index number of the item the mouse was positioned over when the MouseUp event was triggered.</p>
<h2>Example Program</h2>
<p>
The example program below displays a <b>List Box</b> control on a form. Whenever you click the right mouse button on an item in the <b>List Box</b>, the message "Right Click on" is displayed in the <b>Text Box</b> along with the index number corresponding to the selected item.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; List1.AddItem "Item #1"
 &nbsp;&nbsp; List1.AddItem "Item #2"
 &nbsp;&nbsp; List1.AddItem "Item #3"
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.<br><br></li>
<li>
Add the following code to the MouseUp event for List1 (note that the Private lines must be typed as a single line of code):<pre><code>Private Sub List1_MouseUp(Button As Integer, Shift As Integer, X As Single,
  Y As Single)
 &nbsp;&nbsp; Dim Item%
 &nbsp;&nbsp; If (Button = 2) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item% = GetRClickedItem(List1, X, Y)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (Item% = LB_ERR) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = "ERROR"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = "Right Click on " + Str(Item%)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a new module to the project. Module.Bas is created by default.<br><br></li>
<li>
Add the following code to the Module.Bas file (note that the Private and If lines must be typed as a single line of code):<pre><code>Type RECT
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
Global Const WM_USER = &amp;H400
Global Const LB_GETITEMRECT = (WM_USER + 25)
Global Const LB_ERR = (-1)
Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal 
  wMsg As Integer, ByVal wParam As Integer, lParam As Any) As Long
Function GetRClickedItem%(MyList As Control, X As Single, Y As Single)
 &nbsp;&nbsp; Dim ClickX%, ClickY%, Ret&amp;, CurRect As RECT
 &nbsp;&nbsp; ClickX% = X \ Screen.TwipsPerPixelX
 &nbsp;&nbsp; ClickY% = Y \ Screen.TwipsPerPixelY
 &nbsp;&nbsp; i% = 0
 &nbsp;&nbsp; Do While True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ret&amp; = SendMessage(MyList.hWnd, LB_GETITEMRECT, i%, CurRect)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (Ret&amp; = LB_ERR) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetRClickedItem% = LB_ERR: Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (ClickX% &gt;= CurRect.Left) And (ClickX% &lt;= CurRect.Right) And 
  (ClickY% &gt;= CurRect.Top) And (ClickY% &lt;= CurRect.Bottom) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetRClickedItem% = i%: Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i% = i% + 1
 &nbsp;&nbsp; Loop
 &nbsp;&nbsp; 
End Function
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Programmer's Reference Volume 3: Messages, Structures. "LB_GETITEMRECT". (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK)</p>
<p>
<a href="msdn_listbox.htm">"List Box Controls."</a> (MSDN Library, Technical Articles)</p>
</BODY>
</HTML>

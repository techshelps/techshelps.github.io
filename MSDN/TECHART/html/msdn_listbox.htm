<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>List Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_listbox"></a>List Box Controls</h1>
<p>
Kyle Marsh<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: March 23, 1992</p>
<h2>Abstract</h2>
<p>
This article is a complete reference for list box controls. It describes all list box control styles, messages, and notifications in more detail than found in the Microsoft® Windows™ version 3.<i>x</i> Software Development Kit (SDK) documentation.</p>
<h2>Introduction</h2>
<p>
List box controls display a list of items from which the user can choose one or more items. List box controls can be either single column (one column of choices) or multiple column (one or more columns of choices), single selection (allowing only one item to be selected at a time) or multiple selection (allowing one or more items to be selected at a time).</p>
<h2>Limits of List Box Controls</h2>
<p>
Several factors limit a list box control:
<ul type=disc>
<li>
The control structure of a list box and its tab stop settings are allocated from the USER heap. If the USER heap does not have enough free space for these structures, the list box will not be able to operate.<ul type=disc>
<li>
In Microsoft® Windows™ version 3.0, the control structure is 66 bytes in length; in Windows version 3.1, it's 64 bytes in length.<br><br></li>
<li>
Windows allocates an integer to store the position of each tab stop and an integer to store the number of tab stops.</li>
</ul>
</li>
<li>
List boxes store all the strings in the list box in one globally allocated segment. Windows limits the total amount of text in a list box to 64 kilobytes (K). If the average string length in a list box is 100 bytes, for example, the list box will be able to display about 650 strings. Space for strings in a list box is allocated in multiples of 256 bytes.</li>
</ul>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Average string length <br>
(including NULL terminator)</b></td>
<td class=label width=50%><b><br>
Maximum number of items</b></td>
</tr>
<tr valign=top>
<td width=50%>15</td>
<td width=50%>4352</td>
</tr>
<tr valign=top>
<td width=50%>30</td>
<td width=50%>2176</td>
</tr>
<tr valign=top>
<td width=50%>45</td>
<td width=50%>1450</td>
</tr>
<tr valign=top>
<td width=50%>60</td>
<td width=50%>1088</td>
</tr>
<tr valign=top>
<td width=50%>90</td>
<td width=50%>725</td>
</tr>
</table><br>
<ul type=disc>
<li>
List boxes maintain information about each item in the list box. Storage space for this information is globally allocated, in multiples of 32 items, and limited to a total of 32K. The following information is kept for each item in a list box:<ul type=disc>
<li>
A 32-bit data value<br><br></li>
<li>
A 16-bit index into the string storage buffer for the start of this string if the list box stores strings (that is, is not owner-drawn or has the LBS_HASSTRINGS style)<br><br></li>
<li>
1 byte for the selected state if the list box has the LBS_MULTIPLESEL or LBS_EXTENDEDSEL styles<br><br></li>
<li>
1 byte for the item height if the list box is a variable height owner-drawn list box (LBS_OWNERDRAWVARIABLE style)</li>
</ul>
</li>
</ul>
<p>
No individual string item can be greater than 32K in length. The above values lead to the item limits in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>List box attributes</b></td>
<td class=label width=23%><b>Maximum items</b></td>
<td class=label width=41%><b>Average string length to get the maximum number of items in the list box (including NULL terminator)</b></td>
</tr>
<tr valign=top>
<td width=36%>"Default List Box" </td>
<td width=23%>5440</td>
<td width=41%>12</td>
</tr>
<tr valign=top>
<td width=36%>LBS_EXTENDEDSEL* </td>
<td width=23%>4672</td>
<td width=41%>14</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWFIXED | LBS_HASSTRINGS</td>
<td width=23%>5440</td>
<td width=41%>12</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWFIXED | <br>
LBS_HASSTRINGS | <br>
LBS_EXTENDEDSEL*</td>
<td width=23%>4672</td>
<td width=41%>14</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWVARIABLE | LBS_HASSTRINGS</td>
<td width=23%>4672</td>
<td width=41%>14</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWVARIABLE | LBS_HASSTRINGS | <br>
LBS_EXTENDEDSEL*</td>
<td width=23%>4064</td>
<td width=41%>16</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWFIXED</td>
<td width=23%>8160</td>
<td width=41%>N/A</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWFIXED | LBS_EXTENDEDSEL*</td>
<td width=23%>6528</td>
<td width=41%>N/A</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWVARIABLE</td>
<td width=23%>6528</td>
<td width=41%>N/A</td>
</tr>
<tr valign=top>
<td width=36%>LBS_OWNERDRAWVARIABLE | LBS_EXTENDEDSEL*</td>
<td width=23%>5440</td>
<td width=41%>N/A</td>
</tr>
</table><br>
<p>
* Or LBS_MULTIPLESEL</p>
<h2>List Box Control Styles</h2>
<p>
List box controls implement the styles in the sections that follow.</p>
<h3>LBS_NOTIFY</h3>
<p>
The LBS_NOTIFY style causes the list box to notify the list box parent window with a notification message whenever the user:
<ul type=disc>
<li>
Clicks an item (LBN_SELCHANGE).<br><br></li>
<li>
Double-clicks an item (LBN_DBLCLK).<br><br></li>
<li>
Uses the keyboard to change a list box selection (LBN_SELCHANGE).</li>
</ul>
<p>
The list box sends these notification messages regardless of the LBS_NOTIFY setting:
<ul type=disc>
<li>
LBN_ERRSPACE<br><br></li>
<li>
LBN_SELCHANGE when the user presses CTRL+/ or CTRL+\</li>
</ul>
<h3>LBS_SORT</h3>
<p>
The LBS_SORT style causes the list box to sort strings alphabetically that are added to the list box with an LB_ADDSTRING message in either of these cases:
<ul type=disc>
<li>
If the list box is not an owner-drawn list box<br><br></li>
<li>
If the list box is an owner-drawn list box with the LBS_HASSTRINGS style</li>
</ul>
<p>
Owner-drawn list boxes without the LBS_HASSTRINGS style but with the LBS_SORT style receive WM_COMPAREITEM messages when the list box adds an item as a result of an LB_ADDSTRING message or looks for an item in the list box as a result of an LB_FINDSTRING, LB_FINDSTRINGEXACT, or LB_SELECTSTRING message.</p>
<p>
Items added with an LB_INSERTSTRING message ignore this style.</p>
<h3>LBS_NOREDRAW</h3>
<p>
The LBS_NOREDRAW style causes the list box to initialize the redraw status of the list box to FALSE. This, in turn, causes the list box to not update its appearance when changes to the list box are made. An application can change the redraw status of a list box by sending a WM_SETREDRAW message to the list box. (See "WM_SETREDRAW" below).</p>
<h3>LBS_MULTIPLESEL</h3>
<p>
The LBS_MULTIPLESEL style causes the list box to allow the user to select multiple items. By default, list boxes allow only one item to be selected at a time. The LBS_MULTIPLESEL style provides a simple interface for making multiple selections. This interface does not have the power that the LBS_EXTENDEDSEL style provides for making multiple contiguous selections. If this style is combined with the LBS_EXTENDEDSEL style, the LBS_EXTENDEDSEL style overrides the LBS_MULTIPLESEL style.</p>
<p>
This style is supplied to allow applications to create list boxes that comply with the IBM common user-access guidelines.</p>
<h3>LBS_OWNERDRAWFIXED</h3>
<p>
The LBS_OWNERDRAWFIXED style specifies that the list box parent window is responsible for drawing, sorting, and storing the list box contents and that the items in the list box have the same height. If this style is combined with the LBS_HASSTRINGS style, the list box manages the sorting and storage of the strings in the list box. The list box sends these four messages to its parent window to inform the application of the required actions for the list box:
<ul type=disc>
<li>
WM_COMPAREITEM<br><br></li>
<li>
WM_DELETEITEM<br><br></li>
<li>
WM_DRAWITEM<br><br></li>
<li>
WM_MEASUREITEM</li>
</ul>
<p>
These messages are described below in the sections devoted to them.</p>
<p>
If the LBS_OWNERDRAWFIXED style is combined with the LBS_MULTICOLUMN style, the application can set the width of the columns, as well as the height of the rows, when responding to a WM_MEASUREITEM message.</p>
<p>
If the LBS_OWNERDRAWFIXED style is combined with the LBS_OWNERDRAWVARIABLE style, the LBS_OWNERDRAWFIXED style overrides the LBS_OWNERDRAWVARIABLE style.</p>
<h3>LBS_OWNERDRAWVARIABLE</h3>
<p>
The LBS_OWNERDRAWVARIABLE style specifies that the items in the list box are variable in height and that the list box parent window is responsible for drawing, sorting, and storing the list box contents. The height of an item is limited to 255 pixels.</p>
<p>
If the LBS_OWNERDRAWVARIABLE style is combined with the LBS_HASSTRINGS style, the list box manages the sorting and storage of the strings in the list box. The list box sends these four messages to its parent window to inform the application of the required actions for the list box:
<ul type=disc>
<li>
WM_COMPAREITEM<br><br></li>
<li>
WM_DELETEITEM<br><br></li>
<li>
WM_DRAWITEM<br><br></li>
<li>
WM_MEASUREITEM</li>
</ul>
<p>
These messages are described below in the sections devoted to them.</p>
<p>
The list box sends a WM_MEASUREITEM message to the window that owns the list box when an item is added to the list box. The list box sends a WM_DRAWITEM message to the owner window whenever an item needs to be drawn. This can be as a result of adding or removing items from the list box or when the list box needs to be redrawn.</p>
<p>
The LBS_OWNERDRAWVARIABLE style cannot be combined with the LBS_MULTICOLUMN style. If these two styles are combined, the LBS_OWNERDRAWVARIABLE style is ignored.</p>
<p>
If the LBS_OWNERDRAWVARIABLE style is combined with the LBS_OWNERDRAWFIXED style, the LBS_OWNERDRAWFIXED style overrides the LBS_OWNERDRAWVARIABLE style.</p>
<p>
The LBS_OWNERDRAWVARIABLE style causes the LBS_NOINTEGRALHEIGHT style to be enabled.</p>
<h3>LBS_HASSTRINGS</h3>
<p>
The LBS_HASSTRINGS style specifies that the list box contains items consisting of strings. The list box maintains the memory and pointers for the strings so the application can use an LB_GETTEXT message to retrieve the text for a particular item. By default, all list boxes except owner-drawn list boxes have this style. An application can create an owner-drawn list box either with or without this style.</p>
<p>
Owner-drawn list boxes without the LBS_HASSTRINGS style get the item's 32-bit data value in response to the LB_GETTEXT message.</p>
<h3>LBS_USETABSTOPS</h3>
<p>
The LBS_USETABSTOPS style causes the list box to recognize and expand tab characters when drawing its strings. The default tab positions are 32 dialog box units. These tab positions can be altered using an LB_SETTABSTOPS message (see below). By default, list boxes do not expand tab characters when drawing strings.</p>
<h3>LBS_NOINTEGRALHEIGHT</h3>
<p>
The LBS_NOINTEGRALHEIGHT style causes the list box to be exactly the size specified by the application. By default, list boxes resize themselves when created or sized so that partial items are not displayed.</p>
<p>
For list boxes with the LBS_OWNERDRAWVARIABLE style, the LBS_NOINTEGRALHEIGHT style is always enforced.</p>
<h3>LBS_MULTICOLUMN</h3>
<p>
The LBS_MULTICOLUMN style specifies a multiple-column list box that is scrolled horizontally. The list box control calculates a column width for itself, or an application can set the column width by sending an LB_SETCOLUMNWIDTH message to the list box. List boxes with the LBS_OWNERDRAWFIXED style can have the column set by the application when the list box sends the application a WM_MEASUREITEM message at the time it's created. By default, the column width for a list box is 15 times the average character width for the font used by the list box.</p>
<p>
List boxes with the LBS_MULTICOLUMN style cannot be vertically scrolled. The list box ignores any WM_VSCROLL messages it receives.</p>
<p>
The LBS_MULTICOLUMN style cannot be combined with the LBS_OWNERDRAWVARIABLE style. If these two styles are combined, the LBS_OWNERDRAWVARIABLE style is ignored.</p>
<h3>LBS_WANTKEYBOARDINPUT</h3>
<p>
The LBS_WANTKEYBOARDINPUT style causes the list box to send WM_VKEYTOITEM or WM_CHARTOITEM messages to the list box parent window whenever the user presses a key and the list box has the input focus. This allows an application to perform special processing on the keyboard input. If a list box has the LBS_HASSTRINGS style, the list box can receive WM_VKEYTOITEM messages but not WM_CHARTOITEM messages. If a list box does not have the LBS_HASSTRINGS style, the list box can receive WM_CHARTOITEM messages as well as WM_VKEYTOITEM messages.</p>
<h3>LBS_EXTENDEDSEL</h3>
<p>
The LBS_EXTENDEDSEL style causes the list box to allow the user to select multiple items. By default, list boxes allow only one item to be selected at a time. The LBS_EXTENDEDSEL style provides a powerful interface for making multiple contiguous selections as well as multiple noncontiguous selections. If this style is combined with the LBS_MULTIPLESEL style, the LBS_EXTENDEDSEL style overrides the LBS_MULTIPLESEL style.</p>
<h3>LBS_DISABLENOSCROLL (Windows Version 3.1 or Later)</h3>
<p>
The LBS_DISABLENOSCROLL style causes the list box to disable any scroll bar that is not needed because the current contents fit the list box. Normally, when a list box scroll bar is not needed, it is hidden. The LBS_DISABLENOSCROLL style must be used in conjunction with the WS_VSCROLL or WS_HSCROLL style.</p>
<h3>WS_VSCROLL and WS_HSCROLL</h3>
<p>
When either or both of these styles are specified for a list box, scroll bars are created for the list box.</p>
<p>
A vertical scroll bar is displayed when there are more items in a list box without the LBS_MULTICOLUMN style than can be displayed at one time. Without a scroll style (WS_VSCROLL or WS_HSCROLL), the list box will not display a vertical scroll bar, although the list box still scrolls when the user uses the mouse or keyboard. List boxes with the LBS_MULTICOLUMN style cannot scroll vertically, so no vertical scroll bar is displayed.</p>
<p>
A horizontal scroll bar is used by a list box on these occasions:
<ul type=disc>
<li>
When the list box has the LBS_MULTICOLUMN style, and there are more items than can be displayed at one time, the list box scrolls the columns horizontally. If the list box does not have the WS_HSCROLL or WS_VSCROLL style, the user can scroll the list box horizontally only by using the keyboard. A horizontal scroll bar is required to allow the user to scroll an LBS_MULTICOLUMN list box with a mouse.<br><br></li>
<li>
When a list box does not have the LBS_MULTICOLUMN style and the list box client window is narrower than the horizontal extent of the list box, a horizontal scroll bar is needed to scroll through the entire horizontal extent. The application must set the horizontal extent of the list box by sending the list box an LB_SETHORIZONTALEXTENT message. Without the horizontal extent set by the application, no horizontal scroll bar is displayed. See the "Considerations for Horizontal Scroll Bars in List Boxes" article in the MSDN Library for a complete discussion of horizontal scroll bars on list boxes.</li>
</ul>
<h3>LBS_STANDARD</h3>
<p>
LBS_STANDARD combines the following styles:
<ul type=disc>
<li>
LBS_NOTIFY notifies the owner window of changes.<br><br></li>
<li>
LBS_SORT sorts the items alphabetically.<br><br></li>
<li>
WS_VSCROLL creates a vertical scroll bar in the list box.<br><br></li>
<li>
WS_BORDER creates a border in the list box.</li>
</ul>
<h2>List Box Control Messages</h2>
<p>
List box controls implement the messages in the sections that follow.</p>
<h3>LB_ADDSTRING</h3>
<p>
An application sends an LB_ADDSTRING message to add the string specified in the <i>lParam</i> parameter to a list box. If the list box has the LBS_SORT style, the string is inserted in the proper location; otherwise, it is added to the end of the list.</p>
<p>
If the list box is owner-drawn, has the LBS_SORT style, and does not have the LBS_HASSTRINGS style, the list box sends WM_COMPAREITEM messages so the list box can sort the items correctly.</p>
<p>
If the list box is owner-drawn and does not have the LBS_HASSTRINGS style, the item's 32-bit data value is set to the value of the <i>lParam</i> parameter.</p>
<h3>LB_DELETESTRING</h3>
<p>
An application sends an LB_DELETESTRING message to a list box to remove from the list box a string or data item specified in the <i>wParam</i> parameter. If the list box is owner-drawn and does not have the LBS_HASSTRINGS style, the list box sends a WM_DELETEITEM message to its parent window so any storage space used for the item can be freed.</p>
<h3>LB_DIR</h3>
<p>
An application sends an LB_DIR message to add a list of filenames to a list box, and may send this message multiple times to add different types of files or drives to the list box. The <i>wParam</i> parameter specifies the attributes of the files to be added to the list; the <i>lParam</i> parameter points to a string that contains the filename, including wildcards, to add to the list.</p>
<p>
The valid file attributes for <i>wParam</i> are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Value</b></td>
<td class=label width=77%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=23%>DDL_READWRITE</td>
<td width=77%>File can be read from or written to. This is the default value.</td>
</tr>
<tr valign=top>
<td width=23%>DDL_READONLY</td>
<td width=77%>File can be read from but not written to. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_HIDDEN</td>
<td width=77%>File is hidden and does not appear in a directory listing. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_SYSTEM</td>
<td width=77%>File is a system file. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_DIRECTORY</td>
<td width=77%>Directories in the directory indicated by the <i>lParam</i> parameter. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_ARCHIVE</td>
<td width=77%>File has been archived. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_DRIVES</td>
<td width=77%>All drives that match the name specified by the <i>lParam</i> parameter are included. If the DDL_DRIVES flag is set, the DDL_EXCLUSIVE flag is set automatically. Therefore, to create a directory listing that includes drives and files, the application must send this message twice: once with the DDL_DRIVES flag set and once with the flags for the rest of the list. </td>
</tr>
<tr valign=top>
<td width=23%>DDL_EXCLUSIVE</td>
<td width=77%>Exclusive flag. If the exclusive flag is set, only files of the specified type are listed. Otherwise, files of the specified type are listed in addition to files that match the default type (DLL_READWRITE). </td>
</tr>
</table><br>
<h3>LB_FINDSTRING</h3>
<p>
An application sends an LB_FINDSTRING message to search a list box for an item that begins with the characters specified in the <i>lParam</i> parameter.</p>
<p>
The <i>wParam</i> parameter specifies the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by the <i>wParam</i> parameter. If <i>wParam</i> is –1, the entire list box is searched from the beginning.</p>
<p>
The <i>lParam</i> parameter specifies a pointer to a null-terminated string that contains the prefix to search for. The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.</p>
<p>
If the list box is owner-drawn and has the LBS_SORT style but does not have the LBS_HASSTRINGS style, the list box sends WM_COMPAREITEM messages to the application. If the owner-drawn list box does not have the LBS_HASSTRINGS style and also does not have the LBS_SORT style, the list box searches for an item with a 32-bit data value that matches the value of the <i>lParam</i> parameter.</p>
<h3>LB_FINDSTRINGEXACT (Windows Version 3.1 or Later)</h3>
<p>
An application sends an LB_FINDSTRINGEXACT message to a list box to search it for an item that matches the characters specified in the <i>lParam</i> parameter.</p>
<p>
The <i>wParam</i> parameter specifies the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by the <i>wParam</i> parameter. If <i>wParam</i> is –1, the entire list box is searched from the beginning.</p>
<p>
The <i>lParam</i> parameter specifies a pointer to a null-terminated string that contains the prefix to search for. The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.</p>
<p>
If the list box is owner-drawn and has the LBS_SORT style but does not have the LBS_HASSTRINGS style, the list box sends WM_COMPAREITEM messages to the application. If the owner-drawn list box does not have the LBS_HASSTRINGS style and also does not have the LBS_SORT style, the list box searches for an item with a 32-bit data value that matches the value of the <i>lParam</i> parameter. In this case, there is no functional difference between an LB_FINDSTRING message and an LB_FINDSTRINGEXACT message.</p>
<h3>LB_GETCARETINDEX</h3>
<p>
An application sends an LB_GETCARETINDEX message to a list box to determine the index of the item that has the focus rectangle in a multiple-selection list box. The item may or may not be selected.</p>
<p>
This message can also be used to get the index of the item that is currently selected in a single-selection list box.</p>
<h3>LB_GETCOUNT</h3>
<p>
An application sends an LB_GETCOUNT message to a list box to get the number of items in the list box.</p>
<h3>LB_GETCURSEL (Single-Selection List Boxes Only)</h3>
<p>
An application sends an LB_GETCURSEL message to a list box to get the index of the currently selected item, if there is one, in a single-selection list box. If this message is sent to a multiple-selection list box, the list box returns LB_ERR.</p>
<h3>LB_GETHORIZONTALEXTENT</h3>
<p>
An application sends an LB_GETHORIZONTALEXTENT message to a list box to get its horizontal extent. The horizontal extent is the horizontal scrolling range of the list box. By default, the horizontal extent is zero.</p>
<p>
If the list box is a multiple-column list box, the return value is not meaningful.</p>
<h3>LB_GETITEMDATA</h3>
<p>
An application sends an LB_GETITEMDATA message to a list box to get the 32-bit data value the list box has stored for the item specified in the <i>wParam</i> parameter. By default this is zero. An application must set the item data value by sending an LB_SETITEMDATA message to the list box for this value to have meaning. If the list box is an owner-drawn list box without the LBS_HASSTRINGS style, the LB_ADDSTRING or LB_INSERTSTRING message sets the 32-bit data value, and an LB_SETITEMDATA message is not required.</p>
<h3>LB_GETITEMHEIGHT (Windows Version 3.1 or Later)</h3>
<p>
An application sends an LB_GETITEMHEIGHT message to a list box to get the height in pixels of an item specified in the <i>wParam</i> parameter. For list boxes without the LBS_OWNERDRAWVARIABLE style, the <i>wParam</i> item number is ignored because all items are the same height.</p>
<h3>LB_GETITEMRECT</h3>
<p>
An application sends an LB_GETITEMRECT message to a list box to retrieve the dimensions of the rectangle that bounds an item as it is currently displayed in the list box window. The item is specified in the <i>wParam</i> parameter, and a pointer to a <b>RECT</b> structure is given in the <i>lParam</i> parameter.</p>
<h3>LB_GETSEL</h3>
<p>
An application sends an LB_GETSEL message to a list box to get the selected state for an item specified in the <i>wParam</i> parameter. A positive return value signifies that the item is selected; a zero return value signifies that the item is not selected.</p>
<h3>LB_GETSELCOUNT (Multiple-Selection List Boxes Only)</h3>
<p>
An application sends an LB_GETSELCOUNT message to a list box to get the number of selected items in a multiple-selection list box. If this message is sent to a single-selection list box, LB_ERR is returned.</p>
<h3>LB_GETSELITEMS (Multiple-Selection List Boxes Only)</h3>
<p>
An application sends an LB_GETSELITEMS message to a list box to fill a buffer with an array of integers that specify the item numbers of selected items in a multiple-selection list box. If this message is sent to a single-selection list box, LB_ERR is returned.</p>
<p>
The <i>wParam</i> parameter specifies the maximum number of selected items whose item numbers are to be placed in the buffer.</p>
<p>
The <i>lParam</i> parameter specifies a long pointer to a buffer large enough for the number of integers specified by the <i>wParam</i> parameter.</p>
<h3>LB_GETTEXT</h3>
<p>
An application sends an LB_GETTEXT message to a list box to retrieve a string from it.</p>
<p>
The <i>wParam</i> parameter specifies the zero-based index of the string to retrieve.</p>
<p>
The <i>lParam</i> parameter points to the buffer that receives the string. The buffer must have sufficient space for the string and a terminating null character. An LB_GETTEXTLEN message can be sent before an LB_GETTEXT message to retrieve the length, in bytes, of the string.</p>
<p>
If the list box is an owner-drawn list box without the LBS_HASSTRINGS style, the buffer pointed to by the <i>lParam</i> parameter receives the 32-bit value associated with the item.</p>
<h3>LB_GETTEXTLEN</h3>
<p>
An application sends an LB_GETTEXTLEN message to a list box to get the length of a string specified in the <i>wParam</i> parameter. The length returned does not include the NULL terminator. Owner-drawn list boxes without the LBS_HASSTRINGS style always return the size of a <b>DWORD</b> in response to this message.</p>
<h3>LB_GETTOPINDEX</h3>
<p>
An application sends an LB_GETTOPINDEX message to get the index to the first visible item in the list box. Initially, the first visible item is item 0, but this changes as the list box is scrolled. For multiple-column list boxes, the first visible item is the top-left item.</p>
<h3>LB_INSERTSTRING</h3>
<p>
An application sends an LB_INSERTSTRING message to insert an item into a list box. The inserted item is placed at the position specified by the <i>wParam</i> parameter. When an application uses this message, no sorting of items occurs for list boxes with the LBS_SORT style.</p>
<h3>LB_RESETCONTENT</h3>
<p>
An application sends an LB_RESETCONTENT message to remove the contents of a list box. If the list box is an owner-drawn list box without the LBS_HASSTRINGS style, the list box sends a WM_DELETEITEM message to the list box parent window for each item it deletes from the list box.</p>
<h3>LB_SELECTSTRING</h3>
<p>
An application sends an LB_SELECTSTRING message to search a list box for an item that begins with the characters specified in the <i>lParam</i> parameter and to select the item if one is found.</p>
<p>
The <i>wParam</i> parameter specifies the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by the <i>wParam</i> parameter. If <i>wParam</i> is –1, the entire list box is searched from the beginning.</p>
<p>
The <i>lParam</i> parameter specifies a pointer to a null-terminated string that contains the prefix to search for. The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.</p>
<p>
If the list box is an owner-drawn list box and has the LBS_SORT style but does not have the LBS_HASSTRINGS style, the list box sends WM_COMPAREITEM messages to the parent window of the list box. If the owner-drawn list box does not have the LBS_HASSTRINGS style and also does not have the LBS_SORT style, the list box searches for an item with a 32-bit data value that matches the value of the <i>lParam</i> parameter.</p>
<h3>LB_SELITEMRANGE (Multiple-Selection List Boxes Only)</h3>
<p>
An application sends an LB_SELITEMRANGE message to select one or more consecutive items in a multiple-selection list box. If this message is sent to a single-selection list box, the list box returns LB_ERR.</p>
<h3>LB_SETCARETINDEX</h3>
<p>
An application sends an LB_SETCARETINDEX message to set the focus rectangle to the item at the specified index in a multiple-selection list box. If this message is sent to a single-selection list box, the list box returns LB_ERR unless there is no selected item. If no item is selected, the caret index is successfully set.</p>
<p>
The <i>lParam</i> parameter specifies whether the item should be scrolled into view if it is not visible. If <i>lParam</i> is not zero, the item will not be scrolled into view. This behavior was present but not documented for Windows version 3.0; it is documented for Windows version 3.1 and later.</p>
<h3>LB_SETCOLUMNWIDTH</h3>
<p>
An application sends an LB_SETCOLUMNWIDTH message to set the column width for a multiple-column list box. The width in pixels is specified in the <i>wParam</i> parameter. All columns have the same width.</p>
<h3>LB_SETCURSEL (Single-Selection List Boxes Only)</h3>
<p>
An application sends an LB_SETCURSEL message to a list box to select an item and scroll it into view, if necessary. When the new item is selected, the list box removes the highlight from the previously selected item.</p>
<p>
LB_SETCURSEL should be used only with single-selection list boxes. If this message is sent to a multiple-selection list box, the list box returns LB_ERR.</p>
<h3>LB_SETHORIZONTALEXTENT</h3>
<p>
An application sends an LB_SETHORIZONTALEXTENT message to a list box to set its horizontal extent. The horizontal extent is the horizontal scrolling range of the list box. By default, the horizontal extent is zero. An application specifies the new horizontal extent in the <i>wParam</i> parameter. If the size of the list box is smaller than this value, the horizontal scroll bar is displayed to allow horizontal scrolling in the list box. If the size of the list box is equal to or greater than this value, the horizontal scroll bar is hidden. An application must create the list box with either the WS_HSCROLL or WS_VSCROLL style for the list box to support a horizontal scroll bar.</p>
<p>
This message has no effect on multiple-column list boxes.</p>
<h3>LB_SETITEMDATA</h3>
<p>
An application sends an LB_SETITEMDATA message to associate a 32-bit data value specified in the <i>lParam</i> parameter with an item in the list box that is specified in the <i>wParam</i> parameter.</p>
<h3>LB_SETITEMHEIGHT (Windows Version 3.1 or Later)</h3>
<p>
An application sends an LB_SETITEMHEIGHT message to set the height of an item or all the items in a list box. If the list box has the LBS_OWNERDRAWVARIABLE style, this message sets the height of the item specified by the <i>wParam</i> parameter. Otherwise, this message sets the height of all items in the list box. The new height is specified in pixels (up to a maximum height of 255) in the low-order word of the <i>lParam</i> parameter.</p>
<h3>LB_SETSEL</h3>
<p>
An application sends an LB_SETSEL message to select an item in a multiple-selection list box and scroll it into view if necessary. The <i>wParam</i> parameter specifies whether to select the item or cancel the selection. A TRUE value for <i>wParam</i> specifies that the item is selected and highlighted. A FALSE value for <i>wParam</i> specifies that the item is no longer selected, and the highlight is removed.</p>
<p>
The low-order word of the <i>lParam</i> parameter specifies the item the selection is added to or removed from. If this value is –1, all items in the list box are selected or not, depending on the value of the <i>wParam</i> parameter. No scrolling occurs.</p>
<p>
If this message is sent to a single-selection list box, the list box returns LB_ERR.</p>
<h3>LB_SETTABSTOPS</h3>
<p>
An application sends an LB_SETTABSTOPS message to set the tab stop positions in a list box. The list box must be created with the LBS_USETABSTOPS style in order to use tab stops.</p>
<p>
An application specifies the number of tab stops contained in the <i>wParam</i> parameter. If this parameter is 0, the <i>lParam</i> parameter is ignored, and default tab stops are set at every 32 dialog box units. If the <i>wParam</i> parameter is 1, tab stops are set at every <i>n</i> dialog box units, where <i>n</i> is the distance pointed to by the <i>lParam</i> parameter. If this parameter is greater than 1, <i>lParam</i> points to an array of tab stops, in dialog units.</p>
<p>
The <i>lParam</i> parameter is a far pointer to an array of unsigned integers specifying the tab stops. If the <i>wParam</i> parameter is 1, <i>lParam</i> points to an unsigned integer containing the distance between all tab stops, in dialog units.</p>
<p>
An LB_SETTABSTOPS message automatically redraws the list box.</p>
<p>
The example below sends an LB_SETTABSTOPS message to set tab stops at every 64 dialog box units:</p>
<pre><code>WORD wTabSpacing = 64;
SendDlgItemMessage(hdlg, ID_MYLISTBOX, LB_SETTABSTOPS, 1,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (DWORD) (LPWORD) &amp;wTabSpacing);
</code></pre>
<p>
In Windows version 3.0, edit controls calculate tab stop positions on the size of the default system font. This can cause incompatibilities between tab stops set for edit controls and those set for list boxes, which base tab stop calculations on the size of the font used in the list box. When an array of tab stop positions is used to set the tab stops for an edit control and a list box in Windows version 3.0, the tab positions may not line up the same on both the edit control and the list box. Windows version 3.1 calculates the tab stop positions using the control's font in both list boxes and edit controls.</p>
<h3>LB_SETTOPINDEX</h3>
<p>
An application sends an LB_SETTOPINDEX message to a list box to ensure that a particular item in it is visible. The item is specified in the <i>wParam</i> parameter. The list box scrolls so that either the specified item appears at the top of the list box or the maximum scroll range has been reached.</p>
<h3>WM_SETREDRAW</h3>
<p>
An application sends a WM_SETREDRAW message to a list box to reduce the amount of redrawing that it does. Keeping redrawing to a minimum improves the appearance of the list box to the user. By default, a list box redraws itself after each addition or deletion from a list box as well as at other times, such as after LB_RESETCONTENT or LB_SETCARETINDEX messages.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When a list box redraws itself as a result of receiving a WM_SETREDRAW message with the <i>wParam</i> parameter set to TRUE, the redraw erases the background, which in turn causes flicker. This flicker is unavoidable.</p>
<p>
To minimize the amount of redrawing an application does, use the following steps:
<ol>
<li>
Send a WM_SETREDRAW message to the list box with the <i>wParam</i> parameter set to FALSE. This clears the redraw flag for the list box.<br><br></li>
<li>
Perform the actions on the list.<br><br></li>
<li>
Send a WM_SETREDRAW message to the list box with the <i>wParam</i> parameter set to TRUE. This sets the redraw flag for the list box.<br><br></li>
<li>
Call <b>InvalidateRect</b> with the <i>fErase</i> flag set to TRUE to cause the list box to redraw itself. The <i>fErase</i> flag ensures that the list box will have the correct appearance.</li>
</ol>
<p>
The example below adds <i>nItems</i> to a list box:</p>
<pre><code>SendMessage(hwndListBox, WM_SETREDRAW, FALSE, 0L);
for ( i = 0; i &lt; nItems; i++ )
 &nbsp; SendMessage(hwndListBox, LB_ADDSTRING, 0, lpStrings[i]);
SendMessage(hwndListBox, WM_SETREDRAW, TRUE, 0L);
InvalidateRect(hwndListBox, NULL, TRUE);
</code></pre>
<h2>Notification Messages</h2>
<p>
The parent window of a list box receives notification messages through WM_COMMAND messages.</p>
<p>
The <i>wParam</i> parameter specifies the identifier of the list box, and the <i>lParam</i> parameter specifies the handle to the list box in the low-order word and the notification code in the high-order word.</p>
<h3>LBN_DBLCLK</h3>
<p>
A list box created with the LBS_NOTIFY style sends an LBN_DBLCLK notification message to its parent window when the user double-clicks a string in it.</p>
<h3>LBN_ERRSPACE</h3>
<p>
A list box sends an LBN_ERRSPACE notification message to its parent window when it cannot allocate enough memory to complete the current operation. This can occur when adding an item to a list box. A list box does not need the LBS_NOTIFY style to receive this notification.</p>
<h3>LBN_KILLFOCUS</h3>
<p>
A list box sends an LBN_KILLFOCUS notification message to its parent window when the list box loses the input focus. This message is sent when the list box receives a WM_KILLFOCUS message from Windows.</p>
<h3>LBN_SELCANCEL</h3>
<p>
A list box created with the LBS_NOTIFY style sends an LBN_SELCANCEL notification message to its parent window when the user cancels the selection in the list box.</p>
<h3>LBN_SELCHANGE</h3>
<p>
A list box created with the LBS_NOTIFY style sends an LBN_SELCHANGE notification message to its parent window when the selection is about to change due to mouse or keyboard user input. This message is not sent if LB_SETCURSEL, LB_SELECTSTRING, LB_SETSEL, or LB_SELECTITEMRANGE messages are sent from the application. LBN_SELCHANGE is always sent to the application, regardless of the LBS_NOTIFY style, when the user presses CTRL+/ or CTRL+\.</p>
<h3>LBN_SETFOCUS</h3>
<p>
A list box sends an LBN_SETFOCUS notification message to its parent window when the list box gains the input focus. This message is sent when the list box receives a WM_SETFOCUS message from Windows.</p>
<h2>Selection Messages</h2>
<p>
A list box control sends the following messages to its owner window when the list box has the LBS_WANTKEYBOARDINPUT style.</p>
<h3>WM_CHARTOITEM</h3>
<p>
An owner-drawn list box that does not have the LBS_HASSTRINGS style sends a WM_CHARTOITEM message to its parent window when the list box receives a WM_CHAR message. The <i>wParam</i> parameter contains the value of the key the user pressed. The low-order word of the <i>lParam</i> parameter contains the list box window handle, and the high-order word of <i>lParam</i> contains the current caret position.</p>
<p>
The application specifies the action the list box should take in the value it returns to the list box. A return value of:
<ul type=disc>
<li>
–2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box.<br><br></li>
<li>
–1 indicates that the list box should perform the default action in response to the keystroke.<br><br></li>
<li>
0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</li>
</ul>
<h3>WM_VKEYTOITEM</h3>
<p>
A list box that has the LBS_HASSTRINGS style sends a WM_VKEYTOITEM message to its parent window when the list box receives a WM_KEYDOWN message. The <i>wParam</i> parameter contains the value of the key the user pressed. The low-order word of the <i>lParam</i> parameter contains the list box window handle, and the high-order word of <i>lParam</i> contains the current caret position.</p>
<p>
The application specifies what action the list box should take in the value it returns to the list box. A return value of:
<ul type=disc>
<li>
–2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box.<br><br></li>
<li>
–1 indicates that the list box should perform the default action in response to the keystroke.<br><br></li>
<li>
0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</li>
</ul>
<h2>Owner-Drawn Messages</h2>
<p>
Windows version 3.1 changed the way the <i>wParam</i> parameter is used in the owner-drawn messages sent from list boxes to their parent windows. In Windows version 3.1 and later, the <i>wParam</i> parameter contains the list box identifier; in earlier versions of Windows, the <i>wParam</i> parameter contained zero.</p>
<h3>WM_COMPAREITEM</h3>
<p>
An owner-drawn list box that has the LBS_SORT style and does not have the LBS_HASSTRINGS style sends a WM_COMPAREITEM message to its parent window when the list box receives an LB_ADDSTRING, LB_FINDSTRING, LB_FINDSTRINGEXACT, or LB_SELECTSTRING message. Usually the list box needs to send this message multiple times as it locates or adds an item. The <i>lParam</i> parameter contains a far pointer to a <b>COMPAREITEMSTRUCT</b> data structure that contains the identifiers and the 32-bit data values for two items in the list box.</p>
<p>
The application indicates the relative position of the two items by returning a value to the list box. The valid return values are:
<ul type=disc>
<li>
–1 when item 1 precedes item 2 in the sorted order.<br><br></li>
<li>
0 when item 1 and item 2 are equivalent in the sorted order.<br><br></li>
<li>
1 when item 1 follows item 2 in the sorted order.</li>
</ul>
<h3>WM_DELETEITEM</h3>
<p>
An owner-drawn list box sends a WM_DELETEITEM message to its parent window when an item is deleted from the list box with an LB_DELETESTRING or LB_RESETCONTENT message or when the list box is destroyed. The <i>lParam</i> parameter contains a far pointer to a <b>DELETEITEMSTRUCT</b> data structure that contains information about the item being deleted.</p>
<h3>WM_DRAWITEM</h3>
<p>
An owner-drawn list box sends a WM_DRAWITEM message to its parent window when the list needs to update its display. The <i>lParam</i> parameter contains a far pointer to a <b>DRAWITEMSTRUCT</b> structure that contains information about the item to be drawn and the type of drawing required.</p>
<p>
The <b>itemAction</b> member of the <b>DRAWITEMSTRUCT</b> structure defines the drawing operation that is to be performed.</p>
<p>
Before returning from processing this message, an application should ensure that the device context identified by the <b>hDC</b> member of the <b>DRAWITEMSTRUCT</b> structure is in the default state.</p>
<p>
This example shows how to process a WM_DRAWITEM message:</p>
<pre><code>LPDRAWITEMSTRUCT lpdis;

case WM_DRAWITEM:
 &nbsp;&nbsp; lpdis = (DRAWITEMSTRUCT FAR*) lParam;
 &nbsp;&nbsp; switch (lpdis-&gt;itemAction) {

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case ODA_DRAWENTIRE:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . /* Redraw the entire control or menu. */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return TRUE;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case ODA_SELECT:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . /* Redraw to reflect current selection state. */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return TRUE;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case ODA_FOCUS:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . /* Redraw to reflect current focus state. */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return TRUE;

 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;
</code></pre>
<h3>WM_MEASUREITEM</h3>
<p>
A list box that has the LBS_OWNERDRAWFIXED style sends a WM_MEASUREITEM message to its parent window when the list box is created. A list box that has the LBS_OWNERDRAWVARIABLE style sends a WM_MEASUREITEM message to its parent window each time an item is added to the list box. The <i>lParam</i> parameter contains a far pointer to a <b>MEASUREITEMSTRUCT</b> structure that contains information about the item being added.</p>
<p>
The application fills the <b>itemHeight</b> field of the <b>MEASUREITEMSTRUCT</b> structure with the height for the item. If the list box has the LBS_MULTICOLUMN and LBS_OWNERDRAWFIXED styles, the application can also fill the <b>itemWidth</b> field to set the column width for the list box.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Bits and Pieces</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_bitspcs"></a>Security Bits and Pieces</h1>
<p>
Ruediger R. Asche<br>
Microsoft Developer Network Technology Group</p>
<p>
May 9, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4083">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the CLIAPP/SRVAPP sample applications.</a></p>
<h2>Abstract</h2>
<p>
This article is third in a series of technical articles that describe the implementation and application of a C++ class hierarchy that encapsulates the Windows NT™ security application programming interface (API). The series consists of the following articles:</p>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_seccpp">
</object><a href=JavaScript:alink_1.Click()>"Windows NT Security in Theory and Practice"</a> (introduction)</p>
<p>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_secguts">
</object><a href=JavaScript:alink_2.Click()>"The Guts of Security"</a> (implementation of the security class hierarchy)</p>
<p>
"Security Bits and Pieces" (architecture of the sample application suite)</p>
<p>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_3.Click()>"A Homegrown RPC Mechanism"</a> (description of the remote communication implemented in the sample application suite)</p>
<p>
CLIAPP/SRVAPP, a sample application suite that consists of a database client and server, illustrates the concepts introduced in this article series.</p>
<h2>Introduction</h2>
<p>
One of the things I really like about C++ is that it lends itself naturally to modularization. The CLIAPP and SRVAPP sample applications (included with this article series) are very complex, but C++ makes it very easy to dissect the applications into little, independent, digestible pieces. Thus, this article describes the "glue" between the numerous components of the sample application suite, all of which are described elsewhere. The figure below illustrates the architecture of the sample applications.</p>
<p>
<img src="bitspcs_1.gif" border=0></p>
<p class=label>
<b>CLIAPP/SRVAPP client/server architecture</b></p>
<p>
The client and the server both have access to an area of shared memory in which a database resides. Both the client and the server can access the database through a common interface that supports the <b>Insert</b>, <b>Remove</b>, and <b>Retrieve</b> operations. In the current version of the applications, the database is homegrown; that is, no existing database engine is used. (There is nothing to prevent the application suite from working with an existing database interface; I might add this feature in a later version of this article.) </p>
<p>
The client can access the database in two ways: locally (via shared memory) or remotely (via a network). In a real-life scenario, it is fairly unlikely for a database to reside in shared memory—it normally resides on the server and is accessed from the server through a network connection. The sample application suite provides this option through a very primitive remote procedure call (RPC) mechanism that is built upon a named pipe communication; the user can access this option using the Remote Access menu. The client can also access the database through the shared memory object; this option is available from the Local Access menu. The client and the server share a named mutex, which protects the database from corruption when a client in local mode accesses the database concurrently with the server.</p>
<p>
Now, where does security come into the equation? If you look at the figure above, you will see that the database, the shared memory section, the named pipe, and the mutex are drawn in grey. The grey color indicates that these objects can be secured; that is, they are objects derived from <b>CSecureableObject</b> and can therefore be associated with security information.</p>
<p>
Basically everything in the code is implemented as C++ classes, but we will not discuss all of the classes in this article. Check with the following articles or article series for additional information about the components:
<ul type=disc>
<li>
The RPC mechanism is designed on top of the <b>CNamedPipe</b> and <b>CProtocol</b> classes, which are described in the articles <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_comclass">
</object><a href=JavaScript:alink_4.Click()>"Communication with Class"</a> and <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_npipes">
</object><a href=JavaScript:alink_5.Click()>"Garden Hoses at Work"</a> in the MSDN Library. The RPC mechanism itself is described in the article <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_6.Click()>"A Homegrown RPC Mechanism."</a><br><br></li>
<li>
The security base class hierarchy <b>CSecureableObject</b> and its derivatives are described in the articles <a href="msdn_seccpp.htm">"Windows NT Security in Theory and Practice"</a> and <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_secguts">
</object><a href=JavaScript:alink_7.Click()>"The Guts of Security."</a></li>
</ul>
<p>
In this article, we will discuss the remaining components of the application suite:
<ul type=disc>
<li>
The <b>CEasyOutputView</b> class, which displays system output in a view window. I know, I already used this class in the YAHU sample application (see <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_exeform">
</object><a href=JavaScript:alink_8.Click()>"YAHU, or Yet Another Header Utility"</a>), but this time I made the class a universal base class.<br><br></li>
<li>
The <b>ChainedQueue</b> database class, which I use to demonstrate privately secured objects.<br><br></li>
<li>
Small C++ wrappers for the Win32® kernel objects file mappings and mutexes.<br><br></li>
<li>
The program structure that links the RPC mechanism to the user interface.</li>
</ul>
<h2>The CEasyOutputView Class</h2>
<p>
One of the most frequent gripes I hear about the Microsoft® Foundation classes (MFC) from Microsoft developers is: "Actually, I prefer console applications because my application doesn't need an elaborate user interface. I just need some very simple, command-based interaction between the software and the user, and <b>scanf</b> and <b>printf</b> do a much better job for me than dialog boxes and all the hassle I have to go through to output a single line of text."</p>
<p>
I agree. Input is not so much of a problem: If the command set that your application supports is small, you can restrict your input to menus and dialog boxes, which can be coded easily with MFC. However, outputting information involves more work, especially if you simply want to display some text (such as diagnostic messages).</p>
<p>
The CLIAPP and SRVAPP applications only need to display diagnostic messages indicating success or failure of system calls. There is no need to waste any more code than absolutely necessary for this rudimentary output.</p>
<p>
Thus, I used the intermediate class <b>CEasyOutputView</b>, which is roughly a list box equivalent of the <b>CEditView</b> class. A <b>CEasyOutputView</b> object is a derivative of <b>CView</b>, which has a control embedded in its client area. (In the <b>CEditView</b> class, this control is an edit control; in <b>CEasyOutputView</b>, it is a list box.)</p>
<p>
To use the class, simply derive a view class from <b>CEasyOutputView</b>, and call the member functions <b>AddStringandAdjust</b> (to add a string to the list box) and <b>ClearWindow</b> (to reset the list box). The <b>CEasyOutputView</b> class takes care of the rest (for example, it resizes the control when the view window is resized, and keeps track of the scroll logic).</p>
<h2>The ChainedQueue Database Class</h2>
<p>
Actually, we don't have much to discuss in this section, because <b>ChainedQueue</b> is merely a demonstration class that will eventually be replaced by a "real" database engine. The interesting code in this class pertains to security. Let us first look at the class declaration for <b>ChainedQueue</b> (from DBCODE.H):</p>
<pre><code>class ChainedQueue
{ 
 private: 
 &nbsp; COMPLETECHAINLIST *cpBase;
 &nbsp; CMutex *m_hMutex;
 public:
 &nbsp; int m_iErrorCode;
 public:
 &nbsp; ChainedQueue(void *pSharedMemory,int iLength,CMutex *hM);
 &nbsp; ChainedQueue(); // This is the "anonymous" constructor.
 &nbsp; ~ChainedQueue();
 &nbsp; BOOL Retrieve(int iIndex,CHAINLIST *cpResult);
 &nbsp; BOOL Remove(int iIndex);
 &nbsp; BOOL Insert(int *iIndex,CHAINLIST *cpElement);
 &nbsp; int inline GetEntries() { return cpBase[0].cl.iInsecuredElement; };
};

#ifdef SERVER

class ServerChainedQueue : public ChainedQueue, public CPrivateSecObject
{
 private:
 &nbsp; CSecuredNamedPipe *m_cpPipe;
 public:
 &nbsp; ServerChainedQueue(void *pSharedMemory,int iLength,CMutex *hM,CSecuredNamedPipe *hP);
 &nbsp; BOOL SafeRetrieve(int iIndex,CHAINLIST *cpResult);
 &nbsp; BOOL SafeRemove(int iIndex);
 &nbsp; BOOL SafeInsert(int *iIndex,CHAINLIST *cpElement);
 &nbsp; BOOL SetTheDescriptor(void);
};
</code></pre>
<p>
The server side of the object is derived from <b>CPrivateSecObject</b>, so we can use the <b>AddRightsTo</b>, <b>RevokePreviouslyGrantedAccess</b>, <b>AddSecurity</b>, and <b>MatchAccessRequest</b> functions to control security (see <a href="msdn_secguts.htm">"The Guts of Security"</a> for information on these member functions). Being a derivative of <b>CSecureableObject</b>, the <b>ServerChainedQueue</b> class also needs to implement the <b>SetTheDescriptor</b> and <b>GetTheDescriptor</b> member functions.</p>
<p>
The interesting members of <b>ChainedQueue</b> are the member functions that work on the database. Database manipulations from the server side call the <b>Retrieve</b>, <b>Remove</b>, and <b>Insert</b> functions, and so do manipulations from the client side when the shared database (local access) is used. In this article, I will not discuss how <b>Retrieve</b>, <b>Remove</b>, and <b>Insert</b> work; let's just assume that they do the "right thing." It doesn't really make a difference <i>how</i> the database engine is implemented as long as we can rely on the correct behavior of database operations. The only thing you should know about <b>Retrieve</b>, <b>Remove</b>, and <b>Insert</b> is that they return TRUE when they succeed and FALSE when they fail, leaving an error code in the <i>m_iErrorCode</i> member variable for the caller to inspect.</p>
<p>
When a client uses remote access to manipulate a server's database, the server's RPC layer (which is discussed in <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_9.Click()>"A Homegrown RPC Mechanism"</a>) translates a request to retrieve, remove, or add a record into one of the member functions <b>SafeRetrieve</b>, <b>SafeRemove</b>, or <b>SafeInsert</b>. These functions do the security-related work. Let us first look at <b>SafeRetrieve</b>:</p>
<pre><code>BOOL ChainedQueue::SafeRetrieve(int iIndex,CHAINLIST *cpResult)
{
 return Retrieve(iIndex,cpResult);
};
</code></pre>
<p>
Hmmm, this does not look too complicated, and it certainly isn't more sophisticated than <b>Retrieve</b>. How exactly does security come into play here? </p>
<p>
Not at all, because I decided not to protect the retrieve operation at this point. The application suite protects write access to the database—that is, removing and adding records. Let us look at <b>SafeInsert</b> to see what happens. (<b>SafeRemove</b> works exactly the same way, except that it calls <b>Remove</b> instead of <b>Insert</b>.)</p>
<pre><code>BOOL ChainedQueue::SafeInsert(int *iIndex, CHAINLIST *cpParam)
{
 HANDLE hThread;
 m_cpPipe-&gt;ImpersonateClient(TRUE);
 BOOL bReturn;
 hThread = GetCurrentThread();
 bReturn = MatchAccessRequest(DBASE_WRITE,hThread);
 if (!bReturn)
  m_iErrorCode = ERROR_ACCESS_DENIED;
 else 
  bReturn=Insert(iIndex,cpParam);
 m_cpPipe-&gt;ImpersonateClient(FALSE);
 return bReturn;
};
</code></pre>
<p>
First, the current thread assumes the identity of the client via the <b>ImpersonateClient</b> member function of the named pipe. This call temporarily associates the current thread with the access token of the named pipe client so that a later call to <b>AccessCheck</b> can be made against the token of the client.</p>
<p>
This particular technique for obtaining a client's access token seems somewhat awkward. Why can't the server simply retrieve the client's access token without assuming the client's identity?</p>
<p>
Remember that you need an access token only to check security on privately secured objects. Whenever you make an implicit security check (for example, when your application tries an operation on a secured kernel object), the system service that is called (for example, <b>CreateFile</b>) obtains the access token. Application code does not have any control over the implicit security code, so a call to obtain a client's access token without impersonating the client would not be of any help for kernel objects.</p>
<p>
In other words, a server application that assumes the identity of the client can use the same code to try to access privately secured and system-level secured objects, whereas a server application that simply retrieves the client's access token for privately secured objects would still have to assume the client's identity when it tries to access kernel objects on the client's behalf.</p>
<p>
Once the client is impersonated, we can call <b>CPrivateSecObject::MatchAccessRequest</b> (as discussed in <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_secguts">
</object><a href=JavaScript:alink_10.Click()>"The Guts of Security"</a>) to verify that the requested operation (in this case, DBASE_WRITE) is allowed. If not, the code sets the error code to ACCESS_DENIED and returns FALSE. This is the strategy for enforcing private security.</p>
<p>
If the access request is granted, the code simply dispatches to the "real" code that does the work (in this case, <b>Insert</b>). In either case, the previous client impersonation is revoked after the completion of the code discussed above.</p>
<p>
Thus, <b>SafeInsert</b> in effect validates the request against the object's security information before it satisfies the request. </p>
<h2>Miscellaneous Classes</h2>
<p>
I should introduce two more classes—<b>CFileMapping</b> and <b>CMutex</b>—before we dig into the program structure. I wrote these classes as thin wrappers for the system-provided file mapping and mutex data structures. The sample application suite needs these structures only to implement local database access (that is, sharing the physical memory in which the database resides between the server and the client). </p>
<p>
The only reason I provide these data structures as C++ objects is that both can be derived from <b>CKernelSecObject</b> and thus receive optional protection. There is no mystery whatsoever in <b>CFileMapping</b> and <b>CMutex</b>; their respective member function sets are basically equivalent to the system-provided operations on the corresponding kernel objects.</p>
<h2>Program Structure</h2>
<p>
Both the client and the server are plain-vanilla MFC single-document interface (SDI) applications generated by ClassWizard. Because all the relevant code resides in the respective view classes, you can easily extend the server to service several clients at the same time. For example, you can convert the server into a multiple-document interface (MDI) application that services a client in each window.</p>
<h3>Client Side</h3>
<p>
Let us look at the client first. As I mentioned earlier, all the relevant code for the client resides in the view class, so that is the only class (files CLIVIEW.CPP and CLIVIEW.H) we need to look at.</p>
<p>
ClassWizard generates almost all of the custom member functions in the view class. These functions implement command handlers and menu item update handlers for menu items. The only two member functions of <b>CSecCliView</b> that ClassWizard did not generate are <b>ObtainErrorFromCode</b> and <b>DisplayTextErrorMessage</b>. <b>ObtainErrorFromCode</b> is basically a wrapper for the Win32 <b>FormatMessage</b> function. Given an error code returned from a Win32 function, <b>ObtainErrorFromCode</b> returns a string that contains the description of the error. <b>DisplayTextErrorMessage</b> accepts an error code and a string that contains the format element %s. The error code is converted into a string using <b>ObtainErrorFromCode</b>, and the returned string replaces the format element %s, which is then displayed in the view's window using <b>AddStringandAdjust</b>. Because the view's primary function is to display error codes to the user, <b>DisplayTextErrorMessage</b> comes in handy for presenting an error condition to the user in a readable form.</p>
<p>
The interesting member functions of the <b>CSecCliView</b> class are the ones that ClassWizard generated for us to process user input. The three command handlers that provide access to the shared database—<b>OnLocalaccessAddarecord</b>, <b>OnLocalaccessRemovearecord</b>, and <b>OnLocalaccessViewcontents</b>—very simply query the user for more information on the . operation and dispatch the request to the <b>m_cqQueue</b> database object, which was created when <b>OnLocalaccessOpenshareddatabase</b> was processed.</p>
<p>
When the user selects Connect from the Remote Access menu, the <b>OnConnect</b> member function asks the user for the machine name and tries to open the client end of a named pipe. If that operation is successful, the code creates a new database protocol object that is assigned to the member variable <i>m_cpDB</i>. At this point, the commands in the Remote Access menu become available, and the <b>OnRemoteaccessAddarecord</b>, <b>OnRemoteaccessRemovearecord</b>, and <b>OnRemoteaccessViewcontents</b> member functions are called to implement the remote operations. When you look at these functions, you will notice that they all dispatch the request to the database protocol object and simply display the respective error codes to the user.</p>
<p>
I have not yet revealed what a database protocol object is. For the time being, let us simply say that it is a magic black box that knows how to communicate requests for database operations over a network. The object basically defines an interface for the server and the client to submit requests (this applies to the client) or to accept and process requests (this applies to the server) to manipulate the database. Note that the database protocol object does <i>not</i> define or contain the database itself. The database is contained in an object of type <b>ChainedQueue</b>; the database protocol object only provides a communication channel between the client and the server.</p>
<p>
The technical article <object id=alink_11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_11.Click()>"A Homegrown RPC Mechanism"</a> in the MSDN Library discusses this subject in more detail.</p>
<h3>Server Side</h3>
<p>
The server is slightly more complicated than the client, because we are now dealing with multithreading. The code that communicates with the client resides in a secondary thread so that the user interface can keep accepting commands while a communication executes in the background. The multithreaded approach can make it rather easy to serve multiple communications in individual threads. Let us follow what happens when the user of the server application clicks Wait to Connect (code from SRVVIEW.CPP):</p>
<pre><code>void CSecSrvView::OnWaittoconnect() 
{ DWORD id;
  AddStringandAdjust("waiting to connect...");
  m_hThread = CreateThread(NULL,0,(LPTHREAD_START_ROUTINE)PipeThreadFunction,this,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_SUSPENDED,&amp;id);
  SetThreadPriority(m_hThread,THREAD_PRIORITY_BELOW_NORMAL);
  ResumeThread(m_hThread);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}
</code></pre>
<p>
This is fairly straightforward: A secondary thread is created in the suspended state, the priority of the thread is slightly reduced, and the thread is resumed. I hope you will ask me why I lower the priority of the thread. I do this because there are three types of named pipes: synchronous blocking pipes, asynchronous non-blocking pipes, and overlapped asynchronous pipes (see the technical article <object id=alink_12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_npipes">
</object><a href=JavaScript:alink_12.Click()>"Garden Hoses at Work"</a> in the MSDN Library for details on these variations). As we will see in a second, the thread function calls the <b>CNamedPipe</b> member function <b>AwaitCommunicationAttempt</b>, which uses polling to establish a connection in one variation of named pipes (namely, the non-blocking asynchronous pipe). To prevent this polling from eating up too many CPU cycles, I lower the base priority of the thread a little bit. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;From the three types of named pipes listed above, note that I chose non-blocking pipes for this application. Overlapped pipes are the most sophisticated type of pipe. However, because the client side of the application suite must run on all Win32 platforms, overlapped pipes (which are available only on Windows NT™) are too restrictive. Synchronous blocking pipes, on the other hand, pose an interesting problem: The <b>AwaitCommunicationAttempt</b> member function is implemented using a "fake" connection from the server to itself (see the technical article <object id=alink_13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_npipes">
</object><a href=JavaScript:alink_13.Click()>"Garden Hoses at Work"</a>). However, this "fake" connection may be refused for security reasons if the owner of the named pipe does not grant itself rights on the named pipe. To avoid confusion here, I chose non-blocking types, which do not pose this problem.</p>
<p>
What happens in the thread function? Let's see (again from SRVVIEW.CPP):</p>
<pre><code>long WINAPI PipeThreadFunction(CSecSrvView *cvTarget) 
{ char szDiagnosticMessage[255];
  CDatabaseProtocol *cpProt;
  BOOL bFinished;
  ChainedQueue *cqTheQueue = cvTarget-&gt;m_cqQueue;
</code></pre>
<p>
First, we wait until a client connects. The experienced programmer of multithreaded applications will probably raise an eyebrow, because this code contains an implied call to the <b>AddStringandAdjust</b> member function of the view from a secondary thread. What if the primary thread also attempts to output something to the view at the same time? Wouldn't we run into synchronization problems here? Shouldn't there be a critical section that is claimed before, and released after, the <b>AddStringandAdjust</b> call?</p>
<p>
Yes, but this needs to happen for a different reason than what you thought. Concurrent drawing to the list box is a safe operation because <b>AddStringandAdjust</b> calls the <b>AddString</b> member of the <b>CListBox</b> class, which is an MFC inline function that translates into a <b>SendMessage</b> call. The USER component of the Win32 subsystem implicitly serializes <b>SendMessage</b> between critical sections, so no synchronization is necessary for the text output.</p>
<p>
However, <b>AddStringandAdjust</b> also recomputes the new vertical scroll range using the inline member function <b>CEasyOutputView::ComputeNewHorizontalExtent</b>, and we may run into trouble if two threads update the <i>m_iLongestStringSizeInPixels</i> member variable incorrectly. That is why <b>CEasyOutputView::ComputeNewHorizontalExtent</b> wraps what it does in a critical section. Note that when we use the <b>CEasyOutputView</b> class in a single-threaded application (such as the client application), keeping the multithread-aware code in the base class doesn't do anything but introduce a slight inefficiency into the code. So should we assume multithreading and make the base class code safe, or let the derived classes or the application add the safeguarding code?</p>
<p>
Design decisions. . . I don't have a one-size-fits-all answer, and the decision probably depends on the application. In this case, I figured that the overhead introduced by the critical section calls in a single-threaded application would be bearable, and would simplify the code overall.</p>
<p>
Note that if the user of the server application chooses to cancel the wait attempt, the <b>AwaitCommunicationAttempt</b> function will fail, causing the thread to terminate:</p>
<pre><code>&nbsp;&nbsp;if (!cvTarget-&gt;m_cpPipe-&gt;AwaitCommunicationAttempt())
  { 
  cvTarget-&gt;DisplayTextErrorMessage("Open named pipe failed -- %s",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;m_cpPipe-&gt;m_iErrorCode);
  goto ErrorExit;
  }
</code></pre>
<p>
Now we have a working communication with a client. The next thing we will do is create and open a protocol object (see the article <object id=alink_14 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_14.Click()>"A Homegrown RPC Mechanism"</a> for details).</p>
<pre><code>&nbsp;&nbsp;else
  {
  sprintf(szDiagnosticMessage,"Open named pipe succeeded");
  cvTarget-&gt;AddStringandAdjust(szDiagnosticMessage);
  }
  cpProt = new CDatabaseProtocol(cvTarget-&gt;m_cpPipe);
  if (!cpProt-&gt;Open("",CFile::modeRead|CFile::modeWrite)) // We are server...
  // Log an error here.
 &nbsp;&nbsp; goto ErrorExit;
  int iCommand,iIndex;
  CHAINLIST cpElement;
  bFinished=FALSE;
</code></pre>
<p>
Here we enter a loop in which a remote command is read, interpreted, and translated into a local database call. As I describe in the article <object id=alink_15 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_homegrwn">
</object><a href=JavaScript:alink_15.Click()>"A Homegrown RPC Mechanism,"</a> the <b>AcceptCommand</b> member of the <b>CDatabaseProtocol</b> class returns a command identifier which can be CMD_ADDRECORD, CMD_DELETERECORD, CMD_RETRIEVERECORD, CMD_GETENTRIES, or CMD_EXIT. The first four commands are dispatched to the database, whereas the last command lets the code break out of the loop.</p>
<p>
In this code, we use the <b>SafeRemove</b>, <b>SafeRetrieve</b>, and <b>SafeInsert</b> member functions, which we discussed earlier. This is where the security checks take place.</p>
<pre><code>&nbsp;&nbsp;while (!bFinished)&nbsp; // We'll break out of this loop later...
  {
 &nbsp; if (!cpProt-&gt;AcceptCommand(&amp;iCommand,&amp;cpElement,&amp;iIndex))
 &nbsp; { 
 &nbsp;&nbsp;&nbsp; cvTarget-&gt;DisplayTextErrorMessage("Accepting command from named pipe
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; failed -- %s",cpProt-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp; bFinished = TRUE;
 &nbsp;&nbsp;&nbsp; continue;
 &nbsp; };
 &nbsp; switch (iCommand)
 &nbsp; { case CMD_EXIT:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;AddStringandAdjust("Client terminated connection!");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFinished=TRUE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case CMD_GETENTRIES:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Acknowledge(cqTheQueue-&gt;GetEntries());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case CMD_ADDRECORD:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!cqTheQueue-&gt;SafeInsert(&amp;iIndex,&amp;cpElement))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;DisplayTextErrorMessage("Remote insert failed; propagating 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error code -- %s",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Fail(cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Acknowledge(iIndex);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;AddStringandAdjust("Remote insert succeeded!");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case CMD_DELETERECORD:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!cqTheQueue-&gt;SafeRemove(iIndex))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;DisplayTextErrorMessage("Remote remove failed; propagating 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error code -- %s",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Fail(cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Acknowledge(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;AddStringandAdjust("Remote remove succeeded!");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case CMD_RETRIEVERECORD:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!cqTheQueue-&gt;SafeRetrieve(iIndex,&amp;cpElement))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;DisplayTextErrorMessage("Remote retrieve failed; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propagating error code -- %s",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Fail(cqTheQueue-&gt;m_iErrorCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Acknowledge(cpElement.iInsecuredElement);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpProt-&gt;Acknowledge(cpElement.iSecuredElement);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvTarget-&gt;AddStringandAdjust("Remote retrieve succeeded!");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp; }; // switch
 &nbsp;&nbsp; };&nbsp;&nbsp; // while
</code></pre>
<p>
The code breaking out of the while loop indicates that the connection has terminated. Now we can clean up and return.</p>
<pre><code>&nbsp;cpProt-&gt;Close();
 delete (cpProt);
 cvTarget-&gt;m_cpPipe-&gt;CloseInstance();
 ErrorExit:
 CloseHandle(cvTarget-&gt;m_hThread);
 cvTarget-&gt;m_bThreadIsActive = FALSE;
 return 0;
};&nbsp;&nbsp; // Thread fn
</code></pre>
<p>
And that is all I have to say about the server view class.</p>
<h2>Summary</h2>
<p>
Discussing application code in MFC is generally an easy task, because a well-coded application is only a shell that glues other classes together and provides a user interface for the user to interact with the other classes. In the case of the sample client and server application suite associated with this article series, the interesting work is done in C++ classes that implement an RPC mechanism, a small database, and security. </p>
<p>
Although the sample application suite is mainly intended as a starting point for your own secure servers, you could modify it in various ways to make it more generic and sophisticated. For example, you could replace the homegrown RPC classes with the built-in RPC mechanism in Windows NT, or you could replace the database interface with an OLE-based database interface. Another way to extend the scope of the application would be to rewrite the server so that multiple clients can work on the database concurrently.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Office Compatible 97--AutoCorrect</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_autocor"></a>Office Compatible 97—AutoCorrect</h1>
<p>
by Ross Comer<br>
Development Lead, Microsoft Office Compatible</p>
<p>
June 1996</p>
<h2>Abstract</h2>
<p>
This article provides a detailed description of the AutoCorrect feature of Office Compatible and the steps necessary to implement this feature into your custom application.&nbsp; It also provides sample code for both a C/C++ interface and an OLE Automation interface accessible from Visual Basic or Visual Basic for Applications.</p>
<h2>Description</h2>
<p>
AutoCorrect provides a mechanism for automatically correcting typographical or misspelling errors as a user types, without having to run SpellCheck for those errors.&nbsp; AutoCorrect corrects common errors such as TWo INitial CAps, lowercasing of days of the week (monday, etc), first letter capitalization of sentences, and accidental cAPS LOCK being held down. This feature includes a default list of common typing errors and a dialog interface that allows a user to add personal typing or spelling errors and their corresponding automatic corrections.</p>
<p>
The API set provides OLE Automation and C interfaces that bring up the AutoCorrect dialogs.</p>
<h3>Dialogs</h3>
<p>
The AutoCorrect dialog provides four default correction rules which the user can select using the checkboxes. The user can also add other errors and their corresponding corrections to the default list of exact pattern corrections. A menu option or toolbar button which calls ShowDialog will display this dialog.&nbsp; </p>
<p>
<img src="autocor_1.gif" border=0></p>
<p>
The Exceptions sub-dialog allows the user to also maintain an exception list to the rules selected on the main AutoCorrect dialog. These exceptions include not capitalizing after a specific letter sequence, allowing multiple initial capitalization of specified letter sequences, and other letter sequences as defined by the user. The dialog tab views for exceptions are shown below.</p>
<p>
<img src="autocor_2.gif" border=0> </p>
<p>
<img src="autocor_3.gif" border=0></p>
<h2>C Interface</h2>
<p>
To use the AutoCorrect functionality, you will need to get the AutoCorrect interface. In order to get the AutoCorrect interface, use the PiacGetAutoCorrect() method in the IOfficeCompatible interface. If the result of this call is non-NULL, the call succeeded, and you are holding the AutoCorrect interface. Once you have the interface, you can access and manipulate its properties as needed. For the example below, check that pAutoCorrect is non-NULL.&nbsp; </p>
<pre><code>   // Get the AutoCorrect interface
   IMsocAutoCorrect *pAutoCorrect = pOC-&gt;PiacGetAutoCorrect();
</code></pre>
<p>
The AutoCorrect interface is automatically released when the IOfficeCompatible interface is released. There is no need to do any other releases on this interface.</p>
<p>
For more information about the IOfficeCompatible interface, refer to the article “Application Initialization when Using the Office Compatible DLL”. </p>
<h3>The AutoCorrect Interface</h3>
<p>
The following properties can get and set the various AutoCorrect settings. Making these calls with the Boolean value set to true will check the checkbox; false will clear the checkbox. Each call responds to one of the five checkboxes available on the main AutoCorrect dialog. They are listed in the following code in the order they appear on the dialog.</p>
<pre><code>&nbsp;&nbsp;&nbsp;// TwoInitalCapitals:&nbsp; 
 &nbsp; //&nbsp;&nbsp; Whether TWo INitial CApitals are corrected
 &nbsp; BOOL FTwoInitialCapitals();
 &nbsp; void SetTwoInitialCapitals(BOOL fTwoInitialCapitals);

 &nbsp; // CapitalizeSentences: 
 &nbsp; //&nbsp;&nbsp; Whether the first word of sentences are capitalized
 &nbsp; BOOL FCapitalizeSentences();
 &nbsp; void SetCapitalizeSentences(BOOL fCapitalizeSentences);

 &nbsp; // CapitalizeNamesOfDays:&nbsp; 
 &nbsp; //&nbsp;&nbsp; Whether monday, tuesday, etc are capitalized
 &nbsp; BOOL FCapitalizeNamesOfDays();
 &nbsp; void SetCapitalizeNamesOfDays(BOOL fCapitalizeNamesOfDays);

 &nbsp; // CapsLock:&nbsp; 
 &nbsp; //&nbsp;&nbsp; Whether the cAPS lOCK key being held down is automatically fixed
 &nbsp; BOOL FCapsLock();
 &nbsp; void SetCapsLock(BOOL fCapsLock);

 &nbsp; // ReplaceText: 
 &nbsp; //&nbsp;&nbsp; Whether text is automatically replaced from the replacement list
 &nbsp; BOOL FReplaceText(); 
 &nbsp; void SetReplaceText(BOOL fReplaceText);
</code></pre>
<p>
The FCorrect method checks the given text for a possible AutoCorrection.&nbsp; This function should be called whenever the text being typed by the user changes. It should not be called for non-printing characters (arrow keys, delete, etc). If FCorrect returns true, then use the values in pwchTo, pcchTo, and pcchReplace to replace the text in the original buffer.</p>
<pre><code>&nbsp;&nbsp;&nbsp;// Check for AutoCorrection on the string passed in
 &nbsp; // pwchBuffer: text to check,&nbsp; “This is teh “
 &nbsp; // ichBuffer: index of character just typed (12)
 &nbsp; // pwchTo: buffer to hold new text to replace original text, “the”
 &nbsp; // pcchTo: in: length of buffer pwchTo (100)
 &nbsp; //&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out: length of replacement text, (3)
 &nbsp; // pcchReplace: out: number of characters to replace (3)
 &nbsp; BOOL FCorrect(LPCWSTR pwchBuffer, unsigned int ichBuffer,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WCHAR *pwchTo, unsigned int *pcchTo, unsigned int *pcchReplace);
</code></pre>
<p>
The call ShowDialog brings up the AutoCorrect dialog. Refer to the previous section for a description of the AutoCorrect main dialog.&nbsp; HwndParent should be the main window of the application. The sub dialogs are called using existing code for the Exceptions command button on the dialog. You will not need extra code to make those dialogs available to the user.</p>
<pre><code>&nbsp;&nbsp;&nbsp;// Show the AutoCorrect dialog
 &nbsp; void ShowDialog(HWND hwndParent);
</code></pre>
<h3>The AutoCorrectEntries Interface</h3>
<p>
The AutoCorrectEntries are the word-pairs that AutoCorrect searches for when replacing text. For example, “teh” and “the” are a common pair.</p>
<p>
Use IMsocAutoCorrectEntries to get the AutoCorrectEntries interface. PiaceGetAutoCorrectEntries returns the interface to the AutoCorrectEntries. </p>
<pre><code>&nbsp;&nbsp;&nbsp;// Get the AutoCorrectEntries interface, NULL on failure
 &nbsp; IMsocAutoCorrectEntries *PiaceGetAutoCorrectEntries()
</code></pre>
<p>
Once you have the interface, you can access and manipulate the list of entries.</p>
<pre><code>&nbsp;&nbsp;&nbsp;// Count:&nbsp; Returns the number of AutoCorrectEntries
 &nbsp; int Count();
 &nbsp; 
 &nbsp; // GetEntry:&nbsp; Fills in the values of AutoCorrectEntries(i)
 &nbsp; // i: index of entry to get
 &nbsp; // pwchName: buffer to hold name of entry
 &nbsp; // cchName: length of pwchName buffer
 &nbsp; // pwchValue: buffer to hold value of entry
 &nbsp; // cchValue: length of pwchValue buffer
 &nbsp; HRESULT GetEntry(int i, WCHAR *pwchName, int cchName, WCHAR *pwchValue, 
 &nbsp;&nbsp;&nbsp;&nbsp; int cchValue);

 &nbsp; // Delete:&nbsp; Removes entry i
 &nbsp; HRESULT Delete(int i);

 &nbsp; // AddEntry:&nbsp; Creates a new entry 
 &nbsp; HRESULT AddEntry(WCHAR *pwchName, WCHAR *pwchValue);
</code></pre>
<h3>Sample C Code</h3>
<pre><code>// Get the OfficeCompatible interface
IOfficeCompatible *pOC = CreateOfficeCompatible(L”SampleApp”, L”SampleAplication”)

if (pOC != NULL)
 &nbsp; {
 &nbsp; // Get the AutoCorrect interface
 &nbsp; IMsocAutoCorrect *pAutoCorrect = pOC-&gt;PiacGetAutoCorrect();

 &nbsp; if (pAutoCorrect == NULL)
 &nbsp;&nbsp;&nbsp;&nbsp; return();

 &nbsp; pAutoCorrect-&gt;ShowDialog(hwndMain);
 &nbsp; 
 &nbsp; WCHAR rgOriginalText[200];
 &nbsp; wcscpy(rgOriginalText,L“Test of teh “);

 &nbsp; int ichText = wcslen(pOriginalText);
 &nbsp; WCHAR rgwchTo[100];
 &nbsp; unsigned int cchTo = sizeof(rgwchTo);
 &nbsp; unsigned int cchReplace;

 &nbsp; // If there is a correction to perform
 &nbsp; if (pAutoCorrect-&gt;FCorrect(rgOriginalText, ichText, rgwchTo, &amp;cchTo, &amp;cchReplace))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // copy the new text over the old text
 &nbsp;&nbsp;&nbsp;&nbsp; wcscpy(&amp;rgOriginalText[ichText - cchReplace], rgwchTo);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
</code></pre>
<h2>Automation Interface</h2>
<p>
You can also access the AutoCorrect feature through the Office Compatible automation interfaces. Since the automation interfaces are based on the same code, they appear and function like their C counterparts, except they use VB syntax.&nbsp; </p>
<p>
As with the C model, you need to establish your application as an Office Compatible user. Use CreateObject to return an application object, using the following call.</p>
<pre><code>&nbsp;&nbsp;&nbsp;Set OC = CreateObject("OfficeCompatible.Application")
</code></pre>
<p>
You will also need to initialize your object using the following call.</p>
<pre><code>&nbsp;&nbsp;&nbsp;OC.Init "OCBSamp", "Office Compatible Basic Sample App"
</code></pre>
<p>
For more information about automation initialization, refer to the article “Application Initialization when Using the Office Compatible DLL”.</p>
<h3>The AutoCorrect Object</h3>
<p>
Once you have created your application object, you can then access the AutoCorrect properties. Since in this case the parent and the application are the same thing, they return the same object.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Application - returns the application object
 &nbsp;&nbsp;&nbsp;&nbsp; Parent - returns the application object
</code></pre>
<p>
The following Boolean properties correspond to the checkboxes available on the AutoCorrect dialog. They can be used to get and set these values. Setting the Boolean value to true will check the checkbox; false will clear the checkbox. They are listed here in the order they appear on the dialog.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoInitialCaps
 &nbsp;&nbsp;&nbsp;&nbsp; CapitalizeSentences
 &nbsp;&nbsp;&nbsp;&nbsp; CapitalizeNamesOfDays
 &nbsp;&nbsp;&nbsp;&nbsp; CapsLock
 &nbsp;&nbsp;&nbsp;&nbsp; ReplaceText
 &nbsp;&nbsp;&nbsp;&nbsp; AutoCorrectEntries - returns the AutoCorrectEntries collection
</code></pre>
<p>
Methods available to the AutoCorrect object.</p>
<p>
The method AutoCorrectText corresponds to the FCorrect call in the C interface.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoCorrectText(String bstrText) - returns a non-blank string if correction has been made
</code></pre>
<p>
The method ShowDialog brings up the AutoCorrect dialog. Refer to the section “Dialogs” for a description of the AutoCorrect main dialog. As with the C interface, the sub dialogs are called using existing code for the Exceptions command button on the dialog. You will not need extra code to make those dialogs available to the user.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowDialog()

The following summarizes the properties and methods for the autocorrect automation interface.

 &nbsp; properties
 &nbsp;&nbsp;&nbsp;&nbsp; Application – returns the Application object
 &nbsp;&nbsp;&nbsp;&nbsp; Parent – returns the parent object
 &nbsp; methods
 &nbsp;&nbsp;&nbsp;&nbsp; ReplaceText – sets or returns the ‘replace text’ flag
 &nbsp;&nbsp;&nbsp;&nbsp; TwoInitialCapitols – sets or returns the ‘two initial capitols’ flag
 &nbsp;&nbsp;&nbsp;&nbsp; CapitolizeNamesOfDays – sets or returns the ‘capitolize names of days’ flag
 &nbsp;&nbsp;&nbsp;&nbsp; CapitolizeSentences – sets or returns the ‘capitolize sentences’ flag
 &nbsp;&nbsp;&nbsp;&nbsp; CapsLock – sets or returns the ‘caps lock’ check flag
 &nbsp;&nbsp;&nbsp;&nbsp; Correct([in]bstrCorrect, [in, opt] boolCheckNow)– perform an autocorrect operation on a given string and returns the corrected string
 &nbsp;&nbsp;&nbsp;&nbsp; ShowDialog – display the autocorrect dialog
 &nbsp;&nbsp;&nbsp;&nbsp; AutocorrectEntries – returns the auto correct entries object
</code></pre>
<h3>The AutoCorrectEntries Collection</h3>
<p>
The AutoCorrectEntries are the word-pairs that AutoCorrect searches for when replacing text.&nbsp; For example, “teh” and “the” are a common pair.</p>
<p>
Use AutoCorrect.AutoCorrectEntries to get the AutoCorrectEntries collection. </p>
<pre><code>&nbsp;&nbsp;&nbsp;properties
 &nbsp;&nbsp;&nbsp;&nbsp; Application - returns the Application object
 &nbsp;&nbsp;&nbsp;&nbsp; Parent - returns the Autocorrect object
 &nbsp;&nbsp;&nbsp;&nbsp; Count - returns the number of entries
 &nbsp; methods
 &nbsp;&nbsp;&nbsp;&nbsp; Item([in]Index) - Returns AutoCorrectEntry Index
 &nbsp;&nbsp;&nbsp;&nbsp; Add([in]String Name, [in]String Value) - Adds a new entry
 &nbsp;&nbsp;&nbsp;&nbsp; Remove([in]Index) - Removes entry at Index
</code></pre>
<h3>The AutoCorrectEntry Object</h3>
<p>
This object defines a single entry in the AutoCorrectEntries Collection.</p>
<pre><code>AutoCorrectEntry
 &nbsp; properties
 &nbsp;&nbsp;&nbsp;&nbsp; Application - returns the Application object
 &nbsp;&nbsp;&nbsp;&nbsp; Parent - returns the Autocorrect object
 &nbsp;&nbsp;&nbsp;&nbsp; Name – set or return the name of the entry
 &nbsp;&nbsp;&nbsp;&nbsp; Value – set or return the value of the entry
 &nbsp; methods
 &nbsp;&nbsp;&nbsp;&nbsp; Delete - Delete this entry
</code></pre>
<h3>Sample VB Code</h3>
<pre><code>&nbsp;&nbsp;&nbsp;Set OC = CreateObject("OfficeCompatible.Application")
 &nbsp; If OC Is Nothing Then Exit Sub
 &nbsp;&nbsp; 
 &nbsp; On Error Resume Next
 &nbsp; OC.Init "OCBSamp", "Office Compatible Basic Sample App"

 &nbsp; If (Err.Number &lt;&gt; 0) Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set OC = Nothing
 &nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; On Error GoTo 0

 &nbsp; Set AutoCorrect = OC.AutoCorrect
 &nbsp; If Not AutoCorrect Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; AutoCorrect.ShowDialog

 &nbsp;&nbsp;&nbsp;&nbsp; strOriginal = “This is teh “

 &nbsp;&nbsp;&nbsp;&nbsp; strNew = AutoCorrect.Correct(strOriginal)
 &nbsp;&nbsp; If (strNew &lt;&gt; "") Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrOriginal = strNew ‘ AutoCorrect occurred
 &nbsp;&nbsp; End If   End If

</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Visual Basic Scripting Edition in HTML</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_vbshtml"></a></sup>Using Visual Basic Scripting Edition in HTML</h1>
<p>
Microsoft Corporation</p>
<p>
September 1996</p>
<h3>Contents</h3>
<p>
<a href="#vbshtmlwhatis">What Is VBScript?</a></p>
<p>
<a href="#vbshtmllookslike">What VBScript Looks Like in HTML</a></p>
<p>
<a href="#vbshtmlbasics">VBScript Basics</a></p>
<p>
<a href="#vbshtmluseinie">Using VBScript in Internet Explorer 3.0</a></p>
<p>
<a href="#vbshtmlappenconv">Appendix: Conversion Functions</a></p>
<h2><a name="vbshtmlwhatis"></a>What Is Visual Basic Scripting Edition?</h2>
<h3>Summary</h3>
<p>
Here you'll find a description of Microsoft® Visual Basic® Scripting Edition (VBScript), and an overview of the Visual Basic product line. In this article, you'll first see what VBScript looks like when it's inside a Hypertext Markup Language (HTML) page. You'll learn about variables, constants, and procedures. Then you'll see how to use VBScript to handle standard HTML form controls and to validate data. Finally, you'll see how to extend the power of your pages with ActiveX™ controls (formerly called OLE Controls) and other objects.</p>
<h3>VBScript</h3>
<p>
VBScript, the newest member of the Microsoft Visual Basic family of programming languages, brings active scripting to the Web. Microsoft Internet Explorer version 3.0 can read VBScript programs embedded in HTML pages. With VBScript, you can validate form data, automatically generate custom pages, or even write games—all from inside your Web pages and without server-side programming.</p>
<h3>Easy to Use and Learn</h3>
<p>
If you already know Visual Basic or Visual Basic for Applications, VBScript will be very familiar. Even if you don't know Visual Basic, once you learn it you're on your way to programming with the whole family of Visual Basic languages.</p>
<p>
Although this article will teach you about VBScript, it won't teach you how to program. To get started programming, take a look at <i>Microsoft</i> <i>Visual Basic 4 Step by Step</i> by Michael Halvorson, available from Microsoft Press.</p>
<h3>ActiveX Scripting</h3>
<p>
VBScript talks to host applications using Microsoft ActiveX scripting. ActiveX scripting prevents browsers and other host applications from needing to write special integration code for each scripting component. ActiveX scripting enables a host to compile scripts, obtain and call entry points, and manage the namespace available to the developer. With ActiveX scripting, language vendors can create standard language run times for scripting. Microsoft will provide runtime support for VBScript and Visual Basic. Microsoft is working with various Internet groups to define the ActiveX scripting standard so that scripting engines can be interchangeable. ActiveX scripting is used in Microsoft Internet Explorer 3.0.</p>
<h3>VBScript in Other Applications and Browsers</h3>
<p>
As a developer, you may license the VBScript source implementation at no charge for use in your products. Microsoft provided binary implementations of VBScript for the 32-bit Microsoft Windows® application programming interface (API), the 16-bit Windows API, and the Apple® Macintosh® in 1996. VBScript is integrated with World Wide Web browsers and is designed to work with ActiveX controls and other objects embedded in active HTML documents. VBScript and ActiveX scripting, can, however, also be used as a general scripting language in other applications. </p>
<h3>The Visual Basic Product Line</h3>
<p>
Microsoft has designed Visual Basic as a scalable development tool for a range of applications, including Internet and enterprise applications. Visual Basic can be used to create active HTML documents, customize productivity products, and build client/server business applications.</p>
<p>
<img src="vbshtml_1.gif" border=0></p>
<p>
<b>Figure 1. The Microsoft Visual Basic family</b></p>
<p>
To support a full range of applications, Microsoft provides Visual Basic in three upwardly compatible packages:</p>
<h3>VBScript</h3>
<p>
This lightweight subset of the Microsoft Visual Basic programming language will be licensed to corporations free of charge. Microsoft will provide VBScript for the Windows and Macintosh operating systems, and is working with third parties to provide Unix versions for Sun, Hewlett-Packard, Digital, and IBM platforms. VBScript is packaged as a compiler and associated runtime libraries. Microsoft does not currently provide integrated development support tools (such as editing, layout, and debugging tools) for VBScript. VBScript became available to licensees and other interested parties in 1996.</p>
<h3>Visual Basic for Applications</h3>
<p>
Visual Basic for Applications is Microsoft's strategic application scripting language. This highly extensible language uses Automation (formerly OLE Automation) and program objects. Visual Basic for Applications provides a complete development environment, including integrated editor and debugging support. Visual Basic for Applications is currently available only with the Microsoft Office family of products for the Windows and Macintosh operating systems.</p>
<h3>Visual Basic Version 4.0</h3>
<p>
The Visual Basic development tool is available in three editions: the Standard Edition for students and hobbyists, the Professional Edition for individual developers, and the Enterprise Edition for developer teams or corporate development. Visual Basic version 4.0 provides a superset of the language and tool functionality found in Visual Basic for Applications. The key features of the Enterprise Edition product include remote client/server data access, distributed computing support (for example, for three-tiered architectures), and team source code control support. Visual Basic 4.0 is currently available only for the Windows operating system.</p>
<h2><a name="vbshtmllookslike"></a>What VBScript Looks Like in HTML</h2>
<h3>The &lt;SCRIPT&gt; Tag</h3>
<p>
In an HTML page, VBScript code goes inside paired &lt;SCRIPT&gt; tags. For example, a procedure to test a delivery date might appear as follows:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 &nbsp; Function CanDeliver(Dt)
 &nbsp;&nbsp;&nbsp;&nbsp; CanDeliver = (CDate(Dt) - Now()) &gt; 2
 &nbsp; End Function
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Beginning and ending &lt;SCRIPT&gt; tags surround the code. Notice that the LANGUAGE attribute indicates the scripting language. You need to specify the language since Microsoft Internet Explorer 3.0 can use other scripting languages. In addition, notice that the <b>CanDeliver</b> function is embedded in comment tags (&lt;!-- and --&gt;). This prevents browsers that don't understand the &lt;SCRIPT&gt; tag from displaying the code.</p>
<p>
Since the example is a general function—it isn't tied to any particular form control—you can include it in the HEAD section of the page:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Place Your Order&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 &nbsp; Function CanDeliver(Dt)
 &nbsp;&nbsp;&nbsp;&nbsp; CanDeliver = (CDate(Dt) - Now()) &gt; 2
 &nbsp; End Function
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
...
</code></pre>
<p>
You can use procedures in code anywhere in a page. You can put procedures in both the BODY and HEAD sections. However, you may want to put all procedures in the HEAD section in order to keep all the code together.</p>
<p>
Now, let's look at some elements of the language.</p>
<h2><a name="vbshtmlbasics"></a>VBScript Basics</h2>
<h3>VBScript Data Types</h3>
<h4>What are the VBScript data types?</h4>
<p>
VBScript has only one data type and it's called a Variant. A <i>Variant</i> is a special kind of data type that can contain different kinds of information, depending on how it's used. Because Variant is the only data type in VBScript, it's also the data type returned by all functions in VBScript.</p>
<p>
At its simplest, a Variant can contain either numeric or string information. A Variant behaves as a number when you're using it in a numeric context and as a string when you use it in a string context. That is, if you're working with data that looks like numbers, VBScript assumes that it is numbers and does the thing that is most appropriate for numbers. Of course, you can always make numbers behave as strings, by enclosing them in quotation marks. Similarly, if you're working with data that can only be string data, VBScript treats it as string data.</p>
<p>
Beyond the simple numeric or string classifications, a Variant can make further distinctions about the specific nature of numeric information. For example, you can have numeric information that represents a date or a time. When used with other date or time data, the result is always expressed as a date or a time. Of course, you can also have a rich variety of numeric information ranging in size from Boolean values to huge floating-point numbers. These different categories of information that can be contained in a Variant are called subtypes. Most of the time you can just put the kind of data you want in a Variant and it behaves in a way that is most appropriate for the data it contains.</p>
<p>
Table 1 shows the various subtypes of data that a Variant can contain.</p>
<p class=label>
<b>Table 1. Possible Data Subtypes for a Variant</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%><b>Subtype</b></td>
<td width=78%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=22%>Empty</td>
<td width=78%>Variant is uninitialized. Value is either 0 for numeric variables or a zero-length string ("") for string variables.</td>
</tr>
<tr valign=top>
<td width=22%>Null</td>
<td width=78%>Variant intentionally contains no valid data. </td>
</tr>
<tr valign=top>
<td width=22%>Boolean</td>
<td width=78%>Contains either True or False.</td>
</tr>
<tr valign=top>
<td width=22%>Byte</td>
<td width=78%>Contains an integer in the range 0 to 255. </td>
</tr>
<tr valign=top>
<td width=22%>Integer</td>
<td width=78%>Contains an integer in the range -32,768 to 32,767. </td>
</tr>
<tr valign=top>
<td width=22%>Long</td>
<td width=78%>Contains an integer in the range -2,147,483,648 to 2,147,483,647. SingleContains a single-precision, floating-point number in the range -3.402823E38 to -1.401298E-45 for negative values; 1.401298E-45 to 3.402823E38 for positive values.</td>
</tr>
<tr valign=top>
<td width=22%>Double</td>
<td width=78%>Contains a double-precision, floating-point number in the range -1.79769313486232E308 to -4.94065645841247E-324 for negative values; 4.94065645841247E-324 to 1.79769313486232E308 for positive values.</td>
</tr>
<tr valign=top>
<td width=22%>Date (Time)</td>
<td width=78%>Contains a number that represents a date between January 1, 100 to December 31, 9999. StringContains a variable-length string that can be up to approximately 2 billion characters in length.</td>
</tr>
<tr valign=top>
<td width=22%>Object</td>
<td width=78%>Contains an object.</td>
</tr>
<tr valign=top>
<td width=22%>Error</td>
<td width=78%>Contains an error number.</td>
</tr>
</table><br>
<p>
If you want to convert from one subtype to another, there is a rich set of conversion functions you can use (see <a href="#vbshtmlappenconv">Appendix</a>). In addition, another function, <b>VarType</b>, returns information about how your data is stored within a Variant.</p>
<h3>VBScript Variables</h3>
<h4>What is a variable?</h4>
<p>
A variable is a convenient placeholder that refers to a computer memory location where you can store program information that may change during the time your script is running. For example, you might create a variable called <i>ClickCount</i> to store the number of times a user clicked an object on a particular Web page. Where the variable is located in computer memory is unimportant. What's important is that you only have to refer to it by name to see its value or to change its value. In VBScript, variables are always of one fundamental data type, Variant.</p>
<h4>Declaring variables</h4>
<p>
You declare variables explicitly in your script using the <b>Dim</b> statement. For example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim DegreesFahrenheit
--&gt;
&lt;/SCRIPT&gt;
You declare multiple variables by separating each variable name with a comma. For example:
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim Top, Bottom, Left, Right
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
You can also declare a variable implicitly by simply using its name somewhere in your script. That's not generally considered to be a good practice because you could misspell the variable name in one or more places, causing unexpected results when your script is run. For that reason, the <b>Option</b> <b>Explicit</b> statement is available to require explicit declaration of all variables. The <b>Option</b> <b>Explicit</b> statement should be the first statement inside your &lt;SCRIPT&gt; tag.</p>
<h4>Naming restrictions</h4>
<p>
Variable names follow the standard rules for naming anything in VBScript. A variable name:
<ul type=disc>
<li>
Must begin with an alphabetic character.<br><br></li>
<li>
Cannot contain an embedded period.<br><br></li>
<li>
Must not exceed 255 characters.<br><br></li>
<li>
Must be unique in the scope in which it is declared.</li>
</ul>
<h4>Limit on number of variables</h4>
<p>
When using variables in VBScript these limitations apply:
<ul type=disc>
<li>
There cannot be more than 127 variables per procedure (arrays count as a single variable).<br><br></li>
<li>
Each script is limited to no more than 127 <i>module-level</i> variables.</li>
</ul>
<h4>Scope and lifetime of variables</h4>
<p>
Generally, when you declare a variable within a procedure, only code within that procedure can access or change the value of that variable; it has local scope and is known as a procedure-level variable. Sometimes, however, you need to use a variable with a broader scope, such as one whose value is available to all the procedures within the same script. If you declare a variable outside a procedure, you make it recognizable to all the procedures in your script. This kind of script-level variable is said to have script-level scope.</p>
<p>
The length of time a variable exists is its <i>lifetime</i>. A script-level variable's lifetime extends from the time it is declared until the time the script is finished running. A local variable's lifetime begins when its declaration statement is encountered as the procedure begins, and ends when the procedure concludes. Local variables are ideal as temporary storage space when a procedure is executing. You can have local variables of the same name in several different procedures because each is recognized only by the procedure in which it is declared.</p>
<p>
A variable's scope is determined by where you declare it. At script level, the lifetime of a variable is always the same. It exists for as long as the script is running. At procedure level, a variable exists only so long as you are in the procedure. When the procedure exits, the variable is destroyed.</p>
<h4>Assigning values to variables</h4>
<p>
Values are assigned to variables with an expression such that the variable is on the left side of the expression and the value you want to assign to the variable is on the right. For example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 B = 200
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Scalars and arrays</h4>
<p>
Much of the time, you only want to assign a single value to a variable you've declared. A variable containing a single value is a <i>scalar variable</i>. Other times, it's convenient to assign more than one related value to a single variable. Then you can create a variable that can contain a series of values. This is called an <i>array variable</i>. Array variables are declared much the same way as scalar variables. The difference is that a declaration of an array variable uses parentheses following the variable name. In the following example, a single-dimension array containing 11 elements is declared:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim A(10)
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Although the number shown in the parentheses is 10, all arrays in VBScript are zero-based, so this array actually contains 11 elements. In a zero-based array, the number of array elements is always the number shown in parentheses plus one. This kind of an array is called a <i>fixed-size</i> array.</p>
<p>
You assign data to each of the elements of the array using an index into the array. Beginning at zero and ending at 10, data can be assigned to the elements of an array as follows:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 A(0) = 256
 A(1) = 324
 A(2) = 100
 . . .
 A(10) = 55
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Similarly, the data can be retrieved from any element using an index into the particular array element you want. For example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 . . .
 SomeVariable = A(8)
 . . .
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Arrays aren't limited to a single dimension. You can have as many as 60 dimensions, although most people can't comprehend more than about three or four. Multiple dimensions are declared by separating an array's size numbers in the parentheses with commas. In the following example, the <i>MyTable</i> variable is a two-dimensional array consisting of 6 rows and 11 columns:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VB"&gt;
&lt;!--
 Dim MyTable(5, 10)
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
In a two-dimensional array, the first number is always the number of rows; the second the number of columns.</p>
<p>
You can also declare an array whose size changes during the time your script is running. This is called a <i>dynamic array</i>. The array is initially declared within a procedure using either the <b>Dim</b> statement, as with any other array, or the <b>ReDim</b> statement. The difference is that no size or number of dimensions is placed inside the parentheses. For example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim MyArray()
 ReDim AnotherArray()
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
To use a dynamic array, you must subsequently use <b>ReDim</b> to determine the number of dimensions and the size of each. In the following example, <b>ReDim</b> sets the initial size of the dynamic array to 25. A subsequent ReDim statement resizes the array to 30, but uses the <i>Preserve</i> keyword to preserve the contents of the array as the resizing takes place.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 ReDim MyArray(25)
 . . .
 ReDim Preserve MyArray(30)
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
There is no limit to the number of times you can resize a dynamic array, but you should know that if you make an array smaller than it was, you lose the data in the eliminated elements.</p>
<h3>VBScript Constants</h3>
<h4>What is a constant?</h4>
<p>
A constant is a meaningful name that takes the place of a number or string and never changes. VBScript currently has no constants defined by the language. In VBScript, constants are implemented as literal values assigned to variable names.</p>
<h4>Creating constants</h4>
<p>
You create constants in VBScript the same way you declare variables, using the <b>Dim</b> statement. Using the <b>Dim</b> statement, you can create string or numeric constants with meaningful names. You can then assign them literal values and use them in your script. For example:</p>
<pre><code>Dim MyString
MyString = "This is my string."
Dim MyAge
MyAge = 49
</code></pre>
<p>
Note that the string literal is enclosed in quotation marks ("). Quotation marks are the best, most obvious way to differentiate string values from numeric values. Date/time literals can be represented by enclosing them in number signs (#). For example:</p>
<pre><code>Dim CutoffDate
CutOffDate = #12-21-96#
</code></pre>
<p>
Since there is no functional difference between constants created in this way and regular variables, you may want to adopt a naming scheme to differentiate constants from variables. This will prevent you from trying to reassign their values while your script is running. For example, you might want to use a "vb" prefix on your constant names, or you may want to use all capital letters in your constants' names as recommended in <a href="#vbshtmlcodeconven">VBScript Coding Conventions</a>. In either case, it is a good idea to differentiate constants from variables. This eliminates confusion as you develop more complex scripts.</p>
<h3>VBScript Operators</h3>
<h4>Operator precedence</h4>
<p>
VBScript has a full range of operators, including arithmetic operators, comparison operators, concatenation operators, and logical operators.</p>
<p>
When several operations occur in an expression, each part is evaluated and resolved in a predetermined order. That order is known as operator precedence. You can use parentheses to override the order of precedence and force some parts of an expression to be evaluated before others. Operations within parentheses are always performed before those outside. Within parentheses, however, normal operator precedence is maintained.</p>
<p>
When expressions contain operators from more than one category, arithmetic operators are evaluated first, comparison operators are evaluated next, and logical operators are evaluated last. Comparison operators all have equal precedence; that is, they are evaluated in the left to right order in which they appear. Arithmetic and logical operators are evaluated in the order of precedence, from top to bottom, as shown below.</p>
<p class=label>
<b>Table 2. VBScript Operators</b></p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td colspan=2 width=36%><b>Arithmetic</b></td>
<td colspan=2 width=32%><b>Comparison</b></td>
<td colspan=2 width=32%><b>Logical</b></td>
</tr>
<tr valign=top>
<td width=20%><b>Description</b></td>
<td width=16%><b>Symbol</b></td>
<td width=15%><b>Description</b></td>
<td width=17%><b>Symbol</b></td>
<td width=15%><b>Description</b></td>
<td width=17%><b>Symbol</b></td>
</tr>
<tr valign=top>
<td width=20%>Exponentiation</td>
<td width=16%>^</td>
<td width=15%>Equality</td>
<td width=17%>=</td>
<td width=15%>Logical negation</td>
<td width=17%>Not</td>
</tr>
<tr valign=top>
<td width=20%>Unary negation</td>
<td width=16%>-</td>
<td width=15%>Inequality</td>
<td width=17%>&lt;&gt;</td>
<td width=15%>Logical conjunction</td>
<td width=17%>And</td>
</tr>
<tr valign=top>
<td width=20%>Multiplication</td>
<td width=16%>*</td>
<td width=15%>Less than</td>
<td width=17%>&lt;</td>
<td width=15%>Logical disjunction</td>
<td width=17%>Or</td>
</tr>
<tr valign=top>
<td width=20%>Division</td>
<td width=16%>/</td>
<td width=15%>Greater than</td>
<td width=17%>&gt;</td>
<td width=15%>Logical exclusion</td>
<td width=17%>Xor</td>
</tr>
<tr valign=top>
<td width=20%>Integer division</td>
<td width=16%>\</td>
<td width=15%>Less than or equal to</td>
<td width=17%>&lt;=</td>
<td width=15%>Logical equivalence</td>
<td width=17%>Eqv</td>
</tr>
<tr valign=top>
<td width=20%>Modulo arithmetic</td>
<td width=16%>Mod</td>
<td width=15%>Greater than or equal to</td>
<td width=17%>&gt;=</td>
<td width=15%>Logical implication</td>
<td width=17%>Imp</td>
</tr>
<tr valign=top>
<td width=20%>Addition</td>
<td width=16%>+</td>
<td width=15%>Object equivalence</td>
<td width=17%>Is</td>
<td width=15%></td>
<td width=17%></td>
</tr>
<tr valign=top>
<td width=20%>Subtraction</td>
<td width=16%>-</td>
<td width=15%></td>
<td width=17%></td>
<td width=15%></td>
<td width=17%></td>
</tr>
<tr valign=top>
<td width=20%>String concatenation</td>
<td width=16%>&amp; </td>
<td width=15%></td>
<td width=17%></td>
<td width=15%></td>
<td width=17%></td>
</tr>
</table><br>
<p>
When multiplication and division occur together in an expression, each operation is evaluated as it occurs from left to right. Likewise, when addition and subtraction occur together in an expression, each operation is evaluated in order of appearance from left to right.</p>
<p>
The string concatenation operator (<b>&amp;</b>) is not an arithmetic operator, but in precedence it does fall after all arithmetic operators and before all comparison operators. The <b>Is</b> operator is an object reference comparison operator. It does not compare objects or their values; it checks only to determine if two object references refer to the same object.</p>
<h3>Controlling Program Flow in VBScript</h3>
<h4>Controlling program execution</h4>
<p>
Using conditional statements and looping statements (also known as control structures), you can write VBScript code that makes decisions and repeats actions.</p>
<h4>Making decisions using If...Then...Else</h4>
<p>
The <b>If...Then...Else</b> statement is used to evaluate whether a condition is True or False, and then to specify one or more statements to run, depending on the result. Usually, the condition is an expression that uses a comparison operator to compare one value or variable with another. For information about comparison operators, see "Comparison Operators" in the Visual Basic documentation in the MSDN Library. <b>If...Then...Else</b> statements can be nested to as many levels as you need.</p>
<h4>Running statements if a condition is true</h4>
<p>
If you need to run only one statement when a condition is True, you can use the single-line syntax of the <b>If...Then...Else</b> statement. The following example shows the single-line syntax; notice that this example omits the <b>Else</b> keyword.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub FixDate()
 &nbsp;&nbsp;&nbsp; Dim myDate
 &nbsp;&nbsp;&nbsp; myDate = #2/13/95#
 &nbsp;&nbsp;&nbsp; If myDate &lt; Now Then myDate = Now
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
If you want to run more than one line of code, you must use the multiple-line syntax. This syntax includes the <b>End If</b> statement, as shown in the following example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub AlertUser(value)
 &nbsp;&nbsp;&nbsp; If value = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.ForeColor = "Red"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Bold = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Italic = True
 &nbsp;&nbsp;&nbsp; End If
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Running certain statements if a condition is True, and running others if it is False</h4>
<p>
You can use an <b>If...Then...Else</b> statement to define two blocks of executable statements: one block to run if the condition is True, the other block to run if the condition is False.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub AlertUser(value)
 &nbsp;&nbsp;&nbsp; If value = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.ForeColor = vbRed
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Bold = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Italic = True
 &nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Forecolor = vbBlack
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Bold = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlertLabel.Font.Italic = False
 &nbsp;&nbsp;&nbsp; End If
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Using loops to repeat code</h4>
<p>
Looping allows you to run a group of statements repeatedly. Some loops repeat statements until a condition is False, others repeat statements until a condition is True. There are also loops that repeat statements a specific number of times.</p>
<p>
The following looping statements are available in VBScript:
<ul type=disc>
<li>
<b>Do...Loop:</b> Loops while or until a condition is True<br><br></li>
<li>
<b>While...Wend:</b> Loops while a condition is True<br><br></li>
<li>
<b>For...Next:</b> Uses a counter to run statements a specified number of times</li>
</ul>
<p>
<b>Using Do Loops</b></p>
<p>
You can use <b>Do...Loop</b> statements to run a block of statements an indefinite number of times. The statements are repeated either while a condition is True or until a condition becomes True.</p>
<p>
<b>Repeating statements while a condition is True</b></p>
<p>
Use the <b>While</b> keyword to check a condition in a <b>Do...Loop</b> statement. You can check the condition before you enter the loop (as shown in the first Sub procedure following this paragraph), or you can check it after the loop has run at least once (as shown in the second Sub procedure). In the <b>ChkFirstWhile</b> procedure, if <i>myNum</i> were set to 9 instead of 20, the statements inside the loop would never run. In the <b>ChkLastWhile</b> procedure, the statements inside the loop run only once because the condition is already False.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub ChkFirstWhile()
 &nbsp;&nbsp;&nbsp; Dim counter, myNum
 &nbsp;&nbsp;&nbsp; counter = 0
 &nbsp;&nbsp;&nbsp; myNum = 20
 &nbsp;&nbsp;&nbsp; Do While myNum &gt; 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myNum = myNum - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter = counter + 1
 &nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp;&nbsp; MsgBox "The loop made " &amp; counter &amp; " repetitions."
 End Sub
 Sub ChkLastWhile()
 &nbsp;&nbsp;&nbsp; Dim counter, myNum
 &nbsp;&nbsp;&nbsp; counter = 0
 &nbsp;&nbsp;&nbsp; myNum = 9
 &nbsp;&nbsp;&nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myNum = myNum - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter = counter + 1
 &nbsp;&nbsp;&nbsp; Loop While myNum &gt; 10
 &nbsp;&nbsp;&nbsp; MsgBox "The loop made " &amp; counter &amp; " repetitions."
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
<b>Repeating a statement until a condition becomes True</b></p>
<p>
You can use the <b>Until</b> keyword in two ways to check a condition in a <b>Do...Loop</b> statement. You can check the condition before you enter the loop (as shown in the first Sub procedure following this paragraph), or you can check it after the loop has run at least once (as shown in the second Sub procedure). As long as the condition is False, the looping occurs.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub ChkFirstUntil()
 &nbsp;&nbsp;&nbsp; Dim counter, myNum
 &nbsp;&nbsp;&nbsp; counter = 0
 &nbsp;&nbsp;&nbsp; myNum = 20
 &nbsp;&nbsp;&nbsp; Do Until myNum = 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myNum = myNum - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter = counter + 1
 &nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp;&nbsp; MsgBox "The loop made " &amp; counter &amp; " repetitions."
 End Sub
 Sub ChkLastUntil()
 &nbsp;&nbsp;&nbsp; Dim counter, myNum
 &nbsp;&nbsp;&nbsp; counter = 0
 &nbsp;&nbsp;&nbsp; myNum = 1
 &nbsp;&nbsp;&nbsp; Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myNum = myNum + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter = counter + 1
 &nbsp;&nbsp;&nbsp; Loop Until myNum = 10
 &nbsp;&nbsp;&nbsp; MsgBox "The loop made " &amp; counter &amp; " repetitions."
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
<b>Exiting a Do...Loop statement from inside the loop</b></p>
<p>
You can exit a <b>Do...Loop</b> statement by using the <b>Exit Do</b> statement. Because you usually want to exit only in certain situations, such as to avoid an endless loop, you should use the <b>Exit Do </b>statement in the True statement block of an <b>If...Then...Else</b> statement. If the condition is False, the loop runs as usual.</p>
<p>
In the following example, <i>myNum</i> is assigned a value that creates an endless loop. The <b>If...Then...Else</b> statement checks for this condition, preventing the endless repetition.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VB"&gt;
&lt;!--
 Sub ExitExample()
 &nbsp;&nbsp;&nbsp; Dim counter, myNum
 &nbsp;&nbsp;&nbsp; counter = 0
 &nbsp;&nbsp;&nbsp; myNum = 9
 &nbsp;&nbsp;&nbsp; Do Until myNum = 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myNum = myNum - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter = counter + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If myNum &lt; 10 Then Exit Do
 &nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp;&nbsp; MsgBox "The loop made " &amp; counter &amp; " repetitions."
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Using While...Wend</h4>
<p>
The <b>While...Wend</b> statement is provided in VBScript for those who are familiar with its usage. However, because of the lack of flexibility in <b>While...Wend</b>, it is recommended that you use the<b> Do...Loop</b> statement instead.</p>
<h4>Using For...Next</h4>
<p>
You can use <b>For...Next</b> statements to run a block of statements a specific number of times. For loops, use a counter variable whose value is increased or decreased with each repetition of the loop.</p>
<p>
For example, the following procedure causes a procedure called <b>MyProc</b> to execute 50 times. The <b>For</b> statement specifies the counter variable <i>x</i> and its start and end values. The <b>Next</b> statement increments the counter variable by 1.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub DoMyProc50Times()
 &nbsp;&nbsp;&nbsp; Dim x
 &nbsp;&nbsp;&nbsp; For x = 1 To 50
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyProc
 &nbsp;&nbsp;&nbsp; Next
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Using the <b>Step</b> keyword, you can increase or decrease the counter variable by the value you specify. In the following example, the counter variable<i> j</i> is incremented by 2 each time the loop repeats. When the loop is finished, the total is the sum of 2, 4, 6, 8, and 10.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub TwosTotal()
 &nbsp;&nbsp;&nbsp; Dim j, total
 &nbsp;&nbsp;&nbsp; For j = 2 To 10 Step 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total = total + j
 &nbsp;&nbsp;&nbsp; Next
 &nbsp;&nbsp;&nbsp; MsgBox "The total is " &amp; total
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
To decrease the counter variable, you use a negative <b>Step</b> value. When doing so, you must specify an end value that is less than the start value. In the following example, the counter variable <i>myNum</i> is decreased by 2 each time the loop repeats. When the loop is finished, the total is the sum of 16, 14, 12, 10, 8, 6, 4, and 2.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub NewTotal()
 &nbsp;&nbsp;&nbsp; Dim myNum, total
 &nbsp;&nbsp;&nbsp; For myNum = 16 To 2 Step -2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total = total + myNum
 &nbsp;&nbsp;&nbsp; Next
 &nbsp;&nbsp;&nbsp; MsgBox "The total is " &amp; total
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
You can exit any <b>For...Next</b> statement before the counter reaches its end value by using the <b>Exit For</b> statement. Because you usually want to exit only in certain situations, such as when an error occurs, you should use the <b>Exit For</b> statement in the True statement block of an <b>If...Then...Else</b> statement. If the condition is False, the loop runs as usual.</p>
<h3>VBScript Procedures</h3>
<h4>Kinds of procedures</h4>
<p>
In VBScript there are two kinds of procedures; the Sub procedure and the Function procedure.</p>
<p>
<b>Sub procedures</b></p>
<p>
A Sub procedure is a series of VBScript statements, enclosed by the <b>Sub</b> and <b>End Sub</b> statements, that performs actions but does not return a value. A Sub procedure can take arguments (constants, variables, or expressions that are passed by a calling procedure). If a Sub procedure has no arguments, its <b>Sub</b> statement must include an empty set of parentheses.</p>
<p>
The following Sub procedure uses two intrinsic, or built-in, VBScript functions, <b>InputBox</b> and <b>MsgBox</b>, to prompt a user for some information. It then displays the results of a calculation based on that information. The calculation is performed in a Function procedure created using VBScript. It is shown in the discussion of the Function procedure that follows.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub ConvertTemp()
 &nbsp;&nbsp; temp = InputBox("Please enter the temperature in degrees F.", 1)
 &nbsp;&nbsp; MsgBox "The temperature is " &amp; Celsius(temp) &amp; " degrees C."
 End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
<b>Function procedures</b></p>
<p>
A Function procedure is a series of VBScript statements enclosed by the <b>Function</b> and <b>End</b> <b>Function</b> statements. A Function procedure is similar to a Sub procedure, but it can also return a value. A Function procedure can take arguments (constants, variables, or expressions that are passed to it by a calling procedure). If a Function procedure has no arguments, its <b>Function</b> statement must include an empty set of parentheses. A Function returns a value by assigning a value to its name in one or more statements of the procedure. The return type of a Function is always a Variant.</p>
<p>
In the following example, the <b>Celsius</b> function calculates degrees Celsius from degrees Fahrenheit. When the function is called from the <b>ConvertTemp</b> Sub procedure, a variable containing the argument value is passed to the function. The result of the calculation is returned to the calling procedure and displayed in a message box.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Sub ConvertTemp()
 &nbsp;&nbsp;&nbsp; temp = InputBox("Please enter the temperature in degrees F.", 1)
 &nbsp;&nbsp;&nbsp; MsgBox "The temperature is " &amp; Celsius(temp) &amp; " degrees C."
 End Sub

 Function Celsius(fDegrees)
 &nbsp;&nbsp;&nbsp; Celsius = (fDegrees - 32) * 5 / 9
 End Function
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Declaring procedures</h4>
<p>
Because you need to define procedures before they are used, you should always put them at the beginning of the HEAD section of your HTML page. All subsequent code should also be in the HEAD section. Further, Function and Sub statements, like all other elements of the VBScript language, must be contained in paired &lt;SCRIPT LANGUAGE="VBScript"&gt;&lt;/SCRIPT&gt; tags to be properly recognized in HTML. In addition, comment tags (&lt;!-- and --&gt;) should surround the code inside the &lt;SCRIPT&gt; tag to ensure that it is not displayed in browsers that don't handle VBScript.</p>
<h4>Getting data into and out of procedures</h4>
<p>
Each piece of data is passed into your procedures using an argument. Arguments serve as placeholders for the data you want to pass into your procedure. When you create a procedure using either the <b>Sub</b> statement or the <b>Function</b> statement, parentheses must be included after the name of the procedure. All arguments are placed inside these parentheses, separated by commas. For example, in the following example, <i>fDegrees </i>is a placeholder for the value being passed into the <b>Celsius</b> function for conversion:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Function Celsius(fDegrees)
 &nbsp;&nbsp; Celsius = (fDegrees - 32) * 5 / 9
 End Function
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
You can name your arguments anything that is valid as a variable name.</p>
<p>
To get data out of a procedure, you must use a function. Remember, a Function procedure can return a value; a Sub procedure cannot.</p>
<h4>Using Sub and Function procedures in code</h4>
<p>
To use a function in your code, it must always be used on the right side of a variable assignment or in an expression. For example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Temp = Celsius(fDegrees)
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
or</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 MsgBox "The Celsius temperature is " &amp; Celsius(fDegrees) &amp; " degrees."
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
To call a Sub procedure from another procedure, you can just type the name of the procedure along with values for any required arguments, each separated by a comma. The <b>Call</b> statement is not required, but if you do use it, you must enclose any arguments in parentheses.</p>
<p>
The following example shows two calls to the <b>MyProc</b> procedure. One uses the <b>Call</b> statement in the code; the other does not. Both do exactly the same thing.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Call MyProc(firstarg, secondarg)
 MyProc firstarg, secondarg
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Notice that the parentheses are omitted in the call when the <b>Call</b> statement isn't used.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The current release supports only passing arguments by value (passing copies of the arguments). If you need to set values inside a Sub procedure, you must assign those values to variables defined outside of the procedure.</p>
<h2><a name="vbshtmluseinie"></a>Using VBScript in Internet Explorer 3.0</h2>
<h3>A Simple VBScript Page</h3>
<p>
With Microsoft Internet Explorer 3.0, you can view the page produced by the HTML code below. If you clicked the button on the page, you'd see Microsoft Visual Basic Scripting Edition in action.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;A Simple First Page&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub Button1_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Mirabile visu."
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;A Simple First Page&lt;/H3&gt;&lt;HR&gt;
&lt;FORM&gt;&lt;INPUT NAME="Button1" TYPE="BUTTON" VALUE="Click Here"&gt;&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
The result is a little underwhelming: you see a dialog box with a phrase in it (Latin for "wonderful to behold"). However, there's quite a bit going on.</p>
<p>
When Internet Explorer reads the page, it finds the &lt;SCRIPT&gt; tags, recognizes there is a piece of VBScript code and saves the code. Then when you click the button, Internet Explorer makes the connection between the button and the code, and runs the procedure.</p>
<p>
The Sub procedure in the &lt;SCRIPT&gt; tags is known as an event procedure. You'll notice that there are two parts to the procedure name: the name of the button, Button1 (from the NAME attribute in the &lt;INPUT&gt; tag), and an event name, OnClick; the two are joined together by an underscore. Anytime the button is clicked, Internet Explorer looks for and runs the corresponding event procedure, Button1_OnClick.</p>
<p>
Internet Explorer 3.0 defines the events available for form controls in "Scripting Object Model" in the ActiveX SDK, on the MSDN Library.</p>
<p>
Pages can use combinations of controls and procedures, too. A following section, VBScript and Forms, shows some simple interactions among controls.</p>
<h3>Other Ways to Attach Code to Events</h3>
<p>
You can attach VBScript code to events in two other ways, though the way you've already seen is probably the most general and simple.</p>
<p>
Internet Explorer 3.0 allows you to add short sections of inline code in the tag defining the control. For example, the following &lt;INPUT&gt; tag does precisely the same action as the previous code example when you click the button:</p>
<pre><code>&lt;INPUT NAME="Button1" TYPE="BUTTON"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VALUE="Click Here" OnClick='MsgBox "Mirabile visu."'&gt;
</code></pre>
<p>
Notice that the function call itself is in single quotes and the string for the <b>MsgBox</b> function is in double quotes. You can use multiple statements as long as you separate the statements with colons (:).</p>
<p>
You can also write a &lt;SCRIPT&gt; tag so that it applies only to a particular event for a specific control:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript" EVENT="OnClick" FOR="Button1"&gt;
&lt;!--
 &nbsp;&nbsp; MsgBox "Mirabile visu."
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Here, since the &lt;SCRIPT&gt; tag already specifies the event and the control, you don't use the <b>Sub</b> and <b>End</b> <b>Sub</b> statements.</p>
<h3>VBScript and Forms</h3>
<h4>Simple validation</h4>
<p>
You can use Visual Basic Scripting Edition to do much of the form processing that you'd normally need to do on a server. You can also do things that just can't be done on the server.</p>
<p>
Here's an example of simple client-side validation. The HTML code is for a text box and a button. If you use Microsoft Internet Explorer 3.0 to view the page produced by the code, you'd see a small text box with a button next to it.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Simple Validation&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub Submit_OnClick
  Dim TheForm
  Set TheForm = Document.ValidForm
  If IsNumeric(TheForm.Text1.Value) Then
 &nbsp;&nbsp; If TheForm.Text1.Value &lt; 1 Or TheForm.Text1.Value &gt; 10 Then
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Please enter a number between 1 and 10."
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Thank you."
 &nbsp;&nbsp; End If
  Else
 &nbsp;&nbsp; MsgBox "Please enter a numeric value."
  End If
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;Simple Validation&lt;/H3&gt;&lt;HR&gt;
&lt;FORM NAME="ValidForm"&gt;
Enter a value between 1 and 10:
&lt;INPUT NAME="Text1" TYPE="TEXT" SIZE="2"&gt;
&lt;INPUT NAME="Submit" TYPE="BUTTON" VALUE="Submit"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
The only difference between this and the "A Simple First Page" above is that the <b>Value</b> property of the text box is used to check the entered value. To get the <b>Value</b> property, however, the code has to qualify the reference to the name of the text box.</p>
<p>
You can always write out the full reference, Document.ValidForm.Text1. However, where you have multiple references to form controls you'll want to do what was done here. First, declare a variable. Then use the <b>Set</b> statement to assign the form to the variable <i>TheForm</i>. A regular assignment statement doesn't work here: you have to use <b>Set</b> to preserve the reference to an object.</p>
<h4>Using numeric values</h4>
<p>
Notice that the example directly tests the value against a number: it uses the <b>IsNumeric</b> function to make sure the string in the text box is a number. Although VBScript automatically converts strings and numbers as needed, it's always a good practice to test a user-entered value for its data subtype and to use conversion functions as necessary. In addition, when doing summation with text box values, convert the values explicitly to numbers since the plus sign (+ operator) represents both addition and string concatenation. For example, if <i>Text1</i> contained "1" and <i>Text2</i> contained "2" you'd see the following results:</p>
<pre><code>A = Text1.Value + Text2.Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' A is "12"
A = CDbl(Text1.Value) + Text2.Value&nbsp;&nbsp; ' A is 3
</code></pre>
<h4>Validating and passing data back to the server</h4>
<p>
The simple validation example uses a plain button control. If it used a <b>Submit</b> control, the example would never see the data to check it—everything would go immediately to the server. Avoiding the <b>Submit</b> control lets you check the data, but it doesn't submit it to the server. That requires an additional line of code:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub Submit_OnClick
  Dim TheForm
  Set TheForm = Document.ValidForm
  If IsNumeric(TheForm.Text1.Value) Then
 &nbsp;&nbsp; If TheForm.Text1.Value &lt; 1 Or TheForm.Text1.Value &gt; 10 Then
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Please enter a number between 1 and 10."
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Thank you."
 &nbsp;&nbsp;&nbsp;&nbsp; TheForm.Submit&nbsp;&nbsp; ' Data correct; send to server.
 &nbsp;&nbsp; End If
  Else
 &nbsp;&nbsp; MsgBox "Please enter a numeric value."
  End If
End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
To send the data to the server, the code invokes the <b>Submit</b> method on the form object when the data is correct. From there, the server handles the data just as it otherwise would—except that the data is correct before it gets there. You'll find complete information about the <b>Submit</b> method and other methods in "Scripting Object Model" in the ActiveX SDK, on the MSDN Library.</p>
<p>
So far, you've seen only the standard HTML &lt;FORM&gt; objects. Internet Explorer 3.0 also lets you exploit the full power of ActiveX controls and Java objects.</p>
<h3>Going Beyond Forms—Using Objects</h3>
<h4>Using objects</h4>
<p>
Whether you use an ActiveX control or a Java object, Microsoft Visual Basic Scripting Edition and Microsoft Internet Explorer 3.0 handle it the same way.</p>
<p>
You include an object using the &lt;OBJECT&gt; tags and set its initial property values using &lt;PARAM&gt; tags. If you're a Visual Basic programmer, you'll recognize that using the &lt;PARAM&gt; tags is just like setting initial properties for a control on a form. For example, the following set of &lt;OBJECT&gt; and &lt;PARAM&gt; tags adds the ActiveX Label control to a page:</p>
<pre><code>&lt;OBJECT
 &nbsp; classid="clsid:99B42120-6EC7-11CF-A6C7-00AA00A47DD2"
 &nbsp; id=lblActiveLbl
 &nbsp; width=250
 &nbsp; height=250
 &nbsp; align=left
 &nbsp; hspace=20
 &nbsp; vspace=0
&gt;
&lt;PARAM NAME="Angle" VALUE="90"&gt;
&lt;PARAM NAME="Alignment" VALUE="4"&gt;
&lt;PARAM NAME="BackStyle" VALUE="0"&gt;
&lt;PARAM NAME="Caption" VALUE="A Simple Desultory Label"&gt;
&lt;PARAM NAME="FontName" VALUE="Arial"&gt;
&lt;PARAM NAME="FontSize" VALUE="20"&gt;
&lt;PARAM NAME="FontBold" VALUE="1"&gt;
&lt;PARAM NAME="FrColor" VALUE="0"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
You can get properties, set properties, and invoke methods just as with any of the form controls. The following code, for example, includes &lt;FORM&gt; controls that you can use to manipulate two of the label control's properties:</p>
<pre><code>&lt;FORM NAME="LabelControls"&gt;
&lt;INPUT TYPE="TEXT" NAME="txtNewText" SIZE=25&gt;
&lt;INPUT TYPE="BUTTON" NAME="cmdChangeIt" VALUE="Change Text"&gt;
&lt;INPUT TYPE="BUTTON" NAME="cmdRotate" VALUE="Rotate Label"&gt;
&lt;/FORM&gt;
</code></pre>
<p>
With the form defined, an event procedure for the cmdChangeIt button changes the label text:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub cmdChangeIt_onClick
 &nbsp; Dim TheForm
 &nbsp; Set TheForm = Document.LabelControls
 &nbsp; lblActiveLbl.Caption = TheForm.txtNewText.Value
End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
The code qualifies references to controls and values inside the forms just as in the simple validation example.</p>
<p>
Several ActiveX controls are available from http://www.download.com/PC/Activex/. You can find information there, or on the control reference pages at <a href="http://microsoft.com/intdev/controls/ctrlref-f.htm">http://microsoft.com/intdev/controls/ctrlref-f.htm</a>, about the properties, methods, and events, as well as the class identifiers (CLSID) for the controls. You can find more information about the &lt;OBJECT&gt; tag on the Microsoft ActiveX Author's Guide and HTML Reference page at <a href="http://microsoft.com/workshop/author/newhtml/default.htm">http://microsoft.com/workshop/author/newhtml/default.htm.</a></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Previous releases of Internet Explorer 3.0 required braces ({}) around the <b>classid</b> attribute and did not conform to the World Wide Web Consortium specification. Using braces with the current release generates a "This page uses an outdated version of the &lt;OBJECT&gt; tag" message.</p>
<h3>Where to Go from Here</h3>
<p>
The fastest way to learn advanced VBScript techniques is to look at samples, lots and lots of samples. It doesn't hurt, either, to know the object model well.</p>
<p>
Here are some places to start:
<ul type=disc>
<li>
"Scripting Object Model" in the ActiveX SDK, on the MSDN Library.<br><br></li>
<li>
Floating frames examples: in a calculator, at <a href="http://www.microsoft.com/ie/most/howto/script.htm">http://www.microsoft.com/ie/most/howto/script.htm</a>; and in a hangman game, at http://microsoft.com/vbscript/us/vbssamp/hangman/difficulty.htm<br><br></li>
<li>
More ActiveX controls information and FAQ, available through the Programming page at <a href="http://www.microsoft.com/intdev/">http://www.microsoft.com/intdev/</a><br><br></li>
<li>
Examples of ActiveX components appear at http://www.download.com/PC/Activex/.</li>
</ul>
<p>
From the VBScript Web site (<a href="http://www.microsoft.com/vbscript/">http://www.microsoft.com/vbscript/</a>) check out the Samples page for a list of downloadable VBScript samples and the Related Links page for a list of sites using VBScript.</p>
<h3><a name="vbshtmlcodeconven"></a>VBScript Coding Conventions</h3>
<h4>What are coding conventions?</h4>
<p>
Coding conventions are suggestions that may help you write code using Microsoft Visual Basic Scripting Edition. Some of the things that coding conventions include are:
<ul type=disc>
<li>
Naming conventions for objects, variables, and procedures<br><br></li>
<li>
Commenting conventions<br><br></li>
<li>
Text formatting and indenting guidelines</li>
</ul>
<p>
The main reason for using a consistent set of coding conventions is to standardize the structure and coding style of a script or set of scripts so that you and others can easily read and understand the code.</p>
<p>
Using good coding conventions results in precise, readable, and unambiguous source code that is consistent with other language conventions and as intuitive as possible.</p>
<h4>Constant naming conventions</h4>
<p>
Constant names should be uppercase with underscores (_) between words. For example:</p>
<pre><code>&nbsp;USER_LIST_MAX
 NEW_LINE
</code></pre>
<h4>Variable naming conventions</h4>
<p>
For purposes of readability and consistency, use the prefixes listed in the Table 3, along with descriptive names for variables in your VBScript.</p>
<p class=label>
<b>Table 3. Conventional Prefixes for Variables in VBScript</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=32%><b>Subtype</b></td>
<td width=25%><b>Prefix</b></td>
<td width=43%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=32%>Boolean</td>
<td width=25%>bln</td>
<td width=43%>blnFound</td>
</tr>
<tr valign=top>
<td width=32%>Byte</td>
<td width=25%>byt</td>
<td width=43%>bytRasterData</td>
</tr>
<tr valign=top>
<td width=32%>Date (Time)</td>
<td width=25%>dtm</td>
<td width=43%>dtmStart</td>
</tr>
<tr valign=top>
<td width=32%>Double</td>
<td width=25%>dbl</td>
<td width=43%>dblTolerance</td>
</tr>
<tr valign=top>
<td width=32%>Error</td>
<td width=25%>err</td>
<td width=43%>errOrderNum</td>
</tr>
<tr valign=top>
<td width=32%>Integer</td>
<td width=25%>int</td>
<td width=43%>intQuantity</td>
</tr>
<tr valign=top>
<td width=32%>Long</td>
<td width=25%>lng</td>
<td width=43%>lngDistance</td>
</tr>
<tr valign=top>
<td width=32%>Object</td>
<td width=25%>obj</td>
<td width=43%>objCurrent</td>
</tr>
<tr valign=top>
<td width=32%>Single</td>
<td width=25%>sng</td>
<td width=43%>sngAverage</td>
</tr>
<tr valign=top>
<td width=32%>String</td>
<td width=25%>str</td>
<td width=43%>strFirstName</td>
</tr>
</table><br>
<h4>Variable scope</h4>
<p>
Variables should always be defined with the smallest scope possible. Table 4 gives the scope for VBScript variables.</p>
<p class=label>
<b>Table 4. Variable Scope</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>Scope</b></td>
<td width=33%><b>Where variable Is declared</b></td>
<td width=34%><b>Visibility</b></td>
</tr>
<tr valign=top>
<td width=33%>Procedure-level</td>
<td width=33%>Event, Function, or Sub procedure</td>
<td width=34%>Visible in the procedure in which it is declared.</td>
</tr>
<tr valign=top>
<td width=33%>Script-level</td>
<td width=33%>HEAD section of an HTML page, outside any procedure</td>
<td width=34%>Visible in every procedure in the script.</td>
</tr>
</table><br>
<h4>Variable scope prefixes</h4>
<p>
As script size grows, so does the value of being able to quickly differentiate the scope of variables. A one-letter scope prefix preceding the type prefix provides this, without unduly increasing the size of variable names. See Table 5.</p>
<p class=label>
<b>Table 5. Variable Scope Prefixes</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=34%><b>Scope</b></td>
<td width=24%><b>Prefix</b></td>
<td width=42%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=34%>Procedure-level</td>
<td width=24%>None</td>
<td width=42%>dblVelocity</td>
</tr>
<tr valign=top>
<td width=34%>Script-level</td>
<td width=24%>s</td>
<td width=42%>sblnCalcInProgress</td>
</tr>
</table><br>
<h4>Descriptive variable and procedure names</h4>
<p>
The body of a variable or procedure name should use mixed case and should be as complete as necessary to describe its purpose. In addition, procedure names should begin with a verb, such as <b>InitNameArray</b> or <b>CloseDialog</b>.</p>
<p>
For frequently used terms or long terms, standard abbreviations are recommended to help keep name length reasonable. In general, variable names greater than 32 characters can be difficult to read.</p>
<p>
When using abbreviations, make sure they are consistent throughout the entire script. Randomly switching between Cnt and Count within a script ,or set of scripts, may lead to confusion.</p>
<h4>Object naming conventions</h4>
<p>
Table 6 lists recommended conventions for the various objects you may encounter while programming VBScript.</p>
<p class=label>
<b>Table 6. Object Naming Conventions</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=46%><b>Object type</b></td>
<td width=20%><b>Prefix</b></td>
<td width=34%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=46%>3D Panel</td>
<td width=20%>pnl</td>
<td width=34%>pnlGroup</td>
</tr>
<tr valign=top>
<td width=46%>Animated button</td>
<td width=20%>ani</td>
<td width=34%>aniMailBox</td>
</tr>
<tr valign=top>
<td width=46%>Check box</td>
<td width=20%>chk</td>
<td width=34%>chkReadOnly</td>
</tr>
<tr valign=top>
<td width=46%>Combo box, drop-down list box</td>
<td width=20%>cbo</td>
<td width=34%>cboEnglish</td>
</tr>
<tr valign=top>
<td width=46%>Command button</td>
<td width=20%>cmd</td>
<td width=34%>cmdExit</td>
</tr>
<tr valign=top>
<td width=46%>Common dialog</td>
<td width=20%>dlg</td>
<td width=34%>dlgFileOpen</td>
</tr>
<tr valign=top>
<td width=46%>Frame</td>
<td width=20%>fra</td>
<td width=34%>fraLanguage</td>
</tr>
<tr valign=top>
<td width=46%>Horizontal scroll bar</td>
<td width=20%>hsb</td>
<td width=34%>hsbVolume</td>
</tr>
<tr valign=top>
<td width=46%>Image</td>
<td width=20%>img</td>
<td width=34%>imgIcon</td>
</tr>
<tr valign=top>
<td width=46%>Label</td>
<td width=20%>lbll</td>
<td width=34%>blHelpMessage</td>
</tr>
<tr valign=top>
<td width=46%>Line</td>
<td width=20%>lin</td>
<td width=34%>linVertical</td>
</tr>
<tr valign=top>
<td width=46%>List box</td>
<td width=20%>lst</td>
<td width=34%>stPolicyCodes</td>
</tr>
<tr valign=top>
<td width=46%>Spin</td>
<td width=20%>spn</td>
<td width=34%>spnPages</td>
</tr>
<tr valign=top>
<td width=46%>Text box</td>
<td width=20%>txt</td>
<td width=34%>txtLastName</td>
</tr>
<tr valign=top>
<td width=46%>Vertical scroll bar</td>
<td width=20%>vsb</td>
<td width=34%>vsb</td>
</tr>
<tr valign=top>
<td width=46%>RateSlider</td>
<td width=20%>sld</td>
<td width=34%>sldScale</td>
</tr>
</table><br>
<h4>Code commenting conventions</h4>
<p>
All procedures should begin with a brief comment describing what they do. This description should not describe the implementation details (how it does it) because these often change over time and may result in unnecessary comment maintenance work, or worse, erroneous comments. The code itself and any necessary inline comments describe the implementation.</p>
<p>
Arguments passed to a procedure should be described when their purpose is not obvious and when the procedure expects the arguments to be in a specific range. Function return values and other variables that are changed by the procedure, especially through reference arguments, should also be described at the beginning of each procedure.</p>
<p>
Procedure header comments should include the section headings listed in Table 7. For examples, see the section "Formatting Your Code" that follows.</p>
<p class=label>
<b>Table 7. Section Headings and Comment Contents</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=24%><b>Section heading</b></td>
<td width=76%><b>Comment contents</b></td>
</tr>
<tr valign=top>
<td width=24%>Purpose</td>
<td width=76%>What the procedure does (not how).</td>
</tr>
<tr valign=top>
<td width=24%>Assumptions</td>
<td width=76%>List of any external variable, control, or other element whose state affects this procedure.</td>
</tr>
<tr valign=top>
<td width=24%>Effects</td>
<td width=76%>List of the procedure's effect on each external variable, control, or other element.</td>
</tr>
<tr valign=top>
<td width=24%>Inputs</td>
<td width=76%>Explanation of each argument that is not obvious. Each argument should be on a separate line with inline comments.</td>
</tr>
<tr valign=top>
<td width=24%>Return Values</td>
<td width=76%>Explanation of the value returned.</td>
</tr>
</table><br>
<p>
Remember the following points:
<ul type=disc>
<li>
Every important variable declaration should include an inline comment describing the use of the variable being declared.<br><br></li>
<li>
Variables, controls, and procedures should be named clearly enough that inline comments are only needed for complex implementation details.<br><br></li>
<li>
At the beginning of your script, you should include an overview that describes the script, enumerating objects, procedures, algorithms, dialog boxes, and other system dependencies. Sometimes a piece of pseudocode describing the algorithm can be helpful.</li>
</ul>
<h4>Formatting your code</h4>
<p>
Screen space should be conserved as much as possible while still allowing code formatting to reflect logic structure and nesting. Here are a few pointers:
<ul type=disc>
<li>
Standard nested blocks should be indented four spaces.<br><br></li>
<li>
The overview comments of a procedure should be indented one space.<br><br></li>
<li>
The highest level statements that follow the overview comments should be indented four spaces, with each nested block indented an additional four spaces. For example:<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 '*********************************************************
 ' Purpose:&nbsp; Locates the first occurrence of a specified user
 '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in the UserList array.
 ' Inputs:&nbsp;&nbsp; strUserList():&nbsp;&nbsp; the list of users to be searched.
 '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strTargetUser:&nbsp;&nbsp; the name of the user to search for.
 ' Returns:&nbsp; The index of the first occurrence of the strTargetUser
 '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in the strUserList array.
 '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the target user is not found, return -1.
 '*********************************************************
 Function intFindUser (strUserList(), strTargetUser)
 &nbsp;&nbsp;&nbsp; Dim i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Loop counter.
 &nbsp;&nbsp;&nbsp; Dim blnFound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Target found flag.
 &nbsp;&nbsp;&nbsp; intFindUser = -1
 &nbsp;&nbsp;&nbsp; i = 0
 &nbsp;&nbsp;&nbsp; Do While i &lt;= Ubound(strUserList) and Not blnFound
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If strUserList(i) = strTargetUser Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blnFound = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intFindUser = i
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp; Loop
 End Function
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<h4>Formatting your pages</h4>
<p>
Examples on the <i>Visual Basic Scripting</i> Web site use the following template:</p>
<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF/DTD HTML//EN"&gt;
&lt;!-- Recommended template for
 &nbsp;&nbsp;&nbsp; Microsoft Visual Basic Scripting-Enabled Pages --&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; &lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 &nbsp; Function CanDeliver (Dt)
 &nbsp;&nbsp;&nbsp;&nbsp; CanDeliver = (Cdate(Dt) - Now()) &gt; 2
 &nbsp; End Function
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FONT FACE=ARIAL SIZE=2&gt; &lt;!-- global default --&gt;
&lt;!-- Static page content goes here. --&gt;
&lt;/FONT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
The template has the following features:
<ul type=disc>
<li>
VBScript procedures, including event procedures for controls, appear in the &lt;HEAD&gt; section of the page. This keeps all of the code in one place.<br><br></li>
<li>
HTML start and end comment tags (&lt;!-- and --&gt;) surround the code to hide it from browsers that can't handle the &lt;SCRIPT&gt; tag.<br><br></li>
<li>
&lt;HTML&gt;, &lt;HEAD&gt;, &lt;TITLE&gt;, and &lt;BODY&gt; tags are used to create a standard HTML page.</li>
</ul>
<p>
In addition, many sites use &lt;FORM&gt; tags around groups of &lt;INPUT&gt; elements to make controls viewable in all browsers.</p>
<h2><a name="vbshtmlappenconv"></a>Appendix: Conversion Functions</h2>
<h3>Asc Function</h3>
<p>
Returns the American National Standards Institute (ANSI) character code corresponding to the first letter in a string.</p>
<h4>Syntax</h4>
<p>
<b>Asc</b><i>(string)</i></p>
<p>
The string argument is any valid string expression. If the string contains no characters, a run-time error occurs.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Another function (<b>AscB</b>) is provided for use with byte data contained in a string. Instead of returning the character code for the first character, <b>AscB</b> returns the first byte. <b>AscW</b> is provided for 32-bit platforms that use Unicode characters. It returns the Unicode (wide) character code, thereby avoiding the conversion from Unicode to ANSI.</p>
<h3>CBool Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Boolean.</p>
<h4>Syntax</h4>
<p>
<b>CBool</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
If expression is zero, False is returned; otherwise, True is returned. If expression can't be interpreted as a numeric value, a run-time error occurs.</p>
<h3>CByte Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Byte.</p>
<h4>Syntax</h4>
<p>
<b>CByte</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CByte</b> to force byte arithmetic in cases where currency, single-precision, double-precision, or integer arithmetic normally would occur.</p>
<p>
You should use the <b>CByte</b> function instead of <b>Val</b> to provide internationally aware conversions from any other data type to a Byte subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.</p>
<p>
If expression lies outside the acceptable range for the Byte subtype, an error occurs.</p>
<h3>CDate Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Date.</p>
<h4>Syntax</h4>
<p>
<b>CDate</b><i>(date)</i></p>
<p>
The date argument is any valid date expression.</p>
<h4>Remarks</h4>
<p>
Use the <b>IsDate</b> function to determine if date can be converted to a date or time. <b>CDate</b> recognizes date and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.</p>
<p>
<b>CDate</b> recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.</p>
<h3>CDbl Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Double.</p>
<h4>Syntax</h4>
<p>
<b>CDbl</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CDbl</b> or <b>CSng</b> to force double- or single-precision arithmetic in cases where currency or integer arithmetic normally would occur.</p>
<p>
You should use the <b>CDbl</b> function instead of <b>Val</b> to provide internationally aware conversions from any other data type to a Double subtype. For example, different decimal separators and thousands separators are properly recognized depending on the locale setting of your system.</p>
<h3>Chr Function</h3>
<p>
Returns the character associated with the specified ANSI character code.</p>
<h4>Syntax</h4>
<p>
<b>Chr</b><i>(charcode)</i></p>
<p>
The <i>charcode</i> argument is a number that identifies a character.</p>
<h4>Remarks</h4>
<p>
Numbers from 0 to 31 are the same as standard, nonprintable ASCII codes. For example, <b>Chr(</b>10<b>)</b> returns a linefeed character.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Another function (<b>ChrB</b>) is provided for use with byte data contained in a string. Instead of returning a character, which may be one or two bytes, <b>ChrB</b> always returns a single byte. <b>ChrW</b> is provided for 32-bit platforms that use Unicode characters. Its argument is a Unicode (wide) character code, thereby avoiding the conversion from ANSI to Unicode.</p>
<h3>CInt Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Integer.</p>
<h4>Syntax</h4>
<p>
<b>CInt</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CInt</b> or <b>CLng</b> to force integer arithmetic in cases where currency, single-precision, or double-precision arithmetic normally would occur.</p>
<p>
You should use the <b>CInt</b> function instead of <b>Val</b> to provide internationally aware conversions from any other data type to an Integer subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.</p>
<p>
If <i>expression</i> lies outside the acceptable range for the Integer subtype, an error occurs.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<b>CInt</b> differs from the <b>Fix</b> and <b>Int</b> functions, which truncate, rather than round, the fractional part of a number. When the fractional part is exactly 0.5, the <b>CInt</b> function always rounds it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2.</p>
<h3>CLng Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Long.</p>
<h4>Syntax</h4>
<p>
<b>CLng</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the subtype conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CInt</b> or <b>CLng</b> to force integer arithmetic in cases where currency, single-precision, or double-precision arithmetic normally would occur. You should use the <b>CLng</b> function instead of <b>Val</b> to provide internationally aware conversions from any other data type to a Long subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.</p>
<p>
If <i>expression</i> lies outside the acceptable range for the Long subtype, an error occurs.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<b>CLng</b> differs from the <b>Fix</b> and <b>Int</b> functions, which truncate, rather than round, the fractional part of a number. When the fractional part is exactly 0.5, the <b>CLng</b> function always rounds it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2.</p>
<h3>CSng Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype Single.</p>
<h4>Syntax</h4>
<p>
<b>CSng</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the data type conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CDbl</b> or <b>CSng</b> to force double- or single-precision arithmetic in cases where currency or integer arithmetic normally would occur. You should use the <b>CSng</b> function instead of <b>Val</b> to provide internationally aware conversions from any other data type to a Single subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system, as are different thousand separators.</p>
<p>
If <i>expression</i> lies outside the acceptable range for the Single subtype, an error occurs.</p>
<h3>CStr Function</h3>
<p>
Returns an expression that has been converted to a Variant of subtype String.</p>
<h4>Syntax</h4>
<p>
<b>CStr</b><i>(expression)</i></p>
<p>
The expression argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
In general, you can document your code using the data type conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <b>CStr</b> to force the result to be expressed as a String. You should use the <b>CStr</b> function instead of <b>Str</b> to provide internationally aware conversions from any other data type to a String subtype. For example, different decimal separators are properly recognized depending on the locale setting of your system.</p>
<p>
The data in <i>expression</i> determines what is returned according to Table 8.</p>
<p class=label>
<b>Table 8. Expression Types</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=24%><b>If expression is</b></td>
<td width=76%><b>CStr returns</b></td>
</tr>
<tr valign=top>
<td width=24%>Boolean</td>
<td width=76%>A String containing True or False. </td>
</tr>
<tr valign=top>
<td width=24%>Date</td>
<td width=76%>A String containing a date in the short-date format of your system.</td>
</tr>
<tr valign=top>
<td width=24%>Null</td>
<td width=76%>A run-time error.</td>
</tr>
<tr valign=top>
<td width=24%>Empty</td>
<td width=76%>A zero-length String ("").</td>
</tr>
<tr valign=top>
<td width=24%>Error</td>
<td width=76%>A String containing the word Error followed by the error number.</td>
</tr>
<tr valign=top>
<td width=24%>Other numeric</td>
<td width=76%>A String containing the number.</td>
</tr>
</table><br>
<h3>Hex Function</h3>
<p>
Returns a string representing the hexadecimal value of a number.</p>
<h4>Syntax</h4>
<p>
<b>Hex</b><i>(number)</i></p>
<p>
The number argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
If <i>number</i> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</p>
<p class=label>
<b>Table 9. Number<i> </i>Argument and Hex Returns</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=38%><b>If <i>number</i> is</b></td>
<td width=62%><b>Hex returns</b></td>
</tr>
<tr valign=top>
<td width=38%>Null</td>
<td width=62%>Null</td>
</tr>
<tr valign=top>
<td width=38%>Empty</td>
<td width=62%>Zero (0).</td>
</tr>
<tr valign=top>
<td width=38%>Any other number</td>
<td width=62%>Up to eight hexadecimal characters.</td>
</tr>
</table><br>
<p>
You can represent hexadecimal numbers directly by preceding numbers in the proper range with <i>&amp;H</i>. For example, &amp;H10 represents decimal 16 in hexadecimal notation.</p>
<h3>Oct Function</h3>
<p>
Returns a string representing the octal value of a number.</p>
<h4>Syntax</h4>
<p>
<b>Oct</b><i>(number)</i></p>
<p>
The number argument is any valid expression.</p>
<h4>Remarks</h4>
<p>
If <i>number</i> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</p>
<p class=label>
<b>Table 10. Number Argument and Oct Returns</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=30%><b>If <i>number</i> is</b></td>
<td width=70%><b>Oct returns</b></td>
</tr>
<tr valign=top>
<td width=30%>Null</td>
<td width=70%>Null</td>
</tr>
<tr valign=top>
<td width=30%>Empty</td>
<td width=70%>Zero (0).</td>
</tr>
<tr valign=top>
<td width=30%>Any other number</td>
<td width=70%>Up to 11 octal characters.</td>
</tr>
</table><br>
<p>
You can represent octal numbers directly by preceding numbers in the proper range with <i>&amp;O</i>. For example, &amp;O10 is the octal notation for decimal 8.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating 16-Bit and 32-Bit Screen Savers with Visual Basic</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ss101"></a></sup>Creating 16-Bit and 32-Bit Screen Savers with Visual Basic</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
June 29, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4301">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the 16-bit and 32-bit files in the ScrSaver sample application.</a></p>
<h2>Abstract</h2>
<p>
This article describes how to create 16-bit and 32-bit screen savers for Microsoft® Windows® version 3.1, Windows NT™, or Windows 95 using Visual Basic® version 4.0. The ScrSaver sample that accompanies this article uses a moving picture box to create a screen saver. The reader is assumed to have passed Microsoft Certification in Microsoft Visual Basic for Windows version 3.0 or have equivalent knowledge in making Windows API calls from Visual Basic.</p>
<h2>Introduction</h2>
<p>
Creating a screen saver is not a useful activity for most programmers. The technical information can rarely be reused and there seems to be no practical business need. It is an ego trip. There, now that I've said it, we can get on with creating a screen saver that does whatever you—or your boss—want. I have added a practical twist to the screen saver by enabling it to be an OLE server, an interesting enhancement that gives it a practical use.</p>
<p>
If you want to create a screen saver using an MFC framework, read Nigel Thompson's <a href="msdn_scrnsave.htm">"Creating 32-Bit Screen Savers with Visual C++ and MFC."</a> But what if you want to use Visual Basic® to create your masterpiece? At first glance, it looks tough because you cannot link in Visual Basic to libraries such as the SCRNSAVE library in the Win32® Software Development Kit (SDK). </p>
<p>
A more in-depth look at the Win32 SDK documentation reveals that we also apparently need to export certain functions from our application in order for it to be installed and run from the Control Panel desktop applet. This all sounds like it may be impossible to do from Visual Basic 4.0.</p>
<p>
Well, as it turns out, we do not need to use the SCRNSAVE library at all. Creating a screen saver is simply a matter of creating a regular application that:
<ul type=disc>
<li>
Has some command-line parsing. <br><br></li>
<li>
Assigns a special application title and window style. <br><br></li>
<li>
Makes some application programming interface (API) calls when started.<br><br></li>
<li>
Detects user input.<br><br></li>
<li>
Has .SCR as its file extension.<br><br></li>
<li>
Has a configuration dialog box for the screen saver.</li>
</ul>
<p>
Given those few simple requirements, creating a screen saver with Visual Basic does not seem to be such a tough job after all, does it?</p>
<h2>Creating the BASIC Framework</h2>
<p>
Yes, that's <i>BASIC</i> as in "Beginners All-purpose Symbolic Instruction Code," not <i>basic </i>as in "fundamental." Instead of writing out the procedures for you, I will outline the steps you need to take to fulfill the requirements listed in the previous section for creating a screen saver application. I will design the application around "developer-protected" objects. (A real object is compiler-protected.) </p>
<p>
The first object, <b>MyApp</b>, is inherited from the <b>App </b>object in Visual Basic. The second object employs a user-defined data type (UDT) called <b>udtScreenSaverConfig</b> and handles all the information regarding the screen-saver configuration. The third object, <b>frmScreenSaver</b>, handles the actual display of the screen saver and queries the <b>udtScreenSaverConfig </b>object for information. The application itself can be viewed as a fourth object, <b>AppScreenSaver</b>, which connects all of these parts together. These relationships are illustrated in Figure 1, using Booch notation (see the Bibliography listing for an explanation of Booch notation). </p>
<p>
<img src="ss101_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Logical objects of the ScrSaver project </b></p>
<p>
I will describe these objects with one or two sample procedures (either methods or properties) and leave the reader to examine the full implementation in the associated samples. We will start with <b>MyApp</b> because it is used by the other objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the C++ world, objects and their methods and properties are represented by <b>Object::Property</b> or <b>Object::Method</b>. This syntax cannot be implemented with Visual Basic products. Instead, I used the form <b>Object_Property</b> or <b>Object_Method</b>.</p>
<h3>The MyApp Object</h3>
<p>
The <b>MyApp</b> object inherits information from the <b>App</b> object in Visual Basic. The <b>MyApp</b> object is an expansion of the properties of <b>App</b>, which can be used in all projects. Table 1 shows some public properties that <b>MyApp</b> can have.</p>
<p class=label>
<b>Table 1. Properties and Methods of the MyApp Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Property or Method</b></td>
<td class=label width=77%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=23%><b>INIFile</b></td>
<td width=77%>Location of .INI file for application. That is, the value of <b>App.ExeName</b> with ".INI" added at the end of the string.</td>
</tr>
<tr valign=top>
<td width=23%><b>About</b></td>
<td width=77%>Information about the application in a message box.</td>
</tr>
<tr valign=top>
<td width=23%><b>Init</b></td>
<td width=77%>Initializes <b>MyApp</b>.</td>
</tr>
<tr valign=top>
<td width=23%><b>SysInfo</b></td>
<td width=77%>Information about the system in a message box.</td>
</tr>
<tr valign=top>
<td width=23%><b>GetSectionParm</b></td>
<td width=77%>Returns the value of the specified parameter in a section of <b>INIFile</b>.</td>
</tr>
<tr valign=top>
<td width=23%><b>PutSectionParm</b></td>
<td width=77%>Writes the value of the specified parameter in a section of <b>INIFile</b>.</td>
</tr>
<tr valign=top>
<td width=23%><b>GetParm</b></td>
<td width=77%>Returns the value of the specified parameter in the [INIT] section of <b>INIFile</b>.</td>
</tr>
<tr valign=top>
<td width=23%><b>PutParm</b></td>
<td width=77%>Writes the value of the specified parameter in the [INIT] section of <b>INIFile</b>.</td>
</tr>
</table><br>
<p>
The <b>MyApp</b> object's code is kept in the <b>MYAPP</b> module file and may be copied as a module from project to project. I use a message box instead of additional forms in <b>MyApp_About</b> and <b>MyApp_SysInfo</b> to keep the number of files and amount of code smaller.</p>
<h3>The udtScreenSaverConfig Object </h3>
<p>
The <b>udtScreenSaverConfig</b> object is based on a public UDT of the same name. When a UDT is used, the object may have multiple instances with each instance having its own dimensioned space. The UDT is an argument to all of the procedures of the object because it contains all the data about the object. Table 2 shows some public properties that this object can have.</p>
<p class=label>
<b>Table 2. Public Properties of the udtScreenSaverConfig Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Property</b></td>
<td class=label width=85%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=15%><b>Get</b></td>
<td width=85%>Retrieves values from the associated .INI file (uses <b>MyApp_GetParm</b>). </td>
</tr>
<tr valign=top>
<td width=15%><b>Write</b></td>
<td width=85%>Writes values to the associated .INI file (uses <b>MyApp_PutParm</b>). </td>
</tr>
<tr valign=top>
<td width=15%><b>Edit</b></td>
<td width=85%>Displays the values on the <b>frmudtScreenSaverConfig</b> form. </td>
</tr>
<tr valign=top>
<td width=15%><b>Init</b></td>
<td width=85%>Sets the default values of the UDT. </td>
</tr>
</table><br>
<p>
The <b>udtScreenSaverConfig</b> object's code is kept in the <b>UDTSSC</b> module file and the <b>FRMUSSC</b> form. This object is Visual Basic–specific and not usable in other Visual Basic for Applications products.</p>
<h3>The frmScreenSaver Object</h3>
<p>
The <b>frmScreenSaver </b>object is based on a form of the same name and not on a public UDT. The form may contain a private UDT, as it does in this case. This object is a single-instance object that is created when the form is referenced, and does not expose the UDT. The <b>frmScreenSaver.Form_Load</b> procedure serves as the initialization of the instance and uses <b>udtScreenSaverConfig_Get</b>. The <b>frmScreenSaver.Form_Unload</b> procedure serves as the destroyer of the instance.</p>
<p>
The <b>frmScreenSaver</b> object has one public component, <b>frmScreenSaver_Init</b>. The <b>frmScreenSaver_Init </b>procedure starts the screen saver. The controls on a form should never be referenced directly if the form is part of an object, except by procedures that are part of the object (none in this case). This object contains a second form, <b>frmScreenSaverPassword</b>, which adds password protection to the screen saver.</p>
<p>
The <b>frmScreenSaver</b> object consists of FRMSS.FRM and FRMSSPW.FRM. </p>
<h3>The AppScreenSaver Object</h3>
<p>
The <b>AppScreenSaver </b>object connects the above objects into an application. Instances of each object are created by <b>AppScreenSaver</b>. The only public procedure of this object is <b>AppScreenSaver_Init</b>, which is called from the startup <b>Main</b> subroutine.</p>
<h2>Details of the Objects</h2>
<p>
Before we dive into the details of the objects, we should glance quickly at Figure 2, which depicts the relationships between the physical files and the logical objects and shows the critical procedure calls between the files. </p>
<p>
<img src="ss101_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Physical structure of the ScrSaver project </b></p>
<h3>Details of the udtScreenSaverConfig Object</h3>
<p>
The <b>udtScreenSaverConfig </b>object contains all of the configuration information about the screen saver. For our sample, we will assume that the screen saver will display an image on the screen that will move back and forth. The information needed is stored in a UDT called <b>udtScreenSaverConfig</b>, which I define as follows:</p>
<pre><code>Type udtScreenSaverConfig
 &nbsp; BackgroundImageFileName as String&nbsp; 'May be Null
 &nbsp; BackgroundImageColor as Long 'May be 0
 &nbsp; MovingImageFileName as String 'May be Null
 &nbsp; ImageSpeed as Integer 'Min 1
 &nbsp; ImageBehaviour as Integer
 &nbsp; PassWord as String
End Type
</code></pre>
<p>
This information is read and written to <b>MyApp_INIFile</b> by <b>MyApp_GetParm</b> and <b>MyApp_PutParm</b>. The code is trivial, but the following code sample shows a private procedure in the <b>udtScreenSaverConfig </b>object. The <b>Validate</b> procedure verifies that the values are correct. Because this procedure is private, there is no need to prefix it with the object name.</p>
<pre><code>Sub udtScreenSaverConfig_Get (MyUDT as udtScreenSaverConfig)
 &nbsp; MyUDT. BackgroundImageFileName = MyApp_GetParm ("BackgroundImageFileName")
 &nbsp; MyUDT. BackgroundImageColor = MyApp_GetParm ("BackgroundImageColor")
 &nbsp; MyUDT. MovingImageFileName = MyApp_GetParm ("MovingImageFileName")
 &nbsp; MyUDT. ImageSpeed = Val(MyApp_GetParm ("ImageSpeed"))
 &nbsp; MyUDT. ImageBehaviour = Val(MyApp_GetParm ("ImageBehaviour"))
 &nbsp; MyUDT. PassWord = MyApp_GetParm ("PassWord")
 &nbsp; Validate MyUDT&nbsp;&nbsp; 'This is a PRIVATE procedure.
End Sub
</code></pre>
<p>
A second procedure, <b>udtScreenSaverConfig_Edit</b>, requires a little explanation. This procedure must display a form with the information passed in the UDT, then update the UDT if needed (the user could cancel). The trick is to store the UDT data in the module temporarily while the form loads and the UDT data is read to the form. When the user clicks OK, the data is again stored temporarily in the module. This approach makes the module strictly independent of the form, allowing other forms to use the same module without any code changes. The code is shown below.</p>
<pre><code>Sub udtScreenSaverConfig_Edit (MyUDT as udtScreenSaverConfig, Aform as Form)
 &nbsp; udtScreenSaverConfig_fCacheUDT UDT
 &nbsp; Aform.Show 1 'Modal: Any form may be used.
 &nbsp; udtScreenSaverConfig_fRecoverUDT UDT
 &nbsp; Validate MyUDT&nbsp;&nbsp; 'This is a PRIVATE procedure
End Sub
</code></pre>
<p>
We have two procedures that I call <i>friends</i>: <b>udtScreenSaverConfig_fRecoverUDT</b> and <b>udtScreenSaverConfig_fCacheUDT</b>. A <i>friend</i> procedure must be declared as public in Visual Basic so that procedures in other modules can call it, but it is not intended to be called by <i>any</i> procedure. The lower case <i>f</i> indicates that it <i>is</i> a friend (the developer must protect friends instead of the compiler protecting them). The code for these two friend procedures is simple and is shown below.</p>
<pre><code>Sub udtScreenSaverConfig_fCacheUDT(MyUDT as udtScreenSaverConfig)
localUDT = MyUDT&nbsp;&nbsp; 'localUDT is DIM as udtScreenSaverConfig in Declarations
End Sub
Sub udtScreenSaverConfig_fRecoverUDT(MyUDT as udtScreenSaverConfig)
MyUDT = localUDT 'localUDT is DIM as udtScreenSaverConfig in Declarations
End Sub
</code></pre>
<p>
To tie these procedures together, we must examine the <b>Form_Load</b> event and the <b>pbOK_Click</b> event on the form. <b>Form_Load</b> calls <b>udtScreenSaverConfig_fRecoverUDT</b> to retrieve the values of the UDT and then fill the controls on the form. <b>pbOK_Click </b>retrieves the values of the controls and then calls <b>udtScreenSaverConfig_fCacheUDT</b>, so the data can be retrieved after the form unloads. Figure 3 shows the UDT data movement, again using Booch notation.</p>
<p>
<img src="ss101_3.gif" border=0></p>
<p class=label>
<b>Figure 3. UDT data movement in udtScreenSaverConfig_Edit </b></p>
<h3>Details of the frmScreenSaver Object</h3>
<p>
The <b>frmScreenSaver </b>object displays a form that is the screen saver. The activity that the screen saver performs is immaterial to the reader. All screen savers use basically the same style of window—a form that is the full size of the screen, has no borders or caption, has no visible mouse, and is on top of all the other windows. This window exists so long as the user does not touch the mouse or hit a key.</p>
<p>
The <b>frmScreenSaver</b> object has a single public procedure, <b>frmScreenSaver_Init</b>. This procedure, the properties of the <b>frmScreenSaver</b> form, and API calls to <b>SetWindowPos</b> and <b>SetCursor</b> are needed to create the screen saver's window style. </p>
<p>
The <b>frmScreenSaver_Init</b> procedure shows the <b>frmScreenSaver</b> form modal. The <b>frmScreenSaver</b> properties are set as shown below.</p>
<pre><code>&nbsp;&nbsp;&nbsp;BorderStyle&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp; 0&nbsp; 'None
 &nbsp; ControlBox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp; 0&nbsp; 'False&nbsp; 
 &nbsp; MaxButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp; 0&nbsp; 'False
 &nbsp; MinButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp; 0&nbsp; 'False
 &nbsp; WindowState&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp; 2&nbsp; 'Maximized
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>Caption</b> property is set to "" and does not appear in the saved form. (If it is there, delete the text.) </p>
<p>
The calls to <b>SetWindowPos</b> (on top of other windows) and <b>SetCursor</b> (no cursor) are done in <b>frmScreenSaver.Form_Load</b>. Examine the sample for further details.</p>
<h4>Destroying the frmScreenSaver Object</h4>
<p>
The instance of the <b>frmScreenSaver</b> object must be destroyed upon any user input. This is done by calling <b>pDestroy</b> when any of the following events occur:
<ul type=disc>
<li>
Form_Click<br><br></li>
<li>
Form_DblClick<br><br></li>
<li>
Form_KeyDown<br><br></li>
<li>
Form_KeyPress<br><br></li>
<li>
Form_MouseDown<br><br></li>
<li>
Form_MouseMove</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>Form_MouseMove</b> event requires special handling. Many mice generate small random movements due to vibrations. To prevent accidental termination of the screen saver, some minor or slow movement of the mouse must be permitted. Examine the sample code for further details. </p>
<p>
The <b>Destroy</b> procedure does whatever activities are needed before the screen saver terminates. In our sample application, the password is checked, the cursor is restored, and the form is unloaded. Because the events above are not mutually exclusive, we may have multiple calls to <b>Destroy</b>, which can create errors. (For example, if you make three attempts to <b>Unload</b> the same form, the first one will succeed and the subsequent calls will generate errors.) The simplest way to handle this is to ignore all calls until the first call is completed, by using a static variable as shown in the code below. </p>
<pre><code>Public Sub frmScreenSaver_Destroy()
Static Once%&nbsp; ' If multiple calls occur, we want to discard subsequent
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' calls until the first one completes.
If Once% Then Exit Sub
Once% = True
REM&nbsp; &lt;Your code here&gt;
.
.
.
DoEvents ' Allow all pending messages to be bounced first.
Once% = False
End Sub
</code></pre>
<h3>Details of the AppScreenSaver Object</h3>
<p>
The <b>AppScreenSaver</b> object connects the objects shown in Figure 2. <b>AppScreenSaver_Init</b> is called by the <b>Main</b> subroutine, which then creates the needed instances of the objects depending on the command-line arguments. The command-line arguments are returned by the <b>Command</b> function. Table 3 lists the values that should be supported and what they mean, and Figure 1 shows the program logic implementing it.</p>
<p class=label>
<b>Table 3. Command-Line Parameters for Screen Savers</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Parameter</b></td>
<td class=label width=77%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=23%><b>/s</b>, <b>-s</b> or <b>s</b></td>
<td width=77%>Start in screen saver mode.</td>
</tr>
<tr valign=top>
<td width=23%><b>/c</b>, <b>-c</b> or <b>c</b></td>
<td width=77%>Show configuration dialog box with whatever window is currently active as the parent window.</td>
</tr>
<tr valign=top>
<td width=23%>(none)</td>
<td width=77%>Show the configuration dialog box with no parent window.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The purpose of the <b>/c</b> option is to disable the application that invoked the screen saver (for example, the Control Panel) while the screen saver's Setup dialog box is active. This is necessary so that the user cannot click the Setup button in the Control Panel and start running another copy of the screen saver. We prevent this in Visual Basic by checking for an instance of <b>App.PrevInstance</b> and keeping the configuration dialog box on top.</p>
<p>
<img src="ss101_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Startup logic of loading the screen saver application </b></p>
<p>
The code for the <b>AppScreenSaver_Init</b> application simply creates the appropriate objects based on the command-line arguments.</p>
<pre><code>Public Sub AppScreenSaver_Init()
MyApp_Init 1&nbsp;&nbsp;&nbsp; ' Single instance only
If InStr(LCase$(Command$), "s") Then ' Contains {'s','S'}?
 &nbsp;&nbsp; Call frmScreenSaver_Init
Else
 &nbsp;&nbsp; Dim MyUDT As udtScreenSaverConfig&nbsp; ' Create the object
 &nbsp;&nbsp; udtScreenSaverConfig_Get MyUDT
 &nbsp;&nbsp; udtScreenSaverConfig_Edit MyUDT,frmudtScreenSaverConfig
 &nbsp;&nbsp; udtScreenSaverConfig_Put MyUDT
End If
End Sub
</code></pre>
<p>
That's all, folks, for the regular part of coding. There are a few special steps left to do that we will look at next. </p>
<h2>The Fine Print</h2>
<p>
One of the final details in getting your screen saver up and running is to provide the description string in the application title that the Control Panel will insert in the screen saver's list in the desktop applet. This string must start with <i>SCRNSAVE:</i>. We must also change the extension to .SCR; this is done by choosing Make EXE File from the File menu and clicking the Options button to bring up the EXE Options dialog box. In the Title text box under Application, type <b>SCRNSAVE:</b> followed by a title, as shown in Figure 5.</p>
<p>
<img src="ss101_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Naming the screen saver in Visual Basic 4.0</b></p>
<p>
When you click OK, the Make EXE File dialog box will reappear. Under File Name, type the EXE name, <i>but</i> change the extension to .SCR. as shown in Figure 6.</p>
<p>
<img src="ss101_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Making the SCR file</b></p>
<h2>Making a 32-Bit Screen Saver</h2>
<p>
There are two differences between 16-bit screen savers and 32-bit screen savers in Visual Basic. First, the arguments for the 16-bit API calls are different from those for the 32-bit calls. (See my article <a href="msdn_32bitapi.htm">"Porting Your 16-Bit Office-Based Solutions to 32-Bit Office."</a>) Second, the 32-bit screen saver title is obtained from the first string (string ID 1) in the application string table. Adding this string into the compiled 32-bit executable requires a resource editor that can handle 32-bit executables created by Visual Basic and must be done after creating the 32-bit executables.</p>
<h2>Tips and Tricks</h2>
<p>
An application that places a form that occupies the entire screen and is topmost is a pain to debug. If you put any breakpoint in your application, you will be facing a blank screen and a lot of beeps. Pressing <small>ctrl+b</small> for the debug window will show nothing because the debug window is below your screen-saver form. Instead, blindly type <b>End</b> to escape. If an error does occur, do not expect to be able to see it—the message and code will be hidden beneath your screen-saver form. If this does not frustrate you enough, imagine not having a cursor visible to indicate where you are clicking. To prevent situations like these, I suggest that during most of development process you:
<ul type=disc>
<li>
Leave the caption bar and control box visible.<br><br></li>
<li>
Do not call <b>SetWindowPos</b>.<br><br></li>
<li>
Do not call <b>ShowCursor</b>.</li>
</ul>
<h2>A Practical Use</h2>
<p>
At the start of this article, I stated that screen savers seem to have no practical use. In fact, they have some very practical uses if they are also OLE servers. An OLE server can be used from most Microsoft® Office products to provide functionality not available in the product. An OLE screen saver allows you to blank out the screen and protect your application or solution while it is performing calculations or queries. This protection can be very useful in Microsoft Office applications and in Microsoft Access, which take a long time to process data. If you examine the code for the ScrSaver sample, you will find that the screen saver has been implemented as a simple OLE server with the following verbs: 
<ul type=disc>
<li>
<b>Create</b>: Starts the screen saver.<br><br></li>
<li>
<b>Destroy</b>: Terminates the screen saver from the client application.<br><br></li>
<li>
<b>Status</b>: Allows information to be displayed on the screen saver from the client application.<br><br></li>
<li>
<b>SetPassWord</b>: Allows the client to set a password for the current session.</li>
</ul>
<p>
The References and Object Browser dialog boxes are shown below. The server class is <b>LockScr.ScrSaver</b>.</p>
<p>
<img src="ss101_7.gif" border=0></p>
<p class=label>
<b>Figure 7. An OLE screen saver selected in the References dialog box and its corresponding appearance in the Object Browser</b></p>
<p>
The use of the screen saver from any product that supports <b>CreateObject</b> is shown below.</p>
<pre><code>Sub Demo()
Dim LockScr As Object
Set LockScr = CreateObject("LockScr.ScrSaver")
LockScr.Create
test = Now
While (test - Now) &lt; 1# / (14400#) '6 Seconds
 &nbsp;&nbsp; Debug.Print Now
 &nbsp;&nbsp; LockScr.Status = Time$
 &nbsp;&nbsp; DoEvents
Wend
LockScr.Destroy
End Sub
</code></pre>
<h2>Summary</h2>
<p>
This article has described how you can build 16-bit and 32-bit screen savers using Visual Basic, and the code in the sample application provides a framework you can easily enhance. The sample that accompanies this article bounces a picture box off the four sides of the monitor by changing the coordinates of the control—a boring sample that you are sure to improve. You can become very creative in designing your screen savers. If you care to show me your masterpiece, e-mail it to me at KENL@MICROSOFT.COM.</p>
<h2>Bibliography</h2>
<p>
Booch, Grady. <i>Object-Oriented Analysis and Design with Applications</i>. Redwood City, CA: Benjamin/Cummings Pub. Co., 1994. </p>
<p>
Knowledge Base Q96780. "Security and Screen Savers." </p>
<p>
Knowledge Base Q126239. "PRB: Win32-Based Screen Saver Shows File Name in Control."</p>
<p>
Lassesen, Ken. <a href="msdn_32bitapi.htm">"Porting Your 16-Bit Office-Based Solutions to 32-Bit Office."</a> (Development Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_off95api.htm">"Corporate Developer's Guide to Office 95 API Issues."</a> (Development Library, Technical Articles)</p>
<p>
Microsoft Win32 Software Development Kit (SDK), "Screen Saver Library." 1995 (MSDN Library, Platform, SDK, and DDK Documentation)</p>
<p>
Microsoft Windows version 3.1 Software Development Kit (SDK) <i>Programmer's Reference, Volume 1: Overview</i>. 1987-1992. See Chapter 14, "Screen Saver Library." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK)</p>
<p>
Ragsdell, Blake. "Creating Your Own Screen Savers." <i>Inside Visual Basic for Windows </i>(April 1994). (MSDN Library, Periodicals)</p>
<p>
Thompson, Nigel. <a href="msdn_scrnsave.htm">"Creating 32-Bit Screen Savers with Visual C++ and MFC."</a> (MSDN Library, Technical Articles)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 115: Performing Smart Searches in Combo Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn115"></a></sup>Tip 115: Performing Smart Searches in Combo Box Controls</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Combo Box </b>control in Microsoft® Visual Basic® allows your user to easily select items by clicking&nbsp; the desired entry in the control. This article explains how you can add a smart search feature to the <b>Combo Box</b> control.</p>
<h2>Searching Combo Box Controls Quickly</h2>
<p>
In a Microsoft® Visual Basic® application, you can use a <b>Combo Box</b> control to provide a list of items that the user can select from. If the desired item is not in the <b>Combo Box</b> control, the user can also add an additional item to the list.</p>
<p>
The drop-down style of a <b>Combo Box</b> control appears only as a single <b>Text Box</b> control with a separate arrow button to the right of the box. Clicking the arrow causes the box to drop down so that the user can see the actual entries stored in the <b>Combo Box</b> control.</p>
<p>
If the number of entries in the <b>Combo Box</b> control is relatively small, the user is able to quickly locate the desired item. However, if there are many entries in the list, scrolling through the entire list may not be the most efficient method for the user to find a specific item. In this situation, it would be much quicker to allow the user to perform a "smart search" for the desired item.</p>
<p>
A <i>smart search</i> means that the user can type the first few letters of an entry, and the first entry in the list that matches these characters will be displayed in the edit portion of the <b>Combo Box</b> control.</p>
<p>
The example program below shows how to implement a smart search routine in your Visual Basic application. The trick to doing this search lies in the KeyPress event of the <b>Combo Box</b> control.</p>
<p>
Each time the user presses a key on the keyboard, the KeyPress event is triggered. These keystrokes can be trapped and acted upon in whatever fashion you want. As an example, in the smart search routine we automatically ignore all keyboard characters that have an ASCII value of less than 32 or greater than 127. This lets us process only alphabetic characters (A–Z, a–z), numeric characters (0–9), and punctuation characters (exclamation point, comma, and so forth).</p>
<p>
It is a simple matter to save the characters that the user types to a string variable such as <i>FindString</i> and then to use the Microsoft Windows® application programming interface (API) <b>SendMessage</b> function to execute a CB_FINDSTRING message to the <b>Combo Box</b> control.</p>
<p>
The CB_FINDSTRING message lets you search a <b>Combo Box</b> control for an entry that matches the target string. This function requires two arguments—the number of the item in the control from which you want the search to start, and the string you want to find. To search the entire <b>Combo Box</b> control, you set the first argument to a value of -1.</p>
<p>
After you have executed the CB_FINDSTRING message, it will return the number of the matching entry. You can then use this to display the result to the user in the edit portion of the <b>Combo Box</b> control.</p>
<h2>Example Program</h2>
<p>
This program shows how to perform a "smart search" with a <b>Combo Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal 
 &nbsp; wMsg As Integer, ByVal wParam As Integer, lParam As Any) As Long
Const CB_ERR = (-1)
Const WM_USER = &amp;H400
Const CB_FINDSTRING = (WM_USER + 12)
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Combo1.AddItem "French fries"
 &nbsp;&nbsp; Combo1.AddItem "Hamburgers"
 &nbsp;&nbsp; Combo1.AddItem "Milkshakes"
 &nbsp;&nbsp; Combo1.AddItem "Onion rings"
 &nbsp;&nbsp; Combo1.AddItem "Ice"
 &nbsp;&nbsp; Combo1.AddItem "Ice cream"
End Sub
</code></pre>
</li>
<li>
Add a <b>Combo Box</b> control to Form1. Combo1 is created by default. Set its <b>Style</b> property to 0-Dropdown.<br><br></li>
<li>
Add the following code to the KeyPress event for Combo1:<pre><code>Private Sub Combo1_KeyPress(KeyAscii As Integer)
 &nbsp;&nbsp; Dim CB As Long
 &nbsp;&nbsp; Dim FindString As String
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If KeyAscii &lt; 32 Or KeyAscii &gt; 127 Then Exit Sub
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If Combo1.SelLength = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindString = Combo1.Text &amp; Chr$(KeyAscii)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindString = Left$(Combo1.Text, Combo1.SelStart) &amp; Chr$(KeyAscii)
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
 &nbsp;&nbsp; CB = SendMessage(Combo1.hWnd, CB_FINDSTRING, -1, ByVal FindString)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If CB &lt;&gt; CB_ERR Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combo1.ListIndex = CB
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combo1.SelStart = Len(FindString)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combo1.SelLength = Len(Combo1.Text) - Combo1.SelStart
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; KeyAscii = 0
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Type the text you want to find. As you enter each character, the KeyPress event is triggered. For example, type the letter <i>i</i>. The item <i>ice</i> appears in the Combo Box's edit window. Try again, this time typing the word <i>ice</i> followed by a space character. The Combo Box displays <i>ice cream</i>. Try typing a word that is not in the list, such as <i>potato</i>. The Combo Box will respond by finding the closest match—in this case, the <i>Onion rings</i> entry.</p>
<h2>Additional References</h2>
<p>
"SendMessage." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
"Using List Boxes and Combo Boxes." (MSDN Library Archive, Developer Products)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Primer on Early Binding (or How to Make OLE Automation Faster)</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_earlybin"></a></sup>A Primer on Early Binding (or How to Make OLE Automation Faster)</h1>
<p>
Microsoft Corporation</p>
<h2>Abstract</h2>
<p>
OLE Automation is a technology supported by Visual Basic® and the Microsoft® Office 95 applications that enables one application to work with another application's objects. <i>Early binding </i>is a feature of OLE Automation that makes OLE Automation code run more efficiently. As a developer, you can take advantage of early binding while making only minimal changes to your code and build solutions that run faster and are more reliable. This article discusses different types of binding and explains why you should ensure that your code is early-bound to get the most out of OLE Automation.</p>
<h2>What Is Binding?</h2>
<p>
Binding refers to the way in which Visual Basic® code accesses objects in another application. When you use OLE Automation from one application to work with objects in another application, the application in which you are writing Visual Basic code is the <i>OLE Automation controller</i>. The application whose objects you are working with is the <i>OLE Automation server</i>. When an OLE Automation controller creates an object variable that points to an object supplied by an OLE Automation server, Visual Basic must verify that the object exists and that any properties or methods used with the object are specified correctly. This verification process is known as <i>binding</i>. There are two types of binding with which Visual Basic developers need be concerned: late binding and early binding.</p>
<h3>Late Binding</h3>
<p>
Until the release of Microsoft® Office 95, many applications that supported OLE Automation provided only late binding of OLE Automation objects. Late binding occurs at run time and is much slower than early binding. In late-bound OLE Automation code, Visual Basic must look up an object and its methods and properties each time it executes a line of code that includes that object. To verify that the object and its methods and properties are specified correctly, Visual Basic must check with the operating system and with the application that supplied the object.</p>
<p>
You can think of late binding as similar to having to look up a phone number in the phone book each time you want to dial the number. Looking up the number is obviously slower than dialing it from memory, although the end result once the number is dialed is the same. ("Hello, Tod? David here. When do you have time to give me that golf lesson?...")</p>
<p>
The following lines of code demonstrate late binding:</p>
<pre><code>Dim objExcel as Object
Set objExcel = CreateObject("Excel.Application")
objExcel.Workbooks.Add
</code></pre>
<p>
Note that the object variable, <i>objExcel</i>, is declared as the generic type <b>Object</b>. When the object variable is declared, Visual Basic doesn't know what type of object the variable will later be used with, but it must set aside a certain amount of memory for this unknown object. Not until the second line of code does Visual Basic have enough information to determine what type of object is actually necessary.</p>
<p>
The second line of code creates a new instance of the Excel.Application object, an OLE Automation object supplied by Microsoft Excel, and assigns it to the object variable. Before it creates a new instance of the Excel.Application object, Visual Basic must check the system registry for information on this object. When the third line of code is executed, Visual Basic must look up the <b>Workbooks</b> collection of the Excel.Application object and then the <b>Add</b> method of the <b>Workbooks</b> collection to verify that the collection and method exist and that they have been used correctly. Each time you use the object variable, Visual Basic performs these time-consuming look-ups, resulting in slower performance.</p>
<h3>Early Binding</h3>
<p>
Early binding is the solution to the problem of slow OLE Automation performance. Early binding occurs at compile time rather than run time, so if your code is saved in a compiled state, binding is complete before the code is even run. To return to the phone number analogy, early binding is similar to "speed dialling"—having a phone number in memory rather than having to look it up each time you wish to dial it.</p>
<p>
Early binding eliminates the need for Visual Basic to continually verify object information while using the object. Early binding takes place between the OLE Automation controller application and the <i>type library </i>of the OLE Automation server. All applications that support early binding include a type library, which contains information on the application's objects and their properties and methods.</p>
<p>
To take advantage of early binding, you must set a <i>reference </i>to the OLE Automation server's type library. When you set a reference to a type library, you notify Visual Basic that you may be using the objects in that type library. Visual Basic loads the type library into memory, which enables it to recognize these objects and bind them when the code is compiled. If you don't set a reference to an application's type library, you can still write OLE Automation code, but it won't be early-bound.</p>
<p>
Once you've set a reference to an application's type library, you can declare object variables as specific types of objects. This step is crucial in ensuring that your code is early-bound. For example, from an Office 95 application, you could run the following early-bound code:</p>
<pre><code>Dim appXL As Excel.Application
Set appXL = CreateObject("Excel.Application")
appXL.Workbooks.Add
</code></pre>
<p>
Note that in this example, the object variable is declared as type <b>Application</b> rather than type <b>Object</b>. Additionally, the <b>Application</b> object type is qualified by the name of the application that is supplying the object, Microsoft Excel. When this code is compiled, Visual Basic creates the correct type of object and looks up every method or property that the developer might use with that object. Once this initial look-up is complete, Visual Basic doesn't need to look up information on the object again. Each time the object is used in code, the information on its properties and methods is readily available, and the code runs much more quickly.</p>
<p>
A caveat on early binding: Setting a reference to an application's type library won't automatically make your code early-bound. You must <b>declare</b> object variables as specific object types in order to take advantage of early binding. In the example shown above, if you were only to declare the object variable as type <b>Object</b>, your code would be late-bound rather than early-bound.</p>
<p>
There are some additional benefits of early binding that may make writing OLE Automation code easier. When you set a reference to an application's type library, you can view the objects, properties, and methods in that type library in the Object Browser in the OLE Automation controller application. You can also get help on using those objects from the Object Browser, even though you're in another application.</p>
<h2>Which Applications Support Early Binding?</h2>
<p>
For early binding to work, both the OLE Automation server and OLE Automation controller must support it. If either application does not support early binding, late binding is used instead.</p>
<p>
An application can support early binding as an OLE Automation controller, as an OLE Automation server, or both. For example, an application that provides a type library supports early binding as an OLE Automation server. An application that can set references to other applications' type libraries supports early binding as an OLE Automation controller.</p>
<p>
The following table lists the applications that support early binding.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b><br>
<br>
</b></td>
<td class=label width=30%><b>Supports early binding when used as an OLE Automation controller</b></td>
<td class=label width=33%><b>Supports early binding when used as an OLE Automation server</b></td>
</tr>
<tr valign=top>
<td width=37%><b>16-bit applications</b></td>
<td width=30%></td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Access 2.0</td>
<td width=30%>No</td>
<td width=33%>No</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Excel 5.0</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Project 4.0</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Visual Basic 3.0</td>
<td width=30%>No</td>
<td width=33%>No</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Word 6.0</td>
<td width=30%>No</td>
<td width=33%>Yes*</td>
</tr>
<tr valign=top>
<td width=37%><b>32-bit applications</b></td>
<td width=30%></td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Access 95</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Data Access Objects 3.0</td>
<td width=30%>Not applicable</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Excel 95</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft PowerPoint® 95</td>
<td width=30%>No</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Project 95</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Visual Basic 4.0</td>
<td width=30%>Yes</td>
<td width=33%>Yes</td>
</tr>
<tr valign=top>
<td width=37%>Microsoft Word 95</td>
<td width=30%>No</td>
<td width=33%>Yes*</td>
</tr>
</table><br>
<p>
* The Microsoft Word type library is not available with Microsoft Word. It is available in the Microsoft Access Developer's Toolkit and from online sources.</p>
<h2>Benefits of Early Binding</h2>
<ul type=disc>
<li>
Performance: Depending on what your code is doing, early binding may significantly improve the speed of your code.<br><br></li>
<li>
Compile-time syntax checking: Syntax errors that you make in OLE Automation code will fail at compile time rather than at run time.<br><br></li>
<li>
Code readability: When you declare object variables as specific types, you can simply glance at those declarations to determine what objects a particular procedure uses.<br><br></li>
<li>
Viewing objects: When you've set a reference to an application's type library, its objects and their properties and methods show up in the Object Browser. To find out what properties and methods are available for a particular object, just check the Object Browser.<br><br></li>
<li>
Getting help: You can get help on another application's object model from the Object Browser, rather than having to launch the application itself.</li>
</ul>
<h2>Issues with Early Binding</h2>
<h3>Qualifying Objects</h3>
<p>
When you write early-bound code, it's a good idea to qualify object types with the name of the application supplying the object. Several applications have overlapping objects in their object models. For example, many applications have an <b>Application</b> object at the top of their object model. If you omit the qualification, Visual Basic may create the wrong <b>Application</b> object.</p>
<p>
You can qualify an OLE Automation object with the name of the object library supplied by the OLE Automation server application, as long as you've set a reference to that object library. To determine the name of an application's object library, open the Object Browser and look in the <b>Libraries/Databases</b> list box.</p>
<p>
The following examples show how you might qualify different OLE Automation objects:</p>
<pre><code>Dim dbs As DAO.Database
Dim wkt As Excel.WorkSheet
Dim doc As Word.WordBasic
Dim pst As PPT.Presentation
Dim rpt As Access.Report
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the <b>References</b> dialog box, there is a <b>Priority</b> button that determines the order in which Visual Basic looks up the methods and properties in referenced type libraries. If you set the order that Visual Basic uses to search these object libraries, you can determine which application's object will be created when you declare an object variable. In this case, there's no need to qualify objects.</p>
<h3>Using Microsoft Excel and Microsoft Project as OLE Automation Controllers</h3>
<p>
Microsoft Excel and Microsoft Project use a different version of Visual Basic for Applications than do Microsoft Access and Visual Basic 4.0. For this reason, when you're using Microsoft Excel or Microsoft Project as an OLE Automation controller, you may need to use a slightly different syntax to declare an object variable as a specific object type in some cases in order to create early-bound code. For example, the following line of code produces the error "User-defined type not defined" when run from Microsoft Excel:</p>
<pre><code>Dim appAccess As Access.Application&nbsp;&nbsp; ' Causes an error.
</code></pre>
<p>
To avoid generating this error, you can declare the variable in the following way:</p>
<pre><code>Dim appAccess As Access.[_Application]&nbsp;&nbsp; ' Compiles without error.
</code></pre>
<p>
For some objects, however, the standard syntax works fine. For example, the following code compiles without an error:</p>
<pre><code>Dim dbs As DAO.Database&nbsp;&nbsp; ' Compiles without error.
</code></pre>
<p>
However, if you try to declare this variable with the second syntax, you'll get an error:</p>
<pre><code>Dim dbs As DAO.[_Database]&nbsp;&nbsp; ' Causes an error.
</code></pre>
<p>
The best way to handle this problem is to declare all object variables and then compile the code to determine which ones need a different syntax. If you get a "User-defined type not defined" error, try using the other syntax to declare the object.</p>
<h2>Summary</h2>
<p>
You should now understand how early binding can help improve the performance and reliability of OLE Automation code. OLE Automation is a tremendous asset to developers who want to leverage prebuilt components, rather than code all application functionality from scratch. Office 95 provides extensive support for early binding, giving the developer an excellent platform for custom solution development.</p>
<h2>For More Information</h2>
<p>
See <a href="msdn_objguid.htm">"Your Unofficial Guide to Using OLE Automation with Microsoft Office and Microsoft BackOffice"</a> in the Microsoft Access Developer's Toolkit or the MSDN Library (Technical Articles, Applications), or check out the Visual Basic 4.0 documentation (MSDN Library) or the Microsoft Excel 95 developer reference.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing Classes with Visual FoxPro</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_manclass"></a></sup>Managing Classes with Visual FoxPro</h1>
<p>
Microsoft Corporation</p>
<p>
November 1996</p>
<h2>Introduction</h2>
<p>
Microsoft® Visual FoxPro™ excels in its support for object-oriented programming. When working in an object-oriented environment, managing class libraries is an issue of critical importance.</p>
<p>
This document discusses the issues relating to managing class libraries, including who should do the management and what Visual FoxPro tools and commands assist in this important task.</p>
<h2>Why Manage Classes?</h2>
<p>
Visual FoxPro stores classes created with the Visual Class Designer in visual class libraries (.VCX files). What’s involved in managing them?</p>
<p>
Managing class libraries is not something to take lightly. The power of object orientation lies in the use of a framework that is reused throughout multiple applications and throughout an organization. Therefore, it is important to manage your framework. Consider this: an application framework may consist of hundreds of classes on which you base other classes for your applications.</p>
<p>
In order to properly keep track of your classes, you probably want to keep them grouped in a logical manner in different files. For example, the “base classes” in the framework might be stored in a class library called CONTROLS.VCX. Another library might have more specialized versions of these controls. There may be a file, UTILS.VCX, that has utility classes. The list here is limitless. When you put all these disparate class libraries together, you have a basis for creating all your applications.</p>
<p>
Now, imagine what might happen if someone modifies the TextBox class that serves as the “framework base class” (as opposed to the TextBox class that is built into Visual FoxPro) and introduces a bug to it. That bug can ripple through applications in the same way that a bug in a procedure can ripple through to every application that calls it.</p>
<p>
The key, then, is to ensure proper control over the class libraries.</p>
<h2>Class Library Structure</h2>
<p>
Typically in an organization, you may see as many as three levels of class libraries. The first set of libraries is a corporate-wide set of standard libraries. The corporate framework and standard utilities, for example, may be in these libraries.</p>
<p>
A specific department or business unit within a company may have a more specialized set of classes that they use across their applications. For example, a set of base business classes can be created for each business unit.</p>
<p>
Finally, each application will have class libraries specifically for its use.</p>
<p>
Figure 1 shows, in an organizational chart, the hierarchy of a corporate library.</p>
<p>
<img src="manclass_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Class library structure</b></p>
<h2>The Class Librarian</h2>
<p>
Each level of classes requires a Class Librarian—an individual responsible for managing the libraries. The Class Librarian’s job, simply put, is to control what goes into the class libraries. At the corporate level, a corporate Class Librarian is responsible for the content and integrity of the corporate framework. Each department has individuals with similar responsibilities. Finally, the leader of each application project, or another designated person, manages the application libraries.</p>
<h2>Criteria for Inclusion in Class Libraries</h2>
<p>
It would be unfair to assume that the class libraries at any level should be static and not subject to change; as time goes by, enhancements can and should be introduced. Developers who work on applications might have significant contributions to make to the framework in terms of new and enhanced classes. No one is suggesting that this should not take place—just that it should be controlled.</p>
<p>
Classes created for inclusion in the class libraries at any of the three levels can be created by the developers and stored in a temporary .VCX file. When the developer is satisfied that the classes are complete, the classes can be submitted to the appropriate Class Librarian for consideration.</p>
<p>
The Class Librarian should carefully review each class for:
<ul type=disc>
<li>
<b>Completeness:</b> The class must accomplish the agreed-on responsibilities. It should also trap the appropriate errors and be properly developed.<br><br></li>
<li>
<b>Standards:</b> Many organizations have standards, such as variable, property, and method naming conventions; commenting requirements; and so on. If the code does not strictly meet these standards, the class library can be difficult to maintain.<br><br></li>
<li>
<b>Documentation:</b> Any good class library is well documented. A good rule for the librarian is to accept only classes that have sufficient documentation. The documentation should discuss issues surrounding the public interface such as which methods are callable, which are public properties, what the public properties do, what they return, and so on. The documentation must be complete enough so that someone who is totally unfamiliar with the class can use it in the course of developing applications, either directly or by subclassing it.<br><br></li>
<li>
<b>Robustness:</b> The robustness of a class refers to how resistant the class is to errors. For example, if a bad parameter is sent to a method, the method should gracefully catch the error.<br><br></li>
<li>
<b>Compatibility:</b> The Class Librarian must ascertain that the new class will not break any old code. It is a good idea to have a test case for every new class so that subsequent versions can be tested for compatibility. It should be taken as an axiom that any new or modified class <i>must</i> be properly and completely tested against existing code. This should be viewed as a primary responsibility of the Class Librarian.</li>
</ul>
<h2>Merging the New Classes</h2>
<p>
Once the submitted classes have been reviewed and approved, the next step is to merge the classes into the class libraries.</p>
<p>
Merging classes into the class libraries should take place at regular intervals, perhaps once a week or once a month. A rapidly changing class library removes the element of stability that is important to developers.</p>
<p>
In addition, once merging is complete, the Class Librarian should inform all the users of the class libraries of the changes and additions that were made. Never make a change to the class libraries without telling everyone about it. In this manner, if something does accidentally break, the developer will have an idea where to look.</p>
<h2>Technical Aspects of Managing Class Libraries</h2>
<p>
On the technical side, there are three basic actions that a librarian normally has to take to manage classes in a library:
<ul type=disc>
<li>
Copy or move a class between class library files.<br><br></li>
<li>
Change the name of a class.<br><br></li>
<li>
Remove a class from a class library.</li>
</ul>
<p>
Visual FoxPro has commands for each of these tasks.</p>
<h3>Copying a Class</h3>
<p>
The ADD CLASS command is used to copy a class from one visual class library file to another. Here’s the syntax:</p>
<pre><code>ADD CLASS &lt;ClassName&gt;;
   [OF &lt;ClassLibrary1&gt;] ;
   TO &lt;ClassLibrary2&gt; ;
   [OVERWRITE]
</code></pre>
<p>
<i>ClassName</i> is the name of an existing class. The class may be already accessible in a .VCX file loaded with SET CLASSLIB or it may be a .VCX file that you specifically reference from &lt;ClassLibrary1&gt; with the optional OF &lt;ClassLibrary1&gt; clause. The name of the .VCX file to store the class in is specified with the TO &lt;ClassLibrary2&gt; clause.</p>
<p>
If the class already exists in &lt;ClassLibrary2&gt;, an error will be generated by Visual FoxPro to prevent accidentally overwriting a class in a class library. The OVERWRITE keyword overrides this message and allows you to overwrite a class.</p>
<h3>Moving a Class Between Class Libraries</h3>
<p>
In order to move a class, you need to copy it into the new class library and then remove it from the original one. There is no MOVE CLASS command.</p>
<h3>Renaming a Class</h3>
<p>
The name of a class in a visual class library file may be changed with the RENAME CLASS command. For example:</p>
<pre><code>RENAME CLASS &lt;OldClassName&gt; ;
   OF &lt;ClassLibrary&gt; ;
   TO &lt;NewClassName&gt;
</code></pre>
<p>
<i>OldClassName</i> is the class name as it exists in the .VCX file prior to renaming. <i>ClassLibrary</i> is the name of the .VCX file and <i>NewClassName</i> is the new name for the class.</p>
<p>
Be <i>very</i> careful with this command. If you rename a class, it <i>only</i> affects the one class. Any classes that are subclassed from this class will no longer be able to find it.</p>
<h3>Removing a Class</h3>
<p>
The REMOVE CLASS command removes a class from a class library, as follows:</p>
<pre><code>REMOVE CLASS &lt;ClassName&gt; OF &lt;ClassLibrary&gt;
</code></pre>
<p>
<i>ClassName</i> is the name of the class to remove; <i>ClassLibrary</i> is the name of the .VCX file to remove it from.</p>
<p>
Be careful with this. Removing a class is <i>very dangerous</i> in that it can break the chain in a class hierarchy. For example, if you have a class hierarchy and remove one of the classes in the middle of the hierarchy, you will invalidate everything from the class you delete on down. You will not be able to edit those classes in native<i> </i>Visual FoxPro because the hierarchy has been broken.</p>
<p>
So, what do you do if you accidentally remove a class? The simple answer is to open the .VCX file as a table and use the RECALL command to retrieve the records you just deleted.</p>
<p>
If you want to delete a level from a class hierarchy, Visual FoxPro does not have a command to do it. You can do it with the Class Browser Redefine feature, which is discussed below.</p>
<h2>Managing Classes Visually</h2>
<p>
Visual FoxPro has the commands to perform the rudimentary functions associated with managing class libraries. Adding, removing, and renaming cover the bulk of what you want to do.</p>
<p>
Although they get the job done, they aren’t very pretty. After using the Form Designer and the Class Designer, developers would be disappointed if they had to manage class libraries by hand alone. Fortunately, they don’t. That’s where the Class Browser comes in.</p>
<h3>The Class Browser</h3>
<p>
The Class Browser is a Visual FoxPro application (written entirely in Visual FoxPro) designed to provide a user-friendly, visual way to work with and manage class libraries. Loading a class library into the Class Browser provides all the functionality previously discussed, and much more, at the touch of a mouse button.</p>
<p>
There is one interesting note about the Class Browser to make up front. You may think of the Class Browser as a tool used only for managing classes. However, since the file structures of a form and a class are identical, the Class Browser also allows you to load .SCX files. This is really nice in that most (but not all) of the Class Browser functionality works equally well with a form and class.</p>
<p>
<img src="manclass_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The class browser</b></p>
<p>
Here are the elements of the Class Browser interface.</p>
<h4>Form caption</h4>
<p>
The title of the Class Browser form shows the name of the currently selected class and the name of the .VCX/.SCX file it belongs to.</p>
<h4>Action buttons</h4>
<p>
At the top of this modeless form is a series of command buttons that launch the bulk of the Class Browser actions. These are described in Table 1.</p>
<p class=label>
<b>Table 1. Class Browser Action Buttons.</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=24%><b>Open</b></td>
<td width=70%>Opens an existing class library (.VCX) file, creates a new class library file or opens an existing form/form set (.SCX) file. Any open files will be closed.</td>
</tr>
<tr valign=top>
<td width=24%><b>View additional file</b></td>
<td width=70%>Adds an existing class library (.VCX) file or a form/form set (.SCX) file to the class list or creates a new class library file. This is useful when the parent class of a class in a .VCX file is stored in a different .VCX.</td>
</tr>
<tr valign=top>
<td width=24%><b>View class code</b></td>
<td width=70%>Exports the code for the currently selected class and shows it in a window. If the currently selected class is the .VCX file itself, the entire class library is exported in one click.</td>
</tr>
<tr valign=top>
<td width=24%><b>Find</b></td>
<td width=70%>Searches for specific text in class names, class descriptions, member names, and member descriptions.</td>
</tr>
<tr valign=top>
<td width=24%><b>New Class</b></td>
<td width=70%>Creates a new subclass based on the currently selected class. To create a new subclass in a .VCX file based on a Visual FoxPro base class, position the list on the .VCX file item and then click <b>New Class.</b></td>
</tr>
<tr valign=top>
<td width=24%><b>Rename</b></td>
<td width=70%>Changes the name of the selected class, property, or method. <br>
<b>Caution:</b> Renaming a class might invalidate forms or classes that are not currently displayed in Class Browser windows and that rely on the class. Changing the name of a property or method can cause code that references the property or method to fail.</td>
</tr>
<tr valign=top>
<td width=24%><b>Redefine</b></td>
<td width=70%>Changes the parent class of the selected class.</td>
</tr>
<tr valign=top>
<td width=24%><b>Remove</b></td>
<td width=70%>Removes the selected class or deletes the selected file.<br>
<b>Caution: </b>Removing a class or file might invalidate forms or subclasses that rely on the class.</td>
</tr>
<tr valign=top>
<td width=24%><b>Clean up class library</b></td>
<td colspan=2 width=76%>Runs the PACK command to remove records in the .VCX file marked for deletion.</td>
</tr>
</table><br>
<h3>Starting the Class Browser</h3>
<p>
Starting the Class Browser can be accomplished in one of two ways. From the <b>Tools</b> menu, select <b>Class Browser</b>. A dialog box appears asking for the name of the class library to load. If you type the name of a class library that doesn’t exist, the Class Browser creates it for you.</p>
<p>
The second way to load the class Browser is to use the _BROWSER system variable. _BROWSER is typically set to BROWSER.APP, which is located in the Visual FoxPro home directory. Issuing the following command is equivalent to using the menu:</p>
<pre><code>DO (_BROWSER)
</code></pre>
<p>
You can also pass a parameter containing the name of the class library to load. For example, the following code loads ABOUT.VCX for the TASTRADE sample application:</p>
<pre><code>DO (_BROWSER) WITH HOME()+"samples\mainsamp\libs\about"
</code></pre>
<p>
Optionally, a second parameter can be added to the command that will automatically select a particular class in the list. For example, the following code loads the ABOUT library and selects the class called AboutBox:</p>
<pre><code>DO (_BROWSER) WITH HOME()+"samples\mainsamp\libs\about", "aboutbox"
</code></pre>
<p>
Specifying a form file name directly works too. The following code starts the Class Browser with the form CUSTOMER.SCX loaded:</p>
<pre><code>DO (_BROWSER) WITH HOME()+"samples\mainsamp\forms\customer.scx"
</code></pre>
<h2>Conclusion</h2>
<p>
Microsoft FoxPro® has a tradition of being not only an excellent language and database but also an excellent development environment. Microsoft Visual FoxPro follows this tradition. Not only have new features been added to the product that revolutionize database applications development, the tools provided with the product ease the advanced tasks associated with creating and managing classes.</p>
<p>
The Class Browser is a model not only for the functionality it brings but also for its open architecture. The Visual FoxPro Help file documents the objects, properties, events, and methods contained in the Class Browser. The Class Browser, as a class, allows us access to practically all of its internals. This makes it not only easy to use, but incredibly powerful.</p>
<h3>Acknowledgments</h3>
<p>
We acknowledge the help of Flash Creative Management, Inc., Hackensack, NJ, in providing portions of this material.</p>
</BODY>
</HTML>

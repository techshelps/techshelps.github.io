<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenGL VIII: wglUseFontOutlines</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_gl8"></a></sup>OpenGL VIII: wglUseFontOutlines</h1>
<p>
Dale Rogerson<br>
Microsoft Developer Network Technology Group</p>
<p>
July 31, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4342">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the EasyFont sample application for this technical article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4343">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the GLlib.DLL for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article explains how to use the Win32® <b>wglUseFontOutlines</b> function. This function creates three-dimensional (3-D) characters based on a TrueType® font for use in OpenGL™-rendered scenes. The EasyFont sample application demonstrates using <b>wglUseFontOutlines</b>.</p>
<h2>Introduction</h2>
<p>
I can remember as a kid daydreaming over the big Sears Christmas Wish Book. The object of these dreams was Duke, a plastic German Shepherd companion for the old GI Joe. Duke had a wagon he could pull, complete with a flashing light and siren and a fire hose for fighting forest fires. Best of all, Duke had a rope slide. You would set the string up, hook Duke's mouth on the slide, let go, and off Duke would go to save the forests from being burned down by GI Joe. At least, that was what was <i>supposed</i> to happen. What <i>really</i> happened was that Duke fell off the slide and broke his tail, which wouldn't stay attached no matter what the advertisements for Crazy Glue claimed.</p>
<p>
The point is, pretty early in life we learn that things don't generally meet our expectations. I don't know if I have lowered all my expectations as a result, but the Win32® <b>wglUseFontOutlines</b> function certainly exceeded them.</p>
<p>
<b>wglUseFontOutlines</b> is a "wiggle" function (named after the <b>wgl</b> prefix to its name). A wiggle function is a Win32 function that bridges the gap between the portable OpenGL™ graphics library and the Microsoft Windows® platform. <b>wglUseFontOutlines </b>carries TrueType® fonts across this bridge, extruding them into three-dimensional (3-D) objects in the process.</p>
<p>
What does <b>wglUseFontOutlines</b> do? Basically, <b>wglUseFontOutlines</b> takes a TrueType font and creates a display list for each glyph in the font. (A <i>glyph</i> is the image of a single character in the font.) <b>wglUseFontOutlines</b> extrudes the glyphs in the process of building the display lists. The resulting display lists are used to render 3-D versions of the glyphs on the screen. The display lists can be rotated, translated, texture-mapped, and anything else that is possible in OpenGL.</p>
<p>
If you want to display 3-D versions of your favorite TrueType fonts on the screen, <b>wglUseFontOutlines</b> will meet or exceed your needs. However, if you need to modify the glyph shapes or know the exact locations of the outline of each glyph (maybe for advanced kerning), <b>wglUseFontOutlines</b> will not work for you.</p>
<p>
This article describes the parameters to <b>wglUseFontOutlines</b> and how to use them.</p>
<h2>Parameters</h2>
<p>
Following is the prototype for <b>wglUseFontOutlines</b>:</p>
<pre><code>BOOL wglUseFontOutlines(
 &nbsp;&nbsp; HDC&nbsp; <i>hdc</i>,
 &nbsp;&nbsp; DWORD&nbsp; <i>first</i>,
 &nbsp;&nbsp; DWORD&nbsp; <i>count</i>,
 &nbsp;&nbsp; DWORD&nbsp; <i>listBase</i>,
 &nbsp;&nbsp; FLOAT&nbsp; <i>deviation</i>,
 &nbsp;&nbsp; FLOAT&nbsp; <i>extrusion</i>,
 &nbsp;&nbsp; int&nbsp; <i>format</i>,
 &nbsp;&nbsp; LPGLYPHMETRICSFLOAT <i>lpgmf</i> 
 &nbsp; );
</code></pre>
<p>
The following table gives a quick overview of the meaning of each of these parameters.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hdc</i></td>
<td width=87%>Specifies the device context containing the desired outline font. The outline font selected in <i>hdc</i> is used to create the display lists in the current rendering context.</td>
</tr>
<tr valign=top>
<td width=13%><i>first</i></td>
<td width=87%>Specifies the index of the glyph in the font from which to start generating display lists.</td>
</tr>
<tr valign=top>
<td width=13%><i>count</i></td>
<td width=87%>Specifies the number of glyphs for which to generate display lists. </td>
</tr>
<tr valign=top>
<td width=13%><i>listBase</i></td>
<td width=87%>Specifies the starting display list.</td>
</tr>
<tr valign=top>
<td width=13%><i>deviation</i></td>
<td width=87%>Specifies how closely the display lists follow the glyph outline. The higher the value, the rougher the resulting display-list representation. The value of <i>deviation</i> must be equal to or greater than zero.</td>
</tr>
<tr valign=top>
<td width=13%><i>extrusion</i></td>
<td width=87%>Specifies the amount a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than zero. When <i>extrusion</i> equals zero, the display lists are not extruded.</td>
</tr>
<tr valign=top>
<td width=13%><i>format</i></td>
<td width=87%>Specifies the format (either WGL_FONT_LINES or WGL_FONT_POLYGONS) to use in the display lists. When <i>format</i> is WGL_FONT_LINES, <b>wglUseFontOutlines</b> creates fonts with line segments; when <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</td>
</tr>
<tr valign=top>
<td width=13%><i>lpgmf</i></td>
<td width=87%>Points to an array of <i>count</i> <b>GLYPHMETRICSFLOAT</b> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is NULL, no glyph metrics are returned.</td>
</tr>
</table><br>
<p>
We'll cover all of these parameters in more detail later in the article.</p>
<h2>EasyFont Sample Application</h2>
<p>
The EasyFont sample application demonstrates how to use <b>wglUseFontOutlines</b>. The application displays two strings using display lists generated by <b>wglUseFontOutlines</b> from TrueType fonts. You can rotate the strings by using the menu items in the Rotate menu. Use the Change menu item under the Option menu to change the string, font, deviation, extrusion, and format that <b>wglUseFontOutlines</b> uses to generate the upper string.</p>
<p>
Hey, kids! For something really neat, try out the WingDings® font!</p>
<h2>Quick Start</h2>
<p>
For those who like to see quick results, here is some code:</p>
<pre><code>// Pixel format and rendering context already set up and initialized.

// Get the DC for the current rendering context.
HDC hdc = wglGetCurrentDC();
CDC* pdc = CDC::FromHandle(hdc) ;

// Select the font you want to use.
CFont* pOldFont = (CFont*)pdc-&gt;SelectObject(m_pFontSelected) ;

// Allocate structure for character metrics.
GLYPHMETRICSFLOAT agmf;

// Build the display lists.
wglUseFontOutlines(hdc,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // DC with font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __toascii('A'),&nbsp;&nbsp;&nbsp; // Character to generate
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of characters
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display-list number
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Deviation
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Extrusion
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WGL_FONT_POLYGONS, // Format
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;agmf) ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Metrics pointer

// Set up transformation.
glLoadIdentity();
glTranslated(0.5, 0.0, -2.0);

// Display the 3-D letter 'A'
glCallList(1000) ;
</code></pre>
<p>
In the code listed above, <b>wglUseFontOutlines</b> used the glyph for the letter <i>A</i> (index 65) to generate the display list numbered 1000. Display list 1000 contains an extruded representation of the letter <i>A</i> built with polygons. The letter is displayed using the <b>glCallList</b> function.</p>
<p>
The first step in using <b>wglUseFontOutlines</b> is to create a TrueType font and select it into the device context. Much has already been written about choosing and creating fonts for Windows, so I will just refer you to the technical articles listed in the bibliography.</p>
<p>
Now that you have seen a simple example, we can examine the parameters of <b>wglUseFontOutlines</b> in more detail.</p>
<h2>Display Lists</h2>
<p>
The first parameters we are going to look at are <i>count</i> and <i>listBase</i>. It is unlikely that you will only need one glyph from the font; in most cases you will need all or most of the glyphs in a font. The following code will get all 256 glyphs in an 8-bit font:</p>
<pre><code>// Allocate structure for character metrics.
GLYPHMETRICSFLOAT agmf[<b>256</b>];

// Build the display lists.
wglUseFontOutlines(hdc,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // DC with font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>0</b>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Starting character index
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>256</b>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of characters
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display-list number
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Deviation
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Extrusion
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WGL_FONT_POLYGONS, // Format
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; agmf) ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Metrics pointer

// Set up transformation.
glLoadIdentity();
glTranslated(0.5, 0.0, -2.0);

// Display the 3-D letters 'Hello!'
glCallList(1000 + __toascii('H')) ;
glCallList(1000 + __toascii('e')) ;
glCallList(1000 + __toascii('l')) ;
glCallList(1000 + __toascii('l')) ;
glCallList(1000 + __toascii('o')) ;
glCallList(1000 + __toascii('!')) ;
</code></pre>
<p>
In this case, we passed 256 to <b>wglUseFontOutlines</b> to generate display lists for all the glyphs in the font. The display list for the first glyph is 1000 and for the 66th glyph (<i>A</i>) it is 1065.</p>
<p>
Notice that we didn't have to call <b>glTranslated</b> between each call to <b>glCallList</b>. <b>wglUseFontOutlines</b> generates display lists that include positioning commands so that successively called display lists are shown next to each other. How about that for exceeding expectations?</p>
<p>
If you think there has to be a better way than calling <b>glCallList</b> for each letter you want to display, you are right. You can use <b>glCallLists</b>. Just replace the above six <b>glCallList </b>statements with the following two statements:</p>
<pre><code>glListBase(1000) ;
glCallLists(5, GL_UNSIGNED_BYTE, "Hello!") ; 
</code></pre>
<p>
<b>glCallLists</b> uses the third parameter as an array of indexes that are added to the base index set by <b>glListBase</b>. Pretty clever, huh?</p>
<p>
If you are like me, you don't often want or need to display the ASCII control characters with indexes 0 to 32. Yet the above example has not only created display lists for these characters, it has also generated display lists for the characters above index 127. Because most Windows fonts don't contain any meaningful characters above index 127, this leads to a lot of wasted memory and time. For this reason, I like to use the following code:</p>
<pre><code>int iStart = __ascii('!') ;
int iLast = 126 ;
int iCount = iLast - iStart + 1; 

// Allocate structure for character metrics.
GLYPHMETRICSFLOAT agmf[<b>iCount</b>];

// Build the display lists.
wglUseFontOutlines(hdc,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // DC with font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>iStart</b>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Starting character index
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>iCount</b>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of characters
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display-list number
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Deviation
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Extrusion
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WGL_FONT_POLYGONS, // Format
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; agmf) ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Metrics pointer

// Set up transformation.
glLoadIdentity();
glTranslated(0.5, 0.0, -2.0);

// Display the 3-D letter 'H'
glListBase(1000 - iStart) ;
glCallLists(5, GL_UNSIGNED_BYTE, "Hello!") ; 
</code></pre>
<p>
The above code doesn't generate display lists for the first 32 or the last 128 glyphs in the font. To ensure that our trick of passing the string we want to display to <b>glCallLists</b> still works, we adjust the base index we pass to <b>glListBase</b> by subtracting the index of the first character. This technique should save time and memory. However, developers writing international applications are going to have their work cut out for them.</p>
<h3>glGenLists</h3>
<p>
Although the above code does work, there is a much safer method for working with display lists. In the code above, 1000 is used to start the display list. It is possible that somewhere else in the program there could already be a display list in the range 1000 to 1000 + <b>iCount</b>. The code above would erase that existing display list and replace it with a glyph. This isn't much of a problem with a simple program like EasyFont, but could be difficult to debug in a more complicated program.</p>
<p>
The solution is to use <b>glGenLists</b>, which generates a consecutive range of empty display lists. The code below shows how <b>CScene::Create3DFont </b>uses <b>glGenLists </b>to get a valid range of display lists. Although not required, it demonstrates the use of <b>glDeleteLists</b> to free a consecutive range of display lists.</p>
<pre><code>void CScene::Create3DFont()
{
 &nbsp; // Delete existing display-list numbers.
 &nbsp; if (m_iDisplayListStart != 0)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Delete the existing lists.

<b> &nbsp;&nbsp;&nbsp;&nbsp; glDeleteLists(m_iDisplayListStart, m_iNumberChars) ;</b>

 &nbsp; }

 &nbsp; // Generate new display lists.

<b> &nbsp; m_iDisplayListStart = glGenLists(m_iNumberChars) ;</b>

 &nbsp; m_iDisplayListBase = m_iDisplayListStart - m_iFirstChar ;

 &nbsp; // Get the DC for the current rendering context.
 &nbsp; HDC hdc = wglGetCurrentDC();
 &nbsp; CDC* pdc = CDC::FromHandle(hdc) ;

 &nbsp; // Select the font.
 &nbsp; CFont* pOldFont = (CFont*)pdc-&gt;SelectObject(m_pFontSelected) ;
 &nbsp; 
 &nbsp; // Generate the display lists.
 &nbsp; GLYPHMETRICSFLOAT* agmf = new GLYPHMETRICSFLOAT[m_iNumberChars];

 &nbsp; BOOL bResult = 
 &nbsp; wglUseFontOutlines(hdc,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // DC with font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_iFirstChar,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // First character
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_iNumberChars,&nbsp;&nbsp;&nbsp;&nbsp; // Number

<b> </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>m_iDisplayListStart</b>,// Starting display
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_fDeviation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Deviation
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_fExtrusion,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Extrusion
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_iFormat,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Format or WGL_FONT_LINES
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; agmf) ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Information pointer

.
.
.
}
</code></pre>
<h2>Deviation</h2>
<p>
The next parameter to <b>wglUseFontOutlines </b>is <i>deviation</i>. "Deviation" specifies how closely <b>wglUseFontOutlines</b> follows the outlines in the glyphs. A deviation of 0.0 means that <b>wglUseFontOutlines</b> follows the outline exactly. Using higher values makes the curves in the fonts progressively less smooth. For example, the following is a smooth TrueType <i>O</i>:</p>
<p>
<img src="gl8_1.gif" border=0></p>
<p>
With a deviation of 0.5, this would look approximately like:</p>
<p>
<img src="gl8_2.gif" border=0></p>
<p>
As you can see, it would be much rougher. The best way to learn about deviation is to play with the EasyFont sample application and change the values for deviation.</p>
<h2>Extrusion</h2>
<p>
The <i>extrusion </i>parameter controls how much depth the characters will have. A larger value generates more depth. Again, the best way to learn about this parameter is to play with the sample application.</p>
<h2>Format</h2>
<p>
<b>wglUseFontOutlines </b>can generate display lists with two different formats: WGL_FONT_POLYGONS or WGL_FONT_LINES. When WGL_FONT_POLYGONS is specified, the display lists contain polygons to build solid 3-D versions of the glyphs. If WGL_FONT_LINES is used, the display lists contain line segments that build 3-D outlines of the glyphs.</p>
<h2>GLYPHMETRICSFLOAT</h2>
<p>
In the sample application, I rotate the string "MSDN" around a vertical axis between the <i>S</i> and the <i>D</i>. Because I also wanted the string to be in the center of the display, I had to translate the starting point for the <i>M</i> the same distance down the negative x axis as the width of the <i>M</i> and the <i>S</i>. To do this, I needed to know how wide the <i>M</i> and the <i>S</i> were. The GLYPHMETRICFLOAT structure contains the dimensions I needed.</p>
<p>
For each display list that <b>wglUseFontOutlines</b> creates, it fills in a GLYPHMETRICFLOAT structure. This structure has two fields, <b>gmfBlackBoxX</b> and <b>gmfBlackBoxY</b>, which contain the smallest rectangle that completely encloses the glyph. The origin of the upper left corner of the enclosing rectangle is contained in <b>gmfptGlyphOrigin</b>. However, these were not the fields I needed.</p>
<p>
GLYPHMETRICFLOAT also contains two other fields, <b>gmfCellIncX</b> and <b>gmfCellIncY</b>, which specify the distance from the origin of the current character cell to the origin of the next character cell. <b>gmfCellIncY</b> is zero for most European languages. <b>gmfCellIncX</b> was the parameter I needed to properly translate the display lists so that the string was centered. This is the code:</p>
<pre><code>for (int i = 0 ; i &lt; MSDN_COUNT ; i ++)
{
 &nbsp; wglUseFontOutlines(hdc,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __toascii(MSDN_STRING[i]),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSDN_DISPLAYLIST+i,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0f,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.1f,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WGL_FONT_POLYGONS,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>&amp;m_agmfMSDN[i]</b>) ;

}

// Center the string on the screen.
double scale = 0.5 ;

<b>double widthMN = (m_agmfMSDN[0].gmfCellIncX + </b>

<b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_agmfMSDN[0].gmfCellIncX)* scale;</b>


glLoadIdentity();
glTranslated(0.0, -0.65, -3.0);
glRotated(m_angle.cy, 0.0, 1.0, 0.0);
glTranslated(-<b>widthMN</b>, 0.0, 0.0) ;
glScaled(scale, scale, scale) ;

glColor3ubv(byPink) ;
glCallList(MSDN_DISPLAYLIST) ;
glColor3ubv(byTeal) ;
glCallList(MSDN_DISPLAYLIST+1) ;
glColor3ubv(byBlue) ;
glCallList(MSDN_DISPLAYLIST+2) ;
glColor3ubv(byGreen) ;
glCallList(MSDN_DISPLAYLIST+3) ;
</code></pre>
<h2>Conclusion</h2>
<p>
<b>wglUseFontOutlines </b>makes adding 3-D fonts to your OpenGL applications easy. Because <b>wglUseFontOutlines</b> generates the 3-D fonts from existing TrueType fonts, you don't have to design new fonts and your application can take advantage of any TrueType font already installed on the system. Unlike Duke, <b>wglUseFontOutlines</b> exceeded my expectations. Unless you want to do transformations that require the vertices contained in the display lists or need more information than is provided in the GLYPHMETRICFLOAT structure, <b>wglUseFontOutlines</b> should also meet your expectations.</p>
<h2>Bibliography</h2>
<h3>Sources of Information on OpenGL</h3>
<p>
Crain, Dennis. <a href="msdn_opengl9.htm">"Windows NT OpenGL: Getting Started."</a> April 1994. (MSDN Library, Technical Articles, Platform Articles, GDI and OpenGL)</p>
<p>
Microsoft Win32 Software Development Kit (SDK) for Windows NT 3.5 <i>OpenGL Programmer's Reference</i>. </p>
<p>
Neider, Jackie, Tom Davis, and Mason Woo. <i>OpenGL Programming Guide: The Official Guide to Learning OpenGL, Release 1</i>. Reading, MA: Addison-Wesley, 1993. (This book is also known as the "Red Book.")</p>
<p>
OpenGL Architecture Review Board. <i>OpenGL Reference Manual: The Official Reference Document for OpenGL, Release 1</i>. Reading, MA: Addison-Wesley, 1992. (This book is also known as the "Blue Book.")</p>
<p>
Prosise, Jeff. "Advanced 3-D Graphics for Windows NT 3.5: Introducing the OpenGL Interface, Part I." <i>Microsoft Systems Journal</i> (October 1994, Volume 9, Number 10). (MSDN Library Archive Edition, Books and Periodicals)</p>
<p>
Prosise, Jeff. "Advanced 3-D Graphics for Windows NT 3.5: The OpenGL Interface, Part II." <i>Microsoft Systems Journal</i> (November 1994, Volume 9, Number 11). (MSDN Library Archive Edition, Books and Periodicals)</p>
<p>
Prosise, Jeff. "Understanding Modelview Transformations in OpenGL for Windows NT." <i>Microsoft Systems Journal</i> (February 1995, Volume 10, Number 2).</p>
<p>
Rogerson, Dale. <a href="msdn_gl1.htm">"OpenGL I: Quick Start."</a> December 1994. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl2.htm">"OpenGL II: Windows Palettes in RGBA Mode."</a> December 1994. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl3.htm">"OpenGL III: Building an OpenGL C++ Class."</a> January 1995. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl4.htm">"OpenGL IV: Color Index Mode."</a> January 1995. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl5.htm">"OpenGL V: Translating Windows DIBs."</a> January 1995. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl6.htm">"OpenGL VI: Rendering on DIBs with PFD_DRAW_TO_BITMAP."</a> April 1995. (MSDN Library, Technical Articles)</p>
<p>
Rogerson, Dale. <a href="msdn_gl7.htm">"OpenGL VII: Scratching the Surface of Texture Mapping."</a> April 1995. (MSDN Library, Technical Articles)</p>
<h3>Sources of Information on TrueType Fonts</h3>
<p>
Gery, Ron. "Using TrueType." (MSDN Library Archive Edition, Technical Articles, Windows Articles, GDI and OpenGL Articles, Windows [16-bit] Only)</p>
<p>
Gery, Ron. "Windows Font Mapping." (MSDN Library, Technical Articles, Windows Articles, GDI and OpenGL Articles)</p>
<p>
Gery, Ron. "GDI Objects." (MSDN Library, Technical Articles, Platform Articles, GDI and OpenGL Articles)</p>
<p>
Weise, David, and Dennis Adler. "TrueType and Microsoft Windows Version 3.1." (MSDN Library Archive Edition, Technical Articles, Platform Articles, GDI and OpenGL Articles)</p>
</BODY>
</HTML>

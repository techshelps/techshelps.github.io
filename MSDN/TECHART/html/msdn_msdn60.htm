<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 60: Executing Program Manager's File/Run Command</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn60"></a></sup>Tip 60: Executing Program Manager's File/Run Command</h1>
<p>
Created: April 17, 1995</p>
<h2>Abstract</h2>
<p>
From the Windows® Program Manager, you can select the File/Run menu command to execute any Windows-based application. This article explains how you can use this same File/Run command from within a Visual Basic® application.</p>
<h2>The File/Run Command</h2>
<p>
To execute Program Manager's File/Run menu command, we must send a special message to Program Manager. First we determine the handle to Program Manager, then we use the <b>SendMessage</b> function to actually invoke the File/Run menu selection.</p>
<p>
We can use the Windows® application programming interface (API) <b>FindWindow</b> function to retrieve the handle for Program Manager. To declare the <b>FindWindow</b> function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form (note that this statement must be typed as a single line of code):</p>
<pre><code>Declare Function FindWindow Lib "User" (ByVal lpClassName As String, ByVal 
 &nbsp; lpWindowName As Long) As Integer
</code></pre>
<p>
To call <b>FindWindow</b>, you must pass it the following two arguments:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=19%><i>lpClassName</i></td>
<td width=81%>A string (or long pointer to a string) that contains the window's class name. A value of zero is used to accept any class.</td>
</tr>
<tr valign=top>
<td width=19%><i>lpWindowName</i></td>
<td width=81%>A string (or long pointer to a string) that contains the window's title bar text. A value of zero is used to accept any window title.</td>
</tr>
</table><br>
<p>
Because we want to execute a command within Program Manager, we call the <b>FindWindow</b> function with this statement:</p>
<pre><code>RunFile = FindWindow("ProgMan", 0)
</code></pre>
<p>
The window's handle will be returned in the <i>RunFile</i> variable. We can then call the <b>SendMessage</b> function.</p>
<p>
The <b>SendMessage</b> function can be used to send a message to another window. In our case, we want to tell Program Manager to execute one of its menu selections, namely File/Run. The <b>Declare</b> statement for <b>SendMessage</b> is as follows (note that it must be typed as a single line of code):</p>
<pre><code>Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal wMsg 
 &nbsp; As Integer, ByVal wParam As Integer, ByVal lParam As Long) As Long
</code></pre>
<p>
As you can see, the <b>SendMessage</b> function requires four arguments. These arguments are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hWnd</i></td>
<td width=87%>An integer value containing the window's handle. The message will be sent to this window.</td>
</tr>
<tr valign=top>
<td width=13%><i>wMsg</i></td>
<td width=87%>An integer value containing the message to send to the window.</td>
</tr>
<tr valign=top>
<td width=13%><i>wParam</i></td>
<td width=87%>A 16-bit value containing additional message-dependent information, if required.</td>
</tr>
<tr valign=top>
<td width=13%><i>lParam</i></td>
<td width=87%>A 32-bit value containing additional message-dependent information, if required.</td>
</tr>
</table><br>
<p>
The Windows SDK Help File contains a description of each windows message you can use with the <b>SendMessage</b> function. For now, the message we want to send to Program Manager is represented by the value 107, which initiates the File/Run menu selection in Program Manager. In the example program below, the <b>SendMessage</b> function executes the File/Run command, then the <b>DoEvents</b> statement waits until that command has been processed, and then control returns to the program, with Form1 set to have the focus.</p>
<h2>Example Program</h2>
<p>
The following program executes the File/Run command from Program Manager. When you run this program, click on the command button. The File/Run dialog box will be called up on your screen. Select any Windows-based application you wish to run. After that application has terminated, control returns to this program.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Declare Function FindWindow Lib "User" (ByVal lpClassName As String, ByVal 
 &nbsp; lpWindowName As Long) As Integer

Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal wMsg 
 &nbsp; As Integer, ByVal wParam As Integer, ByVal lParam As Long) As Long
Const WM_COMMAND = &amp;H111
</code></pre>
</li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Execute File/Run".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Dim RunFile As Integer
 &nbsp;&nbsp; Dim Result As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; RunFile = FindWindow("ProgMan", 0)
 &nbsp;&nbsp; If RunFile &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result = SendMessage(RunFile, WM_COMMAND, 107, 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoEvents
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form1.SetFocus
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

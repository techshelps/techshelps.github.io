<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 207: Retrieving the Short (MS-DOS) Filename from a Long Filename in Windows 95</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn207"></a></sup>Tip 207: Retrieving the Short (MS-DOS) Filename from a Long Filename in Windows 95</h1>
<p>
February 28, 1996</p>
<h2>Abstract</h2>
<p>
Under the Microsoft® Windows® 95 operating system, you can assign a long filename to a file instead of being limited to an 8.3 format. This article explains how to retrieve the short (MS-DOS®) filename assigned to a long filename from within a Microsoft Visual Basic® version 4.0 application.</p>
<h2>Short and Long Filenames</h2>
<p>
When you save a file to disk in MS-DOS® or the Microsoft® Windows® 3.<i>x</i> operating system, you need to specify the filename in an 8.3 format (that is, the name of the file is limited to an eight-character name followed by a period and a three-character filename extension). However, the Microsoft Windows 95 operating system lets you assign a long filename to any file or directory you create.</p>
<p>
A long filename can be up to 255 characters in length and can contain individual words describing the file you are creating. For example, a word-processing document might be assigned a long filename (for example, Chapter 1: Working with Long Filenames).</p>
<p>
In a Microsoft Visual Basic® version 4.0 application, you may need to manipulate a file by its short (MS-DOS) filename. The example program below provides one method of retrieving the short filename when you know the file's long filename.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve the short (MS-DOS) filename assigned to a long filename.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim ShortName As String
 &nbsp;&nbsp; Dim LongName As String
 &nbsp;&nbsp; Dim I As Integer

 &nbsp;&nbsp; For I = 0 To File1.ListCount - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If File1.Selected(I) = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LongName = "c:\" &amp; File1.List(I)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next I

 &nbsp;&nbsp; ShortName = GetShortNameFromLongName(LongName)
 &nbsp;&nbsp; Text1.Text = LongName
 &nbsp;&nbsp; Text2.Text = ShortName

End Sub
</code></pre>
</li>
<li>
Add a <b>File List Box</b> control to Form1. File1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default.<br><br></li>
<li>
Create a new function called <b>GetShortNameFromLongName</b>. Add the following code to this function:<pre><code>Function GetShortNameFromLongName(strLFN As String) As String
On Error GoTo Err_GetShortNameFromLongName

 &nbsp;&nbsp; Dim strWork As String
 &nbsp;&nbsp; Dim strSFNWork As String
 &nbsp;&nbsp; Dim strConvertedFN As String
 &nbsp;&nbsp; Dim strPathPart As String
 &nbsp;&nbsp; Dim strChar As String
 &nbsp;&nbsp; Dim strPathWork As String
 &nbsp;&nbsp; Dim I As Integer
 &nbsp;&nbsp; Dim intFirstSlash As Integer
 &nbsp;&nbsp; Dim fWork As Boolean

 &nbsp;&nbsp; intFirstSlash = InStr(strLFN, "\")

 &nbsp;&nbsp; If intFirstSlash = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetShortNameFromLongName = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If

 &nbsp;&nbsp; strWork = Left(strLFN, intFirstSlash)

 &nbsp;&nbsp; I = intFirstSlash + 1

 &nbsp;&nbsp; fWork = True

 &nbsp;&nbsp; Do While fWork
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If I &gt; Len(strLFN) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fWork = False
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strPathPart = sfnGetToken(Mid(strLFN, I), "\")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strSFNWork = strWork &amp; strPathPart
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strConvertedFN = GetShortNameSection(strSFNWork)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Len(strConvertedFN) = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetShortNameFromLongName = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strWork = strWork &amp; strConvertedFN &amp; "\"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I = I + Len(strPathPart) + 1
 &nbsp;&nbsp; End If

 &nbsp;&nbsp; Loop

 &nbsp;&nbsp; GetShortNameFromLongName = Left(strWork, Len(strWork) - 1)

Exit_GetShortNameFromLongName:
 &nbsp;&nbsp; Exit Function

Err_GetShortNameFromLongName:
 &nbsp;&nbsp; MsgBox "Error: " &amp; Err &amp; ", " &amp; Error$, , "GetShortNameFromLongName_Err"
 &nbsp;&nbsp; Resume Exit_GetShortNameFromLongName

End Function
</code></pre>
</li>
<li>
Create a new function called <b>GetShortNameSection</b>. Add the following code to this function (note that each line of code must be typed as a single line of text):<pre><code>Private Function GetShortNameSection(strLFN As String) As String
On Error GoTo Err_GetShortNameSection

 &nbsp;&nbsp; Const INVALID_HANDLE_VALUE = -1

 &nbsp;&nbsp; Dim lngRet As Long
 &nbsp;&nbsp; Dim intNullPos As Integer
 &nbsp;&nbsp; Dim WFD As WIN32_FIND_DATA

 &nbsp;&nbsp; lngRet = FindFirstFile(strLFN, WFD)
 &nbsp;&nbsp; If lngRet = INVALID_HANDLE_VALUE Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetShortNameSection = ""
 &nbsp;&nbsp; Else

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intNullPos = InStr(WFD.cAlternate, vbNullChar)

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If intNullPos &lt;&gt; 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetShortNameSection = Left(WFD.cAlternate, intNullPos - 1)
 &nbsp;&nbsp; Else

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetShortNameSection = Left(WFD.cFileName, InStr(WFD.cFileName, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbNullChar) - 1)
 &nbsp;&nbsp; End If

 &nbsp;&nbsp; End If

Exit_GetShortNameSection:
 &nbsp;&nbsp; Exit Function

Err_GetShortNameSection:
 &nbsp;&nbsp; MsgBox "Error: " &amp; Err &amp; ", " &amp; Error$, , "GetShortNameSection_Err"
 &nbsp;&nbsp; Resume Exit_GetShortNameSection

End Function
</code></pre>
</li>
<li>
Create a new function called <b>sfnGetToken</b>. Add the following code to this function (note that the Private line must be typed as a single line of code):<pre><code>Private Function sfnGetToken(strTest As String, strDelimiter As String) 
 &nbsp; As String
 &nbsp;&nbsp; Dim intPos As Integer

 &nbsp;&nbsp; intPos = InStr(strTest, strDelimiter)
 &nbsp;&nbsp; If intPos = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfnGetToken = strTest
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfnGetToken = Left(strTest, intPos - 1)
 &nbsp;&nbsp; End If

End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing&nbsp; Select a long filename from the <b>File List Box</b> control. Click the <b>Command Button</b> control. The long filename appears in the first <b>Text Box</b> control, and the short (MS-DOS) filename is displayed in the second <b>Text Box</b> control.</p>
<h2>Additional References</h2>
<p>
"Long Filenames." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
<a href="msdn_longfile.htm">"Making Room for Long Filenames."</a></p>
</BODY>
</HTML>

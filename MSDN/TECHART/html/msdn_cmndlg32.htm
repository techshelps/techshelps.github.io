<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Common Dialogs Under Windows 95</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1></h1>
<h1></h1>
<h1></h1>
<h1></h1>
<h1></h1>
<h1></h1>

<h1><a name="msdn_cmndlg32"></a>Using the Common Dialogs Under Windows 95</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: October 25, 1994</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3018">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the CMNDLG32 sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® 95 operating system has a new set of common dialog boxes that conform to the look and feel of the Windows 95 shell. In general, if you are already an old hand at programming the common dialogs supported in Microsoft Windows version 3.1 and Microsoft Windows NT™ (versions 3.1 and 3.5), you will have little or no work to do to support these new dialog boxes. Aside from the new look of the dialog boxes, some new functionality has been added and some changes have been made. This article is intended to give the reader a "walking tour" of the new common dialogs, offer information about how to use the new functions provided for the Windows 95 common dialogs, and offer a solution for those who are using templates and will be using one executable to run under both Windows NT 3.5 and Windows 95.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The information contained in this article about the new common dialogs for Windows 95 is based on preliminary information that is subject to change before the final release of Windows 95. I will update this article with any new information about the common dialogs as I receive it.</p>
<h2>Introduction</h2>
<p>
If you read the title of this article and the phrase "Oh no! Don't tell me that I have to change my common dialog code!" sprang into your head (or screamed from your lips), don't worry. The first thing you should know about the common dialogs and the Microsoft® Windows® 95 operating system is that, if you are using them in their simple form, you should not have to make any changes for the dialogs to work. A simple recompile will include the correct dialog resources (if you are including the templates and want the new-look dialogs) and allow you to "automagically" get the new look and feel. If you aren't using templates or you want the old-look dialogs, you don't even have to recompile to see them. For example, the common dialog sample that I wrote for Windows NT many moons ago worked without a hitch, with no changes and no recompilation.</p>
<p>
If you are using a template and want to ensure that you can still use the common dialogs, you can do that too. In fact, some of the changes made to the templates actually make it easier for the developer (in my opinion, of course) to use them. I am going to take you on a walking tour of the new dialog boxes and let you in on the changes that have been made to them. I am also including a sample application that you can use to exercise with these new common dialog boxes yourself.</p>
<p>
So, lace up those walking shoes and follow me.</p>
<h2>First Stop: Open A File and Save File As</h2>
<p>
The first stop in our walking tour is the Open A File and Save File As common dialog boxes. For those of you who have not used the common dialog boxes before, Open A File and Save File As use the same dialog box template, and both use the <b>OPENFILENAME</b> structure. When you want to display the Open A File dialog box, you fill out the <b>OPENFILENAME</b> structure and call the <b>GetOpenFileName</b> function; when you want to display the Save File As dialog box, you also fill out the <b>OPENFILENAM</b>E structure, but instead call the <b>GetSaveFileName</b> function.</p>
<p>
From the viewpoint of a developer, the Open A File and Save File As common dialog boxes present some of the most significant changes, as shown in the following figures. You will notice that these dialog boxes support long filenames (see Figure 2) and offer a graphical representation of the current folder, using a list view control. Figure 1 shows the Open A File dialog box in what is referred to as "list" mode.</p>
<p>
<img src="cmndlg32_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Open A File common dialog box (list mode)</b></p>
<p>
If you click the rightmost toolbar button, you will see the information for all the objects in the currently selected folder displayed in the list view's "report" mode. Report mode displays the details about each object (file) in the folder (directory). In Figure 2, the Save File As dialog box, we see not only the name of the object but also the size, type, and last modification date of the object.</p>
<p>
<img src="cmndlg32_2.gif" border=0></p>
<p class=label>
<b>Figure 2. File Save As common dialog box (report mode)</b></p>
<h3>New Flags</h3>
<p>
The <b>OPENFILENAME</b> structure supports three new flags:
<ul type=disc>
<li>
OFN_EXPLORER—Use the Explorer-like new-look Open A File dialog box template.<br><br></li>
<li>
OFN_NODEREFERENCELINKS—Do not dereference shell links (also known as shortcuts). By default, choosing a shell link causes it to be dereferenced by the shell.<br><br></li>
<li>
OFN_LONGNAMES—Use long filenames.</li>
</ul>
<h3>Tapping into GetOpenFileName via WM_NOTIFY</h3>
<p>
Under Windows 95, the WM_NOTIFY message is sent to the hook procedure for the Open A File and Save File As dialog boxes whenever actions such as selection or a change are made. If you want the ability to monitor what is happening within the dialog box, you should enable the hook into the dialog box via the OFN_ENABLEHOOK flag and supply the name of the hook procedure. The hook procedure will receive the WM_NOTIFY message with the <b>OFNOTIFY</b> structure packaged into its <b>LPARAM</b>.</p>
<p>
The <b>OFNOTIFY</b> structure contains the following members:
<ul type=disc>
<li>
<b>NMHDR</b> <i>hdr</i>—Contains information about the notification message.<br><br></li>
<li>
<b>LPOPENFILENAME</b> <i>lpOFN</i>—A long pointer to the <b>OPENFILENAME</b> structure that was used to create the dialog box.<br><br></li>
<li>
<b>LPSTR</b> <i>pszFile</i>—The current filename. This member may be NULL.</li>
</ul>
<p>
Once your hook procedure receives the WM_NOTIFY message, it can determine the current action via the .<i>code</i> member of the <b>NMHDR</b> structure. The code can be one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%>CDN_INITDONE</td>
<td width=67%>Sent when initialization has finished via processing within the WM_INITDIALOG message. All controls have been moved.</td>
</tr>
<tr valign=top>
<td width=33%>CDN_SELCHANGE</td>
<td width=67%>Sent when the current selection has changed. The user has clicked a file or folder in the file list.</td>
</tr>
<tr valign=top>
<td width=33%>CDN_FOLDERCHANGE</td>
<td width=67%>Sent when the current folder has changed.</td>
</tr>
<tr valign=top>
<td width=33%>CDN_SHAREVIOLATION</td>
<td width=67%>Sent when a sharing violation has occurred.</td>
</tr>
<tr valign=top>
<td width=33%>CDN_HELP</td>
<td width=67%>Sent when the user has clicked the Help button.</td>
</tr>
<tr valign=top>
<td width=33%>CDN_FILEOK</td>
<td width=67%>Sent when the user has clicked the OK button. To prevent the common dialog from exiting, the result should be nonzero via a call to <b>SetWindowLong</b>(<i>hdlg</i>, DWL_MSGRESULT, <i>lResult</i>).</td>
</tr>
<tr valign=top>
<td width=33%>CDN_TYPECHANGE</td>
<td width=67%>Sent when the file type changes via the "Files of type" combo box.</td>
</tr>
</table><br>
<h3>Messages and Macros</h3>
<p>
Along with the new notifications, there are also some new messages (with handy-dandy associated macros) that the developer can use to retrieve information about the status of the Open A File and Save File As dialog boxes. This section lists (I can hear Nigel screaming already, "No! Not another list!") these new messages, with an explanation of the parameters they require and their primary function.</p>
<h4>CDM_GETSPEC</h4>
<pre><code>wParam = cbmax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ maximum number of characters of the text buffer
lParam = psz;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ pointer to a text buffer
</code></pre>
<p>
<b>Description:</b> Gets the current file specification.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>cbmax</i>) is the maximum number of characters of the text buffer (including the NULL terminator). <i>lParam</i> (<b>LPSTR</b> <i>psz</i>) is a pointer to the text buffer that will be filled in with the file specification.</p>
<p>
<b>Return value:</b> The number of characters used in the buffer, or 0 if an error occurred.</p>
<p>
<b>Macro:</b> (<b>int) CommDlg_OpenSave_GetSpec</b>(<i>hDlg, psz</i>, <i>cbmax</i>);</p>
<h4>CDM_GETFILEPATH</h4>
<pre><code>wParam = cbmax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ maximum number of characters of the text buffer
lParam = psz;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ pointer to a text buffer
</code></pre>
<p>
<b>Description:</b> Gets the current file path.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>cbmax</i>) is the maximum number of characters of the text buffer (including the NULL terminator). <i>lParam</i> (<b>LPSTR</b> <i>psz</i>) is a pointer to the text buffer that will be filled in with the path information.</p>
<p>
<b>Return value:</b> The number of characters used in the buffer, or 0 if an error occurred.</p>
<p>
<b>Macro:</b> (<b>int) CommDlg_OpenSave_GetFilePath</b>(<i>hDlg, psz</i>, <i>cbmax</i>);</p>
<h4>CDM_GETFOLDERPATH</h4>
<pre><code>wParam = cbmax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ maximum number of characters of the text buffer
lParam = psz;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ pointer to a text buffer 
</code></pre>
<p>
<b>Description:</b> Gets the current folder path.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>cbmax</i>) is the maximum number of characters of the text buffer (including the NULL terminator). <i>lParam</i> (<b>LPSTR</b> <i>psz</i>) is a pointer to the text buffer that will be filled in with the current folder's path information.</p>
<p>
<b>Return value:</b> The number of characters used in the buffer, or 0 if an error occurred.</p>
<p>
<b>Macro:</b> (<b>int) CommDlg_OpenSave_GetFolderPath</b>(<i>hDlg, psz</i>, <i>cbmax</i>);</p>
<h4>CDM_GETFOLDERIDLIST</h4>
<pre><code>wParam = cbmax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ size of the ITEMIDLIST buffer
lParam = pidl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\ pointer to the ITEMIDLIST buffer 
</code></pre>
<p>
<b>Description:</b> Gets the <b>ITEMIDLIST</b> for the current folder.</p>
<p>
<b>Parameters:</b> <i>wParam</i> (<b>int</b> <i>cbmax</i>) is the size of the <b>ITEMIDLIST</b> buffer. <i>lParam</i> (<b>LPVOID</b> <i>pidl</i>) is a pointer to the <b>ITEMIDLIST</b> buffer that will be filled in.</p>
<p>
<b>Return value:</b> The length of the buffer used, or 0 if an error occurred.</p>
<p>
<b>Macro:</b> (<b>int) CommDlg_OpenSave_GetFolderIDList</b>(<i>hDlg, pidl</i>, <i>cbmax</i>);</p>
<h3>Using the OFN_EXPLORER Flag</h3>
<p>
In the information above, I glazed over a new flag, OFN_EXPLORER. I really shouldn't have done that because there is more to it than meets the eye. In previous versions of Windows (version 3.1, and Windows NT 3.1 and 3.5), if you wanted to include the template for a common dialog box to change it in some way, you needed to actually have a copy of that .DLG file and <b>#include</b> it in your resource file. Well, if you want to include the new Open A File template, you no longer need to do this. You simply include the OFN_EXPLORER flag ( | OFN_EXPLORER) and create a dialog template that includes only the items you want to add to the dialog box. If the OFN_EXPLORER flag is set in the <i>.flags</i> field of the <b>OPENFILENAME</b> structure, the <i>.hInstance</i>, <i>.lpfnHook</i>, and <i>.lpTemplateName</i> fields will be interpreted as follows:
<ul type=disc>
<li>
If the OFN_ENABLETEMPLATE flag is set in the <i>.flags</i> field, the <i>.lpTemplateName</i> field is the name of the dialog template and the <i>.hInstance</i> field is the module instance. The dialog template must have the WS_CHILD style set, or <b>GetOpenFileName</b> will fail. The common dialog handler creates a child or subdialog box and the standard dialog box. This subdialog box is placed in the upper-left corner of the standard dialog box. The subdialog box will be resized to fit all the controls in the standard dialog box and the new controls in the subdialog box. Thus the <i>hDlg</i> passed to the application's hook function is the child of the dialog box containing the standard controls. If your application must communicate with one of the standard controls from the hook procedure, it should call <b>GetParent</b> on the <i>hDlg</i> passed to the hook procedure. For example, to get the text from the "Types" combo box, use:</li>
</ul>
<pre><code>GetDlgItemText(GetParent(hDlg), cmb1, buf, MAX_PATH);
</code></pre>
<ul type=disc>
<li>
If the OFN_ENABLETEMPLATEHANDLE flag is set in the <i>.flags</i> field, the <i>.hInstance</i> field should contain the memory handle for the dialog template.<br><br></li>
<li>
If the OFN_ENABLEHOOK flag is set in the <i>.flags</i> field, the <i>.lpfnHook</i> field is a DLGPROC (not an LPOFNHOOKPROC) that is associated with the subdialog box.<br><br></li>
<li>
If neither the OFN_ENABLETEMPLATE nor the OFN_ENABLETEMPLATEHANDLE flag is set in the <i>.flags</i> field, an empty template will be created by the common dialog handler.</li>
</ul>
<p>
For example, the dialog template below was used to add some fields to the Save File As dialog box:</p>
<pre><code>IDD_COMDLG32 DIALOG DISCARDABLE&nbsp; 0, 0, 300, 74
STYLE WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | DS_3DLOOK
FONT 8, "MS Sans Serif"
BEGIN
 &nbsp;&nbsp; LTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Path:",-1,28,4,36,8
 &nbsp;&nbsp; LTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "This is to the left",-1,4,16,20,40
 &nbsp;&nbsp; LTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Selected:",-1,32,49,40,8
 &nbsp;&nbsp; EDITTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IDE_SELECTED,74,47,200,12,ES_AUTOHSCROLL
 &nbsp;&nbsp; LTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "This is to the right.",-1,232,20,65,8
 &nbsp;&nbsp; LTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "",stc32,28,16,204,31
 &nbsp;&nbsp; EDITTEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IDE_PATH,65,2,200,12,ES_AUTOHSCROLL
END
</code></pre>
<p>
Once I created this template, I used the notification code in the section above to trap the notifications and to update the new fields that I added. I also needed to include the flag to enable the template, OFN_ENABLETEMPLATE, when I filled in the <b>OPENFILENAME</b> structure.</p>
<p>
In the code above, notice the next-to-last resource. It is a control with an ID of <i>stc32</i>. In the common dialog handler, this ID has a special purpose: to let the common dialog handler know where to place all of the standard controls. If there is no <i>stc32</i> control, the common dialog handler assumes all new controls added by the application-defined template should be placed below the standard controls. If the developer includes the <i>stc32</i> control, the common dialog handler will look at the size of this control. If it is too small to hold all the standard controls, the common dialog handler will move the controls to the right of or below the <i>stc32</i> control to make room for the new controls.</p>
<h3>Example: Using the New Notifications and Macros</h3>
<p>
Since I've given you this list of new notifications and messages, it seems only fair that I should illustrate how you can use them. Here is a small code snippet from the COMDLG32 sample (from the Windows 95 SDK) that demonstrates how you can trap the dialog box notifications and use some of the new messages. This sample dialog box contains two extra edit boxes that display the currently selected file and the currently open folder.</p>
<pre><code>BOOL NEAR PASCAL TestNotify(HWND hDlg, LPOFNOTIFY pofn)
{
  switch (pofn-&gt;hdr.code)
  {
 &nbsp;&nbsp; // The selection has changed.
 &nbsp;&nbsp; case CDN_SELCHANGE:
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; char szFile[MAX_PATH];

 &nbsp;&nbsp;&nbsp;&nbsp; // Get the file specification from the common dialog.
 &nbsp;&nbsp;&nbsp;&nbsp; if (CommDlg_OpenSave_GetSpec(GetParent(hDlg),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szFile, sizeof(szFile)) &lt;= sizeof(szFile))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the dialog item to reflect this.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemText(hDlg, IDE_SELECTED, szFile);
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp; // Get the path of the selected file.
 &nbsp;&nbsp;&nbsp;&nbsp; if (CommDlg_OpenSave_GetFilePath(GetParent(hDlg),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szFile, sizeof(szFile)) &lt;= sizeof(szFile))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display this path in the appropriate box.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemText(hDlg, IDE_PATH, szFile);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;

 &nbsp;&nbsp; // A new folder has been opened.
 &nbsp;&nbsp; case CDN_FOLDERCHANGE:
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; char szFile[MAX_PATH];

 &nbsp;&nbsp;&nbsp;&nbsp; if (CommDlg_OpenSave_GetFolderPath(GetParent(hDlg),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szFile, sizeof(szFile)) &lt;= sizeof(szFile))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display this new path in the appropriate box.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemText(hDlg, IDE_SELECTED, szFile);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;

 &nbsp;&nbsp; // The "Help" pushbutton has been pressed.
 &nbsp;&nbsp; case CDN_HELP:
 &nbsp;&nbsp;&nbsp;&nbsp; MessageBox(hDlg, "Got the Help button notify.", "ComDlg32 Test", MB_OK);
 &nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; // The 'OK' pushbutton has been pressed.
 &nbsp;&nbsp; case CDN_FILEOK:
 &nbsp;&nbsp;&nbsp;&nbsp; // Update the appropriate box.
 &nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemText(hDlg,IDE_SELECTED, pofn-&gt;lpOFN-&gt;lpstrFile);
 &nbsp;&nbsp;&nbsp;&nbsp; SetWindowLong(hDlg, DWL_MSGRESULT, 1L);
 &nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; // Received a sharing violation.
 &nbsp;&nbsp; case CDN_SHAREVIOLATION:
 &nbsp;&nbsp;&nbsp;&nbsp; // Update the appropriate box.
 &nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemText(hDlg, IDE_SELECTED, pofn-&gt;pszFile);
 &nbsp;&nbsp;&nbsp;&nbsp; MessageBox(hDlg, "Got a sharing violation notify.", "ComDlg32 Test", 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MB_OK);
 &nbsp;&nbsp;&nbsp;&nbsp; break;
  }

  return(TRUE);
}
</code></pre>
<h2>Font</h2>
<p>
Next on our walking tour is the Font dialog box. As you can see in Figure 3, this dialog box has not changed significantly from the previous versions of Windows (so this will be a really short stop). The new dialog box has the three-dimensional look and the new Help and Close buttons in the caption bar.</p>
<p>
<img src="cmndlg32_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Font common dialog box</b></p>
<p>
There are (literally) a couple of new flags that you can specify when you fill out the <b>CHOOSEFONT</b> structure:
<ul type=disc>
<li>
CF_SELECTSCRIPT—Allows the user to select the script of the font.<br><br></li>
<li>
CF_NOSCRIPTSEL—Disallows script selection by graying out the Script combo box.</li>
</ul>
<h2>Color</h2>
<p>
As with the Font dialog box, the Color dialog box will also be a short stop. Figure 4 shows what the new dialog box looks like (looks a lot like the previous version, doesn't it?). Here again we have the new three-dimensional look and the Help and Close buttons in the caption bar.</p>
<p>
<img src="cmndlg32_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Color common dialog box</b></p>
<p>
This dialog box also has two new support flags:
<ul type=disc>
<li>
CC_SOLIDCOLOR—Directs the shell to use the nearest solid color to the color chosen.<br><br></li>
<li>
CC_ANYCOLOR—Allows the user to choose a non-VGA color on a palette display.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;At the time of the writing of this article, the CC_ANYCOLOR option was not implemented.</p>
<h2>Find and Replace</h2>
<p>
We aren't even going to stop here long enough for a bathroom break. These two dialog boxes haven't changed functionally at all. I am including the screen shots purely for the sake of consistency. Notice that the only real difference is the three-dimensional look and the Help and Close buttons.</p>
<p>
<img src="cmndlg32_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Find common dialog box</b></p>
<p>
<img src="cmndlg32_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Replace common dialog box</b></p>
<h2>Print</h2>
<p>
Three different dialog boxes provide for printing by the common dialog library. The first dialog box that we'll look at, Print Setup, looks and behaves much like the Windows 3.1 version. It allows you to view and change information about the printers that you have installed, set the paper size and source, and set the orientation. The one difference in the dialog boxes is that the new one, shown in Figure 7, has a button that will bring up the printer properties property sheet for the currently selected printer.</p>
<p>
<img src="cmndlg32_7.gif" border=0></p>
<p class=label>
<b>Figure 7. Print Setup common dialog box</b></p>
<p>
Figure 8 shows the property sheet that is displayed when the user queries the printer properties. There are six different pages of information about the printer that you can view or change. These pages are brought into the foreground by clicking the associated tab. So, if you wanted to change the paper that is used, you would click the tab labeled Paper. (This dialog box may change before the final release of Windows 95.)</p>
<p>
<img src="cmndlg32_8.gif" border=0></p>
<p class=label>
<b>Figure 8. Printer properties for the Print Setup common dialog box</b></p>
<p>
A new common dialog box for Windows 95 in the area of printing is Page Setup. This dialog box (Figure 9) allows the user to set the paper size, source, orientation, and margins for printing. In the previous versions of Windows, the code for page setup was included in the dialog template for the Print common dialog box. The picture of the page shown at the top of the dialog box gives the user an idea of what the printed output will look like.</p>
<p>
<img src="cmndlg32_9.gif" border=0></p>
<p class=label>
<b>Figure 9. Page Setup common dialog box</b></p>
<p>
From a programming standpoint, using the Page Setup dialog box is very much like programming the other common dialogs: you fill out a structure and make a function call. The new structure provided for the Page Setup dialog box is <b>PAGESETUPDLG</b>.</p>
<pre><code>typedef struct tagPSDA
{
 &nbsp;&nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp; lStructSize;
 &nbsp;&nbsp; HWND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwndOwner;
 &nbsp;&nbsp; HGLOBAL&nbsp;&nbsp; hDevMode;
 &nbsp;&nbsp; HGLOBAL&nbsp;&nbsp; hDevNames;
 &nbsp;&nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp; Flags;
 &nbsp;&nbsp; POINT&nbsp;&nbsp;&nbsp;&nbsp; ptPaperSize;
 &nbsp;&nbsp; RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rtMinMargin;
 &nbsp;&nbsp; RECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rtMargin;
 &nbsp;&nbsp; HINSTANCE hInstance;
 &nbsp;&nbsp; LPARAM&nbsp;&nbsp;&nbsp; lCustData;
 &nbsp;&nbsp; LPPAGESETUPHOOK lpfnPageSetupHook;
 &nbsp;&nbsp; LPPAGEPAINTHOOK lpfnPagePaintHook;
 &nbsp;&nbsp; LPCSTR&nbsp;&nbsp;&nbsp; lpPageSetupTemplateName;
 &nbsp;&nbsp; HGLOBAL&nbsp;&nbsp; hPageSetupTemplate;
} PAGESETUPDLG, * LPPAGESETUPDLG;
</code></pre>
<p>
The following table explains the parameters of the <b>PAGESETUPDLG</b> structure. Because of the amount of information included here, I'm ignoring all conventions and am breaking some of the parameter and flag names. Remember that in code they're one word.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Parameter</b></td>
<td class=label colspan=2 width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%><i>lStructSize</i></td>
<td colspan=2 width=80%>The size of the <b>PAGESETUPDLG</b> structure.</td>
</tr>
<tr valign=top>
<td width=20%><i>hwndOwner</i></td>
<td colspan=2 width=80%>The handle to the window that owns this dialog box.</td>
</tr>
<tr valign=top>
<td width=20%><i>hDevMode</i></td>
<td colspan=2 width=80%>The handle to a movable global memory object that contains a <b>DEVMODE</b> structure. If this member is NULL, the system will allocate memory for the structure, initialize it, and return the handle to it.</td>
</tr>
<tr valign=top>
<td width=20%><i>hDevNames</i></td>
<td colspan=2 width=80%>The handle to a global memory object that contains a <b>DEVNAMES</b> structure. This structure specifies information such as the driver name, printer name, and output port name. If this member is NULL, the system will allocate memory for the structure, initialize it, and return the handle to it.</td>
</tr>
<tr valign=top>
<td width=20%><i>Flags</i></td>
<td colspan=2 width=80%>The dialog box initialization flags. This member can be a combination of the following values:</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%><b>Value</b></td>
<td width=42%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_MINMARGINS</td>
<td width=42%>Use the data in the <i>rtMinMargin</i> member for the minimum margins.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_MARGINS</td>
<td width=42%>Use the data in the <i>rtMargin</i> member for the margins.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_INTHOUSANDTHSOF<br>
INCHES</td>
<td width=42%>Specify margins in thousandths of inches.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_INHUNDREDTHSOF<br>
MILLIMETERS</td>
<td width=42%>Specify margins in hundredths of millimeters.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DISABLEMARGINS</td>
<td width=42%>Disable the Margins edit boxes.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DISABLEPRINTER</td>
<td width=42%>Disable the Printer button.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_NOWARNING</td>
<td width=42%>Prevent the warning message from being displayed when there is no default printer.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DISABLEORIENTATION</td>
<td width=42%>Disable the orientation radio buttons.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_RETURNDEFAULT</td>
<td width=42%>Cause <b>PageSetupDlg</b> to return <b>DEVMODE</b> and <b>DEVNAMES</b> structures that are initialized for the system default printer without displaying a dialog box. This works as <b>PrintDlg</b> does with the same flag, PD_RETURNDEFAULT, specified.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DISABLEPAPER</td>
<td width=42%>Disable the paper selection combo box.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_SHOWHELP</td>
<td width=42%>Show the Help button.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_ENABLEPAGESETUPHOOK</td>
<td width=42%>Enable the hook function specified by <i>lpfnPageSetupHook</i>.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_ENABLEPAGESETUP<br>
TEMPLATE</td>
<td width=42%>Cause the system to create the dialog box by using the dialog template box identified by <i>hInstance </i>and <i>lpPageSetupTemplateName</i>.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_ENABLEPAGESETUP<br>
TEMPLATEHANDLE</td>
<td width=42%>Indicate that a dialog box template has already been loaded and the template that should be used is identified by <i>hPageSetupTemplate</i>.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DEFAULTMINMARGINS</td>
<td width=42%>Set the minimum margins to the default of 0", 0", 0", 0".</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_ENABLEPAGEPAINTHOOK</td>
<td width=42%>Enable the hook function specified by <i>lpfnPagePaintHook</i>.</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=38%>PSD_DISABLEPAGEPAINTING</td>
<td width=42%>Do not show the page as painted.</td>
</tr>
<tr valign=top>
<td width=20%><i>ptPaperSize</i></td>
<td colspan=2 width=80%>The paper size. This member will be filled in with the user's chosen paper size.</td>
</tr>
<tr valign=top>
<td width=20%><i>rtMinMargin</i></td>
<td colspan=2 width=80%>The minimum margin.</td>
</tr>
<tr valign=top>
<td width=20%><i>rtMargin</i></td>
<td colspan=2 width=80%>The margin chosen by the user.</td>
</tr>
<tr valign=top>
<td width=20%><i>hInstance</i></td>
<td colspan=2 width=80%>The instance that owns this dialog box.</td>
</tr>
<tr valign=top>
<td width=20%><i>lCustData</i></td>
<td colspan=2 width=80%>Points to an application's custom data for the dialog box. This information is passed to the hook function pointed to by <i>lpfnHook</i> in the <i>lParam</i> parameter of the WM_INITDIALOG message.</td>
</tr>
<tr valign=top>
<td width=20%><i>lpfnPageSetupHook</i></td>
<td colspan=2 width=80%>Points to the exported function that hooks dialog messages if the application alters the Page Setup dialog box. This member is ignored unless the <i>Flags</i> member specifies PSD_ENABLEPAGESETUPHOOK.</td>
</tr>
<tr valign=top>
<td width=20%><i>lpfnPagePaintHook</i></td>
<td colspan=2 width=80%>Points to the exported function that hooks dialog messages that are used in painting the Page Setup dialog box. This member is ignored unless the <i>Flags</i> member specifies PSD_ENABLEPAGEPAINTHOOK.</td>
</tr>
<tr valign=top>
<td width=20%><i>lpPageSetup<br>
TemplateName</i></td>
<td colspan=2 width=80%>The name of the dialog box resource to be used instead of the default Page Setup dialog. An application must specify PSD_ENABLEPAGESETUPTEMPLATE in the <i>Flags</i> member to enable the function; otherwise, the system ignores this member.</td>
</tr>
<tr valign=top>
<td width=20%><i>hPageSetup<br>
Template</i></td>
<td colspan=2 width=80%>A handle to the global memory object that contains the preloaded dialog box template to be used instead of the default Page Setup dialog. An application must specify PSD_ENABLEPAGESETUPTEMPLATEHANDLE in the <i>Flags</i> member to enable the function; otherwise, the system ignores this member.</td>
</tr>
</table><br>
<h3>Example: Using the Page Setup Common Dialog</h3>
<p>
When you have filled in the <b>PAGESETUPDLG</b> structure, a call to <b>PageSetupDlg</b> with a pointer to that structure will bring up the Page Setup common dialog box. The sample that accompanies this article, CMNDLG32, demonstrates how you can use this new dialog box (and all of the new common dialog boxes). The CMNDLG32 sample allows you to look at all of the common dialog boxes in their standard form, using a hook, or using a template. The code below demonstrates how the CMNDLG32 sample fills out the structure and brings up the Page Setup dialog box. You will notice that this code has a switch statement based upon the mode that the user chooses (standard, with a hook, or custom).</p>
<pre><code>void PageSetup( HWND hWnd )
{
 &nbsp;&nbsp; // Initialize PAGESETUPDLG structure
 &nbsp;&nbsp; psDlg.lStructSize = sizeof(PAGESETUPDLG);
 &nbsp;&nbsp; psDlg.hwndOwner = hWnd;
 &nbsp;&nbsp; psDlg.hDevMode = (HANDLE)NULL;
 &nbsp;&nbsp; psDlg.hDevNames = (HANDLE)NULL;
 &nbsp;&nbsp; psDlg.hInstance = (HANDLE)hInst;
 &nbsp;&nbsp; psDlg.lCustData = (LPARAM)NULL;
 &nbsp;&nbsp; psDlg.hPageSetupTemplate = (HGLOBAL)NULL;

 &nbsp;&nbsp; switch( wMode )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDM_STANDARD:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.Flags = PSD_DEFAULTMINMARGINS | PSD_DISABLEPAGEPAINTING |
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PSD_DISABLEPRINTER;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPageSetupHook = (LPPAGESETUPHOOK)(FARPROC)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpPageSetupTemplateName = (LPTSTR)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPagePaintHook = (LPPAGEPAINTHOOK)(FARPROC)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDM_HOOK:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.Flags = PSD_DEFAULTMARGINS | PSD_ENABLEPAGESETUPHOOK;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPageSetupHook = (LPPAGESETUPHOOK)(FARPROC)PageSetupHook;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpPageSetupTemplateName = (LPTSTR)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPagePaintHook = (LPPAGEPAINTHOOK)(FARPROC)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case IDM_CUSTOM:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.Flags = PSD_DEFAULTMARGINS | PSD_ENABLEPAGESETUPHOOK |
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PSD_ENABLEPAGESETUPTEMPLATE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPageSetupHook = (LPPAGESETUPHOOK)(FARPROC)PageSetupHook;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpPageSetupTemplateName = (LPTSTR)PRNSETUPDLGORD95;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psDlg.lpfnPagePaintHook = (LPPAGEPAINTHOOK)(FARPROC)NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp; }

 &nbsp;&nbsp; // Call the Page Setup common dialog
 &nbsp;&nbsp; if (PageSetupDlg(&amp;psDlg) == FALSE)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProcessCDError(CommDlgExtendedError(), hWnd );
}
</code></pre>
<p>
This concludes the walking tour portion of this article.</p>
<h2>Using a Common Code Base</h2>
<p>
Now that you have seen the new dialog boxes, you may be wondering how you can use a common code base between your Windows NT and Windows 95 application. One of the methods that I use to support both Windows NT and Windows 95 and use dialog templates is to query the version of the operating system and then use the appropriate flags and boxes dependent upon the version. This check (complements of Robert Hess) is done as follows:</p>
<pre><code>&nbsp;&nbsp;DWORD dwVersion;

  dwVersion = GetVersion();
  if (dwVersion &lt; 0x80000000)
 &nbsp;&nbsp; bNewShell = FALSE;
  else
 &nbsp;&nbsp; bNewShell = TRUE;
</code></pre>
<p>
Later on in my code, when I open the File Open dialog box, I use this flag to let me know which flags to use:</p>
<pre><code>OpenFileName.Flags = OFN_SHOWHELP | OFN_ENABLEHOOK |OFN_HIDEREADONLY | 
 &nbsp;&nbsp;&nbsp; OFN_ENABLETEMPLATE;
OpenFileName.lpfnHook = (LPOFNHOOKPROC)FileOpenHookProc;
if (bNewShell)
{
 &nbsp; // Include the OFN_EXPLORER flag to get the new look.
 &nbsp; OpenFileName.Flags |= OFN_EXPLORER;
 &nbsp; // Use the new template sans the Open File controls.
 &nbsp;&nbsp; OpenFileName.lpTemplateName = (LPTSTR)MAKEINTRESOURCE(IDD_OPENSAVE);
}
else
  // Running under Windows NT, use the old look template.
  OpenFileName.lpTemplateName = (LPTSTR)MAKEINTRESOURCE(FILEOPENORD);
</code></pre>
<h2>Summary</h2>
<p>
I hope you enjoyed our walking tour of the new common dialogs, and I hope I have answered some of your questions about working with them. With the information contained in this article and the accompanying sample, CMNDLG32, you should be able to easily use the common dialogs in your own application. If you need more information about any of the structures used in the samples or listed in this article, a good source of information is the <i>Win32 API Programmer's Reference</i>. The new flags and information for Windows 95 will not be in the version of the programmer's reference for Windows NT 3.5, but they will be documented in the software development kit that comes with Windows 95.</p>
</BODY>
</HTML>

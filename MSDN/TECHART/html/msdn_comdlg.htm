<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Visual Basic Class Wrapper for Common Dialog Functions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_comdlg"></a></sup>A Visual Basic Class Wrapper for Common Dialog Functions</h1>
<p>
Steve Kirk<br>
Microsoft Developer Network Technology Group</p>
<p>
September 4, 1996</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5006">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the COMDLG sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article explains how to create a class wrapper in Visual Basic® version 4.0 to encapsulate the Common Dialog functions in the Win32® application programming interface (API). The Common Dialog functions provide a standard set of dialog boxes for operations such as opening, saving, and printing files, or selecting colors and fonts. The class creates objects that, with the exception of an object instantiation line, are code-compatible with Visual Basic's Common Dialog control.</p>
<h2>Control or Class Wrapper: Which Tool to Use?</h2>
<p>
Before we go into the details of how to create a class wrapper, let's answer the question of why you should go to all the trouble of creating one when it's so easy to just use the Visual Basic® Common Dialog control.</p>
<p>
The Common Dialog control provides a Component Object Model (COM) interface to the common dialogs by using the properties and methods of a control on a form. Compare the Common Dialog control, which must be a connected to form, to a clock that's designed to be permanently fastened to a wall. A wall clock works just fine in a classroom or train station but makes a pretty clunky alarm clock. It's good that there are other kinds of clocks available, like table clocks and wrist watches—clocks that work without a wall and that don't require you to be in a certain room to check the time! To continue the analogy, in software design, a <b>Common Dialog</b> object that is independent of a form will lend itself to cleaner solutions than a control that is attached to a form. This solution avoids two problems:
<ul type=disc>
<li>
In order to use a control, its form is loaded into memory. This can lead to inefficient use of resources if the form contains a lot of information that isn't needed to use the Common Dialog functions.<br><br></li>
<li>
Requiring a form's controls to be part of a functional module complicates modular design and makes reuse more difficult.</li>
</ul>
<p>
A more general distinction between an in-process server and an OLE control is that the former can be written in Visual Basic while the latter must be written in C or C++. The server can be developed either as a class module, which can be added to a project as source code, or as a COM dynamic-link library (DLL), which has the dual advantages of hiding source code and conserving resources when multiple applications share functionality.</p>
<h2>Common Dialog Control vs. Common Dialog Class</h2>
<h3>Code Comparison—Using the Open File Dialog Box</h3>
<p>
The following code snippet shows how a program might be assigned a filename using the Common Dialog control. This example assumes that the Visual Basic project contains a form called <b>frmMain</b> that contains the <b>Common Dialog</b> control called <b>ctlCommonDialog</b>.</p>
<pre><code>'Display the File Open dialog.
frmMain.ctlCommonDialog.ShowOpen

'Display filename in a message box.
MsgBox("Selected file is " &amp; frmMain.ctlCommonDialog.FileName)
</code></pre>
<p>
Now let's see how to use an object instantiated from the Common Dialog class to assign a filename. The Visual Basic project is assumed to include either a class module named <b>clsCommonDialog</b> or a reference to an in-process server that creates <b>clsCommonDialog</b> objects.</p>
<pre><code>'Create the CommonDialog object.
Dim objCommonDialog As New clsCommonDialog

'Display the File Open dialog.
objCommonDialog.ShowOpen

'Display filename in a message box.
MsgBox("Selected file is " &amp; objCommonDialog.FileName)
</code></pre>
<p>
Note that, with the exception of the instantiation line and object name differences, the code is the same.</p>
<h3>Differences in Files to be Distributed with Applications</h3>
<p>
The Win32® Common Dialog API functions are located in COMDLG32.DLL, which must be in the Windows system directory for either common dialog interface to function.</p>
<p>
Programs using the Visual Basic <b>Common Dialog</b> control require that COMDLG32.OCX be available and correctly registered.</p>
<p>
If the Common Dialog class is included as a class module in a Visual Basic project, no other files are required. If the class is compiled as an in-process server, the resulting DLL will need to be available at run time and must be correctly registered.</p>
<h2>Class/Object Map</h2>
<p>
The following tables describe the methods and public properties, respectively, for the Common Dialog class/object.</p>
<p class=label>
<b>Table 1. Methods</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Procedure</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowColor </td>
<td width=68%>Provides the class <b>ShowColor</b> method</td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowFont</td>
<td width=68%>Provides the class <b>ShowFont</b> method</td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowHelp</td>
<td width=68%>Provides the class <b>ShowHelp</b> method</td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowOpen</td>
<td width=68%>Provides the class <b>ShowOpen</b> method</td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowPrinter</td>
<td width=68%>Provides the class <b>ShowPrinter</b> method</td>
</tr>
<tr valign=top>
<td width=32%>Public Sub ShowSave</td>
<td width=68%>Provides the class <b>ShowSave</b> method</td>
</tr>
</table><br>
<p class=label>
<b>Table 2. Public Properties </b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Public Property Name</b></td>
<td class=label width=24%><b>Access</b></td>
<td class=label width=38%><b>Private Internal Buffer</b></td>
</tr>
<tr valign=top>
<td width=38%>Action</td>
<td width=24%>Read Only</td>
<td width=38%>iAction</td>
</tr>
<tr valign=top>
<td width=38%>APIReturn</td>
<td width=24%>Read Only</td>
<td width=38%>lAPIReturn</td>
</tr>
<tr valign=top>
<td width=38%>CancelError</td>
<td width=24%>Read/Write</td>
<td width=38%>bCancelError</td>
</tr>
<tr valign=top>
<td width=38%>Color</td>
<td width=24%>Read/Write</td>
<td width=38%>lColor</td>
</tr>
<tr valign=top>
<td width=38%>Copies</td>
<td width=24%>Read/Write</td>
<td width=38%>lCopies</td>
</tr>
<tr valign=top>
<td width=38%>DefaultExt</td>
<td width=24%>Read/Write</td>
<td width=38%>sDefaultExt</td>
</tr>
<tr valign=top>
<td width=38%>DialogTitle</td>
<td width=24%>Read/Write</td>
<td width=38%>sDialogTitle</td>
</tr>
<tr valign=top>
<td width=38%>ExtendedError</td>
<td width=24%>Read Only</td>
<td width=38%>lExtendedError</td>
</tr>
<tr valign=top>
<td width=38%>FileName</td>
<td width=24%>Read/Write</td>
<td width=38%>sFileName</td>
</tr>
<tr valign=top>
<td width=38%>FileTitle</td>
<td width=24%>Read/Write</td>
<td width=38%>sFileTitle</td>
</tr>
<tr valign=top>
<td width=38%>Filter</td>
<td width=24%>Read/Write</td>
<td width=38%>sFilter</td>
</tr>
<tr valign=top>
<td width=38%>FilterIndex</td>
<td width=24%>Read/Write</td>
<td width=38%>iFilterIndex</td>
</tr>
<tr valign=top>
<td width=38%>Flags</td>
<td width=24%>Read/Write</td>
<td width=38%>lFlags</td>
</tr>
<tr valign=top>
<td width=38%>FontBold</td>
<td width=24%>Read/Write</td>
<td width=38%>bFontBold</td>
</tr>
<tr valign=top>
<td width=38%>FontItalic</td>
<td width=24%>Read/Write</td>
<td width=38%>bFontItalic</td>
</tr>
<tr valign=top>
<td width=38%>FontName</td>
<td width=24%>Read/Write</td>
<td width=38%>sFontName</td>
</tr>
<tr valign=top>
<td width=38%>FontSize</td>
<td width=24%>Read/Write</td>
<td width=38%>lFontSize</td>
</tr>
<tr valign=top>
<td width=38%>FontStrikethru</td>
<td width=24%>Read/Write</td>
<td width=38%>bFontStrikethru</td>
</tr>
<tr valign=top>
<td width=38%>FontUnderline</td>
<td width=24%>Read/Write</td>
<td width=38%>bFontUnderline</td>
</tr>
<tr valign=top>
<td width=38%>FromPage</td>
<td width=24%>Read/Write</td>
<td width=38%>lFromPage</td>
</tr>
<tr valign=top>
<td width=38%>hdc</td>
<td width=24%>Read/Write</td>
<td width=38%>lhdc</td>
</tr>
<tr valign=top>
<td width=38%>HelpCommand</td>
<td width=24%>Read/Write</td>
<td width=38%>lHelpCommand</td>
</tr>
<tr valign=top>
<td width=38%>HelpContext</td>
<td width=24%>Read/Write</td>
<td width=38%>sHelpContext</td>
</tr>
<tr valign=top>
<td width=38%>HelpFile</td>
<td width=24%>Read/Write</td>
<td width=38%>sHelpFile</td>
</tr>
<tr valign=top>
<td width=38%>HelpKey</td>
<td width=24%>Read/Write</td>
<td width=38%>sHelpKey</td>
</tr>
<tr valign=top>
<td width=38%>InitDir</td>
<td width=24%>Read/Write</td>
<td width=38%>sInitDir</td>
</tr>
<tr valign=top>
<td width=38%>Max</td>
<td width=24%>Read/Write</td>
<td width=38%>lMax</td>
</tr>
<tr valign=top>
<td width=38%>MaxFileSize</td>
<td width=24%>Read/Write</td>
<td width=38%>lMaxFileSize</td>
</tr>
<tr valign=top>
<td width=38%>Min</td>
<td width=24%>Read/Write</td>
<td width=38%>lMin</td>
</tr>
<tr valign=top>
<td width=38%>Object</td>
<td width=24%>Read Only</td>
<td width=38%>objObject</td>
</tr>
<tr valign=top>
<td width=38%>PrinterDefault</td>
<td width=24%>Read/Write</td>
<td width=38%>iPrinterDefault</td>
</tr>
<tr valign=top>
<td width=38%>ToPage</td>
<td width=24%>Read/Write</td>
<td width=38%>lToPage</td>
</tr>
</table><br>
<h2>Construction of the Class</h2>
<h3>Creating the Class Module</h3>
<ol>
<li>
From the Insert menu, select Class Module. A new window is created and named Class1.<br><br></li>
<li>
Press F4 to bring up the Properties dialog box. <br><br></li>
<li>
Type <b>clsCommonDialog</b> in the <b>Name</b> property. In order to use the class as a source code module that can be included in any project, set the <b>Instancing</b> property to 0 - Not Creatable and the <b>Public</b> property to False. To create an OLE DLL, set the <b>Instancing</b> property to 2 - Creatable MultiUse and the <b>Public</b> property to True.</li>
</ol>
<h3>Declarations</h3>
<p>
These <b>Declare Function</b> statements create an interface between the Visual Basic class module and the Common Dialog functions in COMDLG32.DLL. Use of the PRIVATE option hides these functions from everything outside the class module.</p>
<pre><code>'API function called by ShowColor method
Private Declare Function ChooseColorA Lib "comdlg32.dll" (pChoosecolor As tChooseColor) As Long

'API function called by ShowFont method
Private Declare Function ChooseFontA Lib "comdlg32.dll" (pChoosefont As tChooseFont) As Long

'API function inside ShowHelp method
Private Declare Function WinHelpA Lib "user32" (ByVal hwnd As Long, ByVal lpHelpFile As String, ByVal wCommand As Long, ByVal dwData As Long) As Long

'API function called by ShowOpen method
Private Declare Function GetOpenFileNameA Lib "comdlg32.dll" (pOpenfilename As tOpenFilename) As Long

'API function called by ShowSave method
Private Declare Function GetSaveFileNameA Lib "comdlg32.dll" (pOpenfilename As tOpenFilename) As Long

'API function called by ShowPrinter method
Private Declare Function PrintDlgA Lib "comdlg32.dll" (pPrintdlg As tPrintDlg) As Long

'API function to retrieve extended error information
Private Declare Function CommDlgExtendedError Lib "comdlg32.dll" () As Long

'API memory functions
Private Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long

Private Declare Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Sub CpyMemValAdrFromRefAdr Lib "kernel32" Alias "RtlMoveMemory" (ByVal hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)

Private Declare Sub CpyMemRefAdrFromValAdr Lib "kernel32" Alias "RtlMoveMemory" (hpvDest As Any, ByVal hpvSource As Any, ByVal cbCopy As Long)
</code></pre>
<h3>Property Procedures</h3>
<p>
The property procedures assign and retrieve an object's properties.</p>
<p>
Each property that is exposed has a <b>Public Property Get</b> procedure corresponding to the property name.</p>
<pre><code>Public Property Get FileName() As String
'Return object's FileName property.
FileName = sFileName
End Property
</code></pre>
<p>
Each property that is writeable has a <b>Public Property Let</b> or <b>Public Property Set</b> corresponding to the property name. Object type properties have a <b>Public Property Set</b>. Non-object type properties have a <b>Public Property Let</b>.</p>
<pre><code>Public Property Let FileName(vNewValue As String)
'Handle assignment of object's FileName property.
sFileName = vNewValue
End Property
</code></pre>
<h3>Common Dialog Methods</h3>
<p>
Public procedures in the class module are exposed as methods on objects instantiated from the Common Dialog class. <b>ShowColor</b>, <b>ShowFont</b>, <b>ShowHelp</b>, <b>ShowOpen</b>, <b>ShowPrinter</b> and <b>ShowSave</b> are the methods exposed. </p>
<h4>ShowColor</h4>
<p>
The <b>ShowColor</b> method creates a <b>Color</b> common dialog box (Figure 1) that enables the user to select a color. </p>
<p>
<img src="comdlg_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Color common dialog box, created by ShowColor</b></p>
<p>
In the following code, Public Sub ShowColor() provides the <b>ShowColor</b> method. <b>ShowColor()</b> handles the interface between Common Dialog Object property data and the Win32® <b>ChooseColor</b> function.</p>
<pre><code>Public Sub ShowColor()
'Provide the ShowColor method and interface with the Win32 ChooseColor function.

Dim vChooseColor As tChooseColor
Dim aCustomColors(15) As Long
Dim iColorMember As Integer
Dim lCustomColorSize As Long
Dim lCustomColorAddress As Long
Dim lMemHandle As Long
Dim lReturn As Long

On Error GoTo ErrShowColor
</code></pre>
<p>
Initialize the private property buffers for the <b>Action</b>, <b>APIReturn</b>, and <b>ExtendedError</b> properties.</p>
<pre><code>iAction = CLSCD_SHOWCOLOR
lApiReturn = 0&nbsp; 'APIReturn property
lExtendedError = 0&nbsp; 'ExtendedError property
</code></pre>
<p>
Prepare <b>vChooseColor</b> for the Win32 <b>ChooseColor</b> function. Incorporate the<b> Color</b> property.</p>
<pre><code>vChooseColor.lStructSize = Len(vChooseColor)
vChooseColor.rgbResult = lColor
' Fill custom colors array with all white.
For iColorMember = 0 To 15
 &nbsp;&nbsp; aCustomColors(iColorMember) = &amp;HFFFFFF
Next
' Get size of memory needed for custom colors.
lCustomColorSize = Len(aCustomColors(0)) * 16
' Get a global memory block to hold a copy of the custom colors.
lMemHandle = GlobalAlloc(GHND, lCustomColorSize)
If lMemHandle Then
 &nbsp;&nbsp; ' Lock the custom color's global memory block.
 &nbsp;&nbsp; lCustomColorAddress = GlobalLock(lMemHandle)
 &nbsp;&nbsp; If lCustomColorAddress Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Copy custom colors to the global memory block.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CpyMemValAdrFromRefAdr lCustomColorAddress, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aCustomColors(0), lCustomColorSize
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vChooseColor.lpCustColors = lCustomColorAddress
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'flags As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vChooseColor.Flags = lFlags
</code></pre>
<p>
Call the Win32 <b>ChooseColor</b> function. The return value is saved as the <b>APIReturn</b> property.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lApiReturn = ChooseColorA(vChooseColor)
</code></pre>
<p>
Handle the return from <b>ChooseColor</b>. Update the <b>Color</b> property.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select Case lApiReturn
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case CLSCD_USERCANCELED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If bCancelError = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory first.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Generate an error.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Number:=CLSCD_ERRNUMUSRCANCEL, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description:=CLSCD_ERRDESUSRCANCEL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case CLSCD_USERSELECTED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory first.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Update property buffer.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lColor = vChooseColor.rgbResult
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else&nbsp;&nbsp; 'an error occured
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory first.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp; End If
End If
Exit Sub

ErrShowColor:
'Clean up memory first
lReturn = GlobalUnlock(lMemHandle)
lReturn = GlobalFree(lMemHandle)
Exit Sub

End Sub
</code></pre>
<h4>ShowFont</h4>
<p>
The <b>ShowFont</b> method creates a Font common dialog box (Figure 2) that enables the user to choose attributes for a logical font. These attributes include a typeface name, style (bold, italic, or regular), point size, effects (underline, strikeout, and text color) and script (or character set). </p>
<p>
<img src="comdlg_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The Font common dialog box, created by ShowFont</b></p>
<p>
In the code below, Public Sub ShowFont provides the <b>ShowFont</b> method. <b>ShowFont()</b> handles the interface between Common Dialog object property data and the Win32 <b>ChooseFont</b> function.</p>
<pre><code>Public Sub ShowFont()
'Provide the ShowFont method and interface with the Win32 ChooseFont function.

Dim vLogFont As tLogFont
Dim vChooseFont As tChooseFont
Dim lLogFontSize As Long
Dim lLogFontAddress As Long
Dim lMemHandle As Long
Dim lReturn As Long
Dim sFont As String
Dim lBytePoint As Long

On Error GoTo ShowFontError
</code></pre>
<p>
Initialize the private property buffers for the <b>Action</b>, <b>APIReturn</b>, and <b>ExtendedError</b> properties.</p>
<pre><code>iAction = CLSCD_SHOWFONT&nbsp;&nbsp;&nbsp; 'Action property
lApiReturn = 0&nbsp; 'APIReturn property
lExtendedError = 0&nbsp; 'ExtendedError property
</code></pre>
<p>
Prepare <b>vChooseFont</b> for the Win32 <b>ChooseFont</b> function. Incorporate the <b>FontBold</b>, <b>FontItalic</b>, <b>FontUnderline</b>, <b>FontStrikethru</b>, <b>FontSize</b>, and <b>Flags</b> properties.</p>
<pre><code>'vLogFont.lfWeight As Long - init from FontBold property
If bFontBold = True Then
 &nbsp;&nbsp; vLogFont.lfWeight = FW_BOLD
End If
'vLogFont.lfItalic As Byte - init from FontItalic property
If bFontItalic = True Then
 &nbsp;&nbsp; vLogFont.lfItalic = 1
End If
'vLogFont.lfUnderline As Byte - init from FontUnderline property
If bFontUnderline = True Then
 &nbsp;&nbsp; vLogFont.lfUnderline = 1
End If
'vLogFont.lfStrikeOut As Byte - init from FontStrikethru property
If bFontStrikethru = True Then
 &nbsp;&nbsp; vLogFont.lfStrikeOut = 1
End If
'vChooseFont.lStructSize As Long
vChooseFont.lStructSize = Len(vChooseFont)
'vChooseFont.lpLogFont As Long
lLogFontSize = Len(vLogFont)
' Get a global memory block to hold a copy of vLogFont - exit on failure.
lMemHandle = GlobalAlloc(GHND, lLogFontSize)
' If GlobalAlloc failed, exit
If lMemHandle Then
 &nbsp;&nbsp; ' Lock vLogFont's global memory block - exit on failure
 &nbsp;&nbsp; lLogFontAddress = GlobalLock(lMemHandle)
 &nbsp;&nbsp; ' If GlobalLock failed, free memory and exit.
 &nbsp;&nbsp; If lLogFontAddress Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Copy vLogFont to the global memory block.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CpyMemValAdrFromRefAdr lLogFontAddress, vLogFont, lLogFontSize
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vChooseFont.lpLogFont = lLogFontAddress
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vChooseFont.iPointSize As Long - init from FontSize property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vChooseFont.iPointSize = lFontSize * 10
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vChooseFont.flags As Long - init from Flags property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vChooseFont.Flags = lFlags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</code></pre>
<p>
Call the Win32 <b>ChooseFont</b> function. The return value is saved as the <b>APIReturn</b> property.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lApiReturn = ChooseFontA(vChooseFont)&nbsp;&nbsp;&nbsp; 'store to APIReturn property
</code></pre>
<p>
Handle the return value from <b>ChooseFont</b>. Update the <b>FontBold</b>, <b>FontItalic</b>, <b>FontUnderline</b>, <b>FontStrikethru</b>, <b>FontName</b>, and <b>FontSize</b> properties.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select Case lApiReturn
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case CLSCD_USERCANCELED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If bCancelError = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory first.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Generate an error.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Number:=CLSCD_ERRNUMUSRCANCEL, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description:=CLSCD_ERRDESUSRCANCEL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case CLSCD_USERSELECTED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Copy global memory block to vLogFont.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CpyMemRefAdrFromValAdr vLogFont, lLogFontAddress, lLogFontSize
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vLogFont.lfWeight As Long&nbsp; - store to FontBold property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vLogFont.lfWeight &gt;= FW_BOLD Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontBold = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontBold = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vLogFont.lfItalic As Byte - store to FontItalic property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vLogFont.lfItalic = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontItalic = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontItalic = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vLogFont.lfUnderline As Byte - store to FontUnderline property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vLogFont.lfUnderline = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontUnderline = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontUnderline = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vLogFont.lfStrikeOut As Byte - store to FontStrikethru property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vLogFont.lfStrikeOut = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontStrikethru = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bFontStrikethru = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vLogFont.lfFaceName(LF_FACESIZE) As Byte - store to FontName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontName = sByteArrayToString(vLogFont.lfFaceName())
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'vChooseFont.iPointSize As Long - store to FontSize property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lFontSize = CLng(vChooseFont.iPointSize / 10)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else&nbsp;&nbsp; 'An error occurred.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Clean up memory first.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalUnlock(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError&nbsp;&nbsp; 'Store to ExtendedError&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'property
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lReturn = GlobalFree(lMemHandle)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp; End If
End If
Exit Sub

ShowFontError:
'Clean up memory first.
lReturn = GlobalUnlock(lMemHandle)
lReturn = GlobalFree(lMemHandle)
Exit Sub

End Sub
</code></pre>
<h4>ShowHelp</h4>
<p>
The <b>ShowHelp</b> method displays the help file specified in the <b>HelpFile </b>property.</p>
<p>
In the following code, Public Sub ShowHelp() provides the <b>ShowHelp</b> method. <b>ShowHelp()</b> handles the interface between Common Dialog Object property data and WINHELP.EXE.</p>
<pre><code>Public Sub ShowHelp()
'Provide the ShowHelp method and interface with winhelp.exe.

Dim sHelpFileBuff As String
Dim lData As Long

On Error GoTo ShowHelpError
</code></pre>
<p>
Initialize the private property buffers for the <b>Action</b>, <b>APIReturn</b>, and <b>ExtendedError</b> properties.</p>
<pre><code>iAction = CLSCD_SHOWHELP&nbsp; 'Action property
lApiReturn = 0&nbsp; 'APIReturn property
lExtendedError = 0&nbsp; 'ExtendedError property
</code></pre>
<p>
Prepare the parameters for the Win32 <b>WinHelp</b> function.</p>
<pre><code>'sHelpFile is a null terminated string
sHelpFileBuff = sHelpFile &amp; Chr$(0)
</code></pre>
<p>
Call the Win32 <b>WinHelp</b> function. The return value is saved as the <b>APIReturn</b> property.</p>
<pre><code>lApiReturn = WinHelp(lhdc, sHelpFile, lHelpCommand, lData)
</code></pre>
<p>
Handle the return value from <b>WinHelp</b>.</p>
<pre><code>Select Case lApiReturn&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Case CLSCD_USERCANCELED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError&nbsp;&nbsp; ' - store to ExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'property
 &nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError
End Select
 &nbsp;&nbsp; 
Exit Sub

ShowHelpError:
Exit Sub

End Sub
</code></pre>
<h4>ShowOpen/ShowSave</h4>
<p>
<b>The ShowOpen</b> and <b>ShowSave</b> functions create an Open or Save common dialog box (Figure 3) that lets the user specify the drive, directory, and the name of a file or set of files to open or save. </p>
<p>
<img src="comdlg_3.gif" border=0></p>
<p class=label>
<b>Figure 3. The Open Dialog Box, created by ShowOpen</b></p>
<p>
The <b>ShowOpen</b> and <b>ShowSave</b> methods are provided by public subs that call <b>ShowFileDialog</b>. <b>ShowFileDialog</b> handles the interface between Common Dialog object property data and the Win32 <b>GetOpenFileName</b> and <b>GetSaveFileName</b> functions.</p>
<pre><code>Public Sub ShowOpen()
'Provide the ShowOpen method.
ShowFileDialog (CLSCD_SHOWOPEN)
End Sub

Public Sub ShowSave()
'Provide the ShowSave method.
ShowFileDialog (CLSCD_SHOWSAVE)
End Sub

Private Sub ShowFileDialog(ByVal iAction As Integer)
'Interface with Win32 GetOpenFileName and GetSaveFileName functions.

Dim vOpenFile As tOpenFilename
Dim lMaxSize As Long
Dim sFileNameBuff As String
Dim sFileTitleBuff As String

On Error GoTo ShowFileDialogError
</code></pre>
<p>
Initialize the private property buffers for the <b>Action</b>, <b>APIReturn</b>, and <b>ExtendedError</b> properties.</p>
<pre><code>iAction = iAction&nbsp; 'Action property
lApiReturn = 0&nbsp; 'APIReturn property
lExtendedError = 0&nbsp; 'ExtendedError property
</code></pre>
<p>
Prepare <b>vOpenFile</b> with data from the <b>Filter</b>, <b>FilterIndex</b>, <b>MaxFileSize</b>, <b>FileName</b>, <b>FileTitle</b>, <b>InitDir</b>, <b>DialogTitle</b>, <b>Flags</b>, and <b>DefaultExt</b> properties.</p>
<pre><code>'vOpenFile.lStructSize As Long
vOpenFile.lStructSize = Len(vOpenFile)
'vOpenFile.lpstrFilter As String - init from Filter property
vOpenFile.lpstrFilter = sAPIFilter(sFilter)
'vOpenFile.iFilterIndex As Long - init from FilterIndex property
vOpenFile.iFilterIndex = iFilterIndex
'vOpenFile.lpstrFile As String
'Determine size of buffer from MaxFileSize property.
If lMaxFileSize &gt; 0 Then
 &nbsp;&nbsp; lMaxSize = lMaxFileSize
Else
 &nbsp;&nbsp; lMaxSize = CLSCD_MAXFILESIZE
End If
'vOpenFile.lpstrFile As Long - init from FileName property
'Prepare sFileNameBuff.
sFileNameBuff = Space(lMaxSize + 1)
LSet sFileNameBuff = sFileName &amp; vbNullChar
vOpenFile.lpstrFile = sFileNameBuff
'nMaxFile As Long - init from MaxFileSize property
vOpenFile.nMaxFile = lMaxFileSize
'lpstrFileTitle As String - init from FileTitle property
'Prepare sFileTitleBuff.
sFileTitleBuff = Space(lMaxSize + 1)
LSet sFileTitleBuff = vbNullChar
vOpenFile.lpstrFileTitle = sFileTitleBuff
'vOpenFile.lpstrInitialDir As String - init from InitDir property
vOpenFile.lpstrInitialDir = sInitDir
'vOpenFile.lpstrTitle As String - init from DialogTitle property
vOpenFile.lpstrTitle = sDialogTitle
'vOpenFile.flags As Long - init from Flags property
vOpenFile.Flags = lFlags
'vOpenFile.lpstrDefExt As String - init from DefaultExt property
vOpenFile.lpstrDefExt = sDefaultExt
</code></pre>
<p>
Call either the Win32 <b>GetOpenFileName</b> or <b>GetSaveFileName</b> function, depending on the <i>iAction</i> parameter. The return value is saved as the <b>APIReturn</b> property.</p>
<pre><code>Select Case iAction
 &nbsp;&nbsp; Case CLSCD_SHOWOPEN
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lApiReturn = GetOpenFileNameA(vOpenFile)
 &nbsp;&nbsp; Case CLSCD_SHOWSAVE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lApiReturn = GetSaveFileNameA(vOpenFile)
 &nbsp;&nbsp; Case Else&nbsp;&nbsp; 'unknown action
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
End Select
</code></pre>
<p>
Handle the return from the Win32 function. Update the <b>FileName</b> and <b>FileTitle</b> properties.</p>
<pre><code>Select Case lApiReturn
 &nbsp;&nbsp; Case CLSCD_USERCANCELED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If bCancelError = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Generate an error.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Number:=CLSCD_ERRNUMUSRCANCEL, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description:=CLSCD_ERRDESUSRCANCEL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Case CLSCD_USERSELECTED
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'sFileName gets part of vOpenFile.lpstrFile to the left of first Chr$(0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sFileName = sLeftOfNull(vOpenFile.lpstrFile)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sFileTitle = sLeftOfNull(vOpenFile.lpstrFileTitle)
 &nbsp;&nbsp; Case Else&nbsp;&nbsp; 'an error occured
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError&nbsp;&nbsp;&nbsp; 
End Select
Exit Sub

ShowFileDialogError:
Exit Sub

End Sub
</code></pre>
<h4>ShowPrinter</h4>
<p>
The <b>ShowPrinter</b> method displays a Print dialog box (Figure 4) or a Print Setup dialog box. The Print dialog box makes it possible for the user to specify the properties of a particular print job. The Print Setup dialog box makes it possible for the user to select additional job properties and configure the printer.</p>
<p>
<img src="comdlg_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Print dialog box</b></p>
<p>
In the following code, Public Sub ShowPrinter() provides the <b>ShowPrinter</b> method. <b>ShowPrinter()</b> handles the interface between Common Dialog Object property data and the Win32 <b>PrintDlg</b> function.</p>
<pre><code>Public Sub ShowPrinter()
'Provide the ShowPrinter method, interface with Win32 PrintDlg function.

Dim vPrintDlg As tPrintDlg

On Error GoTo ShowPrinterError
</code></pre>
<p>
Initialize the private property buffers for the <b>Action</b>, <b>APIReturn</b>, and <b>ExtendedError</b> properties.</p>
<pre><code>iAction = CLSCD_SHOWPRINT&nbsp; 'Action property
lApiReturn = 0&nbsp; 'APIReturn property
lExtendedError = 0&nbsp; 'ExtendedError property
</code></pre>
<p>
Prepare <i>vPrintDlg</i> data for the Win32 <b>ShowPrinter</b> function. Incorporate the <b>Flags</b>, <b>FromPage</b>, <b>ToPage</b>, <b>MinPage</b>, <b>MaxPage</b>, and <b>Copies</b> properties.</p>
<pre><code>'lStructSize As Long
vPrintDlg.lStructSize = Len(vPrintDlg)
'hdc As Long - init from hDC property
vPrintDlg.hdc = lhdc
'flags As Long - init from Flags property
vPrintDlg.Flags = lFlags
'nFromPage As Integer - init from FromPage property
vPrintDlg.nFromPage = lFromPage
'nToPage As Integer - init from ToPage property
vPrintDlg.nToPage = lToPage
'nMinPage As Integer - init from Min property
vPrintDlg.nMinPage = lMin
'nMaxPage As Integer - init from Max property
vPrintDlg.nMaxPage = lMax
'nCopies As Integer - init from Copies property
vPrintDlg.nCopies = lCopies
</code></pre>
<p>
Call the Win32 <b>PrintDlg</b> function. The return value is saved as the <b>APIReturn</b> property.</p>
<pre><code>lApiReturn = PrintDlgA(vPrintDlg)
</code></pre>
<p>
Handle the return from <b>PrintDlg</b>. Update the <b>FromPage</b>, <b>ToPage</b>, <b>Min</b>, <b>Max</b>, and <b>Copies</b> properties.</p>
<pre><code>Select Case lApiReturn
 &nbsp; Case CLSCD_USERCANCELED
 &nbsp;&nbsp;&nbsp;&nbsp; If bCancelError = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'generate an error
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Number:=CLSCD_ERRNUMUSRCANCEL, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description:=CLSCD_ERRDESUSRCANCEL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Case CLSCD_USERSELECTED
 &nbsp;&nbsp;&nbsp;&nbsp; 'nFromPage As Integer - store to FromPage property
 &nbsp;&nbsp;&nbsp;&nbsp; lFromPage = vPrintDlg.nFromPage
 &nbsp;&nbsp;&nbsp;&nbsp; 'nToPage As Integer - store to ToPage property
 &nbsp;&nbsp;&nbsp;&nbsp; lToPage = vPrintDlg.nToPage
 &nbsp;&nbsp;&nbsp;&nbsp; 'nMinPage As Integer - store to Min property
 &nbsp;&nbsp;&nbsp;&nbsp; lMin = vPrintDlg.nMinPage
 &nbsp;&nbsp;&nbsp;&nbsp; 'nMaxPage As Integer - store to Max property
 &nbsp;&nbsp;&nbsp;&nbsp; lMax = vPrintDlg.nMaxPage
 &nbsp;&nbsp;&nbsp;&nbsp; 'nCopies As Integer - store to Copies property
 &nbsp;&nbsp;&nbsp;&nbsp; lCopies = vPrintDlg.nCopies
 &nbsp; Case Else&nbsp;&nbsp; 'an error occured
 &nbsp;&nbsp;&nbsp;&nbsp; 'call CommDlgExtendedError
 &nbsp;&nbsp;&nbsp;&nbsp; lExtendedError = CommDlgExtendedError&nbsp;&nbsp; 'store to ExtendedError property
End Select
Exit Sub

ShowPrinterError:
Exit Sub

End Sub
</code></pre>
<h2>COMDLG: A Formless Common Dialog Example</h2>
<p>
This example cycles through all of the Common Dialog functions until the user cancels. To try it out:
<ol>
<li>
Create a new project.<br><br></li>
<li>
Add the COMDLG.CLS file. <br><br></li>
<li>
Remove the default Form1 from the project.<br><br></li>
<li>
Insert a new module and paste the code below into the Declarations section.<br><br></li>
<li>
Set the project startup option from Form1 to Sub Main.<br><br></li>
<li>
Press F5 to run.</li>
</ol>
<pre><code>Sub Main()
Dim objCommonDialog As New clsCommonDialog

On Error GoTo ErrMain
objCommonDialog.CancelError = True
objCommonDialog.HelpFile = "win.hlp"

While True
 &nbsp; objCommonDialog.ShowColor
 &nbsp; objCommonDialog.ShowFont
 &nbsp; objCommonDialog.ShowHelp
 &nbsp; objCommonDialog.ShowOpen
 &nbsp; objCommonDialog.ShowPrinter
 &nbsp; objCommonDialog.ShowSave
Wend

Exit Sub
ErrMain:
 &nbsp; End
End Sub
</code></pre>
<h2>Conclusion</h2>
<p>
The Win32 Common Dialog object is easier to use than the Visual Basic <b>Common Dialog</b> control because it doesn't need to be a part of a form. This makes it easier to organize projects for clarity and efficient operation. The Common Dialog object provides the same methods and properties as the <b>Common Dialog</b> control; it can be used to replace the <b>Common Dialog</b> control in existing projects with very little modification to code. </p>
</BODY>
</HTML>

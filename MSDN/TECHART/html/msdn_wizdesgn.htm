<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Access Wizard Interface Design</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_wizdesgn"></a>Microsoft Access Wizard Interface Design</h1>
<p>
Larry W Jordan Jr.<br>
Derik Harris<br>
Microsoft Corporation</p>
<p>
Created: July 15, 1996<br>
Revised: August 7, 1996 </p>
<p>
<i>Larry W Jordan Jr. is a Senior Microsoft Access support engineer. His main focus is VBA, wizard and add-in development and Visual SourceSafe integration.</i></p>
<p>
<i>Derik Harris is a Senior Microsoft Access content engineer. His primary responsibility is writing, editing, and publishing Microsoft Access related material for the Microsoft Knowledge Base and the Microsoft Web site.</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4944">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the WIZDESGN project files.</a></p>
<h2>Overview</h2>
<p>
The development of Microsoft® Access add-ins and wizards provides developers and IS professionals with a robust method to implement custom solutions that use the power of Microsoft Access and simplify the steps involved in completing complex tasks. Microsoft Access uses wizards to help users design forms, reports, queries, and other design tasks that would involve many steps to complete.</p>
<p>
The Microsoft Access development community and Microsoft's own wizard designers have developed common approaches to the basic design of wizards and how to navigate the various pages used to gather information from the user. This document outlines the basic design of a wizard and discusses how to create a generic template that you can use again and again when you create new wizards and add-ins.</p>
<h2>Main Host Form Design</h2>
<h3>Main Host Form</h3>
<p>
The Main Host form is designed to act as your main interface form for displaying the various pages of your wizard. The form uses an unbound Object Frame to load your wizard pages as subforms into the <b>SourceObject</b> property of the control.</p>
<p>
For example, to load the first page of your subform when the Main Host form loads:</p>
<pre><code>Private Sub Form_Load()

 &nbsp;&nbsp; On Error GoTo Form_Load_Err
 &nbsp;&nbsp; ' Load the first page.
 &nbsp;&nbsp; intWhatPage = 1
 &nbsp;&nbsp; Call SetupNavButtons
 &nbsp;&nbsp; Me!frmPage.SourceObject = "samp_WizardPage1"

Form_load_End:
 &nbsp;&nbsp; Exit Sub

Form_Load_Err:
 &nbsp;&nbsp; MsgBox Err.Description, vbExclamation, WizAppName

End Sub
</code></pre>
<p>
This makes the Main Host form "lightweight" in nature, and almost all of the code and information gathering is contained within the context of the individual pages, which promotes ease of maintenance and promotes code encapsulation.</p>
<p>
The standard components of the Main Host form are as follows.</p>
<p>
<img src="wizdesgn_1.gif" border=0></p>
<p>
The Main Host form has a set of standard navigation buttons that guide the user through the information-gathering process and are featured on all multiple-page wizards designed for Microsoft Access for Windows® 95. When you use the same design, you increase the intuitiveness of your wizard and make it easier for users to concentrate on the functionality of your custom add-in.</p>
<h2>The Code and Concepts Behind Each Button</h2>
<h3>Help About Button</h3>
<p>
In the wizard template example, the <b>Help</b> <b>About</b> button will show an About box. A simple form has been created to indicate information, such as the registered user and the company that made the wizard.</p>
<pre><code>Private Sub btnHelpAbout_Click()

 &nbsp;&nbsp; ' display help about box...
 &nbsp;&nbsp; DoCmd.OpenForm "samp_WizardAbout", , , , , , acDialog

End Sub
</code></pre>
<h3>Cancel Button</h3>
<p>
The <b>Cancel</b> button closes the wizard and performs any clean-up tasks. Your clean up should take into account any allocation of memory issues that may be implemented using Windows API calls, object references that retain scope and lifetime, preconnections to ODBC data sources, and so on.</p>
<h4>The btnCancel routine</h4>
<pre><code>Private Sub btnCancel_Click()

 &nbsp;&nbsp; On Error GoTo btnCancel_Err
 &nbsp;&nbsp; DoCmd.Close acForm, Me.Name, Save:=False

btnCancel_Exit:

 &nbsp;&nbsp; Exit Sub

btnCancel_Err:

 &nbsp;&nbsp; MsgBox Err.Description, vbInformation, WizAppName
 &nbsp;&nbsp; Resume btnCancel_Exit

End Sub
</code></pre>
<h3>Back Button</h3>
<p>
The <b>Back</b> button is used to navigate to previous pages in the wizard. You keep track of the currently active page by referencing a variable intWhatPage. Based upon the current value of the intWhatPage variable, you can decide if you want to return to the previous page.</p>
<h4>In the declaration section of the WizMainForm</h4>
<pre><code>Dim intWhatPage As Integer
</code></pre>
<h4>The btnBack routine</h4>
<pre><code>Private Sub btnBack_Click()

 &nbsp;&nbsp; Dim Msg As String ' For error handling.

 &nbsp;&nbsp; On Local Error GoTo btnBack_Click_Err

 &nbsp;&nbsp; Select Case intWhatPage

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Increment page number.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intWhatPage = intWhatPage - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call SetupNavButtons
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!frmPage.SourceObject = "samp_WizardPage" &amp; Format$(intWhatPage)

 &nbsp;&nbsp; End Select

btnBack_Click_End:

 &nbsp;&nbsp; Exit Sub

btnBack_Click_Err:

 &nbsp;&nbsp; Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
 &nbsp;&nbsp; Msg = Msg &amp; Err.Description
 &nbsp;&nbsp; MsgBox Msg, vbInformation, "btnBack_Click"
 &nbsp;&nbsp; Resume btnBack_Click_End

End Sub
</code></pre>
<p>
The code in the btnBack routine demonstrates that if the current page equals 2, it is possible to return to the page and to change information. How you decide to implement your wizard's rules regarding navigation is up to you and to the complexity of your wizard design.</p>
<h3>Next Button</h3>
<p>
The <b>Next</b> button navigates forward through your wizard pages and runs the code associated with the user's selection. This method is somewhat more complex that anything else that has been examined up to this point; therefore, what follows is a more in-depth look.</p>
<h4>In the declaration section of the WizMainForm</h4>
<pre><code>Dim intWhatPage As Integer
</code></pre>
<h4>The btnNext routine</h4>
<pre><code>Private Sub btnNext_Click()

 &nbsp;&nbsp; Dim Msg As String ' For error handling.

 &nbsp;&nbsp; On Local Error GoTo btnNext_Click_Err

 &nbsp;&nbsp; Dim f As Form

 &nbsp;&nbsp; Select Case intWhatPage

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1, 2

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Execute the GoNext/btnNext form method
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set f = Me!frmPage.Form
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If f.GoNext() Then

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Increment page number.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intWhatPage = intWhatPage + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call SetupNavButtons
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!frmPage.SourceObject = "samp_WizardPage" &amp; _&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Format$(intWhatPage)

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If

 &nbsp;&nbsp; End Select

btnNext_Click_End:

 &nbsp;&nbsp; Exit Sub

btnNext_Click_Err:

 &nbsp;&nbsp; Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
 &nbsp;&nbsp; Msg = Msg &amp; Err.Description
 &nbsp;&nbsp; MsgBox Msg, vbInformation, "btnNext_Click"
 &nbsp;&nbsp; Resume btnNext_Click_End

End Sub
</code></pre>
<p>
The code in the btnNext routine demonstrates that if the intWhatPage variable equals 1 or 2, it is possible to navigate to the next page. The sample shown here implements a total of two information-gathering pages and a final "Finished" page (in this case, page 3). In the actual code behind forms 1 and 2, a Public function GoNext is defined (this is covered in detail in the section of this document describing the individual pages of the wizard). The <b>GoNext</b> method is called prior to executing the loading of the next wizard page and will allow the <b>SubForm</b> object to save values and complete other tasks associated with that wizard page.</p>
<p>
Then a function is called that handles the behavior and setting associated with the navigation buttons of the main wizard host form.</p>
<h4>The SetupNavButtonst routine</h4>
<pre><code>Private Sub SetupNavButtons()

 &nbsp;&nbsp; ' Enable/disable appropriate parent form buttons.
 &nbsp;&nbsp; DoCmd.GoToControl "btnCancel"

 &nbsp;&nbsp; Select Case intWhatPage

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1 ' Sample text entry.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnBack.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnFinish.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnNext.Enabled = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCmd.GoToControl "btnNext"

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2 ' Confirm.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnBack.Enabled = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnFinish.Enabled = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnNext.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCmd.GoToControl "btnFinish"

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 3 ' Finished.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnBack.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnFinish.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnNext.Enabled = False

 &nbsp;&nbsp; End Select

End Sub
</code></pre>
<p>
The SetupNavButtons routine will enable and set focus to the buttons, based on what particular wizard page is currently active. The function should be called when moving forward and to previous pages in your wizard.</p>
<h3>Finish Button</h3>
<p>
The <b>Finish</b> button completes the task your wizard is designed to automate. The button should be enabled from the SetupNavButtons function only when the user has supplied enough information that would enable your wizard to complete successfully.</p>
<h4>The btnFinish routine</h4>
<pre><code>Private Sub btnFinish_Click()

 &nbsp;&nbsp; Dim Msg As String ' For error handling.

 &nbsp;&nbsp; On Local Error GoTo btnFinish_Click_Err

 &nbsp;&nbsp; Dim f As Form

 &nbsp;&nbsp; ' Execute the GoNext/btnNext form method.
 &nbsp;&nbsp; Set f = Me!frmPage.Form
 &nbsp;&nbsp; If f.GoNext() Then

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Increment page number.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intWhatPage = intWhatPage + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call SetupNavButtons
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!frmPage.SourceObject = "samp_WizardPage" &amp; Format$(intWhatPage)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me!btnCancel.Caption = "&amp;Close"

 &nbsp;&nbsp; Else

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Error.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = "Unable to complete wizard processing of Sales Data!"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbCritical, "Terminating..."
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoCmd.Close acForm, Me.Name

 &nbsp;&nbsp; End If

btnFinish_Click_End:

 &nbsp;&nbsp; Exit Sub

btnFinish_Click_Err:

 &nbsp;&nbsp; Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
 &nbsp;&nbsp; Msg = Msg &amp; Err.Description
 &nbsp;&nbsp; MsgBox Msg, vbInformation, "btnFinish_Click"
 &nbsp;&nbsp; Resume btnFinish_Click_End

End Sub
</code></pre>
<p>
The code in the btnFinish routine assumes that the <b>Finish</b> button is enabled only when the wizard has navigated to page 2 and that the code in the <b>GoNext</b> method of page 2 will complete the wizard's task. You could just as easily execute the <b>GoNext</b> method on whatever page you are on and then execute a Public function to complete the wizard.</p>
<h2>SubForm Page Design</h2>
<p>
The forms used in your wizard to gather the individual steps as the users navigates the wizard are implemented as subforms in the Main Host form container and are referred to as the "pages" of your wizard.</p>
<h3>SubForm Page Properties</h3>
<p>
In order for your individual wizard pages to look correct when hosted by the main form, you should set the following properties of the form to these values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Setting/Value</b></td>
</tr>
<tr valign=top>
<td width=29%><b>Caption</b></td>
<td width=71%>&lt;blank&gt; Do not enter an value for the caption of the form.</td>
</tr>
<tr valign=top>
<td width=29%><b>AllowFilters</b></td>
<td width=71%>No</td>
</tr>
<tr valign=top>
<td width=29%><b>ViewsAllowed</b></td>
<td width=71%>Form</td>
</tr>
<tr valign=top>
<td width=29%><b>ScrollBars</b></td>
<td width=71%>Neither</td>
</tr>
<tr valign=top>
<td width=29%><b>RecordSelectors</b></td>
<td width=71%>No</td>
</tr>
<tr valign=top>
<td width=29%><b>NavigationButtons</b></td>
<td width=71%>No</td>
</tr>
<tr valign=top>
<td width=29%><b>DividingLines</b></td>
<td width=71%>No</td>
</tr>
<tr valign=top>
<td width=29%><b>Min/MaxButtons</b></td>
<td width=71%>None</td>
</tr>
</table><br>
<p>
The settings are arbitrary and, depending on the needs of your wizard, represent the basic items that would be set to implement a clean page design.</p>
<h2>Sizing Your Wizard Pages</h2>
<p>
The most common size used when creating the individual pages is 3 inches in height by 5 inches in width. The Main Host form implements the subform Object Frame to fit these dimensions. You can size your wizard any way you want, but keep the following considerations in mind when choosing a size.
<ul type=disc>
<li>
Does the wizard size work in all screen resolutions? Check the look of your wizard at 640 x 480 and up.<br><br></li>
<li>
Does the wizard Main Host form display all pages correctly? Make sure that text and fields are not being clipped or hidden because of sizing problems.</li>
</ul>
<h2>Readability of Your Wizard Pages</h2>
<p>
When you design the pages for your wizard, it is important to focus on how well the pages communicate the request for information from the user. A general rule is that a single wizard page should be dedicated to gathering a single piece of relevant information. The text should be concise and self explanatory. A wizard is designed to make a user's completion of a complicated task easier. Therefore, you should ensure that the user does not have to refer to complicated written instructions or to online Help.</p>
<h3>Using Graphics and Logos</h3>
<p>
Using graphics to aid the user in page context is a great way to make your wizard visually appealing and intuitive. There are some general rules for sizing and graphic placement on your pages.
<ul type=disc>
<li>
Place all same-size graphics at the same location on all pages.<p class=tl>
If you have a graphic that is used on each page, whether it changes or stays the same, try to keep that graphic in the same place as the user navigates the form.</P></li>
<li>
Make large graphics size from top to bottom.<p class=tl>
Size large graphics by height (that is, from top to bottom) instead of from left to right. This improves the readability of the wizard page and is more natural for the user.</P></li>
</ul>
<h2>The GoNext Method of the Page</h2>
<p>
Each page of your wizard is loaded into the Main Host form container, the user populates the various information on the page, and then clicks the <b>Next</b> button. The code associated with the <b>Next</b> button on the host form will then execute the GoNext function contained in the current wizard page. A basic GoNext function would look as follows.</p>
<h3>The GoNext Method</h3>
<pre><code>Public Function GoNext() As Boolean

 &nbsp;&nbsp; On Error GoTo GoNext_Err

 &nbsp;&nbsp; Dim Msg As String

 &nbsp;&nbsp; Msg = "Executing the GoNext() method of Page #1"
 &nbsp;&nbsp; MsgBox Msg, vbInformation, WizAppName

 &nbsp;&nbsp; GoNext = True

GoNextEnd:

 &nbsp;&nbsp; Exit Function

GoNext_Err:

 &nbsp;&nbsp; MsgBox Err.Description, vbInformation, WizAppName
 &nbsp;&nbsp; Resume GoNextEnd

End Function
The code associated with the Main Host form's <b>Next</b> button would call this function by setting a form reference and executing the Public method of the form:

Dim f As Form, boolResult As Boolean

' Execute the GoNext/btnNext form method
Set f = Me!frmPage.Form
boolResult = f.GoNext()
Set f = Nothing
</code></pre>
<h2>Summary</h2>
<p>
You should design the Host Main form and the associated wizard pages implemented as subforms in such a way as to make the debugging and addition of features simple to implement. This overview has provided you with the basic ideas that you need to accomplish this.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripting a Pair of Transaction Processors</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_scrtproc"></a></sup>Scripting a Pair of Transaction Processors</h1>
<p>
Steve Kirk<br>
MSDN Content Development Group</p>
<p>
March 1997</p>
<p>
The BANKASP sample is associated with this article. For installation instructions and sample code associated with this article and related Banking articles, please go to <a href="msdn_banksamp.htm">Banking Samples: Installation Overview</a>. </p>
<h2>Introduction</h2>
<p>
You can view client-side scripting and server-side scripting as two very different approaches to Internet application development, even though they share many similarities. In order to compare these approaches, I built a pair of applications that represent the opposing techniques while providing basically the same user function. Both of the applications process simple banking transactions over the Internet by using data services provided by a Component Object Model (COM) server, and they both use VBScript (Visual Basic® Scripting Edition) code within Internet documents as the application glue. The ActiveX™ scripting engine in Microsoft® Internet Explorer version 3.0 evaluates the script code contained in the client-side version, while the ActiveX scripting engine in Microsoft Internet Information Server (IIS) evaluates the scripts contained in the server-side version. The sample files include the data services provider as well as all of the Internet files for both applications. While I developed the sample using Microsoft Windows NT® Server and Workstation versions 4.0, other client platforms are compatible depending on the scripting technique used.</p>
<h2>Programs Embedded in Documents</h2>
<p>
Scripting is a technique for embedding program code into Internet documents. While performing its tasks, a transaction processor sends requests for resources and submits results to the server. If the requested resource contains script code, the appropriate scripting engine in either the server or the client evaluates the script as it passes through. Figure 1 shows the resource request path and the locations of the scripting engines.&nbsp; </p>
<p>
<img src="scrtproc_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The HTTP resource request path and location of scripting engines</b></p>
<h3>What a Script Can Do</h3>
<p>
The script engine on either the browser or the server processes script commands that are embedded in its input stream. Script commands can use the following mechanisms to accomplish their ends:
<ul type=disc>
<li>
Modify the output stream.<br><br></li>
<li>
Create objects, procedures, or variables for later use.<br><br></li>
<li>
Call procedures, modify variables, set the properties, or call the methods of objects provided by other components through COM.</li>
</ul>
<h3>A Philosophical Divide</h3>
<p>
Client-side scripting uses the power of the client computer to provide application services that augment the Hypertext Markup Language (HTML) part of the application. Software components are downloaded as needed and run on the client computer. The client-side script engine has access to these components through COM. A notable addition here is that COM in a distributed environment (DCOM) allows the client computer to use components that are located on computers across a local or wide area network, or even across the Internet. By using the computing power of the client, you can reduce the number of requests and the amount of data that is sent over the Internet.</p>
<p>
Server-side scripting frees the developer from concerns over client platform differences. Any standard browser can provide basically the same user function when the stream that the client receives contains only standard HTML. The price for this universality is a greater number of client request/server response cycles, so your application interface is more apt to be affected by network latency.</p>
<h3>Data Services</h3>
<p>
Our two applications use data services provided by a COM server developed in Microsoft Visual Basic version 5.0 (see Table 1). Using a services model allows us to hide the details of data storage behind an object interface and to increase the security, maintainability, and scalability of our overall solution. We are using a Microsoft Access .MDB for this sample, but the services model would allow us to upgrade to an Open Database Connectivity (ODBC) source without changing the applications. We will also locate the data services server on the Internet server where the server-side application can access it locally through COM and the client-side application can access it across the Internet by using DCOM. </p>
<p class=label>
<b>Table 1. Objects, properties, and methods for the data services</b></p>
<p>
<img src="scrtproc_2.gif" border=0></p>
<h3>The User Interface</h3>
<p>
The application displays a list of banks in a vertical frame to the left side of the display. When you select a bank, the system updates the bank detail frame and the account list. You may add new accounts or select an account to edit in the account detail frame. Figure 2 shows the common interface for both applications. </p>
<p>
<img src="scrtproc_3.gif" border=0></p>
<p class=label>
<b>Figure 2. Common user interface for both transaction processors</b></p>
<h2>Client-side Code</h2>
<p>
These are the client-side application files included in the BANKASP sample that accompanies this article:
<ul type=disc>
<li>
<b>Default.htm</b> defines and names application frames.<br><br></li>
<li>
<b>Banks.htm</b> creates the bank list.<br><br></li>
<li>
<b>Empty.htm</b> reserves a place for dynamically created HTML.<br><br></li>
<li>
<b>Bankdet.htm</b> displays bank detail and creates the accounts list.<br><br></li>
<li>
<b>Detact.htm</b> displays account detail.<br><br></li>
<li>
<b>Detedt.htm</b> contains the account editing interface.<br><br></li>
<li>
<b>Detnew.htm</b> contains the new account interface.</li>
</ul>
<p>
You enter the application through default.htm. The code in default.htm defines names for the application frames so that the system can later access variables and objects across frames. The src attribute sets the initial Internet resource for the banks frame to banks.htm while it sets the remaining frame source files to empty.htm.</p>
<pre><code>&lt;frameset cols="30%,*"&gt;
 &nbsp;&nbsp; &lt;frame name="banks" src="banks.htm"&gt;
 &nbsp;&nbsp; &lt;frameset name="currentbank" rows="50%,*"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;frameset name="bankaccounts" cols="45%,*"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;frame name="accounts" src="empty.htm"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;frame name="acctdet" src="empty.htm"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/frameset&gt;
 &nbsp;&nbsp; &lt;frame name="bankdet" src="empty.htm"&gt;
 &nbsp;&nbsp; &lt;/frameset&gt;
&lt;/frameset&gt;
</code></pre>
<p>
When the system first loads banks.htm, the first order of business is to create m_oAdmin of class CAdmin that provides the primary interface for the data services. The <b>m_oAdmin.Init </b>method makes the database connection, and <b>FillListBanks</b> prepares the Banks collection for use. </p>
<pre><code>&lt;script language="VBScript"&gt;
Dim m_oAdmin
Dim m_iCurrBank
Dim m_iCurrAccount
.
.
.
Set m_oAdmin = CreateObject("BankSrv.CAdmin")
If m_oAdmin.Init("pathname\banking.mdb") Then m_oAdmin.FillListBanks
</code></pre>
<p>
The next section writes the list of banks to the frame document. Once a script uses document.writeln, the scripting engine ignores any display content in the file and the script assumes responsibility for generating all of the HTML necessary to fill the display. The &lt;a&gt; elements that we write to the frame each contain an index to a bank, which the system uses to fill the other frames.</p>
<pre><code>For iIndex = 1 to m_oAdmin.Banks.Count
 &nbsp;&nbsp; Set oBank = m_oAdmin.Banks(iIndex)
 &nbsp;&nbsp; SBuff = ("&lt;a href=""bankdet.htm"" target=""bankdet"""
 &nbsp;&nbsp; SBuff = sBuff &amp; “onClick=""m_iCurrBank = " &amp; CStr(iIndex) &amp; """""&gt;"
 &nbsp;&nbsp; SBuff = sBuff &amp; oBank.Name &amp; "&lt;/a&gt;&lt;br&gt;"
 &nbsp;&nbsp; document.writeln(sBuff)
Next
Set oBank = Nothing
.
.
.
&lt;/script&gt;
</code></pre>
<p>
When the user clicks on a bank, the onClick handler assigns m_iCurrBank to the selected bank index and the bankdet frame loads bankdet.htm. The following script section from bankdet.htm updates the bankdet and accounts frames according to the selected bank. The system creates a CBank object, m_oBank, and sets it to the selected member of the m_oAdmin Banks collection. The program then walks through the m_oBank Accounts collection and writes a list of Accounts to the accounts frame. </p>
<pre><code>iBank = top.banks.m_iCurrBank
Set m_oBank = top.banks.m_oAdmin.Banks.Item(iBank)
top.accounts.document.open
top.accounts.document.writeln("&lt;strong&gt;Accounts&lt;/strong&gt;")
top.accounts.document.writeln("&lt;hr&gt;")
For iIndex = 1 to m_oBank.Accounts.Count
 &nbsp;&nbsp; Set oAcct = m_oBank.Accounts(iIndex)
 &nbsp;&nbsp; sBuff = "&lt;a href=""detact.htm"" target=""acctdet"" "
 &nbsp;&nbsp; sBuff = sBuff &amp; "onClick=""top.banks.m_iCurrAccount = " &amp; CStr(iIndex) 
 &nbsp;&nbsp; sBuff = sBuff &amp; """&gt;" &amp; oAcct.Number &amp; "&lt;/a&gt;&lt;br&gt;"
 &nbsp;&nbsp; top.accounts.document.writeln(sBuff)
 &nbsp;&nbsp; …
Next
Set oAcct = Nothing
top.accounts.document.close
</code></pre>
<p>
The program now writes a bank detail report to the current frame:</p>
<pre><code>document.writeln("Bank&nbsp;&nbsp;&nbsp; - " &amp; m_oBank.Name &amp; "&lt;br&gt;")
document.writeln("Code&nbsp;&nbsp;&nbsp; - " &amp; m_oBank.Code &amp; "&lt;br&gt;")
document.writeln("Address - " &amp; m_oBank.Address1 &amp; "&lt;br&gt;")
</code></pre>
<p>
When you select an account from the account list, the system sets top.banks.m_iCurrAccount to the selected account index and loads detact.htm into the acctdet frame. Detact.htm includes the following script section that displays account detail as well as <b>Edit</b> and <b>New</b> anchors.</p>
<pre><code>Set oAcct = oBank.Accounts.Item(iAccount)
document.writeln("Account Number&nbsp; - " &amp; oAcct.Number &amp; "&lt;br&gt;")
document.writeln("Account Type&nbsp; - " &amp; oAcct.TypeID &amp; "&lt;br&gt;")
document.writeln("Account Balance - " &amp; FormatCurrency(oAcct.Balance) &amp; "&lt;br&gt;")
document.writeln("&lt;br&gt;")
document.writeln("&lt;a href=""detedt.htm""&gt;Edit&lt;/a&gt;&lt;br&gt;")
document.writeln("&lt;a href=""detnew.htm""&gt;New&lt;/a&gt;&lt;br&gt;")
</code></pre>
<p>
When the user selects the <b>Edit</b> anchor, the system loads detedt.htm. This time, instead of generating the interface elements, the script fills in static HTML elements and provides an <b>On_Click</b> procedure for the <b>Commit</b> button. The text box controls and the <b>Commit</b> button are defined using standard HTML.</p>
<pre><code>Account Number&lt;br&gt;
&lt;input type=text Name="AcctNumber"&gt;&lt;br&gt;
Account Type&lt;br&gt;
&lt;input type=text Name="AcctTypeId"&gt;&lt;br&gt;
&lt;br&gt;
&lt;input type=button value="Commit" OnClick="CommitAccount"&gt;
</code></pre>
<p>
The script then fills in the account number and account type:</p>
<pre><code>Set m_oAcct = oBank.Accounts.Item(iAccount)
m_oAcct.Refresh
AcctNumber.Value = m_oAcct.Number
AcctTypeId.Value = m_oAcct.TypeID
</code></pre>
<p>
The script defines a subroutine for use when the user clicks on the <b>Commit</b> button. CommitAccount() gets user input from the text box controls and validates the input by attempting to convert it from text to the appropriate data type and monitoring the value of Err.</p>
<pre><code>Sub CommitAccount()
.
.
.
Err = False
lNewType = CLng(AcctTypeId.Value)
If Err Then
 &nbsp;&nbsp; MsgBox("Invalid account TypeID.")
 &nbsp;&nbsp; Exit Sub
Else
 &nbsp;&nbsp; m_oAcct.lNewType = lNewType
End if
</code></pre>
<p>
If the input values are valid, pass oAccount, with the new values, to the <b>Admin</b> update method. </p>
<pre><code>bResult = m_oAdmin.Update(, m_oAcct)&nbsp;&nbsp;&nbsp;&nbsp; 
</code></pre>
<p>
This completes the client-side application, which demonstrates how client-side scripting can work with software components through the client computer in order to provide function beyond what is possible with HTML alone. The server-side version will use the same data services, but it will access those services through the server's scripting engine and present the browser with a layer of standard HTML.</p>
<h2>Server-side Code</h2>
<p>
These are the server-side application files included in the BANKASP sample that accompanies this article:</p>
<p>
<b>Default.asp</b> defines and names application frames.</p>
<p>
<b>Global.asa</b> provides application and session level definitions. </p>
<p>
<b>Banks.asp</b> creates the bank list.</p>
<p>
<b>Empty.asp</b> reserves a place for dynamically created HTML.</p>
<p>
<b>Bankdet.asp</b> displays bank detail and creates the accounts list.</p>
<p>
<b>Detact.asp</b> displays the account detail.</p>
<p>
<b>Detedt.asp</b> contains account editing interface.</p>
<p>
<b>Commit.asp</b> handles account inserts and updates.</p>
<p>
The first step toward creating an Active Server Pages (ASP) application in Internet Information Server (IIS) is to create a virtual root directory on the server using the Internet Service Manager. Add the directory to the WWW Service as a virtual directory with read and execute rights and then set the default document to default.asp. With the virtual root configured, IIS sees the files within the directory as an application and it will provide application and session objects and events. When IIS receives a request for one of the files within the application folder, it manages application and session states and fires the appropriate OnStart events if the session is new. You can create scripts to handle these events and define application and session variables within the reserved file global.asa. The following code from global.asa instantiates and inits the CAdmin object and instantiates CBank and CAccount. </p>
<pre><code>&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt; 
Sub Session_OnStart
Set Session("m_oAdmin") = Server.CreateObject("BankSrv.CAdmin")
Session("bInitResult") = Session("m_oAdmin").Init("pathname\banking.mdb")
Set Session("m_oBank") = Server.CreateObject("BankSrv.CBank")
Set Session("m_oAccount") = Server.CreateObject("BankSrv.CAccount")
Session("bNewAccount") = False
End Sub
&lt;/SCRIPT&gt;
</code></pre>
<p>
Since default.asp contains only HTML definitions for the application framesets and frames, the scripting engine sends it to the browser unchanged. The banks frame requests banks.asp, which contains this next script segment. Note that &lt;% and %&gt; delimit script segments in ASP files.</p>
<p>
Refresh the Banks collection of the session-level CAdmin object with the <b>FillListbanks</b> method, and write the list of banks to the Response object as HTML anchor tags. The anchors include a bank index in the request to bankdet.asp when they are selected by the user.</p>
<pre><code>Session("m_oAdmin").FillListbanks
For iIndex = 1 To Session("m_oAdmin").Banks.Count
 &nbsp;&nbsp; sBuff = "&lt;a href=""bankdet.asp" &amp; "?iBankNdx=" &amp; Cstr(iIndex)
 &nbsp;&nbsp; sBuff = sBuff &amp; " ""target=""bankdet"" &gt;"
 &nbsp;&nbsp; sBuff = sBuff &amp; Session("m_oAdmin").Banks(iIndex).Name &amp; "&lt;/a&gt;&lt;br&gt;" 
 &nbsp;&nbsp; Response.Write(sBuff)
Next
</code></pre>
<p>
In bankdet.asp, the system retrieves the Bank index from the QueryString collection of the Request object and uses it to set the Session level CBank object: </p>
<pre><code>iIndex = Cint(Request.QueryString("iBankNdx").Item(1))
Set Session("m_oBank") = Session("m_oAdmin").Banks(iIndex)
</code></pre>
<p>
A quick walk through the accounts provides positive and negative totals for the bank detail report, which the system writes to the Response object:</p>
<pre><code>For iIndex = 1 to Session("m_oBank").Accounts.Count
 &nbsp;&nbsp; Set oAcct = Session("m_oBank").Accounts(iIndex)
 &nbsp;&nbsp; If oAcct.Balance &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cPos = cPos + oAcct.Balance
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cNeg = cNeg + oAcct.Balance
 &nbsp;&nbsp; End If
Next
Set oAcct = Nothing
Response.Write("Bank&nbsp;&nbsp;&nbsp; - " &amp; Session("m_oBank").Name &amp; "&lt;br&gt;")
Response.Write("Code&nbsp;&nbsp;&nbsp; - " &amp; Session("m_oBank").Code &amp; "&lt;br&gt;")
Response.Write("Credits - " &amp; FormatCurrency(cPos) &amp; "&lt;br&gt;")
Response.Write("Debits&nbsp; - " &amp; FormatCurrency(cNeg) &amp; "&lt;br&gt;")
Response.Write("Net Val - " &amp; FormatCurrency(cPos + cNeg) &amp; "&lt;br&gt;")
</code></pre>
<p>
The script in accounts.asp generates the accounts list by using the previously described technique of attaching an index number to an HTML anchor:</p>
<pre><code>For iIndex = 1 to Session("m_oBank").Accounts.Count
 &nbsp;&nbsp; Set oAcct = Session("m_oBank").Accounts(iIndex)
 &nbsp;&nbsp; sBuff = "&lt;a href=""detact.asp" &amp; "?iActNdx=" &amp; Cstr(iIndex) &amp; """"
 &nbsp;&nbsp; sBuff = sBuff &amp; " target=""acctdet"" &gt;"
 &nbsp;&nbsp; sBuff = sBuff &amp; oAcct.Number &amp; "&lt;/a&gt;&lt;br&gt;" 
 &nbsp;&nbsp; Response.Write(sBuff)
Next
</code></pre>
<p>
When you select an account from the account list, detact.asp handles the request and returns the account detail. The script also adds anchors for <b>Edit</b> and <b>New</b>, which are identical except for the way that they set the new account flag by passing QueryString data:</p>
<pre><code>iIndex = Cint(Request.QueryString("iActNdx ").Item(1)) 
Set Session("m_oAccount") = Session("m_oBank").Accounts(iIndex)
Response.Write("Account Number&nbsp; - " &amp; Session("m_oAccount").Number &amp; "&lt;br&gt;")
.
.
.
Response.Write("&lt;a href=""detedt.asp? bNewAccount =0""&gt;Edit&lt;/a&gt;&lt;br&gt;")
Response.Write("&lt;a href=""detedt.asp? bNewAccount =1""&gt;New&lt;/a&gt;&lt;br&gt;")
</code></pre>
<p>
When the user selects <b>Edit</b> or <b>New</b>, the request goes to detedt.asp, which stores the NewAccount flag to a session variable and then generates an HTML form that will be posted to commit.asp.</p>
<pre><code>Session("bNewAccount") = cBool(Request.QueryString("bNewAccount ").Item(1))
SBuff = "&lt;form name = ""account"" method=""post"" action=""commit.asp""&gt;”
Response.Write(sBuff)
.
.
.
sBuff = "&lt;input type=text Name=""AcctNumber"" "
If Not(Session("bNewAccount")) Then
 &nbsp;&nbsp; sBuff = sBuff &amp; "value=""" &amp; Session("m_oAccount").Number &amp; """"
End If
sBuff = sBuff &amp; "&gt;&lt;br&gt;"
Response.Write(sBuff)
…
Response.Write("&lt;input type=submit value=""Commit"" &gt;")
Response.Write("&lt;/form&gt;")
</code></pre>
<p>
The system requests commit.asp when a user submits the form with the <b>Commit</b> button. Since this script handles both new and existing accounts, the script creates a new Account object if necessary. </p>
<pre><code>If Session("bNewAccount") Then
 &nbsp;&nbsp; Set Session("m_oAccount") = Server.CreateObject("BankSrv.CAccount")
 &nbsp;&nbsp; Set Session("m_oAccount").Admin = Session("m_oAdmin")
 &nbsp;&nbsp; Set Session("m_oAccount").Bank = Session("m_obank")
End if
</code></pre>
<p>
The system retrieves input parameters from the Request.Form object and applies them to the Account object. </p>
<pre><code>sNewNumber = Cstr(Request.Form("AcctNumber"))
Session("m_oAccount").Number = sNewNumber
lNewType = CLng(request.Form("AcctTypeId"))
Session("m_oAccount").TypeID = lNewType
</code></pre>
<p>
Finally, the system either inserts or updates the Account object based on the value of NewAccount.</p>
<pre><code>If Session("bNewAccount") Then
 &nbsp;&nbsp; Result = Session("m_oAdmin").Insert(, Session("m_oAccount"))&nbsp;&nbsp;&nbsp;&nbsp; 
Else
 &nbsp;&nbsp; Result = Session("m_oAdmin").Update(, Session("m_oAccount"))
End If
</code></pre>
<h2>Registering and Configuring the Data Services Component</h2>
<p>
The data services component, as well as the database file, is located on the server for both applications, so we can perform a reasonable comparison between client-side and server-side scripting.</p>
<p>
Create the registry entries necessary for remote registration on your client machines by importing banking.reg with regedit.exe. Note that these registry entries include the SafeToScript and SafeToInitialize flags under implemented categories that you will have to create by hand if you register the servers using another method.</p>
<p>
Use racmgr.exe, included with Visual Basic version 5.0, to configure the server on your clients as well as the server. Configure the data services classes for launching on the server via DCOM. Specify the server name if you are running on an intranet or the IP address of the server if you are running over the Internet.</p>
<p>
Finally, use dcomcnfg.exe to configure your computers running Windows NT version 4.0 for DCOM security and launch permissions. The easiest way to get started with DCOM security is to open default security as wide as possible to get the system running and then make it progressively more restrictive until you have the desired level of security. Start with a default authentication level of none and a default impersonation level of anonymous. With default security configured, configure each data services class to use default security.</p>
<h2>Summary</h2>
<p>
Although I've presented client-side and server-side scripting as distinct techniques that represent opposing design philosophies, they are not mutually exclusive. In fact, they work best when you use them together, along with ActiveX controls and components. In future projects, I'll cover the issues that stand between these introductory samples and real applications, and I'll explore related Internet and component software issues of interest to client/server developers.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What's New in JScript 3.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_jscript3"></a>What's New in JScript 3.0</h1>
<p>
Nancy Winnick Cluts<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
Updated: October 6, 1997<br>
(See the " Changes for Internet Explorer 4.0 Final Release" section following.)</p>
<h3>Changes for Internet Explorer 4.0 Final Release</h3>
<ul type=disc>
<li>
New syntax for the example in the "Debug versus release" section (need parentheses around the condition)<br><br></li>
<li>
New syntax for the example in the "Enhancements to Control Flow" section that shows how to break on the label <i>done</i> (do not need square brackets)<br><br></li>
<li>
Information previously in the "Operators" section has changed or has been removed or updated</li>
</ul>
<h3>Introduction</h3>
<p>
With the release of Microsoft® Internet Explorer version 4.0, you can now make the most of the functionality provided in Microsoft JScript® version 3.0. JScript is Microsoft's implementation of the ECMAScript scripting language (a standardized scripting language based on JavaScript). JScript is a full implementation of the ECMAScript scripting language with some enhancements for Internet Explorer. If you're like me, you might have the impression that JavaScript or JScript is just some cut-down version of the Java language. It is not. It is an object-oriented language in its own right. JScript is supported in earlier versions of Microsoft Internet Explorer and Internet Information Server (IIS), but the newest version of Internet Explorer (version 4.0) provides some new and improved functionality, including the addition of conditional compilation, enhancements to control flow, and additional operators. This article outlines the new things you can do with JScript 3.0 on Internet Explorer 4.0 and Microsoft Internet Information Server version 4.0. The Microsoft Scripting Web site has full documentation for JScript at <a href="http://www.microsoft.com/scripting/">http://www.microsoft.com/scripting/</a>.</p>
<h3>Conditional Compilation</h3>
<p>
If you are a script developer, you have to design your scripts to run on different browsers and on multiple platforms. It is a challenge to write script that is effective and useful and will also run on all clients and platforms. Prior to JScript 3.0, you would have had to use the "least common denominator" in your script. The addition of conditional compilation to the JScript 3.0 script engine provides the script developer the flexibility to write script targeted to specific platforms and browsers on the client machine. Lest anyone be confused by the term "conditional compilation," let me explain. JScript is an interpreted language that is compiled after the Web server or browser has interpreted the code. Conditional compilation provides the ability to take different code paths dependent on specified run-time variables. It also enables you comment out code for non-Internet Explorer 4.0 platforms.</p>
<h4>Multiple clients</h4>
<p>
One of the best ways to use conditional compilation is to gracefully handle multiple disparate client browsers and platforms. Let's say that you want to utilize the new features in JScript 3.0 on a Web page, but you also need to maintain compatibility with older versions of Internet Explorer and Netscape Navigator. Before JScript 3.0, you would have had to write some script to determine which browser and what version and platform the user was running, plus write some server-side script to load a page compatible with that browser/version/platform. Using conditional compilation, you can put the JScript 3.0 features in a conditional compile section. This script runs only if the user is running a version of JScript 3.0; users of other browsers would not see the 3.0 code and the other script would run for them.</p>
<h4>Debug vs. release</h4>
<p>
You can also use conditional compilation for debug versus release versions of your script. Many developers build a slightly different version of script in their development or debug environment than the final release script. Conditional compilation makes this easier. You can, for example, define a debug variable and, if that variable is set to TRUE, run some debug script (like alert variable values); otherwise, you can ignore the script.</p>
<p>
The example below shows special comment delimiters that are used only if conditional compilation is activated by the <b>@cc_on</b> statement. Scripting engines that do not understand conditional compilation see only the alert statement identifying the need for a new scripting engine. It is strongly recommended that conditional compilation code be placed in comments:</p>
<pre><code>//@cc_on
/*@if (@_jscript_version == 3)
 &nbsp; alert("JScript version 3")
 &nbsp; @else @*/
 &nbsp; alert("You need a more recent script engine.")
//@end
</code></pre>
<p>
For more detailed information on conditional compilation, refer to the JScript Web site.</p>
<h3>Enhancements to Control Flow</h3>
<p>
In addition to conditional compilation, JScript 3.0 provides enhancements to control the flow of execution of your script. Sometimes, you may need to control if and when certain script is run. JScript 3.0 uses control structures to facilitate this work. This section documents the enhancements to control flow.</p>
<h4>Labels</h4>
<p>
Labels enable you to provide an identifier of script to Internet Explorer 4.0 that can be used in conjunction with the break and continue statements.</p>
<h4>Break</h4>
<p>
The break statement terminates the current loop. If used in conjunction with a label, it terminates the associated statement. Executing the break statement exits from the current loop or statement, and begins script execution with the statement immediately following.</p>
<p>
The syntax of the break statement is as follows:</p>
<pre><code>break [<i>label</i>];
</code></pre>
<p>
The label argument is optional and specifies the label of the statement from which you are breaking. For example, if you want to break on the label <i>done</i>, you can write:</p>
<pre><code>break done ;
</code></pre>
<p>
You typically use the break statement in switch statements and while, for, for...in, or do...while loops to stop a statement from executing. You most commonly use the <i>label</i> argument in switch statements, but it can be used in any statement, whether simple or compound.</p>
<h4>Continue</h4>
<p>
The continue statement stops the current iteration of a loop and starts a new iteration. The label argument, listed in the syntax below, is optional and specifies the iteration to which the continue statement applies.</p>
<pre><code>continue [<i>label</i>];
</code></pre>
<p>
You can use the continue statement only inside a while, do...while, for, or for...in loop. Here's how the program flow is continued for each type of loop:
<ul type=disc>
<li>
The while and do...while loops test their condition, and if TRUE, execute the loop again.<br><br></li>
<li>
The for loops execute their increment expression, and if the test expression is TRUE, execute the loop again.<br><br></li>
<li>
The for...in loops proceed to the next field of the specified variable and execute the loop again.</li>
</ul>
<h4>Switch</h4>
<p>
The switch statement enables the execution of one or more statements when a specified expression's value matches a label. This is a very familiar statement to C developers. The syntax for the switch statement is as follows:</p>
<pre><code>switch (expression) {
 &nbsp; case label :
 &nbsp;&nbsp;&nbsp;&nbsp; statementlist

case label :
 &nbsp; statementlist
...
default :
 &nbsp; statementlist
}</code></pre>
<p>
The following example tests an object for its type using the switch statement:</p>
<pre><code>function MyObject() {
...}
<span class=cfe><b>switch (</b></span>object.constructor<span class=cfe><b>){</b></span>
 &nbsp; <span class=cfe><b>case</b></span> Date<span class=cfe><b>:</b></span>
 &nbsp; ...
 &nbsp; <span class=cfe><b>case</b></span> Number<span class=cfe><b>:</b></span>
 &nbsp; ...
 &nbsp; <span class=cfe><b>case </b></span>String<span class=cfe><b>:</b></span>
 &nbsp; ...
 &nbsp; <span class=cfe><b>case </b></span>MyObject<span class=cfe><b>:</b></span>
 &nbsp; ...
 &nbsp; <span class=cfe><b>default:</b></span>
 &nbsp; ...
<span class=cfe><b>}</b></span></code></pre>
<h4>Do...while</h4>
<p>
In JScript 3.0, this combination of statements tells the scripting engine to execute a statement block once, and repeat execution of the loop until a condition or expression evaluates to FALSE. You can use this control structure, for example, to fill in a list with values until the list is empty (that is, checking for the next item returns FALSE). The syntax for the do…while statement is as follows:</p>
<pre><code>do
statement
while (expression) ;
</code></pre>
<p>
Note that the value of <i>expression</i> is not checked until after the first iteration of the loop, guaranteeing that the loop is executed at least once. Thereafter, it is checked after each succeeding iteration of the loop. So, if you are writing some script that uses this structure, be sure that you want the statement to execute at least once.</p>
<h4>Date and Time: getVarDate</h4>
<p>
The <b>getVarDate</b> method (methods are the name given to functions in JScript) enables interoperation between ActiveX® controls and JScript objects with regard to date. An ActiveX control could provide a date as a date variant (VT_DATE) and JScript 3.0 enables the user of this date to create a new JScript date based on the data type. For example:</p>
<pre><code>&lt;Script Language=JScript&gt;

<span class=cfe><b>/* Create a date object from the variant date passed by an ActiveX control. */</b></span>
var x = new Date(VariantDate);
&lt;/Script&gt;
</code></pre>
<p>
To provide the ability to convert the JScript date back into a VT_DATE, the Date object has a <b>getVarDate </b>method. Calling this method returns a VT_DATE.</p>
<pre><code>&lt;Script Language=JScript&gt;
//Create a new date object.
var x = new Date();
//Set the date of my ActiveX control to the VT_DATE from the JScript object.
myActiveXObject.date = x.getVarDate;

&lt;/Script&gt;
</code></pre>
<h3>Operators</h3>
<p>
Operators are used for functionality including arithmetic (such as addition, subtraction, and multiplication), bitwise comparisons, and to assign values to variables. In JScript 3.0, new operators have been added to the scripting engine that enable the developer to check equality and identity.</p>
<h4>Identity (===) and Identity (!==)</h4>
<p>
These two new operators provide JScript with a means of checking if two variables are identical (that is, the value and type are the same). The identity (=== and !==) operators behave exactly like to the equality operators (== and !=). The equality operators do some type coercions before comparing while === and !== do not coerce types.</p>
<h3>Regular Expressions and Pattern Matching</h3>
<p>
Regular expressions are patterns used to match character combinations in strings and provide the developer with a powerful means of searching strings for particular character combinations. This is especially useful when searching large datasets for particular expressions, sorting information, or matching information entered by the user. Below is an example of pattern matching using the <b>match</b> method:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JScript"&gt;
s = "For more information, see Chapter 3.4.5.1"
pattern = /(Chapter \d+(\.\d)*)/ //The parentheses are used for memory.
found = s.match(pattern) 
document.write(found)
&lt;/SCRIPT &gt;
</code></pre>
<p>
JScript 3.0 also supports the new RegExp object for regular expressions. This object uses properties and methods like any other JScript object. For full details about regular expressions, pattern matching, and the RegExp object, refer to the JScript 3.0 documentation.</p>
<h3>Debugger Support</h3>
<p>
The Microsoft Script Debugger ships with Internet Information Server 4.0 and is freely available from the Microsoft Internet Information Server Web site (<a href="http://www.microsoft.com/iis/default.asp">http://www.microsoft.com/iis/default.asp</a>). It enables developers to interactively debug active script in any application. To assist with this endeavor, JScript 3.0 has added debug functionality to the scripting engine as well as a new keyword: <b>debugger.</b></p>
<p>
Putting the <b>debugger</b> keyword into any JScript code launches the script debugger and enables the developer to debug the JScript script.</p>
<h3>Summary</h3>
<p>
In this article, I've covered only what is new in JScript 3.0 for Internet Explorer 4.0. For those of you who are new to JScript, more information, samples, and the latest version of JScript are available for download from the Microsoft JScript Web site at <a href="http://www.microsoft.com/jscript/">http://www.microsoft.com/jscript/</a>.
<ul type=disc>
<li>
Download the latest version of JScript at (<a href="http://www.microsoft.com/jscript/us/download/jsdown.htm">http://www.microsoft.com/jscript/us/download/jsdown.htm</a>)<br><br></li>
<li>
Read the press release, "Microsoft Embraces the ECMA Scripting Standard, " at (<a href="http://www.microsoft.com/jscript/us/techinfo/js3pr.htm">http://www.microsoft.com/jscript/us/techinfo/js3pr.htm</a>)<br><br></li>
<li>
Check out the JScript samples at <a href="http://www.microsoft.com/jscript/us/samples/jssamp.HTM">http://www.microsoft.com/jscript/us/samples/jssamp.HTM</a><br><br></li>
<li>
Read the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_jsfaq">
</object><a href=JavaScript:alink_1.Click()>"Microsoft JScript: Frequently Asked Questions,"</a> available in the MSDN™ Library.</li>
</ul>
<h3>Appendix: JScript? JavaScript? ECMAScript? What's the Deal Here?</h3>
<p>
You may be confused by the term ECMAScript that I've been using in this article. You're in good company. Here's the deal. ECMA (European Computer Manufacturers Association) is a European-based association for standardizing information and communications systems. The standard recently approved, known as ECMA-262, is based on joint submissions from Microsoft and Netscape. JScript 3.0 is Microsoft's implementation of the new ECMA-262 scripting language (you can read the press release on the Microsoft JScript Web site at <a href="http://www.microsoft.com/jscript/us/techinfo/js3pr.htm">http://www.microsoft.com/jscript/us/techinfo/js3pr.htm</a>). JavaScript is a scripting language written by Netscape that preceded the ECMA standard. There's an excellent introduction to JavaScript available on the Web (http://www.cc.ruu.nl/~goyarts/javascript/javascr.htm), if you'd like to read up on it. Basically, when talking about JScript or JavaScript, we are talking about implementations of the same standard scripting language, ECMA—the implementations are just marketed by different companies.</p>
<p>
Did you find this article useful? Gripes? Compliments? Suggestions for other articles? Drop me a line at <a href="mailto:nancycl@microsoft.com">nancycl@microsoft.com</a> and let me know.</p>
</BODY>
</HTML>

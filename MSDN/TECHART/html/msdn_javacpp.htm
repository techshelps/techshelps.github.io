<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction to Java for the C++ Developer</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_javacpp"></a></sup>Introduction to Java for the C++ Developer</h1>
<p>
Nancy Winnick Cluts <br>
Microsoft Corporation </p>
<p>
December 1996 </p>
<h2>Introduction</h2>
<p>
Java™ is a popular object-oriented programming (OOP) language used in Web development to provide system services not available through HTML. When you program with Java, you can create small applications, or applets, that run as plug-ins for your Web site. For the C or C++ developer, these plug-ins are akin to component object model (COM) objects and applets are akin to dynamic-link libraries (DLLs). With the applets, you can provide user-interface objects such as list boxes or buttons. This article covers the basics of Java for the Windows® C or C++ developer. I discuss the differences between Java and ActiveX™ and explain how Java runs in Internet Explorer 3.0. This article is based upon presentations given by Michael Connell and Daniel Jinguji for the Site Builder Conference, held in San Jose, California, on October 27–30, 1996. </p>
<h2>Java Basics</h2>
<p>
Java is an object-oriented programming (OOP) language that compiles into what is referred to as byte code. Resident on a machine that runs a Java applet is an application—the Java virtual machine (VM)—that verifies and interprets these byte codes. </p>
<p>
Java applets run in a protected space known as the sandbox. The sandbox prevents the applet from accessing files and selected system services, thus protecting the system from viruses that might be resident in an applet (written by some nasty developer—nobody you and I know). The idea is to limit the applet's access to the machine; however, this limitation can also lead to a limitation of functionality. If, for example, you need to write an applet that reads a file on the machine (or reads the registry), the sandbox walls will keep you out of the machine data. Alternatives to Java and the sandbox are ActiveX controls and signed applets. </p>
<p>
I said that Java was an OOP language—a language, in other words, concerned with objects and their interactions. Within this framework, the class is the central element. A class represents a system object that is patterned and has an associated state and associated methods. Procedural programming (C, FORTRAN, Pascal, et al.), on the other hand, is focused on the steps involved in completing a process. The procedure itself, rather than the class, is the most important element, the procedure being the list of steps used to perform a defined task that is part of the whole list of tasks within the program. </p>
<p>
For more information and pointers to Web sites that talk about Java, see the <i>Microsoft Presents Java</i> site at <a href="http://www.microsoft.com/java/">http://www.microsoft.com/java/</a>.</p>
<h2>Java and COM</h2>
<p>
Under Windows, the Java VM is an ActiveX component that exposes the Java class as an ActiveX component. The VM supports scripting, allows you to use other ActiveX components from Java, and allows other ActiveX components to use Java objects. This is done via the component object model (COM). </p>
<p>
COM provides the infrastructure for software-component interaction. It is language independent and platform independent. COM is the basis for ActiveX technologies as well as for OLE and Automation. COM consists of interfaces (<b>IUnknown</b> being the most basic). All COM objects are registered in the system by their CLSID (class id) and are instantiated via the <b>CreateInstance</b> function. COM interfaces reside in type libraries and use a proxy-stub mechanism for communication. </p>
<p>
If you are creating a COM object and want to call a Java applet, you can use Visual J++ to perform the following steps:
<ol>
<li>
Create an ODL/IDL description file.<br><br></li>
<li>
Create a type library.<br><br></li>
<li>
Implement your COM interface.<br><br></li>
<li>
Register the Java class via JAVAREG.<br><br></li>
<li>
Make the class available. </li>
</ol>
<h3>Classpath and Trusted Classpath</h3>
<p>
The Java VM finds class files by searching the classpath. If the file you need is not in the classpath, you can denote a trusted classpath, which is a path to classes outside of the sandbox. The user determines which classes are to be trusted and which are not when the user installs the class onto his or her machine. </p>
<h2>A Simple Java Program</h2>
<p>
The simplest Java program is easy to read but no cause for celebration:</p>
<pre><code>class OurApplet
{
}
</code></pre>
<p>
Ooh. Now wasn't that special? No? Okay, so it's about as exciting as a minimal C program—let's go on. </p>
<h3>The Class Keyword</h3>
<p>
Java uses a special keyword, <i>class</i>, that is a template for creating objects. You use this declaration to define a new type. Think of each object you create as an instantiation of a class. </p>
<p>
There are four basic types (or modifiers) of classes:
<ul type=disc>
<li>
public: Indicates a class that can be used outside of the applet. Define this type of class if you want to allow others to call the methods declared for your object (or instantiate an object of your class). This is an important characteristic for any object you intend to embed.<br><br></li>
<li>
abstract: Indicates that the class definition is incomplete and that, therefore, the class cannot be instantiated. You can't create an object of the abstract type at run time directly; you must subclass it and complete the definition. Only abstract classes can contain abstract methods. <br><br></li>
<li>
final: Indicates that the class cannot be subclassed.<br><br></li>
<li>
private: Indicates a class that cannot be used outside the scope of your applet. Duh—what did you think it meant?</li>
</ul>
<h3>Fields</h3>
<p>
Classes have fields that describe an object. This relationship is akin to the C "struct" in which you have different fields that describe a structure. There are a few intrinsic objects, such as bool, char, and int, but when you want to instantiate a nonintrinsic object, you need to use <i>new</i> to do so. The modifiers for each field are:
<ul type=disc>
<li>
public: Indicates that other classes can access the field. Remember that you break data encapsulation by using this modifier.<br><br></li>
<li>
private: Indicates that the field cannot be accessed outside of the class.<br><br></li>
<li>
abstract: Indicates that you're giving the signature of the method (declaring it as a member) but that you're giving no implementation of the method. All nonabstract classes that derive from the class containing one or more abstract methods must implement all abstract methods.<br><br></li>
<li>
final: Indicates that the field must be given an initial value in the declaration and that value can't be changed later (similar to a const in C++).<br><br></li>
<li>
static: Indicates that the field is public within all methods of the class but cannot be accessed outside of the class. </li>
</ul>
<p>
The example below shows a simple class with a couple of simple fields: one is the intrinsic, <i>int</i>, and the other is a special class, <i>String</i>, that needs to be instantiated via <i>new</i>.</p>
<pre><code>public class OurApplet
{
 int xPosition = 20;
 string author = new String ("Me");
}
</code></pre>
<h3>Methods</h3>
<p>
Classes use methods to communicate with other objects. Methods allow you to set or get information about the current state of the object. This type of implementation encapsulates the data for the class (that is, you can't get your grimy little fingers directly on the fields). In the example class above, you would want the class to support methods to get and set the <i>xPosition</i> and <i>String</i> fields within the class.</p>
<p>
Like classes and fields, methods also have modifiers (public, private, etc.) that describe the scope of the method. When a method is <i>final</i>, it means subclasses can't override or hide the method.</p>
<p>
Methods can return one value. This means that you can write a Get type of method that returns the xPosition, or you can return an error value. Consider the code below that implements a couple of simple methods, <b>getPosition</b> and <b>putPosition</b>, on the class shown above, <b>OurApplet</b>.</p>
<pre><code>Public class OurApplet
{
 private int xPosition = 20;
 String author = new String("Me");
 public void putPosition(int x) {
  xPosition = x;
 }
 public int getPosition() {
  return xPosition;
 }
}
</code></pre>
<h3>Inheritance</h3>
<p>
Java allows classes to inherit from other classes via the <i>extends</i> keyword. This means that you can base a new class on an existing class (called the <i>base</i> class). The new class, called the <i>derived</i> class, inherits its parent's state and methods. When you implement a derived class, you do not need to change or to have the source code for the base class.</p>
<p>
All Java classes implicitly derive from the <b>Object</b> class, and applets derive from the <b>java.applet.Applet class</b>. This base class, <b>java.applet.Applet</b>, provides most of the basic functionality of an applet for "free." </p>
<h3>Import</h3>
<p>
The import statement gives a class access to other classes that are defined elsewhere. For example, the statement:</p>
<pre><code>import java.applet.Applet
</code></pre>
<p>
in your applet gives your applet access to the Applet class. This is akin to the <b>INCLUDE</b> statement in C. The following code snippet demonstrates the addition of imports and inheritance to the example class, <b>OurApplet</b>. The example imports <b>java.awt.*</b> (which is the package that includes all graphical elements) and <b>java.applet.Applet</b>. It is derived from Applet and overrides the <b>paint</b> class within the class.</p>
<pre><code>import java.awt.*;
import java.applet.Applet;
public class OurApplet extends Applet 
{
 &nbsp; private in xPosition = 20;
 &nbsp; String author = new String("Me");
 &nbsp; public void paint(Graphics g)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; g.drawstring(author, xPosition, 50);
 &nbsp; }
}
</code></pre>
<p>
C developers are used to the notion of libraries containing classes. Java classes and interfaces are grouped into <i>packages</i>. The following list contains some commonly used packages:
<ul type=disc>
<li>
java.lang: Contains many of the most commonly used classes such as strings, objects, compiler, run time, security, numerics, and threads. When you create a Java program, this package is automatically included.<br><br></li>
<li>
java.io: Contains input/output classes, which allow you to stream data into and out of files, strings, and other targets or sources.<br><br></li>
<li>
java.util: Contains commonly used utilities such as data structures and date, time, and string manipulation.<br><br></li>
<li>
java.net: Contains networking classes.<br><br></li>
<li>
java.applet: Contains the Applet class and several other interfaces that allow the developer to hook up an applet to a document or resource. </li>
</ul>
<h2>The Life Cycle of an Applet</h2>
<p>
The applet life cycle is controlled by four methods inherited from the Applet class:
<ul type=disc>
<li>
init(): Initializes the applet (e.g., loads images).<br><br></li>
<li>
start(): Starts the applet (e.g., plays an animation).<br><br></li>
<li>
stop(): Stops the applet (e.g., halts an animation).<br><br></li>
<li>
destroy(): Deletes the applet. </li>
</ul>
<p>
In order to be defined as an applet, an applet must implement these four basic methods. </p>
<h2>Adding a GUI Element to an Applet</h2>
<p>
Now that you know how to create a simple applet, you might want to add some graphical user interface (GUI) elements to it. To do this, you need to import <b>java.awt.*</b> or one of its derived classes. Then, add the class field for the desired object type (for example, a button), <b>add()</b> the object to the container, initialize the GUI object in <b>init()</b>, and add an event handler for your component. The following example shows the initialization of a button.</p>
<pre><code>import java.awt.*;
import java.applet.Applet;
public class OurApplet extends Applet 
{
 &nbsp; Button OutButton;
 &nbsp; public void init()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; OurButton = new Button("Click me!");
 &nbsp;&nbsp;&nbsp;&nbsp; add(ourButton);
 &nbsp; }
}
</code></pre>
<p>
The code above initialized the button; now let's find an event handler for it. An <i>event handler</i> is a method that responds to messages from the outside world (for example, a button click). The following code is an example of an event handler that processes a button-down operation:</p>
<pre><code>Public boolean action(Event evt, object what)
{
 &nbsp; if (evt.target == OurButton)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; OurButton.setLabel("Clicked");
 &nbsp;&nbsp;&nbsp;&nbsp; return true;
 &nbsp; }
 &nbsp; else return false;
}
</code></pre>
<p>
Low-level events—for example, mouseDown(), mouseUp(), mouseMove(), mouseDrag(), mouseEnter(), mouseExit(), keyDown(), and keyUp()—have their own handlers, which you can override. With these handlers you can change component behavior instead of just using it. </p>
<h2>Arrays</h2>
<p>
Arrays are first-class objects in Java. The code below demonstrates two ways you can create an array:</p>
<pre><code>Example 1:
int MyArray[];
MyArray = new int[25];
Example 2:
int MyMatrix[][];
MyMatrix = new int[4][];
for (int i = 0; i &lt; 4; i++)
 &nbsp; MyMatrix[i] = new int[5];
</code></pre>
<p>
Note that arrays in Java are not necessarily "square." You can actually code an array to have one element in the first row, two elements in the second, three in the third, and so on. Very odd. Use at your own risk.</p>
<p>
All objects in Java are passed by reference. That is, you don't actually pass the variable itself but pass a reference to it to another method. When you pass an object as an argument to a function, you are passing the actual object and not the value. This means that the target function can alter the value of the object. </p>
<h2>Using ActiveX Controls</h2>
<p>
You can use ActiveX controls, or other non-Java objects, from your Java applet. This allows you to access methods and properties from your Java source code. Using an ActiveX control in Java looks just like using another Java class. For example, the following code uses an RDO object:</p>
<pre><code>import msrdo.*;
rdoInterface myRDO = (rdoInterface) new rdoObject;
</code></pre>
<p>
Note that you can't use ActiveX controls on any platform other than Intel Windows 95 or Windows NT®. So, although this is way-cool functionality, it comes at the expense of portability.</p>
<h3>Useful utilities</h3>
<p>
In order to mix and match Java with non-Java objects, you can use the Microsoft® Java Type Library Compiler to generate .class files from type libraries. This utility can be run from the command line via the command <b>javatlb.exe</b>. Visual J++™ also contains tools and the Java Type Library Wizard. The Summary.txt generated by the wizard contains useful information about the generated classes.</p>
<p>
Another utility you might find useful is OLE2VW32.EXE. This tool allows you to browse existing ActiveX components, display a component's CLSID, and find scriptable methods for a class. </p>
<h2>Scripting an Applet</h2>
<p>
Now that you know a little about creating your own Java applet (or understanding Java code that someone dumped in your lap), let's take a look at how you can use scripting to activate that applet. You can embed and control Java applets and ActiveX controls from within HTML using Visual Basic® Scripting Edition (also known as VB Script), Jscript™, or any ActiveX scripting language. You don't have to understand the source code to your applet or control in order to script it. Once you have the controls you want, it's simply a matter of laying out the controls on the HTML page and connecting them using ActiveX scripting. The example below shows an HTML page that has a spinning-world applet and a spin-button control embedded in its page. The example then uses scripting to activate the controls.</p>
<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;!— Embed the spinning-world applet—&gt;
&lt;applet
 &nbsp; code=TestApplet.class ID=world
 &nbsp; width=100
 &nbsp; height=100 &gt;
&lt;/applet&gt;
&lt;!— Embed a spin-button control —&gt;
&lt;OBJECT
 &nbsp; classid="clsid:79176FB0-B7F2-11CE-97EF-00AA006D2776"
 &nbsp; id=spinbtn &gt;
&lt;/OBJECT&gt;
&lt;!— Create some HTML form buttons —&gt;
&lt;INPUT TYPE=button VALUE="Forward" NAME="BtnForward"&gt;
&lt;INPUT TYPE=button VALUE="Reverse" NAME="BtnReverse"&gt;
&lt;!— Create the handlers for our controls —&gt;
&lt;SCRIPT language = "VBScript"&gt;
&lt;!—
Sub BtnForward_OnClick
 &nbsp; document.world.direction = 1
End Sub
Sub BtnReverse_OnClick
 &nbsp; document.world.direction = -1
End Sub
Sub spinBtn_SpinDown
 &nbsp; document.world.speed = document.world.speed+10
End Sub
Sub spinBtn_SpinUp
 &nbsp; document.world.speed = document.world.speed-10
End Sub
—&gt;
&lt;/SCRIPT&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>
Simple, isn't it? </p>
<h2>Summary</h2>
<p>
I hope this article has given you a good start in understanding Java and how scripting can enhance controls. More information can be found on this Web site and on <a href="http://www.microsoft.com/java/">www.microsoft.com/java/</a> and <a href="http://www.microsoft.com/visualj/">www.microsoft.com/visualj/</a>. So, what's next? Well, take a look at the Visual J++ applet wizard and create some applets. You can start with the samples that come with Visual J++ if you'd rather start with code and modify it. You can also find applets on the Web and view their source code to see how they were created. Finally, try scripting an applet in Internet Explorer. Before long, you'll be a control-and-scripting machine and you, like other Webmasters, can charge obscene amounts of money for your work. </p>
</BODY>
</HTML>

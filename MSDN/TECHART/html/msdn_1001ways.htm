<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1,001 Ways to Get Input from Web Users</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_1001ways"></a>1,001 Ways to Get Input from Web Users</h1>
<p>
Michael Edwards<br>
Developer Technology Evangelist <br>
Microsoft Corporation</p>
<p>
October 21, 1997</p>
<h3>Contents</h3>
<p>
<a href="#1001ways_intro">Introduction</a><br>
<a href="#1001ways_forms">HTML Forms</a><br>
<a href="#1001ways_userinfo">Saving User Info</a><br>
<a href="#1001ways_dhtml">Dynamic HTML Enables Very Engaging Pages</a><br>
<a href="#1001ways_tools">Microsoft Visual InterDev, FrontPage 98 Beta and Other Tools</a><br>
<a href="#1001ways_summ">Summary</a></p>
<h2><a name="1001ways_intro"></a>Introduction</h2>
<p>
The number of Web development technologies is growing about as fast as the number of new Web hosts (or so it seems). These days, there are many more ways to obtain user input on a Web page than using HTML forms. It's a good thing, because you need to get much more information from the user than what they can type into an edit field. This article provides overview information on several user-input technologies that you can employ to get what you want from your users. I will briefly discuss how each technology works, what authoring and coding skills you need to use each one, what target platforms each works on. I'll also provide a profusion of links to more information, samples, and articles.</p>
<h2><a name="1001ways_forms"></a>HTML Forms</h2>
<p>
Just about every book on HTML (the shelves were laden with several dozen of all sizes and colors the last time I checked my favorite bookstore) has at least one chapter devoted to HTML forms. But books cost money and you want something for free, right? Well, let's start with the free, 20-minute tour and go from there to more advanced user-input methodologies (also free of course!). </p>
<h3>The Client-Side Story</h3>
<p>
The &lt;FORM&gt; element lets you insert static and editable text fields, drop-down menus, buttons, check boxes, and radio buttons into your Web page. Data obtained from the form is sent (through HTTP protocols) to a server for processing. HTML forms are useful for obtaining text-based information and choices from users. For example, an HTML form can get parameters from users to submit a query to a server-side database, and display the results of the query on the client's machine. Or, a set of HTML forms can create a data-entry package for updating records in a server-side database. </p>
<p>
Let's look at a simple example, one you have probably seen umpteen times. The Archive of XML-Dev site at http://www.lists.ic.ac.uk/hypermail/xml-dev/ lets you browse and search the XML-Dev e-mail list. For those not familiar with e-mail lists, they are simply a way to coordinate sending and receiving e-mail among a list of people professing a common interest. This site is an archive of all the posts to the XML-Dev mailing list since it was founded. A certain public-spirited individual has made the contents of all the posts searchable. We'll get into how they did that in a minute, but first let's look at the code that displays this simple form:</p>
<pre><code>&lt;form method=GET action="/cgi-bin/wwwwais"&gt;
Search for: &lt;input type=text name="keywords" size=40&gt;
&lt;input type=hidden name="source" 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value="/usr/local/wwwindex/sources/xml-dev/index.src"&gt;
&lt;input type=submit value=" Search "&gt;
&lt;/form&gt;
</code></pre>
<p>
Note that the form data and code is completely contained inside the &lt;FORM&gt; element. Let's discuss the child &lt;INPUT&gt; elements and then the &lt;FORM&gt; element's attributes.</p>
<p>
The first &lt;INPUT&gt; element inserts a text box in which the user can type the search keyword. The text box is indicated by the TYPE<i> </i>attribute (<code>type=text</code>). Other values for this attribute insert a check box (<code>type=checkbox</code>), radio button (<code>type=radio</code>), or push button (<code>type=button</code>). The NAME and VALUE<i> </i>attributes of &lt;INPUT&gt; specify the variable name and initial value for the data associated with that element. For example, the value of a text box is the text that is typed in it and, because this example does not include a VALUE attribute, the Keywords text box is initially empty. Data entered into a form is sent to the server using pairs of <i>name=value </i>strings, one for each &lt;INPUT&gt; element in the form. If I were to enter "CDF" into this text box, the string "keywords=cdf" would be sent to the server.</p>
<p>
The second &lt;INPUT&gt; element uses TYPE=HIDDEN. &lt;INPUT&gt; elements specified as hidden are not displayed to the user. Hidden &lt;INPUT&gt; elements send a <i>name=value</i> string to the server that the user doesn't have to know about (and can't modify). This particular element sends the string "source=/usr/local/wwwindex/sources/xml-dev/index.src" to the server.</p>
<p>
The last &lt;INPUT&gt; element uses TYPE=SUBMIT, which is a special kind of button. Can you guess what happens when you press the Submit button? Yes, the browser gathers all the current <i>name=value</i> strings and sends them to the server. How do the strings get to the server, and what happens next? That takes us back to the first line of code and the &lt;FORM&gt; tag.</p>
<p>
There are two attributes in this &lt;FORM&gt; element. The METHOD attribute specifies which of two HTTP protocols to use to send the <i>name=value</i> strings as input to a server-side program. The server-side program is indicated by the partial URL in the ACTION attribute. There are two HTTP protocols you can use: GET and POST. I'll assign learning the POST protocol for homework, and go over the GET protocol, which is easiest to explain anyway. (There are some security concerns with older browsers and the GET protocol; see http://www.microsoft.com/security/creditconc.htm. In short, the POST protocol is the most secure method, and the W3C standard, for handling financial transactions)&nbsp; When you use the GET protocol, the browser concatenates all the <i>name=value</i> strings to the end of a URL for the server-side program. For example, when I search for "CDF" the browser surfs to the following URL:</p>
<pre><code>http://www.lists.ic.ac.uk/cgi-bin/wwwwais<span class=cfe>?keywords=CDF&amp;source=%2Fusr%2Flocal%2Fwwwindex%2Fsources%2Fxml-dev%2Findex.src</span>
</code></pre>
<p>
Note that the actual URL and form data are separated by the "?" character and the path separator characters are converted to their ASCII equivalent (%2F). When this arrives at the Web server, the "?" tells the server that the "wwwais" part of the URL is a program that should be executed and passed the string that follows the "?". The server communicates with the program (called a <i>gateway program</i>) using the Common Gateway Interface (CGI), and the program gets the parameters from the browser through standard input and sends data back to the browser by writing to standard output. What does it write to its standard output? HTML of course. In summary, the server-side program uses the information sent from the client to dynamically generate a Web page that is sent back to the client by the Web server. So the code above is, in a sense, a virtual URL.</p>
<p>
Using HTML forms is cool because the client-side code is so simple to write and understand, and HTML forms are extremely cross-browser compatible. Just about every browser can display HTML forms, even purely text-based ones. Plus, many browser-specific extensions (like the button &lt;INPUT&gt; type) are supported by both Microsoft and Netscape. </p>
<h4>For more information</h4>
<ul type=disc>
<li>
Read about the &lt;FORM&gt; element in the "DHTML References" section of the Internet Client SDK (MSDN Library, Platform SDK). This document includes some handy tables of attributes for each HTML element.<br><br></li>
<li>
Echo is an API that enables you to pass HTML FORM parameter requests to a remote Microsoft Windows NT® server. It improves performance by maintaining a connection and reusing that connection for subsequent client requests. ECHO includes code for preprocessing GET and POST parameters. To read about and copy the Echo project files, see "Echo: DLL Using Windows Sockets" (MSDN Library, Visual C++ documentation).<br><br></li>
<li>
Read about form-based file upload support in Microsoft® Internet Explorer in "Form-Based File Upload Support in Internet Explorer" (MSDN Library, Knowledge Base article: Q161395).</li>
</ul>
<h3>The Server-Side Story</h3>
<p>
Until recently, most HTTP servers ran on UNIX boxes, so if you wrote any gateway programs you were probably a fairly well-versed programmer (and really hard to scare I bet). But even if you eat code for every meal, the CGI approach creates this problem: the Web server must spin off a separate program for each user request. All those processes running concurrently on the server can bring a popular site to its knees. There are better ways to process user input on the server—today's Web servers sport programmable extensions that run in the same process as the server itself and provide extra features that make programming tasks easier. </p>
<p>
Microsoft Windows NT® with Internet Information Server (IIS) extensions includes an application programming interface called Internet Server API (ISAPI). Win32® developers can write code that talks directly to this interface to do all the things they can with CGI, and more. You can use ISAPI to get forms data and send HTML back to the client. And you can write your server-side code in any language that can interface with a Microsoft Windows® DLL, such as C/C++, Java, Microsoft Visual Basic®, or even scripting through Active Server Pages. Because HTML forms access these applications the same way they would a gateway program (through the ACTION attribute of an &lt;INPUT&gt; element that is assigned a TYPE value of SUBMIT), and because all Win32 code runs on the server, the solution is a fine cross-browser approach. ISAPI can make writing a database application, such as an order entry form or custom catalog, a lot easier. You can also make use of the entire Win32 API and the range of programming tools available to write Win32 applications.</p>
<p>
Microsoft Visual C++® Microsoft Foundation Classes (MFC) began supporting ISAPI when MFC version 4.1 was released over a year ago. Several MFC classes support the creation of two types of server objects: <i>server extensions</i> (or DLL-based apps), which provide a more efficient alternative to CGI apps; and <i>filters</i>, which is a server-based mechanism for screening messages sent to and from the Internet server. For example, the MFC <b>ChttpServer</b> class includes methods to receive forms data from the client and the <b>ChtmlStream</b> class is used to send an HTML stream back to the client. </p>
<p>
Another approach provided by IIS-compatible Web servers (Windows NT Server, Microsoft FrontPage® Server Extensions, and Microsoft Windows 95 Peer Web Services) that will appeal to people with HTML and scripting experience is using Microsoft Active Server Pages (ASP). ASP is a server-side scripting environment that integrates a set of scriptable objects with HTML, so you can leverage what you already know about creating Web pages. When a browser requests an .asp file from the Web server, ASP parses the requested file from top to bottom, executes any commands, and sends the resulting HTML page to the browser. So ASP is also a fine cross-browser solution to processing HTML forms on the server. </p>
<p>
The primary built-in ASP object for getting information from a Web user is the <i>Request</i> object. The Request object gives access to five collections of information, one of which is the data submitted on an HTML form. </p>
<h4>For more information</h4>
<ul type=disc>
<li>
Site Builder Workshop has a whole section devoted to server topics. Go to <a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a>, and click "Server" at the top of the page. You can find more information on Microsoft server technologies by selecting "Server Software" on the Products menu or "Server"<i> </i>on the Technologies menu at the top of the Site Builder home page (<a href="http://www.microsoft.com/sitebuilder/">http://www.microsoft.com/sitebuilder/</a>).</li>
</ul>
<p>
<b>ASP</b>
<ul type=disc>
<li>
Read more about the ASP Request object in "Getting Information from a User" (MSDN Library, Visual InterDev documentation).<br><br></li>
<li>
Read more about the ASP Form collection on MSDN Library Online in "Request Object" (MSDN Library, Visual InterDev documentation).</li>
</ul>
<p>
<b>ISAPI</b>
<ul type=disc>
<li>
Read more overview information about ISAPI in "Integrating with Internet Information Server" (MSDN Library, Platform SDK documentation).<br><br></li>
<li>
For more in-depth information, see "Internet Server API (ISAPI) Extensions" (MSDN Library, Visual C++ documentation).<br><br></li>
<li>
MIND published "Tips and Tricks for ISAPI Programming" in the July 1997 issue at <a href="http://www.microsoft.com/mind/0797/ISAPItips.htm">http://www.microsoft.com/mind/0797/ISAPItips.htm</a>.<br><br></li>
<li>
Check out the list server for ISAPI at http://206.241.12.10/archives/isapi.html where, among other ISAPI-related topics, folks discuss MFC solutions for IIS-based applications. Many Microsoft people monitor and post to this list.<br><br></li>
<li>
You might also check out the Microsoft Support site at <a href="http://support.microsoft.com/support/">http://support.microsoft.com/support/</a>. You can enter queries directly into their Knowledge Base to get answers to frequently asked questions.</li>
</ul>
<p>
<b>MFC</b>
<ul type=disc>
<li>
MFC 4.1 introduced some new classes to assist you in writing server applications for IIS. One of the MFC developers wrote an overview article about using MFC ISAPI classes on an IIS server, with lots of samples. See "Writing Interactive Web Apps is a Piece of Cake with the New ISAPI Classes in MFC 4" in <i>Microsoft Systems Journal</i> 1996, Volume 11 (MSDN Library, Periodicals). <br><br></li>
<li>
If you aren't super familiar with how MFC works, read "Microsoft Foundation Class Library Development Guidelines" in the Technical Information section of the Visual C++ Web site (<a href="http://www.microsoft.com/visualc/">http://www.microsoft.com/visualc/</a>).</li>
</ul>
<p>
<b>CGI</b>
<ul type=disc>
<li>
If you feel compelled to learn the nuts and bolts of the CGI, check out the Windows CGI specification at http://website.ora.com/wsdocs/32demo/windows-cgi.html. <br><br></li>
<li>
If you are going to do some CGI programming, the CGI sample associated with "<a href="msdn_cgispawn.htm">CGISPAWN: A Utility for Use with HTML Forms"</a> shows you how to run gateway programs that do not utilize standard input/output or other forms of communication between the HTTP server and CGI gateway programs.<br><br></li>
<li>
Read Dr. GUI's juicy comments about Visual Basic and CGI applications in the January/February 1996 edition of <i>Developer Network News</i> (MSDN Library, Periodicals).</li>
</ul>
<h2><a name="1001ways_userinfo"></a>Saving User Information</h2>
<p>
Sometimes Web pages need to save information that's been obtained about the client. Saving this type of information for later use can help preserve user preferences or other information to provide a better experience for users who return to your site. Sometimes you need to save information, either temporarily or permanently, for your design to work properly. For example, you might need to create a multipage form whose subsequent pages depend on information that was obtained in the previous pages. There are a number of ways you can do this, and we'll start off describing the only cross-browser method I am aware of.</p>
<h3>Cookies</h3>
<p>
In Web parlance, cookies are a means of saving information (such as browser settings, recently visited Web sites, and class paths) on the client machine. There is some controversy about cookies. Some users feel that cookies are a significant security hole, providing nefarious programs access to information on the client machine. This perception is partly due to the opacity of cookies: users don't know when a site is storing a cookie on their machine, what information is contained in the cookie, or (most importantly) how the information in the cookie is going to be used. So cookies are seen as invading the privacy of users. Responding to this concern, adjustable security settings (such as in the Advanced tab of the Internet Options command on Internet Explorer 4.0's View menu) enable users to disable cookies or to receive a prompt before accepting cookies. If you use cookies, be aware that they are perceived by some as an invasion of privacy, and have a backup plan prepared for clients who don't accept cookies.</p>
<p>
In Internet Explorer 4.0, cookies are properties of the Document object, and are accessible via scripting. Through scripting, you can give the cookie an expiration date, allow it to be shared with other pages in the server domain, and require the cookie information to be accessed from a secure environment. You can also determine whether cookies are enabled or disabled on the client.</p>
<p>
You can save cookies on the client by using HTTP version 1.0 request headers, but this topic is more complicated than I want to get into right now.</p>
<h3>What If I Don't Want to Use Cookies?</h3>
<p>
Cookies are the only cross-platform technique (that I am aware of) for persisting data on the client. But if you can live with creating solutions that will only run on Internet Explorer 4.0 platforms, you have a couple more options for saving state or other data on the client.</p>
<p>
The first method is the <b>IPersistHistory</b> interface, which is designed to retain state information on a given page and can be retrieved later. The Internet Client SDK includes a sample Active Template Library (ATL) ActiveX™ control that uses this interface. It is called Percy, and you will find it in the Samples list<i>. </i>(Download the Internet Client SDK at <a href="http://www.microsoft.com/msdn/sdk/">http://www.microsoft.com/msdn/sdk/</a>) </p>
<p>
If you need to save state information from one page that can be accessed from any other page in your domain, you will want to check out the <b>IDiscardableBrowserProperty </b>interface.</p>
<p>
If you've got a database, either local or remote, you can also put a Data Source Object (DSO) on a Web page that supports updating data back to the source. Scripts on your page can be tied to the fields displaying records from the database, so the user can update information and have those updates propagated back to the server. Of course, you could use the DSO mechanism for saving data from a Web page without binding the DSO to controls or HTML elements. This might require thinking "outside the box" a little, but since DSOs provide a way for a Web page to change data on a server, you could create a DSO for that sole purpose. Nobody says you <i>have</i> to use DSOs to bind server data to visual elements on a Web page; you could build one just for persisting information from a Web page to the server. This method provides a means to persist data that could be accessed from any other Web page, and it is the only form of persistence that could outlive a major catastrophe on the client. </p>
<h3>Profile Assistant</h3>
<p>
The Internet Explorer 4.0 Profile Assistant<i> </i>is the first implementation of the types of privacy capabilities enabled by the Platform for Privacy Preferences (P3P), a W3C project for expressing privacy and user preferences on the Web (see http://www.w3.org/P3/Overview.html). The Profile Assistant enables user profiles to be exchanged between Web clients and servers while respecting the user's right to privacy. This solves one of the biggest problems with cookies—users want to know (and be able to control) exactly how information about them is used by a Web site. With the user's explicit permission, the Profile Assistant enables HTML form fields to be prepopulated from user profiles stored in the Windows registry. New information entered into a form can also be saved to the registry so the user never has to type it in again. If your users are like me and hate having to type the same stuff over and over again, they'll appreciate your use of this new Internet Explorer 4.0 feature. Profile Assistant can be disabled by the user.</p>
<h4>For more information</h4>
<h3>Logging Page Hits</h3>
<p>
There are lots of great reasons to track page hits on a Web site. If you are publishing an Active Channel, you can include page-hit logging for pages indicated in the Channel Definition Format (CDF) file. If you are a C/C++ developer, you can use the Hit Logging API to log information such as the browsing context (normal browser window, theater view, Active Desktop™ item, or Active screen saver), whether the page was viewed from the cache, the date and times viewed, as well as any custom information that can be encapsulated in a string.</p>
<h4>For more information</h4>
<ul type=disc>
<li>
If you are using an IIS-compatible server, check out "Implementing Cookies In ISAPI" (MSDN Library, Knowledge Base article #Q168864).<br><br></li>
<li>
C programmers can access cookie functionality through the Win32 API. Read about this in "Cookie Functions" in the Internet Client SDK (MSDN Library, SDK Documentation)<i>.</i><br><br></li>
<li>
I found some interesting Cookie Demos on Cookie Central at http://www.cookiecentral.com/.<br><br></li>
<li>
You'll find more information and links about DSOs in the section on <a href="#1001ways_databinding">Data Binding</a>.<br><br></li>
<li>
The Internet Client SDK documentation contains in-depth articles about the Profile Assistant (MSDN Library, SDK Documentation) Also, there is a ProfAsst sample in the Samples section of the full Internet Client SDK.<br><br></li>
<li>
Read about the Hit Logging API in the Internet Tools &amp; Technologies section of the Internet Client SDK documentation (MSDN Library, SDK Documentation).<br><br></li>
<li>
If you want more information about logging for Active Channels see the "Page-Hit Logging"and "Client-Side Logging" sections in the Internet Client SDK documentation.</li>
</ul>
<h2><a name="1001ways_dhtml"></a>Dynamic HTML Enables Very Engaging Pages</h2>
<p>
<i>Dynamic HTML</i>—a set of cutting-edge features enabling authors to dynamically change the rendering and content of&nbsp; Web page in Internet Explorer 4.0—adds lots of new functionality that can make your pages more interactive and engaging. Happily, many of these features are standards-based implementations of new functionality in the HTML 4.0 Document Object Model (DOM) and Cascading Style Sheets (CSS) specifications currently before W3C working groups. That means you can expect these features to be supported on all Internet Explorer 4.0 platforms. And, because Netscape has pledged to support W3C standards in their browser products, making these new features work cross-browser will get easier. </p>
<h3>New Attributes</h3>
<p>
The HTML 4.0 specification applies several new event attributes to HTML elements. Most of the new events are <i>intrinsic </i>in nature<i>, </i>meaning they are repeatable, and others are triggered only once. Because not all events apply to all elements, you'll need to have your updated HTML references handy while you code. These additional event attributes create an opportunity for expanded user interaction with individual tags on your Web page through scripting. Now you can respond to even more user-initiated events than before. </p>
<p>
HTML 4.0 forms improved the navigational model for users by adding the ACCESSKEY<i> </i>and TABINDEX attributes for specifying keyboard accelerators and tabbing order for controls. Plus, there are new attributes for specifying read-only and disabled states for forms—thus your forms can reflect different states according to radio button or check box settings.</p>
<p>
The new STYLE<i> </i>attribute for HTML 4.0 provides more flexibility when indicating style information. Because the STYLE<i> </i>attribute can be applied to any HTML element, authors have direct control over the rendering of individual HTML elements in their document. When combined with the host of new HTML 4.0 user interaction events, authors can do things that would have required a plug-in or control before.</p>
<h3>New Elements</h3>
<p>
HTML 4.0 specifies a new SYTLE<i> </i>element that is handy when a style will be reused for several elements. Authors can place any number of style elements in their document header and apply them to the entire body of the document. HTML 4.0 does not specify a particular style language; the TYPE attribute is used to indicate the Multipurpose Internet Mail Extension (MIME) type. Internet Explorer 4.0 supports the text/css type, or Cascading Style Sheets (CSS). With CSS, you can use the &lt;STYLE&gt; tag to specify style information that is applied to all instances of a given element, to a named class of elements (identified by their CLASS<i> </i>attribute), or to a specific instance of an element (identified by its ID attribute).</p>
<p>
CSS is called <i>cascading</i> because the browser follows rules of precedence (in a "cascading order") for styles applied from multiple sources. For example, styles applied via a STYLE attribute on a specific instance of an HTML element take precedence over styles applied to the entire body of the document through the STYLE element. </p>
<p>
The &lt;LABEL&gt; element has gained the new FOR attribute so authors can associate a &lt;LABEL&gt; with another HTML element. This was done to allow input focus to be reassigned from the &lt;LABEL&gt; to its associated element. Assigning a &lt;LABEL&gt; element's FOR attribute to the ID value of another element tells the browser to assign focus to the associated element.</p>
<h3>Expanded Document Object Model</h3>
<p>
All these cool new elements and attributes can't do a whole lot of good (from the standpoint of enhancing user interaction) without a <i>Document Object Model</i> (DOM)—the standard way for scripts to dynamically access and update the content and structure of an HTML document. Internet Explorer 3.<i>x</i> and Netscape Navigator 3.0 embody what is referred to by the W3C as "level zero" object model functionality. The W3C is currently refining the "level one" and "after level one" deliverables for the Document Object Model specification that is implemented in Internet Explorer 4.0. </p>
<p>
What's so cool about the new object model? Well, there's already a gazillion articles answering that question in volumes of detail (see the following "For more information" section for a list of a few). Here's an overview of the user-input coolness. </p>
<p>
The limited nature of level zero basically boils down to two things:
<ul type=disc>
<li>
Only a handful of objects with a meager number of events, properties, and methods<br><br></li>
<li>
Scripts can change the HTML contents only while the document is loading (before display)</li>
</ul>
<p>
The new object model:
<ul type=disc>
<li>
Provides access to <b>all</b> the elements on a page, and all of their attributes<br><br></li>
<li>
Enables the HTML content on a page to be modified at <b>any</b><i> </i>time<br><br></li>
<li>
Provides a much richer set of mouse, keyboard, and other events on <b>all</b> elements</li>
</ul>
<p>
The new object model is the "Dynamic" part of Dynamic HTML and the core Internet Explorer 4.0 feature for designing Web pages that respond to the user. </p>
<h4>For more information</h4>
<p>
<b>Dynamic HTML</b>
<ul type=disc>
<li>
For a comprehensive guide to Dynamic HTML—from introductory overviews to advanced how-to's—consult the Dynamic HTML section of the Site Builder Workshop at <a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a>.</li>
</ul>
<p>
<b>W3C documentation</b>
<ul type=disc>
<li>
You can read the HTML 4.0 Specification on the W3C site at http://www.w3c.org/TR/WD-html40/cover.html. <br><br></li>
<li>
"Enhancing Interactive HTML Documents" (http://www.w3.org/TR/WD-forms) is a W3C working draft discussing limitations in HTML 3.2 forms that motivated some of the changes in the current draft specifications for HTML 4.0 forms.<br><br></li>
<li>
The "Document Object Model" on the W3C site (http://www.w3.org/DOM/) is good reading if you'd like to read the requirements specification that drove the object model implementation for Internet Explorer 4.0. You can read about the Internet Explorer 4.0 details in "Document Object Model" in the DHTML section of the Internet Client SDK (MSDN Library, SDK Documentation). </li>
</ul>
<p>
<b>MIME</b>
<ul type=disc>
<li>
Download a list of registered MIME types from ftp://ftp.isi.edu/in-notes/iana/assignments/media-types/. </li>
</ul>
<p>
<b>Scripting</b>
<ul type=disc>
<li>
To learn more about scripting, see Nancy Cluts' article <a href="msdn_allabout.htm">"All About Scripting."</a> </li>
</ul>
<h3>But Wait! Before You Decide, There's More. . . </h3>
<p>
There are several other features in Internet Explorer 4.0 that are extensions of the above standards-based features and provide some pretty cool ways to drive user input.</p>
<h4>HTML dialogs</h4>
<p>
There are two features that provide dialog-like functionality that is <i>modal</i> to your Web page (meaning that the page is disabled until the user dismisses the "dialog"). The first feature lets you load an HTML file into a modal dialog window, and the second feature lets you open up a Win32-style dialog box with input and output parameters accessible through script.</p>
<p>
The first dialog feature is the <b>showModalDialog</b> method on the <b>window</b> object. In addition to specifying a URL to be displayed, you can pass input parameters in a <b>Variant </b>and receive a string, number, or other value in return. For script coders this method is documented in the Dynamic HTML section of the Internet Client SDK documentation (MSDN Library, SDK Documentation), and you C++ types can get it from the IHTMLWindow2 COM interface that provides access to the <b>window</b> object.</p>
<p>
The second dialog feature uses the <b>ShowHTMLDialog </b>function that is implemented in mshtml.dll. Technically, you need to know a little C++ to use this feature, but the Internet Client SDK includes the tiny bit of Win32 code you'll need to dynamically load and call this function. It's in the HTMLDlg sample available in the Samples List (Download the Internet Client SDK at <a href="http://www.microsoft.com/msdn/sdk/">http://www.microsoft.com/msdn/sdk/</a>). The sample also shows how to use script to exchange parameters and return values with the dialog window. With this sample, you'll use your vast C++ skills to only create a dialog resource file in your favorite dialog editor. You might also want to read the "HTML Dialog Boxes" in the Internet Client SDK documentation (MSDN Library, SDK Documentation). </p>
<p>
If you only want to show a message box to the user, you should check out the <b>alert</b> method on the <b>window</b> object (also documented in the Dynamic HTML section of the Internet Client SDK documentation).</p>
<h4>Showing HTML help</h4>
<p>
Help authors will be pleased to learn the WinHelp API has evolved into the HTML Help API, providing users with a Web-like interface for application- or context-specific help. In addition to a Win32 API to control loading and displaying your help file, a set of tools are provided to assist authors in creating and organizing help content and navigational elements. </p>
<p>
You can show HTML Help through a Win32 function call, and you can also use script with the <b>showHelp</b> method on the Window object to display a help file that is created in WinHelp or HTML Help (see the Dynamic HTML section of the Internet Client SDK).</p>
<p>
For more information, look up the "HTMLHelp API Reference" in the Internet Client SDK documentation.</p>
<h4>HTML clipboard format</h4>
<p>
If you are writing a control or application where people can paste stuff they copied from an HTML document, you might want to support the HTML Format clipboard format. "HTML Clipboard Format," in the Internet Client SDK documentation, goes over context information provided with this clipboard format to supplement the copied HTML. The article also includes examples for parsing the format that are taken from the behavior of Internet Explorer 4.0 (the definitive source for correctly handling clipboard operations for HTML).</p>
<h4>Custom controls</h4>
<p>
There are various technologies available for developing and using controls on Web pages. For example, using the Component Object Model (COM) with ActiveX technologies provides one way to develop reusable, language-independent, plug-in components. By endowing these components with an interface named Automation, it becomes possible to place them on a Web page and use them from your favorite scripting language. Typically, these COM components are developed in C++, but COM is a binary standard for function calling between components, which means it is possible to develop a COM object using any language.</p>
<p>
You can also write Java components that can be utilized from script on a Web page. All of the Java development products on the market today include various control libraries from which you can draw. For example, Microsoft Visual J++™ ships the Advanced Foundation Classes (AFC), a set of reusable Java classes providing functionality equivalent to the various Win32 user-interface controls you are already familiar with.</p>
<p>
You may be aware of the burgeoning market for controls developed by third-party developers. Many of these controls present an interface to users; for example, a tree view control for viewing hierarchical information such as file systems. There are also high-end authoring systems you can buy that provide complete packages for such things as Web-based forms or electronic commerce.</p>
<p>
You can also build custom, reusable components in HTML and script known as <i>scriptlets</i>. Scriptlets add object-oriented facilities to script and HTML, making them more viable solutions for developing user interface elements that can be reused across large Web sites.</p>
<h4>For more information</h4>
<ul type=disc>
<li>
The Site Builder Network (<a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a>) maintains the Microsoft COM site where you can get information about how the COM (and ActiveX) technologies work, find out about tools available for creating these types of components, and check out links to companion Microsoft sites and useful external sites.<br><br></li>
<li>
Search for COM and ActiveX on the Web for third-party sites offering solutions (I was going to do this search for you, but there are so many companies offering ActiveX control solutions I decided to let you have at it. Hey, ActiveX is a $400-million-a-year market for third-party developers; if you need it, it's likely they have it).<br><br></li>
<li>
Check out the Microsoft Technologies for Java (<a href="http://www.microsoft.com/java/">http://www.microsoft.com/java/</a>) and Visual J++ (<a href="http://www.microsoft.com/visualj/">http://www.microsoft.com/visualj/</a>) sites to get started on Java solutions for the Web.<br><br></li>
<li>
You can read more about scriptlets in "Microsoft Scriptlet Technology" in the Internet Client SDK documentation (MSDN Library, SDK Documentation).</li>
</ul>
<h4><a name="1001ways_databinding"></a>Data binding</h4>
<p>
Data binding is a fancy term for the process of linking the content of HTML elements with server-based databases and files, and the ability to cache the resulting data on the client computer. The ability to cache the data on the client makes it possible to dynamically manipulate the data without additional server hits. The link can be made in both directions, so data binding can be used to both display content on the client and update content on the server (the update can be tied to a submit button in an HTML form). Data binding is accomplished by an Internet Explorer 4.0 architecture that specifies how to build a data source object (DSO) on the client to provide scriptable functionality through a standard set of properties, methods, and events. Data fields from a DSO are linked to specific HTML elements through additional HTML attributes defined for Internet Explorer 4.0. DSOs can be linked to other data consumers as well, such as controls built using control technologies discussed above.</p>
<p>
You can build your own DSO, or use any of several built-in DSOs that are shipped with Internet Explorer 4.0. For example, the Tabular Data Control (TDC) is used for accessing delimited text files (such the comma-delimited formats exported by Personal Information Manager [PIM] applications). ActiveX Data Objects (ADO) have been integrated with the Advanced Data Connector (ADC) DSO that shipped with Internet Explorer Preview 2. To evangelize this integration, the ADC technology has been formally renamed as the Remote Data Service (RDS) for ADO. ADO provides the API for making connections and queries to OLE-DB or ODBC-compliant databases (such as SQL Server, Microsoft Access or Oracle) that is utilized by the RDS to bind data from these databases to controls and elements on your Web page.</p>
<h4>For more information</h4>
<ul type=disc>
<li>
The Internet Client SDK documentation (MSDN Library, SDK Documentation) contains several articles to help you get started with data binding in the section on Dynamic HTML. <br><br></li>
<li>
The Dynamic HTML Galleryon Sitebuilder (<a href="http://www.microsoft.com/sitebuilder/">http://www.microsoft.com/sitebuilder/</a>) has samples showing how to bind data to various HTML tags. You will also find links to some external examples of data binding.<br><br></li>
<li>
See "Data Binding in Dynamic HTML" in the July 1997 issue of MIND at <a href="http://www.microsoft.com/mind/">http://www.microsoft.com/mind/</a>.<br><br></li>
<li>
The Data Source Object Gallery (<a href="http://www.microsoft.com/gallery/">http://www.microsoft.com/gallery/</a>) contains samples showing how to build DSO samples in Java, Visual Basic, and C++.<br><br></li>
<li>
<i>MSDN Online </i>publishes the Universal Data Access page (<a href="http://www.microsoft.com/data/">http://www.microsoft.com/data/</a>), a central location of information about all of Microsoft's information access technologies.<br><br></li>
<li>
If you are looking for information about how to bind data to an HTML page using a COM object or a Java applet, check out "MSHTML Data Binding Interfaces" in the Internet Client SDK documentation.</li>
</ul>
<h2><a name="1001ways_tools"></a>Microsoft Visual InterDev, FrontPage 98 Beta, and Other Tools</h2>
<p>
Dreams of the paperless office are rapidly becoming real with Web-based forms, some of which are sophisticated enough to be called "intranet applications." Creating libraries of forms on the Web increases worker productivity and reduces costs, thus increasing the return on a company's intranet investment. For example, on Microsoft's secure intranet I can log my vacation hours, order software from the company store, download Microsoft products, view my 401K options, and do everything else I used to rely on a group assistant or other administrative process to do for me.</p>
<p>
Intranets are becoming such a big business that tools for generating Web-based forms are starting to hit the streets. These tools can be as simple as those that add HTML form layout features to existing Web-page creation tools to full-blown products that empower Web application developers to rapidly build fully interactive, dynamic Web sites, such as the Microsoft Visual InterDev development system. You can research these products in various journals for business and technology managers—for example, the September 8, 1997 issue of InformationWeek (http://www.informationweek.com/) reviewed two products for converting paper-based forms and developing Web-based forms for a company intranet.</p>
<h2><a name="1001ways_summ"></a>Summary</h2>
<p>
As exhaustive as this overview might seem, it only scratches the surface of things you can do to get user input from a Web page. This is partly because good user input is one-tenth technology and nine-tenths creativity, and partly because it is just a huge area. For example, I didn't discuss personalization for Web pages at all.</p>
<p>
Anyway, I think I have given you enough information to send you well on your way to becoming an expert in user-input technologies for Web pages. Make sure you're having fun while you're at it; otherwise, how can you expect your users to have fun? </p>
</BODY>
</HTML>

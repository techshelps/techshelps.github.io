<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 201: Retrieving the Task List in Windows 95</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn201"></a></sup>Tip 201: Retrieving the Task List in Windows 95</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to create a list of all currently running tasks on the Microsoft® Windows® 95 operating system.</p>
<h2>Determining Which Tasks Are Running</h2>
<p>
With the Microsoft® Windows® 95 operating system, you can run any number of applications simultaneously. Occasionally, you may need to determine which tasks are currently being run. This can be accomplished by using several Windows application programming interface (API) functions.</p>
<p>
To find the names of all currently executing tasks, you must first determine the handle of the window that is currently at the top of the z-order. This, of course, would be the window of your own Microsoft Visual Basic® application. You can use the Windows API <b>GetWindow</b> function to retrieve the handle of your application's window with the statement:</p>
<pre><code>CurrWnd = GetWindow(Form1.hwnd, GW_HWNDFIRST)
</code></pre>
<p>
The first argument of the <b>GetWindow</b> function is the handle of the window that is at the top of the z-order. In this case, this is the handle of Form1.</p>
<p>
The second argument of the <b>GetWindow</b> function specifies the window you want to retrieve the handle for. This argument can have one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=23%>GW_CHILD</td>
<td width=77%>Retrieve the handle for the child window.</td>
</tr>
<tr valign=top>
<td width=23%>GW_HWNDFIRST</td>
<td width=77%>Retrieve the handle for the window at the top of the z-order.</td>
</tr>
<tr valign=top>
<td width=23%>GW_HWNDLAST</td>
<td width=77%>Retrieve the handle for the window at the bottom of the z-order.</td>
</tr>
<tr valign=top>
<td width=23%>GW_HWNDNEXT</td>
<td width=77%>Retrieve the handle of the window below the specified window in the z-order.</td>
</tr>
<tr valign=top>
<td width=23%>GW_HWNDPREV</td>
<td width=77%>Retrieve the handle of the window above the specified window in the z-order.</td>
</tr>
<tr valign=top>
<td width=23%>GW_OWNER</td>
<td width=77%>Retrieve the handle of the window that owns the specified window, if any.</td>
</tr>
</table><br>
<p>
After you have retrieved the application's window handle, you can use the Windows API <b>GetParent</b> function to retrieve this window's child window handle. Next, you call the Windows API <b>GetWindowText</b> and <b>GetWindowTextLength</b> functions to retrieve the text in the window's title bar and the length of this text, respectively. You can then use the text string in your own application. For example, you can save the title bar text to a <b>List Box</b> control.</p>
<p>
All of the above steps are repeated until you have processed all running tasks. You know that you have gone through each task when the current window is that of your own application.</p>
<h2>Example Program</h2>
<p>
This program shows how to create a list of all currently running tasks in Windows 95.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetWindow Lib "user32" 
 &nbsp; (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Private Declare Function GetParent Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal hwnd As Long) As Long
Private Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" 
 &nbsp; (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long
Const GW_HWNDFIRST = 0
Const GW_HWNDNEXT = 2
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; LoadTaskList
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.<br><br></li>
<li>
Create a new subroutine called <b>LoadTaskList</b>. Add the following code to this subroutine:<pre><code>Sub LoadTaskList()
 &nbsp;&nbsp; Dim CurrWnd As Long
 &nbsp;&nbsp; Dim Length As Long
 &nbsp;&nbsp; Dim TaskName As String
 &nbsp;&nbsp; Dim Parent As Long
 &nbsp;&nbsp; 
 &nbsp;&nbsp; List1.Clear
 &nbsp;&nbsp; CurrWnd = GetWindow(Form1.hwnd, GW_HWNDFIRST)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; While CurrWnd &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parent = GetParent(CurrWnd)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length = GetWindowTextLength(CurrWnd)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TaskName = Space$(Length + 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length = GetWindowText(CurrWnd, TaskName, Length + 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TaskName = Left$(TaskName, Len(TaskName) - 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Length &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If TaskName &lt;&gt; Me.Caption Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem TaskName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CurrWnd = GetWindow(CurrWnd, GW_HWNDNEXT)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoEvents
 &nbsp;&nbsp; Wend
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the <b>Command Button</b> control. A list of all currently running tasks on the Windows 95 operating system appears in the <b>List Box</b> control.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 110: Sending a Click Event to a Command Button Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn110"></a></sup>Tip 110: Sending a Click Event to a Command Button Control</h1>
<p>
June 12, 1995</p>
<h2>Abstract</h2>
<p>
In a Microsoft® Visual Basic® application, you can simulate a Click event to a <b>Command Button</b> control. This article explains how to send a BN_CLICKED notification message to a control.</p>
<h2>Executing a BN_CLICKED Message</h2>
<p>
A&nbsp; user who wants to carry out a command in your Microsoft® Visual Basic® application usually clicks a <b>Command Button</b> control. The code in the <b>Command Button</b>'s Click event is then executed.</p>
<p>
There may be times, however, when you will want to initiate a Click event from within your Visual Basic program. You can use the Microsoft Windows® application programming interface (API) <b>PostMessage</b> function to send a BN_CLICKED notification message to the parent of the <b>Command Button</b> control. This will call the button's Click event.</p>
<p>
As you can see from the example program below, the <b>GetDlgCtrlID</b> function retrieves the <b>Command Button</b>'s handle. Next, a call is made to the <b>GetParent</b> function, which retrieves the handle of the window that the <b>Command Button</b> resides on. (In other words, we must retrieve the parent window's handle.)</p>
<p>
The last step is to execute a <b>PostMessage</b> function. <b>PostMessage</b> sends a BN_CLICKED notification message to the parent window, which then processes the Click event for the <b>Command Button</b>.</p>
<p>
When you run&nbsp; the example program below, the second <b>Command Button</b>'s Click event is executed. However, the second <b>Command Button</b> does not receive the focus—only its code is executed.</p>
<h2>Example Program</h2>
<p>
This program shows how to send a <b>Command Button</b> click to the Windows operating system.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Const BN_CLICKED = 0
Const WM_COMMAND = &amp;H111
Private Declare Function GetDlgCtrlID Lib "User" (ByVal hWnd As Integer) As
 &nbsp; Integer
Private Declare Function GetParent Lib "User" (ByVal hWnd As Integer) As Integer
Private Declare Function PostMessage Lib "User" (ByVal hWnd As Integer, ByVal
 &nbsp; wMsg As Integer, ByVal wParam As Integer, ByVal lParam As Long) As Integer
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Send".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; ClickButton Command2.hWnd
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Receive".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; MsgBox "Command2 was CLICKED!"
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>ClickButton</b>. Add the following code to this function:<pre><code>Sub ClickButton(ByVal hWnd As Integer)
 &nbsp;&nbsp; Dim Button As Integer
 &nbsp;&nbsp; Dim ParentHwnd As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Button = GetDlgCtrlID(hWnd)
 &nbsp;&nbsp; ParentHwnd = GetParent(hWnd)
 &nbsp;&nbsp; X = PostMessage(ParentHwnd, WM_COMMAND, Button, BN_CLICKED * &amp;H10000 + hWnd)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the Send Command Button. The Click event for the second <b>Command Button</b> control is immediately executed (the message box is displayed).</p>
<h2>Additional References</h2>
<p>
"BN_CLICKED." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures)</p>
<p>
"GetDlgCtrl." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
<p>
”PostMessage." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
</BODY>
</HTML>

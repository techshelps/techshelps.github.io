<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 120: Minimizing Program Manager When Visual Basic Is Run</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn120"></a></sup>Tip 120: Minimizing Program Manager When Visual Basic Is Run</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
You can minimize a specific Microsoft® Windows®-based application each time you launch another Windows-based application. This article explains how you can minimize Windows Program Manager each time you run Microsoft Visual Basic®. The same technique can be applied to any other Windows-based program.</p>
<h2>Launching Applications While Minimizing Others</h2>
<p>
In some situations, such as when you want to keep your desktop as clean as possible, you may want to launch a specific application by first minimizing Microsoft® Windows® Program Manager (or Windows Explorer). This can be done very easily in Microsoft Visual Basic®.</p>
<p>
Let's assume that each time you load Visual Basic in order to design a new project, you want to minimize Program Manager. After you have finished working in Visual Basic, you want Program Manager to be restored to its normal, maximized state.</p>
<p>
To accomplish this task in Visual Basic, you need to use two Windows application programming interface (API) functions. The <b>FindWindow</b> function returns the handle of the window that matches the name of your target window. In this case, you want to find the handle of the window belonging to Program Manager. Therefore, you tell <b>FindWindow</b> to find the first window whose window name is "Program Manager".</p>
<p>
When you have the Program Manager window handle, you use the <b>WindowState</b> property in Visual Basic to minimize your program's window. This means that your Visual Basic program runs quietly in the background, waiting for Visual Basic to be run.</p>
<p>
Approximately once every second, the program checks the computer system to see whether Visual Basic has been run. This is done in the Timer1 routine in the example program that follows. If the <b>FindWindow</b> function determines that Visual Basic is running in memory, it uses the <b>ShowWindow</b> function to minimize the Program Manager window. Alternatively, if the <b>FindWindow</b> function finds that Visual Basic is not running, it tells <b>ShowWindow</b> to maximize the Program Manager window.</p>
<p>
You can modify this example program to monitor any Windows-based application. In addition, you might want to add this program to your Windows Startup group so that it runs each time you start Windows.</p>
<h2>Example Program</h2>
<p>
This program shows how to minimize Program Manager each time you run Visual Basic. When you quit Visual Basic, Program Manager is restored to its original, maximized state.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Dim</b>, <b>Constant</b>, and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function FindWindow Lib "User" (lpClassName As Any, lpWindowName
 &nbsp; As Any) As Integer
Private Declare Function ShowWindow Lib "User" (ByVal hWnd As Integer, ByVal
 &nbsp; nCmdShow As Integer) As Integer
Const SW_MINIMIZE = 6
Const SW_RESTORE = 9
Dim pm_hwnd As Integer
Dim vb_hwnd As Integer
Dim R As Integer
Dim Flag As Integer
Dim VBS As String
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim PMS As String
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PMS = "Program Manager"
 &nbsp;&nbsp; VBS = "Microsoft Visual Basic - Project1 [design]"
 &nbsp;&nbsp; pm_hwnd = FindWindow(ByVal 0&amp;, ByVal PMS)
 &nbsp;&nbsp; Form1.WindowState = 1
 &nbsp;&nbsp; Flag = False
End Sub
</code></pre>
</li>
<li>
Add a <b>Timer</b> control to Form1. Timer1 is created by default. Set its <b>TimerInterval</b> property to 1.<br><br></li>
<li>
Add the following code to the Timer1 event for Timer1:<pre><code>Private Sub Timer1_Timer()
 &nbsp;&nbsp; vb_hwnd = FindWindow(ByVal 0&amp;, ByVal VBS)
 &nbsp;&nbsp; If Flag = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vb_hwnd &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flag = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R = ShowWindow(pm_hwnd, SW_MINIMIZE)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If vb_hwnd = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flag = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R = ShowWindow(pm_hwnd, SW_RESTORE)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
On the File menu in Visual Basic, click Make EXE File. Save the file as MINPM.EXE.</li>
</ol>
<p>
On the File menu in Program Manager, click Run. Type the program's name as MINPM.EXE and click OK. The MINPM program is now running in memory. When you start Visual Basic, Program Manager will be minimized on the desktop. As soon as you quit Visual Basic, Program Manager will be maximized.</p>
</BODY>
</HTML>

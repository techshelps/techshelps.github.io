<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 43: Activating and Deactivating the Screen Saver</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn43"></a></sup>Tip 43: Activating and Deactivating the Screen Saver</h1>
<p>
Created: April 2, 1995</p>
<h2>Abstract</h2>
<p>
The Windows® operating system can be configured to run a screen saver after a specified amount of time has elapsed without any keyboard or mouse activity being sensed. However, in certain situations, you may need to deactivate the screen saver, do some processing in your Visual Basic® application, and then reactivate the screen saver. This article explains how to do this in a Visual Basic program.</p>
<h2>Modifying System Parameters in Visual Basic</h2>
<p>
Whenever you want to change the system settings in Windows®, you usually work through the Control Panel applet. However, the Windows <b>SystemParametersInfo </b>function can also be used within a Visual Basic® application to retrieve or set these same settings. To modify these settings in Visual Basic, you can use the function with a constant that describes the setting you want to modify. In this example, we use the SPI_GETSCREENSAVEACTIVE constant to control the screen saver program.</p>
<p>
To declare this function in your Visual Basic program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your program:</p>
<pre><code>Declare Function SystemParametersInfo Lib "User" (ByVal uAction As Integer, 
 &nbsp; ByVal uParam As Integer, lpvParam As Any, ByVal fuWinIni As Integer)
 &nbsp; As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as a single line of text.</p>
<p>
The <b>SystemParametersInfo</b> function takes four arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>uAction</i></td>
<td width=87%>An integer value that tells the function which Windows setting you want to modify.</td>
</tr>
<tr valign=top>
<td width=13%><i>uParam</i></td>
<td width=87%>An integer value based on the <i>uAction</i> argument.</td>
</tr>
<tr valign=top>
<td width=13%><i>lpvParam</i></td>
<td width=87%>An integer, string, long, or data structure, depending on the <i>uAction</i> argument.</td>
</tr>
<tr valign=top>
<td width=13%><i>fuWinIni</i></td>
<td width=87%>An integer value that determines whether the WIN.INI initialization file will be updated. The <b>SPIF_UPDATEINIFILE</b> constant writes the changes to the WIN.INI file, while the <b>SPIF_SENDWININICHANGE</b> constant sends a WM_WININICHANGE message to all currently running Windows-based applications to tell them of the system changes you have just made. If <i>fuWinIni</i> is set to zero, no changes are made to WIN.INI.</td>
</tr>
</table><br>
<p>
For a list of the Windows settings you can modify, see the Knowledge Base article Q97142, "How to Use SystemParametersInfo API for Control Panel Settings," referenced at the end of this article.</p>
<p>
This function returns an integer value. If this value is TRUE (nonzero), the changes were made successfully. If the return value is FALSE (zero), the function was not able to make the requested changes to the operating system.</p>
<h2>Example Program</h2>
<p>
The following program demonstrates how the Windows screen saver can be temporarily activated or deactivated. To turn the screen saver off, click the Deactivate command button; to turn the screen saver on again, click the Activate command button.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following constant and <b>Declare</b> statements to the general declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of text):<pre><code>Declare Function SystemParametersInfo Lib "User" (ByVal uAction As Integer,
 &nbsp; ByVal uParam As Integer, lpvParam As Any, ByVal fuWinIni As Integer)
 &nbsp; As Integer

Const SPI_SETSCREENSAVEACTIVE = 17
</code></pre>
</li>
<li>
Add a Command Button control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Activate".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
  Dim ret As Integer
  ret = SystemParametersInfo(SPI_SETSCREENSAVEACTIVE, True, 0, 0)
End Sub
</code></pre>
</li>
<li>
Add a second Command Button control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Deactivate".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Sub Command2_Click()
  Dim ret As Integer
  ret = SystemParametersInfo(SPI_SETSCREENSAVEACTIVE, False, 0, 0)
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q97142. "How to Use SystemParametersInfo API for Control Panel Settings." (MSDN Library, Knowledge Base)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Dr. Watson Diagnostic Tool</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_drwatson"></a>The Dr. Watson Diagnostic Tool</h1>
<p>
May 1994</p>
<h2>Abstract</h2>
<p>
The Dr. Watson utility is a diagnostic tool for the Microsoft® Windows™ operating system. It detects system and application failures and can store information in a disk file. This file can help you find and determine which application(s) caused the problem. This article explains how you can configure Dr. Watson to meet your programming needs. It also includes a sample Dr. Watson listing with comments and a listing of the GP fault messages.</p>
<h2>Introduction</h2>
<p>
The Dr. Watson utility is a diagnostic tool for the Microsoft® Windows™ operating system. It detects system and application failures and can store information in a disk file. This file can help you find and determine which application(s) caused the problem. </p>
<p>
You can run only a single instance of Dr. Watson at one time. Dr. Watson cannot trap faults in a Windows MS-DOS session. You can configure Dr. Watson to meet your needs by including settings for any of the following entries in the <b>[Dr. Watson]</b> section of your WIN.INI file (note the space between Dr. and Watson): 
<ul type=disc>
<li>
The <b>SkipInfo</b> entry: Specifies items to disable (skip) in the log file.<br><br></li>
<li>
The <b>ShowInfo</b> entry: Specifies items to enable (show) in the log file.<br><br></li>
<li>
The <b>DisLen</b> entry: Indicates the number of assembler instructions to disassemble.<br><br></li>
<li>
The <b>TrapZero</b> entry: Allows you to trap divide-by-zero errors.<br><br></li>
<li>
The <b>GPContinue</b> entry: Determines whether you should continue if a GP fault occurs.<br><br></li>
<li>
The <b>DisStack</b> entry: Specifies number of levels back on the stack to disassemble.<br><br></li>
<li>
The <b>LogFile</b> entry: Name of MS-DOS file or device for displaying output.</li>
</ul>
<p>
These entries are described in the sections below.</p>
<h2>The SkipInfo Entry</h2>
<p>
The <b>SkipInfo</b> entry controls which parts of the failure report are actually sent to disk. You can set the following values to disable parts of the failure report: </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Value</b></td>
<td class=label width=82%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=18%>32bitregs</td>
<td width=82%>Disable values of 32-bit registers and of FS and GS on 386/486 processors.</td>
</tr>
<tr valign=top>
<td width=18%>clues</td>
<td width=82%>Disable the dialog box titled “Dr. Watson's Clues.”</td>
</tr>
<tr valign=top>
<td width=18%>information</td>
<td width=82%>Disable system information, such as Windows version, processor type, and available memory.</td>
</tr>
<tr valign=top>
<td width=18%>registers</td>
<td width=82%>Disable 16-bit registers.</td>
</tr>
<tr valign=top>
<td width=18%>segments</td>
<td width=82%>Disable segment contents, base addresses, length, and flags.</td>
</tr>
<tr valign=top>
<td width=18%>stack</td>
<td width=82%>Disable stack backtrace.</td>
</tr>
<tr valign=top>
<td width=18%>summary</td>
<td width=82%>Disable the 6-line summary at the beginning of the error report.</td>
</tr>
<tr valign=top>
<td width=18%>tasks</td>
<td width=82%>Disable list of all active tasks (running applications).</td>
</tr>
<tr valign=top>
<td width=18%>time</td>
<td width=82%>Disable Dr. Watson start and stop times.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Each <b>SkipInfo</b> value listed above can be abbreviated, using the first three letters of the value name. For example, the following entry disables the Dr. Watson's Clues dialog box and the stack backtrace: </p>
<pre><code>[Dr. Watson]
SkipInfo=clu sta
</code></pre>
<h2>The ShowInfo Entry</h2>
<p>
Some parts of the Dr. Watson failure report are disabled by default. These sections can be enabled with the <b>ShowInfo</b> entry. You can set the following values to enable parts of the failure report: </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Value</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>disassembly</td>
<td width=79%>Enable separate disassembly of the fault address. This does not affect disassembly of stack frames. (See “The DisLen Entry” section below.) </td>
</tr>
<tr valign=top>
<td width=21%>errorlog</td>
<td width=79%>Enable error logging.</td>
</tr>
<tr valign=top>
<td width=21%>locals</td>
<td width=79%>Enable stack dump of local variable and parameter values.</td>
</tr>
<tr valign=top>
<td width=21%>modules</td>
<td width=79%>Enable list of all loaded modules, including dynamic-link libraries (DLLs) and font files.</td>
</tr>
<tr valign=top>
<td width=21%>paramlog</td>
<td width=79%>Enable parameter-validation error logging.</td>
</tr>
<tr valign=top>
<td width=21%>sound</td>
<td width=79%>Enable audible warnings.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Each <b>ShowInfo</b> value listed above can be abbreviated, using the first three letters of the value name. The following example sets all six values for the <b>ShowInfo</b> entry, enabling those six parts of the failure report: </p>
<pre><code>[Dr. Watson]
ShowInfo=dis err loc mod par sou
</code></pre>
<h2>The DisLen Entry</h2>
<p>
The <b>DisLen</b> entry controls the number of instructions that are disassembled in stack traces and the disassembly portion of the failure report. The default value is 8. The following example sets the value to 4: </p>
<pre><code>[Dr. Watson]
DisLen=4
</code></pre>
<h2>The TrapZero Entry</h2>
<p>
By default, Dr. Watson does not trap divide overflow exceptions, because many applications provide their own handling. You can use the <b>TrapZero</b> entry to enable trapping of divide overflow exceptions, as shown in the following example: </p>
<pre><code>[Dr. Watson]
TrapZero=1
</code></pre>
<h2>The GPContinue Entry</h2>
<p>
One of the most advanced features of Dr. Watson enables an application to continue even after a general-protection (GP) fault. A GP fault means that a bug has been encountered, so continuing is dangerous. However, some application developers requested the ability to continue running an application even after a GP fault. If this setting is enabled, Dr. Watson performs the following tests when a GP fault occurs. If each of the following four conditions is true, Dr. Watson allows the application to continue: 
<ol>
<li>
Is bit 0 of <b>GPContinue</b> set?<br><br></li>
<li>
Is the faulting instruction an instruction that can be allowed to continue?<p class=tl>
For example, the following instruction, which happens to be beyond the end of a segment, can continue: </P><pre><code>mov&nbsp;&nbsp; ax,[ffff]
</code></pre>
<p class=tl>
The following instruction involving an invalid address would not be allowed to proceed: </P><pre><code>jmp&nbsp;&nbsp; seg:offs
</code></pre>
</li>
<li>
Is the fault in an area outside Kernel or User? (If the fault is in Kernel or User, you may set the appropriate bit in <b>GPContinue</b> to continue in spite of the risk.) <br><br></li>
<li>
Does the user want to continue? Dr. Watson displays a dialog box and lets the user decide. The dialog box in Windows 3.0 has Cancel (default) and Ignore buttons and says:<pre><code>RECOVERABLE APPLICATION ERROR
&lt;APPNAME&gt; failed in &lt;MODNAME&gt;. Ignoring fault is risky.
</code></pre>
</li>
</ol>
<p>
In Windows 3.1, the dialog box says:</p>
<pre><code>&lt;APPNAME&gt;

An error has occurred while running this application.

If you chose to ignore it, you should save your work in a new file. Otherwise this application will terminate.
</code></pre>
<p>
If you choose Close from this dialog box, you will see the normal Application Error dialog box. </p>
<p>
Although it is very risky, you can also allow continuation in Kernel or User by setting <b>GPContinue</b> as appropriate. The <b>GPContinue</b> entry has the following bit values: </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Bit</b></td>
<td class=label width=12%><b>Value</b></td>
<td class=label width=74%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=14%>0</td>
<td width=12%>1</td>
<td width=74%>Allow continuation. (This is the default setting.)</td>
</tr>
<tr valign=top>
<td width=14%>1</td>
<td width=12%>2</td>
<td width=74%>Write only 3-line reports.</td>
</tr>
<tr valign=top>
<td width=14%>2</td>
<td width=12%>4</td>
<td width=74%>Continue even if the fault is in Kernel.</td>
</tr>
<tr valign=top>
<td width=14%>3</td>
<td width=12%>8</td>
<td width=74%>Continue even if the fault is in User.</td>
</tr>
</table><br>
<p>
You must combine these values. The following entry allows an application to continue after a User GP fault: </p>
<pre><code>[Dr. Watson]
GPContinue=9
</code></pre>
<h2>The DisStack Entry</h2>
<p>
The <b>DisStack</b> entry controls how many levels back on the stack get disassembled. The default value is 2. The following example sets the value to 100: </p>
<pre><code>[Dr. Watson]
DisStack=100
</code></pre>
<h2>The LogFile Entry</h2>
<p>
The default name for the Dr. Watson log file is DRWATSON.LOG in the Windows directory. The <b>LogFile</b> entry can be changed to any valid filename, even a printer or debugging terminal. For example, use the following setting to write to a terminal on COM1: </p>
<pre><code>[Dr. Watson]
LogFile=com1
</code></pre>
<h2>Sample Dr. Watson Log File with Comments</h2>
<p>
To save disk space, Dr. Watson generates a complete report only for the first three errors. The next 17 errors generate a report summary. After 20 errors, Dr. Watson stops writing to the log file. If you close Dr. Watson and rerun it, writing to the log file resumes. You can determine the number of error reports generated in the current session by selecting the Dr. Watson icon. </p>
<p>
When the log file reaches 100K, Dr. Watson displays a warning message. After you have analyzed the error reports in the log file, you should delete the log file. </p>
<p>
The following version of the Dr. Watson log file includes comments identified by a pound sign (#). These comments do not appear in the normal Dr. Watson log. They have been added here to explain the sections of the log. Also, each section starts with the <b>bold</b> line so you can easily find the beginning and end of each section. The words in parentheses are the WIN.INI entries that determine whether this information is to be displayed in this log file.</p>
<pre><code><b>Start Dr. Watson 0.80 - Thu Sep 26 10:51:28 1991

</b># This line is inserted each time you start Dr. Watson. You can disable it with SkipInfo=time.

************************************************************************
# This line marks the beginning of a Dr. Watson report.

 &nbsp;&nbsp; Dr. Watson 0.80 Failure Report - Thu Sep 26 10:51:36 1991
# Version 0.80 of Dr. Watson - date report was generated

 &nbsp;&nbsp; BICHO had a 'Exceed Segment Bounds (Read)' fault at BICHO _DoCommand+006b
# Application 'BICHO' had an 'Exceed Segment Bounds' fault while reading memory. The actual code that failed was also in BICHO, 0x6b bytes past the start of the DoCommand() function. See the "GP Fault Messages" section for more information.

 &nbsp;&nbsp; $tag$BICHO$Exceed Segment Bounds (Read)$BICHO _DoCommand+006b
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $push word ptr [fffe]$Thu Sep 26 10:51:36 1991
# This line repeats the previous information in a format easier for automatic code to parse. It also includes the actual faulting instruction (a push instruction here).

<b> &nbsp;&nbsp; CPU Registers (regs)</b>

 &nbsp;&nbsp; ax=1e54&nbsp; bx=0014&nbsp; cx=0d7f&nbsp; dx=0111&nbsp; si=1e54&nbsp; di=0111
# The 16-bit CPU registers. This can be useful for decoding what address an instruction was modifying.

## What you need to look for is:
 &nbsp; 1]&nbsp; 


 &nbsp;&nbsp; ip=02fd&nbsp; sp=230c&nbsp; bp=237a&nbsp; O- D- I+ S- Z- A+ P+ C-
# The IP is the instruction pointer (Program Counter). SP and BP are the stack pointer and base pointer. The last 8 items show the state of the flag bits. In this case, Overflow, Direction, Sign, Zero, and Carry bits are Clear (0); the Interrupt, AuxCarry, and Parity bits are Set (1).

 &nbsp;&nbsp; cs = 0e57&nbsp; 8059fbc0:083f Code Ex/R
# Code segment selector is 0e57, linear address is 8059fbc0 (enhanced-mode linear addresses often start with 8xxx), and the limit is 83f. Accessing code and data segments beyond their limits is a common cause of GP faults.

 &nbsp;&nbsp; ss = 0d7f&nbsp; 8059d5e0:25df Data R/W
# Stack selector

 &nbsp;&nbsp; ds = 0d7f&nbsp; 8059d5e0:25df Data R/W
# Data selector--note that the limit is 25df, and we tried to read the value at fffe, beyond the limit.

 &nbsp;&nbsp; es = 0d7f&nbsp; 8059d5e0:25df Data R/W

<b> &nbsp;&nbsp; CPU 32 bit Registers (32bit)</b>

 &nbsp;&nbsp; eax = 00001e54&nbsp; ebx = 00000014&nbsp; ecx = ffff0d7f&nbsp; edx = 00000111
 &nbsp;&nbsp; esi = 00001e54&nbsp; edi = 00000111&nbsp; ebp = 0000237a&nbsp; esp = 800422fc
 &nbsp;&nbsp; fs = 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0:0000 Null Ptr
# If the selector is 0, it indicates a null pointer. Trying to use a null pointer is another common cause of GP faults.

 &nbsp;&nbsp; gs = 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0:0000 Null Ptr
 &nbsp;&nbsp; eflag = 00000002

<b> &nbsp;&nbsp; System Info (info)</b>

 &nbsp;&nbsp; Windows version 3.10
 &nbsp;&nbsp; Debug build
# The debug version of Windows (from the SDK) was running.

 &nbsp;&nbsp; Windows Build 3.1.048
# This is an internal Microsoft build of Windows, #48.

 &nbsp;&nbsp; Username Unknown User
# Your Name Here

 &nbsp;&nbsp; Organization Unknown Organization
# Your Org Here

 &nbsp;&nbsp; System Free Space 7131008
 &nbsp;&nbsp; Stack base 1122, top 9164, lowest 7504, size 8042
# Stack size of current task

 &nbsp;&nbsp; System resources:&nbsp; USER: 87% free, seg 0777&nbsp; GDI: 85% free, seg 05d7
 &nbsp;&nbsp; LargestFree 6594560, MaxPagesAvail 1610, MaxPagesLockable 267
# These stats are for informational purposes.

 &nbsp;&nbsp; TotalLinear 1948, TotalUnlockedPages 274, FreePages 52
 &nbsp;&nbsp; TotalPages 614, FreeLinearSpace 1611, SwapFilePages 7158
 &nbsp;&nbsp; Page Size 4096
 &nbsp;&nbsp; 4 tasks executing.
 &nbsp;&nbsp; WinFlags -
 &nbsp;&nbsp;&nbsp;&nbsp; Math coprocessor
 &nbsp;&nbsp;&nbsp;&nbsp; 80386 or 80386 SX
 &nbsp;&nbsp;&nbsp;&nbsp; Enhanced mode
 &nbsp;&nbsp;&nbsp;&nbsp; Protect mode

<b> &nbsp;&nbsp; Stack Dump (stack)</b>

# We dump the stack to see who called the routine that failed.

 &nbsp;&nbsp; Stack Frame 0 is BICHO _DoCommand+006b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss:bp 0d7f:237a
# The failure occurred in BICHO, 0x6b bytes past the start of DoCommand().

## What you need to look for is:
 &nbsp; 1] Note that sometimes the offset from the beginning is hard to determine. So you can look at the code offset in CVW in mixed C and ASM mode to match the function with the ASM instruction. In this case, you would go to the DoCommand and find offset 237a

 &nbsp;&nbsp; 0e57:02f0&nbsp; e9 02b9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp; near 05ac
 &nbsp;&nbsp; 0e57:02f3&nbsp; 6a 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; 00
 &nbsp;&nbsp; 0e57:02f5&nbsp; 9a 8db0 0477&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; callf&nbsp; 0477:8db0
 &nbsp;&nbsp; 0e57:02fa&nbsp; e9 02af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp; near 05ac
 &nbsp;&nbsp; (BICHO:_DoCommand+006b)
# The failure happened on the following instruction:

 &nbsp;&nbsp; 0e57:02fd&nbsp; ff 36 fffe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; word ptr [fffe]
# We tried to read a value from memory at DS:FFFE and push it on the stack. However, the limit of the DS segment is 25df.

 &nbsp;&nbsp; 0e57:0301&nbsp; 68 0110&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; 0110
 &nbsp;&nbsp; 0e57:0304&nbsp; e8 fe5d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp; near 0164
 &nbsp;&nbsp; 0e57:0307&nbsp; 83 c4 04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add&nbsp;&nbsp;&nbsp; sp, 04

 &nbsp;&nbsp; Stack Frame 1 is BICHO MAINWNDPROC+0027&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss:bp 0d7f:2388
# The Bicho MainWndProc probably called DoCommand().

 &nbsp;&nbsp; 0e57:0670&nbsp; eb 16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp; short 0688
 &nbsp;&nbsp; 0e57:0672&nbsp; ff 76 0a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; word ptr [bp+0a]
 &nbsp;&nbsp; 0e57:0675&nbsp; 56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; si
 &nbsp;&nbsp; 0e57:0676&nbsp; e8 fc19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp; near 0292
 &nbsp;&nbsp; (BICHO:MAINWNDPROC+0027)
 &nbsp;&nbsp; 0e57:0679&nbsp; 83 c4 04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add&nbsp;&nbsp;&nbsp; sp, 04
 &nbsp;&nbsp; 0e57:067c&nbsp; 99&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cwd
 &nbsp;&nbsp; 0e57:067d&nbsp; eb 1f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp; short 069e
 &nbsp;&nbsp; 0e57:067f&nbsp; 6a 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; 00

 &nbsp;&nbsp; Stack Frame 2 is USER IDISPATCHMESSAGE+007e&nbsp;&nbsp; ss:bp 0d7f:239e
# USER is the Windows USER.EXE.&nbsp; It is what calls your window and dialog box procedures.&nbsp; In this case, it called the BICHO MainWndProc().

 &nbsp;&nbsp; Stack Frame 3 is BICHO WINMAIN+0050&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss:bp 0d7f:23bc
# Here is the BICHO WinMain, which called DispatchMessage(), which called MainWndProc().

 &nbsp;&nbsp; Stack Frame 4 is BICHO 1:00a3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss:bp 0d7f:23ca
# Here is where the startup code calls WinMain.

<b> &nbsp;&nbsp; System Tasks (tasks)</b>

 &nbsp;&nbsp; Task&nbsp; WINEXIT, Handle 0daf, Flags 0001, Info&nbsp;&nbsp;&nbsp; 9248 08-09-90 16:52
 &nbsp;&nbsp;&nbsp;&nbsp; FileName C:\MS\WIN\DON\WINEXIT.EXE
 &nbsp;&nbsp; Task DRWATSON, Handle 0ea7, Flags 0001, Info&nbsp;&nbsp; 26256 09-23-91 12:00
 &nbsp;&nbsp;&nbsp;&nbsp; FileName C:\WIN31\DRWATSON.EXE
# This task will always be listed.

 &nbsp;&nbsp; Task&nbsp; PROGMAN, Handle 060f, Flags 0001, Info&nbsp; 110224 09-23-91 12:02
 &nbsp;&nbsp;&nbsp;&nbsp; FileName C:\WIN31\PROGMAN.EXE
# This task (or whatever shell you use) will always be listed.

 &nbsp;&nbsp; Task&nbsp;&nbsp;&nbsp; BICHO, Handle 0da7, Flags 0001, Info&nbsp;&nbsp; 16537 09-11-91&nbsp; 8:45
 &nbsp;&nbsp;&nbsp;&nbsp; FileName D:\BICHO.EXE
# This is the name of the program that caused the failure.

 &nbsp;&nbsp; 1&gt; I ran a test app that accessed a value
 &nbsp;&nbsp; 2&gt; beyond the limits of the segment bounds.
# Anything you type in the Dr. Watson's Clues dialog box is added to the log file, so you can write what you want to remember.

<b> &nbsp;&nbsp; Stop Dr. Watson 0.80 - Thu Sep 26 10:52:10 1991</b>

# We write this line each time Dr. Watson terminates.
</code></pre>
<h2>GP Fault Messages</h2>
<p>
This section provides a list of the GP fault error messages that are found in the Dr. Watson log file.</p>
<p>
<b>Divide by zero error</b></p>
<p>
This error was caused because your program tried to divide by zero.</p>
<p>
<b>Exceed segment bounds</b></p>
<p>
This error was caused because your program tried to access memory outside of the current segment. Check the following:
<ol>
<li>
Are you trying to read past an array?<br><br></li>
<li>
Is the starting address of your read operation valid?</li>
</ol>
<p>
<b>Invalid selector</b></p>
<p>
This error was caused because your program tried to free a segment that wasn't there or was someone else's segment. You need to make sure you are using a valid selector.</p>
<p>
<b>Null selector</b></p>
<p>
This error was caused because your program tried to access memory with a NULL selector. Check the following:
<ol>
<li>
Failed GlobalAlloc or GlobalLock.<br><br></li>
<li>
NULL value in a long pointer.</li>
</ol>
<p>
<b>Read from execute-only code segment</b></p>
<p>
This error was caused because your program tried to read a code segment. Check for an invalid pointer.</p>
<p>
<b>Segment not present</b></p>
<p>
This error was caused because the segment your program needed was not present. Check for the following:
<ol>
<li>
A code segment that was discarded when it should have been marked as FIXED.<br><br></li>
<li>
A <b>GlobalAlloc</b> of 0 bytes</li>
</ol>
<p>
<b>Segment wrap-around</b></p>
<p>
This error was caused because your program tried to read a code segment. Check for an invalid pointer.</p>
<p>
<b>Write to read-only data</b></p>
<p>
This error was caused because your program tried to write to a read-only code segment. Check for the following:
<ol>
<li>
Are you trying to write past an array?<br><br></li>
<li>
An invalid pointer.</li>
</ol>
<p>
<b>Write to code segment</b></p>
<p>
This error was caused because your program tried to write to a code segment. Check the following:
<ol>
<li>
Are you trying to write past an array?<br><br></li>
<li>
An invalid pointer.</li>
</ol>
</BODY>
</HTML>

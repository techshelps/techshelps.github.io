<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing Messaging Applications--The ActiveX Way</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_actvmess"></a>Developing Messaging Applications—The ActiveX Way</h1>
<p>
Venu Yerra<br>
MSDN Content Development Group</p>
<p>
July 1997</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5153">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the files for the ACTMSG application for this technical article.</a></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Active Messaging 1.1 documentation, referenced throughout this article, is a subset of the Platform Software Development Kit (SDK) documentation, which can be found in the MSDN Library in the SDK Documentation bin.</p>
<p class=indent>
The Exchange team has finished work on the next version of Active Messaging, with greatly expanded features and functionality. In fact, with the addition of all the new features, the technology is no longer solely for messaging, so it was renamed. Look for the Collaboration Data Objects Library (CDO) 1.2 (and updated documentation) to replace Active Messaging soon. All Active Messaging 1.1 applications will be fully compatible with the Collaboration Data Objects Library 1.2.</p>
<h2>Introduction</h2>
<p>
Microsoft provides messaging, the capability to send and receive e-mail, as part of the Windows® operating system. Prior to Active Messaging, programming an application to provide messaging meant using the functions and structures of the Windows Messaging API (MAPI). The programmer had the choice of using Simple MAPI, Common Messaging Calls, or Extended MAPI, depending on the level to which the programmer wanted to provide messaging in his or her application. The API was good and powerful, but using it involved a lot of effort and time. Active Messaging is a COM wrapper around MAPI that encapsulates the functions and provides an object model for messaging development.</p>
<h2>Why Active Messaging?</h2>
<p>
Using Active Messaging is more efficient than using API functions for the following reasons:
<ul type=disc>
<li>
Compared to the function-call interfaces of traditional API libraries, COM objects allow for faster development and yield code that is easier to read, debug, and maintain. <br><br></li>
<li>
Using an API always means that you are dependent on the functions you are using and that there is no version control. If a function changes or is no longer included in an API, then any code that uses this function has to be modified or replaced entirely with a new function. <br><br></li>
<li>
Using API functions is more complex and cumbersome. With a COM object, many coding details are encapsulated. You only have to set the attributes of the object and call the appropriate methods.<br><br></li>
<li>
The Active Messaging Library also takes care of many programming details for you, such as memory management and keeping count of the number of objects in collections.</li>
</ul>
<p>
The Active Messaging Library does not replace MAPI; it is a COM object that interacts with underlying MAPI interfaces, as described in the following list from the Active Messaging documentation:
<ul type=disc>
<li>
Service providers implement COM interfaces—specifically, the MAPI interfaces—as described in the MAPI documentation. <br><br></li>
<li>
The Active Messaging Library implements several objects (Session, Message, and so on) that act as clients to these MAPI interfaces. That is, the Active Messaging Library objects obtain pointers to the MAPI interfaces and call methods. <br><br></li>
<li>
The Active Messaging Library implements <b>IDispatch</b> and acts as an Automation server so that it can be called by tools that can use <b>IDispatch</b>, such as Microsoft® Visual Basic®. That is, it allows other programs to call its <b>IDispatch</b> interface. Beginning with version 1.1, the Active Messaging Library is self-registering as an Automation server. <br><br></li>
<li>
The Active Messaging Library publishes a type library that contains information about the objects that it makes available through <b>IDispatch</b> interface. <br><br></li>
<li>
Your Visual Basic application acts as a client to the Active Messaging Library. It reads the Active Messaging Library’s type library to obtain information about the objects, methods, and properties. When your Visual Basic application declares a variable as an object (with code such as <code>Dim objSession as Object</code> or <code>Dim objSession as MAPI.Session</code>) and uses that object’s properties and methods (with code such as <code>MsgBox objSession.Class</code>), Visual Basic makes calls to <b>IDispatch</b> on your behalf.</li>
</ul>
<p>
For the purpose of this article, I'll assume that you have a basic knowledge of using objects in Visual Basic and of messaging concepts such as folders, attachments, and recipients. For an introduction to basic messaging concepts, please see "Win32 Messaging (MAPI)" (MSDN Library, SDK Documentation, Platform SDK).</p>
<p>
Active Messaging is an ActiveX™ library provided with an extensive set of objects exclusively for messaging. You are not required to use the user interface provided with the library—you can provide your own interface. As the Active Messaging documentation states, "This library lets you add to your application the ability to send and receive mail messages with or without attachments and to interact with folders and address books. You can create programmable messaging objects, then use their properties and methods to meet the needs of your application." </p>
<p>
Being a COM object, Active Messaging can be used with any development tool or technology that supports Automation, such as any Microsoft Visual Studio™ development system component or Active Server Pages (ASP). </p>
<h2>Installation</h2>
<p>
The following installation instructions are from the Active Messaging documentation:</p>
<p class=indent>
The Active Messaging Library version 1.1 is installed with the MAPI component of the Platform Software Development Kit (SDK) and with the Microsoft Exchange Client. The setup programs register the Active Messaging Library for subsequent use by Automation controllers, that is, applications that support Automation like Visual Basic.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;No separate setup program is provided or needed for the Active Messaging Library. </p>
<p class=indent>
When you use the Active Messaging Library with an Automation controller, verify that the tool has referenced the Active Messaging Library. For example, when you are using Microsoft Visual Basic version 4.0, choose the <b>References</b> command from the <b>Tools</b> menu, and select the check box for <b>Microsoft Active Messaging 1.1 Object Library</b>. [Editor's note: In Visual Basic 5.0, the <b>References</b> command can be found on the <b>Project</b> menu.]</p>
<h2>Active Messaging Object Model</h2>
<p>
A wide discussion of the Active Messaging object model is beyond the scope of this article. For more details about Active Messaging, please see the Active Messaging documentation (MSDN Library, SDK Documentation, Platform SDK).</p>
<p>
But, what follows is an introduction to the Active Messaging object model. Figure 1 represents the top of the hierarchy. </p>
<p>
<img src="actvmes1.gif" border=0></p>
<p class=label>
<b>Figure 1. The top of the Active Messaging Library hierarchy</b></p>
<p>
<a href="#actmsgom">View full object model</a>.</p>
<p>
As you can see in the figure, the library has only one top-level object, called Session. Creating a Session object is necessary in order to use any other objects in Active Messaging. Once the Session object is created and logged on to, all the other objects become available. As illustrated, the Session object has only three child objects:
<ul type=disc>
<li>
The AddressLists collection<br><br></li>
<li>
The Infostores collection<br><br></li>
<li>
The Folder (Inbox/ Outbox) object<p class=tl>
Inbox and Outbox, the top folder objects, are available in the library by default. This means that they need not be added to the Folders collection (which appears further down the hierarchy). All subsequent folders that get created are subfolders.</P></li>
</ul>
<p>
Apart from these three child objects, I will highlight one of the most important objects in Active Messaging—the Messages collection object. The Messages collection is a child object of the Folder object.</p>
<h3>AddressLists Collection</h3>
<p>
The AddressLists collection, illustrated in Figure 2, is described in the Active Messaging documentation as follows:</p>
<p class=indent>
The AddressLists collection provides access to the root of the MAPI address book hierarchy for the current session. You can obtain the collection through the parent Session object’s AddressLists property. Each AddressList object represents one MAPI address book container. The AddressLists collection contains only those AddressList objects that contain recipients, and not those containing only subcontainers. </p>
<p>
This object is used either to get information about an address book and its recipients or to add, modify, or delete recipients.</p>
<p>
<img src="actvmes2.gif" border=0></p>
<p class=label>
<b>Figure 2. The AddressLists collection hierarchy</b></p>
<p>
<a href="#actmsgom">View full object model</a>.</p>
<h3>Infostores Collection</h3>
<p>
The Infostores collection, illustrated in Figure 3, is described in the Active Messaging documentation as follows:</p>
<p class=indent>
An InfoStores collection provides access to all InfoStore objects available to this session. Each InfoStore object in turn offers access to the folder hierarchy of that message store. This is used primarily to obtain access to public and private folders. The Active Messaging Library does not support methods to add or remove InfoStore objects from the collection.</p>
<p>
This object can be used to iterate through different folders for information regarding messages inside the folders and to add, modify, or delete messages, folders, and so on.</p>
<p>
<img src="actvmes3.gif" border=0></p>
<p class=label>
<b>Figure 3. The InfoStores collection hierarchy</b></p>
<p>
<a href="#actmsgom">View full object model</a>.</p>
<h3>Folder (Inbox/Outbox)</h3>
<p>
As we have discussed earlier, the objects in the library are available once the Session object is created and the <b>Logon</b> method is successful. At this point, the Session object also allows you to interact with the default objects. Two of these are the top folder objects, Inbox and Outbox.</p>
<p>
You need not create these two folders—they are already available in the library. The Inbox/Outbox object model is illustrated in Figure 4. As you can see, the Folders collection object is a child of the top folder objects. The Inbox object receives all incoming messages and the Outbox stores all outgoing messages.</p>
<p>
<img src="actvmes4.gif" border=0></p>
<p class=label>
<b>Figure 4. The Folder object hierarchy</b></p>
<p>
<a href="#actmsgom">View full object model</a>.</p>
<h3>Messages Collection</h3>
<p>
This object is one of the most important objects in the Active Messaging Library because the Message object is a child object of this collection. The Message object is the object on which most of the actual actions are done, such as sending a message, reading a received message, and so on. Although the Messages collection is a child object of the Folder object, I have illustrated its object model separately in Figure 5.</p>
<p>
<img src="actvmes5.gif" border=0></p>
<p class=label>
<b>Figure 5. The Messages collection hierarchy</b></p>
<p>
<a href="#actmsgom">View full object model</a>.</p>
<p>
As you may have noticed, the smallest available object in Active Messaging is called a Field object. A Field object represents a Messaging property of an Active Messaging Library object. </p>
<h2>Visual Basic Sample Code</h2>
<p>
The ACTMSG sample associated with this article sends a simple mail message using an interface provided in the Visual Basic form, message.frm. Before you run the sample you need to set the references in Visual Basic to the Active Messaging Library. </p>
<p>
Most of the code for this sample is in actmsg.vbp. There is also the message.frm form, which has one textbox each for To Recipients, CC Recipients, Message Subject, and Message Text and one command button that contains the code for sending the message.</p>
<p>
Let's step through the basics of creating and sending a message.</p>
<p>
Declare the objects that are to be used. The Session object, once created and logged on to, provides a way to use other objects, such as Messages, Recipients, and Folders, which actually perform the actions of sending and receiving e-mail. Because this sample code illustrates a simple way of sending mail, I am creating only the objects that I require: Session, Message, and Recipient.</p>
<pre><code>Dim oSess&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Mapi.Session
Dim oMsg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Mapi.Message
Dim oRecipTo&nbsp;&nbsp; As Mapi.Recipient
Dim oRecipCC&nbsp;&nbsp; As Mapi.Recipient
</code></pre>
<p>
The above declaration, oSess as Mapi.Session, is possible only through early binding. Without early binding, you would need to use the following:</p>
<pre><code>Dim oSess as Object

'Create an object of Session.
Set oSess = CreateObject("Mapi.Session")
</code></pre>
<p>
After the session object is successfully created, use the <b>Logon</b> method on the session object with either a default profile or a specific profile. If you are already using Microsoft Exchange or Outlook™ then you can use the default profile “MS Exchange Settings” as follows:</p>
<pre><code>'Log on to the Session.
oSess.Logon “MS Exchange Settings”
</code></pre>
<p>
Create a Message object in the Messages collection of the Outbox. Set the different attributes of the Message object as shown below.</p>
<p>
The Message object needs a Recipients collection. So for every recipient, create a Recipient object and add it to the Recipients collection of the Message object. The RecipientType attribute differentiates a RecipientTo from a RecipientCC. Also, call the <b>Resolve</b> method on all the Recipient objects. </p>
<pre><code>'Create a message and fill in its properties.
Set oMsg = oSess.Outbox.Messages.Add
oMsg.Subject = “Test Subject from Active Messaging”
oMsg.Text = “Test Text from Active Messaging”

Set oRecipTo = oMsg.Recipients.Add
oRec.Name = “x@y.com”
oRec.Type = ActMsgTo
oRec.Resolve

Set oRecipCC = oMsg.Recipients.Add
oRec.Name = “z@y.com”
oRec.Type = ActMsgCC
oRec.Resolve
</code></pre>
<p>
After all the attributes are set, call the <b>Update</b> method of the Message. This saves the message in the MAPI system. The message is actually sent when the <b>Send</b> method is called. The <b>Update</b> method is not required if the <i>makePermanent </i>parameter is set to True when the <b>Send</b> method is called. When set to True, the <i>makePermanent </i>parameter does the same thing as calling the <b>Update</b> method—it saves the message in the MAPI system.</p>
<pre><code>' Send the message. 
oMsg.Update
oMsg.Send
</code></pre>
<p>
Log off from Session so that all the resources being used by the Session are freed. This is required when you finish using the Active Messaging system.</p>
<pre><code>'Log off the session.
oSess.Logoff

'Clear all the objects before exiting the procedure.
Set oRecipTo = Nothing
Set oRecipCC = Nothing
Set oMsg = Nothing
Set oSess = Nothing
</code></pre>
<p>
This is just a small part of the sample that shows how to send a message. But there are other things you can do as well: open the AddressLists collection and browse the AddressList; open AddressEntry and view the attributes of a particular address; open a specific folder and parse through all the messages in the folder or try to locate a specific message; and read mail that was received. You can also send attachments with mail.</p>
<p>
An exhaustive list of the objects available in the Active Messaging Library, along with their attributes and methods, is available in the Active Messaging SDK documentation (MSDN Library, SDK Documentation, Platform SDK). I recommend that you read through the documentation for help with designing your application efficiently. With the amount of flexibility provided in this library, you can build an extremely powerful messaging application.</p>
<h2>Visual Basic Scripting Edition Sample</h2>
<p>
Whatever code you write in Visual Basic will work with Microsoft Visual Basic Scripting Edition (VBScript) with some minor alterations—the main one concerning the variable declarations. There is only one variable type in VBScript—Variant. All the variables that were declared in Visual Basic should be stripped of their data type.</p>
<p>
For example:</p>
<pre><code>Dim iTemp As Integer
</code></pre>
<p>
In VBScript would become:</p>
<pre><code>Dim iTemp
</code></pre>
<p>
The VBScript code has been provided as a text file named actmsg.txt. Also, there is an HTML file, actmsg.htm, included with the ACTMSG sample that can be used for sending mail from a browser. </p>
<h2>Using Active Messaging with Visual C++</h2>
<p>
Because the Active Messaging Library is an ActiveX/COM library, it is available as a set of COM interfaces that can be used from Microsoft Visual C++®. For more information on how to use the Active Messaging Library in Visual C++, see the following:
<ul type=disc>
<li>
"MAPI Interfaces" (MSDN Library, SDK Documentation, Platform SDK)<br><br></li>
<li>
"The Active Messaging Library and MAPI" (MSDN Library, SDK Documentation, Platform SDK)</li>
</ul>
<h2>Conclusion</h2>
<p>
This article has explained the basic concepts of the Active Messaging system. Active Messaging is robust, easy to use, and object-based. It conforms to COM specifications, so all the features of COM are applicable to Active Messaging, such as application customization, distributed computing, language independence, and so forth. If you need to add messaging capability to an existing application, or if you are developing a complete messaging application, Active Messaging is the way to go.</p>
<h2><a name="actmsgom"></a>The Full Active Messaging Object Model</h2>
<p>
<img src="actvmess.gif" border=0></p>
</BODY>
</HTML>

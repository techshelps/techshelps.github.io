<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 206: Populating the Outline Control with a List of Directories and Files Stored on a Disk</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn206"></a></sup>Tip 206: Populating the Outline Control with a List of Directories and Files Stored on a Disk</h1>
<p>
February 28, 1996</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® File Manager and Explorer applications use an <b>Outline</b> control to display directories and files in a hierarchical list. This article explains how to populate the Microsoft Visual Basic® version 4.0 <b>Outline</b> control using this same technique.</p>
<h2>Using the Outline Control</h2>
<p>
The Microsoft® Visual Basic® version 4.0 <b>Outline</b> control is an advanced <b>List Box</b> control that allows you to display a hierarchical list of items to your user. The <b>Outline</b> control allows you to present items with indentation levels that can be expanded (the subordinate items become visible) or collapsed (the subordinate items become invisible). This means that a directory can be saved to the <b>Outline</b> control at one level of indentation and the files stored within that directory can be stored at a secondary level of indentation.</p>
<p>
The example program below populates an <b>Outline</b> control with all directories and files stored on the selected disk. This feat is accomplished by performing a recursive search through the disk's file structure. The name of a file is retrieved from the disk's directory. If this entry is a directory, it is added to the <b>Outline</b> control as a first-level indentation item. However, if the entry is a file, the entry is added to the <b>Outline</b> control at the next level of indentation. This action is repeated until every directory and file has been processed.</p>
<h2>Example Program</h2>
<p>
This program shows how to populate the <b>Outline</b> control with all directory and files stored on a disk drive.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1:<pre><code>Option Explicit
Dim FIndent As Integer
Dim FIndex As Integer
Dim StrtPath As String
</code></pre>
</li>
<li>
Add an <b>Outline</b> control to Form1. Outline1 is created by default.<br><br></li>
<li>
Add a <b>Drive List Box</b> control to Form1. Drive1 is created by default.<br><br></li>
<li>
Add the following code to the Change event for Drive1:<pre><code>Private Sub Drive1_Change()
 &nbsp;&nbsp; Outline1.Clear
 &nbsp;&nbsp; Outline1.AddItem Drive1.Drive &amp; "\"
 &nbsp;&nbsp; FIndent = 1
 &nbsp;&nbsp; FIndex = 0
 &nbsp;&nbsp; StrtPath = Drive1.Drive
 &nbsp;&nbsp; Get_Files StrtPath
 &nbsp;&nbsp; MsgBox "OK"
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>Get_Files</b>. Add the following code to this procedure:<pre><code>Private Sub Get_Files(FPath As String)
 &nbsp;&nbsp; Dim File_Name As String
 &nbsp;&nbsp; Dim File_Path As String
 &nbsp;&nbsp; Dim File_Read As Integer
 &nbsp;&nbsp; Dim X As Boolean
 &nbsp;&nbsp; Dim I As Integer

 &nbsp;&nbsp; FIndent = FIndent + 1
 &nbsp;&nbsp; File_Path = FPath &amp; "\"
 &nbsp;&nbsp; File_Name = Dir$(File_Path, vbDirectory)
 &nbsp;&nbsp; File_Read = 1
 &nbsp;&nbsp; X = False

 &nbsp;&nbsp; Do While File_Name &lt;&gt; ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If File_Name &lt;&gt; "." And File_Name &lt;&gt; ".." Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If GetAttr(File_Path &amp; File_Name) &lt;&gt; vbDirectory Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outline1.AddItem File_Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FIndex = FIndex + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outline1.Indent(FIndex) = FIndent
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrtPath = File_Path &amp; File_Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outline1.AddItem File_Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FIndex = FIndex + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outline1.Indent(FIndex) = FIndent
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Files StrtPath
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If X = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$(File_Path, vbDirectory)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = 2 To File_Read
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Read = File_Read + 1
 &nbsp;&nbsp; Loop
 &nbsp;&nbsp; FIndent = FIndent - 1
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing&nbsp; Select a disk drive from the <b>Drive List Box</b> control by clicking the desired drive letter. The program will display a message box when it has populated the <b>Outline</b> control with all directories and files found on the target disk drive.</p>
<h2>Additional References</h2>
<p>
Knowledge Base Q118939. "How to Add Highlight Ability to Visual Basic's Outline Control."</p>
<p>
<a href="msdn_listbox.htm">"List Box Controls."</a> (MSDN Library, Technical Articles)</p>
<p>
<a href="msdn_msdn15.htm">"Tip 15: Creating a List of Directories Stored on a Disk."</a></p>
<p>
<a href="msdn_msdn123.htm">"Tip 123: Displaying Records from a Microsoft Access Database in an Outline Control."</a></p>
<p>
<a href="msdn_msdn124.htm">"Tip 124: Determining Available Disk Drives in Visual Basic."</a></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 45: Using BitBlt to Display Bitmaps</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn45"></a></sup>Tip 45: Using BitBlt to Display Bitmaps</h1>
<p>
Created: April 2, 1995</p>
<h2>Abstract</h2>
<p>
The Windows® <b>BitBlt</b> function can be used to display a bitmap image on a Visual Basic® form. The bitmap image can be an image stored in memory or an image stored on disk. This article demonstrates how the <b>BitBlt</b> function can display a bitmap file on the screen.</p>
<h2>Copying Bitmaps from One Source to Another</h2>
<p>
In a Visual Basic® application, you can use the <b>BitBlt</b> function to copy a bitmap from one device context to another as long as both device contexts are compatible. (See "<a href="msdn_msdn31.htm">Tip 31: Creating the Windows Wallpaper Effect,</a>" for a complete explanation of <b>BitBlt</b>.)</p>
<p>
If you're trying to copy a bitmap and the source and destination contexts are not compatible, you must first use the <b>CreateDIBitmap</b> function. This function takes a device-independent bitmap and converts it to a device-dependent bitmap. To declare this function within your program, include the following <b>Declare</b> statement in the General Declarations section of your form:</p>
<pre><code>Declare Function CreateDIBitmap Lib "GDI" (ByVal hDC As Integer, lpInfoHeader
 &nbsp; As BITMAPINFOHEADER, ByVal dwUsage As Long, ByVal lpInitBits As String,
 &nbsp; lpInitInfo As BITMAPINFO, ByVal wUsage As Integer) As Integer
</code></pre>
<p>
Note that this statement must be typed as a single line of text.</p>
<p>
The <b>CreateDIBitmap</b> function requires the following arguments:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=17%><i>hDC</i></td>
<td width=83%>An integer value set to the device context's handle. This device context describes the device-dependent bitmap that will be created.</td>
</tr>
<tr valign=top>
<td width=17%><i>lpInfoHeader</i></td>
<td width=83%>A <b>BITMAPINFOHEADER</b> structure that describes the device-independent bitmap's format.</td>
</tr>
<tr valign=top>
<td width=17%><i>dwUsage</i></td>
<td width=83%>If the <b>CBM_INIT</b> constant is specified, the bitmap is initialized as per the <i>lpInitBits</i> and <i>lpInitInfo</i> parameters. If the bitmap data should not be initialized, this long value should be set to zero.</td>
</tr>
<tr valign=top>
<td width=17%><i>lpInitBits</i></td>
<td width=83%>A string containing the bitmap data in device-independent format, or a long value containing a pointer to same.</td>
</tr>
<tr valign=top>
<td width=17%><i>lpInitInfo</i></td>
<td width=83%>A <b>BITMAPINFO</b> structure that describes the <i>lpInitBits</i> device-independent bitmap.</td>
</tr>
<tr valign=top>
<td width=17%><i>wUsage</i></td>
<td width=83%>Set to the <b>DIB_PAL_COLORS</b> constant to specify the color table relative to the currently selected palette, or to <b>DIB_RGB_COLORS</b> if the color table contains RGB colors.</td>
</tr>
</table><br>
<p>
<b>CreateDIBitmap</b> returns an integer value of 1 or greater as the newly created bitmap's handle, or zero if the function was unable to create the bitmap.</p>
<p>
Once you have created the compatible bitmap, you need to create a compatible memory device context. The <b>CreateCompatibleDC</b> function will do this work. This function's declaration is:</p>
<pre><code>Declare Function CreateCompatibleDC Lib "GDI" (ByVal hDC As Integer) As Integer
</code></pre>
<p>
This function needs only one argument to be passed to it: the device context's handle. If you specify the handle as being zero, a device context that is compatible with the screen will be created.</p>
<p>
Now you can call the <b>BitBlt</b> function to draw the bitmap image on the screen. This works exactly as if you had used the <b>LoadPicture</b> method.</p>
<p>
You should also use the <b>DeleteDC</b> and <b>DeleteObject</b> functions to release the Windows resources used by the device context and bitmap you have just created.</p>
<h2>Example Program</h2>
<p>
The following program shows how you can quickly draw a bitmap image on your Visual Basic form. The TARTAN.BMP file shipped with Windows® is used in this example, but any other bitmap that is 32 x 32 pixels can be substituted.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default. Set its <b>AutoRedraw</b> property to True.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp;&nbsp; Call DrawBitMap
End Sub
</code></pre>
</li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of your program (note that each statement must be typed as a single line of code):<pre><code>Const CBM_INIT = &amp;H4&amp;
Const SRCCOPY = &amp;HCC0020 

Declare Function CreateDIBitmap Lib "GDI" (ByVal hDC As Integer, lpInfoHeader
 &nbsp; As BITMAPINFOHEADER, ByVal dwUsage As Long, ByVal lpInitBits As String, 
 &nbsp; lpInitInfo As BITMAPINFO, ByVal wUsage As Integer) As Integer

Declare Function DeleteObject Lib "GDI" (ByVal hObject As Integer) As Integer

Declare Function BitBlt Lib "GDI" (ByVal hDestDC As Integer, ByVal X As Integer, 
 &nbsp; ByVal Y As Integer, ByVal nWidth As Integer, ByVal nHeight As Integer, ByVal 
 &nbsp; hSrcDC As Integer, ByVal XSrc As Integer, ByVal YSrc As Integer, ByVal dwRop 
 &nbsp; As Long) As Integer

Declare Function CreateCompatibleDC Lib "GDI" (ByVal hDC As Integer) As Integer

Declare Function SelectObject Lib "GDI" (ByVal hDC As Integer, ByVal hObject As 
 &nbsp; Integer) As Integer

Declare Function DeleteDC Lib "GDI" (ByVal hDC As Integer) As Integer
</code></pre>
</li>
<li>
Create a new function called <b>ReadBitmapFile</b>. Add the following code to this function:<pre><code>Function ReadBitmapFile(fname As String, bm As BITMAPINFO, bmdata As String)
 &nbsp; As Integer
 ' Function only handles 16-color uncompressed bitmaps.
  Dim A As String
  Dim I As Integer
  Dim BitMapSize As Long
  
  Open fname$ For Binary As #1
  A = String$(2, 0)
  Get #1, , A
  If A &lt;&gt; "BM" Then Close #1: Exit Function
 &nbsp;&nbsp; 
  Seek #1, 15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Move to next bit.
  Get #1, , bm.bmiHeader.biSize
  Get #1, , bm.bmiHeader.biWidth
  Get #1, , bm.bmiHeader.biHeight
  Get #1, , bm.bmiHeader.biPlanes
  Get #1, , bm.bmiHeader.biBitCount
  
  If bm.bmiHeader.biBitCount &lt;&gt; 4 Then
 &nbsp;&nbsp;&nbsp;&nbsp; Close #1
 &nbsp;&nbsp;&nbsp;&nbsp; ReadBitmapFile = -1
 &nbsp;&nbsp;&nbsp;&nbsp; Exit Function
  End If
 &nbsp;&nbsp; 
  Get #1, , bm.bmiHeader.biCompression
  If bm.bmiHeader.biCompression &lt;&gt; 0 Then
 &nbsp;&nbsp; Close #1
 &nbsp;&nbsp; ReadBitmapFile = -1
 &nbsp;&nbsp; Exit Function
  End If
  
  Seek #1, 47:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Skip to next bit.
  Get #1, , bm.bmiHeader.biClrUsed
  ' The number of RGB quads depends on the number of
  ' colors - the defaults are enumerated below if bmnumcols&amp; = 0.
  If bm.bmiHeader.biClrUsed = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; bm.bmiHeader.biClrUsed = 16
  End If&nbsp;&nbsp;&nbsp; 
  
  If bm.bmiHeader.biClrUsed &lt;&gt; 16 Then
 &nbsp;&nbsp;&nbsp;&nbsp; Close #1
 &nbsp;&nbsp;&nbsp;&nbsp; ReadBitmapFile = -1
 &nbsp;&nbsp;&nbsp;&nbsp; Exit Function
  End If&nbsp;&nbsp;&nbsp; 
  
  Get #1, , bm.bmiHeader.biClrImportant
  ' We are now at offset 55 in the file
  For I = 0 To bm.bmiHeader.biClrUsed - 1
  ' Get RGB quads and set palette entries as appropriate. Note that BASIC
  ' palette entries are not the same as standard Windows palette entries.
 &nbsp;&nbsp;&nbsp;&nbsp; Get #1, , bm.bmicolors(I)
  Next I&nbsp;&nbsp;&nbsp; 
  
  ' Now read the bitmap information
  BitMapSize = BitMapRowSize(bm.bmiHeader.biWidth, bm.bmiHeader.biBitCount)
 &nbsp;&nbsp; * bm.bmiHeader.biHeight
  bmdata = String$(BitMapSize, 0)
 Get #1, , bmdata
  Close #1
End Function
</code></pre>
</li>
<li>
Add a new function called <b>BitMapRowSize</b> to the project. Add the following code to this function:<pre><code>Function BitMapRowSize(bmwidth As Long, bmbitspixel) As Long
  ' Given bitmap width in pixels, and the number of bits
  ' per pixel, calculate the bitmap row size in bytes.
  Dim B As Integer
  B = bmwidth * bmbitspixel
  If (B Mod 32) &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; BitMapRowSize = ((B + 32 - (B Mod 32)) \ 8) ' Pad to nearest 4 bytes.
  Else
 &nbsp;&nbsp;&nbsp;&nbsp; BitMapRowSize = B \ 8
  End If
End Function
</code></pre>
</li>
<li>
Add a new Module to your project. Module1.Bas is created by default. Add the following Type structures to Module1.Bas:<pre><code>Type BITMAPINFOHEADER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' 40 bytes
  biSize As Long
  biWidth As Long
  biHeight As Long
  biPlanes As Integer
  biBitCount As Integer
  biCompression As Long
  biSizeImage As Long
  biXPelsPerMeter As Long
  biYPelsPerMeter As Long
  biClrUsed As Long
  biClrImportant As Long
End Type

Type BITMAPINFO
  bmiHeader As BITMAPINFOHEADER
  bmicolors(15) As Long
End Type
</code></pre>
</li>
<li>
Add a new function called <b>DrawBitMap</b> to your project. Add the following code to this function:<pre><code>Sub DrawBitMap()
  Dim hbmap As Integer
  Dim bitmap As String
  Dim RC As Integer
  Dim chdc As Integer
  Dim bm As BITMAPINFO
  Dim I As Integer&nbsp;&nbsp;&nbsp; 
  RC = ReadBitmapFile("C:\windows\tartan.bmp", bm, bitmap)
  hbmap = CreateDIBitmap(Me.hDC, bm.bmiHeader, CBM_INIT, bitmap, bm, 0)
  chdc = CreateCompatibleDC(Me.hDC)
  If chdc &lt;&gt; 0 And hbmap &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; RC = SelectObject(chdc, hbmap)
  ' Just put it up at 10,10 for now.
 &nbsp;&nbsp;&nbsp;&nbsp; RC = BitBlt(Me.hDC, 10, 10, bm.bmiHeader.biWidth, bm.bmiHeader.biHeight,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chdc, 0, 0, SRCCOPY)
 &nbsp;&nbsp;&nbsp;&nbsp; RC = DeleteDC(chdc)
 &nbsp;&nbsp;&nbsp;&nbsp; RC = DeleteObject(hbmap)
  End If
End Sub
</code></pre>
</li>
</ol>
<p>
[Note: The <b>RC = BitBlt</b> line above must be typed or pasted as a single line of text.Ed.]</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 138: Enabling and Disabling Scroll Bars in a List Box</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn138"></a></sup>Tip 138: Enabling and Disabling Scroll Bars in a List Box</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
When you write a program in Visual Basic®, it may be necessary to temporarily enable or disable the scroll bars in a <b>List Box</b> control. This article explains how to use the Windows® application programming interface (API) <b>GetSystemMetrics</b> function with a <b>Picture Box</b> control to enable or disable the scroll bars in a <b>List Box</b> control.</p>
<h2>Using the GetSystemMetrics Function</h2>
<p>
You can use the Windows® application programming interface (API) <b>GetSystemMetrics</b> function to retrieve the system metrics (for example, the width and height) of several elements of the Windows environment. To use this function in your Visual Basic® program, you must include the following <b>Declare</b> statement in the General Declarations section of your form (note that this <b>Declare</b> statement must be typed as a single line of code):</p>
<pre><code>Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long)
 &nbsp; As Long
</code></pre>
<p>
The <b>GetSystemMetrics</b> function requires only one argument—a long value specifying the type of information you want to retrieve. The following table shows the constant values you must use to obtain the system metrics of a specific element in the Windows environment.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=42%>Const SM_CXSCREEN = 0</td>
<td width=58%>Width of screen.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYSCREEN = 1</td>
<td width=58%>Height of screen.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXFULLSCREEN = 16</td>
<td width=58%>Width of window client area.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYFULLSCREEN = 17</td>
<td width=58%>Height of window client area.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYMENU = 15</td>
<td width=58%>Height of menu.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYCAPTION = 4</td>
<td width=58%>Height of caption or title.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXFRAME = 32</td>
<td width=58%>Width of window frame.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYFRAME = 33</td>
<td width=58%>Height of window frame.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXHSCROLL = 21</td>
<td width=58%>Width of arrow bitmap on horizontal scroll bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYHSCROLL = 3</td>
<td width=58%>Height of arrow bitmap on horizontal scroll bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXVSCROLL = 2</td>
<td width=58%>Width of arrow bitmap on vertical scroll bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYVSCROLL = 20</td>
<td width=58%>Height of arrow bitmap on vertical scroll bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXSIZE = 30</td>
<td width=58%>Width of bitmaps in title bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYSIZE = 31</td>
<td width=58%>Height of bitmaps in title bar.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXCURSOR = 13</td>
<td width=58%>Width of cursor.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYCURSOR = 14</td>
<td width=58%>Height of cursor.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CXBORDER = 5</td>
<td width=58%>Width of window frame that cannot be sized.</td>
</tr>
<tr valign=top>
<td width=42%>Const SM_CYBORDER = 6</td>
<td width=58%>Height of window frame that cannot be sized.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=37%>Const SM_CXDOUBLECLICK = 36</td>
<td width=63%>Width of rectangle around the location of the first click. The second click must occur in the same rectangular location.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYDOUBLECLICK = 37</td>
<td width=63%>Height of rectangle around the location of the first click. The second click must occur in the same rectangular location.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXDLGFRAME = 7</td>
<td width=63%>Width of dialog frame window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYDLGFRAME = 8</td>
<td width=63%>Height of dialog frame window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXICON = 11</td>
<td width=63%>Width of icon.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYICON = 12</td>
<td width=63%>Height of icon.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXICONSPACING = 38</td>
<td width=63%>Width of rectangles the system uses to position tiled icons.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYICONSPACING = 39</td>
<td width=63%>Height of rectangles the system uses to position tiled icons.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXMIN = 28</td>
<td width=63%>Minimum width of window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYMIN = 29</td>
<td width=63%>Minimum height of window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXMINTRACK = 34</td>
<td width=63%>Minimum tracking width of window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYMINTRACK = 35</td>
<td width=63%>Minimum tracking height of window.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CXHTHUMB = 10</td>
<td width=63%>Width of scroll box (thumb) on horizontal scroll bar.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_CYVTHUMB = 9</td>
<td width=63%>Width of scroll box (thumb) on vertical scroll bar.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_DBCSENABLED = 42</td>
<td width=63%>Returns a nonzero if the current Windows version uses double-byte characters, otherwise returns zero.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_DEBUG = 22</td>
<td width=63%>Returns nonzero if the Windows version is a debugging version.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_MENUDROPALIGNMENT = 40</td>
<td width=63%>Alignment of pop-up menus. If zero, left side is aligned with corresponding left side of menu bar item. If nonzero, left side is aligned with right side of corresponding menu bar item.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_MOUSEPRESENT = 19</td>
<td width=63%>Nonzero if mouse hardware is installed.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_PENWINDOWS = 41</td>
<td width=63%>Handle of Pen Windows dynamic-link library (DLL) if Pen Windows is installed.</td>
</tr>
<tr valign=top>
<td width=37%>Const SM_SWAPBUTTON = 23</td>
<td width=63%>Nonzero if the left and right mouse buttons are swapped.</td>
</tr>
</table><br>
<p>
In a Visual Basic application, you can selectively enable or disable the scroll bars in a <b>List Box </b>by first retrieving the width of the scroll bar's arrow bitmap. You do this by calling the <b>GetSystemMetrics</b> function with the value SM_CXVSCROLL for the <i>Index</i> argument. The width of the arrow bitmap is returned as a long value by the <b>GetSystemMetrics</b> function.</p>
<p>
Next, a <b>Picture Box</b> control must be positioned directly over the scroll bars on the window or form in your project. The <b>Width</b> property of the <b>Picture Box</b> is set to the width of the arrow bitmap. By setting the <b>Visible</b> property of the <b>Picture Box</b> control to True, the user can employ the scroll bars in the usual manner. However, if you set the <b>Visible</b> property of the <b>Picture Box</b> control to False, the user cannot see the scroll bars. Therefore, the scroll bars become temporarily disabled.</p>
<h2>Example Program</h2>
<p>
This program shows how to hide the scroll bars of a <b>List Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Const SM_CXVSCROLL% = 2
Private Declare Function GetSystemMetrics Lib "user32" 
 &nbsp; (ByVal nIndex As Long) As Long
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim WD As Long
 &nbsp;&nbsp; List1.Visible = False
 &nbsp;&nbsp; WD = GetSystemMetrics(SM_CXVSCROLL%)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Picture1.Width = WD * Screen.TwipsPerPixelX
 &nbsp;&nbsp; Picture1.Left = List1.Left + List1.Width - Picture1.Width
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Picture1.Top = List1.Top
 &nbsp;&nbsp; Picture1.Height = List1.Height
 &nbsp;&nbsp; Picture1.Line (0, 0)-Step(0, Picture1.Height)
 &nbsp;&nbsp; List1.Visible = True
 &nbsp;&nbsp; 
 &nbsp;&nbsp; List1.AddItem "Vancouver"
 &nbsp;&nbsp; List1.AddItem "Seattle"
 &nbsp;&nbsp; List1.AddItem "London"
 &nbsp;&nbsp; List1.AddItem "Paris"
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>ShowBar</b>. Add the following code to this procedure:<pre><code>Sub ShowBar()
 &nbsp;&nbsp; Picture1.Visible = False
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>HideBar</b>. Add the following code to this procedure:<pre><code>Sub HideBar()
 &nbsp;&nbsp; Picture1.Visible = True
 &nbsp;&nbsp; Picture1.Line (0, 0)-Step(0, Picture1.Height)
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box </b>control to Form1. List1 is created by default. Set the following properties for List1:<p class=tl>
Height = 450<br>
Left = 2760<br>
Top = 1800<br>
Width = 1215</P></li>
<li>
Add a <b>Picture Box</b> control to Form1. Picture1 is created by default. Set the following properties for Picture1:<p class=tl>
AutoRedraw = True<br>
BorderStyle = 0-None<br>
Height = 450<br>
Left = 2760<br>
Top = 1800<br>
Visible = False<br>
Width = 1215</P></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Show".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; ShowBar
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Hide".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; HideBar
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the <b>Hide</b> command button. The scroll bars on the <b>List Box</b> control are no longer visible, but you can still scroll through the contents of the <b>List Box</b> with the arrow keys. Click the <b>Show</b> command button to show the scroll bars on the <b>List Box </b>control.</p>
<h2>Additional Reference</h2>
<p>
"GetSystemMetrics." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSDN HelpDesk Sample Installation and Deployment</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_hddeploy"></a>MSDN HelpDesk Sample Installation and Deployment</h1>
<p>
Kevin Marzec<br>
MSDN Content Development Group</p>
<p>
February 2, 1998</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5177">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the setup files for the MSDN HelpDesk sample.</a></p>
<p>
This article first explains the four installation processes for the HelpDesk sample: the server setup, the client setup, the non-MTS setup, and the SQL Components setup. Then it describes how a HelpDesk client application uses the services of another component, be it local or remote, and examines architectural options for deployment of the sample.</p>
<p class=indent>
<B><b>Important&nbsp;&nbsp;</b></B>&nbsp;It is highly recommended that you read the installation section of this article before attempting to install the HelpDesk sample.</p>
<h2>Installation</h2>
<p>
Note that the server installation must be completed before client installation can take place. Also carefully note the software requirements before attempting to install this sample.</p>
<p>
You may choose any of the four installation options: 
<ul type=disc>
<li>
The <i>SQL Components<b> </b></i>setup installs all SQL related files. It will also execute a batch script that generates all the required stored procedures for the database. It will install and register the Performance Monitor Server component as well. You must provide a database name during the setup. You <i>must </i>run this setup option on the same computer that will be hosting the SQL Server database.<br><br></li>
<li>
The <i>Server<b> </b></i>setup installs only the Microsoft® Transaction Server (MTS) server components. You will need to set up your data source and database (by running the <i>SQL Components</i> setup option) before running the server setup. Use this option if you wish to host an array of clients through a particular server. Note that this option requires Microsoft Transaction Server to be installed so that you may build and share an MTS package to allow the clients access to the server components.<br><br></li>
<li>
The <i>Client<b> </b></i>setup installs only the MTS components required to enable you to connect to an existing HelpDesk server. Note that you do not need to set up a database with this option, but you must follow the instructions for setting up a data source that will point to the existing database. <br><br></li>
<li>
The <i>Non-MTS<b> </b></i>setup installs versions of the client and server components, which do not require MTS, on one computer. Note that you must have Internet Explorer 4.0 installed, as well as ActiveX® Data Objects (ADO) version 1.5. This option is automatically selected for you if you are running Windows 95.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Do not attempt to install the Non-MTS option on any computer that contains HelpDesk MTS components, as it may result in registry conflicts. </p>
<h3>Database and Server Installation</h3>
<p>
The server components and the database need not be set up on the same computer. In fact, for the sake of performance in a distributed environment, it is recommended that they are located on separate computers.</p>
<p>
<b>Requirements:</b>
<ul type=disc>
<li>
Microsoft SQL Server™ 6.5 (on the machine that will host the HelpDesk database)<br><br></li>
<li>
Microsoft Visual Studio 97 service pack 2 or later (to use optional source code)<br><br></li>
<li>
Microsoft Transaction Server 1.1 or later<br><br></li>
<li>
ADO 1.5 (available for download from <a href="http://www.microsoft.com/data/">http://www.microsoft.com/data/</a>)—<i>The HelpDesk sample was tested with ADO version 1.50.2404</i><br><br></li>
<li>
Microsoft Internet Explorer 4.0 or later<br><br></li>
<li>
Microsoft Internet Information Server with Active Server pages installed (ASP) (required for the Windows CE server only)<br><br></li>
<li>
Windows NT 4.0 with Service Pack 3 <p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Service Pack must be installed after all other software products listed above.</p></li>
</ul>
<p>
There are four main steps to the HelpDesk server components installation: 
<ul type=disc>
<li>
Creating the Database and setting up the data source<br><br></li>
<li>
Setting up the database<br><br></li>
<li>
Installing the required files through the setup program<br><br></li>
<li>
Building and sharing a Transaction Server package for use by the client installation</li>
</ul>
<h4><a name="deploy_dbsetup"></a>Creating the database and setting up the data source</h4>
<p>
You must set up an ODBC data source entry to allow the DBExec component to connect to the SQL Server database. You need to perform this step first so that the setup program can create the stored procedures on the database. On a computer running SQL Server, create a database using the SQL Enterprise Manager and name it ("HelpDesk" is recommended). You then need to create the data source (if you are installing the server components and the database on separate machines, you must create the data source on <i>each</i> machine):
<ol>
<li>
In Control Panel, select <b>ODBC</b>.<br><br></li>
<li>
Under the <b>System DSN</b> tab, click <b>Add</b>.<br><br></li>
<li>
Select the SQL Server driver from the list of installed drivers.<br><br></li>
<li>
Name the data source "HelpDesk."<br><br></li>
<li>
Set the default database to the name of your newly created database .<br><br></li>
<li>
Under <b>Server</b>, either enter the name of the computer running SQL Server or select it from the drop-down list.</li>
</ol>
<p class=indent>
<B><b>Note</b>&nbsp;&nbsp;&nbsp;</B>You want to use Windows NT user authentication and a trusted connection.</p>
<h4>Setting up the database</h4>
<p>
To set up the database, you need to run the setup program on the same computer that you created the database on, and select the SQL Components option. This will create all the database tables and stored procedures that are required by the HelpDesk sample application. You will have the option of installing either the MTS or the non-MTS versions of the components. Note that if you install the MTS versions, you will need to set up a MTS package through Transaction Server Explorer before the components will work correctly. See the instructions under the Server Installation for more details on how to generate a MTS package.</p>
<p>
The setup program will prompt you for the name of the database you are using. Enter the name of the database that you created above. A set of batch files will then be executed, creating the tables and stored procedures for the database.</p>
<h3>Installing the Server Components </h3>
<p>
The next step is very straightforward: simply run the Server setup option on your Server computer and follow the instructions. Setup will copy all of the required files to your local hard drive. </p>
<p>
There are two optional components: the Windows CE server and the HelpDesk source code. The Windows CE server is a collection of HTML and ASP pages that are required for the Windows CE technician client. After selecting which components you would like to install (both are selected by default), you are asked to provide destination folders for each one. The Windows CE server files should be installed in a folder beneath your web document directory (for example, C:\InetPub\WWWRoot\WinCE). Note that if you wish to use the source code, you will need to have Visual Studio 97 SP2 or later installed.</p>
<h4>Building and sharing a transaction server package</h4>
<p>
This step is a bit more daunting—it requires building a Microsoft Transaction Server package that will point client computers to the server-side components. To assemble the MTS package:
<ol>
<li>
Launch the Microsoft Transaction Server Explorer.<br><br></li>
<li>
Create a new Package by selecting <b>Packages</b>, and then clicking <b>New</b> from the <b>File</b> menu. Select <b>Create an Empty Package</b> and give it a name, such as HDRemote. Set the package identity to the interactive user.<br><br></li>
<li>
Add the HDServer component to the package by selecting <b>Components</b> under your newly created package, then clicking <b>New</b> from the <b>File</b> menu. Select <b>Install new components</b> from the dialog that appears. Next, in the <b>Install Components</b> dialog box, select <b>Add Files</b> and point to the hdserver.dll, which was installed from the setup program (the default location is C:\Program Files\HelpDesk). Click Finish and the component will be added to your package.<br><br></li>
<li>
Under the properties for the newly added component (right-click the component and select <b>Properties</b>), on the <b>Transaction</b> tab, select the <b>Supports Transactions</b> property.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are installing the Client and Server on the same computer, you should not follow steps 5 and 6. When you build an MTS package on a computer, the components are registered automatically on that computer. Exporting and executing the package will result in duplicate registry entries and can potentially cause problems. The exported package should be run only on separate client computers.</p></li>
<li>
Right-click on the package name and select <b>Export</b>. You must provide a path and filename for the package; this can be any location that is suitable for sharing with clients. Note that the package file that you name here is <i>different</i> than the executable that you will be sharing out for the client installations. The executable will be placed in a subdirectory of the location you specify called Clients and will contain the executable file.<br><br></li>
<li>
Share the directory containing the built .exe file to allow any potential client to access it.</li>
</ol>
<p>
Repeat Steps 2 through 4, creating a new package for the DBExec component (dbexec.dll). Note that it is possible to add DBExec to the same package as HDServer, but you do not want to expose the functionality of DBExec to the clients. For this reason, build a new package for DBExec, but do not export it.</p>
<h4>Server uninstall</h4>
<p>
Uninstalling the server components is again a three-step process, similar to the installation procedure, but in reverse. 
<ol>
<li>
Run <b>Remove HelpDesk Server</b> from the MSDN HelpDesk Sample program group in the start menu. This will delete the installed files as well as any registry entries created by the setup program. <br><br></li>
<li>
In the <b>Control Panel</b>, select <b>ODBC</b> and remove the system DSN that you created. <br><br></li>
<li>
In Transaction Server Explorer, under <b>Packages Installed</b>, right-click the packages that you created, and select <b>Delete</b>. </li>
</ol>
<h3>Client Installation</h3>
<p>
<b>Requirements</b>:
<ul type=disc>
<li>
Microsoft Internet Explorer 4.0 or later (required for the DHTML technician client and the performance monitor only)<br><br></li>
<li>
Microsoft Visual Studio 97 service pack 2 or later (to use the optional source code)<br><br></li>
<li>
ADO 1.5 (available for download from <a href="http://www.microsoft.com/data/">http://www.microsoft.com/data/</a>)—<i>The HelpDesk sample was tested with ADO version 1.50.2404</i><br><br></li>
<li>
Windows NT 4.0 Service Pack 3 <p class=atl>
<B><b>Note</b> &nbsp;&nbsp;&nbsp;</B>The Service Pack must be installed after all other software products above</p></li>
</ul>
<p>
The client-side installation is very straightforward—run the setup program and select the client installation. You are prompted for a local directory to install to (setup defaults to C:\Program Files\HelpDesk) and then you are asked to select which client components you wish to install. Note that the Performance Monitor and the DHTML Technician Client require Internet Explorer version 4.0 or later. If you do not have Internet Explorer or later installed, you will not be given a choice to install these clients. If you wish to install any pieces at a later date, simply run the setup program again. </p>
<p>
The last step of the installation requires you to specify a full path to the server-side MTS package created during the Server installation. This must be a fully qualified pathname, such as \\MYSERVER\HDServer\HDServer.exe. After all of the files are copied, this package will be executed, registering the server-side components and installing server proxies in your Program Files\Remote Applications folder. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are running this setup over an existing setup, you do not need to specify the MTS package location again unless the server has been reinstalled. Simply leave the field blank.</p>
<h3>Client Uninstall</h3>
<p>
To remove the HelpDesk client applications from your computer, run <b>Remove HelpDesk Client </b>from the MSDN HelpDesk Sample program group in the start menu. This will remove all installed files and delete all registry entries created by the setup program. To remove the server-side components that were added by executing the server-based MTS package, go to <b>Add/Remove Programs</b> in the Control Panel and select <b>Remote Applications—HDRemote (remove only)</b> and click <b>Add/Remove</b>. This will unregister the server-side helpdesk components.</p>
<h3>Non-MTS Installation</h3>
<p>
<b>Requirements</b>:
<ul type=disc>
<li>
Microsoft Internet Explorer 4.0 or later<br><br></li>
<li>
ADO 1.5 (available for download from <a href="http://www.microsoft.com/data/">http://www.microsoft.com/data/</a>)—<i>The HelpDesk sample was tested with ADO version 1.50.2404</i><br><br></li>
<li>
Windows NT 4.0 Service Pack 3 (if installing on a Windows NT computer)</li>
</ul>
<p class=indent>
<B><b>Note&nbsp;&nbsp;</b>&nbsp;</B>The Service Pack must be installed after all other software products above</p>
<p>
The Non-MTS installation provides you with the non-MTS versions of each component. It installs each component onto your local computer, so DCOM for Windows 95 is not necessary. However, the database can be located on a remote computer. Therefore, this setup option is the default for Windows 95 users. </p>
<p>
Before starting installation, you will want to make sure that you set up your data source and run the SQL Components setup option on the computer that is hosting your database. See the instructions under "<a href="#deploy_dbsetup">Creating the Database and Setting up the Data Source."</a> </p>
<p>
Once your database is ready, execute setup, selecting the Non-MTS option. After selecting the components that you wish to install, and selecting the destination folder(s), setup will copy all the required files to your hard drive, registering any necessary DLLs as it goes. That's all there is to it!</p>
<h3>Release Notes</h3>
<p>
This application has not been tested with Windows NT version 5.0 or Windows 98. If you are using Windows 95, the only supported option is the Non-MTS setup.</p>
<p>
The HelpDesk administrative tool, HDExplorer will allow any user to logon as an administrator for the system. For this reason, this application should be placed in a secure location.</p>
<h2>Gory Details</h2>
<p>
Let's consider the path that the system follows—from the client application down to the database.When a client application attempts to create and use an HDClient<b> </b>object, COM attempts to locate the component based on the object's Application ID (for example, HDClient.CAdmin or HDClient.CTech). This information is stored in the Windows Registry. (When you execute the install program, the component DLLs are automatically registered for you. To manually register a DLL, you can use the regsvr32.exe application, usually located in the System32 folder, with the command "regsvr32 &lt;filename&gt;". To remove a component from the registry, use "regsvr32 /u &lt;filename&gt;".) </p>
<p>
Now things get a little bit more interesting. When the client application calls a method on the HDClient object, it is likely that the HDClient object will attempt to access some data on the SQL Server database. To do this, the HDClient object needs to pass a request to the remote HDServer object located somewhere out in cyberspace. Microsoft Transaction Server (MTS) makes this very simple. When the client computer executes the distributed MTS package (generated on the server computer), the HDServer component is registered in the client registry. Generally, the CLSID registry will provide the file location of the component from which the object is to be served. However, when the MTS package is executed, the registry entry essentially stores the name of the server computer where the object is to be found. Once the server name is found, the object can be requested from the server and the client can use it just as it would use any other service.</p>
<p>
This same process occurs during communication between each "layer" of the application. Each layer may reside locally or remotely, completely transparent to the application. It doesn't matter where each piece of the application is located, as long as it can be found when a client application asks for an object. COM takes care of all this for you.</p>
<p>
When using MTS to manage your components, the details are slightly different. Instead of storing the full path to the component (.dll or .exe) in the registry, MTX.exe is listed as the LocalServer, along with a parameter containing the component's CLSID. This allows MTS to control the lifetime of your object and keep track of transactions, object pooling, and so on. </p>
<h2>Alternative Architectures</h2>
<p>
The architecture of the HelpDesk setup program is fairly simple. It relies on a very linear flow of data (see Figure 1). Information travels from the Client to the HDClient<i> </i>object, over the wire to the HDServer<i> </i>object, from there to the DBExec<i> </i>object, then (possibly over the wire again) to the SQL Server database. The installation program and the above instructions will deploy the HelpDesk application in this manner. </p>
<p>
<img src="hddeploy1.gif" border=0></p>
<p class=label>
<b>Figure 1. Simple client/server install process</b></p>
<p>
However, let's assume that you're a very large corporation trying to implement a fully distributed helpdesk application. In that case, you are going to want more scalability. You may want to split your database over multiple servers and you might want to have a handful of computers with the HDServer object installed, each taking client requests and passing them on to any number of computers providing the DBExec services. A more scalable architecture is depicted in Figure 2. Note that this architecture is logically equivalent to the first architecture presented. It follows the same n-tier distribution system. The difference is in the physical distribution of the components. The system was designed from a logical standpoint—it makes no difference how the physical components are distributed.</p>
<p>
It makes sense to increase the number of computers dedicated to HDServer in proportion to the number of computers dedicated to DBExec because the HDServer component is more CPU-intensive. A single DBExec object can handle requests from multiple HDServers. The exact proportion is probably best achieved through testing various scenarios for performance. </p>
<p>
Note that if you follow this more scalable approach, the distribution method, though similar to that given in the setup instructions, will be modified slightly. The HDServer computers will have to execute the DBExec package generated on the DBExec computers and the clients will execute the HDServer package. This is in contrast to generating only a single package containing both server components. To find out more about creating and distributing packages, see the Microsoft Transaction Server documentation. </p>
<p>
<img src="hddeploy2.gif" border=0></p>
<p class=label>
<b>Figure 2. Fully distributed n-tier system</b></p>
<p class=label>
</p>
</BODY>
</HTML>

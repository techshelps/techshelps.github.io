<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Entries in the Operating System Registry</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ctrl_reg"></a></sup>Controlling Entries in the Operating System Registry </h1>
<p>
Microsoft Corporation</p>
<p>
July 1996</p>
<h2>Overview</h2>
<p>
Microsoft® Windows NT® and Windows® 95 operating systems make use of a set of system configuration files referred to as the registry. The operating system provides a tool called Regedit that is used to manipulate entries in the registry. </p>
<p>
When you are developing applications for the Windows environment, it is imperative that you know how to work with the system registry to discover information and to save and manipulate your own specific entries. </p>
<h2>API Declarations and Constants</h2>
<p>
The registry is accessed through Microsoft Visual Basic® for Applications by declaring the necessary Windows application programming interface (API) functions and the correct constants: </p>
<pre><code>' *********************************************************
' Registry Module for Visual Basic for Applications under Windows 95
' Declarations and Control Module
' *********************************************************
Option Explicit
' **********************************************
' Declare the specific key path for your
' application's settings in the registry.
' **********************************************
Public Const AppReg = "MyAppName"
Private Const REG_APP_KEYS_PATH = "Software\MYApps\" &amp; AppReg
' **********************************************
' Specify constants to specific branches in the
' registry.
' **********************************************
Global Const HKEY_CLASSES_ROOT = &amp;H80000000
Global Const HKEY_CURRENT_USER = &amp;H80000001
Global Const HKEY_LOCAL_MACHINE = &amp;H80000002
Global Const HKEY_USERS = &amp;H80000003
Private Const ERROR_SUCCESS = 0&amp;
Private Const ERROR_NO_MORE_ITEMS = 259&amp;
' **********************************************
' Specify constants to registry data types.
' These are declared Public for outside module
' usage in the GetAppRegValue() function.
' **********************************************
Public Const REG_NONE = 0
Public Const REG_SZ = 1
Public Const REG_EXPAND_SZ = 2
Public Const REG_BINARY = 3
Public Const REG_DWORD = 4
Public Const REG_DWORD_LITTLE_ENDIAN = 4
Public Const REG_DWORD_BIG_ENDIAN = 5
Public Const REG_LINK = 6
Public Const REG_MULTI_SZ = 7
Public Const REG_RESOURCE_LIST = 8
' **********************************************
' Specify constants to registry action types.
' **********************************************
Private Const REG_OPTION_NON_VOLATILE = 0
Private Const KEY_QUERY_VALUE = &amp;H1
Private Const KEY_SET_VALUE = &amp;H2
Private Const KEY_CREATE_SUB_KEY = &amp;H4
Private Const KEY_ENUMERATE_SUB_KEYS = &amp;H8
Private Const KEY_NOTIFY = &amp;H10
Private Const KEY_CREATE_LINK = &amp;H20
Private Const SYNCHRONIZE = &amp;H100000
Private Const STANDARD_RIGHTS_ALL = &amp;H1F0000
Private Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or _
 &nbsp; KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or _
 &nbsp; KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))
' **********************************************
' Security mask attributes for Windows NT (SAM).
' **********************************************
Type SECURITY_ATTRIBUTES
 &nbsp; nLength As Long
 &nbsp; lpSecurityDescriptor As Long
 &nbsp; bInheritHandle As Boolean
End Type
Declare Function RegCreateKey Lib "advapi32" Alias "RegCreateKeyA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpszSubKey As String, _
 &nbsp;&nbsp; phkResult As Long) _
 &nbsp;&nbsp; As Long
Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpSubKey As String, _
 &nbsp;&nbsp; ByVal Reserved As Long, _
 &nbsp;&nbsp; ByVal lpClass As String, _
 &nbsp;&nbsp; ByVal dwOptions As Long, _
 &nbsp;&nbsp; ByVal samDesired As Long, _
 &nbsp;&nbsp; lpSecurityAttributes As Any, _
 &nbsp;&nbsp; phkResult As Long, lpdwDisposition As Long) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpSubKey As String) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpValueName As String) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegCloseKey Lib "advapi32.dll" _
 &nbsp; (ByVal hKey As Long) _
 &nbsp;&nbsp; As Long
Declare Function RegEnumKeyEx Lib "advapi32" Alias "RegEnumKeyA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal iSubKey As Long, _
 &nbsp;&nbsp; ByVal lpszName As String, _
 &nbsp;&nbsp; ByVal cchName As Long) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegOpenKeyEx Lib "advapi32" Alias "RegOpenKeyExA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpszSubKey As String, _
 &nbsp;&nbsp; ByVal ulOptions As Long, _
 &nbsp;&nbsp; ByVal samDesired As Long, _
 &nbsp;&nbsp; phkResult As Long) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpszValueName As String, _
 &nbsp;&nbsp; ByVal dwReserved As Long, _
 &nbsp;&nbsp; lpdwType As Long, _
 &nbsp;&nbsp; lpbData As Any, _
 &nbsp;&nbsp; cbData As Long) _
 &nbsp;&nbsp; As Long
 &nbsp;&nbsp; 
Declare Function RegSetValueEx Lib "advapi32" Alias "RegSetValueExA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpszValueName As String, _
 &nbsp;&nbsp; ByVal dwReserved As Long, _
 &nbsp;&nbsp; ByVal fdwType As Long, _
 &nbsp;&nbsp; lpbData As Any, _
 &nbsp;&nbsp; ByVal cbData As Long) _
 &nbsp;&nbsp; As Long
Declare Function RegSetStringEx Lib "advapi32" Alias "RegSetValueExA" _
 &nbsp; (ByVal hKey As Long, _
 &nbsp;&nbsp; ByVal lpszValueName As String, _
 &nbsp;&nbsp; ByVal dwReserved As Long, _
 &nbsp;&nbsp; ByVal fdwType As Long, _
 &nbsp;&nbsp; lpbData As String, _
 &nbsp;&nbsp; ByVal cbData As Long) _
 &nbsp;&nbsp; As Long
Declare Function GetCurrentProcessId Lib "Kernel32" () As Long
</code></pre>
<h3>How to Create a New Item in the Registry</h3>
<p>
The following code will create a new item in the system registry: </p>
<pre><code>Function CreateRegEntry(pDatatype As Long, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyToAdd As Variant, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValueToAdd As Variant) As Boolean
 &nbsp; On Local Error GoTo CreateRegEntry_Err
 &nbsp; ' ***********************************************
 &nbsp; ' Declare local usage variables.
 &nbsp; ' ***********************************************
 &nbsp; Dim lResult As Long, i As Integer, Msg As String
 &nbsp; Dim strMyKeyFull As String, MyKeyName As String
 &nbsp; Dim MyKeyValueLng As Long, MyKeyValueStr As String
 &nbsp; Dim MyDataType As Long, phkResult As Long, IsNewKey As Long
 &nbsp; ' ***********************************************
 &nbsp; ' Set path to your application's settings.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegCreateKeyEx(HKEY_LOCAL_MACHINE, REG_APP_KEYS_PATH, 0&amp;, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_SZ, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, phkResult, IsNewKey)
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; CreateRegEntry = False
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Creating Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key=" &amp; strMyKeyFull &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, App.Title
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo CreateRegEntry_End
 &nbsp; End If
 &nbsp;&nbsp; ' ***********************************************
 &nbsp;&nbsp; ' Determine data type and use appropriate
 &nbsp;&nbsp; ' passed value.
 &nbsp;&nbsp; ' ***********************************************
 &nbsp;&nbsp; Select Case pDatatype
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case REG_DWORD
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyKeyValueLng = ValueToAdd
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegSetValueEx(phkResult, KeyToAdd, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, pDatatype, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyKeyValueLng, Len(MyKeyValueLng))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case REG_SZ
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyKeyValueStr = ValueToAdd
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegSetValueEx(phkResult, KeyToAdd, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, pDatatype, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal MyKeyValueStr, Len(MyKeyValueStr))
 &nbsp;&nbsp; End Select
 &nbsp;&nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateRegEntry = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Creating Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key=" &amp; KeyToAdd &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, App.Title
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo CreateRegEntry_End
 &nbsp;&nbsp; End If
 &nbsp; CreateRegEntry = True
CreateRegEntry_End:
 &nbsp; Exit Function
CreateRegEntry_Err:
 &nbsp; MsgBox Error.Description, vbOKOnly Or vbExclamation, App.Title
 &nbsp; Resume CreateRegEntry_End
End Function
</code></pre>
<h3>How to Delete an Existing Item in the Registry</h3>
<p>
The following code will delete an existing item in the system registry: </p>
<pre><code>Function DeleteAllAppRegEntries() As Boolean
 &nbsp; On Local Error GoTo DeleteAllAppRegEntries_Err
 &nbsp; ' ***********************************************
 &nbsp; ' Declare local usage variables.
 &nbsp; ' ***********************************************
 &nbsp; Dim lResult As Long, Msg As String
 &nbsp; Dim hKey As Long
 &nbsp; ' ***********************************************
 &nbsp; ' Open the application's path key.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_APP_KEYS_PATH, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, KEY_ALL_ACCESS, hKey)
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; DeleteAllAppRegEntries = False
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Opening Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key/Path=" &amp; REG_APP_KEYS_PATH &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo DeleteAllAppRegEntries_End
 &nbsp; End If
 &nbsp; ' ***********************************************
 &nbsp; ' Delete the entire application's path key and any
 &nbsp; ' associated keys and values.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegDeleteKey(hKey, "")
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; DeleteAllAppRegEntries = False
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Deleting Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key=" &amp; REG_APP_KEYS_PATH &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo DeleteAllAppRegEntries_End
 &nbsp; End If
 &nbsp; lResult = RegCloseKey(hKey)
 &nbsp; DeleteAllAppRegEntries = True
DeleteAllAppRegEntries_End:
 &nbsp; Exit Function
DeleteAllAppRegEntries_Err:
 &nbsp; MsgBox Error.Description, vbOKOnly Or vbExclamation, "YourAppName"
 &nbsp; Resume DeleteAllAppRegEntries_End
End Function
</code></pre>
<h3>How to Return an Existing Item from the Registry</h3>
<p>
The following code will return a value from an existing item in the system registry: </p>
<pre><code>Function GetAppRegValue(WhatKey As String, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyDataType As Variant, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue As Variant, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsVerbose As Integer) As Boolean
 &nbsp; On Local Error GoTo GetAppRegValue_Err
 &nbsp; ' ***********************************************
 &nbsp; ' Declare local usage variables.
 &nbsp; ' ***********************************************
 &nbsp; Dim lResult As Long, dwResult As Long
 &nbsp; Dim dwType As Long, cbData As Long
 &nbsp; Dim varStrData As String, varLngData As Long
 &nbsp; Dim Msg As String
 &nbsp; ' ***********************************************
 &nbsp; ' Open the key for application's path.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_APP_KEYS_PATH, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, KEY_ALL_ACCESS, dwResult)
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; GetAppRegValue = False
 &nbsp;&nbsp;&nbsp;&nbsp; If IsVerbose Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Opening Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key/Path=" &amp; REG_APP_KEYS_PATH &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo GetAppRegValue_End
 &nbsp; End If
 &nbsp; ' ***********************************************
 &nbsp; ' Set up passed variables and retrieve value.
 &nbsp; ' ***********************************************
 &nbsp; Select Case KeyDataType
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_SZ
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varStrData = String$(255, 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbData = Len(varStrData)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegQueryValueEx(dwResult, WhatKey, ByVal 0&amp;, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwType, ByVal varStrData, cbData)
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_DWORD
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varLngData = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbData = Len(varLngData)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegQueryValueEx(dwResult, WhatKey, ByVal 0&amp;, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwType, varLngData, cbData)
 &nbsp; End Select
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; GetAppRegValue = False
 &nbsp;&nbsp;&nbsp;&nbsp; If IsVerbose Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Retrieving Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key=" &amp; WhatKey &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; lResult = RegCloseKey(dwResult)
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo GetAppRegValue_End
 &nbsp; End If
 &nbsp; ' ***********************************************
 &nbsp; ' Close key.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegCloseKey(dwResult)
 &nbsp; ' ***********************************************
 &nbsp; ' Select data type (for the needed types
 &nbsp; ' used in the values) and assign value.
 &nbsp; ' ***********************************************
 &nbsp; Select Case dwType
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_NONE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue = vbNull
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_SZ
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue = Left$(varStrData, cbData)
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_DWORD
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue = varLngData
 &nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue = vbNull
 &nbsp; End Select
 &nbsp; GetAppRegValue = True
 &nbsp; Debug.Print KeyValue
GetAppRegValue_End:
 &nbsp; Exit Function
GetAppRegValue_Err:
 &nbsp; MsgBox Error.Description, vbOKOnly Or vbExclamation, "YourAppName"
 &nbsp; Resume GetAppRegValue_End
End Function
</code></pre>
<h3>How to Update an Existing Item in the Registry</h3>
<p>
The following code will return a value from an existing item in the system registry: </p>
<pre><code>Function SetAppRegValue(WhatKey As String, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyDataType As Variant, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NewKeyValue As Variant) _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Boolean
 &nbsp; On Local Error GoTo SetAppRegValue_Err
 &nbsp; ' ***********************************************
 &nbsp; ' Declare local usage variables.
 &nbsp; ' ***********************************************
 &nbsp; Dim lResult As Long, dwResult As Long
 &nbsp; Dim dwType As Long, cbData As Long
 &nbsp; Dim varStrData As String, varLngData As Long
 &nbsp; Dim Msg As String
 &nbsp; ' ***********************************************
 &nbsp; ' Open the key for application's path.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_APP_KEYS_PATH, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, KEY_ALL_ACCESS, dwResult)
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; SetAppRegValue = False
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Opening Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key/Path=" &amp; REG_APP_KEYS_PATH &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo SetAppRegValue_End
 &nbsp; End If
 &nbsp; ' ***********************************************
 &nbsp; ' Set up passed variables and retrieve value.
 &nbsp; ' ***********************************************
 &nbsp; Select Case KeyDataType
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_SZ
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varStrData = NewKeyValue
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegSetValueEx(dwResult, WhatKey, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, KeyDataType, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal varStrData, Len(varStrData))
 &nbsp;&nbsp;&nbsp;&nbsp; Case REG_DWORD
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varLngData = CLng(NewKeyValue)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lResult = RegSetValueEx(dwResult, WhatKey, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal 0&amp;, KeyDataType, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varLngData, Len(varLngData))
 &nbsp; End Select
 &nbsp; If Not (lResult = ERROR_SUCCESS) Then
 &nbsp;&nbsp;&nbsp;&nbsp; SetAppRegValue = False
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = "Error Setting Registry Key Entry:" &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "Key=" &amp; WhatKey &amp; vbCrLf
 &nbsp;&nbsp;&nbsp;&nbsp; Msg = Msg &amp; "DLL Returned=" &amp; Format$(lResult)
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox Msg, vbOKOnly Or vbExclamation, "ODBC Registry"
 &nbsp;&nbsp;&nbsp;&nbsp; lResult = RegCloseKey(dwResult)
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo SetAppRegValue_End
 &nbsp; End If
 &nbsp; ' ***********************************************
 &nbsp; ' Close key.
 &nbsp; ' ***********************************************
 &nbsp; lResult = RegCloseKey(dwResult)
 &nbsp; SetAppRegValue = True
SetAppRegValue_End:
 &nbsp; Exit Function
SetAppRegValue_Err:
 &nbsp; MsgBox Error.Description, vbOKOnly Or vbExclamation, "YourAppName"
 &nbsp; Resume SetAppRegValue_End
End Function
</code></pre>
<h2>Putting the Functions Together</h2>
<p>
Once you have implemented these functions in your database or wizard, you can begin to use the capabilities to manipulate the registry. Take, for example, a routine that runs each time you load your database as part of the startup: </p>
<pre><code>Dim KeyValue As String
  
  ' *******************************************
  ' DSN name
  ' *******************************************
  If Not GetAppRegValue("DSN", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_SZ, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyValue, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False) Then
 &nbsp;&nbsp; 
 &nbsp;&nbsp; ' Not yet made, create.
 &nbsp;&nbsp; If Not CreateRegEntry(REG_SZ, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "DSN", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "My SQL Database") Then
 &nbsp;&nbsp;&nbsp;&nbsp; ' Error
 &nbsp;&nbsp; End If
  End If
</code></pre>
<p>
The code above tests whether a registry entry exists and, if not, creates that key with a default value. </p>
<p>
The path to store your registry entries should follow the convention of your company name and, specifically, the application name. These values are set as part of the constants in the General Declarations section of the code: </p>
<pre><code>Public Const AppReg = "MyAppName"
Private Const REG_APP_KEYS_PATH = "Software\MYApps\" &amp; AppReg
</code></pre>
<p>
This makes it easy to troubleshoot the registry. Keep in mind that the registry is a significant database; you need to make it as easy as possible to find your entries. </p>
<h3>How to Update Existing Entries</h3>
<p>
If you follow the convention, outlined previously, of executing the check for the existence of your registry keys upon application startup, you can be reasonably assured that you will be modifying existing entries in the registry. </p>
<p>
The following simple code captures the value entered in a text box and saves it: </p>
<pre><code>' Save DSN.
strSaveVal = Me!txtConfigLookups1
 &nbsp; If Not SetODBCRegValue("DSN", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REG_SZ, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strSaveVal) Then
 ' Error.
End If
</code></pre>
<h3>How to Delete Existing Entries</h3>
<p>
As a courtesy, you may want to consider a method to clean up the entries you have created in the registry. </p>
<p>
The following code deletes existing registry entries: </p>
<pre><code>' Delete your registry key.
If Not DeleteAllAppRegEntries() Then
 ' error
End If
</code></pre>
</BODY>
</HTML>

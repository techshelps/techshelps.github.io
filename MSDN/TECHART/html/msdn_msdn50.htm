<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 50: Using Drag and Drop in List Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn50"></a></sup>Tip 50: Using Drag and Drop in List Box Controls</h1>
<p>
Created: April 10, 1995</p>
<h2>Abstract</h2>
<p>
Many Windows®-based applications allow you to "drag" an item from one location on the screen to another and then "drop" the selected item in a new position. This technique is called drag and drop. Items can be dragged from one control to another, or even between two different Windows-based applications. This article explains how you can use the drag-and-drop technique to move individual items to new positions within a list box control.</p>
<h2>Moving Items Around in a List Box</h2>
<p>
The Windows <b>SendMessage</b> function can be used within a Visual Basic® application to simulate dragging and dropping items from one location to another within a List Box. This technique allows you to selectively sort the contents of a List Box in situations where the <b>Sorted</b> property cannot be used. In the demonstration program below, the height of each row in the List Box is used along with the <b>SendMesage</b> function to determine the new location for the selected item.</p>
<h2>Example Program</h2>
<p>
The following Visual Basic program lets you "drag and drop" an item in a List Box to another position within the same List Box. This, in effect, allows you to selectively sort the items in a List Box without using the <b>Sorted</b> property.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as one single line of text):<pre><code>Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal wMsg
 &nbsp; As Integer, ByVal wParam As Integer, lParam As Any) As Long
Const LB_GETTOPINDEX = &amp;H400 + 15
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp; Dim i As Integer
 &nbsp; Me.Show
 &nbsp; For i = 1 To 10
 &nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem "Item " &amp; i
 &nbsp; Next i
End Sub
</code></pre>
</li>
<li>
Add a List Box control to Form1. List1 is created by default.<br><br></li>
<li>
Add the following code to the MouseDown event for List1:<pre><code>Sub List1_MouseDown(Button As Integer, Shift As Integer, X As Single,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y As Single)
 &nbsp; Static SecondClick As Integer
 &nbsp; Static DropText As String
 &nbsp; Dim RowHeight As Single
 &nbsp; Dim TopI As Integer, InsertI As Single
 &nbsp; TopI = SendMessage(List1.hWnd, LB_GETTOPINDEX, 0&amp;, 0&amp;)
 &nbsp; RowHeight = TextHeight("X")
 &nbsp; InsertI = Y \ RowHeight
 &nbsp; If Button = 2 And DropText = "" And SecondClick = False Then
 &nbsp;&nbsp;&nbsp;&nbsp; List1.ListIndex = InsertI + TopI
 &nbsp;&nbsp;&nbsp;&nbsp; DropText = List1.Text
 &nbsp;&nbsp;&nbsp;&nbsp; MousePointer = 10
 &nbsp;&nbsp;&nbsp;&nbsp; SecondClick = True
 &nbsp;&nbsp;&nbsp;&nbsp; List1.RemoveItem InsertI + TopI
 &nbsp; ElseIf Button = 2 And Len(DropText) &gt; 2 And SecondClick = True Then
 &nbsp;&nbsp;&nbsp;&nbsp; If InsertI + TopI &lt; List1.ListCount - 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem DropText, InsertI + TopI
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem DropText, InsertI + TopI + 1
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; DropText = ""
 &nbsp;&nbsp;&nbsp;&nbsp; SecondClick = False
 &nbsp;&nbsp;&nbsp;&nbsp; MousePointer = 0
 &nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
When you execute this program, the List Box is filled with ten items. Using the right mouse button, click on an individual item in the List Box. The item you just clicked on is removed from the List Box. Move the mouse pointer to the position you want to move the selected item to and click the right mouse button a second time. The selected item is moved to the new position within the List Box.</p>
<h2>Additional References</h2>
<p>
Knowledge Base Q80187. "How to Drop Items into Specified Location in VB List Box." </p>
</BODY>
</HTML>

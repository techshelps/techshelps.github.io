<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Get Ready for the Year 2000</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_getready"></a></sup>Get Ready for the Year 2000</h1>
<p>
Nancy Winnick Cluts</p>
<p>
June 24, 1996</p>
<h2>Abstract</h2>
<p>
In a few years, we will be in the next century. When the auspicious date of January 1, 2000, comes upon us, will your application continue to function correctly? Will your application interpret that day as being January 1, 2000, or will your application interpret the date as January 1, 1900? (Before anyone jumps on that sentence, let me assure you that I realize that the current century doesn't actually end until December 31, 2000. The twenty-first century begins on January 1, 2001.) This article discusses the techniques you can use in your application to be ready for the year 2000.</p>
<h2>What's in a Date?</h2>
<p>
Question: To what year does the date 01/01/00 refer?</p>
<p>
Answer: 1900, 2000, 2100, and so forth.</p>
<p>
The screen shot in Figure 1 is from Microsoft® Schedule+. Notice that the year I specify in the date drop-down list box is 00. From the description, you can see that what I want to do is to set up an appointment for the first day of the year 2000.</p>
<p>
<img src="getready_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Setting an appointment in the year 2000</b></p>
<p>
After clicking the OK button in the dialog box shown in Figure 1, can you guess which year Schedule+ will choose for the appointment?</p>
<p>
<img src="getready_2.gif" border=0></p>
<p class=label>
<b>Figure 2. An appointment in the year 2000</b></p>
<p>
Well, Schedule+ assumes that any two-digit year number less than 80 (that is, before January 1, 1980) refers to a year that has a value equal to that particular year number plus 2000 (that is, 75 refers to 2075, not 1975). In other words, the dates supported within Schedule+ are January 1, 1980 through, December 31, 2079. As a result, I end up with the date that I want.</p>
<p>
The screen shot in Figure 3 is from the Date/Time Properties dialog box in Microsoft Windows® 95. Notice that the user is allowed a full four digits for the year. The Date/Time Properties dialog box supports dates from January 1980 to December 2099.</p>
<p>
<img src="getready_3.gif" border=0></p>
<p class=label>
<b>Figure 3. The Date/Time Properties dialog box</b></p>
<p>
I know that I'm going to get at least a couple of e-mail messages from smart alecks who are going to tell me that this solution does not cover years after December 31, 9999. I promise that if anyone is still running Windows 95 in that year and needs an update, I will personally fix it. (I'll be dead, of course, so it may be difficult to actually get the fix.) </p>
<h2>Year 2000 Issues</h2>
<p>
Microsoft products are designed to support dates well into the next century. Win32®, the API used for Windows 95 and Windows NT®, stores dates as a 16-bit field and is capable of storing dates for 119 years starting from 1980. This means that applications that use the Win32 format can support dates up to the year 2099. But just because Microsoft is ready doesn't mean that everyone is. For instance, historically, mainframe operating system date formats have not supported years up through the next century.</p>
<p>
When the user is allowed to enter dates in a format that allows only two digits (also known as a short date format) to specify the year (that is, in the <i>mm/dd/yy</i> configuration), it is impossible for a computer to tell the difference between a day in 1905 and 2005. Microsoft has been suggesting to software developers that applications should update their date assumptions by 1997 in such a way that dates into the twenty-first century are supported.</p>
<h2>Tools for Safe Dates</h2>
<p>
Microsoft provides development tools and database management systems that allow people to represent dates in many different ways. Recommendations for safe date formats include the following:
<ul type=disc>
<li>
Use the operating system run-time library's date format whenever possible.<br><br></li>
<li>
Use long dates (<i>mm/dd/yyyy</i>) when short dates (<i>mm/dd/yy</i>) may be misinterpreted as outside of the current century.<br><br></li>
<li>
If a development environment or database has a formal date format, use it.<br><br></li>
<li>
When creating a custom date format with a programming language, development tool, or database, use a date format that captures more than the last two digits of a year and test the code to ensure a smooth transition into the next century.<br><br></li>
<li>
Microsoft Systems Management Server, a part of the Microsoft BackOffice™ family, is valuable for rolling out patches that have been created for programs affected by date problems. Systems Management Server can be used to check for and inventory known defective modules, distribute and run test programs to search for problem modules, distribute fixes to problem systems, and remotely help users to install fixes or diagnose problems. Should users desire to upgrade to the latest version of their favorite products, Systems Management Server can handle the job at a savings in resources and expense.</li>
</ul>
<p>
When testing your applications for support of dates outside of the current century, also be sure to test:
<ul type=disc>
<li>
Windows-based systems that use a third party run-time library (that is, not Win32).<br><br></li>
<li>
Mainframe-based applications that are accessed from a PC.<br><br></li>
<li>
Custom-built application software, especially if it was developed for one company's use.</li>
</ul>
<h2>Microsoft's Products</h2>
<p>
The table below shows Microsoft products and the life expectancy of the date formats used for each one. Unless noted, Microsoft products rely on the system-supplied date formats.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=52%><b>Product Name</b></td>
<td class=label width=22%><b>Date Limit</b></td>
<td class=label width=26%><b>Date Format</b></td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Access 95 (assumed date)</td>
<td width=22%>1999</td>
<td width=26%>Short dates ("<i>yy</i>") </td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Access 95 (explicit date)</td>
<td width=22%>9999</td>
<td width=26%>Long dates ("<i>yyyy</i>")</td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Access (next major version)</td>
<td width=22%>2029</td>
<td width=26%>Short dates ("<i>yy</i>") </td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Excel 95</td>
<td width=22%>2019</td>
<td width=26%>Short dates ("<i>yy</i>") </td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Excel 95</td>
<td width=22%>2078</td>
<td width=26%>Long dates ("<i>yyyy</i>")</td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Excel (next major version)</td>
<td width=22%>2029</td>
<td width=26%>Short dates ("<i>yy</i>") </td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Excel (next major version)</td>
<td width=22%>9999</td>
<td width=26%>Long dates ("<i>yyyy</i>")</td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Project 95 (and previous versions)</td>
<td width=22%>2049</td>
<td width=26%>Short dates ("<i>yy</i>") </td>
</tr>
<tr valign=top>
<td width=52%>Microsoft SQL Server</td>
<td width=22%>9999</td>
<td width=26%><b>Datetime</b> function</td>
</tr>
<tr valign=top>
<td width=52%>MS-DOS® file system (FAT16)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%></td>
<td width=22%></td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=52%>Visual C++® run-time library</td>
<td width=22%>2038</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Microsoft Foundation Class Library (MFC)</td>
<td width=22%>2038 if using Ctime class<p>
9999 if using ColeDateTime class</p>
</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Visual FoxPro™</td>
<td width=22%>9999</td>
<td width=26%>Long dates ("<i>yyyy</i>")</td>
</tr>
<tr valign=top>
<td width=52%>Windows 3.<i>x</i> file system (FAT16)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows 95 file system (FAT16)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows 95 file system (FAT32)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows 95 run-time library (WIN32)</td>
<td width=22%>2099</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows for Workgroups (FAT16)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows NT file system (FAT16)</td>
<td width=22%>2108</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows NT file system (NTFS)</td>
<td width=22%>Future centuries</td>
<td width=26%>Not applicable</td>
</tr>
<tr valign=top>
<td width=52%>Windows NT run-time library (WIN32)</td>
<td width=22%>2099</td>
<td width=26%>Not applicable</td>
</tr>
</table><br>
<h2>Summary</h2>
<p>
The bottom line here is that we are coming to the close of the twentieth century. Your applications should be prepared to take this into account when displaying, altering, or storing date values. Using the Win32 built-in date functionality and Microsoft development tools can help you alleviate this problem. In addition, think about using Microsoft Systems Management Server to update large deployments of your software easily.</p>
</BODY>
</HTML>

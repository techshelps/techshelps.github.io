<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 142: Determining Whether the Operating System Supports Long File Names</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn142"></a></sup>Tip 142: Determining Whether the Operating System Supports Long File Names</h1>
<p>
August 6, 1995</p>
<h2>Abstract</h2>
<p>
While developing an application in Microsoft® Visual Basic®, you may need to allow your user to use long file names. This article explains how you can determine whether the operating system supports long file names.</p>
<h2>Using Long File Names in Windows 95</h2>
<p>
The Microsoft® Windows® 95 operating system lets you use long file names when creating directories and files. Under other operating systems, you might store your word processing files in a directory called C:\DOCS. Under Windows 95, however, you can specify the directory name as C:\Documents for Legal Department. Using long file names such as this can make your file system easier to navigate.</p>
<p>
To determine whether your current operating system supports long file names, you can use the <b>GetVolumeInformation</b> function in Visual Basic®. To use this function, include the following <b>Declare</b> statement in the General Declarations section of your project (note that the <b>Declare</b> statement must be typed as a single line of code):</p>
<pre><code>Private Declare Function GetVolumeInformation Lib "kernel32" Alias 
 &nbsp; "GetVolumeInformationA" (ByVal lpRootPathName As String, ByVal 
 &nbsp; lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, 
 &nbsp; lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, 
 &nbsp; lpFileSystemFlags As Long, ByVal lpFileSystemNameBuffer As String, 
 &nbsp; ByVal nFileSystemNameSize As Long) As Long
</code></pre>
<p>
The <b>GetVolumeInformation</b> function retrieves information about the disk and/or file system used on the specified disk drive. This function requires eight arguments, as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=37%><i>lpRootPathName</i></td>
<td width=63%>A string containing the name of the disk's root directory.</td>
</tr>
<tr valign=top>
<td width=37%><i>lpVolumeNameBuffer</i></td>
<td width=63%>A string that will hold the disk's volume name.</td>
</tr>
<tr valign=top>
<td width=37%><i>nVolumeNameSize</i></td>
<td width=63%>A long value containing the size of <i>lpVolumeNameBuffer</i>.</td>
</tr>
<tr valign=top>
<td width=37%><i>lpVolumeSerialNumber</i></td>
<td width=63%>A long value that will hold the volume serial number.</td>
</tr>
<tr valign=top>
<td width=37%><i>lpMaximumComponentLength</i></td>
<td width=63%>A long value containing the maximum length of a file name component.</td>
</tr>
<tr valign=top>
<td width=37%><i>lpFileSystemFlags</i></td>
<td width=63%>A long value containing the maximum length of a file name component. A combination of the following flags is used:</td>
</tr>
<tr valign=top>
<td width=37%>FS_CASE_IS_PRESERVED</td>
<td width=63%>File system preserves the case of file names when saved to disk.</td>
</tr>
<tr valign=top>
<td width=37%>FS_CASE_SENSITIVE</td>
<td width=63%>File system supports case-sensitive file names.</td>
</tr>
<tr valign=top>
<td width=37%>FS_UNICODE_STORED_ON_DISK</td>
<td width=63%>File system supports Unicode™ in file names.</td>
</tr>
<tr valign=top>
<td width=37%>FS_PERSISTENT_ACLS</td>
<td width=63%>File system preserves and enforces access control lists (ACLs).</td>
</tr>
<tr valign=top>
<td width=37%><i>lpFileSystemNameBuffer</i></td>
<td width=63%>A string to hold the file system's name (FAT, HPFS, or NTFS).</td>
</tr>
<tr valign=top>
<td width=37%><i>nFileSystemNameSize</i></td>
<td width=63%>A long value containing the length of <i>lpFileSystemNameBuffer</i>.</td>
</tr>
</table><br>
<p>
After the program calls the <b>GetVolumeInformation</b> function, a value of True is returned if the function was successful and all information about the disk/file system was retrieved. A value of False is returned if the function was not successful.</p>
<p>
After you have executed the <b>GetVolumeInformation</b> function, it returns the maximum component length of a file name. An ordinary MS-DOS® file name (such as COMMAND.COM) consists of eight characters followed by three characters. In this case, the value returned by <b>GetVolumeInformation</b> would be 8.3. If the operating system supports long file names, the value returned will be 255, regardless of the actual length of the file name.</p>
<h2>Example Program</h2>
<p>
This program shows how you can retrieve the volume name of a disk, and how to determine whether the operating system supports long file names.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statement to the General Declarations section of Form1 (note that this <b>Declare</b> statement must be typed as a single line of text):<pre><code>Private Declare Function GetVolumeInformation Lib "kernel32" Alias 
 &nbsp; "GetVolumeInformationA" (ByVal lpRootPathName As String, ByVal 
 &nbsp; lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, 
 &nbsp; lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, 
 &nbsp; lpFileSystemFlags As Long, ByVal lpFileSystemNameBuffer As String,
 &nbsp; ByVal nFileSystemNameSize As Long) As Long
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1.<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim nRet As Long
 &nbsp;&nbsp; Dim VolName As String
 &nbsp;&nbsp; Dim VolSN As Long
 &nbsp;&nbsp; Dim MaxCompLen As Long
 &nbsp;&nbsp; Dim VolFlags As Long
 &nbsp;&nbsp; Dim VolFileSys As String
 &nbsp;&nbsp; VolName = Space$(256)
 &nbsp;&nbsp; VolFileSys = Space$(256)
 &nbsp;&nbsp; nRet = GetVolumeInformation("C:\", VolName, Len(VolName), VolSN,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxCompLen, VolFlags, VolFileSys, Len(VolFileSys))
 &nbsp;&nbsp; text1.Text = VolName
 &nbsp;&nbsp; If MaxCompLen = 255 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text2.Text = "Long file names are supported"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text2.Text = "Long file names are NOT supported"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the command button. The disk's volume name is displayed in the first text box<b>.</b> A message is displayed in the second text box if long file names are supported.</p>
<h2>Additional Reference</h2>
<p>
"GetVolumeInformation." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

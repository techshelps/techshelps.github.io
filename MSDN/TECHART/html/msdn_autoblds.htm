<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Automated Builds in Visual Studio, or the Night Build Scenario</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_autoblds"></a></sup>Automated Builds in Visual Studio, or the Night Build Scenario </h1>
<p>
Microsoft Corporation</p>
<p>
April 1, 1997</p>
<h2>Introduction</h2>
<p>
An automated build is a project build in Visual Studio™ that can be scheduled to start at a specific time, like late at night, and finish by itself. In the add-in sample provided for automated builds, the build log can be emailed to the person of your choice. You can use an automated build for the debug, release or both configurations of your project, or you can build multiple projects. </p>
<p>
There are four ways to automate the build process: 
<ol>
<li>
Use or modify the AutoBuild add-in supplied with Visual Studio <br><br></li>
<li>
Create a VBScript macro for Visual Studio <br><br></li>
<li>
Export a makefile and use NMAKE <br><br></li>
<li>
Open MSDev as an Automation object and remotely handle the build</li>
</ol>
<p>
This article focuses on the first two options, building with the add-in or with a VBScript macro, examples of which are provided here. The other two options, exporting a makefile and opening MSDev as an object, are beyond the scope of this paper. </p>
<h2>Comparison of Add-ins and VBScript Macros</h2>
<p>
An add-in is an in-process ActiveX™ component (DLL) written in any programming language (that supports ActiveX), such as Visual C++® or Visual Basic®, whereas a VBScript macro is written in the Visual Basic Scripting Edition (VBScript) language. An add-in must be coded in that language, compiled into a DLL, and then installed in Visual Studio, but a VBScript macro can be created by recording the macro as well as by typing the macro in an editor. </p>
<p>
An add-in can access all the local computer resources as well as the object model. The VBScript macros are limited to the Developer Studio™ object model. An add-in can control another application (.EXE) easily, but a VBScript macro can only control another application that is signed and safe, like the typical Web control. An add-in can use the Windows® API to directly read from or write to files on disk (a VBScript macro can access files but not through the API). </p>
<p>
For more on the differences between an add-in and a VBScript macro, see the topic "Differences Between VBScript Macros and Developer Studio Add-ins" (MSDN Library, Visual C++ Documentation, Developer Studio Environment User’s Guide, Automating Tasks in Developer Studio, VBScript Macros). </p>
<h2>Loading and Setting Up the AutoBuild Add-In Sample</h2>
<p>
Visual Studio includes samples of add-ins to use or modify, including a sample that automates a build process, AutoBuild. This builds a Visual C++ or Visual J++™ project at a specified time. When the build is done, AutoBuild emails the specified user with the name of the configuration and the number of warnings or errors. You can find and copy AutoBuild to your local drive by searching the online documentation for "AutoBld," or by looking up the topic "Copying the Sample Add-ins" (MSDN Library, Visual C++ Documentation, Developer Studio Environment User’s Guide, Automating Tasks in Developer Studio, Developer Studio Add-ins). </p>
<p>
Optionally, you can generate a build log file (*.PLG file). Any time a build occurs, the .PLG file is overwritten with the latest information. For multiple builds, save or move the .PLG file before starting the next release or debug build. The .PLG file is stored in the project directory that you build. </p>
<p>
<b>To set up the AutoBuild add-in, follow these steps: </b>
<ol>
<li>
Copy the AutoBuild add-in to your local drive from the MSDN documentation. <br><br></li>
<li>
Build and enable AutoBuild in Visual Studio. <br><br></li>
<li>
Run AutoBuild in Windows 95<p class=tl>
or</P><p class=tl>
Run AutoBuild in Windows NT 4.0. </P></li>
</ol>
<p>
<b>To copy the AutoBuild add-in to your local computer: </b>
<ol>
<li>
Start Visual Studio and click the InfoView tab. Navigate to the Developer Studio Environment User’s Guide, then select Automating Tasks in Developer Studio, then Developer Studio Add-ins, then click Copying the Sample Add-ins. <br><br></li>
<li>
You should now be at the topic entitled "Using the Sample Add-ins." Click the sample AutoBld to copy that add-in to your computer. </li>
</ol>
<p>
<b>To build and enable the AutoBuild add-in: </b>
<ol>
<li>
After copying the add-in, click Open and open the file autobld.dsw. The default location of this file is \DevStudio\samples\src\DSSample\AddIns\AutoBld. <br><br></li>
<li>
On the Build menu, click Build AutoBld.dll. <br><br></li>
<li>
When the build is done, select the Tools menu and click Customize. Click the Add-ins and Macro Files tab. <br><br></li>
<li>
Click the Browse button. <br><br></li>
<li>
Choose Add-ins (dll) from the File Type as box or open the Debug folder in the AutoBld directory. Click Open.</li>
</ol>
<p>
<b>To run AutoBuild in Visual Studio using Windows® 95 (Microsoft Plus! required): </b>
<ol>
<li>
Start Visual Studio and disable the Tip of the Day dialog box. <br><br></li>
<li>
Click the Configure button on the AutoBuild toolbar. Set your preferences in the AutoBuild Configuration dialog box. <br><br></li>
<li>
Click Workspaces to Build and click Add to add your preferences. <br><br></li>
<li>
Click the System Agent on the Windows 95 taskbar. The System Agent appears next to the clock in the status area on the taskbar. This is only visible if you have Microsoft Plus! installed. <br><br></li>
<li>
On the Program menu, click Schedule a New Program. <br><br></li>
<li>
In the Program text box, type: <p class=tl>
msdev -execute AutoBuild </P></li>
<li>
Set the times and days for AutoBuild to run. Set any other preferences and then click OK.</li>
</ol>
<p>
<b>To run AutoBuild in Visual Studio using Windows NT® 4.0: </b>
<ol>
<li>
Start Visual Studio and disable the Tip of the Day dialog box. <br><br></li>
<li>
Click the Configure button on the AutoBuild toolbar. Set your preferences in the AutoBuild Configuration dialog box. <br><br></li>
<li>
Click Workspaces to Build and click Add to add your preferences. <br><br></li>
<li>
On the Windows NT taskbar, click Start and click Settings. Open the Control Panel and click Services. <br><br></li>
<li>
Find the Schedule agent in the list box and confirm that the Schedule shows a status of "Started" and its Startup status is set to "Automatic." <br><br></li>
<li>
If the status of the Schedule agent is not "Started," highlight the Schedule agent and click the Start button. If the Schedule agent is not set to "Automatic," click the Startup button and select Automatic from the Startup Type field in the Service dialog box. <br><br></li>
<li>
From a command prompt, use the "at" utility to set the time and date you wish to build your projects. For example (assuming that msdev.exe is on your path): <pre><code>msdev –execute AutoBuild 
</code></pre>
</li>
</ol>
<p>
This will launch the Developer Studio environment and execute the AutoBuild command, which starts the build of your projects. </p>
<p>
To get help on the “at” utility, type "at ?" at the command line. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must disable the Tip of the Day dialog box in Visual Studio before activating any add-ins, such as AutoBuild, from the command line. </p>
<p>
For more information on add-ins in Visual Studio, look up the topic "Overview: Developer Studio Add-ins" (MSDN Library, Visual C++ Documentation, Developer Studio Environment User’s Guide, Automating Tasks in Developer Studio, Developer Studio Add-ins). </p>
<h2>Installing and Editing the VBScript Macro, DoAllFire</h2>
<p>
A VBScript macro provides another method of doing a scheduled build. There are two ways to create a VBScript macro: record one in the Visual Studio environment, or type one in as a macro file (a .DSM file). VBScript macro files can contain more than one macro. The sample VBScript macro included here, DoAllFire, builds everything in the workspace. The macro script includes code that will build just the release or debug configurations. You can easily modify the DoAllFire macro to contain your own projects and workspaces and build everything or just the configurations and files you wish. </p>
<p>
<b>To install the DoAllFire macro file, Buildsam.dsm: </b>
<ol>
<li>
Copy the macro file, Buildsam.dsm, to your computer. You can either download the macro file to your local hard drive or print the macro and type it into Visual Studio by hand, saving it as a macro file. If you download the macro file, save the file in the Macros subdirectory of the DevStudio directory (to avoiding searching for the file later). You can download the macro file by right clicking the link to Buildsam.dsm and choosing "Save Target As" in Microsoft Internet Explorer or "Save Link As" in Netscape Navigator. <br><br></li>
<li>
On the Tools menu in Visual Studio, click Customize. <br><br></li>
<li>
Click the Add-ins and Macro Files tab. The file Buildsam.dsm should appear in the window. If the file does not appear, click the Browse button to locate the file. <br><br></li>
<li>
Load Buildsam.dsm by selecting the check box next to its name. This check mark also directs the development environment to load the file automatically when you start the environment again. </li>
</ol>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;If you remove the check mark next to a macro file name, you unload it. When you unload it, all of the macros in the file lose their toolbar and keystroke assignments. </p>
<p>
<b>To edit a VBScript macro: </b>
<ol>
<li>
On the Tools menu, click Macro. <br><br></li>
<li>
In the Macro File box, select Buildsam.dsm, which contains the macro you wish to edit. If Buildsam.dsm is not in the list, first install the file, then select it in the Macro File box. <br><br></li>
<li>
In the Macro File box, select the VBScript macro, DoAllFire, that you wish to edit. <br><br></li>
<li>
Click the Edit button. <br><br></li>
<li>
Make the appropriate changes. <br><br></li>
<li>
Save the macro. </li>
</ol>
<p>
<b>Running the VBScript Macro, DoAllFire:</b></p>
<p>
After installing the VBScript macro, you can run the macro DoAllFire in the file Buildsam.dsm. You can run macros from toolbar buttons or key sequences assigned to the macros, from the Macros dialog box, or from the command line. For more information on the first two methods, see the topic "Running VBScript Macros" (MSDN Library, Visual C++ Documentation, Developer Studio Environment User’s Guide, Automating Tasks in Developer Studio, Developer Studio VBScript Macros). </p>
<p>
<b>To run a macro from the command line: </b>
<ol>
<li>
Disable the Tip of the Day dialog box in Visual Studio. <br><br></li>
<li>
At the command line, type: <pre><code>msdev -ex DoAllFire 
</code></pre>
</li>
</ol>
<p>
DoAllFire is the name of the macro. This syntax starts the Developer Studio environment, and after the main window appears, the macro starts running. </p>
<p>
If you want Visual Studio to shut down after the build is complete, edit the macro so that it calls the Application’s object Quit method. </p>
<p>
<b>To automate a macro on a schedule (with Windows 95): </b>
<ol>
<li>
Disable the Tip of the Day dialog box in Visual Studio. <br><br></li>
<li>
Click the System Agent on the Windows 95 taskbar. The System Agent appears next to the clock in the status area on the taskbar. This is only visible if you have Microsoft Plus! installed. <br><br></li>
<li>
On the Program menu, click Schedule a New Program. <br><br></li>
<li>
In the Program text box, type: <p class=tl>
<b>msdev -ex DoAllFire </b></P></li>
<li>
Set the times and days for DoAllFire to run. Set any other preferences and then click OK. </li>
</ol>
<p>
<b>To automate a macro on a schedule (with Windows NT): </b>
<ol>
<li>
Disable the Tip of the Day dialog box in Visual Studio. <br><br></li>
<li>
On the Windows NT taskbar, click Start and click Settings. Open the Control Panel and click Services. <br><br></li>
<li>
Find the Schedule agent in the list box and confirm that the Schedule shows a status of "Started" and that its Startup status is set to "Automatic." <br><br></li>
<li>
If the status of the Schedule agent is not "Started," highlight the Schedule agent and click the Start button. If the Schedule agent is not set to "Automatic," click the Startup button and select Automatic from the Startup Type field in the Service dialog box. <br><br></li>
<li>
From a command prompt, use the “at” utility to set the time and date you wish to build your projects. For example (assuming that msdev.exe is on your path): <pre><code>msdev -ex DoAllFire 
</code></pre>
</li>
</ol>
<p>
This will launch the Developer Studio environment and execute the AutoBuild command, which starts the build of your projects. </p>
<p>
To get help on the “at” utility, type "at ?" at the command line. For example, to run the macro "DoAllFire" at 1:00 AM, use the command: </p>
<pre><code>AT 1:00am "msdev -ex DoAllFire" 
</code></pre>
<p>
<b>To debug a VBScript macro: </b>
<ul type=disc>
<li>
Use the PrintToOutputWindow method to print diagnostic messages or values of variables at various points in the macro.<br><br></li>
<li>
Use the VBScript MsgBox command to halt the macro so that you can inspect the messages printed with PrintToOutputWindow or MsgBox. When you are ready to continue the macro, close the message box. </li>
</ul>
<p>
For more information on add-ins in Visual Studio, look up the topic "Overview: Developer Studio VBScript Macros" (MSDN Library, Visual C++ Documentation, Developer Studio Environment User’s Guide, Automating Tasks in Developer Studio, Developer Studio VBScript Macros). </p>
</BODY>
</HTML>

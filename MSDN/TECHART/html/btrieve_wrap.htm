<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Wrapper DLL</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="btrieve_wrap"></a>The Wrapper DLL</h1>
<p>
A wrapper DLL is a dynamic link library that intercepts external library function calls made in an application. After a function call has been intercepted, the DLL has control of the application or process that instantiated it. The DLL can be designed to perform any task, set of tasks, or do nothing at all. Taking control of the instantiating application or process in this manner provides an efficient way to add, change, or remove functionality or scope without the burden of modifying the source code of the calling process or application.</p>
<p>
For example, in the case of this conversion strategy, you can intercept Btrieve calls made in an application and change them to use ODBC to access Microsoft SQL Server instead of Btrieve itself. This technique allows the base application code to remain intact while the scope and/or targets of the operation change. This preserves the investment made in the base application code while seamlessly extending its capabilities to access SQL&nbsp;Server data.</p>
<p>
Another methodology would be to create the wrapper DLL so that it retrieves data from SQL Server into buffers that it maintains on the client or another computer. Using this strategy, the application would then fetch data from the buffers instead of SQL Server directly using ISAM-like processing techniques. While this implementation allows the base application to access SQL Server without modification, it is complex and and can be difficult to implement. It is best suited for those instances when you do not want to use set operations or to develop a full ODBC- and SQL-based application. This methodology will not be discussed in the context of the conversion strategy presented in this paper.</p>
<h3>Creating the Wrapper DLL</h3>
<p>
The wrapper DLL is designed to intercept Btrieve calls made in the base application and change them to use ODBC to access Microsoft SQL Server instead of Btrieve itself.</p>
<h4>Determining the Functions That Must Be Wrapped</h4>
<p>
The wrapper DLL must cover the functions that the base application imports from the Btrieve library Wbtrv32.dll. You can determine these imports by using a binary file dumping utility to list the functions imported from the various external link libraries that the application references. The Microsoft Visual C++ equivalent is called Dumpbin.exe.</p>
<p>
For example, the following samples list output excerpts from using the /IMPORTS switch of the DUMPBIN utility to determine the Btrieve functions imported from Wbtrv32.dll, and the /EXPORTS switch to determine the functions exported by Wbtrv32.dll.</p>
<pre><code>DUMPBIN /IMPORTS BTRVAPP.EXE
Microsoft (R) COFF Binary File Dumper Version 4.20.6164
Copyright (C) Microsoft Corp 1992-1997. All rights reserved.

Dump of file BTRVAPP.EXE
File Type: EXECUTABLE IMAGE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Section contains the following Imports:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wbtrv32.dll
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ordinal&nbsp;&nbsp;&nbsp;&nbsp; 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ordinal&nbsp;&nbsp;&nbsp;&nbsp; 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ordinal&nbsp;&nbsp;&nbsp;&nbsp; 1

DUMPBIN /EXPORTS WBTRV32.DLL
Microsoft (R) COFF Binary File Dumper Version 4.20.6164
Copyright (C) Microsoft Corp 1992-1997. All rights reserved.

Dump of file wbtrv32.dll
File Type: DLL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Section contains the following Exports for wbtrv32.dll
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 characteristics
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 31D30571 time date stamp Thu Jun 27 15:04:33 1996
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.00 version
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 ordinal base
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10 number of functions
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10 number of names

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ordinal hint&nbsp;&nbsp; name

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp; BTRCALL&nbsp; (000014EC)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; BTRCALLBACK&nbsp; (00003799)fs
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; BTRCALLID&nbsp; (00001561)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; DBUGetInfo&nbsp; (00008600)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; DBUSetInfo&nbsp; (000089E8)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; WBRQSHELLINIT&nbsp; (00002090)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; WBSHELLINIT&nbsp; (00002A6A)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; WBTRVIDSTOP&nbsp; (00001812)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; WBTRVINIT&nbsp; (00002A4F)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; WBTRVSTOP&nbsp; (000017D2)
</code></pre>
<p>
The information presented in these output excerpts is used to create the definition file for the wrapper DLL. Performing these tasks allows you to implement only the exported functions from Wbtrv32.dll that are used by the base application in the wrapper DLL. This eliminates the need to implement exported functions that are never used by the base application.</p>
<h4>Creating a DEF File for the Wrapper DLL Function Mapping </h4>
<p>
After the Btrieve import functions in the base application have been determined, the next step is to map these functions to export functions in the wrapper DLL. The mapping is performed through the use of a definition file for our wrapper DLL. The definition is created using the following steps:
<ol>
<li>
Use DUMPBIN /IMPORTS <i>application_file_name</i> to obtain the list of imported symbols for Wbtrv32.dll. Based on the preceding sample output, the function symbols in Btrvapp.exe imported from Wbtrv32.dll are ordinals 3, 2, and 1.<br><br></li>
<li>
Use DUMPBIN /EXPORTS <i>DLL_file_name</i> to obtain the list of exported symbols for the DLL in question. The symbols appear in the "name" column of the table whose headings are "ordinal," "hint," and "name." In the example, these correspond to BTRCALL, BTRCALLID, and WBRQSHELLINIT.<br><br></li>
<li>
Create a DEF file that contains an EXPORTS section with the names of the functions listed in the "name" column of the DUMPBIN output.</li>
</ol>
<p>
The exact import/export combination will vary depending on what Btrieve functionality is used in the base application. </p>
<h4>Implementing the Btrieve Functions within the Wrapper</h4>
<p>
The next step is to develop the basic framework within the wrapper so that all of the Btrieve operations are implemented properly. Most of the Btrieve operations will be performed using the BTRCALL and BTRCALLID. Their equivalent functions within the wrapper must be designed to address the operations used by the base applications. Each of these functions will have all of the data necessary to perform the operations by using the input parameters they receive.</p>
<p>
The most important parameters will be the posBlock, operation, dataBuffer, keyBuffer, and ckeynum parameters. The posBlock parameter is discussed in "Addressing the Btrieve posBlock Handle" that follows. The operation parameter designates what operation is to be performed. The contents of the other parameters will be dependent on the operation being performed. You must use these parameters in the same way they would be used if the function was being processed by Btrieve. The following code fragment shows how the B_GET_EQUAL operation is handled by the BTRCALL function within Mybtrv32.dll:</p>
<pre><code>DllExport int __stdcall BTRCALL (BTI_WORD operation, BTI_VOID_PTR posBlock,
BTI_VOID_PTR dataBuffer, BTI_ULONG_PTR dataLen32,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BTI_VOID_PTR keyBuffer, BTI_BYTE keyLength, BTI_CHAR ckeynum)
{
SQLRETURN rc;&nbsp;&nbsp;&nbsp; // Btrieve operation return code

/*Perform tasks based on operation used in the calling application */
switch(operation){

case B_GET_EQUAL:
// Get the first Title-Publisher record that matches the search
// criteria
if (!strcmp(posBlock, "titlepub.btr")){//Are we accessing title-publisher info
rc = GetTitlePublisher(henv1, hdbc1, hstmt, B_GET_EQUAL, ckeynum,keyBuffer);
if (rc != B_NO_ERROR)
 &nbsp;&nbsp;&nbsp;&nbsp; return rc;

//Copy title-publisher data to titlepub record structure tpRec
memcpy(dataBuffer, &amp;tpRec, sizeof(tpRec));
}
else {&nbsp;&nbsp; // Accessing sales info
rc=GetSales(henv1, hdbc2, hstmt2, B_GET_EQUAL, keyBuffer);
 &nbsp; if (rc != B_NO_ERROR)
return rc;

//Copy sales data to sales record structure salesRec
memcpy(dataBuffer, &amp;salesRec, sizeof(salesRec));
}
break;
</code></pre>
<p>
The preceding code fragment determines the target SQL Server table. The target table is set by examining the posBlock parameter by using the strategy outlined in "Translating Btrieve Calls to ODBC and SQL Using the Wrapper" that follows. After the target has been determined, a function is called to retrieve the first data record that matches the keyBuffer and ckeynum values from the appropriate SQL Server cursor. The same methodology is used throughout the wrapper DLL. Figure 2 shows the wrapper DLL concept.</p>
<p>
<img src="btrieve02.gif" border=0></p>
<p class=label>
<b>Figure 2. The wrapper</b></p>
<p>
In Figure 2, the base application, Btrvapp.exe, makes a request for the title and publisher information for TitleID <i>BU1032</i>. While processing this request, the application calls the Btrieve function BTRCALL to get the next record from the Titlepub.btr file. The wrapper DLL is designed to mimic the functionality of this function while accessing SQL&nbsp;Server data instead. It examines the opcode parameter and then performs the appropriate ODBC and SQL operations needed to satisfy the request. In this case, the wrapper will make ODBC and SQL calls to retrieve the record for TitleID <i>BU1032</i> from the <i>titlepub</i> table in the database. After the data is received, it returns the data to the base application using the record data buffer passed as part of the original BTRCALL function call.</p>
<h4>Accessing the Wrapper DLL in the base application</h4>
<p>
After the wrapper DLL has been completed, the next step is to get the base application to reference the wrapper DLL instead of the Btrieve DLL. This step is easy. Link the application with the wrapper DLL and ODBC library files (LIB) rather than with the Btrieve library file. Recompilation of the base code is not necessary. After the linking process has been completed, the base application will access SQL Server and not the Btrieve microkernel.</p>
<h3>Translating Btrieve Calls to ODBC and SQL Using the Wrapper</h3>
<p>
The base application, Btrvapp.exe, can now use the wrapper DLL to access Microsoft SQL Server data. Essentially, the wrapper makes SQL Server look like Btrieve to Btrvapp.exe. How to use ODBC and SQL to access SQL Server data within the scope of the wrapper DLL is the next stage to consider. The wrapper is designed to use ISAM processing techniques to access SQL&nbsp;Server, which will be familiar to a Btrieve developer. The implementation successfully accesses SQL Server data without making changes in the base application code. However, why these design techniques are not optimal will be discussed later in this paper. </p>
<h4>Addressing the Btrieve posBlock handle</h4>
<p>
The second parameter passed to BTRCALL and BTRCALLID is posBlock. In the Btrieve environment, this is a unique area of memory associated with each open file that contains logical positional information for accessing records. The Btrieve libraries initialize and use this memory area to perform data functions. The Btrieve application itself does not know about the contents of the posBlock. It simply passes a pointer to this posBlock into every Btrieve call that accesses the same data file.</p>
<p>
Because the wrapper DLL doesn't need to maintain any Btrieve-specific data within the posBlock, it is free to use this memory area for its own purposes. Within the example wrapper, this will be the unique identifier that identifies what SQL Server data is affected by the requested operation. The contents of the posBlock maintained within the wrapper DLL implementation are not important as long as each memory block is unique to each corresponding SQL Server table set.</p>
<p>
For example, Btrvapp.exe references two Btrieve files, Sales.btr and Titlepub.btr, where Sales.btr contains sales information for each title and Titlepub.btr maintains the title and publisher for each title. These files correspond to the <i>bsales</i> and <i>titlepublishers</i> tables that were created in the <i>pubs</i> database by the Morepubs.sql script that is part of the sample applications for this paper. In Btrvapp.exe, the B_OPEN operation opens the requested Btrieve file and creates its respective posBlock.</p>
<p>
In the wrapper, the same posBlock will from this point forward reference a particular table by name. The wrapper DLL can be designed to store any form of a unique identifier that represents the SQL Server data that it accesses. Table names are used in the context of this migration strategy for ease of presentation. The keybuffer parameter contains the file name of the Btrieve file to be opened when B_OPEN is called. The wrapper DLL implementation of the B_OPEN function sets the posBlock equal to this file or table name. The following code fragment, taken from the wrapper DLL B_OPEN implementation (see source file Mybtrv32.c for more details), demonstrates this concept:</p>
<pre><code>/*Step1:*/
if (strlen((BTI_CHAR *) keyBuffer) &lt;= MAX_POSBLOCK_LEN)
memcpy((BTI_CHAR *) posBlock, (BTI_CHAR *) keyBuffer,&nbsp; keyLength);
else&nbsp;&nbsp; 
memcpy((BTI_CHAR *) posBlock, (BTI_CHAR* ) keyBuffer,
MAX_POSBLOCK_LEN -1);
</code></pre>
<p>
In the example, the Sales.btr posBlock is set to "Sales.btr" and the Titlepub.btr posBlock is set to "Titlepub.btr." Btrvapp.exe will always know what Microsoft SQL Server table set is being referenced based on the file name referenced in the posBlock. </p>
<p>
The same data record structure formats will be used in both the base application and the wrapper DLL. This will allow the wrapper DLL to transport record data between SQL Server and Btrvapp.exe in the same format as if the data was coming from Btrieve. The data record structures used in Btrvapp.exe and Mybtrv32.dll are presented in the following example. For further details, see Btrvapp.c and Mybtrv32.c.</p>
<pre><code>/************************************************************
 &nbsp; Data Record Structure Type Definitions
************************************************************/
// titlepub record structure
struct{
 &nbsp; char&nbsp;&nbsp; TitleID[7];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; Title[81];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; Type[13];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; PubID[5];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; float&nbsp;&nbsp; Price;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // money
 &nbsp; float&nbsp;&nbsp; Advance;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // money
 &nbsp; int&nbsp;&nbsp; Royalty;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // integer
 &nbsp; int&nbsp;&nbsp; YTD_Sales;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // integer
 &nbsp; char&nbsp;&nbsp; PubName[41];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; City[21];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; State[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; Country[31];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
}tpRec;

// sales record structure
struct
{
 &nbsp; char&nbsp;&nbsp; StorID[5];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; TitleID[7];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; char&nbsp;&nbsp; OrdNum[21];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // string
 &nbsp; int&nbsp;&nbsp; Qty;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // integer
 &nbsp; char&nbsp;&nbsp; PayTerms[13];&nbsp;&nbsp;&nbsp;&nbsp; // string
}salesRec;
</code></pre>
<h4>Establishing the ODBC connections and initializing data access</h4>
<p>
Within the sample wrapper implementation, the B_OPEN operation establishes a connection to SQL Server for each table set referenced by the base application Btrvapp.exe. The operation also creates and opens the cursors used to reference the SQL Server data tables. The cursors are opened on the entire table without any WHERE clauses to restrict the number of rows returned. These connections and cursors will be used throughout Mybtrv32.dll to reference the SQL&nbsp;Server tables. To avoid the time and processing overhead associated with making or breaking connections to the server, the connections are not terminated until the application is closed.</p>
<p>
The connection and cursor implementation mentioned in the previous paragraph was chosen for two reasons. First, because it simulates the way a normal Btrieve application would access a Btrieve file, one posBlock for every open file referenced by the application. The second reason is to demonstrate inefficient use of connection management when accessing SQL&nbsp;Server. Only one connection is needed in the context of this wrapper implementation because multiple server cursors can be opened and fetched concurrently on a single connection. Thus, the second connection is only providing overhead within the application. A more optimal connection management methodology would be to use only single connection with multiple cursors opened on that connection.</p>
<h4>ODBC and SQL implementation within the Wrapper</h4>
<p>
There are many different techniques to use ODBC and SQL to access SQL Server data. The wrapper Mybtrv32.dll uses server-side cursors. Cursors were chosen for several reasons:
<ul type=disc>
<li>
They are accessed similar to the way that Btrieve files are accessed (for example, through the use of Fetch/Get First/Next).<br><br></li>
<li>
To demonstrate the use of ISAM-like row-at-a-time processing and positioned updating of SQL Server data.<br><br></li>
<li>
To demonstrate the difference between the row-at-a-time processing model and the default result set processing model used in the Odbcapp.exe sample application.</li>
</ul>
<p>
Each Btrieve operation that is performed in the base application is ported to an ODBC and SQL equivalent within the wrapper DLL. Some of the operations, like the B_SET_DIR operation, are not applicable to the SQL Server environment and do nothing within the wrapper DLL. Optimal implementation strategies of ODBC and SQL for both the wrapper DLL and the final application port are discussed in "Converting the Application to ODBC and SQL" that follows.</p>
<h4>Error handling</h4>
<p>
The wrapper DLL must use Btrieve return codes when exiting each function. Each wrapper function must return B_NO_ERROR or a Btrieve error code corresponding to the type of error that was encountered. The return codes must be identical. As a result, the base application code does not know that the library function it is using is accessing SQL&nbsp;Server instead of Btrieve. You must return the Btrieve return codes that are expected by the base application in order for the wrapper DLL to work properly.</p>
<p>
However, there is not a direct mapping of Microsoft SQL Server to Btrieve error codes. You must translate all SQL Server errors encountered in the ODBC code of the wrapper DLL to a Btrieve return code equivalent. The following example taken from the <b>MakeConn</b> function in the wrapper DLL source file Mybtrv32.c demonstrates this concept.</p>
<pre><code>// Allocate a connection handle, set login timeout to 5 seconds, and
// connect to SQL Server
 &nbsp; rc = SQLAllocHandle(SQL_HANDLE_DBC, henv, hdbc);

// Set login timeout
 &nbsp; if (rc == SQL_SUCCESS || rc == SQL_SUCCESS_WITH_INFO) 
 &nbsp;&nbsp;&nbsp;&nbsp; rc=SQLSetConnectAttr(*hdbc, SQL_LOGIN_TIMEOUT,(SQLPOINTER)5, 0);
 &nbsp; else{
 &nbsp; // An error has been encountered: notify the user and return
 &nbsp;&nbsp;&nbsp;&nbsp; ErrorDump("SQLAllocHandle HDBC", SQL_NULL_HENV, *hdbc,
SQL_NULL_HSTMT);
return B_UNRECOVERABLE_ERROR;
}
</code></pre>
<p>
The preceding code fragment allocates a connection handle for use in the wrapper DLL. If an error is encountered the SQL Server code must be mapped to a Btrieve error code. Because Btrieve doesn't involve the concept of connection handles, there is no corresponding error code. Therefore, you must choose a Btrieve return code that closely matches the severity or context of the message. Because a handle is critical for the application, the Btrieve return code <i>B_UNRECOVERABLE_ERROR</i> was used in the example. You can choose any Btrieve return code provided that the base application is designed to address it.</p>
</BODY>
</HTML>

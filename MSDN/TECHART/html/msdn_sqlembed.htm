<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Embedding Microsoft SQL Server in Your Application</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_sqlembed"></a>Embedding Microsoft SQL Server in Your Application</h1>
<p>
Matt Domo<br>
Microsoft Corporation</p>
<p>
August 1997</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5184">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the sample files associated with this technical article.</a></p>
<h3><a name="sqlembed_intro"></a>Introduction</h3>
<p>
This paper provides a blueprint for embedding Microsoft® SQL Server™ administration features in an application. By automating and embedding system administration tasks, you can assume administration responsibilities. As a result, many tasks usually performed by a database or system administrator can be minimized or eliminated in the end user's application environment. There are six areas of administration that must be addressed to successfully deploy SQL Server in an unattended environment:
<ul type=disc>
<li>
Installation<br><br></li>
<li>
Configuration and performance tuning<br><br></li>
<li>
Backup and recovery<br><br></li>
<li>
System maintenance (index and object creation, database consistency checking)<br><br></li>
<li>
System monitoring<br><br></li>
<li>
Security</li>
</ul>
<p>
This paper covers each of these basic administrative tasks. It provides a background description and an example of how the task can be performed within the scope of the application system. Using the methodology defined in this paper, you can deploy SQL Server in an unattended environment.</p>
<h3>Why Embed Microsoft SQL Server?</h3>
<p>
Microsoft SQL Server is a powerful and flexible relational database management system (RDBMS). SQL Server's features and capabilities allow it to be used in a wide variety of situations and end-user environments. Traditionally, a system or database administrator has been required to monitor and optimize SQL Server's performance in an end user's environment. However, because of time, planning, or resource constraints, finding a person to address these matters may be difficult. Therefore, embedding SQL Server administration functionality within your application offers several distinct advantages:
<ul type=disc>
<li>
Simplifies sale and installation of SQL Server for your customer. Ensures that the customer sees only your application, thereby alleviating the need for a database or system administrator<br><br></li>
<li>
Lowers support and maintenance costs<br><br></li>
<li>
Most importantly, reduces the DBMS overhead that your customer must undertake after your application is installed and reduces the need for overall SQL Server knowledge to install, configure, and operate your application system successfully</li>
</ul>
<h3>Development and Application Platforms</h3>
<p>
For clarity and ease of presentation, the reference development and application platforms are assumed to be Microsoft Visual C++®, Microsoft Visual Basic ®, Microsoft Windows NT®, and Microsoft Windows® 95. The function and DLL references throughout this document reflect this assumption. However, these techniques can also be applied to other compilers that create Microsoft Windows applications.</p>
<h3>Sample Application and Code References</h3>
<p>
The following sample applications and code samples are referenced and included with this paper.</p>
<h4>Setupini.exe</h4>
<p>
Setupini.exe is a sample Visual Basic application that performs an installation for a fictitious application called XYZ. The application performs an unattended installation of SQL Server and creates the application database and database objects. The program:
<ul type=disc>
<li>
Performs unattended installation of SQL Server using a setup initialization file.<br><br></li>
<li>
Configures SQL Server's sort order based on the user's preference for case-sensitive searches.<br><br></li>
<li>
Creates database devices, the XYZ application database, and the tables, indexes, and stored procedures within the database.<br><br></li>
<li>
Configures SQL Server for the application including accommodation for other applications and services that may be running on the server computer.<br><br></li>
<li>
Creates SQL Server tasks that perform daily and weekly maintenance on the XYZ database using Sqlmaint.exe.</li>
</ul>
<p>
This application uses SQL Distributed Management Objects (SQL-DMO) 32-bit COM collections, objects, properties, and methods to perform these tasks. </p>
<h4>Monitor.exe</h4>
<p>
Monitor.exe is a sample application that demonstrates how to configure SQL Server to automatically monitor database and transaction log space and to automatically take corrective action when either of these items exceeds a predefined space-used threshold. The application illustrates the following technologies:
<ul type=disc>
<li>
Windows NT Performance Monitor threshold management<br><br></li>
<li>
SQL Server user-defined counters (used to measure database space usage, which is not a built-in counter)<br><br></li>
<li>
User-defined error messages to signal exceeding a threshold<br><br></li>
<li>
Sqlalrtr.exe usage to write a user-defined error to the Windows NT event log as the result of a Windows NT Performance Monitor threshold<br><br></li>
<li>
Alerts to trigger an action based on a threshold alert<br><br></li>
<li>
On-demand tasks to do an action when triggered by an alert</li>
</ul>
<h4>Alert.exe</h4>
<p>
Alert.exe is a sample application that shows how to configure SQL Server to automatically monitor itself for high severity errors and to automatically notify someone that an issue needs attention. The application illustrates the following technologies:
<ul type=disc>
<li>
SQL Server task management<br><br></li>
<li>
Use of RAISERROR to issue a user-defined error message to signal that a severe error has occurred<br><br></li>
<li>
Alerts to trigger an action to respond to a high-severity error<br><br></li>
<li>
On-demand tasks to do an action when triggered by an alert</li>
</ul>
</BODY>
</HTML>

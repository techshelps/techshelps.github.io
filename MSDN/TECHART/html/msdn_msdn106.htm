<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 106: Centering Text Vertically in a Text Box Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn106"></a></sup>Tip 106: Centering Text Vertically in a Text Box Control</h1>
<p>
June 5, 1995</p>
<h2>Abstract</h2>
<p>
The Microsoft® Visual Basic® <b>Text Box</b> control lets your user enter text that can later be used by your application. This article explains how you can center the text that the user types vertically within the <b>Text Box</b> control.</p>
<h2>Vertically Centering Text in Visual Basic</h2>
<p>
In your application, you may need to display the text typed by the user, centered vertically within the <b>Text Box</b> control. The only way to accomplish this task is to place the <b>Text Box</b> control within a larger <b>Picture Box</b> control. The <b>Text Box</b> control allows you to type text that can later be used by your Microsoft® Visual Basic® application. As the user types the text, the text wraps to the next line (if the <b>MultiLine</b> property is set to True).</p>
<p>
The example program below centers the text in the text box by first setting the size of the <b>Text Box</b> control to the same as the size of the <b>Picture Box</b> control. Whenever a Change event is detected by the <b>Text Box</b> control, the text is redrawn in the control so that it appears vertically centered.</p>
<h2>Example Program</h2>
<p>
This program shows how to center text vertically within a <b>Text Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Picture Box</b> control to Form1. Picture1 is created by default. Set its <b>AutoRedraw</b> property to True.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1 over top of the <b>Picture Box</b> control. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of text):<pre><code>Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer,
 &nbsp; ByVal wMsg As Integer, ByVal wParam As Integer, lParam As Any) As Long
Const WM_USER = &amp;H400
Const EM_GETLINECOUNT = WM_USER + 10
Dim NumLines As Integer
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim HT As Integer
 &nbsp;&nbsp; Text1.Left = 0
 &nbsp;&nbsp; Text1.Width = Picture1.Width
 &nbsp;&nbsp; Text1.Height = Picture1.TextHeight("A")
 &nbsp;&nbsp; Text1.Top = (Picture1.Height = Text1.Height) / 2
 &nbsp;&nbsp; Text1.Visible = True
 &nbsp;&nbsp; NumLines = 1
End Sub
</code></pre>
</li>
<li>
Add the following code to the Change event for Text1:<pre><code>Private Sub Text1_Change()
 &nbsp;&nbsp; Dim Ret As Long
 &nbsp;&nbsp; Dim HT As Integer
Ret = SendMessage(Text1.hWnd, EM_GETLINECOUNT, 0, ByVal 0&amp;)
If Ret &lt;&gt; NumLines Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HT = Picture1.TextHeight("A")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Height = HT * Ret
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Top = (Picture1.Height - Text1.Height) / 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NumLines = Ret
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendKeys "{PGUP}", True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.SelStart = Len(Text1)
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

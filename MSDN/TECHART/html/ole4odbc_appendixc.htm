<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Appendix C</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="ole4odbc_appendixc"></a><sup></sup>Appendix C</h1>
<p>
The following is a complete source code listing for the example presented in "Data Manipulation." The example inserts two new rows into the <b>Customers </b>table of the <b>Access Northwind </b>sample database. The database is shipped with the OLE DB SDK and is installed as the ODBC data source <i>OLE_DB_NWind_Jet.</i></p>
<p>
To build the file using Microsoft Visual C++ 4.0 or later:
<ol>
<li>
Create a new console application.<br><br></li>
<li>
Copy the following code to a new .cpp file.<br><br></li>
<li>
Ensure that your build directory settings reference the OLE DB SDK include directory.<br><br></li>
<li>
Alter the build link settings to include linking to Oledb.lib.</li>
</ol>
<pre><code>/********************************************************************
* Parameterized execution in OLE DB
********************************************************************/
#define UNICODE
#define _UNICODE
#define DBINITCONSTANTS
#define INITGUID

#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stddef.h&gt; &nbsp;&nbsp;&nbsp; // For offset of macro
#include &lt;cguid.h&gt; &nbsp;&nbsp;&nbsp;&nbsp; // IID_NULL

#include &lt;oledb.h&gt; &nbsp;&nbsp;&nbsp;&nbsp; // OLE DB include files
#include &lt;oledberr.h&gt; 
#include &lt;msdaguid.h&gt;
#include &lt;msdasql.h&gt;

// Types--new customer struct
typedef struct tagNEWCUSTOMER
 &nbsp;&nbsp; {
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acCustomerID[6];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acCompanyName[40];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acContactName[30];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acContactTitle[30];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acAddress[60];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acCity[15];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acRegion[15];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acPostalCode[10];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acCountry[15];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acPhone[24];
 &nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; acFAX[24];
 &nbsp;&nbsp; } NEWCUSTOMER;

// Types--new customer data struct
typedef struct tagNEWCUSTOMERDATA
 &nbsp;&nbsp; {
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szCustID;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szCompanyName;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szContactName;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szContactTitle;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szAddress;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szCity;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szRegion;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szPostalCode;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szCountry;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szPhone;
 &nbsp;&nbsp; PSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szFAX;
 &nbsp;&nbsp; } NEWCUSTOMERDATA;

// Prototypes
HRESULT myInitDSO(IDBInitialize** ppIDBI);
HRESULT mySetInitProps(IDBInitialize* pIDBInitialize);
HRESULT myCreateParamAccessor(ICommand* pICmd, HACCESSOR* phAccessor,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IAccessor** ppIAccessor);
HRESULT myInsertWithParameters(IDBInitialize* pIDBInitialize);
void&nbsp;&nbsp;&nbsp; myDelete(IDBInitialize* pIDBInitialize);
void&nbsp;&nbsp;&nbsp; DumpError(LPSTR lpStr);

IMalloc*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g_pIMalloc = NULL;

/********************************************************************
* main()--control flow
********************************************************************/
int main()
 &nbsp;&nbsp; {
 &nbsp;&nbsp; IDBInitialize*&nbsp; pIDBInitialize = NULL;
 &nbsp;&nbsp; IRowset*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIRowset = NULL;
 &nbsp;&nbsp; HRESULT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr;

 &nbsp;&nbsp; // Init OLE and set up the DLLs.
 &nbsp;&nbsp; CoInitialize(NULL);

 &nbsp;&nbsp; // Get the task memory allocator.
 &nbsp;&nbsp; if (FAILED(CoGetMalloc(MEMCTX_TASK, &amp;g_pIMalloc)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto EXIT;

 &nbsp;&nbsp; if (FAILED(myInitDSO(&amp;pIDBInitialize)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto EXIT;

 &nbsp;&nbsp; // Execute a prepared statement with parameters.
 &nbsp;&nbsp; if (FAILED(myInsertWithParameters(pIDBInitialize)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto EXIT;

 &nbsp;&nbsp; // Delete rows just added.
 &nbsp;&nbsp; myDelete(pIDBInitialize);

EXIT:
 &nbsp;&nbsp; // Clean up and disconnect.
 &nbsp;&nbsp; if (pIRowset != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIRowset-&gt;Release();

 &nbsp;&nbsp; if (pIDBInitialize != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr = pIDBInitialize-&gt;Uninitialize();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIDBInitialize-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; if (g_pIMalloc != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g_pIMalloc-&gt;Release();

 &nbsp;&nbsp; CoUninitialize();
 &nbsp;&nbsp; 
 &nbsp;&nbsp; return (0);
 &nbsp;&nbsp; }

/********************************************************************
*&nbsp; Execute a prepared INSERT statement with parameters.
********************************************************************/
HRESULT myInsertWithParameters
 &nbsp;&nbsp; (
 &nbsp;&nbsp; IDBInitialize*&nbsp; pIDBInitialize
 &nbsp;&nbsp; ) 
 &nbsp;&nbsp; {
 &nbsp;&nbsp; IDBCreateSession*&nbsp;&nbsp; pIDBCreateSession;
 &nbsp;&nbsp; IDBCreateCommand*&nbsp;&nbsp; pIDBCreateCommand;
 &nbsp;&nbsp; ICommandText*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandText;
 &nbsp;&nbsp; ICommandPrepare*&nbsp;&nbsp;&nbsp; pICommandPrepare;
 &nbsp;&nbsp; ICommandWithParameters* pICmdWithParams;
 &nbsp;&nbsp; IAccessor*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIAccessor;
 &nbsp;&nbsp; WCHAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSQLString[] = 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("insert into Customers (CustomerID, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompanyName, ContactName,")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR(" ContactTitle, Address, City, Region, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostalCode, Country,")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR(" Phone, Fax)")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR(" values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
 &nbsp;&nbsp; DBPARAMS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Params;
 &nbsp;&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cRowsAffected;
 &nbsp;&nbsp; HACCESSOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hParamAccessor;

 &nbsp;&nbsp; NEWCUSTOMERDATA&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[] =
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "YOUME",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "You and Me Grocers",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "William Smith",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "General Manager",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "383 15th Ave. N.",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New York",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "NY",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "10018",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "USA",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "(212) 555-8847",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "(212) 555-9988",

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "YORBL",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Yorbalinda's",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Mary Jones",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Owner",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "22 Sunny Vale Rd.",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "San Diego",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "CA",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "93122",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "USA",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "(605) 555-4322",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "(605) 555-4323"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp;&nbsp; NEWCUSTOMER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NewCustomer;

 &nbsp;&nbsp; ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nParams = 11;
 &nbsp;&nbsp; DBPARAMBINDINFO&nbsp;&nbsp;&nbsp;&nbsp; rgParamBindInfo[] = 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_CHAR"),&nbsp;&nbsp;&nbsp; OLESTR("CustomerID"),&nbsp;&nbsp;&nbsp; 5, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("CompanyName"),&nbsp; 40, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("ContactName"),&nbsp; 30, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("ContactTitle"), 30, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("Address"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 60, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("City"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("Region"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("PostalCode"),&nbsp;&nbsp; 10, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("Country"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("Phone"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 24, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("DBTYPE_VARCHAR"), OLESTR("FAX"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 24, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBPARAMFLAGS_ISINPUT, 0, 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
 &nbsp;&nbsp; ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgParamOrdinals[] = 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {1,2,3,4,5,6,7,8,9,10,11};

 &nbsp;&nbsp; // Get the session.
 &nbsp;&nbsp; pIDBInitialize-&gt;QueryInterface(IID_IDBCreateSession, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void**)&amp;pIDBCreateSession);
 &nbsp;&nbsp; pIDBCreateSession-&gt;CreateSession(NULL, IID_IDBCreateCommand,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IUnknown**) &amp;pIDBCreateCommand);
 &nbsp;&nbsp; pIDBCreateSession-&gt;Release();

 &nbsp;&nbsp; // Create the command.
 &nbsp;&nbsp; pIDBCreateCommand-&gt;CreateCommand(NULL, IID_ICommandText, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IUnknown**) &amp;pICommandText);
 &nbsp;&nbsp; pIDBCreateCommand-&gt;Release();

 &nbsp;&nbsp; // The command requires the actual text as well as an indicator
 &nbsp;&nbsp; // of its language.
 &nbsp;&nbsp; pICommandText-&gt;SetCommandText(DBGUID_DBSQL, wSQLString);

 &nbsp;&nbsp; // Set parameter information.
 &nbsp;&nbsp; pICommandText-&gt;QueryInterface(IID_ICommandWithParameters, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void**)&amp;pICmdWithParams);
 &nbsp;&nbsp; pICmdWithParams-&gt;SetParameterInfo(nParams, rgParamOrdinals, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgParamBindInfo);
 &nbsp;&nbsp; pICmdWithParams-&gt;Release();

 &nbsp;&nbsp; // Prepare the command.
 &nbsp;&nbsp; pICommandText-&gt;QueryInterface(IID_ICommandPrepare, (void**)&amp;pICommandPrepare);
 &nbsp;&nbsp; if (FAILED(pICommandPrepare-&gt;Prepare(0)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandPrepare-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandText-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (E_FAIL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; pICommandPrepare-&gt;Release();

 &nbsp;&nbsp; // Create parameter accessors.
 &nbsp;&nbsp; if (FAILED(myCreateParamAccessor(pICommandText, &amp;hParamAccessor, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pIAccessor)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandText-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (E_FAIL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; Params.pData = &amp;NewCustomer;&nbsp;&nbsp; // pData is the buffer pointer
 &nbsp;&nbsp; Params.cParamSets = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of sets of parameters
 &nbsp;&nbsp; Params.hAccessor = hParamAccessor; // Accessor to the parameters

 &nbsp;&nbsp; // Specify the parameter information.
 &nbsp;&nbsp; for (UINT nCust = 0; nCust &lt; 2; nCust++)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acCustomerID, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szCustID);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acCompanyName, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szCompanyName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acContactName, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szContactName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acContactTitle, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szContactTitle);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acAddress, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szAddress);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acCity, aNewCustomers[nCust].szCity);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acRegion, aNewCustomers[nCust].szRegion);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acPostalCode, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szPostalCode);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acCountry, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNewCustomers[nCust].szCountry);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acPhone, aNewCustomers[nCust].szPhone);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(NewCustomer.acFAX, aNewCustomers[nCust].szFAX);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Execute the command.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandText-&gt;Execute(NULL, IID_NULL, &amp;Params, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;cRowsAffected, NULL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%ld rows inserted.\n", cRowsAffected);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; pIAccessor-&gt;ReleaseAccessor(hParamAccessor, NULL);
 &nbsp;&nbsp; pIAccessor-&gt;Release();
 &nbsp;&nbsp; pICommandText-&gt;Release();

 &nbsp;&nbsp; return (NOERROR);
 &nbsp;&nbsp; }

/********************************************************************
*&nbsp; Delete rows just added using simple execution.
********************************************************************/
void myDelete
 &nbsp;&nbsp; (
 &nbsp;&nbsp; IDBInitialize*&nbsp; pIDBInitialize
 &nbsp;&nbsp; ) 
 &nbsp;&nbsp; {
 &nbsp;&nbsp; IDBCreateSession*&nbsp;&nbsp; pIDBCreateSession;
 &nbsp;&nbsp; IDBCreateCommand*&nbsp;&nbsp; pIDBCreateCommand;
 &nbsp;&nbsp; ICommandText*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pICommandText;
 &nbsp;&nbsp; WCHAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSQLDelete1[] = 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("delete from Customers where CustomerID = 'YOYOM'");
 &nbsp;&nbsp; WCHAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSQLDelete2[] = 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OLESTR("delete from Customers where CustomerID = 'YORBL'");
 &nbsp;&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cRowsAffected;


 &nbsp;&nbsp; // Get the session.
 &nbsp;&nbsp; pIDBInitialize-&gt;QueryInterface(IID_IDBCreateSession, (void**)&amp;pIDBCreateSession);
 &nbsp;&nbsp; pIDBCreateSession-&gt;CreateSession(NULL, IID_IDBCreateCommand,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IUnknown**) &amp;pIDBCreateCommand);
 &nbsp;&nbsp; pIDBCreateSession-&gt;Release();

 &nbsp;&nbsp; // Create the command.
 &nbsp;&nbsp; pIDBCreateCommand-&gt;CreateCommand(NULL, IID_ICommandText, (IUnknown**) &amp;pICommandText);
 &nbsp;&nbsp; pIDBCreateCommand-&gt;Release();

 &nbsp;&nbsp; // Set the command text for first delete statement and execute
 &nbsp;&nbsp; // the command
 &nbsp;&nbsp; pICommandText-&gt;SetCommandText(DBGUID_DBSQL, wSQLDelete1);
 &nbsp;&nbsp; pICommandText-&gt;Execute(NULL, IID_NULL, NULL, &amp;cRowsAffected, NULL);

 &nbsp;&nbsp; printf("%ld rows deleted.\n", cRowsAffected);

 &nbsp;&nbsp; // Do it again.
 &nbsp;&nbsp; pICommandText-&gt;SetCommandText(DBGUID_DBSQL, wSQLDelete2);
 &nbsp;&nbsp; pICommandText-&gt;Execute(NULL, IID_NULL, NULL, &amp;cRowsAffected, NULL);

 &nbsp;&nbsp; printf("%ld rows deleted.\n", cRowsAffected);

 &nbsp;&nbsp; pICommandText-&gt;Release();

 &nbsp;&nbsp; return;
 &nbsp;&nbsp; }

/********************************************************************
*&nbsp; Create parameter accessor.
********************************************************************/
HRESULT myCreateParamAccessor
 &nbsp;&nbsp; (
 &nbsp;&nbsp; ICommand*&nbsp;&nbsp; pICmd,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // [in]
 &nbsp;&nbsp; HACCESSOR*&nbsp; phAccessor, // [out]
 &nbsp;&nbsp; IAccessor** ppIAccessor // [out]
 &nbsp;&nbsp; )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; IAccessor*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIAccessor;
 &nbsp;&nbsp; HACCESSOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hAccessor;
 &nbsp;&nbsp; const ULONG&nbsp;&nbsp;&nbsp;&nbsp; nParams = 11;
 &nbsp;&nbsp; DBBINDING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[nParams];
 &nbsp;&nbsp; DBBINDSTATUS&nbsp;&nbsp;&nbsp; rgStatus[nParams]; // Returns information for
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // individual binding
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // validity.
 &nbsp;&nbsp; HRESULT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr;

 &nbsp;&nbsp; ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; acbLengths[] = {5, 40, 30, 30, 60, 15, 15, 10, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15, 24, 24};

 &nbsp;&nbsp; for (ULONG i = 0; i &lt; nParams; i++)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].iOrdinal = i + 1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].obLength = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].obStatus = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].pTypeInfo = NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].pObject = NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].pBindExt = NULL;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].dwPart = DBPART_VALUE;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].dwMemOwner = DBMEMOWNER_CLIENTOWNED;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].eParamIO = DBPARAMIO_INPUT;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].cbMaxLen = acbLengths[i];
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].dwFlags = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].wType = DBTYPE_STR;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].bPrecision = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings[i].bScale = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; Bindings[0].obValue = offsetof(NEWCUSTOMER, acCustomerID);
 &nbsp;&nbsp; Bindings[1].obValue = offsetof(NEWCUSTOMER, acCompanyName);
 &nbsp;&nbsp; Bindings[2].obValue = offsetof(NEWCUSTOMER, acContactName);
 &nbsp;&nbsp; Bindings[3].obValue = offsetof(NEWCUSTOMER, acContactTitle);
 &nbsp;&nbsp; Bindings[4].obValue = offsetof(NEWCUSTOMER, acAddress);
 &nbsp;&nbsp; Bindings[5].obValue = offsetof(NEWCUSTOMER, acCity);
 &nbsp;&nbsp; Bindings[6].obValue = offsetof(NEWCUSTOMER, acRegion);
 &nbsp;&nbsp; Bindings[7].obValue = offsetof(NEWCUSTOMER, acPostalCode);
 &nbsp;&nbsp; Bindings[8].obValue = offsetof(NEWCUSTOMER, acCountry);
 &nbsp;&nbsp; Bindings[9].obValue = offsetof(NEWCUSTOMER, acPhone);
 &nbsp;&nbsp; Bindings[10].obValue = offsetof(NEWCUSTOMER, acFAX);

 &nbsp;&nbsp; pICmd-&gt;QueryInterface(IID_IAccessor, (void**)&amp;pIAccessor);

 &nbsp;&nbsp; hr = pIAccessor-&gt;CreateAccessor(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBACCESSOR_PARAMETERDATA,&nbsp;&nbsp;&nbsp; // Accessor that will be used
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to specify parameter data
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nParams,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of parameters being
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // bound
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bindings,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Structure containing bind
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // information
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(NEWCUSTOMER),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Size of parameter structure
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;hAccessor,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Returned accessor handle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Information about binding
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // validity
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );

 &nbsp;&nbsp; if (FAILED(hr))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DumpError("Parameter accessor creation failed.");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *ppIAccessor = pIAccessor;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *phAccessor = hAccessor;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; return (hr);
 &nbsp;&nbsp; }

/********************************************************************
* Initialize the Data Source.
********************************************************************/
HRESULT myInitDSO
 &nbsp;&nbsp; (
 &nbsp;&nbsp; IDBInitialize** ppIDBInitialize&nbsp;&nbsp; // [out]
 &nbsp;&nbsp; )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; // Create an instance of the MSDASQL (ODBC) provider.
 &nbsp;&nbsp; CoCreateInstance(CLSID_MSDASQL, NULL, CLSCTX_INPROC_SERVER,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IID_IDBInitialize, (void**)ppIDBInitialize);

 &nbsp;&nbsp; if (*ppIDBInitialize == NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (E_FAIL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; if (FAILED(mySetInitProps(*ppIDBInitialize)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (E_FAIL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; if (FAILED((*ppIDBInitialize)-&gt;Initialize()))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DumpError("IDBInitialze-&gt;Initialize failed.");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (E_FAIL);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; return (NOERROR);
 &nbsp;&nbsp; }

/********************************************************************
* Set initialization properties on a data source.
*********************************************************************
HRESULT mySetInitProps
 &nbsp;&nbsp; (
 &nbsp;&nbsp; IDBInitialize*&nbsp; pIDBInitialize&nbsp;&nbsp;&nbsp; // [in]
 &nbsp;&nbsp; )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; const ULONG&nbsp;&nbsp;&nbsp;&nbsp; nProps = 4;
 &nbsp;&nbsp; IDBProperties*&nbsp; pIDBProperties;
 &nbsp;&nbsp; DBPROP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitProperties[nProps];
 &nbsp;&nbsp; DBPROPSET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgInitPropSet;
 &nbsp;&nbsp; HRESULT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr;

 &nbsp;&nbsp; // Initialize common property options.
 &nbsp;&nbsp; for (ULONG i = 0; i &lt; nProps; i++ )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VariantInit(&amp;InitProperties[i].vValue);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitProperties[i].dwOptions = DBPROPOPTIONS_REQUIRED;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitProperties[i].colid = DB_NULLID;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; // Level of prompting that will be done to complete the 
 &nbsp;&nbsp; // connection process
 &nbsp;&nbsp; InitProperties[0].dwPropertyID = DBPROP_INIT_PROMPT;
 &nbsp;&nbsp; InitProperties[0].vValue.vt = VT_I2;
 &nbsp;&nbsp; InitProperties[0].vValue.iVal = DBPROMPT_NOPROMPT; 

 &nbsp;&nbsp; // Data source name--see the sample source included with the OLE
 &nbsp;&nbsp; // DB SDK.
 &nbsp;&nbsp; InitProperties[1].dwPropertyID = DBPROP_INIT_DATASOURCE;
 &nbsp;&nbsp; InitProperties[1].vValue.vt = VT_BSTR;
 &nbsp;&nbsp; InitProperties[1].vValue.bstrVal =
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysAllocString(OLESTR("OLE_DB_NWind_Jet"));

 &nbsp;&nbsp; // User ID
 &nbsp;&nbsp; InitProperties[2].dwPropertyID = DBPROP_AUTH_USERID;
 &nbsp;&nbsp; InitProperties[2].vValue.vt = VT_BSTR;
 &nbsp;&nbsp; InitProperties[2].vValue.bstrVal = SysAllocString(OLESTR(""));

 &nbsp;&nbsp; // Password
 &nbsp;&nbsp; InitProperties[3].dwPropertyID = DBPROP_AUTH_PASSWORD;
 &nbsp;&nbsp; InitProperties[3].vValue.vt = VT_BSTR;
 &nbsp;&nbsp; InitProperties[3].vValue.bstrVal = SysAllocString(OLESTR(""));

 &nbsp;&nbsp; rgInitPropSet.guidPropertySet = DBPROPSET_DBINIT;
 &nbsp;&nbsp; rgInitPropSet.cProperties = nProps;
 &nbsp;&nbsp; rgInitPropSet.rgProperties = InitProperties;

 &nbsp;&nbsp; // Set initialization properties.
 &nbsp;&nbsp; pIDBInitialize-&gt;QueryInterface(IID_IDBProperties, (void**) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pIDBProperties);
 &nbsp;&nbsp; hr = pIDBProperties-&gt;SetProperties(1, &amp;rgInitPropSet);

 &nbsp;&nbsp; SysFreeString(InitProperties[1].vValue.bstrVal);
 &nbsp;&nbsp; SysFreeString(InitProperties[2].vValue.bstrVal);
 &nbsp;&nbsp; SysFreeString(InitProperties[3].vValue.bstrVal);

 &nbsp;&nbsp; pIDBProperties-&gt;Release();

 &nbsp;&nbsp; if (FAILED(hr))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DumpError("Set properties failed.");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp; return (hr);
 &nbsp;&nbsp; }

/********************************************************************
* Dump an error to the console.
********************************************************************/
void DumpError(LPSTR lpStr)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; printf(lpStr);
 &nbsp;&nbsp; printf("\n");
 &nbsp;&nbsp; }
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 141: Searching a List Box Control for a Partial Match</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn141"></a></sup>Tip 141: Searching a List Box Control for a Partial Match</h1>
<p>
August 6, 1995</p>
<h2>Abstract</h2>
<p>
The <b>List Box</b> control in Microsoft® Visual Basic® lets you display a list of items to the user. This article explains how you can search a <b>List Box </b>control for a specific entry by specifying a partial search string.</p>
<h2>Finding Items in a List Box Control</h2>
<p>
The <b>List Box</b> control can be used within a Microsoft® Visual Basic® program to maintain a list of items. While your program is running, you can use the <b>ListCount</b> property of the <b>List Box</b> control to determine how many items are stored in the list. Then, using the <b>ListCount</b> value, you can search through the contents of a <b>List Box</b> control to find a specific item.</p>
<p>
It's easy to write a procedure in Visual Basic to selectively find items in a <b>List Box</b> control. For example, if you want to search the <b>List Box</b> control for the item "oranges," you can use a For-Next loop to check each entry in the <b>List Box</b> control to see whether it matches the target string. To do this, use the following code:</p>
<pre><code>For X = 0 To Lst.ListCount -1
 &nbsp;&nbsp; If Lst.List(X) = "oranges" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'we found an item that matches.
 &nbsp;&nbsp; End If
Next X
</code></pre>
<p>
The code routine above tells us whether the item "oranges" was found in the <b>List Box</b> control, but what happens if we want to find a partial item in the control? Let's suppose that each item in the list contains a phrase such as "apples and oranges." You want to find the item that contains the word "oranges." The above routine will only return a match if the entire string matches the word "oranges."</p>
<p>
To work around this problem, we can use the Visual Basic <b>InStr</b> function to parse each entry in the <b>List Box</b> control. The <b>InStr</b> function will return the location within the larger string where the target string is found. To use this search technique, you still need to include a For-Next loop to examine each entry in the <b>List Box</b> control; however, you can also add code to call the <b>InStr</b> function to determine whether a specific portion of an entry matches your target string.</p>
<p>
Each time the <b>InStr</b> function finds the target string in an entry in the <b>List Box</b> control, it returns the target string's position within the entry. Just use the <b>ListIndex</b> property of the <b>List Box</b> control to retrieve the entry that matches your target string.</p>
<h2>Example Program</h2>
<p>
This program shows how to search a <b>List Box</b> control for a partially matching string.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1.<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; List1.AddItem "Apples and oranges"
 &nbsp;&nbsp; List1.AddItem "Bananas and grapes"
 &nbsp;&nbsp; List1.AddItem "Peaches and corn"
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1.<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; GetPartialString
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>GetPartialString</b>. Add the following code to this procedure.<pre><code>Sub GetPartialString()
 &nbsp;&nbsp; Dim LittleString As String
 &nbsp;&nbsp; Dim Item As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; LittleString = Text1.Text
 &nbsp;&nbsp; Item = GetMatch(List1, LittleString)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If Item = -1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "No such entry found in List Box"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.ListIndex = Item%
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>GetMatch</b>. Add the following code to this procedure.<pre><code>Function GetMatch(Lst As ListBox, ByVal SearchStr As String) As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; For X = 0 To Lst.ListCount - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(Lst.List(X), SearchStr) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetMatch = X
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Next X
 &nbsp;&nbsp; 
 &nbsp;&nbsp; GetMatch = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'no match
End Function
</code></pre>
</li>
</ol>
<p>
Run the demonstration program by pressing F5. Three items are displayed in the <b>List Box</b> control. Type a word such as "corn" in the <b>Text Box</b> control and click the command button. The program highlights the "Peaches and corn" entry in the <b>List Box</b> control because the word "corn" was found in this entry. Type the word "turnip" in the <b>Text Box</b> control. After you click the command button, a message box is displayed that tells you no such item was found.</p>
<h2>Additional References</h2>
<p>
Knowledge Base Q119738. "How to Quickly Search a List Box."</p>
<p>
<a href="msdn_listbox.htm">"List Box Controls."</a> (MSDN Library, Technical Articles)</p>
</BODY>
</HTML>

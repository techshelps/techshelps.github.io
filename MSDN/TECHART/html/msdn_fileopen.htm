<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating Files with the SHFileOperation Function in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_fileopen"></a></sup>Manipulating Files with the SHFileOperation Function in Visual Basic 4.0</h1>
<p>
Deborah L. Cooper</p>
<p>
September 1996</p>
<h2>Introduction</h2>
<p>
This article explains how to create in-process OLE servers (that is, classes) in Microsoft® Visual Basic® 4.0 that encapsulate the <b>SHFileOperation</b> application programming interface (API) function. Through the use of the class developed in this article, you will learn how to use the <b>SHFileOperation</b> function to more easily manipulate file system objects. While you are developing code for a class, you need only fully debug and test the class once—when you are initially creating the class modules. In any future Visual Basic application programs you develop, you save the time and the expense of having to code and write the routines a second time. In addition, by developing classes to manipulate files, you don't have to include the API declarations and structures in projects you develop—simply include the class and you're in business.</p>
<h2>First, a Little Background Information…</h2>
<p>
Under the Windows® 95 operating system, you can use the <b>SHFileOperation</b> function to copy, delete, rename, or move specific files. When the file operation is actually performed, you have the option of displaying a progress dialog box. By using a progress dialog box, you give the user of your application program visual feedback as to what is happening.</p>
<p>
To use the <b>SHFileOperation</b> function in a Visual Basic application program, you must include the following Declare statement in a code module:</p>
<pre><code>Private Declare Function SHFileOperation Lib "shell32.dll" Alias "SHFileOperationA" (lpFileOp as SHFILEOPSTRUCT) As Long
</code></pre>
<p>
As you can see from the Declare statement above, the <b>SHFileOperation</b> function requires only one argument, a pointer to a <b>SHFILEOPSTRUCT</b> structure. This structure contains information needed by the <b>SHFileOperation</b> function to perform the desired file operation.</p>
<p>
For Visual Basic, the format of the <b>SHFILEOPSTRUCT</b> structure looks like this:</p>
<pre><code>Private Type SHFILEOPSTRUCT
   hwnd As Long
   wFunc As Long
   pFrom As String
   pTo As String
   fFlags As Integer
   fAnyOperationsAborted As Boolean
   hNameMappings As Long
   lpszProgressTitle As String
End Type
</code></pre>
<p>
Each of the eight fields in the SHFILEOPSTRUCT structure should be set as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Field name</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>hWnd</b></td>
<td width=67%>The handle of the dialog box that will be used to display the file operation's status. When the <b>fFlags</b> argument is set to a FOF_CREATEPROGRESSDLG value, this is the handle to the parent window for the progress dialog box.</td>
</tr>
<tr valign=top>
<td width=33%><b>Wfunc</b></td>
<td width=67%>This field tells the <b>SHFileOperation</b> function what type of operation is to be performed. One of the following values may be used:<ul type=disc>
<li>
FO_COPY&nbsp;&nbsp;&nbsp;&nbsp; The <b>pFrom</b> file is copied to the pTo location<br><br></li>
<li>
FO_RENAME&nbsp;&nbsp;&nbsp;&nbsp; The <b>pFrom</b> file is given a new name<br><br></li>
<li>
FO_DELETE&nbsp;&nbsp;&nbsp;&nbsp; The <b>pFrom</b> file is deleted<br><br></li>
<li>
FO_MOVE&nbsp;&nbsp;&nbsp;&nbsp; The <b>pFrom</b> file is moved to the <b>pTo</b> location</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=33%><b>pFrom</b></td>
<td width=67%>This field points to a buffer containing the name of the source file(s). If more than one filename is specified, a null character must separate each filename. The end of the list of filenames must be terminated by two consecutive null characters.</td>
</tr>
<tr valign=top>
<td width=33%><b>Pto</b></td>
<td width=67%>This field points to a buffer containing the name of the destination directory or file. If more than one filename is specified, a null character must separate each filename. The end of the list of filenames must be terminated by two consecutive null characters. Multiple destination filenames can be used only if the <b>fFlags</b> field contains the FOF_MULTIDESTFILES value.</td>
</tr>
<tr valign=top>
<td width=33%><b>fFlags</b></td>
<td width=67%>This field tells the <b>SHFileOperation</b> function how to control the file operation. One or more of the following values may be specified:<ul type=disc>
<li>
FOF_ALLOWUNDO&nbsp;&nbsp;&nbsp;&nbsp; Undo information will be preserved.<br><br></li>
<li>
FOF_CONFIRMMOUSE&nbsp;&nbsp;&nbsp;&nbsp; Not implemented yet.<br><br></li>
<li>
FOF_FILESONLY&nbsp;&nbsp;&nbsp;&nbsp; The file operation is performed only if a wildcard filename was specified.<br><br></li>
<li>
FOF_MULTIDESTFILES&nbsp;&nbsp;&nbsp;&nbsp; Tells the <b>SHFileOperation</b> function that the <b>pTo</b> field specifies multiple destination files. In other words, each source file has a corresponding destination file. Otherwise, the files will be copied or moved to a single directory.<br><br></li>
<li>
FOF_NOCONFIRMATION&nbsp;&nbsp;&nbsp;&nbsp; If a dialog box is displayed, the system automatically responds with a "Yes to all" query.<br><br></li>
<li>
FOF_NOCONFIRMMKDIR&nbsp;&nbsp;&nbsp;&nbsp; When a new directory must be created, the system does not require confirmation before that directory is actually created.<br><br></li>
<li>
FOF_RENAMEONCOLLISION&nbsp;&nbsp;&nbsp;&nbsp; If the target file's name already exists, a new name is automatically assigned to the file.<br><br></li>
<li>
FOF_SILENT&nbsp;&nbsp;&nbsp;&nbsp; A progress dialog box is not displayed.<br><br></li>
<li>
FOF_SIMPLEPROGRESS&nbsp;&nbsp;&nbsp;&nbsp; A progress dialog box is displayed but the individual filenames are not displayed.<br><br></li>
<li>
FOF_WANTMAPPINGHANDLE&nbsp;&nbsp;&nbsp;&nbsp; The <b>hNameMappings</b> field is filled in by the <b>SHFileOperation</b> function.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=33%><b>fAnyOperationsAborted</b></td>
<td width=67%>If a file operation was aborted before that operation was completed, this field will be set to TRUE.</td>
</tr>
<tr valign=top>
<td width=33%><b>hNameMappings</b></td>
<td width=67%>This field, used only when the <b>fFlags</b> field includes the FOF_WANTMAPPINGSHANDLE value, contains the handle of a filename mapping object. This object contains an array of <b>SHNAMEMAPPING</b> structures where each structure contains both the old and new paths of each file that is copied, moved, or renamed</td>
</tr>
<tr valign=top>
<td width=33%><b>lpszProgressTitle</b></td>
<td width=67%>When the <b>fFlags</b> field includes the FOF_SIMPLEPROGRESS value, this field contains a pointer to a string to be given to the title of the progress dialog box.</td>
</tr>
</table><br>
<p>
After the <b>SHFileOperation</b> function has been executed, it returns a zero value if the file operation was successful. If the file operation was not successful, the <b>SHFileOperation</b> function returns a nonzero value. When researching this article, I discovered a bug in that the <b>SHFileOperation</b> returns a zero value regardless of the outcome of the file operation. To this end, the class in this article uses a <b>DoesFileExist</b> function to first determine that the source file actually exists. By using the <b>DoesFileExist</b> function, we can be assured that the <b>SHFileOperation</b> performs as expected.</p>
<h2>Using Classes to Manipulate Files in Visual Basic 4.0</h2>
<p>
The FileOperations class that is included with this article can be used in any application program you develop in Visual Basic 4.0. This file operations class provides an easy mechanism to copy a file from one directory to another, rename a file, delete an existing file from disk, or move a file from one directory to another.</p>
<p>
To create a class that can perform all types of file operations, you must first define the properties of this class in the Declarations section. The FileOperations class properties are (usually) the target filename, the source filename, the directory names, and the type of file operation you want performed. These properties should be defined as private and local to this class.</p>
<p>
When using the FileOperations class, it is best to not hard-code the source and destination filenames and paths. Instead, you can retrieve these properties from your calling application program.</p>
<h3>Copying Files</h3>
<p>
The FileOperations class includes a method to copy files called (you guessed it!) <b>CopyThisFile</b>. Calling the <b>CopyThisFile</b> method, we can easily copy a file from one directory to another. The calling program must pass two pieces of information to the <b>CopyThisFile</b> method: the name of the file that is to be copied and the name of the destination directory to which the file is to be copied. The <b>CopyThisFile</b> method, shown below, sets the necessary fields in the <b>SHFILEOPSTRUCT</b> structure and then calls the <b>SHFileOperation</b> function to actually begin the copy process.</p>
<pre><code>Public Sub CopyThisFile(File name As String, ToDir As String)
 &nbsp;&nbsp; On Error Resume Next
 
 &nbsp;&nbsp; Dim FileStruct As SHFILEOPSTRUCT
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; Dim P As Boolean
 
 &nbsp;&nbsp; P = DoesFileExist(File name)
 &nbsp;&nbsp; If P = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pFrom = File name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pTo = ToDir
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.fFlags = FOF_NOCONFIRMMKDIR + FOF_NOCONFIRMATION + FOF_SILENT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.wFunc = FO_COPY
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = SHFileOperation(FileStruct)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Copy_Error, "FileOperations::CopyThisFile", Err.Description
 &nbsp;&nbsp; End If
End Sub
</code></pre>
<p>
The result returned by the <b>CopyThisFile</b> method enables us to determine if the user passed a valid filename to the method. If a valid filename was not found on the disk, then the SHFileOperation would fail. In this case, the error trapping passes the Copy_Error value to the calling program. In our calling program, we can test this value to determine if the <b>CopyThisFile</b> method was successful or not.</p>
<p>
The <b>fFlags</b> field has been set to a combination of three values. The <b>fFlags</b> field controls how the file operation is to be carried out. In our case, the FOF_SILENT value tells the <b>SHFileOperation</b> function that we do not want to display a progress dialog box when our file is copied. In our calling program, we only see a dialog box if the source filename is invalid. The user does not necessarily have to see the file operation's dialog box in addition to our own.</p>
<p>
The FOF_NOCONFIRMMKDIR value in the <b>fFlags</b> field tells the <b>SHFileOperation</b> function that we do not want to confirm any requests to create new directories if those directories must be created by the <b>SHFileOperation</b> function. Likewise, the FOF_NOCONFIRMATION value tells the function to respond "yes to all" for all dialog boxes that may be displayed. A dialog box might be displayed if the file already existed, for example.</p>
<p>
To copy a file, we must set the <b>wFunc</b> field in the <b>SHFILEOPSTRUCT</b> structure to the value of FO_COPY. In addition, we need to tell the <b>SHFileOperation</b> function the name of the file we want to copy. The source name of the file must be placed in the <b>pFrom</b> field of the <b>SHFILEOPSTRUCT</b> structure.</p>
<p>
Notice that the above code copies a single file to the directory specified. In some situations, we might want to copy more than one file to several directories. In that case, we would set the <b>fFlags</b> field to a value of FOF_MULTIDESTFILES to tell the <b>SHFileOperation</b> that we want to use multiple destination directories. In addition, we fill the <b>pTo</b> field in the <b>SHFILEOPSTRUCT</b> structure with the names of the destination directories. Each directory name in the <b>pTo</b> field must be terminated by a null character and the entire list of directory names must be terminated by two consecutive null characters.</p>
<p>
We have also included a <b>DoesFileExist</b> function in the class module. The <b>DoesFileExist</b> function determines if the to-be-copied file actually exists. If the filename does not exist, then it cannot, obviously, be copied. This precaution was incorporated because the <b>SHFileOperation</b> function always returns a value of zero, regardless if the file operation was actually successful not. The <b>DoesFileExist</b> function lets us confirm that the file actually exists and can be manipulated.</p>
<pre><code>Public Function DoesFileExist(NameOfFile As String) As Boolean
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; Dim wStyle As Long
 &nbsp;&nbsp; Dim Buffer As OFSTRUCT
 &nbsp;&nbsp; Dim IsThere As Long
 &nbsp; 
 &nbsp;&nbsp; If (Len(NameOfFile) = 0) Or (InStr(NameOfFile, "*") &gt; 0) Or (InStr(NameOfFile, "?") &gt; 0) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoesFileExist = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; On Error GoTo NoSuchFile
 
 &nbsp;&nbsp; X = OpenFile(NameOfFile, Buffer, OF_EXIST)
 &nbsp;&nbsp; If X &lt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo CheckForError
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoesFileExist = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp; End If
CheckForError:
 &nbsp;&nbsp; X = Buffer.nErrCode
 &nbsp;&nbsp; If X = 3 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo NoSuchFile
 &nbsp;&nbsp; End If
 
NoSuchFile:
 &nbsp;&nbsp; DoesFileExist = False
ExitFileExist:
 &nbsp;&nbsp; On Error GoTo 0
End Function
</code></pre>
<h3>Deleting Files</h3>
<p>
In this section, we will discuss how to delete a file stored on disk. To delete a file from disk, the <b>wFunc</b> field of the <b>SHFILEOPSTRUCT</b> structure must be set to the FO_DELETE value. In addition, we can tell the <b>SHFileOperation</b> function to preserve undo information by specifying the FOF_ALLOWUNDO value in the <b>fFlags</b> field of the <b>SHFILEOPSTRUCT</b> structure. This value tells the operating system to preserve information about the to-be-deleted file. Later on, we might want to restore the previously deleted file and the system will restore the file by using this undo information. Under the Windows 95 operating system, a file that is deleted is automatically sent to the Recycle Bin.</p>
<p>
We must also fill the <b>pFrom</b> field of the <b>SHFILEOPSTRUCT</b> structure with the name of the file we want to delete. In the sample class, we only allow one file to be deleted at a single time. Filenames that contain the wildcard "*" and "?" characters cannot be deleted. If desired, a parsing routine could be included in the class module to allow for multiple file deletions. You would need to fill the <b>pFrom</b> field in the <b>SHFILEOPSTRUCT</b> with the names of all files you want to delete, where each filename is separated by a NULL character and the entire list of filenames is terminated by two consecutive NULL characters.</p>
<p>
After calling the <b>DoesFileExist</b> function, we can pass the filename on to the <b>SHFileOperation</b> function to delete it, as shown in the <b>DeleteThisFile</b> routine here:</p>
<pre><code>Public Sub DeleteThisFile(File name As String)
 &nbsp;&nbsp; On Error Resume Next
 
 &nbsp;&nbsp; Dim FileStruct As SHFILEOPSTRUCT
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; Dim P As Boolean
 
 &nbsp;&nbsp; P = DoesFileExist(File name)
 &nbsp;&nbsp; If P = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pFrom = File name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.fFlags = FOF_SILENT + FOF_ALLOWUNDO + FOF_NOCONFIRMATION
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.wFunc = FO_DELETE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = SHFileOperation(FileStruct)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Del_Error, "FileOperations::DeleteThisFile", Err.Description
 &nbsp;&nbsp; End If
End Sub
</code></pre>
<p>
Notice that in cases where an error occurs after calling the <b>SHFileOperation</b> function that we return the error (Err.Raise Del_Error) to the calling program. The calling program can then respond by saying the file cannot be deleted.</p>
<h3>Moving Files</h3>
<p>
When it comes to moving files, the code to accomplish this is very similar to the <b>CopyThisFile</b> method we developed earlier. The name of the source file is passed to the <b>MoveThisFile</b> method, along with the target filename and path. The <b>DoesFileExist</b> function is again used to determine if the source filename actually exists on the disk. If it doesn't, the <b>MoveThisFile</b> method returns an error code to the calling program.</p>
<pre><code>Public Sub MoveThisFile(File name As String, DestName As String)
 &nbsp;&nbsp; On Error Resume Next
 
 &nbsp;&nbsp; Dim FileStruct As SHFILEOPSTRUCT
 &nbsp;&nbsp; Dim P As Boolean
 &nbsp;&nbsp; Dim X As Long
 
 &nbsp;&nbsp; P = DoesFileExist(File name)
 &nbsp;&nbsp; If P = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pFrom = File name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pTo = DestName
 &nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.fFlags = FOF_SILENT + FOF_NOCONFIRMATION
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.wFunc = FO_MOVE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = SHFileOperation(FileStruct)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Move_Error, "FileOperations::MoveThisFile", Err.Description
 &nbsp;&nbsp; End If

End Sub
</code></pre>
<h3>Renaming Files</h3>
<p>
The final operation you can perform on files with the <b>SHFileOperation</b> function is to rename them. As you can see from the <b>RenameThisFile</b> method below, you must provide both a source filename and a target filename. When you call the <b>SHFileOperation,</b> the file is given the new target name. However, if a file already exists with that target name, the operation will fail. This is why we need to set the <b>fFlags</b> field in the <b>SHFILEOPSTRUCT</b> structure to a value of FOF_RENAMEONCOLLISION. This flag tells the <b>SHFileOperation</b> to give the file a special name if a file with that name already exists.</p>
<p>
Because the <b>SHFileOperation</b> returns a value of zero despite the fact that the function may fail, we again make a call to the <b>DoesFileExist</b> function to make sure the source filename actually exists. If the file does not exist, we pass the Rename_Error value back to the calling program.</p>
<pre><code>Public Sub RenameThisFile(File name As String, Target As String)
 &nbsp;&nbsp; On Error Resume Next
 
 &nbsp;&nbsp; Dim FileStruct As SHFILEOPSTRUCT
 &nbsp;&nbsp; Dim P As Boolean
 &nbsp;&nbsp; Dim X As Long
 
 &nbsp;&nbsp; P = DoesFileExist(File name)
 &nbsp;&nbsp; If P = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pFrom = File name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.pTo = Target
 &nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.fFlags = FOF_RENAMEONCOLLISION + FOF_SILENT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileStruct.wFunc = FO_RENAME
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = SHFileOperation(FileStruct)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Rename_Error, "FileOperation::RenameThisFile", Err.Description
 &nbsp;&nbsp; End If
End Sub
</code></pre>
<h2>Conclusion</h2>
<p>
From the discussion in this article, you can see that manipulating files through the use of a class is quite simple. The FileOperations class included with this article contains all of the methods needed to copy, delete, move, and rename files. In addition, a demonstration program shows how to call each of the FileOperations methods to perform a specific file operation.</p>
<h2>Bibliography</h2>
<p>
SHFileOperation QuickInfo (MSDN Library).</p>
<p>
SHFILEOPSTRUCT QuickInfo (MSDN Library).</p>
<p>
"Shh! Be Very, Very Quiet, We're Hunting New Functions," <i>Programming the Windows 95 User Interface </i>(MSDN Library).</p>
<p>
<a href="msdn_msdn1.htm">"Tip 1: Determining If a File Already Exists."</a> (MSDN Library).</p>
</BODY>
</HTML>

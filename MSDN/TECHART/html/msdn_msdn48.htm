<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 48: Copying a Window's Client Area to a Bitmap</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn48"></a></sup>Tip 48: Copying a Window's Client Area to a Bitmap</h1>
<p>
Created: April 6, 1995</p>
<h2>Abstract</h2>
<p>
In a Visual Basic® application, you may want to save the contents of a window's client area to the Windows® Clipboard application. You can save data to the Clipboard in a variety of formats. This article explains how the client area of a window can be saved to the Clipboard in Windows as a bitmap file.</p>
<h2>Creating Bitmap Formats in the Clipboard</h2>
<p>
To save a window's client area to a bitmap format in the Windows® Clipboard application, you need to create a memory device context that is compatible with the bitmap file format. (A memory device context is simply a block of memory that represents a display surface, such as a window.) Next, you use the <b>SelectObject</b> function to save the object. The <b>BitBlt</b> function is then used to copy the image from the memory device context to a bitmap.</p>
<p>
The Windows application programming interface (API) provides several functions that let your program modify the Clipboard application. In the example below, we first open communication with the Clipboard by calling the <b>OpenClipboard</b> function. Likewise, when we have finished using the Clipboard, we execute the <b>CloseClipboard</b> function. To actually write data to the Clipboard, we call the <b>SetClipboardData</b> function.</p>
<p>
To declare the <b>SetClipboardData</b> function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your form:</p>
<pre><code>Declare Function SetClipboardData Lib "User" (ByVal wFormat As Integer, ByVal 
 &nbsp; hMem As Integer) As Integer
</code></pre>
<p>
Note that this statement must be typed as one single line of code.</p>
<p>
The <b>SetClipboardData</b> function requires two arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=12%><i>wFormat</i></td>
<td width=88%>An integer value containing the Clipboard format that should be used to write data to the Clipboard. The CONSTANT.TXT file contains a list of the Clipboard data formats that can be used.</td>
</tr>
<tr valign=top>
<td width=12%><i>hMem</i></td>
<td width=88%>An integer value containing the memory block's global memory handle. This data must be in the same format as specified by the <i>wFormat</i> argument.</td>
</tr>
</table><br>
<p>
Because we want to save the contents of a window to the Clipboard, we call the <b>SetClipboardData</b> function by passing it the MF_BITMAP constant, which tells the function to save the window's data in the Clipboard in bitmap file format.</p>
<h2>Example Program</h2>
<p>
The following program shows how to copy the contents of a window's client area (the entire window, in this case) to the Clipboard in bitmap format. After executing this program, you can verify that the data was saved to the Clipboard by running Clipboard Viewer from the Accessories group in Program Manager.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each statement must be typed as a single line of text):<pre><code>Declare Function BitBlt Lib "GDI" (ByVal hDestDC As Integer, ByVal X As Integer, 
 &nbsp; ByVal Y As Integer, ByVal nWidth As Integer, ByVal nHeight As Integer, ByVal 
 &nbsp; hSrcDC As Integer, ByVal XSrc As Integer, ByVal YSrc As Integer, ByVal dwRop 
 &nbsp; As Long) As Integer

Declare Function GetWindowDC Lib "User" (ByVal hWnd As Integer) As Integer

Declare Function CreateCompatibleDC Lib "GDI" (ByVal hDC As Integer) As Integer

Declare Function CreateCompatibleBitmap Lib "GDI" (ByVal hDC As Integer, ByVal 
 &nbsp; nWidth As Integer, ByVal nHeight As Integer) As Integer

Declare Function SelectObject Lib "GDI" (ByVal hDC As Integer, ByVal hObject As 
 &nbsp; Integer) As Integer

Declare Function OpenClipboard Lib "User" (ByVal hWnd As Integer) As Integer

Declare Function SetClipboardData Lib "User" (ByVal wFormat As Integer, ByVal 
 &nbsp; hMem As Integer) As Integer

Declare Function CloseClipboard Lib "User" () As Integer

Const SRCCOPY = &amp;HCC0020
Const MF_BITMAP = &amp;H4
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  Dim hwnddc As Integer
  Dim hmemdc As Integer
  Dim hbitmap As Integer
  Dim oldbitmap As Integer
  Dim res As Integer
  Form1.ScaleMode = 3
  hwndc% = GetWindowDC(Form1.hWnd)
  hmemdc% = CreateCompatibleDC(Form1.hDC)
  hbitmap% = CreateCompatibleBitmap(Form1.hDC, Form1.ScaleWidth, Form1.ScaleWidth)

  oldbitmap% = SelectObject(hmemdc%, hbitmap%)

  res% = BitBlt(hmemdc%, 0, 0, Form1.ScaleWidth, Form1.ScaleHeight, hwndc%, 0, 0, SRCCOPY)

  res% = OpenClipboard(Form1.hWnd)
  res% = SetClipboardData(hbitmap%, MF_BITMAP)
  res% = CloseClipboard()
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
"<a href="msdn_msdn31.htm">Tip 31: Creating the Windows Wallpaper Effect.</a>" </p>
</BODY>
</HTML>

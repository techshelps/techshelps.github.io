<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 158: Retrieving the Windows Directory</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn158"></a></sup>Tip 158: Retrieving the Windows Directory</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® directory contains such files as Windows-based application files, initialization files, and Help files. This article explains how to retrieve the path of the Windows directory from within your Microsoft Visual Basic® application.</p>
<h2>Using the GetWindowsDirectory Function</h2>
<p>
From within a Microsoft® Visual Basic® application, you can determine the path of the Microsoft Windows® directory. To do this, you use the Windows application programming interface (API) <b>GetWindowsDirectory</b> function. You must include the following <b>Declare</b> statement in the General Declarations section of your form:</p>
<pre><code>Private Declare Function GetWindowsDirectory Lib "kernel32" 
 &nbsp; Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long)
 &nbsp; As Long
</code></pre>
<p>
The <b>GetWindowsDirectory</b> function requires two arguments: a buffer that will hold the path of the directory after the function is called, and the length of the directory's buffer. You must make sure that the buffer is long enough to hold the path—otherwise, an error will occur.</p>
<p>
After calling this function, the path of the Windows directory is stored in the <i>lpBuffer</i> argument.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve the path of the Windows directory.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statement to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetWindowsDirectory Lib "kernel32" Alias 
 &nbsp; "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) 
 &nbsp; As Long
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim DirName As String
 &nbsp;&nbsp; DirName = GetWindowsDir()
 &nbsp;&nbsp; text1.Text = DirName
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>GetWindowsDir</b>. Add the following code to this function:<pre><code>Function GetWindowsDir() As String
 &nbsp;&nbsp; Dim Temp As String
 &nbsp;&nbsp; Dim Ret As Long
 &nbsp;&nbsp; Const MAX_LENGTH = 145

 &nbsp;&nbsp; Temp = String$(MAX_LENGTH, 0)
 &nbsp;&nbsp; Ret = GetWindowsDirectory(Temp, MAX_LENGTH)
 &nbsp;&nbsp; Temp = Left$(Temp, Ret)
 &nbsp;&nbsp; If Temp &lt;&gt; "" And Right$(Temp, 1) &lt;&gt; "\" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetWindowsDir = Temp &amp; "\"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetWindowsDir = Temp
 &nbsp;&nbsp; End If
End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. The path of the Windows directory appears in the <b>Text Box</b> control.</p>
</BODY>
</HTML>

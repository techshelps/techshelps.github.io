<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building AutoPlay-Enabled CD-ROM Titles and Games</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_autoplay"></a>Building AutoPlay-Enabled CD-ROM Titles and Games</h1>
<p>
Alex St. John and Jeff Camp</p>
<p>
November 1, 1994<br>
Version 1.0</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="3222">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the AutoPlay sample application for this technical article.</a></p>
<h2>What Is AutoPlay?</h2>
<p>
CD-ROM–based titles and games are consumer products. Customers use them because they want to, and they expect the experience to be easy and enjoyable. Too often, it isn't.</p>
<p>
The purpose of AutoPlay is to make multimedia title installation and configuration under Microsoft® Windows™ 95 virtually as simple as putting a cartridge in a home video game machine. Simply put, AutoPlay notices when the user loads a CD, and immediately launches whatever application is named in the AUTORUN.INF file on that disk. This modest feature will make Windows 95–based multimedia titles and games accessible even to the most electronically challenged consumer. From the consumer's perspective, AutoPlay-enabled CD-ROM based products <i>run themselves.</i></p>
<h3>Running AutoPlay-Enabled Titles Under Windows 95</h3>
<p>
If a CD-ROM–based product has the Windows 95 logo on it, you know that it is AutoPlay-enabled. To run it under Windows 95, just insert the disc in the CD-ROM drive. The software automatically does the right thing.</p>
<h3>Running CD-ROM Titles Under Windows 3.1</h3>
<p>
With MS-DOS® and Windows 3.1 today, the easiest part of running most titles is paying for them. The hard work begins when you get home:
<ol>
<li>
First, insert the disk in the CD-ROM drive. <br><br></li>
<li>
Next, read the instructions. (Were they printed on the disk? Oh, sorry; pull the disk out and copy or memorize them.)<br><br></li>
<li>
Next, use the File Run command in the Program Manager or the File Manager to start the installation program indicated in the directions. Your CD-ROM drive is probably listed as "D:" but not necessarily so.<br><br></li>
<li>
Follow the installation instructions. The setup program will probably create an icon in the Program Manager to make it easier to run the next time.<br><br></li>
<li>
Next time you want to run the program, just find the icon in the Program Manager. (Keep looking; it's surely in there somewhere—maybe just covered up. The graphic on the icon probably disappeared last time you restarted Windows, so ignore the graphics and just look at the labels. . .)<br><br></li>
<li>
Now double-click the icon. (Hold your hand perfectly still or it doesn't work. Oops—you have to put in the disk first. Sorry! Put it in and try again.)</li>
</ol>
<h3>Running CD-ROM Titles Under MS-DOS</h3>
<p>
You thought running CD-ROMs under Windows 3.1 was tough? Try setting up an MS-DOS–based CD-ROM title without AutoPlay! MS-DOS–based products stand to gain more from implementing AutoPlay than any other single category of CD-based application. </p>
<h2>How AutoPlay Works</h2>
<h3>New 32-Bit Driver Architecture</h3>
<p>
AutoPlay is functionality enabled by the new 32-bit, protected-mode driver architecture in Windows 95. Because the operating system can now detect the insertion of media in a CD-ROM drive, it has the opportunity to do some intelligent processing whenever this occurs. In Windows 95, whenever a CD is inserted, Windows immediately checks to see if the CD has a PC filesystem. If it does, Windows 95 looks for a file named AUTORUN.INF.</p>
<h3>The AUTORUN.INF File</h3>
<p>
The minimalist AUTORUN.INF file only needs to contain three lines of text:</p>
<pre><code>[autorun]
open=filename.exe
icon=filename.ico
</code></pre>
<p>
FILENAME.EXE can name any executable to be run when the CD is inserted. Unless a path is specified, Windows 95 looks for FILENAME.EXE in the root of the inserted CD. You can specify a relative path in order to locate FILENAME.EXE in a subdirectory. For example, to run FILENAME.EXE from the FOO directory, use the syntax</p>
<pre><code>open=foo\filename.exe.
</code></pre>
<p>
This will run the file in the FOO directory on the CD, regardless of whether the user's CD-ROM drive is mapped to D:, E:, or something else entirely. Note that executing a file located in a subdirectory does not change the current directory.</p>
<p>
Microsoft recommends that you always use the open= line of the AUTORUN.INF file to launch a "teaser" application—see the following section for details.</p>
<p>
The expression "icon=filename.ico" specifies an icon to represent the AutoPlay-enabled CD in the Windows 95 user interface. This feature makes it easy for users to identify the contents of the CD-ROM drive without having to pull out the disk to look. When the drive does not contain an AutoPlay-enabled CD, the system uses a default icon in its place. You can also specify a .BMP, .EXE, or .DLL file on the icon= line. If a file contains more than one icon, specify the icon number that you want. For example, icon=filename.exe,1 would display the <i>second</i> icon from FILENAME.EXE. (The first icon is number 0.)</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The icon= line of AUTORUN.INF always executes relative to the directory where AUTORUN.INF is located. If you want to specify an absolute path location for an icon, use the syntax "defaulticon=path".</p>
<p>
When users point to an icon in the Windows 95 user interface and click the right mouse button, Windows 95 presents a "short-cut menu" for that icon. If an AUTORUN.INF is present on a CD-ROM, Windows 95 automatically adds "AutoPlay" to the shortcut menu and sets it as the default behavior—double-clicking the icon will execute whatever is specified on the open= line. </p>
<p>
You can add additional short-cut menu items for your CD by adding them to the AUTORUN.INF file. To add short-cuts, use the following syntax:</p>
<pre><code>shell\verb\command=filename.exe
shell\verb=Menu Item Name
</code></pre>
<p>
In the above syntax, "Menu Item Name" is the shortcut menu item that users will see. It can contain spaces and mixed-case letters. To set a keyboard accelerator for the menu item, precede any letter with an ampersand. Use a verb to associate the command and executable using a short name without spaces. Users will not see the verb unless you omit "Menu Item Name" from AUTORUN.INF.</p>
<p>
For example, to add the command "Read <u>M</u>e" to the shortcut menu for your product, include the following in AUTORUN.INF:</p>
<pre><code>shell\readit\command=notepad foo\readme.txt
shell\readit=Read &amp;Me
</code></pre>
<p>
Normally, "AutoPlay" is the default menu item defined for any AutoPlay-enabled disc. If you would like to set a different verb as the default, add the following line to your AUTORUN.INF:</p>
<pre><code>shell=verb
</code></pre>
<p>
When the user double-clicks on the icon for your disc, the command associated with "verb" is executed.</p>
<h3>Suppressing AutoPlay</h3>
<p>
AutoPlay can be suppressed by holding down the shift key when inserting a CD. This will prevent AUTORUN.INF from being parsed and executed.</p>
<h2>Writing Good AutoPlay Applications</h2>
<p>
AutoPlay is a simple yet tremendously powerful feature. For the AutoPlay feature to work well, it is very important that CD title developers abide by certain conventions to ensure that users have a consistent, positive, and stress-free experience with AutoPlay applications. The conventions are as follows.</p>
<h3>Launch a "Teaser" Application to Provide Instant Feedback to the User</h3>
<p>
It is very important for users to receive virtually instantaneous feedback when they insert an AutoPlay CD. We strongly suggest that you use the "open =" line of the AUTORUN.INF file to launch a small "teaser" .EXE file that loads very quickly. Please note that some CD drives take longer than others to report a disk insertion event to the system—just because it seems fast enough on your machine doesn't necessarily mean that your customers will be so lucky! Small is good. </p>
<h3>Give the User a Way Out</h3>
<p>
The "Teaser" application also allows the user a way to cancel the loading of a title. With a pile of AutoPlay disks sitting on the desk, it is easy to accidentally pop the wrong one in! The teaser applet should put up a dialog that includes, at a minimum, OK and Cancel options. It may also include other options, such as install and uninstall, but the most important features of the teaser are that it (1) responds quickly, (2) clearly identifies the title played, and (3) makes it simple to back out if it was not what the user expected. Here is an example of a very simple "teaser" screen created by Humongous Entertainment for their AutoPlay-enabled Freddi Fish title:</p>
<p>
<img src="autoplay_1.gif" border=0></p>
<p class=label>
<b>Teaser Screen for Freddi Fish, by Humongous Entertainment</b></p>
<h3>Use a Thread to Load Ahead</h3>
<p>
Users will probably click "OK" (or, in the above example, "Play") in the teaser screen most of the time. In anticipation of this fact, you may want to take advantage of threading under Windows 95 to begin loading your application into memory in the background <i>even before the user clicks OK</i>. This will significantly reduce the perceived load time for your application.</p>
<h3>Don't Hog the Hard Disk</h3>
<p>
AutoPlay opens a whole new set of distribution possibilities for multimedia titles: Because AutoPlay-enabled titles are so easy to run, they could be rented in the same way as video tapes and game cartridges, and consumers could choose to try and/or buy many of them. To minimize support hassles, retailers should avoid selling or renting PC titles that are "drive hogs." It will be bad for the industry in general if multimedia applications eat up drive space to such an extent that consumers can no longer buy and install additional products. Here's how to avoid the problem:
<ul type=disc>
<li>
If possible, run from the CD directly, without running any installation program whatsoever.<br><br></li>
<li>
If your title has installation requirements and needs to use the hard drive, it should install only the functional components necessary to executing the title, and should provide complete uninstall options for those.<br><br></li>
<li>
If you want to use the drive as a temporary or permanent data cache, provide the user with options in the Teaser application that will enable the cached data to be discarded when quitting the title or game.<br><br></li>
<li>
Generally, follow kindergarten rules: if you want to play, just be sure to clean up when you're done.</li>
</ul>
<h3>Use the Registry</h3>
<p>
The Registry is a feature of Windows 95 and Windows NT that completely replaces the need for .INI or other application configuration files that clutter the file system. Registry manipulation application programming interfaces (APIs) are documented in the Win32® Software Development Kit (SDK).</p>
<p>
If your title has installation requirements, use the Registry to store configuration information. This will allow you to use the Teaser application to do the right thing when the user puts your product in the CD-ROM drive:
<ul type=disc>
<li>
If your product is being used for the first time (no Registry entries), present a teaser screen with setup options.<br><br></li>
<li>
If the product is already installed (listed in the Registry), present a Teaser screen with just the OK and Cancel options.</li>
</ul>
<h2>AutoPlay for MS-DOS Applications</h2>
<p>
In addition to being a great solution for native Windows multimedia applications and games, AutoPlay can also be extremely useful for MS-DOS–based titles. AutoPlay can be used to install, configure, and run MS-DOS–based applications as easily as it can Windows-based applications. Because each MS-DOS–based application in Windows 95 can be configured with its own unique icon, CONFIG.SYS, and AUTOEXEC.BAT, it is possible to use Windows 95 to intelligently generate correct configuration files for an MS-DOS–based application specifically for the machine it is being installed on. The startup application can then cause the MS-DOS–based application to launch and boot within a window, or even cause Windows 95 to effectively reboot to run it if necessary, and immediately return to Windows when the application closes.</p>
<h2>How AUTORUN.INF Behaves on Windows 3.1 and MS-DOS</h2>
<p>
Because AUTORUN.INF is simply ignored by MS-DOS and Windows 3.1, there is no harm in putting it on titles in preparation for Windows 95. Thus, a Windows 95 AUTORUN.INF and an AutoPlay teaser are wise things to consider for any MS-DOS or Windows title shipping today, if it is anticipated that the product will still be in the market when Windows 95 ships.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 203: Searching a Disk for Files Based on Filename and Path</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn203"></a></sup>Tip 203: Searching a Disk for Files Based on Filename and Path</h1>
<p>
February 28, 1996</p>
<h2>Abstract</h2>
<p>
This article includes a Microsoft® Visual Basic® version 4.0 program that runs on the Microsoft Windows® 95 operating system. You can use this program to search a disk drive for a file or group of files. The search can be initiated from the root directory of the disk drive or from any specific directory. The found files are listed in a <b>List Box</b> control with their corresponding paths.</p>
<h2>Using a Recursive Search Routine to Find Files on a Disk</h2>
<p>
When you are running the Microsoft® Windows® 95 operating system, you can selectively search a disk for a specific file in a directory by using the Visual Basic® version 4.0 <b>Dir</b> function. However, when you want to find all occurrences of a specific file in a directory or when you want to find all matching wildcard filenames on a disk, you need to perform a recursive search routine.</p>
<p>
The example program below lets you search a disk for a file or group of files matching the target filename. The target filename can be any valid MS-DOS® filename, including wildcard filenames. In addition, you can specify the directory from which you want to start the search process.</p>
<p>
To find all occurrences of the target filename, a hidden <b>List Box</b> control is used to hold the names of all directories in which the search is to be performed. The <b>Dir[$]()</b> function is used in a Do-While loop to retrieve the names of all subdirectories under the target directory. As each directory name is found, its name is added to the hidden <b>List Box</b> control.</p>
<p>
When you have retrieved the names of all directories stored under the target directory, you call the <b>List_Files</b> procedure. The <b>List_Files</b> procedure then performs another recursive search routine by using the same technique as the <b>Get_Files</b> procedure to find all files that match the target filename. The full path of the found file is added to the second <b>List Box</b> control. When all files and directories have been processed, the program quits.</p>
<h2>Example Program</h2>
<p>
This program shows how to search for a filename by specifying a directory from which to begin the search.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1:<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;Dim XFilename As String
 &nbsp;&nbsp; Dim StrtPath As String
</code></pre>
</li>
<li>
Create a new procedure called <b>Get_Files</b>. Add the following code to this procedure:<pre><code>Private Sub Get_Files(FPath As String)
 &nbsp;&nbsp; Dim File_Name As String
 &nbsp;&nbsp; Dim File_Path As String
 &nbsp;&nbsp; Dim File_Read As Integer
 &nbsp;&nbsp; Dim X As Boolean
 &nbsp;&nbsp; Dim I As Integer

 &nbsp;&nbsp; File_Path = FPath &amp; "\"
 &nbsp;&nbsp; File_Name = Dir$(File_Path, vbDirectory)
 &nbsp;&nbsp; File_Read = 1
 &nbsp;&nbsp; X = False

 &nbsp;&nbsp; Do While File_Name &lt;&gt; ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If File_Name &lt;&gt; "." And File_Name &lt;&gt; ".." Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If GetAttr(File_Path &amp; File_Name) = vbDirectory Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrtPath = File_Path &amp; File_Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem StrtPath
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Files StrtPath
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If X = True Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$(File_Path, vbDirectory)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = 2 To File_Read
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Name = Dir$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File_Read = File_Read + 1
 &nbsp;&nbsp; Loop
End Sub
</code></pre>
</li>
<li>
Create a new procedure called <b>List_Files</b>. Add the following code to this procedure:<pre><code>Private Sub List_Files()
 &nbsp;&nbsp; Dim XIndex As Integer
 &nbsp;&nbsp; Dim XName As String
 &nbsp;&nbsp; Dim X_Filename As String

 &nbsp;&nbsp; For XIndex = 0 To List1.ListCount - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XName = List1.List(XIndex) &amp; "\" &amp; XFilename
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X_Filename = Dir(XName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If X_Filename &lt;&gt; "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.AddItem List1.List(XIndex) &amp; "\" &amp; X_Filename
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do While True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X_Filename = Dir
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo exit_loop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If X_Filename &lt;&gt; "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.AddItem List1.List(XIndex) &amp; "\" &amp; X_Filename
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Do
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Loop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
exit_loop:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next XIndex
End Sub
</code></pre>
</li>
<li>
Add a <b>Label</b> control to Form1. Label1 is created by default. Set its <b>Caption</b> property to "Directory".<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>Text</b> property to an empty string.<br><br></li>
<li>
Add a second Label control to Form1. Label2 is created by default. Set its <b>Caption</b> property to "Filename".<br><br></li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default. Set its <b>Text</b> property to an empty string.<br><br></li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default. Set its <b>Visible</b> property to False.<br><br></li>
<li>
Add a second <b>List Box</b> control to Form1. List2 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Search".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim XLen As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; XLen = Len(Text1.Text)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If Mid$(Text1.Text, XLen, 1) = "\" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrtPath = Left$(Text1.Text, XLen - 1)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrtPath = Text1.Text
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; 
 &nbsp;&nbsp; XFilename = Text2.Text
 &nbsp;&nbsp; 
 &nbsp;&nbsp; List1.Clear
 &nbsp;&nbsp; List2.Clear
 &nbsp;&nbsp; 
 &nbsp;&nbsp; List1.AddItem StrtPath
 &nbsp;&nbsp; Get_Files StrtPath
 &nbsp;&nbsp; List_Files
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If List2.ListCount = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Unable to find file"
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Search completed"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Suppose that you want to find all files with the extension .TXT in the directory C:\DOCS. In the first <b>Text Box</b> control, type the name of the directory from which you want to start the search. Next, type the name of the file you want to find in this starting directory. You may use any valid MS-DOS filename, as well as wildcard characters. Click the Search button. The program displays the results of its search in the <b>List Box</b> control and displays a message box indicating that the search has been completed.</p>
<h2>Additional References</h2>
<p>
Knowledge Base Q104685. "How to Retrieve Hidden/System Files Using Dir[$]() Function."</p>
<p>
Knowledge Base Q119396. "How to Quickly List the Contents of a Directory."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 170: Positioning the Mouse Pointer over a Specific Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn170"></a></sup>Tip 170: Positioning the Mouse Pointer over a Specific Control</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to position the mouse pointer over a specific control in a Microsoft® Visual Basic® application.</p>
<h2>Positioning the Mouse Pointer</h2>
<p>
Sometimes you may need to position the mouse pointer over a specific control in a Microsoft® Visual Basic® application, even though that control does not have the current focus.</p>
<p>
To position the mouse pointer over a specific control, you need to use the Microsoft Windows® application programming interface (API) <b>GetWindowRect</b> and <b>SetCursorPos</b> functions. The <b>GetWindowRect</b> function is used to retrieve the coordinates of a control. The <b>Declare</b> statement for the <b>GetWindowRect</b> function is:</p>
<pre><code>Private Declare Function GetWindowRect Lib "user32" (ByVal hwnd As Long, lpRect 
 &nbsp; As RECT) As Long
</code></pre>
<p>
The <b>GetWindowRect</b> function requires two arguments. The first argument is the handle of the control. The second argument is the address of a <b>RECT</b> structure.</p>
<p>
After calling the <b>GetWindowRect</b> function, the control's coordinates are stored in the <b>RECT</b> structure. The <b>RECT</b> structure is defined as:</p>
<pre><code>Type RECT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Top As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right As Long
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bottom As Long
End Type
</code></pre>
<p>
Note that the left, top, right, and bottom positions of the control are stored in the <b>RECT</b> structure. After you know the exact position of the control, you need to use the <b>SetCursorPos</b> function to position the mouse pointer directly over the control. The <b>Declare</b> statement for the <b>SetCursorPos</b> function is:</p>
<pre><code>Private Declare Function SetCursorPos Lib "user32" (ByVal x As Long, 
 &nbsp; ByVal y As Long) As Long
</code></pre>
<p>
Then, to position the mouse pointer over the control, you retrieve the coordinates of the control's upper-left corner by using the values stored in the <b>Left</b> field and <b>Top</b> field of the <b>RECT</b> structure. Next, you call the <b>SetCursorPos</b> function with these two values to actually position the mouse pointer over the control.</p>
<h2>Example Program</h2>
<p>
This program shows how to move the mouse pointer over a specific control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetWindowRect Lib "user32" (ByVal hwnd As Long, lpRect 
 &nbsp; As RECT) As Long
Private Declare Function SetCursorPos Lib "user32" (ByVal x As Long, ByVal y As 
 &nbsp; Long) As Long
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Dim MousePos As RECT

 &nbsp;&nbsp; Call GetWindowRect(Command2.hwnd, MousePos)
 &nbsp;&nbsp; Call SetCursorPos(MousePos.Left, MousePos.Top)
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Default</b> property to False.<br><br></li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Default</b> property to True.<br><br></li>
<li>
From the Visual Basic Insert menu, select Module to create a new module. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>Type</b> structure to Module1.Bas:<pre><code>Type RECT
 &nbsp;&nbsp; Left As Long
 &nbsp;&nbsp; Top As Long
 &nbsp;&nbsp; Right As Long
 &nbsp;&nbsp; Bottom As Long
End Type
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Notice that the focus is set to the first <b>Command Button</b> control, but the mouse pointer is positioned over the second <b>Command Button</b> control. In short, the mouse pointer is placed over the control whose <b>Default</b> property is set to True.</p>
</BODY>
</HTML>

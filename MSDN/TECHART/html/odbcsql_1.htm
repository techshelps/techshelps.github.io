<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setup and Connecting</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Setup and Connecting</h1>
<p>
An ODBC application has two methods of giving an ODBC driver the information the driver needs to connect to the proper server and database. Either the application can connect using an existing ODBC data source containing this information, or it can call either <b>SQLDriverConnect</b> or <b>SQLBrowseConnect</b>, which provides the information in the connection string parameter.</p>
<h3>Setting up a Data Source</h3>
<p>
ODBC data sources contain information that tells a driver how to connect to a database. ODBC data sources can be created by using the ODBC Administrator application in Control Panel or by an application calling the ODBC <b>SQLConfigDataSource</b> function.</p>
<p>
Data source definitions are stored in C:\Windows\System\Odbc.ini for the Microsoft Windows® version 3.<i>x</i> and Windows for Workgroups version 3.<i>x</i> operating systems.</p>
<p>
Win32 data sources fall into one of two categories (for details, see Microsoft Knowledge&nbsp;Base article Q136481):
<ul type=disc>
<li>
Windows&nbsp;NTuser-specific data sources and Windows&nbsp;95 data sources<p class=tl>
On the Microsoft Windows NT® operating system, user data sources are specific to the Windows&nbsp;NTaccount under which they were defined. User-specific data sources are not always visible to applications running as Windows&nbsp;NT services. Windows&nbsp;95 data sources are stored in the following registry key:<br>
HKEY_CURRENT_USER\Software\ODBC\Odbc.ini.</P></li>
<li>
Windows NT–system data sources<p class=tl>
On Windows NT, system data sources are visible to all Windows&nbsp;NTaccounts on the computer. System data sources are always visible to applications running as Windows&nbsp;NTservices. The ODBC driver manager that ships with Microsoft Office 97 also supports system data sources on Windows&nbsp;95 clients. Windows&nbsp;NTsystem data sources are stored in the following registry key:<br>
HKEY_LOCAL_MACHINE\Software\ODBC\Odbc.ini.</P></li>
</ul>
<p>
Information about the drivers installed on a client is stored in C:\Windows\System\Odbcinst.ini in Windows 3.<i>x</i> or Windows for Workgroups 3.<i>x</i> and in HKEY_LOCAL_MACHINE\Software\ODBC\Odbcinst.ini in Windows&nbsp;NTand Windows&nbsp;95.</p>
<p>
Each driver needs to store driver-specific information in its data sources. When a user adds a data source using ODBC Administrator, the driver displays a dialog box, where the user specifies data source information. When a data source is defined with <b>SQLConfigDataSource</b>, the function accepts an attribute string parameter that can contain driver-specific keywords. All of the <b>SQLConfigDataSource</b> driver-specific keywords for the SQL&nbsp;Server ODBC driver have counterparts in the dialog box that displays when using ODBC Administrator.</p>
<p>
Here's an example <b>SQLConfigDataSource</b> call that sets up a SQL&nbsp;Server data source referencing a server using DHCP on TCP/IP:</p>
<pre><code>RETCODE&nbsp;&nbsp; retcode;
UCHAR&nbsp;&nbsp; *szDriver = "SQL&nbsp;Server";
UCHAR&nbsp;&nbsp; *szAttributes =
 &nbsp; "DSN=my65dsn\0DESCRIPTION=SQLConfigDSN Sample\0"
 &nbsp; "SERVER=my65server\0ADDRESS=HRServer\0NETWORK=dbmssocn\0"
 &nbsp; "DATABASE=pubs\0";
retcode = SQLConfigDataSource(NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ODBC_ADD_DSN,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szDriver,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szAttributes);
</code></pre>
<h3>Driver-specific SQLConfigDataSource Keywords</h3>
<p>
The following sections describe the driver-specific keywords supported by the Microsoft SQL&nbsp;Server ODBC driver.</p>
<h4>SERVER, NETWORK, and ADDRESS</h4>
<p>
The SERVER, NETWORK, and ADDRESS parameters associate a data source with a specific instance of SQL&nbsp;Server on the network. These parameters are directly related to the advanced entries created with the SQL&nbsp;Server Client Configuration Utility:
<ul type=disc>
<li>
The SERVER parameter specifies a name or label for the connection entry.<br><br></li>
<li>
The NETWORK parameter is the name of the Net-Library module to use, without the .dll suffix (for example, Dbmssocn, not Dbmssocn.dll).<br><br></li>
<li>
The ADDRESS parameter is the network address of the Windows&nbsp;NTserver running SQL&nbsp;Server.</li>
</ul>
<p>
If ADDRESS is present, it is always used as the network address for the connection. If ADDRESS is not present, then SERVER is used as the network address for the connection. </p>
<p>
Here's an example entry to make a named pipes connection to a server:</p>
<pre><code>SERVER=xyz,NETWORK=dbnmpntw,ADDRESS=HRServer
</code></pre>
<p>
The following entry evaluates to the same network address:</p>
<pre><code>SERVER=HRServer,NETWORK=dbnmpntw
</code></pre>
<p>
Here's an example entry to make a sockets connection to the same computer:</p>
<pre><code>SERVER=tcpxyz,NETWORK=dbmssocn,ADDRESS=123.123.123.123,1433
</code></pre>
<p>
There are two special cases to consider:
<ul type=disc>
<li>
Connecting to a SQL&nbsp;Server running on the same computer as the client.<p class=tl>
The ODBC data source for this case is specified as:</P><pre><code>SERVER=(local),NETWORK=(default),ADDRESS=(default)
</code></pre>
<p class=tl>
When using this data source, the driver attempts to connect to a SQL&nbsp;Server on the same computer using Windows&nbsp;NTlocal-named pipes instead of a network implementation of named pipes.</P></li>
<li>
Setting up a data source that connects to a server using whatever Net-Library is currently set as the default on the client. <p class=tl>
An example of an entry for this case is:</P><pre><code>SERVER=HRServer,NETWORK=(default),ADDRESS=(default)
</code></pre>
<p class=tl>
The default Net-Library is set using the SQL&nbsp;Server Client Configuration Utility.</P></li>
</ul>
<p>
The SERVER, NETWORK, and ADDRESS parameters specified on SQL&nbsp;Server ODBC driver data sources operate the same way as the Server, DLL, and Connection String parameters specified for advanced entries made with the SQL&nbsp;Server Client Configuration Utility. For more information about the advanced-entry parameters, see the <i>Microsoft SQL&nbsp;Server Administrator's Companion</i>. The same parameters can be specified in the data source creation dialog box displayed in ODBC Administrator. </p>
<p>
The relationship between the parameters is illustrated in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>SQLConfigDataSource</b></td>
<td class=label width=31%><b>ODBC Administrator</b></td>
<td class=label width=40%><b>SQL Client Configuration Utility</b></td>
</tr>
<tr valign=top>
<td width=29%>SERVER</td>
<td width=31%>Server</td>
<td width=40%>Server</td>
</tr>
<tr valign=top>
<td width=29%>NETWORK</td>
<td width=31%>Network Library</td>
<td width=40%>DLL</td>
</tr>
<tr valign=top>
<td width=29%>ADDRESS</td>
<td width=31%>Network Address</td>
<td width=40%>Connection String</td>
</tr>
</table><br>
<p>
If a data source is defined with the SERVER, NETWORK, and ADDRESS parameters, a SQL&nbsp;Server advanced connection entry is made in the registry, and can be viewed using the SQL Client Configuration Utility.</p>
<h4>DATABASE</h4>
<p>
This parameter specifies the default database for the ODBC data source.</p>
<h4>LANGUAGE</h4>
<p>
This parameter specifies the default national language to use.</p>
<h4>OEMTOANSI</h4>
<p>
This parameter specifies whether to convert extended characters to OEM values.</p>
<p>
SQL&nbsp;Server is usually run with one of three code pages: 
<ul type=disc>
<li>
437 code page.<p class=tl>
The default code page for U.S. MS-DOS computers.</P></li>
<li>
850 code page.<p class=tl>
The code page typically used by UNIX systems.</P></li>
<li>
ISO 8859-1 (Lantin1 or ANSI) code page.<p class=tl>
The code page defined as a standard by the ANSI and ISO standards organizations. The default code page for U.S. Windows computers. Sometimes called the 1252 code page.</P></li>
</ul>
<p>
The 437 and 850 code pages are sometimes collectively referred to as the OEM code pages.</p>
<p>
All three code pages define 256 different values to use in representing characters. The values from 0 to128 represent the same characters in all three code pages. The values from 129 to 255, which are known as the extended characters, represent different characters in all three code pages. </p>
<p>
Because ODBC applications are Windows applications, they generally use ANSI code page 1252. If they are communicating with a SQL&nbsp;Server also running ANSI code page 1252, there is no need for character-set conversion. If they connect to a server running a 437 or 850 code page however, the driver must be informed that it should convert extended characters from their 1252 values to 437 or 850 values before sending them to the server. In this case, the data source should have OEMTOANSI=YES. For a more in-depth discussion of SQL&nbsp;Server code pages, see Microsoft Knowledge&nbsp;Base article Q153449.</p>
<h4>TRANSLATIONDLL</h4>
<p>
This parameter specifies the name of the ODBC translation DLL to use with the data source.</p>
<h4>TRANSLATIONNAME</h4>
<p>
This parameter specifies the name of the translator to use with the data source.</p>
<h4>TRANSLATIONOPTION</h4>
<p>
This parameter specifies whether translation should be done on the data going to SQL&nbsp;Server. YES specifies translation; NO specifies no translation. For more information about ODBC translation, see the <i>ODBC 2.0 Programmer's Reference</i>.</p>
<h4>USEPROCFORPREPARE</h4>
<p>
This parameter specifies whether the driver generates stored procedures to support the ODBC <b>SQLPrepare</b> function. For more information, see "<b>SQLExecDirect</b> vs. <b>SQLPrepare</b>/<b>SQLExecute</b>."</p>
<p>
The following driver-specific <b>SQLConfigDataSource</b> keywords are new in SQL&nbsp;Server 6.5 SP2.</p>
<h4>QuotedID</h4>
<p>
This parameter specifies whether the driver should issue a SET QUOTED IDENTIFIERS ON option when connecting to a SQL&nbsp;Server version 6.0 or later database. YES specifies QUOTED_IDENTIFIERS is ON; NO specifies the option is OFF. For more information, see&nbsp; "SET Options Used by the Driver."</p>
<h4>AnsiNPW</h4>
<p>
This parameter specifies whether the driver should SET ON the ANSI_NULLS, ANSI_PADDING, and ANSI_WARNINGS options when connecting to a SQL&nbsp;Server version 6.5 or later database. YES specifies the options are ON; NO specifies they are OFF. For more information, see "SET Options Used by the Driver."</p>
<p>
The following<b> </b>driver-specific <b>SQLConfigDataSource</b> keywords are new in SQL&nbsp;Server 6.5.</p>
<h4>QueryLogFile</h4>
<p>
This parameter specifies the file name the driver should use to log long-running queries. Include the full path name for the file. For more information, see "ODBC Driver Profiling Features."</p>
<h4>QueryLog_ON</h4>
<p>
This parameter specifies whether the data source should do query profiling. 1 specifies profiling is done; omitting the parameter specifies no profiling. For more information, see "ODBC Driver Profiling Features."</p>
<h4>QueryLogTime</h4>
<p>
This parameter specifies the interval for long-running queries. The interval is specified in milliseconds. If a query is outstanding for a period exceeding the QueryLogTime, it is written to the QueryLogFile. For more information, see "ODBC Driver Profiling Features."</p>
<h4>StatsLogFile</h4>
<p>
This parameter specifies the file name the driver should use to log long performance statistics. Include the full path name for the file. For more information, see "ODBC Driver Profiling Features."</p>
<h4>StatsLog_On</h4>
<p>
This parameter specifies whether the data source should log performance statistics. 1 specifies profiling is done; omitting the parameter specifies no profiling. For more information, see "ODBC Driver Profiling Features."</p>
<h4>Trusted_Connection</h4>
<p>
This parameter specifies whether the data source should use trusted connections when connecting to SQL&nbsp;Server. 1 specifies trusted connections; omitting the parameter specifies no trusted connections. For more information, see "Integrated and Standard Security."</p>
<h3>Creating Data Sources in ODBC Administrator</h3>
<p>
When you add, modify, or double-click a SQL&nbsp;Server data source in ODBC Administrator, the SQL&nbsp;Server ODBC driver displays the <b>ODBC SQL&nbsp;Server</b> <b>Setup</b> dialog box. The parameters in this dialog box control the same features that are controlled by the <b>SQLConfigDataSource</b> keywords earlier in this paper, although they have slightly different names. Many of the options are in the dialog box that displays when you click <b>Options</b>. To specify the query and performance profiling options, click <b>Options</b>, and then click <b>Profiling</b>.</p>
<h3>Driver-specific SQLDriverConnect Keywords</h3>
<p>
An ODBC application can connect to a SQL&nbsp;Server without referencing a data source:</p>
<pre><code>RETCODE&nbsp;&nbsp; retcode;
UCHAR&nbsp;&nbsp; szDSN[MAXBUFLEN+1] =
 &nbsp; "DRIVER={SQL&nbsp;Server};SERVER=MyServer;"
 &nbsp; "UID=sa;PWD=astring;APP=Generic32;DATABASE=pubs";
UCHAR&nbsp;&nbsp; szUID[MAXUID+1] = "sa",
 &nbsp;&nbsp;&nbsp;&nbsp; szAuthStr[MAXAUTHSTR+1] = "password",
 &nbsp;&nbsp;&nbsp;&nbsp; szConnStrOut[MAXBUFLEN+1];
SWORD&nbsp;&nbsp; swStrLen;
retcode = SQLDriverConnect(hdbc1,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szDSN,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (SWORD)strlen(szDSN),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szConnStrOut,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAXBUFLEN,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;swStrLen,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL_DRIVER_NOPROMPT);
</code></pre>
<p>
The SQL&nbsp;Server ODBC driver supports three classes of keywords on <b>SQLDriverConnect</b>:
<ul type=disc>
<li>
The standard ODBC keywords<p class=tl>
The SQL&nbsp;Server ODBC driver supports the four standard ODBC <b>SQLDriverConnect</b> keywords: DSN, UID, PWD, and DRIVER.</P></li>
<li>
The driver-specific <b>SQLConfigDataSource</b> keywords<p class=tl>
On <b>SQLDriverConnect</b> the SQL&nbsp;Server ODBC driver supports all of the driver-specific keywords it supports for <b>SQLConfigDataSource</b>. See the list earlier in this paper for a description of these driver-specific keywords.</P></li>
<li>
The driver-specific keywords APP and WSID<p class=tl>
In addition to supporting the same driver-specific keywords as <b>SQLConfigDataSource</b>, <b>SQLDriverConnect</b> also supports the two driver-specific keywords APP and WSID.</P></li>
</ul>
<h4>APP</h4>
<p>
This keyword specifies the application name to be recorded in the <b>program_name</b> column in <b>master.dbo.sysprocesses</b>. APP is equivalent to a DB-Library application calling the <b>DBSETLAPP</b> function in C or the <b>SQLSetLApp</b> function in the Visual&nbsp;Basic® programming system.</p>
<h4>WSID</h4>
<p>
This keyword specifies the workstation name to be recorded in the <b>hostname</b> column in <b>master.dbo.sysprocesses</b>. WSID is equivalent to a DB-Library application calling the <b>DBSETLHOST</b> function in C or the <b>SQLSetLHost</b> function in Visual&nbsp;Basic.</p>
<h3>Connection Messages</h3>
<p>
The SQL&nbsp;Server ODBC driver returns SQL_SUCCESS_WITH_INFO on a successful <b>SQLConnect</b>, <b>SQLDriverConnect</b>, or <b>SQLBrowseConnect</b>. When an ODBC application calls <b>SQLError</b> after getting SQL_SUCCESS_WITH_INFO, it can receive the following messages:
<ul type=disc>
<li>
5701—indicates SQL&nbsp;Server initially putting the user's context into the default database defined at the server for the login ID used in the connection<br><br></li>
<li>
5703—indicates the language being used on the server<br><br></li>
<li>
If either the ODBC data source has a default database specified or the application specified the DATABASE keyword on <b>SQLDriverConnect</b> or <b>SQLBrowseConnect</b>, there will be a second 5701 message that indicates the user's context has been switched to the database requested.</li>
</ul>
<p>
The following example shows these messages being returned on a successful connect by the System Administrator (SA) login. The SA login has its default database at the server defined as the <b>master</b> database, the server is running US English, and the connect used an ODBC data source that specified <b>pubs</b> as the default database.</p>
<pre><code>Full Connect:
 &nbsp; szSqlState = "01000", *pfNativeError = 5701,
 &nbsp; szErrorMsg="[Microsoft][ODBC SQL&nbsp;Server Driver][SQL&nbsp;Server]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changed database context to 'master'."
 &nbsp; szSqlState = "01000", *pfNativeError = 5703,
 &nbsp; szErrorMsg="[Microsoft][ODBC SQL&nbsp;Server Driver][SQL&nbsp;Server]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changed language setting to 'us_english'."
 &nbsp; szSqlState = "01000", *pfNativeError = 5701,
 &nbsp; szErrorMsg="[Microsoft][ODBC SQL&nbsp;Server Driver][SQL&nbsp;Server]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changed database context to 'pubs'."
Successfully connected to DSN 'my60server'.
</code></pre>
<p>
Applications can ignore these 5701 and 5703 messages; they are informational only. Applications cannot, however, ignore a return of SQL_SUCCESS_WITH_INFO return code on the <b>SQLConnect</b>, <b>SQLDriverConnect</b>, or <b>SQLBrowseConnect</b>. This is because messages other than 5701 and 5703 that do require action may be returned. For example, if a driver connects to a SQL&nbsp;Server with outdated system stored procedures, one of the messages returned through <b>SQLError</b> is:</p>
<pre><code>SqlState:&nbsp;&nbsp; 01000
pfNative:&nbsp;&nbsp; 0
szErrorMsg: "[Microsoft][ODBC SQL&nbsp;Server Driver]The ODBC
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catalog stored procedures installed on server
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; my421server are version 02.00.4127; version 06.00.0115
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or later is required to ensure proper operation.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Please contact your system administrator."
</code></pre>
<p>
An application's error handling routines for SQL&nbsp;Server connections should call <b>SQLError</b> until it returns SQL_NO_DATA_FOUND and act on any messages other than the ones that return a <i>pfNative</i> code of 5701 or 5703.</p>
<h3>Integrated and Standard Security</h3>
<p>
SQL&nbsp;Server offers three security models for authenticating connection attempts:
<ul type=disc>
<li>
Standard security<p class=tl>
The SA defines SQL&nbsp;Server logins with passwords in SQL&nbsp;Server and then associates the logins with users in individual databases. With older versions of SQL&nbsp;Server, all connection attempts must specify a valid login and password. SQL&nbsp;Server version 6.0 or 6.5 also allows trusted connections to a server running standard security. SQL&nbsp;Server logins are separate from Windows&nbsp;NTuser IDs.</P></li>
<li>
Integrated security<p class=tl>
The SA defines logins for those Windows&nbsp;NTuser accounts that are allowed to connect to SQL&nbsp;Server. Users do not have to specify a separate login and password when they connect to SQL&nbsp;Server after logging on to the Windows&nbsp;NTnetwork. When they attempt to connect, the Net-Library attempts a trusted connection to SQL&nbsp;Server. If the user's Windows&nbsp;NTaccount is one that the SA specified to SQL&nbsp;Server, the connection succeeds.</P></li>
<li>
Mixed security<p class=tl>
The SA defines both SQL&nbsp;Server logins and Windows&nbsp;NTaccounts as SQL&nbsp;Server logins. Users with validated Windows&nbsp;NTaccounts can connect using trusted connections; other users can connect using standard security with the SQL&nbsp;Server logins.</P></li>
</ul>
<p>
The SQL&nbsp;Server ODBC driver always uses a trusted connection when connecting to a server running integrated security. The driver can also be instructed to open trusted connections when connecting to a server that is running with standard or mixed security. Only the named pipes or multiprotocol Net-Libraries support integrated security and trusted connections. </p>
<p>
There are two ways to tell the driver to use trusted connections:
<ul type=disc>
<li>
Driver-specific data source options<p class=tl>
When defining a data source using the ODBC Administrator, you can select<b> Use Trusted Connection</b>. When defining a data source using <b>SQLConfigDataSource</b>, an application can specify Trusted_Connection=1.</P></li>
<li>
Driver-specific connection options<p class=tl>
Before making a connect request, the application can set a driver-specific option:</P><pre><code>SQLSetConnectOption(hdbc, SQL_INTEGRATED_SECURITY, SQL_IS_ON);
</code></pre>
</li>
</ul>
<p>
Integrated security offers several benefits:
<ul type=disc>
<li>
Passwords do not need to be stored in the application.<br><br></li>
<li>
Passwords are never present in the SQL&nbsp;Server TDS packets.<br><br></li>
<li>
Integrated security is easy to administer because the SA can use the SQL Security Manager utility to create SQL&nbsp;Server logins from existing Windows&nbsp;NTaccounts.</li>
</ul>
<h3>Protocol Considerations</h3>
<p>
Integrated security is only available when using either the named pipes or multiprotocol Net-Libraries. When using the multiprotocol Net-Library, the SA can also configure the server to encrypt packets sent across the network, so that even users of network sniffers cannot see the data. The named pipes and multiprotocol Net-Libraries can also work with either a TCP/IP, SPX/IPX, or NetBEUI protocol stack. This means a client running only a TCP/IP protocol stack can use either the Windows sockets, named pipes, or multiprotocol Net-Libraries. The Windows sockets (TCP/IP), SPX/IPX, Appletalk, DECNet, and Banyan Vines Net-Libraries only work with their single, associated, protocol stack.</p>
<p>
Due to their added functionality, such as the encryption feature, the multiprotocol Net-Libraries are somewhat slower than the others. Testing at Microsoft has found that the TCP/IP Net-Libraries are somewhat faster than the other Net-Libraries. Other considerations, however, such as database design, indexing, and the design of queries and applications, usually have a greater impact on performance than the choice of a Net-Library.</p>
<p>
Applications running against SQL&nbsp;Server 6.0 or 6.5 can sometimes improve their performance by resetting the TDS network packet size. The default packet size is set at the server, and is 4K. 4K generally gives the best performance. Applications can set the packet size themselves if testing shows that they perform better with a different packet size. ODBC applications can do this by calling <b>SQLSetConnectionOption</b> with the SQL_PACKET_SIZE option before connecting. Some applications may perform better with a larger packet size, but performance improvements are generally minimal for packet sizes larger than 8K.</p>
<h3>Verifying and Testing Data Sources</h3>
<p>
The Odbcping.exe utility can be used to check whether an ODBC connection can be made between a client and a SQL&nbsp;Server.&nbsp; The command syntax to use the utility is:</p>
<p>
<b>odbcping</b> {<b>/S</b><i>servername</i> | <b>/D</b><i>datasource</i>} <b>/U</b><i>login_id</i> <b>/P</b><i>password</i></p>
<p>
where</p>
<p>
<i>servername<br>
 &nbsp;&nbsp;&nbsp; </i>Is the network name of the server running SQL&nbsp;Server.</p>
<p>
<i>datasource<br>
 &nbsp;&nbsp;&nbsp; </i>Is the name of an ODBC data source.</p>
<p>
<i>login_id<br>
 &nbsp;&nbsp;&nbsp; </i>Is the SQL&nbsp;Server login ID.</p>
<p>
<i>password<br>
 &nbsp;&nbsp;&nbsp; </i>Is the login password.</p>
<p>
You must specify either <b>/S</b> or <b>/D</b>, but not both. (The version of <b>odbcping</b> that ships with SQL&nbsp;Server 6.0 will not accept the <b>/D</b> parameter, only <b>/S</b>, <b>/U</b>, and <b>/P</b>.)</p>
<p>
When <b>odbcping</b> makes a successful connection, it displays a message indicating the connection was successful and the versions of the driver and server. For example:</p>
<pre><code>CONNECTED TO SQL&nbsp;SERVER
ODBC SQL&nbsp;Server Driver Version: 02.65.0201
SQL&nbsp;Server Version: SQL&nbsp;Server for Windows&nbsp;NT6.50 - 6.50.201 (Intel X86)
 &nbsp; Apr 3 1996 02:55:53
 &nbsp; Copyright (c) 1988-1997 Microsoft Corporation
</code></pre>
<p>
If the connect attempt is not successful, <b>odbcping</b> displays the errors it receives.&nbsp; (The 6.0 version of <b>odbcping</b> does not display the Native Error code.) For example:</p>
<pre><code>COULD NOT CONNECT TO SQL&nbsp;SERVER
SQLState: 01000&nbsp; Native Error: 2
Error Message: [Microsoft][ODBC SQL&nbsp;Server Driver][dbnmpntw]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionOpen (CreateFile()).
SQLState: 08001&nbsp; Native Error: 6
Error Message: [Microsoft][ODBC SQL&nbsp;Server Driver][dbnmpntw]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Specified SQL&nbsp;Server not found.
</code></pre>
<p>
The <i>pfNative</i> (or Native Error) code is important in diagnosing connection problems. For more information, see "pfNative Error Codes."</p>
</BODY>
</HTML>

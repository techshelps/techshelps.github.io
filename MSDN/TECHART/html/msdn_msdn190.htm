<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 190: Adding Hot Key Access to Your Visual Basic Application</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn190"></a></sup>Tip 190: Adding Hot Key Access to Your Visual Basic Application</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to add a hot key that allows the user of a running application to quickly switch to your Microsoft® Visual Basic® application.</p>
<h2>Providing Task Switching by Adding a Hot Key</h2>
<p>
Under the Microsoft® Windows® 95 operating system, you can easily switch between running applications by clicking on an application's icon on the taskbar or by pressing the ALT+TAB key combination. When developing a Microsoft Visual Basic® application, you may want to provide a quick method for the user to switch to the application. This can be done by adding a hot key to your application.</p>
<p>
Whenever the user presses the specific hot key that you have assigned to your Visual Basic application, your application receives the focus and is maximized. The user does not have to use ALT+TAB or the Windows 95 taskbar to activate your application.</p>
<p>
Suppose that whenever the user presses the PAUSE key, you want to activate your Visual Basic application. Therefore, you need to monitor the computer system so that the application is activated only when this keystroke is detected on the keyboard. This can be accomplished by using the Windows application programming interface (API) <b>SendMessage</b> function.</p>
<p>
The <b>SendMessage</b> function can be used to send a specific message to a window. To use this function, add the following <b>Declare</b> statement to the General Declarations section of your form:</p>
<pre><code>Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" 
 &nbsp; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, 
 &nbsp; lParam As Long) As Long
</code></pre>
<p>
The <b>SendMessage</b> function takes the following four arguments:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=13%><i>hWnd</i></td>
<td width=87%>A long value containing the window's handle. The message is sent to this window.</td>
</tr>
<tr valign=top>
<td width=13%><i>wMsg</i></td>
<td width=87%>A long value containing the message you want to send to <i>hWnd</i>.</td>
</tr>
<tr valign=top>
<td width=13%><i>wParam</i></td>
<td width=87%>A long value containing additional message-dependent information.</td>
</tr>
<tr valign=top>
<td width=13%><i>lParam</i></td>
<td width=87%>A long value containing additional message-dependent information.</td>
</tr>
</table><br>
<p>
In the example program below, you want to set PAUSE as the hot key to your application. Because you want the application to be activated when PAUSE is pressed, you need to send a WM_SETHOTKEY message to the application's window—in this case, Form1. A WM_SETHOTKEY message is used to assign a specific key as an application's hot key. Therefore, we need to use the <b>SendMessage</b> function to send a WM_HOTKEY message to the application. This message is placed at the top of the thread's message queue, which in turn allows the PAUSE key to gain immediate attention when it is detected.</p>
<p>
Note that a window can have only one hot key associated with it at any one time. In addition, child windows cannot have hot keys associated with them. Finally, if you assign a hot key to a window that already has a hot key assigned to it, the new hot key replaces the original one.</p>
<h2>Example Program</h2>
<p>
This program below shows how to add hot key access to your Visual Basic applications.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" 
 &nbsp; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, 
 &nbsp; lParam As Long) As Long
Const WM_SETHOTKEY = &amp;H32
Const VK_PAUSE = &amp;H13
</code></pre>
</li>
<li>
Add the following code to the Click event for Form1:<pre><code>Private Sub Form_Click()
 &nbsp;&nbsp; Dim I As Long
 &nbsp;&nbsp; I = SendMessage(Me.hwnd, WM_SETHOTKEY, VK_PAUSE, 0)
 &nbsp;&nbsp; MsgBox "The Pause key was pressed"
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Each time you click the mouse on the form, the "The Pause key was pressed" message box is displayed. Now, minimize the example program. Control returns to the Visual Basic design environment. Press PAUSE on the keyboard. The example program is immediately maximized and receives the focus.</p>
</BODY>
</HTML>

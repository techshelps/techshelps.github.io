<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cascading Style Sheets in Internet Explorer 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_cssie4"></a>Cascading Style Sheets in Internet Explorer 4.0</h1>
<p>
George Young<br>
Microsoft Corporation</p>
<p>
October 15, 1997 </p>
<p class=indent>
<B><b>Editor's note</b></B>&nbsp;&nbsp;&nbsp;Most of the examples used in this article require Microsoft® Internet Explorer 4.0. If you are not using Internet Explorer 4.0, you will see the code for calling the specified styles, but not the HTML implementation of it. </p>
<p class=indent>
The examples demonstrate the output of particular techniques for applying styles. Although these examples may demonstrate the output of embedded or linked styles, they are all coded using inline styles so that we may restrict the style to the example.</p>
<h3><a name="cssie4_top"></a>Contents</h3>
<p>
<a href="#cssie4_intro">Introduction</a><br>
<a href="#cssie4_add">Adding CSS to Your HTML Documents</a><br>
<a href="#cssie4_apply">Applying CSS Styles to HTML Attributes</a><br>
<a href="#cssie4_selector">Selectors</a><br>
<a href="#cssie4_cascade">Cascading and Inheritance</a><br>
<a href="#cssie4_imply">Some Implications of CSS for HTML Design</a><br>
<a href="#cssie4_compat">Internet Explorer 3.0 vs. 4.0 Compatibility Issues</a><br>
<a href="#cssie4_ref">CSS Reference Table</a><br>
<a href="#cssie4_conclusion">Conclusion</a><br>
<a href="#cssie4_more">For More Information</a></p>
<h2><a name="cssie4_intro"></a>Introduction</h2>
<p>
With the final release of Internet Explorer 4.0, Microsoft is making good on its commitment to fully support Cascading Style Sheets (CSS), which were introduced in Internet Explorer 3.0. The extended control that CSS gives over Web page presentation and layout in this latest release of the browser is sure to enthrall even the jaded HTML designer. </p>
<p>
CSS, for the uninitiated, is a standard for formatting Web pages that goes well beyond the limitations of HTML. Promulgated by the World Wide Web Consortium (W3C), the Internet's standards body, CSS extends HTML with more than 70 style properties that can be applied to HTML tags. With CSS, Web developers have at their disposal a wealth of additional formatting options for color, spacing, positioning, borders, margins, cursors, and more. </p>
<p>
Internet Explorer 4.0 includes support for the CSS-1 specification, as well as for proposed CSS-2 properties, such as filters and the cursor property, and for the W3C HTML 4.0 specification, which includes inline styles. (To view these specifications, see the W3C site at <a href="http://www.w3c.org/">http://www.w3c.org/</a>.) For example, the developer can apply the "cursor" property to any HTML element, causing the mouse pointer to change when passed over the element.</p>
<pre><code>&lt;SPAN STYLE="cursor:hand;"&gt;When you mouseover this text, the cursor should change to a hand.&lt;/SPAN&gt;
</code></pre>
<p>
Result:</p>
<p>
<SPAN STYLE="cursor:hand;"> When you mouseover this text, the cursor should change to a hand.</SPAN></p>
<p>
In this article, we'll cover the different approaches to applying CSS to HTML documents and present some of the interesting applications of CSS in Internet Explorer 4.0, with examples. After reading the article, you'll be able to start applying CSS to your own pages and take advantage of Internet Explorer's support for this standard to create stunning pages and formatting effects. </p>
<h2><a name="cssie4_add"></a>Adding CSS to Your HTML Documents</h2>
<p>
HTML gives the developer a certain level of control over the formatting of a document. You can set headings (&lt;H1&gt;, &lt;H2&gt;, and so on), make text bold (&lt;B&gt;) or italic (&lt;I&gt;), define lists (&lt;UL&gt; or &lt;OL&gt;), and so forth. However, this level of control is fairly limited. For example, developers have no control over the absolute positioning of items on the page, and they are limited in their ability to control size, spacing, and color of page elements. Seeking to surpass these limits, developers have resorted to workarounds such as converting text to graphics, creating complicated table layouts, using images for white space control, and using proprietary HTML extensions and add-ons. </p>
<p>
CSS shatters the HTML barrier by putting at the developer's disposal a set of standard properties specifically geared toward page formatting and layout. These properties are applied to the document without modifying the underlying HTML. Browsers that are not CSS-compliant will still see the page in its unaltered HTML state, while browsers that support CSS will see the page in all its CSS-enhanced glory. (See <a href="#cssie4_coping">"Coping with Non-CSS Browsers"</a>.) </p>
<p>
From the designer's perspective, there are two steps to adding CSS styles to an HTML document: declaring the styles and applying the styles to HTML elements. For example, "I want some blue, bold, italic text" would be a simple declaration, while "I want all my document subheadings to be blue, bold, and italic" would be an application of the style. </p>
<p>
Unfortunately, we have to do a bit more than simply utter a few statements in front of the monitor—at least until voice recognition and HTML editing technologies get more sophisticated. We need to understand the syntax of declaring CSS styles and the different ways in which we can apply these styles to our HTML documents.</p>
<p>
Once you've mastered these skills, you'll wistfully remember the days when, to change all of your document subheadings to blue, bold, and italic, you had to manually add &lt;FONT COLOR&gt; and &lt;I&gt; tags to each subheading (since it was already displayed as bold by default). With CSS, you just declare one style, and you're done. For example:</p>
<pre><code>H3 { font-color:blue; font-style:italic; }
</code></pre>
<p>
Imagine the possibilities. . .</p>
<h2><a name="cssie4_apply"></a>Applying CSS Styles to HTML Attributes</h2>
<p>
You can add CSS properties to your documents in four ways:
<ol>
<li>
Using inline styles<br><br></li>
<li>
Using an embedded style sheet<br><br></li>
<li>
Using a linked style sheet<br><br></li>
<li>
Using an imported style sheet</li>
</ol>
<h3>Using Inline Styles</h3>
<p>
To use an inline style, you add a STYLE attribute to a specific instance of an HTML element, using the following syntax:&nbsp; </p>
<p>
&lt;<i>tag</i> STYLE="<i>property:value</i>; <i>property:value</i>; . . ."&gt;&lt;/<i>tag</i>&gt;</p>
<p>
For example:</p>
<pre><code>&lt;B STYLE="color:navy;"&gt;In the navy.&lt;/B&gt;
</code></pre>
<p>
The output will look like this:</p>
<p>
<!--HtmlStart-->
<B STYLE ="color:navy;">In the navy.</B>  
<!--HtmlEnd--></p>
<p>
An inline style may be applied to any HTML element, from &lt;A&gt; to &lt;XMP&gt;, and modifies only the specific instance (occurrence in the document) of the element to which you apply it. In the example above, only that instance of &lt;B&gt; would be navy—the rest of the &lt;B&gt; tags in the document would be unaffected.</p>
<p>
Using inline styles to format a document allows for great precision, but can be pretty tedious to code. If you have a lot of styles, the inline style method can also result in a fair amount of unnecessary code. Inline styles are also somewhat difficult to maintain, because the CSS properties are scattered around the page. </p>
<h3>Using Embedded Style Sheets</h3>
<p>
To use an embedded style sheet, you define a style block (delimited by the &lt;STYLE&gt; and &lt;/STYLE&gt; tags), which should be placed in the &lt;HEAD&gt; section of the document. This block consists of a set of style rules, where each rule defines a style for an HTML element or group of elements. A style rule has two parts:&nbsp; 
<ul type=disc>
<li>
A selector that identifies an HTML element or group of elements <br><br></li>
<li>
A declaration of the style properties to be applied to that selector</li>
</ul>
<p>
The generic syntax for a style rule is as follows: </p>
<p>
<i>selector</i> { <i>property:value</i> ; <i>property</i>:<i>value</i>; . . . }</p>
<p>
Case (or capitalization) is not important in CSS, but syntax is critical. Each style rule must start with a selector or group of selectors, followed by an open brace ({), followed by a set of declarations. Each of these declarations ends with a semicolon and each property is separated from its value(s) by a colon (:), ending with a close brace(}). As with script blocks, it is a good idea to contain style rules within SGML comment delimiters, to hide them from browsers that do not support CSS. For example, the following style rules: </p>
<pre><code>&lt;STYLE&gt;
&lt;!--
B { text-transform:uppercase; }
P { border:silver thick solid; background-color:turquoise; padding:10px; text-align:center; }
--&gt;
&lt;/STYLE&gt;

&lt;P&gt;Not every paragraph has a silver lining with a &lt;B&gt;bold&lt;/B&gt; outlook.&lt;/P&gt;
</code></pre>
<p>
would result in the following output:</p>
<p>
<!--HtmlStart-->
<P STYLE="border:silver thick solid; background-color:turquoise; padding:10px; text-align:center;">Not every paragraph has a silver lining with a <B STYLE="text-transform:uppercase;">bold</B> outlook.</P>
<!--HtmlEnd--></p>
<p>
In the example above, our style sheet has two rules. The first rule declares uppercase text for the &lt;B&gt; selector. The second rule declares a silver, thick, solid border, a background color of turquoise, a padding of 10 pixels, and centered text for the &lt;P&gt; selector. According to this style sheet, all paragraphs (defined with &lt;P&gt;) in the document will have these border, color, padding, and text alignment features, and all bold text defined with the &lt;B&gt; tag will be uppercase (in addition to being bold).</p>
<p>
Using embedded style sheets offers greater flexibility and ease of maintenance than using inline styles. For example, if we wanted to change the background color of all paragraphs in the document, we would change only one thing: the value associated with the "background-color" property in the style rule for &lt;P&gt;. The developer can thus quickly experiment with different formatting combinations for the document by modifying existing style rules and adding new ones.</p>
<h3>Using Linked Style Sheets</h3>
<p>
You can keep your style sheet in a separate file and link to it from a document or set of documents, using a &lt;LINK&gt; tag in the &lt;HEAD&gt; section of the linking document, as follows:</p>
<pre><code>&lt;LINK REL="stylesheet" TYPE="text/css" HREF="mystyles.css"&gt;
</code></pre>
<p>
The linked sheet (mystyles.css) consists of a set of style rules, exactly like an embedded style sheet, except that the style rules are not enclosed in the&lt;STYLE&gt; element with comment (&lt;!-- --&gt;) tags. Linking to an external sheet allows the developer to apply a set of styles across a group of HTML documents, thus extending the benefits of embedded style sheets to a set of pages.&nbsp; </p>
<h3><a name="cssie4_import"></a>Using Imported Style Sheets</h3>
<p>
An external style sheet may also be imported into a document by using the @import property in a style sheet:</p>
<pre><code>@import: url(mystyles.css) ;
</code></pre>
<p>
The @import tag should appear at the <i>beginning</i> of a style block or a linked sheet, before any declarations. Imported style sheets rules are applied <i>before</i> the rules defined for the containing style sheet, putting them at the bottom of the "pecking order" of the importing sheet. (See <a href="#cssie4_cascade">"Cascading and Inheritance."</a>)</p>
<h3>Which Method Should You Use?</h3>
<p>
You'll probably want to use inline styles when you want to affect the formatting of only a small number of distinct elements, and use style sheets, either embedded or linked, when you want to affect a document or set of documents on a global scale. </p>
<p>
You may freely combine the use of linked, embedded, and inline styles in the same document. For example, you might want to have a master list of styles for all documents, which all of your pages link to. On each page, you could then have an embedded style sheet that adds to or modifies the master styles. Finally, you could use an inline style to add to an embedded style or modify it for a few instances of an element on a given page. Wherever the same CSS property is set, the most local declaration takes precedence. More on this idea of precedence in a bit.</p>
<h2><a name="cssie4_selector"></a>Selectors</h2>
<p>
So far, we've only used the HTML tag name as a selector for applying style rules. Style sheets offer two additional selectors, CLASS and ID, which give the designer additional control over which elements should assume which styles.</p>
<h3>HTML Element as Selector</h3>
<p>
Using the HTML tag as a selector, as we have done in the examples so far, is an excellent way to apply CSS styles if you want all elements of a given type to appear with the same formatting. This approach is the more rigid of the three, but it is an excellent way to enforce formatting consistency across a document. One common use of HTML element selectors is to modify the appearance of hypertext links in the document. The following will cause all instances of the Anchor tag, &lt;A&gt;, to appear without the default underline normally associated with links. For example, this code:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
A { text-decoration:none; }
--&gt;
&lt;/STYLE&gt;
</code></pre>
<p>
would result in the following output:</p>
<p>
<!--HtmlStart-->
This is <A STYLE="text-decoration:none;" HREF="javascript:alert('I am a non-underlined link')">a link</A> and this in <A STYLE="text-decoration:none;" HREF="javascript:alert('I am another non-underlined link.')">another.</A>
<!--HtmlEnd--></p>
<h3>CLASS as Selector</h3>
<p>
If you expect to have formatting variations for different instances of a single element, or you would like to have different elements share the same format, using a class name as a selector is a good approach. This is often referred to as "sub-classing" an element. CLASS is an HTML attribute that has no display characteristics and that you can apply to any element, like this:</p>
<p>
&lt;B CLASS="clsRed"&gt;Classy, red, and bold&lt;/B&gt;</p>
<p>
The style rule for clsRed could be declared as follows:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
.clsRed { font-color:red; }
--&gt;
&lt;/STYLE&gt;
</code></pre>
<p>
Note that the selector begins with a period (.), which is the required syntax for class names as selectors. If we add the above rule to the style sheet, every element to which we assign a class name of clsRed will have red text. If an element doesn't have this class name, even if it is of the same type as another element that does, it will not have this style applied. For example, this code:</p>
<pre><code>&lt;B CLASS="clsRed"&gt;Classy, red, and bold.&lt;/B&gt; &lt;BR&gt;
&lt;I CLASS="clsRed"&gt;Red italic.&lt;/I&gt; &lt;BR&gt;
&lt;B&gt;Just bold&lt;/B&gt; and &lt;I&gt;just italic.&lt;/I&gt;
</code></pre>
<p>
would result in the following output:</p>
<p>
<!--HtmlStart-->
<B STYLE="color:red;">Classy, red, and bold.</B> <BR>
<I STYLE="color:red;">Red italic.</I> <BR>
<B>Just bold</B> and <I>just italic.</I>
<!--HtmlEnd--></p>
<p>
The choice of class names is one of personal preference; developers can choose whatever naming scheme makes sense. Classes are often defined in terms of their formatting, as in the case above. They can also be defined in other, more generic, terms; for example:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
.clsImportant { font-color:red; font-weight:bold; text-decoration:underline; }
.clsCode { font-family:Courier; font-size:10pt; }
--&gt;
&lt;/STYLE&gt;
</code></pre>
<p>
The style rule applied to the clsImportant class turns text red, bold, and underlined. Elements of the clsCode class will contain text that is of a specific font family (Courier) and size (10 pt). In both cases, we can go back and change the style declaration to a different color, and the class name will still make sense. </p>
<p>
I personally like to preface a class name with "cls" to help identify it as a class name. (This convention is especially useful for scripting.) Obviously, you are free to adopt my conventions or use any other naming scheme you find useful.</p>
<h3>ID as Selector</h3>
<p>
Like CLASS, ID is an HTML attribute that does not affect the display of an element and can be applied to any element. In general, while class names are usually given to groups of element instances sharing some common function or format (relative importance, context, and so on), ID is used to identify one specific instance of an element. </p>
<p>
Style rules selected by the ID attribute are declared using the pound sign (#) to precede the selector, as follows:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
#idPinkP { color:pink; text-indent:10px; font-size:12pt; }
#idBoldItal { font-weight:bold; font-style:italic; }
--&gt;
&lt;/STYLE&gt;

&lt;P ID="idPinkP"&gt;
...je vois la vie en &lt;SPAN ID="idBoldItal"&gt;rose&lt;/SPAN&gt;...&lt;/P&gt;
</code></pre>
<p>
Result:</p>
<p>
<!--HtmlStart-->
<P STYLE="color:pink">...je vois la vie en <SPAN STYLE="font-weight:bold; font-style:italic;">rose</SPAN>...</P>
<!--HtmlEnd--></p>
<p>
Note that we closed the paragraph with &lt;/P&gt;, which tells the browser that the style associated with the &lt;P&gt; element should no longer be applied. You may want to review the " HTML Elements" section of the Internet Client SDK (MSDN Library, SDK documentation) to see which HTML elements have a closing tag. </p>
<p>
ID thus serves as a reference to a single instance of an element on the page. As such, you may have noted, using ID as the selector is basically the same as using an inline style for a specific element. The only added benefit of using ID is that all the style declarations can be kept together at the top of the page, which makes it easier to modify existing styles and to keep track of what is going on as you begin applying styles to your documents. </p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>If you are scripting styles, there is an advantage to using inline styles: An inline style property value is exposed as a property value of the style object, whereas a style applied in a style sheet is not. In either case, inline or embedded, you can modify the value of the style object, but you can examine its initial value only if it is set with an inline style.</p>
<h3>Grouped Selectors</h3>
<p>
If more than one selector share the same style, they may be grouped in a single rule, separated by commas. This is done mainly to reduce document weight. For example, if heading levels 1 to 3 share the same font-face and color, we can combine the selectors into one declaration, as follows:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
H1, H2, H3 { font-family:Tahoma; color:indianred; }
--&gt;
&lt;/STYLE&gt;
</code></pre>
<h3>Contextual Selectors</h3>
<p>
If you want a given style to apply to instances of one selector inside of another (such as &lt;I&gt;&lt;/I&gt; tags that occur inside of &lt;B&gt;&lt;/B&gt; tags), you can declare the style with a contextual selector. </p>
<p>
A contextual selector is a series of space-delimited individual selectors in a declaration, such as:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
H4 I { color:moccasin; }
--&gt;
&lt;/STYLE&gt; 
</code></pre>
<p>
Here, only instances of &lt;I&gt; within &lt;H4&gt; will have the style declared above.</p>
<h3>Choosing Selectors</h3>
<p>
You will probably find yourself using a combination of the selector types above depending on the complexity of the document, the universality of the style property, and your own personal preferences. All three methods may coexist harmoniously, as in the following example:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
BODY { background-color:ivory; }
P { padding:10px; }
.clsCode { font-family:Courier; font-size:10pt; }
#idPara1 { text-align:right; letter-spacing:2pt; }
#idPara2 { text-align:left; }
--&gt;
&lt;/STYLE&gt;
</code></pre>
<p>
When this stylesheet is implemented with HTML code as follows:</p>
<pre><code>&lt;P ID="idPara1"&gt;
Some spacey, right-aligned text.
&lt;/P&gt;
&lt;P ID="idPara2" CLASS="clsCode"&gt;
Some left-aligned, code-ish looking text.
&lt;/P&gt;
</code></pre>
<p>
We see this displayed:</p>
<pre><!--HtmlStart-->
<DIV STYLE="background:ivory;">
&nbsp;
<P STYLE="padding:10px; text-align:right; letter-spacing:2pt;">
Some spacey, right-aligned text.
</P>
<P STYLE="padding:10px; text-align:left; font-family:Courier; font-size:10pt; ">
Some left-aligned, code-ish looking text.
</P>
&nbsp;
</DIV>
<!--HtmlEnd-->
</pre>
<h3>A Note on &lt;DIV&gt; and &lt;SPAN&gt; Elements</h3>
<p>
Just as CLASS and ID appear to have little use beyond setting styles (and scripting), the two HTML elements &lt;DIV&gt; and &lt;SPAN&gt; are almost exclusively used as containers for CSS properties. </p>
<p>
&lt;DIV&gt; and &lt;SPAN&gt;, like CLASS and ID—but unlike other HTML elements—have no inherent display characteristics, with one exception each. &lt;DIV&gt; defines a block consisting of text and HTML tags, and separates this block from surrounding content by line breaks, while &lt;SPAN&gt; is an inline element which "flows" in with surrounding content. A quick example should make this distinction clear. The following code:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
DIV { background–color: black; color:red; font-weight:bold; }
SPAN { background–color: royalblue; color:white; }
--&gt;
&lt;/STYLE&gt;

&lt;P&gt;Some text about to run into a big DIV tag &lt;DIV&gt;I am a DIV&lt;/DIV&gt; and narrowly escape.&lt;/P&gt;
&lt;P&gt;Some text about to flow seamlessly into a SPAN tag &lt;SPAN&gt;I am a SPAN&lt;/SPAN&gt; and make a smooth getaway.&lt;/P&gt;
</code></pre>
<p>
creates the following display:</p>
<p>
<!--HtmlStart-->
<P>Some text about to run into a big DIV tag <DIV STYLE="background-color:black; color:red; font-weight:bold;">I am a DIV</DIV> and narrowly escape.</P>
<P>Some text about to flow seamlessly into a SPAN tag <SPAN STYLE="background-color:royalblue; color:white;">I am a SPAN</SPAN> and make a smooth getaway.</P>
<!--HtmlEnd--></p>
<p>
The &lt;DIV&gt; element is used to create a "box" container that the designer wishes to separate from the rest of the document content and (optionally) assign box properties such as borders and margins (see the <a href="#cssie4_ref">"CSS Reference Table"</a>). The &lt;SPAN&gt; element is often used to affect just a portion of text within a block-level element, such as a paragraph. You will note also from the sample above that the width of a &lt;SPAN&gt; is limited to the text which it contains, while &lt;DIV&gt;, like &lt;P&gt;, extends by default over the entire width of the page. This is another distinction between box and inline elements. (You can control the width of a &lt;DIV&gt; with the WIDTH style property.)</p>
<p>
Using &lt;SPAN&gt; and &lt;DIV&gt; elements to apply styles can be tricky. In general, I recommend limiting the use of these two elements, especially if you need to accommodate browsers that don't support CSS. These browsers won't recognize the tags and, hence, won't be able to do anything with &lt;DIV&gt; and &lt;SPAN&gt;. Any formatting you've applied will be lost. Instead of using a set of sub-classed &lt;SPAN&gt; elements to apply a style to your text, consider using another HTML element, such as &lt;B&gt; or &lt;STRONG&gt;, as your selector in the style sheet. And if you can, try replacing &lt;DIV&gt;s with sub-classed &lt;P&gt; elements. Of course, if you don't need to accommodate non-CSS browsers, you can &lt;DIV&gt; and &lt;SPAN&gt; to your heart's content!</p>
<h2><a name="cssie4_cascade"></a>Cascading and Inheritance</h2>
<p>
Since the technology we are discussing is called <i>Cascading Style Sheets</i>, you may have been wondering when the first of these three words would be mentioned. Now is the time. Simply stated, <i>cascading</i> in CSS specifies how an element instance may properly be affected by styles of different types (inline styles, embedded style sheets, linked style sheets, imported style sheets) and selected in a number of ways (an element tag, class selector, or ID selector). The logic is simple: CSS cascades from general to specific, and from top to bottom. </p>
<p>
For example, the following code:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
BODY { background-color:salmon; }
P { margin-left:20px; }
.clsCode { font-family:"Comic Sans MS"; font-size:10pt; color:navy;}
#idP1 { text-align:left; font-weight:bold; }
--&gt;
&lt;/STYLE&gt;

&lt;P ID="idP1" CLASS="clsCode"&gt;Multiple styles, no conflicts.&lt;/P&gt;
</code></pre>
<p>
would result in the following output:</p>
<pre><!--HtmlStart-->
<DIV STYLE="background-color:salmon;">
&nbsp;
<P STYLE="margin-left:20px; font-family:'Comic Sans MS'; font-size:10pt; color:navy; text-align:left; font-weight:bold;">
Multiple styles, no conflicts.</P>
&nbsp;</DIV>
<!--HtmlEnd-->
</pre>
<p>
The formatting for this paragraph is affected by the style rules for &lt;BODY&gt;, &lt;P&gt;, clsCode, and idP1. These potentially conflicting styles are resolved through the laws of cascading and inheritance.</p>
<p>
This means that first, the &lt;BODY&gt;-selected style (background-color) is applied, followed by the &lt;P&gt;-selected style, clsCode, and finally, idP1, with each style taking precedence over the previous one. If we had an inline style defined as well, it would have been applied last, overriding all others. In the cascade, for the same element, a rule with ID as the selector takes precedence over a rule with CLASS as the selector. CLASS, in turn, takes precedence over the HTML element name as selector. This is referred to as "specificity" of the selector. The order of specificity, from greatest to least:
<ul type=disc>
<li>
inline styles<br><br></li>
<li>
ID selector<br><br></li>
<li>
CLASS selector<br><br></li>
<li>
HTML element</li>
</ul>
<p>
Because there were no conflicting style assignments—for example, the background color for the paragraph was set only in the &lt;BODY&gt; rule, and the font size was set only in the clsCode style rule—the styles "trickled down" to the next selector unaltered. </p>
<p>
In the case of conflicting assignments with identical selectors, a style selected by a selector of greater specificity takes precedence. For example, let's apply a color value (white) to the <i>#</i>idP1 declaration. This will "conflict" with the color value specified in the .clsCode specification. Since #idP1 has greater specificity, its color (white) will win out over the previously set color (navy). For example, the following code:</p>
<pre><code>&lt;STYLE&gt;
&lt;!--
BODY { background-color:salmon; }
P { margin-left:20px; }
.clsCode { font-family:"Comic Sans MS"; font-size:10pt; <span class=cfe>color:navy</span><b>;</b>}
#idP1 { text-align:left; font-weight:bold; <span class=cfe>color:white</span><b>; </b>}
--&gt;
&lt;/STYLE&gt;

&lt;P ID="idP1" CLASS="clsCode"&gt;Multiple styles, one conflict.&lt;/P&gt;
</code></pre>
<p>
results in the following output:</p>
<pre><!--HtmlStart-->
<DIV STYLE="background-color:salmon;">
&nbsp;
<P STYLE="margin-left:20px; font-family:'Comic Sans MS'; font-size:10pt; text-align:left; font-weight:bold; color:white;">
Multiple styles, one conflict.
</P>
&nbsp;
</DIV>
<!--HtmlEnd-->
</pre>
<p>
This trickling-down, or "pecking order," of styles is governed to some extent by inheritance, which works hand-in-hand with cascading. The rules of inheritance specify which style properties trickle down in the cascade, and which don't. For example, the "font-family" value we specified in the <i>.</i>clsCode rule trickled down because it is an inherited property. Had we applied a "padding" style to BODY, this style would not have been inherited by idP1, because the "padding" property does not inherit. . (See the <a href="#cssie4_ref">"CSS Reference Table"</a> for a quick overview of which properties are inherited and which are not.)</p>
<p>
You may note in the <a href="#cssie4_ref">"CSS Reference Table"</a> that background properties are not inherited. Yet, the "salmon" background-color set in the BODY style rule in our examples appears in the paragraph. This is because the default value for background is "transparent," so while the property itself is not inherited, it "shines through" unless an opaque color is specified for the element(s) in question. </p>
<p>
So, style declarations inherit almost all properties from their predecessors (in the cascade) and pass them on unaltered, unless the encountered style declaration sets a value for the same CSS property, as in the example above. This means that you can declare a font-family of "Wingdings" for your &lt;BODY&gt; at the very top of the document, and know that your entire document will have this font. </p>
<p>
In summary, <i>cascading</i> establishes the order in which multiple style assignments are evaluated for a given element, and <i>inheritance</i> specifies which style properties are passed on (and which are not) from one element to another.</p>
<p>
This is a very brief discussion of cascading and inheritance. There are exceptions to the rules (after all, what's a good law without some elements that break the rules?), and certain properties apply only to a limited number of elements. For more information on cascading and inheritance, please see the relevant sections in both the Microsoft Internet Client SDK and in the W3C <a href="http://www.w3.org/TR/REC-CSS1">CSS-1 specification</a>.</p>
<h2><a name="cssie4_imply"></a>Some Implications of CSS for HTML Design</h2>
<p>
The extensive level of CSS support in Internet Explorer 4.0 means that developers targeting a popular browser can, for the first time, use CSS as their primary formatting medium, rather than employing nonstandard and time-consuming.</p>
<p>
Depending on how you currently author your HTML documents, putting the power of CSS to use may cause you to adopt some interesting new approaches to how you code. I'll mention a few here, and invite you to share your own experiences and insights via the e-mail address at the end of this article.</p>
<h3>Return to Basics</h3>
<p>
Perhaps the most notable and immediate effect of using CSS is that the HTML in your documents becomes significantly cleaner as you lose the need to stuff your document with tags whose sole purpose is layout tweaking (what I call "twags"). An extension of this is that, no longer needing to use "twags" such as &lt;FONT FACE=. . .&gt;, &lt;FONT SIZE=. . .&gt;, and &lt;FONT COLOR=. . .&gt;, you may find yourself returning to long-forgotten basic elements like the full range of heading tags (&lt;H1&gt;. . .&lt;H7&gt;), &lt;STRONG&gt;, &lt;OL&gt;, and others.</p>
<p>
CSS allows a return to the basics of HTML, which should bring a collective sigh of relief from designers around the world. You will find that your code becomes lighter, cleaner, and easier to read as you begin to use CSS.</p>
<h3>Focus on Structure</h3>
<p>
Once freed from the tyranny of "twags," you should find yourself able to focus again on having your HTML actually reflect the structure of your documents. The separation of document structure from formatting is one of the great benefits of CSS. You can, for example, define seven levels of headings in "pure" HTML, focusing entirely on their importance in the flow and structure of your documents. Then, with a linked style sheet, you can control the formatting of these headings in a globally consistent fashion.</p>
<p>
You want one of your subheadings to be red, small-caps, with a negative margin relative to the document body? No problem. Define this heading according to its function in the document, &lt;H6&gt; for example, and then declare a style in a linked sheet as follows:</p>
<pre><code>H6 { color:red; font-variant:small-caps; margin-left:-5px; }
</code></pre>
<p>
That's it. Formatting is separated from content, style from structure. The important consideration in designing your documents becomes using basic HTML tags to group elements that share the same function in your documents. The formatting is applied subsequently using CSS.</p>
<h3>Rapid Application Development</h3>
<p>
The combination of simple HTML tags and CSS has another wonderful implication for designers: speed of deployment and prototyping. You can develop a full-blown prototype of a page with much greater control and precision, and in a fraction of the time that it would take if you had to use "twags." In addition, changes in formatting, being separate from document structure, can be completed in the time that it takes to modify a single style rule. This is significantly faster than modifying individual HTML tags in your documents, even for those of you who have mastered the art of global search and replace.</p>
<p>
Your boss decides that she wants those &lt;H6&gt; subheadings to be violet in color and lowercase? No problem; change the single style rule's color value and replace the font-variant property with a text-transform property as follows:</p>
<pre><code>H6 { color:violet; text-transform:lowercase; margin-left:-5px; }
</code></pre>
<p>
Refresh the document and there you go. All instances of &lt;H6&gt; reflect the new style. Happy boss, happy you.</p>
<h3>Master Templates</h3>
<p>
You may even find yourself using the time you save with CSS to be a little creative (gasp) and create a few CSS templates that you can apply to your documents with the virtual flip of a switch. Even if creativity isn't in your job definition, there are significant benefits to creating a template for your HTML documents, including savings in time, improvements in quality and consistency, the ability to quickly prototype and test various formatting options, and the ability to apply theme-based styles.</p>
<p>
I've created a sample that demonstrates one possible scripted approach to using templates. (I hope that the functionality of the sample will overcome any aesthetic transgressions I may have committed.) The sample has a menu bar from which you can select one of four named styles, and a script that loads one of the four styles at random when the page is loaded or refreshed. Be sure to take a look at the simplicity of the HTML source code as well as the CSS in the linked sheets.</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5172">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the files for the CSSIE4 sample.</a></p>
<h3><a name="cssie4_coping"></a>Coping with Non-CSS Browsers</h3>
<p>
Even if you need to use "twags" to serve lesser, non-CSS browsers, CSS can still be a useful tool for rapid proofing and design. You can use CSS to play with different layouts and color schemes, and then add twags once you've decided on a look. Start with pure HTML, add CSS, and, finally, add the twags for the other browsers.</p>
<p>
Internet Explorer 4.0 will interpret the CSS and ignore twags that conflict, while non-CSS browsers will not interpret the CSS, and use the twags. So you'll still get the benefits of rapid development and precise control that CSS provides, while catering to lesser browsers.</p>
<h2><a name="cssie4_compat"></a>Internet Explorer 3.0 vs. 4.0 Compatibility Issues</h2>
<p>
Due primarily to the evolution of the CSS standard since the release of Internet Explorer 3.0 last August, you may find that CSS-enhanced pages designed for Internet Explorer 3.0 don't render as nicely in Internet Explorer 4.0, and vice versa. I'll cover some basic differences between the two versions and then suggest a solution.</p>
<p>
Internet Explorer 4.0 adds support for a number of new CSS properties (these are listed in the <a href="#cssie4_ref">"CSS Reference Table"</a>). Apart from these, the major CSS differences between versions 3.0 and 4.0 are in three areas: margins, font-size, and background.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Area</b></td>
<td class=label width=37%><b>3.0 Behavior</b></td>
<td class=label width=36%><b>4.0 Behavior</b></td>
</tr>
<tr valign=top>
<td width=27%>Margins</td>
<td width=37%>Value is <i>in addition</i> to the default for the element.</td>
<td width=36%>Value is <i>absolute</i> for the element (default will not apply).</td>
</tr>
<tr valign=top>
<td width=27%>Font size (specified as percentage)</td>
<td width=37%>Value is relative to the element's default size.</td>
<td width=36%>Value is relative to the <i>parent </i>element's font size.</td>
</tr>
<tr valign=top>
<td width=27%>Background (in block elements such as &lt;P&gt; and &lt;DIV&gt;)</td>
<td width=37%>Fills the color behind the text only.</td>
<td width=36%>Fills the color to the margins of the parent element.</td>
</tr>
</table><br>
<p>
One way to handle these differences is to use a script in the &lt;HEAD&gt; section of your HTML document to detect the browser and link the appropriate external style sheet, as follows:</p>
<pre><code>&lt;SCRIPT LANGUAGE="Javascript"&gt;
&lt;!--
  var bIsIE = navigator.appName == "Microsoft Internet Explorer"
  var bIsIE4 = bIsIE &amp;&amp; navigator.appVersion.indexOf("4.") &gt; -1
  if (bIsIE4) { 
 &nbsp;&nbsp; sCSS = 'LINK REL="stylesheet" TYPE="text/css" HREF="IE4.css"&gt;'
  }
  else {
 &nbsp;&nbsp; if (bIsIE) {
 &nbsp;&nbsp;&nbsp;&nbsp; sCSS = 'LINK REL="stylesheet" TYPE="text/css" HREF="IE3.css"&gt;'
 &nbsp;&nbsp; }
  }
  document.write(sCSS)
//--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h2><a name="cssie4_ref"></a>CSS Reference Table</h2>
<p>
The table below provides a comprehensive list of all CSS-1 and CSS-2 properties (a superscript <sup>2</sup> indicates a CSS-2 property) supported by Internet Explorer 4.0. Each property is listed by property name, followed by a list of valid values and a sample declaration. The "Applies to" column indicates the HTML element types to which you can assign this property. The "Inherited" column indicates whether the property is inherited by subsequent elements in the document. Finally, the "IE 4" column indicates whether a property is new, improved, or unchanged in Internet Explorer 4.0, as shown below:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Notation</b></td>
<td class=label width=86%><b>Means</b></td>
</tr>
<tr valign=top>
<td width=14%>N</td>
<td width=86%>New in Internet Explorer 4.0</td>
</tr>
<tr valign=top>
<td width=14%>I</td>
<td width=86%>Improved in Internet Explorer 4.0</td>
</tr>
<tr valign=top>
<td width=14%>—</td>
<td width=86%>Same in Internet Explorer 3.0 and 4.0</td>
</tr>
</table><br>
<h3>Font Properties </h3>
<p>
These seven properties control typography in the document. </p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=23%><b>Sample Usage</b></td>
<td class=label width=15%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=13%>font-family</td>
<td width=26%>[ [ <i>family-name</i> | <i>generic-family</i> ], ]* [ <i>family-name</i> | generic-family ]</td>
<td width=23%>{ font-family: Verdana, MS Sans Serif; }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>—</td>
</tr>
<tr valign=top>
<td width=13%>font-style</td>
<td width=26%>normal | italic</td>
<td width=23%>{ font-style:italic; }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>—</td>
</tr>
<tr valign=top>
<td width=13%>font-variant</td>
<td width=26%>normal | small-caps</td>
<td width=23%>{ font-variant:small-caps: }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=13%>font-weight</td>
<td width=26%>normal | bold</td>
<td width=23%>{ font-weight:bold; }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=13%>font-size</td>
<td width=26%>[ xx-large | x-large | large | medium | small | x-small | xx-small ] | [ larger | smaller ] | <i>percentage</i> | <i>length</i></td>
<td width=23%>{ font-size:12pt; }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=13%>font</td>
<td width=26%>[ <i>font-style</i> || <i>font-variant</i> || <i>font-weight</i> ] ? <i>font-size</i> [ / <i>line-height</i> ] ? <i>font-family</i></td>
<td width=23%>{ font: bold 12pt Arial; }</td>
<td width=15%>all elements</td>
<td width=14%>yes</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=13%>@font-face<sup>2</sup></td>
<td width=26%>font-family: font-family; src:url(url)</td>
<td width=23%>@font-face { font-family: CoolFont; src:url(http://myserver.com/CoolFont.eot); }</td>
<td width=15%>all elements</td>
<td width=14%>--</td>
<td width=9%>N</td>
</tr>
</table><br>
<h3>Color and Background Properties</h3>
<p>
These seven properties control the color of the text and the background, as well as the placement and properties of an optional background image.</p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>Property</b></td>
<td class=label width=27%><b>Valid Values</b></td>
<td class=label width=23%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=13%>color</td>
<td width=27%><i>color</i> </td>
<td width=23%>{ color:salmon; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=9%>—</td>
</tr>
<tr valign=top>
<td width=13%>background-color</td>
<td width=27%><i>color</i> | transparent </td>
<td width=23%>{ background-color:crimson; }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=13%>background-image</td>
<td width=27%><i>url</i> | none </td>
<td width=23%>{ background-image:url(bgWood.jpg); }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=13%>background-repeat</td>
<td width=27%>repeat | repeat-x | repeat-y | no-repeat </td>
<td width=23%>{ background-repeat:no-repeat; }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=13%>background-attachment</td>
<td width=27%>scroll | fixed </td>
<td width=23%>{ background-attachment:fixed; }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=13%>background-position</td>
<td width=27%>[ <i>position</i>  | <i>length</i> ] | {1,2} | [ top | center | bottom ] || [ left | center | right ]</td>
<td width=23%>{ background-position: top center;}</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=13%>background </td>
<td width=27%>transparent | <i>color</i> || <i>url</i> || repeat || scroll || <i>position</i></td>
<td width=23%>{ background: silver url(bgRock.jpg) repeat-y }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>I</td>
</tr>
</table><br>
<h3>Text Properties</h3>
<p>
These seven properties control text alignment, spacing, and other formatting, such as underline and case (capitalization). </p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>Property</b></td>
<td class=label width=25%><b>Valid Values</b></td>
<td class=label width=24%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=10%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=13%>letter-spacing</td>
<td width=25%>normal | <i>length</i></td>
<td width=24%>{ letter-spacing:2pt; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=10%>N</td>
</tr>
<tr valign=top>
<td width=13%>text-decoration</td>
<td width=25%>none | underline | overline | line-through</td>
<td width=24%>{ text-decoration:underline; }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=10%>I</td>
</tr>
<tr valign=top>
<td width=13%>vertical-align</td>
<td width=25%>sub | super | </td>
<td width=24%>{ vertical-align:sub; }</td>
<td width=14%>inline elements</td>
<td width=14%>no</td>
<td width=10%>N</td>
</tr>
<tr valign=top>
<td width=13%>text-transform</td>
<td width=25%>capitalize | uppercase | lowercase | none</td>
<td width=24%>{ text-transform:lowercase; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=10%>I</td>
</tr>
<tr valign=top>
<td width=13%>text-align</td>
<td width=25%>left | right | center | justify</td>
<td width=24%>{ text-align:center; }</td>
<td width=14%>block-level elements</td>
<td width=14%>yes</td>
<td width=10%>I</td>
</tr>
<tr valign=top>
<td width=13%>text-indent</td>
<td width=25%><i>length</i> | <i>percentage</i></td>
<td width=24%>{ text-indent:20px; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=10%>—</td>
</tr>
<tr valign=top>
<td width=13%>line-height</td>
<td width=25%>normal | <i>number</i> | <i>length</i> | <i>percentage</i></td>
<td width=24%>{ line-height:5pt; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=10%>I</td>
</tr>
</table><br>
<h3>Box Properties</h3>
<p>
There are 32 box properties that control the formatting of the box associated with block and replaceable elements (as discussed in detail in the <i>W3C CSS1 Recommendation </i>at <a href="http://www.w3.org/pub/WWW/TR/REC-CSS1">http://www.w3.org/pub/WWW/TR/REC-CSS1</a>). </p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=15%>margin-top</td>
<td width=26%><i>length</i> | <i>percentage</i> | auto</td>
<td width=22%>{ margin-top:5px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=15%>margin-right</td>
<td width=26%><i>length</i> | <i>percentage</i> | auto</td>
<td width=22%>{ margin-right:5px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=15%>margin-bottom</td>
<td width=26%><i>length</i> | <i>percentage</i> | auto</td>
<td width=22%>{ margin-bottom:1em; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>margin-left</td>
<td width=26%><i>length</i> | <i>percentage</i> | auto</td>
<td width=22%>{ margin-left:5pt; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=15%>margin</td>
<td width=26%><i>length</i> | <i>percentage</i> | auto&nbsp; {1,4}</td>
<td width=22%>{ margin: 10px 5px 10px 5px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>I</td>
</tr>
<tr valign=top>
<td width=15%>padding-top</td>
<td width=26%><i>length</i> | <i>percentage</i></td>
<td width=22%>{ padding-top:10%; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>padding-right</td>
<td width=26%><i>length</i> | <i>percentage</i></td>
<td width=22%>{ padding-right:15px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>padding-bottom</td>
<td width=26%><i>length</i> | <i>percentage</i></td>
<td width=22%>{ padding-bottom:1.2em; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>padding-left</td>
<td width=26%><i>length</i> | <i>percentage</i></td>
<td width=22%>{ padding-left:10pt; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>padding</td>
<td width=26%><i>length</i> | <i>percentage</i> {1,4}</td>
<td width=22%>{ padding: 10px 10px 10px 15px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td class=label width=15%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=15%>border-top-width</td>
<td width=26%>thin | medium | thick | <i>length</i> </td>
<td width=22%>{ border-top-width:thin; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-right-width</td>
<td width=26%>thin | medium | thick | <i>length</i> </td>
<td width=22%>{ border-right-width:medium; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-bottom-width</td>
<td width=26%>thin | medium | thick | <i>length</i></td>
<td width=22%>{ border-bottom-width:thick; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-left-width</td>
<td width=26%>thin | medium | thick | <i>length</i> </td>
<td width=22%>{ border-left-width:15px; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-width</td>
<td width=26%>thin | medium | thick | <i>length</i> {1,4}</td>
<td width=22%>{ border-width: 3px 5px 3px 5px; } </td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-top-color</td>
<td width=26%><i>color</i> </td>
<td width=22%>{ border-top-color:navajowhite; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-right-color</td>
<td width=26%><i>color</i></td>
<td width=22%>{ border-right-color:whitesmoke; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-bottom-color</td>
<td width=26%><i>color</i></td>
<td width=22%>{ border-bottom-color:black; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-left-color</td>
<td width=26%><i>color</i></td>
<td width=22%>{ border-left-color:#C0C0C0; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-color</td>
<td width=26%><i>color</i> {1,4} </td>
<td width=22%>{ border-color: green red white blue; } </td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td class=label width=15%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=15%>border-top-style</td>
<td width=26%>none | solid | double | groove | ridge | inset | outset </td>
<td width=22%>{ border-top-style:solid; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-right-style</td>
<td width=26%>none | solid | double | groove | ridge | inset | outset </td>
<td width=22%>{ border-right-style:double; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-bottom-style</td>
<td width=26%>none | solid | double | groove | ridge | inset | outset </td>
<td width=22%>{ border-bottom-style:groove; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-left-style</td>
<td width=26%>none | solid | double | groove | ridge | inset | outset </td>
<td width=22%>{ border-left-style:none; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-style</td>
<td width=26%>none | solid | double | groove | ridge | inset | outset </td>
<td width=22%>{ border-style:ridge; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-top</td>
<td width=26%><i>border-width | border-style | border-color </i></td>
<td width=22%>{ border-top: medium outset red; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-right</td>
<td width=26%><i>border-width | border-style | border-color </i></td>
<td width=22%>{ border-right: thick inset maroon; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-bottom</td>
<td width=26%><i>border-width | border-style | border-color </i></td>
<td width=22%>{ border-bottom: 10px ridge gray; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border-left</td>
<td width=26%><i>border-width | border-style | border-color </i></td>
<td width=22%>{ border-left: 1px groove red; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>border</td>
<td width=26%><i>border-width | border-style | border-color </i></td>
<td width=22%>{ border: thin solid blue; }</td>
<td width=14%>block-level and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>float</td>
<td width=26%>none | left | right&nbsp; </td>
<td width=22%>{ float:none; }</td>
<td width=14%>DIV, SPAN, and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>clear </td>
<td width=26%>none | left | right | both </td>
<td width=22%>{ clear:left; }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
</table><br>
<h3>Classification Properties</h3>
<p>
These five properties consist of display and list properties: "display" indicates whether the element is displayed in the document, and the list properties control the formatting of HTML lists, such as &lt;UL&gt; and &lt;OL&gt;. </p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=15%>display</td>
<td width=26%>none | block | inline | list-item</td>
<td width=22%>{ display:none; }</td>
<td width=14%>TABLE, INPUT, TEXTAREA, INPUT type=button, DIV, SPAN, IFRAME, IMG, BODY, MARQUEE, SELECT </td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>list-style-type</td>
<td width=26%>disk | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none</td>
<td width=22%>{ list-style-type:upper-alpha; }</td>
<td width=14%>list-item elements</td>
<td width=14%>yes</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>list-style-image</td>
<td width=26%><i>url</i> | none </td>
<td width=22%>{ list-style-image:url(icFile.gif); }</td>
<td width=14%>list-item elements</td>
<td width=14%>yes</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>list-style-position</td>
<td width=26%>inside | outside</td>
<td width=22%>{ list-style-position:inside; }</td>
<td width=14%>list-item elements</td>
<td width=14%>yes</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=15%>list-style</td>
<td width=26%><i>keyword</i> || <i>position</i> || <i>url</i> </td>
<td width=22%>{ list-style: square outside url(icFolder.gif); }</td>
<td width=14%>list-item elements</td>
<td width=14%>yes</td>
<td width=9%>N</td>
</tr>
</table><br>
<h3>Positioning Properties</h3>
<p>
These nine properties provide a powerful level of control over the two- and three-dimensional appearance of elements in the document. CSS positioning merits special coverage both in the Internet Client SDK and in the W3C documents, and is worthy of special study.</p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=12%><b>Property</b></td>
<td class=label width=27%><b>Valid Values</b></td>
<td class=label width=23%><b>Sample Usage</b></td>
<td class=label width=15%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=9%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=12%>clip</td>
<td width=27%><i>shape</i> | auto </td>
<td width=23%>{ clip:rect(0px 200px 200px 0px); }</td>
<td width=15%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>height</td>
<td width=27%><i>length</i> | auto</td>
<td width=23%>{ height:200px; }</td>
<td width=15%>DIV, SPAN and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>left</td>
<td width=27%><i>length</i> | <i>percentage</i> | auto</td>
<td width=23%>{ left:0px; }</td>
<td width=15%>absolutely and relatively positioned elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>overflow</td>
<td width=27%>visible | hidden | scroll | auto</td>
<td width=23%>{ overflow:scroll; } </td>
<td width=15%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>position</td>
<td width=27%>absolute|&nbsp; relative | static </td>
<td width=23%>{ position:absolute; }</td>
<td width=15%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>top</td>
<td width=27%>length | percentage | auto</td>
<td width=23%>{ top:0px; }</td>
<td width=15%>absolutely and relatively positioned elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>visibility</td>
<td width=27%>visible | hidden | inherit</td>
<td width=23%>{ visibility:visible; }</td>
<td width=15%>all elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>width</td>
<td width=27%><i>length</i> | <i>percentage</i> | auto</td>
<td width=23%>{ width:80%; }</td>
<td width=15%>DIV, SPAN and replaced elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
<tr valign=top>
<td width=12%>z-index</td>
<td width=27%>auto | integer </td>
<td width=23%>{ z-index:-1; }</td>
<td width=15%>absolutely and relatively positioned elements</td>
<td width=14%>no</td>
<td width=9%>N</td>
</tr>
</table><br>
<h3>Printing Properties</h3>
<p>
These two properties allow the developer to specify exact locations for page breaks that affect the printing of the document.</p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=8%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=16%>page-break-before</td>
<td width=26%>auto | always || left | right </td>
<td width=22%>{ page-break-before:always; }</td>
<td width=14%>block-level elements</td>
<td width=14%>no</td>
<td width=8%>N</td>
</tr>
<tr valign=top>
<td width=16%>page-break-after</td>
<td width=26%>auto | always || left | right</td>
<td width=22%>{ page-break-before:auto; }</td>
<td width=14%>block-level elements</td>
<td width=14%>no</td>
<td width=8%>N</td>
</tr>
</table><br>
<h3>Filter Properties </h3>
<p>
The three filter properties represent another important topic that deserves separate study. Almost all filter properties are applied using scripting.</p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=22%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=8%><b>IE 4</b></td>
</tr>
<tr valign=top>
<td width=16%>Visual Filter<sup>2</sup></td>
<td width=26%><i>filtername(fparameter1,fparameter2. . .)</i></td>
<td width=22%>{ filter:FlipH(enable=1) }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=8%>N</td>
</tr>
<tr valign=top>
<td width=16%>Reveal Transition Filter<sup>2</sup></td>
<td width=26%>RevealTrans(duration=<i>duration</i>, transition=<i>transitionshape</i></td>
<td width=22%>{ filter:revealTrans(duration=1.0, transition=12); }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=8%>N</td>
</tr>
<tr valign=top>
<td width=16%>Blend Transition Filter<sup>2</sup></td>
<td width=26%>BlendTrans(duration=<i>duration</i>)</td>
<td width=22%>{ filter: blendTrans(duration = 1.5) }</td>
<td width=14%>all elements</td>
<td width=14%>no</td>
<td width=8%>N</td>
</tr>
</table><br>
<h3>Pseudo Classes and Other Properties</h3>
<p>
This catch-all category includes three properties:&nbsp; the @import property, used to import an external style sheet into an existing style sheet (as explained in <a href="#cssie4_import">Using Imported Style Sheets</a>); the cursor property controls the appearance of the mouse pointer as it passes over the element (as shown in <a href="#cssie4_intro">Introduction</a>); and the !important property, used to override the default cascade for a given style. It also contains four pseudo-classes for the A attribute. </p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Property</b></td>
<td class=label width=26%><b>Valid Values</b></td>
<td class=label width=23%><b>Sample Usage</b></td>
<td class=label width=14%><b>Applies to</b></td>
<td class=label width=14%><b>Inherited?</b></td>
<td class=label width=7%><b>IE</b></td>
</tr>
<tr valign=top>
<td width=16%>@import</td>
<td width=26%>Url(<i>url</i>)</td>
<td width=23%>@import url(mystyles.css); </td>
<td width=14%>style sheets</td>
<td width=14%>yes</td>
<td width=7%>N</td>
</tr>
<tr valign=top>
<td width=16%>cursor<sup>2</sup></td>
<td width=26%>Auto | crosshair | default | hand | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize | text | wait | help</td>
<td width=23%>{ cursor:hand; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=7%>N</td>
</tr>
<tr valign=top>
<td width=16%>!important</td>
<td width=26%>!important</td>
<td width=23%>{ font-weight:bold!important }</td>
<td width=14%>style sheets</td>
<td width=14%>no</td>
<td width=7%>N</td>
</tr>
<tr valign=top>
<td width=16%>active, hover<sup>2</sup>, link, visited</td>
<td width=26%>n/a</td>
<td width=23%>a:hover { color:red; }</td>
<td width=14%>all elements</td>
<td width=14%>yes</td>
<td width=7%>I</td>
</tr>
</table><br>
<h2><a name="cssie4_conclusion"></a>Conclusion</h2>
<p>
Now that you have digested this article (hopefully, without too much heartburn), you are well on your way to creating advanced, visually appealing documents over which you can exercise a high level of control. We've covered the four ways of adding CSS to your documents (inline, embedded, linked, and imported), and the three ways of applying styles to HTML elements (HTML tag, CLASS, and ID). I've also provided a list of all CSS styles supported in Internet Explorer 4.0.</p>
<p>
The focus of this article has been on the static aspect of Cascading Style Sheets. Dynamic HTML in Internet Explorer 4.0 allows you to take a step further, by using scripting to dynamically modify the styles in your document. For example, you can change colors when certain events happen, animate HTML elements to move them about the page, and so forth. Please see the links to Dynamic HTML resources below for more information.</p>
<p>
Happy styling!</p>
<h2><a name="cssie4_more"></a>For More Information</h2>
<p>
For more information on CSS, both in general and as implemented in Internet Explorer 4.0, please refer to the following documents.</p>
<h3>Microsoft-related information</h3>
<p>
Parts of the Internet Client SDK documentation in the MSDN Library (SDK Documentation, Internet Client SDK) cover various aspects of CSS in great detail:
<ul type=disc>
<li>
For a comprehensive list of all CSS properties implemented in Internet Explorer 4.0, read "CSS Attributes Reference".<br><br></li>
<li>
The "Dynamic Styles" section provides a good introduction to using styles with DHTML.<br><br></li>
<li>
For more on positioning, see the "Dynamic HTML" section.</li>
</ul>
<p>
For information on embedding fonts in web pages using @font-face, see the Microsoft Typography site at<a href="http://www.microsoft.com/typography/"> http://www.microsoft.com/typography/</a>.</p>
<p>
For additional information and technical articles on Dynamic HTML, go to the Site Builder Workshop's "Dynamic HTML" section from <a href="http://www.microsoft.com/workshop/author/">http://www.microsoft.com/workshop/author/</a>. </p>
<h3>Third-party sites</h3>
<p>
Some fine sources of information on CSS exist on the World Wide Web Consortium (W3C) Web site (<a href="http://www.w3.org/">http://www.w3.org/</a>). Specifically, see the "Cascading Style Sheets" page at <a href="http://www.w3.org/Style/css/">http://www.w3.org/Style/css/</a>, which includes links to CSS specifications and many other resources both on the W3C site and elsewhere.</p>
<p>
Some other interesting third-party sites include the following:
<ul type=disc>
<li>
The Web Design Group's "Guide to Cascading Style Sheets" at http://www.htmlhelp.com/reference/css/ is a substantive treatment of various aspects of CSS.<br><br></li>
<li>
The "Web Review's Style Sheets Reference Guide" at http://www.webreview.com/guides/style/mastergrid.html lists the various implementations of CSS in different browsers.</li>
</ul>
</BODY>
</HTML>

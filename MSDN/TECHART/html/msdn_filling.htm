<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filling a List Box from a Data Structure in Visual C++</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_filling"></a>Filling a List Box from a Data Structure in Visual C++</h1>
<p>
Microsoft Corporation</p>
<p>
September 1996</p>
<h2>Abstract</h2>
<p>
A common implementation task is creating a list box within a dialog box. The Microsoft® Foundation Class Library (MFC) dialog data exchange (DDX) automates the moving of data between simple dialog box controls (such as edit boxes) and program data structures. However, moving data between more complex dialog box controls (such as a list box) and program data structures requires a little hand coding on your part. </p>
<p>
This article describes a technique for initializing a list box from a data structure in Visual C++®. </p>
<h2>Four Simple Steps</h2>
<p>
The technique of filling a list box requires the following four steps: 
<ol>
<li>
Use the <b>New</b> command (File menu) to create a project. <br><br></li>
<li>
Use the dialog box editor to draw a dialog box containing a list box. <br><br></li>
<li>
Use ClassWizard to add a class describing the new dialog box. In this example, the class will use a CStringList to hold strings for display in the list box. <br><br></li>
<li>
Use ClassWizard to add code to the dialog box's <b>OnInitDialog</b> method that fills the list box. </li>
</ol>
<p>
The rest of this article walks you, step by step, through a simple programming project that illustrates the process outlined in the previous steps. </p>
<h2>Example Project</h2>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This project assumes knowledge of the Visual C++® project facilities such as the menu and dialog editors, ClassView, ResourceView, AppWizard, and ClassWizard. It also assumes knowledge of C++ and the Microsoft® Foundation Class Library. All of the steps and code required to finish the project are provided. Remember that pressing F1 provides help on the tool that has the current focus. </p>
<p>
In this example, you'll use AppWizard to create a multi-document project. After creating the project, you'll add one menu and two dialog boxes. The menu will provide entry points to the dialog boxes. One dialog box accepts strings and one displays them. Strings entered by the user are stored in the context of the currently open document. The flow of data is from the first dialog box's object, to the current document's object, and, finally, to the second dialog box's object. </p>
<p>
Note that this project adds steps—adding a menu and an extra dialog box—to the four mentioned earlier. These extra steps are required to provide data for the list box. The four initial steps are meant as a springboard into your own project. If you want hands-on experience before jumping into your own project, perform the steps below. </p>
<p>
The following list shows the steps in this example project: 
<ol>
<li>
Create a new project.<br><br></li>
<li>
Draw the menu.<br><br></li>
<li>
Create the Enter Name dialog box.<br><br></li>
<li>
Create the Retrieve Names dialog box.<br><br></li>
<li>
Connect the dialog boxes to the menu.<br><br></li>
<li>
Add a <b>CStringList</b> to <b>CRetrieveNamesDlg</b>.<br><br></li>
<li>
Add code to <b>OnInitDialog</b> that fills the list box.</li>
</ol>
<h3>1. Create a New Project </h3>
<p>
Begin by using AppWizard to create a project to work in. 
<ol>
<li>
Start Microsoft Developer Studio. <br><br></li>
<li>
Choose New (on the File menu) and select Project Workspace from the New dialog box. <br><br></li>
<li>
Click OK. <br><br></li>
<li>
Name the project "Name List," accept the default Project Type (MFC AppWizard (exe)), and click the Create button when you're finished with the New Project Workspace dialog box. <br><br></li>
<li>
Click the Finish button when presented with the MFC AppWizard - Step 1 dialog box. <br><br></li>
<li>
Click the OK button from New Project Information dialog box. </li>
</ol>
<h3>2. Draw the Menu</h3>
<p>
Next, add a menu called "Names" to the default set of menus. 
<ol>
<li>
From ResourceView, double-click the Menu folder. <br><br></li>
<li>
Double-click IDR_NAMELITYPE to edit the associated menu. <br><br></li>
<li>
Add a "&amp;Names" menu between the View and Windows menus. <br><br></li>
<li>
Double-click the "new items" box just below the new "&amp;Names" menu and type "&amp;Enter Name" in the Caption field of the Menu Items Properties page. Accept the generated ID of ID_NAMES_ENTERNAME. <br><br></li>
<li>
Double-click the "new items" box just below the new "&amp;Names" menu and type "&amp;Retrieve Names" in the Caption field. Accept the generated ID of ID_NAMES_RETRIEVENAMES. <br><br></li>
<li>
Save your work and close the menu editor. </li>
</ol>
<h3>3. Create the Enter Name Dialog Box</h3>
<p>
In this section you will create a dialog box that has a list box into which a user can enter data. 
<ol>
<li>
From ResourceView, right-click the Dialogs folder and choose the Insert Dialog command. The user will use the dialog box you're about to create to enter names into a list. <br><br></li>
<li>
In the resource-editor window, double-click on the body of the dialog box to bring up the Dialog Properties. Enter an ID of IDD_ENTERNAME and a caption of "Enter Name" on the Dialog property page. <br><br></li>
<li>
Add the following controls to the dialog box:<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Type</b></td>
<td class=label width=36%><b>Location</b></td>
<td class=label width=42%><b>Name</b></td>
</tr>
<tr valign=top>
<td width=22%>Static text</td>
<td width=36%>Upper-left corner</td>
<td width=42%>IDC_STATIC</td>
</tr>
<tr valign=top>
<td width=22%>Edit box</td>
<td width=36%>Below static text</td>
<td width=42%>IDC_ENTERNAME</td>
</tr>
</table><br>
</li>
<li>
Click Tab Order (Layout menu). Click on the edit box to ensure that it receives the focus when the dialog box comes up at run time. <p class=tl>
Next, add a class for the Enter Name dialog box. </P></li>
<li>
With the focus on the dialog editor, start ClassWizard (choose ClassWizard from the View menu) and create a new class with the following attributes:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Attribute</b></td>
<td class=label width=57%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=43%>Class Name</td>
<td width=57%>CEnterNameDlg</td>
</tr>
<tr valign=top>
<td width=43%>Class Type</td>
<td width=57%>Cdialog</td>
</tr>
<tr valign=top>
<td width=43%>Dialog ID</td>
<td width=57%>IDD_ENTERNAME</td>
</tr>
</table><br>
</li>
<li>
Click the Create button. ClassWizard will generate the declaration and implementation of class CEnterNameDlg. <p class=tl>
Next, add variables to the Enter Name dialog box class. </P></li>
<li>
From ClassWizard, select the Member Variables tab and select CEnterNameDlg from the Class name drop-down list. Double-click the IDC_ENTERNAME Control ID to add a variable with the following attributes:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=60%><b>Attribute</b></td>
<td class=label width=40%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=60%>Member Variable Name</td>
<td width=40%>m_csName</td>
</tr>
<tr valign=top>
<td width=60%>Category</td>
<td width=40%>Value</td>
</tr>
<tr valign=top>
<td width=60%>Variable Type</td>
<td width=40%>Cstring</td>
</tr>
</table><br>
</li>
<li>
When finished, click the dialog box's OK button and then ClassWizard's OK button. </li>
</ol>
<h3>4. Create the Retrieve Names Dialog Box</h3>
<p>
In this section you will create a second dialog box. This one will retrieve the data a user enters into the other dialog box. First, draw the new dialog box. 
<ol>
<li>
From ResourceView, right click the Dialogs folder and choose the Insert Dialog Command. <br><br></li>
<li>
In the dialog editor window, double-click on the body of the dialog box to bring up the Dialog Properties. Enter an ID of IDD_RETRIEVENAME and a caption of "Retrieve Name."<br><br></li>
<li>
Drag a static text field from the Controls toolbar to the upper-left corner of the dialog box. While the focus is still on the static text field, type "Last Name Entered." <br><br></li>
<li>
Drag an edit box from the Controls toolbar below the Last Name Entered static text. Double-click the edit box to bring up the associated property page and enter an ID of IDC_RETRIEVELASTNAME. <br><br></li>
<li>
On the property page select the Styles tab and check the Read-Only property to make the edit box read-only. We'll use this text box to illustrate the ease that the MFC dialog data exchange (DDX) mechanism brings to initializing simple controls. ClassWizard writes most of the code for you. <br><br></li>
<li>
Drag a static text field from the Controls toolbar to just under the read-only text box. While the focus is still on the static text field, type "Retrieved Names". <br><br></li>
<li>
Drag a list box from the Controls toolbar and drop it just under the "Retrieved Names" static text. Double-click the list box to bring up the associated property page and enter an ID of IDC_RETRIEVENAMES. <br><br></li>
<li>
Select the Tab Order command from the Layout menu and set the desired tab order. <p class=tl>
Next, add a class for the Retrieve Names dialog box. </P></li>
<li>
With the focus on the dialog editor, start ClassWizard and create a new class with the following attributes:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Attribute</b></td>
<td class=label width=63%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=37%>Class Name</td>
<td width=63%>CRetrieveNamesDlg</td>
</tr>
<tr valign=top>
<td width=37%>Class Type</td>
<td width=63%>Cdialog</td>
</tr>
<tr valign=top>
<td width=37%>Dialog ID</td>
<td width=63%>IDD_RETRIEVENAMES</td>
</tr>
</table><br>
</li>
<li>
Click the Create button. ClassWizard will generate the declaration and implementation of the CRetrieveNamesDlg class. </li>
</ol>
<p>
To conclude this section, add variables to the Retrieve Names dialog box class. </p>
<p>
CRetrieveNamesDlg requires two variables: one for the IDC_RETRIEVELASTNAME control ID and one for the IDC_RETRIEVENAMES control ID. 
<ol>
<li>
Start ClassWizard, select the Member Variables tab, and select CRetrieveNamesDlg from the Class Name list box. <br><br></li>
<li>
Double-click the IDC_RETRIEVELASTNAME control ID and add a variable with the following attributes:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Attribute</b></td>
<td class=label width=51%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=49%>Member Variable Name</td>
<td width=51%>m_csLastNameEntered</td>
</tr>
<tr valign=top>
<td width=49%>Category</td>
<td width=51%>Value</td>
</tr>
<tr valign=top>
<td width=49%>Variable Type</td>
<td width=51%>Cstring</td>
</tr>
</table><br>
</li>
<li>
Next, double-click the IDC_RETRIEVENAMES control ID and add a variable with the following attributes:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=56%><b>Attribute</b></td>
<td class=label width=44%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=56%>Member</td>
<td width=44%>Variable </td>
</tr>
<tr valign=top>
<td width=56%>Name</td>
<td width=44%>m_csNames</td>
</tr>
<tr valign=top>
<td width=56%>Category</td>
<td width=44%>Value</td>
</tr>
<tr valign=top>
<td width=56%>Variable Type</td>
<td width=44%>CString</td>
</tr>
</table><br>
</li>
<li>
When finished, click the dialog box's OK button and then ClassWizard's OK button. <br><br></li>
<li>
Click ClassWizard's OK button and save your work. </li>
</ol>
<p>
The next task will be to connect the two dialog boxes to the Names menu. </p>
<h3>5. Connect the Dialog Boxes to the Menu</h3>
<p>
Objects of type CEnterNameDlg are launched when the user clicks Enter Name (Name menu). CEnterNameDlg accepts strings from the user. User-entered strings are stored in a CStringList in the current document. 
<ol>
<li>
Start ClassWizard, select the Message Maps tab, and select CNameListDoc from the Class Name list box. <br><br></li>
<li>
Select the ID_NAMES_ENTERNAME Object ID and double-click the COMMAND Message to add a message handler. Click OK to accept OnNameEntername as the function name, then click the Edit Code button. <br><br></li>
<li>
Add the code below marked with "&gt;". Don't forget the #include statement. <pre><code>#include "stdafx.h"
#include "Name List.h" 

<b>&gt;#include "EnterNameDlg.h" </b>

#include "Name ListDoc.h" 
.
.
.
void CNameListDoc::OnNameEntername()
{

<b>&gt; CEnterNameDlg dlg; </b>

<b>&gt; if (dlg.DoModal() == IDOK) </b>

<b>&gt; // MFC dialog data exchange returns the user's entry</b>

<b>&gt; // into dlg.m_csName. Add dlg.m_csName to the end of</b>

<b>&gt; // the document's CStringList: </b>

<b>&gt; m_csDocumentNameList.AddTail(dlg.m_csName); </b>

}
</code></pre>
</li>
</ol>
<p>
This code creates a CEnterNameDlg object when the user selects the Enter Name command from the Name menu. When the user clicks the OK button in the Enter Name dialog, the content of the edit box, dlg.m_csName, is added to the tail of a list. </p>
<p>
This code also assumes a CStringList named m_csDocumentNameList in class CNameListDoc. The application's flow of data is from CEnterNameDlg to CNameListDoc to CRetrieveNamesDlg. </p>
<p>
To add the CStringList to the document view, open CNameListDoc from ClassView and add the code below marked with "&gt;". </p>
<pre><code>class CNameListDoc : public Cdocument 
{
protected: // create from serialization only
CNameListDoc();
DECLARE_DYNCREATE(CNameListDoc) 
// Attributes
public: 

<b>&gt;// Attributes</b>

<b>&gt;protected: </b>

<b>&gt; // Names entered and retrieved from Name menu</b>

<b>&gt; CStringList m_csDocumentNameList; </b>
</code></pre>
<p>
This code makes use of the MFC CStringList container class to hold multiple user entries. Later, you'll add the appropriate variables to class CRetrieveNamesDlg in order to complete the data flow. </p>
<p>
Next, connect the Retrieve Names dialog box to the Names menu. 
<ol>
<li>
Start ClassWizard, select the Message Map tab, and select CNameListDoc from the Class Name list box. <br><br></li>
<li>
Double-click the ID_NAMES_RETRIEVENAMES Object ID and double-click the COMMAND Message to add a message handler. Click OK to accept OnNameRetrievenames as the function name, then click the Edit Code button. <br><br></li>
<li>
Add the code below marked with "&gt;". Don't forget the #include statement. <pre><code>#include "stdafx.h" 
#include "Name List.h" 
#include "EnterNameDlg.h" 

<b>&gt;#include "RetrieveNamesDlg.h" </b>

#include "Name ListDoc.h". 
. 
. 
. 
void CNameListDoc::OnNameRetrievenames()
{

<b>&gt; CRetrieveNamesDlg dlg; </b>

<b>&gt;// At this point, the DoDataExchange call to DDX_Text that is</b>

<b>&gt;// associated with CNameListDoc::OnNamesRetrievenames</b>

<b>&gt;// automatically performs the required UpdateData call to fill</b>

<b>&gt;// the IDC_RETRIEVELASTNAME text box with user-entered data. </b>

<b>&gt; dlg.m_csLastNameEntered = m_csDocumentNameList.GetTail(); </b>

<b>&gt; </b>

<b>&gt;// Assign a pointer to the document's CStringList to</b>

<b>&gt;// the dialog box object's CstringList. </b>

<b>&gt; dlg.m_pcsNameList = &amp;m_csDocumentNameList; </b>

<b>&gt; if (dlg.DoModal() == IDOK) </b>

<b>&gt; {</b>

<b>&gt; }</b>

} 
</code></pre>
</li>
</ol>
<p>
This code creates a CRetrieveNamesDlg object when the user clicks Retrieve Name (on the Name menu). The object's data members are initialized to contain the document's data. After the call to DoModal, DDX automatically fills the IDC_RETRIEVELASTNAME text box with user-entered data. </p>
<p>
The final two steps in this exercise are to add a CStringList to the CRetrieveNamesDlg class and to add some code to CRetrieveNamesDlg::OnInitDialog, which fills the dialog box's list box from the CstringList. </p>
<h3>6. Add a CStringList to CRetrieveNamesDlg</h3>
<p>
One important data structure is missing from the CRetrieveNamesDlg class: a CStringList to contain user-entered data. Open CRetrieveNamesDlg from ClassView and add the code below marked with "&gt;". </p>
<pre><code>class CRetrieveNamesDlg : public Cdialog 
{
// Construction
public: 
CRetrieveNamesDlg(CWnd* pParent = NULL); // standard constructor 
// Dialog Data
//{{AFX_DATA(CRetrieveNamesDlg) 
enum { IDD = IDD_RETRIEVENAMES };
CString m_csNames; 
CString m_csLastNameEntered; 
//}}AFX_DATA

<b>&gt;CStringList* m_pcsNameList; </b>
</code></pre>
<p>
This added CStringList allows you to assign the user-entered data stored in a CNameListDoc object to a CRetrieveNamesDlg object. In the final step you will add code to CRetrieveNamesDlg::OnInitDialog, which fills the dialog box's list box from the CStringList. </p>
<h3>7. Add Code to OnInitDialog, Which Fills the ListBox</h3>
<ol>
<li>
Start ClassWizard, select the Message Map tab, and select CRetrieveNamesDlg from the Class Name list box. <br><br></li>
<li>
With the CRetrieveNamesDlg Object ID selected, double-click WM_INITDIALOG in the Messages list to add a message handler. Click the Edit Code button and add the code below marked with "&gt;". <pre><code>BOOL CRetrieveNamesDlg::OnInitDialog()
{
CDialog::OnInitDialog();

<b>&gt; CListBox* pLB = (CListBox*) GetDlgItem(IDC_RETRIEVENAMES); </b>

<b>&gt; POSITION p = m_pcsNameList-&gt;GetHeadPosition();</b>

<b>&gt; while(p != NULL ) </b>

<b>&gt; {</b>

<b>&gt; pLB-&gt;InsertString(-1, m_pcsNameList-&gt;GetNext(p)); </b>

<b>&gt; }</b>

return TRUE; // Return TRUE unless you set the focus to a control.
// EXCEPTION: OCX Property Pages should return FALSE.
}
</code></pre>
</li>
</ol>
<p>
This code creates a pointer to a ListBox, associates it with the dialog box's list box, and uses the member functions of a CStringList to fill the list box. The data transfer is complete. Build and run the application.</p>
</BODY>
</HTML>

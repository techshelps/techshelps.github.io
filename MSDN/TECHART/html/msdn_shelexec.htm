<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ShellExecute Function to Launch Applications in Visual Basic 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_shelexec"></a>Using the ShellExecute Function to Launch Applications in Visual Basic 4.0</h1>
<p>
Deborah L. Cooper</p>
<p>
October 1996</p>
<h2>Introduction </h2>
<p>
This article explains how to create an in-process OLE server (that is, a class) in Visual Basic® 4.0 that encapsulates the Windows® application programming interface (API) <b>ShellExecute</b> function. The class developed in this article will allow you to launch other Windows application programs, open and/or print documents, and explore folders under the Windows 95 operating system. In addition, the class also encapsulates the <b>CreateProcessA, WaitForSingleObject, </b>and <b>CloseHandle </b>functions. These functions allow you to launch an application program, set the focus to that application, and wait until that program has been terminated by the user before the focus can be returned to the calling application.</p>
<h2>A Shelling We Will Go!</h2>
<p>
The Windows application programming interface (API) <b>ShellExecute</b> function can be used from within a Microsoft® Visual Basic 4.0 application program to launch other Windows application programs, open and print documents, and explore folders (directories).</p>
<p>
The declaration statement for the <b>ShellExecute</b> function is:</p>
<pre><code>Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
</code></pre>
<p>
As you can see, the <b>ShellExecute</b> function requires six arguments, as follows:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=21%><b>hWnd</b></td>
<td colspan=2 width=79%>A long value containing the window’s handle</td>
</tr>
<tr valign=top>
<td width=21%><b>LpOperation</b></td>
<td colspan=2 width=79%>A string specifying the operation the <b>ShellExecute</b> function is to perform. One of the following three values may be specified:</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td colspan=2 width=79%><b>Open</b>—Indicates the file lpFile is to be opened. Under the Windows 95 operating system, this file may be a folder.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td colspan=2 width=79%><b>Print</b>—Indicates the file lpFile is to be printed.</td>
</tr>
<tr valign=top>
<td width=21%><b> </b></td>
<td colspan=2 width=79%><b>Explore</b>—Indicates the folder specified in lpFile is to be explored.</td>
</tr>
<tr valign=top>
<td width=21%><b>LpFile</b></td>
<td colspan=2 width=79%>A string containing the name of the file to open, print, or explore.</td>
</tr>
<tr valign=top>
<td width=21%><b>LpParameters</b></td>
<td colspan=2 width=79%>Set to NULL if lpFile specifies a document file. If lpFile specifies an executable file, then lpParameters is a pointer to a string specifying the parameters that should be passed to the application.</td>
</tr>
<tr valign=top>
<td width=21%><b>LpDirectory</b></td>
<td colspan=2 width=79%>A string specifying the default directory’s name.</td>
</tr>
<tr valign=top>
<td width=21%><b>NShowCmd</b></td>
<td colspan=2 width=79%>If a document file is specified in lpFile, this should be set to a value of zero. If an executable file is specified in lpFile, this determines how the ShellExecute function displays the application after it is loaded. The following values may be used:</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_HIDE</td>
<td width=40%>Hides the window and activates the executable file.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_MAXIMIZE</td>
<td width=40%>Maximizes the window.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_MINIMIZE</td>
<td width=40%>Minimizes the window. The next top-level window in the Z-order is activated.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_RESTORE</td>
<td width=40%>Activates the window even if it is hidden or minimized</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOW</td>
<td width=40%>Activates the window and displays it in its original size and at its original position.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWMAXIMIZED</td>
<td width=40%>Activates the window. The window is displayed as maximized.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWMINIMIZED</td>
<td width=40%>Activates the window. The window is displayed as minimized.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWMINNOACTIVE</td>
<td width=40%>Activates the window as minimized. The active window retains the focus.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWNA</td>
<td width=40%>Activates the window in its current state but the active window retains the focus.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWNOACTIVATE</td>
<td width=40%>Displays the window in its most recent size and in its most recent position. The active window retains the focus.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=39%>SW_SHOWNORMAL</td>
<td width=40%>Displays the window in its original size and at its original position.</td>
</tr>
</table><br>
<h2>Using a Class to Launch Application Programs</h2>
<p>
The cShellExecute class included with this article may be used in any application program you develop in Visual Basic 4.0. This class provides an easy mechanism to launch application programs, open or print documents, and explore folders. The class also lets you launch an application program and force that application to retain the focus until it is terminated. Depending on your requirements, either the <b>ShellExecute </b>function or the <b>CreateProcessA</b> function may be used to launch an application program. However, if you need to specifically determine when that newly-launched application has been terminated, then you must use the latter function. The following discussion will show how to implement both of these features in your Visual Basic application programs.</p>
<h2>Let’s Go Exploring</h2>
<p>
In the demonstration program included with this article, you can click on the <b>ExploreFolder</b> command button. This action tells the program to explore the Most Recently Used Documents folder (c:\windows\recent). The calling program must pass two pieces of information to the ExploreFolder method: the name of the window you want the folder to be opened over and the complete pathname of the folder.</p>
<p>
The ExploreFolder method, shown below, calls the <b>ShellExecute</b> function with the two arguments you have specified (the folder and window names). The explorer window is then displayed to the user.</p>
<pre><code>Public Sub ExploreFolder(FormName As Long, FolderName As String)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; X = ShellExecute(FormName, "Explore", FolderName, 0&amp;, 0&amp;, SW_SHOWMAXIMIZED)
End Sub
</code></pre>
<p>
To explore a folder under the Windows 95 operating system, we must tell the <b>ShellExecute</b> function the operation to perform, in this case "explore”, the parent window we want to use, and the folder or directory name. The folder will then be displayed on the screen.</p>
<h2>Opening Documents</h2>
<p>
In this section, we will discuss how to open a document using the <b>ShellExecute</b> function. Let’s suppose we want to read a text file called WEBSITE.TXT stored in the root directory of our hard disk. In our demonstration program, we would click on the Open Document command button to open the file. The <b>OpenThisDoc</b> method provides this functionality for us.</p>
<p>
The <b>OpenThisDoc</b> method in the cShelExec class looks like this:</p>
<pre><code>Public Sub OpenThisDoc(FormName As Long, FileName As String)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; X = ShellExecute(FormName, "Open", FileName, 0&amp;, 0&amp;, SW_SHOWMAXIMIZED)
End Sub
</code></pre>
<p>
Notice the <b>OpenThisDoc</b> method requires two arguments—the parent window’s handle and the name of the document we want to open. We pass these two arguments to the <b>ShellExecute</b> function while also setting the <b>ShellExecute</b>’s second argument to “Open”. This tells the <b>ShellExecute</b> function to open the WEBSITE.TT file using the application program associated with this particular file (in this case, Notepad).</p>
<h2>Sending Documents to the Printer</h2>
<p>
The <b>PrintThisFile</b> method in the cShellExec class lets you send a specific file to the printer. The code fragment for <b>PrintThisFile</b> is:</p>
<pre><code>Public Sub PrintThisFile(FormName As Long, FileName As String)
 &nbsp;&nbsp; On Error Resume Next
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; X = ShellExecute(FormName, "Print", FileName, vbNullString, 0&amp;, SW_SHOWMAXIMIZED)
End Sub
</code></pre>
<p>
As with both the <b>ExploreFolder</b> and <b>OpenThisDoc</b> methods, the <b>PrintThisFile</b> method requires that you pass the file’s name and the parent window’s handle to the method. Next, the operation field of the <b>ShellExecute</b> function is set to “Print”, which sends the document to the printer.</p>
<h2>Waiting for an Application to Be Terminated</h2>
<p>
Although the <b>ShellExecute</b> function is quite versatile when it comes to launching applications, printing documents, and exploring folders, it does have one drawback. When you use the <b>ShellExecute</b> function to launch another Windows application program, that second program is immediately executed but you have no way of forcing the user’s attention specifically to that application. The user is free to click on any other application’s window, making that window the current focus of his attention.</p>
<p>
In many situations, you may want to launch an application program and force the operating system to wait until that application has been terminated before allowing any other action to be performed. Unfortunately, you cannot use the <b>ShellExecute</b> function to do this!</p>
<p>
You must use several other Windows API functions to launch and wait for the program to be terminated. The <b>ExecuteAndWait</b> method, shown below, can address this problem quite nicely. All you have to do is provide the full pathname and its required arguments to this method. The application you have just launched will retain the focus until it is subsequently terminated.</p>
<pre><code>Public Sub ExecuteAndWait(cmdline As String)
 &nbsp;&nbsp; Dim NameOfProc As PROCESS_INFORMATION
 &nbsp;&nbsp; Dim NameStart As STARTUPINFO
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; NameStart.cb = Len(NameStart)
 &nbsp;&nbsp; X = CreateProcessA(0&amp;, cmdline$, 0&amp;, 0&amp;, 1&amp;, NORMAL_PRIORITY_CLASS, 0&amp;, 0&amp;, NameStart, NameOfProc)
 &nbsp;&nbsp; X = WaitForSingleObject(NameOfProc.hProcess, INFINITE)
 &nbsp;&nbsp; X = CloseHandle(NameOfProc.hProcess)
End Sub
</code></pre>
<p>
As you can see from the code above, the <b>ExecuteAndWait</b> method uses several functions—<b>CreateProcessA, WaitForSingleObject, </b>and <b>CloseHandle.</b> We have already seen that a Windows application program can be executed by calling the <b>ShellExecute</b> function. You can also use the <b>CreateProcessA</b> function to launch applications and to force that application to retain the focus until it is terminated.</p>
<p>
When an application program is launched, a process is created by the operating system. In other words, a process is an application program loaded into memory. The operating system gives each application, or process, a unique 32-bit identifier. When the process is terminated, the identifier becomes invalid—it is no longer in use.</p>
<p>
Therefore, to execute a program and wait until it is terminated, you must first call the <b>CreateProcessA</b> function to load and execute your application program. Next, you call the <b>WaitForSingleObject</b> function which forces the operating system to wait until this application has been terminated. Finally, when the application has been terminated by the user, you call the <b>CloseHandle</b> function to release the application’s 32-bit identifier to the system pool. The bibliography at the end of this article sites several articles that discuss this concept in greater detail.</p>
<h3>Bibliography</h3>
<p>
“How to Launch App Based on File Extension Using ShellExecute,” Q147807 (MSDN Library, Knowledge Base)</p>
<p>
“Using Associations to Find and Start Applications” (MSDN Library, Platform, SDK, and DDK Documentation) </p>
<p>
“How to Determine When a Shelled 32-bit Process Has Terminated,” Q129796 (MSDN Library, Knowledge Base)</p>
<p>
Tip 168: Using the ShellExecute Function to Print Files (MSDN Library, Technical Articles)</p>
<p>
WaitForSingleObject, QuickInfo.</p>
<p>
“How to Launch a Win32 Application from Visual Basic”, Q129797 (MSDN Library, Knowledge Base)</p>
<p>
“Tip 173: Launching Applications in Visual Basic” (MSDN Library, Technical Articles)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 37: Restricting Mouse Pointer Movement to a Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn37"></a></sup>Tip 37: Restricting Mouse Pointer Movement to a Control</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
In your Visual Basic® application, you may want to restrict the movement of the mouse pointer (cursor) to a certain control or area of a window. This technique is called <i>clipping</i>, and can be accomplished by calling the Windows® application programming interface (API) <b>ClipCursorRect</b> and <b>SetCursorPos</b> functions.</p>
<h2>Confining the Cursor (Mouse Pointer) to a Specific Area of a Window</h2>
<p>
The Windows® application programming interface (API) <b>ClipCursorRect</b> function lets you confine the cursor's movement to a specific area of a window. To declare this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your application's form:</p>
<pre><code>Declare Sub ClipCursorRect Lib "User" Alias "ClipCursor" (lpRect As RECT)
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>ClipCursorRect</b> function can be called by passing it just one argument—a RECT rectangle structure. This structure describes the area to which you want to restrict the cursor's movement. The <b>RECT</b> structure is defined as follows:</p>
<pre><code>Type RECT
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
</code></pre>
<p>
The left, right, top, and bottom values represent the area's coordinates within the window that you want to work with. After you have determined the area you want to restrict cursor movement to, you must use the <b>SetCursorPos</b> function to move the cursor to this area. As stated earlier, you would add the <b>Declare</b> statement for this function to the General Declarations section as:</p>
<pre><code>Declare Sub SetCursorPos Lib "User" (ByVal X As Integer, ByVal Y As Integer)
</code></pre>
<p>
When you want to move the cursor to a specific location, you call the <b>SetCursorPos</b> function with the <i>X</i> argument set to the horizontal screen coordinate and the <i>Y</i> argument set to the vertical screen coordinate that corresponds to the position on the screen that you want the cursor moved to.</p>
<p>
It is important to note that you must also call the <b>ClipCursorClear</b> function to restore the mouse pointer to its normal state. If you don't do this, your program's user will not be able to move the mouse pointer away from the restricted area, most likely forcing him or her to reboot the computer system. The <b>ClipCursorClear</b> function can be called with a value of zero to turn off the cursor clipping.</p>
<h2>Example Program</h2>
<p>
The following program shows how you can restrict the mouse pointer's movement within a Visual Basic program. In this example, you can only move the mouse pointer with the Text Box control as long as the time delay is in effect. After the For-Next loop has finished its work, the mouse pointer's movement is restored to its normal functionality.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp;&nbsp; Dim CursorX As Integer
 &nbsp;&nbsp; Dim CursorY As Integer
 &nbsp;&nbsp; Dim lpRect As RECT
 &nbsp;&nbsp; Dim X As Integer&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; lpRect.Left = Text1.Left \ Screen.TwipsPerPixelX
 &nbsp;&nbsp; lpRect.Top = Text1.Top \ Screen.TwipsPerPixelY
 &nbsp;&nbsp; lpRect.Right = (Text1.Left + Text1.Width) \ Screen.TwipsPerPixelX
 &nbsp;&nbsp; lpRect.Bottom = (Text1.Top + Text1.Height) \ Screen.TwipsPerPixelY
 &nbsp;&nbsp; CursorX = lpRect.Left + (lpRect.Right - lpRect.Left) \ 2
 &nbsp;&nbsp; CursorY = lpRect.Top + (lpRect.Bottom - lpRect.Top) \ 2&nbsp; 
Call SetCursorPos(CursorX, CursorY)
 &nbsp;&nbsp; Call ClipCursorRect(lpRect)
For X = 1 To 200
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print Str$(X)
 &nbsp;&nbsp; Next X
Call ClipCursorClear(0&amp;)
End Sub
</code></pre>
</li>
<li>
Add a Text Box control to Form1. Text1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as one single line of text):<pre><code>Declare Sub ClipCursorRect Lib "User" Alias "ClipCursor" (lpRect As RECT)
Declare Sub SetCursorPos Lib "User" (ByVal X As Integer, ByVal Y As Integer)
Declare Sub ClipCursorClear Lib "User" Alias "ClipCursor" (ByVal lpRect As Long)
</code></pre>
</li>
<li>
Add a new BAS module to the project. Module1.Bas is created by default.<br><br></li>
<li>
Add the following structure to Module1.Bas:<pre><code>Type RECT
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
</code></pre>
</li>
</ol>
</BODY>
</HTML>

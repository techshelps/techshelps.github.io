<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the Schedule+ OLE Automation Server: Internal Objects</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_mapschio"></a></sup>Mapping the Schedule+ OLE Automation Server: Internal Objects</h1>
<p>
Ken Lassesen<br>
Microsoft Developer Network Technology Group</p>
<p>
December 14, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4537">
</OBJECT><a href="javascript:sample1.Click()">Click here for a diagram of the Microsoft Schedule+ OLE Automation Server: Internal Objects in various graphics formats.</a></p>
<h2>Abstract</h2>
<p>
This article consists primarily of a graphic map of the internal objects of the Microsoft® Schedule+ OLE Automation server, showing its properties, methods, and child objects. This is the third in a series of extended maps describing different views of the Schedule+ server. This object manipulates the completed Schedule+ OLE Automation server. Any Visual Basic®–based language (Access Basic, Visual Basic, and Visual Basic for Applications) and Visual C++™ can access the Schedule+ OLE Automation server.</p>
<h2>The Microsoft Schedule+ OLE Automation Server: Internal Objects</h2>
<p>
The map of the internal objects of the Microsoft® Schedule+ OLE Automation server describes the complete Schedule+ OLE Automation server. SPlus, my name for the view of these internal objects, includes the information visible to the user through the Schedule+ graphical user interface (GUI) and information not visible through the GUI. SPlus illustrates how the developer may use child tables of existing items. This server implements recursive objects that are not available in most OLE Automation servers.</p>
<p>
SPlus shows that many objects (<b>Access</b>, <b>Alarm</b>, <b>Appointment</b>, <b>Event</b>, <b>Task</b>, <b>Contact</b>, <b>Project</b>, <b>DeletedItem</b>, and so on) are not separate object types; rather, these objects are the same <b>Item</b> objects. These <b>Item</b> objects have the same set of properties and the same set of methods. The difference between them is the value of the <b>Name</b> <b>Property</b> object. The <b>Schedule</b> object is an exception because it is a subclass of the <b>Item</b> object. The <b>Schedule</b> object has all of the methods and properties of the <b>Item</b> object by name, though some of the <b>Property</b> objects have been replaced with a data item. The <b>Schedule</b> object also has additional properties and methods!</p>
<p>
Figure 1 shows the relationship between objects as discovered in conversations with the Schedule+ developers and some traditional hacking of the Schedule+ OLE Automation server. A map is a good learning aid and a quick reference when developing an application. After producing a map, I found that it was easy to work with Schedule+: I just posted the three appropriate extended maps for Schedule+ on my wall for quick reference, which is a lot faster than clicking objects in a Help file one by one to discover their properties and methods.</p>
<p>
Because Figure 1 is difficult to read online, I have included the two most common graphics formats—encapsulated PostScript™ (.EPS) and Microsoft Windows® metafile (.WMF)—as well as a copy of my original Shapeware® Visio™ version 4.0 file (.VSD). The first two formats can be printed across multiple pages using any of the commercial graphics applications—such as Adobe™ PageMaker™, Corel® Draw, or Microsoft Publisher—or using Microsoft Excel. The original Visio file is included for those who have a copy of Visio and want to modify the diagram easily. For further information, see the bibliography at the end of this article. </p>
<p>
<img src="mapschio_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Microsoft Schedule+ OLE Automation Server: Internal Objects</b></p>
<p>
Some characteristics of the Schedule+ OLE Automation server are different from the common OLE Automation servers. SPlus illustrates the extensibility of this server and offers a different view than those presented in my adjunct articles, <a href="msdn_mapspl95.htm">"Mapping the Schedule+ 7.0 Object Library: SPL 7.0"</a> and <a href="msdn_mapschpm.htm">"Mapping the Schedule+ OLE Automation Server: Programming Model,"</a> which are available in the MSDN Library. The key extensibility features are listed below.
<ul type=disc>
<li>
All of the properties on an <b>Item</b> may be used, regardless of the name of the item. For example, a <b>DeletedItem</b> object in the Programming Model extended map has no <b>Property </b>objects listed. In reality, a <b>DeletedItem</b> object has all of the properties of an <b>Item</b> object available. This is not intuitive, so a simple example may better explain this concept. <pre><code>Debug.Print DeletedItems.rows
 5 
While Not DeletedItems.IsEndofTable
 &nbsp; Debug.print DeletedItems.item.properties
 &nbsp; DeletedItems.skip
Wend
  6 
 10 
  8 
 11 
 10 
</code></pre>
</li>
<li>
Because the <b>Schedule</b> object is an <b>Item</b> object, many of the <b>Table</b> objects are available on <i>any</i> <b>Item </b>object. For example:<pre><code>Debug.Print DeletedItems.Item.Contacts.rows,DeletedItems.Item.Projects.rows
 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 
</code></pre>
<p class=tl>
These features enable the Schedule+ OLE Automation server to do complex activities. Consider the following case study illustrated in Figure 2.</P><p class=tl>
I have a bunch of people (<b>Contact</b> objects) who I am working with on different software projects (<b>Project</b> objects). Each software project is made up of different job types (<b>Role</b> objects), for example, programmer, analyst, writer, and tester. Each software project also consists of a series of jobs (also <b>Project</b> objects) done by one or more persons (<b>Contact</b> objects). </P><p>
<img src="mapschio_2.gif" border=0></P><p class=label>
<b>Figure 2. A sample of recursive Schedule+ tables</b>
<p class=tl>
Many developers who look at the various extended maps would start to look for ways to place the <b>ItemID</b> value of each <b>Project</b> <b>Item </b>object in various <b>Contact </b>properties and hope they could avoid recursive relationships if more functionality is needed!</P><p class=tl>
I take a different approach because I understand the power of this server's design. I would enter the information exactly as described above. The code sample below illustrates how I would do this.</P><pre><code>Dim NewItem As Object
Dim NewProject As Object
Dim NewContact As Object
Dim NewRoles As Object

Set NewItem = Contacts.New
NewItem.LastName = "Gates"
NewItem.FirstName = "Bill"
NewItem.Flush

Set NewProject = NewItem.Projects.New
NewProject.Text = "Visual Basic for the Internet"
NewProject.Flush

Set NewRoles = NewProject.Roles.New
NewRoles.JobTitle = "Writer"
NewRoles.Flush

Set NewContact = NewRoles.Contacts.New
NewContact.LastName = "Lassesen"
NewContact.FirstName = "Ken M"
NewContact.Flush

Set NewProject = NewRoles.Projects.New
NewProject.JobTitle = "MSDN Library Articles"
NewProject.Flush
</code></pre>
<p class=tl>
The code above shows that I can add items to tables that are part of items. Tables that are part of a merged table structure do not support the creation of new <b>Item</b> objects, except for the <b>Schedule</b> object. The support for the <b>New</b> method on the various tables is shown in Table 1.</P></li>
</ul>
<p class=label>
<b>Table 1. Tables Support for the New Method</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>New (Valid for Schedule object only)</b></td>
<td class=label width=50%><b>New (Valid for any Item object)</b></td>
</tr>
<tr valign=top>
<td width=50%><b>Appointments</b></td>
<td width=50%><b>AccessControls</b></td>
</tr>
<tr valign=top>
<td width=50%><b>SingleAppointments</b></td>
<td width=50%><b>AlarmsToRing</b></td>
</tr>
<tr valign=top>
<td width=50%><b>RecurringAppointments</b></td>
<td width=50%><b>Attendees</b></td>
</tr>
<tr valign=top>
<td width=50%><b>Tasks</b></td>
<td width=50%><b>Contacts</b></td>
</tr>
<tr valign=top>
<td width=50%><b>SingleTasks</b></td>
<td width=50%><b>Exceptions</b></td>
</tr>
<tr valign=top>
<td width=50%><b>RecurringTasks</b></td>
<td width=50%><b>Projects</b></td>
</tr>
<tr valign=top>
<td width=50%><b>Events</b></td>
<td width=50%><b>Roles</b></td>
</tr>
<tr valign=top>
<td width=50%><b>SingleEvents</b></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><b>RecurringEvents</b></td>
<td width=50%></td>
</tr>
</table><br>
<ul type=disc>
<li>
The <b>GetProperty</b> and <b>GetProperties</b> methods do<i> not</i> return <b>Property</b> objects; rather, they return <b>Value </b>properties of the <b>Property</b> object in a two-dimension variant array. </li>
</ul>
<p>
These examples show that the Schedule+ OLE Automation server is quite different from most servers. These differences make it a powerful and flexible tool in the Microsoft Solutions Development Kit. </p>
<h3>Object Definitions</h3>
<p>
The objects and collections in Figure 1 are defined in Table 2. These objects are listed in the same sequence as they appear in the map. The <b>Roles</b> table contains the <b>Role</b> object that is used to support the Covey Seven Habits tool included with the Microsoft Exchange Server Software Development Kit (SDK). Use of the <b>Role</b> object may result in future compatibility problems.</p>
<p class=label>
<b>Table 2. Object Definitions&nbsp; </b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Object</b></td>
<td class=label width=65%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=35%><b>Application </b></td>
<td width=65%>Reports information about the single-document interface (SDI) application.</td>
</tr>
<tr valign=top>
<td width=35%><b>Schedule </b></td>
<td width=65%>Represents one schedule in the <b>Application</b> object. This is also an <b>Item</b> object.</td>
</tr>
<tr valign=top>
<td width=35%><b>Table </b></td>
<td width=65%>Represents a table of <b>Item</b> records storing information. It is not a collection.</td>
</tr>
<tr valign=top>
<td width=35%><b>Item </b></td>
<td width=65%>Represents an object that may be a <b>Property </b>or a <b>Table</b>.</td>
</tr>
<tr valign=top>
<td width=35%><b>Property </b></td>
<td width=65%>Represents information about a characteristic of an object. There may be multiple values stored in one <b>Property</b> object. (See the <b>Count</b> <b>Property</b> object to determine the number.)</td>
</tr>
</table><br>
<h2>Bibliography</h2>
<p>
Lassesen, Ken. <a href="msdn_schpext.htm">"An Extended Introduction to Schedule+ OLE Automation Programming."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapspl95.htm">"Mapping the Schedule+ 7.0 Object Library: SPL 7.0."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. <a href="msdn_mapschpm.htm">"Mapping the Schedule+ OLE Automation Server: Programming Model."</a> (MSDN Library, Technical Articles)</p>
<p>
Lassesen, Ken. "Schedule+ OLE Automation." <i>Developer Network News</i>, January/February 1996, Number 1. (MSDN Library, Periodicals, Microsoft Developer Network News)</p>
<p>
Lassesen, Ken. <a href="msdn_ole2soln.htm">"Using Microsoft OLE Automation Servers to Develop Solutions."</a> (MSDN Library, Technical Articles)</p>
<p>
Microsoft Exchange Server SDK. <i>Microsoft Schedule+ Programmer's Guide</i>. (MSDN Library, Product Documentation)</p>
</BODY>
</HTML>

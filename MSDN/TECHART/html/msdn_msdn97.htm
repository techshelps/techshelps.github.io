<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 97: Creating a Task List</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn97"></a></sup>Tip 97: Creating a Task List</h1>
<p>
May 29, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can determine what modules are currently running under Microsoft® Windows® and create a task list based on that information.</p>
<h2>Determine What Modules Are Currently Running</h2>
<p>
The TOOLHELP.DLL dynamic-link library (.DLL) file contains two Windows® application programming interface (API) functions that can be used to create a list of modules currently loaded under Windows. These are the <b>ModuleFirst</b> and <b>ModuleNext</b> functions. To declare these functions within your program, include the following <b>Declare</b> statements in the Global Module or General Declarations section of a Visual Basic® form:</p>
<pre><code>Private Declare Function ModuleFirst Lib "toolhelp.dll" (mdlentry As 
 &nbsp; ModuleEntry) As Integer
Private Declare Function ModuleNext Lib "toolhelp.dll" (mdlentry As ModuleEntry) 
 &nbsp; As Integer
</code></pre>
<p>
Note that each <b>Declare</b> statement must be typed as a single line of text.</p>
<p>
The <b>ModuleFirst</b> and <b>ModuleNext</b> functions are the key to traversing the chain of loaded modules in Windows. The <b>ModuleFirst</b> function fills the specified structure with information describing the first module in the list of currently loaded modules. The <b>ModuleNext</b> function is then called to find the next module in the list.</p>
<p>
The <b>MODULEENTRY</b> structure required by these two functions must be defined as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%><i>dwSize</i></td>
<td width=78%>The size of the structure in bytes.</td>
</tr>
<tr valign=top>
<td width=22%><i>szModule</i></td>
<td width=78%>The module's name (a null-terminated string).</td>
</tr>
<tr valign=top>
<td width=22%><i>hModule</i></td>
<td width=78%>The module's handle.</td>
</tr>
<tr valign=top>
<td width=22%><i>wcUsage</i></td>
<td width=78%>Used by <b>GetModuleUsage</b> function.</td>
</tr>
<tr valign=top>
<td width=22%><i>szExePath</i></td>
<td width=78%>The module.</td>
</tr>
<tr valign=top>
<td width=22%><i>wNext</i></td>
<td width=78%>The window.</td>
</tr>
</table><br>
<p>
Before you can use these two functions, however, you must initialize the <i>dwSize</i> field of the <b>MODULEENTRY</b> structure. This value should be specified as the number of bytes needed to store the information returned by <b>ModuleFirst</b> and <b>ModuleNext</b>.</p>
<p>
These functions return a value indicating the status of the function. The function was successful if the returned value is nonzero; the function was not successful (or no more modules were found in memory) if the value returned is zero.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve the module name and path for every running task under Windows. The name of each module is displayed in the first <b>List Box</b> control, while the full path of the module is displayed in the second <b>List Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that each <b>Declare</b> statement should be typed as a single line of text):<pre><code>Private Declare Function ModuleFirst Lib "toolhelp.dll" (mdlentry As 
 &nbsp; ModuleEntry) As Integer
Private Declare Function ModuleNext Lib "toolhelp.dll" (mdlentry As ModuleEntry) 
 &nbsp; As Integer
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim Tmp As ModuleEntry
 &nbsp;&nbsp; Dim Retn As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Tmp.dwSize = Len(Tmp)
 &nbsp;&nbsp; Retn = ModuleFirst(Tmp)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; While Retn &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(Tmp.szExepath, ".VBX") &lt;&gt; 0 Or InStr(Tmp.szExepath, ".DLL") &lt;&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 Or InStr(Tmp.szExepath, "&gt;DRV") &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List1.AddItem Tmp.szModule
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List2.AddItem Tmp.szExepath
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tmp.szExepath = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Retn = ModuleNext(Tmp)
 &nbsp;&nbsp; Wend
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default.<br><br></li>
<li>
Add a second <b>List Box</b> control to Form1. List2 is created by default.<br><br></li>
<li>
From the Insert menu, select Module. Module1.Bas is created by default.<br><br></li>
<li>
Add the following user-defined Type to Module1.Bas:<pre><code>Type ModuleEntry
 &nbsp;&nbsp; dwSize As Long
 &nbsp;&nbsp; szModule As String * 10
 &nbsp;&nbsp; hModule As Integer
 &nbsp;&nbsp; wcUsage As Integer
 &nbsp;&nbsp; szExepath As String * 256
 &nbsp;&nbsp; wNext As Integer
End Type
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q78001. "How to Get Windows Master (Task List) Using Visual Basic."</p>
<p>
Knowledge Base Q80124. "Retrieving the Names of Simultaneous Tasks Under Windows."</p>
<p>
"Windows Questions and Answers." (MSDN Library Archive, Books and Periodicals, Microsoft Systems Journal, 1994 Volume 9, May 1994 Number 5)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 147: Retrieving Multiple File Names from the Common Dialog Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn147"></a></sup>Tip 147: Retrieving Multiple File Names from the Common Dialog Control</h1>
<p>
August 31, 1995</p>
<h2>Abstract</h2>
<p>
The <b>Common Dialog File</b> control lets you easily select one or more files in your Microsoft® Visual Basic® application. This article shows how you can retrieve the names of selected files from the <b>Common Dialog</b> control.</p>
<h2>Using the Common Dialog Control</h2>
<p>
The <b>Common Dialog File</b> control in Microsoft® Visual Basic® allows you to provide a user with access to the directory and file structure of the hard disk from within an application. For example, if a user needs to select a text file, you can display a <b>Common Dialog File</b> control box that allows that user to browse various directories until he or she finds the needed file. </p>
<p>
By setting the <b>Flags</b> property of the <b>Common Dialog</b> control to the constant value OFN_ALLOWMULTISELECT, you can make it possible for your user to select several files to work with. Multiple files can be selected by clicking each file name while pressing and holding down shift or ctrl. The selected file names are highlighted.</p>
<p>
To enable your Visual Basic program to work with files selected by the user, you need to retrieve each file name from the control's <b>Filename</b> property. The file names selected by the user are all stored in this property as one long string. Each file name is separated by a space (32) character.</p>
<p>
You can use the <b>InStr</b> function to search for the delimiting space character to retrieve each file name from the <b>Filename</b> property of the <b>Common Dialog</b>. The <b>InStr</b> function returns the location of the space character within the <b>Filename</b> property string. After you have obtained the location of the space character, you can use the <b>Mid</b> function to remove the individual file name entry from the string.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve all file names selected in a <b>Common Dialog File</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Common Dialog</b> control to Form1. CommonDialog1 is created by default.<br><br></li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim I As Integer
 &nbsp;&nbsp; Dim Y As Integer
 &nbsp;&nbsp; Dim Z As Integer
 &nbsp;&nbsp; Dim FileNames$()
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Const OFN_ALLOWMULTISELECT = &amp;H200&amp;
 &nbsp;&nbsp; 
 &nbsp;&nbsp; CommonDialog1.filename = ""
 &nbsp;&nbsp; CommonDialog1.Filter = "All Files|*.*"
 &nbsp;&nbsp; CommonDialog1.Flags = OFN_ALLOWMULTISELECT
 &nbsp;&nbsp; CommonDialog1.Action = 1
 &nbsp;&nbsp; 
 &nbsp;&nbsp; CommonDialog1.filename = CommonDialog1.filename &amp; Chr(32)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Z = 1
 &nbsp;&nbsp; For I = 1 To Len(CommonDialog1.filename)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I = InStr(Z, CommonDialog1.filename, Chr(32))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If I = 0 Then Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReDim Preserve FileNames(Y)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileNames(Y) = Mid(CommonDialog1.filename, Z, I - Z)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Z = I + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y = Y + 1
 &nbsp;&nbsp; Next
 &nbsp;&nbsp; 
 &nbsp;&nbsp; If Y = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = FileNames(0)
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text2.Text = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = 0 To Y - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If I = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text1.Text = FileNames(I)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text2.Text = Text2.Text &amp; UCase(FileNames(I)) &amp; Chr$(13) &amp; Chr$(10)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Click the <b>Command Button</b>. The <b>Common Dialog Box File</b> control will be displayed on the screen. Then, select several files from the file list by clicking a file name while pressing and holding down shift or ctrl. After you have selected he appropriate file(s), click OK. The file names will be displayed in the second <b>Text Box</b> control, and the directory name will be displayed in the first <b>Text Box</b> control.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Quick and Easy DDE Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_ddeserv"></a></sup>Quick and Easy DDE Server</h1>
<p>
Herman (Mr. DDE) Rodent<br>
Microsoft Developer Network Technology Group</p>
<p>
Created: November 30, 1992</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="271">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the DDEServ sample application for this technical article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="272">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the DDERecon sample application for this technical article.</a></p>
<h2>Abstract</h2>
<p>
Adding dynamic data exchange (DDE) server support to an application has never been easier. This article describes a code module you can include in your own application that makes adding DDE server support trivial. The code module makes use of the dynamic data exchange management library (DDEML) to implement the DDE protocol and provides the following features:
<ul type=disc>
<li>
Full System topic support<br><br></li>
<li>
An application programming interface (API) to dynamically add and remove topics and topic/item pairs<br><br></li>
<li>
An API to dynamically add and remove DDE execute commands to a topic<br><br></li>
<li>
Automatic tracking of conversations<br><br></li>
<li>
Built-in execute command parser<br><br></li>
<li>
Partial support for the Execute Control 1 protocol, which allows a result string to be returned in response to a DDE execute command request</li>
</ul>
<p>
This article requires considerable familiarity with DDE concepts—it's not a good place to start learning about DDE. Please refer to the Microsoft® Windows™ version 3.1 Software Development Kit (SDK) <i>Programmer's Reference, Volume 1: Overview</i>, Part 2: Extension Libraries for a general introduction to DDE and DDEML. The following articles on the Microsoft Developer Network CD (Technical Articles, Windows Articles, OLE and DDE Articles) provide more detail on various DDE topics:
<ul type=disc>
<li>
"DDE Execute Strings"<br><br></li>
<li>
"DDE Hot Links"<br><br></li>
<li>
"Performing DDE from a Dynamic-Link Library"<br><br></li>
<li>
"Raw DDE"<br><br></li>
<li>
"Supporting the Clipboard, DDE, and OLE in Applications"<br><br></li>
<li>
"Supporting the DDE System Topic"</li>
</ul>
<h2>Introduction</h2>
<p>
Creating a dynamic data exchange (DDE) server from scratch or adding DDE server support to an existing application can be a real nightmare. The DDE protocol is quite complex, and correctly implementing it is not a trivial matter. The dynamic data exchange management library (DDEML) has improved matters considerably. DDEML is a support library that implements the DDE protocol and provides an application programming interface (API) to the developer to simplify DDE implementation and make the resulting application conform more exactly to the DDE protocol.</p>
<p>
DDEServ, the source code sample included with this article, goes further than the DDEML API set and provides a single code module that fully implements a DDE server. The code module exports a number of functions that will greatly simplify implementation of a DDE server.</p>
<p>
This article describes the process of creating a DDE server from scratch using the sample code module and DDEML to provide most of the basic functionality. The server can support an arbitrary number of topics and topic/item pairs. The code maintains a set of simple linked lists and provides functions to add and remove topics and topic/item pairs at any time. The code tracks conversations so that they can be automatically terminated if their topic is removed while a conversation is still active.</p>
<p>
The sample code module includes a parser for DDE execute commands that conforms to the syntax used by applications such as Microsoft® Excel and the Windows™ Program Manager. Functions are provided to allow commands to be attached to or removed from a topic at any time.</p>
<p>
The functions provided by the sample code are listed below in the "Function Description" section. The structures used to construct the various lists are documented in the "Data Types and Structures" section.</p>
<h2>Creating a DDE Server</h2>
<p>
This section gives a step-by-step description of adding DDE server support to an application. The sample code has <b>#ifdef</b> blocks, which follow the steps described here. You can test the steps in the sample code by changing the <b>#define STEP_<i>n</i></b> statements in the beginning of the DDESERV.C file and then building the server. Here's what the code at the start of the DDESERV.C module looks like if you are preparing to build the sample for Step 1:</p>
<pre><code>&nbsp;&nbsp;&nbsp;#define STEP_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialization and termination
// #define STEP_2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Topic/Item pairs
// #define STEP_3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Additional System topic items
// #define STEP_4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Execute commands
</code></pre>
<h3>Getting Prepared</h3>
<p>
Before you start modifying your own code, I suggest you take a look at DDEServ, one of the two sample applications that accompanies this technical article, and follow the steps suggested here to familiarize yourself with what is going on at each step. Later, when you make these modifications to your own code, you will be familiar with the behavior you are expecting and have some practice at testing a server. </p>
<p>
You should start by building the sample server application without any of the <b>STEP_</b> statements defined. The application should start but have no DDE service registered. You can verify this by running DDERecon, the other sample application that accompanies this article, and seeing that DDEServ is not listed as a DDE service.</p>
<h3>Step 1. Initialization and Termination</h3>
<p>
The first step in implementing DDE server support is to add a call to <b>InitializeDDE</b>. An ideal time to do this is right after the main window of the application has been created. The <b>InitializeDDE</b> function calls DDEML to register the application with the library and get the instance identifier from DDEML. The code then goes on to add a standard set of System topic items and finally to register the name of the service the server will provide.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The sample code supports only one service per server.</p>
<p>
The initialization call looks like this:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;InitializeDDE(hInstance,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SZ_SERVICENAME,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;dwDDEInst, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0);
</code></pre>
<p>
When the application receives the WM_DESTROY message, it should call <b>UninitializeDDE</b>, which unregisters the service name, frees all the resources used, and releases DDEML.</p>
<p>
The call looks like this:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;case WM_DESTROY:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UninitializeDDE();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostQuitMessage(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
</code></pre>
<p>
Having added these two calls to initialize the server and close it down when the application exits, you can now compile the code and test it. You can test its DDE capabilities by running the DDERecon sample application. DDERecon should show the service name in the services list and should show that the minimum System topic support is working. Figure 1 shows what the DDERecon connect dialog box, Create DDE Link, should look like for a Step 1 build of the DDEServ sample application.</p>
<p>
<img src="ddeserv_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The DDERecon connect dialog box shows a Step 1 implementation of DDEServ.</b></p>
<h3>Step 2. Topic/Item Pairs</h3>
<p>
The next step is to add support for each topic/item pair your server supports. This code is added to the existing initialization code. To add a topic/item pair, call the <b>AddDDEItem</b> function. It is not necessary to make a call to <b>AddDDETopic</b> first. If the topic does not exist, <b>AddDDEItem</b> will create it. The sample application supports a topic called Info and an item called Value. The Value item is a 16-bit signed integer quantity that can be interrogated and set from a DDE client application.</p>
<p>
The initialization code now includes this call:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;AddDDEItem(SZ_INFO, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SZ_VALUE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyFormats,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValueRequest,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValuePoke);
</code></pre>
<p>
MyFormats is a null-terminated list of Clipboard formats supported by the server. The DDEServ sample application supports only the CF_TEXT format. <b>ValueRequest</b> and <b>ValuePoke</b> are functions that will be called when a client tries, respectively, to access and alter the item data. Here's the request handler for the Value item:</p>
<pre><code>HDDEDATA ValueRequest(UINT wFmt, HSZ hszTopic, HSZ hszItem)
{
 &nbsp;&nbsp; char buf[40];

 &nbsp;&nbsp; wsprintf(buf, "%d", giValue);
 &nbsp;&nbsp; return MakeCFText(wFmt, buf, hszItem);
}
</code></pre>
<p>
The value is converted to a string and then to a DDE data item. The <b>MakeCFText</b> function is the skeleton of what might be a more complete piece of code. The sample version will only convert to CF_TEXT format. A more complete server might support other formats.</p>
<pre><code>HDDEDATA MakeCFText(UINT wFmt, LPSTR lpszStr, HSZ hszItem)
{
 &nbsp;&nbsp; if (wFmt != CF_TEXT) return NULL;

 &nbsp;&nbsp; return DdeCreateDataHandle(dwDDEInst,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpszStr,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lstrlen(lpszStr)+1,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hszItem,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CF_TEXT,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);
}
</code></pre>
<p>
Try building the sample server with the <b>STEP_2</b> statement defined. Run DDERecon again and see that the server now has an Info topic, and the Info topic has a Value item. Note that it also has Formats and TopicItemList items. These were added by the STDDDE module when the Info topic was added. Figure 2 shows the DDERecon connect dialog box at this point.</p>
<p>
<img src="ddeserv_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The DDERecon connect dialog box after the Info topic has been added in Step 2.</b></p>
<h3>Step 3. Additional System Topic Items</h3>
<p>
One of the optional System topic items in a DDE server is the Help item. You can add items to the System topic in the same way you can add items to any topic. The sample application adds a Help item to the System topic with this call:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;AddDDEItem(SZDDESYS_TOPIC, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SZDDESYS_ITEM_HELP,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyFormats,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysHelpRequest,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);
</code></pre>
<p>
The <b>SysHelpRequest</b> function formats a simple string of text and returns it to the client. Try defining <b>STEP_3</b> in the sample and building it. Use DDERecon to view the System topic items and connect to the Help item. Figure 3 shows the Help item in the System topics list of the DDERecon connect dialog box.</p>
<p>
<img src="ddeserv_3.gif" border=0></p>
<p class=label>
<b>Figure 3. The DDERecon connect dialog box after the Help item is added to the System topic in Step 3.</b></p>
<h3>Step 4. Execute Commands</h3>
<p>
DDE servers may optionally support a set of execute commands. The syntax of these commands and other details of their implementation is covered in the "DDE Execute Strings" technical article on the Microsoft Developer Network CD. The sample server, DDERecon, supports an Actions topic with a single <b>Text</b> command. A client can connect to the Actions topic and issue execute requests to it. The <b>Text</b> command follows Microsoft Excel syntax :</p>
<pre><code>[Text(20,30,"Hi there Tiger!")]
</code></pre>
<p>
The first argument is the x ordinate, the second is the y ordinate, and the third is the text itself. The text string is output to the client area of the server main window. The coordinates are in pixels.</p>
<p>
The STDDDE.C module provides a command parser for execute function requests. It assumes that the syntax of these requests conforms to the Microsoft Excel standard. The code to add a command looks like this:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;AddDDEExecCmd(SZ_CMDTOPIC,&nbsp; "Text",&nbsp; TextFn,&nbsp; 3,&nbsp; 3);
</code></pre>
<p>
Note that the topic is added automatically if it doesn't already exist. The fourth and fifth arguments describe the minimum and maximum number of arguments, respectively, that the <b>Text</b> command takes. The command processing functions receive their arguments in a list rather like the conventional C <i>argc, argv </i>method. Here's the handler for the <b>Text</b> command:</p>
<pre><code>BOOL FAR TextFn(PDDETOPICINFO pTopic,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPSTR pszResult,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UINT uiResultSize,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UINT uiNargs,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPSTR FAR *ppArgs)
{
 &nbsp;&nbsp; HDC hDC;
 &nbsp;&nbsp; int x, y;
 &nbsp;&nbsp; char buf[32];

 &nbsp;&nbsp; _fstrncpy(buf, ppArgs[0], sizeof(buf)-1);
 &nbsp;&nbsp; x = atoi(buf);
 &nbsp;&nbsp; _fstrncpy(buf, ppArgs[1], sizeof(buf)-1);
 &nbsp;&nbsp; y = atoi(buf);

 &nbsp;&nbsp; hDC = GetDC(ghwndMain);
 &nbsp;&nbsp; TextOut(hDC, x, y, ppArgs[2], _fstrlen(ppArgs[2]));
 &nbsp;&nbsp; ReleaseDC(ghwndMain, hDC);

 &nbsp;&nbsp; return TRUE;
}
</code></pre>
<p>
The coordinates are converted to integer values by copying their string representations to local memory and using a C run-time function to convert them. <b>TextOut</b> is then used to write the text to the device context (DC) of the application's main window.</p>
<p>
This function never fails, but of course there are those that do! If the function detects an error, it can return an error information string by copying it to the buffer pointed to by <i>pszResult</i>. If the client application has requested that return information be saved by using the <b>Result</b> command to name an item in which to save the data, then your return string will be saved in that item for later retrieval by the client. See the "DDE Execute Strings" technical article for more details about how this protocol works. The sample code module supports a reduced version of this protocol.</p>
<h2>Advanced Functionality</h2>
<p>
The preceding section covered the basics of adding DDE server support to an application. This section describes some additional possibilities when using the STDDDE.C sample code module.</p>
<h3>Dynamically Altering the Topic and Item Lists</h3>
<p>
A server need not have a fixed set of topics or topic/item pairs. The sample code module (STDDDE.C) provides the <b>RemoveDDEItem</b> and <b>RemoveDDETopic</b> functions to remove an item from a topic or to remove a complete topic. Note that removing all the items from a topic doesn't delete the topic. The STDDDE.C module tracks conversations, so it can disconnect them if their topic is deleted while they are still active. </p>
<p>
As an example of where this may be used, consider an application with a multiple document interface (MDI) such as Microsoft Excel, which can open multiple files. For each open file, the application can create a topic so that the file can be manipulated by other DDE requests. When a file is opened, its path is added as a topic, and when the file is closed, that topic is removed. If you have a copy of Microsoft Excel, try opening a number of spreadsheets and running the DDERecon application to view the Microsoft Excel topic list. Figure 4 shows an example of the topics Microsoft Excel creates.</p>
<p>
<img src="ddeserv_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Microsoft Excel creates topics for each file it has open.</b></p>
<h3>Dynamically Adding and Removing Execute Commands</h3>
<p>
Commands, too, may be added to or removed from a topic at any time. They are added by calling <b>AddDDEExecCmd</b> and removed by calling <b>RemoveDDEExecCmd</b>. If you intend to have a dynamically varying command list for your server, you should consider how a client application is going to be able to see what the currently available command set is. There is no standard way of doing this, but you might consider adding another item such as CommandList to the topic that supports the commands. Another way to do this is to consider the set of commands as a protocol supported by the server, give this protocol a name, and include it in the System topic protocols item list. You can publish the command set for your protocol, and client applications can interrogate your server to see if it supports the named protocol.</p>
<h3>Topic and Item Request Handlers</h3>
<p>
It is not necessary to have a different handler for every topic/item pair added with the <b>AddDDEItem</b> function. Many topic/item pairs can use the same handler. The handler is passed the <b>HSZ</b> of both the topic and the item, so it can use the <b>FindTopicFromHsz</b> and <b>FindItemFromHsz</b> functions to get pointers to topic or item information structures. These structures (<b>DDETOPICINFO</b> and <b>DDEITEMINFO</b>) can be expanded, according to your needs, to contain whatever information you require. Having received a pointer to the specific information, the handler can perform whatever generic processing is required.</p>
<p>
It is possible to have a single handler for an entire topic. The <b>AddDDETopic</b> function has arguments to define generic topic Request and Poke handlers. If a topic/item pair has a generic topic handler and also a specific item handler, the item handler will be used. If neither a generic topic handler nor a specific item handler is supplied, the STDDDE.C module code fails that request.</p>
<h3>Making Advise Notifications</h3>
<p>
If a data item changes at the server, it can use the <b>PostDDEAdvise</b> function to notify all clients of the change. <b>PostDDEAdvise</b> takes a pointer to a <b>DDEITEMINFO</b> structure as its argument. You can use the <b>FindItemFromHsz</b> and <b>FindItemFromName</b> functions to return a structure pointer to a specific item. The <b>FindTopicFromHsz</b> and <b>FindTopicFromName</b> functions can locate a pointer to a <b>DDETOPICINFO</b> structure.</p>
<h3>Working with Multiple Data Formats</h3>
<p>
If your server supports many Clipboard data formats, the <b>GetCFIdFromName</b> and <b>GetCFFromId</b> functions can be used to translate a Clipboard format ID to and from the string representation of its name. The STDDDE.C module contains standard string names for the defined Windows Clipboard formats.</p>
<h2>Function Description</h2>
<p>
This section describes the APIs that are global in the STDDDE.C module. The code also contains a number of internal functions that are documented in the code itself. See the "Data Types and Structures" section below for details about the data structures referred to here.</p>
<h3>AddDDEExecCmd</h3>
<p>
Adds an execute command processor to a topic.</p>
<h4>Syntax</h4>
<p>
PDDEEXECCMDFNINFO&nbsp; AddDDEExecCmd(<b><i>pszTopic</i></b>, <b><i>pszCmdName</i></b>, <b><i>pfnExecCmd</i></b>, <br>
 &nbsp;&nbsp;&nbsp; <b><i>uiMinArgs</i></b>, <b><i>uiMaxArgs</i></b>)</p>
<h4>Parameters</h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic to add the command to.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszCmdName</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the command to add.</p>
<p class=dt>
PDDEEXECCMDFN&nbsp; <b><i>pfnExecCmd</i></b> </p>
<p class=indent>
Pointer to a function to handle the command request.</p>
<p class=dt>
UINT&nbsp; <b><i>uiMinArgs</i></b> </p>
<p class=indent>
Minimum number of arguments that are valid for this command.</p>
<p class=dt>
UINT&nbsp; <b><i>uiMaxArgs </i></b></p>
<p class=indent>
Maximum number of arguments that are valid for this command.</p>
<h4>Return Value</h4>
<p>
The return value is a pointer to a <b>DDEEXECCMDFNINFO</b> structure if the command is added successfully; otherwise, it is NULL.</p>
<h4>Comments</h4>
<p>
If the topic does not exist, it will be created. If the command already exists, the information will be updated.</p>
<h3>AddDDEItem</h3>
<p>
Adds an item to a topic.</p>
<h4>Syntax</h4>
<p>
PDDEITEMINFO&nbsp; AddDDEItem(<b><i>pszTopic</i></b>, <b><i>pszItem</i></b>, <b><i>pFormatList</i></b>, <b><i>pfnRequest</i></b>, <b><i>pfnPoke</i></b>)</p>
<h4>Parameters</h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic to add the item to.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszItem</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the item to add.</p>
<p class=dt>
LPWORD&nbsp; <b><i>pFormatList</i></b> </p>
<p class=indent>
Pointer to a list of valid formats.</p>
<p class=dt>
PDDEREQUESTFN&nbsp; <b><i>pfnRequest</i></b> </p>
<p class=indent>
Pointer to an optional function to handle request requests for this item. If this function is not provided, the default action is to call the topic generic-request-processor function if present. </p>
<p class=dt>
PDDEPOKEFN&nbsp; <b><i>pfnPoke</i></b> </p>
<p class=indent>
Pointer to an optional function to handle poke requests for this item. If this function is not provided, the default action is to call the topic generic-poke-processor function if present.&nbsp; </p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDEITEMINFO</b> structure if the item is added or NULL if not.</p>
<h3>AddDDETopic</h3>
<p>
Adds a new topic and default processing for its item list and formats.</p>
<h4>Syntax </h4>
<p>
PDDETOPICINFO&nbsp; AddDDETopic(<b><i>pszTopic</i></b>, <b><i>pfnExec</i></b>, <b><i>pfnRequest</i></b>, <b><i>pfnPoke</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic.</p>
<p class=dt>
PDDEEXECFN&nbsp; <b><i>pfnExec</i></b> </p>
<p class=indent>
Pointer to an optional execute command processing function. This argument may be NULL, in which case the standard execute command parser will be used to process the request.</p>
<p class=dt>
PDDEREQUESTFN&nbsp; <b><i>pfnRequest</i></b> </p>
<p class=indent>
Pointer to an optional function to handle request requests for items of this topic. If this function is provided, it will be called for any item not having its own request function processor.</p>
<p class=dt>
PDDEPOKEFN&nbsp; <b><i>pfnPoke</i></b> </p>
<p class=indent>
Pointer to an optional function to handle poke requests for items of this topic. If this function is provided, it will be called for any item not having its own poke function processor.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDETOPICINFO</b> structure if the topic is added or NULL if not.</p>
<h4>Comments </h4>
<p>
If the topic already exists, its information will be updated by the call.</p>
<h3>FindExecCmdFromName</h3>
<p>
Finds a DDE execute command from its string name.</p>
<h4>Syntax </h4>
<p>
PDDEEXECCMDFNINFO&nbsp; FindExecCmdFromName(<b><i>pTopic</i></b>, <b><i>pszCmd</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
PDDETOPICINFO&nbsp; <b><i>pTopic</i></b> </p>
<p class=indent>
Pointer to the <b>DDETOPICINFO</b> structure for the topic being searched.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszCmd</i></b> </p>
<p class=indent>
Pointer to the string containing the name of the command to search for.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDEEXECCMDFNINFO</b> structure if the command is found; otherwise, it is NULL.</p>
<h4>Comments </h4>
<p>
The search is not case sensitive.</p>
<h3>FindItemFromHsz</h3>
<p>
Finds an item in the items list of a given topic by searching for its <b>HSZ</b> name.</p>
<h4>Syntax </h4>
<p>
PDDEITEMINFO&nbsp; FindItemFromHsz(<b><i>pTopic</i></b>, <b><i>hszItem</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
PDDETOPICINFO&nbsp; <b><i>pTopic</i></b> </p>
<p class=indent>
Pointer to the <b>DDETOPICINFO</b> structure for the topic being searched.</p>
<p class=dt>
LPSTR&nbsp; <b><i>hszItem</i></b> </p>
<p class=indent>
<b>HSZ</b> of the item to search for.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDEITEMINFO</b> structure if the item is found; otherwise, it is NULL.</p>
<h4>Comments </h4>
<p>
The search is not case sensitive.</p>
<h3>FindItemFromName</h3>
<p>
Finds an item in the items list of a given topic by searching for its string name.</p>
<h4>Syntax</h4>
<p>
PDDEITEMINFO&nbsp; FindItemFromName(<b><i>pTopic</i></b>, <b><i>pszItem</i></b>)</p>
<h4>Parameters</h4>
<p class=dt>
PDDETOPICINFO&nbsp; <b><i>pTopic</i></b> </p>
<p class=indent>
Pointer to the <b>DDETOPICINFO</b> structure for the topic being searched.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszItem</i></b> </p>
<p class=indent>
Pointer to the string containing the name of the item to search for.</p>
<h4>Return Value</h4>
<p>
The return value is a pointer to a <b>DDEITEMINFO</b> structure if the item is found; otherwise, it is NULL.</p>
<h4>Comments </h4>
<p>
The search is not case sensitive.</p>
<h3>FindTopicFromHsz</h3>
<p>
Finds a topic in the topics list by searching for its <b>HSZ</b> value.</p>
<h4>Syntax </h4>
<p>
PDDETOPICINFO&nbsp; FindTopicFromHsz(<b><i>hszName</i></b>)</p>
<h4>Parameter</h4>
<p class=dt>
HSZ&nbsp; <b><i>hszName</i></b> </p>
<p class=indent>
<b>HSZ</b> value to search for.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDETOPICINFO</b> structure if the topic is found; otherwise, it is NULL.</p>
<h4>Comments </h4>
<p>
The search is not case sensitive.</p>
<h3>FindTopicFromName</h3>
<p>
Finds a topic in the topic list by searching for its string name.</p>
<h4>Syntax </h4>
<p>
PDDETOPICINFO&nbsp; FindTopicFromName(<b><i>pszName</i></b>)</p>
<h4>Parameter</h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszName</i></b> </p>
<p class=indent>
Pointer to a string containing the name to search for.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to a <b>DDETOPICINFO</b> structure if the topic is found; otherwise, it is NULL.</p>
<h4>Comments </h4>
<p class=indent>
The search is not case sensitive.</p>
<h3>GetCFIdFromName</h3>
<p>
Gets a Clipboard format ID from its name.</p>
<h4>Syntax </h4>
<p>
WORD&nbsp; GetCFIdFromName(<b><i>pszName</i></b>)</p>
<h4>Parameter</h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszName</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the format.</p>
<h4>Return Value </h4>
<p>
The return value is either a standard format ID or the result of registering the name. The name supplied is always registered if it is not one of the standard ones.</p>
<h3>GetCFNameFromId</h3>
<p>
Gets the text name of a Clipboard format from its ID.</p>
<h4>Syntax </h4>
<p>
LPSTR&nbsp; GetCFNameFromId(<b><i>wFmt</i></b>, <b><i>pBuf</i></b>, <b><i>iSize</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
WORD&nbsp; <b><i>wFmt</i></b> </p>
<p class=indent>
Format tag to return the name for.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pBuf</i></b> </p>
<p class=indent>
Pointer to a buffer to receive the name.</p>
<p class=dt>
int&nbsp; <b><i>iSize</i></b> </p>
<p class=indent>
Size of the buffer.</p>
<h4>Return Value </h4>
<p>
The return value is a pointer to the return string.</p>
<h4>Comments </h4>
<p>
This command supports both standard and registered Clipboard formats.</p>
<h3>InitializeDDE</h3>
<p>
Initializes all the DDE lists for this server and initializes the DDEML DLL.</p>
<h4>Syntax </h4>
<p>
BOOL&nbsp; InitializeDDE(<b><i>hInstance</i></b>, <b><i>pszServiceName</i></b>, <b><i>pdwDDEInst</i></b>, <b><i>pfnCustomCallback</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
HANDLE&nbsp; <b><i>hInstance</i></b> </p>
<p class=indent>
Instance handle of the calling application.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszServiceName</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the service.</p>
<p class=dt>
LPDWORD&nbsp; <b><i>pdwDDEInst</i></b> </p>
<p class=indent>
Pointer to a DWORD variable to receive the instance identifier returned by DDEML. This argument is optional. It may be set to NULL.</p>
<p class=dt>
PFNCALLBACK&nbsp; <b><i>pfnCustomCallback</i></b> </p>
<p class=indent>
Pointer to an optional custom callback function. This parameter may be set to NULL, in which case all the handling will be done by STDDDE.</p>
<h4>Return Value </h4>
<p>
The return value is TRUE if the initialization succeeds and FALSE if it fails.</p>
<h4>Comments </h4>
<p>
This function adds to the System topic a number of items that are supported transparently to the application.</p>
<h3>PostDDEAdvise</h3>
<p>
Posts a DDE advise notice to DDEML.</p>
<h4>Syntax</h4>
<p>
void&nbsp; PostDDEAdvise(<b><i>pItemInfo</i></b>)</p>
<h4>Parameter</h4>
<p class=dt>
PDDEITEMINFO&nbsp; <b><i>pItemInfo</i></b> </p>
<p class=indent>
Pointer to a <b>DDEITEMINFO</b> structure describing the item.</p>
<h4>Return Value </h4>
<p>
There is no return value.</p>
<h3>RemoveDDEExecCmd</h3>
<p>
Removes a command from a topic.</p>
<h4>Syntax </h4>
<p>
BOOL&nbsp; RemoveDDEExecCmd(<b><i>pszTopic</i></b>, <b><i>pszCmdName</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic to remove the command from.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszCmdName</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the command to remove.</p>
<h4>Return Value </h4>
<p>
The return value is TRUE if the command is removed, FALSE if not.</p>
<h3>RemoveDDEItem</h3>
<p>
Removes an item from a topic.</p>
<h4>Syntax </h4>
<p>
BOOL&nbsp; RemoveDDEItem(<b><i>pszTopic</i></b>, <b><i>pszItem</i></b>)</p>
<h4>Parameters </h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic to remove the item from.</p>
<p class=dt>
LPSTR&nbsp; <b><i>pszItem</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the item to remove.</p>
<h4>Return Value </h4>
<p>
The return value is TRUE if the item is removed, FALSE if not.</p>
<h4>Comments </h4>
<p>
Removing all the items from a topic does not remove the topic.</p>
<h3>RemoveDDETopic</h3>
<p>
Removes a topic from the topics list.</p>
<h4>Syntax </h4>
<p>
BOOL&nbsp; RemoveDDETopic(<b><i>pszTopic</i></b>)</p>
<h4>Parameter</h4>
<p class=dt>
LPSTR&nbsp; <b><i>pszTopic</i></b> </p>
<p class=indent>
Pointer to a string containing the name of the topic.</p>
<h4>Return Value </h4>
<p>
The return value is TRUE if the topic is removed, FALSE if not.</p>
<h4>Comments </h4>
<p>
If there is a conversation active on this topic, it will be disconnected.</p>
<h3>UninitializeDDE</h3>
<p>
Terminates use of the DDEML DLL.</p>
<h4>Syntax </h4>
<p>
void&nbsp; UninitializeDDE()</p>
<h4>Return Value </h4>
<p>
There is no return value.</p>
<h4>Comments </h4>
<p>
Any resources used by earlier calls are freed.</p>
<h2>Data Types and Structures</h2>
<p>
This section describes the structures used to implement the various linked lists in the STDDDE.C module.</p>
<h3>CFTAGNAME</h3>
<p>
This structure is used to store information about a Clipboard ID and its text name.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; WORD wFmt;
 &nbsp;&nbsp; LPSTR pszName;
} CFTAGNAME;
</code></pre>
<h4>Fields</h4>
<p class=dt>
wFmt</p>
<p class=indent>
Format ID.</p>
<p class=dt>
pszName</p>
<p class=indent>
Pointer to the string name.</p>
<h3>DDECONVINFO</h3>
<p>
This structure is used to store information about a Clipboard ID and its text name.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; struct _DDECONVINFO FAR * pNext;
 &nbsp;&nbsp; HCONV hConv;
 &nbsp;&nbsp; HSZ hszTopicName;
 &nbsp;&nbsp; PDDEITEMINFO pResultItem;
} DDECONVINFO;
</code></pre>
<h4>Fields </h4>
<p class=dt>
pNext</p>
<p class=indent>
Pointer to the next one in the conversation list.</p>
<p class=dt>
hConv</p>
<p class=indent>
Handle to the conversation.</p>
<p class=dt>
hszTopicName</p>
<p class=indent>
<b>HSZ</b> for the topic of the conversation.</p>
<p class=dt>
pResultItem</p>
<p class=indent>
Pointer to a temporary result item used to support the Result topic.</p>
<h3>DDEEXECCMDFNINFO</h3>
<p>
This structure is used to store information about a DDE execute command processor function.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; struct _DDEEXECCMDFNINFO FAR * pNext;
 &nbsp;&nbsp; struct _DDETOPICINFO FAR * pTopic;
 &nbsp;&nbsp; LPSTR pszCmdName;
 &nbsp;&nbsp; PDDEEXECCMDFN pFn;
 &nbsp;&nbsp; UINT uiMinArgs;
 &nbsp;&nbsp; UINT uiMaxArgs;
} DDEEXECCMDFNINFO;
</code></pre>
<h4>Fields </h4>
<p class=dt>
pNext</p>
<p class=indent>
Pointer to the next item in the list.</p>
<p class=dt>
pTopic</p>
<p class=indent>
Pointer to the topic it belongs to.</p>
<p class=dt>
pszCmdName</p>
<p class=indent>
Name of the command.</p>
<p class=dt>
pFn</p>
<p class=indent>
Pointer to the function that will be called to process the command.</p>
<p class=dt>
uiMinArgs</p>
<p class=indent>
Minimum number of arguments accepted by this command.</p>
<p class=dt>
uiMaxArgs</p>
<p class=indent>
Maximum number of arguments accepted by this command.</p>
<h3>DDEITEMINFO</h3>
<p>
This structure is used to store information about a DDE item.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; struct _DDEITEMINFO FAR * pNext;
 &nbsp;&nbsp; LPSTR pszItemName;
 &nbsp;&nbsp; HSZ hszItemName;
 &nbsp;&nbsp; struct _DDETOPICINFO FAR * pTopic;
 &nbsp;&nbsp; LPWORD pFormatList;
 &nbsp;&nbsp; PDDEREQUESTFN pfnRequest;
 &nbsp;&nbsp; PDDEPOKEFN pfnPoke;
 &nbsp;&nbsp; HDDEDATA hData;
} DDEITEMINFO;
</code></pre>
<h4>Fields </h4>
<p class=dt>
pNext</p>
<p class=indent>
Pointer to the next item in the list of items.</p>
<p class=dt>
pszItemName</p>
<p class=indent>
Pointer to its string name.</p>
<p class=dt>
hszItemName</p>
<p class=indent>
DDE string handle for the name.</p>
<p class=dt>
pTopic</p>
<p class=indent>
Pointer to the topic it belongs to.</p>
<p class=dt>
pFormatList</p>
<p class=indent>
Pointer to a null-terminated list of Clipboard format words.</p>
<p class=dt>
pfnRequest</p>
<p class=indent>
Pointer to the item-specific request processor.</p>
<p class=dt>
pfnPoke</p>
<p class=indent>
Pointer to the item-specific poke processor.</p>
<p class=dt>
hData</p>
<p class=indent>
Data handle for this item. This is only used by STDDDE.C when the item is a special Result item, and may be used as required for other items.</p>
<h3>DDESERVERINFO</h3>
<p>
This structure is used to store information about a DDE server that has only one service.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; LPSTR lpszServiceName;
 &nbsp;&nbsp; HSZ hszServiceName;
 &nbsp;&nbsp; PDDETOPICINFO pTopicList;
 &nbsp;&nbsp; DWORD dwDDEInstance;
 &nbsp;&nbsp; PFNCALLBACK pfnStdCallback;
 &nbsp;&nbsp; PFNCALLBACK pfnCustomCallback;
 &nbsp;&nbsp; PDDECONVINFO pConvList;
} DDESERVERINFO;
</code></pre>
<h4>Fields </h4>
<p class=dt>
lpszServiceName</p>
<p class=indent>
Pointer to the service string name.</p>
<p class=dt>
hszServiceName</p>
<p class=indent>
DDE string handle for the name.</p>
<p class=dt>
pTopicList</p>
<p class=indent>
Pointer to the topic list.</p>
<p class=dt>
dwDDEInstance</p>
<p class=indent>
DDE instance value.</p>
<p class=dt>
pfnStdCallback</p>
<p class=indent>
Pointer to standard DDE callback function.</p>
<p class=dt>
pfnCustomCallback</p>
<p class=indent>
Pointer to a custom DDE callback function.</p>
<p class=dt>
pConvList</p>
<p class=indent>
Pointer to the active conversation list.</p>
<h3>DDETOPICINFO</h3>
<p>
This structure is used to store information about a DDE topic.</p>
<pre><code>typedef struct&nbsp; {
 &nbsp;&nbsp; struct _DDETOPICINFO FAR * pNext;
 &nbsp;&nbsp; LPSTR pszTopicName;
 &nbsp;&nbsp; HSZ hszTopicName;
 &nbsp;&nbsp; PDDEITEMINFO pItemList;
 &nbsp;&nbsp; PDDEEXECFN pfnExec;
 &nbsp;&nbsp; PDDEREQUESTFN pfnRequest;
 &nbsp;&nbsp; PDDEPOKEFN pfnPoke;
 &nbsp;&nbsp; PDDEEXECCMDFNINFO pCmdList;
} DDETOPICINFO;
</code></pre>
<h4>Fields </h4>
<p class=dt>
pNext</p>
<p class=indent>
Pointer to the next topic in the topic list.</p>
<p class=dt>
pszTopicName</p>
<p class=indent>
Pointer to its string name.</p>
<p class=dt>
hszTopicName</p>
<p class=indent>
DDE string handle for the name.</p>
<p class=dt>
pItemList</p>
<p class=indent>
Pointer to the item list for this topic.</p>
<p class=dt>
pfnExec</p>
<p class=indent>
Pointer to the generic execute processor for this topic.</p>
<p class=dt>
pfnRequest</p>
<p class=indent>
Pointer to the generic request processor for this topic.</p>
<p class=dt>
pfnPoke</p>
<p class=indent>
Pointer to the generic poke processor for this topic.</p>
<p class=dt>
pCmdList</p>
<p class=indent>
Pointer to the execute command list for this topic.</p>
</BODY>
</HTML>

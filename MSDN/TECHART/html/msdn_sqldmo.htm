<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Build Your Own SQL Enterprise Manager in Visual Basic 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_sqldmo"></a>Build Your Own SQL Enterprise Manager in Visual Basic 5.0</h1>
<p>
David Mendlen<br>
Director of Development, Ameritech Cellular<br>
(<a href="mailto:mendlen@cellhe.ameritech.com">mendlen@cellhe.ameritech.com</a>)</p>
<p>
October 1997</p>
<p>
From <i>Regional Director Magazine</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5169">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the SQLOLE_EXE sample files.</a></p>
<h2>Business Problem and Solution</h2>
<p>
The flexibility and functionality of the Microsoft® SQL Server™ Enterprise Manager is unmatched in the enterprise database market. This functionality is not limited to the administrator using it. The power of the Enterprise Manager is available to the Visual Basic® programmer using automation. Thus the problem: Design a reusable ActiveX™ control that exposes the functionality of SQL Server.</p>
<p>
<img src="sqldmo1.gif" border=0></p>
<p class=label>
<b>Figure 1. New functionality to create and delete devices</b></p>
<p>
The solution involves combining the SQL Distributed Management Objects (DMO) capabilities of Microsoft SQL Server version 6.0 and 6.5 with the ActiveX control creation functionality of Microsoft Visual Basic version 5.0. With this solution, a developer can drop an ActiveX control onto a Visual Basic form, a Visual InterDev™ Web page, or any other ActiveX control–capable environment. The newly developed control has the ability to display all of the elements that are visible in the Enterprise Manager. Additionally, I've included functionality to create and delete devices and databases (Figure 1). The solution can easily be extended to perform a variety of other tasks including all the functionality provided in the enterprise manager. It's very easy to create functionality to add, delete, and change tables, views, stored procedures, rules, defaults, and user-defined types.</p>
<h2>SQL Distributed Management Objects Overview</h2>
<p>
Why do we care about SQL DMO? The programming components in Microsoft SQL Server 6.0 let you develop sophisticated client/server applications that tap the power of Microsoft SQL Server. SQL DMO exposes objects, properties, methods, and collections that are used to write scripts and programs that can administer multiple SQL Servers across a distributed network. This model is not yet another data access alternative like ADO, DAO, and so on. SQL DMO allows you to create database administration functions. With these functions you could publish database statistics on an intranet.</p>
<p>
In order to access the SQL DMO objects in Visual Basic you need to install the SQL Server client objects on your development machine. It will install and register the SQL DMO objects. It is important to note that users of solutions that you build with SQL DMO must have SQL DMO installed through the same process.</p>
<p>
The motivation for this solution was a dare. A Microsoft BackOffice Product Manager told me that the Enterprise Manager was written in SQL DMO. When I argued that it was impossible to do, the Product Manager dared me to build my own. Before we get into the ActiveX control, let's take a closer look at SQL DMO.</p>
<h3>Creating a SQLServer Object</h3>
<p>
The core of the SQLDMO object model is the SQLServer object. For each SQL Server you want to connect to, you create an empty SQLServer object, then you connect the SQLServer object to a running SQL Server.</p>
<p>
The SQL DMO application name is SQLOLE:</p>
<pre><code>CreateObject("SQLOLE.SQLSERVER")
</code></pre>
<h3>Early/Late Binding</h3>
<p>
SQL DMO utilizes <i>vtable-binding</i> or early binding. You can also use Dispatch ID binding (dispID-binding) which uses slower performance than using the New keyword but faster than the generic Object type.</p>
<h4>Using the generic object type</h4>
<pre><code>Dim oSQLServer As Object
Set oSQLServer = CreateObject ("SQLOLE.SQLServer")
</code></pre>
<p>
This method is called late binding using OLE <b>IDispatch</b>.</p>
<h4>Connecting to SQL Server</h4>
<p>
After creating a new, empty SQLServer object, you need to connect that object to a running SQL Server using the <b>Connect</b> method of the new SQLServer object. You pass the following parameters to the <b>Connect</b> method:
<ul type=disc>
<li>
SQL Server name<br><br></li>
<li>
Login ID<br><br></li>
<li>
Password</li>
</ul>
<h4>Create and connect</h4>
<pre><code>Dim SQLObject As SQLOLE.SQLServer

' initialize the object and connect
Set SQLObject=CreateObject ("Sqlole.SQLServer")
SQLObject.Connect "MyServer", "SA", "Password"
</code></pre>
<h4>Databases collection</h4>
<p>
You can iterate through the list of databases (from the SQL Server object) with the databases collection using a For&nbsp;.&nbsp;.&nbsp;Each statement.</p>
<pre><code>For Each database in SQLObject.Databases
 &nbsp; Debug.Print database.name
Next
</code></pre>
<h4>Clean up</h4>
<pre><code>' Disconnect SQLObject from SQL Server
SQLObject.DisConnect
' Good programming practice; clean up objects as we go
Set SQLObject = Nothing
</code></pre>
<p>
Figure 2 illustrates the SQL DMO object model.</p>
<p>
<img src="sqldmo2.gif" border=0></p>
<p class=label>
<b>Figure 2. The SQL DMO object Model</b></p>
<h2>Solution Architecture</h2>
<p>
<img src="sqldmo3.gif" border=0></p>
<p class=label>
<b>Figure 3. The SQL MDO server-side machine</b></p>
<p>
To use this solution, you need two computers. One is the server running Windows NT® and SQL Server. The other runs the client application created by you. Simply drop the control on a Visual Basic form and set the three critical properties: SQL Server, login ID, and password. In order to access the SQL DMO objects on your development machine, you must have installed the SQL Server client components. The client machine could be running Windows® 95 or Windows NT.</p>
<p>
<img src="sqldmo4.gif" border=0></p>
<p class=label>
<b>Figure 4. The SQL DMO client-side machine</b></p>
<p>
In order for the ActiveX control to display all of the visual elements of the SQL Enterprise Manager as well as creating and deleting devices, we only need to talk to a few of the SQL DMO objects. This is done with the following code:</p>
<pre><code>Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
</code></pre>
<p>
The first step is to connect to SQL Server. You simply provide the server name, a login ID, and a password:</p>
<pre><code>Set objSQLServer = CreateObject("SQLOLE.SQLserver")
 
 'Connect to SQL Server
 objSQLServer.Connect ServerName:=pvtSQLServer, login:=pvtLoginID, Password:=pvtPassword
 .
 .
 .
</code></pre>
<p>
Next we connect to the parent object of the connected SQL Server—the application object:</p>
<pre><code>Dim SQLApp As SQLOLE.Application
 Set SQLApp = objSQLServer.Application
</code></pre>
<p>
Now we can iterate through the collection of SQL Servers, which is obtained through the SQLServers collection. A For&nbsp;.&nbsp;.&nbsp;Each statement works well for this type of thing.</p>
<pre><code>Dim sServer As SQLOLE.SQLServer
 For Each sServer In SQLApp.SQLServers
</code></pre>
<p>
Add the SQL Server name to the tree view control. SServer.Name is the name of the SQL Server:</p>
<pre><code>Set nodx = TreeView1.Nodes.Add("RTGroups", tvwChild, sServer.Name, sServer.Name, 3)
 .
 .
 .
</code></pre>
<p>
Now we can iterate through each device on the current SQL Server. First we refresh the collection of devices with the <b>Refresh</b> method.</p>
<pre><code>Dim device As SQLOLE.device
 sServer.Devices.Refresh
</code></pre>
<p>
Again we can iterate through the collection of devices on the current SQL Server utilizing a For&nbsp;.&nbsp;.&nbsp;Each statement:</p>
<pre><code>For Each device In sServer.Devices
</code></pre>
<p>
Devices come in two flavors: database devices and dump devices. We determine the database type and add the device to the treeview control:</p>
<pre><code>If device.Type = 0 Then 'Database Devices
 Set nodx = TreeView1.Nodes.Add("RTDevices", tvwChild, "dv" &amp; device.Name, device.Name, 5)
 Else
 Set nodx = TreeView1.Nodes.Add("RTDump Devices", tvwChild, device.Name, device.Name, 6)
 End If
</code></pre>
<p>
You access the database collection from the current device. Again the first step is to refresh the collection:</p>
<pre><code>Dim Database As SQLOLE.Database
 sServer.Databases.Refresh
</code></pre>
<p>
Accessing the databases collection is done a little differently—we use the ListDatabases collection. I added a function that takes the database name as a parameter and adds the database and its child objects to the tree:</p>
<pre><code>For Each Database In device.ListDatabases
 AddDatabaseToTree Database.Name
 Next
</code></pre>
<p>
Finally, we iterate through the list of logins, and add them to the treeview:</p>
<pre><code>Dim login As SQLOLE.login
 For Each login In sServer.Logins
 Set nodx = TreeView1.Nodes.Add("Logins", tvwChild, login.Name, login.Name, 8)
 Next
 Next
</code></pre>
<p>
Don't forget to disconnect from SQL Server:</p>
<pre><code>objSQLServer.DisConnec
</code></pre>
<p>
As you can see, communicating with the DMO objects is as easy as manipulating any other Visual Basic components. This example can easily be extended to surface other tasks. For example, to add a stored procedure to SQL Server in code you would do the following:</p>
<pre><code>Sub AddStoredProcedureToDatabase(Database, StoredProcedureName, StoredProcedureText)
</code></pre>
<p>
First we connect to the appropriate database in SQL Server. Then we connect to the StoredProcedures collection. I chose to do it all in one line.</p>
<pre><code>Dim mySPs As SQLOLE.StoredProcedures
 Set mySPs = objSQLServer.Databases.Item(Database).StoredProcedures
 </code></pre>
<p>
Now we create a new StoredProcedure object and set its properties. A stored procedure has two critical properties: its name and the SQL statement that you want executed. The SQL statement is the <b>.TEXT </b>property. You notice that I've filled in the literal string "Create Procedure" and appended the stored procedure name as well as the&nbsp; literal string "as". Combined with <b>StoredProcedureText</b>, the result is something like "Create Procedure Test as Select * from authors."</p>
<pre><code>Dim mySP As SQLOLE.StoredProcedure
 Set mySP = CreateObject("SQLOLE.storedprocedure")
 mySP.Name = StoredProcedureName
 mySP.Text = "Create Procedure " &amp; mySP.Name &amp; " as " &amp; StoredProcedureText
</code></pre>
<p>
Now all we need to do is add the newly created stored procedure to the stored procedure collection we connected to earlier:</p>
<pre><code>&nbsp;mySPs.Add mySP
</code></pre>
<p>
Don't forget to clean up:</p>
<pre><code>&nbsp;Set mySP = Nothing
 Set mySPs = Nothing
 objSQLServer.DisConnect
</code></pre>
<h2>Using the ActiveX Control</h2>
<p>
Step 1: Create a new Standard .EXE in Visual Basic from the <b>New Project</b> window as shown in Figure 5.</p>
<p>
<img src="sqldmo5.gif" border=0></p>
<p class=label>
<b>Figure 5. The New Project window</b></p>
<p>
Step 2: Add the ActiveX SQL component to the Toolbox. Right-click on the toolbox and select <b>Components…</b> Select the ActiveX SQL Library from the list, as shown in Figure 6. If the component isn't yet registered, click the <b>Browse… </b>button to navigate to the directory of the ActiveXSQL.OCX file. Then click <b>OK</b>.</p>
<p>
<img src="sqldmo6.gif" border=0></p>
<p class=label>
<b>Figure 6. The Components dialog box</b></p>
<p>
Step 3: Draw an instance of the ActiveXSQL control onto your form, similar to the one shown in Figure 7</p>
<p>
<img src="sqldmo7.gif" border=0></p>
<p class=label>
<b>Figure 7. Drawing an instance of the ActiveXSQL control</b></p>
<p>
Step 4: Right-click on the control and select <b>Properties</b>. Fill out the three required fields and click <b>OK</b>, as shown in Figure 8.</p>
<p>
<img src="sqldmo8.gif" border=0></p>
<p class=label>
<b>Figure 8. Filling out the required fields</b></p>
<p>
Step 5: Run it!</p>
<p>
<img src="sqldmo9.gif" border=0></p>
<p class=label>
<b>Figure 9. The results</b></p>
<h2>System Requirements</h2>
<h3>Minimum Requirements</h3>
<ul type=disc>
<li>
PCs: Intel® 486/33 or higher<br><br></li>
<li>
16 MB of RAM for Intel<br><br></li>
<li>
Microsoft Mouse or compatible pointing device<br><br></li>
<li>
VGA or higher resolution monitor<br><br></li>
<li>
High density (1.44 MB) disk drive</li>
</ul>
<h3>Recommended Requirements</h3>
<ul type=disc>
<li>
PCs: Intel Pentium or higher<br><br></li>
<li>
16 MB of RAM for Intel<br><br></li>
<li>
Microsoft Mouse or compatible pointing device<br><br></li>
<li>
VGA or higher resolution monitor<br><br></li>
<li>
High density (1.44 MB) disk drive</li>
</ul>
<h3>Required Software</h3>
<ul type=disc>
<li>
Microsoft Windows 95/Windows NT<br><br></li>
<li>
Visual Basic 5.0 Enterprise Edition<br><br></li>
<li>
Microsoft SQL Server 6.0 or 6.5 (on the Server)</li>
</ul>
<h1>Summary</h1>
<p>
I hope you enjoyed this example. As you can imagine, the possibilities are endless. There are a few resources that you should turn to for more information about SQL DMO. Try the following three Web sites.</p>
<p>
http://www.bstone.com/SQLUG/SampleCode/samples.htm#DMO</p>
<p>
http://www.windows.com/KB/Articles/q154/0/11.htm</p>
<p>
http://www.ntmag.com/issues/jun96/sql.htm</p>
<h1>Biography</h1>
<p>
David Mendlen is the director of development for Ameritech Cellular. David is a Microsoft Certified Solution Developer and a certified trainer in Visual Basic and Windows 95. He is also the founder and president of the Chicago Corporate Visual Basic User Group. David recently worked at Microsoft in Redmond on solutions that will ship in future products and he is a frequent contributor to the Cobb Group journals.</p>
</BODY>
</HTML>

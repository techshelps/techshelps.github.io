<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Class to Prepare Strings for Submission to a Database</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_validatedata"></a>A Class to Prepare Strings for Submission to a Database</h1>
<p>
Brent E. Curtis<br>
Microsoft Corporation</p>
<p>
Created: August 4, 1997</p>
<h2>Introduction</h2>
<p>
In database applications that use Transact-SQL, a run-time error is generated if a user submits data to the database that contains an apostrophe such as in the name "O'Brian." So, it is necessary to prevent this error by altering the string prior to submitting it to the database.</p>
<p>
The problem with the single quotation mark arises from the fact that ANSI SQL uses the single quotation mark as a string delimiter. Therefore, when a user submits a string that contains a single quotation mark as part of the string, the parser interprets this single quotation mark as the end of the string. To see this more clearly, look at how an INSERT statement is constructed:</p>
<pre><code>INSERT INTO TableName (Field1, Field2) VALUES('Value1', 'Value2')
</code></pre>
<p>
If a user submitted the name O'Brian for Value1, the above INSERT statement would become:</p>
<pre><code>INSERT INTO TableName (Field1, Field2) VALUES('O'Brian', 'Value2')
</code></pre>
<p>
It is easy to see that sending O'Brian for Value1 created an improperly formed INSERT statement that would result in an error being returned to the user. In order to avoid this error, a second single quotation mark can be added before submitting the string to the database. This will solve the problem because the single quotation mark is also used to instruct the parser to interpret the next character as a literal character. Therefore, if O''Brian is submitted for Value1 as shown below, the parser will correctly interpret the apostrophe as part of the string and not as a delimiter.</p>
<pre><code>INSERT INTO TableName (Field1, Field2) VALUES('O''Brian', 'Value2')
</code></pre>
<p>
The remainder of this article will show how to create a reusable class module that performs this function for use in Microsoft® Visual Basic® applications as well as how to include that class module in an in-process Component Object Model (COM) Server.</p>
<p>
I have chosen a class module to demonstrate this technique because once the code exists in the class, it can easily be included in future projects or compiled as an ActiveX™ dynamic-link library (DLL) that can be used by other applications.</p>
<h2>Construction of the Class </h2>
<p>
In Visual Basic, begin a new ActiveX DLL project. The new project will be named Project 1 and will contain a class module named Class 1.</p>
<p>
In the <b>Properties</b> window for Class 1, type CValidateData in the <b>Name</b> property. In order to use the class as a source code module that can be included in any project, set the <b>Instancing</b> property to 1 – Private. To create an ActiveX DLL, leave the <b>Instancing</b> property on its default value of 5 – MultiUse.</p>
<p>
After you have created the class, add the <b>DoubleApostrophe</b> method by inserting the following code into the class module:</p>
<pre><code>Option Explicit

Public Function DoubleApostrophe(ByVal sBr As String) As String

Dim lPos As Long
Dim sBl As String

If Len(sBr) = 0 Then Exit Function
lPos = InStr(sBr, Chr$(39))
While lPos &lt;&gt; 0
 &nbsp; sBl = sBl &amp; Left$(sBr, lPos) &amp; Chr$(39)
 &nbsp; sBr = Right$(sBr, Len(sBr) - lPos)
 &nbsp; lPos = InStr(sBr, Chr$(39))
Wend
DoubleApostrophe = sBl &amp; sBr
End Function
</code></pre>
<h2>Using the Class in Visual Basic</h2>
<p>
The following example demonstrates how to use the CValidateData class in a Visual Basic application.
<ol>
<li>
Start a new Standard EXE project.<br><br></li>
<li>
Add the CValidateData class to the project. On the <b>Project</b> menu, click <b>Add Class Module</b>, and click <b>Open</b>.<br><br></li>
<li>
Add two text boxes to Form1 and name them txtOriginalMessage and txtAlteredMessage.<br><br></li>
<li>
Add a command button named <b>cmdCheckApostrophe</b>.<br><br></li>
<li>
Create a new instance of the CValidateData class by adding the following code to the General Declarations section of Form1:<pre><code>Dim oValDat As New CValidateData
</code></pre>
</li>
<li>
Add the following code to the <b>cmdCheckApostrophe</b> click event:<pre><code>txtAlteredMessage = oValDat.DoubleApostrophe (txtOriginalMessage)</code></pre>
</li>
<li>
Run the application and enter "There's more to see" into txtOriginalMessage.<br><br></li>
<li>
Click the <b>cmdCheckApostrophe</b> button.</li>
</ol>
<p>
The result will be that the original message will appear in the txtAlteredMessage text box with two apostrophes back-to-back. Of course, within an actual application, you would use the <b>DoubleApostrophe</b> method to prepare text strings for submission to a database.</p>
<h2>Packaging the Class in an ActiveX DLL</h2>
<p>
The following example demonstrates how to compile the CValidateData class as an ActiveX DLL and register it for use on the server.
<ol>
<li>
Start a new ActiveX DLL project. A new class named Class1 will be added to the project.<br><br></li>
<li>
Add the CValidateData class to the project On the <b>Project</b> menu, click <b>Add Class Module</b>, and click <b>Open</b>.<br><br></li>
<li>
Remove Class1 from the project.<br><br></li>
<li>
On the <b>Project</b> menu, click <b>Project1 Properties</b>.<br><br></li>
<li>
In the <b>Project Name</b> box, type "DbUtility" and then set <b>Startup Object</b> to "None."<br><br></li>
<li>
Save the project as dbutility.vbp.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Make dbutility.dll</b>.<br><br></li>
<li>
Save the DLL to the project folder.</li>
</ol>
<h2>Using the Class in an Active Server Page</h2>
<p>
Once the DLL has been created, install and register it on the Web server to make it available as an Active Server Component. Use the Visual Basic Setup wizard to build a setup program that installs and registers dbutility.dll and the required dependency files.</p>
<p>
The following example demonstrates how to use the object to validate data from a Web page before it is inserted into a Microsoft SQL Server™ table via ActiveX Data Objects (ADO) on the server.</p>
<h3>Configuring SQL Server</h3>
<p>
Complete the following to create the sample table for use in the Web example:
<ol>
<li>
Create a table in a SQL Server database named tblMessages.<br><br></li>
<li>
Add columns named fName, mName, lName, and Message<i>,</i><b> </b>each of datatype VARCHAR and of size 255.<br><br></li>
<li>
Create a System data source name (DSN) on the server named Messages that points to tblMessages.</li>
</ol>
<h3>Creating the Web pages</h3>
<p>
The following example uses two Web pages to demonstrate how to implement the ValidateData object. The initial page is named Post.asp and is responsible for inserting the data into the table. The second page is named Get.asp and is used to retrieve the submitted data from the table.</p>
<p>
Paste the following code into a new file named Post.asp.</p>
<pre><code>&lt;%
' Test to see if user has clicked the "Enter Message" button.
Action = Left(UCase(Request("Action")),5)
If Action = "ENTER" Then

' Create an instance of the CValidateData object.
Set Data = Server.CreateObject("DbUtility.CValidateData")

' Process the input data and assign to local variables for easier reference.
Message = Data.DoubleApostrophe(Request("Message")) 
FirstName = Data.DoubleApostrophe(Request("FirstName"))
MiddleName = Data.DoubleApostrophe(Request("MiddleName"))
LastName = Data.DoubleApostrophe(Request("LastName"))

' Build the INSERT statement.
sql = "INSERT INTO tblMessages (fName, mName, lName, Message) "
sql = sql &amp; " VALUES ( "
sql = sql &amp; "'" &amp; FirstName &amp; "', " 
sql = sql &amp; "'" &amp; MiddleName &amp; "', "
sql = sql &amp; "'" &amp; LastName &amp; "', "&nbsp;&nbsp;&nbsp;&nbsp; 
sql = sql &amp; "'" &amp; Message &amp; "')"
 &nbsp; 
' Open a connection to the database.
Set cn = Server.CreateObject("ADODB.Connection")
cn.Open "dsn=Messages;uid=sa;pwd="
 &nbsp; 
' Execute the INSERT statement.
Set rs = cn.Execute(sql)
 
End if
%&gt;

&lt;HTML&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;-- Display the altered message that was inserted into the database. --&gt;
&lt;% If Action="ENTER" Then %&gt;
</code></pre>
<p>
Message that was submitted to the database:</p>
<pre><code>&lt;TABLE&gt;
 &nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD ALIGN="center"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;B&gt;&lt;% =Message %&gt;&lt;/B&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TD&gt;
 &nbsp; &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;% end if %&gt;
&lt;P&gt;
&lt;A HREF="Get.asp"&gt;Get Messages&lt;/A&gt;
&lt;P&gt;&lt;BR&gt;

&lt;-- Use selfreferencing to submit the data and allow the user to enter more records without forcing the user to a separate confirmation page. --&gt;

&lt;FORM ACTION="post.asp" METHOD="POST"&gt;
 &nbsp; &lt;TABLE&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;First Name:&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;&lt;INPUT TYPE="Text" NAME="FirstName"&gt;&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;Middle Name:&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;&lt;INPUT TYPE="Text" NAME="MiddleName"&gt;&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;Last Name:&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;&lt;INPUT TYPE="Text" NAME="LastName"&gt;&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD VALIGN="top"&gt;Message:&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;&lt;TEXTAREA ROWS="10" COLS="60" NAME="Message"&gt;&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TR&gt;
 &nbsp; &lt;/TABLE&gt;
 &nbsp; &lt;P&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;INPUT TYPE=SUBMIT NAME="Action" VALUE="Enter Message"&gt;
&lt;/FORM&gt;
&lt;TABLE&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
Next, paste the following code into a file named Get.asp.</p>
<pre><code>&lt;%
' Build the SELECT statement.
SQLQuery = "SELECT * FROM tblMessages"

' Open a connection to the database.
Set cn = Server.CreateObject("ADODB.Connection")
cn.Open "dsn=Messages;uid=sa;pwd="

' Execute the SELECT statement.
Set rs = cn.Execute(SQLQuery)
%&gt;

&lt;HTML&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;P&gt;&lt;BR&gt;&lt;BR&gt;
&lt;P&gt;
&lt;a href="Post.asp"&gt;Enter More Messages&lt;/a&gt;&lt;P&gt;
&lt;TABLE&gt;
 &nbsp; &lt;tr&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;td colspan="3"&gt;Name&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&amp;nbsp;&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;Message&lt;/TD&gt;
 &nbsp; &lt;/tr&gt;
&lt;-- Loop through the rows in the database table and fill the table. --&gt;
&lt;% While Not rs.EOF %&gt;
 &nbsp;&nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;% =rs("fName") %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;% =rs("mName") %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;% =rs("lName") %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&amp;nbsp;&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;% =rs("Message") %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/TD&gt;
  &lt;/TR&gt;
&lt;-- Retrieve the next row from the database table. --&gt;
&lt;%
 rs.MoveNext
 Wend
%&gt;
&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
Place both files in the same directory on the Web server. Note that, in order for the code to be executed, the directory must be configured in Microsoft Internet Information Server (IIS) to be a virtual directory with execute permissions.</p>
<h2>Conclusion</h2>
<p>
The <b>DoubleApostrophe</b> method is a good example of the type of procedure that benefits the most from being packaged in a Visual Basic class because it is useful to a broad range of database applications. Utilizing classes in your applications allows you to shorten the development cycle of future Visual Basic applications by reusing existing code. In addition, by packaging the class as a COM server (.dll), it becomes even more reusable because programs written in any language that can use a COM server (including VBScript) can use that code. As you become more familiar with classes and begin thinking about the types of procedures that should be grouped together, you can begin to develop an application architecture that maximizes reuse by building application-specific functionality upon layers of reusable code that become progressively more general. Once the ValidateData class exists, you can include additional methods at later dates to handle other issues that may arise.</p>
</BODY>
</HTML>

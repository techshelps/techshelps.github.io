<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bitmaps and Other CStatusBar Customizations</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_status"></a></sup>Bitmaps and Other CStatusBar Customizations</h1>
<p>
Dale Rogerson<br>
Microsoft Developer Network Technology Group</p>
<p>
April 18, 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4056">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the EasyBit sample application for this technical article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4059">
</OBJECT><a href="javascript:sample2.Click()">Click to open or copy the files in the GLlib DLL for this technical article.</a></p>
<h2>Abstract</h2>
<p>
This article shows how to customize the status bar created by <b>CStatusBar</b> (which is a class in the Microsoft® Foundation Class [MFC] Library) in several ways, including changing the sizes of the panes in a status bar, changing the height of the status bar, using a different font, and displaying a bitmap in one of the panes. The EasyBit sample application demonstrates the techniques described in this article.</p>
<p>
Please note that future versions of MFC may not support some customizations of <b>CStatusBar</b>.</p>
<h2>Introduction</h2>
<p>
When I wrote the EasyBit sample application, I wanted to demonstrate how you could place three-dimensional (3-D) rendered objects anywhere in your application's window by rendering OpenGL™ commands on a bitmap. I decided that it would be exciting to put a 3-D rendered object on the status bar. This article explains how I customized the <b>CStatusBar</b> class in the Microsoft® Foundation Class (MFC) Library to display a bitmap on the status bar. In the customization process, I also:
<ul type=disc>
<li>
Added a second pane.<br><br></li>
<li>
Changed the size of the panes.<br><br></li>
<li>
Changed the height of the status bar.<br><br></li>
<li>
Changed the typeface and size of the text displayed on the status bar.</li>
</ul>
<p>
For information on how I rendered the 3-D objects for the status bar, see my series of articles on OpenGL, especially <a href="msdn_gl6.htm">"OpenGL VI: Rendering on DIBs with PFD_DRAW_TO_BITMAP,"</a> in the Microsoft Development Library.</p>
<h2>Bitmap on the Status Bar</h2>
<p>
My OpenGL sample application, EasyBit, rotates one of three 3-D shapes. I wanted to show the user which shape was currently selected for rotation, so I decided to display the shape on the EasyBit status bar. I wanted the status bar to look like the one illustrated in Figure 1 below.</p>
<p>
<img src="status_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Status bar with bitmap</b></p>
<p>
To perform this magic, I did some searching on the Microsoft Development Library and found the Knowledge Base article Q98864,"Displaying a Bitmap in a CStatusBar Pane." With this article, putting a bitmap onto the status bar became a trivial task.</p>
<p>
Following the instructions in the Knowledge Base article, I created a new class derived from <b>CStatusBar</b> (not <b>CStatusBarCtrl</b>):</p>
<pre><code>class CMyStatusBar : public CStatusBar
{
 &nbsp; .
 &nbsp; .
 &nbsp; .
 &nbsp; void DoPaint(CDC* pdc) ;
 &nbsp; .
 &nbsp; .
 &nbsp; .
};
</code></pre>
<p>
Before I could draw a bitmap on the status bar, I needed to know how to draw on the status bar. I implemented the following <b>DoPaint</b> function, which simply draws the status bar and paints the second pane red:</p>
<pre><code>void CMyRedStatusBar::DoPaint(CDC* pDC)
{
 &nbsp; // Draw the status bar.
 &nbsp; CStatusBar::DoPaint(pDC) ;

 &nbsp; // Get the bounding rectangle of the second pane.
 &nbsp; CRect aRect ;
 &nbsp; GetItemRect(1, &amp;aRect) ;

 &nbsp; // Fill the pane with the color red.
 &nbsp; CBrush aBrush(RGB(255,0,0)) ;
 &nbsp; CBrush* pOldBrush = (CBrush*)pDC-&gt;SelectObject(&amp;aBrush) ;
 &nbsp;&nbsp;&nbsp;&nbsp; pDC-&gt;Rectangle(&amp;aRect) ;
 &nbsp; pDC-&gt;SelectObject(pOldBrush) ;
}
</code></pre>
<p>
Now that I knew how to draw on the status bar, I could use my <b>CSimpleDIB</b> class to draw the bitmap. <b>CSimpleDIB</b> is discussed in <a href="msdn_gl7.htm">"OpenGL VII: Scratching the Surface of Texture Mapping"</a> in the Development Library.</p>
<pre><code>void CMyStatusBar::DoPaint(CDC* pDC)
{
 &nbsp; // Draw the status bar.
 &nbsp; CStatusBar::DoPaint(pDC) ;

 &nbsp; // Return if no DIB to draw.
 &nbsp; if (m_iCurrentDIB == -1) return ;

 &nbsp; CRect aRect ;
 &nbsp; GetItemRect(1, &amp;aRect) ;

 &nbsp; // Select palette.
 &nbsp; CPalette* pOldPal = NULL;
 &nbsp; CPalette* pPalTemp = m_pScenes[m_iCurrentDIB]-&gt;GetPalette() ;
 &nbsp; if (pPalTemp != NULL)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; pOldPal = pDC-&gt;SelectPalette(pPalTemp, FALSE) ;
 &nbsp;&nbsp;&nbsp;&nbsp; pDC-&gt;RealizePalette() ;
 &nbsp; }

 &nbsp; // Draw using the CSimpleDIB class.
 &nbsp; m_DIB[m_iCurrentDIB].Draw(pDC, aRect.left, aRect.top) ;

 &nbsp; // Select old palette.
 &nbsp; if (pOldPal != NULL) pDC-&gt;SelectPalette(pOldPal, FALSE) ;
}
</code></pre>
<p>
The next step is to replace:</p>
<pre><code>CStatusBar m_wndStatusBar ;
</code></pre>
<p>
in MAINFRM.H with:</p>
<pre><code>CMyStatusBar m_wndStatusBar ;
</code></pre>
<p>
As the final step, I added a second ID_SEPARATOR to the <b>indicators </b>array in MAINFRM.CPP. This adds another pane (on which I will draw the bitmap) to the status bar:</p>
<pre><code>static UINT BASED_CODE indicators[] =
{
 &nbsp; ID_SEPARATOR,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // status line indicator
 &nbsp; ID_SEPARATOR,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // pane for drawing bitmap
 &nbsp; ID_INDICATOR_CAPS,
 &nbsp; ID_INDICATOR_NUM,
 &nbsp; ID_INDICATOR_SCRL,
};
</code></pre>
<h2>Sizing the Status Bar</h2>
<p>
Well, after I put the bitmap on the status bar, I discovered that I couldn't see it—it was just too small. I also noticed that the indicator panes were missing. My status bar looked like the one shown in Figure 2 below. </p>
<p>
<img src="status_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Status bar with default font</b></p>
<p>
I decided to increase the height of the status bar so I could see the bitmap. However, the method for doing this wasn't obvious, because MFC doesn't have any <b>CStatusBar::SetHeight</b> functions. After digging into the guts of the status bar in the MFC BARSTAT.CPP source file, I discovered that the height of the status bar is determined by its font. To change the height of the status bar, you must change the height of the font you use in the status bar.</p>
<p>
Now, how do you change the font? Do you use a member function in <b>CStatusBar</b>? <b>CControlBar</b>? <b>CWnd</b>? As it turns out, you use <b>CWnd::GetFont</b> and <b>CWnd::SetFont</b>. Therefore, I did just that in the <b>CMyStatusBar::Init</b> function, which I called from <b>CMainFrame::OnCreate</b>: </p>
<pre><code>&nbsp;&nbsp;&nbsp;CFont* pFont = GetFont();
 &nbsp; LOGFONT logFont ;
 &nbsp; pFont-&gt;GetObject(sizeof(LOGFONT),(void*)&amp;logFont ) ;
 &nbsp; logFont.lfHeight *= 2 ;

 &nbsp; m_Font.CreateFontIndirect(&amp;logFont) ; 
 &nbsp; SetFont(&amp;m_Font, TRUE) ;
</code></pre>
<p>
This function uses <b>CWnd::GetFont</b> and <b>CWnd::SetFont</b> to get the font, double its height, and then set it to the new font. The results are shown in Figure 3.</p>
<p>
<img src="status_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Status bar with double-height default font</b></p>
<p>
As you can see in Figure 3, the default typeface looks blocky when it is enlarged, so I changed it to Arial by adding the line shown in boldface below:</p>
<pre><code>&nbsp;&nbsp;&nbsp;CFont* pFont = GetFont();
 &nbsp; LOGFONT logFont ;
 &nbsp; pFont-&gt;GetObject(sizeof(LOGFONT),(void*)&amp;logFont ) ;
 &nbsp; logFont.lfHeight *= 2 ;

<b> &nbsp; lstrcpy(logFont.lfFaceName, _T("Arial"));</b>


 &nbsp; m_Font.CreateFontIndirect(&amp;logFont) ; 
 &nbsp; SetFont(&amp;m_Font, TRUE) ;
</code></pre>
<p>
Changing this single line resulted in the smooth curves of a TrueType® font replacing the jagged edges of the previous font, as seen on TV and in Figure 4 below.</p>
<p>
<img src="status_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Status bar with double-height Arial TrueType font</b></p>
<p>
If you want your application to support the double-byte character set (DBCS), you should use:</p>
<pre><code>GetSystemMetrics(SM_DBCSENABLED) ;
</code></pre>
<p>
to determine whether the system is using DBCS, and pick a DBCS-compatible font.</p>
<p>
Now all we have to do is get the indicator panes back and resize our bitmap pane.</p>
<h2>Sizing the Panes</h2>
<p>
The <b>CStatusBar::SetPaneInfo </b>function sets the size and style of each pane in a status bar. If you don't know the current size of a pane, it is difficult to calculate its final size. The <b>CStatusBar::GetPaneInfo</b> function gets the size and style of each pane. I call both of these functions from <b>CMyStatusBar::Init</b>. The code below does the resizing.</p>
<pre><code>UINT nID[5], nStyle[5] ;
int iWidth[5] ;   
GetPaneInfo(0, nID[0], nStyle[0], iWidth[0]) ;
GetPaneInfo(1, nID[1], nStyle[1], iWidth[1]) ;
GetPaneInfo(2, nID[2], nStyle[2], iWidth[2]) ;
GetPaneInfo(3, nID[3], nStyle[3], iWidth[3]) ;
GetPaneInfo(4, nID[4], nStyle[4], iWidth[4]) ;
iWidth[1] = iWidth[0]/2 - (iWidth[2]+iWidth[3]+iWidth[4]);
SetPaneInfo(0, nID[0], SBPS_STRETCH, 0) ;
SetPaneInfo(1, nID[1], nStyle[1], iWidth[1]*2) ;
SetPaneInfo(2, nID[2], nStyle[2], iWidth[2]*2) ; // CAPS
SetPaneInfo(3, nID[3], nStyle[3], iWidth[3]*2) ; // NUM 
SetPaneInfo(4, nID[4], nStyle[4], iWidth[4]*2) ; // SRCL

GetParentFrame()-&gt;RecalcLayout() ;
</code></pre>
<p>
I did not change any of the pane IDs. I didn't change pane styles, either, except for pane 0 (the status pane). The status pane normally includes the SBPS_NOBORDERS style, which I removed because I like the 3-D effect. The width of pane 0 is set to 0. Pane 0 has the SBPS_STRETCH style and will stretch to fill the space left over from the other panes.</p>
<p>
I doubled the width of the indicator panes (panes 2, 3, and 4) to make room for the bigger font. The width of pane 1, which will contain our bitmap, is equivalent to the initial width of pane 0 minus the width of the indicator panes.</p>
<p>
Figure 5 shows the status bar after I added the code to resize the panes.</p>
<p>
<img src="status_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Status bar with bitmap</b></p>
<h2>Conclusion</h2>
<p>
When I decided to add a bitmap to the EasyBit status bar, I found that drawing on the status bar was not difficult. However, it was not intuitive that changing the font would resize the status bar. Once I figured this out, the customization itself became pretty straightforward.</p>
<p>
A final word of caution: Make sure that you have a good reason for customizing the status bar through <b>CStatusBar</b>—remember that future versions of MFC may not support your customizations.</p>
</BODY>
</HTML>

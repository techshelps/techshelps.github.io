<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Migrating to the Windows NT Next Generation Directory Service</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_migrate"></a>Migrating to the Windows NT Next Generation Directory Service</h1>
<p>
Steve Judd<br>
Microsoft Corporation</p>
<p>
November 26, 1996</p>
<h2>Introduction: Guide to Migration</h2>
<p>
The purpose of this article is to help customers who have existing implementations of Microsoft® Windows NT® Server understand how to migrate to Microsoft's next generation Directory Service. This is an introduction and an overview of migration to the next generation Directory Service; it is not a tutorial on how to design great Windows NT directory trees. Two of the main features of the next generation Directory Services are: 1) complete interoperability with Windows NT 3.<i>x</i> and 4.<i>x</i>, and 2) a very easy migration from Windows NT 4.<i>x</i> domains. This article will give you examples of how such a migration will take place for the traditional Windows NT 4.<i>x</i> domain models. </p>
<p>
As we proceed through the document there are three things to remember about migrating to the next generation Directory Service: 
<ul type=disc>
<li>
You can proceed at your own pace, and stop at any time. <br><br></li>
<li>
Compatibility with existing Windows NT 3.<i>x</i> and 4.<i>x</i> domains and their clients is maintained at all times both during and after the migration. <br><br></li>
<li>
The view of the system from the end user's perspective does not change until you want it to change. </li>
</ul>
<h3>What You Should Know Before You Move Forward</h3>
<p>
When migrating to any new infrastructure you need to understand where you are, where you are going, and why you are going there. Before we explain how migration occurs, we will discuss the new concepts and technologies introduced with the next generation Directory. This will help you understand how the next generation Directory Services will fit into your environment. </p>
<p>
As you read this document you should be thinking about the following issues: 
<ul type=disc>
<li>
Where are my users physically located? <br><br></li>
<li>
Where are the resources they are using? <br><br></li>
<li>
How am I doing administration now? <br><br></li>
<li>
How do I want to do administration in the future? <br><br></li>
<li>
How should I allow my tree to be formed? Do I form the tree from the top down or do I let the individual groups within my organization form their own sub-trees under a central point? </li>
</ul>
<p>
There are no universal right or wrong answers. The method you choose will depend on your organization's needs and how you plan on supporting this infrastructure in the future. </p>
<p>
The key concepts in understanding the next generation Directory Service are: 
<ul type=disc>
<li>
The directory data model <br><br></li>
<li>
The scalable namespace <br><br></li>
<li>
The site topology </li>
</ul>
<h3>Concepts</h3>
<h4>The Directory Data Model</h4>
<p>
The directory stores objects. These objects represent real things such as users, groups of users, workstations, applications, data, distribution lists, etc. Each object has its own unique attributes. A user object will have attributes like full name, password, telephone number, and so on. The formal definition of all object types that can be stored in the directory is called the <i>schema</i>. The definition in the schema consists of a <i>class</i> definition for each type of object and an <i>attribute</i> definition for each attribute. The class definitions list the attributes that can be used to describe the class. </p>
<p>
There are no set limits to the type of objects and their attributes that can be defined within a directory. The ISO has published a recommended set of attributes and objects in the X.520 and X.521 Recommendations. These are objects and attributes that the ISO membership has agreed provide useful information for a global "white pages" directory. There are international standards for syntaxes for select object attributes; phone numbers for example. Although some attributes have become standardized, others will never come to a global or national standard. This is perfectly reasonable; individual users have diverse needs and a directory service must accommodate a wide range of uses. </p>
<h4>The Next Generation Directory: DNS and X.500</h4>
<p>
The Windows NT next generation Directory Service architecture is designed to take advantage of the best features of the Internet Domain Name System (DNS) service and X.500, while not imposing the limitations of either. </p>
<h4>DNS</h4>
<p>
Windows NT Directory Service (NTDS) takes advantage of DNS for name resolution. The next generation of Windows NTDS uses DNS as the <i>location service</i> that allows a client to find a directory server containing the desired copy of the directory. </p>
<p>
DNS is the most widely used directory service in the world. DNS is the location service used on the Internet and in most private intranets. The location service is used to translate a name, for example MyMachine.ArcadiaBay.Com, into a TCP/IP address. DNS is designed to scale to very large numbers of entries (it supports the entire Internet), while remaining "lightweight" enough for use in a system with just a few computers. </p>
<p>
The Windows NT next generation Directory Service uses DNS as its location service; that is, Windows NT Domain Names <i>are</i> DNS names. Users will find the same simple naming used on the Internet in NTDS. ArcadiaBay.Com can be both a DNS domain (e.g., an area of addressing) <i>and</i> a Windows NT Domain. JamesSmith@ArcadiaBay.Com is both an Internet e-mail address <i>and</i> a user name in the ArcadiaBay.Com domain. Windows NT domains can be located on the Internet and on intranets the same way <i>any</i> resource is located on the Internet: by means of DNS. </p>
<h4>X.500</h4>
<p>
The X.500 family of standards was developed jointly by the International Standards Organization (ISO) and the International Telecommunications Union (ITU). It was designed to promote the development of an international white pages directory service made of up of large numbers of Directory System Agents (DSAs) connected in an Open Systems Interconnection (OSI) network using protocols defined in the standard. There have been several significant barriers to the deployment of X.500 directories: 
<ul type=disc>
<li>
TCP/IP, and not OSI, has become the de facto network protocol. <br><br></li>
<li>
X.500 assumes a global directory structure and requires some defined authority to manage the top of the tree internationally and in each country. <br><br></li>
<li>
X.500 names are complex in structure and difficult to use. For example, a typical X.500 name might be: "C=US,O=ArcadiaBay,OU=Platforms,OU=Division,CN=JamesSmith", which many users find cumbersome when compared to the Internet form: "JamesSmith@ArcadiaBay.COM". <br><br></li>
<li>
X.500 defines only protocols, not APIs. This has obstructed the development of tools that can work with X.500 directories. </li>
</ul>
<p>
The X.500 family of standards is most useful for providing interoperability among directories. The communications protocols can be carried over a TCP/IP network, thus eliminating the dependence on OSI. The existence of well-defined protocols and formats makes interoperation among different directory services practical. </p>
<p>
The Windows NT next generation Directory Service will provide subsets of the 1993 X.500 protocols that are required to enable participation in an existing X.500 directory; and it will interoperate with directories and tools that support the X.500 protocols. The relevant X.500 protocols are: 
<ul type=disc>
<li>
Directory Access Protocol (DAP) <br><br></li>
<li>
Directory System Protocol (DSP) <br><br></li>
<li>
Directory Information Shadowing Protocol (DISP) </li>
</ul>
<p>
<img src="migrate_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Protocols for access and interoperability</b></p>
<p>
Support for these protocols allows the Windows NT next generation Directory Service to participate in mixed Internet and X.500 environments. The end user benefits from the implementation features of the next generation Windows NT Directory Service without the burdensome overhead of X.500. </p>
<h3>The Scalable Namespace</h3>
<p>
The key to the scalability of the Windows NT next generation Directory Server is the domain tree. Unlike directory services that consist of a single tree structure and require a complex "top down" partitioning process, the Windows NT next generation Directory Server provides a simple and intuitive "bottom up" method for building a large tree. In the Windows NT next generation Directory Server, a single domain is a complete partition of the directory. Domains are subdivided into Organizational Units (OUs) for administrative purposes. This can be seen in the following figure. </p>
<p>
<img src="migrate_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The tree of trees means scalability</b></p>
<p>
A single domain can start very small and grow to contain over 10 million objects. When a more complex organizational structure is required, or a very large number of objects must be stored, multiple Windows NT domains can be easily joined to form a tree. With the next generation Directory Server, a domain tree can contain many tens of millions of objects. </p>
<p>
The Windows NT Directory Service namespace is organized into a "tree of trees" in which each subtree is a Windows NT Domain. Each domain publishes its existence in DNS, allowing clients to find Directory Servers ("Domain Controllers") and Directory Servers to find each other. </p>
<p>
<img src="migrate_3.gif" border=0></p>
<p class=label>
<b>Figure 3. DNS is the location service</b></p>
<p>
The LDAP protocol is used by clients to communicate with the directory; the LDAP protocol requires the names of objects in the directory to be formed according to RFC 1779. RFC 1779 defines the X.500 style of name as the standard name for objects in a directory. For example, a typical user object for "James Smith" might be named: </p>
<pre><code>CN=James Smith,OU=Recruiting,OU=HR, OU=Europe,O=ArcadiaBay,C=US 
</code></pre>
<p>
To accommodate the requirements of LDAP, the Domain objects in the Windows NT Directory Service are built by <i>derivation</i>. That is, there is an <i>Auxiliary</i> form of the Domain object that is used to provide the attributes needed to define a domain, and <i>derived</i> forms of the Domain object that are created by deriving subclasses from the auxiliary object and the standard X.521 <i>base</i> objects: Country, Locality, Organization, and Organizational-Unit. </p>
<p>
<img src="migrate_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Inheritance of schema properties</b></p>
<p>
The resultant objects are: </p>
<p>
Domain-Country </p>
<p>
Domain-Organization </p>
<p>
Domain-Locality </p>
<p>
Domain-Organizational-Unit </p>
<p>
Each object has the attributes and containment rules of <i>both</i> Domains <i>and</i> the standard X.500 object classes from which they are derived. For example, Organizational-Unit has the "Organization-Name" property, and Domain has the Auditing-Policy property. The Domain-Organizational-Unit object has both the Organization-Name and Auditing-Policy Properties. The <i>Object</i> Class of the derived object contains the class of the object itself, <i>and</i> the class of all its superclasses. This means that to a Windows NT or Windows® 95 client, the directory structure can be viewed as a tree of domains. To a "generic" LDAP client, the directory structure appears to be a tree structured according to X.521 structure rules, with RFC 1779 naming: </p>
<p>
<img src="migrate_5.gif" border=0></p>
<p class=label>
<b>Figure 5. X.500 naming structure</b></p>
<p>
The standard form of Domain in the Windows NT Directory Service is the Domain-Organizational-Unit. This is the default domain object class used when creating a new domain. Domain-Organizational-Units provide the greatest flexibility when forming a tree because there are very few restrictions on their number and placement. </p>
<p>
A Domain-Organizational-Unit may be: 
<ul type=disc>
<li>
The parent of other Domain-Organizational-Units <br><br></li>
<li>
The child of another Domain-Organizational-Unit, or any other domain class </li>
</ul>
<p>
Domain-Locality offers similar flexibility, and is most useful for tree structures that are geographically partitioned. In practice, the Domain-Organizational-Unit offers similar flexibility and capability, and should serve the needs of both organizational and geographical tree structures. </p>
<p>
Domain-Organization exists primarily for enterprises that have put a "top down" deployment strategy in place; this structure tends to be somewhat more rigid than one based on Domain-Organizational-Unit, since there can be at most one Domain-Organization in the enterprise. Deploying a tree structure with a Domain-Organization as the root domain should be done only after careful consideration and planning. Domain-Country exists for compatibility with X.500 and should not be used by commercial users. </p>
<h4>The Global Catalog</h4>
<p>
All objects stored in the Windows NT next generation Directory Service have an entry in the Global Catalog (GC), a service that contains summary information from all of the objects in the tree. Designed for fast searching, the GC allows users to easily find an object, regardless of where it is in the tree, while searching by selected attributes. As a result, many common queries can be resolved from the GC without requiring a lookup in the source domain. A typical use of the global view is to provide a global address book for purposes of mail or any mail-enabled application. </p>
<p>
Using the Container Hierarchy to Model the Organization The ability of the container hierarchy in the next generation Windows NT Directory Server to nest Organizational Units within Domains (as well as within other OUs) provides a hierarchical name space which administrators can use to reflect their organization and to delegate administrative control. A container contains a list of contents, which could be major company divisions. In this scenario, it is then possible to select a division below a previous division and open it, and so on. Moving to a container hierarchy such as this with a finer-grained administrative model solves many problems. Large domains will still be possible. Finding things will still be easy because everything that exists in the domain tree will show up in the global catalog, a service that allows users to easily find an object, regardless of where it is in the tree. </p>
<h4>Replication</h4>
<p>
The manner in which a directory stores information directly determines the performance and scalability of that directory service. Directory services must handle a very large number of queries compared to the number of updates. Typically the ratio is 99% query and 1% update. For this reason, replicated storage is important. By creating multiple replicas of the directory and keeping them consistent, the number of queries that can be handled with no performance degradation is increased. </p>
<p>
The Windows NT next generation Directory Service offers multi-master replication. Some directory services use a <i>master-slave</i> approach to do updates: all of the updates must be made to the master copy of the directory, and these are then replicated to the slave copies. This is adequate for a directory with a small number of copies and an environment where all of the changes can be applied centrally, but this approach does not scale beyond small-sized, or address the needs of decentralized, organizations. </p>
<p>
Because the Windows NT next generation Directory Server offers multi-master replication, individual changes made in one copy of the directory are automatically replicated to all other appropriate copies of the directory, whether they are connected via point-to-point or store-and-forward links. </p>
<p>
For urgent changes, such as disabling a user account or changing a password, push replication is used, which means that after a change is made on one copy of the directory, the machine holding that copy pushes the change to its partners. </p>
<p>
Some directory services use time stamps to track updates. In a master-slave directory where all updates are made centrally, this is adequate, but in a multi-master replicating directory using time stamps is inadvisable. Unless time is perfectly synchronized among all copies of the directory, there is a chance for data loss or directory corruption. The Windows NT next generation Directory Server does not depend upon time stamps for detecting updates. Instead, it uses Update Sequence Numbers (USNs). </p>
<p>
Any time anything is written into an object in the directory, it gets a new update sequence number (USN), which is held per machine, and a version number which incremented any time a change is made to that object. If a user on one machine updates a user record, the current value for the version number on that object is incremented, and is then written into the object along with a new USN and a unique signature of the machine that wrote that change. The object also carries a USN and version number for each property. When a property is updated, the property version is advanced and a new USN is applied. </p>
<p>
During each replication cycle the replication partners of one machine ask for all of its changes greater than the last USN received. The source machine will then search through the directory and find each object whose update sequence numbers are greater than the one presented by the partner machine. </p>
<p>
Property changes are reconciled individually; when a change is replicated, only properties with a higher USN are updated. Collisions are detected by version number. When one property has been updated by two different machines, the one with the later time stamp wins. This use of time stamp is simply as an arbitrary "tie breaker," so time synchronization is unimportant.</p>
<p>
Per-property reconciliation keeps the chance of collisions to a minimum. </p>
<h4>Transparent trust relationships</h4>
<p>
The Windows NT next generation domains can be organized into a hierarchical domain tree. <i>Transparent Trust</i> within the tree allow users with accounts defined anywhere in the tree to be granted secure access to resources anywhere in the tree. Transparent trust within the tree <i>effectively eliminates the need for trust management</i>. </p>
<p>
The Windows NT next generation Directory Service supports two forms of trust relationships: 
<ul type=disc>
<li>
Two-way transitive trust between domains that are part of the Windows NT scalable namespace. This is the default; trust relationships among domains in the tree are established and maintained <i>automatically</i>. Transitive trust is a feature of the Kerberos system, which provides the distributed authentication and authorization in Windows NT next generation systems. <br><br></li>
<li>
Explicit one-way trust relationships to domains not part for the same tree. This capability is provided to support connection to existing Windows NT 4.<i>x</i> and earlier domains, and to allow the configuration of trust relationships with domains in other trees. </li>
</ul>
<p>
The following diagram shows the two styles of trust relationship: </p>
<p>
<img src="migrate_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Both Kerberos and Windows NT 4.0-style trust supported</b></p>
<p>
Transitive trust between domains eliminates the management of inter-domain trust accounts. Domains that are members of the domain tree automatically participate in a transitive, bi-directional trust relationship with their parent domain. All domains implicitly trust other domains in the tree. If there are specific domains where transitive trust is not appropriate, explicit one-way trust relationships can still be defined. </p>
<h4>Logical vs. Physical Structure</h4>
<p>
The Windows NT Next-generation Directory provides a complete separation of the logical structure of the domain hierarchy from the <i>physical</i> structure. </p>
<h4>Logical Structure: Domains and OUs</h4>
<p>
The logical structure of the directory is defined by the container hierarchy. This is the view seen by users. The Windows NT next generation Directory Service allows you to design a hierarchy that makes sense to the users who will use it <i>and</i> to the administrators who will manage it. The physical structure of the underlying network, the location of directory replicas, and the distribution of shared file volumes and printers across servers is not visible to the users. Users can find the objects of interest by querying the directory, as in the following: </p>
<p class=indent>
"find me a postscript printer with duplex capability on the second floor of building 5" </p>
<p>
The other option is to navigate through the directory hierarchy. Familiar desktop metaphors such as "favorites" folders and shortcuts all take advantage of the logical view of resources provided by the directory. </p>
<h4>Physical Structure: Sites and Servers</h4>
<p>
The physical structure of the next generation Windows NT Directory is based on <i>servers</i> and <i>sites</i>. A <i>server</i> is a Windows NT Server that holds a replica of a domain (a "Domain Controller"). A <i>site</i> is an area of good connectivity, typically a LAN or other fast network. </p>
<p>
A site allows you to map the replication traffic to your physical infrastructure. Within a single site, replicas of a given domain replicate among each other. Designated servers in each site are responsible for replicating changes to partners in other sites. You can have replicas of as many different domains as you need within a site. This lets you establish domain replicas wherever needed for availability and performance, <i>independent of the logical structure of the Windows NT Directory Scalable Namespace.</i> </p>
<p>
Let's look at an example. Assume your company has five different locations with in a region. These locations are connected by 56K leased lines. </p>
<p>
<img src="migrate_7.gif" border=0></p>
<p class=label>
<b>Figure 7. Site topology</b></p>
<h4>Network topology</h4>
<p>
Before you begin your migration you should design your initial site topology. It is a good idea to set up your site topology in accordance with your physical network. </p>
<p>
<img src="migrate_8.gif" border=0></p>
<p class=label>
<b>Figure 8. Network topology</b></p>
<h4>Replication topology</h4>
<p>
As time goes by, your physical infrastructure may change and the network load may change. Changing your site topology is easy using the administration tools provided by the next generation Directory Service. This gives you great flexibility to allow your site topology to evolve with your networking and organizational needs. </p>
<h4>Objects</h4>
<p>
There are many different types of objects that can be stored within your directory. Some common ones are the User, Group, Workstations, Printers, etc. You can also put references to an application's object or component. You can use the directory to located distributed applications across your infrastructure. Most of the objects you are accustomed to have been expanded to allow the directory to hold more useful information. You can also expand the properties to suit your own specific needs. For example, you might also want to place an employees "Signing Limit" for Purchase Orders with your user's object. This would allow a purchasing workflow application to easily determine if further approvals are needed. </p>
<h4>Groups</h4>
<p>
The Windows NT next generation Directory Service dramatically simplifies the creation and management of security Groups. There is no concept of a "local group" or a "global group" from the Directory's point of view. A group created in the directory service is available to all domains in the tree. A group created using a local administrative tool on a particular server or workstation is "local" to that machine because it does not appear in the Directory. It is stored on the machine where it was created and can only be used there. </p>
<h3>Naming</h3>
<p>
Several different name forms are provided and are described below. </p>
<h4>RFC822 Names</h4>
<p>
RFC822 names are in the form somename@somedomain and are familiar to most users as Internet e-mail addresses; for example JamesSmith@ArcadiaBay.Com. The Windows NT next generation Directory Service provides a "friendly name" in RFC822 form for all objects. For example, a user can use a "friendly name" as an e-mail address, suitable for display on a business card, <i>and</i> as the name used to log in. </p>
<h4>HTTP URL Names</h4>
<p>
The Windows NT next generation Directory Service supports access from Web browsers via the HTTP protocol and the Microsoft Internet Information Server, the full-service Web server built in to Windows NT Server. HTTP URLs are familiar to most users who have Web browsers, and are in the form HTTP://somedomain/path-to-page. The next generation Windows NTDS supports access to its contents via HTTP URLs in which "somedomain" refers to a server running the next generation Directory Service and "path-to-page" is the path through the next generation Directory Service hierarchy to the object of interest. For example: </p>
<pre><code>HTTP://WWW.ArcadiaBay.Com/User.ASP?path=/OU=Division/ OU=Product/OU=IT/CN=JamesSmith 
</code></pre>
<p>
LDAP URLs and X.500 Names The Windows NT next generation Directory Service supports access via the LDAP protocol from any LDAP-enabled client. LDAP names are less intuitive than Internet names, but the complexity of LDAP naming is usually hidden within an application. LDAP names use the X.500 naming convention, called attributed naming. An LDAP URL names the server holding the next generation Directory Service and the attributed name of the object. For example: </p>
<pre><code>LDAP://SomeServer.ArcadiaBay.Com/CN=jamessmith,OU=IT, OU=Product,U=Division,O=ArcadiaBay,C=US 
</code></pre>
<h4>UNC Names</h4>
<p>
The Windows NT next generation Directory Service supports the Universal Naming Convention used in Windows NT Server-based networks to refer to shared volumes, printers, and files. A user can refer to a shared file on a volume published in the Windows NT next generation Directory Service by a UNC name; for example: </p>
<pre><code>\\Europe.ArcadiaBay.Com\FinanceSpreadsheets\ XLSheets\Budget.XLS 
</code></pre>
<p>
In this sample, "Europe.ArcadiaBay.Com" is the DNS name of the domain where the shared volume is published, "FinanceSpreadsheets" is the name of the shared volume published in the DS, and "\XLSheets\Budget.XLS" is the directory and file on the shared volume. </p>
<h3>Security</h3>
<p>
In the current release, Windows NT account information is stored in a secure portion of the Registry on Domain Controllers. Using domain trust and pass-through authentication, a two-level hierarchy of domains provides a degree of flexibility for organizing account management and resource servers. Within a domain, however, accounts are maintained in a flat name space with no internal hierarchical organization. </p>
<p>
The next generation of Windows NT security uses the Windows NT Directory Services as the repository for account information. The Directory Service provides significant improvements over the Registry-based implementation in the areas of performance, scalability, and feature-rich administrative environment. </p>
<h4>Advantages of Directory Service Account Management</h4>
<p>
The advantages of integrating security account management with the Windows NT Directory Service are: 
<ul type=disc>
<li>
Accounts for users, groups, and machines can be organized into directory containers called Organizational Units (OUs). A domain can have any number of OUs organized in a tree-structured name space. Businesses can organize the name space for account information to represent the departments and organizations in the company. User accounts, as well as OUs, are directory objects that can easily be renamed within the domain tree as people move to different departments in the organization. <br><br></li>
<li>
The Directory Service supports a much larger number of user objects (well over a million objects) with better performance than the Registry. Individual domain size is no longer limited by performance of the security account repository. A tree of connected Windows NT domains can support much larger, complex organization structures. <br><br></li>
<li>
Administration of account information is enhanced using advanced graphical tools for Directory Service management as well as through Active Directory support for scripting languages. Common tasks can be implemented using batch scripts to automate administration. <br><br></li>
<li>
Directory replication services support multiple copies of account information where updates can be made at any copy, not just the designated Primary Domain Controller. The LDAP protocol and directory synchronization support provides the mechanism to link the Windows NT directory with other directories in the enterprise. </li>
</ul>
<p>
Storing the security account information in the Windows NT Directory Service means users and groups are represented as objects in the Directory. Read and write access to objects in the Directory can be granted to the object as a whole, or to individual properties of the object. Administrators have fine-grain control over who can update user or group information. For example, a Telecom operator group can be granted write access to only user account properties related to office telephone equipment without requiring full Account Operator or Administrator privileges. </p>
<p>
The concepts of groups is also simplified because local and global groups are both represented by <i>group objects</i> in the directory. Existing programming interfaces for local group access are still supported for complete backward compatibility. However, groups defined in the directory can be used for domain-wide access control to resources or only for 'local' administration purposes on the domain controller. </p>
<h3>Management</h3>
<h4>Delegation of Administration</h4>
<p>
Delegation of administration is a valuable tool for organizations to confine the security administration so that it applies only to defined subsets of the entire organization domain. The important requirement is to grant rights to a small set of users or groups to manage their area of responsibility, but not give them permissions to manage accounts in other parts of the organization. </p>
<p>
Delegation of responsibility to create new users or groups is defined at the level of an Organizational Unit (OU), or container, where the accounts are created. Group administrators for one organizational unit will not necessarily have the ability to create and manage accounts for another organizational unit within a Domain. However, domain-wide policy settings and access rights defined at higher levels in the Directory tree can apply throughout the tree by using inheritance of access rights. There are three ways to define the delegation of administration responsibilities: 
<ol>
<li>
Delegate permissions to change properties on a particular container, such as the LocalDomainPolicies of the Domain object itself. <br><br></li>
<li>
Delegate permissions to create and delete child objects of a specific type underneath an OU, such as Users, Groups, or Printers. <br><br></li>
<li>
Delegate permissions to update specific properties on child objects of a specific type underneath an OU, for example, the right to Set Password on User objects. </li>
</ol>
<p>
The Directory Service Administration user interface makes it easy to view the delegation information defined for containers. Adding new delegation of permissions is also easy to do by selecting who you want to delegate permission to and choosing what permissions they need. </p>
<p>
Integrating the security account repository with the Windows NT Directory Service provides real benefits to manage the Enterprise. Performance, ease of administration, and scalability for large organizations are the direct result. Internet-based Enterprises can use Domain trees and hierarchical OUs to organize accounts for business partners, frequent customers, or suppliers with specific access rights to their system. </p>
<h4>Fine-grained Access Rights</h4>
<p>
Large organizations typically depend on many individuals or groups to secure and manage the network account infrastructure. They need the ability to grant access rights for specific operationssuch as resetting user passwords, or disabling accountsto specific groups without also granting the permission to create new accounts or change other properties of user accounts. </p>
<p>
The security architecture for Directory Service objects uses Windows NT security descriptors to control object access. Every object in the Directory has a unique security descriptor. The Access Control List (ACL) in the security descriptor is a list of entries that grant or deny specific access rights to individuals or groups. Access rights can be granted or denied with different levels of scope on the object and can be defined on any of the following levels: 
<ul type=disc>
<li>
Apply to the object as a whole, which applies to all properties of the object <br><br></li>
<li>
Apply to a grouping of properties defined by property sets within the object <br><br></li>
<li>
Apply to an individual property of the object </li>
</ul>
<p>
Granting uniform read/write access to all properties of an object is the default access permissions for the creator of the object. Granting or denying object access permissions to a property set is a convenient way to define permissions for a group of related properties. The grouping of properties is defined by the property set attribute of a property in the schema. The property set relationship can be customized by changing the schema. Finally, the definition of access rights on a <i>per-property</i> level provides the highest level of granularity of permissions. Definition of per-property access is available on all objects in the Windows NT Directory Service. </p>
<p>
Container objects in the directory also support fine grain access with respect to who has permissions to create child objects and what type of child objects they may create. For example, the access control defined on an Organizational Unit (OU) can define who is allowed to create User objects (accounts) in this container. Another entry in the access control for the OU might define who is allowed to create Printer objects. Fine grain access control on directory containers is an effective way to maintain organization of the directory name space. </p>
<p>
A new implementation of the "ACL Editor," the common dialog control for viewing or changing object security permissions, provides an easy-to-use interface for defining access rights to Directory Service objects by property set or individual properties. The ACL Editor also supports defining "inherited" access rights on container objects that flow down to all sub-objects in that portion of the directory tree. </p>
<h4>Drag-and-drop administration</h4>
<p>
The Windows NT next generation Directory Service provides intuitive and powerful administration tools. Objects can be hierarchically organized so that they can model large organizations. And the graphical user interface delivers one of the most requested administrative toolsa drag-and-drop control console. This console has a graphical user interface that provides an object-view of administration. For example, to do pruning and grafting, the administrator would grab the top of the merge-from tree and then drag and drop it onto the target domain. A dialog box asks the administrator to confirm the action. Of course, the administrator must have rights in the merge-from tree to merge it with another tree, and in the merge-to domain to bring new trees into it. </p>
<h4>Scripting and OLE Automation</h4>
<p>
Anything that can be done through a UI should be able to be done programmatically or from a script. To allow an administrator to write command procedures, the Windows NT next generation Directory Service provides full support for OLE automation and scripting. This makes it possible to add, change, move, copy, and perform other administrative functions by scripted manipulation using Active Directory, and a scripting language such as Java, Microsoft® Visual Basic® Scripting Edition, or others. </p>
<h3>Migration Scenarios</h3>
<p>
Now that we have discussed the new concepts and issues with Windows NT Directory Services, we can work through the migration of the traditional Windows NT domain model to the next generation model. The difference between the Windows NT 4.0 domain models model is the number of domains involved and the trusts between them. The migration process is grown through the different scenarios. </p>
<p>
Windows NT 4.<i>x</i> and earlier support several domain models, distinguished by the <i>number of domains</i> and the trust relationships between the domains. Four domain models are described in the planning guide for earlier versions of Windows NT: 
<ul type=disc>
<li>
<b>Single Domain Model. </b>All users and resources are contained in a single domain, and there are no trust relationships. <br><br></li>
<li>
<b>Master Domain Model.</b> Users are contained in a single domain and resources are contained in one or more "second tier" domains, also known as "resource domains." Resource domains trust the master domain. <br><br></li>
<li>
<b>Multiple-master Domain Model.</b> A variation on the master domain model, in which users are contained in two or more master domains, which trust each other, and resources are contained in resource domains. As in the master domain model, the resource domains trust all the master domains. <br><br></li>
<li>
<b>Complete Trust Model.</b> A model in which users and resources are spread across two or more domains, all of which trust each other. </li>
</ul>
<p>
All of these models (and the variations on them) can be easily migrated to the next generation Directory Service. The migration process is divided into two parts: 
<ol>
<li>
Upgrading the Domain <br><br></li>
<li>
Forming the Tree </li>
</ol>
<p>
These steps are performed the same way regardless of the domain model(s) in use. The only difference is the number of times each step needs to be performed. In the case of Resource domains, you have the option of (a) keeping the resource domain after migrating it or (b) folding the resource domain into one of the former "master" domains and using delegation of authority in the container hierarchy to provide the desired granularity of administrative responsibility. </p>
<h4>Upgrading a Domain</h4>
<p>
Upgrading a domain is <i>always</i> performed the same way, regardless of the domain model in use. This is a simple, iterative process. </p>
<p>
First, upgrade the Primary Domain Controller. This converts the Registry-based security data base to a next generation directory store. To Backup Domain Controllers and clients in the domain, the upgraded PDC looks like a Windows NT 4.<i>x</i> system, and operation continues normally. As soon as the PDC has been upgraded, you can begin using the Windows NT Common Console to perform administration. The partially upgraded domain is a "mixed" domain; to clients and other domains it looks and acts exactly like a Windows NT 4.0 domain. </p>
<p>
<img src="migrate_9.gif" border=0></p>
<p class=label>
<b>Figure 9. Step 1  Upgrade the PDC</b></p>
<p>
After the PDC has been upgraded, you can upgrade the BDCs. You can proceed at your own pace. </p>
<p>
<img src="migrate_10.gif" border=0></p>
<p class=label>
<b>Figure 10. Steps 2<i>n</i>  Upgrade BDCs</b></p>
<p>
When all BDCs have been upgraded, the domain is a "pure" Windows NT next generation domain, and is eligible to join a tree. Mixed domains cannot join domain trees, because the systems that have not been upgraded do not understand the new security system, transitive trust, and other advanced next generation facilities that implement the Scalable Namespace. </p>
<p>
<img src="migrate_11.gif" border=0></p>
<p class=label>
<b>Figure 11. Migration complete</b></p>
<p>
In the case of the single domain model, the upgrade is complete when Step 1 has been completed. The single domain model involves only one domain, so no tree formation is possible. </p>
<p>
In the case of the master, multiple master, and complete trust models, tree formation is possible. The elimination of explicit trust, administrative streamlining and usability enhancements that accompany the Scalable Namespace make tree formation highly desirable for these domain models. </p>
<h4>The Scalable Namespace: Forming a Domain Tree</h4>
<p>
To form a Domain Tree, at least two domains must have been completely upgraded to be next generation domains. As described above, this simply means that all of the Domain Controllers in the domains have been upgraded. To form a domain tree, you must: 
<ul type=disc>
<li>
Choose the domain that will be the "root" of the tree. <br><br></li>
<li>
For each non-root domain, decide what domain will be its parent. </li>
</ul>
<p>
You must have special <i>rights</i> in both domains that allow you to perform tree operations. For purposes of illustration we will assume a simple case of two domains in a complete trust relationship. After upgrading both domains the Windows NT4 trust relationships are still in place. Users in the "Americas" domain can be granted access to resources in the "Europe" domain and vice versa. </p>
<p>
<img src="migrate_12.gif" border=0></p>
<p class=label>
<b>Figure 12. Initial state</b></p>
<p>
Now we can form a simple tree. In this example we have chosen to make the "Americas" domain the root of the tree. This is called the "joined to" tree. Even though "Americas" is a single domain, it is still a "tree" in next generation Directory Service terms. In the Administrative tool within the Common Console, we select the Americas domain and identify it as the "joined to" tree. We must be logged on to the "Americas" tree with a valid account that has the necessary rights to perform tree operations. We identify the "Europe" domain as the domain that we want to "graft" onto "Americas." We will be required to supply security credentials for the "Europe" domain. Like the "Americas" domain, the credentials we supply must be sufficient to give us the right to perform tree operations in the "Europe" tree. </p>
<p>
<img src="migrate_13.gif" border=0></p>
<p class=label>
<b>Figure 13. Begin tree join process</b></p>
<p>
The actual connection of the parent domain to the child is accomplished with a special object type in the Directory, a Domain Proxy object. Domain Proxy objects are stored in a special part of the directory reserved for directory <i>metadata</i>. The Domain Proxy object(s) are used by the next generation Directory to determine the shape of the directory tree. Creation and maintenance of the metadata objects is automatic is performed by the Administrative tool. As part of the Tree Graft operation the Next-generation software automatically detects the Windows NT4 trust links between the joined-to and joined-from trees (which are single domains in this case), and replaces then with an automatic, transitive Kerberos trust. This occurs without administrative intervention. </p>
<p>
<img src="migrate_14.gif" border=0></p>
<p class=label>
<b>Figure 14. Automatic trust link creation</b></p>
<p>
The end result is a simple domain tree, the beginning of a Windows NT next generation Scalable Namespace. Additional domains can be joined as children under the "Americas" or "Europe" domains, as needed, to provide the logical structure to meet the organization's needs. </p>
<p>
<img src="migrate_15.gif" border=0></p>
<p class=label>
<b>Figure 15. Domain tree</b></p>
<h3>Special Considerations for Resource Domains</h3>
<p>
A resource domain is simply a normal Windows NT 4.<i>x</i> (or 3.<i>x</i>) domain in which there are no user accounts. Resource domains are used to collect a group or resources (files shares, printers, etc.) for purposes of administrative control. Users gain access to the resources in a resource domain through a trust relationship; resource domains <i>trust</i> one or more master domains. Users with accounts in the master domains can be added to <i>Access Control Lists</i> on the resources in the resource domains. </p>
<p>
The preceding examples have shown how a domain can be upgraded to the Next-generation simply and easily. Since a resource domain is a domain like any other, it too can be upgraded. </p>
<h4>What Happens to Access Control Lists (ACLs)?</h4>
<p>
System administrators have a large investment in the Access Control Lists they have created on the resources in the resource domains. An Access Control list is simply a list of the <i>Security Principals</i> who are allowed (or forbidden) to use the resource protected by the ACL. </p>
<p>
A Windows NT Access Control List contains the <i>Security Identifiers</i> of the relevant users and groups. When you upgrade a Windows NT 4.x domain to a Next-generation domain, the security identifiers of the users and groups in that domain <i>are not changed</i>. This means that any Access Control list that contains those security identifiers is still completely valid. </p>
<p>
The explicit trust between a resource domain and the master domain(s) that existed before the upgrade remains in place until the domain is joined to the tree. If the domain is never joined to the tree, the explicit trusts remain, and the users can use the resources as they did before the upgrade. If the domain is joined to the tree, the explicit trust is automatically replaced with a Kerberos Transitive Trust, and the users can use the resources as they did before the upgrade. </p>
<h4>Retaining the Resource Domain</h4>
<p>
Resource domains are put in place to give local administrators control of local resources. With the availability of the fine-grained delegation of authority in the Next-generation Directory Service, there is little advantage to retaining resource domains in the longer term. 
<ul type=disc>
<li>
Organizational Units provide for delegation of administrative authority to any granularity required. <br><br></li>
<li>
Transitive trust allows users in any part of the tree to be granted access to a resource. </li>
</ul>
<p>
Over time, the resources in most resource domains will very likely be absorbed by one or more parent domain. Individual resources can be moved into Organizational Units to provide the desired delegation of administrative authority. </p>
<h4>Converting the Resource Domain to an Organizational Unit</h4>
<p>
Converting a resource domain is a simple matter of moving the resources (usually servers) from the resource domain to an Organizational Unit in one of the former master domains. </p>
<p>
<img src="migrate_16.gif" border=0></p>
<p class=label>
<b>Figure 16. Domain tree with resource domain</b></p>
<p>
In the preceding figure we see a Domain Tree with a resource domain joined to the bottom of the tree as a "leaf" node. To convert the resource domain to an Organizational Unit (or group of Organizational Units), all we need do is move the resources, in this case three member servers, from the resource domain to one of the parent (or peer) domains in the tree. This is shown in the following figure. </p>
<p>
<img src="migrate_17.gif" border=0></p>
<p class=label>
<b>Figure 17. Resources moved to OU in parent domain</b></p>
<p>
Moving a member server from the resource domain is accomplished by administratively removing it from the resource domain that is being dismantled and joining it to the desired domain in the tree. This is shown in the following figure. </p>
<p>
<img src="migrate_18.gif" border=0></p>
<p class=label>
<b>Figure 18. Moving a member server</b></p>
<h4>Effect of Relocating Member Servers: What About Local Groups?</h4>
<p>
In the preceding example we simplified the domain tree by eliminating a resource domain. We eliminated the resource domain by moving the servers it contained into other domains. What effect does this have on the member servers? </p>
<p>
As discussed earlier, the access controls lists that are applied to resources in resource domains are not affected by an upgrade the next generation Directory Service because the security identifiers of the principals (users and groups) are not changed. </p>
<p>
Many existing Windows NT installations protect the resources on their member servers with Local Groups. A <i>local group</i> is a security group that is defined on a specific machine and is stored locally on that machine. For example, a print server might have a high-resolution large format color printer attached, which is for the exclusive use of the graphic arts department. In this case, a common practice is to create a local group on the print server and call it LARGE_FORMAT_PRINTER. The local group LARGE_FORMAT_PRINTER is granted access to the printer with an ACL that denies access to all others. </p>
<p>
The employees in the graphic arts department are all members of the GRAPHIC_ARTS_DEPARTMENT global group. A <i>global group</i> is a security group in Windows NT 4.<i>x</i> and 3.5<i>x</i> that is valid anywhere in the domain where it is defined. By adding the GRAPHIC_ARTS_DEPARTMENT global group to the LARGE_FORMAT_PRINTER local group on the print server, anyone who is a member of the graphic arts department can gain access to the printer. When someone leaves the department, they will be administratively removed from the GRAPHIC_ARTS_DEPARTMENT group and thus no longer be allowed to use the printer. </p>
<p>
What happens when we upgrade to the next generation Directory Service? 
<ol>
<li>
The GRAPHIC_ARTS_DEPARTMENT group automatically becomes a group in the Directory, visible and usable by all domains in the tree. <br><br></li>
<li>
The local group on the print server is unaffected, because local groups are stored locally on the machine where they are used, and are not changed in any way by the upgrade. Because the security identifiers are unchanged, even though GRAPHIC_ARTS_DEPARTMENT is now a group in the Directory, the entry for GRAPHIC_ARTS_DEPARTMENT in the LARGE_FORMAT_PRINTER group is still perfectly valid. The protections on the printer are unchanged. <br><br></li>
<li>
Moving the print server from the resource domain to another domain in the tree has no effect on the ACLs, because no security principals are involved in the move. It also has no effect on the LARGE_FORMAT_PRINTER group because this is a purely local group and is not affected by domain membership. </li>
</ol>
<h2>Conclusion</h2>
<ul type=disc>
<li>
The design of the Windows NT next generation Directory Service facilitates <i>easy migration</i> from earlier versions of Windows NT. <br><br></li>
<li>
Any domain model can be migrated with equal ease. <br><br></li>
<li>
Resource domains are easily absorbed into organizational units for dramatically improved granularity of administration. <br><br></li>
<li>
Access Control Lists and local groups used to protect resources are <i>not affected</i>. <br><br></li>
<li>
You can <i>proceed at your own pace and stop at any time</i>. <br><br></li>
<li>
The view of the system from the end user's perspective <i>does not change until you want it to change</i>. <br><br></li>
<li>
Compatibility with existing Windows NT 3.<i>x</i> and 4.<i>x</i> domains and their clients is maintained <i>at all times both during and after the migration.</i> </li>
</ul>
<h2>For More Information</h2>
<p>
For the latest information on Windows NT Server, check out our World Wide Web site at <a href="http://www.microsoft.com/ntserver/">http://www.microsoft.com/ntserver/</a> or the Windows NT Server Forum on the Microsoft Network (GO WORD: MSNTS). To access Other Windows NT Server information on the Web, go to http://www.microsoft.com/ and select Microsoft BackOffice. </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 86: Allowing a Visual Basic Application to Accept Drag-and-Drop Files</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn86"></a></sup>Tip 86: Allowing a Visual Basic Application to Accept Drag-and-Drop Files</h1>
<p>
May 15, 1995</p>
<h2>Abstract</h2>
<p>
Many Windows®-based applications can accept, or process, a file that has been dragged from File Manager. This article explains how you can add this feature to your own Visual Basic® application.</p>
<h2>Using MSGBLAST.VBX to Accept Drag-and-Drop Files</h2>
<p>
Using File Manager, you can drag a file to another application and, when you release the mouse button (drop the file), the target application can process the file any way it wants to.</p>
<p>
In order for a program to be able to accept drag-and-drop files, however, the program must have a method of recognizing when a file has been sent to it. In Visual Basic®, this can be done by using the Message Blaster custom control and three Windows® application programming interface (API) functions: <b>DragAcceptFiles</b>, <b>DragQueryFile</b>, and <b>DragFinish</b>.</p>
<p>
The <b>DragAcceptFiles</b> function tells Windows that a specific window (that is, your Visual Basic application's form) can accept files dropped from File Manager. The <b>Declare</b> statement for this function is:</p>
<pre><code>Private Declare Sub DragAcceptFiles Lib "shell" (ByVal hWnd As Integer, ByVal 
 &nbsp; bool As Integer)
</code></pre>
<p>
(Note that this <b>Declare</b> statement must be typed as a single line of code.)</p>
<p>
The <b>DragAcceptFiles</b> function takes only two arguments: the handle of the window that will accept the dropped files, and an integer value that specifies if the file can be accepted or ignored. If the Boolean argument is set to True, the window can accept dropped files; if it is set to zero, the window can no longer accept dropped files.</p>
<p>
You can retrieve the name of the file that was dropped on the target window by calling the <b>DragQueryFile</b> function. This function's declaration statement is:</p>
<pre><code>Private Declare Function DragQueryFile Lib "shell" (ByVal wParam As Integer, 
 &nbsp; ByVal Index As Integer, ByVal lpszFile As Any, ByVal BufferSize As Integer)
 &nbsp; As Integer
</code></pre>
<p>
(Note that this <b>Declare</b> statement must be typed as a single line of code.)</p>
<p>
<b>DragQueryFile</b> requires four arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=15%><i>wParam</i></td>
<td width=85%>An integer value that contains the internal data structure's handle. This is provided by the WM_DROPFILES message.</td>
</tr>
<tr valign=top>
<td width=15%><i>Index</i></td>
<td width=85%>An integer value containing the number of the individual file to be retrieved. If this value is -1, the number of files listed in the <i>wParam</i> structure will be returned.</td>
</tr>
<tr valign=top>
<td width=15%><i>lpszFile</i></td>
<td width=85%>A string buffer that contains the name of the dropped file.</td>
</tr>
<tr valign=top>
<td width=15%><i>BufferSize</i></td>
<td width=85%>An integer value containing the maximum number of characters in <i>lpszFile</i>.</td>
</tr>
</table><br>
<p>
After calling the <b>DragQueryFile</b> function, an integer value reports the status of the function. This value contains the number of characters copied to the <i>lpszFile</i> string or the number of files available if <i>Index</i> was set to zero.</p>
<p>
The third function needed to work with drag-and-drop files is the <b>DragFinish</b> function. This function simply requires that the internal data structure's handle be passed to it. <b>DragFinish</b> frees all structures used when transferring the file to the target application.</p>
<p>
The final step is to process the WM_DROPFILES message. This message is sent by Windows each time it needs to send a drag-and-drop request to a program. In your Visual Basic program you need only use the Message Blaster custom control to intercept the WM_DROPFILES message before Windows actually processes it itself. In the example program below, we use the Message Blaster control to retrieve the name of the dropped file and store that name in the <b>List</b> <b>Box</b> control.</p>
<h2>Example Program</h2>
<p>
The example program below shows how to allow your Visual Basic application to accept drag-and-drop files from File Manager. To use this demonstration program, first execute the Windows Explorer or File Manager application. Then run the DEMO.EXE program. When you drag a file from File Manager to DEMO.EXE's window and release the mouse button, the filename will be displayed in the List Box control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Option Explicit
Private Declare Sub DragAcceptFiles Lib "shell" (ByVal hWnd As Integer, ByVal 
bool As Integer)
Private Declare Function DragQueryFile Lib "shell" (ByVal wParam As Integer, 
ByVal Index As Integer, ByVal lpszFile As Any, ByVal BufferSize As Integer) 
As Integer
Private Declare Sub DragFinish Lib "shell" (ByVal hDrop As Integer)
Const WM_DROPFILES = &amp;H233
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
msgblaster1.MsgList(0) = WM_DROPFILES
msgblaster1.hWndTarget = Me.hWnd
msgblaster1.MsgPassage(0) = 1
DragAcceptFiles Me.hWnd, True

End Sub
</code></pre>
</li>
<li>
Add a Message Blaster custom control to Form1. MsgBlaster1 is created by default.<br><br></li>
<li>
Add the following code to the MsgBlaster1_Message event for MsgBlaster1:<pre><code>Private Sub MsgBlaster1_Message(MsgVal As Integer, wParam As Integer, lParam As 
Long, ReturnVal As Long)
Dim hFilesInfo As Integer
Dim szFileName As String
hFilesInfo = wParam
wTotalFiles = DragQueryFile(hFilesInfo, &amp;HFFFF, ByVal 0&amp;, 0)
For wIndex = 0 To wTotalFiles
szFileName = Space$(50)
Retv% = DragQueryFile(hFilesInfo, wIndex, szFileName, 50)
list1.AddItem szFileName
Next wIndex
DragFinish (hFilesInfo)
End Sub
</code></pre>
</li>
<li>
Compile the program. From Visual Basic's File menu, select Make EXE File to create the executable file called DEMO.EXE.</li>
</ol>
<h2>Additional References</h2>
<p>
"DragAcceptFiles." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference, Volume 2, Functions)</p>
<p>
"Drop Everything: How to Make Your Application Accept and Source Drag-and-Drop Files." (<i>Microsoft Systems Journal</i>)</p>
<p>
"Using Drag-Drop in an Edit Control or a Combo Box." (MSDN Library, Knowledge Base)</p>
<p>
"Using MSGBLAST.VBX Control to Process Windows Messages from VB." (MSDN Library, Knowledge Base)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The HelpDesk Sample Database Architecture</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_hddbarch"></a>The HelpDesk Sample Database Architecture</h1>
<p>
Venu Yerra<br>
MSDN Content Development Group</p>
<p>
November 1997<br>
Updated: February 2, 1998</p>
<p class=indent>
<B><b>Update details</b></B>&nbsp;&nbsp;&nbsp;The sample database that accompanies this article has been updated to represent the final state of the HelpDesk sample application. </p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5171">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the sample HelpDesk database.</a></p>
<h2>Introduction</h2>
<p>
This article explains the database model created for the HelpDesk Site sample. The sample database associated with this article was created in Microsoft® SQL Server™ version 6.5. This article will cover the following:
<ul type=disc>
<li>
Database naming conventions<br><br></li>
<li>
The HelpDesk database schema<br><br></li>
<li>
Tables in the HelpDesk database<br><br></li>
<li>
Stored procedures in the HelpDesk database<br><br></li>
<li>
Building a database from scripts</li>
</ul>
<p>
The HelpDesk Site is a Web-based, object-oriented sample application developed by the MSDN Content Development Group. It consists of a database, a scalable back-end, and clients that support a variety of methods for submitting help requests, a process for optimizing the assignment of technicians to each request, and a request-resolution cycle. Robert Coleridge's article <a href="msdn_hlpdskov.htm">"The HelpDesk Site Sample: Overview of Automated Solution"</a> gives a good introduction to the HelpDesk sample. Also, read <a href="msdn_hdobj.htm">"Designing the HelpDesk Transaction-Processing Object Model"</a> by Fred Pace to learn about the HelpDesk object model and <a href="msdn_taskdist.htm">"Task Distribution in a Customer Service System"</a> by Steve Kirk to understand the task-distribution scheme.</p>
<p>
The HelpDesk sample includes clients for both the user (requestor) and the technician. The clients do not access the database directly; they use the HelpDesk objects, as illustrated in Figure 1.</p>
<p>
<img src="hdobjmod.gif" border=0></p>
<p class=label>
<b>Figure 1. The HelpDesk object model</b></p>
<h3>Overview of the HelpDesk Database Design</h3>
<p>
HelpDesk is designed to manage easily and efficiently the resolution of Help requests. All requests are stored in a centralized database. These requests are then assigned to different technicians to be resolved.</p>
<p>
The central entity in the database is a user's request for help. A request is assigned to a technician based on the skill level required and the location of the requestor and the technician. The technician considers factors such as the priority and date of the request when deciding the order in which to resolve assigned requests. Therefore, all requests have the following attributes set at insertion time: priority, requested date, location, skill, description, and e-mail alias of requestor Similarly, each technician is described by a set of attributes in a technician table: skill, location, and e-mail alias. A third table stores the details of all communication between the technician and the requestor that occurs during the resolution process.</p>
<p>
All other tables are in some way related to these tables. They wrap around the main tables providing consistency and reducing redundancy in the database. </p>
<h4>Naming Conventions</h4>
<ul type=disc>
<li>
All tables in the HelpDesk database are prefixed with "tb". For example, the technician table is called tbTech.<br><br></li>
<li>
The primary key column in all tables is called PKId.<br><br></li>
<li>
Foreign key columns are suffixed with "Id." They are usually named according to the name of the table the column references. For example, the tbTech table contains a LocId field that is a foreign key to the table tbLocation. In the table descriptions that follow, I have marked the foreign key fields with (FK).<br><br></li>
<li>
All the SQL Server stored procedures have a "pc" prefix.</li>
</ul>
<h2>Database Schema</h2>
<p>
Figure 2 illustrates the HelpDesk schema and clearly shows how other tables in the database are linked to the three primary tables.</p>
<p>
<img src="hddbarch2.gif" border=0></p>
<p>
<img src="hddbarch3.gif" border=0></p>
<p class=label>
<b>Figure 2. The HelpDesk database schema</b></p>
<h3>Primary Tables</h3>
<p>
The database consists of three primary tables:
<ul type=disc>
<li>
<i>tbReq</i> contains requests that have not been resolved.<br><br></li>
<li>
<i>tbReqDet</i> contains a list of request details (details of communications between user and technician) for each request.<br><br></li>
<li>
<i>tbTech</i> contains a list of available technicians in the HelpDesk system. It has information about the technician location, skill, and e-mail alias.</li>
</ul>
<h4>tbReq</h4>
<p>
Each record in this table corresponds to a request that has not been resolved. Records get inserted into this table in one of the following ways:
<ul type=disc>
<li>
A user client inserts a request.<br><br></li>
<li>
If the request is coming in other ways, such as e-mail or telephone, the request is first inserted into tbMsgIn. An administrative process inserts the request into tbReq and also updates the TrackingNo field to keep track of the request between the two tables.</li>
</ul>
<p>
After a request is resolved, it is inserted into the tbReqHist table, and then removed from the tbReq table. Table 1 lists the fields of tbReq.</p>
<p class=label>
<b>Table 1. tbReq Fields</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Field Name</b></td>
<td class=label width=19%><b>Data Type</b></td>
<td class=label width=16%><b>Attribute</b></td>
<td class=label width=43%><b>Description of Field</b></td>
</tr>
<tr valign=top>
<td width=22%>PKId</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Primary key of the request record.</td>
</tr>
<tr valign=top>
<td width=22%>ReqDate</td>
<td width=19%>Datetime</td>
<td width=16%>NOT NULL</td>
<td width=43%>Date and time the request is made.</td>
</tr>
<tr valign=top>
<td width=22%>ResolDate</td>
<td width=19%>Datetime</td>
<td width=16%>NULL</td>
<td width=43%>Date and time the request is resolved.</td>
</tr>
<tr valign=top>
<td width=22%>LocId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Location of the request. Foreign key to tbLocation.</td>
</tr>
<tr valign=top>
<td width=22%>PriorityId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Priority of the request. Foreign key to tbPriority.</td>
</tr>
<tr valign=top>
<td width=22%>ResolById (FK)</td>
<td width=19%>Int</td>
<td width=16%>NULL</td>
<td width=43%>Technician who resolved the request. Foreign key to tbTech.</td>
</tr>
<tr valign=top>
<td width=22%>ResolTypeId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NULL</td>
<td width=43%>Type of Resolution. Foreign key to tbResolType.</td>
</tr>
<tr valign=top>
<td width=22%>SkillId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Skill type required. Foreign key to tbSkill.</td>
</tr>
<tr valign=top>
<td width=22%>StatusId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Present status of request. Foreign key to tbStatus. (For a list of possible statuses, see the <a href="#hddbarch_status">"Status"</a> section)</td>
</tr>
<tr valign=top>
<td width=22%>TechId (FK)</td>
<td width=19%>Int</td>
<td width=16%>NULL</td>
<td width=43%>Technician who is assigned to request. Foreign key to tbTech</td>
</tr>
<tr valign=top>
<td width=22%>TrackingNo</td>
<td width=19%>Int</td>
<td width=16%>NOT NULL</td>
<td width=43%>Used to track request record through the entire lifecycle<sup>1</sup></td>
</tr>
<tr valign=top>
<td width=22%>EmailAlias</td>
<td width=19%>Varchar(12)</td>
<td width=16%>NOT NULL</td>
<td width=43%>E-mail alias of the person who requested help</td>
</tr>
<tr valign=top>
<td width=22%>ResolOther</td>
<td width=19%>Text</td>
<td width=16%>NULL</td>
<td width=43%>Other details</td>
</tr>
<tr valign=top>
<td width=22%>Descr</td>
<td width=19%>Varchar (50)</td>
<td width=16%>NULL</td>
<td width=43%>Description of request</td>
</tr>
</table><br>
<p class=mini>
1. As we have already seen, requests can come into tbReq from tbMsgIn table. To identify the request between these two tables, TrackingNo is used. Also, in all interactions between technician and user, TrackingNo is used to identify the request. Finally, TrackingNo identifies the request once it has been resolved and moved into tbReqHist.</p>
<h4>tbReqDet</h4>
<p>
This table contains request details. PKId is the primary key on the table that identifies each request detail record.</p>
<p>
The ReqDetTypeId identifies the type of request detail: a standard text response, a text response, a standard voice response, or a voice response. Table 2 lists the fields of tbReqDet. </p>
<p class=label>
<b>Table 2. tbReqDet Fields</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Field name</b></td>
<td class=label width=15%><b>Data type</b></td>
<td class=label width=17%><b>Attribute</b></td>
<td class=label width=45%><b>Description of field</b></td>
</tr>
<tr valign=top>
<td width=23%>PKId</td>
<td width=15%>Int</td>
<td width=17%>NOT NULL</td>
<td width=45%>Primary key to request detail record.</td>
</tr>
<tr valign=top>
<td width=23%>ReqId (FK)</td>
<td width=15%>Int</td>
<td width=17%>NOT NULL</td>
<td width=45%>Request to which this request detail belongs.</td>
</tr>
<tr valign=top>
<td width=23%>ReqDetTypeId (FK)</td>
<td width=15%>Int</td>
<td width=17%>NOT NULL</td>
<td width=45%>Type of request detail. Foreign Key to tbReqDetType table.</td>
</tr>
<tr valign=top>
<td width=23%>DetMsgId</td>
<td width=15%>Int</td>
<td width=17%>NULL</td>
<td width=45%>Key to table to which request detail type is pointing. <sup>1</sup></td>
</tr>
<tr valign=top>
<td width=23%>TechId (FK)</td>
<td width=15%>Int</td>
<td width=17%>NULL</td>
<td width=45%>Technician who is involved with this message.</td>
</tr>
<tr valign=top>
<td width=23%>DetDate</td>
<td width=15%>Datetime</td>
<td width=17%>NOT NULL</td>
<td width=45%>Date and time when this request detail was created.</td>
</tr>
</table><br>
<p class=mini>
1. A record is inserted into tbReqDet every time the user or technician responds about the request. This can be an e-mail or voice response. A record is also inserted into the tbTxtReq, tbVoiceReq, tbStdTxtResp, tbStdVoiceResp, tbTextResp, or tbVoiceResp tables depending on the type of response. The DetMsgId field will have the key that refers to any of one of these tables.</p>
<h4>tbTech</h4>
<p>
This table contains information about each technician in the HelpDesk system and has a primary key (PKId) for each technician. Table 3 shows the structure of the tbTech table. </p>
<p class=label>
<b>Table 3. tbTech Fields</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Field name</b></td>
<td class=label width=17%><b>Data type</b></td>
<td class=label width=16%><b>Attribute</b></td>
<td class=label width=44%><b>Description of field</b></td>
</tr>
<tr valign=top>
<td width=23%>PKId</td>
<td width=17%>Int</td>
<td width=16%>NOT NULL</td>
<td width=44%>Primary key of technician record.</td>
</tr>
<tr valign=top>
<td width=23%>LocId (FK)</td>
<td width=17%>Int</td>
<td width=16%>NOT NULL</td>
<td width=44%>Foreign key to tbLocation. </td>
</tr>
<tr valign=top>
<td width=23%>SkillId (FK)</td>
<td width=17%>Int</td>
<td width=16%>NOT NULL</td>
<td width=44%>Foreign key to tbSkills.</td>
</tr>
<tr valign=top>
<td width=23%>EmailAlias</td>
<td width=17%>Varchar (12)</td>
<td width=16%>NOT NULL</td>
<td width=44%>E-mail alias of technician.</td>
</tr>
<tr valign=top>
<td width=23%>StatusId (FK)</td>
<td width=17%>Int</td>
<td width=16%>NOT NULL</td>
<td width=44%>The status of technician (logged on or logged off). Foreign key to tbTechStatus table</td>
</tr>
</table><br>
<h3>Supporting Tables</h3>
<p>
All other tables in the database support the primary tables. For example, the different priority levels are kept in tbPriority, and tbStatus and tbResolType contain the different statuses and resolution types respectively. The tbSysParmType and tbSysSetup tables keep the system setup and configuration data. </p>
<h3>History Tables</h3>
<p>
Resolved requests are stored in tbReqHist. The details of the request are stored in tbReqDetHist. The text requests and responses are stored in tbTxtReqHist and tbTxtRespHist. Similarly, the voice requests and responses are stored in tbVoiceReqHist and tbVoiceRespHist.</p>
<h3>Stored Procedures</h3>
<p>
All actions performed by clients are carried out by stored procedures rather than through direct manipulation of the HelpDesk database objects.</p>
<h4>Request insertion</h4>
<p>
If a user submits a request via the user client, the pcIns_Req stored procedure inserts the request into tbReq. If a user submits a request via e-mail or telephone request, the pcIns_Msg stored procedure inserts a record into the tbMsgIn table.</p>
<h4>Resolution cycle</h4>
<p>
During the resolution cycle, a technician may have to respond to the user either for a clarification or for more information. Therefore, there can be a continuous interaction between the user and the technician involved in the resolution.</p>
<p>
The stored procedures in Table 4 are called, during the resolution cycle, in response to actions taken at the client.</p>
<p class=label>
<b>Table 4. Stored Procedures for User Requests</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Stored procedure name</b></td>
<td class=label width=68%><b>Action</b></td>
</tr>
<tr valign=top>
<td width=32%>PcSendTextReq</td>
<td width=68%>Inserts a record into tbReqDet. Also inserts a record into tbTxtReq.</td>
</tr>
<tr valign=top>
<td width=32%>PcSendVoiceReq</td>
<td width=68%>Inserts a record into tbReqDet. Also inserts a record into tbVoiceReq.</td>
</tr>
</table><br>
<p>
Similarly, the stored procedures in Table 5 are called when a technician responds to a user.</p>
<p class=label>
<b>Table 5. Stored Procedures for Technician Responses</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Stored procedure name</b></td>
<td class=label width=68%><b>Action</b></td>
</tr>
<tr valign=top>
<td width=32%>PcSendStdTextResp</td>
<td width=68%>Inserts a record into tbReqDet. </td>
</tr>
<tr valign=top>
<td width=32%>PcSendStdVoiceResp</td>
<td width=68%>Inserts a record into tbReqDet.</td>
</tr>
<tr valign=top>
<td width=32%>PcSendTextResp</td>
<td width=68%>Inserts a record into tbReqDet. Also inserts a record into tbTextResp.</td>
</tr>
<tr valign=top>
<td width=32%>PcSendVoiceResp</td>
<td width=68%>Inserts a record into tbReqDet. Also inserts a record into tbVoiceResp.</td>
</tr>
</table><br>
<h4><a name="hddbarch_status"></a>Status</h4>
<p>
Each request will have a status associated with it, and each request passes through different statuses in its resolution cycle. The request status can be any of the following:
<ol>
<li>
<b>Unassigned.</b> The request is registered in the HelpDesk system but has not been assigned to any technician.<br><br></li>
<li>
<b>Unclaimed.</b> The request has been assigned to a technician but the technician has not yet claimed that he will resolve it.<br><br></li>
<li>
<b>Claimed.</b> The assigned technician has claimed the request.<br><br></li>
<li>
<b>In progress.</b> The assigned technician has started working on the request.<br><br></li>
<li>
<b>Pending confirmation.</b> The request was resolved and a confirmation has been sent to the user. Resolution is pending a confirmation by the user.<br><br></li>
<li>
<b>Resolved.</b> Request is resolved by user confirmation or by timeout.</li>
</ol>
<p>
Table 6 provides a list of stored procedures that change the status of a request.</p>
<p class=label>
<b>Table 6. Store Procedures for Changing the Status of a Request</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Stored procedure name</b></td>
<td class=label width=33%><b>Status from</b></td>
<td class=label width=34%><b>Status to</b></td>
</tr>
<tr valign=top>
<td width=33%>PcClaim_Req</td>
<td width=33%>Unclaimed</td>
<td width=34%>Claimed</td>
</tr>
<tr valign=top>
<td width=33%>PcUnclaim_Req</td>
<td width=33%>Claimed</td>
<td width=34%>Unclaimed</td>
</tr>
<tr valign=top>
<td width=33%>PcCommence_Req</td>
<td width=33%>Claimed</td>
<td width=34%>In progress</td>
</tr>
<tr valign=top>
<td width=33%>PcSubmit_Req</td>
<td width=33%>In progress</td>
<td width=34%>Pending resolution</td>
</tr>
<tr valign=top>
<td width=33%>pcResConfirm</td>
<td width=33%>Pending</td>
<td width=34%>Resolved</td>
</tr>
<tr valign=top>
<td width=33%>pcResNotConfirm</td>
<td width=33%>Pending</td>
<td width=34%>In progress</td>
</tr>
</table><br>
<h4>Other</h4>
<p>
The other stored procedures are listed, in no particular order, in Table 7.</p>
<p class=label>
<b>Table 7. Additional HelpDesk Stored Procedures</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Stored procedure name</b></td>
<td class=label width=68%><b>Action</b></td>
</tr>
<tr valign=top>
<td width=32%>PcGet_ReqDet</td>
<td width=68%>Retrieves a request details record from tbReqDet, and the detail text from the appropriate table, given the PKId as parameter. Used to fill the RequestDetail collection of the Request object.</td>
</tr>
<tr valign=top>
<td width=32%>PcGet_Req</td>
<td width=68%>Retrieves a request record from tbReq table given the PKId as parameter. Used to fill the attributes of the Request object.</td>
</tr>
<tr valign=top>
<td width=32%>PcGet_Tech</td>
<td width=68%>Retrieves a technician record from tbTech given the PKId as parameter. Used to fill the attributes of the Technician object.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Locations</td>
<td width=68%>Retrieves the list of location records in tbLocation. Used to identify the location of a request.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Priority</td>
<td width=68%>Retrieves the list of priority records in tbPriority. Used to identify the priority of request.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_ReqDets</td>
<td width=68%>Retrieves the list of request detail records from tbReqDet, and the detail text from the appropriate table, that belong to a request. The PKId of the request is passed as a parameter. Used to show the request details chronologically.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Requests</td>
<td width=68%>Retrieves the list of request records from tbReq that belong to a technician. The PKId of the technician is passed as a parameter. Used to list all requests associated with a technician.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Skills</td>
<td width=68%>Retrieves the list of skill records from tbSkill. Used to identify the skill sets of a technician.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Status</td>
<td width=68%>Retrieves the list of skill records from tbStatusl. Used to identify the status of a request.</td>
</tr>
<tr valign=top>
<td width=32%>PcLvw_Techs</td>
<td width=68%>Retrieves the list of technician records from tbTech.</td>
</tr>
</table><br>
<h3>Automated Tasks in the Database</h3>
<p>
Unclaimed requests are continuously monitored and shuffled between different available technicians in order to optimize request resolution time. For an explanation of this automated task, see <a href="msdn_taskdist.htm">"Task Distribution in a Customer Service System."</a></p>
<h3>Creating the Database</h3>
<p>
The sample files for the HelpDesk database associated with this article contain batch files, which when run from a Windows command prompt, will automate this process. See readme.txt in the sample files for the full HelpDesk database setup instructions.</p>
<p>
You can also install the database from the setup program files available with the <a href="msdn_hddeploy.htm">Setup and Deployment</a> instructions for the HelpDesk sample.</p>
</BODY>
</HTML>

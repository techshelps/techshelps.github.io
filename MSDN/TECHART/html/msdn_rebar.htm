<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Rebar Control: Using a Coolbar in Your Application</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_rebar"></a></sup>The Rebar Control: Using a Coolbar in Your Application</h1>
<p>
Nancy Winnick Cluts<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
October 1996<br>
Updated June 24, 1997</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5141">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the files in the REBAR sample application for this technical article.</a></p>
<h3>Contents</h3>
<p>
<a href="#rebarwhat">What Is a Coolbar?</a><br>
<a href="#rebarcreating">Creating a Coolbar</a><br>
<a href="#rebarmessages">Messages and Notifications</a><br>
<a href="#rebarsummary">Summary</a></p>
<h2>Abstract</h2>
<p>
One of the controls created for Internet Explorer 3.0 is the Rebar control. It is most commonly known, however, as the <i>coolbar</i>. A coolbar contains child windows such as toolbars, combo boxes, and bitmaps, and manages the size and position of the child windows it contains. Once you create the child windows and assign them to the coolbar, the child windows are displayed in it. This article demonstrates how to create and use a coolbar. The sample that accompanies this article, creatively named "Rebar," was written using Microsoft® Visual C++® version 4.2, the Win32® Software Development Kit (SDK), and the ActiveX™ SDK for Internet Explorer 3.<i>x</i>. If you are going to use the coolbar in an application targeted to Internet Explorer 4.0, use the Internet Client SDK (INet SDK) instead of the ActiveX SDK.</p>
<h2><a name="rebarwhat"></a>What Is a Coolbar?</h2>
<p>
If you use Internet Explorer 3.0, you've seen the coolbar at the top of the screen, and probably thought that it was just a funky toolbar. Take a look:</p>
<p>
<img src="rebar1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Coolbar for Internet Explorer 3.0</b></p>
<p>
Figure 1 shows a coolbar containing several child windows: a toolbar, a list of Internet links, a drop-down combo box listing the URL history, and an animation control. Note that the toolbar control is transparent to the background bitmap of the coolbar. This works because the toolbar and the coolbar both speak the same “transparency” language. Currently, the toolbar is the only control that supports this type of transparency.</p>
<p>
In order to create a coolbar like the one in Figure 1, you need to:
<ol>
<li>
Create the coolbar.<br><br></li>
<li>
Create your child windows.<br><br></li>
<li>
Insert each child window into the coolbar.</li>
</ol>
<p>
Each area that contains a child window is referred to as a <i>band</i>. Coolbars can contain one or more bands. Each band can have any combination of the following: a gripper bar, a bitmap, a text label, and a child window. However, each band cannot contain more than one of these items. For example, you cannot have two grippers or two child windows within one band. </p>
<p>
All bands, except those that have the <b>RBBS_FIXEDSIZE</b> style, can be resized via the gripper bar. You can also single-click the gripper bar to minimize or maximize the band. The coolbar manages the size and position of the child window assigned to that band.</p>
<h2><a name="rebarcreating"></a>Creating a Coolbar</h2>
<p>
Creating a coolbar is similar to creating any other type of common control: You initialize the common control library and use the <b>CreateWindowEx</b> function. </p>
<h3>Using InitCommonControlsEx</h3>
<p>
The first thing your application must do is register the coolbar window class via the <b>InitCommonControlsEx</b> function. This function is different from <b>InitCommonControls</b> (which took no parameters) in that it is passed a structure, <b>INITCOMMONCONTROLSEX</b>, that describes what you want initialized. You need to fill in the <b>dwSize</b> member of this structure to successfully initialize the common control classes. This member allows the system to determine which version of the common controls you are using. <b>INITCOMMONCONTROLSEX</b> also contains the <b>dwICC</b> member, which specifies the common control you would like initialized. This member can be any combination of the following:</p>
<p class=label>
<b>Table 1. Common Control Class Constants</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Value </b></td>
<td class=label width=52%><b>Meaning </b></td>
</tr>
<tr valign=top>
<td width=48%>ICC_ANIMATE_CLASS </td>
<td width=52%>Load animate control class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_BAR_CLASSES </td>
<td width=52%>Load toolbar, status bar, track bar, and tooltips control classes. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_COOL_CLASSES </td>
<td width=52%>Load the coolbar class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_DATE_CLASSES </td>
<td width=52%>Load date and time picker control class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_HOTKEY_CLASS </td>
<td width=52%>Load hot-key control class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_LISTVIEW_CLASSES </td>
<td width=52%>Load list view and header control classes. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_PROGRESS_CLASS </td>
<td width=52%>Load progress bar control class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_TAB_CLASSES </td>
<td width=52%>Load tab and tooltips control classes. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_TREEVIEW_CLASSES </td>
<td width=52%>Load tree view and tooltips control classes. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_UPDOWN_CLASS </td>
<td width=52%>Load up-down control class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_USEREX_CLASSES </td>
<td width=52%>Load <b>ComboBoxEx</b> class. </td>
</tr>
<tr valign=top>
<td width=48%>ICC_WIN95_CLASSES </td>
<td width=52%>Load the animate control, header, hot-key, list view, progress bar, status bar, tab, tooltips, toolbar, track bar, tree view, and up-down control classes. </td>
</tr>
</table><br>
<p>
The code to initialize the common control class for a coolbar is as follows:</p>
<pre><code>INITCOMMONCONTROLSEX icex;

icex.dwSize = sizeof(INITCOMMONCONTROLSEX);

// Load the coolbar. 
icex.dwICC = ICC_COOL_CLASSES;&nbsp;&nbsp; 

InitCommonControlsEx(&amp;icex);
</code></pre>
<h3>Setting Up the Coolbar</h3>
<p>
Once the class has been registered, the application calls <b>CreateWindowEx</b>, specifying <b>REBARCLASSNAME</b> as the class name to create the coolbar (remember, the “real” name of the coolbar is Rebar). If you are going to add an image list to your coolbar, your application must send the RB_SETBARINFO message. This message passes a pointer to a structure, <b>REBARINFO</b>, in its <b>lParam</b><i>.</i> The structure information below is based on information in the ActiveX SDK: </p>
<pre><code>typedef struct tagREBARINFO{
 &nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbSize;
 &nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fMask;
 &nbsp; HIMAGELIST&nbsp; himl;
} REBARINFO, FAR *LPREBARINFO;
</code></pre>
<p>
where:
<ul type=disc>
<li>
<b>CbSize</b> — The size of this structure, in bytes. Your application must fill this member before sending any messages that use a pointer to this structure as a parameter. Use sizeof(REBARINFO) to fill in this member.<br><br></li>
<li>
<b>fMask</b> — Flag value that describes the structure members that are valid and the characteristics of the coolbar. Currently, there is only one valid mask value, RBIM_IMAGELIST, which specifies that the himl member is valid in the <b>REBARINFO</b> structure.<br><br></li>
<li>
<b>himl</b> — Handle to an image list. The coolbar will use the specified image list to obtain images. If you create a coolbar that will contain static images, you can use the image list functions to manage those images.</li>
</ul>
<h4>Coolbar styles</h4>
<p>
Special styles are associated with coolbar windows. These are listed in Table 2. Specify these styles in the same way that you specify other window styles in your call to <b>CreateWindowEx</b>.</p>
<p class=label>
<b>Table 2. The REBARINFO Styles</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Value</b></td>
<td class=label width=72%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=28%><b>RBS_TOOLTIPS</b></td>
<td width=72%>Tooltips are supported. This style allows you to use the same tooltip in all of the inner bands. There is no hot region in the coolbar that will otherwise cause the tooltip created by this style bit to be shown.</td>
</tr>
<tr valign=top>
<td width=28%><b>RBS_VARHEIGHT</b></td>
<td width=72%>The coolbar displays bands at the minimum required height when possible. Without this style, the coolbar displays all bands at the same height. The control uses the height of the tallest visible band to determine the height of other bands.</td>
</tr>
<tr valign=top>
<td width=28%><b>RBS_BANDBORDERS </b></td>
<td width=72%>A border is placed around each band in the coolbar.</td>
</tr>
<tr valign=top>
<td width=28%><b>RBS_FIXEDORDER</b></td>
<td width=72%>This style prevents the user from reordering the coolbar bands.</td>
</tr>
</table><br>
<p>
Like the <b>INITCOMMONCONTROLSEX </b>structure, the <b>REBARINFO</b> structure also contains a sizing member, <b>cbSize</b>, that your application must fill in before sending a message that uses the structure. The code below does the following:
<ol>
<li>
Creates an image list to associate with the coolbar and adds an image to it.<br><br></li>
<li>
Creates a coolbar that supports variable band height and has a background bitmap associated with it. <br><br></li>
<li>
Associates the image list with the coolbar.<pre><code>// Create the image list.
hIml = ImageList_Create (
 &nbsp; MIN_COMBOCX, // width
 &nbsp; MIN_COMBOCY, // height 
 &nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // creation flags
 &nbsp; NUM_LINKS + 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // number of images
 &nbsp; 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // amount this list can grow

// Load the bitmap and add it to the image list.
hBmp = LoadBitmap (hInst, MAKEINTRESOURCE (IDB_SMEAR));
idxFirstImage = ImageList_Add (hIml,&nbsp; // handle to image list
 &nbsp; hBmp,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // handle of bitmap to add
 &nbsp; NULL);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // handle of bitmap mask

// Create the COOLBAR control.
hWndRebar = CreateWindowEx( 
 &nbsp; 0L,
 &nbsp; REBARCLASSNAME,
 &nbsp; NULL,
 &nbsp; WS_VISIBLE | WS_BORDER | WS_CHILD | WS_CLIPCHILDREN |
 &nbsp;&nbsp;&nbsp;&nbsp; WS_CLIPSIBLINGS | CCS_NODIVIDER | CCS_NOPARENTALIGN |
 &nbsp;&nbsp;&nbsp;&nbsp; RBS_VARHEIGHT | RBS_BANDBORDERS,
 &nbsp;&nbsp;&nbsp;&nbsp; 0, 0, 400, 275,
 &nbsp; hWndParent,
 &nbsp; (HMENU)ID_REBAR,
 &nbsp; hInst,
 &nbsp; NULL );

if (!hWndRebar)
 &nbsp; return 0;

// Set the image list for the coolbar.
rbi.cbSize = sizeof(rbi);
rbi.fMask = RBIM_IMAGELIST;
rbi.himl = hIml;
SendMessage(hWndRebar, RB_SETBARINFO, 0L, (LPARAM)&amp;rbi);
</code></pre>
</li>
</ol>
<h3>Using an Extended Combo Box </h3>
<p>
Now that the coolbar has been created, we’d like to add some bands to it. Within each band, there will be one child control. In our example, we have two bands: one containing an extended drop-down combo box and the other containing a transparent toolbar. Let’s first talk about the extended combo box that I decided to add. </p>
<p>
Combo boxes have been extended to support images and indentation. In the Rebar sample, I include an image for each item in my drop-down list of links to the Internet. You create an extended combo box by specifying “ComboBoxEx32" (in versions of Internet Explorer later than 3.<i>x</i>, use WC_COMBOEX) as the class in your call to <b>CreateWindowEx</b>. To use an image list, send the CBEM_SETIMAGELIST message with the handle to the image list after creating the combo box. Inserting items into the combo box is easy; you simply send the CBEM_INSERTITEM message with a pointer to a <b>COMBOBOXEXITEM</b>. This structure contains a field, <b>fMask</b>, that specifies which items in the structure are valid. Valid masks specify characteristics such as indented (<b>CBEIF_INDENT</b>), textual (<b>CBEIF_TEXT</b>), image (<b>CBEIF_IMAGE</b>), and extra data (<b>CBEIF_LPARAM</b>). Setting the <b>iItem</b> member of this structure to –1 indicates that you want the item inserted at the end of the list.</p>
<pre><code>// Global array of cool links.
COOLLINKS rgLinks[] = 
{
 &nbsp; {TEXT("Microsoft"),TEXT("http://www.microsoft.com/default.htm"), IDB_MSFT},
 &nbsp; {TEXT("Microsoft Developer Network Online"), TEXT("http://www.microsoft.com/msdn/default.htm"), IDB_FDO},
 &nbsp; {TEXT("Site Builder"), TEXT("http://www.microsoft.com/workshop/default.htm"), IDB_SB},
 &nbsp; {TEXT("Win32 Development"),TEXT("http://www.microsoft.com/win32dev/default.htm"), IDB_WIN32},
 &nbsp; {TEXT("Interactive Media"), TEXT("http://www.microsoft.com/imedia/default.htm"), IDB_IM},
 &nbsp; {TEXT("Microsoft Developer Network"),TEXT("http://www.microsoft.com/msdn/default.htm"), IDB_MSDN},
 &nbsp; {TEXT("Internet Explorer"),TEXT("http://www.microsoft.com/ie30/default.htm"), IDB_IE}
};

int idx, idxImage;
REBARBANDINFO rbBand;
COMBOBOXEXITEM cbI;
HBITMAP&nbsp; hBmp;

// Create the combo box.
hWndCombo = CreateWindowEx ( 
 &nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // extended styles
 &nbsp; "ComboBoxEx32",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // extended combo box – will 
 &nbsp; TEXT(""),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // default text
 &nbsp; WS_VISIBLE | WS_CHILD | WS_TABSTOP |
 &nbsp;&nbsp;&nbsp;&nbsp; WS_VSCROLL | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | CCS_NORESIZE |
 &nbsp;&nbsp;&nbsp;&nbsp; CBS_AUTOHSCROLL | CBS_DROPDOWNLIST,
 &nbsp; 0,0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // x, y
 &nbsp; MIN_COMBOCX,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // width
 &nbsp; MIN_COMBOCY * NUM_LINKS,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // height
 &nbsp; hWndParent,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // parent window
 &nbsp; (HMENU)ID_COMBO,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ID
 &nbsp; hInst,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // current instance
 &nbsp; NULL );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // no class data

if (hWndCombo == NULL)
 &nbsp; return 0;

// Set the image list for the combo box.
SendMessage( hWndCombo, CBEM_SETIMAGELIST, 0L, (LPARAM)hIml);

// Add strings to the combo box.&nbsp;&nbsp;&nbsp; 
for (idx=0; idx &lt; NUM_LINKS; idx++)
{
 &nbsp; // Load the bitmap and add it to the image list.
 &nbsp; hBmp = LoadBitmap (hInst, MAKEINTRESOURCE (rgLinks[idx].iBmp));
 &nbsp; idxImage = ImageList_Add (hIml,&nbsp; // handle to image list
 &nbsp;&nbsp;&nbsp;&nbsp; hBmp,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // handle of bitmap to add
 &nbsp;&nbsp;&nbsp;&nbsp; NULL);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // handle of bitmap mask

 &nbsp; rgLinks[idx].idx = idxImage;

 &nbsp; // Each item has text, an lParam with extra data, and an image.
 &nbsp; cbI.mask = CBEIF_TEXT | CBEIF_LPARAM | CBEIF_IMAGE;&nbsp;&nbsp;&nbsp; 
 &nbsp; cbI.pszText = rgLinks[idx].szName;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Name of the link.
 &nbsp; cbI.cchTextMax = sizeof(rgLinks[idx].szName);&nbsp;&nbsp;&nbsp; 
 &nbsp; cbI.lParam = (LPARAM)rgLinks[idx].szURL;&nbsp;&nbsp; // Pass the URL as extra data.
 &nbsp; cbI.iItem = -1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the item to the end of the list.
 &nbsp; cbI.iImage = idxImage;&nbsp;&nbsp; // Image to display.

 &nbsp; // Add the item to the combo box drop-down list.
 &nbsp; SendMessage(hWndCombo, CBEM_INSERTITEM, 0L,(LPARAM)&amp;cbI);
}
</code></pre>
<h3>Adding Bands to the Coolbar</h3>
<p>
Once you create the child windows, your application must fill in a structure called the <b>REBARBANDINFO</b> that describes the characteristics of each band you want to insert. As before, the structure information below is based on information in the ActiveX SDK.</p>
<pre><code>typedef struct tagREBARBANDINFO
{
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbSize;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fMask;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fStyle;
 &nbsp;&nbsp; COLORREF&nbsp;&nbsp;&nbsp; clrFore;
 &nbsp;&nbsp; COLORREF&nbsp;&nbsp;&nbsp; clrBack;
 &nbsp;&nbsp; LPSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpText;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cch;
 &nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iImage;
 &nbsp;&nbsp; HWND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwndChild;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cxMinChild;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cyMinChild;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cx;
 &nbsp;&nbsp; HBITMAP&nbsp;&nbsp;&nbsp;&nbsp; hbmBack;
 &nbsp;&nbsp; UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wID;
}&nbsp;&nbsp; REBARBANDINFO, FAR *LPREBARBANDINFO;
</code></pre>
<p>
where:
<ul type=disc>
<li>
<b>cbSize</b> — The size of this structure, in bytes. Your application must fill in this member before sending any messages that use a pointer to this structure as a parameter. <br><br></li>
<li>
<b>fMask</b> — Flags that indicate which members of this structure are valid or must be filled. This value can be a combination of the following: <table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td colspan=2 width=35%><b>Value</b></td>
<td colspan=2 width=65%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_STYLE </b></td>
<td colspan=2 width=51%>The <b>fStylemember</b> is valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_COLORS </b></td>
<td colspan=2 width=51%>The <b>clrFore</b> and <b>clrBack</b> members are valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_TEXT </b></td>
<td colspan=2 width=51%>The <b>lpText</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_IMAGE </b></td>
<td colspan=2 width=51%>The <b>iImage</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_CHILD </b></td>
<td colspan=2 width=51%>The <b>hwndChild</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_CHILDSIZE </b></td>
<td colspan=2 width=51%>The <b>cxMinChild</b> and <b>cyMinChild</b> members are valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_SIZE </b></td>
<td colspan=2 width=51%>The <b>cx</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_BACKGROUND</b></td>
<td colspan=2 width=51%>The <b>hbmBack</b> member is valid.</td>
</tr>
<tr valign=top>
<td width=29%><b>RBBIM_ID</b></td>
<td colspan=2 width=51%>The <b>wID</b> member is valid.</td>
</tr>
</table><br>
</li>
<li>
<b>fStyle</b> — Flags that specify the band style. This value can be a combination of the following: <table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>Value</b></td>
<td width=67%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_BREAK </b></td>
<td width=67%>The band will be on a new line. Use this style if you plan to have more than one line of controls in your coolbar. This style is used by Internet Explorer 3.0.</td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_FIXEDSIZE </b></td>
<td width=67%>The band can't be sized. If you use this style, the sizing grip will not be displayed on the band. </td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_CHILDEDGE </b></td>
<td width=67%>An edge will appear around the top and bottom of the child window. </td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_HIDDEN </b></td>
<td width=67%>The band will not be visible. </td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_NOVERT </b></td>
<td width=67%>The band will not be displayed when the Coolbar control is vertical. </td>
</tr>
<tr valign=top>
<td width=33%><b>RBBS_FIXEDBMP</b></td>
<td width=67%>The bitmap will not move when the band is resized.</td>
</tr>
</table><br>
</li>
<li>
<b>clrFore</b> — The band's foreground color, used to draw text. <br><br></li>
<li>
<b>clrBack</b> — The band's background color. <br><br></li>
<li>
<b>lpText</b> — Address of a buffer that contains the display text for the band. If band information is being requested from the control, this member must be initialized to the address of the buffer that will receive the text. <br><br></li>
<li>
<b>cch</b> — Size of the buffer at <b>lpText</b>, in bytes. If information is not being requested from the control, this member is ignored. <br><br></li>
<li>
<b>iImage</b> — Zero-based index of the image that should be displayed in the band, if any. The image list is set using the <b>RB_SETBARINFO</b> message. <br><br></li>
<li>
<b>hwndChild</b> — Handle of the child window contained in the band, if any. <br><br></li>
<li>
<b>cxMinChild</b> — The minimum horizontal size of the child window, in pixels. The band cannot be sized smaller than this value. <br><br></li>
<li>
<b>cyMinChild</b> — The minimum vertical size of the child window, in pixels. The band cannot be sized smaller than this value. <br><br></li>
<li>
<b>cx</b> — The horizontal size of the band, in pixels. <br><br></li>
<li>
<b>hbmBack</b> — The handle to the background bitmap.<br><br></li>
<li>
<b>wID</b> — The ID of the band.</li>
</ul>
<p>
After filling in the <b>REBARBANDINFO </b>structure, an application sends the RB_INSERTBAND message to add the band to the coolbar, specifying the pointer to the <b>REBARBANDINFO</b> structure in the <b>lParam</b> and the zero-based index where the band is to be inserted in the <b>wParam</b>. If you want to add the band to the end of the bar, specify –1 in the <b>wParam</b>. If you have already added a band and want to change the characteristics of the band later (for example, you would like to change the text), use the RB_SETBANDINFO message. Similarly, if you want to retrieve information about a band, use the RB_GETBANDINFO message.</p>
<p>
The code below sets the information in the <b>REBARBANDINFO</b> structure and inserts the window into the band via the RB_INSERTBAND message. This band contains an image, <b>idxFirstImage</b>, specified by the <b>iImage</b> member.</p>
<pre><code>// Initialize REBARBANDINFO.
rbBand.cbSize = sizeof(REBARBANDINFO);
rbBand.fMask = RBBIM_COLORS |&nbsp;&nbsp;&nbsp;&nbsp; // clrFore and clrBack are valid
 &nbsp; RBBIM_CHILD |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hwndChild is valid
 &nbsp; RBBIM_CHILDSIZE |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cxMinChild and cyMinChild are valid
 &nbsp; RBBIM_STYLE |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // fStyle is valid
 &nbsp; RBBIM_ID |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // wID is valid
 &nbsp; RBBIM_TEXT |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // lpText is valid
 &nbsp; RBBIM_IMAGE |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // iImage is valid
 &nbsp; RBBIM_BACKGROUND;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hbmBack is valid
rbBand.clrFore = GetSysColor(COLOR_BTNTEXT);
rbBand.clrBack = GetSysColor(COLOR_BTNFACE);
rbBand.fStyle = RBBS_NOVERT |&nbsp;&nbsp;&nbsp;&nbsp; // Do not display in vertical orientation.
 &nbsp; RBBS_CHILDEDGE |
 &nbsp; RBBS_FIXEDBMP;
rbBand.hbmBack = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BACK));
rbBand.lpText = TEXT("Cool sites:");
rbBand.hwndChild = hWndCombo;
rbBand.cxMinChild = MIN_COMBOCX;
rbBand.cyMinChild = MIN_CY;
rbBand.iImage = idxFirstImage;

// Add the combo box band to the end.
SendMessage(hWndRebar, RB_INSERTBAND, (WPARAM)-1, (LPARAM)&amp;rbBand);
</code></pre>
<p>
I added the toolbar next to the coolbar. Being artistically challenged, I simply took the standard file buttons and resized them larger for the toolbar. The toolbar supports tooltips and appears “flat” (rather than having raised buttons). An important style to include is the <b>CCS_NORESIZE </b>style, which prevents the toolbar from being resized to the default width and height during creation. Instead, the toolbar uses the width and height specified in the call to <b>CreateWindowEx</b>. If you don’t use this style, the toolbar will be automatically resized to the width of the client window and possibly overdraw your other bands. </p>
<pre><code>HWND CreateTheToolBar (HWND hWndParent)
{
 &nbsp; REBARBANDINFO rbBand;

 &nbsp; hWndToolBar = CreateToolbarEx(hWndParent,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WS_CHILD | TBSTYLE_FLAT | TBSTYLE_TOOLTIPS | WS_CLIPCHILDREN |
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WS_CLIPSIBLINGS | CCS_NODIVIDER | CCS_NORESIZE | WS_VISIBLE,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ID_TOOLBAR, 
 &nbsp;&nbsp;&nbsp;&nbsp; NUM_TBBITMAPS, 
 &nbsp;&nbsp;&nbsp;&nbsp; (HINSTANCE)hInst, 
 &nbsp;&nbsp;&nbsp;&nbsp; IDB_TOOLBAR, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPCTBBUTTON)&amp;tbButtons,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NUM_TBBUTTONS,
 &nbsp;&nbsp;&nbsp;&nbsp; BMP_CX,BMP_CY,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // width &amp; height of buttons
 &nbsp;&nbsp;&nbsp;&nbsp; BMP_CX,BMP_CY,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // width &amp; height of bitmaps
 &nbsp;&nbsp;&nbsp;&nbsp; sizeof(TBBUTTON));

 &nbsp; if (hWndToolBar == NULL )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; MessageBox (NULL, TEXT("Toolbar not created!"), NULL, MB_OK );
 &nbsp;&nbsp;&nbsp;&nbsp; return (HWND)NULL;
 &nbsp; }

 &nbsp; // Initialize REBARBANDINFO for all coolbar bands.
 &nbsp; rbBand.cbSize = sizeof(REBARBANDINFO);
 &nbsp; rbBand.fMask = RBBIM_COLORS |&nbsp; // clrFore and clrBack are valid
 &nbsp;&nbsp;&nbsp;&nbsp; RBBIM_CHILD |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hwndChild is valid
 &nbsp;&nbsp;&nbsp;&nbsp; RBBIM_CHILDSIZE |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cxMinChild and cyMinChild are valid
 &nbsp;&nbsp;&nbsp;&nbsp; RBBIM_STYLE |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // fStyle is valid
 &nbsp;&nbsp;&nbsp;&nbsp; RBBIM_ID |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // wID is valid
 &nbsp;&nbsp;&nbsp;&nbsp; RBBIM_BACKGROUND;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hbmBack is valid
 &nbsp; rbBand.clrFore = GetSysColor(COLOR_BTNTEXT);
 &nbsp; rbBand.clrBack = GetSysColor(COLOR_BTNFACE);
 &nbsp; rbBand.fStyle = RBBS_NOVERT |&nbsp; // Do not display in vertical orientation.
 &nbsp;&nbsp;&nbsp;&nbsp; RBBS_CHILDEDGE |
 &nbsp;&nbsp;&nbsp;&nbsp; RBBS_FIXEDBMP;
 &nbsp; rbBand.hbmBack = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BACK));
 &nbsp; rbBand.hwndChild = hWndToolBar;
 &nbsp; rbBand.wID = ID_TOOLBAR;
 &nbsp; rbBand.cxMinChild = MIN_TBCX;
 &nbsp; rbBand.cyMinChild = MIN_CY;

 &nbsp; // Insert band into coolbar.
 &nbsp; SendMessage(hWndRebar, RB_INSERTBAND, (UINT) -1, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LPARAM)(LPREBARBANDINFO)&amp;rbBand);

 &nbsp; return (hWndToolBar);
}
</code></pre>
<p>
To support tooltips in your toolbar, remember to provide the tooltip text when the text is needed. This comes in the form of a WM_NOTIFY message and TTN_NEEDTEXT notification:</p>
<pre><code>case WM_NOTIFY:
 &nbsp; switch (((LPNMHDR)lParam)-&gt;code) 
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; case TTN_NEEDTEXT:
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPTOOLTIPTEXT lpToolTipText;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char szBuf[MAX_PATH];

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display the tooltip text.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpToolTipText = (LPTOOLTIPTEXT)lParam;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LoadString (hInst, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpToolTipText-&gt;hdr.idFrom,&nbsp;&nbsp; // string ID == cmd ID
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szBuf,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof (szBuf));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpToolTipText-&gt;lpszText = szBuf;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
 &nbsp; break;
</code></pre>
<p>
If you build and run the sample, you will see my coolbar replete with background bitmap, combo box images, and toolbar.</p>
<p>
<img src="rebar2.gif" border=0></p>
<p class=label>
<b>Figure 2. The Rebar sample main window</b></p>
<h3>Getting Information About a Band</h3>
<p>
An item in the <b>Options</b> menu in the Rebar sample gives you the ability to get information about the first band in the coolbar. This information is retrieved via the RB_GETBANDCOUNT, RB_GETROWCOUNT, and RB_GETROWHEIGHT messages and is displayed in a dialog box.</p>
<pre><code>BOOL APIENTRY BarInfo(
 &nbsp; HWND hDlg,
 &nbsp; UINT message,
 &nbsp; UINT wParam,
 &nbsp; LONG lParam)
{
 &nbsp; static UINT uHeight, uRowCount, uBandCount;
 &nbsp; static REBARINFO rbi;

 &nbsp; switch (message)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; case WM_INITDIALOG:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the number of bands.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uBandCount = SendMessage(hWndRebar, RB_GETBANDCOUNT, 0, 0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemInt(hDlg, IDC_NUMBANDS, uBandCount, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the number of rows.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uRowCount = SendMessage(hWndRebar, RB_GETROWCOUNT, 0, 0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemInt(hDlg, IDC_NUMROWS, uRowCount, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the row height for the first row.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uHeight = SendMessage(hWndRebar, RB_GETROWHEIGHT, 0, 0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDlgItemInt(hDlg, IDC_ROWHEIGHT, uHeight, FALSE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (TRUE);

 &nbsp;&nbsp;&nbsp;&nbsp; case WM_COMMAND:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (LOWORD(wParam) == IDOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EndDialog(hDlg, TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (TRUE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp; }
 &nbsp; return (FALSE);&nbsp;&nbsp; 
}
</code></pre>
<h3>Cleaning Up</h3>
<p>
Once your application is ready to exit, you must be sure to destroy your coolbar along with any of the child windows that you may have created and inserted into the coolbar. You also must destroy any image lists that you may have created. I know that this probably sounds rudimentary to many of you, but I’m a mom, so I am accustomed to reminding others to clean up after themselves.</p>
<pre><code>case WM_DESTROY:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; if (hWndRebar) 
 &nbsp;&nbsp;&nbsp;&nbsp; DestroyWindow(hWndRebar);

 &nbsp; if (hWndToolBar)
 &nbsp;&nbsp;&nbsp;&nbsp; DestroyWindow(hWndToolBar);

 &nbsp; if (hWndCombo)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; ImageList_Destroy(hIml);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; DestroyWindow(hWndCombo);
 &nbsp; }

 &nbsp; PostQuitMessage(0);
 &nbsp; break;
</code></pre>
<h3>Linking to the Internet</h3>
<p>
If you build and run the Rebar sample I've provided, you will notice that the items in the combo box are links to the World Wide Web. If you click one of the items in the list, your Internet browser (we hope that it will be Internet Explorer) will be invoked with the URL of the link chosen. I handle this in the window procedure for the combo box in the event of a CBN_SELCHANGE notification—it’s simply a matter of calling <b>ShellExecute</b>. The system will look for the browser you have associated with .HTM files and run that browser.</p>
<pre><code>LRESULT CALLBACK ComboWndProc( HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
 &nbsp; int iSelect;

 &nbsp; if ((uMessage == WM_COMMAND) &amp;&amp; (HIWORD(wParam)==CBN_SELCHANGE))
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Get the currently selected item.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iSelect = SendMessage(hWndCombo, CB_GETCURSEL, 0, 0);

 &nbsp;&nbsp;&nbsp;&nbsp; ShellExecute( NULL, TEXT("open"), rgLinks[iSelect].szURL,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL, NULL, SW_SHOWNORMAL );
 &nbsp; }

 &nbsp; return (CallWindowProc(lpfnDefCombo, hWnd, uMessage, wParam, lParam));
}
</code></pre>
<h2><a name="rebarmessages"></a>Messages and Notifications</h2>
<p>
This section lists the messages and notifications supported by coolbar controls, based on information in the ActiveX SDK for Internet Explorer 3.<i>x</i>. </p>
<h3>Coolbar Control Messages</h3>
<p>
Table 3 lists the messages that can be sent to coolbar controls.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Whenever you pass the address of a <b>REBARINFO</b> or <b>REBARBANDINFO</b> structure in one of the messages in the table above, you must first set the <b>cbSize</b> member of this structure using the<b> sizeof</b> function; otherwise, the call will fail.</p>
<p class=label>
<b>Table 3. Coolbar Control Messages</b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Message</b></td>
<td class=label width=23%><b>Description</b></td>
<td class=label width=17%><b>wParam</b></td>
<td class=label width=17%><b>lParam</b></td>
<td class=label width=18%><b>Returns</b></td>
</tr>
<tr valign=top>
<td width=25%>RB_DELETEBAND</td>
<td width=23%>Removes a band from the coolbar.</td>
<td width=17%>UINT – the zero-based index of the band to delete</td>
<td width=17%>0 (not used)</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_GETBANDCOUNT</td>
<td width=23%>Returns the number of bands in the coolbar.</td>
<td width=17%>0 (not used)</td>
<td width=17%>0 (not used)</td>
<td width=18%>UINT – Number of bands in the coolbar</td>
</tr>
<tr valign=top>
<td width=25%>RB_GETBANDINFO</td>
<td width=23%>Retrieves information on the specified band.</td>
<td width=17%>UINT – the band to check</td>
<td width=17%>LPREBARBANDINFO – pointer to a structure containing band information</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_GETBARINFO</td>
<td width=23%>Retrieves information about the coolbar control and the image list that it may use.</td>
<td width=17%>0 (not used)</td>
<td width=17%>LPREBARINFO – pointer to a structure containing coolbar information</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_GETROWCOUNT</td>
<td width=23%>Retrieves the number of rows in the coolbar.</td>
<td width=17%>0 (not used)</td>
<td width=17%>0 (not used)</td>
<td width=18%>UINT – the number of rows</td>
</tr>
<tr valign=top>
<td width=25%>RB_GETROWHEIGHT</td>
<td width=23%>Returns the height of the specified row in the coolbar.</td>
<td width=17%>UINT – the zero-based row to check</td>
<td width=17%>0 (not used)</td>
<td width=18%>UINT – the height, in pixels, of the row</td>
</tr>
<tr valign=top>
<td width=25%>RB_INSERTBAND</td>
<td width=23%>Inserts a band into a coolbar.</td>
<td width=17%>UINT – the zero-based index of the place to insert the band; –1 signifies that the band will be added to the end</td>
<td width=17%>LPREBARINFO - pointer to a structure containing information about the band</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_SETBANDINFO</td>
<td width=23%>Sets the information about an existing band in the coolbar.</td>
<td width=17%>UINT – the zero-based index to the band</td>
<td width=17%>LPREBARBANDIFO – pointer to a structure containing new information about the band</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_SETBARINFO</td>
<td width=23%>Sets information about the coolbar.</td>
<td width=17%>0</td>
<td width=17%>LPREBARINFO – pointer to a structure containing new coolbar information</td>
<td width=18%>0 if successful; non-zero otherwise</td>
</tr>
<tr valign=top>
<td width=25%>RB_SETPARENT</td>
<td width=23%>Sets the window that will receive coolbar notification messages. Note that this message does not actually set the parent of the coolbar control. When you call <b>GetParent</b>, you will still get the handle to the original parent window that was specified when the coolbar control was created.</td>
<td width=17%>HWND – handle to the new parent window</td>
<td width=17%>0</td>
<td width=18%>HWND – handle to the previous parent window; NULL if there is no previous parent </td>
</tr>
</table><br>
<h3>Coolbar Notification Messages </h3>
<p>
Coolbars have one notification message that is unique to them: RBN_HEIGHTCHANGE. This notification is sent to the coolbar when the height of the coolbar has changed (in the form of a WM_NOTIFY message). The <b>lParam</b> associated with this notification contains the address of an <b>NMHDR </b>structure.</p>
<h2><a name="rebarsummary"></a>Summary</h2>
<p>
Now you, too, can have that funky-looking bar at the top of your application! Just follow my instructions and you shouldn’t have any problems. Go ahead: Cut and paste the code, if you want. That’s why I write this stuff.</p>
<p>
<i>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? Drop me a line at </i>nancycl@microsoft.com<i> and let me know.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 75: Invoking Menu Items in Other Applications with SendMessage</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn75"></a></sup>Tip 75: Invoking Menu Items in Other Applications with SendMessage</h1>
<p>
May 8, 1995</p>
<h2>Abstract</h2>
<p>
Within a Visual Basic® application, you can execute a menu item in another Windows®-based program. This article explains how to use several Windows application programming interface (API) functions to execute menu commands.</p>
<h2>Executing Menu Commands</h2>
<p>
In some situations, you may need to actuate an application, such as Notepad, and execute one or more of that application's menu commands. The Windows® application programming interface (API) provides several functions that enable you to perform this type of operation in Visual Basic®.
<ul type=disc>
<li>
The Windows API <b>FindWindow</b> function can be used to determine the handle of the application that contains the menu item you want to execute. <b>FindWindow</b> returns an integer value containing the application's handle.<br><br></li>
<li>
You also need to retrieve the handle associated with the target window's menu. The <b>GetMenu</b> function will return the handle as an integer value.<br><br></li>
<li>
Once you have the target window's menu handle, you need to determine the entry's position in the menu and retrieve the handle of the pop-up menu. In the example program below, we want to retrieve the handle of the File menu selection. Therefore, we would call the <b>GetSubMenu</b> function with zero as the entry's position. The first entry in every pop-up menu always begins with entry number zero.<br><br></li>
<li>
Next, we want to retrieve the ID number of the specific menu entry we want to execute. We retrieve this ID number by calling the <b>GetMenuItemID</b> function with the entry's position specified as one (the position of the Open menu selection in the pop-up menu).<br><br></li>
<li>
The final step is to make the target application the active application and to issue the <b>SendMessage</b> function, which in turn sends a WM_COMMAND message to the target window. The WM_COMMAND message is set to the target application's window to execute the File/Open command.</li>
</ul>
<h2>Example Program</h2>
<p>
The following example program executes another application's menu commands. This program assumes that the Windows Notepad application program is already running in memory. This program uses <b>SendMessage</b> to execute the File/Open menu selection in Notepad.</p>
<p>
When you execute the program, click the <b>Command Button</b>. After a second or two, you will see that Notepad has been activated and that its Open File dialog box is displayed on the screen.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement should be typed as a single line of code):<pre><code>Private Declare Function FindWindow Lib "User" (ByVal lpClassName As Any, ByVal 
 &nbsp; lpWindowName As Any) As Integer
Private Declare Function GetMenu Lib "User" (ByVal hWnd As Integer) As Integer
Private Declare Function GetMenuItemID Lib "User" (ByVal hMenu As Integer, ByVal 
 &nbsp; nPos As Integer) As Integer
Private Declare Function GetSubMenu Lib "User" (ByVal hMenu As Integer, ByVal 
 &nbsp; nPos As Integer) As Integer
Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal 
 &nbsp; wMsg As Integer, ByVal wParam As Integer, lParam As Any) As Long
Const WM_COMMAND = &amp;H111
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim hWnd As Integer
 &nbsp;&nbsp; Dim hMainMenu As Integer
 &nbsp;&nbsp; Dim hMenu As Integer
 &nbsp;&nbsp; Dim MenuID As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; hWnd = FindWindow("NotePad", "Untitled - NotePad")
 &nbsp;&nbsp; If hWnd = 0 Then Exit Sub
 &nbsp;&nbsp; 
 &nbsp;&nbsp; hMainMenu = GetMenu(hWnd)
 &nbsp;&nbsp; hMenu = GetSubMenu(hMainMenu, 0)
 &nbsp;&nbsp; MenuID = GetMenuItemID(hMenu, 1)
 &nbsp;&nbsp; AppActivate "Untitled - NotePad"
 &nbsp;&nbsp; X&amp; = SendMessage(hWnd, WM_COMMAND, MenuID, 0&amp;)
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
</ol>
<h2>Additional References</h2>
<p>
Knowledge Base Q71281. "How to Implement a Bitmap Within a Visual Basic Menu." (MSDN Library, Knowledge Base)</p>
<p>
Knowledge Base Q113475. "How to Get a Window Handle Without Specifying an Exact Title." (MSDN Library, Knowledge Base)</p>
<p>
"Adding Pop-Up Menus to Your Programs." (MSDN Library, Periodicals)</p>
</BODY>
</HTML>

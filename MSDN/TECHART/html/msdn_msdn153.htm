<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 153: Searching PATH for Specific Files</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn153"></a></sup>Tip 153: Searching PATH for Specific Files</h1>
<p>
September 5, 1995</p>
<h2>Abstract</h2>
<p>
The MS-DOS® PATH statement tells the operating system to look for files in specific directories on your disk. This article explains how to find out whether a specific file exists in one of the PATH directories.</p>
<h2>Searching for Files</h2>
<p>
When you write a program in Microsoft® Visual Basic®, you may need to determine if a specific file exists on a disk drive. At installation time, many software packages modify the MS-DOS® PATH statement in the AUOTOEXEC.BAT file by adding a new directory to the existing PATH directories. This allows an application to find its own system or data files that it requires to run successfully. You can add a search routine to your program to search these directories for an individual file.</p>
<p>
The first step is to retrieve the entire path for the specified disk drive. The Visual Basic <b>CurDir$</b> function returns the current disk drive's path.</p>
<p>
Next, you need to call two Microsoft Windows® application programming interface (API) functions, <b>GetWindowsDirectory</b> and <b>GetSystemDirectory</b>. The <b>GetWindowsDirectory</b> function retrieves the path of the Windows directory. Windows stores its initialization files, help files, application files, and other files in this directory. The <b>GetSystemDiectory</b> function retrieves the path of the Windows system directory. Windows stores library, font, drive, and other system files in this directory.</p>
<p>
In the example program below, you use all three functions mentioned above to build a string (PathStr) that contains the directory names. The <b>IsFileInPath</b> function simply uses the <b>InStr</b> function to extract each individual directory name from PathStr. Then you use the <b>Dir$</b> function to determine whether the target file exists in that directory.</p>
<h2>Example Program</h2>
<p>
This program shows how to determine whether a specific file exists in one of the directories in the PATH statement.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function GetSystemDirectory Lib "kernel32" Alias 
 &nbsp; "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long)
 &nbsp; As Long
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias 
 &nbsp; "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long)
 &nbsp; As Long
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim DirStr As String
 &nbsp;&nbsp; Dim FileToFind As String
 &nbsp;&nbsp; Dim Flag As Integer
 &nbsp;&nbsp; 
 &nbsp;&nbsp; FileToFind = Text1.Text
 &nbsp;&nbsp; Flag = IsFileInPath(FileToFind, DirStr)
 &nbsp;&nbsp; If Flag Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File Exists in: " &amp; DirStr
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "File does not exist in PATH"
 &nbsp;&nbsp; End If
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>BuildSearchPath</b>. Add the following code to this function:<pre><code>Sub BuildSearchPath(PathStr As String)
 &nbsp;&nbsp; Dim RetVal As Integer
 &nbsp;&nbsp; Dim Buffer As String * 128
 &nbsp;&nbsp; 
 &nbsp;&nbsp; PathStr = CurDir$
 &nbsp;&nbsp; RetVal = GetWindowsDirectory(Buffer, 128)
 &nbsp;&nbsp; PathStr = PathStr &amp; ";" &amp; Mid$(Buffer, 1, RetVal)
 &nbsp;&nbsp; Buffer = Space(128)
 &nbsp;&nbsp; RetVal = GetSystemDirectory(Buffer, 128)
 &nbsp;&nbsp; PathStr = PathStr &amp; ";" &amp; Mid$(Buffer, 1, RetVal)
 &nbsp;&nbsp; PathStr = PathStr &amp; ";" &amp; App.Path
 &nbsp;&nbsp; PathStr = PathStr &amp; ";" &amp; Environ$("PATH")
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>IsFileInPath</b>. Add the following code to this function:<pre><code>Function IsFileInPath(TheFile As String, DirName As String) As Integer
 &nbsp;&nbsp; Dim Separator As Integer
 &nbsp;&nbsp; Dim SearchStr As String
 &nbsp;&nbsp; Dim Results As String
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Call BuildSearchPath(SearchStr)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; While Len(SearchStr) &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Separator = InStr(SearchStr, ";")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Separator &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DirName = Mid$(SearchStr, 1, Separator - 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SearchStr = Mid$(SearchStr, Separator + 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DirName = SearchStr
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SearchStr = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Results = Dir$(DirName &amp; "\" &amp; TheFile)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Results &lt;&gt; "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsFileInPath = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; Wend
 &nbsp;&nbsp; IsFileInPath = False
End Function
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing f5. Type the name of a file that you want to find in the <b>Text Box</b> control. Click the command button. A message box will be displayed, telling you whether the file was found in one of the PATH directories.</p>
<h2>Additional References</h2>
<p>
"GetSystemDirectory." (MSDN Library, SDK Documentation, Platform SDK)</p>
<p>
"GetWindowsDirectory." (MSDN Library, SDK Documentation, Platform SDK)</p>
</BODY>
</HTML>

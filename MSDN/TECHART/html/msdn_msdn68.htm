<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 68: Removing Duplicate Items from List Box Controls</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn68"></a></sup>Tip 68: Removing Duplicate Items from List Box Controls</h1>
<p>
May 1, 1995</p>
<h2>Abstract</h2>
<p>
The Visual Basic® <b>StrComp</b> function can be used in conjunction with the <b>RemoveItem</b> method to delete entries that are duplicated in <b>List Box </b>controls. This article explains how you can compare the items in two separate <b>List Box</b> controls and delete the duplicate entries from one of the controls.</p>
<h2>Comparing the Contents of Two List Box Controls</h2>
<p>
The <b>AddItem</b> and <b>RemoveItem</b> methods allow you to add or delete items from a <b>List Box</b> control in Visual Basic®. If the <b>Sorted</b> property of a <b>List Box</b> is set to True, the items are automatically sorted in alphabetical order as each new item is added or an old item is removed.</p>
<p>
If you have two <b>List Box </b>controls in your Visual Basic application and you want to remove the items from the second control that are already in the first <b>List</b> <b>Box</b>, you can use the <b>StrComp</b> function, which allows you to compare two strings to see if they are identical.</p>
<p>
When using <b>StrComp</b> to determine if two strings are identical, you can tell the function to ignore uppercase and lowercase differences. In other words, the function can be told to treat the string "this is a test" to be the same as or different from the string "THIS IS A TEST". </p>
<p>
If you want <b>StrComp</b> to ignore the case of the strings you are comparing, use the 1 argument. To make <b>StrComp</b> include the case of the strings in the comparison, use the 0 argument (that is, <code>X = StrComp(String1, String2, 0)</code> or <code>X=StrComp(String1, String2, 1)</code>.) In addition, the Option Compare Text command, which you would place in the General Declarations section of a form or module, tells <b>StrComp</b> (and other string functions) that all string comparisons are to ignore the upper- and lowercase differences. </p>
<p>
After you call the <b>StrComp</b> function, it returns the status of the string comparison. <b>StrComp</b> returns one of the following four possible values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=9%>-1</td>
<td width=91%>The first string is less than the second string.</td>
</tr>
<tr valign=top>
<td width=9%>0</td>
<td width=91%>The first string is identical to the second string.</td>
</tr>
<tr valign=top>
<td width=9%>1</td>
<td width=91%>The first string is greater than the second string.</td>
</tr>
<tr valign=top>
<td width=9%>NULL</td>
<td width=91%>Either String1 or String2 is a NULL (empty) string.</td>
</tr>
</table><br>
<h2>Example Program</h2>
<p>
The program below shows how to remove duplicate items from <b>List Box</b> controls. When the program is first executed, both <b>List Box</b> controls contain two entries that are identical. Clicking the "Remove Duplicates" command button removes the identical items from the second <b>List Box</b> control.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
  List1.AddItem "test1"
  List1.AddItem "test2"
  List1.AddItem "test3"
  List1.AddItem "test4"
 &nbsp;&nbsp; 
  List2.AddItem "test1"
  List2.AddItem "test2"
  List2.AddItem "test5"
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
<li>
Add a <b>List Box</b> control to Form1. List1 is created by default. Set its <b>Sorted</b> property to True.<br><br></li>
<li>
Add a second <b>List Box</b> control to Form1. List2 is created by default. Set its <b>Sorted</b> property to True.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
 &nbsp;&nbsp; Call EliminateDupEntries(List1, List2)
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>EliminateDupEntries</b>. Add the following code to this function:<pre><code>Sub EliminateDupEntries(First As Control, Sec As Control)
  Dim Findx As Integer
  Dim Sindx As Integer
  Dim Ret As Integer
 &nbsp;&nbsp; 
  Findx = 0
  For Sindx = 0 To Sec.ListCount - 1
 &nbsp;&nbsp; For Findx = Sindx To First.ListCount - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ret = StrComp(First.List(Findx), Sec.List(Sindx))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case Ret
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 0:&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sec.RemoveItem Sindx
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sindx = Sindx - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1:&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp; Next Findx
  Next Sindx
 End Sub
</code></pre>
</li>
</ol>
</BODY>
</HTML>

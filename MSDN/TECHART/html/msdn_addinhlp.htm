<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Testing Add-Ins for Microsoft Access for Windows 95</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_addinhlp"></a>Creating and Testing Add-Ins for Microsoft Access for Windows 95</h1>
<p>
Microsoft Corporation</p>
<p>
October 1995</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4891">
</OBJECT><a href="javascript:sample1.Click()">Click to view or copy the files for the sample application.</a></p>
<h2>Abstract</h2>
<p>
An add-in is a tool such as a wizard, a builder, or a menu item that you can create to provide additional functionality to Microsoft Access for Windows® 95. When you develop an add-in, you may receive various error messages during the testing and debugging process. This document describes six scenarios that illustrate the most common problems you may encounter with add-in development. In addition, this document provides step-by-step instructions for reproducing and solving the problems using the sample files included in the Addins.exe file.</p>
<h2>Getting Started</h2>
<p>
To use this document, you need to set up the sample files (included in the Addins.exe file) by copying them to specific folders on your computer.
<ol>
<li>
Copy Wzaddin.mda to your Microsoft Access folder, for example:<p class=tl>
\msoffice\access</P></li>
<li>
Copy Wzcodlib.mda to your \Program Files\Common Files folder, for example:<p class=tl>
c:\program files\common files</P><p class=tl>
Or, in Microsoft® Windows NT®, copy Wzcodlib.mda to your \Winnt35\Msapps folder, for example:</P><p class=tl>
c:\winnt35\msapps</P></li>
</ol>
<p>
This document assumes that you are familiar with writing an add-in database, creating a USysRegInfo table, using the Add-in Manager to install an add-in, and creating references to library databases. If any of these topics are new to you, please read the following information before proceeding with this document:
<ul type=disc>
<li>
For information about creating and installing add-ins, please see "Building Applications with Microsoft Access for Windows 95," Chapter 16, "Creating Wizards, Builders, and Add-ins," pages 349–375.<br><br></li>
<li>
For information about creating a USysRegInfo table, please see the USysReg.doc file, which is included in the Addins.exe file.<br><br></li>
<li>
For information about referencing library databases, please see "Building Applications with Microsoft Access for Windows 95," Chapter 12, "Using Library Databases and Dynamic-Link Libraries," pages 293–295.</li>
</ul>
<h2>Creating and Testing Add-ins</h2>
<h3>Scenario #1</h3>
<p>
You want to add a menu item to the Add-ins submenu (<b>Tools</b> menu), which runs a specific function. To implement the menu add-in, you perform the following tasks:
<ul type=disc>
<li>
You create a custom function in a library database (.mda) file.<br><br></li>
<li>
You create a USysRegInfo table in the .mda file and add information for a menu add-in that calls the custom function.<br><br></li>
<li>
You create a new database (.mdb) file and try to test the menu add-in (by clicking the Tools menu and pointing to Add-ins).</li>
</ul>
<h4>Problem</h4>
<p>
When you point to Add-ins on the <b>Tools</b> menu, the menu add-in does not appear on the submenu.</p>
<h4>Cause</h4>
<p>
You did not run the Add-in Manager to load the add-in.</p>
<h4>Solution</h4>
<p>
Run the Add-in Manager (from the <b>Add-ins</b> submenu on the <b>Tools</b> menu) to set up the add-in.</p>
<h4>Steps to Reproduce and Solve</h4>
<ol>
<li>
Create a new database called Test1.mdb.<br><br></li>
<li>
On the <b>Tools</b> menu, point to Add-ins. Note that no custom add-ins appear on the submenu; only the following Microsoft Access add-ins appear:<p class=tl>
Switchboard Manager<br>
Add-in Manager<br>
Database Splitter<br>
Linked Table Manager<br>
Menu Builder</P></li>
<li>
On the <b>Add-ins</b> submenu, click Add-in Manager.<br><br></li>
<li>
In the Add-in Manager box, select Wzaddin.mda, and then click Install. This should load the add-in database and make its features available in Test1.mdb. Close the Add-in Manager box.<br><br></li>
<li>
On the <b>Tools</b> menu, point to Add-ins. Note that there is an additional add-in at the bottom of the submenu:<p class=tl>
Menu Addin Example</P></li>
</ol>
<h3>Scenario #2</h3>
<p>
You create a builder such as a "color picker" for use when setting the BackColor property of a control or section in a form or report. To implement the builder, you perform the following tasks:
<ul type=disc>
<li>
You create a form in an add-in database to act as a color picker.<br><br></li>
<li>
You create a custom function to open the color picker form.<br><br></li>
<li>
You create (or modify) a USysRegInfo table in the add-in database by adding information for the builder.<br><br></li>
<li>
You create a new database (.mdb) file and use the Add-in Manager to load the add-in database.<br><br></li>
<li>
You create a new form and try to set the BackColor property of the detail section. In the Choose Builder box, you select the color picker and click OK.</li>
</ul>
<h4>Problem</h4>
<p>
When you try to open the builder from an event property, you receive the following error message:</p>
<p class=indent>
Can't start the wizard, builder, or add-in.</p>
<h4>Cause</h4>
<p>
You have an incorrect setting for the builder in the USysRegInfo table. For example, the specified library has an incorrect path setting or filename.</p>
<h4>Solution</h4>
<p>
Uninstall the add-in database (by using the Add-in Manager), and then restart Microsoft Access. Open the add-in database, and then verify the settings in the USysRegInfo table for the builder.</p>
<h4>Steps to Reproduce and Solve</h4>
<ol>
<li>
Open the Test1.mdb database, which you created for Scenario #1.<br><br></li>
<li>
Create a new form not based on any table or query in Design view.<br><br></li>
<li>
Select the form's detail section, and open the property sheet.<br><br></li>
<li>
Select the BackColor property, and click the Build button.<br><br></li>
<li>
In the Choose Builder box, click Simple Color Picker, and then click OK. You should receive the error message "Microsoft Access can't start the wizard, builder, or add-in". Click OK to close the message box.<br><br></li>
<li>
On the <b>Tools</b> menu, point to Add-ins, and then click Add-in Manager. Select the Wzaddin.mda file, and click Uninstall.<br><br></li>
<li>
Close the Test1.mdb database, and click No when asked whether you want to save changes to any objects.<br><br></li>
<li>
Quit and then restart Microsoft Access.<br><br></li>
<li>
Open the Wzaddin.mda add-in database (located in your Microsoft Access folder).<br><br></li>
<li>
On the <b>Tools</b> menu, click Options.<br><br></li>
<li>
In the Options box, click the View tab. Under Show, click to select the System Objects box, and then click OK.<br><br></li>
<li>
Open the USysRegInfo table, and locate the following record:<p class=tl>
<i>Subkey&nbsp; </i>HKEY_CURRENT_ACCESS_PROFILE\Wizards\Property Wizards\BackColor\Simple Color Picker</P><p class=tl>
<i>Type: </i>1</P><p class=tl>
<i>ValName:</i>Library</P><p class=tl>
<i>Value: </i>|ACCDIR\testaddin.mda</P><p class=tl>
<b>Note:</b> "|ACCDIR\testaddin.mda" is listed in the <i>Value</i> field. This is an incorrect name for the add-in database.</P></li>
<li>
Modify the <i>Value</i> field (for the Simple Color Picker) to the following name:<p class=tl>
<i>Value:</i> |ACCDIR\Wzaddin.mda</P></li>
<li>
Close the USysRegInfo table to automatically save the change.<br><br></li>
<li>
Close the Wzaddin.mda database.<br><br></li>
<li>
Open the Test1.mdb database.<br><br></li>
<li>
On the <b>Tools</b> menu, point to Add-ins, and then click Add-in Manager. Select the Wzaddin.mda file, and then click Install.<br><br></li>
<li>
Repeat steps 2 through 4 for Scenario #2. Note that the Simple Color Picker opens without error.<br><br></li>
<li>
In the Simple Color Picker, click Red, and then click OK. Press enter to change the color of the detail section to Red.<br><br></li>
<li>
Close Test1.mdb, and click No when asked whether you want to save changes to any objects.</li>
</ol>
<h3>Scenario #3</h3>
<p>
You create an add-in wizard that automatically adds code to a module in a user's database (.mdb) file. This new code calls a function in your add-in database (.mda) file. To implement the wizard, you perform the following tasks:
<ul type=disc>
<li>
You create two custom functions in an add-in database; the first function inserts code into a form module that calls the second function.<br><br></li>
<li>
You create (or modify) the USysRegInfo table in the add-in database to add information about the wizard.<br><br></li>
<li>
You create a new database (.mdb) file and use the Add-in Manager to load the add-in wizard.<br><br></li>
<li>
You create a new form in Design view and turn on control wizards in the toolbox. You try to add a command button to the form. In the Choose Builder box, you select Simple Button Wizard and click OK.</li>
</ul>
<h4>Problem</h4>
<p>
When you try to open the add-in, you receive the following error message:</p>
<p class=indent>
Sub or Function not defined.</p>
<h4>Cause</h4>
<p>
The current database (.mdb) file does not have a reference to the add-in database.</p>
<h4>Solution</h4>
<p>
In the current database, create a reference to the add-in database by using the References command on the <b>Tools</b> menu (in Design view of a module). Note that you cannot programmatically create a reference by using Visual Basic; you must create it manually.</p>
<p>
Or, you can avoid creating a reference by using the Application object and Run method to call the function in the add-in database. For example, you can use the following syntax in your first function that adds code automatically to the current database:</p>
<p class=indent>
Application.Run "&lt;library&gt;.&lt;function&gt;", [arguments]</p>
<p>
This technique is used by Microsoft Access when you add an AutoDialer button to a form by using the Command Button Wizard. The AutoDialer automatically adds code to the form module that calls the wlib_AutoDial() function in the Utility.mda file.</p>
<p>
Note that you can use the "Application.Run" syntax as long as the following requirements are met:
<ul type=disc>
<li>
The add-in database must have an .mda file extension.<br><br></li>
<li>
The add-in database must be located in the same folder that is specified as the AddInPath in the Registry.</li>
</ul>
<p>
You can locate this string value under the following Registry key:</p>
<p class=indent>
HKEY_LOCAL_MACHINE\Software\Microsoft\Access\70\Wizards</p>
<h4>Steps to Reproduce and Solve</h4>
<ol>
<li>
Open the Test1.mdb database, which you created for Scenario #1.<br><br></li>
<li>
On the <b>Tools</b> menu, point to Add-ins, and then click Add-in Manager. Verify that Wzaddin.mda is installed. If it is not installed, click Install. Close the Add-in Manager box.<br><br></li>
<li>
Create a new form not based on any table or query in Design view. In the toolbox, turn on control wizards.<br><br></li>
<li>
Add a command button to the form. In the Choose Builder box, select the Simple Button Wizard, and click OK.<br><br></li>
<li>
Enter a caption for the new button, such as Test Button, and then click OK.<br><br></li>
<li>
View the form in Form view, and then click the Test button. You should receive the following error message:<p class=tl>
Run-time error '2465'</P><p class=tl>
Microsoft Access can't find the field Wzaddin.mda referred to in your expression.</P></li>
<li>
In the message box, click Debug.<br><br></li>
<li>
Change the code that reads:<pre><code>Private Sub Command0_click()
Beep
[wzaddin.mda].wzad
End Sub
</code></pre>
<p class=tl>
to read as follows:</P><pre><code>Private Sub Command0_click()
Beep
' [wzaddin.mda].wzad
Application.Run "wzaddin.wzad"
End Sub
</code></pre>
</li>
<li>
Save the code changes, and close the form.<br><br></li>
<li>
Return to your form in Form view, and click the Test Button. You should receive a message box reporting that the Wzad procedure (from Wzaddin.mda) ran successfully. Note that you can use the "Application.Run" syntax in any type of add-in—a wizard, a builder, or a menu add-in—to run procedures located in an unreferenced library database.</li>
</ol>
<h3>Scenario #4</h3>
<p>
You create an add-in that uses two databases: a code library that contains common or generic functions (for use in multiple applications) and an add-in database that calls functions in the code library. To implement this type of add-in, you perform the following tasks:
<ul type=disc>
<li>
You create a code library database (.mda) file that stores generic functions.<br><br></li>
<li>
You create an add-in database (.mda) file and a form that calls a function in the code library.<br><br></li>
<li>
You manually create a reference in the add-in database to the code library.<br><br></li>
<li>
You create (or modify) the USysRegInfo table in the add-in database to add information about the add-in.<br><br></li>
<li>
You open a new database and run the Add-in Manager to install the add-in.</li>
</ul>
<h4>Problem</h4>
<p>
When you launch your add-in from the current database, you receive one of the following error messages:</p>
<p class=indent>
Cannot find project or library</p>
<p>
Or:</p>
<p class=indent>
Compile Error</p>
<h4>Cause</h4>
<p>
Microsoft Access cannot find the code library after searching the following locations for the code library:
<ul type=disc>
<li>
The folder that contains the add-in database.<br><br></li>
<li>
The folder that contains the current database.</li>
</ul>
<h4>Solution</h4>
<p>
You can move the code library file to the folder that contains the add-in or current database.</p>
<h4>Steps to Reproduce and Solve</h4>
<ol>
<li>
Open Windows Explorer (or File Manager), and verify that the following files are stored in different folders, for example:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>File Name</b></td>
<td class=label width=63%><b>Location</b></td>
</tr>
<tr valign=top>
<td width=37%>Wzaddin.mda</td>
<td width=63%>c:\msoffice\access</td>
</tr>
<tr valign=top>
<td width=37%>Wzcodlib.mda</td>
<td width=63%>c:\program files\common files <br>
—or—<br>
c:\winnt35\msapps</td>
</tr>
</table><br>
</li>
<li>
Open the Test1.mdb database, which you created for Scenario #1.<br><br></li>
<li>
In the Database window, click the Modules tab, and then click New.<br><br></li>
<li>
In a new module, click the Build button on the toolbar (or using the right mouse button, click the module window to open the shortcut menu, and then click Build).<br><br></li>
<li>
In the Choose Builder box, click Simple Code Wizard.<br><br></li>
<li>
In the Simple Code Wizard box, click the "Call Code in Wzcodlib.mda" button. You should receive the following error message:<p class=tl>
Microsoft Access can't start the wizard, builder, or add-in.</P></li>
<li>
Click OK to close the message box.<br><br></li>
<li>
Close the Test1.mdb database, and click No when asked whether you want to save changes to any objects.<br><br></li>
<li>
Quit Microsoft Access.<br><br></li>
<li>
Switch to Windows Explorer (or File Manager), and move the code library database to the same folder as the add-in database.<br><br></li>
<li>
Start Microsoft Access, and open the Test1.mdb database.<br><br></li>
<li>
Repeat steps 3 through 5 (in Scenario #4).<br><br></li>
<li>
In the Simple Code Wizard box, click the "Call Code in Wzcodlib.mda" button. You should receive a message box reporting that a function from the code library (Wzcodlib.mda) ran successfully.<br><br></li>
<li>
Close the Simple Code Wizard box.</li>
</ol>
<h3>Scenario #5</h3>
<p>
You create a library database of generic functions that users can call from any database (for example, a library of statistical functions), which you sell as a separate product. To implement this type of code library, you perform the following tasks:
<ul type=disc>
<li>
You create a new code library database (.mda) file and store it in your Microsoft Access folder.<br><br></li>
<li>
You create generic functions in the code library.<br><br></li>
<li>
You open an existing database and call a generic function in the code library from an object (such as a form, a query, a report, or a module).</li>
</ul>
<h4>Problem</h4>
<p>
You receive one of the following error messages:</p>
<p class=indent>
Sub or Function not defined.</p>
<p>
Or:</p>
<p class=indent>
Undefined function '&lt;name&gt;' in expression.</p>
<p>
Or:</p>
<p class=indent>
#Name?</p>
<h4>Cause</h4>
<p>
The new, current database does not have a reference to the code library database.</p>
<h4>Solution</h4>
<p>
You need to create a reference in the current database to the library database before calling any library functions. You must create the reference manually by using the References command on the <b>Tools</b> menu (in Design view of a module). You cannot programmatically create a reference by using Visual Basic.</p>
<h4>Steps to Reproduce and Solve</h4>
<ol>
<li>
Open the sample database Northwind.mdb.<br><br></li>
<li>
Create a new module.<br><br></li>
<li>
Open the Debug Window, type the following code, and then press enter:<pre><code>? GetMedian("Orders","OrderID")
</code></pre>
</li>
<li>
When you receive the "Sub or Function not defined" error message, click OK.<br><br></li>
<li>
On the <b>Tools</b> menu, click References.<br><br></li>
<li>
In the References box, click Browse.<br><br></li>
<li>
In the Add Reference box, locate the Wzaddin.mda database, and then click OK.<br><br></li>
<li>
In the Reference box, make sure that Wzaddin.mda is listed (as an available reference) and selected. Click OK to close the References box.<br><br></li>
<li>
Repeat step 3. You should see the following statistical median in the Debug window:<p class=tl>
10662.5</P></li>
</ol>
<h3>Scenario #6</h3>
<p>
You created an add-in library with many user-defined types and Visual Basic procedures.</p>
<h4>Problem</h4>
<p>
The library takes a while to load when a user opens the add-in.</p>
<h4>Solution</h4>
<p>
You can slightly reduce the loading time of your add-ins by adding a Loadonstartup key to the Windows Registry. This key forces the add-in's type information to load when a database is opened. The key does not, however, load the actual add-in code. Add-in code is loaded "on demand" when a user starts the add-in.</p>
<p class=indent>
<B><b>IMPORTANT</b></B>&nbsp;&nbsp;&nbsp;This solution involves editing the Windows Registry. Before you edit the registry, you should first make a backup copy of the registry files (System.dat and User.dat). Both are hidden files in the Windows folder.</p>
<p>
For information about how to edit the registry, view the Changing Keys And Values online Help topic in Registry Editor (Regedit.exe). Note that you should make a backup copy of the registry files (System.dat and User.dat) before you edit the registry.</p>
<p class=indent>
<B><b>WARNING</b></B>&nbsp;&nbsp;&nbsp;Using Registry Editor incorrectly can cause serious problems that may require you to reinstall Windows 95. Microsoft cannot guarantee that problems resulting from the incorrect use of Registry Editor can be solved. Use Registry Editor at your own risk.</p>
<p>
To add the Loadonstartup key to the registry, follow these steps:
<ol>
<li>
In Windows 95, click the Start button, and then click Run. In Windows NT, open File Manager, and click Run on the <b>File</b> menu.<br><br></li>
<li>
In Windows 95, type "regedit" (without the quotation marks) in the Open box, and then click OK. In Windows NT, type "regedit32" (without the quotation marks) in the Run box, and then click OK.<br><br></li>
<li>
Locate the HKEY_LOCAL_MACHINE registry folder.<br><br></li>
<li>
Expand the HKEY_LOCAL_MACHINE folder until you locate the Software\Microsoft\Access\7.0\Wizards folder.<br><br></li>
<li>
Click Wizards.<br><br></li>
<li>
On the Edit Menu in the Registry Editor, click New, and then click String Value.<br><br></li>
<li>
A new value is created in the right pane of the Registry window. Type "Loadonstartup" (without the quotation marks), and then press enter.<br><br></li>
<li>
While the Loadonstartup key is highlighted, click the <b>Edit</b> menu, and click Modify. Type "rw" (without the quotation marks) for "read/write" as the data value, and then click OK.<br><br></li>
<li>
Close the Registry Editor.</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DHTML, Data Binding, and a HelpDesk Technician Client</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_dhtmltec"></a>DHTML, Data Binding, and a HelpDesk Technician Client</h1>
<p>
Steve Kirk<br>
MSDN Content Development Group</p>
<p>
November 20, 1997</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5175">
</OBJECT><a href="javascript:sample1.Click()">Click to view or copy the sample files associated with this technical article.</a></p>
<p>
In this article I'll develop a transaction-processing client application in Dynamic HTML (DHTML) for Internet Explorer 4.0. DHTML and Internet Explorer 4.0 provide an enhanced client-programming model that can simplify development and help you build more efficient web applications. With DHTML you can replace many HTML documents containing large graphics and components with fewer documents containing small scripts and components that service the interface through this enhanced programming model. Client/server web applications can benefit by using data binding with local data source objects to replace larger data access components or to eliminate network round trips for pages of server-generated HTML.</p>
<p>
With DHTML data binding, you can create an interface to tabular data with very little code. A navigable DHTML table that is bound to live data requires only that you specify a data source object for the table and that you specify a template for a single row with data fields for each column. </p>
<p>
Data bound elements require a data source object, which provides a standard OLE DB interface to your data. Although general-purpose data-access components provide this interface, they are designed to connect directly to a database or data file rather than to work with a services model where client data is provided through a COM API. I'll begin by using Microsoft® Visual Basic® version 5.0 (with Service Pack 2) to develop a component that provides data through this interface, and then I'll build the user interface around this data provider using DHTML and data binding.</p>
<p>
Like the other client applications in the HelpDesk sample, this client is based on the HelpDesk COM API that provides an object-oriented data model and application services. For a more complete description of the HelpDesk COM API see <a href="msdn_hdobj.htm">"Designing the HelpDesk Transaction Processing Object Model."</a> You can also read about the HelpDesk HTML client I created for Microsoft Windows® CE in <a href="msdn_hndclint.htm">"A Web Application for Handheld Transaction Processing Clients."</a></p>
<h2>Data Binding in an N-Tiered Client/Server Application</h2>
<p>
A DHTML element can be bound to a data source object (DSO) so that it is repeated to represent multiple data records in the data source (A in Figure 1) or it can be bound to a single field in the currently selected record in the data source (B in Figure 1). </p>
<p>
<img src="dhtmltech1.gif" border=0></p>
<p class=label>
<b>Figure 1. Interfaces types using data binding</b></p>
<p>
In order to bind an HTML element to data, you add a data source (datasrc) or data field (datafld) attribute to the element. A table element can be bound to the DSO so that a row is created for each row in the DSO or a text input element can be bound to a field in the current record of the DSO so that it changes as the record pointer is moved through the DSO. For more information on data binding, see "Data Binding" in the DHTML section of the Internet Client SDK documentation on the MSDN Library (SDK Documentation, Internet Client SDK).</p>
<p>
The data source object (DSO) can act as a client-side data cache that handles sorting, paging, validation, and updates for the user interface while protecting the rest of the application from repeated data requests to service user-interface navigation. </p>
<p>
Figure 2 shows the DHTML client, the DSO, and the rest of the HelpDesk system architecture.</p>
<p>
<img src="dhtmltech2.gif" border=0></p>
<p class=label>
<b>Figure 2. DHTML data binding and the HelpDesk architecture</b></p>
<p>
The client side consists of a thin DHTML interface employing data binding, the DSO, and the HelpDesk client COM server. On the network beyond the client computer are additional HelpDesk API components and the SQL Server database. </p>
<h2>Creating the Data Source Object in Visual Basic</h2>
<p>
The DSO provides the interfaces that DHTML data binding requires in order to render data. At the outermost level, the DSO provides methods for adding and removing a data source listener and it provides a property that exposes a data provider object. Note that these DSO procedures use reserved procedure ID attributes that identify them to data binding by DispID. The data-provider object implements an OLE DB Simple Provider interface and contains a private array that holds the data. Table 1 lists the properties and methods that are provided by the DSO, and Table 2 lists the properties and methods of the data provider.</p>
<p class=label>
<b>Table 1. Properties and Methods of the Data Source Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property/Method</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>MsDataSourceObject</td>
<td width=50%>Returns a reference to the data provider object that implements the OLE DB interface. Requires procedure ID–3900 attribute</td>
</tr>
<tr valign=top>
<td width=50%>AddDataSourceListner</td>
<td width=50%>Requires procedure ID–3901 attribute</td>
</tr>
<tr valign=top>
<td width=50%>RemoveDataSourceListner</td>
<td width=50%>Requires procedure ID–3902 attribute</td>
</tr>
</table><br>
<p class=label>
<b>Table 2. Properties and Methods of the Data Provider</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property/Method</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_GetRowCount</td>
<td width=50%>Returns the number of rows of data in the data set</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_GetColumnCount</td>
<td width=50%>Returns the number of columns of data in the data set</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_GetRWStatus</td>
<td width=50%>Boolean true/false that indicates whether data provider is read or write</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_SetVariant</td>
<td width=50%>Write data in specified row and column with supplied value</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_GetVariant</td>
<td width=50%>Gets data from specified row and column</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_Find</td>
<td width=50%>Finds supplied data value</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_InsertRows</td>
<td width=50%>Inserts supplied rows into data</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_DeleteRows</td>
<td width=50%>Deletes specified data rows</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_GetLocale</td>
<td width=50%>Returns locale for internationalization </td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_AddOLEDBSimpleProviderListener</td>
<td width=50%>Adds a reference to a listener object that receives notifications</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_ RemoveOLEDBSimpleProviderListener</td>
<td width=50%>Removes a reference to a listener object</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_ IsAsync</td>
<td width=50%>Boolean true/false—true indicates that provider operates asynchronously.</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_ GetEstimatedRows</td>
<td width=50%>Returns an estimated row count for data set</td>
</tr>
<tr valign=top>
<td width=50%>OLEDBSimpleProvider_ StopTransfer</td>
<td width=50%>Stops in-progress data transfer </td>
</tr>
</table><br>
<h2>Implementing the Technician Client </h2>
<h3>The Request list</h3>
<p>
The technician enters the application through Internet Explorer 4.0 by requesting the URL containing tech.htm. Tech.htm contains a scrollable frame that displays reclst.htm, which contains a data source object, a DHTML table to display the technician's request list, and some script code for event handling. The following DHTML code specifies the DSO and the request table that is bound to it:</p>
<pre><code>&lt;object id="oRequestList"
classid="clsid:01172939-2C2D-11D1-9C26-0080C74E5396"&gt;
&lt;/object&gt;

&lt;table datasrc="#oRequestList"&gt;
&lt;tbody&gt; 
 &nbsp;&nbsp; &lt;tr&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;span datafld="Priority"&gt;&lt;/span&gt;&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;span datafld="Status"&gt;&lt;/span&gt;&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;span datafld="Request Date"&gt;&lt;/span&gt;&lt;/td&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;span datafld="Description"&gt;&lt;/span&gt;&lt;/td&gt;
 &nbsp;&nbsp; &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<h3>Populating the Request List</h3>
<p>
When reclst.htm is loaded, the DSO is instantiated in order to render the request list table. The following Visual Basic code from the data provider within the DSO shows how the technician's data is retrieved from the HelpDesk API and used to populate the data provider's inner array:</p>
<pre><code>Private Sub Class_Initialize()
Dim oTech As HDClient.CTech
' Initialize the array.
ReDim m_ReqArray(0,8)
' Get user log in name .
GetLoggedInUser(m_sAlias)
' Initialize the admin object.
If m_oAdmin.Init(m_sAlias, icTechLoggedIn) Then
' Populate a HelpDesk technician object.
 &nbsp;&nbsp; Set oTech = oAdmin.GetTechByAlias(sAlias)
' Populate array with technician's requests.
 &nbsp;&nbsp; ReDim m_ReqArray(oTech.Requests.Count, 8)
 &nbsp;&nbsp; For lReq = 1 To oTech.Requests.Count
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set oReq = oTech.Requests(lReq – 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq,ArrayCols.PKId) = oReq.PKId
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_reqArray(lReq, ArrayCols.Priority) _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =oAdmin.GetPriorities("id=" &amp; CStr(oReq.PriorityId)).Code
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq, ArrayCols.Status) = oAdmin.GetReqStatus("id=" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; CStr(oReq.StatusId - 1)).Code
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq, ArrayCols.RequestDate) = oReq.ReqDate
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq, ArrayCols.Description) = oReq.Desc
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq, ArrayCols.Decription_State) _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = DescState.Collapsed 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_reqArray(lreq, icColDescriptionDat) = oReq.Desc
 &nbsp;&nbsp; Next
End If
End Sub
</code></pre>
<p>
<img src="dhtmltech3.gif" border=0></p>
<p class=label>
<b>Figure 3. The populated request-list interface</b></p>
<p>
Figure 3 shows the populated request list within its scrolling frame. I chose to display the complete data set in the request list table because I expect the technician's request list to be relatively short. If a large data set is expected, a paging mechanism can be used. A data-bound table can provide paging by using the DataPageSize attribute to restrict the number of records displayed. Table navigation can then be provided through event handlers on interface elements that call the table's <b>nextPage</b> and <b>previousPage</b> methods.</p>
<p>
The technician double clicks a request in the table to expand its detail data and to display the response action interface. The mechanism for expanding the table exploits the data-binding interface with a trick that first requires some more background on data binding.</p>
<h2>Adding Hierarchy</h2>
<p>
Data binding adds a recordset property to the DSO. The scriptable recordset object provides data manipulation methods (<b>Insert</b>, <b>Update</b>, and <b>Delete</b>) that act on data in the underlying DSO and on the bound DHTML elements. The following lines of script show how the recordset property could be used to change the value of MyField to NewValue in the current record of the data source object (dataSrc). This change will automatically update any HTML elements bound to MyField.</p>
<pre><code>Datasrc.Recordset.Fields("MyField") = "NewValue"
Datasrc.Recordset.Update
</code></pre>
<p>
The request list DSO exploits this synchronization (as well as the ability to render data as HTML) to provide an interface that toggles between an expanded and collapsed state. When the technician double clicks a request, the following script event handler, which appears to replace the description field with an empty string, is invoked.</p>
<pre><code>Sub ExpandRequest()</code></pre>
<p>
<code>DSC1.recordset.absoluteposition = window.event.srcElement.recordNumber</code></p>
<pre><code>DSC1.recordset.Fields(icDescription) = ""
DSC1.recordset.update
End Sub
</code></pre>
<p>
The recordset update first updates the data provider through <b>SetVariant()</b>, it then retrieves the data for the same row and column with <b>GetVariant()</b>, and then updates the bound element. <b>SetVariant()</b> intercepts updates to the description column and inserts either the HTML that displays the expanded request details or the request description, depending on the previous toggle state of the column. Figure 4 shows the expanded request details and action interface in the table cell that had previously contained the request description. A subsequent double click restores the cell to its collapsed state. </p>
<pre><code>------

Sub OLEDBSimpleProvider_setVariant(ByVal lRow As Long, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal lColumn As Long, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal format As OSPFORMAT, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal vNewVal As Variant)
…
…
' Intercept and trigger a detail toggle
If lColumn = ArrayCols.Description Then
 &nbsp;&nbsp; Call myEvent.aboutToChangeCell(lRow, lColumn)
 &nbsp;&nbsp; ToggleDetail (lRow)
 &nbsp;&nbsp; Call myEvent.cellChanged(lRow, lColumn)
 &nbsp;&nbsp; Exit Sub
End If
' General case update the array
Call myEvent.aboutToChangeCell(lRow, lColumn)
myArray(lRow, lColumn) = vNewVal
Call myEvent.cellChanged(lRow, lColumn)

End Sub
</code></pre>
<p>
<b>ToggleDetail</b> then switches the data in the description column to which the HTML element is bound.</p>
<pre><code>Private Sub ToggleDetail(ByVal lRow As Long)
…
…
If myArray(lRow, ArrayCols.Description_State) = DescState.Collapsed Then
' put HTML to display the detail interface in the description column
 &nbsp;&nbsp; sHTML = sHTML &amp; "&lt;iframe ID=frmDetMenu width=100% height=40&nbsp; "
 &nbsp;&nbsp; sHTML = sHTML &amp; "marginheight=0 marginwidth=0 "
 &nbsp;&nbsp; sHTML = sHTML &amp; "scrollable=No src=""dethdr.htm""&gt;&lt;/iframe&gt;"

 &nbsp;&nbsp; sHTML = sHTML &amp; "&lt;iframe ID=frmDetList width=100% height=200 "
 &nbsp;&nbsp; sHTML = sHTML &amp; "marginheight=0 marginwidth=0 "
 &nbsp;&nbsp; sHTML = sHTML &amp; "scrollable=True&nbsp; src=""detlst.htm""&gt;&lt;/iframe&gt;"
 &nbsp;&nbsp; myArray(lRow, ArrayCols.Description) = sHTML
 &nbsp;&nbsp; myArray(lRow, ArrayCols.Description_State) = DescState.Expanded
Else
' put only the request description into the column
 &nbsp;&nbsp; myArray(lRow, ArrayCols.Description) = _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myArray(lRow, ArrayCols.Description_Dat)
 &nbsp;&nbsp; myArray(lRow, ArrayCols.Description_State) = DescState.Collapsed
End If
End Sub
</code></pre>
<p>
<img src="dhtmltech4.gif" border=0></p>
<p class=label>
<b>Figure 4. Expanded request</b></p>
<h2>Conclusion</h2>
<p>
This article just begins to cover a client architecture using DHTML data binding with a custom data source object. I'll expand the application for inclusion with the final version of the Helpdesk sample on MSDN. The accompanying sample application can be used immediately in a stand-alone mode (with static data) as well as with the complete Helpdesk system when it is available. </p>
</BODY>
</HTML>

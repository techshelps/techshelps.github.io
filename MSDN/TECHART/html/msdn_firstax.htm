<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your First ActiveX Control with Visual Basic 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_firstax"></a></sup>Creating Your First ActiveX Control with Visual Basic 5.0</h1>
<p>
Microsoft Corporation</p>
<p>
November 1996</p>
<h2>Introduction</h2>
<p>
The Visual Basic® 5.0 Control Creation Edition makes creating ActiveX™ controls as easy as creating typical Visual Basic applications. After reading this article, you'll see just how easy it can be. </p>
<p>
This document is designed to give you an overview of the simple process of creating ActiveX controls with Visual Basic. If you are already familiar with any version of Visual Basic, you should be able to create your first ActiveX control in 10 minutes! </p>
<p>
The directions that follow will guide you through the process of building what is commonly called a "spinner" control. A spinner control is a graphical ActiveX control that allows the user to increase or decrease a value by using a mouse instead of a keyboard. A spinner control is pictured below. </p>
<p>
<img src="firstax_1.gif" border=0></p>
<p class=label>
<b>Figure 1. A spinner control</b></p>
<p>
Now that you have an idea of what you will be building, let's get started. </p>
<h2>Step 1: Create a Test Container</h2>
<p>
Start the Control Creation Edition, highlight Standard EXE, and click Open as shown below. This creates the host application. This host will be used as the test container for the spinner control. </p>
<p>
<img src="firstax_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The Visual Basic New Project window</b></p>
<h2>Step 2: Add a Blank ActiveX Control Project</h2>
<p>
From the File menu, select the Add Project command. </p>
<p>
<img src="firstax_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Adding a new project in the Add Project dialog</b></p>
<p>
In the Add Project dialog, highlight ActiveX Control and click Open. </p>
<p>
<img src="firstax_4.gif" border=0></p>
<p class=label>
<b>Figure 4. The disabled ActiveX control</b></p>
<p>
Two projects should now be open. As illustrated in the following diagram, the projects are similar. Note that a new control is visible in the toolbox (highlighted in Figure 5 with the number 1). If you hold your mouse over this control in the Toolbox, the Tooltip should pop up and display the current name of the control, "UserControl1." The icon in the Toolbox should be gray since the control is disabled. The control will be enabled in a few more steps! </p>
<p>
Visual Basic 5.0 uses the same visual metaphor for building ActiveX Controls as it uses in building applications. Using this metaphor, you first "draw" the interface, set some properties, write some event driven code, and then you are on your way. </p>
<p>
<img src="firstax_5.gif" border=0></p>
<p class=label>
<b>Figure 5. The Visual Basic design window</b></p>
<h2>Step 3: Draw the Visual Interface for the Control</h2>
<p>
The spinner control is easily created using a powerful new feature of the Control Creation Edition—the ability to combine existing controls into new, more specialized controls. In this case, controls for a standard textbox and a vertical scrollbar will be combined to create the spinner control. </p>
<p>
First, click on the textbox control in the Visual Basic toolbox. The textbox control is identified with the number 1 in the figure below. Use your mouse to draw a small textbox in the upper left corner of the Project2 window. </p>
<p>
Second, click on the vertical scrollbar control in the toolbox and draw it just to the right of the textbox control. The vertical scrollbar control is identified with the number 2 in the figure below. </p>
<p>
Finally, drag the control sizing handle to surround the newly drawn controls. The control sizing handle is identified with the number 3 in the figure below. Your ActiveX spinner control should be similar to the control pictured below. </p>
<p>
<img src="firstax_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Drawing the visual interface for the control</b></p>
<h2>Step 4: Write Event-Driven Code</h2>
<p>
We have created the visual interface for a spinner control. The next step is to write event-driven code to reflect the current value of the vertical scrollbar in the textbox. The value displayed in the textbox must increase or decrease in response to the user clicking on the up or down arrow of the vertical scrollbar. To tie these two events together, some code must be written in the Change event of the vertical scrollbar. Double-click on the vertical scrollbar to display the code window. Type the following line of code in the window: </p>
<pre><code>text1.text = vscroll1.value 
</code></pre>
<p>
You may have been surprised as you typed the above line of code. When you typed the "dot," Visual Basic&nbsp;5.0 displayed a list of all allowable properties for the textbox. ActiveX components contain this type of information and Visual Basic is automated to make it readily available. This an example of the new "intelligence" you'll find in the Visual Basic&nbsp;5.0 Control Creation Edition development environment. </p>
<p>
After the code is entered, close the code window by clicking on the close box (#1 in Figure 7 below). Finally, close the spinner control form by clicking on its close box (#2 in Figure 7 below) </p>
<p>
<img src="firstax_7.gif" border=0></p>
<p class=label>
<b>Figure 7. Entering the event driven code in the code window</b></p>
<h2>Step 5: Use and Test the Control</h2>
<p>
If the control has been successfully built and the spinner form is closed, the spinner control should be enabled. Check to be sure it no longer appears gray in the toolbox window. Your environment should appear similar to the figure below. </p>
<p>
The control is ready to be tested (#1 in Figure 8 below). </p>
<p>
<img src="firstax_8.gif" border=0></p>
<p class=label>
<b>Figure 8. The enabled spinner control in the toolbox</b></p>
<p>
To test the newly created control, click on it in the toolbox and draw it on Form1 as shown below. Press F5 to run the application. As you click the up and down arrow in the spinner control the value in the textbox changes, just as we coded it. </p>
<p>
<img src="firstax_9.gif" border=0></p>
<p class=label>
<b>Figure 9. Drawing the spinner control for testing</b></p>
<p>
Congratulations, you have just created your first ActiveX control and you wrote only one line of code! </p>
<h2>Where to go from here?</h2>
<p>
Your next step should be to review the documentation located on <a href="http://www.microsoft.com/vbasic/techmat/">http://www.microsoft.com/vbasic/techmat/</a> and learn more about the great features that can be easily built into your ActiveX controls. Some of these include custom property pages, making your controls data aware, and placing your controls on web pages as an alternative to writing Java applets. </p>
<p>
Once your ActiveX control is created you can immediately put it to use in all Microsoft ActiveX control hosts including: 
<ul type=disc>
<li>
Office 97 <br><br></li>
<li>
Visual Basic4.0 <br><br></li>
<li>
Visual C++™<br><br></li>
<li>
Front Page™ 2.0 </li>
</ul>
<p>
If you wish to place your ActiveX Controls on Web pages, you should use the ActiveX Control Pad. The ActiveX Control Pad ships as a part of the Visual Basic 5.0, Control Creation Edition and can be downloaded for free from <a href="http://www.microsoft.com/workshop/author/cpad/">http://www.microsoft.com/workshop/author/cpad/</a>.</p>
<p>
ActiveX controls can be hosted by all applications whose makers license the Visual Basic for Applications environment. As of November 1996, these include: </p>
<p>
Adobe Systems· http://www.adobe.com/ </p>
<p>
Autodesk · http://www.autodesk.com/ </p>
<p>
B&amp;C Microsystems Inc. · http://www.bcmicro.com/ </p>
<p>
HAHT Software, Inc. · http://www.haht.com/ </p>
<p>
Micrografx · http://www.micrografx.com/ </p>
<p>
NetManage · http://www.netmanage.com/ </p>
<p>
Onpoint Technologies, Inc. · http://www.onpoint.com/ </p>
<p>
OSI Software, Inc. · http://www.osisoft.com/ </p>
<p>
Rockwell Software · http://www.software.rockwell.com/ </p>
<p>
Sagent Technology, Inc. · http://www.sagenttech.com/ </p>
<p>
SAP · http://www.sap.com/ </p>
<p>
StarBase Corporation · http://www.starbasecorp.com/ </p>
<p>
Systems Modeling, Inc. · http://www.sm.com/ </p>
<p>
Tandata Corp. · http://www.tandata.com/ </p>
<p>
The EC Company · http://www.eccompany.com/ </p>
<p>
Vantive · http://www.vantive.com/ </p>
<p>
Visio Corporation · http://www.visio.com/ </p>
<p>
For the most up-to-date list, visit the Visual Basic for Applications website or go directly to the “Who is Licensing Visual Basic for Applications” page. </p>
<p>
If you would like to use your ActiveX controls on Web pages you can use the ActiveX Control Pad to script the interaction between ActiveX controls and VBScript. The ActiveX Control Pad ships as a part of the Visual Basic 5.0, Control Creation Edition and FrontPage '97. </p>
</BODY>
</HTML>

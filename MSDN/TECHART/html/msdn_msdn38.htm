<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 38: Determining the Number of Colors the Screen Supports</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn38"></a></sup>Tip 38: Determining the Number of Colors the Screen Supports</h1>
<p>
Created: March 1, 1995</p>
<h2>Abstract</h2>
<p>
When developing a Visual Basic® application that will be executed on different computer systems, you may need to determine at run time how many colors are supported by the target machine's display driver. This article explains how to do this using three Windows® application programming interface (API) functions.</p>
<h2>Calculating the Number of Colors Supported by the Display Driver</h2>
<p>
The Windows® application programming interface (API) functions <b>CreateDC</b>, <b>DeleteDC</b>, and <b>GetDeviceCaps</b> can be used to calculate how many colors are supported by the display (screen) device driver.</p>
<p>
First, you need to call the <b>CreateDC</b> function. This function creates a device context for the specified device (in this case, it will be the DISPLAY device). To declare this function within your program, include the following <b>Declare</b> statement in the Global Module or General Declarations section of your application's form:</p>
<pre><code>Declare Function CreateDC Lib "GDI" (ByVal lpDriverName As String, ByVal 
 &nbsp; lpDeviceName As String, ByVal lpOutput As String, ByVal lpInitData As Any)
 &nbsp; As Integer
</code></pre>
<p>
Note that this <b>Declare</b> statement must be typed as one single line of text.</p>
<p>
The <b>CreateDC</b> function must be called with four arguments, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=18%><i>lpDriverName</i></td>
<td width=82%>This is a string containing the DOS filename of the device you want to create a device context for.</td>
</tr>
<tr valign=top>
<td width=18%><i>lpDeviceName</i></td>
<td width=82%>If the driver supports more than one device, you must specify the name of the individual device to use.</td>
</tr>
<tr valign=top>
<td width=18%><i>lpOutput</i></td>
<td width=82%>This is the filename or name of a device that will receive the output.</td>
</tr>
<tr valign=top>
<td width=18%><i>lpInitData</i></td>
<td width=82%>Set this to zero to use the device's default initialization values or a DEVMODE structure that contains the values that you want to use.</td>
</tr>
</table><br>
<p>
Because we want to know how many colors the display device supports, we call the <b>CreateDC</b> function by issuing the statement:</p>
<pre><code>hDC = CreateDC("DISPLAY", "", "", "")
</code></pre>
<p>
The <i>hDC</i> variable will contain a handle to the device context just created. We can use this handle to retrieve information about the device through the <b>GetDeviceCaps</b> function.</p>
<p>
The <b>Declare</b> statement for the <b>GetDeviceCaps</b> function is:</p>
<pre><code>Declare Function GetDeviceCaps Lib "GDI" (ByVal hDC As Integer, ByVal nIndex As Integer) As Integer
</code></pre>
<p>
This function takes two arguments: the device's handle and a constant value that specifies the type of information the function should retrieve. In our case, we need to call the <b>GetDeviceCaps</b> function twice to retrieve the number of color planes and the number of bits per pixel for each plane. From these two values, we can calculate how many colors the display driver supports.</p>
<p>
Calculating the number of colors supported by the display device is simple. You need to multiply the number of bits per pixel by the number of color planes. However, since each bit can represent two colors, the number of bits must first be raised to the power of 2. This will give you the total number of colors the display device currently supports.</p>
<p>
The last step you need to do is to call the <b>DeleteDC</b> function. The <b>Declare</b> statement for the <b>DeleteDC</b> function is:</p>
<pre><code>Declare Function DeleteDC Lib "GDI" (ByVal hDC As Integer) As Integer
</code></pre>
<p>
You must call the <b>DeleteDC</b> function to remove the device context that you have created earlier. This removes the device context and also frees the windows resources occupied by the device context.</p>
<h2>Example Program</h2>
<p>
The program below shows how you can determine the number of colors that a device supports. This example calculates the number of colors supported by the display (screen) device driver. The result is displayed in the text box.
<ol>
<li>
Start a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a Text Box control to Form1. Text1 is created by default.<br><br></li>
<li>
Add the following <b>Constants</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that each <b>Declare</b> statement must be typed as one single line of text):<pre><code>Declare Function GetDeviceCaps Lib "GDI" (ByVal hDC As Integer, ByVal nIndex 
 &nbsp; As Integer) As Integer
Declare Function CreateDC Lib "GDI" (ByVal lpDriverName As String, ByVal 
 &nbsp; lpDeviceName As String, ByVal lpOutput As String, ByVal lpInitData As Any)
 &nbsp; As Integer
Declare Function DeleteDC Lib "GDI" (ByVal hDC As Integer) As Integer
Const BitsPixel = 12
Const Planes = 14
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Sub Form_Load()
 &nbsp; Dim NumColors As Long
 &nbsp;&nbsp; Dim hDC As Integer
 &nbsp;&nbsp; Dim X As Integer
 &nbsp;&nbsp; Dim PL As Integer
 &nbsp;&nbsp; Dim BP As Integer
 &nbsp;&nbsp; hDC = CreateDC("DISPLAY", "", "", "")&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; PL = GetDeviceCaps(hDC, Planes)
 &nbsp;&nbsp; BP = GetDeviceCaps(hDC, BitsPixel)&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; NumColors = 2 ^ CLng(PL * BP)
 &nbsp;&nbsp; X = DeleteDC(hDC)&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; Text1.Text = Str$(NumColors)
End Sub
</code></pre>
</li>
</ol>
<h2>Additional Information</h2>
<p>
Knowledge Base Q114709. "How to Use GetDeviceCaps within Visual Basic." (Development Library, Knowledge Base and Bug Lists)</p>
</BODY>
</HTML>

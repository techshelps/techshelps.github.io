<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Client and Server Scripting in Web Pages</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_viscript"></a>Client and Server Scripting in Web Pages</h1>
<p>
Valerie Whitcomb<br>
Visual InterDev Technical Writer</p>
<p>
July 1997</p>
<p class=indent>
<B><b>Editor's Note&nbsp;&nbsp;&nbsp;</b></B>Information in this article applies to version 1.0 of Microsoft Visual InterDev.</p>
<h4>Contents</h4>
<p>
<a href="#viscript_intro">Introduction</a><br>
<a href="#viscript_consider">Considering Your Client and Feature Set</a><br>
<a href="#viscript_avoid">Avoiding Common Scripting Errors</a><br>
<a href="#viscript_incorp">Incorporating Client and Server Script</a><br>
<a href="#viscript_scriptsample">Sample Code: Client and Server Script in a Single Web Page</a></p>
<h2><a name="viscript_intro"></a>Introduction</h2>
<p>
If you are building a Web application, whether for use on the Internet or an intranet, you need to understand how to effectively use both client and server scripting to make the application both dynamic and interactive.</p>
<p>
In this article, you'll read about some typical scenario-based development challenges, and how you can use Active Server Pages (ASP) and server scripting to overcome them. You'll see how to effectively use client scripting to make your pages more interactive and responsive to users. This paper also gives you samples of common scripting tasks in Microsoft® Visual Basic® Scripting Edition (VBScript) and Microsoft Jscript™ for client-side scripting, and VBScript for server scripting.</p>
<h2><a name="viscript_consider"></a>Considering Your Client and Feature Set</h2>
<p>
Client scripting and server scripting serve different purposes. Server scripting, via ASP, can be used to create Hypertext Markup Language (HTML) pages on the fly on the Web server that are then sent to the browser. For example, you can use server scripting to query a database and format the results into an HTML page that is then sent to the user as a static page. All server scripting takes place before the page is sent to the browser.</p>
<p>
Client scripting, on the other hand, is used to make your pages more interactive after they have been sent to the browser. For example, you might use client scripting to validate data entry fields on an HTML form so the user gets immediate feedback when they make a mistake, or to integrate a control or Java applet with another component on the page so that they interact.</p>
<p>
Remember, client scripting depends on the browser that supports it, so you need to be aware of the types of browsers that might access your page. However, you can use server scripting, in ASP pages, to create pages that can reach any browser with just pure HTML.</p>
<p>
If you are developing for the Internet, you probably won't know the capabilities of every client your application may reach. On the other hand, if you are developing for an intranet, you might be able to target a single type of Web browser to exploit its particular strengths. Table 1 will help you evaluate your reach considerations when using client scripting. Current statistics indicate that 80% of the Web browsers used today are capable of interpreting frame sets, background colors, and client script.</p>
<p class=label>
<b>Table 1.Browser Considerations</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>To reach</b></td>
<td class=label width=31%><b>Use client scripting</b></td>
<td class=label width=36%><b>Use server scripting</b></td>
</tr>
<tr valign=top>
<td width=33%>100% of an intranet<sup>*</sup></td>
<td width=31%>Yes</td>
<td width=36%>Yes</td>
</tr>
<tr valign=top>
<td width=33%>80% of the Internet</td>
<td width=31%>Yes</td>
<td width=36%>Yes</td>
</tr>
<tr valign=top>
<td width=33%>100% of the Internet</td>
<td width=31%>No</td>
<td width=36%>Yes, exclusively</td>
</tr>
</table><br>
<p class=mini>
* Assumes that intranets would be using the most recent versions of a script-enabled browser such as Microsoft Internet Explorer.</p>
<p>
While server scripting can be accomplished using Common Gateway Interface (CGI) programs or other techniques, this paper assumes the use of Microsoft Internet Information Server (IIS) 3.0 or above with Active Server Pages to provide server scripting capabilities.</p>
<p>
After you determine which browser and client set you would like to target, you can evaluate the feature set for your Web application to determine which features are most efficiently processed on the client and which on the server. Table 2 lists some general guidelines for choosing whether to implement a feature in client or server script.</p>
<p class=label>
<b>Table 2. General Guidelines to Implement a Feature in Client or Server Script</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=51%><b>For</b></td>
<td class=label width=49%><b>Use</b></td>
</tr>
<tr valign=top>
<td width=51%>Pages without conditional text or formatting</td>
<td width=49%>Straight HTML in .htm files</td>
</tr>
<tr valign=top>
<td width=51%>Security features</td>
<td width=49%>Server script in .asp files</td>
</tr>
<tr valign=top>
<td width=51%>Database updates/inserts/deletes</td>
<td width=49%>Server script in .asp files</td>
</tr>
<tr valign=top>
<td width=51%>Database information formatting and display</td>
<td width=49%>Client or server script in .htm or .asp files</td>
</tr>
<tr valign=top>
<td width=51%>Broadest reach with greatest Web development flexibility</td>
<td width=49%>Server script in .asp files to send straight HTML to client</td>
</tr>
</table><br>
<p>
If you are coming from a client/server environment, you need to be aware of some of the differences when programming a Web-based application. For example, to manage state in a client server application, you could use global variables but in a Web application, which is a series of hyperlinked pages, managing user states between pages is very different. Instead of global variables, you need to use built-in ASP objects to manage user states across pages. In addition, instead of capturing user input using standard window controls, you need to use HTML forms processed using the Request object that is part of ASP. If you want to become familiar with these concepts, you can run through the ASP tutorial included with Microsoft Visual InterDev™ version 1.0 and IIS 3.0. On your Web server machine, open the <b>Microsoft Internet Server program</b> group from the <b>Start</b> menu, and then choose <b>Active Server RoadMap</b>.</p>
<h2><a name="viscript_avoid"></a>Avoiding Common Scripting Errors</h2>
<p>
You can avoid some common scripting errors by practicing these coding conventions:
<ul type=disc>
<li>
Tagging script blocks for easy reading and straightforward evaluation<br><br></li>
<li>
Using values of server variables, not references to server variables in client script<br><br></li>
<li>
Referencing the appropriate object model for the functionality you want to control</li>
</ul>
<h3>Tagging Script Blocks</h3>
<p>
In your pages for client scripting, you need to tag script blocks and identify the language used within the tags. If you do not specify a language, Internet Explorer assumes you are using JScript. If you are using server scripting, remember to save your file with a .asp extension so IIS knows to process the script before sending the page to the browser. Unlike client scripting, IIS assumes VBScript is the default scripting language, although JScript is fully supported as well. The tags you use to identify blocks of script can help you avoid common scripting errors. Table 3 summarizes the use of the script tags.</p>
<p class=label>
<b>Table 3. Script Tags</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Task</b></td>
<td class=label width=35%><b>Client script tag</b></td>
<td class=label width=35%><b>Server script tag<sup>*</sup></b></td>
</tr>
<tr valign=top>
<td width=30%>Start script and identify the language</td>
<td width=35%><code>&lt;SCRIPT LANGUAGE = "MyFavoriteScript"&gt;</code></td>
<td width=35%><code>&lt;%@ LANGUAGE = "MyFavoriteScript"%&gt;<br>
</code>Used once only at the top of the page</td>
</tr>
<tr valign=top>
<td width=30%>Start script</td>
<td width=35%><code>&lt;SCRIPT LANGUAGE = "MyFavoriteScript"&gt;</code></td>
<td width=35%><code>&lt;%</code></td>
</tr>
<tr valign=top>
<td width=30%><sup>*</sup>Hide script from browsers without script capability</td>
<td width=35%><code>&lt;!-- Place script here.<br>
 ---&gt;</code></td>
<td width=35%>Not applicable, server-script is never sent to the client</td>
</tr>
<tr valign=top>
<td width=30%>End script</td>
<td width=35%><code>&lt;/SCRIPT&gt;</code></td>
<td width=35%><code>%&gt;</code></td>
</tr>
<tr valign=top>
<td width=30%>Print server script or variables in client script</td>
<td width=35%><code>Document.write</code></td>
<td width=35%><code>&lt;%= variable name here %&gt;</code></td>
</tr>
</table><br>
<p class=mini>
*If a user has a browser that is not script-enabled, the comment tags prevent the code from appearing in the page as text. The code for server script is executed and stripped before being sent to the client, so you do not need to hide it.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Although you can use <code>&lt;SCRIPT LANGUAGE = "MyFavoriteScript" RUNAT = "Server"&gt;</code> to tag server script in place of the &lt;% %&gt; tags, you will make your pages easier to develop and debug by using the shorthand tags &lt;% %&gt; for inline scripts, while using the full &lt;SCRIPT&gt; tag for function/procedure definitions within a page.</p>
<h3>Client vs. Server Objects</h3>
<p>
While scripting, keep in mind that the objects in your script most likely are part of the functionality you are scripting—not necessarily the scripting language. This means that you use a variety of object models within your pages depending on the functionality you want to control, not the language you are using. If you are using Microsoft Internet Information Server, the object models you are likely to use appear in Table 4. For more information about object models, see the topic "Microsoft Visual InterDev Object Models" in the Overview Section of the online User's Guide for Microsoft Visual InterDev.</p>
<p class=label>
<b>Table 4. Object Models</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>To control</b></td>
<td class=label width=29%><b>Object Model</b></td>
<td class=label width=25%><b>Sample Objects</b></td>
</tr>
<tr valign=top>
<td width=46%>The browser and its documents with client script</td>
<td width=29%>Internet Explorer<br>
(3.0 and higher)</td>
<td width=25%>Frame<br>
History<br>
Navigator<br>
Location<br>
Script<br>
Document</td>
</tr>
<tr valign=top>
<td width=46%></td>
<td width=29%>Netscape Navigator<br>
(3.0 and higher)</td>
<td width=25%>Location<br>
History<br>
Document</td>
</tr>
<tr valign=top>
<td width=46%>HTML pages sent to the browser with server scripting</td>
<td width=29%>Active Server Objects</td>
<td width=25%>Application<br>
Request<br>
Response<br>
Server<br>
Session</td>
</tr>
<tr valign=top>
<td width=46%>Database record display, updates, inserts and deletes with server scripting</td>
<td width=29%>ActiveX Data Objects (ADO)</td>
<td width=25%>Connection<br>
Command<br>
Recordset<br>
Field</td>
</tr>
<tr valign=top>
<td width=46%>Database record display on the browser with client scripting</td>
<td width=29%>Data Source Objects (DSO)</td>
<td width=25%>Available with Internet Explorer 4.0</td>
</tr>
</table><br>
<h3>Using Server Variables in Client Script</h3>
<p>
You can never directly reference server variables or objects in client script. Remember that all server scripting is evaluated on the server, and then stripped out of the page so that the script itself is never sent to the browser. A wall exists between server variables and objects and the client script. If you want to pass server variables to the browser as variables for use in client script, you can do so. The sample below shows the results at each stage of the page rendering. (For a more detailed sample of how server and client script is evaluated, see <a href="#viscript_scriptsample">"Sample Code: Client and Server Script in a Single Web Page"</a> at the end of this document.)</p>
<p class=indent>
<B><b>Tip&nbsp;&nbsp;&nbsp;</b></B>To make client and server script readily distinguishable in the page, specify server script with the shortcut tags of &lt;% %&gt; and enclose client script in comment tags &lt;!--- ---&gt;. The Visual InterDev Source Code editor displays them in two different colors. When you write the client script, you can remember that the server variables colored yellow never reach the client but generate HTML when the page is run; therefore, those references are not available. You can print the variables value to the client by using the &lt;%= %&gt; tag.</p>
<p>
The code in the next two samples shows the difference between using the value of a server variable versus referencing a server variable. The equal sign (=) within the server script tag prints the value of the variable.</p>
<pre><code>&nbsp;&lt;%@ LANGUAGE="VBSCRIPT" %&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME="GENERATOR" Content="Microsoft Visual InterDev 1.0"&gt;
&lt;META HTTP-EQUIV="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;TITLE&gt;Document Title&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;% Dim strMyServerVar
strMyServerVar = 42 %&gt;
The following line of HTML was generated on the server using server scripting to print the value of a server variable into the page before the page was sent to the browser:
&lt;br&gt;
&lt;br&gt;
&lt;strong&gt;
The value of the server variable is &lt;%=Session("strMyServerVar")%&gt;.
&lt;/strong&gt;
&lt;br&gt;
&lt;br&gt;
The following line of HTML was generated on the client to print the value of a client variable into the page after the page was sent to the browser. The value of the client variable has been set equal to the value of the server variable printed above.
&lt;BR&gt;
&lt;BR&gt;
<b>&lt;SCRIPT LANGUAGE = "JavaScript"&gt;</b>
<b>&lt;!---</b>
<b>var x ;</b>
<b>x = &lt;%= strMyServerVar %&gt; ;</b>
<b>if (x == &lt;%= strMyServerVar%&gt;) {</b>
<b> &nbsp; document.write ("&lt;STRONG&gt;The value of the client variable is " + x + ".&lt;/STRONG&gt;")</b>
<b> &nbsp; }</b>
<b>//</b>
<b>---&gt;</b>
<b>&lt;/SCRIPT&gt;</b>

&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
While the script sample above shows a correct approach to passing variables between server and client scripts, the following sample shows two common mistakes made when using server variables in client script. In line 4, the variable does not have server tags identifying it. Line 5 is missing the equal sign indicating that the value should be printed. These mistakes would generate errors when the page is viewed in the browser. The exact errors depend on the scripting language you are using.</p>
<pre><code>1&nbsp; &lt;% strMyServerVar = 42 %&gt;
2&nbsp; &lt;SCRIPT LANGUAGE = "jscript"&gt;
3&nbsp; &lt;!---
4&nbsp; var x ;
5&nbsp; x = strMyServerVar ;
6&nbsp; if (x == &lt;%= strMyServerVar %&gt;) {
7&nbsp;&nbsp;&nbsp;&nbsp; document.write ("&lt;STRONG&gt;The value of the client variable is" + x + 
 &nbsp; "&lt;/STRONG&gt;")
8&nbsp;&nbsp;&nbsp;&nbsp; }
9&nbsp; //
10 ---&gt;
11 &lt;/SCRIPT&gt;
</code></pre>
<h2><a name="viscript_incorp"></a>Incorporating Client and Server Script</h2>
<p>
After you have identified your target client and know the three basic scripting mistakes to avoid, you can start incorporating HTML, client, and server script into your pages. You can choose from a variety of ways to accomplish a particular task such as evaluating browser capabilities, accepting user preferences, and responding to various conditions. Here are some common ways you can script your pages to evaluate and respond to your user's browser, input, or other variables. You can use the tasks and samples below to help you get results on your Web pages.
<ul type=disc>
<li>
Comparing Basic Syntax and Object Models<br><br></li>
<li>
Redirecting to Another URL<br><br></li>
<li>
Changing Content Based on a Condition<br><br></li>
<li>
Displaying Messages<br><br></li>
<li>
Evaluating Browser Capabilities<br><br></li>
<li>
Publishing Database Information</li>
</ul>
<h3>Comparing Basic Syntax and Object Models</h3>
<p>
You probably already know how to use straight HTML to display static information in your page. In selecting a scripting language, for compatibility across both Microsoft and Netscape browsers, use JScript. If you are familiar with Visual Basic, and you know your target browser will always be Internet Explorer, then you might want to choose VBScript. For server scripting, your choices are not limited by the capabilities of the browser. If you have Visual Basic experience, then you will likely find VBScript the easiest to use on the server, although you can also use JScript if desired.</p>
<p>
&nbsp;As a quick comparison of scripting syntax for each language and object model, the following code samples show how to accomplish the simple task of displaying and formatting the word "Hello." These samples illustrate the differences in object models and syntax. You probably won't be using script to enter the majority of your text strings.</p>
<h4>HTML</h4>
<pre><code>&lt;P&gt;&lt;B&gt;Hello&lt;/B&gt;&lt;/P&gt;
</code></pre>
<h4>ActiveX server response object in server script</h4>
<pre><code>&lt;% response.write "&lt;P&gt;&lt;B&gt;Hello&lt;/B&gt;&lt;/P&gt;" %&gt;
</code></pre>
<h4>Browser document object in client JScript</h4>
<pre><code>&lt;SCRIPT LANGUAGE="jscript"&gt;
&lt;!--
document.write ("&lt;P&gt;&lt;B&gt;Hello&lt;/B&gt;&lt;/P&gt;");
//
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
In the following example, the server script in an .asp performs a simple calculation and then shows only the text and the result on the page. Text outside script delimiters appears as text in the page.</p>
<h4>Server script calculation</h4>
<pre><code>&lt;%@ LANGUAGE="MyFavoriteLanguage"%&gt;
&lt;%
x = 2
y = 6
z = x * y
%&gt;
The result is: &amp;nbsp&lt;%=z%&gt;
</code></pre>
<p>
The following client script samples accomplish the same calculation and text display.</p>
<h4>Client JScript calculation</h4>
<pre><code>&lt;SCRIPT LANGUAGE="jscript"&gt;
&lt;!--
var x, y, z ;
set x = 2 ;
set y = 6 ;
set z = x * y ;
document.write ("&lt;P&gt;The result is:&amp;nbsp" + z + "&lt;/P&gt;");
//
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
<b>Client VBScript Calculation</b></p>
<pre><code>&lt;SCRIPT LANGUAGE="vbscript"&gt;
&lt;!--
dim x, y, z
x = 2
y = 6
z = x * y
document.write "&lt;P&gt;The result is:&amp;nbsp" + z + "&lt;/P&gt;"
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h3>Redirecting to Another URL</h3>
<p>
If you move or replace a file, you can ensure that links to that page from other sites still work by using a redirect. By placing code in the previous file, you reroute them from the old file to the new one. Here are some ways you can accomplish this.</p>
<h4>HTML</h4>
<p>
Typically you want the user to go to the next page without interruption. However, if you want the browser to pause for some time to display some announcement text, you can specify a number of seconds after the CONTENT element.</p>
<pre>&lt;META HTTP-EQUIV="refresh" CONTENT="0; URL=MyOtherPage.asp"&gt;
</pre>
<p>
Note that the quotation marks after CONTENT enclose both the pause value and the new URL.</p>
<h4>Client JScript using a browser object</h4>
<pre><code>&lt;SCRIPT LANGUAGE="jscript"&gt;</code></pre>
<p>
&nbsp;&nbsp;&nbsp;&lt;!---</p>
<pre><code>&nbsp;&nbsp;&nbsp;Location.HRef = ("//MyServer/MySiteProject/MyOtherPage.asp");
 &nbsp; ---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Client VBScript using a browser object</h4>
<pre><code>&lt;SCRIPT LANGUAGE="vbscript"&gt;
 &nbsp; &lt;!---
 &nbsp; Location.HRef = ("//MyServer/MySiteProject/MyOtherPage.asp")
 &nbsp; ---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Server VBScript using an ActiveX server object</h4>
<p>
To use the server method, you need to place this code before the open HTML tag so that the redirect is evaluated before the page's header information is read.</p>
<pre><code>&lt;%
Response.Redirect "./MyOtherPage.asp"
%&gt;
&lt;HTML&gt;
</code></pre>
<h3>Changing Content Based on a Condition</h3>
<p>
If you want to display a certain page based on some condition such as a user preference or browser capability, you can change the page presented to the user. Here are several ways using either client scripting or server scripting.</p>
<h4>META tag using JScript writing HTML code</h4>
<p>
If you want to provide a pause before the switch to another URL without scripting a pause, you can use script to modify the &lt;META&gt; tag based on a condition.</p>
<pre><code>&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE = "jscript"&gt;
&lt;!-- 
var somevalue
somevalue = y
if (x == "somevalue") {
 &nbsp; document.write ("&lt;META HTTP-EQUIV='refresh' CONTENT='5 URL=./myotherpage.asp'&gt;");
 &nbsp; }
//
---&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
</code></pre>
<h4>ActiveX server Redirect() method</h4>
<p>
You can use server side script to evaluate conditions and redirect the browser to another page using the <b>Redirect()</b> method of the Response object. The <b>Redirect()</b> method needs to be evaluated before the start of the &lt;HTML&gt; tag portion of the page.</p>
<pre><code>&lt;%
If x = "somevalue" Then
 &nbsp; Response.Redirect "./myotherpage.asp"
End If
%&gt;
&lt;HTML&gt;
</code></pre>
<h4>ActiveX server Include design time control</h4>
<p>
If you want to display a page based on a condition but you want to combine a couple of pages into one display page, you can use the Include design time control. The design time controls are available from the Visual InterDev <b>Insert</b> menu. If you do not want to modify the control through the user interface, you can leave out the metadata and use just the include statements as shown in this sample.</p>
<pre><code>&lt;% If x = "somevalue" Then %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#INCLUDE FILE="../myotherpage.asp"--&gt;
 &nbsp; &lt;% Else %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#INCLUDE FILE="../someotherpage.asp"--&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#INCLUDE FILE="../anotherpage.asp"--&gt;
 &nbsp; &lt;% End If %&gt;
&lt;%
</code></pre>
<h4>Client JScript and a browser object</h4>
<pre><code>&lt;SCRIPT LANGUAGE="JScript"&gt;
&lt;!---
if (x=="somevalue") {
 &nbsp; location.href = "./myotherpage.asp";
 &nbsp; }
else {
 &nbsp; }
//
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Client VBScript and a browser object</h4>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!---
If x = "somevalue" then
 &nbsp; location.href = "./myotherpage.asp"
Else
End If
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h3>Validating Input and Displaying Messages</h3>
<p>
In client code, you can use the <b>Alert</b> and <b>Prompt</b> methods of the browser to display a message or accept input. Remember, displaying popup browser messages in server script is not possible as the server script only runs on the server.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>VBScript offers the <b>MsgBox()</b> function so that you can extend easily the number and type of buttons your message box displays. See the VBScript Reference for more information.</p>
<p>
You can make sure users enter values into your form and provide prompts to gather missing values. The following examples in JScript and VBScript verify that a value was entered into the text box of a form. If the text box is empty, a prompt appears requesting a value.</p>
<pre><code>&lt;FORM METHOD="post" NAME="frmPrompts"&gt;
&lt;P&gt;Your Answer Here&amp;nbsp&amp;nbsp&lt;INPUT TYPE="text" NAME="txtPrompts"&gt;&lt;/P&gt;
&lt;P&gt;&lt;INPUT TYPE="button" NAME="btnOK" VALUE="OK" onclick="checkforvalue()"&gt;&lt;/P&gt;
&lt;/FORM&gt;
</code></pre>
<h4>Client JScript using the Prompt and Alert methods</h4>
<pre><code>&lt;SCRIPT LANGUAGE="jscript"&gt;
&lt;!---
function checkforvalue() {
 &nbsp; if (frmPrompts.txtPrompts.value == "") {
 &nbsp;&nbsp;&nbsp;&nbsp; Alert ('Please provide an answer.');
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; else {
 &nbsp;&nbsp;&nbsp;&nbsp; frmPrompts.submit();
 &nbsp;&nbsp;&nbsp;&nbsp; }
}
//
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Client VBScript using the Prompt and Alert methods</h4>
<pre><code>&lt;SCRIPT LANGUAGE="vbscript"&gt;
&lt;!---
Sub checkforvalue()
 &nbsp; If frmPrompts.txtPrompts.value = "" Then 
 &nbsp;&nbsp;&nbsp;&nbsp; Alert ("Please provide an answer.")
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; Else 
 &nbsp;&nbsp;&nbsp;&nbsp; frmPrompts.submit()
 &nbsp; End If
End Sub
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h3>Evaluating Browser Capabilities</h3>
<p>
If you are targeting the Internet, you might want to evaluate the user's browser and process the pages based on the browser's capabilities. For example, the following server script sample uses the type of browser to determine what is sent to the browser.</p>
<p>
If you want to change the text or formatting based on the type of browser, you can use server side scripting to determine the browser's capabilities and provide HTML code based those capabilities. If you want more information about the capabilities that you can evaluate, search for "Browser Capabilities Component" in the Visual Studio documentation set. Although you can use client script to evaluate the browser's navigation object, server script is the more efficient method and the only one shown here.</p>
<p>
In this example, if the browser can interpret tables, then HTML table tags are provided to the browser; otherwise, the text is formatted using the PRE tag to preserve the white space between text strings.</p>
<pre><code>&nbsp;&lt;% Set bc = Server.CreateObject("MSWC.BrowserType")
 &nbsp;&nbsp; If bc.Tables = True Then %&gt;
&lt;TABLE BORDER=1&gt;
  &lt;TR&gt;&lt;TH&gt;Food&lt;/TH&gt;&lt;TH&gt;Category&lt;/TH&gt;&lt;/TR&gt;
  &lt;TR&gt;&lt;TD&gt;Banana&lt;/TD&gt;&lt;TD&gt;Fruit&lt;/TD&gt;&lt;/TR&gt;
  &lt;TR&gt;&lt;TD&gt;Carrot&lt;/TD&gt;&lt;TD&gt;Vegetable&lt;/TD&gt;&lt;/TR&gt;
  &lt;TR&gt;&lt;TD&gt;Salmon&lt;/TD&gt;&lt;TD&gt;Seafood&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;% Else %&gt;
&lt;PRE&gt;
Food&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Category
----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------
Banana&nbsp;&nbsp;&nbsp;&nbsp; Fruit
Carrot&nbsp;&nbsp;&nbsp;&nbsp; Vegetable
Salmon&nbsp;&nbsp;&nbsp;&nbsp; Seafood
&lt;/PRE&gt;
&lt;% End If %&gt;
</code></pre>
<h3>Publishing Database Information</h3>
<p>
You can create a record set from your database, files, or SQL queries to merge with HTML and display in a Web page. Although you could write CGI script, Visual InterDev and .asp files make server data publishing easy through IIS and its Active Data Objects (ADO). With ADO, all processing is typically done on the server so just broad-reach HTML is sent to the browser. Also, you can use the Advanced Data Connector to bring database information to the browser for client manipulation. Beginning with Internet Explorer 4.0 and the introduction of Dynamic HTML, the browser will also provide client controls, such as Data Source Objects (DSOs), that can perform data-binding functions. You will find a sample of a new control for use with Internet Explorer 4.0 in the following samples. For more information, visit the Microsoft Internet Explorer Web site (<a href="http://www.microsoft.com/ie/ie40/">http://www.microsoft.com/ie/ie40/</a>). For the purposes of this document, we will limit our discussion to the use of server data binding using ASP and ADO.</p>
<h3>&nbsp;Server VBScript with ADO Objects</h3>
<p>
You can create a connection and populate a record set using ADO. Here's a sample of code that uses an Open Database Connectivity (ODBC) connection to connect to a database, and populate a variable named <i>rsMyRecordSet</i>. The following code can be included in one set of server script tags, &lt;% %&gt;.
<ol>
<li>
Specify an ODBC connection and connect to your database.<pre><code>&lt;% Set MyConnection = Server.CreateObject("ADODB.Connection")
MyConnection.Open Session("MyConnection_ConnectionString"), Session("MyConnection_RuntimeUserName"), Session("MyConnection_RuntimePassword")%&gt;
</code></pre>
</li>
<li>
Create and populate a record set.<pre><code>&lt;%
  Set cmdTemp = Server.CreateObject("ADODB.Command")
  Set rsMyRecordSet = Server.CreateObject("ADODB.Recordset")
  cmdTemp.CommandText = "SELECT Field1, Field2, FROM MyTable"
  cmdTemp.CommandType = 1
  Set cmdTemp.ActiveConnection = MyConnection
 rsMyRecordSet.Open cmdTemp, , 1, 3 %&gt;
</code></pre>
</li>
<li>
Format and display the field values. Here's a sample of a loop that displays all the fields from a single record. Of course, you can combine HTML codes and your scripting to create the display you want.<pre><code>If Not rsMyRecordSet.EOF Then
dim FldTemp
For Each fldTemp in rsMyRecordSet.fields
Response.Write fldTemp.Value
Next
Else
Response.Write "It's the end of the file!"
End If
</code></pre>
</li>
</ol>
<h3>Design-Time Controls</h3>
<p>
If you want to quickly generate script for connecting, displaying, and navigating your records, you can do so with little manual coding using Visual InterDev. All of the database connection and record set navigation in Figure 1 was generated using the Data Range Header and Footer controls. Only a few lines of code were added for formatting the fields.</p>
<p>
<img src="viscript1.gif" border=0></p>
<p class=label>
<b>Figure 1. Connecting, displaying, and navigating with design-time controls</b></p>
<p>
To get similar results, you need to have a data connection in your Web project that can be used to build the ADO connection string information automatically. Next, insert Data Range Header and Footer controls into the page. You will need to add HTML code and server script for displaying the records. For complete information about the design-time controls, look under "Design Time ActiveX Controls" in the Visual InterDev Developer's Reference.</p>
<p>
The Data Range Header control automatically provides the following functionality:
<ul type=disc>
<li>
Specifies the control's meta-data based on the choices made when the control was created or edited<br><br></li>
<li>
Initializes the navigation bar that is specified in the Data Range Footer control<br><br></li>
<li>
Checks for a RecordSet object and then creates one if needed<br><br></li>
<li>
Sets a filter, checks for an empty record set, and then specifies values for variables for the navigation bar<br><br></li>
<li>
Opens the Do loop statement used along with the Data Range Footer control to navigate, read, and display the records in the record set</li>
</ul>
<p>
To actually display the record set, you need to add the formatting code and specify the fields to show. Here's an example of the HTML code and server-script used in Figure 1.
<ul type=disc>
<li>
&nbsp;HTML code and server script inserted outside script delimiters before the Do Loop provided by the Data Range Header control<pre><code>%&gt;
&lt;H3&gt;Number of Customer Claims&lt;/H3&gt;
&lt;TABLE WIDTH=100% BGCOLOR=#D4EBF9 &gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;No.&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;ID&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Name&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;City&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;State&lt;/B&gt;&lt;/TD&gt;
&lt;%
</code></pre>
</li>
<li>
HTML code and server script inserted outside script delimiters before the Do Loop provided by the Data Range Header control.<pre><code>%&gt;
&lt;TR&gt;
  &lt;TD&gt;&lt;%= DataRangeHdr1("Claims") %&gt;&lt;/TD&gt;
  &lt;TD&gt;&lt;%= DataRangeHdr1("Customer_ID") %&gt;&lt;/TD&gt;
  &lt;TD&gt;&lt;%= DataRangeHdr1("First_Name") %&gt;&lt;%= DataRangeHdr1("Last_Name") %&gt;&lt;/TD&gt;
  &lt;TD&gt;&lt;%= DataRangeHdr1("City") %&gt;&lt;/TD&gt;
  &lt;TD&gt;&lt;%= DataRangeHdr1("State") %&gt;&lt;/TD&gt;
&lt;/TR&gt;
%&gt;
</code></pre>
</li>
<li>
HTML code and server script inserted outside script delimiters after the Do Loop completed by the Data Range Footer control.<pre><code>%&gt;
&lt;/TABLE&gt;
&lt;%
</code></pre>
</li>
</ul>
<p>
The Data Range Footer control automatically provides the following functionality:
<ul type=disc>
<li>
Specifies the control's meta-data based on choices made when the control was created or edited<br><br></li>
<li>
Completes the Do Loop statement for moving through the record set and formatting the data with HTML code<br><br></li>
<li>
Specifies the navigation bar for moving through the record set</li>
</ul>
<h4>Client JScript or VBScript and DSO in Internet Explorer 4.0</h4>
<p>
At the time of this writing, most Web applications publish data by merging data with HTML formatting in a page on the server and sending straight HTML to the client. Soon the DSOs available with Internet Explorer 4.0 will give the client a way to read and manipulate stored information. Here is a sample of the Tabular Data Control on the client side.
<ol>
<li>
Specify the data bound object.<pre><code>&lt;SCRIPT&gt;
&lt;!--
&lt;OBJECT ID=MyDataControl CLASSID="clsid:333C7BC4-450F-11DO-BC04-0080C7055A83" WIDTH=0 HEIGHT=0&gt;
  &lt;PARAM NAME=DataURL VALUE="MyDataFile.txt"
  &lt;PARAM NAME=TextQualifier VALUE="."
  &lt;PARAM NAME=UseHeader VALUE=True
&lt;/OBJECT&gt;
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
</li>
<li>
If appropriate, specify HTML form elements to get values from the user and button to modify the display of the data.<pre><code>&lt;FORM&gt;
&lt;INPUT TYPE = "textbox" NAME="txtfield2"&gt;
&lt;INPUT TYPE = "button" NAME="butFilter VALUE="Filter Records" onClick="field2_filter()"&gt;
&lt;/FORM&gt;
</code></pre>
</li>
<li>
Write a filter function that specifies the three parts of the filter expression, the field to evaluate, the comparison operator, and the value.<pre><code>&lt;SCRIPT&gt;
&lt;!--
function Field2_Filter() {
MyDataControl.FilterColumn="Field2"
MyDataControl.FilterCriterion="="
MyDataControl.FilterValue=txtfield2.value
---&gt;
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ol>
<p>
Keep checking Microsoft Site Builder Workshop (<a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a>) to get the latest objects for your pages and the most recent information about creating Web solutions.</p>
<h2><a name="viscript_scriptsample"></a>Sample Code: Client and Server Script in a Single Web Page</h2>
<p>
You can take advantage of the strengths of your server and your client by scripting both in a single page. The following sample code, although not a practical example of accomplishing a task, gives you an idea of how HTML, client script, and server script can be written into one page and how they are processed at each step.</p>
<p>
The code includes a server variable, <i>MyServerVar</i>, and a client variable, <i>MyClientVar</i>. It also prints simple text strings to identify each value. To better show the difference between the client script and the HTML the client displays, the code includes a client IF statement.</p>
<p>
Here are the three different views of the sample provided in this paper.
<ul type=disc>
<li>
<a href="#viscript_source">Source Code in Your Source Code Editor</a> <br><br></li>
<li>
<a href="#viscript_client">HTML and Client Script in View Source Code</a><br><br></li>
<li>
<a href="#viscript_browser">HTML Code Displayed in the Client Browser</a></li>
</ul>
<h3><a name="viscript_source"></a>Source Code in Your Source Code Editor</h3>
<p>
After you finish coding your page, it might look similar to this sample. You can see the server code marked with the server script tags, &lt;% %&gt; and the client script shown with &lt;SCRIPT&gt; tags.</p>
<pre><code>&lt;%@ LANGUAGE="VBSCRIPT" %&gt; &lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME="GENERATOR" Content="Microsoft Visual InterDev 1.0"&gt;
&lt;META HTTP-EQUIV="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;TITLE&gt;Sample Script Evaluation&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;-- *** Server Script *** ---&gt;
&lt;% MyServerVar = 6 %&gt;
&lt;P&gt;This value was evaluated on the server &nbsp;" &lt;% MyServerVar %&gt;"&lt;/P&gt;

&lt;-- *** Client Script with a Server Script Variable *** ---&gt;
&lt;SCRIPT LANGUAGE="jscript"&gt;
&lt;!---
var MyClientVar ;
MyClientVar = (&lt;%= MyServerVar %&gt; + 1) ;
document.write ('&lt;P&gt;This value is a client value &nbsp;' + MyClientVar + '&lt;/P&gt;');

if(MyClientVar == 42) {
&nbsp;&nbsp;&nbsp;&nbsp;document.write ('&lt;P&gt;The server and client values are equal ' + MyClientVar + '&lt;/P&gt;');
&nbsp;&nbsp;&nbsp;&nbsp;} 
else { 
&nbsp;&nbsp;&nbsp;&nbsp;document.write ("&lt;P&gt;The server and client value are not equal because our script told the client to add 1.&lt;/P&gt;");
}
//
---&gt;
&lt;/SCRIPT&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3><a name="viscript_client"></a>HTML and Client Script in View Source Code</h3>
<p>
When you test the page in your browser, the server reads your code and processes only the code within server script tags, &lt;% %&gt;. After processing the server script, the rest is passed to the client as straight HTML with embedded client script. The code below is what the browser interprets and also what the user would see if using <b>View Source Code</b>. In this sample, you will notice that the server script is stripped out and the literal value of the server variable, "6," appears within the embedded client script.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;META NAME="GENERATOR" Content="Microsoft Visual InterDev 1.0"&gt;
&lt;META HTTP-EQUIV="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;TITLE&gt;Sample Script Evaluation&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;-- *** Server Script was here *** ---&gt;
&lt;P&gt;This value was evaluated on the server 6&lt;/P&gt;
&lt;-- *** Client Script is here with the Value from the Server Variable *** ---&gt;
&lt;SCRIPT LANGUAGE="jscript"&gt;
&lt;!---
var MyClientVar ;
MyClientVar = (6 + 1) ;
document.write ('&lt;P&gt;This value is a client value &nbsp;' + MyClientVar + '&lt;/P&gt;');

if(MyClientVar == 42) { 
&nbsp;&nbsp;&nbsp;&nbsp;document.write ('&lt;P&gt;The server and client values are equal: ' + MyClientVar + '&lt;/P&gt;');
&nbsp;&nbsp;&nbsp;&nbsp;} 
else { 
&nbsp;&nbsp;&nbsp;&nbsp;document.write ("&lt;P&gt;The server and client value are not equal because our script told the client to add 1.&lt;/P&gt;");
}
//
---&gt;
&lt;/SCRIPT&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3><a name="viscript_browser"></a>HTML Code Displayed in the Client Browser </h3>
<p>
The client script interpreter executes the code within the client script tags, &lt;SCRIPT&gt;.</p>
<pre><code>&nbsp;&lt;P&gt;This value was evaluated on the server 6&lt;/P&gt;
&lt;P&gt;This value is a client value 7&lt;/P&gt;
&lt;P&gt;The server and client value are not equal because our script told the client to add 1.&lt;/P&gt; </code></pre>
<p>
The browser interprets and displays these HTML codes as shown in Figure 2.</p>
<p>
<img src="viscript2.gif" border=0></p>
<p class=label>
<b>Figure 2. The results of HTML code displayed in the client browser.</b></p>
<p class=label>
</p>
</BODY>
</HTML>

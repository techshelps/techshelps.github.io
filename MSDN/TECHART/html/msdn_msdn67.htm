<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 67: Returning Focus to a Specific Control After Executing WinHelp</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn67"></a></sup>Tip 67: Returning Focus to a Specific Control After Executing WinHelp</h1>
<p>
Created: April 24, 1995</p>
<h2>Abstract</h2>
<p>
You can add online Help to your Visual Basic® application by using the Windows® application programming interface (API) <b>WinHelp</b> function. However, you need to keep the focus on the control that had the focus just before you executed the <b>WinHelp</b> function. This article explains how a control can retain the focus after calling <b>WinHelp</b>.</p>
<h2>Using Form-Level Variables to Retain Focus</h2>
<p>
Almost every application developed for Windows® includes a Help command. In a Visual Basic® application, you can attach a Help command to a <b>Command Button</b> control. When the user clicks on the Command Button, your program calls the Windows application programming interface (API) <b>WinHelp</b> function to display the actual Help file.</p>
<p>
After the user exits the Help program, however, the <b>Command Button</b> control now has the focus. It would be preferable to have the focus set to the control (such as a <b>Text Box</b> control) that had the focus before <b>WinHelp</b> was executed.</p>
<p>
You can force your application to automatically retain a control's focus by defining a Form-level variable as a control. When the focus is moved to a different control, such as a <b>Text Box</b>, the Form-level variable should be set to the control that is getting the focus. Then, after displaying the Help file, the focus can be set back to the control by using the Form-level variable.</p>
<p>
In the example program below, the focus returns to the <b>Text Box</b> control each time the Help Command Button is clicked. In other words, the Command Button never retains the focus.</p>
<h2>Example Program</h2>
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement should be typed as a single line of code):<pre><code>Const HELP_CONTENTS = &amp;H3

Declare Function WinHelp Lib "User" (ByVal hWnd As Integer, ByVal lpHelpFile As 
 &nbsp; String, ByVal wCommand As Integer, dwData As Any) As Integer

Dim ControlWithFocus As Control
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add the following code to the GotFocus event for Text1:<pre><code>Sub Text1_GotFocus()
  Set ControlWithFocus = Text1
End Sub
</code></pre>
</li>
<li>
Add a second <b>Text Box</b> control to Form1. Text2 is created by default.<br><br></li>
<li>
Add the following code to the GotFocus event for Text2:<pre><code>Sub Text2_GotFocus()
  Set ControlWithFocus = Text2
End Sub
</code></pre>
</li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Help".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Sub Command1_Click()
  Dim RVal As Integer
  RVal = WinHelp(Form1.hWnd, "c:\vb\vb.hlp", HELP_CONTENTS, 0)
  ControlWithFocus.SetFocus
End Sub
</code></pre>
</li>
</ol>
<p>
Run the program. There are two <b>Text Box</b> controls and one <b>Command Button</b> control shown on the form. Notice that Text1 currently has the focus. Click the Command Button to display the Contents window in Help. Exit Help. The Text1 control should still have the focus. Move the focus to the second <b>Text Box</b> control, Text2. Click the Help command button a second time and exit Help. The second <b>Text Box</b> control should have the focus. The <b>Command Button</b> control never retains the focus.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Office Compatible 97--Document Properties</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_docprop"></a>Office Compatible 97—Document Properties</h1>
<p>
by Ross Comer<br>
Development Lead, Microsoft Office Compatible</p>
<p>
June 1996</p>
<h2>Abstract</h2>
<p>
This article provides a detailed description of the Document Properties feature of Office Compatible, and the steps necessary to implement this feature into your custom application. It also provides sample code for a C/C++ interface. An OLE Automation interface is only available for this feature through the Application Object Model of the Office applications.</p>
<h2>Description</h2>
<p>
Document properties are a collection of properties attached to files that use the OLE Storage mechanism. There are both “Built-in” and “Custom” property sets defined. Built-in document properties are items such as Author, Keywords, and Last Modified Date. Custom properties are properties defined by an application or user.&nbsp; For example, Company XYZ has a custom property, DeptHomePage, which lists the Intranet home page of the department which created the document. Authors put this property in their document, then display it in a footer so whoever reads the document can go directly to the Intranet home page of that department.</p>
<p>
Office Compatible provides OLE Automation and C interfaces to allow applications to take advantage of Document Property technology and to bring up the Document Property dialogs.</p>
<h3>Dialogs</h3>
<p>
The Properties dialog allows the user to view standard, pre-defined properties for a document using the General, Summary, Statistics, and Contents tabs.</p>
<p>
<img src="docprop_1.gif" border=0></p>
<p>
Using the Custom tab of the Properties dialog, the user can view custom properties already created for the document, or create new ones. Custom properties can also be created programmatically. </p>
<h2>C Interface</h2>
<p>
To use the Document Property functionality, you will need to get the Document Property Interface.</p>
<p>
Use the PidpCreateDocProps() method in the IOfficeCompatible to get the Document Property Interface.. If the result of this call is non-NULL, the call succeeded and you are holding a new Document Property object. Once you have the object, you can manipulate its properties as needed.</p>
<pre><code>&nbsp;&nbsp;&nbsp;// Get the Document Properties Interface
 &nbsp; IMsocDocProps *pDocProps = pOC-&gt;PidpCreateDocProps();
</code></pre>
<p>
Use the Release method of the Document Property to release the object.</p>
<h3>The IMsocDocProps Interface</h3>
<p>
Load and Save can take either an OLE Storage or a filename. The filename must be a complete filename, including filepath, and must point to an existing file that is an OLE Storage.&nbsp; Msocf can be one of the following: msocfDefault, msocfSaveAs95, or msocfSaveAs97. For typical applications, use MsocfDefault. Use msocfSaveAs95 when saving to a document that is to be read by an Office ’95 document.</p>
<pre><code>&nbsp;&nbsp;&nbsp;HRESULT Load(LPSTORAGE lpStg);
 &nbsp; HRESULT Save(LPSTORAGE lpStg, UINT msocf);
 &nbsp; HRESULT Load(LPCWSTR wzFileName); // LoadFile in C
 &nbsp; HRESULT Save(LPCWSTR wzFileName, UINT msocf) // SaveFile in C
</code></pre>
<p>
The next three interfaces get pointers to the Built-in and Custom document objects along with the Hyperlink objects.</p>
<pre><code>&nbsp;&nbsp;&nbsp;HRESULT GetBuiltinDocProps(IMsocBuiltinDocProps** ppBltDocProps);
 &nbsp; HRESULT GetCustomDocProps(IMsocCustomDocProps** ppCustDocProps);
 &nbsp; IMsocHLinks* PihlGetHLinks(); 
</code></pre>
<p>
The following interface lets you know if the properties were loaded from a 97 document or later, allowing forward compatibility in your application.</p>
<pre><code>&nbsp;&nbsp;&nbsp;BOOL FLoadedAs97();

 &nbsp; HRESULT ShowDialog(HWND hwndParent, LPWSTR wzCaption, LPWSTR wzFileName, DWQUERYLD pfnDwQuery);
 &nbsp; HRESULT Release();&nbsp; 
</code></pre>
<h3>The IMsocBuiltinDocProps Interface</h3>
<p>
The IMsocBuiltinDocProps object allows access to the built-in document properties and the thumbnail image of a document.</p>
<p>
GetProp and SetProp are used to get and set the values of individual properties.</p>
<pre><code>&nbsp;&nbsp;&nbsp;HRESULT GetProp(UINT uProp, VARIANT* pvarValue);
 &nbsp; HRESULT SetProp(UINT uProp, VARIANT* pvarValue);
</code></pre>
<p>
The uProp value of GetProp and SetProp is one of the following:</p>
<pre><code>PROP_TITLE
PROP_SUBJECT
PROP_AUTHOR
PROP_KEYWORDS
PROP_COMMENTS
PROP_TEMPLATE
PROP_LASTAUTH
PROP_REVISION // PROP_REVISION is a number formated as a string
PROP_APPNAME

  // Times
PROP_TOTALEDIT
PROP_LASTPRINT
PROP_CREATION
PROP_LASTSAVE

  // Integer stats
PROP_PAGES
PROP_WORDS
PROP_CHARS
PROP_SECURITY
PROP_VERSION

//// Office Extended Document properties
// Strings
PROP_CATEGORY
PROP_FORMAT
PROP_MANAGER
PROP_COMPANY
PROP_GUID
PROP_LINKBASE

  // Integer statistics
PROP_BYTES
PROP_LINES
PROP_PARAS
PROP_SLIDES
PROP_NOTES
PROP_HIDDENSLIDES
PROP_MMCLIPS
PROP_CCHWSPACES // count of characters including spaces

  // Booleans
PROP_SHAREDDOC
PROP_HYPERLINKSCHANGED
</code></pre>
<p>
Get, Set, and Free Thumbnail can be used to view and modify the thumbnail image of a document.</p>
<pre><code>&nbsp;&nbsp;&nbsp;HRESULT GetThumbnail(LPSINAIL *lplpThumbnail);
 &nbsp; HRESULT SetThumbnail(LPSINAIL lpThumbnail); 
 &nbsp; // FreeThumbnail must be used to free 
 &nbsp; // the lpThumbnail returned from GetThumbnail()
 &nbsp; VOID FreeThumbnail(LPSINAIL lpThumbnail);
</code></pre>
<p>
The Thumbnail should be in the following format:</p>
<pre><code>typedef struct tagSINAIL
{
 &nbsp; DWORD cbData;&nbsp;&nbsp;&nbsp;&nbsp; // size of *pdata
 &nbsp; DWORD cftag;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // either 0,-1,-2,-3, or positive. This decides the size of pFMTID.
 &nbsp; BYTE *pbFMTID;&nbsp;&nbsp;&nbsp; // bytes representing the FMTID
 &nbsp; BYTE *pbData;&nbsp;&nbsp;&nbsp;&nbsp; // bytes representing the data
} SINAIL;
typedef SINAIL FAR * LPSINAIL;
</code></pre>
<h3>The IMsocCustomDocProp Interface</h3>
<p>
The IMsocCustomDocProp object allows access to the custom document properties of a document.</p>
<p>
Get and set the property name</p>
<pre><code>HRESULT SetName(LPWSTR wzName);
HRESULT GetName(LPWSTR wzName, UINT cbMax);
</code></pre>
<p>
Get and set the property value</p>
<pre><code>HRESULT SetValue(VARIANT* pvarValue);
HRESULT GetValue(VARIANT** ppvarValue);
</code></pre>
<p>
Get and set a string that the application uses as a “source” to the linked value</p>
<pre><code>DWORD CchLinkSource();
HRESULT GetLinkSource(LPWSTR wzLink, UINT cbMax);
HRESULT SetLinkSource(LPWSTR&nbsp; wzLink);
</code></pre>
<p>
Whether a link exists to the document</p>
<pre><code>BOOL FGetLinkToContent();&nbsp; 
HRESULT SetLinkToContent(BOOL fLink);
</code></pre>
<p>
Is the link still valid (exists, available, etc)</p>
<pre><code>BOOL FGetLinkValidity(); 
HRESULT SetLinkValidity(BOOL fValidLink);
</code></pre>
<p>
Whether it is visible in the dialog</p>
<pre><code>BOOL FGetVisible(); 
HRESULT SetVisible(BOOL fVisible);

HRESULT Delete();&nbsp; // Deletes this property from CustomDocumentProperties set
HRESULT Release();&nbsp; // release and free this object
</code></pre>
<h3>The IMsocHLink Interface</h3>
<p>
The IMsocHLink object allows access to the hyperlink properties of a document. It is not possible to add a hyperlink or physically delete a hyperlink, although you may use MarkAsDeleted to mark a hyperlink as deleted, and it will be removed when the document is loaded by the application the next time.</p>
<p>
Get and set the address and sub-address of the hyperlink properties</p>
<pre><code>DWORD CchAddress();
HRESULT SetAddress(LPWSTR wz);
HRESULT GetAddress(LPWSTR wz);
DWORD CchSubAddress();
HRESULT GetSubAddress(LPWSTR wz);
HRESULT SetSubAddress(LPWSTR wz);
DWORD GetStatus();
HRESULT MarkAsDeleted();
DWORD DwGetAppData();
DWORD SetAppData(DWORD dwData);
HRESULT Release();
</code></pre>
<h3>Sample C Code</h3>
<pre><code>// Get the OfficeCompatible interface
IOfficeCompatible *pOC = CreateOfficeCompatible(L”SampleApp”, L”SampleAplication”)

if (pOC != NULL)
 &nbsp; {
 &nbsp; // Create a Document Property Object
 &nbsp; IMsocDocProps *pDocProps = pOC-&gt;PidpCreateDocProps();

 &nbsp; if (pDocProps == NULL)
 &nbsp;&nbsp;&nbsp;&nbsp; return();

 &nbsp; if (FAILED(pDocProps-&gt;Load(L”\test.doc”)))
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; pDocProps-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp; return();
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp; pDocProps-&gt;ShowDialog(hwndParent, L”Caption”, L”\test.doc”, NULL);

 &nbsp; IMsocBuiltinDocProps** pBuiltInDocProps =
 &nbsp;&nbsp;&nbsp;&nbsp; pDocProps-&gt;GetBuiltinDocProps(pBuiltInDocProps);

 &nbsp; if (pBuiltInDocProps == NULL)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; pDocProps-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp; return();
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp; VARIANT var;

 &nbsp; GetProp(</code>PROP_TITLE<code>, &amp;var);</code>

<code> &nbsp; }</code>
</pre>
<h2>Automation Interface</h2>
<p>
DocumentProperties are also available through the OfficeCompatible Automation interfaces.&nbsp; OfficeCompatible uses the same automation as Office. Documentation, and sample code for Document Property automation can be found in the Office help files.</p>
</BODY>
</HTML>

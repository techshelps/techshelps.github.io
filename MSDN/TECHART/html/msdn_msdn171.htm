<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 171: Determining RGB Color Values</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn171"></a></sup>Tip 171: Determining RGB Color Values</h1>
<p>
December 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how to determine the red, green, and blue components for a specific color in your Microsoft® Visual Basic® application.</p>
<h2>Determining the RGB Components of a Specific Color</h2>
<p>
Using color in a Microsoft® Visual Basic® application adds visual appeal to your program. The Visual Basic <b>RGB</b> function lets you tell the system what color you want to use.</p>
<p>
Each color used under the Microsoft Windows® operating system is actually made up from a combination of the colors red, green, and blue. Depending on what value is assigned to each of these components, one of many colors can be selected.</p>
<p>
However, you may need to determine the actual red, green, and blue values that constitute a given color. The example program below uses the <b>Mod</b> operator to separate the red, green, and blue components of the specified color. When you have these individual values, you can then change them to suit your particular needs.</p>
<h2>Example Program</h2>
<p>
This program shows how to separate the individual red, green, and blue components from a given color.
<ol>
<li>
Create a new project in Visual Basic, Form1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>BackColor</b> property to any color wanted.<br><br></li>
<li>
Add the following code to the Click event for Command1 (note that the "MsgBox =" statement must be typed as a single line of code):<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim C As Long
 &nbsp;&nbsp; Dim Red As Integer
 &nbsp;&nbsp; Dim Green As Integer
 &nbsp;&nbsp; Dim Blue As Integer

 &nbsp;&nbsp; C = Command1.BackColor
 &nbsp;&nbsp; Red = C Mod &amp;H100
 &nbsp;&nbsp; C = C \ &amp;H100
 &nbsp;&nbsp; Green = C Mod &amp;H100
 &nbsp;&nbsp; C = C \ &amp;H100
 &nbsp;&nbsp; Blue = C Mod &amp;H100
 &nbsp;&nbsp; MsgBox "Red = " &amp; Str$(Red) &amp; " Green: " &amp; Str$(Green) &amp; " Blue = " 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; Str$(Blue)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the <b>Command Button</b> control. A message box appears indicating the individual red, green, and blue color values that represent the button's <b>BackColor</b> property.</p>
</BODY>
</HTML>

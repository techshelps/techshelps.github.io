<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 130: Using the Undo Feature with a Text Box Control</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn130"></a></sup>Tip 130: Using the Undo Feature with a Text Box Control</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
Almost all Microsoft® Windows®-based applications provide an Edit menu on which you can select the Undo command to reverse the most recently made changes to an edit control. This article explains how you can add this functionality to your own Microsoft Visual Basic® application.</p>
<h2>Using SendMessage to Undo Edit Control Changes</h2>
<p>
When you modify the contents of an edit control in Microsoft® Visual Basic®, such as a <b>Text Box</b> control, the data you add or delete is saved in an internal buffer by the Microsoft Windows® operating system. You can use the Windows application programming interface (API) <b>SendMessage</b> function to allow your user to retrieve the modified text.</p>
<p>
Let's assume that you have typed some text into a <b>Text Box</b> control. You now want to delete some of that text. To do this, you select the text and press the DEL key. The text you selected is removed from the <b>Text Box</b> control. You can retrieve this text within a Visual Basic application by sending an EM_UNDO message to Windows. The EM_UNDO message tells the operating system that you want to undo the last change you made to the edit control. In this case, the edit control is the <b>Text Box</b>.</p>
<p>
After the EM_UNDO message is sent, the original contents of the <b>Text Box</b> control are restored. The modified text is still stored in the internal Windows buffer. Therefore, in your application, you need to send an EM_EMPTYUNDOBUFFER message to clear or delete the contents of this internal buffer. The EM_EMPTYUNDOBUFFER message clears the undo flag, which means that you can no longer undo your last change to the edit control.</p>
<p>
As shown in the example program below, you can also determine whether an undo operation can be performed on the edit control. The EM_CANUNDO message returns an integer value set to True if there is text in the undo buffer, or zero if no text is available. You can perform an undo operation only if the contents of an edit control have been previously modified and the data is stored in the undo buffer.</p>
<h2>Example Program</h2>
<p>
This program shows how to add the Undo and Redo editing features to your Visual Basic application.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as a single line of code):<pre><code>Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, 
 &nbsp; ByVal wMsg As Integer, ByVal wParam As Integer, lParam As Long) As Long
Const WM_USER = &amp;H400
Const EM_CANUNDO = WM_USER + 22
Const EM_EMPTYUNDOBUFFER = WM_USER + 29
Const EM_UNDO = WM_USER + 23
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Undo".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim OK As Long
 &nbsp;&nbsp; OK = SendMessage(Text1.hWnd, EM_UNDO, 0, 0&amp;)
 &nbsp;&nbsp; OK = SendMessage(Text1.hWnd, EM_EMPTYUNDOBUFFER, 0, 0&amp;)
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Redo".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; Dim OK As Long
 &nbsp;&nbsp; OK = SendMessage(Text1.hWnd, EM_CANUNDO, 0, 0&amp;)
 &nbsp;&nbsp; If OK = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Cannot undo the changes you made", 16, "Error"
 &nbsp;&nbsp; End If
 &nbsp;&nbsp; OK = SendMessage(Text1.hWnd, EM_UNDO, 0, 0&amp;)
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Type some text into the <b>Text Box</b> control. Assume that you typed the line, "We will go shopping on Monday and Tuesday." Select the words "Monday and". Press DEL to delete the text. Click the Redo command button. The original sentence is restored. Click Redo a second time. The modified sentence is restored. The Redo function is similar to the cut-and-paste functions you see in word-processing programs.</p>
<p>
Select the words "Monday and" a second time and again delete the text. Click Undo to restore the original text. Notice that clicking the Undo command button a second time does nothing. This is because the Undo routine clears the undo flag and the edit buffer. You can only undo one change at a time.</p>
<h2>Additional References</h2>
<p>
"EM_CANUNDO." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
"EM_EMPTYUNDOBUFFER." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
"EM_UNDO." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
"SendMessage." (MSDN Library Archive, Product Documentation, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Raw DDE</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Raw DDE</h1>
<p>
Sanford A. Staab<br>
Created: March 20, 1992</p>
<h2>Abstract</h2>
<p>
Dynamic data exchange (DDE) is one of the least understood capabilities of the Microsoft® Windows™ graphical environment. For the most part, this lack of understanding results from the absence of a highly detailed explanation of the correct protocol to use when performing DDE transactions. This article describes each type of DDE transaction in a table format that outlines what operations the client and server applications must perform to complete the transaction properly.</p>
<p>
The DDEML.DLL library in Windows version 3.1 removes the need for most applications to deal with raw DDE transactions. However, understanding proper DDE transaction protocol is a necessity when creating or communicating with applications that do not use DDEML.</p>
<h2>Introduction</h2>
<p>
In this article, each possible dynamic data exchange (DDE) transaction is represented by a table. The client column of the table shows the actions taken by the client application. The server column of the table shows the actions taken by the server application. Each row represents a point in time with time elapsing with subsequent rows.</p>
<p>
Before presenting all possible legal DDE transaction sequences, it is necessary to introduce some abbreviated syntax, in the form of functions, to clarify and unclutter the transaction descriptions.</p>
<h3>Post Actions</h3>
<p>
All posted DDE messages are similar in that the <i>wParam</i> parameter always holds the window handle from which the message was posted. The <i>lParam</i> parameter, however, varies from message to message and usually contains two values. In versions 3.0 and 3.1 of the Microsoft® Windows™ graphical environment, these values are kept in the <b>LOWORD</b> and <b>HIWORD</b> of <i>lParam.</i> In the Win32™ Application Programming Interface, these parts are packed within a structure pointed to by <i>lParam.</i> When an application posts a DDE message, the table will display:</p>
<p>
Post(<i>msg, lo, hi, status, format</i>) 
<ul type=disc>
<li>
<i>msg</i> is the WM_DDE message being posted. The <i>msg </i>parameter is described using the distinguishing letters of the message name and may optionally have a bracketed qualifier explaining the context of the message. The message type and context dictate the <i>lo </i>and <i>hi </i>values. <br><br></li>
<li>
<i>lo </i>and <i>hi </i>are the respective parts of <i>lParam</i> that distinguish the message.<br><br></li>
<li>
<i>status </i>and <i>format </i>are optional pieces of information that are packed into the global data handle being passed within <i>lParam</i>.</li>
</ul>
<p>
<i>status</i> flags pertaining to the transaction sequence are listed. A '!' preceding a flag name means that it must be FALSE; if the '!' is absent, the flag must be TRUE. A '?' indicates that flag settings do not matter in a transaction. A parameter set to '—' is not applicable.</p>
<p>
For example:</p>
<p>
Post<b>(</b>ACK<b>[</b>execute<b>]</b>, <i>!fAck</i>, <i>hCommands</i>, —, —<b>)</b></p>
<p>
means that a WM_DDE_ACK message was posted in response to a WM_DDE_EXECUTE message. The <b>LOWORD</b> of <i>lParam</i> had the <i>fAck</i> bit clear. The <b>HIWORD</b> of <i>lParam</i> had the <i>hCommands</i> data handle. This data handle does not contain any extra information, so two dashes indicate that this information is not applicable.</p>
<p>
Table 1 lists all DDE messages and contexts possible along with their corresponding <i>lo </i>and <i>hi </i>values</p>
<p class=label>
<b>Table 1. DDE Messages and Contexts</b></p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Message and context</b></td>
<td class=label width=11%><b>LOWORD <br>
of <i>lParam</i></b></td>
<td class=label width=14%><b>HIWORD <br>
of <i>lParam</i></b></td>
<td class=label width=17%><b>Information in data handle</b></td>
<td class=label width=10%><b>Sent <br>
from</b></td>
<td class=label width=33%><b><br>
Comments </b></td>
</tr>
<tr valign=top>
<td width=15%>INIT</td>
<td width=11%><i>aApp</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%>Sent only.</td>
</tr>
<tr valign=top>
<td width=15%>ACK[init]</td>
<td width=11%><i>aApp</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%>Sent only.</td>
</tr>
<tr valign=top>
<td width=15%>ACK[advise]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[data]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[exec]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>hCommands</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[hotdata]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[poke]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[request]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ACK[unadvise]</td>
<td width=11%><i>wStatus</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>ADVISE</td>
<td width=11%><i>hOptions</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%><i>wStatus, format</i></td>
<td width=10%>Client</td>
<td width=33%>The <i>fRelease</i> bit is ignored and always assumed to be TRUE.</td>
</tr>
<tr valign=top>
<td width=15%>DATA[request]</td>
<td width=11%><i>hData</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%><i>wStatus, format</i></td>
<td width=10%>Server</td>
<td width=33%><i>fRequest</i> is always TRUE.</td>
</tr>
<tr valign=top>
<td width=15%>DATA[hot]</td>
<td width=11%><i>hData</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%><i>wStatus, format</i></td>
<td width=10%>Server</td>
<td width=33%><i>fRequest</i> is always FALSE.</td>
</tr>
<tr valign=top>
<td width=15%>DATA[warm]</td>
<td width=11%>0</td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Server</td>
<td width=33%><i>fAck</i> is assumed FALSE. </td>
</tr>
<tr valign=top>
<td width=15%>EXECUTE</td>
<td width=11%>0</td>
<td width=14%><i>hCommands</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%>An ACK should always be generated regardless of the <i>fAck</i> bit value.</td>
</tr>
<tr valign=top>
<td width=15%>POKE</td>
<td width=11%><i>hData</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%><i>wStatus, format</i></td>
<td width=10%>Client</td>
<td width=33%>An ACK should always be generated regardless of the <i>fAck</i> bit value.</td>
</tr>
<tr valign=top>
<td width=15%>REQUEST</td>
<td width=11%><i>format</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=15%>TERMINATE</td>
<td width=11%>0</td>
<td width=14%>0</td>
<td width=17%></td>
<td width=10%>Client or Server</td>
<td width=33%>Spontaneously generated or in response to a TERMINATE.</td>
</tr>
<tr valign=top>
<td width=15%>UNADVISE</td>
<td width=11%><i>format</i></td>
<td width=14%><i>aItem</i></td>
<td width=17%></td>
<td width=10%>Client</td>
<td width=33%></td>
</tr>
</table><br>
<p>
The <i>wStatus </i>parameter in Table 1 may contain any of the flags in Table 2.</p>
<p class=label>
<b>Table 2. <i>wStatus</i> Flag Values</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Flag</b></td>
<td class=label width=84%><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=16%><i>fRelease</i></td>
<td width=84%>Indicates that the receiver of the data handle is to free the data handle memory. POKE, DATA, and ADVISE transactions responding with a negative ACK require the sender to free the data handle instead.</td>
</tr>
<tr valign=top>
<td width=16%><i>fAckReq</i></td>
<td width=84%>Indicates that the receiver must post an ACK message in response. Some messages imply this.</td>
</tr>
<tr valign=top>
<td width=16%><i>fAck</i></td>
<td width=84%>This is the same value as the <i>fAckReq</i> flag and is set in ACK messages. When set, the ACK message is a positive ACK. When cleared, the message is a negative ACK (NACK for short).</td>
</tr>
<tr valign=top>
<td width=16%><i>fDeferUpd</i></td>
<td width=84%>Used only in an ADVISE message to indicate whether the link will be hot or warm. When set, the link is warm.</td>
</tr>
<tr valign=top>
<td width=16%>Other values</td>
<td width=84%>Any other values in the <i>wStatus</i> word should be ignored.</td>
</tr>
</table><br>
<h3>Send Actions</h3>
<p>
A syntax similar to <b>Post</b> is used for sending messages during the initiate sequences.</p>
<h3>Receive Events</h3>
<p>
A <b>Receive</b>(<i>msg,</i> [<i>flags</i>]) implies that the current context has received the message in question. This indicates that this receive event triggered the actions that follow. For clarity, we may include the optional <i>flags</i> parameter to show key status flags that distinguish the message.</p>
<h3>Create Actions</h3>
<p>
A <b>Create</b>(<i>ObjectType</i>) describes the actions an application takes to create the object, including standard allocation and initialization of the object. In the case of DDE data handles, this involves calling the <b>GlobalAlloc </b>function. In the case of atoms, this involves calling the <b>GlobalAddAtom </b>function. Note that creation could have happened at the time indicated by the table or previously. This action also includes the creation or copying of any data implied by the data within the data handle. For example, this would include the creation of a bitmap for CF_BITMAP data.</p>
<h3>Reuse Actions</h3>
<p>
A <b>Reuse</b>(<i>ObjectType</i>) action indicates that the application can reuse the object given to it by a preceding <b>Post</b> or that it may have freed the object and later recreated it.</p>
<h3>Free Actions</h3>
<p>
Generally the <b>Free</b>(<i>ObjectType</i>) action is the inverse of the <b>Create</b>(<i>ObjectType</i>) action. In the case of data handles, this involves calling the <b>GlobalFree</b> function. In the case of atoms, this involves calling the <b>GlobalDeleteAtom</b> function. <b>Free</b> actions can happen at the time noted or later. This includes the freeing of any indirect data implied by the object's contents.</p>
<h2>Transaction Tables</h2>
<p>
DDE is always initiated by the client application sending or broadcasting (via <b>SendMessage</b>) a WM_DDE_INITIATE message. When a server application receives this message, it checks the application and topic atoms to decide whether it should respond. Should it decide to do so, it sends back a WM_DDE_ACK message to the client, thus establishing a DDE connection. Table 3 outlines this action.</p>
<p class=label>
<b>Table 3. Initiation</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Client</b></td>
<td class=label width=23%><b>Server</b></td>
<td class=label width=54%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=23%><b>Create</b>(<i>aAppClient</i>)<p>
<b>Create</b>(<i>aTopicClient</i>)</p>
<p>
<b>Send</b>(INIT, <i>aAppClient</i>, <i>aTopicClient</i>)</p>
</td>
<td width=23%></td>
<td width=54%>The client sends or broadcasts a WM_DDE_INITIATE message to all potential servers. <i>aAppClient</i> and <i>aTopicClient</i> may be 0 to indicate a wild initiate. All top-level windows are potential servers.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=23%><b>Receive</b>(INIT)<p>
<b>Create</b>(<i>aAppServer</i>)</p>
<p>
<b>Create</b>(<i>aTopicServer</i>)</p>
<p>
<b>Send</b>(ACK[init], <i>aAppServer</i>, <i>aTopicServer</i>)</p>
</td>
<td width=54%>When a potential server wants to respond to the client's offer, it posts a WM_DDE_ACK message back to the client, letting the client know the server's window handle.</td>
</tr>
<tr valign=top>
<td width=23%><b>Receive</b>(ACK[init], <i>aAppServer</i>, <i>aTopicServer</i>))<p>
<b>Free</b>(<i>aAppServer</i>)</p>
<p>
<b>Free</b>(<i>aTopicServer</i>)</p>
<p>
.<br>
.<br>
.</p>
<p>
After <b>Send</b>(INIT) is completed:</p>
<p>
<b>Free</b>(<i>aAppClient</i>)</p>
<p>
<b>Free</b>(<i>aTopicClient</i>)</p>
</td>
<td width=23%></td>
<td width=54%>Once the client receives the ACK message, both windows are locked into a DDE conversation. A WM_DDE_TERMINATE must be posted from either the client or the server to close the conversation properly.</td>
</tr>
</table><br>
<p class=label>
<b>Table 4. REQUEST–Server Sets <i>fRelease</i></b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=27%><b>Server</b></td>
<td class=label width=48%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Post</b>(REQUEST, <i>format, aItemClient,</i> —, —)</p>
</td>
<td width=27%></td>
<td width=48%>The client application posts a WM_DDE_REQUEST message to the server, asking for data that <i>aItemClient</i> references and in the format specified.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=27%><b>Receive</b>(REQUEST)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Create</b>(<i>hDataServer</i>)</p>
<p>
<b>Post</b>(DATA[request], <i>hDataServer, aItemClient, fRequest </i>| <i>fRelease, format</i>)</p>
</td>
<td width=48%>The server receives the REQUEST message and decides to post a data message containing the requested data. The server sets the <i>fRelease</i> bit, which tells the client that it is responsible for freeing the data. Because the <i>fAck</i> bit is not set, the client should not ACK the data message and therefore must accept responsibility for freeing the data. The <i>fRequest</i> bit indicates that this data message is in response to a REQUEST message.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[request])<p>
<b>Free</b>(<i>hDataClient</i>)</p>
<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=27%></td>
<td width=48%>The client receives the data and must eventually free the data handle and atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 5. REQUEST–Server Sets <i>fAckReq</i></b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=26%><b>Server</b></td>
<td class=label width=49%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Post</b>(REQUEST, <i>format, aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client application posts a WM_DDE_REQUEST message to the server, asking for data that <i>aItemClient</i> references and in the format specified.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(REQUEST)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Create</b>(<i>hDataServer</i>)</p>
<p>
<b>Post</b>(DATA[request], <i>hDataServer, aItemClient, fRequest </i>| <i>fAckReq</i> | <i>!fRelease, format</i>)</p>
</td>
<td width=49%>The server receives the REQUEST message and decides to post a data message containing the requested data. The server clears the <i>fRelease</i> bit, which tells the client that it is not responsible for freeing the data. Because the <i>fAck</i> bit is set, the client should ACK the data message. The <i>fRequest</i> bit indicates that this data message is in response to a REQUEST message.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[request])<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[data], ?, <i>aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client receives the data and must post an ACK or a NACK because the <i>fAck</i> bit was set in the data message.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(ACK[data])<p>
<b>Free</b>(<i>aItemClient</i>)</p>
<p>
<b>Free</b>(<i>hDataServer</i>)</p>
</td>
<td width=49%>The server receives the data ACK and is responsible for freeing the data handle and atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 6. REQUEST–Server Sets <i>fRelease</i> and <i>fAckRequest</i>–Client ACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=26%><b>Server</b></td>
<td class=label width=49%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(aItemClient)<p>
<b>Post</b>(REQUEST, <i>format, aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client application posts a WM_DDE_REQUEST message to the server, asking for data that <i>aItemClient</i> references and in the format specified.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(REQUEST)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Create</b>(<i>hDataServer</i>)</p>
<p>
<b>Post</b>(DATA[request], <i>hDataServer, aItemClient, fRequest</i> | <i>fRelease</i> | <i>fAckReq, format</i>)</p>
</td>
<td width=49%>The server receives the REQUEST message and decides to post a data message containing the requested data. The server sets the <i>fRelease</i> bit, which tells the client that it is responsible for freeing the data. Because the <i>fAck</i> bit is set, the client should ACK the data message. The <i>fRequest</i> bit indicates that this data message is in response to a REQUEST message.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[request])<p>
<b>Free</b>(<i>hDataClient</i>)</p>
<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[data],<i> fAck, aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client receives the data and decides to post an ACK. This tells the server and the system that the client has accepted responsibility for freeing the data handle.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(ACK[data], <i>fAck</i>)<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=49%>The server receives the data ACK and therefore is not responsible for freeing the data handle, only the atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 7. REQUEST–Server Sets <i>fRelease</i> and <i>fAckRequest</i>–Client NACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=26%><b>Server</b></td>
<td class=label width=49%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Post</b>(REQUEST, <i>format, aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client application posts a WM_DDE_REQUEST message to the server, asking for data that <i>aItemClient</i> references and in the format specified.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(REQUEST)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Create</b>(<i>hDataServer</i>)</p>
<p>
<b>Post</b>(DATA[request], <i>hDataServer, aItemClient, fRequest</i> | <i>fRelease</i> | <i>fAckReq, format</i>)</p>
</td>
<td width=49%>The server receives the REQUEST message and decides to post a data message containing the requested data. The server sets the <i>fRelease</i> bit, which tells the client that it is responsible for freeing the data. Because the <i>fAck</i> bit is set, the client should ACK the data message. The <i>fRequest</i> bit indicates that this data message is in response to a REQUEST message.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[request])<p>
<b>Free</b>(<i>hDataClient</i>)</p>
<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[data], <i>!fAck, aItemClient,</i> —, —)</p>
</td>
<td width=26%></td>
<td width=49%>The client receives the data and decides to post a NACK. This tells the server that it has responsibility for freeing the data handle.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=26%><b>Receive</b>(ACK[data], <i>!fAck</i>)<p>
<b>Free</b>(<i>hDataServer</i>)</p>
<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=49%>The server receives the data ACK and is responsible for freeing the data handle because the <i>fAck</i> bit is clear. The server should then free the data handle and the atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 8. REQUEST–Server NACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Client</b></td>
<td class=label width=23%><b>Server</b></td>
<td class=label width=53%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=24%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Post</b>(REQUEST, <i>format, aItemClient,</i> —, —)</p>
</td>
<td width=23%></td>
<td width=53%>The client application posts a WM_DDE_REQUEST message to the server, asking for data that <i>aItemClient</i> references and in the format specified.</td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=23%><b>Receive</b>(REQUEST)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[request], <i>!fAck, aItemClient</i>)</p>
</td>
<td width=53%>The server receives the REQUEST message and decides to post a negative ACK message, which informs the client that the data is not available in the format requested.</td>
</tr>
<tr valign=top>
<td width=24%><b>Receive</b>(ACK[request])<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=23%></td>
<td width=53%>The client receives the NACK message, completing the transaction.</td>
</tr>
</table><br>
<p class=label>
<b>Table 9. POKE–Client Clears <i>fRelease</i></b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=23%><b>Server</b></td>
<td class=label width=51%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Create</b>(<i>hDataClient</i>)</p>
<p>
<b>Post</b>(POKE, <i>hDataClient, aItemClient, !fRelease, format</i>)</p>
</td>
<td width=23%></td>
<td width=51%>The client posts a POKE message containing the data, item, and format information. The <i>fRelease</i> bit is clear, indicating that the client retains responsibility for freeing the data handle. Note that the <i>fAck</i> bit is not used. POKE messages always imply <i>fAck</i> = TRUE.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=23%><b>Receive</b>(POKE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[poke], ?, <i>aItemClient</i>)</p>
</td>
<td width=51%>The server receives the POKE message and must post an ACK message in response. Because the <i>fRelease</i> bit is clear, the server must not free the data handle memory.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(ACK[poke])<p>
<b>Free</b>(<i>aItemClient</i>)</p>
<p>
<b>Free</b>(<i>hDataClient</i>)</p>
</td>
<td width=23%></td>
<td width=51%>The client receives the ACK message and, regardless of the <i>fAck bit,</i> must free the data handle.</td>
</tr>
</table><br>
<p class=label>
<b>Table 10. POKE–Client Sets <i>fRelease</i>–Server ACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=22%><b>Server</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Create</b>(<i>hDataClient</i>)</p>
<p>
<b>Post</b>(POKE, <i>hDataClient, aItemClient, fRelease, format</i>)</p>
</td>
<td width=22%></td>
<td width=52%>The client posts a POKE message containing the data, item, and format information. The <i>fRelease</i> bit is set, indicating that the server should free the data handle if it positively ACKs the data. Note that the <i>fAck</i> bit is not used. POKE messages always imply <i>fAck</i> = TRUE.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=22%><b>Receive</b>(POKE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Free</b>(<i>hDataServer</i></p>
<p>
{<i>server</i>})</p>
<p>
<b>Post</b>(ACK[poke], <i>fAck,</i> <i>aItemClient</i>)</p>
</td>
<td width=52%>The server receives the POKE message and must post an ACK message in response. Because the <i>fRelease</i> bit is set, the server must free the data handle memory.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(ACK[poke], <i>fAck</i>)<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=22%></td>
<td width=52%>The client receives the ACK and frees the atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 11. POKE–Client Sets <i>fRelease</i>–Server NACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=24%><b>Server</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Create</b>(<i>hDataClient</i>)</p>
<p>
<b>Post</b>(POKE, <i>hDataClient, aItemClient, fRelease, format</i>)</p>
</td>
<td width=24%></td>
<td width=50%>The client posts a POKE message containing the data, item, and format information. The <i>fRelease</i> bit is set, indicating that the server should free the data handle if it positively ACKs the data. Note that the <i>fAck</i> bit is not used. POKE messages always imply <i>fAck</i> = TRUE.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=24%><b>Receive</b>(POKE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[poke], <i>!fAck, aItemClient</i>)</p>
</td>
<td width=50%>The server receives the POKE message and must post a NACK message in response. The client must free the data handle memory because of the negative ACK.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(ACK[poke], <i>!fAck</i>)<p>
<b>Free</b>(<i>hDataClient</i>{<i>client</i>})</p>
<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=24%></td>
<td width=50%>The client receives the ACK and frees the atom and data handle because the ACK was negative.</td>
</tr>
</table><br>
<p class=label>
<b>Table 12. EXECUTE</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=23%><b>Server</b></td>
<td class=label width=51%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%><b>Create</b>(<i>hCommands</i>)<p>
<b>Post</b>(EXECUTE, 0, <i>hCommands</i>, —, —)</p>
</td>
<td width=23%></td>
<td width=51%>The client posts an EXECUTE message that contains raw text for execution. This data handle contains flags.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=23%><b>Receive</b>(EXECUTE)<p>
<b>Post</b>(ACK[exec], ?, <i>hCommands</i>{<i>server</i>})</p>
</td>
<td width=51%>The server receives the EXECUTE and posts an execute ACK, which should contain the same data handle that was given to it in the EXECUTE.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(ACK[exec])<p>
<b>Free</b>(<i>hCommands</i>{<i>client</i>})</p>
</td>
<td width=23%></td>
<td width=51%>The client receives the ACK[exec] message and frees the data handle. The status flags show the client whether the execute was successful.</td>
</tr>
</table><br>
<p class=label>
<b>Table 13. ADVISE–Server ACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=25%><b>Server</b></td>
<td class=label width=49%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Create</b>(<i>hOptions</i>{<i>client</i>})</p>
<p>
<b>Post</b>(ADVISE, <i>hOptions, aItemClient,</i> ?, <i>format</i>)</p>
</td>
<td width=25%></td>
<td width=49%>The client posts an ADVISE message with the item and format desired with which to be linked. The flags within the <i>hOptions</i> data handle indicate whether the link is hot or warm (<i>fDeferUpd</i>) and whether the server is allowed to outrun the client (<i>fAck</i>).</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=25%><b>Receive</b>(ADVISE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Free</b>(<i>hOptions</i>{<i>server</i>})</p>
<p>
<b>Post</b>(ACK[advise], <i>fAck, aItemClient</i>)</p>
</td>
<td width=49%>The server receives the ADVISE message and returns a positive ACK to the client. This makes the server responsible for freeing the data handle.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(ACK[advise], <i>fAck</i>)<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=25%></td>
<td width=49%>The client receives the positive<i> </i>ACK and thus does not need to free the data handle. It then frees the atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 14. ADVISE–Server NACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=24%><b>Server</b></td>
<td class=label width=51%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Create</b>(<i>hOptions</i>{<i>client</i>})</p>
<p>
<b>Post</b>(ADVISE, <i>hOptions, aItemClient</i>)</p>
</td>
<td width=24%></td>
<td width=51%>The client posts an ADVISE message with the item and format desired with which to be linked. The flags within the <i>hOptions</i> data handle define whether the link is hot or warm (<i>fDeferUpd</i>) and whether the server is allowed to outrun the client (<i>fAck</i>).</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=24%><b>Receive</b>(ADVISE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[advise], <i>!fAck, aItemClient</i>)</p>
</td>
<td width=51%>The server receives the ADVISE message and returns a negative ACK to the client. This makes the client responsible for freeing the data handle.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(ACK[advise], <i>!fAck</i>)<p>
<b>Free</b>(<i>hOptions</i>{<i>client</i>})</p>
<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=24%></td>
<td width=51%>The client receives the negative ACK and thus must free the data handle. It then frees the atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 15. UNADVISE</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=25%><b>Server</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Create</b>(<i>aItemClient</i>)<p>
<b>Post</b>(UNADVISE, <i>format, aItemClient</i>)</p>
</td>
<td width=25%></td>
<td width=50%>The client posts an UNADVISE message, which indicates the format and item of the link it wants to close.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=25%><b>Receive</b>(UNADVISE)<p>
<b>Reuse</b>(<i>aItemClient</i>)</p>
<p>
<b>Post</b>(ACK[unadvise], ?, <i>aItemClient</i>)</p>
</td>
<td width=50%>The server receives the UNADVISE message and posts a positive or negative ACK back to the client.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(ACK[unadvise])<p>
<b>Free</b>(<i>aItemClient</i>)</p>
</td>
<td width=25%></td>
<td width=50%>The client receives the ACK[unadvise] and frees the associated atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 16. ADVISE DATA–Warm Link</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Client</b></td>
<td class=label width=24%><b>Server</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=24%><b>Create</b>(<i>aItemServer</i>)<p>
<b>Post</b>(DATA[warm], 0, <i>aItemServer</i>)</p>
</td>
<td width=52%>The server posts a warm link DATA message to inform the client that the data associated with the atom specified has changes.</td>
</tr>
<tr valign=top>
<td width=24%><b>Receive</b>(DATA[warm])<p>
<b>Free</b>(<i>aItemServer</i>)</p>
</td>
<td width=24%></td>
<td width=52%>The client receives the DATA[warm] message and frees the associated atom.</td>
</tr>
</table><br>
<p class=label>
<b>Table 17. ADVISE DATA–Hot Link without <i>fAck</i></b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=25%><b>Server</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=25%><b>Create</b>(<i>aItemServer</i>)<p>
<b>Post</b>(DATA[hot], <i>hDataServer, aItemServer, !fAck</i> | <i>fRelease, format</i>)</p>
</td>
<td width=50%>The server posts a hot link DATA message to pass the new data to the client. The <i>fRelease</i> bit gives the client responsibility for freeing the data.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[request])<p>
<b>Free</b>(<i>hDataClient</i>{<i>client</i>})</p>
<p>
<b>Free</b>(<i>aItemServer</i>)</p>
</td>
<td width=25%></td>
<td width=50%>The client receives the DATA[hot] message and frees the associated atom and data.</td>
</tr>
</table><br>
<p class=label>
<b>Table 18. ADVISE DATA–Hot Link with <i>fAck</i>–Server Clears <i>fRelease</i></b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Client</b></td>
<td class=label width=23%><b>Server</b></td>
<td class=label width=54%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=23%><b>Create</b>(<i>aItemServer</i>)<p>
<b>Post</b>(DATA[hot], <i>hDataServer, aItemServer, fAck</i> | <i>!fRelease, format</i>)</p>
</td>
<td width=54%>The server posts a hot link DATA message to pass the new data to the client. The <i>!fRelease</i> bit lets the server keep responsibility for freeing the data.</td>
</tr>
<tr valign=top>
<td width=23%><b>Receive</b>(DATA[hot])<p>
<b>Reuse</b>(<i>aItemServer</i>)</p>
<p>
<b>Post</b>(ACK[data], ?, <i>aItemClient,</i> —, —)</p>
</td>
<td width=23%></td>
<td width=54%>The client receives the DATA[hot] message and posts an ACK message to the server. Note that, because the <i>fRelease</i> bit was clear, the <i>fAck</i> state of the ACK message has no effect on who frees the data handle.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=23%><b>Receive</b>(ACK[data])<p>
<b>Free</b>(<i>aItemServer</i>)</p>
<p>
<b>Free</b>(<i>hDataServer<br>
</i>{<i>server</i>})</p>
</td>
<td width=54%>The server receives the ACK message and, regardless of the <i>fAck</i> state, must free its data handle eventually.</td>
</tr>
</table><br>
<p class=label>
<b>Table 19. ADVISE DATA–Hot Link with <i>fAck</i>–Server Sets <i>fRelease</i>–Client ACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Client</b></td>
<td class=label width=27%><b>Server</b></td>
<td class=label width=48%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=27%><b>Create</b>(<i>aItemServer</i>)<p>
<b>Post</b>(DATA[hot], <i>hDataServer, aItemServer, fAck</i> | <i>fRelease, format</i>)</p>
</td>
<td width=48%>The server posts a hot link DATA message to pass the new data to the client. The <i>fRelease</i> bit gives the client responsibility for freeing the data.</td>
</tr>
<tr valign=top>
<td width=25%><b>Receive</b>(DATA[hot])<p>
<b>Reuse</b>(<i>aItemServer</i>)</p>
<p>
<b>Free</b>(<i>hDataClient</i>{<i>client</i>})</p>
<p>
<b>Post</b>(ACK[data], <i>fAck, aItemClient,</i> —, —)</p>
</td>
<td width=27%></td>
<td width=48%>The client receives the DATA[hot] message and frees the associated atom and data. It then posts an ACK message to indicate to the server that the DATA message was handled by the client.</td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=27%><b>Receive</b>(ACK[data], <i>fAck</i>)<p>
<b>Free</b>(<i>aItemServer</i>)</p>
</td>
<td width=48%>The server receives the ACK and only frees the atom because the client freed the data handle.</td>
</tr>
</table><br>
<p class=label>
<b>Table 20. ADVISE DATA–Hot Link with <i>fAck</i>–Server Sets <i>fRelease</i>–Client NACKs</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Client</b></td>
<td class=label width=27%><b>Server</b></td>
<td class=label width=47%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=27%><b>Create</b>(<i>aItemServer</i>)<p>
<b>Post</b>(DATA[hot], <i>hDataServer, aItemServer, fAck</i> | <i>fRelease, format</i>)</p>
</td>
<td width=47%>The server posts a hot link DATA message to pass the new data to the client. The <i>fRelease</i> bit gives the client responsibility for freeing the data.</td>
</tr>
<tr valign=top>
<td width=26%><b>Receive</b>(DATA[hot])<p>
<b>Reuse</b>(<i>aItemServer</i>)</p>
<p>
<b>Free</b>(<i>hDataClient</i>{<i>client</i>})</p>
<p>
<b>Post</b>(ACK[data], <i>!fAck, aItemClient,</i> —, —)</p>
</td>
<td width=27%></td>
<td width=47%>The client receives the DATA[hot] message and frees the associated atom and data. It then posts a negative ACK message to indicate to the server that the client did not handle the DATA message.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=27%><b>Receive</b>(ACK[data], <i>fAck</i>)<p>
<b>Free</b>(<i>aItemServer</i>)</p>
<p>
<b>Free</b>(<i>hDataServer<br>
</i>{<i>server</i>})</p>
</td>
<td width=47%>The server receives the negative ACK and frees the atom and data handle on the server side.</td>
</tr>
</table><br>
<h3>TERMINATE Transactions</h3>
<p>
Either the client or the server application may initiate TERMINATE transactions. When an application posts a WM_DDE_TERMINATE message, the DDE protocol calls for that application not to post any further DDE messages. If the application should receive any DDE messages other than the responding WM_DDE_TERMINATE message, the protocol states that the application should free any objects associated with the message.</p>
<p>
This is not quite correct. If a WM_DDE_DATA message is posted to an application that does not have the <i>fRelease</i> bit set, the receiver should not free this data because the data may have been posted to several other applications as well. </p>
</BODY>
</HTML>

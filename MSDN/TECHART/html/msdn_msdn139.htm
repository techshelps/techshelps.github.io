<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 139: Retrieving a Disk's Volume Label</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn139"></a></sup>Tip 139: Retrieving a Disk's Volume Label</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
Each time you format a disk in MS-DOS®, you are given the opportunity to assign a unique name (called a <i>volume label</i>) to that disk. This article explains how to retrieve a disk's volume label in a Microsoft® Visual Basic® application.</p>
<h2>Using Dir$ Function to Retrieve Only Specific File Names</h2>
<p>
The <b>Dir$</b> function in Microsoft® Visual Basic® can retrieve the name of any file stored on disk. To search for a specific file on disk, you pass the file's name to the <b>Dir$</b> function as:</p>
<pre><code>FileName = Dir$("C:\AUTOEXEC.BAT")
</code></pre>
<p>
If the AUTOEXEC.BAT file is not found on drive C, the <b>Dir$</b> function will return an empty string; otherwise, the file's name is returned. You can, of course, also search for files by specifying a wildcard file name, such as AUT*.*, to find the name of each file that begins with the AUT prefix characters stored on disk.</p>
<p>
When you create a new file under the MS-DOS® or Microsoft Windows® operating systems, that file is assigned a file attribute. A file may have one or more of the following attributes assigned to it.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=17%>Normal</td>
<td width=7%>0</td>
<td width=76%>Data can be read from or written to the file.</td>
</tr>
<tr valign=top>
<td width=17%>Read Only</td>
<td width=7%>1</td>
<td width=76%>Data can be read from the file but not written to the file.</td>
</tr>
<tr valign=top>
<td width=17%>Hidden</td>
<td width=7%>2</td>
<td width=76%>The file cannot be seen in the directory list.</td>
</tr>
<tr valign=top>
<td width=17%>System</td>
<td width=7%>4</td>
<td width=76%>The file is a system file and is used only by the operating system.</td>
</tr>
<tr valign=top>
<td width=17%>Volume Label</td>
<td width=7%>8</td>
<td width=76%>The special name given to the disk. Only one volume label can be assigned to each disk.</td>
</tr>
<tr valign=top>
<td width=17%>Directory</td>
<td width=7%>16</td>
<td width=76%>The file is a subdirectory.</td>
</tr>
<tr valign=top>
<td width=17%>Archive</td>
<td width=7%>32</td>
<td width=76%>The file has been modified since backup was last performed.</td>
</tr>
</table><br>
<p>
You can use any of these numeric file attribute values in conjunction with the <b>Dir$</b> function to retrieve specific types of files.</p>
<p>
In the example program below, you want to display the volume label name for drive C. To do this, you run the statement:</p>
<pre><code>TempBuffer = Dir$("C:*.*", ATTR_VOLUME)
</code></pre>
<p>
This tells <b>Dir$</b> that you want to retrieve the file that has its volume label attribute set. Because only one file on each disk can have a volume label at any given time, you need to run this statement only once to retrieve the disk's name.</p>
<h2>Example Program</h2>
<p>
This program shows how to retrieve a disk's volume label.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>to the General Declarations section of Form1:<pre><code>Const ATTR_VOLUME = &amp;H8
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default.<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Dim TempBuffer As String
 &nbsp;&nbsp; TempBuffer = Dir$("C:*.*",ATTR_VOLUME)
 &nbsp;&nbsp; Text1.Text = TempBuffer
End Sub
</code></pre>
</li>
</ol>
<p>
Run the example program by pressing F5. Click the command button. The program will display the volume label for drive C in the <b>Text Box</b> control, if such a file does indeed exist.</p>
<h2>Additional Reference</h2>
<p>
<a href="msdn_msdn44.htm">"Tip 44: Modifying File Attributes."</a></p>
</BODY>
</HTML>

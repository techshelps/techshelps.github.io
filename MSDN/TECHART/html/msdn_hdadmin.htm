<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The HelpDesk Administration Explorer</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_hdadmin"></a>The HelpDesk Administration Explorer</h1>
<p>
Robert Coleridge<br>
Microsoft Developer Network Technology Group</p>
<p>
December 1997<br>
Updated: February 2, 1998</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="5173">
</OBJECT><a href="javascript:sample1.Click()">Click to view or copy the samples for this technical article.</a></p>
<h2>Introduction</h2>
<p>
This article will discuss the administration application of the HelpDesk sample. The HelpDesk Explorer (HDExplr) was created using Microsoft® Visual Basic® version 5.0 (with Service Pack 2) and requires the HelpDesk components: HDAdmin.dll, HDClient.dll, HDServer.dll, and DBExec.dll. HDExplr was written to follow standard <i>n</i>-tier design and methodologies. </p>
<h2>The HelpDesk Administrator</h2>
<p>
For our purposes, a HelpDesk administrator is one or more people within a business, business unit, or institution who have the responsibility and authority to make decisions that affect the performance and operation of the HelpDesk; specifically, the HelpDesk administrator maintains the various tables and domains within the HelpDesk database. </p>
<h3>Technician Maintenance</h3>
<p>
Each technician has certain properties, such as location and skill, that help determine how HelpDesk assigns requests to a particular technician's queue. The administrator can change these properties dynamically with HDExplr. These changes are effective immediately and affect what requests a technician receives the next time unclaimed requests are reassigned. (For more information on how requests are assigned and reassigned, see Steve Kirk's <a href="msdn_taskdist.htm">"Task Distribution in a Customer Service System."</a>)</p>
<h3>Domain Maintenance</h3>
<p>
A domain is a lookup table within the database. These tables change infrequently and are generally used to populate the various client interfaces of the HelpDesk sample. For example, a table containing a set of predefined locations, priorities, or skills would be a domain. Although these tables can be deleted from, they are usually appended to. (For an explanation on how to delete from a domain, see the Appendix of the MSDN Online version of this article.)</p>
<h3>System Performance</h3>
<p>
This area covers the more esoteric functions of a HelpDesk administrator. With HDExplr, the administrator can:
<ul type=disc>
<li>
Lock people out of the entire HelpDesk system or just out of certain components in order to perform database maintenance. The administrator can also block requests from being queued so that components within the server-side of the system can be replaced. Often, a more monolithic system must be shut down in order to replace components, but this problem is avoided through system design. Users are merely denied access to the component while it is being replaced or upgraded.<br><br></li>
<li>
Increase or decrease the various thresholds of the system. For example, a threshold determines the length of time a request can sit in any queue and remain unclaimed. An administrator can use the HelpDesk Monitor to watch for "perpetually unclaimed" requests or technician idle time and increase or decrease the threshold accordingly. For more details on the HelpDesk Monitor, see <a href="msdn_helpmon.htm">"Viewing HelpDesk Activity: A DHTML System Monitor,"</a> by Steve Kirk.<br><br></li>
<li>
Increase or decrease the time interval between request reshuffling in response to an increase or decrease in the rate of incoming requests. </li>
</ul>
<h3>Database Security</h3>
<p>
Secure access to the HelpDesk database is maintained via the Microsoft SQL Enterprise Manager. We have taken a minimalist approach in that only users entered in the SQL logon database are considered administrators and are allowed to use HDExplr. For access to the user clients and the technician clients, we are simply using the standard Microsoft Windows NT® authentication security.</p>
<p>
Although this area is critical to the security of the HelpDesk data, the actual maintenance of the security privileges is beyond the scope of this article. For further reading, see "Managing Security" in the Database and Messaging Services section of the Platform SDK documentation.</p>
<h2>The HelpDesk Explorer</h2>
<p>
The HelpDesk Explorer (HDExplr) allows an administrator to modify the HelpDesk tables and change any system parameters. The following is a discussion of the functionality of HDExplr and the new HDAdmin.dll COM component that works with it. </p>
<h3>HDAdmin</h3>
<p>
The HDAdmin component's methods and properties could have been added to the HDClient component, which services all the HelpDesk client applications, but it would have increased the size of the component without a proportionate increase in functionality for the end user. So, in order to keep HDClient as thin as possible, HDAdmin was created separately.</p>
<p>
HDAdmin does not supercede HDClient, however. The two components work side by side. In fact, HDExplr uses the HDClient component more than the HDAdmin component. The HDAdmin component supplies the administrator specific functionality. Figure 1 diagrams where HDAdmin fits in with the existing HelpDesk object model.</p>
<p>
<img src="hdadmin1.gif" border=0></p>
<p class=label>
<b>Figure 1. HelpDesk object model</b></p>
<p>
HDAdmin.dll has objects that provide access to the administrative tables and data. Table 1 lists three of these new objects.</p>
<p class=label>
<b>Table 1. HDAdmin Objects</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Name</b></td>
<td class=label width=20%><b>Type</b></td>
<td class=label width=54%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>CAdmin</td>
<td width=20%>object</td>
<td width=54%>Administrator/controller for the entire DLL</td>
</tr>
<tr valign=top>
<td width=26%>CSysParm</td>
<td width=20%>data object</td>
<td width=54%>Encapsulates creation and manipulation of the SysParm table</td>
</tr>
<tr valign=top>
<td width=26%>CSysParmType</td>
<td width=20%>data object</td>
<td width=54%>Encapsulates creation and manipulation of the SysParmType domain</td>
</tr>
</table><br>
<p>
And the methods in Table 2 can be found in the CAdmin object.</p>
<p class=label>
<b>Table 2. CAdmin Object Methods</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Name</b></td>
<td class=label width=20%><b>Type</b></td>
<td class=label width=54%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%><b>GetSysParms</b></td>
<td width=20%>Method</td>
<td width=54%>Returns a collection of CSysParm records</td>
</tr>
<tr valign=top>
<td width=26%><b>GetSysParmTypes</b></td>
<td width=20%>Method</td>
<td width=54%>Returns a collection of SysParmType records</td>
</tr>
<tr valign=top>
<td width=26%><b>Init</b></td>
<td width=20%>Method</td>
<td width=54%>Used to initialize the HDAdmin.dll</td>
</tr>
<tr valign=top>
<td width=26%><b>Refresh</b></td>
<td width=20%>Method</td>
<td width=54%>Used to force a refresh of the internal collections and tables</td>
</tr>
<tr valign=top>
<td width=26%><b>Term</b></td>
<td width=20%>Method</td>
<td width=54%>Used to release the resources acquired by HDAdmin.dll prior to termination</td>
</tr>
</table><br>
<h3>Creating the HelpDesk Explorer</h3>
<p>
HDExplr is designed in a Windows Explorer style. The skeleton of HDExplr is created through the Visual Basic VB Application Wizard:
<ol>
<li>
Click <b>New Project</b> from the <b>File</b> menu, and then click <b>VB Application Wizard</b>.<br><br></li>
<li>
At the first dialog box (<b>Introduction</b>), click <b>Next</b>. In the <b>Interface Type</b> dialog box, select the <b>Explorer Style</b> option and click <b>Next</b>.<br><br></li>
<li>
The HDExplr application requires all the available menus, so click <b>Select</b> <b>All</b>, and then click <b>Next</b>.<br><br></li>
<li>
HDExplr has its string in a resource file, so click <b>Yes</b>, type HDExplr.rc for the filename, and click <b>Next</b>.<br><br></li>
<li>
HDExplr provides a Web browser interface, so click <b>Yes</b>, type your desired Universal Resource Locator (URL), and click <b>Next</b>.<br><br></li>
<li>
Select all available forms from the <b>Standard Forms</b> dialog box and click <b>Next</b>.<br><br></li>
<li>
In the <b>Data Access Forms</b> dialog box, select <b>No</b>, as the HDExplr uses data objects for its data access, and then click <b>Next</b>.<br><br></li>
<li>
Click <b>Finish</b>. You now have most of the code needed to create the HDExplr application.</li>
</ol>
<h3>The Main Screen</h3>
<p>
Although the VB Application Wizard generated most of the presentation code for the HDExplr, the code to populate the main screen and respond to user requests must still be added.</p>
<h4>The HDExplr panes</h4>
<p>
The main screen is divided into two panes. In the left pane is a tree view that will contain the various components of the HelpDesk, for example, technicians, domains, and system parameters. The right pane will provide a display of the records or contents of that component, for example, all the Location records, or all the system setup parameters. For clarity, let's call the left pane the Component pane, and the right pane the Contents pane.</p>
<p>
Figure 2 gives an example of what the display would look like if the Technicians component were selected. The Contents pane displays the Technician records so that they can be examined or modified.</p>
<p>
<img src="hdadmin2.gif" border=0></p>
<p class=label>
<b>Figure 2. HDExplr panes</b></p>
<h4>Populating the panes</h4>
<p>
Let us examine how each pane is populated with data.</p>
<p>
By examining the following code, you can see that populating the Components pane is straightforward. Simply populate an ImageList control with bitmaps from the resource data for the various images that are needed. Then add entries to the tree, specifying the node name, its relationship within the tree, and other relevant data. Note that in order to maintain a localizable application, heavy use was made of <b>LoadResString</b> to load data from the resource data segment of the application.</p>
<pre><code>. . .
' Set the Treeview control properties.
tv_ComponentTree.LineStyle = tvwRootLines&nbsp; ' Linestyle 1

'Initialize vars and values from the resource file.
m_tvPathSep = tv_ComponentTree.PathSeparator
m_Node_Domains = LoadResString(icIDS_KWTV_DOMAINS)
m_Node_Technician = LoadResString(icIDS_KWTV_TECHNICIAN)
m_Node_location = LoadResString(icIDS_KWTV_LOCATIONS)
. . .
m_Node_DomainLocations = m_Node_Domains &amp; m_tvPathSep &amp; m_Node_location
m_Node_DomainPriorities = m_Node_Domains &amp; m_tvPathSep &amp; m_Node_Priority
m_Node_DomainSkills = m_Node_Domains &amp; m_tvPathSep &amp; m_Node_Skill

'Build the image list of small icons.
imlIcons.ListImages.Add , "Technician", LoadPicture("Technician.bmp")
imlIcons.ListImages.Add , "Location", LoadPicture("Location.bmp")
. . .
tv_ComponentTree.ImageList = imlIcons
lv_ContentsList.SmallIcons = imlIcons

'Build the image list of icons.
imlIcons.ListImages.Add _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=m_Node_Technician, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Picture:=LoadResPicture(icIDB_TECHNICIAN, vbResBitmap)
imlIcons.ListImages.Add _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=m_Node_location, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Picture:=LoadResPicture(icIDB_LOCATION, vbResBitmap)
imlIcons.ListImages.Add _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=m_Node_Priority, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Picture:=LoadResPicture(icIDB_PRIORITY, vbResBitmap)
. . .
imlBigIcons.ListImages.Add _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=m_Node_Priority, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Picture:=LoadResPicture(icIDB_PRIORITY, vbResBitmap)

'Attach the icons to visual components.
tv_ComponentTree.ImageList = imlIcons
lv_ContentsList.SmallIcons = imlIcons
lv_ContentsList.Icons = imlBigIcons

'Add Node objects.
sNodeKey = m_Node_Technician
tv_ComponentTree.Nodes.Add _
 &nbsp;&nbsp; Key:=sNodeKey, _
 &nbsp;&nbsp; Text:=m_Node_Technician, _
 &nbsp;&nbsp; Image:=m_Node_Technician

sNodeKey = m_Node_Domains
tv_ComponentTree.Nodes.Add _
 &nbsp;&nbsp; Key:=sNodeKey, _
 &nbsp;&nbsp; Text:=m_Node_Domains
tv_ComponentTree.Nodes.Add _
 &nbsp;&nbsp; relative:=sNodeKey, _
 &nbsp;&nbsp; relationship:=tvwChild, _
 &nbsp;&nbsp; Key:=sNodeKey &amp; m_Node_location, _
 &nbsp;&nbsp; Text:=m_Node_location, _
 &nbsp;&nbsp; Image:=m_Node_location
. . .
</code></pre>
<p>
The code to populate the Contents pane is almost as straightforward. For the sake of brevity, I will only show how the technician information is filled into the ListView control.</p>
<p>
Examining the following code you can see how easy it is to populate the Contents pane. For a report view, simply add the initial column and all subsequent sub-items for that row. For a nonreport view, simply add the text and the icon for the record. Repeat this for each record in the collection.</p>
<pre><code>Dim oItem As ListItem
Dim oDomainTechnician As CTech
Dim oLocation As CLocation
Dim oSkill As CSkill
Dim oDomainTechnicians As Collection

'Get the collection of technicians.
Set oDomainTechnicians = m_oTechAdmin.GetTechnicians

'Process each technician.
For Each oDomainTechnician In oDomainTechnicians
 &nbsp; If lv_ContentsList.View = lvwReport Then
 &nbsp;&nbsp;&nbsp;&nbsp; sMisc = oDomainTechnician.Alias
 &nbsp;&nbsp;&nbsp;&nbsp; Set oItem = lv_ContentsList.ListItems.Add( _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=sMisc, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text:=sMisc, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Icon:=m_Node_Technician, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SmallIcon:=m_Node_Technician)
 &nbsp;&nbsp;&nbsp;&nbsp; Set oLocation = oTechAdmin.GetLocations.Item( _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oSysAdmin.FmtPKId(oDomainTechnician.LocationId))
 &nbsp;&nbsp;&nbsp;&nbsp; oItem.SubItems(1) = oLocation.Desc
 &nbsp;&nbsp;&nbsp;&nbsp; Set oSkill = oTechAdmin.GetSkills.Item( _
 &nbsp;&nbsp;&nbsp;&nbsp; oSysAdmin.FmtPKId(oDomainTechnician.SkillId))
 &nbsp;&nbsp;&nbsp;&nbsp; oItem.SubItems(2) = oSkill.Desc
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; lv_ContentsList.ListItems.Add _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key:=oDomainTechnician.Alias, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text:=oDomainTechnician.Alias, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Icon:=m_Node_Technician, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SmallIcon:=m_Node_Technician
 &nbsp; End If
Next oDomainTechnician

Set oDomainTechnicians = Nothing
</code></pre>
<h4>Displaying object properties</h4>
<p>
Once a component has been selected, its contents are displayed and can be manipulated. Each item in the Contents pane responds to a right mouse click that displays a relevant menu. For example, if the Technician component is selected, then right-clicking an item in the Contents pane will display a pop-up menu for changing the properties of that technician (Figure 3). Right-clicking in the Contents pane without any item selected displays a menu for adding to the selected Component.</p>
<p>
<img src="hdadmin3.gif" border=0></p>
<p class=label>
<b>Figure 3. The pop-up menu for items in the Contents pane</b></p>
<p>
Responding to the right mouse click takes a bit more work than populating the Contents pane.</p>
<h4>Pop-up menus</h4>
<p>
In order to display a right-click pop-up menu, the program needs to have a menu predefined. In the HDExplr application, I created a form called frmContext that only has a menu control on it. Each pop-up menu is given a unique name and it is this name that is used to differentiate the menus to be displayed on a right-click. The following code shows how to bring up a pop-up menu called mnu_lv_technician when the user right-clicks the Contents pane:</p>
<pre><code>Private Sub lv_ContentsList_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
. . .
'Set form context variable to nothing selected
frmContext.Selected_Context = CM_NOTHING_SELECTED

'Bring up the appropriate submenu.
Select Case tv_ComponentTree.SelectedItem.FullPath
 &nbsp; . . .
 &nbsp; Case TV_TECHNICIANS_NODE
 &nbsp;&nbsp;&nbsp;&nbsp; PopupMenu frmContext. mnu_lv_Technician
 &nbsp; . . .
End Select
. . .
</code></pre>
<p>
Once a menu selection is made, the relevant dialog box, showing existing properties, options, and so on, is displayed (Figure 4).</p>
<p>
<img src="hdadmin4.gif" border=0></p>
<p class=label>
<b>Figure 4. Clicking a command from a pop-up menu displays a modal dialog box</b></p>
<p>
The following code displays a modal dialog box in response to a selection from the pop-up menu (the featured section displays the dialog box for updating the technician data):</p>
<pre><code>'Respond to the user selection.
Select Case frmContext.Selected_Context
 &nbsp; 'If adding a technician . . .
 &nbsp; Case CM_TECHNICIAN_ADD
 &nbsp;&nbsp;&nbsp;&nbsp; '. . . set empty parameters to force addition and show the form.
 &nbsp;&nbsp;&nbsp;&nbsp; frmTechMaint.SetParameters "", -1, -1, DM_ADD
 &nbsp;&nbsp;&nbsp;&nbsp; frmTechMaint.Show vbModal, Me

 &nbsp; 'If modifying a technician . . .
<span class=cfe><b> &nbsp; Case CM_TECHNICIAN_UPDATE</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; '. . . get the selected technician object . . .</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; Set oTech = m_oTechAdmin.GetTechByAlias(m_ItemClicked.Key)</b></span>

<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; '. . . and set existing parameters to modify and show the form.</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; frmTechMaint.SetParameters oTech.Alias, oTech.SkillId,</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oTech.LocationId, DM_UPDATE</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; Set oTech = Nothing</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp; frmTechMaint.Show vbModal, Me</b></span>
. . .
End Select
. . .
End Sub
</code></pre>
<h2>Contents of the HDExplr Project</h2>
<p>
Table 3 lists the various files, and their descriptions, for the HDExplr project.</p>
<p class=label>
<b>Table 3. The Files for the HDExplr Project</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Name</b></td>
<td class=label width=15%><b>Type</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>frmAbout, frmSplsh, frmOpt, frmBrows</td>
<td width=15%>Form</td>
<td width=51%>Contains the code and form for the specific dialog</td>
</tr>
<tr valign=top>
<td width=34%>frmCntxt</td>
<td width=15%>Form</td>
<td width=51%>Contains the code and form for the various context menus used in the explorer panes of the main screen</td>
</tr>
<tr valign=top>
<td width=34%>frmDmMnt, frmSysPp, frmTchMnt</td>
<td width=15%>Form</td>
<td width=51%>Contains the code and form for the specific domain maintenance dialog</td>
</tr>
<tr valign=top>
<td width=34%>frmMain</td>
<td width=15%>Form</td>
<td width=51%>Contains the code and form for the explorer interface. This is the main form of the application.</td>
</tr>
<tr valign=top>
<td width=34%>basMain</td>
<td width=15%>Module</td>
<td width=51%>Contains the initialization code and the Sub Main for the project</td>
</tr>
<tr valign=top>
<td width=34%>res_h.bas</td>
<td width=15%>Module</td>
<td width=51%>Contains the constants that correspond to the IDs in the compiled .rc file (HDExplr.res)</td>
</tr>
<tr valign=top>
<td width=34%>HDExplr.res</td>
<td width=15%>Resource compiled file</td>
<td width=51%>Compiled resources</td>
</tr>
<tr valign=top>
<td width=34%>HDExplr.rc</td>
<td width=15%>Resource plaintext file</td>
<td width=51%>Contains the plaintext descriptions of the resources</td>
</tr>
<tr valign=top>
<td width=34%>Resource.h</td>
<td width=15%>Header file for HDExplr.rc</td>
<td width=51%>Contains constants for .rc file</td>
</tr>
<tr valign=top>
<td width=34%>MkHDxRes.*</td>
<td width=15%>Project</td>
<td width=51%>Microsoft Visual C++® project to be used to generate .res file from .rc file</td>
</tr>
</table><br>
<h2>Conclusion</h2>
<p>
As you can see from the article, the HelpDesk Explorer administration application can be used in various ways to manage and optimize the HelpDesk sample. I hope that you examine the sample code and see how easy it is to extend the HDExplr for your own additions to the HelpDesk sample, and also find it a useful example of how to write a Explorer-type application.</p>
<h2>Appendix</h2>
<h3>Domain Deletion</h3>
<p>
Once a domain entry is added to the table, it is unlikely that the information would ever change. As such, HDExplr allows additions or modifications to the domain tables but not deletions. This is not to say that deletions can not be made, but the HelpDesk sample was designed with the assumption that "once entered, always entered." This philosophy extends to all of the data, including requests, and their related detail records, which are never deleted, but merely archived to history tables.</p>
<p>
However, if a domain is accidentally deleted, or a domain entry must be deleted, the appendix at the end of this article explains the steps required either to restore the domain, or to adjust the other tables to reflect the domain entry adjustment.</p>
<p>
When the HelpDesk sample was designed choices had to be made between storing the actual lookup keys in the request records and so on, or storing just the Primary Key Id (PKId) for a relevant record. While storing the lookup keys would have made the reverse engineering of a domain feasible should the domain be deleted, it is not localizable.</p>
<p>
Storing the PKIds in the records made for a much more localizable application. The disadvantage of this was that the domain lookups via the PKId were now dependent on record sequencing, thus reconstructing a domain must be reproduced in the exact original record sequence.</p>
<p>
How is this restoration accomplished? By restoring from the backup data set. (You are backing up your data, right?)</p>
<h3>Domain Entry Deletion</h3>
<p>
In order to delete an entry once it has been used in a request would involve the following steps.
<ol>
<li>
Wait until all users are logged out of the HelpDesk application.<br><br></li>
<li>
Set the NoLoginsAllowed flag to TRUE. See the section on System setup for details on how this would be done.<br><br></li>
<li>
Delete the relevant entry from the domain table.<br><br></li>
<li>
Perform a global database update, replacing all occurrences of the deleted domain entry PKId with a more relevant one. This must be done in the historical data tables also.<br><br></li>
<li>
Set the NoLoginsAllowed flag to FALSE.<br><br></li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Custom Text Import Wizards</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_textwiz"></a>Creating Custom Text Import Wizards</h1>
<p>
Larry W Jordan Jr.<br>
Derik Harris<br>
Microsoft Corporation</p>
<p>
Created: July 8, 1996<br>
Revised: July 23, 1996 </p>
<p>
<i>Larry W Jordan Jr. is a Senior Microsoft Access support engineer. His main focus is VBA, wizard and add-in development and Visual SourceSafe integration.</i></p>
<p>
<i>Derik Harris is a Senior Microsoft Access content engineer. His primary responsibility is writing, editing, and publishing Microsoft Access related material for the Microsoft Knowledge Base and the Microsoft Web site.</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Technical Articles Sample">
<PARAM name="Item2" value="4943">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the TEXTWIZ project files.</a></p>
<h2>Overview</h2>
<p>
Microsoft Access provides numerous import filters to handle most of the common application files formats and the generic ASCII text file formats in the form of common delimited and fixed-width text files. However, there may be situations where the files you need to import into a database have an unsupported or proprietary format. In these situations, you need a custom import routine.</p>
<p>
Creating your own custom text import wizards is a great way to handle these situations. This article explains the basics you need to implement your own import routines.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;In order to use and modify the Sample Text Import Wizard, you must have the Microsoft Access Developer Toolkit for Windows 95 installed. The wizard uses OLE controls from this development environment, and you must have both the controls and the appropriate license installed.</p>
<h2>Creating Text Import Code</h2>
<p>
The following file format is a sample format generated by the grocery store point of sale(POS) system.&nbsp; The POS file is available on a daily basis and needs to be imported into a temporary table. The data is then visually confirmed for correctness and posted to a main table using an append query.</p>
<p class=label>
<b>Figure 1.&nbsp; A sample proprietary text file</b></p>
<pre><code>Last Reset: Jul-7-1996 11:00:00
Current Reset: Jul-8-1996 11:12:00
Store: 114
1,"Dairy",456,908.13
2,"Bread",1326,348.17
3,"Meats",657,1234.00
4,"Vegetables",34,76.16
5,"Chocolate",1114,3456.15
</code></pre>
<p>
The analysis of the file layout is the most important aspect of planning your import routine. You need to understand the file structure and be able to relate to the way in which the data in the fields will make its way into you database table structure.</p>
<p>
The file in Figure 1 has the following characteristics:
<ol>
<li>
Three header lines precede the data.<br><br></li>
<li>
The three header lines contain three unique pieces of data: the “Last Reset”, the “Current Reset” and the “Store Number.”<br><br></li>
<li>
The data consists of four fields: an “Id” number, a “Sales Item Name”, a “Quantity Sold” value, and a “Total Sales Dollar Amount.”</li>
</ol>
<p>
The file format is fairly easy to analyze, but may not be handled by the filters for importing that ship with Microsoft Access. Therefore, you need a custom import routine.</p>
<h3>The Import Functions</h3>
<p>
The following import functions will import the data into a user-defined array structure and then create a temporary table to post the data into the database. This requires two routines: one to process the file, and another to create the temporary table.</p>
<p class=label>
<b>Figure 2. Import functions</b></p>
<pre><code>‘ Declarations section of the module.
Option Compare Database
Option Explicit

' ------------------------------------------------------
' Create user-defined Type array to
' hold the sales values.
' ------------------------------------------------------
Type SlsData
 &nbsp; Id As Long
 &nbsp; SlsName As String
 &nbsp; Qty As Long
 &nbsp; Amt As Currency
End Type
Dim SlsData() As SlsData

' ======================================================
' Function: ImportSalesDataFile
' Passed Parameter: The path/name of the file to import
‘ Returns: Boolean result
' ======================================================
Function ImportSalesDataFile(strFilename As String) As Boolean

 &nbsp; On Local Error GoTo ImportSalesDataFile_Err
 &nbsp; 
 &nbsp; Dim i As Integer, intHandle As Integer
 &nbsp; Dim varTempVariable As Variant
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' DAO objects
 &nbsp; ' ------------------------------------------------------
 &nbsp; Dim db As DATABASE
 &nbsp; Dim rs As Recordset
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Dim storage variables.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Dim strLastResetDateTime As Date
 &nbsp; Dim strCurrResetDateTime As Date
 &nbsp; Dim intStoreId As Integer
 &nbsp; Dim lngNumOfSalesEntries As Long
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Set file handle to first available
 &nbsp; ' file number from os...
 &nbsp; ' ------------------------------------------------------
 &nbsp; intHandle = FreeFile
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Open requested sales data file.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Open strFilename For _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input Access Read _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As intHandle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Enumerate the number of sales entries for the posting
 &nbsp; ' array used to hold the sales data.
 &nbsp; ' ------------------------------------------------------
 &nbsp; While Not EOF(intHandle)
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Line Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Count the sale lines in the file.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; lngNumOfSalesEntries = (lngNumOfSalesEntries + 1)
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' File validation.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Select Case lngNumOfSalesEntries
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Last Reset:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Current Reset:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Store:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; End Select

 Wend
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Subtract the three header entries.
 &nbsp; ' ------------------------------------------------------
 &nbsp; lngNumOfSalesEntries = (lngNumOfSalesEntries - 3)
 &nbsp; If lngNumOfSalesEntries &lt;= 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp; End If
 &nbsp; Close intHandle

 &nbsp; ReDim SlsData(1 To lngNumOfSalesEntries)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Set file handle to first available
 &nbsp; ' file number from os...
 &nbsp; ' ------------------------------------------------------
 &nbsp; intHandle = FreeFile
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Re-open requested sales data file.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Open strFilename For _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input Access Read _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As intHandle
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Use string manipulation to import the
 &nbsp; ' reset last reset date/time
 &nbsp; ' 13th+ characters in "Last Reset: Jul-7-1996 11:00:00"
 &nbsp; ' ------------------------------------------------------
 &nbsp; Line Input #intHandle, varTempVariable
 &nbsp; strLastResetDateTime = Mid$(varTempVariable, 13, Len(varTempVariable))
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Use string manipulation to import the
 &nbsp; ' reset current reset date/time
 &nbsp; ' 16th+ characters in "Current Reset: Jul-7-1996 11:00:00"
 &nbsp; ' ------------------------------------------------------
 &nbsp; Line Input #intHandle, varTempVariable
 &nbsp; strCurrResetDateTime = Mid$(varTempVariable, 16, Len(varTempVariable))
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Use string manipulation to import the
 &nbsp; ' store number from the file, for example, "Store: 114"
 &nbsp; ' ------------------------------------------------------
 &nbsp; Line Input #intHandle, varTempVariable
 &nbsp; intStoreId = CInt(Mid$(varTempVariable, 8, Len(varTempVariable)))
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Enumerate through the values and post to the custom
 &nbsp; ' sales table that is created each time...
 &nbsp; ' ------------------------------------------------------
 &nbsp; For i = 1 To UBound(SlsData)
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Import sales id number.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; SlsData(i).Id = varTempVariable
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Import sales name.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; SlsData(i).SlsName = varTempVariable
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Import sales quantity.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; SlsData(i).Qty = varTempVariable
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Import sales amount.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; SlsData(i).Amt = varTempVariable
 &nbsp; 
 &nbsp; Next i
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Create sales table using current reset date and
 &nbsp; ' time to uniquely name the table.
 &nbsp; ' ------------------------------------------------------
 &nbsp; If CreateNewSlsDataTbl(CStr(strCurrResetDateTime)) Then
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Set db = CurrentDb
 &nbsp;&nbsp;&nbsp;&nbsp; Set rs = db.OpenRecordset(CStr(strCurrResetDateTime))
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; For i = 1 To UBound(SlsData)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.AddNew
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("StoreId") = intStoreId
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("CurrResetDateTime") = strCurrResetDateTime
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("Id") = SlsData(i).Id
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("Id") = SlsData(i).Id
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("SlsName") = SlsData(i).SlsName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("Qty") = SlsData(i).Qty
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs("Amt") = SlsData(i).Amt
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.UPDATE
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Next i
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; End If
 &nbsp; 
 &nbsp; rs.Close
 &nbsp; 
 &nbsp; ImportSalesDataFile = True
 &nbsp; 
ImportSalesDataFile_End:

 &nbsp; Close intHandle
 &nbsp; Exit Function
 &nbsp; 
ImportSalesDataFile_Err:
 &nbsp; 
 &nbsp; MsgBox Err.Description, vbCritical
 &nbsp; Resume ImportSalesDataFile_End

End Function
Breakdown of the specific features of the routine.
Figure 2.1.&nbsp; Import array structure

‘ Declarations section of the module.
Option Compare Database
Option Explicit

' ------------------------------------------------------
' Create user-defined Type array to
' hold the sales values.
' ------------------------------------------------------
Type SlsData
 &nbsp; Id As Long
 &nbsp; SlsName As String
 &nbsp; Qty As Long
 &nbsp; Amt As Currency
End Type
Dim SlsData() As SlsData
</code></pre>
<p>
The user-defined Type array is designed to hold the data in the individual fields in the import file. By processing the data into an array structure first, you gain the benefit of data validation before posting the data to the database table. The array is dimensioned as a Dynamic array to use in the import function.</p>
<p class=label>
<b>Figure 2.2. Array dimensioning code</b></p>
<pre><code>' ------------------------------------------------------
' Set file handle to first available
' file number from os...
' ------------------------------------------------------
intHandle = FreeFile
 &nbsp; 
' ------------------------------------------------------
' Open requested sales data file.
' ------------------------------------------------------
Open strFilename For _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input Access Read _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As intHandle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
' ------------------------------------------------------
' Enumerate the number of sales entries for the posting
' array used to hold the sales data.
' ------------------------------------------------------
While Not EOF(intHandle)
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; Line Input #intHandle, varTempVariable
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Count the sale lines in the file.
 &nbsp; ' ------------------------------------------------------
 &nbsp; lngNumOfSalesEntries = (lngNumOfSalesEntries + 1)
 &nbsp; 

 &nbsp; ' ------------------------------------------------------
 &nbsp; ' File validation.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Select Case lngNumOfSalesEntries
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Last Reset:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Case 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Current Reset:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Case 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If InStr(varTempVariable, "Store:") = False Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "The requested file is not a proper Sales Data file!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCritical, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Sales Data Import"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoTo ImportSalesDataFile_End
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; End Select

Wend
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
' ------------------------------------------------------
' Subtract the three header entries.
' ------------------------------------------------------
lngNumOfSalesEntries = (lngNumOfSalesEntries - 3)
If lngNumOfSalesEntries &lt;= 0 Then
 &nbsp; GoTo ImportSalesDataFile_End
End If
Close intHandle

ReDim SlsData(1 To lngNumOfSalesEntries)
</code></pre>
<p>
The code in <code>Figure 2.2</code> shows how to enumerate the actual lines of data in the file. The three lines at the start of the file are header information and the remaining lines that follow contain the data. By loading each line and counting the occurrences in the file, you can determine the number of data elements the array will need to hold. You could also use the <code>ReDim Preserve</code> method to dimension the elements as they are loaded. The more verbose version is included here for clarity of concepts.</p>
<p class=label>
<b>Figure 2.3. Text import code</b></p>
<pre><code>' ------------------------------------------------------
' Set file handle to first available
' file number from os...
' ------------------------------------------------------
intHandle = FreeFile
 &nbsp; 
' ------------------------------------------------------
' Re-open requested sales data file
' ------------------------------------------------------
Open strFilename For _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input Access Read _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As intHandle
 &nbsp; 
' ------------------------------------------------------
' Use string manipulation to import the
' reset last reset date/time
' 13th+ characters in "Last Reset: Jul-7-1996 11:00:00"
' ------------------------------------------------------
Line Input #intHandle, varTempVariable
strLastResetDateTime = Mid$(varTempVariable, 13, Len(varTempVariable))
 &nbsp; 
' ------------------------------------------------------
' Use string manipulation to import the
' reset current reset date/time
' 16th+ characters in "Current Reset: Jul-7-1996 11:00:00"
' ------------------------------------------------------
Line Input #intHandle, varTempVariable
strCurrResetDateTime = Mid$(varTempVariable, 16, Len(varTempVariable))
 &nbsp; 
' ------------------------------------------------------
' Use string manipulation to import the
' store number from the file i.e. "Store: 114"
' ------------------------------------------------------
Line Input #intHandle, varTempVariable
intStoreId = CInt(Mid$(varTempVariable, 8, Len(varTempVariable)))
 &nbsp; 
' ------------------------------------------------------
' Enumerate through the values and post to our custom
' sales table we create each time...
' ------------------------------------------------------
For i = 1 To UBound(SlsData)
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Import sales id number.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Input #intHandle, varTempVariable
 &nbsp; SlsData(i).Id = varTempVariable
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Import sales name.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Input #intHandle, varTempVariable
 &nbsp; SlsData(i).SlsName = varTempVariable
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Import sales quantity.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Input #intHandle, varTempVariable
 &nbsp; SlsData(i).Qty = varTempVariable
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Import sales amount.
 &nbsp; ' ------------------------------------------------------
 &nbsp; Input #intHandle, varTempVariable
 &nbsp; SlsData(i).Amt = varTempVariable
 &nbsp; 
Next i
</code></pre>
<p>
The next code sample demonstrates how to actually retrieve the data from the file and to store it into the temporary variables and the SlsData array structure. Note how this code uses a reusable Variant data type variable to hold the value before assignment. This technique is useful in situations where you may actually want to validate the data type in the imported value.</p>
<p>
For example, you could ensure that the value imported for the sales “Id” field is actually an Integer data type with the code modification show in <code>Figure 2.4</code>.</p>
<p class=label>
<b>Figure 2.4. Data type validation example</b></p>
<pre><code>' ------------------------------------------------------
' Import sales id number.
' ------------------------------------------------------
Input #intHandle, varTempVariable
If VarType(varTempVariable) = vbInteger Then
 &nbsp; ‘ ok
 &nbsp; SlsData(i).Id = varTempVariable
Else
   MsgBox “[Id] field import is not a required Integer data type!”
End If
</code></pre>
<p>
The above examples provide you with the basics to create a custom import routine. The next sections examine the table creation process and how to put it all together.</p>
<h3>The Table Creation Function</h3>
<p>
The code example in <code>Figure 3</code> shows how to use data access objects (DAO) to create a specific table to store the imported data that you have in the temporary variables. The code is standard flavor DAO programming and the table name is actually passed from the import routine and reflects the date and time of the current reset of the POS.</p>
<p class=label>
<b>Figure 3. Table creation example</b></p>
<pre><code>Function CreateNewSlsDataTbl(strTblName As String) As Boolean

 &nbsp; On Local Error GoTo CreateNewSlsDataTbl_Err
 &nbsp; 
 &nbsp; Dim db As DATABASE
 &nbsp; Dim tdf As New TableDef
 &nbsp; Dim fld As New Field
 &nbsp; Dim idx As New Index
 &nbsp; Dim fldName As String, fldAttrib As Integer, fldSize As Integer
 &nbsp; Dim idxName As String, idxFields As String
 &nbsp; Dim idxPrimary As Integer, idxUnique As Integer
 &nbsp; Dim i As Integer, Msg As String
 &nbsp; 
 &nbsp; Set db = CurrentDb()
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Create table.
 &nbsp; ' ------------------------------------------------------
 &nbsp; With tdf
 &nbsp; 
 &nbsp;&nbsp; .Name = strTblName
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Create table fields.
 &nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; For i = 1 To 6
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Set field name list.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldName = Choose(i, "StoreId", "CurrResetDateTime", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Id", "SlsName", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Qty", "Amt")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Set field attributes list.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldAttrib = Choose(i, dbInteger, dbDate, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dbLong, dbText, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dbLong, dbCurrency)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Set field size list.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldSize = Choose(i, dbInteger, dbDate, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dbLong, dbText, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dbLong, dbCurrency)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set fld = tdf.CreateField(fldName, fldAttrib, fldSize)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Set default value status.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' ------------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case i
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld.DefaultValue = "0"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld.DefaultValue = "0"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 5
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld.DefaultValue = "0"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 6
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld.DefaultValue = "0"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tdf.Fields.Append fld
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; Next i
 &nbsp; 
 &nbsp; End With
 &nbsp; 
 &nbsp; ' ------------------------------------------------------
 &nbsp; ' Append new table and refresh collection.
 &nbsp; ' ------------------------------------------------------
 &nbsp; db.TableDefs.Append tdf
 &nbsp; db.TableDefs.Refresh
 &nbsp; 
 &nbsp; CreateNewSlsDataTbl = True
 &nbsp; 
CreateNewSlsDataTbl_End:
 &nbsp; 
 &nbsp; Exit Function
 &nbsp; 
CreateNewSlsDataTbl_Err:
 &nbsp; 
 &nbsp; MsgBox Err.Description, vbInformation
 &nbsp; Resume CreateNewSlsDataTbl_End
 &nbsp; 
End Function
</code></pre>
<h3>Putting the Functions Together</h3>
<p>
Once you have tested the basic routines used to import and post to your database table, you need to provide an interface to help the user navigate the routines.</p>
<p>
A wizard that implements the following would accomplish this:</p>
<p>
Page 1: Uses the Common Dialog Control for browsing and selecting the files.</p>
<p>
Page 2: Confirms the last and current reset date and times.</p>
<p>
Page 3: Finishes by importing and posting the data to the table.</p>
<p>
Page 4: Confirms successful completion of import.</p>
<p>
The textwiz.mda included with the sample download accompanying this article implements all of the concepts outlined in this document. </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>All About Scripting</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_allabout"></a>All About Scripting</h1>
<p>
Nancy Winnick Cluts<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
October 28, 1997</p>
<h2>Introduction</h2>
<pre><code>In the beginning, there was HTML. 
And the hordes used HTML to produce Web pages. 
And they looked at the Web pages, and saw that they were good.
But after a time, visitors to the Web sites grew restless and bored with the Web sites.
They clamored for more. 
They wanted the page to interact with them.
They wanted dynamic content.
The hordes were also restless.
They wanted to be able to provide different content in different contexts.
Thus, the notion of scripting was born.
</code></pre>
<p>
Okay, maybe I'm being just a tad dramatic. But it's a lot more poetic than telling you that scripting HTML is like creating a Microsoft® Excel macro. In Excel, you create your spreadsheet data and create a macro to dynamically update rows or columns based on a specified calculation. With scripting, you write your HTML code and create scripts to take action based on user input or variables.</p>
<p>
In this article, I am going to talk about what scripting is and why you might want to use it. I'll give you some information about the Microsoft Visual Basic® Scripting Edition (VBScript) and JScript™ scripting languages and include samples of scripting. I'll also provide information about server-side scripting and, at the end of this article, a list of links to resources for more information about scripting. </p>
<h2>What Scripting Is, and Why and When to Use It</h2>
<p>
Scripting enables you to set and store variables and to work with data in your HTML code. Many Web sites now employ scripting to check which browser a user is running, validate input, work with applets or controls, and communicate to the user. Let's say that you are creating a Web site that contains a form for ordering ballet tickets. Users can choose the ballet they want to see by entering the title. Now let's say a user types in "Swine Lake." Well, if she were looking for a version starring Miss Piggy, that might be correct, but most ballet companies actually perform "Swan Lake." You could use scripting to validate the name of the ballet and, if the name is not valid, you can display a message box alerting the user to type in a valid name (and even suggest what the correct name might be). </p>
<p>
Scripts can be used in harmony with controls or applets, too. In the example above, you could write an applet that gathers the names of the ballets playing during the season and provide that information to the user in a list box. You could use scripting to validate the information once it was chosen or to confirm the order with the user.</p>
<p>
Two of the most popular scripting languages today are ECMAScript (a standardized scripting language based on JavaScript), which JScript is an implementation of, and VBScript. You can use any scripting language you like as long as your audience's browsers support it. In fact, you can use a combination of scripting in your HTML source code. In the following sections of this article, I will give you more information about VBScript and JScript and provide you with a few examples of each scripting language.</p>
<h2>VBScript</h2>
<p>
VBScript enables authors to create scripts using a subset of the Visual Basic language. If you are already a Visual Basic programmer, or if you are not a programmer but are looking for a scripting language that is easy to learn, VBScript might be the right language for you. VBScript is implemented as a fast, portable interpreter for use in Web browsers and applications that use ActiveX™ controls, Java applets, and Automation servers.</p>
<p>
VBScript is a strict subset of the Visual Basic for Applications language that is used in popular applications such as Microsoft Excel, Microsoft Access, Microsoft Project, and the Visual Basic 4.0 development system. VBScript was designed to be fast, so it does not support the use of strict types—it only supports the use of Variants. It also must be safe for the World Wide Web, so it does not include functionality that directly accesses the client machine's operating system or file system. For example, you cannot do file I/O or read the registry on the client machine.</p>
<p>
VBScript provides support for three separate classes of objects: 
<ul type=disc>
<li>
Objects provided by the VBScript engine (the core run-time functionality with a minimal set of basic Visual Basic objects)<br><br></li>
<li>
Objects provided by Internet Explorer, which are documented in the Internet Client SDK (MSDN Library, SDK Documentation)<br><br></li>
<li>
Objects provided by the VBScript author (that the Web author creates and/or inserts through the &lt;OBJECT&gt; HTML tag)</li>
</ul>
<h3>Samples</h3>
<p>
The following samples are all available for testing and viewing from "Samples" section of the VBScript Web site at <a href="http://www.microsoft.com/VBScript/">http://www.microsoft.com/VBScript/</a>. I'll be showing you only a few of the samples the site has to offer. </p>
<h4>Sample 1. Hello World</h4>
<p>
Let's start with the classic Hello World sample using VBScript. The following code shows you how simple it is to create a button (by using INPUT TYPE=BUTTON) that, when clicked (<code>Sub BtnHello_OnClick</code>), displays a message box (<code>MsgBox</code>) with the text, "Hello, world!":</p>
<pre><code>&lt;CENTER&gt;
 &nbsp; &lt;P&gt;
 &nbsp; &lt;H2&gt;Hello, world sample&lt;/H2&gt;
 &nbsp; 
 &nbsp; &lt;INPUT TYPE=BUTTON VALUE="Click me" NAME="BtnHello"&gt;
&lt;/CENTER&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 &nbsp; Sub BtnHello_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Hello, world!", 0, "My first active document"
 &nbsp; End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
That was pretty simple. Of course, many of us aren't going to use scripting to simply put up a box that says "Hello, world!" Let's move on to a more realistic sample.</p>
<h4>Sample 2. Client-side validation</h4>
<p>
The Ordering Flowers sample demonstrates how you can use VBScript to create a form and gather and validate data given by the user. This form can be used for ordering flowers. It uses radio buttons (INPUT TYPE=RADIO NAME) to enable the user to choose which type of card to include with the flowers, text input fields (INPUT NAME= ) to gather information on where to send the flowers, and a button (INPUT TYPE=BUTTON) to submit the request. Here is the HTML source code:</p>
<pre><code>&lt;PRE&gt; &nbsp; &lt;INPUT TYPE=RADIO NAME=OptOccasion CHECKED&gt; Birthday

 &nbsp; &lt;INPUT TYPE=RADIO NAME=OptOccasion&gt; Anniversary

 &nbsp; &lt;INPUT TYPE=RADIO NAME=OptOccasion&gt; Get well soon
&lt;/PRE&gt;

&lt;FONT SIZE=3&gt;
&lt;B&gt;When and where should the flowers be sent?&lt;/B&gt;
&lt;/FONT&gt;
&lt;BR&gt;

&lt;PRE&gt;
 &nbsp; Date&nbsp;&nbsp; &lt;INPUT NAME=TxtDate SIZE=60&gt;
 &nbsp; Name&nbsp;&nbsp; &lt;INPUT NAME=TxtName SIZE=60&gt;
 &nbsp; Address&nbsp;&nbsp; &lt;INPUT NAME=TxtAddress SIZE=60&gt;
 &nbsp; City&nbsp;&nbsp; &lt;INPUT NAME=TxtCity SIZE=60&gt;
 &nbsp; State&nbsp;&nbsp; &lt;INPUT NAME=TxtState SIZE=60&gt;
 &nbsp; Zip code&nbsp;&nbsp; &lt;INPUT NAME=TxtZip SIZE=60&gt;
 &nbsp; &lt;INPUT TYPE=BUTTON VALUE="Submit" NAME="BtnSubmit"&gt;  
 &nbsp; &lt;INPUT TYPE=BUTTON VALUE="Clear" NAME="BtnClear"&gt;  
 &nbsp; &lt;INPUT TYPE=BUTTON VALUE="Init" NAME="BtnInit"&gt;&lt;BR&gt;
&lt;/PRE&gt;
</code></pre>
<p>
Now that we have a place to put the information, VBScript code is used to validate the data. The fields are initialized when the window is loaded (<code>Sub Window_OnLoad()</code>) in the <b>BtnInit_OnClick()</b> function.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--&nbsp;&nbsp; Option Explicit

 &nbsp; Dim strMsgBoxTitle
 &nbsp; Dim bValidOrder

 &nbsp; Sub Window_OnLoad
 &nbsp;&nbsp;&nbsp;&nbsp; strMsgBoxTitle = "MSFTD"
 &nbsp;&nbsp;&nbsp;&nbsp; Call BtnInit_OnClick
 &nbsp; End Sub

 &nbsp; Sub BtnInit_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp; TxtName.Value = "Joe Smith"
 &nbsp;&nbsp;&nbsp;&nbsp; TxtAddress.Value = "1 Main Street"
 &nbsp;&nbsp;&nbsp;&nbsp; TxtCity.Value = "Springfield"
 &nbsp;&nbsp;&nbsp;&nbsp; TxtState.Value = "Washington"
 &nbsp;&nbsp;&nbsp;&nbsp; TxtZip.Value = "12345"
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; TxtDate.Value = Date + 3
 &nbsp; End Sub
</code></pre>
<p>
When the user clicks the Submit button, VBScript code is used again to validate the input. In the function <b>BtnSubmit_OnClick()</b>, each text field is checked for valid entry. The function <b>CheckSpecified()</b> checks for non-null entries and that the delivery date is reasonable. If it's not, a message box displays this message: "Not even we can deliver that fast!"</p>
<pre><code>&nbsp;&nbsp;&nbsp;Sub BtnSubmit_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = True

 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtName.Value,&nbsp;&nbsp;&nbsp; "Please specify a name.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtAddress.Value,&nbsp;&nbsp;&nbsp; "Please specify an address.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtCity.Value,&nbsp;&nbsp;&nbsp; "Please specify a city.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtState.Value,&nbsp;&nbsp;&nbsp; "Please specify a state.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtZip.Value,&nbsp;&nbsp;&nbsp; "Please specify a zip code.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call CheckSpecified(txtDate.Value,&nbsp;&nbsp;&nbsp; "Please specify a date.")
 &nbsp;&nbsp;&nbsp;&nbsp; Call ValidateDeliveryDate

 &nbsp;&nbsp;&nbsp;&nbsp; If bValidOrder Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Thank you for your order!", 0, strMsgBoxTitle

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' TODO:&nbsp; Actually send the order.
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End Sub

 &nbsp; Sub ValidateDeliveryDate
 &nbsp;&nbsp;&nbsp;&nbsp; Dim SoonestWeCanDeliver
 &nbsp;&nbsp;&nbsp;&nbsp; Dim RequestedDate

 &nbsp;&nbsp;&nbsp;&nbsp; If Not bValidOrder Then Exit Sub

 &nbsp;&nbsp;&nbsp;&nbsp; SoonestWeCanDeliver = Date + 2
 &nbsp;&nbsp;&nbsp;&nbsp; RequestedDate = CDate(TxtDate.Value)
 &nbsp;&nbsp;&nbsp;&nbsp; If RequestedDate &lt; SoonestWeCanDeliver Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Not even we can deliver that fast!", 0, strMsgBoxTitle
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End Sub

 &nbsp; Sub CheckSpecified(ByVal strFieldValue, ByVal strMsg)
 &nbsp;&nbsp;&nbsp;&nbsp; If strFieldValue = "" And bValidOrder Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox strMsg, 0, strMsgBoxTitle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = False
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End Sub

 &nbsp; Sub BtnClear_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp; TxtName.Value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; TxtAddress.Value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; TxtCity.Value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; TxtState.Value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; TxtZip.Value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; TxtDate.Value = ""
 &nbsp; End Sub
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4>Sample 3. Cookies</h4>
<p class=indent>
<B><b>MSDN Editor's Note</b></B>&nbsp;&nbsp;&nbsp;The following section assumes that you have access to the Cookies sample on the VBScript Web site at http://www.microsoft.com/vbscript/us/samples/cookies/extcookie.htm.</p>
<p>
The last VBScript sample I will show you is Maintaining State with Cookies. This sample shows you how easy it is to save values across Web pages using cookies. Users can click buttons to read a variable, save a variable, remove a variable, read a cookie, and flip Web pages. To use this sample, go ahead and click the Save Variable Button. The following VBScript is run:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sub SetVariable(strVariableName, varVariableValue)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Document.Cookie = strVariableName &amp; "=" &amp; varVariableValue
 &nbsp;&nbsp;&nbsp; End Sub
</code></pre>
<p>
I am creative, so I picked <i>test</i> as the variable and 1 as the value. Then I clicked the Read Variable button to see that the right variable was set. It was. Then I checked to see if the value was actually saved across Web pages by clicking the Next Page button and clicking Read Variable on that page. The following VBScript reads the variable I entered on the previous page:</p>
<pre><code>&nbsp;&nbsp;&nbsp;Function ReadVariable(strVariableName)
 &nbsp;&nbsp; 'these five variables are used in the string manipulation
 &nbsp;&nbsp; 'code that finds the variable in the cookie.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim intLocation
 &nbsp;&nbsp; Dim intNameLength
 &nbsp;&nbsp; Dim intValueLength
 &nbsp;&nbsp; Dim intNextSemicolon
 &nbsp;&nbsp; Dim strTemp

 &nbsp;&nbsp; 'calculate length and location of variable name
 &nbsp;&nbsp; intNameLength = Len(strVariableName)
 &nbsp;&nbsp; intLocation = Instr(Document.Cookie, strVariableName)
 &nbsp; 
 &nbsp;&nbsp; 'check for existence of variable name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; If intLocation = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'variable not found, so it can't be read
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadVariable = NOT_FOUND
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'get a smaller substring to work with
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strTemp = Right(Document.Cookie, Len(Document.Cookie) - intLocation + 1)

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'check to make sure we found the full string, not just a substring
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Mid(strTemp, intNameLength + 1, 1) &lt;&gt; "=" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'oops, only found substring, not good enough
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadVariable = NOT_FOUND

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'note that this will incorrectly give a not found result if and only if
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'a search for a variable whose name is a substring of a preceding
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'variable is undertaken.&nbsp; For example, this will fail:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'search for:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyVar
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'cookie contains:&nbsp;&nbsp;&nbsp; MyVariable=2;MyVar=1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'found full string
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intNextSemicolon = Instr(strTemp, ";")

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'if not found, then we need the last element of the cookie
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If intNextSemicolon = 0 Then intNextSemicolon = Len(strTemp) + 1
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'check for empty variable (Var1=;)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If intNextSemicolon = (intNameLength + 2) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'variable is empty
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadVariable = ""
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'calculate value normally
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intValueLength = intNextSemicolon - intNameLength - 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadVariable = Mid(strTemp, intNameLength + 2, intValueLength)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End if
 &nbsp;&nbsp; End Function
</code></pre>
<h2>JScript</h2>
<p>
JScript is Microsoft's implementation of an ECMA-compliant scripting language (like JavaScript) that is targeted specifically to the Internet. Like VBScript, JScript is implemented as a fast, portable interpreter for use in Web browsers and applications that use ActiveX controls, Java applets, and OLE Automation servers. JScript is <i>not</i> Java and has nothing to do with Java. It is closer in syntax to C or C++. If you are a C or C++ developer, you will probably find JScript to be a very easy scripting language to learn (I know I did). </p>
<p>
Also like VBScript, JScript supports three separate classes of objects for use within JScript:
<ul type=disc>
<li>
Objects provided by the JScript engine<br><br></li>
<li>
Objects provided by Internet Explorer (see the JScript Language Reference in the MSDN Library, Tools and Technologies bin)<br><br></li>
<li>
Objects provided by the Web page author via the HTML &lt;OBJECT&gt; tag.</li>
</ul>
<h3>JScript? JavaScript? ECMAScript? What's the Deal Here?</h3>
<p>
You may be confused by the term ECMAScript. You're in good company. Here's the deal. ECMA (European Computer Manufacturers Association) is a European-based association for standardizing information and communications systems. The standard recently approved, known as ECMA-262, is based on joint submissions from Microsoft and Netscape. JScript 3.0 is Microsoft's implementation of the new ECMA-262 scripting language. JavaScript is a scripting language written by Netscape that preceded the ECMA standard. There's an excellent introduction to JavaScript at http://www.cc.ruu.nl/~goyarts/javascript/javascr.htm, if you'd like to read up on it. Basically, when talking about JScript or JavaScript, we are talking about implementations of the same standard scripting language, ECMA—the implementations are just marketed by different companies. </p>
<h3>Samples</h3>
<p>
These samples are available for testing and viewing from the JScript Web site at <a href="http://www.microsoft.com/jscript/">http://www.microsoft.com/jscript/</a>. As with the VBScript samples, I'm showing only a sampling of what they have to offer. You may experience a sense of déjà vu in this section because these two JScript samples are the similar to two of the VBScript samples. They are a bit different in how they work. I decided to show you samples that show off VBScript and JScript rather than trying to cobble together a sample that shows only syntax variation (if I did that, I'd run the risk of showing you either VB-like JScript or C-like VBScript). Let's start with the perennially popular Hello World sample.</p>
<h4>Sample 1. Hello World</h4>
<p>
The Hello World sample is the bare-bones JScript sample. It provides a button that, when clicked, displays a message box with the text, "Hello, world!"</p>
<pre><code>&lt;CENTER&gt;
 &nbsp; &lt;P&gt;
 &nbsp; &lt;H2&gt;Hello, world sample&lt;/H2&gt;
 &nbsp; 
 &nbsp; &lt;FORM Name="Form1" ACTION=""&gt;
 &nbsp; &lt;INPUT TYPE=BUTTON VALUE="Click me" 
 &nbsp;&nbsp;&nbsp;&nbsp; NAME="BtnHello" 
 &nbsp;&nbsp;&nbsp;&nbsp; OnClick="sayhello()"
 &nbsp; &gt;
 &nbsp; &lt;/FORM&gt;

&lt;/CENTER&gt;

&lt;SCRIPT LANGUAGE="JavaScript"&gt;
&lt;!--

 &nbsp;&nbsp; function sayhello ()
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Hello, world!")
 &nbsp;&nbsp; }

//--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Here again, HTML code is used to set up the button and JScript is used to perform an action (displaying the message box using the alert function) when the button is clicked.</p>
<p>
<b>Sample 2. Client-side validation</b></p>
<p>
The second Ordering Flowers sample demonstrates client-side validation using JScript. As in the VBScript sample, this sample uses radio buttons to enable the user to choose which type of card to include with the flowers, text input fields to gather information on where to send the flowers, and a button to submit the request. The HTML source code is the same for this sample as it is for the VBScript sample, so I won't show it here. What is different, however, is the script. The following JScript code is used to do client-side validation:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
&lt;!--
 &nbsp; var bValidOrder
 &nbsp; var f = document.form1

 &nbsp; function Init()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; var d
 &nbsp;&nbsp;&nbsp;&nbsp; document.form1.TxtName.value = "Joe Smith"
 &nbsp;&nbsp;&nbsp;&nbsp; document.form1.TxtAddress.value = "1 Main Street"
 &nbsp;&nbsp;&nbsp;&nbsp; document.form1.TxtCity.value = "Springfield"
 &nbsp;&nbsp;&nbsp;&nbsp; document.form1.TxtState.value = "Washington"
 &nbsp;&nbsp;&nbsp;&nbsp; document.form1.TxtZip.value = "12345"
 &nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; d = new Date()
 &nbsp;&nbsp;&nbsp;&nbsp; d.setDate(d.getDate() + 3)
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtDate.value = (d.getMonth() + 1) + "/" + d.getDate() + 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "/" + d.getYear()
 &nbsp; }

 &nbsp; function SubmitOrder()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = true

 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtName.value,"Please specify a name.")
 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtAddress.value,"Please specify an address.")
 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtCity.value,"Please specify a city.")
 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtState.value,"Please specify a state.")
 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtZip.value,"Please specify a zip code.")
 &nbsp;&nbsp;&nbsp;&nbsp; CheckSpecified(f.TxtDate.value,"Please specify a date.")

 &nbsp;&nbsp;&nbsp;&nbsp; ValidateDeliveryDate()

 &nbsp;&nbsp;&nbsp;&nbsp; if (bValidOrder)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Thank you for your order!")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO:&nbsp; Actually send the order.
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }

 &nbsp; function ValidateDeliveryDate()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; var SoonestWeCanDeliver
 &nbsp;&nbsp;&nbsp;&nbsp; var RequestedDate
 &nbsp;&nbsp;&nbsp;&nbsp; var t

 &nbsp;&nbsp;&nbsp;&nbsp; if (bValidOrder)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SoonestWeCanDeliver = new Date()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SoonestWeCanDeliver.setDate(SoonestWeCanDeliver.getDate() + 2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t = Date.parse(f.TxtDate.value)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequestedDate = new Date()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequestedDate.setTime(t)

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (RequestedDate.getTime() &lt; SoonestWeCanDeliver.getTime()) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = false
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Not even we can deliver that fast!")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }

 &nbsp; function CheckSpecified(strFieldValue, strMsg)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; if (strFieldValue == "")
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bValidOrder) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(strMsg)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bValidOrder = false
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }

 &nbsp; function Clear()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtName.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtAddress.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtCity.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtState.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtZip.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; f.TxtDate.value = ""
 &nbsp; }
//--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h3>Using Both VBScript and JScript</h3>
<p>
Although there are two different scripting languages, they can peacefully coexist on the same Web page. In fact, the Internet Client SDK setup Web page at http://www.microsoft.com/msdn/sdk/inetsdk/asetup/default.htm uses a combination of VBScript, JScript, Dynamic HTML, and controls. There's even a sample on the Internet Explorer Web site (<a href="http://www.microsoft.com/ie/">http://www.microsoft.com/ie/</a>)that demonstrates a mortgage calculator implemented with VBScript or JScript. Just click the button to choose which script to run and view the source for all of the details. It's interesting to see what code that performs identical tasks looks like in two different languages.</p>
<h3>Server-Side Scripting</h3>
<p>
Server-side scripting is scripting done on the server. Well, that's the easy definition. It enables you to run scripts on the server rather than on the client machine. This works well for information that can be stored in a central place (like a database). With server-side scripting, you can enable visitors to your site to have personalized views of the content you offer. The script on the server can conditionally show or not show content that the user has requested, based on information kept in a database on the server. </p>
<p>
To implement server-side scripting, you use Active Server Pages (ASP). ASP technology is built directly into Microsoft Web servers. It is supported on Microsoft Windows NT® running Internet Information Services (IIS) 3.0, Windows NT Workstation 4.0 running Peer Web Services, and Windows® 95 Personal Web Server. If you want to use Active Server Pages with either Personal Web Server on Windows 95 or Peer Web Services on Windows NT Workstation 4.0, you must install the Active Server Pages components after installing your server software. These components are not distributed with the Setup programs for Personal Web Server or Peer Web Services. To register and download the Setup program for these components, go to the Internet Information Server 3.0 site at http://www.microsoft.com/iis/ and click the Download link. </p>
<p>
To use server-side scripting, create a file with an ASP extension, for example, <i>filename</i>.asp. The file may contain any combination of HTML, scripting (such as VBScript or JScript), and calls to components (ActiveX controls or Java applets written by yourself or bought off the shelf). ASP files on the server can be updated at any time. Simply save the changes to the file and the script will be automatically compiled the next time the Web page is loaded.</p>
<p>
ASP includes five standard objects for global use: 
<ul type=disc>
<li>
<b>Request—</b>To get information from the user <br><br></li>
<li>
<b>Response—</b>To send information to the user <br><br></li>
<li>
<b>Server—</b>To control the Internet Information Server <br><br></li>
<li>
<b>Session—</b>To store information about and change settings for the user's current Web-server session <br><br></li>
<li>
<b>Application—</b>To share application-level information and control settings for the lifetime of the application </li>
</ul>
<p>
Like scripting in HTML, which uses <b>&lt;!--</b> and <b>--&gt;</b> as delimiters, ASP uses delimiters too. ASP uses <b>&lt;%</b> and <b>%&gt;</b> to enclose script commands. The scripting languages supported by ASP include VBScript and JScript and enable you to provide some real logic to the HTML code that your ASP script sends to the browser. The following sample (from the troubleshooting techniques provided by the IIS team) demonstrates how ASP can be used with VBScript to process a logon request:</p>
<pre><code>&lt;%@ LANGUAGE="VBSCRIPT" %&gt;
&lt;!-- FILE: login.asp --&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Login Example&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;% IF IsEmpty(Request.Form("Name")) THEN 
 &nbsp; Response.Write "Please enter your Name"
%&gt; 
 &nbsp; &lt;FORM ACTION="login.asp" METHOD=POST&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;INPUT NAME="Name" 
 &nbsp;&nbsp;&nbsp;&nbsp; TYPE=TEXTBOX MAXLENGTH=20&gt; 
 &nbsp; &lt;INPUT TYPE="SUBMIT" VALUE="Submit"&gt; 
 &nbsp; &lt;/FORM&gt;
&lt;% 
 &nbsp; ELSE 
'User verification code goes here Response.Write "Welcome " &amp; Request.Form("Name") &amp; "!" 
END IF
%&gt;

&lt;/BODY&gt; 
&lt;/HTML&gt;
</code></pre>
<h3>Scriptlets</h3>
<p>
One new technology (with a name that sounds amazingly like a type of candy) is scriptlet technology. Scriptlet technology enables Web authors create reusable objects using Dynamic HTML. The concept of scriptlets is simple: they are Web pages that contain script written according to specified conventions. To use a scriptlet, insert an &lt;OBJECT&gt; tag into another Web page and invoke the scriptlet by its standard URL. In Internet Explorer 4.0, the syntax for marking an object as a scriptlet is the MIME type "text/x-scriptlet".</p>
<h3>Is Scripting Just for Browsers?</h3>
<p>
I've talked a lot about scripting in the context of a Web browser, but you can also use the Windows Scripting Host to use script outside of a browser. The Microsoft Scripting Host is a language-independent scripting host for ActiveX scripting engines on 32-bit Windows platforms. In the future, the Windows Scripting Host will be integrated into Windows 98, Windows NT Workstation version 5.0, and Windows NT Server version 5.0. Currently, the VBScript and JScript engines are provided with the Windows Scripting Host. It can be run either from the command line (cscript.exe) or through Windows (wscript.exe). The Windows Scripting Host is ideal for non-interactive scripts that perform administrative tasks. Full documentation for the Windows Scripting Host is available in the Internet Client SDK documentation (MSDN Library, SDK Documentation).</p>
<h3>Scripting Resources</h3>
<p>
This article is designed to provide you with some background information about scripting in general and to give you pointers to more information. There's plenty of information on the Internet that covers scripting, including technical articles, documentation, Web sites, and samples. This list contains the promised pointers (in the form of links) to some of these resources. With these links in hand, you should be able to start your scripting today.
<ul type=disc>
<li>
Microsoft's Scripting Web site at <a href="http://www.microsoft.com/scripting/">http://www.microsoft.com/scripting/</a> (the first place you should go for the latest on scripting)<br><br></li>
<li>
The Internet Explorer 4.0 Technologies area of Site Builder Workshop (<a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a>) has a set of documents about scriptlet technology<br><br></li>
<li>
The Internet Client SDK (MSDN Library, SDK Documentation) <br><br></li>
<li>
The VBScript Web site at <a href="http://www.microsoft.com/vbscript/">http://www.microsoft.com/vbscript/</a><br><br></li>
<li>
The JScript Web site at <a href="http://www.microsoft.com/jscript/">http://www.microsoft.com/jscript/</a><br><br></li>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_jsfaq">
</object><a href=JavaScript:alink_1.Click()>Microsoft JScript: Frequently Asked Questions</a><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_aspover">
</object><a href=JavaScript:alink_2.Click()>An ASP You Can Grasp: The ABCs of Active Server Pages</a><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_asptips">
</object><a href=JavaScript:alink_3.Click()>Fifteen ASP Tips to Improve Performance and Style</a><br><br></li>
<li>
<a href="msdn_tshoot2.htm">ASP Troubleshooting Tips and Techniques</a></li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 114: Preventing a Portion of a Text Box from Scrolling</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn114"></a></sup>Tip 114: Preventing a Portion of a Text Box from Scrolling</h1>
<p>
July 1, 1995</p>
<h2>Abstract</h2>
<p>
The Microsoft® Windows® application programming interface (API) <b>SendMessage</b> function can be used to send messages to Microsoft Visual Basic® controls such as <b>Text Boxes</b>. This article explains how you can prevent text from scrolling in a <b>Text Box</b> control. The nonscrolling portion of the control can also be made invisible to the user.</p>
<h2>Sending Messages to Text Box Controls</h2>
<p>
The <b>Text Box</b> control in Microsoft® Visual Basic® is best described as a mini-word-processing program. When the <b>MultiLine</b> property of the <b>Text Box</b> control is set to True, the lines of text wrap around to the next line. As the amount of text typed into the Text Box increases, the text within the control will scroll upwards. This means that the text becomes invisible. The text, however, remains in the control—it is not deleted.</p>
<p>
The Microsoft Windows® application programming interface (API) <b>SendMessage</b> function can be used to prevent a portion of the <b>Text Box</b> control from scrolling out of view. When you first create the <b>Text Box</b> control, its client area is the formatting rectangle (that is, the area where text can be typed.) The EM_SETRECTNP message can be sent to the control to limit the formatting rectangle to a specific area of the Text Box's client area.</p>
<p>
In the example program below, you want the second half of the <b>Text Box</b> control to remain intact. You don't want the text to scroll out of view. Therefore, you retrieve the height of the <b>Text Box</b> control from its <b>Height</b> property and divide this value by two. This gives us the coordinates of the bottom half of the Text Box. The result is then sent to the <b>SendMessage</b> function, which tells EM_SETRECTNP to prevent that rectangular area from being scrolled.</p>
<p>
You may want to substitute the EM_SETRECT message for the EM_SETRECTNP message. Using EM_SETRECT stops Windows from redrawing the text in the formatting rectangle area. This results in the text being invisible within the <b>Text Box</b> control.</p>
<h2>Example Program</h2>
<p>
This program shows how to temporarily freeze a specific portion of a <b>Text Box</b> control. The frozen portion contains the text that will not be scrolled out of view.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add the following <b>Constant </b>and <b>Declare</b> statements to the General Declarations section of Form1 (note that the <b>Declare</b> statement must be typed as one single line of code):<pre><code>Private Declare Function SendMessage Lib "User" (ByVal hWnd As Integer, ByVal 
 &nbsp; wMsg As Integer, ByVal wParam As Integer, lParam As Any) As Long
Const WM_USER = &amp;H400
Const EM_SETRECTNP = WM_USER + 4
Const EM_SETRECT = WM_USER + 3
</code></pre>
</li>
<li>
Add the following code to the Form_Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp;&nbsp; Text1.Text = "This is the first paragraph that we want to show."
 &nbsp;&nbsp; Text1.Text = Text1.Text &amp; " in the Text Box control"
 &nbsp;&nbsp; Text1.Text = Text1.Text &amp; Chr$(13) &amp; Chr$(10) &amp; "This is the second paragraph that we"
 &nbsp;&nbsp; Text1.Text = Text1.Text &amp; " want to freeze so that text cannot be scrolled"
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event for Form1:<pre><code>Private Sub Form_Click()
 &nbsp;&nbsp; Dim R As RECT
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; 
 &nbsp;&nbsp; ScaleMode = 3
 &nbsp;&nbsp; 
 &nbsp;&nbsp; R.Left = 0
 &nbsp;&nbsp; R.Top = 0
 &nbsp;&nbsp; R.Right = Text1.Width
 &nbsp;&nbsp; R.Bottom = Text1.Height / 2
 &nbsp;&nbsp; 
 &nbsp;&nbsp; X = SendMessage(Text1.hWnd, EM_SETRECTNP, 0, R)
 &nbsp;&nbsp; 
End Sub
</code></pre>
</li>
<li>
From the Visual Basic Insert menu, click Module to create a new module. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>TYPE</b> structure to Module1.Bas:<pre><code>Type RECT
 &nbsp;&nbsp; Left As Integer
 &nbsp;&nbsp; Top As Integer
 &nbsp;&nbsp; Right As Integer
 &nbsp;&nbsp; Bottom As Integer
End Type
</code></pre>
</li>
<li>
Add a <b>Text Box</b> control to Form1. Text1 is created by default. Set its <b>MultiLine</b> property to True.</li>
</ol>
<p>
Run the example program by pressing F5. The <b>Text Box</b> is displayed on Form1. Click the mouse once in the form. Try typing new text into the <b>Text Box</b> control. Notice that the text in the bottom half of the <b>Text Box</b> control does not scroll down as you add more text to the beginning of the <b>Text Box</b> control.</p>
<p>
Modify the program by sending an EM_SETRECT message to the <b>Text Box</b> instead of an EM_SETRECTNP message. Run the program a second time. The second half of the <b>Text Box</b> is not shown, even though the text is actually stored in the control as usual.</p>
<h2>Additional References</h2>
<p>
"EM_SETRECT." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
"EM_SETRECTNP." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 3: Messages, Structures, and Macros)</p>
<p>
"SendMessage." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference Volume 2: Functions)</p>
</BODY>
</HTML>

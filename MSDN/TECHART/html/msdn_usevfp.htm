<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Visual FoxPro to Access Remote Data</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_usevfp"></a></sup>Using Visual FoxPro to Access Remote Data</h1>
<p>
McAlister Merchant<br>
Microsoft Corporation</p>
<p>
September 1996</p>
<h2>Introduction</h2>
<p>
Microsoft® Visual FoxPro™ provides ways to connect to remote data of various types, including data created in nontabular format, on different platforms and from different products. You can get data of almost any type, as long as you know the format and have permission from the server administrator to access it. To do this, Visual FoxPro uses Open Database Connectivity (ODBC) technology, SQL drivers and language, and the speed and object-oriented programming features of Visual FoxPro. ODBC services are handled by the drivers available in your operating system and those supplied with Visual FoxPro. To use these services, you need to have information about your data source and, perhaps, a password.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You might also need to install additional SQL-Client software. Check with the remote data system administrator for details.</p>
<p>
Once you set up Visual FoxPro to access the data, you can use the data remotely or locally, in views, or using SQL pass-through queries.</p>
<h2>Creating Views and Connections</h2>
<p>
A view is an updatable cursor that consists of fields from one or more remote or local tables or other views. A multitable view functions on two or more related tables. View definitions are stored only in databases. Views might include join conditions for related remote or local data and specifications for handling updates and update conflicts. Views provide a data set that you can browse or use to update data you access with Select-SQL statements. Remote views provide the same functionality through remote ODBC data sources. A view is created the same way as a query, but when the view is based on a named connection, you can specify parameters that enable a user to redefine the scope of the view at run time. </p>
<p>
Although queries and views are similar, there are significant differences:</p>
<h3>Queries </h3>
<ul type=disc>
<li>
Describe the desired data in Select-SQL statements saved as a text file with a .QPR extension<br><br></li>
<li>
Exist outside of databases<br><br></li>
<li>
Can function against views as well as against tables<br><br></li>
<li>
Can return output to a cursor, table, array, screen, or browse window<br><br></li>
<li>
Are read-only</li>
</ul>
<h3>Views</h3>
<ul type=disc>
<li>
Describe, within databases, the details of connections to tables or views<br><br></li>
<li>
Respond to all table or cursor commands<br><br></li>
<li>
Accept run-time controls on scope and functionality (views are customizable and updatable)<br><br></li>
<li>
Display and/or update source data</li>
</ul>
<p>
A view might also contain specifications on filter and join conditions, indexes, and update criteria. Though queries can display a "snapshot" of a data source, views, because of their run-time characteristics, are true connections to their data sources.</p>
<h3>Local View</h3>
<p>
A local view describes, in a database, the connection to tables that are in scope. In local views you store Select-SQL descriptions of native Visual FoxPro data without using ODBC protocols. The data accessed need not be contained in the database.</p>
<p>
You create a local view by using the View Designer or the Visual FoxPro CREATE VIEW or CREATE SQL VIEW commands to describe a data set from tables or views in the current database.</p>
<h3>Remote View </h3>
<p>
A remote view describes the connection or data source in an SQL statement in the syntax of the remote server. You create a remote view by using the View Designer or the CREATE SQL VIEW REMOTE command and using remote SQL syntax to describe the data set. You must specify a remote ODBC data source or a named remote connection to data outside the Visual FoxPro database.</p>
<h3>Connections and Named Connections</h3>
<p>
A <i>connection</i> is a definition that specifies the name of a data source. A <i>named connection</i> is a definition, stored in a database, that additionally lets you set properties that optimize the flow of data between Visual FoxPro and the data source. A named data source can include information about user ID, access password, database name, logon prompting and verification. By using a named connection in an application, you make it easy for a user to get to the right place, the right way; all the connection information is associated with the view used to display or manage the data—even if the data is remote.</p>
<p>
You create a connection by using the Connection Designer or the Visual FoxPro CREATE CONNECTION command. You can also access data through temporary connections by using the SQLCONNECT or SQLSTRINGCONNECT commands.</p>
<h3>Preparing to Access Remote Data Sources</h3>
<p>
To set up access to a SQL data source from Visual FoxPro for Windows® or Visual FoxPro for the Macintosh, you need the following:
<ul type=disc>
<li>
Name of the SQL data source—a label<br><br></li>
<li>
Location of the data source—a server location, expressed as a path or device name<br><br></li>
<li>
Name of the database<br><br></li>
<li>
Access password, if any, to the data source<br><br></li>
<li>
ODBC driver, such as Windows 95 ODBC SQL Server, ODBC Setup PPC, or ODBC Setup 68K for Macintosh<br><br></li>
<li>
Optionally, a connection string provided by your system administrator</li>
</ul>
<p>
The ODBC protocol enables you to move data between platforms, programs, and database management systems. ODBC drivers on different platforms enable you to transparently access data. You can also access local sites using ODBC.</p>
<p>
When you want to access data from a remote source, you need to ask the system administrator about where and how the data is stored. You also need to get the name of the data source as well as the physical and logical location (server device and path name) of the data you want. ODBC services can access data in various forms, such as spreadsheets or word processor documents. The data you access on a SQL server is in a table in a database. It is helpful (though not necessary) to know the structure of the table(s) you want to access. To gain access to the data, you might need a password. You might also need additional server software.</p>
<p>
Once you have this information, use it to set up the ODBC driver supplied with your version of Visual FoxPro.</p>
<h2>How to Access Remote Data: An Example</h2>
<p>
A Microsoft Access user creates a database named <i>theater</i>, containing tables, reports, and forms to manage ticket sales for a theater group. This user is set up to be the administrator of the table called LaMancha. The database is located on a shared computer named EntertaiNet. No password is required for remote access.</p>
<p>
The information required for identifying the ODBC data source in this Windows 95 example looks like this:</p>
<p class=indent>
Data Source Name: LaMancha <br>
Server: EntertaiNet <br>
Database Name: theater <br>
Password: &lt;none&gt; </p>
<h3>Set Up SQL Server</h3>
<p>
Prepare for remote access by using the correct ODBC driver setup for your computer. </p>
<h4>To set up the ODBC driver in Windows or Windows NT</h4>
<ol>
<li>
Click the Start button, select Settings, and open the Control Panel. <br><br></li>
<li>
In the Control Panel, select the correct ODBC driver (for instance: 32bitODBC).<br><br></li>
<li>
In the Driver dialog box, specify the following:<p class=tl>
Data Source (LaMancha) <br>
Server (EntertaiNet) <br>
Database Name (theater) </P></li>
</ol>
<p>
You can also add additional information, including a descriptive note in the Description, the Network address, and the Network Library. The system administrator can provide all this information.</p>
<p>
<img src="usevfp_1.gif" border=0>
<ol>
<li>
<b>Figure 1. The ODBC SQL Server setup screen</b></li>
</ol>
<h4>To set up the ODBC driver on a 68K or Power Macintosh system</h4>
<ol>
<li>
In the Control Panels folder, open the ODBC Setup driver supplied with Visual FoxPro that matches your Macintosh® operating system (for instance, ODBC Setup PPC). <br><br></li>
<li>
Add or select the ODBC SQL driver and ODBC Data Source (for instance, ODBC SQL Server Driver PPC). <br><br></li>
<li>
In the Server dialog box, specify the following:<p class=tl>
Data Source Name (LaMancha)<br>
Server (AppleShareServer:EntertaiNet)<br>
Network address (EntertaiNet) </P></li>
</ol>
<p>
<img src="usevfp_2.gif" border=0></p>
<p class=label>
<b>Figure 2. ODBC setup for the Macintosh</b></p>
<p>
The ODBC setup you complete persists until you modify or remove the description from your ODBC setup. This setup describes a connection to a device and database that may contain several accessible tables, so knowledge of the structure of the tables is helpful, if not necessary for effective access to data.</p>
<h3>Connect Visual FoxPro to SQL Data Source</h3>
<p>
The ODBC setup merely registers the existence of an accessible ODBC resource. The business end of the connection is established in Visual FoxPro when you connect to the SQL resource you specified in the ODBC setup.</p>
<p>
In Visual FoxPro you complete the communication between Visual FoxPro and the remote data source by establishing a Visual FoxPro connection. Within a database, in a view, you must first establish a connection and you may create a named connection. You can then use the local or remote view directly or use the view in one or more queries using that view.</p>
<h4>Building a connection</h4>
<p>
To create a remote view, you must open a database and then use the Connection Designer or code to establish a connection to the data source and create the view. For ease of use or for interactive work, the Connection Designer is the best way to go.</p>
<p>
When you highlight Remote Views in the Data tab of the Project Manager and click the New button, the Select Connection dialog box appears, enabling you to define or specify the data connection that your remote view will use.</p>
<p>
<b>To create a new connection, in the Select Connection dialog box</b>
<ol>
<li>
Select New data source.<br><br></li>
<li>
Select a data source from the drop-down list. This list reflects the data sources you specified in the ODBC driver setup.<br><br></li>
<li>
If you need a user ID or password to use data from the remote source, specify that information also.<br><br></li>
<li>
In Visual FoxPro 5.0, click the Verify Connection button to make the actual connection to the data source.</li>
</ol>
<p>
<img src="usevfp_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Selecting a data source in Visual FoxPro 5.0</b></p>
<p>
In Visual FoxPro 3.0, click OK to save the connection. Visual FoxPro 3.0 verifies the connection when you use it in a remote view. </p>
<p>
<img src="usevfp_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Selecting a data source in Visual FoxPro 3.0</b></p>
<p>
Connections inherit the environment settings of the options dialog box and the active data session. You can control properties such as UpdateType, Prepared, and UseMemoSize by using the CURSORSETPROP in the current data session. Use DBSETPROP on an open database to make changes after you create and store a view or connection. See the code later in this paper. </p>
<h4>Building a view</h4>
<p>
At this point, having defined and established the connection to your data source, you can define a view of the remote data. You create this definition just as you would a query definition, but you can do more.</p>
<p>
<b>The remote view</b></p>
<p>
After you create or re-establish a connection in the View Designer, you can create or modify a view. To use the additional control available through remote views, you can manage update operations and optimize data access through judicious remote and local indexing and by controlling data downloads. Using the View Designer to create the view, LaMancha_ducats, that uses the connection created in the Connection Designer produces the following example: a view that allows you to see the ticket sales for a performance date that has already passed. Users of this view can modify the ticket number and the performance selected.</p>
<p>
<img src="usevfp_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Using the View Designer to create a view of ticket sales</b></p>
<p>
This view also allows the user to update values in the Qty and Performance fields of the view, thereby updating the values in the remote table. You can see the settings that provide these functions in the following screens.</p>
<p>
<img src="usevfp_6.gif" border=0></p>
<p class=label>
<b>Figure 6. The View Designer Fields tab</b></p>
<p>
<b>Selecting view records</b></p>
<p>
The Fields tab of View Designer enables you to select fields from the available tables and to create view fields with expressions. The Join tab enables you to specify one of five join conditions: none, inner, left, right, or full. The choices return information from rows where the following statements apply.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Join Type</b></td>
<td class=label width=75%><b>Returned rows</b></td>
</tr>
<tr valign=top>
<td width=25%>inner</td>
<td width=75%>left table value = right table value</td>
</tr>
<tr valign=top>
<td width=25%>left</td>
<td width=75%>all left table values + matching right table values</td>
</tr>
<tr valign=top>
<td width=25%>right</td>
<td width=75%>all right table values + matching left table values</td>
</tr>
<tr valign=top>
<td width=25%>full</td>
<td width=75%>all left table values + all right table values</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Some remote servers do not support outer joins. For details, check with the remote system administrator.</p>
<p>
<img src="usevfp_7.gif" border=0></p>
<p class=label>
<b>Figure 7. The View Designer Join tab</b></p>
<p>
<b>Filtering view records</b></p>
<p>
The Filter tab enables you to describe how to limit the available records to a subset by using a simple expression in the tab, which becomes the WHERE clause of the defining SQL statement.</p>
<p>
<img src="usevfp_8.gif" border=0></p>
<p class=label>
<b>Figure 8. The View Designer Filter tab</b></p>
<p>
<b>Ordering view records</b></p>
<p>
The Order By tab enables you to specify the order in which the records are presented in the view by using fields, aggregate functions, or expressions. Selections you make here become the ORDER BY clause of the defining SQL statement. Ordering is a function Visual FoxPro imposes on records in the view. The remote records retain their stored order.</p>
<p>
<img src="usevfp_9.gif" border=0></p>
<p class=label>
<b>Figure 9. The View Designer Order By tab</b></p>
<p>
<b>Grouping view records</b></p>
<p>
The Group By tab enables you to specify how the returned data is grouped in the view by using fields, by specifying aggregate functions, or by building expressions in an SQL HAVING clause in the defining SQL statement.</p>
<p>
<img src="usevfp_10.gif" border=0></p>
<p class=label>
<b>Figure 10. The View Designer Group By tab</b></p>
<p>
In Visual FoxPro 5.0, the Miscellaneous tab enables you to control the records included in the view by specifying a number or percentage of records to be returned. You can also specify that there be no duplicate records returned or that records be sent to Microsoft Graph, a report, or a table in cross-tabular format.</p>
<p>
<img src="usevfp_11.gif" border=0></p>
<p class=label>
<b>Figure 11. The View Designer Miscellaneous tab</b></p>
<p>
<b>Updating data source records</b></p>
<p>
You can use the View Designer to manage update operations or you can use code, as in the example that follows. Set persistent update criteria and scope in the Update Criteria tab of the View Designer.
<ul type=disc>
<li>
Use the Table list box to choose the tables to update.<br><br></li>
<li>
Use the Field name list box to mark the key and updatable fields.<br><br></li>
<li>
The KeyField property of views identifies fields in an index key expression. The KeyField property enables you to uniquely identify rows in a remote data source. You can modify and restore the default values. The Updatable property of views identifies fields the user can update in the remote data source.<br><br></li>
<li>
Use the SQL WHERE clause to set restrictions on any updates.<p class=tl>
This option lets you specify the conditions under which an update in a multiuser environment fails.</P></li>
</ul>
<p>
The Update Criteria tab enables you to manage when and how updates occur and whether those updates are reflected in the original tables. The Update Criteria for the example is set to update the connected tables and to manage update conflicts that might occur in a multiuser environment in key and modified fields.</p>
<p>
<img src="usevfp_12.gif" border=0></p>
<p class=label>
<b>Figure 12. The View Designer Update Criteria tab</b></p>
<h3>Using Code to Create the View</h3>
<p>
You can also use code to create the view and to manage updates. In the following example, DBSEPROP specifies the tables and fields to be updated, the key field that controls data selection, and the updatable view fields. The DBSETPROP SendUpdates property activates the update function. Using point and click and drag and drop, the View Designer generates the same view as the following code.</p>
<p>
<b>Example code</b></p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Create a view named LaMancha_ducats.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Specify the fields and the join and filter conditions
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * in the view.

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE SQL View Lamancha_ducats AS;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT Ticket.firstn, Ticket.secondn, Ticket.phone, ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ticket.emailname, Ticket.qty, Ticket.qty*Perform.ticketfee,; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Perform.datep, Ticket.performance;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM theater.ticket INNER JOIN theater.perform ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ON Ticket.performance = Perform.number;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHERE Perform.datep DATE()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; creates view

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * The following code uses the UpdateName, UpdatableField, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * and SendUpdates clauses of DBSETPROP( ) to create the 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * selections in the View Designer example, persistent 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * functionality in the LaMancha_Ducats view.

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Specify the datasource the view will update.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats', 'View', 'Tables', 'ticket')
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; specifies table to update

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Specify the updatable fields - the Update Criteria tab.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.qty', 'Field', 'UpdateName';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'ticket.qty) &amp;&amp; specifies data source field update name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.performance, 'Field', 'UpdateName'; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'perform.number')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; specifies data source field update name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Specify fields as a unique key for update tables -
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * the Update Criteria tab.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.first', 'Field', 'KeyField'' .T.) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.second,' 'Field', 'KeyField', .T.) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.performance,' 'Field', 'KeyField', .T.);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; specifies a two-field unique key 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; in TICKET and perform tables 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.qty', 'Field', 'Updatable', .T.) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats.performance, 'Field', 'Updatable', .T.);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; specifies data source updatable field
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Activate the update functionality of this view -
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * equivalent to clicking the Send SQL Update checkbox.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =DBSETPROP('LaMancha_ducats', 'View', SendUpdates', .T.)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Activate View update functionality - 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; equivalent to click Send SQL Updates
</code></pre>
<p>
Use the TABLEUPDATE( ) command to commit updates to the data source.</p>
<p>
You can make temporary changes to the active view by using the CURSORSETPROP command. Such changes are not saved and don't affect the view description stored in the database. Make persistent changes to a saved view in an open database by using the DBSETPROP command.</p>
<h4>Optimizing views and connections</h4>
<p>
<b>Indexing</b></p>
<p>
You can create a local index on a view by using the INDEX ON command, which can be a good way to optimize performance.</p>
<p>
<b>Example</b></p>
<pre><code>&nbsp;&nbsp;&nbsp;INDEX ON Lamancha_ducats.first+Lamancha_ducats.second&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; matches the Order By tab and SQL statement
</code></pre>
<p>
Since the view accesses only specific data from the data source, you can view a subset of what might be a large volume of data. Then, by creating a local index, you can use the advantage of scale. Remember, though, that a local index on a view is a temporary part of the view; the index is deleted when the remote view closes.</p>
<p>
You can create relations between view indexes or between view and table indexes. For better performance when you SET RELATION between view and table indexes, make the view the parent.</p>
<p>
You can enhance performance by using Rushmore Technology in your index.</p>
<h4>Controlling access and downloads</h4>
<p>
You can use a view in multiple work areas without downloading the data for each area by using the USE command with the AGAIN and the NOREQUERY clauses.</p>
<p>
<b>Example </b></p>
<pre><code>&nbsp;&nbsp;&nbsp;USE Lamancha_ducats&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Open the view and download records
 &nbsp; ...
 &nbsp; USE Lamancha_ducats AGAIN in 0 &amp;&amp; Access the already opened view
</code></pre>
<p>
&nbsp;&nbsp;&nbsp;– Or –</p>
<pre><code>&nbsp;&nbsp;&nbsp;SELECT 0
 &nbsp; USE Lamancha_ducats NOREQUERY&nbsp; &amp;&amp; Use the view without a new download
</code></pre>
<p>
You can use the NODATA clause of the USE command to open a view without downloading data so that you can review the structure or reduce the time and size requirements to activate the view. This is faster than setting the MaxRecords property to 0 because the data source needn't build the result set.</p>
<p>
You can combine local and remote data into a single view by creating a local view, then adding any combination of local and remote data sources. When you combine local and remote data, for greater efficiency place all remote data into a single view and then join the local data into a local view.</p>
<p>
You can enhance performance by controlling the number of records Visual FoxPro downloads when you open a view, the number of rows Visual FoxPro retrieves in multiple fetches (MaxRecords and FetchSize properties), and the downloading of memo fields (delayed memo fetching).</p>
<p>
<b>Example</b></p>
<pre><code>&nbsp;&nbsp;&nbsp;USE Lamancha_ducats&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; ?DBSETPROP('Lamancha_ducats', 'View', 'MaxRecords', 20)
 &nbsp; * Download no more than 20 records. 

 &nbsp; ?DBSETPROP('Lamancha_ducats', 'View', 'FetchSize', 10) 
 &nbsp; * Get 10 records at a time, until encountering 
 &nbsp; * a GOBOTTOM or SQLCANCEL command.
</code></pre>
<p>
You can create local business rules that control view fields and rows in order to reduce response time, improve network overhead, or prevent updates that contain faulty data. Use the RuleExpression and RuleText properties of the DBSETPROP command, as in the following example.</p>
<p>
<b>Example</b></p>
<pre><code>&nbsp;&nbsp;&nbsp;?DBSETPROP('Lamancha_ducats.qty', 'Field', 'RuleExpression',;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'qty &lt;25 AND qty &gt;=1')&nbsp; &amp;&amp; Enter quantities between 1 and 25
</code></pre>
<p>
When you use named connections in a data environment that's subject to change, you should include in your application a routine that checks for the data source and its location before you open the view. Then you can provide a way to incorporate the changes so the designed view still works. </p>
<p>
<b>Example</b></p>
<pre><code>&nbsp;&nbsp;&nbsp;IF SQLCONNECT(NamedConnection) &lt;1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW "Connection to server failed"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETURN
 &nbsp; ENDIF
</code></pre>
<h3>More Information</h3>
<p>
For details on commands you use to access remote data, see Visual FoxPro Help topics on the following commands:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Command</b></td>
<td class=label width=61%><b>Comment</b></td>
</tr>
<tr valign=top>
<td width=39%>CREATE CONNECTION</td>
<td width=61%>Creates a named connection or opens the Connection Designer in a database</td>
</tr>
<tr valign=top>
<td width=39%>CREATE SQL VIEW</td>
<td width=61%>Opens the View Designer so you can create or modify views and connections</td>
</tr>
<tr valign=top>
<td width=39%>CURSORSETPROP</td>
<td width=61%>Enables or changes the Buffering table property or cursor properties</td>
</tr>
<tr valign=top>
<td width=39%>DBSETPROP</td>
<td width=61%>Sets or modifies properties in the current database</td>
</tr>
<tr valign=top>
<td width=39%>SQLCONNECT</td>
<td width=61%>Attempts a connection to a remote data source and reports the result, or opens the Select Connection Or Data Source dialog box</td>
</tr>
<tr valign=top>
<td width=39%>SQLSETPROP</td>
<td width=61%>Sets or modifies properties in an active connection</td>
</tr>
<tr valign=top>
<td width=39%>SQLSTRINGCONNECT</td>
<td width=61%>Attempts a connection to a remote data source using its connect string and reports the result, or opens the SQL Data Sources dialog box</td>
</tr>
<tr valign=top>
<td width=39%>TABLEREVERT</td>
<td width=61%>Discards changes made to buffered data</td>
</tr>
<tr valign=top>
<td width=39%>TABLEUPDATE</td>
<td width=61%>Commits updates in a buffered table or enabled in the current view</td>
</tr>
</table><br>
<p>
Other Visual FoxPro SQL commands provide the functionality of the View and Connection Designers on remote data sources. If you use functions or expressions in a remote view, it must conform to the syntax of the data source server, such as Microsoft Excel or Word.</p>
<p>
For information on subjects related to remote data access, see the following Visual FoxPro 5.0 documentation: Chapter 5, "Updating Data with Views," and Chapter 6, "Querying and Updating Multiple Tables," in the <i>User's Guide</i>. In the <i>Developer's Guide</i>, see Chapter 7, "Working with Tables," and Chapter 8, "Creating Views." </p>
<p>
For information on subjects related to optimizing performance during data access, see Chapter 15, "Optimizing Applications" in the <i>Developer's Guide</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 105: Removing a Form's Title Bar</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_msdn105"></a></sup>Tip 105: Removing a Form's Title Bar</h1>
<p>
June 5, 1995</p>
<h2>Abstract</h2>
<p>
This article explains how you can remove the title bar from a window or form from within a Microsoft® Visual Basic® application.</p>
<h2>Modifying the Style Attributes of a Window</h2>
<p>
You can use two Microsoft® Windows® application programming interface (API) functions—<b>GetWindowLong</b> and <b>SetWindowLong—</b>to modify the appearance of a window when your Visual Basic® application is running.</p>
<p>
These functions allow you to programmatically change one or more style bits associated with a specific window. For example, you can remove a window's title bar by changing the following style bits at run time:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=26%>WS_SYSMENU</td>
<td width=74%>The window has a control menu on the left side of its title bar</td>
</tr>
<tr valign=top>
<td width=26%>WS_MINIMIZEBOX</td>
<td width=74%>The window has a minimize box on the right side of its title bar</td>
</tr>
<tr valign=top>
<td width=26%>WS_MAXMIZEBOX</td>
<td width=74%>The window has a maximize box on the right side of its title bar</td>
</tr>
<tr valign=top>
<td width=26%>WS_DLGFRAME</td>
<td width=74%>The window has a double border, but does not have a title bar</td>
</tr>
</table><br>
<p>
First, we must first call <b>GetWindowLong</b>. This function reports the window style associated with a window, among other pieces of information.</p>
<p>
To use <b>GetWindowLong</b>, you must include its <b>Declare</b> statement in your program as follows (note that the <b>Declare</b> statement must be typed as a single line of text):</p>
<pre><code>Private Declare Function GetWindowLong Lib "User" (ByVal hWnd As Integer,
 &nbsp; ByVal nIndex As Integer) As Long
</code></pre>
<p>
The <b>GetWindowLong</b> function requires two arguments. The first argument is the window's handle;the second argument specifies the type of information you want to retrieve. In this case, we want to retrieve the window's style settings. The current window style is returned as a long value after&nbsp; <b>Get WindowLong</b> is called.</p>
<p>
After we have retrieved the current window style for the window, we need to save the original style value that was just retrieved so that we can later restore the window's title bar, if desired. This is done by testing for the individual title bar attributes and saving each in turn to a new <b>OriginalStyle</b> variable. Next, we need to remove the attributes associated with the window's title bar. These attributes are the Minimize and Maximize buttons, the control menu, and the dialog box frame.&nbsp; We can remove them from the original window style value that was just retrieved by using the bitwise AND NOT function. Finally, we can call <b>SetWindowLong</b> to send this information to Windows, which causes the title bar to be removed from the window.</p>
<h2>Example Program</h2>
<p>
Thisprogram shows how you can remove and later restore a window's title bar.
<ol>
<li>
Create a new project in Visual Basic. Form1 is created by default.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form1. Command1 is created by default. Set its <b>Caption</b> property to "Remove Title Bar".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; RemoveTitleBar Form2
 &nbsp;&nbsp; Form2.Show
End Sub
</code></pre>
</li>
<li>
Add a second <b>Command Button</b> control to Form1. Command2 is created by default. Set its <b>Caption</b> property to "Restore Title Bar".<br><br></li>
<li>
Add the following code to the Click event for Command2:<pre><code>Private Sub Command2_Click()
 &nbsp;&nbsp; RestoreTitleBar Form2
 &nbsp;&nbsp; Form2.Show
End Sub
</code></pre>
</li>
<li>
From the Insert menu, select Form. Form2 is created by default. Adjust the size of this form so that it is approximately half the size of Form1. Set its <b>AutoRedraw</b> property to True and its <b>Caption</b> property to an empty (NULL) string.<br><br></li>
<li>
Add a <b>Command Button</b> control to Form2. Command1 is created by default. Set its <b>Caption</b> property to "OK".<br><br></li>
<li>
Add the following code to the Click event for Command1:<pre><code>Private Sub Command1_Click()
 &nbsp;&nbsp; Form1.Show
 &nbsp;&nbsp; Unload Form2
End Sub
</code></pre>
</li>
<li>
From the Insert menu, select Module. Module1.Bas is created by default.<br><br></li>
<li>
Add the following <b>Constant</b> and <b>Declare</b> statements to Module1.Bas (note that each <b>Declare</b> statement must be typed as a single line of text):<pre><code>Option Explicit
Private Declare Function GetWindowLong Lib "User" (ByVal hWnd As Integer,
 &nbsp; ByVal nIndex As Integer) As Long
Private Declare Function SetWindowLong Lib "User" (ByVal hWnd As Integer,
 &nbsp; ByVal nIndex As Integer, ByVal dwNewLong As Long) As Long
Const GWL_STYLE = (-16)
Const WS_DLGFRAME = &amp;H400000
Const WS_SYSMENU = &amp;H80000
Const WS_MINIMIZEBOX = &amp;H20000
Const WS_MAXIMIZEBOX = &amp;H10000
</code></pre>
</li>
<li>
Create a new function called <b>RemoveTitleBar</b> to Module1.Bas. Add the following code to this function:<pre><code>Sub RemoveTitleBar(frm As Form)
 &nbsp;&nbsp; Static OriginalStyle As Long
 &nbsp;&nbsp; Dim CurrentStyle As Long
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; OriginalStyle = 0
 &nbsp;&nbsp; CurrentStyle = GetWindowLong(frm.hWnd, GWL_STYLE)

 &nbsp;&nbsp; OriginalStyle = OriginalStyle Or (CurrentStyle And WS_DLGFRAME)
 &nbsp;&nbsp; OriginalStyle = OriginalStyle Or (CurrentStyle And WS_SYSMENU)
 &nbsp;&nbsp; OriginalStyle = OriginalStyle Or (CurrentStyle And WS_MINIMIZEBOX)
 &nbsp;&nbsp; OriginalStyle = OriginalStyle Or (CurrentStyle And WS_MAXIMIZEBOX)

 &nbsp;&nbsp; CurrentStyle = CurrentStyle And Not WS_DLGFRAME
 &nbsp;&nbsp; CurrentStyle = CurrentStyle And Not WS_SYSMENU
 &nbsp;&nbsp; CurrentStyle = CurrentStyle And Not WS_MINIMIZEBOX
 &nbsp;&nbsp; CurrentStyle = CurrentStyle And Not WS_MAXIMIZEBOX

 &nbsp;&nbsp; X = SetWindowLong(frm.hWnd, GWL_STYLE, CurrentStyle)
 &nbsp;&nbsp; frm.Refresh
End Sub
</code></pre>
</li>
<li>
Create a new function called <b>RestoreTitleBar</b> to Module1.Bas. Add the following code to this function:<pre><code>Sub RestoreTitleBar(frm As Form)
 &nbsp;&nbsp; Static OriginalStyle As Long
 &nbsp;&nbsp; Dim CurrentStyle As Long
 &nbsp;&nbsp; Dim X As Long
 &nbsp;&nbsp; 
 &nbsp;&nbsp; CurrentStyle = GetWindowLong(frm.hWnd, GWL_STYLE)
 &nbsp;&nbsp; CurrentStyle = CurrentStyle Or OriginalStyle
 &nbsp;&nbsp; X = SetWindowLong(frm.hWnd, GWL_STYLE, CurrentStyle)
 &nbsp;&nbsp; frm.Refresh
End Sub
</code></pre>
</li>
</ol>
<p>
Run this example program by pressing F5. Click the "Remove Title Bar" command button. Form2 is displayed. Notice that the title bar has been removed from the form. Click the OK command button, then click the Restore Title Bar command button. Form2 is displayed again, this time with its title bar intact. </p>
<h2>Additional References</h2>
<p>
"GetWindowLong." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference, Volume 2: Functions)</p>
<p>
Knowledge Base Q77316."How to Determine Display State of a VB Form, Modal or Modeless."</p>
<p>
Knowledge Base Q83915. "SAMPLE: Adding and Removing Caption of a Window."</p>
<p>
"SetWindowLong." (MSDN Library Archive, Product Documentation, SDKs, Windows 3.1 SDK, Programmer's Reference, Volume 2: Functions)</p>
</BODY>
</HTML>

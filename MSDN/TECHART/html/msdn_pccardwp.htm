<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PC Card Standard and Windows 95: A Developer's Update</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_pccardwp"></a>PC Card Standard and Windows 95: A Developer's Update</h1>
<p>
Microsoft Corporation</p>
<p>
May 1996</p>
<h2>Introduction</h2>
<p>
Microsoft® Windows® 95 introduced true Plug and Play support for PC Cards. The system-wide Plug and Play infrastructure offered consistent, robust configuration for PC Cards, while abstracting the bus-specific issues away.</p>
<p>
More than a thousand Plug and Play drivers have appeared for Windows 95, and many support multiple implementations of the target hardware: ISA, PCI, and PC Card versions. Since the release of Windows 95, PC Card products designed to the February 1995 PC Card Standard have appeared in the market. These include Multiple Function Cards, 3.3V cards, cards that use DMA, and 32-bit PC Cards.</p>
<p>
Windows is now evolving to add support for these new features. The goal for these advancements is to leverage the Plug and Play architecture's modularity and bus-independence in order to add capabilities without affecting device drivers. Driver development remains identical to that used in Windows 95, and many Plug and Play drivers that work on Windows 95 can be used unmodified to support the same controller implemented on the new multifunction or 32-bit PC Cards.</p>
<p>
The new implementation under Windows will appear in an incremental release to Windows OEMs in mid-1996. The purpose of this paper is to provide hardware vendors and OEMs with all the information needed to support new devices in the Windows environment.</p>
<h2>PCI-to-PC Card Bridges</h2>
<p>
After Windows 95 was released, a new type of controller appeared on the market that interfaces to the PCI bus rather than the ISA bus, referred to as a PCI-to-PC Card bridge. Interfacing this device to the system presents some difficulties, particularly with respect to interrupts. Two methods are available to connect interrupt lines to this device—one that is compatible with ISA IRQs and the other that takes advantage of the PCI interrupt mechanism. Windows requires the use of the ISA-compatible mechanism for support of PC Card 16 cards, and Windows also requires the PCI interrupt mechanism for support of PC Card 32 cards.</p>
<p>
For PC Card 16 card support, the system design must maintain the mapping of the PCMCIA controller's IRQ Routing Register bits to system interrupt vectors. This means that when an interrupt is programmed in the controller to occur on the IRQ<i>x</i> pin, the system's IRQ routing causes the interrupt controller to generate the interrupt vector for IRQ<i>x</i> and no other IRQ.</p>
<p>
For PC Card 32 card support, the system design (including the PCI-to-PC Card 32 bridge) must fully support PCI version 2.1 plus the additional PCI Interrupt Routing Table and Bridge Window specifications.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Systems that implement PCI-to-PC Card 32 bridges must implement both interrupt mechanisms to support both types of cards. The PC Card software in Windows will dynamically configure the bridge to use ISA interrupts for PC Card 16 cards and to use PCI interrupts for PC Card 32 cards.</p>
<h3>Multiple Voltage (5V/3.3V) PC Card Support</h3>
<p>
In the next releases of Windows, 3.3V-only and 5V/3.3V cards will be supported. The voltage policy for multiple voltage cards will be to prioritize 3.3V configurations (if supported by the system) over 5V configurations, regardless of the order of the Configuration_Table_Entry tuples. Aside from this specific exception, all other prioritization of configurations will be based on the order of the Configuration_Table_Entry tuples, as was the case in Windows 95.</p>
<p>
Windows 95 does not explicitly support multiple voltage PC Cards, but you can successfully use a 5V/3.3V card in a 5V-only system by taking advantage of the Windows 95 configuration prioritization rules. To do this, the Configuration_Table_Entry tuples for configurations that use 5V must appear before the Configuration_Table_Entry tuples for configurations that use 3.3V. Given this, Windows 95 will give priority to the 5V configurations and configure the card correctly.</p>
<h3>Multiple Function PC Cards</h3>
<p>
Windows will support Multiple Function PC Cards (MFC cards) in a manner significantly different from how combination PC Cards are supported under the original release of Windows 95. MFC cards are not backward compatible with Windows 95. Combination cards are multifunction cards designed to the PCMCIA Release 2.1 specification.</p>
<p>
For MFC cards, each function on the card is treated independently. Each can be configured and enabled independently, and each function's hardware must make no assumptions about whether any other function on the card is enabled, configured, or even present. Similarly, device drivers for functions on MFC cards must not make any assumptions about the existence or state of any other function that might be on the card, and device drivers must not attempt to access or configure any other function.</p>
<p>
The sole requirement for drivers to be MFC-compatible is to share interrupts by correctly using the system-provided services for shared interrupts. For information about writing device drives, see the Windows 95 Device Driver Kit (DDK) in MSDN Professional Subscription.</p>
<p>
MFC cards have different installation requirements than those for combination cards. Most important, there is no need for the card to have a "Multifunction" class device information file (INF). Instead, only class-specific INF files are required for each function. Each function on the MFC card will receive its own device ID according to the new ID structure defined later in this paper. For MFC functions, the string "DEV#" is added just before the manufacturer ID values, where # is the function number starting from 0.</p>
<p>
Also, Overriding Logical Configurations are still supported, but are only required if the function's Configuration_Table_Entry tuples are incorrect.</p>
<p>
The form of the device ID for MFC cards is the following:</p>
<pre><code>PCMCIA\Manufacturer string-Product String-DEV#-XXXX-YYYY
</code></pre>
<p>
where:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%>Manufacturer string</td>
<td width=78%>String one of the Level One Version tuple (CISTPL_VERS_1).</td>
</tr>
<tr valign=top>
<td width=22%>Product string</td>
<td width=78%>String two of the Level One Version tuple (CISTPL_VERS_1).</td>
</tr>
<tr valign=top>
<td width=22%>DEV#</td>
<td width=78%>The multifunction device number. For example, for function 0 this value would be DEV0.</td>
</tr>
<tr valign=top>
<td width=22%>XXXX</td>
<td width=78%>The Manufacturer ID (first word) of the Manufacturer ID tuple (CISTPL_MANFID).</td>
</tr>
<tr valign=top>
<td width=22%>YYYY</td>
<td width=78%>The Product ID (second word) of the Manufacturer ID tuple (CISTPL_MANFID).</td>
</tr>
</table><br>
<h2>PC Card 32 Support and Windows 95</h2>
<p>
PC Card 32 (also referred to as CardBus) was designed as a combination of PC Card 16 and PCI. In integrating with the system, there are a number of compatibility issues that affect how PC Card 32 cards are supported. To minimize these compatibility issues, and to offer the most robust and feature-rich support for PC Card 32, Windows uses a combination of PC Card software and PCI software to support PC Card 32 cards.</p>
<p>
The PC Card software is responsible for enumerating the card, configuring the voltage for the card, and handling dynamic events such as removals or other STSCHG notifications. The PCI software is responsible for configuring the device as part of the overall PCI topology, including bridging and interrupt routing issues. This combination approach offers the best compatibility with existing drivers and BIOSs, while delivering true dynamic Plug and Play support.</p>
<h3>PC Card 32 Cards</h3>
<p>
PC Card 32 cards must fully support the PCI Configuration Space standard. Unfortunately, the PC Card 32 Standard does not allow card vendors to implement certain critical fields in the configuration space (described as "allocated" in the PC Card Standard). However, the Standard's Common Silicon Guidelines (for silicon that is common to both PCI and CardBus products) do recommend that these fields be implemented. For compatibility with Windows, the Common Silicon Guidelines for Configuration Space must be implemented.</p>
<p>
The required "allocated" fields are listed in the Table 1.</p>
<p class=label>
<b>Table 1. Required "Allocated" Fields</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Field</b></td>
<td class=label width=83%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%>Vendor ID</td>
<td width=83%>This read-only field contains a Unique ID (in PCI space) for the manufacturer of the card. It is allocated by the PCI SIG.</td>
</tr>
<tr valign=top>
<td width=17%>Device ID Revision ID</td>
<td width=83%>These read-only fields are vendor-assigned values that uniquely identify the device (among all vendors PCI or CardBus products).</td>
</tr>
<tr valign=top>
<td width=17%>Class Code</td>
<td width=83%>These read-only fields are defined in the PCI 2.1 specification. They describe what type of device this card is.</td>
</tr>
<tr valign=top>
<td width=17%>Max_Lat Min_Gnt</td>
<td width=83%>These read-only fields specify the desired settings for Latency Timer values, according to the PCI 2.1 specification. Values of 0 indicate that the device has no major requirements for the settings of Latency Timers.</td>
</tr>
<tr valign=top>
<td width=17%>Interrupt Line</td>
<td width=83%>This register must be read-write and must not be connected to anything, just as on PCI cards. It is used to store the current IRQ routing for the device.</td>
</tr>
</table><br>
<p>
In addition, the PC Card 32 specification lists two fields as RESERVED (offset 2C in the configuration space), which have since been defined in the PCI v. 2.1 specification. These are also required on CardBus cards for Windows compatibility.</p>
<p class=label>
<b>Table 2. Required RESERVED Fields for PC Card 32</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>RESERVED Field</b></td>
<td class=label width=54%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=46%>SubSystem ID</td>
<td width=54%>If different than Device ID</td>
</tr>
<tr valign=top>
<td width=46%>SubSystem Vendor ID</td>
<td width=54%>If different from Vendor ID</td>
</tr>
</table><br>
<p>
Windows supports the same set of tuples as required by the PC Card Standard. This information is used as supplemental information for devices that are not fully described using the PCI configuration space. The required tuples are summarized in Table 3.</p>
<p class=label>
<b>Table 3. Required and Recommended Tuples for PC Card 32</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Tuple code</b></td>
<td class=label width=18%><b>Tuple identifier</b></td>
<td class=label width=49%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=33%>Required tuples:</td>
<td width=18%></td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_CONFIG_CB</td>
<td width=18%>04h</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_CFTABLE_ENTRY_CB</td>
<td width=18%>05h</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_BAR</td>
<td width=18%>07h</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_LINKTARGET</td>
<td width=18%>13h</td>
<td width=49%>Required as first tuple by PC Card Standard</td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_VERS_1</td>
<td width=18%>15h</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_MANFID</td>
<td width=18%>20h</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_END</td>
<td width=18%>FFh</td>
<td width=49%>Required as end-of-chain tuple by PC Card Standard</td>
</tr>
<tr valign=top>
<td width=33%>Recommended tuples:</td>
<td width=18%></td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=33%>CISTPL_FUNCID</td>
<td width=18%>21h</td>
<td width=49%></td>
</tr>
</table><br>
<h3>PC Card 32 Host Controllers</h3>
<p>
CardBus host controllers are simply a new type of PCI bridge. These controllers perform the bus bridging function between a PCI bus and the PC Card 32 bus. To smoothly integrate with the PCI standard, manufacturers of PC Card 32 controllers have developed an industry-standard definition for this type of PCI bridge. This standard defines a standard PCI header type field (82h), plus a set of required register definitions that represent the standard way for host software to interface with the controller. The Windows-based socket services drivers are written to support this standard definition, even though it might not be formally approved by the PCI SIG.</p>
<p>
Because CardBus host controllers are PCI bus bridges, they will be supported (enumerated and configured) by the PCI software in Windows, just as other PCI bus bridges are. The PCI bus bridge support has been enhanced for the next release of Windows to support full, dynamic configuration of devices on arbitrary PCI topologies. This support is based on new requirements for PCI interrupt routing and bridge-window configuration currently in process at the PCI SIG. Because of this, full compliance with the latest PCI requirements is required for PC Card 32 support.</p>
<p>
For backward compatibility with Windows 95, there are steps the BIOS can take. Specifically, the BIOS must initialize the CardBus controller in Intel 82365-compatible mode and report it as device PNP0E03, Intel 82365-compatible CardBus controller. The requirements for reporting this node are as follows:
<ul type=disc>
<li>
Use PNP0E03 as the device ID.<br><br></li>
<li>
Use PNP0E00 (generic Intel 82365-compatible controller) as the compatible ID.<br><br></li>
<li>
Report the device as configurable and capable of being disabled at run time.</li>
</ul>
<p>
Given the above, the PC Card drivers for Windows 95 will operate the controller as a PCIC controller. When the new CardBus PC Card software is installed, the system will recognize this ID, disable it, and reconfigure the CardBus controller to operate in full CardBus mode.</p>
<h3>New Device IDs for I/O PC Cards</h3>
<p>
In addition to support for new features, minor enhancements relating to general PC Card support have also been made. For example, the structure of the device ID for I/O PC Cards is being modified to address a problem. The structure used in Windows 95 created an overly unique ID that reflected any and all changes to the CIS of the card and unnecessarily affected the mapping of cards to device drivers. Any tuple change required an associated change to the device information file so that Windows 95 could automatically install the device. In many cases, such as tuple bug fixes or other configuration-related changes not relevant to the device driver, this was not the desired effect. </p>
<p>
The new method limits ID changes to only those that require a new INF. This method puts the hardware vendor in control of determining when the ID must change, based on any related INF changes that might be required.</p>
<p>
The existing device IDs for PC Cards will continue to be used as an equivalent ID. This ensures that existing cards and INFs will continue to work unmodified. In addition, a new device ID will also be created. </p>
<p>
The form of the new device ID is the following:</p>
<pre><code>PCMCIA\Manufacturer string-Product String-XXXX-YYYY
</code></pre>
<p>
where:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%>Manufacturer string </td>
<td width=78%>String one of the Level One Version tuple (CISTPL_VERS_1).</td>
</tr>
<tr valign=top>
<td width=22%>Product String</td>
<td width=78%>String two of the Level One Version tuple (CISTPL_VERS_1).</td>
</tr>
<tr valign=top>
<td width=22%>XXXX</td>
<td width=78%>The Manufacturer ID (first word) of the Manufacturer ID tuple (CISTPL_MANFID).</td>
</tr>
<tr valign=top>
<td width=22%>YYYY</td>
<td width=78%>The Product ID (second word) of the Manufacturer ID tuple (CISTPL_MANFID).</td>
</tr>
</table><br>
<p>
Notice that for a card to work with an existing INF, its card information structure (CIS) must contain the same Manufacturer string, Product string, Manufacturer ID, and Product ID of the card for which the INF was created. Conversely, if a new INF is required for the card, one of these CIS components must be different from that of the original card.</p>
<p>
The list of required tuples for I/O PC Cards is not changed in this version of PC Card software.</p>
<h3>Update on Memory Card Support</h3>
<p>
Windows 95 support for memory card is not designed to be Plug and Play as is the support for I/O cards. To maintain compatibility with the Flash File System drivers, memory cards must be supported as legacy devices. However, new memory card technologies can be supported under Windows with a protected-mode memory technology driver (MTD). The MTD can be automatically installed and loaded in the same way as Plug and Play device drivers. This is done based on the Plug and Play ID created for the memory card. The device ID for memory cards is based on the PCMCIA JEDEC ID (CISTPL_JEDEC-C, 18h). </p>
<p>
The structure of the device ID is the following:</p>
<pre><code>PCMCIA\MTD-&lt;<i>JEDEC_ID</i>&gt;
</code></pre>
<p>
where &lt;<i>JEDEC_ID</i>&gt; consists of the PCMCIA JEDEC ID.</p>
<p>
For an example of device IDs for memory cards, see the file MTD.INF in the \Windows\Inf directory of Windows 95.</p>
<h2>Conclusion</h2>
<p>
Windows is supporting the PC Card standard in a compatible, Plug and Play fashion as new capabilities are introduced. Building on the bus-independent Plug and Play infrastructure in Windows 95, these advancements can be made with no impact on development of drivers or on compatibility with existing drivers.</p>
<p>
A beta test of the new software will be run during the second quarter of 1996. The Dtpl.exe utility, which assists developers in creating CIS that is compatible with Windows 95, is being updated to reflect the changes described in this paper. This utility will be posted on the Microsoft FTP and web servers during the beta test.</p>
<h2>References and Resources</h2>
<p>
The following table presents some of the references, services, and tools available to help build hardware that is compliant with the Microsoft Windows family of operating systems.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Resource</b></td>
<td class=label width=63%><b>Contact</b></td>
</tr>
<tr valign=top>
<td width=37%>Technical information on hardware design for Microsoft Windows</td>
<td width=63%>E-mail: <a href="mailto:ihv@microsoft.com">ihv@microsoft.com</a><br>
Internet: <a href="http://www.microsoft.com/windows/thirdparty/">http://www.microsoft.com/windows/thirdparty/</a></td>
</tr>
<tr valign=top>
<td width=37%>Windows 95 and Windows NT Driver Development Kits (DDK)</td>
<td width=63%>Available in Microsoft Developer Network (MSDN) Professional Subscription.<br>
To subscribe:<br>
Phone: (800) 759-5474<br>
Fax: (206) 936-7329, Attn: Developer Network<br>
E-mail: <a href="mailto:msdn@microsoft.com">msdn@microsoft.com</a></td>
</tr>
<tr valign=top>
<td width=37%>Plug and Play specifications</td>
<td width=63%>Specifications are available from these servers:<br>
<a href="ftp://ftp.microsoft.com/developr/drg/plug-and-play/">ftp://ftp.microsoft.com/developr/drg/plug-and-play/</a><br>
<a href="http://www.microsoft.com/hwdev/specs/pnpspecs.htm">http://www.microsoft.com/hwdev/specs/pnpspecs.htm</a></td>
</tr>
<tr valign=top>
<td width=37%>Diagnostic tools and testing</td>
<td width=63%>Diagnostic and testing tools for Plug and Play are available on the Microsoft FTP server at:<br>
<a href="ftp://ftp.microsoft.com/services/whql">ftp://ftp.microsoft.com/services/whql</a><br>
For more information, see also:<br>
<a href="http://www.microsoft.com/windows/thirdparty/">http://www.microsoft.com/windows/thirdparty/</a></td>
</tr>
<tr valign=top>
<td width=37%>Windows Hardware Quality Labs (WHQL)</td>
<td width=63%>Formerly known as Microsoft Compatibility Labs (MCL)<br>
E-mail: <a href="mailto:whqlinfo@microsoft.com">whqlinfo@microsoft.com</a><br>
Fax: (206) 703-3872<br>
Web site: <a href="http://www.microsoft.com/hwtest/">http://www.microsoft.com/hwtest/</a></td>
</tr>
</table><br>
</BODY>
</HTML>

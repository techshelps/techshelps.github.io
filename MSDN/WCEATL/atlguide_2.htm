<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ATL for Windows CE Wizards to Simplify Application Development</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_using_the_atl_for_windows_ce_wizards_to_simplify_application_development"></a>Using the ATL for Windows CE Wizards to Simplify Application Development</h2>
<p>
The Windows CE Toolkit for Visual C++ 5.0 provides two wizards for the Active Template Library for Windows CE. These are the WCE ATL COM AppWizard and the WCE ATL Object Wizard.</p>
<p>
You use the WCE ATL COM AppWizard to create a new ATL project. Like the WCE MFC AppWizard, the WCE ATL COM AppWizard generates some of the generic code that's common to all ATL projects. It provides five global functions and a globally declared instance of <b>CComModule</b>.</p>
<p>
The <b>DllMain</b> function is the dynamic link library (DLL) equivalent of <b>WinMain</b>. The <b>DllRegisterServer</b> and <b>DllUnregisterServer</b> functions register and unregister the server's components in the registry. Clients can call the <b>DllGetClassObject</b> function to obtain a pointer to the class factory for any component defined in the DLL. COM calls the <b>DllCanUnloadNow</b> function to determine when all objects managed by the DLL have a reference count of zero, so it can unload the DLL from memory. The <b>CComModule</b> object maintains information about all the objects managed by the server. There must be exactly one instance of <b>CComModule</b> in every ATL project.</p>
<p>
The project generated by the WCE ATL COM AppWizard initially contains no COM components. After the project is created, you can use the Windows CE ATL Object Wizard to add components to it. The Windows CE ATL Object Wizard supports seven basic types of components. The components are derived from various templatized classes that provide default implementations of commonly used COM interfaces. The Windows CE ATL Object Wizard generates the necessary header file declarations, IDL definitions, and COM interface map entries for the components you add. You write the methods that implement the functionality that's specific to your components. You can also override the implementations of standard interface methods inherited from the ATL classes.</p>
<p>&nbsp;</p></body>
</HTML>

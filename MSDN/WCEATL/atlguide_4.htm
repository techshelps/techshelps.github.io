<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How is ATL for Windows CE different from ATL for desktop platforms?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_how_is_atl_for_windows_ce_different_from_atl_for_desktop_platforms_"></a>How is ATL for Windows CE Different from ATL for Desktop Platforms?</h2>
<p>
The Active Template Library for Windows CE supports most of the features supported by the Active Template Library for desktop Windows platforms. The most significant difference is that ATL for Windows CE only supports the creation of in-process servers. You can't use it to create executables or Windows services. </p>
<p>
An in-process server is a DLL that is loaded directly into the address space of the calling process. An out-of-process server is a stand-alone executable that runs in its own address space. Because an in-process server runs in the same address space as its host, it doesn't incur the overhead associated with cross-process marshalling on every call.</p>
<p>
Windows CE doesn't support the apartment threading model because it requires more memory resources than the single threading and free threading models, and this conflicts with the memory constraints on many Windows CE-based devices. Part of the overhead of the apartment threading model is its built in marshalling support, which is only necessary when making calls across process boundaries. Because Windows CE only supports in-process servers, it can save both memory and performance overhead by supporting only the single and free threading models.</p>
<p>
There are six ATL classes that are supported on desktop Windows platforms that  ATL for Windows CE doesn't support. ATL for Windows CE doesn't implement the <b>CComApartment</b>, <b>CComAutoThreadModule</b>, <b>CComClassFactoryAutoThread</b>, or <b>CComSimpleThreadAllocator</b> classes because Windows CE doesn't support the apartment threading model.</p>
<p>
Windows CE also doesn't support asynchronous monikers, so ATL for Windows CE doesn't implement the <b>IBindStatusCallbackImpl</b> or <b>CBindStatusCallback</b> classes.</p>
<p>
There are also some specific methods in otherwise supported classes that are not implemented in ATL for Windows CE because they relate to features that Windows CE doesn't support. See the following topics for discussions of how these differences affect the way you program in ATL for Windows CE:</p>
<p class=indent1>
<a href="atlguide_5.htm">Using ATL Global Functions and Macros in Windows CE</a></p>
<p class=indent1>
<a href="atlguide_6.htm">Using ATL Classes in Windows CE</a></p>
<p class=indent1>
<a href="atlguide_7.htm">What's Different in ATL for Windows CE</a></p>
<p>&nbsp;</p></body>
</HTML>

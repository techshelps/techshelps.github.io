<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Children Property Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbprochildrenx"></a>Children Property Example</h1>
<p>
This example puts several <b>Node</b> objects in a <b>TreeView</b> control. The code checks to see if a <b>Node</b> has children nodes. If so, then it displays the text of the children nodes. To try the example, place a <b>TreeView</b> control on a form and paste the code into the form's Declarations section. Run the example, click a <b>Node</b> object to select it, then click the form to see the text of the <b>Node</b> object's children.</p>
<pre><code>Option Explicit
Private Sub Form_Click()
   Dim strC As String 
   Dim N As Integer
   If TreeView1.SelectedItem.Children &gt; 0 Then ' There are children.

      ' Get first child's text, and set N to its index value.
      strC = TreeView1.SelectedItem.Child.Text &amp; vbLF 
      N = TreeView1.SelectedItem.Child.Index

      ' While N is not the index of the child node's
      ' last sibling, get next sibling's text.
      While N &lt;&gt; TreeView1.SelectedItem.Child.LastSibling.Index
         strC = strC &amp; TreeView1.Nodes(N).Next.Text &amp; vbLF
         ' Reset N to next sibling's index.
         N = TreeView1.Nodes(N).Next.Index
      Wend
      ' Show results.
      MsgBox "Children of " &amp; TreeView1.SelectedItem.Text &amp; _
      " are: " &amp; vbLF &amp; strC
   Else ' There are no children.
      MsgBox TreeView1.SelectedItem.Text &amp; " has no children"
   End If
End Sub

Private Sub Form_Load()
   TreeView1.BorderStyle = 1&nbsp; ' Ensure border is visible
   Dim nodX As Node
   Set nodX = TreeView1.Nodes.Add(,,"d","Dates")
   Set nodX = TreeView1.Nodes.Add("d",tvwChild,"d89","1989")
   Set nodX = TreeView1.Nodes.Add("d",tvwChild,"d90","1990")

   ' Create children of 1989 node.
   Set nodX = TreeView1.Nodes.Add("d89",tvwChild, ,"John")
   Set nodX = TreeView1.Nodes.Add("d89",tvwChild, ,"Brent")
   Set nodX = TreeView1.Nodes.Add("d89",tvwChild, ,"Eric")
   Set nodX = TreeView1.Nodes.Add("d89",tvwChild, ,"Ian")
   nodX.EnsureVisible ' Show all nodes.

   ' Create children of 1990 node.
   Set nodX = TreeView1.Nodes.Add("d90",tvwChild, ,"Randy")
   Set nodX = TreeView1.Nodes.Add("d90",tvwChild, ,"Ron")
   nodX.EnsureVisible ' Show all nodes.
End Sub
</code></pre>
</BODY>
</HTML>

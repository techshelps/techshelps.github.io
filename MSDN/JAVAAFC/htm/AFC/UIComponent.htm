<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class UIComponent</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIComponent.htm#com_0003001142010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="UIColumnViewer.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="UIContainer.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class UIComponent</H2>
<PRE><FONT FACE="Courier" SIZE="2">abstract public class UIComponent implements <A HREF="IUIComponent.htm">IUIComponent</A>,
            <A HREF="IUIAccessible.htm">IUIAccessible</A>, <B>ImageObserver</B>, <B>Cloneable</B>
{
  // Methods
  public boolean <A HREF="UIComponent.htm#com_0003001142010100">action</A>(Event evt, Object what);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142010200">addFocusListener</A>(IUIFocusListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142010300">addKeyListener</A>(IUIKeyListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142010400">addMouseListener</A>(IUIMouseListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142010500">addMouseMotionListener</A>(
        IUIMouseMotionListener l);
  public void <A HREF="UIComponent.htm#com_0003001142010600">addNotify</A>();
  public void <A HREF="UIComponent.htm#com_0003001142010700">adjustLayoutSize</A>(Dimension oldSize,
        Dimension newSize);
  public Object <A HREF="UIComponent.htm#com_0003001142010800">clone</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142010900">contains</A>(int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142010a00">contains</A>(Point point);
  public Image <A HREF="UIComponent.htm#com_0003001142010b00">createImage</A>(ImageProducer ip);
  public Image <A HREF="UIComponent.htm#com_0003001142010c00">createImage</A>(int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142010d00">deliverEvent</A>(Event e);
  public void <A HREF="UIComponent.htm#com_0003001142010e00">doDefaultAction</A>();
  public void <A HREF="UIComponent.htm#com_0003001142010f00">doLayout</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142011000">ensureVisible</A>(Rectangle rect);
  public Color <A HREF="UIComponent.htm#com_0003001142011100">getBackground</A>();
  public Rectangle <A HREF="UIComponent.htm#com_0003001142011200">getBounds</A>();
  public Rectangle <A HREF="UIComponent.htm#com_0003001142011300">getBounds</A>(IUIComponent comp);
  public IUIComponent <A HREF="UIComponent.htm#com_0003001142011400">getComponent</A>(int x, int y);
  public IUIComponent <A HREF="UIComponent.htm#com_0003001142011500">getComponent</A>(Point point);
  public IUIComponent <A HREF="UIComponent.htm#com_0003001142011600">getComponentAt</A>(int x, int y);
  public IUIComponent <A HREF="UIComponent.htm#com_0003001142011700">getComponentAt</A>(Point pt);
  public Cursor <A HREF="UIComponent.htm#com_0003001142011800">getCursor</A>();
  public String <A HREF="UIComponent.htm#com_0003001142011900">getDefaultAction</A>();
  public String <A HREF="UIComponent.htm#com_0003001142011a00">getDescription</A>();
  public int <A HREF="UIComponent.htm#com_0003001142011b00">getFlags</A>();
  public Font <A HREF="UIComponent.htm#com_0003001142011c00">getFont</A>();
  public FontMetrics <A HREF="UIComponent.htm#com_0003001142011d00">getFontMetrics</A>(Font f);
  public Color <A HREF="UIComponent.htm#com_0003001142011e00">getForeground</A>();
  public FxGraphics <A HREF="UIComponent.htm#com_0003001142011f00">getGraphics</A>();
  public String <A HREF="UIComponent.htm#com_0003001142012000">getHelp</A>();
  public int <A HREF="UIComponent.htm#com_0003001142012100">getID</A>();
  public int <A HREF="UIComponent.htm#com_0003001142012200">getIndex</A>();
  public String <A HREF="UIComponent.htm#com_0003001142012300">getKeyboardShortcut</A>();
  public Point <A HREF="UIComponent.htm#com_0003001142012400">getLocation</A>();
  public Point <A HREF="UIComponent.htm#com_0003001142012500">getLocation</A>(IUIComponent comp);
  public Point <A HREF="UIComponent.htm#com_0003001142012600">getLocationOnScreen</A>();
  public Dimension <A HREF="UIComponent.htm#com_0003001142012700">getMaximumSize</A>();
  public Dimension <A HREF="UIComponent.htm#com_0003001142012800">getMinimumSize</A>();
  public String <A HREF="UIComponent.htm#com_0003001142012900">getName</A>();
  public IUIContainer <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>();
  public ComponentPeer <A HREF="UIComponent.htm#com_0003001142012b00">getPeer</A>();
  public Dimension <A HREF="UIComponent.htm#com_0003001142012c00">getPreferredSize</A>();
  public Dimension <A HREF="UIComponent.htm#com_0003001142012d00">getPreferredSize</A>(Dimension size);
  public int <A HREF="UIComponent.htm#com_0003001142012e00">getRoleCode</A>();
  public IUIRootContainer <A HREF="UIComponent.htm#com_0003001142012f00">getRoot</A>();
  public Dimension <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>();
  public int <A HREF="UIComponent.htm#com_0003001142013100">getStateCode</A>();
  public Toolkit <A HREF="UIComponent.htm#com_0003001142013200">getToolkit</A>();
  public final Object <A HREF="UIComponent.htm#com_0003001142013300">getTreeLock</A>();
  public String <A HREF="UIComponent.htm#com_0003001142013400">getValueText</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013500">gotFocus</A>(Event e, Object o);
  public boolean <A HREF="UIComponent.htm#com_0003001142013600">handleEvent</A>(Event e);
  public boolean <A HREF="UIComponent.htm#com_0003001142013700">imageUpdate</A>(Image image, int flags, int x, int y,
        int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142013800">invalidate</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013900">invalidateAll</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013a00">isChecked</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013b00">isEnabled</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013c00">isEnabled</A>(boolean recurse);
  public boolean <A HREF="UIComponent.htm#com_0003001142013d00">isFocused</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013e00">isHeightRelative</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142013f00">isHot</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014000">isIndeterminate</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014100">isInvalidating</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014200">isKeyable</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014300">isKeyable</A>(boolean recurse);
  public boolean <A HREF="UIComponent.htm#com_0003001142014400">isNotified</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014500">isPressed</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014600">isRedrawing</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014700">isSelectable</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014800">isSelected</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014900">isShowing</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014a00">isValid</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014c00">isVisible</A>(boolean recurse);
  public boolean <A HREF="UIComponent.htm#com_0003001142014d00">isWidthRelative</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142014e00">keyDown</A>(Event evt, int key);
  public boolean <A HREF="UIComponent.htm#com_0003001142014f00">keyUp</A>(Event evt, int key);
  public void <A HREF="UIComponent.htm#com_0003001142015000">layout</A>();
  public boolean <A HREF="UIComponent.htm#com_0003001142015100">lostFocus</A>(Event e, Object o);
  public boolean <A HREF="UIComponent.htm#com_0003001142015200">mouseClicked</A>(Event e, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015300">mouseDown</A>(Event e, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015400">mouseDrag</A>(Event e, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015500">mouseEnter</A>(Event e, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015600">mouseExit</A>(Event e, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015700">mouseMove</A>(Event evt, int x, int y);
  public boolean <A HREF="UIComponent.htm#com_0003001142015800">mouseUp</A>(Event e, int x, int y);
  public IUIComponent <A HREF="UIComponent.htm#com_0003001142015900">navigate</A>(IUIComponent comp, int direction,
        boolean keyable);
  public void <A HREF="UIComponent.htm#com_0003001142015a00">notifyEvent</A>(UINotifyEvent e);
  public void <A HREF="UIComponent.htm#com_0003001142015b00">paint</A>(FxGraphics g);
  public void <A HREF="UIComponent.htm#com_0003001142015c00">paintAll</A>(FxGraphics g);
  public boolean <A HREF="UIComponent.htm#com_0003001142015d00">postEvent</A>(Event e);
  public boolean <A HREF="UIComponent.htm#com_0003001142015e00">prepareImage</A>(Image image, ImageObserver observer);
  public boolean <A HREF="UIComponent.htm#com_0003001142015f00">prepareImage</A>(Image image, int width, int height,
        ImageObserver observer);
  public void <A HREF="UIComponent.htm#com_0003001142016000">print</A>(FxGraphics g);
  public void <A HREF="UIComponent.htm#com_0003001142016100">printAll</A>(FxGraphics g);
  public void <A HREF="UIComponent.htm#com_0003001142016200">relayout</A>();
  public synchronized void <A HREF="UIComponent.htm#com_0003001142016300">removeFocusListener</A>(IUIFocusListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142016400">removeKeyListener</A>(IUIKeyListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142016500">removeMouseListener</A>(IUIMouseListener l);
  public synchronized void <A HREF="UIComponent.htm#com_0003001142016600">removeMouseMotionListener</A>(
        IUIMouseMotionListener l);
  public void <A HREF="UIComponent.htm#com_0003001142016700">removeNotify</A>();
  public void <A HREF="UIComponent.htm#com_0003001142016800">repaint</A>();
  public void <A HREF="UIComponent.htm#com_0003001142016900">repaint</A>(long time);
  public void <A HREF="UIComponent.htm#com_0003001142016a00">repaint</A>(int x, int y, int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142016b00">repaint</A>(long tm, int x, int y, int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142016c00">requestFocus</A>();
  public void <A HREF="UIComponent.htm#com_0003001142016d00">setBackground</A>(Color color);
  public void <A HREF="UIComponent.htm#com_0003001142016e00">setBounds</A>(int x, int y, int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142016f00">setBounds</A>(Rectangle rect);
  public void <A HREF="UIComponent.htm#com_0003001142017000">setChecked</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017100">setCursor</A>(Cursor cursor);
  public void <A HREF="UIComponent.htm#com_0003001142017200">setEnabled</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017300">setFlags</A>(int flags);
  public void <A HREF="UIComponent.htm#com_0003001142017400">setFocused</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017500">setFont</A>(Font font);
  public void <A HREF="UIComponent.htm#com_0003001142017600">setForeground</A>(Color color);
  public void <A HREF="UIComponent.htm#com_0003001142017700">setHot</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017800">setID</A>(int id);
  public void <A HREF="UIComponent.htm#com_0003001142017900">setIndeterminate</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017a00">setIndex</A>(int index);
  public void <A HREF="UIComponent.htm#com_0003001142017b00">setInvalidating</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142017c00">setLocation</A>(int x, int y);
  public void <A HREF="UIComponent.htm#com_0003001142017d00">setLocation</A>(Point point);
  public void <A HREF="UIComponent.htm#com_0003001142017e00">setName</A>(String name);
  public void <A HREF="UIComponent.htm#com_0003001142017f00">setParent</A>(IUIContainer parent);
  public void <A HREF="UIComponent.htm#com_0003001142018000">setPressed</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142018100">setRedrawing</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142018200">setSelected</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142018300">setSize</A>(int width, int height);
  public void <A HREF="UIComponent.htm#com_0003001142018400">setSize</A>(Dimension size);
  public void <A HREF="UIComponent.htm#com_0003001142018500">setValid</A>(boolean on);
  public void <A HREF="UIComponent.htm#com_0003001142018600">setValueText</A>(String value);
  public void <A HREF="UIComponent.htm#com_0003001142018700">setVisible</A>(boolean show);
  public String <A HREF="UIComponent.htm#com_0003001142018800">toString</A>();
  public void <A HREF="UIComponent.htm#com_0003001142018900">update</A>(FxGraphics g);
  public void <A HREF="UIComponent.htm#com_0003001142018a00">validate</A>();
}
</FONT></PRE>
<P>This class implements a stateless component. <B>UIComponent</B> is the base class for all components and containers in AFC. <A HREF="UIContainer.htm">UIContainer</A> extends <B>UIComponent</B> to implement a stateless container. 
<P><B>UIComponent</B> allows you to create lightweight controls without the overhead of managing an object's states. Although most components and containers in AFC are not stateless, <B>UIComponent</B> and <A HREF="UIContainer.htm">UIContainer</A> provide the option of creating controls that have no states. 
<P><B>Note</B>  AFC extends <A HREF="UIStateComponent.htm">UIStateComponent</A> and <A HREF="UIStateContainer.htm">UIStateContainer</A> from <B>UIComponent</B> and <A HREF="UIContainer.htm">UIContainer</A>, respectively, to implement objects having states. 
<P><B>UIComponent</B> implements the <A HREF="IUIComponent.htm">IUIComponent</A>, <A HREF="IUIAccessible.htm">IUIAccessible</A>, and <B>ImageObserver</B> interfaces. 
<P><B>Note</B>  The hot-track color is the same color as the button text color. As a result, hot-tracking does not appear to be functional. 
<H3 STYLE="color:#333366"><A NAME="com_0003001142010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001142010100">action</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean action(Event evt, Object what);
</FONT></PRE>
<P><P>Responds to an action that has occurred within the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>what</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that posted the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>action</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010200">addFocusListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addFocusListener(IUIFocusListener l);
</FONT></PRE>
<P><P>Adds the specified focus listener. The listener receives all focus events generated for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The focus listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addFocusListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016300">removeFocusListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010300">addKeyListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addKeyListener(IUIKeyListener l);
</FONT></PRE>
<P><P>Adds the specified key listener. The listener receives all key events generated for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addKeyListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016400">removeKeyListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010400">addMouseListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addMouseListener(IUIMouseListener l);
</FONT></PRE>
<P><P>Adds the specified mouse listener. The listener receives all mouse events generated for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addMouseListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016500">removeMouseListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010500">addMouseMotionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addMouseMotionListener(IUIMouseMotionListener l);
</FONT></PRE>
<P><P>Adds the specified mouse motion listener. The listener receives all mouse motion events generated for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse motion listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addMouseMotionListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016600">removeMouseMotionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010600">addNotify</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addNotify();
</FONT></PRE>
<P><P>Called to perform initialization when the graphics context is first available. Sends an <B>EVENT_OBJECT_CREATE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>addNotify</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016700">removeNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010700">adjustLayoutSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void adjustLayoutSize(Dimension oldSize, Dimension newSize);
</FONT></PRE>
<P><P>Invalidates the control and adjusts its layout size. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>oldSize</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The previous layout size of the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newSize</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new layout size of the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>adjustLayoutSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>adjustLayoutSize</B> is automatically invoked when the component's size has changed. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010800">clone</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Object clone();
</FONT></PRE>
<P><P>Clones a copy of the component. 

<P><B>Return Value:</B> <P>Returns the new cloned copy of the component 

<P><B>Exceptions:</B> <P><B>CloneNotSupportedException</B>
 This exception should not occur. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010900">contains</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean contains(int x, int y);
</FONT></PRE>
<P><P>Determines whether the control contains the point identified by the specified coordinates. 
<P><B>Return Value:</B> <P>Returns true if the control contains the point; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point, in the control's coordinate space. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point, in the control's coordinate space. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>contains</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and calls <A HREF="UIComponent.htm#com_0003001142013000">getSize</A> to determine whether the point lies within the control. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010a00">contains</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean contains(Point point);
</FONT></PRE>
<P><P>Determines whether the control contains the specified point. 
<P><B>Return Value:</B> <P>Returns true if the control contains the point; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>point</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The point, in the control's coordinate space. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>contains</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and calls <A HREF="UIComponent.htm#com_0003001142013000">getSize</A> to determine whether the point lies within the control. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010b00">createImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Image createImage(ImageProducer ip);
</FONT></PRE>
<P><P>Creates an image from the specified image producer. 

<P><B>Return Value:</B> <P>Returns the created image. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ip</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image producer that will generate the image. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010c00">createImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Image createImage(int width, int height);
</FONT></PRE>
<P><P>Creates an off-screen image of the specified dimensions (in pixels). 

<P><B>Return Value:</B> <P>Returns the created image. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the image. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010d00">deliverEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void deliverEvent(Event e);
</FONT></PRE>
<P><P>Delivers an event to the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>deliverEvent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface by calling <A HREF="UIComponent.htm#com_0003001142015d00">postEvent</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010e00">doDefaultAction</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void doDefaultAction();
</FONT></PRE>
<P><P>Performs the default action for the control. For example, the default action for a button is to be pressed. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>doDefaultAction</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011900">getDefaultAction</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142010f00">doLayout</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void doLayout();
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142015000">layout</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011000">ensureVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean ensureVisible(Rectangle rect);
</FONT></PRE>
<P><P>Brings the area identified by the specified rectangle into view. 
<P><B>Return Value:</B> <P>Returns true if any component was moved or resized to make the rectangle visible; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle identifying the area to be made visible. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>ensureVisible</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011100">getBackground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Color getBackground();
</FONT></PRE>
<P><P>Retrieves the background color of the control. 
<P><B>Return Value:</B> <P>Returns a <B>Color</B> object containing the background color. 

<P><B>Remarks:</B> <P>This method implements <B>getBackground</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and only checks the background color of the control's parent. By default, the control has no parent (see <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>); therefore, null is returned. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016d00">setBackground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011200">getBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Rectangle getBounds();
</FONT></PRE>
<P><P>Retrieves the bounding rectangle of the control, relative to its parent. 
<P><B>Return Value:</B> <P>Returns a <B>Rectangle</B> object identifying the control's bounding area, in its parent's coordinate space. 

<P><B>Remarks:</B> <P>This method implements <B>getBounds</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control has no parent, the returned rectangle has a width and height of 0 pixels. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016e00">setBounds</A>, <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011300">getBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Rectangle getBounds(IUIComponent comp);
</FONT></PRE>
<P><P>Retrieves the bounding rectangle of the control, relative to the specified component. 
<P><B>Return Value:</B> <P>Returns a <B>Rectangle</B> object identifying the control's bounding area, in the coordinate space of the specified component. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The reference component. The coordinates of the returned <B>Rectangle</B> object are relative to this component. If null, screen coordinates are used. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getBounds</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016e00">setBounds</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011400">getComponent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getComponent(int x, int y);
</FONT></PRE>
<P><P>Retrieves the component that contains the point identified by the specified coordinates. 
<P><B>Return Value:</B> <P>Returns the control itself if it contains the point; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point, in the control's coordinate space. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point, in the control's coordinate space. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getComponent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and calls <A HREF="UIComponent.htm#com_0003001142013000">getSize</A> to determine whether the point lies within the control. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011500">getComponent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getComponent(Point point);
</FONT></PRE>
<P><P>Retrieves the component that contains the specified point. 
<P><B>Return Value:</B> <P>Returns the control itself if it contains the point; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>point</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The point, in the control's coordinate space. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getComponent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and calls <A HREF="UIComponent.htm#com_0003001142013000">getSize</A> to determine whether the point lies within the control. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011600">getComponentAt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getComponentAt(int x, int y);
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142011400">getComponent</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011700">getComponentAt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getComponentAt(Point pt);
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142011400">getComponent</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011800">getCursor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Cursor getCursor();
</FONT></PRE>
<P><P>Retrieves the control's cursor. 
<P><B>Return Value:</B> <P>Returns a <B>Cursor</B> object containing the cursor. 

<P><B>Remarks:</B> <P>This method implements <B>getCursor</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and only checks the cursor of the control's parent. By default, the control has no parent (see <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>); therefore, null is returned. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017100">setCursor</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011900">getDefaultAction</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getDefaultAction();
</FONT></PRE>
<P><P>Retrieves the default action for the control. 
<P><B>Return Value:</B> <P>Returns an empty string, indicating the control has no default action. 

<P><B>Remarks:</B> <P>This method implements <B>getDefaultAction</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010e00">doDefaultAction</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011a00">getDescription</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getDescription();
</FONT></PRE>
<P><P>Retrieves a description of the control. 
<P><B>Return Value:</B> <P>Returns an empty string, indicating the control has no description. 

<P><B>Remarks:</B> <P>This method implements <B>getDescription</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011b00">getFlags</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFlags();
</FONT></PRE>
<P><P>Retrieves the user-defined bits currently set for the control. 
<P><B>Return Value:</B> <P>Returns 0, indicating no user-defined bits are set. 

<P><B>Remarks:</B> <P>This method implements <B>getFlags</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017300">setFlags</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011c00">getFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Font getFont();
</FONT></PRE>
<P><P>Retrieves the font of the control. 
<P><B>Return Value:</B> <P>Returns a <B>Font</B> object containing the font. 

<P><B>Remarks:</B> <P>This method implements <B>getFont</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and only checks the font of the control's parent. By default, the control has no parent (see <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>); therefore, null is returned. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017500">setFont</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011d00">getFontMetrics</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FontMetrics getFontMetrics(Font f);
</FONT></PRE>
<P><P>Retrieves the font metrics for the specified font. 
<P><B>Return Value:</B> <P>Returns the font metrics. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>f</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The font. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getFontMetrics</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011e00">getForeground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Color getForeground();
</FONT></PRE>
<P><P>Retrieves the foreground color of the control. 
<P><B>Return Value:</B> <P>Returns a <B>Color</B> object containing the foreground color. 

<P><B>Remarks:</B> <P>This method implements <B>getForeground</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and only checks the foreground color of the control's parent. By default, the control has no parent (see <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>); therefore, null is returned. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017600">setForeground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142011f00">getGraphics</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxGraphics getGraphics();
</FONT></PRE>
<P><P>Retrieves the graphics context of the control. 
<P><B>Return Value:</B> <P>Returns the graphics context, if available; otherwise, returns null. 

<P><B>Remarks:</B> <P>This method implements <B>getGraphics</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>Note</B>  In order to get a valid <B>FxGraphics</B> object back from the <B>getGraphics</B> call, the <A HREF="UIComponent.htm#com_0003001142014400">isNotified</A> state must be checked first. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012000">getHelp</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getHelp();
</FONT></PRE>
<P><P>Retrieves the Help text for the control. 
<P><B>Return Value:</B> <P>Returns an empty string, indicating the control has no Help text. 

<P><B>Remarks:</B> <P>This method implements <B>getHelp</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012100">getID</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getID();
</FONT></PRE>
<P><P>Retrieves the control's identifier. 
<P><B>Return Value:</B> <P>Returns -1, indicating the control has no identifier. 

<P><B>Remarks:</B> <P>This method implements <B>getID</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017800">setID</A>, <A HREF="UIComponent.htm#com_0003001142012900">getName</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012200">getIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getIndex();
</FONT></PRE>
<P><P>Retrieves the index of the control within its parent container. 
<P><B>Return Value:</B> <P>Returns the control's index (if it has a parent container); otherwise, returns -1. 

<P><B>Remarks:</B> <P>This method implements <B>getIndex</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017a00">setIndex</A>, <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012300">getKeyboardShortcut</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getKeyboardShortcut();
</FONT></PRE>
<P><P>Retrieves the keyboard shortcut for the control. 
<P><B>Return Value:</B> <P>Returns an empty string, indicating the control has no keyboard shortcut. 

<P><B>Remarks:</B> <P>This method implements <B>getKeyboardShortcut</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012400">getLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getLocation();
</FONT></PRE>
<P><P>Retrieves the location of the control, relative to its parent. 
<P><B>Return Value:</B> <P>Returns a <B>Point</B> object containing the upper-left corner of the control, in its parent's coordinate space. 

<P><B>Remarks:</B> <P>This method implements <B>getLocation</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017c00">setLocation</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012500">getLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getLocation(IUIComponent comp);
</FONT></PRE>
<P><P>Retrieves the location of the control, relative to the specified component. 
<P><B>Return Value:</B> <P>Returns a <B>Point</B> object containing the upper-left corner of the control, in the coordinate space of the specified component. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The reference component. The coordinates of the returned <B>Point</B> object are relative to this component. If null, screen coordinates are used. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getLocation</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017c00">setLocation</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012600">getLocationOnScreen</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getLocationOnScreen();
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142012400">getLocation</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012700">getMaximumSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getMaximumSize();
</FONT></PRE>
<P><P>Retrieves the maximum dimensions (in pixels) for displaying the control. 
<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object with the width and height set to the maximum integer value. 

<P><B>Remarks:</B> <P>This method implements <B>getMaximumSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012800">getMinimumSize</A>, <A HREF="UIComponent.htm#com_0003001142012c00">getPreferredSize</A>, <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012800">getMinimumSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getMinimumSize();
</FONT></PRE>
<P><P>Retrieves the minimum size of the control. The minimum size specifies the smallest dimensions (in pixels) that will allow the control to be displayed. 
<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object with a width and height of 0 pixels. 

<P><B>Remarks:</B> <P>This method implements <B>getMinimumSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012c00">getPreferredSize</A>, <A HREF="UIComponent.htm#com_0003001142012700">getMaximumSize</A>, <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012900">getName</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getName();
</FONT></PRE>
<P><P>Retrieves the control's name. 
<P><B>Return Value:</B> <P>Returns the name of the control, or null, indicating the control has no name. 

<P><B>Remarks:</B> <P>This method implements <B>getName</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017e00">setName</A>, <A HREF="UIComponent.htm#com_0003001142012100">getID</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012a00">getParent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIContainer getParent();
</FONT></PRE>
<P><P>Retrieves the control's parent. 
<P><B>Return Value:</B> <P>Returns the parent of the container, or null, indicating the control has no parent container. 

<P><B>Remarks:</B> <P>This method implements <B>getParent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017f00">setParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012b00">getPeer</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public ComponentPeer getPeer();
</FONT></PRE>
<P><P>Retrieves the peer of the control's root container. 
<P><B>Return Value:</B> <P>Returns the root container's peer. 

<P><B>Remarks:</B> <P>This method implements <B>getPeer</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012c00">getPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getPreferredSize();
</FONT></PRE>
<P><P>Retrieves the preferred dimensions (in pixels) for displaying the control. 
<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object with a width and height of 0 pixels. 

<P><B>Remarks:</B> <P>This method implements <B>getPreferredSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012800">getMinimumSize</A>, <A HREF="UIComponent.htm#com_0003001142012700">getMaximumSize</A>, <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012d00">getPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getPreferredSize(Dimension size);
</FONT></PRE>
<P><P>Retrieves the preferred dimensions (in pixels) for displaying the control. 
<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object with a width and height of 0 pixels. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Dimension</B> to coerce the preferred size to. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>getPreferredSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P>This method is used to force the preferred size of a component to a specified <B>Dimension</B> or on a particular axis.
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012800">getMinimumSize</A>, <A HREF="UIComponent.htm#com_0003001142012700">getMaximumSize</A>, <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012e00">getRoleCode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRoleCode();
</FONT></PRE>
<P><P>Retrieves the role of the control. 
<P><B>Return Value:</B> <P>Returns 0, indicating no <B>ROLE_SYSTEM</B> code describes the control. 

<P><B>Remarks:</B> <P>This method implements <B>getRoleCode</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method if one of the <B>ROLE_SYSTEM</B> codes describes the control. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142012f00">getRoot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIRootContainer getRoot();
</FONT></PRE>
<P><P>Retrieves the first component in the control's chain that implements the <A HREF="IUIRootContainer.htm">IUIRootContainer</A> interface. 
<P><B>Return Value:</B> <P>Returns the root container if successful; otherwise, returns null. 

<P><B>Remarks:</B> <P>This method implements <B>getRoot</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013000">getSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getSize();
</FONT></PRE>
<P><P>Retrieves the size (in pixels) of the control. 
<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object containing the control's size. 

<P><B>Remarks:</B> <P>This method implements <B>getSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and uses the control's parent container to determine the size. If the control has no parent, <B>getSize</B> returns a width and height of zero. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018300">setSize</A>, <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013100">getStateCode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getStateCode();
</FONT></PRE>
<P><P>Retrieves the state of the control. 
<P><B>Return Value:</B> <P>Returns the combination of <B>STATE_SYSTEM</B> codes that best describe the state of the control. 

<P><B>Remarks:</B> <P>This method implements <B>getStateCode</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. The returned code contains the <B>STATE_SYSTEM_SIZEABLE</B> and <B>STATE_SYSTEM_MOVEABLE</B> flags. Depending on which states are set for the control, the returned code may also contain one of the following other codes. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>State
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Code
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">checked
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_CHECKED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focused
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_FOCUSED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">hot-tracked
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_HOTTRACKED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">indeterminate
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_MIXED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">pressed
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_PRESSED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">selected
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_SELECTED</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">can receive keyboard input
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_FOCUSABLE</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">can be selected
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_SELECTABLE</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">not visible
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>STATE_SYSTEM_INVISIBLE</B>
</FONT></TD>
</TR>
</TABLE>
<P>Components can override <B>getStateCode</B> by combining any class-specific codes with the codes obtained from each superclass. The following example shows how <A HREF="UISelector.htm">UISelector</A> overrides this method. 
<PRE><FONT FACE="Courier" SIZE="2">public int getStateCode()
{
   int state = super.getStateCode();

   if (selMode == MULTISELECT)
      state |= STATE_SYSTEM_MULTISELECTABLE;
   else if (selMode == EXTENDSELECT)
      state |= STATE_SYSTEM_EXTSELECTABLE;

   return(state);
}
</FONT></PRE>
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013a00">isChecked</A>, <A HREF="UIComponent.htm#com_0003001142013d00">isFocused</A>, <A HREF="UIComponent.htm#com_0003001142013f00">isHot</A>, <A HREF="UIComponent.htm#com_0003001142014000">isIndeterminate</A>, <A HREF="UIComponent.htm#com_0003001142014200">isKeyable</A>, <A HREF="UIComponent.htm#com_0003001142014500">isPressed</A>, <A HREF="UIComponent.htm#com_0003001142014700">isSelectable</A>, <A HREF="UIComponent.htm#com_0003001142014800">isSelected</A>, <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013200">getToolkit</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Toolkit getToolkit();
</FONT></PRE>
<P><P>Retrieves the toolkit associated with the control. 
<P><B>Return Value:</B> <P>Returns the associated toolkit. 

<P><B>Remarks:</B> <P>This method implements <B>getToolkit</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013300">getTreeLock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final Object getTreeLock();
</FONT></PRE>
<P><P>Retrieves the locking object for AWT component tree and layout operations. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013400">getValueText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getValueText();
</FONT></PRE>
<P><P>Retrieves the value of the control. 
<P><B>Return Value:</B> <P>Returns an empty string, indicating the control has no value text. 

<P><B>Remarks:</B> <P>This method implements <B>getValueText</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018600">setValueText</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013500">gotFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean gotFocus(Event e, Object o);
</FONT></PRE>
<P><P>Responds to the control receiving input focus. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that posted the event (typically null). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>gotFocus</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>gotFocus</B> calls <A HREF="UIComponent.htm#com_0003001142017400">setFocused</A> to set the focus state. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013600">handleEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean handleEvent(Event e);
</FONT></PRE>
<P><P>Responds to events occurring within the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>handleEvent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>handleEvent</B> checks the type of event and calls the corresponding event method, as follows. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>ACTION_EVENT</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142010100">action</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>GOT_FOCUS</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142013500">gotFocus</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>LOST_FOCUS</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015100">lostFocus</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>KEY_ACTION</B> or <B>KEY_PRESS</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142014e00">keyDown</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>KEY_ACTION_RELEASE</B> or <B>KEY_RELEASE</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142014f00">keyUp</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_CLICKED</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015200">mouseClicked</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_DOWN</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015300">mouseDown</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_UP</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015800">mouseUp</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_DRAG</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015400">mouseDrag</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_ENTER</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015500">mouseEnter</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_EXIT</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015600">mouseExit</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>MOUSE_MOVE</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIComponent.htm#com_0003001142015700">mouseMove</A>
</FONT></TD>
</TR>
</TABLE>
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015d00">postEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013700">imageUpdate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean imageUpdate(Image image, int flags, int x, int y, int width,
        int height);
</FONT></PRE>
<P><P>Called to incrementally draw the control's image as the image bits become available. 
<P><B>Return Value:</B> <P>Returns false, indicating the image is fully loaded. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>image</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The control's image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The flags that specify the status of the image being loaded. You can pass any bitwise combination of the fields defined in the <B>ImageObserver</B> interface. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the image (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the image (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>imageUpdate</B> in the <B>ImageObserver</B> interface. Components that display images should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013800">invalidate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void invalidate();
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142018500">setValid</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013900">invalidateAll</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean invalidateAll();
</FONT></PRE>
<P><P>Invalidates the control and all of its child components. 
<P><B>Return Value:</B> <P>Returns true, indicating that the control was invalidated. 

<P><B>Remarks:</B> <P>This method implements <B>invalidateAll</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013a00">isChecked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isChecked();
</FONT></PRE>
<P><P>Determines whether the control's checked state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the checked state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isChecked</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017000">setChecked</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013b00">isEnabled</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isEnabled();
</FONT></PRE>
<P><P>Determines whether the control's enabled state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the enabled state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isEnabled</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017200">setEnabled</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013c00">isEnabled</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isEnabled(boolean recurse);
</FONT></PRE>
<P><P>Determines whether the enabled state of the control, or of all its ancestors, is set. 
<P><B>Return Value:</B> <P>Returns true if the control and all of its ancestors are enabled (if the <I>recurse</I> parameter is true) or if the control alone is enabled (if <I>recurse</I> is false); otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>recurse</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, this method checks the enabled state of the control and each of its ancestors. If false, only the control itself is checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>isEnabled</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017200">setEnabled</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013d00">isFocused</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isFocused();
</FONT></PRE>
<P><P>Determines whether the control's focus state is set. 
<P><B>Return Value:</B> <P>Returns false, since the control is stateless. 

<P><B>Remarks:</B> <P>This method implements <B>isFocused</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components with states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017400">setFocused</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013e00">isHeightRelative</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isHeightRelative();
</FONT></PRE>
<P><P>Determines if this layout manager uses the height of the container to lay out its children. 

<P><B>Return Value:</B> <P>Returns true if this layout manager uses the container's height to lay out the children; otherwise, returns false. (The default is true.) Returning false also means that the container's <A HREF="UIComponent.htm#com_0003001142015000">layout</A> method doesn't need to be called on a vertical resizing. 

<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014d00">isWidthRelative</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142013f00">isHot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isHot();
</FONT></PRE>
<P><P>Determines whether the control's hot-tracked state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the hot-tracked state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isHot</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017700">setHot</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014000">isIndeterminate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isIndeterminate();
</FONT></PRE>
<P><P>Determines whether the control's indeterminate state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the indeterminate state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isIndeterminate</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142017900">setIndeterminate</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014100">isInvalidating</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isInvalidating();
</FONT></PRE>
<P><P>Retrieves the current invalidating state of this object. 

<P><B>Return Value:</B> <P>Returns true if this object has invalidating enabled; otherwise, returns false (which means it will ignore requests to invalidate). 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014200">isKeyable</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isKeyable();
</FONT></PRE>
<P><P>Determines whether the control can receive keyboard input. 
<P><B>Return Value:</B> <P>Returns true if the control can receive keyboard input; otherwise, returns false. 

<P><B>Remarks:</B> <P>This method implements <B>isKeyable</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. A control can receive keyboard input if it is enabled and visible. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013b00">isEnabled</A>, <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014300">isKeyable</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isKeyable(boolean recurse);
</FONT></PRE>
<P><P>Determines whether the control, and all of its ancestors, can receive keyboard input. 
<P><B>Return Value:</B> <P>Returns true if the control and all of its ancestors can receive keyboard input (if the <I>recurse</I> parameter is true) or if the control alone can receive keyboard input (if <I>recurse</I> is false); otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>recurse</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, this method checks whether the control and each of its ancestors can receive keyboard input. If false, only the control itself is checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>isKeyable</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. A control can receive keyboard input if it is enabled and visible. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013b00">isEnabled</A>, <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014400">isNotified</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isNotified();
</FONT></PRE>
<P><P>Determines whether the control's notified state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the notified state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isNotified</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010600">addNotify</A>, <A HREF="UIComponent.htm#com_0003001142016700">removeNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014500">isPressed</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isPressed();
</FONT></PRE>
<P><P>Determines whether the control's pressed state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the pressed state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isPressed</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018000">setPressed</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014600">isRedrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isRedrawing();
</FONT></PRE>
<P><P>Determines whether the control will be redrawn when a paint request is made. 
<P><B>Return Value:</B> <P>Returns false, indicating the redrawing state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isRedrawing</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, simply returns false. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018100">setRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014700">isSelectable</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isSelectable();
</FONT></PRE>
<P><P>Determines whether the control's selected state can be set. 
<P><B>Return Value:</B> <P>Returns true if the control can be selected; otherwise, returns false. 

<P><B>Remarks:</B> <P>This method implements <B>isSelectable</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and simply calls <A HREF="UIComponent.htm#com_0003001142014200">isKeyable</A>. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018200">setSelected</A>, <A HREF="UIComponent.htm#com_0003001142014800">isSelected</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014800">isSelected</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isSelected();
</FONT></PRE>
<P><P>Determines whether the control's selected state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the selected state is not set. 

<P><B>Remarks:</B> <P>This method implements <B>isSelected</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018200">setSelected</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014900">isShowing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isShowing();
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014a00">isValid</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isValid();
</FONT></PRE>
<P><P>Determines whether the control is valid. 
<P><B>Return Value:</B> <P>Returns false, indicating the control is invalid. 

<P><B>Remarks:</B> <P>This method implements <B>isValid</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, simply returns false. Components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014b00">isVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isVisible();
</FONT></PRE>
<P><P>Determines whether the control's visible state is set. 
<P><B>Return Value:</B> <P>Returns false, indicating the control is hidden. 

<P><B>Remarks:</B> <P>This method implements <B>isVisible</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018700">setVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014c00">isVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isVisible(boolean recurse);
</FONT></PRE>
<P><P>Determines whether the visible state of the control, or of all its ancestors, is set. 
<P><B>Return Value:</B> <P>Returns true if the control and all of its ancestors are visible (if the <I>recurse</I> parameter is true) or if the control alone is visible (if <I>recurse</I> is false); otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>recurse</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, this method checks the visible state of the control and each of its ancestors. If false, only the control itself is checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>isVisible</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142018700">setVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014d00">isWidthRelative</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isWidthRelative();
</FONT></PRE>
<P><P>Determines if this layout manager uses the width of the container to lay out its children. 

<P><B>Return Value:</B> <P>Returns true if this layout manager uses the container's width to lay out the children; otherwise, returns false. (The default is true.) Returning false also means that the container's <A HREF="UIComponent.htm#com_0003001142015000">layout</A> method doesn't need to be called on a horizontal resizing. 

<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013e00">isHeightRelative</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014e00">keyDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyDown(Event evt, int key);
</FONT></PRE>
<P><P>Responds to a key being pressed when the control has the input focus. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that was pressed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>keyDown</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142014f00">keyUp</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyUp(Event evt, int key);
</FONT></PRE>
<P><P>Responds to a key being released when the control has the input focus. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that was released. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>keyUp</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015000">layout</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void layout();
</FONT></PRE>
<P><P>Lays out the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>layout</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. Components should override this method. 
<P><B>layout</B> is invoked when the control is validated. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016200">relayout</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015100">lostFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean lostFocus(Event e, Object o);
</FONT></PRE>
<P><P>Responds to the control losing input focus. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that posted the event (typically null). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>lostFocus</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>lostFocus</B> calls <A HREF="UIComponent.htm#com_0003001142017400">setFocused</A> to clear the focus state. <B>lostFocus</B> also clears the pressed state, if set. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015200">mouseClicked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseClicked(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the control being clicked with the mouse. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseClicked</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015300">mouseDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDown(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse button being pressed over the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseDown</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>mouseDown</B> calls <A HREF="UIComponent.htm#com_0003001142018000">setPressed</A> to set the pressed state. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015800">mouseUp</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015400">mouseDrag</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDrag(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse being dragged (while the mouse button is pressed) inside or outside the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseDrag</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>mouseDrag</B> calls <A HREF="UIComponent.htm#com_0003001142018000">setPressed</A> to set or clear the pressed state. If the mouse is dragged inside the control, the pressed state is set. If the mouse is dragged outside the control, the pressed state is cleared. <A HREF="UIComponent.htm">UIComponent</A> components should override this method.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015500">mouseEnter</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseEnter(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse entering the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseEnter</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control can receive keyboard input, <B>mouseEnter</B> calls <A HREF="UIComponent.htm#com_0003001142017700">setHot</A> to set the hot-tracked state. If the control has a tool tip, <B>mouseEnter</B> manages a timer to display the tool tip. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015600">mouseExit</A>, <A HREF="UIComponent.htm#com_0003001142015700">mouseMove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015600">mouseExit</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseExit(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse leaving the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseExit</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control can receive keyboard input, <B>mouseExit</B> calls <A HREF="UIComponent.htm#com_0003001142017700">setHot</A> to clear the hot-tracked state. If the control has a tool tip, <B>mouseExit</B> manages a timer to display the tool tip. <A HREF="UIComponent.htm">UIComponent</A> components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015500">mouseEnter</A>, <A HREF="UIComponent.htm#com_0003001142015700">mouseMove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015700">mouseMove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseMove(Event evt, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse being moved within the control (with the mouse button unpressed). 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseMove</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control has a tool tip, <B>mouseMove</B> manages a timer to display the tool tip. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015800">mouseUp</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseUp(Event e, int x, int y);
</FONT></PRE>
<P><P>Responds to the mouse button being released over the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>mouseUp</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>mouseUp</B> calls <A HREF="UIComponent.htm#com_0003001142018000">setPressed</A> to clear the pressed state. <A HREF="UIComponent.htm">UIComponent</A> components should override this method.
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015300">mouseDown</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015900">navigate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent navigate(IUIComponent comp, int direction,
        boolean keyable);
</FONT></PRE>
<P><P>Navigates from the specified component to another component in the specified direction. 
<P><B>Return Value:</B> <P>Returns null, indicating no component can be navigated to. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to navigate from. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>direction</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The navigation direction. Specify one of the <B>NAVDIR</B> values in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>keyable</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, only components that are able to receive keyboard input can be navigated to; otherwise, all components can be navigated to. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>navigate</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface. <A HREF="UIContainer.htm">UIContainer</A> overrides this method to handle keyboard navigation among components in a container. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015a00">notifyEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void notifyEvent(UINotifyEvent e);
</FONT></PRE>
<P><P>Passes event notification to any children that have requested notification. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015b00">paint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void paint(FxGraphics g);
</FONT></PRE>
<P><P>Draws the control in the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>paint</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015c00">paintAll</A>, <A HREF="UIComponent.htm#com_0003001142016800">repaint</A>, <A HREF="UIComponent.htm#com_0003001142018100">setRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015c00">paintAll</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void paintAll(FxGraphics g);
</FONT></PRE>
<P><P>Draws the control and all of its child components, using the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>paintAll</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control is valid and its redrawing state is set, <B>paintAll</B> simply calls <A HREF="UIComponent.htm#com_0003001142018900">update</A>. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142015b00">paint</A>, <A HREF="UIComponent.htm#com_0003001142014600">isRedrawing</A>, <A HREF="UIComponent.htm#com_0003001142014a00">isValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015d00">postEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean postEvent(Event e);
</FONT></PRE>
<P><P>Posts an event to the control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled (either by the control or by one of its ancestors); otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>postEvent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>postEvent</B> calls <A HREF="UIComponent.htm#com_0003001142013600">handleEvent</A> to respond to the event. If <B>handleEvent</B> returns false, the event is posted to the control's parent for handling (see <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>). 
<P>If the control and all of its ancestors are disabled, the event is not handled and <B>postEvent</B> returns false. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010d00">deliverEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015e00">prepareImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean prepareImage(Image image, ImageObserver observer);
</FONT></PRE>
<P><P>Prepares an image for this component. 

<P><B>Return Value:</B> <P>Returns true if the image has been fully prepared; false otherwise. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>image</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image to prepare for component. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>observer</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The observer notified of the image's preparation. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142015f00">prepareImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean prepareImage(Image image, int width, int height,
        ImageObserver observer);
</FONT></PRE>
<P><P>Prepares an image of the specified dimension for this component. The dimensions are specified in pixels. 

<P><B>Return Value:</B> <P>Returns true if the image has been fully prepared; false otherwise. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>image</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image to prepare for component. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>observer</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The observer notified of the image's preparation. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016000">print</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void print(FxGraphics g);
</FONT></PRE>
<P><P>Prints the control in the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>print</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and simply calls <A HREF="UIComponent.htm#com_0003001142015b00">paint</A>. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016100">printAll</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016100">printAll</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void printAll(FxGraphics g);
</FONT></PRE>
<P><P>Prints the control and all of its child components, using the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>printAll</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and simply calls <A HREF="UIComponent.htm#com_0003001142015c00">paintAll</A>. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142016000">print</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016200">relayout</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void relayout();
</FONT></PRE>
<P><P>Schedules the control to be laid out as soon as possible. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>relayout</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>relayout</B> calls <A HREF="UIComponent.htm#com_0003001142015000">layout</A> if the control is valid. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014a00">isValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016300">removeFocusListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeFocusListener(IUIFocusListener l);
</FONT></PRE>
<P><P>Removes the specified focus listener. The listener no longer receives the control's focus events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The focus listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeFocusListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010200">addFocusListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016400">removeKeyListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeKeyListener(IUIKeyListener l);
</FONT></PRE>
<P><P>Removes the specified key listener. The listener no longer receives the control's key events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeKeyListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010300">addKeyListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016500">removeMouseListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeMouseListener(IUIMouseListener l);
</FONT></PRE>
<P><P>Removes the specified mouse listener. The listener no longer receives the control's mouse events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeMouseListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010400">addMouseListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016600">removeMouseMotionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeMouseMotionListener(
        IUIMouseMotionListener l);
</FONT></PRE>
<P><P>Removes the specified mouse motion listener. The listener no longer receives the control's mouse motion events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse motion listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeMouseMotionListener</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010500">addMouseMotionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016700">removeNotify</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeNotify();
</FONT></PRE>
<P><P>Called when the graphics context is first unavailable. Sends an <B>EVENT_OBJECT_DESTROY</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>removeNotify</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142010600">addNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016800">repaint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void repaint();
</FONT></PRE>
<P><P>Schedules the control to be redrawn as soon as possible. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>repaint</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control is valid and its redrawing state is set, <B>repaint</B> calls <A HREF="UIComponent.htm#com_0003001142018900">update</A> to redraw the control (if the control's graphics context is available). 
<P><B>Note</B>  This method is synchronous. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011f00">getGraphics</A>, <A HREF="UIComponent.htm#com_0003001142014600">isRedrawing</A>, <A HREF="UIComponent.htm#com_0003001142014a00">isValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016900">repaint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void repaint(long time);
</FONT></PRE>
<P><P>Schedules the control to be redrawn after the specified amount of time. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>time</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of milliseconds after which the control is redrawn. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>repaint</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. This implementation ignores the <I>time</I> parameter and simply calls <B>repaint()</B>. Components should override this method. 
<P><B>Note</B>  This method is synchronous. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016a00">repaint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void repaint(int x, int y, int width, int height);
</FONT></PRE>
<P><P>Schedules the specified rectangle within the control to be redrawn as soon as possible. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the upper-left corner of the rectangle to be redrawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the upper-left corner of the rectangle to be redrawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle to be redrawn (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle to be redrawn (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>repaint</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. This implementation ignores all parameters and simply calls <B>repaint()</B>. Components should override this method. 
<P><B>Note</B>  This method is synchronous. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016b00">repaint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void repaint(long tm, int x, int y, int width, int height);
</FONT></PRE>
<P><P>Schedules the specified rectangle within the control to be redrawn after the specified amount of time. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tm</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of milliseconds after which the rectangle is redrawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the upper-left corner of the rectangle to be redrawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the upper-left corner of the rectangle to be redrawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle to be redrawn (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle to be redrawn (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>repaint</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. This implementation ignores all parameters and simply calls <B>repaint()</B>. Components should override this method. 
<P><B>Note</B>  This method is synchronous. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016c00">requestFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void requestFocus();
</FONT></PRE>
<P><P>Requests that the control receive the input focus. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method implements <B>requestFocus</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016d00">setBackground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBackground(Color color);
</FONT></PRE>
<P><P>Sets the control's background color. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>color</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The background color for the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setBackground</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011100">getBackground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016e00">setBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBounds(int x, int y, int width, int height);
</FONT></PRE>
<P><P>Sets the bounding rectangle of the control, according to the specified coordinates and dimensions. Sends an <B>EVENT_OBJECT_LOCATIONCHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate for the upper-left corner of the control, relative to the parent. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate for the upper-left corner of the control, relative to the parent. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new width of the control (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new height of the control (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setBounds</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. If the control has no parent container, this method returns false.
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011200">getBounds</A>, <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142016f00">setBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBounds(Rectangle rect);
</FONT></PRE>
<P><P>Sets the bounding rectangle of the control, according to the specified <B>Rectangle</B> object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle identifying the coordinates for the control's upper-left corner and the control's new width and height. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setBounds</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011200">getBounds</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017000">setChecked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setChecked(boolean on);
</FONT></PRE>
<P><P>Sets or clears the checked state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the checked state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setChecked</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013a00">isChecked</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017100">setCursor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCursor(Cursor cursor);
</FONT></PRE>
<P><P>Sets the control's cursor. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cursor</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The cursor for the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setCursor</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011800">getCursor</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017200">setEnabled</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setEnabled(boolean on);
</FONT></PRE>
<P><P>Sets or clears the enabled state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the enabled state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setEnabled</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013b00">isEnabled</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017300">setFlags</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFlags(int flags);
</FONT></PRE>
<P><P>Sets the user-defined bits for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The user-defined settings for the control. You can set any bit in the mask 0xFFFF0000. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setFlags</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011b00">getFlags</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017400">setFocused</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFocused(boolean on);
</FONT></PRE>
<P><P>Sets or clears the focus state of the control. Sends an <B>EVENT_OBJECT_FOCUS</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the focus state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setFocused</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>setFocused</B> is automatically invoked when the control receives or loses focus. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013d00">isFocused</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017500">setFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFont(Font font);
</FONT></PRE>
<P><P>Sets the control's font. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>font</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The font for the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setFont</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011c00">getFont</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017600">setForeground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setForeground(Color color);
</FONT></PRE>
<P><P>Sets the control's foreground color. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>color</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The foreground color for the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setForeground</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011e00">getForeground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017700">setHot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setHot(boolean on);
</FONT></PRE>
<P><P>Sets or clears the hot-tracked state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the hot-tracked state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setHot</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>setHot</B> is automatically invoked when the mouse enters and exits the control. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013f00">isHot</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017800">setID</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setID(int id);
</FONT></PRE>
<P><P>Set the control's identifier. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>id</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value to be associated with the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setID</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012100">getID</A>, <A HREF="UIComponent.htm#com_0003001142017e00">setName</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017900">setIndeterminate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setIndeterminate(boolean on);
</FONT></PRE>
<P><P>Sets or clears the indeterminate state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the indeterminate state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setIndeterminate</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014000">isIndeterminate</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017a00">setIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setIndex(int index);
</FONT></PRE>
<P><P>Sets the index of the control within its parent container. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index for the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setIndex</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012200">getIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017b00">setInvalidating</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setInvalidating(boolean on);
</FONT></PRE>
<P><P>Sets the invalidating state of this object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The invalidating state setting. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017c00">setLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setLocation(int x, int y);
</FONT></PRE>
<P><P>Sets the location of the control, relative to its parent. Sends an <B>EVENT_OBJECT_LOCATIONCHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate for the upper-left corner of the control, relative to the parent. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate for the upper-left corner of the control, relative to the parent. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setLocation</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012400">getLocation</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017d00">setLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setLocation(Point point);
</FONT></PRE>
<P><P>Sets the location of the control, relative to its parent. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>point</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left corner of the control, relative to the parent. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setLocation</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012400">getLocation</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017e00">setName</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setName(String name);
</FONT></PRE>
<P><P>Set the control's name. Sends an <B>EVENT_OBJECT_NAMECHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name to be associated with the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setName</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012900">getName</A>, <A HREF="UIComponent.htm#com_0003001142017800">setID</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142017f00">setParent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setParent(IUIContainer parent);
</FONT></PRE>
<P><P>Sets the control's parent. Sends an <B>EVENT_OBJECT_PARENTCHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>parent</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new parent container of the control. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setParent</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012a00">getParent</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018000">setPressed</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPressed(boolean on);
</FONT></PRE>
<P><P>Sets or clears the pressed state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the pressed state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setPressed</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>setPressed</B> is automatically invoked when the mouse button is pressed, released, or dragged over the control. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014500">isPressed</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018100">setRedrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setRedrawing(boolean on);
</FONT></PRE>
<P><P>Sets or clears the redrawing state of the control. If the redrawing state is set, the control will be redrawn when a paint request is made. If the redrawing state is cleared, the control will not be redrawn. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the redrawing state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setRedrawing</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface, and by default, simply returns false. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014600">isRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018200">setSelected</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelected(boolean on);
</FONT></PRE>
<P><P>Sets or clears the selected state of the control. Sends an <B>EVENT_OBJECT_SELECTION</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the selected state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelected</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014800">isSelected</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018300">setSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSize(int width, int height);
</FONT></PRE>
<P><P>Sets the size of the control, according to the specified dimensions. Sends an <B>EVENT_OBJECT_LOCATIONCHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new width for the control (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new height for the control (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018400">setSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSize(Dimension size);
</FONT></PRE>
<P><P>Sets the size of the control, according to the specified <B>Dimension</B> object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new width and height for the control (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSize</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013000">getSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018500">setValid</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValid(boolean on);
</FONT></PRE>
<P><P>Sets or clears the valid state of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the control is validated; otherwise, the control is invalidated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setValid</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. By default, the <I>on</I> parameter is ignored. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014a00">isValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018600">setValueText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValueText(String value);
</FONT></PRE>
<P><P>Sets the value of the control. Sends an <B>EVENT_OBJECT_VALUECHANGE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>value</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string that describes the visual information contained in the control. This value expands on the information provided by <A HREF="UIComponent.htm#com_0003001142012e00">getRoleCode</A>, <A HREF="UIComponent.htm#com_0003001142013100">getStateCode</A>, and <A HREF="UIComponent.htm#com_0003001142012900">getName</A>. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setValueText</B> in the <A HREF="IUIAccessible.htm">IUIAccessible</A> interface, and by default, does nothing. Components should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142013400">getValueText</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018700">setVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setVisible(boolean show);
</FONT></PRE>
<P><P>Sets or clears the visible state of the control. Sends an <B>EVENT_OBJECT_SELECTION</B> or <B>EVENT_OBJECT_HIDE</B> event notification to the parent or child. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>show</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the visible state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setVisible</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. Components that have states should override this method. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142014b00">isVisible</A>, <A HREF="UIWinEvent.htm">com.ms.ui.UIWinEvent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018800">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString();
</FONT></PRE>
<P><P>Retrieves a text description of the control. 
<P><B>Return Value:</B> <P>Returns a string that contains the name of the control's class and the control's name. 

<P><B>Remarks:</B> <P>This method implements <B>toString</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142012900">getName</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018900">update</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void update(FxGraphics g);
</FONT></PRE>
<P><P>Updates the drawing of the control, using the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>update</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>update</B> fills the control with its background color, and then calls <A HREF="UIComponent.htm#com_0003001142015b00">paint</A> to redraw the control using the control's foreground color. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011100">getBackground</A>, <A HREF="UIComponent.htm#com_0003001142011e00">getForeground</A>, <A HREF="UIComponent.htm#com_0003001142018100">setRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001142018a00">validate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void validate();
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <A HREF="UIComponent.htm#com_0003001142018500">setValid</A>. 
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class DataBoundInputStream</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="DataBoundInputStream.htm#com_0003001302010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="DataBoundInputStream.htm#com_0003001302020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_ures.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ures.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="ResourceDecoder.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui.resource</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class DataBoundInputStream</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class DataBoundInputStream extends <B>FilterInputStream</B>
             implements <B>DataInput</B>
{
  // Constructors
  public <A HREF="DataBoundInputStream.htm#com_0003001302010100">DataBoundInputStream</A>(InputStream in);
  public <A HREF="DataBoundInputStream.htm#com_0003001302010200">DataBoundInputStream</A>(InputStream in, boolean isBig);

  // Methods
  public void <A HREF="DataBoundInputStream.htm#com_0003001302020100">align</A>();
  public final boolean <A HREF="DataBoundInputStream.htm#com_0003001302020200">getEndian</A>();
  public int <A HREF="DataBoundInputStream.htm#com_0003001302020300">read</A>(byte b[]) throws IOException;
  public int <A HREF="DataBoundInputStream.htm#com_0003001302020400">read</A>(byte b[], int off, int len) throws IOException;
  public boolean <A HREF="DataBoundInputStream.htm#com_0003001302020500">readBoolean</A>() throws IOException;
  public byte <A HREF="DataBoundInputStream.htm#com_0003001302020600">readByte</A>() throws IOException;
  public char <A HREF="DataBoundInputStream.htm#com_0003001302020700">readChar</A>() throws IOException;
  public double <A HREF="DataBoundInputStream.htm#com_0003001302020800">readDouble</A>() throws IOException;
  public float <A HREF="DataBoundInputStream.htm#com_0003001302020900">readFloat</A>() throws IOException;
  public void <A HREF="DataBoundInputStream.htm#com_0003001302020a00">readFully</A>(byte b[]) throws IOException;
  public void <A HREF="DataBoundInputStream.htm#com_0003001302020b00">readFully</A>(byte b[], int off, int len)
        throws IOException;
  public int <A HREF="DataBoundInputStream.htm#com_0003001302020c00">readInt</A>() throws IOException;
  public String <A HREF="DataBoundInputStream.htm#com_0003001302020d00">readLine</A>() throws IOException;
  public long <A HREF="DataBoundInputStream.htm#com_0003001302020e00">readLong</A>() throws IOException;
  public short <A HREF="DataBoundInputStream.htm#com_0003001302020f00">readShort</A>() throws IOException;
  public int <A HREF="DataBoundInputStream.htm#com_0003001302021000">readUnsignedByte</A>() throws IOException;
  public int <A HREF="DataBoundInputStream.htm#com_0003001302021100">readUnsignedShort</A>() throws IOException;
  public String <A HREF="DataBoundInputStream.htm#com_0003001302021200">readUTF</A>() throws IOException;
  public final static String <A HREF="DataBoundInputStream.htm#com_0003001302021300">readUTF</A>(DataInput in)
        throws IOException;
  public final void <A HREF="DataBoundInputStream.htm#com_0003001302021400">setEndian</A>(boolean isBig);
  public int <A HREF="DataBoundInputStream.htm#com_0003001302021500">skipBytes</A>(int n) throws IOException;
}
</FONT></PRE>
<P>This class enables primitive Java data types to be read from a stream in a portable way. Primitive data types are well understood types with associated operations. For example, integers are considered primitive data types. This class is functionally exactly the same as <B>java.io.DataInputStream</B> except that 
<P>
<PRE><FONT FACE="Courier" SIZE="2">
   (a) it balances short reads, so that it can DWORD align.

   (b) you can specify whether the file is big endian or little endian.&#009; 
</FONT></PRE>
<P>Also see <B>java.io.DataOutputStream</B>, <B>java.io.DataBoundOutputStream</B>
<PRE><FONT FACE="Courier" SIZE="2"><B>FilterInputStream</B>
  |
  +--<B>DataBoundInputStream</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003001302010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001302010100">DataBoundInputStream</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DataBoundInputStream(InputStream in);
</FONT></PRE>
<P><P>Creates a DataBoundInputStream. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>in</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The input stream. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302010200">DataBoundInputStream</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DataBoundInputStream(InputStream in, boolean isBig);
</FONT></PRE>
<P><P>Creates a <A HREF="DataBoundInputStream.htm">DataBoundInputStream</A> object, defining if it is big endian or not. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>in</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The input stream. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>isBig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this parameter to true to indicate big endian format. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001302020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001302020100">align</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void align();
</FONT></PRE>
<P><P>Sets the file to be <B>DWORD</B> aligned. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020200">getEndian</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final boolean getEndian();
</FONT></PRE>
<P><P>Determines if the file is to be read in big endian format. 

<P><B>Return Value:</B> <P>Returns true if the file should be read in big endian format; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020300">read</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int read(byte b[]) throws IOException;
</FONT></PRE>
<P><P>Reads data into an array of bytes. This method blocks input is available. 

<P><B>Return Value:</B> <P>Returns the actual number of bytes read; -1 is returned when the end of the stream is reached. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The byte buffer that the data is read into. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if an I/O error has occurred. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020400">read</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int read(byte b[], int off, int len) throws IOException;
</FONT></PRE>
<P><P>Reads data into an array of bytes. This method blocks until some input is available. 

<P><B>Return Value:</B> <P>Returns the actual number of bytes read; -1 is returned when the end of the stream is reached. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The byte buffer that the data is read into. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>off</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting offset of the data. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The maximum number of bytes read. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if an I/O error has occurred. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020500">readBoolean</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean readBoolean() throws IOException;
</FONT></PRE>
<P><P>Reads a boolean. 

<P><B>Return Value:</B> <P>Returns the boolean that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020600">readByte</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public byte readByte() throws IOException;
</FONT></PRE>
<P><P>Reads an 8-bit byte. 

<P><B>Return Value:</B> <P>Returns the 8-bit byte that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020700">readChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public char readChar() throws IOException;
</FONT></PRE>
<P><P>Reads a 16-bit character. 

<P><B>Return Value:</B> <P>Returns the 16-bit character that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020800">readDouble</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public double readDouble() throws IOException;
</FONT></PRE>
<P><P>Reads a 64-bit double. 

<P><B>Return Value:</B> <P>Returns the 64-bit double that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020900">readFloat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public float readFloat() throws IOException;
</FONT></PRE>
<P><P>Reads a 32-bit float. 

<P><B>Return Value:</B> <P>Returns the 32-bit float that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020a00">readFully</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void readFully(byte b[]) throws IOException;
</FONT></PRE>
<P><P>Reads bytes, blocking until all bytes are read. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The byte buffer that the data is read into. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if an I/O error has occurred. 


<P><B>EOFException</B>
 if EOF is reached before all bytes are read. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020b00">readFully</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void readFully(byte b[], int off, int len) throws IOException;
</FONT></PRE>
<P><P>Reads bytes, blocking until all bytes are read. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The buffer that the data is read into. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>off</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting offset of the data. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The maximum number of bytes read. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if an I/O error has occurred. 


<P><B>EOFException</B>
 if EOF reached before all bytes are read. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020c00">readInt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int readInt() throws IOException;
</FONT></PRE>
<P><P>Reads a 32-bit integer. 

<P><B>Return Value:</B> <P>Returns the 32-bit integer that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020d00">readLine</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String readLine() throws IOException;
</FONT></PRE>
<P><P>Reads in a line that has been terminated by a \n, \r, \r\n, or EOF. 

<P><B>Note</B>  This method does not properly convert bytes to characters. Since the release of JDK version 1.1, the preferred way to read lines of text is via the <B>BufferedReader.readLine()</B> method. 
<P><B>Return Value:</B> <P>Returns a string copy of the line. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020e00">readLong</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public long readLong() throws IOException;
</FONT></PRE>
<P><P>Reads a 64-bit long. 

<P><B>Return Value:</B> <P>Returns the 64-bit long that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302020f00">readShort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public short readShort() throws IOException;
</FONT></PRE>
<P><P>Reads a 16-bit short. 

<P><B>Return Value:</B> <P>Returns the 16-bit short that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021000">readUnsignedByte</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int readUnsignedByte() throws IOException;
</FONT></PRE>
<P><P>Reads an unsigned 8-bit byte. 

<P><B>Return Value:</B> <P>Returns the 8-bit byte that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021100">readUnsignedShort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int readUnsignedShort() throws IOException;
</FONT></PRE>
<P><P>Reads a 16-bit short. 

<P><B>Return Value:</B> <P>Returns the 16-bit short that is read. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021200">readUTF</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String readUTF() throws IOException;
</FONT></PRE>
<P><P>Reads a UTF format string. 

<P><B>Return Value:</B> <P>Returns the <B>String</B>. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021300">readUTF</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final static String readUTF(DataInput in) throws IOException;
</FONT></PRE>
<P><P>Reads a UTF format string. 

<P><B>Return Value:</B> <P>Returns the <B>String</B>. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021400">setEndian</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final void setEndian(boolean isBig);
</FONT></PRE>
<P><P>Indicates whether the file is to be read in big endian format. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>isBig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this parameter to true to indicate big endian format. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001302021500">skipBytes</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int skipBytes(int n) throws IOException;
</FONT></PRE>
<P><P>Skips bytes, blocking until all bytes are skipped. 

<P><B>Return Value:</B> <P>Returns the actual number of bytes skipped. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>n</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of bytes to be skipped. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if an I/O error has occurred. 


</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class UISelector</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UISelector.htm#com_000300116f010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UISelector.htm#com_000300116f020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="UIScrollViewer.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="UISingleContainer.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class UISelector</H2>
<PRE><FONT FACE="Courier" SIZE="2">public abstract class UISelector extends <A HREF="UIPanel.htm">UIPanel</A> implements 
            <A HREF="IUISelector.htm">IUISelector</A>, TimerListener
{
  // Constructors
  public <A HREF="UISelector.htm#com_000300116f010100">UISelector</A>();
  public <A HREF="UISelector.htm#com_000300116f010200">UISelector</A>(int selMode);

  // Methods
  public synchronized void <A HREF="UISelector.htm#com_000300116f020100">addActionListener</A>(IUIActionListener l);
  public synchronized void <A HREF="UISelector.htm#com_000300116f020200">addItemListener</A>(IUIItemListener l);
  public void <A HREF="UISelector.htm#com_000300116f020300">addSelectedIndex</A>(int index);
  public void <A HREF="UISelector.htm#com_000300116f020400">addSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f020500">addSelectedIndices</A>(int indices[]);
  public void <A HREF="UISelector.htm#com_000300116f020600">addSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f020700">addSelectedItem</A>(IUIComponent comp);
  public void <A HREF="UISelector.htm#com_000300116f020800">addSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f020900">addSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="UISelector.htm#com_000300116f020a00">addSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public IUIComponent <A HREF="UISelector.htm#com_000300116f020b00">find</A>(String prefix);
  public IUIComponent <A HREF="UISelector.htm#com_000300116f020c00">find</A>(String prefix, boolean fromFocus);
  public IUIComponent <A HREF="UISelector.htm#com_000300116f020d00">find</A>(String prefix, IUIComponent compStart);
  public IUIComponent <A HREF="UISelector.htm#com_000300116f020e00">find</A>(String prefix, IUIComponent compStart,
        boolean keyable);
  public IUIComponent <A HREF="UISelector.htm#com_000300116f020f00">getAnchorItem</A>();
  public IUIComponent <A HREF="UISelector.htm#com_000300116f021000">getExtensionItem</A>();
  public int <A HREF="UISelector.htm#com_000300116f021100">getRoleCode</A>();
  public int <A HREF="UISelector.htm#com_000300116f021200">getSelectedIndex</A>();
  public int[] <A HREF="UISelector.htm#com_000300116f021300">getSelectedIndices</A>();
  public IUIComponent <A HREF="UISelector.htm#com_000300116f021400">getSelectedItem</A>();
  public IUIComponent[] <A HREF="UISelector.htm#com_000300116f021500">getSelectedItems</A>();
  public int <A HREF="UISelector.htm#com_000300116f021600">getSelectionMode</A>();
  public int <A HREF="UISelector.htm#com_000300116f021700">getStateCode</A>();
  public boolean <A HREF="UISelector.htm#com_000300116f021800">gotFocus</A>(Event e, Object o);
  public boolean <A HREF="UISelector.htm#com_000300116f021900">keyDown</A>(Event e, int key);
  public boolean <A HREF="UISelector.htm#com_000300116f021a00">lostFocus</A>(Event e, Object o);
  public boolean <A HREF="UISelector.htm#com_000300116f021b00">mouseDown</A>(Event e, int x, int y);
  public boolean <A HREF="UISelector.htm#com_000300116f021c00">mouseDrag</A>(Event e, int x, int y);
  protected void <A HREF="UISelector.htm#com_000300116f021d00">processActionEvent</A>(UIActionEvent e);
  protected void <A HREF="UISelector.htm#com_000300116f021e00">processEvent</A>(UIEvent e);
  protected void <A HREF="UISelector.htm#com_000300116f021f00">processItemEvent</A>(UIItemEvent e);
  public void <A HREF="UISelector.htm#com_000300116f022000">remove</A>(int index);
  public void <A HREF="UISelector.htm#com_000300116f022100">remove</A>(IUIComponent comp);
  public synchronized void <A HREF="UISelector.htm#com_000300116f022200">removeActionListener</A>(
        IUIActionListener l);
  public synchronized void <A HREF="UISelector.htm#com_000300116f022300">removeItemListener</A>(IUIItemListener l);
  public void <A HREF="UISelector.htm#com_000300116f022400">removeSelectedIndex</A>(int index);
  public void <A HREF="UISelector.htm#com_000300116f022500">removeSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f022600">removeSelectedIndices</A>(int indices[]);
  public void <A HREF="UISelector.htm#com_000300116f022700">removeSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f022800">removeSelectedItem</A>(IUIComponent comp);
  public void <A HREF="UISelector.htm#com_000300116f022900">removeSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f022a00">removeSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="UISelector.htm#com_000300116f022b00">removeSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f022c00">setAnchorItem</A>(IUIComponent comp);
  public void <A HREF="UISelector.htm#com_000300116f022d00">setExtensionItem</A>(IUIComponent comp);
  public void <A HREF="UISelector.htm#com_000300116f022e00">setSelected</A>(boolean on);
  public void <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>(int index);
  public void <A HREF="UISelector.htm#com_000300116f023000">setSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A>(int indices[]);
  public void <A HREF="UISelector.htm#com_000300116f023200">setSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>(IUIComponent comp);
  public void <A HREF="UISelector.htm#com_000300116f023400">setSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="UISelector.htm#com_000300116f023600">setSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="UISelector.htm#com_000300116f023700">setSelectionMode</A>(int selMode);
  public void <A HREF="UISelector.htm#com_000300116f023800">timeTriggered</A>(TimerEvent te);
}
</FONT></PRE>
<P>This class implements an abstract selector control. The following diagram shows the classes that extend <B>UISelector</B>. 
<PRE><FONT FACE="Courier" SIZE="2">UISelector
|
+--<A HREF="UIList.htm">UIList</A>
|
+--<A HREF="UITabList.htm">UITabList</A>
|
+--<A HREF="UITree.htm">UITree</A>
</FONT></PRE>
<P>By implementing the <A HREF="IUISelector.htm">IUISelector</A> interface, <B>UISelector</B> supports the selection modes in the following table. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The user may only select one item at a time.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The user may select or deselect any item by clicking it.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Behaves like <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, except when either the SHIFT or the CTRL key is down. SHIFT+click extends selection to current position. CTRL+click selects or deselects the currently focused item, without affecting any other selections. CTRL+SHIFT+click is a combination of the two.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020003">NOSELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Items may only be selected programatically. 
</FONT></TD>
</TR>
</TABLE>
<P>The following examples show how to call some of these methods for a <A HREF="UIList.htm">UIList</A> control. 
<PRE><FONT FACE="Courier" SIZE="2">// Create two list controls.
UIList fruits = new UIList();  // SINGLESELECT by default.
UIList vegetables = new UIList(UISelector.MULTISELECT);

// Add items to the fruits list.
IUIComponent f1 = fruits.add("apple");
IUIComponent f2 = fruits.add("banana");
IUIComponent f3 = fruits.add("cherry");
add(fruits);  // Add the control to the container.

// Set the selection in the fruits list to the first item,
// at index 0. A list select event will not be generated.
fruits.setSelectedIndex(0);

// Now add items to the vegetables list.
IUIComponent v1 = vegetables.add("carrot");
IUIComponent v2 = vegetables.add("broccoli");
IUIComponent v3 = vegetables.add("zucchini");
add(vegetables);  // Add the control to the container.

// Create an array of components that will set the
// selection to the first and third items in the 
// vegetables list.
UIComponent selComps[] = new UIComponent[2];
selComps[0] = v1;
selComps[1] = v3;

// Set the selection to the components 
// identified by the selComps array. Specify 
// that a list select event will be generated.
vegetables.setSelectedItems(selComps, true);

// Trap the list select event.
public boolean handleEvent(Event e)
{
   // A list select event is always generated
   // when the user selects an item. Calls to 
   // the setSelectedXXX and selectXXX methods 
   // can optionally generate this event.
   if (e.id == Event.LIST_SELECT)
   {
      if (e.target == vegetables)
      {
         // Do something here.
         return true;
      }
      else if (e.target == fruits)
      {
         // Do something here.
         return true;
      }
   }
   return false;
}
</FONT></PRE>
<P>The <A HREF="UISelector.htm#com_000300116f020300">addSelectedIndex</A> and <A HREF="UISelector.htm#com_000300116f020700">addSelectedItem</A> methods are similar to <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A> and <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>, respectively. All four methods enable you to set an item's selected state. To clear a selection call fruits.removeSelectedIndex(i) or fruits.setSelectedIndex(-1). The first call will clear the ith selection. The last call will clear all selections. 
<P>The optional boolean argument in these methods is used to specify whether a <B>LIST_SELECT</B> or <B>DESELECT</B> event should be generated. For example, fruits.addSelectedIndex(i, false),will select the item at index i, without affecting anything else and will not generate a <B>LIST_SELECT</B>. 
<P><B>Comments:</B> 
<P>Calls to the setSelectedXXX, removeSelectedXXX and addSelectedXXX methods should be made from the outermost level of the selector. For example, suppose you have a tree called food and this tree contains trees called fruit, vegetables, and meat. Suppose that the fruit tree has a banana item. To select the banana item, call food.setSelectedItem(banana) not fruit.setSelectedItem(banana). 

<PRE><FONT FACE="Courier" SIZE="2"><A HREF="UIComponent.htm">UIComponent</A>
  |
  +--<A HREF="UIContainer.htm">UIContainer</A>
    |
    +--<A HREF="UIStateContainer.htm">UIStateContainer</A>
      |
      +--<A HREF="UIPanel.htm">UIPanel</A>
        |
        +--<B>UISelector</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_000300116f010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300116f010100">UISelector</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UISelector();
</FONT></PRE>
<P><P>Creates a selector control with the <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A> selection mode. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f010200">UISelector</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UISelector(int selMode);
</FONT></PRE>
<P><P>Creates a selector control with the specified selection mode. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode. Possible values include <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode was specified. 


</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300116f020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300116f020100">addActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addActionListener(IUIActionListener l);
</FONT></PRE>
<P><P>Adds the specified action listener. The listener receives all action events generated for the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addActionListener</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f022200">removeActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020200">addItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addItemListener(IUIItemListener l);
</FONT></PRE>
<P><P>Adds the specified item listener. The listener receives all item events generated for the control. (Item events are generated when the state of an item changes.) 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>addItemListener</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f022300">removeItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020300">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020400">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020500">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020600">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020700">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020800">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020900">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020a00">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020b00">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix);
</FONT></PRE>
<P><P>Searches the selector control for a keyable item whose name begins with the specified prefix, starting at the first item in the control. 
<P><B>Note</B>  <B>find</B> will return a <A HREF="UITab.htm">UITab</A> component when a <A HREF="UITabList.htm">UITabList</A> object is used. Since a <A HREF="UITree.htm">UITree</A> object can have anything as its child, the child object will simply be returned. 
<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020c00">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, boolean fromFocus);
</FONT></PRE>
<P><P>Searches the selector control for a keyable item whose name begins with the specified prefix. The search begins from either the current focus, or the first item in the selector. 
<P><B>Note</B>  <B>find</B> will return a <A HREF="UITab.htm">UITab</A> item when a <A HREF="UITabList.htm">UITabList</A> object is used. It will return a <A HREF="UITree.htm">UITree</A> item when a <B>UITree</B> object is used. The tree must be visible before calling <B>find</B>. 
<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fromFocus</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the search begins from the current focus. Otherwise, the search begins with the first item in the selector. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020d00">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, IUIComponent compStart);
</FONT></PRE>
<P><P>Searches the selector control for a keyable item whose name begins with the specified prefix. The search begins at <I>compStart</I>. 
<P><B>Note</B>  <B>find</B> will return a <A HREF="UITab.htm">UITab</A> item when a <A HREF="UITabList.htm">UITabList</A> object is used. It will return a <A HREF="UITree.htm">UITree</A> item when a <B>UITree</B> object is used. The tree must be visible before calling <B>find</B>. 
<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>compStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component at which the search begins. If it is null, search will begin at the first item (according to <B>navigate</B>). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020e00">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, IUIComponent compStart,
        boolean keyable);
</FONT></PRE>
<P><P>Searches the selector control for an item whose name begins with the specified prefix. The search begins at <I>compStart</I>, and can be performed on all components (keyable = false), or only keyable components (keyable = true). 
<P><B>Note</B>  Components in an unexpanded tree are not keyable. Specify (keyable = false) to search all items in a tree, regardless of whether the items are in a collapsed state. 
<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>compStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component at which the search begins. If it is null, the search will begin at the first item. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>keyable</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, only keyable components are searched. Otherwise, all components are searched. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f020f00">getAnchorItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getAnchorItem();
</FONT></PRE>
<P><P>Retrieves the component that is the current anchor in extend select mode. 

<P><B>Return Value:</B> <P>Returns the component that is the anchor. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021000">getExtensionItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getExtensionItem();
</FONT></PRE>
<P><P>Retrieves the item from which a selection last extended from the anchor item. 
<P><B>Note</B>  This method is only used in the <B>EXTENDSELECT</B> mode. 
<P><B>Return Value:</B> <P>Returns the extension item. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021100">getRoleCode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRoleCode();
</FONT></PRE>
<P><P>Retrieves the <B>ROLE_SYSTEM</B> code that best describes the role of the selector control. 

<P><B>Return Value:</B> <P>Returns the <A HREF="IUIAccessible.htm#com_000300118b02002c">ROLE_SYSTEM_LIST</A> code. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021200">getSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectedIndex();
</FONT></PRE>
<P><P>Retrieves the zero-based index of the currently selected item. 
<P><B>Return Value:</B> <P>Returns the index of the selected item, if an item is selected; otherwise, returns null. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child item begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 

<P><B>Remarks:</B> <P>This method implements <B>getSelectedIndex</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f021300">getSelectedIndices</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f021400">getSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021300">getSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int[] getSelectedIndices();
</FONT></PRE>
<P><P>Retrieves the zero-based indices of all currently selected items. 
<P><B>Return Value:</B> <P>Returns an array of the indices of the selected items, if an item is selected; otherwise, returns null. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child item begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 

<P><B>Remarks:</B> <P>This method implements <B>getSelectedIndices</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f021200">getSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f021500">getSelectedItems</A>, <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021400">getSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getSelectedItem();
</FONT></PRE>
<P><P>Retrieves the currently selected item. 
<P><B>Return Value:</B> <P>Returns the selected component, if a component is selected; otherwise, returns null. 

<P><B>Remarks:</B> <P>This method implements <B>getSelectedItem</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f021500">getSelectedItems</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f021200">getSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021500">getSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent[] getSelectedItems();
</FONT></PRE>
<P><P>Retrieves all currently selected items. 
<P><B>Return Value:</B> <P>Returns an array of the selected components, if a component is selected; otherwise, returns null. 

<P><B>Remarks:</B> <P>This method implements <B>getSelectedItems</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f021400">getSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f021300">getSelectedIndices</A>, <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021600">getSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectionMode();
</FONT></PRE>
<P><P>Retrieves the selection mode of the control. 
<P><B>Return Value:</B> <P>Returns one of the following three selection modes: <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>. 

<P><B>Remarks:</B> <P>This method implements <B>getSelectionMode</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023700">setSelectionMode</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021700">getStateCode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getStateCode();
</FONT></PRE>
<P><P>Retrieves the state of the selector control. 
<P><B>Return Value:</B> <P>Returns the combination of <B>STATE_SYSTEM</B> codes that best describes the state of the control. 

<P><B>Remarks:</B> <P>The returned code contains the <A HREF="IUIAccessible.htm#com_000300118b020061">STATE_SYSTEM_MULTISELECTABLE</A> flag (if the selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>), or the <A HREF="IUIAccessible.htm#com_000300118b020057">STATE_SYSTEM_EXTSELECTABLE</A> flag (if the selection mode is <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>). 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021800">gotFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean gotFocus(Event e, Object o);
</FONT></PRE>
<P><P>Responds to the selector control receiving focus. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that posted the event (always null). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021900">keyDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyDown(Event e, int key);
</FONT></PRE>
<P><P>Handles keyboard navigation for the selector control. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that has been pressed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called when the control has focus and a key is pressed. <B>keyDown</B> responds to the following <I>key</I> values. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Key
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Response
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">HOME, END, PAGEUP, PAGEDOWN, all ARROW keys
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Navigates through the items in the control. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">BACKSPACE
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Clears the previous key pressed during an incremental type search. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ESC
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Stops an incremental type search. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">All other keys
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Begins an incremental type search for a component that begins with the characters pressed (limited by a timer). If a match is found, the match component receives focus. 
</FONT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021a00">lostFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean lostFocus(Event e, Object o);
</FONT></PRE>
<P><P>Responds to the selector control losing focus. 

<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that posted the event (always null). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021b00">mouseDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDown(Event e, int x, int y);
</FONT></PRE>
<P><P>Determines whether an item in the selector control was double-clicked, and if so, generates an action event for that item. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Depending on the control's selection mode, this method responds to the mouse being clicked on an item, as shown in the following table. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Selection mode
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Response
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Selects the item at the mouse's current location and clears any previous selection. A list select event is generated. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Changes the selection state of the item that is clicked, without changing the state of any other item. In a <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> control, an item is selected when it is clicked with the mouse. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Behaves like <B>SINGLESELECT</B> unless there is a CTRL or SHIFT modifier. SHIFT+click extends selection to current position. CTRL+click selects or deselects the currently focused item, without affecting any other selections. CTRL-SHIFT+click is a combination of the two. 
</FONT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021c00">mouseDrag</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDrag(Event e, int x, int y);
</FONT></PRE>
<P><P>Selects items in the selector control, according to the current selection mode. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Depending on the control's selection mode, this method responds to the mouse being dragged across an item, as shown in the following table. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Selection mode
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Response
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Selects the item at the mouse's current location and clears any previous selection. A list select event is generated. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Does nothing. In a <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> control, an item is selected when it is clicked with the mouse. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Selects the item at the mouse's current location without clearing any previous selection. A list select event is generated. 
</FONT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021d00">processActionEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processActionEvent(UIActionEvent e);
</FONT></PRE>
<P><P>Processes action events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UISelector.htm#com_000300116f021e00">processEvent</A> and dispatches the event to a registered action listener. When overriding this method, call the super method <B>processActionEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f020100">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021e00">processEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processEvent(UIEvent e);
</FONT></PRE>
<P><P>Processes the specified event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is invoked automatically if a listener has been registered through a call to addXXXListener. Depending on the type of event, <B>processEvent</B> calls one of the following methods. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">action event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UISelector.htm#com_000300116f021d00">processActionEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">item event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UISelector.htm#com_000300116f021f00">processItemEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">container event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022100">processContainerEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focus event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022300">processFocusEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">key event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022400">processKeyEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022500">processMouseEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse motion event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022600">processMouseMotionEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
</TABLE>
<P>When overriding <B>processEvent</B>, call the super method <B>processEvent</B> to ensure the default event processing continues normally. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f021f00">processItemEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processItemEvent(UIItemEvent e);
</FONT></PRE>
<P><P>Processes item events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UISelector.htm#com_000300116f021e00">processEvent</A> and dispatches the event to a registered item listener. When overriding this method, call the super method <B>processItemEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f020200">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022000">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(int index);
</FONT></PRE>
<P><P>Removes the component at the specified index from the selector control, without affecting other selections. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the component to be removed. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child item begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The following example shows how to remove an item from a <A HREF="UIList.htm">UIList</A> control. 
<PRE><FONT FACE="Courier" SIZE="2">UIList colors = new UIList();

// Add items to the list.
colors.add("Red");
colors.add("Blue");
add(colors);  // Add the list to the container.

// Now remove the first component.
colors.remove(0); 
</FONT></PRE>
<P><B>Overrides:</B> <P><A HREF="UIPanel.htm#com_0003001160021300">remove(int)</A> in <A HREF="UIPanel.htm">UIPanel</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022100">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(IUIComponent comp);
</FONT></PRE>
<P><P>Removes the specified component from the selector control, without affecting other selections. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The following example shows how to remove an item from a <A HREF="UIList.htm">UIList</A> control. 
<PRE><FONT FACE="Courier" SIZE="2">UIList colors = new UIList();

// Add items to the list.
IUIComponent c1 = colors.add("Red");
IUIComponent c2 = colors.add("Blue");
add(colors);  // Add the list to the container.

// Now remove the "Red" component.
colors.remove(c1); 
</FONT></PRE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022200">removeActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeActionListener(IUIActionListener l);
</FONT></PRE>
<P><P>Removes the specified action listener. The listener no longer receives the control's action events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeActionListener</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f020100">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022300">removeItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeItemListener(IUIItemListener l);
</FONT></PRE>
<P><P>Removes the specified item listener. The listener no longer receives the control's item events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>removeItemListener</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f020200">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022400">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022500">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022600">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022700">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022800">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022900">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022a00">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022b00">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022c00">setAnchorItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setAnchorItem(IUIComponent comp);
</FONT></PRE>
<P><P>Sets the item used as an anchor in <B>EXTENDSELECT</B> mode. The anchor item cannot be set to null. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component that will be the new anchor. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The anchor is set whenever you click or CTRL+click an item. When you SHIFT+click an item, all the items from the anchor to where you SHIFT+clicked are selected. 
<P>SHIFT+clickdoes not set the anchor; it sets the extension item (see <A HREF="UISelector.htm#com_000300116f022d00">setExtensionItem</A>). Click an item to set the anchor, and then SHIFT+click above and below it; the anchor will be obvious. 
<P>Although the anchor is set when the user clicks an item, it is also possible to set the anchor programatically with <B>setAnchorItem</B>. You can not set the anchor item to be null. 
<P><B>Note</B>  Resetting the anchor automatically sets the current extension item to null. If it is intended to set both to specific items, call <B>setAnchorItem</B>, followed by <A HREF="UISelector.htm#com_000300116f022d00">setExtensionItem</A>. 
<P>Setting the anchor in an <A HREF="IUISelector.htm">IUISelector</A>, other than the outermost one, has no effect. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the component is not a child of the selector, or if the component is null. 


<P><B>See Also:</B> <B>setAnchorItem</B>, <A HREF="UISelector.htm#com_000300116f022d00">setExtensionItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022d00">setExtensionItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setExtensionItem(IUIComponent comp);
</FONT></PRE>
<P><P>Sets the item to which a selection extends from an anchor. 
<P><B>Note</B>  Calling <A HREF="UISelector.htm#com_000300116f022c00">setAnchorItem</A> automatically resets this item to null. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component that will be the new extension item. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if comp is not a child of the selector. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022e00">setSelected</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelected(boolean on);
</FONT></PRE>
<P><P>Sets or clears the selected state of the selector control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the selected state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f022f00">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index. By default, a list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child item begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedIndex</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A> to select multiple items at a time. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f020300">addSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f021200">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023000">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index, and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedIndex</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A> to select multiple items at a time. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f020300">addSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f021200">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023100">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedIndices</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A>, <A HREF="UISelector.htm#com_000300116f021300">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023200">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices, and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. If the root node of a <A HREF="UITree.htm">UITree</A> object displays an item, this item is at index 0 and the first child item is at index 1. Otherwise, the first child item begins at index 0. For <A HREF="UIList.htm">UIList</A> and <A HREF="UITabList.htm">UITabList</A> objects, the first item is always at index 0. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedIndices</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A>, <A HREF="UISelector.htm#com_000300116f021300">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023300">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Sets the selection to the specified component. A list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedItem</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A> to select multiple items at a time. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the selector control. 


<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f020700">addSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f021400">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023400">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified component, and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedItem</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023500">setSelectedItems</A> to select multiple items at a time. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the selector control. 


<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f022f00">setSelectedIndex</A>, <A HREF="UISelector.htm#com_000300116f020700">addSelectedItem</A>, <A HREF="UISelector.htm#com_000300116f021400">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023500">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Sets the selection to the specified components. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedItems</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the selector control. 


<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A>, <A HREF="UISelector.htm#com_000300116f021500">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023600">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified components, and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectedItems</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface, and clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="UISelector.htm#com_000300116f023300">setSelectedItem</A>. 
<P>For related code examples, see the <A HREF="UISelector.htm">UISelector</A> overview. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the selector control. 


<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f023100">setSelectedIndices</A>, <A HREF="UISelector.htm#com_000300116f021500">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023700">setSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectionMode(int selMode);
</FONT></PRE>
<P><P>Sets the selection mode of the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode for the control. Possible values include <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A>, <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, or <B>NOSELECT</B>. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>setSelectionMode</B> in the <A HREF="IUISelector.htm">IUISelector</A> interface. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode was specified. 


<P><B>See Also:</B> <A HREF="UISelector.htm#com_000300116f021600">getSelectionMode</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300116f023800">timeTriggered</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void timeTriggered(TimerEvent te);
</FONT></PRE>
<P><P>Stops an incremental type search of the selector. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>te</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A TimerEvent object that describes the timer event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>timeTriggered</B> in the TimerListener interface. The <A HREF="UISelector.htm#com_000300116f021900">keyDown</A> method starts a timer to begin an incremental type search. When the timer expires, <B>timeTriggered</B> is automatically invoked to stop the search. 
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

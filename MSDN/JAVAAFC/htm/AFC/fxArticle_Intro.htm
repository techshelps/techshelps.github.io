<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Using AFC User Interface Controls"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="fxArticle_Intro.htm#fxarticle_0006000501010000">Package Overview</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="fxArticle_Intro.htm#fxarticle_0006000501020000">Technical Overview</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="fxArticle_Intro.htm#fxarticle_0006000501030000">Integration</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/afc2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="AFC"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_afc.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="AFC"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>FX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">AFC</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Introduction</H2>
<P>The Microsoft <A HREF="def_pfx.htm">com.ms.fx</A> (Fx) package for Java provides graphics and effects classes and interfaces. The Fx package provides a base framework for many other Microsoft packages, and it is a key element in making the Microsoft&#174; Application Foundation Classes&#153; (AFC) both Java Development Kit (JDK) 1.0.2 and 1.1 compatible. The <B>com.ms.fx</B> package provides the following support:
<UL><LI>Extensible, cross-platform graphics for the AFC libraries.
 <LI>Support for formatted text in any language and for characters not defined in Unicode.
 <LI>Text rotation and vertical writing support for internationalization (i18n).
 <LI>Support for windowless components and controls.
 <LI>User-configurable texture and <B>Image</B> class factories.
 <LI>A drawing primitives API based on <B>java.awt.Graphics</B>.
</UL>
<P>This article provides an overview of the basic features of the <A HREF="def_pfx.htm">com.ms.fx</A> package. In addition, it covers programming with the extensible drawing classes, provides an in depth look at the texture and image class factories, and describes integration of various aspects of the Fx package with controls and features from other Microsoft packages.

<H3 STYLE="color:#333366"><A NAME="fxarticle_0006000501010000">Package Overview</A></H3><P>The Microsoft <A HREF="def_pfx.htm">com.ms.fx</A> package contains classes that fall into several broad categories.

<P>The core classes of the Fx package handle most of the common graphics operations.
<BR> 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm">FxGraphics</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The FxGraphics class is derived from the <B>java.awt.Graphics</B> class and provides an extended graphics object implementation and abstract methods for full cross-platform compatibility.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxFormattedText.htm">FxFormattedText</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The FxFormattedText class supports formatted text buffers written in any language and drawn in any direction. 
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="Region.htm">Region</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Region class provides a data structure for shape manipulation, and also helps support the windowless architecture in AFC.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxFont.htm">FxFont</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The FxFont class manages user-defined font objects and is the base for extended font objects in the Fx package.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxColor.htm">FxColor</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The FxColor class provides both JDK 1.0.2 and JDK 1.1 compatible color objects for AFC, as well as a base for extended color objects in the Fx package.
</FONT></TD></TR></TABLE>
<P>Classes that extend from <A HREF="FxColor.htm">FxColor</A> are used with the drawing primitives API provided in the <A HREF="FxGraphics.htm">FxGraphics</A> class to increase the flexibility of drawing operations. These extended color classes include the following:
<BR>
<BR>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxFill.htm">FxFill</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm">FxTexture</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxPen.htm">FxPen</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxBrushPen.htm">FxBrushPen</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxRubberPen.htm">FxRubberPen</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxStyledPen.htm">FxStyledPen</A>
</FONT></TD>
</TR>
</TABLE>
<P>The <A HREF="def_pfx.htm">com.ms.fx</A> package includes classes that provide a set of consistent, cross-platform system images and icons. 
These classes include texture and image factory classes that can provide texture and image sets for components in various states. These image and texture classes include the following:
<BR>
<BR>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxStateConfigurableImage.htm">FxStateConfigurableImage</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxStateConfigurableUIImage.htm">FxStateConfigurableUIImage</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxComponentImage.htm">FxComponentImage</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxComponentTexture.htm">FxComponentTexture</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxSystemIcon.htm">FxSystemIcon</A>
</FONT></TD>
</TR>
</TABLE>
<P>The text buffer and font classes handle text buffers and drawing, and they rely on a number of supporting low-level Fx classes, which are rarely manipulated directly.
<BR>
<BR>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="fullTxtRun.htm">fullTxtRun</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="txtRun.htm">txtRun</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxCurve.htm">FxCurve</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxEllipse.htm">FxEllipse</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="OutlinePolygon.htm">OutlinePolygon</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="OutlineCurve.htm">OutlineCurve</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="GlyphOutline.htm">GlyphOutline</A>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="GlyphMetrics.htm">GlyphMetrics</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FloatPoint.htm">FloatPoint</A>
</FONT></TD>
</TR>
</TABLE>
<P>The <A HREF="FxToolkit.htm">FxToolkit</A> class provides both VM-specific support to other AFC classes and helper objects that assist with tasks such as dialog box loading and image loading. 

<H3 STYLE="color:#333366"><A NAME="fxarticle_0006000501020000">Technical Overview</A></H3><TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="fxArticle_Intro.htm#fxarticle_0006000501020100">Extended Color and Font Objects</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="fxArticle_Intro.htm#fxarticle_0006000501020200">FxSystemFont, FxSystemIcon, and Texture and Image Class Factories</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="fxArticle_Intro.htm#fxarticle_0006000501020300">Internationalization Support</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="fxArticle_Intro.htm#fxarticle_0006000501020400">JDK 1.0.2 and 1.1 Support</A>
</FONT></TD></TABLE>
<H4 STYLE="color:#333366"><A NAME="fxarticle_0006000501020100">Extended Color and Font Objects</A></H4><P>If you have not done any graphics programming in Java, you will find that it is basic and intuitive using AFC. If you are familiar with graphics programming using the <B>java.awt</B> package, especially the <B>java.awt.Graphics</B> class, the transition to programming with Fx extended color and font objects will be a smooth one.
<P>Graphics operations in Java are performed with a graphics object. Using <B>java.awt</B>, you can obtain this graphics context with the call
<PRE><FONT FACE="Courier" SIZE="2">Graphics g = this.getGraphics();</FONT></PRE>
<P>and set the graphics context to a specified color, font, paintmode, and so on. The <A HREF="def_pfx.htm">com.ms.fx</A> package provides extended graphics objects, derived from <B>java.awt.Graphics</B>, to overcome limitations imposed by the <B>Graphics</B> class. <A HREF="FxGraphics.htm">FxGraphics</A> objects can be used just like a <B>Graphics</B> object, inheriting its drawing API from <B>java.awt.Graphics</B>. The <A HREF="def_ui.htm">com.ms.ui</A> package supports both <FONT FACE="Courier New">paint(Graphics g)</FONT> and <FONT FACE="Courier New">paint(FxGraphics)</FONT> methods. 
<P>Part of the power of the <A HREF="def_pfx.htm">com.ms.fx</A> package is the ability to use extended color and font objects in place of <B>Color</B> or <B>Font</B> within a graphics context. The extended color and font classes included with the <B>com.ms.fx</B> package have special attributes. 
<P>For example, the <A HREF="FxPen.htm">FxPen</A> class provides a drawing object that is multiple pixels wide. This seems relatively simple, but in comparison, the <B>java.awt</B> package provides no way to draw primitives that are multiple pixels wide -- short of coding repetitous drawing operations. The following example draws many ovals, 1 pixel wide, using standard AWT programming. The result is a thick oval, drawn in the current color.
<PRE><FONT FACE="Courier" SIZE="2">// Override the paint method in an applet 
// to draw a thick oval.
public void init{
  setBackground(Color.black);
}

public void paint(Graphics g) {
  for(int x = 2;x&lt;10;x++)
  {
    g.drawOval(x, x, 60-(2*x), 40-(2*x));
  }               
}
</FONT></PRE>
<P>The same oval can be drawn easily with an FxPen object. You retrieve an extended graphics object by using the static method call, <A HREF="FxGraphics.htm">FxGraphics</A>.<B>getExtendedGraphics</B>.
<PRE><FONT FACE="Courier" SIZE="2">// Override the paint method in an applet to draw a thick oval.
public void init{
    setBackground(new FxPen(8, Color.black));
}

public void paint(FxGraphics g) {
    fxGraf.drawOval( 2, 2, 60, 40);
}
</FONT></PRE>
<P>The <A HREF="FxFont.htm">FxFont</A> and <A HREF="FxColor.htm">FxColor</A> objects and their derivatives are set to an extended graphics object the same way the <B>java.awt.Font</B> and <B>java.awt.Color</B> objects are. The method calls are the same (setColor, setFont) regardless of the object selected into the graphics context. In this way, the <A HREF="def_pfx.htm">com.ms.fx</A> package is fully compatible with AWT. 
<P>The <A HREF="def_pfx.htm">com.ms.fx</A> package is more flexible and powerful, however, because extended color objects are used to construct other extended color objects. The following example shows how you can use multiple extended color objects with an extended graphics object to draw some simple effects.
<PRE><FONT FACE="Courier" SIZE="2"> // Draw the same oval as before, but this time, use an imported
 // GIF image as a color. First, create an extended graphics object.
fxGraf = FxGraphics.getExtendedGraphics(Graphics gOrig);

// Create an FxTexture object that uses 
// a RedImage.gif as a base.
FxTexture fxTex1 = new FxTexture(myRedImage, FxTexture.STRETCH_NONE,
                                 0, 0, -1, -1, false, 255, 0, 0);

// Create an FxPen 8 pixels wide, that uses 
// the FxTexture as a drawing color.
FxPen widePen = new FxPen(8, fxTex1);

// Set the drawing color used in the graphics context.
// The FxPen is selected into the context the same way 
// a Color is selected.
fxGraf.setColor(widePen);

// Now draw the same oval as before with a pen 8 pixels wide.
// The pen uses a .gif image to draw, or if the image fails to draw,
// the color (255, 0, 0) is used by default.
fxGraf.drawOval(2, 2, 60, 40);
</FONT></PRE>
<P>The extended graphics object and extended objects selected as its color and font use <A HREF="fxArticle_Intro.htm#fxarticle_0006000501020101">callback methods</A> to draw the effects. This enables you to use the same familiar API to draw more powerful graphics. 

<A NAME="fxarticle_0006000501020101"></A><H5 STYLE="color:#333366">Callback Methods</H5><P>In the previous example, both <A HREF="FxPen.htm">FxPen</A> and <A HREF="FxTexture.htm">FxTexture</A> objects are used instead of a <B>Color</B> object, but the method call

<PRE><FONT FACE="Courier" SIZE="2">g.drawOval(x, y, width, height);</FONT></PRE>
<P>remains the same. The callback methods are called from the graphics object when it performs a drawing operation, and its selected <B>Color</B> object is an instance of a class derived from <A HREF="FxFill.htm">FxFill</A> or <A HREF="FxFont.htm">FxFont</A>. In this case, the <A HREF="FxGraphics.htm">FxGraphics</A> object called upon the FxPen.<A HREF="FxPen.htm#com_0003000814020200">drawOvalCallback</A> method to draw the oval. 

<P>All of the callback methods (<A HREF="FxTexture.htm#com_000300081c020200">fillArcCallback</A>, <A HREF="FxPen.htm#com_0003000814020100">drawLineCallback</A>, and so on) included in the Microsoft <A HREF="def_pfx.htm">com.ms.fx</A> package for Java are used only by the graphics object, not the application. The documentation for these callback methods is included for Java developers who want to extend these objects. 

<H4 STYLE="color:#333366"><A NAME="fxarticle_0006000501020200">FxSystemFont, FxSystemIcon, and Texture and Image Class Factories</A></H4><P>The <A HREF="def_pfx.htm">com.ms.fx</A> package includes a number of classes that provide consistent, cross-platform system images, icons, and access to system fonts.

<P>The <A HREF="FxSystemFont.htm">FxSystemFont</A> class handles fonts that are reserved for graphical user-interface components such as dialog boxes and menus. These fonts are system-specific, and on platforms other than Microsoft&#174; Win32&#153;, the font retrieved will be a predefined, standard font. The class provides methods to retrieve specific reserved fonts, such as <B>getMessageBoxFont</B> and <B>getSmallCaptionFont</B>. <A HREF="FxSystemFont.htm">FxSystemFont</A> also provides methods, such as <B>getAttributeList</B> and <B>getStyleVal</B>, to determine attributes associated with a particular system font on a given platform.

<P>The <A HREF="FxSystemIcon.htm">FxSystemIcon</A> class provides a set of standard .gif images that are used in cross-platform dialog boxes. Four images are provided with the <A HREF="def_pfx.htm">com.ms.fx</A> package.

<P>The texture and image class factories, including the <A HREF="FxComponentTexture.htm">FxComponentTexture</A> and <A HREF="FxStateConfigurableUIImage.htm">FxStateConfigurableUIImage</A> classes, provide sets of component images and textures for AFC controls. These classes are state dependent; the sets of images are provided for corresponding component states.
<P>For example, the <A HREF="FxComponentImage.htm">FxComponentImage</A> class provides a set of state-dependent images for each of the included component images (the arrow images on scroll bars, check box images, and so on). Not all states are valid for different components, so the class only provides images for states that are valid for the selected component.
<P>The <A HREF="FxStateConfigurableImage.htm">FxStateConfigurableImage</A> class enables developers to create their own state-dependent image factories. 

<H4 STYLE="color:#333366"><A NAME="fxarticle_0006000501020300">Internationalization Support</A></H4><P>The <A HREF="def_pfx.htm">com.ms.fx</A> package provides support for formatted text in any language, characters not defined in the Unicode standard, text rotation, vertical writing, Input Method Editors (IMEs), and other internationalization (i18n) features.

<P>The <A HREF="FxFormattedText.htm">FxFormattedText</A> class, a formatted text buffer class, is one of the core Fx classes. It provides methods that enable the user to specify text direction, locale, text alignment, word wrap, mnemonic characters, kerning, password characters, as well as normal buffer operations that are inherited from the <A HREF="FxText.htm">FxText</A> class. An <B>FxFormattedText</B> object is created from either a <B>String</B> or character array of Unicode characters.

<P>Text rotation and vertical writing are both supported through the <A HREF="FxFormattedText.htm">FxFormattedText</A> and <A HREF="FxGraphics.htm">FxGraphics</A> classes. In particular, text rotation is supported with the <B>FxGraphics.drawString(String str, int x, int y, int a)</B> method. Vertical writing is supported by the <A HREF="FxFormattedText.htm#com_000300080e023000">setTextDirection</A> and <A HREF="FxFormattedText.htm#com_000300080e022400">setLocale</A> methods.

<P>The <A HREF="FxCaret.htm">FxCaret</A> class provides a cross-platform caret, similar to the flashing caret in the Microsoft Windows&#174; Notepad application. <A HREF="FxCaret.htm">FxCaret</A> is also used in the com.ms.util.InputMethod package to support Java Input Method Editor composition windows. The Java application uses InputMethodListener.<B>setVisibleComponent</B> to specify where the IME is shown, and the Java application can use <B>InputMethodListener</B>.<B>setPos</B> to set the position of the composition window. The IME is attached to an <B>FxCaret</B> object, and every time the <B>FxCaret</B> is shown or moved, the <B>FxCaret</B> object calls <B>setPos</B> to set the position of the IME composition window.

<H4 STYLE="color:#333366"><A NAME="fxarticle_0006000501020400">JDK 1.0.2 and 1.1 Support</A></H4><P>The Microsoft Application Foundation Classes are designed not only to be a cross-platform solution, but to be both JDK 1.1 and JDK 1.0.2 compatible. The <A HREF="def_pfx.htm">com.ms.fx</A> package provides graphics support for both 1.1 and 1.0.2 VMs. 

<P>One limitation of the JDK 1.0.2 is that the <B>java.awt.Color</B> class is declared final (in JDK 1.1 it is not). Many of the classes in the <A HREF="def_pfx.htm">com.ms.fx</A> package extend the <B>java.awt.Color</B> class in JDK 1.1, but can't extend Color in 1.0.2. In order to provide the functionality of the <B>com.ms.fx</B> package and the AFC for 1.0.2 VMs, the <B>com.ms.fx</B> extended color classes are derived from the <B>com.ms.fx.BaseColor</B> class. The BaseColor class is a public class, but it is never used directly in applets or applications. The following diagram shows the extended color class hierarchy using both JDK 1.0.2 and 1.1 color models:

<P><IMG SRC="art/fxartcl1.gif" WIDTH="155" HEIGHT="158" ALT="" >
<P>The BaseColor class is derived directly from <B>Object</B> in 1.0.2 because <B>java.awt.Color</B> is declared final. It provides the same basic functionality, so there are really no effective differences using an FxColor in 1.0.2. 

<P>For graphics-related code to compile and run under both JDK 1.0.2 and JDK 1.1 Virtual Machines, you need to design your code with the following limitations in mind.
<BR>
<BR>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Extended Color Limitations Using 1.0.2
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="def_ui.htm">com.ms.ui</A> package does not support the <FONT FACE="Courier New">setBackground(FxColor)</FONT> operation when running on JDK 1.0.2-based VMs. You can work around this limitation by overriding the <FONT FACE="Courier New">update()</FONT> method and selecting the color into the graphics object before clearing the background and calling <FONT FACE="Courier New">paint()</FONT>.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">You can't set textures as the background colors of components under 1.0.2 VMs. You can implement this by overriding the <B>update</B> method in extended color classes, as the following example shows.
<PRE><FONT FACE="Courier" SIZE="2">public class MyCanvas
{
  FxColor myTexture;

  public void update(FxGraphics g)
  {
    g.setColor(myTexture);
    g.fillRect(0, 0, getSize().width, getSize().height);
    paint(g);
  }
}</FONT></PRE>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compiling Extended Colors for JDK 1.0.2 VMs
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The extended color classes are easy to use and select into a graphics context when writing JDK 1.1 compliant code with the AFC libraries. But because the <B>java.awt.Color</B>+ class is final in 1.0.2, some graphics-related AFC code will not compile in 1.0.2.
 <P>For example, if you were writing an application that uses an FxPen to draw wide lines, you might create the FxPen object and select it into a graphics context as shown in the following example.
<PRE><FONT FACE="Courier" SIZE="2">FxPen pen1 = new FxPen(5, 255, 0, 124);

// Set the color of the graphics object.
fxg.setColor(pen1);</FONT></PRE>
<P>This does not compile under 1.0.2 because FxColor (and therefore FxPen) is derived from <B>Object</B>, not from <B>Color</B>. Any time you want to use extended color objects under JDK 1.0.2, you must select them into a graphics context using the the FxColor.getColor method.
<PRE><FONT FACE="Courier" SIZE="2">FxPen pen2 = new FxPen(5, 124, 255, 0);
FxTexture mytex = new FxTexture(someImage, 
                                FxTexture.STRETCH_NONE, 
                                0, 0, -1, -1, false, 0,
                                10, 70);

fxg.setColor(FxColor.getColor(pen2));
panel.setForeground(mytex.getColor());
</FONT></PRE>
</FONT></TD></TR></TABLE>
<H3 STYLE="color:#333366"><A NAME="fxarticle_0006000501030000">Integration</A></H3><H4 STYLE="color:#333366"><A NAME="fxarticle_0006000501030100">Integration with the com.ms.ui Package</A></H4><P>The classes in the <A HREF="def_pfx.htm">com.ms.fx</A> are used extensively throughout the <A HREF="def_ui.htm">com.ms.ui</A> (UI) package. The following list briefly discusses how some of the Fx classes are used throughout UI.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxColor.htm">FxColor</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxColor.htm">FxColor</A> class is used in UI classes such as <A HREF="UIColorDialog.htm">UIColorDialog</A>, <A HREF="UIComponent.htm">UIComponent</A> and <A HREF="UIScroll.htm">UIScroll</A> to set text background colors and shading and to retrieve colors that are lighter or darker than the original colors for edges and effects. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxFont.htm">FxSystemFont</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxFont.htm">FxSystemFont</A> class is used in many UI classes to retrieve message box and menu fonts, with the <B>getMessageBoxFont</B> and <B>getMenuFont</B> methods. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxSystemIcon.htm">FxSystemIcon</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxSystemIcon.htm">FxSystemIcon</A> class is used in the <A HREF="UIMessageBox.htm">UIMessageBox</A> class to provide system images for message boxes.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxToolkit.htm">FxToolkit</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxToolkit.htm">FxToolkit</A> class is used extensively throughout both the <A HREF="def_pfx.htm">com.ms.fx</A> and <A HREF="def_ui.htm">com.ms.ui</A> packages. It provides platform-independent methods for retrieving low-level information. For example, controls can use reserved colors and platform-specific metrics using the <A HREF="FxToolkit.htm#com_000300081d010700">getSystemColor</A> and <A HREF="FxToolkit.htm#com_000300081d010900">getSystemMetric</A> methods. The system interface returns a platform-independent graphics object that takes care of differences in the various platforms. The <FONT FACE="Courier New">Dialog.setModal()</FONT> method (which is not available within JDK 1.0.2) is set using the <FONT FACE="Courier New">FxToolkit.getSystemInterface().setDialog()</FONT> method. The <B>FxToolkit</B> class is used in the <A HREF="UIDrawText.htm">UIDrawText</A>, <A HREF="UIEdit.htm">UIEdit</A>, <A HREF="UIPropertyPage.htm">UIPropertyPage</A>, and <A HREF="UIMenuItem.htm">UIMenuItem</A> classes. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxComponentImage.htm">FxComponentImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxComponentImage.htm">FxComponentImage</A> class is used in UI classes such as <A HREF="UIChoice.htm">UIChoice</A>, <A HREF="UIExpandButton.htm">UIExpandButton</A>, and <A HREF="UIRadioButton.htm">UIRadioButton</A> to provide a set of images for the component's possible states.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxFormattedText.htm">FxFormattedText</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxFormattedText.htm">FxFormattedText</A> class is used in <A HREF="UIDrawText.htm">UIDrawText</A> to perform operations on formatted text buffers.
</FONT></TD></TR></TABLE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

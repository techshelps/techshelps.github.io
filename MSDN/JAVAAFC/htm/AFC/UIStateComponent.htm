<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class UIStateComponent</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIStateComponent.htm#com_0003001176010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="UISplitViewer.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="UIStateContainer.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class UIStateComponent</H2>
<PRE><FONT FACE="Courier" SIZE="2">abstract public class UIStateComponent extends <A HREF="UIComponent.htm">UIComponent</A>
{
  // Methods
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176010100">addFocusListener</A>(IUIFocusListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176010200">addKeyListener</A>(IUIKeyListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176010300">addMouseListener</A>(IUIMouseListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176010400">addMouseMotionListener</A>(
        IUIMouseMotionListener l);
  public void <A HREF="UIStateComponent.htm#com_0003001176010500">addNotify</A>();
  public void <A HREF="UIStateComponent.htm#com_0003001176010600">adjustLayoutSize</A>(Dimension oldSize,
        Dimension newSize);
  protected final void <A HREF="UIStateComponent.htm#com_0003001176010700">disableEvents</A>(long eventsToDisable);
  protected final void <A HREF="UIStateComponent.htm#com_0003001176010800">enableEvents</A>(long eventsToEnable);
  public Color <A HREF="UIStateComponent.htm#com_0003001176010900">getBackground</A>();
  public Dimension <A HREF="UIStateComponent.htm#com_0003001176010a00">getCachedPreferredSize</A>();
  public Cursor <A HREF="UIStateComponent.htm#com_0003001176010b00">getCursor</A>();
  public int <A HREF="UIStateComponent.htm#com_0003001176010c00">getFlags</A>();
  public Font <A HREF="UIStateComponent.htm#com_0003001176010d00">getFont</A>();
  public Color <A HREF="UIStateComponent.htm#com_0003001176010e00">getForeground</A>();
  public int <A HREF="UIStateComponent.htm#com_0003001176010f00">getIndex</A>();
  public IUIContainer <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011100">isChecked</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011200">isEnabled</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011300">isFocused</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011400">isHot</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011500">isIndeterminate</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011600">isInvalidating</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011700">isNotified</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011800">isPressed</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011900">isRedrawing</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011a00">isSelected</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011b00">isValid</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011b00">isValid</A>();
  public boolean <A HREF="UIStateComponent.htm#com_0003001176011d00">isVisible</A>();
  protected void <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A>(UIEvent e);
  protected void <A HREF="UIStateComponent.htm#com_0003001176011f00">processFocusEvent</A>(UIFocusEvent e);
  protected void <A HREF="UIStateComponent.htm#com_0003001176012000">processKeyEvent</A>(UIKeyEvent e);
  protected void <A HREF="UIStateComponent.htm#com_0003001176012100">processMouseEvent</A>(UIMouseEvent e);
  protected void <A HREF="UIStateComponent.htm#com_0003001176012200">processMouseMotionEvent</A>(UIMouseEvent e);
  public void <A HREF="UIStateComponent.htm#com_0003001176012300">recalcPreferredSize</A>();
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176012400">removeFocusListener</A>(IUIFocusListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176012500">removeKeyListener</A>(IUIKeyListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176012600">removeMouseListener</A>(IUIMouseListener l);
  public synchronized void <A HREF="UIStateComponent.htm#com_0003001176012700">removeMouseMotionListener</A>(
        IUIMouseMotionListener l);
  public void <A HREF="UIStateComponent.htm#com_0003001176012800">removeNotify</A>();
  public void <A HREF="UIStateComponent.htm#com_0003001176012900">setBackground</A>(Color color);
  public void <A HREF="UIStateComponent.htm#com_0003001176012a00">setChecked</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176012b00">setCursor</A>(Cursor cursor);
  public void <A HREF="UIStateComponent.htm#com_0003001176012c00">setEnabled</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176012d00">setFlags</A>(int flags);
  public void <A HREF="UIStateComponent.htm#com_0003001176012e00">setFocused</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176012f00">setFont</A>(Font font);
  public void <A HREF="UIStateComponent.htm#com_0003001176013000">setForeground</A>(Color color);
  public void <A HREF="UIStateComponent.htm#com_0003001176013100">setHot</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013200">setIndeterminate</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013300">setIndex</A>(int index);
  public void <A HREF="UIStateComponent.htm#com_0003001176013400">setInvalidating</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013500">setParent</A>(IUIContainer parent);
  public void <A HREF="UIStateComponent.htm#com_0003001176013600">setPressed</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013700">setRedrawing</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013800">setSelected</A>(boolean on);
  public void <A HREF="UIStateComponent.htm#com_0003001176013900">setValid</A>(boolean valid);
  public void <A HREF="UIStateComponent.htm#com_0003001176013a00">setVisible</A>(boolean show);
}
</FONT></PRE>
<P>This class implements a component having different states. <B>UIStateComponent</B> extends <A HREF="UIComponent.htm">UIComponent</A> to manage the states shown in the following table. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>State
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">checked
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Typically applies to buttons. For example, when a check box button is checked, its check box image displays a check. When the button is unchecked, the check box image is cleared. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">enabled
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object can respond to user input. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focused
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">All subsequent keyboard input is sent to the object. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">hot-tracked
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Identifies the object currently under the mouse. When the mouse enters the object, any text displayed by the object turns blue (by default). When the mouse exits, the text's original color is restored. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">indeterminate
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Typically applies to buttons. For example, when a check box button's indeterminate state is set, the check box image displays a gray check. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">notified
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An object is notified when the graphics context first becomes available. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">pressed
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse button is currently being pressed over the object. When the mouse button is released, the object is unpressed. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">redrawing
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Controls the painting of the object. When a paint request is made, the object will be redrawn only if its redrawing state set. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">selected
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates the user's selection. For example, when the user clicks a <A HREF="UIText.htm">UIText</A> item in a single-selection list box, that item becomes selected, and any previously selected item is deselected. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">valid
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The layout of the object is current. For example, when the size of the object changes, the object is marked as invalid. When the size is recomputed and the layout is updated, the object is valid again. 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">visible
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object is showing. 
</FONT></TD>
</TR>
</TABLE>
<P><B>UIStateComponent</B> defines methods to determine and set the component's current states. 
<P><B>UIStateComponent</B> also allows a <B>Listener</B> to "consume" an input (key or mouse) event before passing it to the underlying <A HREF="UIComponent.htm">UIComponent</A>. 
<P><A HREF="UICanvas.htm">UICanvas</A> extends <B>UIStateComponent</B>. 
<P><B>Note</B>  The hot-track color is the same color as the button text color. As a result, hot-tracking does not appear to be functional. 
<PRE><FONT FACE="Courier" SIZE="2"><A HREF="UIComponent.htm">UIComponent</A>
  |
  +--<B>UIStateComponent</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003001176010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001176010100">addFocusListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addFocusListener(IUIFocusListener l);
</FONT></PRE>
<P><P>Adds the specified focus listener. The listener receives all focus events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The focus listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010200">addFocusListener(IUIFocusListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012400">removeFocusListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010200">addKeyListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addKeyListener(IUIKeyListener l);
</FONT></PRE>
<P><P>Adds the specified key listener. The listener receives all key events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010300">addKeyListener(IUIKeyListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012500">removeKeyListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010300">addMouseListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addMouseListener(IUIMouseListener l);
</FONT></PRE>
<P><P>Adds the specified mouse listener. The listener receives all mouse events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010400">addMouseListener(IUIMouseListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012600">removeMouseListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010400">addMouseMotionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addMouseMotionListener(IUIMouseMotionListener l);
</FONT></PRE>
<P><P>Adds the specified mouse motion listener. The listener receives all mouse motion events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse motion listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010500">addMouseMotionListener(IUIMouseMotionListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012700">removeMouseMotionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010500">addNotify</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addNotify();
</FONT></PRE>
<P><P>Called to perform initialization when the graphics context is first available. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method invalidates the component and sets its notified state. The <B>addNotify</B> method of the superclass is then invoked.
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010600">addNotify()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012800">removeNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010600">adjustLayoutSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void adjustLayoutSize(Dimension oldSize, Dimension newSize);
</FONT></PRE>
<P><P>Invalidates the component and adjusts its layout size. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>oldSize</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The previous layout size of the component (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newSize</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new layout size of the component (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked when the component's size has changed. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142010700">adjustLayoutSize(Dimension,Dimension)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010700">disableEvents</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected final void disableEvents(long eventsToDisable);
</FONT></PRE>
<P><P>Disables the events defined by the specified event mask parameter from being delivered to this component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>eventsToDisable</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event mask defining the event types. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010800">enableEvents</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected final void enableEvents(long eventsToEnable);
</FONT></PRE>
<P><P>Enables the events defined by the specified event mask parameter to be delivered to this component. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>eventsToEnable</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event mask defining the event types. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Event types are automatically enabled when a listener for that type is added to the component. As a result, this method only needs to be invoked by subclasses of a component that require the specified event types delivered to <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A>, regardless of whether a listener is registered. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010900">getBackground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Color getBackground();
</FONT></PRE>
<P><P>Retrieves the background color of the component. 
<P><B>Return Value:</B> <P>Returns a <B>Color</B> object containing the component's background color. 

<P><B>Remarks:</B> <P>If the component itself does not have a background color, this method returns the background color of the component's parent. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142011100">getBackground()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012900">setBackground</A>, <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010a00">getCachedPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getCachedPreferredSize();
</FONT></PRE>
<P><P>Retrieves the component's preferred size (in pixels). 

<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object containing the preferred size. 

<P><B>Overrides:</B> <P><B>getCachedPreferredSize()</B> in <A HREF="UIComponent.htm">UIComponent</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010b00">getCursor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Cursor getCursor();
</FONT></PRE>
<P><P>Retrieves the component's cursor. 
<P><B>Return Value:</B> <P>Returns a <B>Cursor</B> object containing the component's cursor. 

<P><B>Remarks:</B> <P>If the component itself does not have a cursor, this method returns the cursor of the component's parent. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142011800">getCursor()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012f00">setFont</A>, <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010c00">getFlags</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFlags();
</FONT></PRE>
<P><P>Retrieves the user-defined bits currently set for the component. 

<P><B>Return Value:</B> <P>Returns an integer containing the current user-defined settings. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142011b00">getFlags()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012d00">setFlags</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010d00">getFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Font getFont();
</FONT></PRE>
<P><P>Retrieves the font of the component. 
<P><B>Return Value:</B> <P>Returns a <B>Font</B> object containing the component's font. 

<P><B>Remarks:</B> <P>If the component itself does not have a font, this method returns the font of the component's parent. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142011c00">getFont()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012f00">setFont</A>, <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010e00">getForeground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Color getForeground();
</FONT></PRE>
<P><P>Retrieves the foreground color of the component. 
<P><B>Return Value:</B> <P>Returns a <B>Color</B> object containing the component's foreground color. 

<P><B>Remarks:</B> <P>If the component itself does not have a foreground color, this method returns the foreground color of the component's parent. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142011e00">getForeground()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013000">setForeground</A>, <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176010f00">getIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getIndex();
</FONT></PRE>
<P><P>Retrieves the index of the control within its parent container. 

<P><B>Return Value:</B> <P>Returns the control's index. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142012200">getIndex()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013300">setIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011000">getParent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIContainer getParent();
</FONT></PRE>
<P><P>Retrieves the component's parent. 

<P><B>Return Value:</B> <P>Returns the parent container of the component. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142012a00">getParent()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013500">setParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011100">isChecked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isChecked();
</FONT></PRE>
<P><P>Determines whether the component's checked state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is checked; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142013a00">isChecked()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012a00">setChecked</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011200">isEnabled</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isEnabled();
</FONT></PRE>
<P><P>Determines whether the component's enabled state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is enabled; returns false if disabled. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142013b00">isEnabled()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012c00">setEnabled</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011300">isFocused</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isFocused();
</FONT></PRE>
<P><P>Determines whether the component's focus state is set. 

<P><B>Return Value:</B> <P>Returns true if the component has focus; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142013d00">isFocused()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176012e00">setFocused</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011400">isHot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isHot();
</FONT></PRE>
<P><P>Determines whether the component's hot-tracked state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is hot-tracked; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142013f00">isHot()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013100">setHot</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011500">isIndeterminate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isIndeterminate();
</FONT></PRE>
<P><P>Determines whether the component's indeterminate state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is indeterminate; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014000">isIndeterminate()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013200">setIndeterminate</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011600">isInvalidating</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isInvalidating();
</FONT></PRE>
<P><P>Retrieves the current invalidating state of this object. 

<P><B>Return Value:</B> <P>Returns true if this object has invalidating enabled; otherwise, returns false (which means it will ignore requests to invalidate). 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014100">isInvalidating()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011700">isNotified</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isNotified();
</FONT></PRE>
<P><P>Determines whether the component's notified state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is notified; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014400">isNotified()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010500">addNotify</A>, <A HREF="UIStateComponent.htm#com_0003001176012800">removeNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011800">isPressed</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isPressed();
</FONT></PRE>
<P><P>Determines whether the component's pressed state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is pressed; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014500">isPressed()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013600">setPressed</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011900">isRedrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isRedrawing();
</FONT></PRE>
<P><P>Determines whether the component will be redrawn when a paint request is made. 

<P><B>Return Value:</B> <P>Returns true if the redrawing state is set; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014600">isRedrawing()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013700">setRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011a00">isSelected</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isSelected();
</FONT></PRE>
<P><P>Determines whether the component's selected state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is selected; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014800">isSelected()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013800">setSelected</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011b00">isValid</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isValid();
</FONT></PRE>
<P><P>Determines whether the component is valid. 

<P><B>Return Value:</B> <P>Returns true if the component is valid; returns false if invalid. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014a00">isValid()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013900">setValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011c00">isValid</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isValid();
</FONT></PRE>
<P><P>Determines whether the component is valid. 

<P><B>Return Value:</B> <P>Returns true if the component is valid; returns false if invalid. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014a00">isValid()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013900">setValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011d00">isVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isVisible();
</FONT></PRE>
<P><P>Determines whether the component's visible state is set. 

<P><B>Return Value:</B> <P>Returns true if the component is visible; otherwise, returns false. 

<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142014b00">isVisible()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176013a00">setVisible</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011e00">processEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processEvent(UIEvent e);
</FONT></PRE>
<P><P>Processes the specified event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked if a listener has has been registered through a call to addXXXListener. Depending on the type of event, <B>processEvent</B> calls one of the following methods . 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focus event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateComponent.htm#com_0003001176011f00">processFocusEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">key event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateComponent.htm#com_0003001176012000">processKeyEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateComponent.htm#com_0003001176012100">processMouseEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse motion event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateComponent.htm#com_0003001176012200">processMouseMotionEvent</A>
</FONT></TD>
</TR>
</TABLE>
<P>When overriding <B>processEvent</B>, call the super method <B>processEvent</B> to ensure the default event processing continues normally. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176011f00">processFocusEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processFocusEvent(UIFocusEvent e);
</FONT></PRE>
<P><P>Processes focus events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The focus event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A> and dispatches the event to a registered focus listener. When overriding this method, call the super method <B>processFocusEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010100">addFocusListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012000">processKeyEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processKeyEvent(UIKeyEvent e);
</FONT></PRE>
<P><P>Processes key events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A> and dispatches the event to a registered key listener. When overriding this method, call the super method <B>processKeyEvent</B> to ensure the default event processing continues normally. If there is no listener registered, the <B>processKeyEvent</B> method does nothing. 
<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010200">addKeyListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012100">processMouseEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processMouseEvent(UIMouseEvent e);
</FONT></PRE>
<P><P>Processes mouse events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A> and dispatches the event to a registered mouse listener. When overriding this method, call the super method <B>processMouseEvent</B> to ensure the default event processing continues normally. If there is no listener registered, the method returns immediately; otherwise, the event is passed to the child component to process. 
<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010300">addMouseListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012200">processMouseMotionEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processMouseMotionEvent(UIMouseEvent e);
</FONT></PRE>
<P><P>Processes mouse motion events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse motion event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UIStateComponent.htm#com_0003001176011e00">processEvent</A> and dispatches the event to a registered mouse motion listener. When overriding this method, call the super method <B>processMouseMotionEvent</B> to ensure the default event processing continues normally. If there is no listener registered, the <B>processMouseMotionEvent</B> method does nothing. 
<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010400">addMouseMotionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012300">recalcPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void recalcPreferredSize();
</FONT></PRE>
<P><P>Recalculates the component's preferred size (in pixels). 

<P><B>Return Value:</B> <P>No return value. 

<P><B>Overrides:</B> <P><B>recalcPreferredSize()</B> in <A HREF="UIComponent.htm">UIComponent</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012400">removeFocusListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeFocusListener(IUIFocusListener l);
</FONT></PRE>
<P><P>Removes the specified focus listener. The listener no longer receives the control's focus events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The focus listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016300">removeFocusListener(IUIFocusListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010100">addFocusListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012500">removeKeyListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeKeyListener(IUIKeyListener l);
</FONT></PRE>
<P><P>Removes the specified key listener. The listener no longer receives the control's key events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016400">removeKeyListener(IUIKeyListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010200">addKeyListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012600">removeMouseListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeMouseListener(IUIMouseListener l);
</FONT></PRE>
<P><P>Removes the specified mouse listener. The listener no longer receives the control's mouse events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016500">removeMouseListener(IUIMouseListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010300">addMouseListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012700">removeMouseMotionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeMouseMotionListener(
        IUIMouseMotionListener l);
</FONT></PRE>
<P><P>Removes the specified mouse motion listener. The listener no longer receives the control's mouse motion events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mouse motion listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016600">removeMouseMotionListener(IUIMouseMotionListener)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010400">addMouseMotionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012800">removeNotify</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeNotify();
</FONT></PRE>
<P><P>Called when the graphics context first becomes unavailable. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method clears the notified state and invokes the <B>removeNotify</B> method of the superclass. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016700">removeNotify()</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010500">addNotify</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012900">setBackground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBackground(Color color);
</FONT></PRE>
<P><P>Sets the component's background color. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>color</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The background color for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142016d00">setBackground(Color)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010900">getBackground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012a00">setChecked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setChecked(boolean on);
</FONT></PRE>
<P><P>Sets or clears the checked state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the checked state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017000">setChecked(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011100">isChecked</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012b00">setCursor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCursor(Cursor cursor);
</FONT></PRE>
<P><P>Sets the component's cursor. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cursor</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The cursor for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017100">setCursor(Cursor)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010b00">getCursor</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012c00">setEnabled</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setEnabled(boolean on);
</FONT></PRE>
<P><P>Sets or clears the enabled state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the enabled state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017200">setEnabled(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011200">isEnabled</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012d00">setFlags</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFlags(int flags);
</FONT></PRE>
<P><P>Sets the user-defined bits for the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The user-defined settings for the component. You can set any bit in the mask 0xFFF00000. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017300">setFlags(int)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined bit was specified. 


<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010c00">getFlags</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012e00">setFocused</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFocused(boolean on);
</FONT></PRE>
<P><P>Sets or clears the focus state of the component. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the focus state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked when the component receives or loses focus. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017400">setFocused(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011300">isFocused</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176012f00">setFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFont(Font font);
</FONT></PRE>
<P><P>Sets the component's font. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>font</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The font for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017500">setFont(Font)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010d00">getFont</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013000">setForeground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setForeground(Color color);
</FONT></PRE>
<P><P>Sets the component's foreground color. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>color</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The foreground color for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017600">setForeground(Color)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010e00">getForeground</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013100">setHot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setHot(boolean on);
</FONT></PRE>
<P><P>Sets or clears the hot-tracked state of the component. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the hot-tracked state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked when the mouse enters and exits the component. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017700">setHot(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011400">isHot</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013200">setIndeterminate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setIndeterminate(boolean on);
</FONT></PRE>
<P><P>Sets or clears the indeterminate state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the indeterminate state is set and the checked state is cleared. If false, the indeterminate state is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017900">setIndeterminate(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011500">isIndeterminate</A>, <A HREF="UIStateComponent.htm#com_0003001176012a00">setChecked</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013300">setIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setIndex(int index);
</FONT></PRE>
<P><P>Sets the index of the component within its parent container. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017a00">setIndex(int)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176010f00">getIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013400">setInvalidating</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setInvalidating(boolean on);
</FONT></PRE>
<P><P>Sets the invalidating state of this object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the invalidating state to true or false. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017b00">setInvalidating(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013500">setParent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setParent(IUIContainer parent);
</FONT></PRE>
<P><P>Sets the component's parent. If the component already has a parent, it is removed from that parent's hierarchy. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>parent</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new parent container for the component. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142017f00">setParent(IUIContainer)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011000">getParent</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013600">setPressed</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPressed(boolean on);
</FONT></PRE>
<P><P>Sets or clears the pressed state of the component. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the pressed state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked when the mouse button is pressed, released, or dragged over the component. 
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142018000">setPressed(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011800">isPressed</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013700">setRedrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setRedrawing(boolean on);
</FONT></PRE>
<P><P>Sets or clears the redrawing state of the component. If the redrawing state is set, the component will be redrawn when a paint request is made. If the redrawing state is cleared, the component will not be redrawn. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the redrawing state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142018100">setRedrawing(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011900">isRedrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013800">setSelected</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelected(boolean on);
</FONT></PRE>
<P><P>Sets or clears the selected state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the selected state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142018200">setSelected(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011a00">isSelected</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013900">setValid</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValid(boolean valid);
</FONT></PRE>
<P><P>Sets or clears the valid state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>valid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the component's valid state is set and the component is validated; otherwise, the component is invalidated. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142018500">setValid(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011b00">isValid</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001176013a00">setVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setVisible(boolean show);
</FONT></PRE>
<P><P>Sets or clears the visible state of the component. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>show</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the component is shown; otherwise, the component is hidden. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="UIComponent.htm#com_0003001142018700">setVisible(boolean)</A> in <A HREF="UIComponent.htm">UIComponent</A>.

<P><B>See Also:</B> <A HREF="UIStateComponent.htm#com_0003001176011d00">isVisible</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

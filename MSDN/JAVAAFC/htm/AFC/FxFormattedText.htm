<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class FxFormattedText</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxFormattedText.htm#com_000300080e010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxFormattedText.htm#com_000300080e020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="FxFontMetrics.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_pfx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="FxGraphicMetaFile.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.fx</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class FxFormattedText</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class FxFormattedText extends <A HREF="FxText.htm">FxText</A> implements 
            <A HREF="IFxTextConstants.htm">IFxTextConstants</A>, <A HREF="IFxGraphicsConstants.htm">IFxGraphicsConstants</A>, 
            <B>IFxLocaleFormatting</B>
{
  // Constructors
  public <A HREF="FxFormattedText.htm#com_000300080e010100">FxFormattedText</A>();
  public <A HREF="FxFormattedText.htm#com_000300080e010200">FxFormattedText</A>(String newBuff);
  public <A HREF="FxFormattedText.htm#com_000300080e010300">FxFormattedText</A>(char newBuff[]);
  public <A HREF="FxFormattedText.htm#com_000300080e010400">FxFormattedText</A>(char newBuff[], int offset, int length);

  // Methods
  public FxFormattedText <A HREF="FxFormattedText.htm#com_000300080e020100">dropTail</A>(int iStart);
  public synchronized void <A HREF="FxFormattedText.htm#com_000300080e020200">ensureNotDirty</A>( Graphics g );
  public Rectangle <A HREF="FxFormattedText.htm#com_000300080e020300">getBounding</A>();
  public Point <A HREF="FxFormattedText.htm#com_000300080e020400">getClosestOffset</A>(int scrnX, int scrnY);
  public Font <A HREF="FxFormattedText.htm#com_000300080e020500">getFont</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e020600">getHeight</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e020700">getHorizAlign</A>();
  public boolean <A HREF="FxFormattedText.htm#com_000300080e020800">getKerning</A>();
  public Locale <A HREF="FxFormattedText.htm#com_000300080e020900">getLocale</A>();
  public boolean <A HREF="FxFormattedText.htm#com_000300080e020a00">getLocaleFormattingOverride</A>();
  public boolean <A HREF="FxFormattedText.htm#com_000300080e020b00">getMnemonicDrawing</A>();
  public Point <A HREF="FxFormattedText.htm#com_000300080e020c00">getNextStartPoint</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e020d00">getOffsetFromPos</A>(int scrnX, int scrnY, int flags);
  public IFxShape <A HREF="FxFormattedText.htm#com_000300080e020e00">getOutline</A>();
  public char <A HREF="FxFormattedText.htm#com_000300080e020f00">getPasswordChar</A>();
  public Point <A HREF="FxFormattedText.htm#com_000300080e021000">getScrnLocation</A>(int index) ;
  public Point <A HREF="FxFormattedText.htm#com_000300080e021100">getStartPoint</A>();
  public String <A HREF="FxFormattedText.htm#com_000300080e021200">getText</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e021300">getTextDirection</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e021400">getVertAlign</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e021500">getWidth</A>();
  public int <A HREF="FxFormattedText.htm#com_000300080e021600">getWordWrap</A>();
  public void <A HREF="FxFormattedText.htm#com_000300080e021700">insert</A>(char key, int iPos);
  public void <A HREF="FxFormattedText.htm#com_000300080e021800">insert</A>(char key[], int iPos);
  public void <A HREF="FxFormattedText.htm#com_000300080e021900">insert</A>(char key[], int offs, int len, int iPos);
  public boolean <A HREF="FxFormattedText.htm#com_000300080e021a00">isBodyLocationDetermined</A>();
  public boolean <A HREF="FxFormattedText.htm#com_000300080e021b00">isDirty</A>();
  public void <A HREF="FxFormattedText.htm#com_000300080e021c00">paint</A>(FxGraphics g, int startPos, int length,
        int opaquing);
  public void <A HREF="FxFormattedText.htm#com_000300080e021d00">paint</A>(Graphics g);
  public void <A HREF="FxFormattedText.htm#com_000300080e021e00">remove</A>(int iPos, int numberToRemove);
  public void <A HREF="FxFormattedText.htm#com_000300080e021f00">setBounding</A>(Rectangle r, boolean bRetainCurrPoint);
  public void <A HREF="FxFormattedText.htm#com_000300080e022000">setCallback</A>(IFxTextCallback c);
  public void <A HREF="FxFormattedText.htm#com_000300080e022100">setFont</A>(Font f);
  public void <A HREF="FxFormattedText.htm#com_000300080e022200">setHorizAlign</A>(int h);
  public void <A HREF="FxFormattedText.htm#com_000300080e022300">setKerning</A>(boolean useKerning);
  public void <A HREF="FxFormattedText.htm#com_000300080e022400">setLocale</A>(Locale locale);
  public void <A HREF="FxFormattedText.htm#com_000300080e022500">setLocaleFormattingOverride</A>(boolean override);
  public void <A HREF="FxFormattedText.htm#com_000300080e022600">setMnemonicDrawing</A>(boolean mnem);
  public void <A HREF="FxFormattedText.htm#com_000300080e022700">setOutline</A>(IFxShape outline);
  public void <A HREF="FxFormattedText.htm#com_000300080e022800">setPasswordChar</A>(char c);
  public void <A HREF="FxFormattedText.htm#com_000300080e022900">setStartPoint</A>(int x, int y);
  public void <A HREF="FxFormattedText.htm#com_000300080e022a00">setStartPoint</A>(Point p);
  public void <A HREF="FxFormattedText.htm#com_000300080e022b00">setStartPointAtOrigin</A>();
  public void <A HREF="FxFormattedText.htm#com_000300080e022c00">setTabs</A>(int newTabs[]);
  public void <A HREF="FxFormattedText.htm#com_000300080e022d00">setText</A>(char newBuff[], int offset, int len);
  public void <A HREF="FxFormattedText.htm#com_000300080e022e00">setText</A>(char newBuff[]);
  public void <A HREF="FxFormattedText.htm#com_000300080e022f00">setText</A>(String s);
  public void <A HREF="FxFormattedText.htm#com_000300080e023000">setTextDirection</A>(int dir);
  public void <A HREF="FxFormattedText.htm#com_000300080e023100">setVertAlign</A>(int v);
  public void <A HREF="FxFormattedText.htm#com_000300080e023200">setWordWrap</A>(int ww);
  public Rectangle <A HREF="FxFormattedText.htm#com_000300080e023300">shrinkBound</A>(boolean reset);
}
</FONT></PRE>
<P>This class provides text layout and formatting for text in any language. <B>FxFormattedText</B> is used by UI and edit controls where features, such as text alignment and text direction, must be specified by the user. 
<P>You can draw <B>FxFormattedText</B> buffers directly with either <A HREF="FxFormattedText.htm#com_000300080e021c00">paint</A> methods. <A HREF="UIDrawText.htm#com_0003001147000000">UIDrawText</A> also uses <B>FxFormattedText</B> internally. 
<P>This class supports vertical writing. 

<PRE><FONT FACE="Courier" SIZE="2"><A HREF="FxText.htm">FxText</A>
  |
  +--<B>FxFormattedText</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_000300080e010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300080e010100">FxFormattedText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText();
</FONT></PRE>
<P><P>Creates and initiates an empty text buffer. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e010200">FxFormattedText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText(String newBuff);
</FONT></PRE>
<P><P>Creates a text buffer that is based on a specific string. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string that the new buffer is based on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e010300">FxFormattedText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText(char newBuff[]);
</FONT></PRE>
<P><P>Creates and initializes a new text buffer, based on an specific array of characters. This constructor copies characters to the new buffer from the base offset of the character array. The <A HREF="FxFormattedText.htm">FxFormattedText(char, int, int)</A> constructor, however, enables character array manipulation that starts from a specified offset in the character array. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of characters that the new buffer is based on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e010400">FxFormattedText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText(char newBuff[], int offset, int length);
</FONT></PRE>
<P><P>Creates and initializes a new text buffer, based on a character array. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character array that the new text buffer is based on. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset used in the specified character array. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>length</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the character array that is copied to the new text buffer. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300080e020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300080e020100">dropTail</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText dropTail(int iStart);
</FONT></PRE>
<P><P>Retrieves an <A HREF="FxFormattedText.htm">FxFormattedText</A> buffer with the same attributes as the current buffer. The text from the offset <I>iStart</I> onward is removed. 

<P><B>Return Value:</B> <P>Returns an <A HREF="FxFormattedText.htm">FxFormattedText</A> buffer with the text from <I>iStart</I> to the end of the buffer cropped. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting point of the text that is removed. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020200">ensureNotDirty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void ensureNotDirty( Graphics g );
</FONT></PRE>
<P><P>Updates text block formatting according to the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object used to draw the text buffer. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method must be called before widths, heights, and other parameters can be retrieved.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020300">getBounding</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Rectangle getBounding();
</FONT></PRE>
<P><P>Retrieves the current bounding box that is associated with the text. 

<P><B>Return Value:</B> <P>Returns the <B>Rectangle</B> that is used as the bounding box. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e021f00">setBounding</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020400">getClosestOffset</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getClosestOffset(int scrnX, int scrnY);
</FONT></PRE>
<P><P>Finds the closest character to the screen location. 
<P>This method is used when <A HREF="FxFormattedText.htm#com_000300080e021a00">isBodyLocationDetermined</A> returns false, which indicates that the exact screen location of a character cannot be determined. 
<P><B>Return Value:</B> <P>Returns the point where the closest character was found. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnX</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the screen location. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnY</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the screen location. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The x coordinate of the <B>Point</B> returned is equal to the offset idx into the text buffer, while the y coordinate of the Point is <I>y = match param --&gt; (x-x1)2 + (y-y1)2</I>. This is returned so that all formats in a <A HREF="UIEdit.htm#com_0003001148000000">UIEdit</A> object get the chance to pick the character position.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020500">getFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Font getFont();
</FONT></PRE>
<P><P>Retrieves the current font that is used with the <A HREF="FxFormattedText.htm">FxFormattedText</A> buffer. If no font is specified when this method is called, a default font is returned. 

<P><B>Return Value:</B> <P>Returns the font that is used. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022100">setFont</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020600">getHeight</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getHeight();
</FONT></PRE>
<P><P>Retrieves the height of a line of text in the current font (in pixels). 
<P><B>Return Value:</B> <P>Returns the height of the text. 

<P><B>Remarks:</B> <P>This method takes into account the standard leading (inter-line space) between the regular ascent and descent of a line of text. (The ascent is the distance from the baseline of the text to the top of most characters in a specific font. Similarly, the descent is the distance from the baseline to the bottom of most characters in a specific font.)
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020700">getHorizAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getHorizAlign();
</FONT></PRE>
<P><P>Retrieves the horizontal alignment of the text. 

<P><B>Return Value:</B> <P>Returns the horizontal alignment. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022200">setHorizAlign</A>, <A HREF="FxFormattedText.htm#com_000300080e023100">setVertAlign</A>, <A HREF="FxFormattedText.htm#com_000300080e021400">getVertAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020800">getKerning</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean getKerning();
</FONT></PRE>
<P><P>Determines whether kerning is in use. 

<P><B>Return Value:</B> <P>Returns true if kerning is currently used to format text; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022300">setKerning</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020900">getLocale</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Locale getLocale();
</FONT></PRE>
<P><P>Retrieves the java.util.Locale that the text is based on. 

<P><B>Return Value:</B> <P>Returns the current java.util.Locale. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022400">setLocale</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020a00">getLocaleFormattingOverride</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean getLocaleFormattingOverride();
</FONT></PRE>
<P><P>Determines whether text formatting override features are based on locale. 

<P><B>Return Value:</B> <P>Returns true if the locale determines overriding features; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022500">setLocaleFormattingOverride</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020b00">getMnemonicDrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean getMnemonicDrawing();
</FONT></PRE>
<P><P>Determines whether text uses underlining for hot key tracking. This method is available for backward compatibility; the underlined character must be preceded by an ampersand. 

<P><B>Return Value:</B> <P>Returns true if underlines are set; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022600">setMnemonicDrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020c00">getNextStartPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getNextStartPoint();
</FONT></PRE>
<P><P>Retrieves the next position to draw after the text. 

<P><B>Return Value:</B> <P>Returns the point that is the next position to draw after the text. 
<P><B>Remarks:</B> <P>This method, which is useful for tying multiple sentences together, is used by the <A HREF="FxFormattedText.htm">FxFormattedText</A> class. Be aware that if the text ends on a hard return, the <B>Point</B> object must refer to the next line.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020d00">getOffsetFromPos</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getOffsetFromPos(int scrnX, int scrnY, int flags);
</FONT></PRE>
<P><P>Retrieves the offset of the character that is closest to a specific screen location. 
<P><B>Return Value:</B> <P>Returns the closest offset if successful; otherwise, returns -1. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnX</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the screen location to check. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnY</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the screen location to check. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The flags controlling the method. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is used by the edit classes (including <A HREF="UIDrawText.htm#com_0003001147000000">UIDrawText</A>, <A HREF="UIEdit.htm#com_0003001148000000">UIEdit</A>, and <A HREF="FxFormattedText.htm">FxFormattedText</A>) to find which character is closest to the caret. The <I>flags</I> are the same as those for opaquing text drawing. If there are dy arrays, this method will fail and return -1. If a failure occurs, use the <A HREF="FxFormattedText.htm#com_000300080e020400">getClosestOffset</A> method to determine the offset in an array that is nearest to a given screen location.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020400">getClosestOffset</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020e00">getOutline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IFxShape getOutline();
</FONT></PRE>
<P><P>Retrieves the outline of the shape. 

<P><B>Return Value:</B> <P>Returns the shape that is used as the outline. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022700">setOutline</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e020f00">getPasswordChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public char getPasswordChar();
</FONT></PRE>
<P><P>Retrieves the character used to mask user text input. 

<P><B>Return Value:</B> <P>Returns the password character. If no password character is specified, zero (cast as a char) is returned. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021000">getScrnLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getScrnLocation(int index) ;
</FONT></PRE>
<P><P>Finds the screen location of a particular character. If the character index given is not valid for the current character buffer, the method returns null. 

<P><B>Return Value:</B> <P>Returns the screen location of the character. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the character for which the screen location is being retrieved. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021100">getStartPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getStartPoint();
</FONT></PRE>
<P><P>Retrieves the current specified starting point for drawing the text. 

<P><B>Return Value:</B> <P>Returns the point where the text starts. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022900">setStartPoint</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021200">getText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getText();
</FONT></PRE>
<P><P>Retrieves the current text in the text buffer as a <B>String</B> object. 

<P><B>Return Value:</B> <P>Returns a string that contains the current text in the buffer. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022d00">com.ms.fx.FxFormattedText.setText</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021300">getTextDirection</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getTextDirection();
</FONT></PRE>
<P><P>Retrieves the current text direction. 

<P><B>Return Value:</B> <P>Returns the current text direction. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e023000">setTextDirection</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021400">getVertAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getVertAlign();
</FONT></PRE>
<P><P>Retrieves the vertical alignment for the text. 

<P><B>Return Value:</B> <P>Returns the vertical alignment. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e023100">setVertAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021500">getWidth</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getWidth();
</FONT></PRE>
<P><P>Retrieves the width of the entire buffer if it is one long string. 

<P><B>Return Value:</B> <P>Returns the advance width of the character buffer, in number of characters. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021600">getWordWrap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getWordWrap();
</FONT></PRE>
<P><P>Retrieves the word-wrapping functionality. 

<P><B>Return Value:</B> <P>Returns the word-wrapping functionality. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e023200">setWordWrap</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021700">insert</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void insert(char key, int iPos);
</FONT></PRE>
<P><P>Inserts a single character into the buffer. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character to insert. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the buffer where the character is inserted. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b020800">insert(char,int)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021800">insert</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void insert(char key[], int iPos);
</FONT></PRE>
<P><P>Inserts an array of characters into the buffer. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of characters to insert. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position where the characters are inserted. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b020a00">insert(char[],int)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021900">insert</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void insert(char key[], int offs, int len, int iPos);
</FONT></PRE>
<P><P>Inserts an array of characters into the buffer. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The source array of characters to insert. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The specified offset in the source array. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the character array fragment starting from <I>offs</I>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the buffer where the characters are to be inserted. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b020900">insert(char[],int,int,int)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021a00">isBodyLocationDetermined</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isBodyLocationDetermined();
</FONT></PRE>
<P><P>Checks if there are definable start, body, and end screen positions. 

<P><B>Return Value:</B> <P>Returns true if the exact screen location of a character is determined. In this event, you can use the <A HREF="FxFormattedText.htm#com_000300080e021000">getScrnLocation</A> method. If the return value is false, use the <A HREF="FxFormattedText.htm#com_000300080e020400">getClosestOffset</A> method to determine the offset nearest to the specified screen coordinates. 

<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e021000">getScrnLocation</A>, <A HREF="FxFormattedText.htm#com_000300080e020400">getClosestOffset</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021b00">isDirty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isDirty();
</FONT></PRE>
<P><P>Determines whether the text needs reformatting before any other operations may be performed on the buffer. Use the <A HREF="FxFormattedText.htm#com_000300080e020200">ensureNotDirty</A> method to reformat the text. 

<P><B>Return Value:</B> <P>Returns true if there is a pending update for the text. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021c00">paint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void paint(FxGraphics g, int startPos, int length, int opaquing);
</FONT></PRE>
<P><P>Paints the selected characters in the text block. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>startPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting character position. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>length</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the character array. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>opaquing</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used only if the graphics object has a text background color set and the text has a bounding box. Can be a combination of the following values: 
<DL>
<DT>0 
 </DT><DD>Don't opaque. 
</DD><DT><A HREF="IFxTextConstants.htm#com_000300082801000e">IFxTextConstants.OPAQUE_PRIOR</A> 
 </DT><DD>Opaque everything prior to the starting character position, startPos. 
</DD><DT><A HREF="IFxTextConstants.htm#com_000300082801000c">IFxTextConstants.OPAQUE_BODY</A> 
 </DT><DD>Fill out the lines painted between the character position startPos and the screen position NextPos. 
</DD><DT><A HREF="IFxTextConstants.htm#com_000300082801000d">IFxTextConstants.OPAQUE_POST</A> 
 </DT><DD>Opaque everything after the screen position NextPos.
</DD></DL>
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021d00">paint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void paint(Graphics g);
</FONT></PRE>
<P><P>Paints the text block. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object to use. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021e00">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(int iPos, int numberToRemove);
</FONT></PRE>
<P><P>Deletes characters from a buffer. This may be a single character; if so, <I>numberToRemove</I> is 1. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting position of the characters to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>numberToRemove</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of characters to remove. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b020e00">remove(int,int)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e021f00">setBounding</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBounding(Rectangle r, boolean bRetainCurrPoint);
</FONT></PRE>
<P><P>Sets the bounding box. If there isn't a bounding box, the text is drawn in a single line. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle to set as the bounding box. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bRetainCurrPoint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If false, the alignment is processed as in <A HREF="UIDrawText.htm#com_0003001147000000">UIDrawText</A> and the current point is lost. If the alignments are set to <B>tdScriptDefault</B>, right-to-left/top-to-bottom and so on, will be incorporated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>See the rules for <B>setCurrPoint</B>.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022000">setCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCallback(IFxTextCallback c);
</FONT></PRE>
<P><P>Sets the callback interface. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The callback interface to associate with the current object. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method allows applications to make final modifications to the layout after all script processing has been done.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022100">setFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFont(Font f);
</FONT></PRE>
<P><P>Sets the font for the buffer. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>f</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The font to set. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022200">setHorizAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setHorizAlign(int h);
</FONT></PRE>
<P><P>Sets the horizontal alignment for the text. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The horizontal alignment. It may be one those that are shown in the following table. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaCenter</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaLeft</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaRight</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaJustified</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaStretch</B> or 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaScriptDefault</B>
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Some of the vertical and horizontal alignment values are script and locale dependant. Although all values are valid, the <A HREF="FxFormattedText.htm#com_000300080e020200">ensureNotDirty</A> method may use default values (<B>htaLeft</B> and <B>vtaTop</B>) if the horizontal or vertical alignment are not appropriate for the current locale or script direction.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e023100">setVertAlign</A>, <A HREF="FxFormattedText.htm#com_000300080e021400">getVertAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022300">setKerning</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setKerning(boolean useKerning);
</FONT></PRE>
<P><P>Sets whether the text buffer, when formatted, will use kerning. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>useKerning</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true if you want the text, when formatted, to use kerning. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Currently, this method is not implemented.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020800">getKerning</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022400">setLocale</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setLocale(Locale locale);
</FONT></PRE>
<P><P>Sets the locale for the text. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>locale</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The current java.util.Locale. Locale can also control vertical writing directions, when used with the Locale.JAPANESE_VERTICAL, Locale.SIMPLIFIED_CHINESE_VERTICAL, Locale.KOREAN_VERTICAL, and Locale.TRADITIONAL_CHINESE_VERTICAL locale constants. 
<P><B>Note</B>  The <B>JAPANESE_VERTICAL</B>, and other similar constants, are Microsoft additions to the java.util.Locale class. When used with the <B>setLocale</B> method, their effect is the same as using the <A HREF="FxFormattedText.htm#com_000300080e023000">setTextDirection</A> method. 
<P>For example, the <B>setLocale(Locale.KOREAN_VERTICAL)</B> method has the same effect as calling <B>setTextDirection(IFxTextConstants.tdTB_RL)</B>. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method determines which locale handler is used for formatting, word-breaking, and other operations.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020900">getLocale</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022500">setLocaleFormattingOverride</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setLocaleFormattingOverride(boolean override);
</FONT></PRE>
<P><P>Sets whether the locale will determine overriding features for text formatting. For example, if the locale is Japan, and the text direction is set to <B>tdJapanTradNormal</B>, pure vertical writing will not occur, but the punctuation will be moved, and so on. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>override</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true if the locale should determine the override features. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Currently, this method is not implemented.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020a00">getLocaleFormattingOverride</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022600">setMnemonicDrawing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setMnemonicDrawing(boolean mnem);
</FONT></PRE>
<P><P>Sets whether the text displays underlines for hot key tracking. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>mnem</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true to enable mnemonic drawing. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020b00">getMnemonicDrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022700">setOutline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setOutline(IFxShape outline);
</FONT></PRE>
<P><P>Sets the outline that the text will wrap around. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>outline</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The shape to use as the outline. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>When a shape is used, the meanings of the parameters for the block change. The horizontal text alignment becomes the reference for where the text is located on the shape (left, center, and so on). The vertical text alignment becomes a reference for whether the text sits above, on, or below the shape. Opaquing has no effect when a shape is in use, as opaquing cannot be determined. 
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020e00">getOutline</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022800">setPasswordChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPasswordChar(char c);
</FONT></PRE>
<P><P>Displays all characters using the same base character. One common use for this is to set the character echoed when password text is entered. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The base character to use for all echoed text. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020f00">getPasswordChar</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022900">setStartPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStartPoint(int x, int y);
</FONT></PRE>
<P><P>Sets the start point of the text. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the start point. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the start point. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If there is no bounding box associated with the text, this is the (x,y) position and the text will be drawn relative to the position using the alignment flags. 
<P>If there is a bounding box, the (x,y) position is used to set the start point within the bounding box, and the box is used for limiting the text. Although you can set the (x,y) point outside the bounding box, the start of the text will not be drawn. 
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e021f00">setBounding</A>, <A HREF="FxFormattedText.htm#com_000300080e020300">getBounding</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022a00">setStartPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStartPoint(Point p);
</FONT></PRE>
<P><P>Sets the start point for the text, using a <B>Point</B> object instead of a specified (x,y) coordinate. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting point for the text. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If no bounding box is associated with the text, the start point is the (x,y) screen position and the text will be drawn relative to the position according to the alignment flags. 
<P>If a bounding box exists, the (x,y) position sets the start point within the bounding box, and the box is used for limiting the text. Although you can set the (x,y) point outside the bounding box, the start of the text will not be drawn. 
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020300">getBounding</A>, <A HREF="FxFormattedText.htm#com_000300080e021f00">setBounding</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022b00">setStartPointAtOrigin</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStartPointAtOrigin();
</FONT></PRE>
<P><P>Resets the current specified starting point when a bounding box is associated with text. The horizontal and vertical text alignment flags control where the point is reset. If no bounding box is associated with the buffer, an (x,y) point of (0,0) is set. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022c00">setTabs</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTabs(int newTabs[]);
</FONT></PRE>
<P><P>Sets the tabs for the <A HREF="FxFormattedText.htm">FxFormattedText</A> block. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newTabs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of tab positions. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022d00">setText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setText(char newBuff[], int offset, int len);
</FONT></PRE>
<P><P>Replaces the text in the buffer with that of a character array, starting at a specified offset. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A character array. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The specified offset in <I>newBuff</I>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the character array. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b021100">setText(char[],int,int)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022e00">setText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setText(char newBuff[]);
</FONT></PRE>
<P><P>Replaces the text in the buffer with that of a character array. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A character array. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b020f00">setText(char[])</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e022f00">setText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setText(String s);
</FONT></PRE>
<P><P>Replaces the text in the buffer with the contents of a string. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to place in the buffer. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxText.htm#com_000300081b021000">setText(String)</A> in <A HREF="FxText.htm">FxText</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e023000">setTextDirection</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTextDirection(int dir);
</FONT></PRE>
<P><P>Sets the text flow direction. The direction can be one of those shown in the following table. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>tdLR_TB</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>tdTB_LR</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>tdTB_RL</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>tdLatinNormal</B> 
</FONT></TD>
</TR>
</TABLE>
<P>The direction can also be an angle value of 0 to 360 (where the angle value 0 represents "East" if you use a <B>BorderLayout</B> layout manager). 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dir</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The direction that the text should flow. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e023100">setVertAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setVertAlign(int v);
</FONT></PRE>
<P><P>Sets the vertical alignment for the text. This may be one of the alignments shown in the following table. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaCenter</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaTop</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaBottom</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaBaseline</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaStretch</B> or 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaScriptDefault</B>
</FONT></TD>
</TR>
</TABLE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>v</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The vertical alignment. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Some of the vertical and horizontal alignment values are script and locale dependant. Although all values are valid, the <A HREF="FxFormattedText.htm#com_000300080e020200">ensureNotDirty</A> method may use default values (<B>htaLeft</B> and <B>vtaTop</B>) if the horizontal or vertical alignments are not appropriate for the current locale or script direction.
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022200">setHorizAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e023200">setWordWrap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setWordWrap(int ww);
</FONT></PRE>
<P><P>Sets the word-wrapping functionality. This may be one of the following: 
<DL>
<DT><B>wwWrap</B> 
</DT><DT><B>wwKeepWordIntact</B> 
</DT><DT><B>wwVirtualRectEnd</B> 
</DT><DT><B>wwVirtualRectSide</B> 
</DT><DT><B>wwCleanEdges</B> 

</DT></DL>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ww</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The word-wrapping value to set. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300080e023300">shrinkBound</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Rectangle shrinkBound(boolean reset);
</FONT></PRE>
<P><P>Shrinks the bounding rectangle to the minimum size that still contains all the text. If no text is currently in the bounding rectangle, the rectangle shrinks completely. 
<P><B>Return Value:</B> <P>Returns the new bounding rectangle if reset is true. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>reset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the bounding rectangle of the object will reflect the change; otherwise, the result will be returned, but the bounding rectangle will not be updated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The direction of shrinkage will depend on the text direction (for example, the upper left corner will not necessarily remain at (0,0)). 
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

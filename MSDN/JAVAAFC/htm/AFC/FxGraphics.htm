<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class FxGraphics</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxGraphics.htm#com_0003000810010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="FxGraphicMetaFile.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_pfx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="FxMapFont.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.fx</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class FxGraphics</H2>
<PRE><FONT FACE="Courier" SIZE="2">public abstract class FxGraphics extends <B>Graphics</B> implements 
            <A HREF="IFxGraphicsConstants.htm">IFxGraphicsConstants</A>, <A HREF="IFxTextConstants.htm">IFxTextConstants</A>, 
            <A HREF="PeerConstants.htm">PeerConstants</A>
{
  // Methods
  public void <A HREF="FxGraphics.htm#com_0003000810010100">draw3DRect</A>(int x, int y, int width, int height,
        boolean raised);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810010200">drawBezier</A>(int xOrig, int yOrig,
        int values[], int nPoints);
  public boolean <A HREF="FxGraphics.htm#com_0003000810010300">drawBorder</A>(Rectangle rect, int edge, int flags);
  public void <A HREF="FxGraphics.htm#com_0003000810010400">drawChars</A>(char data[], int offset, int length, int x,
        int y);
  public void <A HREF="FxGraphics.htm#com_0003000810010500">drawChars</A>(char data[], int offset, int length, int x,
        int y, Rectangle optionRect, int options, int dx[], int
        dy[]);
  protected abstract void <A HREF="FxGraphics.htm#com_0003000810010600">drawCharsWithoutFxFont</A>(char data[],
        int offset, int length, int x, int y,
        Rectangle optionRect, int options, int dx[], int dy[]);
  public boolean <A HREF="FxGraphics.htm#com_0003000810010700">drawEdge</A>(Rectangle inRect, int edge, int flags);
  public abstract boolean <A HREF="FxGraphics.htm#com_0003000810010800">drawImage</A>(Image img, int dx1, int dy1,
        int dx2, int dy2, int sx1, int sy1, int sx2, int sy2,
        ImageObserver observer);
  public abstract boolean <A HREF="FxGraphics.htm#com_0003000810010900">drawImage</A>(Image img, int dx1, int dy1,
        int dx2, int dy2, int sx1, int sy1, int sx2, int sy2,
        Color bgcolor, ImageObserver observer);
  public void <A HREF="FxGraphics.htm#com_0003000810010a00">drawOutlineChar</A>(int xOrig, int yOrig,
        GlyphOutline go);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810010b00">drawOutlinePolygon</A>(int xOrig, int yOrig,
        OutlinePolygon op);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810010c00">drawPixels</A>(int pels[], int len);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810010d00">drawPolyline</A>(int xPoints[], int yPoints[],
        int nPoints);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810010e00">drawScanLines</A>(boolean xChanging,
        int points[], int offset, int nPoints);
  public void <A HREF="FxGraphics.htm#com_0003000810010f00">drawString</A>(String str, int x, int y,
        Rectangle optionRect, int options, int dx[], int dy[]);
  public void <A HREF="FxGraphics.htm#com_0003000810011000">drawString</A>(String str, int x, int y);
  public void <A HREF="FxGraphics.htm#com_0003000810011100">drawString</A>(String str, int x, int y, int a);
  public FxFormattedText <A HREF="FxGraphics.htm#com_0003000810011200">drawStringFormatted</A>(String s, Rectangle r,
        int hta, int vta, int ww, boolean bordered, int
        tabOrigin, int tabs[], IFxShape outline, boolean mnem);
  protected abstract void <A HREF="FxGraphics.htm#com_0003000810011300">drawStringWithoutFxFont</A>(String str,int x,
        int y, Rectangle optionRect, int options, int[] dx,int[]
        dy);
  public void <A HREF="FxGraphics.htm#com_0003000810011400">drawT2Curve</A>(FloatPoint pta, FloatPoint ptb,
        FloatPoint ptc, int xOrig, int yOrig);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810011500">excludeClip</A>(int x, int y, int w, int h);
  public void <A HREF="FxGraphics.htm#com_0003000810011600">fill3DRect</A>(int x, int y, int width, int height,
        boolean raised);
  public Shape <A HREF="FxGraphics.htm#com_0003000810011700">getClip</A>();
  public abstract Rectangle <A HREF="FxGraphics.htm#com_0003000810011800">getClipBounds</A>();
  public abstract Region <A HREF="FxGraphics.htm#com_0003000810011900">getClipRegion</A>();
  public static FxGraphics <A HREF="FxGraphics.htm#com_0003000810011a00">getExtendedGraphics</A>(Graphics g);
  public static FxGraphics <A HREF="FxGraphics.htm#com_0003000810011b00">getExtendedGraphics</A>(Component c,
        Image img);
  public abstract GlyphOutline <A HREF="FxGraphics.htm#com_0003000810011c00">getGlyphOutline</A>(char ch);
  public Color <A HREF="FxGraphics.htm#com_0003000810011d00">getTextBackgroundColor</A>();
  public abstract Point <A HREF="FxGraphics.htm#com_0003000810011e00">getTranslation</A>();
  public abstract void <A HREF="FxGraphics.htm#com_0003000810011f00">intersectClip</A>(int x, int y, int w, int h);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810012000">setClip</A>(Region r);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810012100">setClip</A>(int x, int y, int width, int height);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810012200">setClip</A>(Shape clip);
  public abstract void <A HREF="FxGraphics.htm#com_0003000810012300">setColor</A>( FxColor c );
  public void <A HREF="FxGraphics.htm#com_0003000810012400">setTextBackgroundColor</A>( FxColor c);
  public void <A HREF="FxGraphics.htm#com_0003000810012500">setTextBackgroundColor</A>( Color c);
}
</FONT></PRE>
<P>This class encapsulates an extended graphics object. 
<P>The <B>FxGraphics</B> class is one of the core classes of the com.ms.fx package. It provides both an extended graphics object implementation and abstract methods for full cross-platform compatibility. (These methods are implemented either in a graphic object's peer or native windowing system.) 
<P>Any graphics object, whether AWT or AFC, performs operations with the same basic premise: You can assign a color and font style to the object, and then draw text and shapes with that color and font. The following example shows how you create an instance of the <B>FxGraphics</B> class with the <A HREF="FxGraphics.htm#com_0003000810011a00">getExtendedGraphics</A> method. The object is created with default font and color. 
<PRE><FONT FACE="Courier" SIZE="2">// Create an extended graphics object.
FxGraphics fxg = FxGraphics.getExtendedGraphics(Graphics gOriginal);
</FONT></PRE>
<P>You can use either the default color and font that the graphics object was created with for drawing operations, or you can call the <B>setColor</B> and <B>setFont</B> methods to set these attributes independently. 
<PRE><FONT FACE="Courier" SIZE="2"> // Set the color and font of the graphics object.
fxg.setColor(Color.red);
fxg.setFont("Helvetica");
</FONT></PRE>
<P>The graphics object is used to draw both text and various shapes. Generally, the shapes that may be drawn are either an outline shape or a shape that is filled with a specified color. With the com.ms.fx package, you are provided with classes that extend the flexibility of drawing operations. These classes enable you to use images for background and foreground drawing (<A HREF="FxTexture.htm">FxTexture</A>), pens that may be several pixels wide (<A HREF="FxPen.htm">FxPen</A>), and pens that enable users to select different background fill colors and foreground drawing colors (<A HREF="FxBrushPen.htm">FxBrushPen</A>). 
<P>In the following example, the graphics object is used to perform several drawing operations, using some standard drawing methods. 
<PRE><FONT FACE="Courier" SIZE="2">// Draw a line from the top-left corner of the canvas object to a point 100
// pixels down and 100 pixels across. A red diagonal line, 1 pixel wide, results.
fxg.drawLine(0, 0, 100, 100);

// Draw a filled red circle with the fillOval method.
fxg.fillOval(0, 0, 50, 50);
</FONT></PRE>
<P>These are very simple examples, but by using the extended objects in the fx package, you can draw more complex and compelling graphics. An instance of the <A HREF="FxTexture.htm">FxTexture</A> class may be selected into a graphics context in the same way a color is selected, and then used as a background or foreground color. Similarly, you can create an <A HREF="FxPen.htm">FxPen</A> using the same <B>FxTexture</B>, and draw lines and shapes of varying thickness. The following example demonstrates how to link the attributes of these objects together and use them to draw. 
<PRE><FONT FACE="Courier" SIZE="2">// Create an FxTexture based on an <B>Image</B> object. The fifth and sixth
// parameters indicate that the image should be drawn over a surface dimension 
// that is 200 pixels wide and 300 high. The color (255, 0, 0) is used as a 
// default color should the image fail to be drawn.
FxTexture myTex = new FxTexture(anImage, FxTexture.STRETCH_ALL,
                                0, 0, 200, 300, false, 255, 0, 0);

// An FxPen object can now be created based on the FxTexture object.
FxPen myWidePen = new FxPen(10, myTex);

// The FxPen object, in turn, may be selected into the graphics object
// the same way a Color is selected in the previous example. 
fxg.setColor(myWidePen);
</FONT></PRE>
<P>Now any drawing operation with the current graphics object are performed by drawing the <B>Image</B> (stretched across the surface) with a pen that is 10 pixels wide. The drawing method calls are the same as before, as all the objects described use internal callback methods to perform their operations. As a result, you can draw the same line and circle, with very different results, without altering the graphics' method calls. 
<P>The <B>FxGraphics</B> class provides a drawing API inherited from the java.awt.<B>Graphics</B> class. The <A HREF="FxGraphics.htm#com_0003000810010800">drawImage</A> methods draw images either within a given bounding rectangle, or a full image at a specified screen location. Scaling options and transparent pixel drawing may be specified by the user. The shape and line drawing methods (<B>drawLine</B>, <B>fillOval</B>) are simple and intuitive, yet powerful when used with extended pen and texture objects. The text drawing methods (<A HREF="FxGraphics.htm#com_0003000810010400">drawChars</A>, <A HREF="FxGraphics.htm#com_0003000810010f00">drawString</A>) draw graphical representations of String objects and character arrays. 
<P>The <B>FxGraphics</B> class supports the following drawing primitives: 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810010100">draw3DRect</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawArc 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawLine 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawOval 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawPolygon 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawRect 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">drawRoundRect
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810011600">fill3DRect</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">fillArc 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">fillOval 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">fillPolygon 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">fillRect
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">fillRoundRect 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810010400">drawChars</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810010f00">drawString</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810011200">drawStringFormatted</A>
</FONT></TD>
</TR>
</TABLE>
<P>The <B>FxGraphics</B> class supports the JDK 1.0.2 and JDK 1.1 clipping methods, as well as new methods for setting clip regions: 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810011500">excludeClip</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>clipRect</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810011800">getClipBounds</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810012000">setClip</A>(3 methods)
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxGraphics.htm#com_0003000810011f00">intersectClip</A>
</FONT></TD>
</TR>
</TABLE>
<PRE><FONT FACE="Courier" SIZE="2"><B>Graphics</B>
  |
  +--<B>FxGraphics</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003000810010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000810010100">draw3DRect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void draw3DRect(int x, int y, int width, int height, boolean raised);
</FONT></PRE>
<P><P>Draws a three-dimensional rectangle with a specified edge style. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the rectangle's upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the rectangle's upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>raised</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines either a raised or sunken edge. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010200">drawBezier</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void drawBezier(int xOrig, int yOrig, int values[],
        int nPoints);
</FONT></PRE>
<P><P>Draws a Bezier curve. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the origin for the curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the origin for the curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>values</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of (x,y) pairs of coordinates used to draw the curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>nPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of points in the curve. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010300">drawBorder</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean drawBorder(Rectangle rect, int edge, int flags);
</FONT></PRE>
<P><P>Draws the border of a three-dimensional rectangle. 

<P><B>Return Value:</B> <P>Returns true if successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>edge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The edge to use. This may be one of the following edge styles. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IFxGraphicsConstants.htm#com_0003000824010006">BDR_RAISEDOUTER</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IFxGraphicsConstants.htm#com_0003000824010005">BDR_RAISEDINNER</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IFxGraphicsConstants.htm#com_0003000824010009">BDR_SUNKENOUTER</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IFxGraphicsConstants.htm#com_0003000824010008">BDR_SUNKENINNER</A> </FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The specified border flags. For a complete listing of all border flags, see <A HREF="IFxGraphicsConstants.htm">IFxGraphicsConstants</A>. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010400">drawChars</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawChars(char data[], int offset, int length, int x, int y);
</FONT></PRE>
<P><P>Draws a given character array in the current graphics context. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>data</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of characters to be drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>length</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the array used. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the characters are drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the characters are drawn. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010500">drawChars</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawChars(char data[], int offset, int length, int x, int y,
        Rectangle optionRect, int options, int dx[], int dy[]);
</FONT></PRE>
<P><P>Draws a given character array with the given clipping rectangle or opaquing rectangle. Clipping or opaquing are only performed for the current operation. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>data</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of characters to be drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>length</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the array used. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the characters are drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the characters are drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>optionRect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The optional rectangle used for clipping or opaquing. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>options</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The options for this method. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination x coordinates. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination y coordinates. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010600">drawCharsWithoutFxFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected abstract void drawCharsWithoutFxFont(char data[], int offset, int
        length, int x, int y, Rectangle optionRect, int options, int dx[],
        int dy[]);
</FONT></PRE>
<P><P>Uses a native peer graphics object to draw the given character array using the supplied advancement lists. This method is used by an <A HREF="FxFont.htm">FxFont</A> object if it needs to be able to draw and then process. This method is implemented for the Microsoft Virtual Machine in the com.ms.awt.GraphicsX class. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>optionRect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The optional rectangle used for clipping and opaquing. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>options</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The options for this method. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination x-values. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination y-values. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="FxGraphics.htm">com.ms.fx.FxGraphics</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010700">drawEdge</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean drawEdge(Rectangle inRect, int edge, int flags);
</FONT></PRE>
<P><P>Draws the edges of a three-dimensional rectangle. 

<P><B>Return Value:</B> <P>Returns true if successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>inRect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>edge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The edge to use. For a complete listing of all edge styles, see <A HREF="IFxGraphicsConstants.htm">IFxGraphicsConstants</A>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The specified edge style. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010800">drawImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract boolean drawImage(Image img, int dx1, int dy1, int dx2, int
        dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer);
</FONT></PRE>
<P><P>Draws as much of the specified area in the image as is currently available. For more information on this abstract method, see the appropriate <B>Graphics</B>.<B>drawImage</B> method. 

<P><B>Return Value:</B> <P>Returns immediately in all cases, even if the entire area of the image has not yet been scaled, dithered, and converted for the output device. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>img</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Image</B> object to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the first corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the first corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the second corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the second corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sx1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the first corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sy1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the first corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sx2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the second corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sy2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the second corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>observer</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object to be notified as more of the image is scaled and converted. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010900">drawImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract boolean drawImage(Image img, int dx1, int dy1, int dx2, int
        dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor,
        ImageObserver observer);
</FONT></PRE>
<P><P>Draws as much of the specified area in the image as is currently available. Transparent pixels are drawn in the specified background color. For more information on this abstract method, see the appropriate <B>Graphics</B>.<B>drawImage</B> method. 

<P><B>Return Value:</B> <P>Returns immediately in all cases, even if the entire area of the image has not yet been scaled, dithered, and converted for the output device. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>img</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Image</B> object to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the first corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the first corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the second corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the second corner of the destination rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sx1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the first corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sy1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the first corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sx2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the second corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sy2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the second corner of the source rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bgcolor</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The background color to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>observer</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object to be notified as more of the image is scaled and converted. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010a00">drawOutlineChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawOutlineChar(int xOrig, int yOrig, GlyphOutline go);
</FONT></PRE>
<P><P>Draws an outline character. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the character. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the character. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>go</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="GlyphOutline.htm">GlyphOutline</A> to use. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010b00">drawOutlinePolygon</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void drawOutlinePolygon(int xOrig, int yOrig,
        OutlinePolygon op);
</FONT></PRE>
<P><P>Draws an outline polygon of a character. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The horizontal starting point for the shape. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The vertical starting point for the shape. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>op</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="OutlinePolygon.htm">OutlinePolygon</A> to draw. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="OutlinePolygon.htm">com.ms.fx.OutlinePolygon</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010c00">drawPixels</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void drawPixels(int pels[], int len);
</FONT></PRE>
<P><P>Draws a given list of pixels. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pels</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of pixels. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the array. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010d00">drawPolyline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void drawPolyline(int xPoints[], int yPoints[],
        int nPoints);
</FONT></PRE>
<P><P>Draws multiple lines at one time. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of x coordinates. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of y coordinates. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>nPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of points used to draw the lines. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010e00">drawScanLines</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void drawScanLines(boolean xChanging, int points[],
        int offset, int nPoints);
</FONT></PRE>
<P><P>Draws fast lines, either horizontally or vertically. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xChanging</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The direction that the line is drawn, either vertically or horizontally. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>points</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of points. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>nPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of points in the array. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810010f00">drawString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawString(String str, int x, int y, Rectangle optionRect,
        int options, int dx[], int dy[]);
</FONT></PRE>
<P><P>Draws the given string using the supplied advancement lists. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>optionRect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The optional rectangle used for clipping and opaquing. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>options</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The options for this method. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination x-values. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination y-values. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011000">drawString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawString(String str, int x, int y);
</FONT></PRE>
<P><P>Draws the given string. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the string is drawn. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011100">drawString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawString(String str, int x, int y, int a);
</FONT></PRE>
<P><P>Rotates and draws a string at the specified angle of rotation. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>a</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The angle at which the text is drawn. An angle of 0 degrees draws standard <A HREF="IFxTextConstants.htm#com_0003000828010015">tdLatinNormal</A> text normally, while an angle of 180 degrees would rotate and draw this same string upside down. The range for this field is 0 to 359. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011200">drawStringFormatted</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxFormattedText drawStringFormatted(String s, Rectangle r, int hta,
        int vta, int ww, boolean bordered, int tabOrigin, int tabs[],
        IFxShape outline, boolean mnem);
</FONT></PRE>
<P><P>Draws a formatted text string. 

<P><B>Return Value:</B> <P>Returns an <A HREF="FxFormattedText.htm">FxFormattedText</A> object, which is a formatted text string. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bounding rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hta</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The horizontal text alignment. This may be one of the following <B>hta</B> values. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaLeft</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaCenter</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaRight</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaStretch</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaJustified</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>htaScriptDefault</B> 
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vta</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The vertical text alignment. This may be one of the following <B>vta</B> values. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaTop</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaCenter</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaBaseline</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaBottom</B> 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaStretch</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>vtaScriptDefault</B> 
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ww</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A word wrap value. This may be one of the following word wrap values. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwCleanEdges</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwKeepWordIntact</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwNone</B>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwVirtualRectEnd</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwVirtualRectSide</B> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wwWrap</B>
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bordered</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines whether the string is bordered. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tabOrigin</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set tabs are relative to this position in the text string. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tabs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The tab stops. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>outline</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The outline for the formatted text. (The value may be null.) 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>mnem</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this value to true if mnemonic drawing is used. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e020b00">getMnemonicDrawing</A>, <A HREF="FxFormattedText.htm#com_000300080e022600">setMnemonicDrawing</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011300">drawStringWithoutFxFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected abstract void drawStringWithoutFxFont(String str,int x, int y,
        Rectangle optionRect, int options, int[] dx,int[] dy);
</FONT></PRE>
<P><P>Uses a native peer graphics object to draw the given string using the supplied advancement lists. This method is implemented for the Microsoft Virtual Machine in the com.ms.awt.GraphicsX class. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to draw. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the point where the string is drawn. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>optionRect</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The optional rectangle used for clipping and opaquing. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>options</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The options for this method. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination x-values. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of destination y-values. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> com.ms.awt.GraphicsX
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011400">drawT2Curve</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void drawT2Curve(FloatPoint pta, FloatPoint ptb, FloatPoint ptc, int
        xOrig, int yOrig);
</FONT></PRE>
<P><P>Draws a true type (T2, TT) curve, which is a three-point Bezier curve that uses TrueType fonts, for part of a glyph outline. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pta</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Point a on the T2 curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ptb</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Point b on the T2 curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ptc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Point c on the T2 curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the origin for the curve. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yOrig</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the origin for the curve. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="GlyphOutline.htm">com.ms.fx.GlyphOutline</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011500">excludeClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void excludeClip(int x, int y, int w, int h);
</FONT></PRE>
<P><P>Excludes the clipping area from the specified rectangle. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left x coordinate of the rectangle to exclude from the clipping area. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left y coordinate of the rectangle to exclude from the clipping area. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>w</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011600">fill3DRect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void fill3DRect(int x, int y, int width, int height, boolean raised);
</FONT></PRE>
<P><P>Draws a filled three-dimensional rectangle with the specified edge style and current color. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the rectangle upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the rectangle upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>raised</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines either a raised or sunken edge. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011700">getClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Shape getClip();
</FONT></PRE>
<P><P>Retrieves the current clipping area. 

<P><B>Return Value:</B> <P>Returns a <B>Shape</B> that defines the clipping area. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011800">getClipBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract Rectangle getClipBounds();
</FONT></PRE>
<P><P>Retrieves the bounds of the current clipping area. 

<P><B>Return Value:</B> <P>Returns a <B>Rectangle</B> describing the current clipping area. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011900">getClipRegion</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract Region getClipRegion();
</FONT></PRE>
<P><P>Retrieves the clipping area as a <A HREF="Region.htm">Region</A>. 

<P><B>Return Value:</B> <P>Returns the region that defines the clipping area. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011a00">getExtendedGraphics</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static FxGraphics getExtendedGraphics(Graphics g);
</FONT></PRE>
<P><P>Retrieves an extended graphics object based on a java.awt.<B>Graphics</B> object. This allows the extended object to be used with any set of class libraries. 

<P><B>Return Value:</B> <P>Returns an extended graphics object. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A base graphics object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011b00">getExtendedGraphics</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static FxGraphics getExtendedGraphics(Component c, Image img);
</FONT></PRE>
<P><P>Retrieves an extended graphics object, using a <B>Component</B> and an optional image as a base. This method enables the extended objects to be used with any set of class libraries. 

<P><B>Return Value:</B> <P>Returns an extended graphics object. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component that the graphics object is based on. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>img</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image that the graphics object is based on. The parameter value may be null, and if so, an image is created based on the <B>Component</B> <I>c</I>. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011c00">getGlyphOutline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract GlyphOutline getGlyphOutline(char ch);
</FONT></PRE>
<P><P>Retrieves the outline of the character in the currently selected font. 

<P><B>Return Value:</B> <P>Returns an <A HREF="OutlinePolygon.htm">OutlinePolygon</A> object. If however, the font is not an outline font, null is returned. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ch</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character outline that is requested. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011d00">getTextBackgroundColor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Color getTextBackgroundColor();
</FONT></PRE>
<P><P>Retrieves the text background color. 
<P><B>Return Value:</B> <P>Returns the background color. If no background color is currently set, null is returned. 

<P><B>Remarks:</B> <P>This method is used for opaquing text.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011e00">getTranslation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract Point getTranslation();
</FONT></PRE>
<P><P>Retrieves the origin <B>Point</B> used in a <A HREF="IFxShape.htm">translate</A> operation on a graphics context after the translation is complete. 

<P><B>Return Value:</B> <P>Returns the origin for the translation. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810011f00">intersectClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void intersectClip(int x, int y, int w, int h);
</FONT></PRE>
<P><P>Sets the current clipping area to the intersection of the current clipping area and the given rectangle. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left x coordinate of the rectangle that specifies the area that may overlap the current clipping area. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left y coordinate of the rectangle that specifies the area that may overlap the current clipping area. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>w</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012000">setClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void setClip(Region r);
</FONT></PRE>
<P><P>Sets the clipping area to the specified region. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="Region.htm">Region</A> to set the clipping area to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012100">setClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void setClip(int x, int y, int width, int height);
</FONT></PRE>
<P><P>Sets the clipping area to the specified rectangle. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the upper-left corner of the clipping rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the upper-left corner of the clipping rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the clipping rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the clipping rectangle (in pixels). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012200">setClip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void setClip(Shape clip);
</FONT></PRE>
<P><P>Sets the clipping area to the specified <B>Shape</B>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>clip</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The shape of the clipping area. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012300">setColor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public abstract void setColor( FxColor c );
</FONT></PRE>
<P><P>Sets the current graphics context's color for drawing operations. This method is included for JDK 1.0.2 compatibility. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxColor.htm">FxColor</A> that is used in drawing operations. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012400">setTextBackgroundColor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTextBackgroundColor( FxColor c);
</FONT></PRE>
<P><P>Sets the text background color. This method is included for JDK 1.0.2 compatibility. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The color to set the background to. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is used for opaquing text.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000810012500">setTextBackgroundColor</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTextBackgroundColor( Color c);
</FONT></PRE>
<P><P>Sets the text background color. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The color to set the background to. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is used for opaquing text.
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

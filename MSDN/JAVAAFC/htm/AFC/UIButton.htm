<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class UIButton</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIButton.htm#com_0003001138010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIButton.htm#com_0003001138020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIButton.htm#com_0003001138030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="UIBorderLayout.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="UIButtonBar.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class UIButton</H2>
<PRE><FONT FACE="Courier" SIZE="2">public abstract class UIButton extends <A HREF="UISingleContainer.htm">UISingleContainer</A>
{
  // Fields
  public static final int <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A>;
  public static final int <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>;

  // Constructors
  public <A HREF="UIButton.htm#com_0003001138010100">UIButton</A>();
  public <A HREF="UIButton.htm#com_0003001138010200">UIButton</A>(IUIComponent comp);
  public <A HREF="UIButton.htm#com_0003001138010300">UIButton</A>(IUIComponent comp, int style);

  // Methods
  public void <A HREF="UIButton.htm#com_0003001138020200">doDefaultAction</A>();
  public String <A HREF="UIButton.htm#com_0003001138020300">getDefaultAction</A>();
  public int <A HREF="UIButton.htm#com_0003001138020400">getStyle</A>();
  public boolean <A HREF="UIButton.htm#com_0003001138020500">keyDown</A>(Event e, int key);
  public boolean <A HREF="UIButton.htm#com_0003001138020600">keyUp</A>(Event e, int key);
  public boolean <A HREF="UIButton.htm#com_0003001138020700">mouseClicked</A>(Event e, int x, int y);
  public void <A HREF="UIButton.htm#com_0003001138020b00">setHot</A>(boolean on);
  public void <A HREF="UIButton.htm#com_0003001138020c00">setStyle</A>(int style);
}
</FONT></PRE>
<P>This class implements an abstract button control. The following diagram shows the classes that extend <B>UIButton</B>. 
<PRE><FONT FACE="Courier" SIZE="2">UIButton
|
+--<A HREF="UICheckButton.htm">UICheckButton</A>
|  |
|  +--<A HREF="UIRadioButton.htm">UIRadioButton</A>
|
+--<A HREF="UIPushButton.htm">UIPushButton</A>
   |
   +--<A HREF="UIExpandButton.htm">UIExpandButton</A>
   |
   +--<A HREF="UIRepeatButton.htm">UIRepeatButton</A>
</FONT></PRE>
<P>When constructing a button, you typically specify the button's content and style. The <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, and <A HREF="UIItem.htm">UIItem</A> classes provide several options for adding text and graphical images to your button. The following example demonstrates different ways to construct a button. 
<PRE><FONT FACE="Courier" SIZE="2">// Construct a push button that displays the String
// "Push Button". By default, this text is centered.
// Make the button raised and toggled.
UIPushButton p1 = 
   new UIPushButton("Push Button", 
                    UIPushButton.RAISED | UIButton.TOGGLE);

// Construct a check box button that displays the text
// stored in a UIText object. Left-align the text and
// make the button tritoggled. 
UICheckButton c1 = 
   new UICheckButton(new UIText("Checkbox", UIStatic.LEFT), 
                     UIButton.TRITOGGLE); 

// Construct a repeating push button that displays the graphical
// image stored in the variable myImage. Left-align the image.
UIRepeatButton r1 = 
      new UIRepeatButton(new UIGraphic(myImage, UIStatic.LEFT));

// Construct a radio button that displays both the graphical 
// image stored in the variable myImage and the text 
// "Radio Button." Put the image above the text.
UIRadioButton r2 = 
   new UIRadioButton(new UIItem(myImage, "Radio Button", 
                                0, UIItem.ABOVE));

// Add each button to the container.
add(p1);
add(c1);
add(r1);
add(r2);
</FONT></PRE>
<P><B>UIButton</B> inherits the <B>setName</B> method to change the text displayed on a button after it is created. The <B>getName</B> method allows you to retrieve the current text. The following example shows how to use these two methods. 
<PRE><FONT FACE="Courier" SIZE="2">// Define two UIPushButton variables.
UIPushButton p1, p2;


// Construct p1 and p2. p1 displays only text, while
// p2 displays a graphical image and text.
p1 = new UIPushButton("p1 text");
p2 = new UIPushButton(new UIItem(myImage, "p2 text")); 
add(p1);
add(p2);

// Now replace the text displayed from p2 with the text from p1. 
String s = p1.getName();  
p2.setName(s);  // p2 now displays a graphical image and
                // the text from p1.
</FONT></PRE>
<P><B>Note</B>  When you construct a button with a <B>String</B>, the button is automatically hot-tracked. To override this default, use a <A HREF="UIText.htm">UIText</A> object instead of a <B>String</B>, as shown in the following example. 
<PRE><FONT FACE="Courier" SIZE="2">UIPushButton p1, p2, p3;

// Construct a button with a String. 
// By default, the button is hot-tracked.
p1 = new UIPushButton("Hot-tracked text");

// Construct a button with a UIText object. 
// By default, the button is not hot-tracked.
p2 = new UIPushButton(new UIText("Text not hot-tracked"));

// To create a hot-tracked button using UIText, 
// specify the UIStatic.HOTTRACK flag.
p3 = new UIPushButton(new UIText("Hot-tracked UIText", 
                                 UIStatic.HOTTRACK));
add(p1);
add(p2);
add(p3); 
</FONT></PRE>
<P>For more information about hot-tracking, see the <A HREF="UIText.htm">UIText</A> overview. 
<P><B>Note</B>  The hot-track color is the same color as the button text color. As a result, hot-tracking does not appear to be functional. 
<P>Typically, when a <B>UIButton</B> object is pressed and released, an action event is generated. (With <A HREF="UIRepeatButton.htm">UIRepeatButton</A> objects, action events are continually generated while the button remains pressed.) The following example shows how to use the <B>action</B> method to trap these events. 
<PRE><FONT FACE="Courier" SIZE="2">public boolean action(Event e, Object o)
{
  if (e.target == c)  // c is a UICheckButton object.
  {
     // isChecked returns true if c is checked, 
     // false if c is unchecked.
     boolean enabled = c.isChecked();

     // p1 and p2 are UIPushButton objects that 
     // will be enabled if c is checked; otherwise, 
     // they will be disabled.
     p1.setEnabled(enabled);
     p2.setEnabled(enabled);
     return true;
  }
  return false;
}
</FONT></PRE>
<P>In both <A HREF="UIRadioButton.htm">UIRadioButton</A> and <A HREF="UICheckButton.htm">UICheckButton</A> objects, the behavior of the <B>action</B> method is inconsistent with that of AWT components in certain cases. The inconsistency is in the way the states of the button object are retrieved. 
<P>For example, if you create a menu with a <A HREF="UIMenuButton.htm">UIMenuButton</A>, add a <A HREF="UIRadioButton.htm">UIRadioButton</A> to it as a <A HREF="UIMenuItem.htm">UIMenuItem</A>, the <B>action</B> method returns different values under AFC and AWT. 
<PRE><FONT FACE="Courier" SIZE="2">
//Add a radio button as a menu item.
UIMenuItem uimi = new UIMenuItem(new UIRadioButton("button as menu item"));
</FONT></PRE>
<P>The <B>action</B> method returns the following values when AFC is used. 
<DL>
<DT>Event.target 
 </DT><DD>The name of the menu button. 
</DD><DT>Event.arg 
 </DT><DD>The UIMenuItem (in this case, the name of the UIRadioButton). 
</DD><DT>Object parameter
 </DT><DD>The next state of the UIRadioButton.
</DD></DL>
<P>In comparison, the <B>action</B> method returns the following under AWT. 
<DL>
<DT>Event.target 
 </DT><DD>The name of the menu button. 
</DD><DT>Event.arg 
 </DT><DD>The next state of the UIRadioButton. 
</DD><DT>Object parameter
 </DT><DD>The next state of the UIRadioButton.
</DD></DL>
<P>You must query the button to retrieve states when using AFC, if you are currently using the <B>action</B> method to retrieve the states of buttons in your Java code. 

<PRE><FONT FACE="Courier" SIZE="2"><A HREF="UIComponent.htm">UIComponent</A>
  |
  +--<A HREF="UIContainer.htm">UIContainer</A>
    |
    +--<A HREF="UIStateContainer.htm">UIStateContainer</A>
      |
      +--<A HREF="UISingleContainer.htm">UISingleContainer</A>
        |
        +--<B>UIButton</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003001138010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001138010100">UIButton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIButton();
</FONT></PRE>
<P><P>Creates a button control with no content. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138010200">UIButton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIButton(IUIComponent comp);
</FONT></PRE>
<P><P>Creates a button control with the specified component. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be displayed within the button. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, a <A HREF="UIGraphic.htm">UIGraphic</A>, or a <A HREF="UIItem.htm">UIItem</A> object for the component. For examples of how to construct buttons, see the <A HREF="UIButton.htm">UIButton</A> overview. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138010300">UIButton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIButton(IUIComponent comp, int style);
</FONT></PRE>
<P><P>Creates a button control with the specified component and style. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be displayed within the button. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>style</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The style of the button. You can pass <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A> or <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>, or you can set any bit in the mask 0xFF000000. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, a <A HREF="UIGraphic.htm">UIGraphic</A>, or a <A HREF="UIItem.htm">UIItem</A> object for the component. For examples of how to construct buttons, see the <A HREF="UIButton.htm">UIButton</A> overview. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined style was specified. 


</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001138020000">Methods</A></H3>

<!--<H4 STYLE="color:#333366"><A NAME="com_0003001138020100">addActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addActionListener(IUIActionListener l);
</FONT></PRE>
<P><P>Adds the specified action listener. The listener receives all action events generated for the button. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020a00">removeActionListener</A>
</BLOCKQUOTE>-->

<H4 STYLE="color:#333366"><A NAME="com_0003001138020200">doDefaultAction</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void doDefaultAction();
</FONT></PRE>
<P><P>Performs the default action for the button. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The default action for a button is "Press." This method executes a button press by generating an action event. If the button's style is <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A> or <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>, the appropriate checked state (unchecked, checked, or indeterminate) is also set. 
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020300">getDefaultAction</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020300">getDefaultAction</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getDefaultAction();
</FONT></PRE>
<P><P>Retrieves the default action for the button. 

<P><B>Return Value:</B> <P>Returns the string "Press". 

<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020200">doDefaultAction</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020400">getStyle</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getStyle();
</FONT></PRE>
<P><P>Retrieves the button's current style settings. 

<P><B>Return Value:</B> <P>Returns an integer containing the current style settings. For a list of possible styles, see <A HREF="UIButton.htm#com_0003001138020c00">setStyle</A>. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020500">keyDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyDown(Event e, int key);
</FONT></PRE>
<P><P>Determines whether the SPACEBAR or the ENTER key is being pressed, and if so, sets the pressed state. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the button control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that has been pressed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called when the button has focus and a key is pressed. If the key being pressed is the SPACEBAR or the ENTER key, the button's pressed state is set. If the ESC key is being pressed, the button's pressed state is cleared. 
<P>For more information about states, see the <A HREF="UIStateContainer.htm">UIStateContainer</A> overview. 
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020600">keyUp</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020600">keyUp</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyUp(Event e, int key);
</FONT></PRE>
<P><P>Determines whether the SPACEBAR or the ENTER key is being released, and if so, generates an action event. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the button control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that has been released. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called when the button has focus and a key is released. If the key being released is the SPACEBAR or the ENTER key, an action event is generated, and, if the button's style is <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A> or <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>, the appropriate checked state (unchecked, checked, or indeterminate) is set. <B>keyUp</B> also clears the button's pressed state, which was previously set by <A HREF="UIButton.htm#com_0003001138020500">keyDown</A>. 
<P>For more information about states, see the <A HREF="UIStateContainer.htm">UIStateContainer</A> overview. 
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020500">keyDown</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020700">mouseClicked</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseClicked(Event e, int x, int y);
</FONT></PRE>
<P><P>Generates an action event for the button. 
<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the button control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called when the button control is clicked. If the control's style is <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A> or <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>, <B>mouseClicked</B> also sets the appropriate checked state (unchecked, checked, or indeterminate). 
</BLOCKQUOTE>

<!--<H4 STYLE="color:#333366"><A NAME="com_0003001138020800">processActionEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processActionEvent(UIActionEvent e);
</FONT></PRE>
<P><P>Processes action events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="UIButton.htm#com_0003001138020900">processEvent</A> and dispatches the event to a registered action listener. When overriding this method, call the super method <B>processActionEvent</B> to ensure that the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020100">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020900">processEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processEvent(UIEvent e);
</FONT></PRE>
<P><P>Processes the specified event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked if a listener has has been registered through a call to addXXXListener. Depending on the type of event, <B>processEvent</B> calls one of the following methods. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">action event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIButton.htm#com_0003001138020800">processActionEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">component event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>processComponentEvent</B> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">container event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022100">processContainerEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focus event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022300">processFocusEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">key event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022400">processKeyEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022500">processMouseEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse motion event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="UIStateContainer.htm#com_0003001177022600">processMouseMotionEvent</A> (inherited through <A HREF="UIStateContainer.htm">UIStateContainer</A>)
</FONT></TD>
</TR>
</TABLE>
<P>When overriding <B>processEvent</B>, call the super method <B>processEvent</B> to ensure the default event processing continues normally. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020a00">removeActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeActionListener(IUIActionListener l);
</FONT></PRE>
<P><P>Removes the specified action listener. The listener no longer receives the button's action events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020100">addActionListener</A>
</BLOCKQUOTE>-->

<H4 STYLE="color:#333366"><A NAME="com_0003001138020b00">setHot</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setHot(boolean on);
</FONT></PRE>
<P><P>Sets or clears the hot-tracked state of the button. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the hot-tracked state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For more information about states, see the <A HREF="UIStateContainer.htm">UIStateContainer</A> overview. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001138020c00">setStyle</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStyle(int style);
</FONT></PRE>
<P><P>Sets the button's current style. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>style</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The style of the button. You can pass <A HREF="UIButton.htm#com_0003001138030001">TOGGLE</A> or <A HREF="UIButton.htm#com_0003001138030002">TRITOGGLE</A>, or you can set any bit in the mask 0xFF000000. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined style was specified. 


<P><B>See Also:</B> <A HREF="UIButton.htm#com_0003001138020400">getStyle</A>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001138030000">Fields</A></H3><DL>
<DT><B><A NAME="com_0003001138030001">TOGGLE</A></B>
</DT><DD>Specifies that the button will automatically alternate between the unchecked and checked states whenever the button is pressed. 

</DD><DT><B><A NAME="com_0003001138030002">TRITOGGLE</A></B>
</DT><DD>Specifies that the button will automatically alternate between the unchecked, checked, and indeterminate states (in that order) whenever the button is pressed. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

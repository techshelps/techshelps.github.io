<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class AwtUITree</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="AwtUITree.htm#com_000300112f010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="AwtUITree.htm#com_000300112f020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="AwtUITextBeanInfo.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="AwtUITreeBeanInfo.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class AwtUITree</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class AwtUITree extends <A HREF="AwtUIControl.htm">AwtUIControl</A> implements 
            <A HREF="IAwtUIItemSelectable.htm">IAwtUIItemSelectable</A>
{
  // Constructors
  public <A HREF="AwtUITree.htm#com_000300112f010100">AwtUITree</A>();
  public <A HREF="AwtUITree.htm#com_000300112f010200">AwtUITree</A>(String s);
  public <A HREF="AwtUITree.htm#com_000300112f010300">AwtUITree</A>(Image i, String s);
  public <A HREF="AwtUITree.htm#com_000300112f010400">AwtUITree</A>(IUIComponent comp);
  public <A HREF="AwtUITree.htm#com_000300112f010500">AwtUITree</A>(IUIComponent comp, int indent);

  // Methods
  public Component <A HREF="AwtUITree.htm#com_000300112f020098">add</A>(Component comp);
  public Component <A HREF="AwtUITree.htm#com_000300112f020099">add</A>(Component comp, int pos);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020100">add</A>(String s);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020200">add</A>(String s, int pos);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020300">add</A>(Image i, String s);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020400">add</A>(Image i, String s, int pos);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020500">add</A>(IUIComponent comp);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f020600">add</A>(IUIComponent comp, int pos);
  public void <A HREF="AwtUITree.htm#com_000300112f020700">addActionListener</A>(ActionListener l);
  public void <A HREF="AwtUITree.htm#com_000300112f020800">addItemListener</A>(ItemListener l);
  public void <A HREF="AwtUITree.htm#com_000300112f020900">addSelectedIndex</A>(int index);
  public void <A HREF="AwtUITree.htm#com_000300112f020a00">addSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f020b00">addSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUITree.htm#com_000300112f020c00">addSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f020d00">addSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUITree.htm#com_000300112f020e00">addSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f020e00">addSelectedItem</A>(IUIComponent comp, boolean on);
  public void <A HREF="AwtUITree.htm#com_000300112f021000">addSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUITree.htm#com_000300112f021100">addSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021200">find</A>(String prefix, boolean fromFocus);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021300">find</A>(String prefix, IUIComponent compStart);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021400">find</A>(String prefix);
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021500">getBase</A>();
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021600">getExpander</A>();
  public int <A HREF="AwtUITree.htm#com_000300112f021700">getSelectedIndex</A>();
  public int[] <A HREF="AwtUITree.htm#com_000300112f021800">getSelectedIndices</A>();
  public IUIComponent <A HREF="AwtUITree.htm#com_000300112f021900">getSelectedItem</A>();
  public IUIComponent[] <A HREF="AwtUITree.htm#com_000300112f021a00">getSelectedItems</A>();
  public int <A HREF="AwtUITree.htm#com_000300112f021b00">getSelectionMode</A>();
  public boolean <A HREF="AwtUITree.htm#com_000300112f021c00">hasChildren</A>();
  public boolean <A HREF="AwtUITree.htm#com_000300112f021d00">isExpanded</A>();
  protected void <A HREF="AwtUITree.htm#com_000300112f021e00">processActionEvent</A>(ActionEvent e);
  protected void <A HREF="AwtUITree.htm#com_000300112f021f00">processHostEvent</A>(AWTEvent e);
  protected void <A HREF="AwtUITree.htm#com_000300112f022000">processItemEvent</A>(ItemEvent e);
  public void <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>(int index);
  public void <A HREF="AwtUITree.htm#com_000300112f022200">remove</A>(IUIComponent comp);
  public synchronized void <A HREF="AwtUITree.htm#com_000300112f022300">removeActionListener</A>(ActionListener l);
  public synchronized void <A HREF="AwtUITree.htm#com_000300112f022400">removeItemListener</A>(ItemListener l);
  public void <A HREF="AwtUITree.htm#com_000300112f022500">removeSelectedIndex</A>(int index);
  public void <A HREF="AwtUITree.htm#com_000300112f022600">removeSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f022700">removeSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUITree.htm#com_000300112f022700">removeSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUITree.htm#com_000300112f022900">removeSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f022a00">removeSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUITree.htm#com_000300112f022b00">removeSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f022c00">removeSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUITree.htm#com_000300112f022d00">removeSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f022e00">setExpanded</A>(boolean expanded);
  public void <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>(int index);
  public void <A HREF="AwtUITree.htm#com_000300112f023000">setSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f023100">setSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUITree.htm#com_000300112f023200">setSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUITree.htm#com_000300112f023400">setSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f023500">setSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUITree.htm#com_000300112f023600">setSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="AwtUITree.htm#com_000300112f023700">setSelectionMode</A>(int selMode);
}
</FONT></PRE>
<P>This class implements the functionality of a <A HREF="UITree.htm">UITree</A> object in an AWT-based control. An <B>AwtUITree</B> control is an <A HREF="AwtUIHost.htm">AwtUIHost</A> component whose associated root container holds a <B>UITree</B> object. By hosting this object, an <B>AwtUITree</B> control integrates AFC with AWT. Although an <B>AwtUITree</B> control is fully compatible with AWT, a <B>UITree</B> control is optimized for performance and size. 
<P><B>Note</B>  The hot-track color is the same color as the button text color. As a result, hot-tracking does not appear to be functional. 
<PRE><FONT FACE="Courier" SIZE="2"><B>Panel</B>
  |
  +--<A HREF="AwtUIHost.htm">AwtUIHost</A>
    |
    +--<A HREF="AwtUIControl.htm">AwtUIControl</A>
      |
      +--<B>AwtUITree</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_000300112f010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300112f010100">AwtUITree</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUITree();
</FONT></PRE>
<P><P>Creates an AWT-based tree control with no content. 
<P><B>Remarks:</B> <P>Call the <A HREF="AwtUITree.htm#com_000300112f020100">add</A> method to add child items to the tree control. To add an item to the root node itself, call <A HREF="AwtUIHost.htm#com_0003001115023900">setHeader</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>). For an example of calling <B>setHeader</B>, see the <A HREF="UITree.htm">UITree</A> overview. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f010200">AwtUITree</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUITree(String s);
</FONT></PRE>
<P><P>Creates an AWT-based tree control with the specified text. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be displayed by the node. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the tree node is hot-tracked. To create a node that is not hot-tracked, pass a <A HREF="UIText.htm">UIText</A> object instead of a <B>String</B>. For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P>To add child items to the tree control, call the <A HREF="AwtUITree.htm#com_000300112f020100">add</A> method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f010300">AwtUITree</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUITree(Image i, String s);
</FONT></PRE>
<P><P>Creates an AWT-based tree control with the specified image and text. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image to be displayed by the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be displayed by the node. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the tree node is hot-tracked. To create a node that is not hot-tracked, pass a <B>UIItem</B> object instead of an <B>Image</B> and <B>String</B>. For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P>To add child items to the tree control, call the <A HREF="AwtUITree.htm#com_000300112f020100">add</A> method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f010400">AwtUITree</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUITree(IUIComponent comp);
</FONT></PRE>
<P><P>Creates an AWT-based tree control with the specified component. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be displayed by the node. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. To add child items to the tree control, call the <A HREF="AwtUITree.htm#com_000300112f020100">add</A> method. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f010500">AwtUITree</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUITree(IUIComponent comp, int indent);
</FONT></PRE>
<P><P>Creates an AWT-based tree control with the specified component and indent. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be displayed by the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indent</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The indent (in pixels) to be used when laying out node children. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. To add child items to the tree control, call the <A HREF="AwtUITree.htm#com_000300112f020100">add</A> method. 
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300112f020000">Methods</A></H3>

<H4 STYLE="color:#333366"><A NAME="com_000300112f020098">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Component add(Component comp);
</FONT></PRE>
<P><P>Adds the specified component to the end of the control. The <B>Component</B> must be an instance of the <A HREF="AwtUIHost.htm">AwtUIHost</A> class.
<P><B>Return Value:</B> <P>Returns the component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. The newly-added child component is shown or hidden, according to the control's expanded state.
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_000300112f020099">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Component add(Component comp, int pos);
</FONT></PRE>
<P><P>Adds the specified component to the tree control at the specified position. The <B>Component</B> must be an instance of the <A HREF="AwtUIHost.htm">AwtUIHost</A> class.
<P><B>Return Value:</B> <P>Returns the component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be added. 
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the item. If the node itself displays a content component (a header), this item is at index 0 and the first child begins at index 1. To add a child item at the end of the tree control, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. The newly-added child component is shown or hidden, according to the control's expanded state.
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>


<H4 STYLE="color:#333366"><A NAME="com_000300112f020100">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(String s);
</FONT></PRE>
<P><P>Adds the specified text to the end of the control. 
<P><B>Return Value:</B> <P>Returns the text component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The newly-added child component is shown or hidden, according to the tree control's expanded state. By default, the item is hot-tracked. To add an item that is not hot-tracked, pass a <A HREF="UIText.htm">UIText</A> object instead of a <B>String</B>. For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020200">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(String s, int pos);
</FONT></PRE>
<P><P>Adds the specified text to the control at the specified position. 
<P><B>Return Value:</B> <P>Returns the text component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the text. If the root node itself displays an item (a header component), this item is at index 0, and the first child begins at index 1. To add a child item at the end of the tree control, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The newly-added child component is shown or hidden, according to the tree control's expanded state. By default, the item is hot-tracked. To add an item that is not hot-tracked, pass a <A HREF="UIText.htm">UIText</A> object instead of a <B>String</B>. For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>Note</B>  If the tree node has a header, adding an item at index 0 will insert the item as the new header and shift all other components by one index position. As a result, the previous header becomes the first child item. To simply replace the header without shifting its position, call the <A HREF="AwtUIHost.htm#com_0003001115023900">setHeader</A> method (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>). For an example of calling <B>setHeader</B>, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020300">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(Image i, String s);
</FONT></PRE>
<P><P>Adds the specified image and text to the end of the control. 
<P><B>Return Value:</B> <P>Returns the item component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The newly added child component is shown or hidden, according to the tree control's expanded state. By default, the item is hot-tracked. To add an item that is not hot-tracked, pass a <A HREF="UIItem.htm">UIItem</A> object instead of an <B>Image</B> and <B>String</B>. 
<P>For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020400">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(Image i, String s, int pos);
</FONT></PRE>
<P><P>Adds the specified image and text to the control at the specified position. 
<P><B>Return Value:</B> <P>Returns the item component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the text and image. If the root node itself displays an item (a header component), this item is at index 0, and the first child begins at index 1. To add a child item at the end of the tree control, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The newly added child component is shown or hidden, according to the tree control's expanded state. By default, the item is hot-tracked. To add an item that is not hot-tracked, pass a <A HREF="UIItem.htm">UIItem</A> object instead of an <B>Image</B> and <B>String</B>. For more information about hot-tracking, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>Note</B>  If the tree node has a header, adding an item at index 0 will insert the item as the new header and shift all other components by one index position. As a result, the previous header becomes the first child item. To simply replace the header without shifting its position, call the <A HREF="AwtUIHost.htm#com_0003001115023900">setHeader</A> method (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>). For an example of calling <B>setHeader</B>, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020500">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(IUIComponent comp);
</FONT></PRE>
<P><P>Adds the specified component to the end of the control. 
<P><B>Return Value:</B> <P>Returns the component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. The newly added child component is shown or hidden, according to the control's expanded state. 
<P><B>Overrides:</B> <P><A HREF="AwtUIControl.htm#com_000300110d020100">add(IUIComponent)</A> in <A HREF="AwtUIControl.htm">AwtUIControl</A>.

<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020600">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(IUIComponent comp, int pos);
</FONT></PRE>
<P><P>Adds the specified component to the tree control at the specified position. 
<P><B>Return Value:</B> <P>Returns the component that was added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the component. If the root node itself displays an item (a header component), this item is at index 0, and the first child begins at index 1. To add a child item at the end of the tree control, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Typically, you'll pass a <A HREF="UIText.htm">UIText</A>, <A HREF="UIGraphic.htm">UIGraphic</A>, or <A HREF="UIItem.htm">UIItem</A> object for the component. The newly added child component is shown or hidden, according to the tree control's expanded state. 
<P><B>Note</B>  If the tree node has a header, adding an item at index 0 will insert the item as the new header and shift all other components by one index position. As a result, the previous header becomes the first child item. To simply replace the header without shifting its position, call the <A HREF="AwtUIHost.htm#com_0003001115023900">setHeader</A> method (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>). For an example of calling <B>setHeader</B>, see the <A HREF="UITree.htm">UITree</A> overview. 
<P><B>Overrides:</B> <P><A HREF="AwtUIControl.htm#com_000300110d020200">add(IUIComponent,int)</A> in <A HREF="AwtUIControl.htm">AwtUIControl</A>.

<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022100">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020700">addActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addActionListener(ActionListener l);
</FONT></PRE>
<P><P>Adds the specified action listener. The listener receives all action events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022300">removeActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020800">addItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addItemListener(ItemListener l);
</FONT></PRE>
<P><P>Adds the specified item listener. The listener receives all item events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022400">removeItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020900">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020a00">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020b00">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020c00">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020d00">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020e00">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f020f00">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp, boolean on);
</FONT></PRE>
<P><P>Sets or clears the selected state of the specified component and sets the control's selection to this component. A list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected or de-selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the item's selected state is set; otherwise, it is cleared. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f020900">addSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f021900">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021000">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021100">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. Currently not used. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021200">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, boolean fromFocus);
</FONT></PRE>
<P><P>Searches the control for an item whose name begins with the specified prefix. The search begins from either the current focus, or the first item in the selector. 

<P><B>Return Value:</B> <P>Returns the first matching component, if a match is found; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fromFocus</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the search begins from the current focus. Otherwise, the search begins with the first item in the selector. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021300">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, IUIComponent compStart);
</FONT></PRE>
<P><P>Searches the control for an item whose name begins with the specified prefix. The search begins at <I>compStart</I>. 

<P><B>Return Value:</B> <P>Returns the first matching component, if a match is found; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>compStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component at which the search begins. If it is null, the search will begin at the 1st item (according to navigate). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021400">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix);
</FONT></PRE>
<P><P>Searches the control for an item whose name begins with the specified prefix. The search starts at the first item in the control. 

<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null if a component is not found. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021500">getBase</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getBase();
</FONT></PRE>
<P><P>Retrieves the UI component that the control is based on. 
<P><B>Return Value:</B> <P>Returns the <A HREF="UITree.htm">UITree</A> object associated with the control. 

<P><B>Remarks:</B> <P>When the AWT-based control is first created, it is associated with a <A HREF="UITree.htm">UITree</A> object. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021600">getExpander</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getExpander();
</FONT></PRE>
<P><P>Retrieves the tree control's Expand button, which indicates whether the node is expanded or collapsed. 
<P><B>Return Value:</B> <P>Returns the component currently being used as the expand button. 

<P><B>Remarks:</B> <P>By default, the control's associated <A HREF="UITree.htm">UITree</A> object uses a <A HREF="UIExpandButton.htm">UIExpandButton</A> component for the expand button. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021700">getSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectedIndex();
</FONT></PRE>
<P><P>Retrieves the zero-based index of the currently selected item. 

<P><B>Return Value:</B> <P>Returns the index of the selected item or -1 if an item is not selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. 

<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021900">getSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021800">getSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int[] getSelectedIndices();
</FONT></PRE>
<P><P>Retrieves the zero-based indices of all currently selected items. 
<P><B>Return Value:</B> <P>Returns an array of the indices of the selected items or null if an item is not selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. 

<P><B>Remarks:</B> <P>Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, this method returns only one item in the array. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021700">getSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f021a00">getSelectedItems</A>, <A HREF="AwtUITree.htm#com_000300112f023100">setSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021900">getSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getSelectedItem();
</FONT></PRE>
<P><P>Retrieves the currently selected item. 

<P><B>Return Value:</B> <P>Returns the selected component; otherwise, returns null if a component is not selected. 

<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021700">getSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021a00">getSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent[] getSelectedItems();
</FONT></PRE>
<P><P>Retrieves all currently selected items. 
<P><B>Return Value:</B> <P>Returns an array of the selected components; otherwise, returns null if a component is not selected. 

<P><B>Remarks:</B> <P>Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, this method returns one item in the array. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021800">getSelectedIndices</A>, <A HREF="AwtUITree.htm#com_000300112f023500">setSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021b00">getSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectionMode();
</FONT></PRE>
<P><P>Retrieves the selection mode of the control. 

<P><B>Return Value:</B> <P>Returns the control's selection mode. For a list of valid return modes, see the <A HREF="AwtUITree.htm#com_000300112f023700">setSelectionMode</A> method. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021c00">hasChildren</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean hasChildren();
</FONT></PRE>
<P><P>Determines whether the tree control has child items. 

<P><B>Return Value:</B> <P>Returns true if the node has child items; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021d00">isExpanded</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isExpanded();
</FONT></PRE>
<P><P>Determines whether the tree control is expanded. 

<P><B>Return Value:</B> <P>Returns true if the node is expanded; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022e00">setExpanded</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021e00">processActionEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processActionEvent(ActionEvent e);
</FONT></PRE>
<P><P>Processes action events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="AwtUITree.htm#com_000300112f021f00">processHostEvent</A> and dispatches the event to a registered action listener. When overriding this method, call the super method <B>processActionEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f020700">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f021f00">processHostEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processHostEvent(AWTEvent e);
</FONT></PRE>
<P><P>Processes the specified event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked if a listener has has been registered through a call to addXXXListener. Depending on the type of event, <B>processHostEvent</B> calls one of the following methods. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">item event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUITree.htm#com_000300112f022000">processItemEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">action event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUITree.htm#com_000300112f021e00">processActionEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">component event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022100">processComponentEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">container event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022200">processContainerEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focus event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022400">processFocusEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">key event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022600">processKeyEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022700">processMouseEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse motion event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022800">processMouseMotionEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
</TABLE>
<P>When overriding <B>processHostEvent</B>, call the super method <B>processHostEvent</B> to ensure the default event processing continues normally. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022000">processItemEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processItemEvent(ItemEvent e);
</FONT></PRE>
<P><P>Processes item events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="AwtUITree.htm#com_000300112f021f00">processHostEvent</A> and dispatches the event to a registered item listener. When overriding this method, call the super method <B>processItemEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f020800">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022100">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(int index);
</FONT></PRE>
<P><P>Removes the component at the specified index. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the component to be removed. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For an example of calling <B>remove</B>, see <A HREF="UISelector.htm#com_000300116f022000">UISelector.remove</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022200">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(IUIComponent comp);
</FONT></PRE>
<P><P>Removes the specified component from the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For an example of calling <B>remove</B>, see <A HREF="UISelector.htm#com_000300116f022000">UISelector.remove</A>. 
<P><B>Overrides:</B> <P><A HREF="AwtUIControl.htm#com_000300110d021800">remove(IUIComponent)</A> in <A HREF="AwtUIControl.htm">AwtUIControl</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022300">removeActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeActionListener(ActionListener l);
</FONT></PRE>
<P><P>Removes the specified action listener. The listener no longer receives the control's action events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f020700">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022400">removeItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeItemListener(ItemListener l);
</FONT></PRE>
<P><P>Removes the specified item listener. The listener no longer receives the control's item events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f020800">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022500">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022600">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022700">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022800">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022900">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022a00">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022b00">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022c00">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022d00">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022e00">setExpanded</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setExpanded(boolean expanded);
</FONT></PRE>
<P><P>Expands or collapses the tree control to show or hide the node's children. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expanded</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the node will be expanded; otherwise, the node will be collapsed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021d00">isExpanded</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f022f00">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index. By default, a list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f020900">addSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f021700">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023000">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f020900">addSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f021700">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023100">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, the array should contain only one index. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f023500">setSelectedItems</A>, <A HREF="AwtUITree.htm#com_000300112f021800">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023200">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. If the root node of the tree displays an item, this item is at index 0, and the first child item is at index 1. Otherwise, the first child begins at index 0. Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, the array should contain only one index. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f023500">setSelectedItems</A>, <A HREF="AwtUITree.htm#com_000300112f021800">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023300">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Sets the selection to the specified component. A list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f020d00">addSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f021900">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023400">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified component and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f022f00">setSelectedIndex</A>, <A HREF="AwtUITree.htm#com_000300112f020d00">addSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f021900">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023500">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Sets the selection to the specified components. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, the array should contain only one item. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f023300">setSelectedItem</A>, <A HREF="AwtUITree.htm#com_000300112f023100">setSelectedIndices</A>, <A HREF="AwtUITree.htm#com_000300112f021a00">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023600">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified components and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. Because the control's selection mode can only be <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, the array should contain only one item. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f023100">setSelectedIndices</A>, <A HREF="AwtUITree.htm#com_000300112f021a00">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300112f023700">setSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectionMode(int selMode);
</FONT></PRE>
<P><P>Sets the selection mode of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode for the control. The following selection modes are valid. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="IUISelector.htm#com_0003001195020003">NOSELECT</A>
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode was specified. 


<P><B>See Also:</B> <A HREF="AwtUITree.htm#com_000300112f021b00">getSelectionMode</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

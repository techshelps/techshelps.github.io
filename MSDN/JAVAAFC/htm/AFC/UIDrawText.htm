<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class UIDrawText</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIDrawText.htm#com_0003001147010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="UIDrawText.htm#com_0003001147020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="UIDragDrop.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="UIEdit.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class UIDrawText</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class UIDrawText extends <A HREF="UICanvas.htm">UICanvas</A> implements 
            <A HREF="IFxTextConstants.htm">IFxTextConstants</A>, <A HREF="IFxGraphicsConstants.htm">IFxGraphicsConstants</A>
{
  // Constructors
  public <A HREF="UIDrawText.htm#com_0003001147010100">UIDrawText</A>();
  public <A HREF="UIDrawText.htm#com_0003001147010200">UIDrawText</A>(String newBuff);
  public <A HREF="UIDrawText.htm#com_0003001147010300">UIDrawText</A>(char newBuff[]);

  // Methods
  public void <A HREF="UIDrawText.htm#com_0003001147020100">addNotify</A>();
  public void <A HREF="UIDrawText.htm#com_0003001147020200">ensureNotDirty</A>(FxGraphics g);
  public boolean <A HREF="UIDrawText.htm#com_0003001147020300">ensureVisible</A>(int idx);
  public boolean <A HREF="UIDrawText.htm#com_0003001147020400">ensureVisible</A>(Point p);
  public boolean <A HREF="UIDrawText.htm#com_0003001147020500">ensureVisible</A>(Rectangle r);
  protected int <A HREF="UIDrawText.htm#com_0003001147020600">eoln</A>(int idx);
  public int <A HREF="UIDrawText.htm#com_0003001147020700">getCharFromScreen</A>(int scrnX, int scrnY);
  public int <A HREF="UIDrawText.htm#com_0003001147020800">getCharFromScreen</A>(Point scrnPos);
  public Point <A HREF="UIDrawText.htm#com_0003001147020900">getCharLocation</A>(int iPos);
  public int <A HREF="UIDrawText.htm#com_0003001147020a00">getCurrIndex</A>();
  public int <A HREF="UIDrawText.htm#com_0003001147020b00">getHorizAlign</A>();
  public int <A HREF="UIDrawText.htm#com_0003001147020c00">getIndexHeight</A>(int index);
  public int <A HREF="UIDrawText.htm#com_0003001147020d00">getLength</A>();
  public Dimension <A HREF="UIDrawText.htm#com_0003001147020e00">getMinimumSize</A>();
  public IFxShape <A HREF="UIDrawText.htm#com_0003001147020f00">getOutline</A>();
  public char <A HREF="UIDrawText.htm#com_0003001147021000">getPasswordChar</A>();
  public Dimension <A HREF="UIDrawText.htm#com_0003001147021100">getPreferredSize</A>();
  public Dimension <A HREF="UIDrawText.htm#com_0003001147021200">getPreferredSize</A>(Dimension size);
  public int <A HREF="UIDrawText.htm#com_0003001147021300">getRoleCode</A>();
  public String <A HREF="UIDrawText.htm#com_0003001147021400">getSelectedText</A>();
  public int <A HREF="UIDrawText.htm#com_0003001147021500">getSelectionEnd</A>();
  public int <A HREF="UIDrawText.htm#com_0003001147021600">getSelectionStart</A>();
  public String <A HREF="UIDrawText.htm#com_0003001147021700">getValueText</A>();
  public int <A HREF="UIDrawText.htm#com_0003001147021800">getVertAlign</A>();
  protected int <A HREF="UIDrawText.htm#com_0003001147021900">getWordEdge</A>(int iPos, boolean pleaseMoveLeft,
        boolean givePrevious);
  public int <A HREF="UIDrawText.htm#com_0003001147021a00">getWordWrap</A>();
  public boolean <A HREF="UIDrawText.htm#com_0003001147021b00">gotFocus</A>(Event evt, Object what);
  public void <A HREF="UIDrawText.htm#com_0003001147021c00">hideCaret</A>();
  public boolean <A HREF="UIDrawText.htm#com_isAlwaysShowSelection">isAlwaysShowSelection</A>();
  public boolean <A HREF="UIDrawText.htm#com_0003001147021d00">isAutoResizable</A>();
  public boolean <A HREF="UIDrawText.htm#com_0003001147021e00">isBordered</A>();
  public boolean <A HREF="UIDrawText.htm#com_0003001147021f00">isSingleLine</A>();
  public boolean <A HREF="UIDrawText.htm#com_0003001147022000">keyDown</A>(Event evt, int key);
  public boolean <A HREF="UIDrawText.htm#com_0003001147022100">lostFocus</A>(Event evt, Object what);
  public boolean <A HREF="UIDrawText.htm#com_0003001147022200">mouseDown</A>(Event evt, int x, int y);
  public boolean <A HREF="UIDrawText.htm#com_0003001147022300">mouseDrag</A>(Event evt, int x, int y);
  public void <A HREF="UIDrawText.htm#com_0003001147022400">paint</A>(FxGraphics g);
  protected synchronized void <A HREF="UIDrawText.htm#com_0003001147022500">paint</A>(FxGraphics g, int startPos, int
        endPos, boolean wantOpaque);
  protected void <A HREF="UIDrawText.htm#com_0003001147022600">processKeyEvent</A>(KeyEvent ke);
  public void <A HREF="UIDrawText.htm#com_0003001147022700">selectAll</A>();
  public void <A HREF="UIDrawText.htm#com_setAlwaysShowSelection">setAlwaysShowSelection</A>(boolean on);
  public void <A HREF="UIDrawText.htm#com_0003001147022800">setAutoResizable</A>(boolean auto);
  public void <A HREF="UIDrawText.htm#com_0003001147022900">setBackground</A>(Color c);
  public void <A HREF="UIDrawText.htm#com_0003001147022a00">setBordered</A>(boolean b);
  public void <A HREF="UIDrawText.htm#com_0003001147022b00">setBounds</A>(int x, int y, int width, int height);
  public void <A HREF="UIDrawText.htm#com_0003001147022c00">setCurrIndex</A>(int idx, boolean showCaretNow);
  public void <A HREF="UIDrawText.htm#com_0003001147022d00">setCurrIndex</A>(int idx);
  public void <A HREF="UIDrawText.htm#com_0003001147022e00">setFont</A>(Font f);
  public void <A HREF="UIDrawText.htm#com_0003001147022f00">setForeground</A>(Color c);
  public void <A HREF="UIDrawText.htm#com_0003001147023000">setHorizAlign</A>(int h);
  public void <A HREF="UIDrawText.htm#com_0003001147023100">setInputMethod</A>( InputMethodListener ime );
  public void <A HREF="UIDrawText.htm#com_0003001147023200">setLocation</A>(int x, int y);
  public void <A HREF="UIDrawText.htm#com_0003001147023300">setOutline</A>(IFxShape outline);
  public void <A HREF="UIDrawText.htm#com_0003001147023400">setPasswordChar</A>(char c);
  public void <A HREF="UIDrawText.htm#com_0003001147023500">setRefresh</A>(boolean r);
  public void <A HREF="UIDrawText.htm#com_0003001147023600">setSelection</A>(int selStart, int selEnd);
  public void <A HREF="UIDrawText.htm#com_0003001147023700">setSingleLine</A>(boolean sl);
  public void <A HREF="UIDrawText.htm#com_0003001147023800">setSize</A>(int width, int height);
  public void <A HREF="UIDrawText.htm#com_0003001147023900">setTabs</A>(int tabs[]);
  public void <A HREF="UIDrawText.htm#com_0003001147023a00">setTextCallback</A>(IFxTextCallback tcb);
  public void <A HREF="UIDrawText.htm#com_0003001147023b00">setValueText</A>(char newBuff[], int offset, int len);
  public void <A HREF="UIDrawText.htm#com_0003001147023c00">setValueText</A>(String value);
  public void <A HREF="UIDrawText.htm#com_0003001147023d00">setVertAlign</A>(int v);
  public void <A HREF="UIDrawText.htm#com_0003001147023e00">setWordWrap</A>(int ww);
  public void <A HREF="UIDrawText.htm#com_0003001147023f00">showCaret</A>();
  public synchronized void <A HREF="UIDrawText.htm#com_0003001147024000">showCaret</A>(int iPos);
  public void <A HREF="UIDrawText.htm#com_0003001147024100">update</A>(FxGraphics g);
}
</FONT></PRE>
<P>This class manages the display of read-only text. Although the text cannot be changed through user interaction, it can be changed programatically. The <A HREF="UIEdit.htm">UIEdit</A> class allows a user to directly edit the control. 
<P>The <B>UIDrawText</B> component can also be associated with an InputMethodListener object. Use the <A HREF="UIDrawText.htm#com_0003001147023100">setInputMethod</A> method to set the input method editor (IME), and the <A HREF="UIDrawText.htm#com_0003001147023f00">showCaret</A> methods to display an IME composition window, once when the listener is set. 

<PRE><FONT FACE="Courier" SIZE="2"><A HREF="UIComponent.htm">UIComponent</A>
  |
  +--<A HREF="UIStateComponent.htm">UIStateComponent</A>
    |
    +--<A HREF="UICanvas.htm">UICanvas</A>
      |
      +--<B>UIDrawText</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003001147010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001147010100">UIDrawText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIDrawText();
</FONT></PRE>
<P><P>Creates an empty read-only text control. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147010200">UIDrawText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIDrawText(String newBuff);
</FONT></PRE>
<P><P>Creates a read-only text control with the specified string. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text for the control. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147010300">UIDrawText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public UIDrawText(char newBuff[]);
</FONT></PRE>
<P><P>Creates a read-only text control with the specified character buffer. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Contains the text for the control. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001147020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001147020100">addNotify</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addNotify();
</FONT></PRE>
<P><P>Called when the graphics context is first available to set a font. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020200">ensureNotDirty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void ensureNotDirty(FxGraphics g);
</FONT></PRE>
<P><P>Updates all text blocks. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020300">ensureVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean ensureVisible(int idx);
</FONT></PRE>
<P><P>Ensures that a character index is visible and scrolls the control, if necessary. 
<P><B>Note</B>  <A HREF="UIDrawText.htm">UIDrawText</A> objects to not have class-level scrolling capabilities. This methods only succeeds if the <B>UIDrawText</B> object is contained in an <A HREF="IUIContainer.htm">IUIContainer</A> that has scrolling capabilities (for example, <A HREF="UIScrollViewer.htm">UIScrollViewer</A>). 
<P><B>Return Value:</B> <P>Returns true if the method was successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the character that will be made visible. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020400">ensureVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean ensureVisible(Point p);
</FONT></PRE>
<P><P>Ensures that a position in the control is visible and scrolls the control, if necessary. 
<P><B>Note</B>  <A HREF="UIDrawText.htm">UIDrawText</A> objects do not have class-level scrolling capabilities. This methods only succeeds if the <B>UIDrawText</B> object is contained in an <A HREF="IUIContainer.htm">IUIContainer</A> that has scrolling capabilities (for example, <A HREF="UIScrollViewer.htm">UIScrollViewer</A>). 
<P><B>Return Value:</B> <P>Returns true if the method was successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The client coordinates that will be made visible. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020500">ensureVisible</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean ensureVisible(Rectangle r);
</FONT></PRE>
<P><P>Ensures that a specified rectangle is visible and resizes the control, if necessary. 
<P><B>Note</B>  <A HREF="UIDrawText.htm">UIDrawText</A> objects do not have class-level scrolling capabilities. This method only succeeds if the <B>UIDrawText</B> object is contained in an <A HREF="IUIContainer.htm">IUIContainer</A> that has scrolling capabilities (for example, <A HREF="UIScrollViewer.htm">UIScrollViewer</A>). 
<P><B>Return Value:</B> <P>Returns true if the method was successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rectangle to be made visible. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020600">eoln</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected int eoln(int idx);
</FONT></PRE>
<P><P>Retrieves the end-of-line character index for the current line. 

<P><B>Return Value:</B> <P>Returns the index of the end-of-line character. This index indicates where the caret would be positioned if it were at the end of the line. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of a character on the line. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020700">getCharFromScreen</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getCharFromScreen(int scrnX, int scrnY);
</FONT></PRE>
<P><P>Retrieves the character at the specified coordinates. 

<P><B>Return Value:</B> <P>Returns the index of the character at the specified position. If there is no character at that position, the character returned will be the last one on the nearest line. Before you use the returned index, you must check if the index is a valid index for the string (as it is possible to index past the end of the string using the mouse, which may then return an invalid index). 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnX</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate, in pixels. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnY</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate, in pixels. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020800">getCharFromScreen</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getCharFromScreen(Point scrnPos);
</FONT></PRE>
<P><P>Retrieves the character at the specified point. 

<P><B>Return Value:</B> <P>Returns the index of the character at the specified position. If there is no character at that position, the character returned will be the last one on the nearest line. Before you use the returned index, you must check if the index is a valid index for the string (as it is possible to index past the end of the string using the mouse, which may then return an invalid index). 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>scrnPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The coordinates of the point, in pixels. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020900">getCharLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Point getCharLocation(int iPos);
</FONT></PRE>
<P><P>Retrieves the position that the character would be drawn at if drawn alone. Typically, this is used for placing the caret. 

<P><B>Return Value:</B> <P>Returns a <B>Point</B> object that contains the client coordinates of the character. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the character to query. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020a00">getCurrIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getCurrIndex();
</FONT></PRE>
<P><P>Retrieves the current caret position. 

<P><B>Return Value:</B> <P>Returns the character index where the caret is located. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020b00">getHorizAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getHorizAlign();
</FONT></PRE>
<P><P>Retrieves the horizontal alignment of the text. 
<P><B>Return Value:</B> <P>Returns the horizontal alignment. 

<P><B>Remarks:</B> <P>One of the following values defined by the <A HREF="IFxTextConstants.htm">IFxTextConstants</A> interface will be returned. 
<UL><LI><A HREF="IFxTextConstants.htm#com_0003000828010007">htaLeft</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010005">htaCenter</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010008">htaRight</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010006">htaJustified</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801000a">htaStretch</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010009">htaScriptDefault</A> 
</UL>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147023000">setHorizAlign</A>, <A HREF="UIDrawText.htm#com_0003001147023d00">setVertAlign</A>, <A HREF="UIDrawText.htm#com_0003001147021800">getVertAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020c00">getIndexHeight</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getIndexHeight(int index);
</FONT></PRE>
<P><P>Retrieves the height of the font used to paint the character at a given index. This method is used internally by the <A HREF="UIDrawText.htm#com_0003001147022000">keyDown</A> method. 

<P><B>Return Value:</B> <P>Returns the height of a font (in pixels). 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An index of a character in an <B>FxFormattedText</B> buffer. If the index is invalid, 1 is returned. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020d00">getLength</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getLength();
</FONT></PRE>
<P><P>Retrieves the length of the text in the control. 

<P><B>Return Value:</B> <P>Returns the number of characters in the control. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020e00">getMinimumSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getMinimumSize();
</FONT></PRE>
<P><P>Retrieves the minimum size (in pixels) of the control. 

<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object containing the minimum size. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147021100">getPreferredSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147020f00">getOutline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IFxShape getOutline();
</FONT></PRE>
<P><P>Retrieves the outline along which text is drawn. 
<P><B>Return Value:</B> <P>Returns an <A HREF="IFxShape.htm">IFxShape</A> object that specifies the outline. 

<P><B>Remarks:</B> <P>For example, if the outline is an ellipse, the text that the <A HREF="AwtUIDrawText.htm">AwtUIDrawText</A> object is created with is drawn along the outline of this ellipse. 
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147023300">setOutline</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021000">getPasswordChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public char getPasswordChar();
</FONT></PRE>
<P><P>Retrieves the character that the control displays for password characters. 

<P><B>Return Value:</B> <P>Returns the character that the control displays for password characters. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147023400">setPasswordChar</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021100">getPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getPreferredSize();
</FONT></PRE>
<P><P>Retrieves the preferred size (in pixels) of the control. 

<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> object containing the preferred size. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147020e00">getMinimumSize</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021200">getPreferredSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension getPreferredSize(Dimension size);
</FONT></PRE>
<P><P>Retrieves the preferred layout size of the control (in pixels), given a constraint. The <B>Dimension</B> parameter that is passed is typically the size of the container hosting the control. 
<P>For example, if the <A HREF="UIDrawText.htm">UIDrawText</A> object has word wrapping set, the returned <B>Dimension</B> will have a width no greater than <I>size.width</I>, and a height that is large enough to hold all the text. If the <B>UIDrawText</B> object has no word wrapping set, the size constraint is ignored and the method is equivalent to calling <A HREF="UIDrawText.htm#com_0003001147021100">getPreferredSize()</A>. 

<P><B>Return Value:</B> <P>Returns a <B>Dimension</B> that describes the preferred layout size. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Dimension</B> to constrain the preferred size to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021300">getRoleCode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRoleCode();
</FONT></PRE>
<P><P>Retrieves the <B>ROLE_SYSTEM</B> code that best describes the role of the text control. 

<P><B>Return Value:</B> <P>Returns the <A HREF="IUIAccessible.htm#com_000300118b020041">ROLE_SYSTEM_STATICTEXT</A> code. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021400">getSelectedText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getSelectedText();
</FONT></PRE>
<P><P>Retrieves the selected text in the control. 

<P><B>Return Value:</B> <P>Returns a <B>String</B> object that contains the selected text of the control. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021500">getSelectionEnd</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectionEnd();
</FONT></PRE>
<P><P>Retrieves the ending point of the selection. 

<P><B>Return Value:</B> <P>Returns the character index of the ending point of the selection. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021600">getSelectionStart</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectionStart();
</FONT></PRE>
<P><P>Retrieves the starting point of the selection. 

<P><B>Return Value:</B> <P>Returns the character index of the starting point of the selection. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021700">getValueText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getValueText();
</FONT></PRE>
<P><P>Retrieves the text in the control. 

<P><B>Return Value:</B> <P>Returns a <B>String</B> object that contains the text of the control. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147023b00">setValueText</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021800">getVertAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getVertAlign();
</FONT></PRE>
<P><P>Retrieves the vertical alignment for the text. 

<P><B>Return Value:</B> <P>Returns the vertical alignment. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147023d00">setVertAlign</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021900">getWordEdge</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected int getWordEdge(int iPos, boolean pleaseMoveLeft,
        boolean givePrevious);
</FONT></PRE>
<P><P>Searches for and retrieves the character index of the first or last character in a word. 

<P><B>Return Value:</B> <P>Returns the index of the first or the last character of the word, depending upon <I>givePrevious</I>. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the position where the search should start. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pleaseMoveLeft</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the direction of the search. If true, the search will be to the left of <I>iPos</I>. If false, the search will be to the right of <I>iPos</I>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>givePrevious</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies if the index of the beginning or end of the word will be returned. If true, the index of the first character will be returned. If false, the index of the last character will be returned. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021a00">getWordWrap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getWordWrap();
</FONT></PRE>
<P><P>Retrieves the word wrapping style. 

<P><B>Return Value:</B> <P>Returns the word wrapping style. For a list of possible values, see <A HREF="UIDrawText.htm#com_0003001147023e00">setWordWrap</A>. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021b00">gotFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean gotFocus(Event evt, Object what);
</FONT></PRE>
<P><P>Called when the component receives the input focus. The caret associated with the <A HREF="UIDrawText.htm">UIDrawText</A> object is activated when the control receives focus. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>what</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that previously had the focus. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147022100">lostFocus</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021c00">hideCaret</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void hideCaret();
</FONT></PRE>
<P><P>Hides the caret. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The <B>hideCaret</B> and <A HREF="UIDrawText.htm#com_0003001147023f00">showCaret</A> methods are used internally, and only when the <A HREF="UIDrawText.htm">UIDrawText</A> or <A HREF="UIEdit.htm">UIEdit</A> control has focus. These methods are not directly used by the application.
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_isAlwaysShowSelection">isAlwaysShowSelection</A></H4>
<BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isAlwaysShowSelection();
</FONT></PRE>
<P><P>Determines whether the Always Show Selection mode is set. 
This is equivalent to the ES_NOHIDESEL Win32 edit style flag.

<P><B>Return Value:</B> <P>Returns true if the text drawing mode is set to 
Always Show Selection; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_setAlwaysShowSelection">setAlwaysShowSelection</A>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_0003001147021d00">isAutoResizable</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isAutoResizable();
</FONT></PRE>
<P><P>Determines whether the bounding box of the control's text will automatically adjust to the size of the control when the control is resized or reshaped. 

<P><B>Return Value:</B> <P>Returns true if the auto-resize attribute is set; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147022800">setAutoResizable</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021e00">isBordered</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isBordered();
</FONT></PRE>
<P><P>Determines whether the control has a border. 

<P><B>Return Value:</B> <P>Returns true if the control has a border; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147022a00">setBordered</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147021f00">isSingleLine</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isSingleLine();
</FONT></PRE>
<P><P>Retrieves the control's single-line attribute. 

<P><B>Return Value:</B> <P>Returns true if the control's text can be displayed on a single line; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022000">keyDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean keyDown(Event evt, int key);
</FONT></PRE>
<P><P>Processes a key down event. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key that was pressed. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022100">lostFocus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean lostFocus(Event evt, Object what);
</FONT></PRE>
<P><P>Called when the component loses the input focus. The caret associated with the <A HREF="UIDrawText.htm">UIDrawText</A> object is hidden when the control loses focus. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>what</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that is gaining the focus. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022200">mouseDown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDown(Event evt, int x, int y);
</FONT></PRE>
<P><P>Processes a mouse down event. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022300">mouseDrag</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean mouseDrag(Event evt, int x, int y);
</FONT></PRE>
<P><P>Processes a mouse drag event. 

<P><B>Return Value:</B> <P>Returns true if the event was handled; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>evt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event posted to the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the event. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022400">paint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void paint(FxGraphics g);
</FONT></PRE>
<P><P>Draws the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022500">paint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void paint(FxGraphics g, int startPos, int endPos,
        boolean wantOpaque);
</FONT></PRE>
<P><P>Draws a portion of the control's text. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>startPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the starting character index. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>endPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the ending character index. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>wantOpaque</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">True for opaque text. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022600">processKeyEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processKeyEvent(KeyEvent ke);
</FONT></PRE>
<P><P>Processes the specified key event. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ke</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022700">selectAll</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void selectAll();
</FONT></PRE>
<P><P>Selects all the text in the control. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_setAlwaysShowSelection">setAlwaysShowSelection</A></H4>
<BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setAlwaysShowSelection(boolean on);
</FONT></PRE>
<P><P>Sets the text drawing Always Show Selection mode to on Off. When this
mode is set to On, it is equivalent to the ES_NOHIDESEL Win32 edit style flag.   

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>on</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, 
 the always show selection mode is set to on.

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_isAlwaysShowSelection">isAlwaysShowSelection</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022800">setAutoResizable</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setAutoResizable(boolean auto);
</FONT></PRE>
<P><P>Sets the control's auto-resize attribute. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>auto</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the bounding box of the control's text will automatically adjust to the size of the control when the control is resized or reshaped. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147021d00">isAutoResizable</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022900">setBackground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBackground(Color c);
</FONT></PRE>
<P><P>Sets the background color of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <B>Color</B> object that specifies the background color. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022a00">setBordered</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBordered(boolean b);
</FONT></PRE>
<P><P>Sets or clears the control's border. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the control has a border; otherwise, it does not. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022b00">setBounds</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setBounds(int x, int y, int width, int height);
</FONT></PRE>
<P><P>Sets the bounding rectangle of the <A HREF="UIDrawText.htm">UIDrawText</A> object, according to the specified coordinates and dimensions. This method ensures that various blocks are set to the correct dimension, unless <A HREF="UIDrawText.htm#com_0003001147021d00">isAutoResizable</A> returns false. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the upper-left corner of the block (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the upper-left corner of the block (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the bounding rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the bounding rectangle (in pixels). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022c00">setCurrIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCurrIndex(int idx, boolean showCaretNow);
</FONT></PRE>
<P><P><P><B>Note</B>  This method is replaced by <B>setCurrIndex(int idx)</B>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022d00">setCurrIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCurrIndex(int idx);
</FONT></PRE>
<P><P>Sets the position of the caret. The caret's current display state remains unchanged. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character index where the caret will be placed. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022e00">setFont</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFont(Font f);
</FONT></PRE>
<P><P>Sets the font for all the text. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>f</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <B>Font</B> object that specifies the font. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147022f00">setForeground</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setForeground(Color c);
</FONT></PRE>
<P><P>Sets the text color of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <B>Color</B> object that specifies the text color. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023000">setHorizAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setHorizAlign(int h);
</FONT></PRE>
<P><P>Sets the horizontal alignment of the control's text. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The horizontal alignment. You can pass one of the following values, defined by the <A HREF="IFxTextConstants.htm">IFxTextConstants</A> interface. 
<UL><LI><A HREF="IFxTextConstants.htm#com_0003000828010007">htaLeft</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010005">htaCenter</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010008">htaRight</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010006">htaJustified</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801000a">htaStretch</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010009">htaScriptDefault</A> 
</UL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The horizontal alignment. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Some of the vertical and horizontal alignment values are script and locale dependant. Although all values are valid, the <A HREF="UIDrawText.htm#com_0003001147020200">ensureNotDirty</A> method may use default values (<B>htaLeft</B> and <B>vtaTop</B>) if the horizontal or vertical alignments are not appropriate for the current locale or script direction.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023100">setInputMethod</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setInputMethod( InputMethodListener ime );
</FONT></PRE>
<P><P>Sets the InputMethodListener for the <A HREF="UIDrawText.htm">UIDrawText</A> component. If an <B>InputMethodListener</B> is set, an <A HREF="FxCaret.htm">FxCaret</A> object will display the IME composition window near the caret. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ime</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The InputMethodListener to be set. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023200">setLocation</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setLocation(int x, int y);
</FONT></PRE>
<P><P>Sets the location of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate for the upper-left corner of the control. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate for the upper-left corner of the control. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023300">setOutline</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setOutline(IFxShape outline);
</FONT></PRE>
<P><P>Sets an outline that the text buffer is drawn along. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>outline</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An <A HREF="IFxShape.htm">IFxShape</A> object that specifies the outline. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147020f00">getOutline</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023400">setPasswordChar</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPasswordChar(char c);
</FONT></PRE>
<P><P>Sets the character that is displayed in the control when a password is entered. When you use this method and enter a password, word wrap settings are ignored and the text becomes a single line. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the character that will be displayed in place of password characters. If this value is zero, the password character is cleared. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147021000">getPasswordChar</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023500">setRefresh</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setRefresh(boolean r);
</FONT></PRE>
<P><P>Sets the refresh flag. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the control will be automatically updated whenever a parameter is changed; otherwise, the control will not be updated when a parameter changes. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023600">setSelection</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelection(int selStart, int selEnd);
</FONT></PRE>
<P><P>Sets the current selection from the specified start index to the end index (non-inclusive). 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting index of the selection. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selEnd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The ending index of the selection. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023700">setSingleLine</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSingleLine(boolean sl);
</FONT></PRE>
<P><P>Changes the control's single line attribute. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sl</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to false if the control's text is displayed on multiple lines; otherwise, the text is displayed on a single line. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023800">setSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSize(int width, int height);
</FONT></PRE>
<P><P>Sets the size of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new width of the control (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new height of the control (in pixels). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023900">setTabs</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTabs(int tabs[]);
</FONT></PRE>
<P><P>Sets the tab stops (in pixels) for the <A HREF="UIDrawText.htm">UIDrawText</A> control. The tabs are set the same for each <A HREF="FxFormattedText.htm">FxFormattedText</A> block. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tabs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of tab positions. If the length of the tabs array is 1, the tab stops will all be multiples of <I>tabs[0]</I>. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="FxFormattedText.htm#com_000300080e022c00">com.ms.fx.FxFormattedText.setTabs</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023a00">setTextCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setTextCallback(IFxTextCallback tcb);
</FONT></PRE>
<P><P>Sets the <B>IFxTextCallback</B> interface associated with the current <A HREF="UIDrawText.htm">UIDrawText</A> object as the <B>IFxTextCallback</B> for each <A HREF="FxFormattedText.htm">FxFormattedText</A> object that uses the <B>UIDrawText</B> object to draw formatted text buffers. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tcb</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>IFxTextCallback</B> interface associated with the <A HREF="UIDrawText.htm">UIDrawText</A> object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023b00">setValueText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValueText(char newBuff[], int offset, int len);
</FONT></PRE>
<P><P>Sets the text in the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newBuff</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of characters that contains the text. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset of the <I>newBuff</I> text buffer where the text starts. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The length of the text. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147021700">getValueText</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023c00">setValueText</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValueText(String value);
</FONT></PRE>
<P><P>Sets the text in the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <B>String</B> object that specifies the new text. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="UIDrawText.htm#com_0003001147021700">getValueText</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023d00">setVertAlign</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setVertAlign(int v);
</FONT></PRE>
<P><P>Sets the vertical alignment of the control's text. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>v</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The vertical alignment. You can pass one of the following values, defined by the <A HREF="IFxTextConstants.htm">IFxTextConstants</A> interface. 
<UL><LI><A HREF="IFxTextConstants.htm#com_0003000828010027">vtaTop</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010024">vtaCenter</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010023">vtaBottom</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010022">vtaBaseline</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010026">vtaStretch</A> 
</UL>
</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Some of the vertical and horizontal alignment values are script and locale dependant. Although all values are valid, the <A HREF="UIDrawText.htm#com_0003001147020200">ensureNotDirty</A> method may use default values (<B>htaLeft</B> and <B>vtaTop</B>) if the horizontal or vertical alignments are not appropriate for the current locale or script direction.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023e00">setWordWrap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setWordWrap(int ww);
</FONT></PRE>
<P><P>Sets the word wrapping style. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ww</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The style of word wrapping. You can use one of the following values, defined by the <A HREF="IFxTextConstants.htm">IFxTextConstants</A> interface. 
<UL><LI><A HREF="IFxTextConstants.htm#com_000300082801002b">wwNone</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801002f">wwWrap</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010029">wwKeepWordIntact</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801002d">wwVirtualRectEnd</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801002e">wwVirtualRectSide</A> 
<LI><A HREF="IFxTextConstants.htm#com_0003000828010028">wwCleanEdges</A> 
<LI><A HREF="IFxTextConstants.htm#com_000300082801002a">wwMask</A> 
</UL>
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147023f00">showCaret</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void showCaret();
</FONT></PRE>
<P><P>Shows the caret at the current position. If an InputMethodListener object is associated with the <A HREF="UIDrawText.htm">UIDrawText</A> object, an IME composition window is displayed near the caret. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The <A HREF="UIDrawText.htm#com_0003001147021c00">hideCaret</A> and <B>showCaret</B> methods are used internally, and only when the <A HREF="UIDrawText.htm">UIDrawText</A> or <A HREF="UIEdit.htm">UIEdit</A> control has focus. These methods are not directly used by the application.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147024000">showCaret</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void showCaret(int iPos);
</FONT></PRE>
<P><P>Positions and displays the caret at the specified position. If an InputMethodListener object is associated with the <A HREF="UIDrawText.htm">UIDrawText</A> object, an IME composition window is displayed near the caret. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iPos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character index where the caret will be positioned. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="UIDrawText.htm#com_0003001147021c00">hideCaret</A> and <B>showCaret</B> methods are used internally, and only when the <A HREF="UIDrawText.htm">UIDrawText</A> or <A HREF="UIEdit.htm">UIEdit</A> control has focus. These methods are not directly used by the application.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001147024100">update</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void update(FxGraphics g);
</FONT></PRE>
<P><P>Updates the drawing of the control, using the specified graphics context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics context. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method implements <B>update</B> in the <A HREF="IUIComponent.htm">IUIComponent</A> interface. <B>update</B> fills the control with its background color, and then calls <A HREF="UIDrawText.htm#com_0003001147022400">paint</A> to redraw the control using the control's foreground color. 
<P><B>See Also:</B> <A HREF="UIComponent.htm#com_0003001142011100">getBackground</A>, <A HREF="UIComponent.htm#com_0003001142011e00">getForeground</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

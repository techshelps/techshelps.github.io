<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class FxTexture</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxTexture.htm#com_000300081c010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxTexture.htm#com_000300081c020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="FxTexture.htm#com_000300081c030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="FxText.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_pfx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="FxToolkit.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.fx</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class FxTexture</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class FxTexture extends <A HREF="FxFill.htm">FxFill</A> implements <B>ImageObserver</B>
{
  // Fields
  public final static int <A HREF="FxTexture.htm#com_000300081c030001">DRAW_BL</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030002">DRAW_BOTTOM</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030003">DRAW_BR</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030004">DRAW_CENTER</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030005">DRAW_LEFT</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030006">DRAW_RIGHT</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030007">DRAW_TL</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030008">DRAW_TOP</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c030009">DRAW_TR</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000a">REPEAT_PIN</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000b">SNAP_EDGES</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A>;
  public final static int <A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A>;

  // Constructors
  public <A HREF="FxTexture.htm#com_000300081c010100">FxTexture</A>(Image i);
  public <A HREF="FxTexture.htm#com_000300081c010200">FxTexture</A>(Image i, int s, int l, int t, int r, int b,
        boolean p, int red, int green, int blue);
  public <A HREF="FxTexture.htm#com_000300081c010300">FxTexture</A>(Image i, int s, int l, int t, int r, int b,
        boolean p, Color base);
  public <A HREF="FxTexture.htm#com_000300081c010400">FxTexture</A>(Image i, int s, int l, int t, int r, int b,
        boolean p, FxFill base);
  public <A HREF="FxTexture.htm#com_000300081c010500">FxTexture</A>(Image i, int s, int l, int t, int r, int b,
        boolean p);

  // Methods
  public boolean <A HREF="FxTexture.htm#com_000300081c020100">drawScanLinesCallback</A>(FxGraphics g,
        boolean xChanging, int points[], int offset, int nPoints);
  public boolean <A HREF="FxTexture.htm#com_000300081c020200">fillArcCallback</A>(FxGraphics g, int x, int y,
        int width, int height, int startAngle, int arcAngle);
  public boolean <A HREF="FxTexture.htm#com_000300081c020300">fillOvalCallback</A>(FxGraphics g, int x, int y,
        int width, int height);
  public boolean <A HREF="FxTexture.htm#com_000300081c020400">fillPolygonCallback</A>(FxGraphics g, int xPoints[],
        int yPoints[], int nPoints);
  public boolean <A HREF="FxTexture.htm#com_000300081c020500">fillRectCallback</A>(FxGraphics g, int xStart,
        int yStart, int width, int height);
  public boolean <A HREF="FxTexture.htm#com_000300081c020600">fillRoundRectCallback</A>(FxGraphics g, int x, int y,
        int width, int height, int arcWidth, int arcHeight);
  public int <A HREF="FxTexture.htm#com_000300081c020700">getBottomAxis</A>();
  public Image <A HREF="FxTexture.htm#com_000300081c020800">getImage</A>();
  public Rectangle <A HREF="FxTexture.htm#com_000300081c020900">getInner</A>();
  public int <A HREF="FxTexture.htm#com_000300081c020a00">getLeftAxis</A>();
  public boolean <A HREF="FxTexture.htm#com_000300081c020b00">getPinOrigin</A>();
  public int <A HREF="FxTexture.htm#com_000300081c020c00">getRightAxis</A>();
  public boolean <A HREF="FxTexture.htm#com_000300081c020d00">getSnapDraw</A>();
  public int <A HREF="FxTexture.htm#com_000300081c020e00">getStretch</A>();
  public int <A HREF="FxTexture.htm#com_000300081c020f00">getTopAxis</A>();
  public int <A HREF="FxTexture.htm#com_000300081c021000">getUpdatedAreasMask</A>();
  public boolean <A HREF="FxTexture.htm#com_000300081c021100">imageUpdate</A>(Image img, int infoflags, int x,
        int y, int width, int height);
  public void <A HREF="FxTexture.htm#com_000300081c021200">setAxis</A>(int l, int t, int r, int b);
  public void <A HREF="FxTexture.htm#com_000300081c021300">setPinOrigin</A>(boolean b);
  public void <A HREF="FxTexture.htm#com_000300081c021400">setSnapDraw</A>(boolean b);
  public void <A HREF="FxTexture.htm#com_000300081c021500">setStretch</A>(int s);
  public void <A HREF="FxTexture.htm#com_000300081c021600">setUpdateCallback</A>(IFxTextureUpdate tu);
  public void <A HREF="FxTexture.htm#com_000300081c021700">setUpdatedAreasMask</A>(int mask);
  public Dimension <A HREF="FxTexture.htm#com_000300081c021800">size</A>();
}
</FONT></PRE>
<P>This class uses images, including .gif and .jpeg file formats, to fill shapes and draw graphics effects. An <B>FxTexture</B> may be used for both foreground drawing colors and background colors. 
<P>To select an image as a background, use the <B>Component</B>.setBackground(Color c) or the UIComponent.<A HREF="UIComponent.htm#com_0003001142016d00">setBackground</A>(Color color) method and pass the <B>FxTexture</B> as the <B>Color</B> object. If the image cannot be drawn, a default RGB color, <B>Color</B>, or <A HREF="FxFill.htm">FxFill</A> will be used instead.<BR> 
<P>To select an image as a foreground color, select the <B>FxTexture</B> object into a drawing object, such as <A HREF="FxPen.htm">FxPen</A>, <A HREF="FxRubberPen.htm">FxRubberPen</A>, or <A HREF="FxBrushPen.htm">FxBrushPen</A>. A graphics object will perform the same operations with <B>FxTexture</B> or <B>FxPen</B> that it does with a <B>Color</B> object. 
<P><B>Note</B>  The callback methods used in this and other classes that are derived from <A HREF="FxColor.htm">FxColor</A> and <A HREF="FxFill.htm">FxFill</A> are used internally only; they are not for use directly by applications. For more information on the use of <A HREF="def_pfx.htm#commsfx_ovr_0003000801020000">callback methods</A> in the com.ms.fx package, see the overview information at the beginning of this article. 
<P>The following example shows you how to construct several different FxTexture objects. 
<PRE><FONT FACE="Courier" SIZE="2">// In many cases, you will use an <B>FxTexture</B> as a simple background 
// fill. In these cases, where you do not want the image stretched in
// any way, you can use the following constructs.

fxt = new FxTexture(img[TEXTURE], FxTexture.STRETCH_NONE, 
                    0,0,-1,-1, false, Color.red);

// The first parameter is an imported image to base the texture on. The 
// second parameter handles image stretching. When you want the image
// drawn normally, use STRETCH_NONE. If you want the image stretched
// across a surface, you can use either <A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A>, <A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A>,
// or <A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>. The third and fourth parameters set the starting
// location of the image relative to the drawing canvas (in this case, the
// location is point 0,0). The fifth and sixth parameters set the width and height
// of the image drawn on the canvas. Set these values to -1 to specify that
// the image is drawn to its normal dimension (if you use <A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A>, you
// will always set these to -1). Set the seventh parameter to true if 
// you want a texture pinned. The final parameter sets a color to use
// in case the image fails to draw. This can be a <B>Color</B>, a set of
// (r,g,b) values, or an <A HREF="FxFill.htm">FxFill</A> object.

// In some cases, you may want to use the default backup color when creating
// an <B>FxTexture</B>. The default color is white. 

fxt = new FxTexture(img[TEXTURE], FxTexture.STRETCH_NONE,
                    0,0,-1,-1, false);

// <B>FxTexture</B> objects can be selected into a graphics context
// the same way a <B>Color</B> is selected. This makes it easy to
// use textures as backgrounds for any component. 

setBackground(new FxTexture(img[TEXTURE], FxTexture.STRETCH_NONE, 
                             0,0,-1,-1,false, 100, 100, 100));

// In cases where you want an image stretched across a surface, you 
// can force the texture to be drawn in a specified pixel dimension, 
// regardless of what the original dimension of the image is. In the 
// following example, the original image is stretched to 300 pixels
// wide by 100 pixels high.

fxt = new FxTexture(img[TEXTURE], FxTexture.STRETCH_ALL,
                    0,0,300,100, false, Color.cyan);
</FONT></PRE>
<P>An <A HREF="FxGraphics.htm">FxGraphics</A> object draws supported primitives with the same method calls you use when drawing with <B>Color</B> objects. 
<PRE><FONT FACE="Courier" SIZE="2">// Draw primitives using an <B>FxTexture</B> object.

fxGraf.setColor(fxt);

fxGraf.fillOval(varX, varY, variableWidth, variableHeight);
// or
fxGraf.fillPolygon(xPntArray, yPntArray, numPts);
</FONT></PRE>
<P>The <B>FxTexture</B> class supports drawing partial textures according to a nine-rectangle grid. The following example shows how you can draw partial textures using the <A HREF="FxTexture.htm#com_000300081c021700">setUpdatedAreasMask</A> method. 
<PRE><FONT FACE="Courier" SIZE="2">// Set an <A HREF="IFxTextureUpdate.htm">IFxTextureUpdate</A> object for the texture. This
// interface supports the <A HREF="IFxTextureUpdate.htm#com_0003000829010100">textureUpdated</A> method.

fxt.setUpdateCallback(ifxtu);

// Set the visible areas drawing mask for the texture. This is a mask that
// defines which areas of the texture are drawn.

fxt.setUpdatedAreasMask(FxTexture.DRAW_TL + FxTexture.DRAW_TR + 
                        FxTexture.DRAW_BL + FxTexture.DRAW_BR);
</FONT></PRE>
<PRE><FONT FACE="Courier" SIZE="2"><B>BaseColor</B>
  |
  +--<A HREF="FxColor.htm">FxColor</A>
    |
    +--<A HREF="FxFill.htm">FxFill</A>
      |
      +--<B>FxTexture</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_000300081c010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300081c010100">FxTexture</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxTexture(Image i);
</FONT></PRE>
<P><P>Constructs a texture by using a given image. If the image cannot be drawn, the default color (0,0,0) is used instead. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object to use as the base of the texture. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c010200">FxTexture</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxTexture(Image i, int s, int l, int t, int r, int b, boolean p, int
        red, int green, int blue);
</FONT></PRE>
<P><P>Constructs a texture with a specific default color. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object to use as the basis of the texture. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that handles image stretching. This value may be one of the following: 
<DL>
<DT><A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The left boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The right boundary. Set this value to -1 if the right boundary is the full width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bottom boundary. Set this value to -1 if the bottom boundary is the full height of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this value to true if the image should be pinned. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>red</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The amount of red in the color. The color (r,g,b) is used in the event that the texture cannot be drawn by using the given image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>green</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The amount of green in the color. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>blue</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The amount of blue in the color. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c010300">FxTexture</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxTexture(Image i, int s, int l, int t, int r, int b, boolean p,
        Color base);
</FONT></PRE>
<P><P>Constructs a texture with a specific default <B>Color</B> object. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object to use as the basis of the texture. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that handles image stretching. This value may be one of the following: 
<DL>
<DT><A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The left boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The right boundary. Set this value to -1 if the right boundary is the full width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bottom boundary. Set this value to -1 if the bottom boundary is the full height of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this value to true if the image should be pinned. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>base</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Color</B> object to use as the default should the texture fail to draw with the given image. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c010400">FxTexture</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxTexture(Image i, int s, int l, int t, int r, int b, boolean p,
        FxFill base);
</FONT></PRE>
<P><P>Constructs a texture by using a given image. In the event the image cannot be drawn, an <A HREF="FxFill.htm">FxFill</A> object is used instead. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that handles image stretching. This value may be one of the following: 
<DL>
<DT><A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The left boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The right boundary. Set this value to -1 if the right boundary is the full width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bottom boundary. Set this value to -1 if the bottom boundary is the full height of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this value to true if the image is pinned. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>base</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="FxFill.htm">FxFill</A> object to use as the base should the texture fail to draw using the given image. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c010500">FxTexture</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public FxTexture(Image i, int s, int l, int t, int r, int b, boolean p);
</FONT></PRE>
<P><P>Constructs a texture using an image as a base for the texture. In the event the image cannot be drawn, the default color (0,0,0) is used instead. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that handles image stretching. This may be one of the following: 
<DL>
<DT><A HREF="FxTexture.htm#com_000300081c03000e">STRETCH_NONE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000d">STRETCH_MIDDLE</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000f">STRETCH_OUTER</A> 
</DT><DT><A HREF="FxTexture.htm#com_000300081c03000c">STRETCH_ALL</A>
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The left boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top boundary. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The right boundary. Set this value to -1 if the right boundary is the full width of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bottom boundary. Set this value to -1 if the bottom boundary is the full height of the image. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>p</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set this value to true if the image should be pinned. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300081c020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300081c020100">drawScanLinesCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean drawScanLinesCallback(FxGraphics g, boolean xChanging,
        int points[], int offset, int nPoints);
</FONT></PRE>
<P><P>Draws scan lines by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  This method is called by <A HREF="FxGraphics.htm">FxGraphics</A> if <A HREF="FxGraphics.htm#com_0003000810010e00">drawScanLines</A> is called and if an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns true if successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object used to draw the scan lines. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xChanging</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The direction the line should be drawn (horizontally or vertically). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>points</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of points (expressed in x,y coordinates). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>offset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset to use. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>nPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of points in the array. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b020b00">drawScanLinesCallback(FxGraphics,boolean,int[],int,int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <A HREF="FxGraphics.htm#com_0003000810010e00">com.ms.fx.FxGraphics.drawScanLines</A>, <A HREF="FxFill.htm#com_000300080b020b00">com.ms.fx.FxFill.drawScanLinesCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020200">fillArcCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean fillArcCallback(FxGraphics g, int x, int y, int width,
        int height, int startAngle, int arcAngle);
</FONT></PRE>
<P><P>Draws a filled arc centered on the given (x,y) coordinates by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  This method is called by <A HREF="FxGraphics.htm">FxGraphics</A> if <B>fillArc</B> is called and an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object used to draw the filled arc. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the arc's origin. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the arc's origin. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the arc (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the arc (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>startAngle</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The starting angle of the arc. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>arcAngle</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The angle of the arc. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b020e00">fillArcCallback(FxGraphics,int,int,int,int,int,int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <B>java.awt.Graphics.fillArc</B>, <A HREF="FxFill.htm#com_000300080b020e00">com.ms.fx.FxFill.fillArcCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020300">fillOvalCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean fillOvalCallback(FxGraphics g, int x, int y, int width,
        int height);
</FONT></PRE>
<P><P>Draws a filled oval by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  This method is called by <A HREF="FxGraphics.htm">FxGraphics</A> if <B>fillOval</B> is called and if an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object used to draw the filled oval. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left x coordinate of the oval's bounding rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left y coordinate of the oval's bounding rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the oval (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the oval (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b020f00">fillOvalCallback(FxGraphics,int,int,int,int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <B>java.awt.Graphics.fillOval</B>, <A HREF="FxFill.htm#com_000300080b020f00">com.ms.fx.FxFill.fillOvalCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020400">fillPolygonCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean fillPolygonCallback(FxGraphics g, int xPoints[],
        int yPoints[], int nPoints);
</FONT></PRE>
<P><P>Draws a filled polygon by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  Called by <A HREF="FxGraphics.htm">FxGraphics</A> if <B>fillPolygon</B> is called and if an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object to use to draw the filled polygon. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the polygon x coordinates. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the polygon y coordinates. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>nPoints</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of points in the polygon. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b021000">fillPolygonCallback(FxGraphics,int[],int[],int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <B>java.awt.Graphics.fillPolygon</B>, <A HREF="FxFill.htm#com_000300080b021000">com.ms.fx.FxFill.fillPolygonCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020500">fillRectCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean fillRectCallback(FxGraphics g, int xStart, int yStart,
        int width, int height);
</FONT></PRE>
<P><P>Draws a filled rectangle by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  This method is called by <A HREF="FxGraphics.htm">FxGraphics</A> if <B>fillRect</B> is called and if an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns true if successful; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object used to draw the filled rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>xStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left x coordinate of the rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>yStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left y coordinate of the rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b021100">fillRectCallback(FxGraphics,int,int,int,int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <B>java.awt.Graphics.fillRect</B>, <A HREF="FxFill.htm#com_000300080b021100">com.ms.fx.FxFill.fillRectCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020600">fillRoundRectCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean fillRoundRectCallback(FxGraphics g, int x, int y, int width,
        int height, int arcWidth, int arcHeight);
</FONT></PRE>
<P><P>Draws a filled rectangle with rounded edges by using an image as a fill color when called by an <A HREF="FxGraphics.htm">FxGraphics</A> object. 
<P><B>Note</B>  This method is called by <A HREF="FxGraphics.htm">FxGraphics</A> if <B>fillRoundRect</B> is called and an <A HREF="FxTexture.htm">FxTexture</A> object is the selected color. The callback methods are used internally and are not intended to be called by applications. They are made public so that derived classes can extend the callback functionality. 
<P><B>Return Value:</B> <P>Returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The graphics object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left x coordinate of the rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper-left y coordinate of the rectangle. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the rectangle (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>arcWidth</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The arc width of the rectangle's rounded edges. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>arcHeight</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The arc height of the rectangle's rounded edges. 

</FONT></TD></TR></TABLE>
<P><B>Overrides:</B> <P><A HREF="FxFill.htm#com_000300080b021200">fillRoundRectCallback(FxGraphics,int,int,int,int,int,int)</A> in <A HREF="FxFill.htm">FxFill</A>.

<P><B>See Also:</B> <B>java.awt.Graphics.fillRoundRect</B>, <A HREF="FxFill.htm#com_000300080b021200">com.ms.fx.FxFill.fillRoundRectCallback</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020700">getBottomAxis</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getBottomAxis();
</FONT></PRE>
<P><P>Retrieves the bottom bound for the stretch and repeat factors. 

<P><B>Return Value:</B> <P>Returns the bottom bound for the stretch and repeat factors. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020800">getImage</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Image getImage();
</FONT></PRE>
<P><P>Retrieves the image being used by the <A HREF="FxTexture.htm">FxTexture</A> object. 

<P><B>Return Value:</B> <P>Returns the <B>Image</B>. If no image is currently associated with the <A HREF="FxTexture.htm">FxTexture</A> object, the method returns null. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020900">getInner</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Rectangle getInner();
</FONT></PRE>
<P><P>Retrieves the bounds of the inner <B>Rectangle</B> of the texture. 

<P><B>Return Value:</B> <P>Returns the inner <B>Rectangle</B> of the texture. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020a00">getLeftAxis</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getLeftAxis();
</FONT></PRE>
<P><P>Retrieves the left bound for the stretch and repeat factors. 

<P><B>Return Value:</B> <P>Returns the left bound for the stretch and repeat factors. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020b00">getPinOrigin</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean getPinOrigin();
</FONT></PRE>
<P><P>Checks whether the image is pinned. 

<P><B>Return Value:</B> <P>Returns true if the image is pinned; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020c00">getRightAxis</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRightAxis();
</FONT></PRE>
<P><P>Retrieves the right bound for the stretch and repeat factors. 

<P><B>Return Value:</B> <P>Returns the right bound for the stretch and repeat factors. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020d00">getSnapDraw</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean getSnapDraw();
</FONT></PRE>
<P><P>Checks whether partial images should be repeated. 

<P><B>Return Value:</B> <P>Returns true if partial images should be repeated; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020e00">getStretch</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getStretch();
</FONT></PRE>
<P><P>Checks if the image is stretched across the surface rather than being repeated. 

<P><B>Return Value:</B> <P>Returns a value that determines if the image is stretched. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c020f00">getTopAxis</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getTopAxis();
</FONT></PRE>
<P><P>Retrieves the top bound for the stretch and repeat factors. 

<P><B>Return Value:</B> <P>Returns the top bound for the stretch and repeat factors. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021000">getUpdatedAreasMask</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getUpdatedAreasMask();
</FONT></PRE>
<P><P>Retrieves a drawing mask for the currently visible areas. 

<P><B>Return Value:</B> <P>Returns a mask for the currently visible areas. 

<P><B>See Also:</B> <A HREF="FxTexture.htm#com_000300081c021700">setUpdatedAreasMask</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021100">imageUpdate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean imageUpdate(Image img, int infoflags, int x, int y,
        int width, int height);
</FONT></PRE>
<P><P>Determines when an image can be drawn. This method is called when information requested about the image becomes available. 

<P><B>Return Value:</B> <P>Returns true if the image can be drawn; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>img</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The image object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>infoflags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The flags controlling the method. Set this value to zero to use the default values for the <B>ImageObserver</B> object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the image's starting point. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the image's starting point. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>width</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the image (in pixels). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>height</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the image (in pixels). 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <B>java.awt.image.ImageObserver</B>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021200">setAxis</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setAxis(int l, int t, int r, int b);
</FONT></PRE>
<P><P>Sets the bounds for the stretch and repeat factors. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The left bound. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top bound. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The right bound. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bottom bound. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021300">setPinOrigin</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPinOrigin(boolean b);
</FONT></PRE>
<P><P>Sets whether the image should be pinned. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true if the image should be pinned. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021400">setSnapDraw</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSnapDraw(boolean b);
</FONT></PRE>
<P><P>Determines whether partial images should be repeated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>b</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true if partial images should be repeated across a surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021500">setStretch</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStretch(int s);
</FONT></PRE>
<P><P>Sets the stretch or the repeat value. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that determines if the image is stretched or repeated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021600">setUpdateCallback</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setUpdateCallback(IFxTextureUpdate tu);
</FONT></PRE>
<P><P>Sets an <A HREF="IFxTextureUpdate.htm">IFxTextureUpdate</A> callback instance. The IFxTextureUpdate.<B>textureUpdated</B> callback method is called with the nine <A HREF="UIGridLayout.htm#com_0003001153000000">UIGridLayout</A> or <A HREF="UIGridBagLayout.htm#com_0003001152000000">UIGridBagLayout</A> grid areas after every drawing operation. If one of the grid's lines is not set, the corresponding rectangles will be removed from the <B>Rectangle</B> array. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tu</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="IFxTextureUpdate.htm">IFxTextureUpdate</A> callback interface to set for the texture. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021700">setUpdatedAreasMask</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setUpdatedAreasMask(int mask);
</FONT></PRE>
<P><P>Sets a mask for the currently visible areas. You can set this mask so that only certain areas of an <A HREF="FxTexture.htm">FxTexture</A> are drawn. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>mask</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The mask for the visible areas. This can be one or a combination of the following masks. 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030007">DRAW_TL</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030008">DRAW_TOP</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030009">DRAW_TR</A> 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030005">DRAW_LEFT</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030004">DRAW_CENTER</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030006">DRAW_RIGHT</A> 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030001">DRAW_BL</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030002">DRAW_BOTTOM</A>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="FxTexture.htm#com_000300081c030009">DRAW_TR</A> 
</FONT></TD>
</TR>
</TABLE>
</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <B>getUpdateAreasMask</B>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300081c021800">size</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Dimension size();
</FONT></PRE>
<P><P>Retrieves the size of the <B>Image</B> that is associated with the texture. 

<P><B>Return Value:</B> <P>Returns the <B>Dimension</B> of the image. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300081c030000">Fields</A></H3><DL>
<DT><B><A NAME="com_000300081c030001">DRAW_BL</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the lower-left corner of a grid. 

</DD><DT><B><A NAME="com_000300081c030002">DRAW_BOTTOM</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the bottom row of a grid. 

</DD><DT><B><A NAME="com_000300081c030003">DRAW_BR</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the lower-right corner of a grid. 

</DD><DT><B><A NAME="com_000300081c030004">DRAW_CENTER</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the center of a grid. 

</DD><DT><B><A NAME="com_000300081c030005">DRAW_LEFT</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the left bar of a grid. 

</DD><DT><B><A NAME="com_000300081c030006">DRAW_RIGHT</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the right bar of a grid. 

</DD><DT><B><A NAME="com_000300081c030007">DRAW_TL</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the upper-left corner of a grid. 

</DD><DT><B><A NAME="com_000300081c030008">DRAW_TOP</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the top row of a grid. 

</DD><DT><B><A NAME="com_000300081c030009">DRAW_TR</A></B>
</DT><DD>The value used in <B>setVisibleArea</B> to draw the upper-right corner of a grid. 

</DD><DT><B><A NAME="com_000300081c03000a">REPEAT_PIN</A></B>
</DT><DD>When repeating, tie the bitmap to the logical corner (0,0) instead of the upper-left corner of the requested area. 

</DD><DT><B><A NAME="com_000300081c03000b">SNAP_EDGES</A></B>
</DT><DD>When repeating, if the draw operation results in a partial drawing of an edge, shrink the image to fix exactly. 

</DD><DT><B><A NAME="com_000300081c03000c">STRETCH_ALL</A></B>
</DT><DD>When filling onto a surface, the texture is stretched to fit. 

</DD><DT><B><A NAME="com_000300081c03000d">STRETCH_MIDDLE</A></B>
</DT><DD>When filling onto a surface, only the middle area is stretched to fit. The border areas will retain their original dimensions. 

</DD><DT><B><A NAME="com_000300081c03000e">STRETCH_NONE</A></B>
</DT><DD>No stretching is done to fill the required area on the target surface. The image contained within the texture is repeated to fill the space. If this flag is set, any guidelines will be ignored. 

</DD><DT><B><A NAME="com_000300081c03000f">STRETCH_OUTER</A></B>
</DT><DD>When filling onto a surface, only the middle area is repeated to fit. The border areas will be stretched to fit the surface. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

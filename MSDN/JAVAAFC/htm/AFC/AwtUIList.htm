<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class AwtUIList</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="AwtUIList.htm#com_0003001116010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="AwtUIList.htm#com_0003001116020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="AwtUIHost.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_ui.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="AwtUIListBeanInfo.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.ui</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class AwtUIList</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class AwtUIList extends <A HREF="AwtUIControl.htm">AwtUIControl</A> implements 
            <A HREF="IAwtUIItemSelectable.htm">IAwtUIItemSelectable</A>
{
  // Constructors
  public <A HREF="AwtUIList.htm#com_0003001116010100">AwtUIList</A>();
  public <A HREF="AwtUIList.htm#com_0003001116010200">AwtUIList</A>(int selMode);
  public <A HREF="AwtUIList.htm#com_0003001116010300">AwtUIList</A>(int selMode, int layoutStyle);

  // Methods
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116020100">add</A>(String s);
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116020200">add</A>(String s, int pos);
  public void <A HREF="AwtUIList.htm#com_0003001116020300">addActionListener</A>(ActionListener l);
  public void <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A>(String item);
  public void <A HREF="AwtUIList.htm#com_0003001116020500">addItem</A>(String item, int pos);
  public void <A HREF="AwtUIList.htm#com_0003001116020600">addItemListener</A>(ItemListener l);
  public void <A HREF="AwtUIList.htm#com_0003001116020700">addSelectedIndex</A>(int index);
  public void <A HREF="AwtUIList.htm#com_0003001116020800">addSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116020900">addSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUIList.htm#com_0003001116020a00">addSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116020b00">addSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUIList.htm#com_0003001116020c00">addSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116020d00">addSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUIList.htm#com_0003001116020e00">addSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116020f00">find</A>(String prefix, boolean fromFocus);
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116021000">find</A>(String prefix, IUIComponent compStart);
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116021100">find</A>(String prefix);
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116021200">getBase</A>();
  public String <A HREF="AwtUIList.htm#com_0003001116021300">getItem</A>(int posn);
  public int <A HREF="AwtUIList.htm#com_0003001116021400">getSelectedIndex</A>();
  public int[] <A HREF="AwtUIList.htm#com_0003001116021500">getSelectedIndices</A>();
  public IUIComponent <A HREF="AwtUIList.htm#com_0003001116021600">getSelectedItem</A>();
  public IUIComponent[] <A HREF="AwtUIList.htm#com_0003001116021700">getSelectedItems</A>();
  public int <A HREF="AwtUIList.htm#com_0003001116021800">getSelectionMode</A>();
  protected void <A HREF="AwtUIList.htm#com_0003001116021900">processActionEvent</A>(ActionEvent e);
  protected void <A HREF="AwtUIList.htm#com_0003001116021a00">processHostEvent</A>(AWTEvent e);
  protected void <A HREF="AwtUIList.htm#com_0003001116021b00">processItemEvent</A>(ItemEvent e);
  public void <A HREF="AwtUIList.htm#com_0003001116021c00">remove</A>(int index);
  public void <A HREF="AwtUIList.htm#com_0003001116021d00">remove</A>(IUIComponent comp);
  public synchronized void <A HREF="AwtUIList.htm#com_0003001116021e00">removeActionListener</A>(ActionListener l);
  public synchronized void <A HREF="AwtUIList.htm#com_0003001116021f00">removeItemListener</A>(ItemListener l);
  public void <A HREF="AwtUIList.htm#com_0003001116022000">removeSelectedIndex</A>(int index);
  public void <A HREF="AwtUIList.htm#com_0003001116022100">removeSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022200">removeSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUIList.htm#com_0003001116022300">removeSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022400">removeSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUIList.htm#com_0003001116022500">removeSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022600">removeSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUIList.htm#com_0003001116022700">removeSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>(int index);
  public void <A HREF="AwtUIList.htm#com_0003001116022900">setSelectedIndex</A>(int index, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A>(int indices[]);
  public void <A HREF="AwtUIList.htm#com_0003001116022b00">setSelectedIndices</A>(int indices[], boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>(IUIComponent comp);
  public void <A HREF="AwtUIList.htm#com_0003001116022d00">setSelectedItem</A>(IUIComponent comp, boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A>(IUIComponent comps[]);
  public void <A HREF="AwtUIList.htm#com_0003001116022f00">setSelectedItems</A>(IUIComponent comps[],
        boolean notify);
  public void <A HREF="AwtUIList.htm#com_0003001116023000">setSelectionMode</A>(int selMode);
}
</FONT></PRE>
<P>This class implements the functionality of a <A HREF="UIList.htm">UIList</A> object in an AWT-based control. An <B>AwtUIList</B> control is an <A HREF="AwtUIHost.htm">AwtUIHost</A> component whose associated root container holds a <B>UIList</B> object. By hosting this object, an <B>AwtUIList</B> control integrates AFC with AWT. Although an <B>AwtUIList</B> control is fully compatible with AWT, a <B>UIList</B> control is optimized for performance and size. 
<P><B>Note</B>  The hot-track color is the same color as the button text color so hot-tracking does not appear to be functional. 
<PRE><FONT FACE="Courier" SIZE="2"><B>Panel</B>
  |
  +--<A HREF="AwtUIHost.htm">AwtUIHost</A>
    |
    +--<A HREF="AwtUIControl.htm">AwtUIControl</A>
      |
      +--<B>AwtUIList</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003001116010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001116010100">AwtUIList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUIList();
</FONT></PRE>
<P><P>Creates an empty AWT-based list control. 
<P><B>Remarks:</B> <P>Call <A HREF="AwtUIList.htm#com_0003001116020100">add</A> or <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A> to add items to the list. By default, the list control is a single-selection, single-column list. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116010200">AwtUIList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUIList(int selMode);
</FONT></PRE>
<P><P>Creates an empty AWT-based list control with the specified selection mode. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode of the control. Possible values include <A HREF="IUISelector.htm#com_0003001195020004">IUISelector.SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">IUISelector.MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">IUISelector.EXTENDSELECT</A>. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Call <A HREF="AwtUIList.htm#com_0003001116020100">add</A> or <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A> to add items to the list. By default, the list control is a single-column list. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode was specified. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116010300">AwtUIList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public AwtUIList(int selMode, int layoutStyle);
</FONT></PRE>
<P><P>Creates an empty AWT-based list control with the specified selection mode and layout style. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode of the control. Possible values include <A HREF="IUISelector.htm#com_0003001195020004">IUISelector.SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">IUISelector.MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">IUISelector.EXTENDSELECT</A>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>layoutStyle</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The layout style of the control. Possible values include <A HREF="UIVerticalFlowLayout.htm#com_0003001185030002">UIVerticalFlowLayout.MULTICOLUMN</A>, <A HREF="UIVerticalFlowLayout.htm#com_0003001185030001">UIVerticalFlowLayout.FILL</A>, or a bitwise combination of the two. (<A HREF="UIVerticalFlowLayout.htm#com_0003001185030001">FILL</A> extends the width of each list item's selectable area to the width of the item's column. This allows the item to be selected even when the horizontal area outside of its label is clicked.) Pass 0 for a single-column list with no fill. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Call <A HREF="AwtUIList.htm#com_0003001116020100">add</A> or <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A> to add items to the list. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode or an undefined layout style was specified. 


</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001116020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001116020100">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(String s);
</FONT></PRE>
<P><P>Adds the specified text to the end of a list. 
<P><B>Return Value:</B> <P>Returns the text component that was added, if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the text item is hot-tracked. To add an item that is not hot-tracked, call the inherited <B>add</B> method that takes an <A HREF="IUIComponent.htm">IUIComponent</A> parameter and pass a <A HREF="UIText.htm">UIText</A> object. For more information about hot-tracking, see the <A HREF="UIList.htm">UIList</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A>, <A HREF="AwtUIList.htm#com_0003001116021c00">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020200">add</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent add(String s, int pos);
</FONT></PRE>
<P><P>Adds the specified text to a list at the specified position. 
<P><B>Return Value:</B> <P>Returns the text component that was added, if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the text. To add the text at the end of the list, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the text item is hot-tracked. To add an item that is not hot-tracked, call the inherited <B>add</B> method that takes an <A HREF="IUIComponent.htm">IUIComponent</A> parameter and pass a <A HREF="UIText.htm">UIText</A> object. For more information about hot-tracking, see the <A HREF="UIList.htm">UIList</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020400">addItem</A>, <A HREF="AwtUIList.htm#com_0003001116021c00">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020300">addActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addActionListener(ActionListener l);
</FONT></PRE>
<P><P>Adds the specified action listener. The listener receives all action events generated for the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021e00">removeActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020400">addItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addItem(String item);
</FONT></PRE>
<P><P>Adds the specified text to the end of the list. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>item</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the text item is hot-tracked. To add an item that is not hot-tracked, call the inherited <A HREF="AwtUIList.htm#com_0003001116020100">add</A> method that takes an <A HREF="IUIComponent.htm">IUIComponent</A> parameter and pass a <A HREF="UIText.htm">UIText</A> object. For more information about hot-tracking, see the <A HREF="UIList.htm">UIList</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020100">add</A>, <A HREF="AwtUIList.htm#com_0003001116021c00">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020500">addItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addItem(String item, int pos);
</FONT></PRE>
<P><P>Adds the specified text to the list at the specified position. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>item</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The text to be added. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pos</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index at which to add the text. To add the text at the end of the list, pass -1. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>By default, the text item is hot-tracked. To add an item that is not hot-tracked, call the inherited <A HREF="AwtUIList.htm#com_0003001116020100">add</A> method that takes an <A HREF="IUIComponent.htm">IUIComponent</A> and pass a <A HREF="UIText.htm">UIText</A> object. For more information about hot-tracking, see the <A HREF="UIList.htm">UIList</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020100">add</A>, <A HREF="AwtUIList.htm#com_0003001116021c00">remove</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020600">addItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addItemListener(ItemListener l);
</FONT></PRE>
<P><P>Adds the specified item listener. The listener receives all item events generated for the control. (Item events are generated when the state of an item changes.) 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be added. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021f00">removeItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020700">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020800">addSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Selects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020900">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020a00">addSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Selects the components at the specified indices, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020b00">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020c00">addSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Selects the specified component, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020d00">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. By default, list select events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be selected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020e00">addSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Selects the specified components, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. Currently not used. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116020f00">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, boolean fromFocus);
</FONT></PRE>
<P><P>Searches the control for an item whose name begins with the specified prefix. The search begins from either the current focus, or the first item in the selector. 

<P><B>Return Value:</B> <P>Returns the first matching component, if a match is found; Otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fromFocus</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, the search begins from the current focus. Otherwise, the search begins with the first item in the selector. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021000">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix, IUIComponent compStart);
</FONT></PRE>
<P><P>Searches the selector control for an item whose name begins with the specified prefix. The search begins at compStart. 

<P><B>Return Value:</B> <P>Returns The first matching component, if a match is found; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>compStart</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component at which the search begins. If it is null, the search will begin at the 1st item (according to navigate). 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021100">find</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent find(String prefix);
</FONT></PRE>
<P><P>Searches the control for an item whose name begins with the specified prefix. The search starts at the first item in the control. 

<P><B>Return Value:</B> <P>Returns the first matching component; otherwise, returns null if a matching component is not found. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>prefix</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The prefix string to search for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021200">getBase</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getBase();
</FONT></PRE>
<P><P>Retrieves the UI component that the control is based on. 
<P><B>Return Value:</B> <P>Returns the <A HREF="UIList.htm">UIList</A> object associated with the control. 

<P><B>Remarks:</B> <P>When the AWT-based control is first created, it is associated with a <A HREF="UIList.htm">UIList</A> object. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021300">getItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getItem(int posn);
</FONT></PRE>
<P><P>Retrieves the string at the specified index. 

<P><B>Return Value:</B> <P>Returns a string identifying the item at the specified index if the item is a <A HREF="UIText.htm">UIText</A> item, otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>posn</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the string. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021400">getSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectedIndex();
</FONT></PRE>
<P><P>Retrieves the zero-based index of the currently selected item. 
<P><B>Return Value:</B> <P>Returns the index of the selected item or -1 if an item is not selected. 

<P><B>Remarks:</B> <P>If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116021500">getSelectedIndices</A>. 
<P>For related code examples, see the <A HREF="IUISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021600">getSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021500">getSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int[] getSelectedIndices();
</FONT></PRE>
<P><P>Retrieves the zero-based indices of all currently selected items. 

<P><B>Return Value:</B> <P>Returns an array of the indices of the selected items, or null if no item is selected. 

<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021400">getSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116021700">getSelectedItems</A>, <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021600">getSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent getSelectedItem();
</FONT></PRE>
<P><P>Retrieves the currently selected item. 
<P><B>Return Value:</B> <P>Returns the selected component; otherwise, returns null if no component is selected. 

<P><B>Remarks:</B> <P>If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116021700">getSelectedItems</A>. 
<P>For related code examples, see the <A HREF="IUISelector.htm">UISelector</A> overview. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021400">getSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021700">getSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUIComponent[] getSelectedItems();
</FONT></PRE>
<P><P>Retrieves all currently selected items. 

<P><B>Return Value:</B> <P>Returns an array of the selected components or returns null if a component is not selected. 

<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021600">getSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116021500">getSelectedIndices</A>, <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021800">getSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getSelectionMode();
</FONT></PRE>
<P><P>Retrieves the selection mode of the control. 

<P><B>Return Value:</B> <P>Returns one of the following three selection modes: <A HREF="IUISelector.htm#com_0003001195020004">IUISelector.SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">IUISelector.MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">IUISelector.EXTENDSELECT</A>. 

<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116023000">setSelectionMode</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021900">processActionEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processActionEvent(ActionEvent e);
</FONT></PRE>
<P><P>Processes action events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="AwtUIList.htm#com_0003001116021a00">processHostEvent</A> and dispatches the event to a registered action listener. When overriding this method, call the super method <B>processActionEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020300">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021a00">processHostEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processHostEvent(AWTEvent e);
</FONT></PRE>
<P><P>Processes the specified event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is automatically invoked if a listener has has been registered through a call to addXXXListener. Depending on the type of event, <B>processHostEvent</B> calls one of the following methods. 
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Event type
</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Method called
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">action event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIList.htm#com_0003001116021900">processActionEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">item event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIList.htm#com_0003001116021b00">processItemEvent</A>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">component event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022100">processComponentEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">container event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022200">processContainerEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">focus event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022400">processFocusEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">key event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022600">processKeyEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022700">processMouseEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">mouse motion event
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="AwtUIHost.htm#com_0003001115022800">processMouseMotionEvent</A> (inherited through <A HREF="AwtUIHost.htm">AwtUIHost</A>)
</FONT></TD>
</TR>
</TABLE>
<P>When overriding <B>processHostEvent</B>, call the super method <B>processHostEvent</B> to ensure the default event processing continues normally. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021b00">processItemEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void processItemEvent(ItemEvent e);
</FONT></PRE>
<P><P>Processes item events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item event. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is called by <A HREF="AwtUIList.htm#com_0003001116021a00">processHostEvent</A> and dispatches the event to a registered item listener. When overriding this method, call the super method <B>processItemEvent</B> to ensure the default event processing continues normally. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020600">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021c00">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(int index);
</FONT></PRE>
<P><P>Removes the component at the specified index. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the component to be removed. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021d00">remove</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void remove(IUIComponent comp);
</FONT></PRE>
<P><P>Removes the specified component from the control. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be removed. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For an example of calling <B>remove</B>, see <A HREF="UISelector.htm#com_000300116f022000">UISelector.remove</A>. 
<P><B>Overrides:</B> <P><A HREF="AwtUIControl.htm#com_000300110d021800">remove(IUIComponent)</A> in <A HREF="AwtUIControl.htm">AwtUIControl</A>.

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021e00">removeActionListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeActionListener(ActionListener l);
</FONT></PRE>
<P><P>Removes the specified action listener. The listener no longer receives the control's action events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The action listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020300">addActionListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116021f00">removeItemListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeItemListener(ItemListener l);
</FONT></PRE>
<P><P>Removes the specified item listener. The listener no longer receives the control's item events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>l</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item listener to be removed. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116020600">addItemListener</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022000">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022100">removeSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Deselects the component at the specified index, without affecting other selections. Optionally generates list select events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022200">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022300">removeSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Deselects the components at the specified indices, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the indices of the items to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022400">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022500">removeSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Deselects the specified component, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022600">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. By default, list deselect events are not generated. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the components to be deselected. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022700">removeSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Deselects the specified components, without affecting other selections. Optionally generates list deselect events. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the component to be deselected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list deselect events will be generated; otherwise, list deselect events will not be generated. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022800">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index. By default, a list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A> to select multiple items at a time. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116020700">addSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116021400">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022900">setSelectedIndex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndex(int index, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the component at the specified index and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>index</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The zero-based index of the item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A> to select multiple items at a time. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116020700">addSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116021400">getSelectedIndex</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022a00">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[]);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A>, <A HREF="AwtUIList.htm#com_0003001116021500">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022b00">setSelectedIndices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedIndices(int indices[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the components at the specified indices and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>indices</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the zero-based indices of the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>. 
<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A>, <A HREF="AwtUIList.htm#com_0003001116021500">getSelectedIndices</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022c00">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp);
</FONT></PRE>
<P><P>Sets the selection to the specified component. A list select event is not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A> to select multiple items at a time. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116020b00">addSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116021600">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022d00">setSelectedItem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItem(IUIComponent comp, boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified component, and optionally generates a list select event. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The item to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, a list select event will be generated; otherwise, a list select event will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020002">MULTISELECT</A> or <A HREF="IUISelector.htm#com_0003001195020001">EXTENDSELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022e00">setSelectedItems</A> to select multiple items at a time. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified component is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022800">setSelectedIndex</A>, <A HREF="AwtUIList.htm#com_0003001116020b00">addSelectedItem</A>, <A HREF="AwtUIList.htm#com_0003001116021600">getSelectedItem</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022e00">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[]);
</FONT></PRE>
<P><P>Sets the selection to the specified components. List select events are not generated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A>, <A HREF="AwtUIList.htm#com_0003001116021700">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116022f00">setSelectedItems</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectedItems(IUIComponent comps[], boolean notify);
</FONT></PRE>
<P><P>Sets the selection to the specified components, and optionally generates list select events. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>comps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array containing the items to be selected. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>notify</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If true, list select events will be generated; otherwise, list select events will not be generated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method clears any previous selection. If the control's selection mode is <A HREF="IUISelector.htm#com_0003001195020004">SINGLESELECT</A>, you can also call <A HREF="AwtUIList.htm#com_0003001116022c00">setSelectedItem</A>. 
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if any component in the array is not an immediate child of the control. 


<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116022a00">setSelectedIndices</A>, <A HREF="AwtUIList.htm#com_0003001116021700">getSelectedItems</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001116023000">setSelectionMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setSelectionMode(int selMode);
</FONT></PRE>
<P><P>Sets the selection mode of the control. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>selMode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection mode for the control. Possible values include <A HREF="IUISelector.htm#com_0003001195020004">IUISelector.SINGLESELECT</A>, <A HREF="IUISelector.htm#com_0003001195020002">IUISelector.MULTISELECT</A>, or <A HREF="IUISelector.htm#com_0003001195020001">IUISelector.EXTENDSELECT</A>. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if an undefined selection mode was specified. 


<P><B>See Also:</B> <A HREF="AwtUIList.htm#com_0003001116021800">getSelectionMode</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

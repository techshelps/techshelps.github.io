<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32 Q &amp; A</TITLE>
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">
<H1>  Win32 Q &amp; A</H1><P>Jeffrey Richter</P>
<P>Jeffrey Richter wrote <I>Advanced Windows</I> (Microsoft Press, 1995) and <I>Windows 3.1: A Developer</I><I>'</I><I>s Guide</I> (M&amp;T Books, 1992). Jeff is a consultant and teaches Win32-based programming seminars. He can be reached at v-jeffrr@microsoft.com.</P>
<P><OBJECT id=sample1 type="application/x-oleobject"
classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Backgrounders Samples">
<PARAM name="Item2" value="4567">
</OBJECT><a href="javascript:sample1.Click()">

Click to open or copy the DELEXE project files.</A></P><P><font size="6" face="verdana,arial,helvetica">Q</font>We're very close to shipping our product. In order for us to get the "Designed for Windows® 95" logo, we must supply an application that uninstalls our software from the user's machine. We have developed an application called UNSETUP.EXE. But how can we make UNSETUP.EXE delete itself? Right now, we can remove all of the application's files and subdirectories but we cannot delete the program that deletes these files and the subdirectory containing it. How can we write a program that can delete itself?</P>
<P><I>Anthony Spica<BR>Cherry Hill, NJ</I></P>
<P></P>
<P><font size="6" face="verdana,arial,helvetica">A</font>As I'm sure you are aware, the following code does not work correctly:</P>
<P> </P>
<P><BR></P>
<PRE> TCHAR szEXEPathname[_MAX_PATH];
GetModuleFileName(NULL, szEXEPathname, _MAX_PATH);
DeleteFile(szEXEPathname);</PRE>
<P> </P>
<P>This code gets the full pathname of the currently running executable and then attempts to delete it by calling DeleteFile. Because Windows 95 and Windows NTª load EXE files into memory as memory-mapped files, the system opens the EXE file when the process is started and automatically closes the file when the process terminates. When DeleteFile is called, the system sees that the EXE file is still opened, DeleteFile returns FALSE, and a subsequent call to GetLastError returns 5, which identifies an access violation error (ERROR_ACCESS_DENIED).</P>
<P>That straightforward technique won't work. The first thing that popped into my mind to solve this problem was the little-known MoveFileEx function:</P>
<P> </P>
<P><BR></P>
<PRE> BOOL MoveFileEx(LPCTSTR lpExistingFileName, 
                LPCTSTR lpNewFileName, DWORD dwFlags); </PRE>
<P> </P>
<P>MoveFileEx allows you to move a file from one directory to another. Passing NULL for the lpNewFileName parameter tells the system to move the file to nowhere. This is the same thing as telling the system to delete the file and is basically the same thing as calling DeleteFile. So why would this be a better solution? MoveFileEx's third parameter, dwFlags, allows you to specify flags that alter the behavior slightly. The MOVEFILE_DELAY_UNTIL_REBOOT flag tells the system that the file is not to be moved (deleted) until the system is rebooted. When the system is rebooted, the UNSETUP.EXE file will not be in use, the system will delete the file, and everything's swell.</P>
<P>Unfortunately, there are three problems with the MoveFileEx technique. It doesn't remove the subdirectory that contains the file. Also, the file is not deleted immediately. I know several people who've had Windows NT running continuously over a full year without ever rebooting! If these people install and uninstall several applications, their hard drives would soon start to be populated with a whole bunch of UNSETUP.EXE files. The third and final problem with MoveFileEx is the biggest: it's not implemented on Windows 95.</P>
<P>Windows 95 does offer a technique that lets you move/delete a file when the user reboots. When Windows 95 boots, it runs an application called WININIT.EXE. This application looks for a file called WININIT.INI. If this file exists, WININIT.EXE then looks for a section within the file labeled Rename.</P>
<P> </P>
<P><BR></P>
<PRE> [Rename]<BR>NUL=C:\Program Files\Win95ADG\UNSETUP.EXE<BR>NUL=C:\Program Files\SomeApp\UNSETUP.EXE<BR>C:\Calc.exe=C:\Windows\Calc.exe</PRE>
<P> </P>
<P>Every line in the Rename section indicates a file that needs to be moved or deleted. The name to the left of the equal sign indicates the new pathname of the file and the name on the right indicates the current pathname of the file. If the name on the left is NUL, WININIT.EXE deletes the file. Because WININIT.INI's contents look very much like any old-style INI file, you might be tempted to use the WritePrivateProfileString function to add entries to the Rename section. Don't—the WritePrivateProfileString function ensures that no more than one entry in a section can have NUL to the left of the equal sign. If every UNSETUP.EXE program used WritePrivateProfileString to add its entry to the WININIT.INI file, the following scenario could occur. The user runs your UNSETUP.EXE; then, before rebooting, the user uninstalls another application. But because WritePrivateProfileString doesn't allow more than one entry to begin with NUL=, your entry is deleted from the file and yourapplication'sUNSETUP.EXEfilewillneverbedeleted.</P>
<P>The ReplaceFileOnReboot function shown in <B>Figure 1</B> hides from you the implementation differences of moving/deleting a file on reboot between Windows 95 and Windows NT. The function first tries to call MoveFileEx. If this function fails, it then opens (or creates) a WININIT.INI file and properly adds entries to the Rename section. Of course, in a future version of Windows 95, Microsoft will fully support the MoveFileEx function. I have written the ReplaceFileOnReboot function so that it always calls MoveFileEx and will continue to work correctly on future versions of Windows 95.</P>
<P><B> Figure 1  ReplaceFileOnReboot</B></P>
<P></P>
<P>RFOR.H</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: RFoR.h
Written by:  Jeffrey Richter
Note:        This function works on both Windows 95 and Windows NT.
******************************************************************************/


BOOL WINAPI ReplaceFileOnReboot (LPCTSTR pszExisting, LPCTSTR pszNew);


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P></P>
<P>RFOR.C</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: RFoR.c
Written by:  Jeffrey Richter
Note:        This function abstracts the differences between Windows 95 and 
             Windows NT for replacing/deleting a file when the system reboots.
******************************************************************************/


#define STRICT
#include &lt;windows.h&gt;


///////////////////////////////////////////////////////////////////////////////


#include "RFoR.h"


///////////////////////////////////////////////////////////////////////////////


BOOL WINAPI ReplaceFileOnReboot (LPCTSTR pszExisting, LPCTSTR pszNew) {

   // First, attempt to use the MoveFileEx function.
   BOOL fOk = MoveFileEx(pszExisting, pszNew, MOVEFILE_DELAY_UNTIL_REBOOT);
   if (fOk) return(fOk);

   // If MoveFileEx failed, we are running on Windows 95 and need to add
   // entries to the WININIT.INI file (an ANSI file).
   // Start a new scope for local variables.
   {
   char szRenameLine[1024];   

   int cchRenameLine = wsprintfA(szRenameLine, 
#ifdef UNICODE
      "%ls=%ls\r\n", 
#else
      "%hs=%hs\r\n", 
#endif
      (pszNew == NULL) ? __TEXT("NUL") : pszNew, pszExisting);
      char szRenameSec[] = "[Rename]\r\n";
      int cchRenameSec = sizeof(szRenameSec) - 1;
      HANDLE hfile, hfilemap;
      DWORD dwFileSize, dwRenameLinePos;
      TCHAR szPathnameWinInit[_MAX_PATH];

      // Construct the full pathname of the WININIT.INI file.
      GetWindowsDirectory(szPathnameWinInit, _MAX_PATH);
      lstrcat(szPathnameWinInit, __TEXT("\\WinInit.Ini"));

      // Open/Create the WININIT.INI file.
      hfile = CreateFile(szPathnameWinInit,      
         GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_ALWAYS, 
         FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);

      if (hfile == INVALID_HANDLE_VALUE) 
         return(fOk);

      // Create a file mapping object that is the current size of 
      // the WININIT.INI file plus the length of the additional string
      // that we're about to insert into it plus the length of the section
      // header (which we might have to add).
      dwFileSize = GetFileSize(hfile, NULL);
      hfilemap = CreateFileMapping(hfile, NULL, PAGE_READWRITE, 0, 
         dwFileSize + cchRenameLine + cchRenameSec, NULL);

      if (hfilemap != NULL) {

         // Map the WININIT.INI file into memory.  Note: The contents 
         // of WININIT.INI are always ANSI; never Unicode.
         LPSTR pszWinInit = (LPSTR) MapViewOfFile(hfilemap, 
            FILE_MAP_WRITE, 0, 0, 0);

         if (pszWinInit != NULL) {

            // Search for the [Rename] section in the file.
            LPSTR pszRenameSecInFile = strstr(pszWinInit, szRenameSec);

            if (pszRenameSecInFile == NULL) {

               // There is no [Rename] section in the WININIT.INI file.
               // We must add the section too.
               dwFileSize += wsprintfA(&amp;pszWinInit[dwFileSize], "%s",<BR>                                       szRenameSec);
               dwRenameLinePos = dwFileSize;

            } else {

               // We found the [Rename] section, shift all the lines down
               PSTR pszFirstRenameLine = strchr(pszRenameSecInFile, '\n');
               // Shift the contents of the file down to make room for 
               // the newly added line.  The new line is always added 
               // to the top of the list.
               pszFirstRenameLine++;   // 1st char on the next line
               memmove(pszFirstRenameLine + cchRenameLine, pszFirstRenameLine, 
                  pszWinInit + dwFileSize - pszFirstRenameLine);                  
               dwRenameLinePos = pszFirstRenameLine - pszWinInit;
            }

            // Insert the new line
            memcpy(&amp;pszWinInit[dwRenameLinePos], szRenameLine,cchRenameLine);

            UnmapViewOfFile(pszWinInit);

            // Calculate the true, new size of the file.
            dwFileSize += cchRenameLine;

            // Everything was successful.
            fOk = TRUE; 
         }
         CloseHandle(hfilemap);
      }

      // Force the end of the file to be the calculated, new size.
      SetFilePointer(hfile, dwFileSize, NULL, FILE_BEGIN);
      SetEndOfFile(hfile);

      CloseHandle(hfile);
   }

   return(fOk);
}


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P></P>
<P>I decided to try something else since I didn't like the fact that the ReplaceFileOnReboot function still forces the user to reboot in order to delete the UNSETUP.EXE file. Here is the code I used for my next attempt:</P>
<P><BR></P>
<PRE> int WINAPI WinMain (HINSTANCE hinstExe, 
                    HINSTANCE hinstExePrev,
                    LPSTR lpszCmdLine, int nCmdShow) {</PRE>
<P> </P>
<P><BR></P>
<PRE>    TCHAR szEXEPathname[_MAX_PATH];
   HANDLE hfile;

   GetModuleFileName(NULL, szEXEPathname, _MAX_PATH);
   hfile = CreateFile(szEXEPathname, GENERIC_READ,
                      FILE_SHARE_READ, NULL,
                      OPEN_EXISTING,
                      FILE_FLAG_DELETE_ON_CLOSE, NULL);
   CloseHandle(hfile);
   return(0);
}</PRE>
<P> </P>
<P>My idea was that since the EXE file is already open, why not go and open the file a second time by calling CreateFile using the FILE_FLAG_DELETE_ON_CLOSE flag? This flag tells the system that the file should be deleted when it is no longer in use. After CreateFile returns, I immediately call CloseHandle assuming that the system remembers that I want the file deleted when it's no longer in use. So, when the process terminates, I expect the system to automatically delete the file.</P>
<P>After writing the small test application and experimenting with it, I soon discovered that this technique doesn't work at all. When I debugged the program under Windows 95, I saw that the call to CreateFile was succeeding but the system was just ignoring my request to open the file with delete-on-close access. When I closed the file and terminated the process, the executable file remained on my hard disk.</P>
<P>I then went and tested my application under Windows NT. On Windows NT, the call to CreateFile fails returning INVALID_HANDLE_VALUE and GetLastError returns ERROR_ACCESS_DENIED. This is because Windows NT supports the ability to share a file with delete access. When I attempt to open a file specifying the FILE_FLAG_DELETE_ON_CLOSE flag, the system checks to see if the file has already been opened with the FILE_SHARE_DELETE flag. FILE_SHARE_DELETE is not documented in the Win32 SDK documentation, but it can be found in the Windows NT DDK's NTDDK.H file:</P>
<P> </P>
<P><BR></P>
<PRE> #define FILE_SHARE_DELETE               0x00000004</PRE>
<P> </P>
<P>Taking the failure of my previous technique in stride, I started working on my next idea. I needed to somehow execute code in my process's address space without having my EXE file loaded anymore. That made me think of DLLs. DLLs can be dynamically loaded and unloaded as desired simply by calling LoadLibrary and FreeLibrary. All I'd need to do is dynamically unload my EXE file from my address space just as I would unload a DLL. You may recall that the FreeLibrary function takes a single parameter: the HINSTANCE (or HMODULE) of a loaded DLL.</P>
<P> </P>
<P><BR></P>
<PRE> BOOL FreeLibrary(HINSTANCE hinstDll);</PRE>
<P> </P>
<P>In Win32®-based programs, the HINSTANCE of a DLL is the virtual memory address where the DLL was loaded into a process's address space. This is true of EXE files as well: the hinstExe parameter passed to WinMain identifies the virtual address where the EXE file got loaded. So it stands to reason that if I call FreeLibrary and pass in the EXE's hinstExe value, the system should unload the EXE file from my process's address space, right?</P>
<P>My code to test this theory looks like this:</P>
<P> </P>
<P><BR></P>
<PRE> int WINAPI WinMain (HINSTANCE hinstExe, 
                    HINSTANCE hinstExePrev,
                    LPSTR lpszCmdLine, int nCmdShow) {

   TCHAR szEXEPathname[_MAX_PATH];
   GetModuleFileName(NULL, szEXEPathname, _MAX_PATH);
   FreeLibrary(hinstExe);
   DeleteFile(szEXEPathname);
   return(0);
}</PRE>
<P> </P>
<P>The code seems simple enough but if you build this sample code and run it on Windows 95, you'll consistently get access violations and, of course, the UNSETUP.EXE file won't be deleted from the user's hard drive. This was a fun sample to code and execute inside a debugger. When you debug this application, you'll want to keep the EXE file visible in the debugger's memory window. Then, watch what happens when you execute the FreeLibrary call. FreeLibrary actually does unload the EXE file from the process's address space. You can easily see this because the contents of the debugger's memory window changes to all questions marks. But then FreeLibrary returns and the code that contains the call to DeleteFile is gone and this is what causes the access violation.</P>
<P>This is a relatively easy problem to solve, especially if you remember my article "Load Your 32-bit DLL into Another Process's Address Space Using INJLIB," MSJ May 1994. (My Advanced Windows book, Microsoft Press, 1995 has the latest version of this code and some bug fixes I've made since the article appeared.) That article described a technique that allows you to dynamically inject code into another process's address space and execute this injected code. This injected code in the remote process does not come from a DLL or an EXE but instead comes from copying bytes from the local process's address space into the remote process's address space. Your problem requires a stripped-down version of the inject library code (see <B>Figure 2</B>).</P>
<P><B> Figure 2  DELEXE</B></P>
<P></P>
<P>DELEXE.H</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: DelExe.h
Written by:  Jeffrey Richter
Note:        This function works on Windows 95 but does NOT work on Windows NT.
******************************************************************************/


VOID WINAPI DeleteExecutable (DWORD dwExitCode, BOOL fRemoveDir);


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P></P>
<P>DELEXE.C</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: DelExe.c
Written by:  Jeffrey Richter
Note:        This function works on Windows 95 but does NOT work on Windows NT.
******************************************************************************/


#define STRICT
#include &lt;Windows.h&gt;
#include &lt;tchar.h&gt;


///////////////////////////////////////////////////////////////////////////////


#include "DelExe.h"


///////////////////////////////////////////////////////////////////////////////


// Prototypes for functions that we explicitly import from Kernel32.DLL
typedef BOOL (WINAPI *PROCFREELIBRARY)(HINSTANCE);
typedef BOOL (WINAPI *PROCDELETEFILE)(LPCTSTR);
typedef BOOL (WINAPI *PROCREMOVEDIRECTORY)(LPCTSTR);
typedef VOID (WINAPI *PROCEXITPROCESS)(DWORD);


// Data structure containing all the information we need to delete ourselves,
// remove our containing directory, and terminate ourselves.
typedef struct {

   HINSTANCE hinstExe;
   PROCFREELIBRARY pfnFreeLibrary;

   PROCDELETEFILE pfnDeleteFile;
   TCHAR szFile[_MAX_PATH];

   PROCREMOVEDIRECTORY pfnRemoveDirectory;
   TCHAR szDir[_MAX_PATH];

   PROCEXITPROCESS pfnExitProcess;
   DWORD dwExitCode;
} DELEXEINFO, *PDELEXEINFO;

typedef VOID (WINAPI *PROCDELEXE)(PDELEXEINFO);


///////////////////////////////////////////////////////////////////////////////


// Code to be injected into our own address space.
static void WINAPI DelExeInjCode (PDELEXEINFO pdei) {

      // Remove the EXE file from our address space
      pdei-&gt;pfnFreeLibrary(pdei-&gt;hinstExe);

      // Delete the EXE file now that it is no longer in use
      pdei-&gt;pfnDeleteFile(pdei-&gt;szFile);

      if (pdei-&gt;pfnRemoveDirectory != NULL) {
            // Remove the directory (which is now empty)
            pdei-&gt;pfnRemoveDirectory(pdei-&gt;szDir);
      }

      // Terminate our process
      pdei-&gt;pfnExitProcess(pdei-&gt;dwExitCode);
}


///////////////////////////////////////////////////////////////////////////////


// This function just marks the end of the previous function
static void WINAPI AfterDelExeInjCode (void) {
}


///////////////////////////////////////////////////////////////////////////////


void WINAPI DeleteExecutable (DWORD dwExitCode, BOOL fRemoveDir) {

      HINSTANCE hinstKrnl = GetModuleHandle(__TEXT("KERNEL32"));
      HANDLE hheap = GetProcessHeap();

      // Calculate the number of bytes in the DelExeInjCode function.
      const int cbFuncSize = ((LPBYTE)(DWORD)
      AfterDelExeInjCode - (LPBYTE)(DWORD) DelExeInjCode);

      DELEXEINFO dei;

      // From our process's default heap, allocate memory where we can 
      // inject our own function.
      PROCDELEXE pfnDelExe = HeapAlloc(hheap, HEAP_ZERO_MEMORY, cbFuncSize);

      // Inject the DelExeInjCode function into the memory block
      memcpy(pfnDelExe, DelExeInjCode, cbFuncSize);

      // Initialize the DELEXEINFO structure.
      dei.hinstExe = GetModuleHandle(NULL);
      dei.pfnFreeLibrary = (PROCFREELIBRARY) 
      GetProcAddress(hinstKrnl, "FreeLibrary");

      // Assume that the subdirectory is NOT to be removed.
      dei.pfnRemoveDirectory = NULL;
#ifdef UNICODE
      dei.pfnDeleteFile = (PROCDELETEFILE) 
      GetProcAddress(hinstKrnl, "DeleteFileW");
#else
      dei.pfnDeleteFile = (PROCDELETEFILE) 
      GetProcAddress(hinstKrnl, "DeleteFileA");
#endif
      GetModuleFileName(dei.hinstExe, dei.szFile, _MAX_PATH);

   if (fRemoveDir) {

            // The subdirectory should be removed.
#ifdef UNICODE
            dei.pfnRemoveDirectory = (PROCREMOVEDIRECTORY) 
            GetProcAddress(hinstKrnl, "RemoveDirectoryW");
#else
            dei.pfnRemoveDirectory = (PROCREMOVEDIRECTORY) 
            GetProcAddress(hinstKrnl, "RemoveDirectoryA");
#endif
            lstrcpy(dei.szDir, dei.szFile);
            *_tcsrchr(dei.szDir, __TEXT('\\')) = 0;
   }

      dei.pfnExitProcess = (PROCEXITPROCESS) 
      GetProcAddress(hinstKrnl, "ExitProcess");
      dei.dwExitCode = dwExitCode;

      pfnDelExe(&amp;dei);
      // We never get here because pfnDelExe never returns
}


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P></P>
<P>For a full understanding of the code in <B>Figure 2</B>, please refer to the inject library article. Basically, the DeleteExecutable function first calls HeapAlloc to allocate a block of memory in your process's address space. Then a function is copied from your EXE file into the dynamically allocated block of memory. The rules that this function must follow are spelled out in the inject library article. Next, a DELEXEINFO data structure is initialized with the full pathname of the process's EXE file, a flag indicating whether the containing subdirectory should also be deleted, and the address of the functions (in KERNEL32.DLL) that are going to be called from the code in the dynamically allocated memory block.</P>
<P>After the data structure is initialized, the code in the memory block is called and is passed the address of the DELEXEINFO structure (which is on the thread's stack). The code in the memory block uses the information in the DELEXEINFO structure to call FreeLibrary to unload the EXE file, then DeleteFile to delete the EXE file (which will succeed now), and then call ExitProcess so that the process terminates. It would be a bad mistake to allow the code in the memory block to return because the calling code no longer exists after FreeLibrary unloads the EXE file.</P>
<P>To use my function, all you have to do is include the DELEXE.H header file and add the DELEXE.C source file to your project. Then in your code, just place a call to my DeleteExecutable function:</P>
<P> </P>
<P><BR></P>
<PRE> void WINAPI DeleteExecutable(DWORD dwExitCode, 
                             BOOL fRemoveDir);</PRE>
<P> </P>
<P>The first parameter is your process's exit code, and the second parameter tells the function whether it should also attempt to remove the subdirectory that contains the UNSETUP.EXE file. The function is prototyped as returning void because it will never return.</P>
<P>This is my favorite solution because it deletes the EXE file immediately. But now I have some bad news: this method doesn't work on Windows NT. The reason is that Windows NT doesn't allow FreeLibrary to unload the process's EXE file. At first, I thought that Windows NT just sets a really big usage count on the EXE file module. I figured I could call FreeLibrary passing the hinstExe value continuously in a loop. Each call to FreeLibrary would decrement the EXE file's usage count until the EXE file is unloaded. I thought I could detect this because FreeLibrary will return FALSE if I pass an address that does not represent a module. The pseudocode would be something like this:</P>
<P><BR></P>
<PRE> while (FreeLibrary(hinstExe))
    ;
DeleteFile(szEXEPathname);</PRE>
<P>I coded this up and tested it on Windows NT. After several hours, the while loop still had not terminated. Either Windows NT just doesn't allow FreeLibrary to affect an EXE or this loop will take too long to execute and the performance of the UNSETUP.EXE would be too horrendous anyway. </P>
<P>After all of this, I decided on a brute-force method that consistently works on both Windows 95 and Windows NT: batch files. Batch files have the unique ability to delete themselves. If you create a batch file containing this single command:</P>
<P> </P>
<P><BR></P>
<PRE> del %0.bat</PRE>
<P> </P>
<P>and run it at the command prompt, the batch file will delete itself, followed by the error message:</P>
<P> </P>
<P><BR></P>
<PRE> The batch file cannot be found.</PRE>
<P> </P>
<P>This error message is harmless. The DeleteExecutableBF function I wrote (see <B>Figure 3</B>) creates a batch file that kills the running executable program. If the executable is called UNSETUP.EXE and resides in the C:\Win95ADG subdirectory, the contents of the batch file look like this:</P>
<P> </P>
<P><BR></P>
<PRE> :Repeat
del "C:\Win95ADG\UNSETUP.EXE"
if exist "UNSETUP.EXE" goto Repeat
rmdir "C:\Win95ADG"
del "\DelUS.bat"</PRE>
<P> </P>
<P><B> Figure 3  DeleteExecutableBF</B></P>
<P></P>
<P>DELEXEBF.H</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: DelExeBF.h
Written by:  Jeffrey Richter
Note:        This function works on both Windows 95 and Windows NT.
******************************************************************************/


VOID WINAPI DeleteExecutableBF (void);


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P></P>
<P>DELEXEBF.C</P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: DelExeBF.c
Written by:  Jeffrey Richter
Note:        This function works on both Windows 95 and Windows NT.
******************************************************************************/


#define STRICT
#include &lt;Windows.h&gt;
#include &lt;tchar.h&gt;


///////////////////////////////////////////////////////////////////////////////


#include "DelExeBF.h"


///////////////////////////////////////////////////////////////////////////////


// The name of the temporary batch file
#define DELUNSETUPBAT     __TEXT("\\DelUS.bat")


///////////////////////////////////////////////////////////////////////////////


void WINAPI DeleteExecutableBF (void) {
   HANDLE hfile;
   STARTUPINFO si;
   PROCESS_INFORMATION pi;

   // Create a batch file that continuously attempts to delete our executable
   // file.  When the executable no longer exists, remove its containing
   // subdirectory, and then delete the batch file too.
   hfile = CreateFile(DELUNSETUPBAT, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,                             FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);
   if (hfile != INVALID_HANDLE_VALUE) {

      TCHAR szBatFile[1000];
      TCHAR szUnsetupPathname[_MAX_PATH];
      TCHAR szUnsetupPath[_MAX_PATH];
      DWORD dwNumberOfBytesWritten;

      // Get the full pathname of our executable file.
      GetModuleFileName(NULL, szUnsetupPathname, _MAX_PATH);

      // Get the path of the executable file (without the filename)
      lstrcpy(szUnsetupPath, szUnsetupPathname);
      *_tcsrchr(szUnsetupPath, __TEXT('\\')) = 0;     // Chop off the name

      // Construct the lines for the batch file.
      wsprintf(szBatFile,
         __TEXT(":Repeat\r\n")
         __TEXT("del \"%s\"\r\n")
         __TEXT("if exist \"%s\" goto Repeat\r\n")
         __TEXT("rmdir \"%s\"\r\n")
         __TEXT("del \"%s\"\r\n"), 
         szUnsetupPathname, szUnsetupPathname, szUnsetupPath, DELUNSETUPBAT);

      // Write the batch file and close it.
      WriteFile(hfile, szBatFile, lstrlen(szBatFile) * sizeof(TCHAR),
         &amp;dwNumberOfBytesWritten, NULL);
      CloseHandle(hfile);

      // Get ready to spawn the batch file we just created.
      ZeroMemory(&amp;si, sizeof(si));
      si.cb = sizeof(si);

      // We want its console window to be invisible to the user.
      si.dwFlags = STARTF_USESHOWWINDOW;
      si.wShowWindow = SW_HIDE;

      // Spawn the batch file with low-priority and suspended.
      if (CreateProcess(NULL, DELUNSETUPBAT, NULL, NULL, FALSE,
         CREATE_SUSPENDED | IDLE_PRIORITY_CLASS, NULL, __TEXT("\\"), &amp;si, &amp;pi)) {

         // Lower the batch file's priority even more.
         SetThreadPriority(pi.hThread, THREAD_PRIORITY_IDLE);

         // Raise our priority so that we terminate as quickly as possible.
         SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
         SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);

         // Allow the batch file to run and clean-up our handles.
         CloseHandle(pi.hProcess);
         ResumeThread(pi.hThread);
         // We want to terminate right away now so that we can be deleted
         CloseHandle(pi.hThread);
      }
   }
}


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P>This batch file attempts to delete the UNSETUP.EXE file. If the file is not deleted because it is still executing, the batch file attempts to delete the file again. When the executable file no longer exists, the batch file removes the subdirectory that contained the file and then deletes itself.</P>
<P>You'll notice that the DeleteExecutableBF function does a lot of work to run the batch file. The system always executes batch files inside a console window. There is no need for the user to know that you are running a batch file, so I set the STARTUPINFO's wShowWindow member to SW_HIDE.</P>
<P>Another thing to be aware of is that the batch file polls for the existence of the executable file. In a preemptive, multithreaded environment, polling is an awful thing to do because you are causing the system to waste precious CPU cycles. But in batch files, there is no way to call WaitForSingleObject or WaitForMultipleObjects, so you must use a polling technique.</P>
<P>However, you can adjust the priority class and relative thread priorities of the processes and threads involved with my solution. When the DeleteExecutableBF function calls CreateProcess to spawn the batch file, I specify both the CREATE_SUSPENDED and IDLE_PRIORITY_CLASS flags. The CREATE_SUSPENDED flag tells the system to create the console window (which will be invisible) to run the batch file, but the system is not allowed to schedule it any CPU time yet. The IDLE_PRIORITY_CLASS flag tells the system that this process should not be scheduled CPU time frequently. This way fewer CPU cycles will be wasted by the batch file while it polls for the executable file to terminate.</P>
<P>After CreateProcess returns, I explicitly set its primary thread's relative thread priority to THREAD_PRIORITY_IDLE. This further reduces the amount of CPU time that will be wasted by the batch file. Then I set the executable thread's relative priority to time critical and the executable's priority class to high. This causes the system to schedule CPU time to the executable's thread very frequently so that it can terminate as soon as possible. I do not set the priority class to real time because this would interfere with threads that are responsible for processing various hardware events.</P>
<P>After all of the thread priorities have been adjusted, I close the handle to the batch file's process and then resume the batch file's thread. This allows the system to schedule CPU time to execute the batch file, but not a lot of time to the batch file because its priority is so low. Finally, I close the handle to the batch file's thread and return from the DeleteExecutableBF function. At this point, you want the executable process to terminate as soon as possible so that the batch file will terminate, stop polling, and stop wasting CPU cycles.</P>
<P>The TDELEXE.C file (see <B>Figure 4</B>) is a small application that simply tests all of my techniques. When you invoke it, it asks the user with a message box (see <B>Figure 5</B>) how the user would like to delete the executable file. Of course, you can only run the program once since the EXE file is destroyed when the process terminates. If you can't easily rebuild the code, I suggest you make a backup of the original EXE file before running it each time. </P>
<P><B> Figure 4  TDELEXE.C</B></P>
<P><BR></P>
<PRE> /******************************************************************************
Module name: TDelExe.c
Written by:  Jeffrey Richter
Note:        This function tests the functions that delete our own executable.
******************************************************************************/


#define STRICT
#include &lt;Windows.h&gt;


///////////////////////////////////////////////////////////////////////////////


#include "RFoR.h"       // to delete this executable file on reboot.
#include "DelExe.h"     // to delete this executable file using a batch file.
#include "DelExeBF.h"   // to delete this executable file using code.


///////////////////////////////////////////////////////////////////////////////


int WINAPI WinMain (HINSTANCE hinstExe, HINSTANCE hinstExePrev, 
                    LPSTR lpszCmdLine, int nCmdShow) {

   int nId = MessageBox(NULL, 
      __TEXT("Choose Yes to delete this executable file on reboot.\n")
      __TEXT("Choose No to delete this executable file using a batch file.\n")
      __TEXT("Choose Cancel to delete this executable file using code.\n"),
      __TEXT("Delete Executable"), MB_YESNOCANCEL);

   switch (nId) {
      case IDYES:
         {
         TCHAR szPathname[_MAX_PATH];
         GetModuleFileName(NULL, szPathname, _MAX_PATH);
         ReplaceFileOnReboot(szPathname, NULL);
         }
         break;

      case IDNO:
         DeleteExecutableBF();
         // We want to terminate right away so that we can be deleted
         break;

      case IDCANCEL:
        DeleteExecutable(0, TRUE);
        // DeleteExecutable never returns back to us.
         break;
   }

       return(0);
}


///////////////////////////////// End of File /////////////////////////////////</PRE>
<P> </P>
<P><img src="WIN32QA5.gif"></P>
<P><B> Figure 5  TDELEXE</B></P>

<TABLE COLS="2" BORDER="0"><COLGROUP><COL WIDTH="221pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="2" VALIGN="TOP"><P> Have a question about programming in Win32? You can mail it directly to Win32 Q&amp;A, Microsoft Systems Journal, 825 Eighth Avenue, 18th Floor, New York, New York 10019, or send it to MSJ (re: Win32 Q&amp;A) via:</P></TD></TR><TR><TD VALIGN="TOP"><P> <BR>Internet:</P>
<P><BR>Internet:</P></TD><TD VALIGN="TOP"><P>Jeffrey Richter<BR>v-jeffrr@microsoft.com</P>
<P>Eric Maffei<BR>ericm@microsoft.com</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><I>This article is reproduced from Microsoft Systems Journal. Copyright © 1995 by Miller Freeman, Inc. All rights are reserved. No part of this article may be reproduced in any fashion (except in brief quotations used in critical articles and reviews) without the prior consent of Miller Freeman.</I></P>
<P>To contact Miller Freeman regarding subscription information, call (800) 666-1084 in the U.S., or (303) 447-9330 in all other countries. For other inquiries, call (415) 358-9500.</P></font></body></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>First Aid for the Thread-Impaired:  Using Multiple Threads with MFC</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1">
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">
<H1>First Aid for the Thread-Impaired:  Using Multiple Threads with MFC</H1><P>Russell Weisz</P>
<P><I>Russell Weisz is a software developer at The Windward Group, a Los Gatos, California-based company that provides software research and development, quality assurance, and documentation services. </I></P>
<P>For years, Windows programmers have been able to avoid using threads. With many applications going the Internet way, time is running out for applications that are not thread-based. After all, the Internet is not as fast as, er, a snail. But the Internet is just one of many places where threads are required for smooth-running programs. Because it's been years since a lot of us have been near a textbook that explains threads, I'm going to cover some of the groundwork for writing thread-based applications, and then show you how all of this is done with MFC. I will then provide an MFC class that will let you jump on the thread bandwagon as quickly as possible.</P>
<P>There are many ways of defining threads. A common definition of a thread is the basic entity to which the operating system allocates CPU time. You can also think of a thread in application terms. Every application has at least one thread—the primary thread that begins with the program's first executed instruction. In addition, the program can create secondary threads, which can be thought of as independent agents with instructions like "gather this data from the Internet and let me know when you're finished" or "monitor disk usage on the file server and alert me if it exceeds 90 percent busy." </P>
<P>So a thread, then, is an executing stream of code within an application that runs concurrently with the application's other threads, and shares an address space with them, along with access to the application's variables, file handles, device contexts, objects, and other resources. Threads are different from processes, which typically don't share resources or an address space and communicate only through the mechanisms that the operating system provides for interprocess communication, such as pipes, queues, COM, and DDE. Threads often use simpler, less resource-intensive forms of communication like semaphores, mutexes, and events. </P>
<P>Why and how do you use multiple threads in your projects? First, I'll explain why you would want to use threads; then to show you why, I'll create a new class, CMultiThread, that acts as a wrapper around the MFC CWinThread class. CMultiThread encapsulates many of the common details required for CWinThread applications, and makes it easier to create safe and readable multithreaded code. </P></font></body></HTML>

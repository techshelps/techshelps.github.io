<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Java Generated Client</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>The Java Generated Client</h2>

<p>Although by default the details of the Java client applet (see
Figure 15) are hidden by the builder&#146;s code generation, it
is useful to look at the client code to see better what is
happening there. Comments added to the generated code indicate
the various pieces incorporated on the client in order to present
and access remote C++ objects running on the server. It should be
noted that some generated code has been omitted for brevity. A
full example of the application can be inspected at
http://www.viewsoft.com/examples or by downloading it from any <i>MSJ
</i>source listed on page 5. </p>

<p><b>Figure 15 Java Thin Client Chat Applet</b> </p>

<dl>
    <dt>// Java File Generated By ViewSoft&#146;s Builder</dt>
    <dd><pre><span>// Portions Copyright (c) 1996 MSJ
package chat;
import java.applet.*;
import java.awt.*;
import java.util.*;
import viewsoft.*;
public class ChatPerson extends EosEmbeddedView
{
  // this section of the generated code is used for client/server communication
  // and basic object to dialog connections...
  // socket port used for remote server side communication private EosPort fPort;
  // information used to connect view to C++ object on the server
  private EosMapperTable fIdTable;
  public ChatPerson() { super(); init(); }

  // data state change management hooks
  public EosMapperTableEntry getProbe(int id)
  { return (EosMapperTableEntry) fIdTable.elementAt(id); }
  public void removeProbe(int id) { fIdTable.removeProbe(id); }
  public void setMapperTable(EosMapperTable table) { fIdTable = table; }

  // port assignment
  public void setPort(EosPort port) { fPort = port; }

  // &quot;resource&quot; generation for the ChatPerson object dialogs designed in the
  // builder... responds to applet request to create an instance of a
  // ChatPerson dialog
  public void createView(String viewName, Container shell)
  {
    // since an object can have multiple views a comparison is made when the
    // create view function is called
    if (viewName.equals(&quot;Chat&quot;))
    {
      int id;

      // create a geometry layout manager
      EosBoxContainer eosC1 = new EosBoxContainer();
      this.add(eosC1);

      // propagate communication variables
      eosC1.setPort(fPort);
      eosC1.setMapperTable(fIdTable);
      EosBoxContainer eosC2 = new EosBoxContainer();
      eosC1.add(eosC2);
      eosC2.setPort(fPort);
      eosC2.setMapperTable(fIdTable);

      // add the &quot;Chat&quot; label
      EosLabel eosC3 = new EosLabel();
      eosC2.add(eosC3);
      eosC3.setProperty(&quot;Caption&quot;, new EosString(&quot;Chat&quot;));

      // add the list box for the chat list
      EosListBox eosC4 = new EosListBox();
      eosC2.add(eosC4);

      // probe ids...used to connect dialog elements to the object running on 
      // the server
      id = fIdTable.attachProbe(eosC4, &quot;fInvalidate&quot;);
      eosC4.setUp(fPort, &quot;fInvalidate&quot;, id);
      id = fIdTable.attachProbe(eosC4, &quot;select&quot;);
      eosC4.setUp(fPort, &quot;select&quot;, id);
      id = fIdTable.attachProbe(eosC4, &quot;insert&quot;);
      eosC4.setUp(fPort, &quot;insert&quot;, id);
      id = fIdTable.attachProbe(eosC4, &quot;fRemove&quot;);
      eosC4.setUp(fPort, &quot;fRemove&quot;, id);
      id = fIdTable.attachProbe(eosC4, &quot;fRemoveAll&quot;);
      eosC4.setUp(fPort, &quot;fRemoveAll&quot;, id);
      id = fIdTable.attachProbe(eosC4, &quot;set&quot;);
      eosC4.setUp(fPort, &quot;set&quot;, id);

      // create a row/column layout manager
      EosGridContainer eosC5 = new EosGridContainer();
      eosC1.add(eosC5);

      // propagate communication variables
      eosC5.setPort(fPort);
      eosC5.setMapperTable(fIdTable);

      // &quot;My Name&quot; label
      EosLabel eosC6 = new EosLabel();
      eosC5.add(eosC6);
      eosC6.setProperty(&quot;Caption&quot;, new EosString(&quot;My Name:&quot;));

      // horizontal layout manager
      EosBoxContainer eosC7 = new EosBoxContainer();
      eosC5.add(eosC7);
      eosC7.setPort(fPort);
      eosC7.setMapperTable(fIdTable);

      // user name edit box
      EosTextField eosC8 = new EosTextField();
      eosC7.add(eosC8);
      // probe ids
      id = fIdTable.attachProbe(eosC8, &quot;fText&quot;);
      eosC8.setUp(fPort, &quot;fText&quot;, id);

      // send button
      EosButton eosC9 = new EosButton();
      eosC7.add(eosC9);
      // probe ids
      id = fIdTable.attachProbe(eosC9, &quot;fPressed&quot;);
      eosC9.setUp(fPort, &quot;fPressed&quot;, id);
      eosC9.setProperty(&quot;Caption&quot;, new EosString(&quot;Send&quot;));

      // &quot;Message&quot; label
      EosLabel eosC10 = new EosLabel();
      eosC5.add(eosC10);
      eosC10.setProperty(&quot;Caption&quot;, new EosString(&quot;Message:&quot;));

      // edit box for the client message
      EosTextField eosC11 = new EosTextField();
      eosC5.add(eosC11);
      // probe ids
      id = fIdTable.attachProbe(eosC11, &quot;fText&quot;);
      eosC11.setUp(fPort, &quot;fText&quot;, id);
    } 
  }
}
</span></pre>
    </dd>
</dl>

<p>There are three main pieces to the Java applet that are
generated to successfully deploy Internet thin-clients attached
to C++ server executables. These are: socket communication,
dialog resource description and creation, and remote C++ member
attachment and connection protocols. These three components work
in concert to create a Java applet that has minimal client-side
resource requirements while still providing optimal communication
performance over various Internet access speeds. </p>

<p><img src="Thin16.gif" width="435" height="417"></p>

<h4>Figure 16 demonstrates the client view of the chat
application running in Internet Explorer. </h4>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cycle Reduction</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>Cycle Reduction</h2>

<p>When monitoring data changes on objects, cycles can occur that
would cause infinite callback conditions. For example, the
following doTransaction function gets called: </p>

<pre><span>	void doTransaction()
	{
 	A = 10;
	}
</span></pre>

<p>A callback function, AChanged(int a), was added to the
callback list on the A member so that, when A is assigned to 10,
the AChanged function is called: </p>

<pre><span>	void AChanged(int a)
	{
 	B = 20;
                        	}
</span></pre>

<p>A callback function, BChanged, was in turn added to the B data
member, and so it is called as well. </p>

<pre><span>void BChanged(int b)
{
 doTransaction();
}
</span></pre>

<p>Notice that the BChanged function calls the same function that
started the chain of functions to be called in the first place.
This creates an infinite cycle. Unless reduced, this sequence of
changes and notifications will happen at a furious pace so long
as the system stack will permit. The solution is to set a flag so
that if the data change callback notification happens while that
same data is being changed, the callback function isn&#146;t
called again. </p>
</font></body>
</html>

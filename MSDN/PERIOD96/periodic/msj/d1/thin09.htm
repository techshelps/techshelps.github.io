<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Meta Data</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>Meta Data</h2>

<p>Having defined the requirements of Internet applications and
the architecture necessary to implement them, let me highlight
the specific characteristics of a Visual C++ development
framework that would enable the creation, deployment, and
maintenance of such applications. The framework includes the
following capabilities and features: meta data, state change
notification, callbacks, runtime binding, cycle reduction,
synchronization, and model-view separation. Now, let&#146;s take
a closer look at each of these components. </p>

<p>Meta data is a format for describing the structure of
application objects. In the world of C++, meta data would include
information about a class structure, for example, the name of a
class, its functions and fields, their types, and so on. The
Internet&#146;s protocol for discovering the structure of content
on the server is HTML. The HTML format couples content and meta
data for remote information access. HTTP makes requests on parts
of the server content by performing a GET command. The argument
of the GET command (the path to the HTML file of interest) is
really information about the data the user is trying to access<font
face="Symbol">¾</font>the meta data. Ideally, application
objects are viewed and manipulated over the Internet by accessing
them through what I like to call a meta interface. </p>

<p>An effective framework for accessing C++ objects over the Web
should be inherently self-describing. In other words, clients are
able to access objects&#146; services and structures to attach to
these objects. A protocol similar to HTTP incorporated into the
framework would enable applet clients to perform
application-level GET commands for accessing server-side C++
objects. This same protocol would also support server-side pushes
that move C++ object state changes to the client when the object
state changed. Meta information is the glue that enables remote
presentation to attach to C++ objects on the server. </p>
</font></body>
</html>

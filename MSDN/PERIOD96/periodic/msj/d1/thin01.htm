<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Leveraging Your Visual C++ Experience on the Internet with Thin Client Technology</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h1>Leveraging Your Visual C++ Experience on the Internet with
Thin Client Technology</h1>

<p>David C. Mitchell </p>

<p><i>David C. Mitchell is the founder and chief technical
officer of ViewSoft, a provider of thin client Internet
development technology. He can be reached at davem@viewsoft.com
or www.viewsoft.com.</i> </p>

<p>There you are, minding your own business, trying to get some
real work done, while the rest of the world surfs the Net.
You&#146;ve got nothing against HTML or Web pages, and both
Javaª and ActiveXª look promising. But you&#146;ve been so busy
building giant programs using Visual C++¨, you just haven&#146;t
had time to sort through all the hype and figure out exactly
which tools you&#146;re going to use to take these real
applications to the Internet. </p>

<p>Let&#146;s discuss what you as a developer can do to exploit
your Visual C++ experience in the Internet environment. I&#146;ll
present a way to use the Internet deployment standards offered by
Java and still maintain C++ development (including the C++ code
that you are currently working on). I&#146;ll also focus on the
thin client model and why it is best suited for Internet
applications. You&#146;ll see why traditional client/server
models have limited flexibility in the context of the Internet.
I&#146;ll develop a &#147;litmus test&#148; for determining how
effective an application&#146;s architecture is at exploiting the
Internet. Based on the litmus test, I&#146;ll define a framework
that allows you to create thin client applications and deploy
them over the Internet using Java&#146;s cross-platform toolkit,
AWT. I&#146;ll include various code examples that demonstrate a
framework that has already been developed. </p>

<p>A pared-down version of this framework along with support
tools to use the framework is available on http://www.msj.com or
any of the other sources listed on page 5. The framework and
tools supplied are sufficient to develop all of the samples in
this article. For this article, I&#146;ll focus on the Java
solution-in a future article, I&#146;ll show you how to use
ActiveX to develop a thin client. </p>
</font></body>
</html>

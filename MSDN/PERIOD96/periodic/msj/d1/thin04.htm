<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Just Enough Java</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>Just Enough Java</h2>

<p>An important part of the litmus test is the
application-deployment mechanism. Applications should be able to
run without needing client software or plug-ins to be installed
prior to connection. This dynamic deployment mechanism enables
all or part of the application to be downloaded to the client
machine and run locally, allowing the application to benefit from
local machine services such as the display, input devices, and
local interactive controls in the user interface. Application
performance and interactivity are made possible because code is
downloaded and run on the local machine. </p>

<p>What parts of the application really need to be downloaded and
run? Certainly not the application logic. Application logic
interacts with data not on the client machine (for example,
corporate databases, data repositories, and shared information
services). In addition, the application logic I&#146;m talking
about consists of C++ objects running on the server. </p>

<p>The part of the application that gets downloaded and run on
the client machine is the presentation layer. But how do you get
the presentation onto the client machine? This presentation layer
includes the GUI elements along with just enough application
logic to convert user interface events into object state changes.
These state changes, and only these state changes, are what your
client will send across the Internet to the server. </p>

<p>One way to do this is by using what I call &#147;Just Enough
Java.&#148; This use of Java is simply pragmatic. Besides
providing a dynamic download of the presentation layer, Java
offers platform independence, effectively making your Visual C++
applications cross-platform. In addition, as a client-side
solution, Java takes advantage of its virtual-machine security
model. </p>
</font></body>
</html>

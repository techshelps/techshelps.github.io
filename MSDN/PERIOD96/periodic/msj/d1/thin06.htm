<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transparent Collaborative Support</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>Transparent Collaborative Support</h2>

<p>Another issue for the litmus test is in the area of
collaboration. Collaboration should be a central theme when you
talk about the Internet. A Web development effort should not be
considered without taking into account how multiple simultaneous
users will access that application. Any environment or framework
should be able to abstract or automate collaborative capability
at some level. </p>

<p>I believe that there are two ways in which collaboration can
be made possible with minimal developer involvement. The first
would be through a codeless presentation model. By codeless I
mean that the presentation layer of an application would contain
as little application logic as possible (or none) that directly
manipulates shared object states. What this means is that object
state manipulation code shouldn&#146;t be downloaded to the
client machine. In an ideal codeless presentation model, the
presentation logic executed on the client machine deals only with
user interaction (GUI events), transforming those events into
data state change commands. Client data state changes should then
be packaged and sent to the server to update its objects&#146;
states and, in turn, update any other interested clients
currently looking at the state of those server objects. The logic
that operates on the shared data would be an encapsulated C++
object running on the server machine. The presentation layer
would represent a remote client to that object&#146;s services.
The central shared object would be accessed by multiple
simultaneous clients. </p>

<p>Another collaboration technique allows many clients to have
simultaneous dynamic access to a running application. An
application framework with such a runtime binding capability
could allow clients to attach or detach a particular application
during program execution. Since application logic is just another
kind of content that can be encountered on the Internet, the same
should be the case for applications as well. Runtime binding on
an application would allow a client to access an application
object&#146;s state without involving the shared object directly.
By dynamically allowing access to the C++ object, the details for
client attachment to that object wouldn&#146;t have to be handled
by the implementor of the class. This general lack of direct
developer involvement in the control of collaboration access
would greatly simplify the process of writing a
multi­user-access Internet app. </p>
</font></body>
</html>

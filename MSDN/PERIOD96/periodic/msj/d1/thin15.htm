<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Complete Presentation Decoupling</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>Complete Presentation Decoupling</h2>

<p>In the thin client architecture, user interfaces visually
represent objects running on the server. In an ideal environment,
the presentation is separated from the objects themselves. Figure
9 illustrates the point. </p>

<p><img src="Thin9.gif" width="672" height="327"> </p>

<p><b>Figure 9 Presentation Decoupling</b> </p>

<p>In Figure 9<b>, </b>a class (ChangeValue) contains a sin­gle
data member (value) and two functions (addToValue and
subtractFromValue). This ClassView tool is part of the framework
package available from the sources listed on page 5. The
ChangeValue class, when instantiated at runtime, will execute on
the server. A dialog can be created that visually represents the
entire class. The scroll bar and the edit box are both client
controls attached to the class member int value. The buttons
control the direct invocation of the member functions of the
class. The lines shown between the client presentation and the
server C++ object represent the state change management
relationship that exists between the thin client and the
server-based application object. </p>

<p>In this example, the user would look at the presentation
embedded in the HTML page as a Java applet. The object (the
effective content for the client presentation) is manipulated as
the user interacts with the thin client interface. For example,
suppose the user presses the Add button. This causes the client
to initiate a command to call the member function addToValue on
the ChangeValue class. The following code is written for the
addToValue function: </p>

<pre><span>void ChangeValue::addToValue()
{
 // change the value, this may create callbacks to occurs depending
 // on the number of clients currently interested in this value
 value += 10;
}
</span></pre>

<p>The value change will produce a set of callbacks to be
invoked, which will subsequently update any thin clients
currently attached to the ChangeValue object, including the
scroll bar and edit box shown on the page where the user pressed
the button. </p>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Whatís Interesting About the Internet?</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<h2>What&#146;s Interesting About the Internet?</h2>

<p>Before jumping in on the thin client application development
model, let&#146;s review why everybody is so excited about using
the Internet infrastructure for application deployment. The most
obvious reason the Internet is so interesting is because it gives
users remote access to information. More information is available
than will ever fit on a client machine. The question then
becomes, which model best enables on-demand, source-independent
information browsing? </p>

<p>Figure 1 shows the basic client/server model of the Internet.
The client provides the presentation context, typically a browser
such as Microsoft Internet Explorer or Netscape Navigator that
allows remote data to be viewed through the HTML presentation
layer. This data represents a slice of the content of the
Internet. The network moves the content to the presentation
context via HTTP. </p>

<p><img src="thin1.gif" width="283" height="80"> </p>

<p><b>Figure 1 Client/Server Model</b> </p>

<p>URLs further separate the location of content from the
presentation context, allowing a browser to access multiple
servers and their associated data. Actual access to the content
is deferred until the user wants to see it. This deferral
mechanism places minimal demands on the network and avoids the
transfer of unnecessary data to the client machine. This approach
facilitates the exposure of a maximum amount of remote resources
with the minimum use of network and client-side resources (see
Figure 2). </p>

<p><img src="thin2.gif" width="296" height="278"> </p>

<p><b>Figure 2 Remote Data</b> </p>

<p>Remote data isn&#146;t the only reason why the Internet is
interesting—users also want to access logic and services not on
their local machines. URLs are as useful as locators for remote
logic and services as they are for remote data. It&#146;s the
combination of data and logic that forms the new content for the
Internet. As illustrated in Figure 3, the structure is the same. </p>

<p><img src="thin3.gif" width="297" height="375"> </p>

<p><b>Figure 3 Remote Data and Logic</b> </p>

<p>The new content for the Internet is objects<font face="Symbol">æ</font>specifically,
C++ classes that exist on the server. These are the regular kinds
of C++ classes you create, edit, compile, and debug with the
Visual C++ development environment. Although the current approach
to Internet deployment is typically procedural, where the data
operates separately from the logic, it can be enhanced with the
object-based model you&#146;re used to. </p>

<p>ActiveX and Java give application deployment more flexibility.
The client becomes a mechanism for accessing remote objects on
remote servers (see Figure 4). The server contains data and
logical content in program structures such as C++ classes. </p>

<p><img src="thin4.gif" width="446" height="256"> </p>

<p><b>Figure 4 Remote Object Deployment </b></p>

<p>How can remote objects best be exposed to the client user over
the network infrastructure? The Internet&#146;s greatest
potential is realized when logic and services, together with
content, are presented to multiple users in a context of
transparent, real-time collaboration (see Figure 5).
Collaboration in a network environment means that two or more
users can communicate with one another by viewing or interacting
with common data and services. The sessionless nature of the
Internet lets multiple clients access an object&#146;s state
concurrently. </p>

<p><img src="thin5.gif" width="390" height="353"> </p>

<p><b>Figure 5 Real-time Multiple User Collaboration</b> </p>

<p>Collaboration on the Internet removes the user&#146;s
dependency on the location of information and services by
allowing many users to interact with information freed from the
constraints of monolithic applications. But collaboration in an
Internet environment is a particularly difficult task. </p>
</font></body>
</html>

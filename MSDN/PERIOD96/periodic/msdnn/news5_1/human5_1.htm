<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template"
content="C:\apps\WINWORD\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Human Factor</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2>
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">The Human Factor: Be
Persistent</font></p>

<p><font size="2"><i>by Tandy Trower</i></font></p>

<p><font size="2">Human beings function best in an environment in
which they feel in control of their circumstances. They also
prefer a working environment in which things remain as they were
left.</font></p>

<p><font size="2">Imagine how disruptive it would be if you
carefully arranged papers and books on your desk for a particular
task, only to return the next day to find that someone had
rearranged them. Yet most applications are designed exactly this
way. When a user restarts Windows, documents that were open when
the system was last shut down are rarely restored. Similarly,
reopening a document&#146;s window rarely redisplays the window
in the same location or size, let alone restores its previous
selection and scroll position.</font></p>

<p><font size="2">Where applications do retain information, such
as content, they typically put the burden of retaining state on
the user&#146;s shoulders. Users choose an explicit command (for
example, Save) to retain their data; otherwise they lose whatever
changes or additions they made.</font></p>

<p><font size="2">This is an unnatural model, a tradeoff designed
primarily to handle technology limitations. In the non-PC world,
the act of creation implies persistence. For example, writing
down a set of notes with pen and paper doesn&#146;t require
clicking a Save button. Information automatically persists.
Removing it requires an explicit action. With such a reversed
model, it is not surprising that many new computer users find PC
applications difficult to understand. However, this need not be
the case, especially with some of the new conventions in the
Windows 95 operating system.</font></p>

<p><font size="4" face="verdana"><b>Restoring Windows</b></font></p>

<p><font size="2">Have you noticed that, on startup, Windows
automatically restores folder windows that were open when the
user shut down the system? This is a good example of persistence.
What you may not be aware of is that your application can support
the same model. It just takes a bit of extra work.</font></p>

<p><font size="2">When a user clicks the Shut Down command or
chooses to log off, your application gets a WM_ENDSESSION message
from the system. At this point, in addition to saving the
user&#146;s data, you can also store the state of the application
and its window. For example, consider storing the position and
size of the window, view type, scroll position, current
selection, and probably the location and configuration of any
toolbars and any supporting windows such as floating palette
windows. You can store this state data in the registry in a
subkey entry you create under:</font></p>

<p><font size="2">&nbsp;&nbsp;&nbsp;HKEY_CURRENT_USER\Software\<b><i>CompanyName</i>\<i>ProductName</i>\<i>Version</i></b></font></p>

<p><font size="2">where the entries in italics represent your
application. The structure you create under this subkey is up to
you. Use the registry rather than an .INI file because the
registry allows you to tailor what you are saving to the specific
user who has logged on.</font></p>

<p><font size="2">Then, add a data name-value pair entry to the <b>RunOnce</b>
subkey of HKEY_CURRENT_USER. You may have to add the subkey if it
doesn&#146;t already exist (under the <b>CurrentVersion</b>
subkey). The data name-value pair should correspond to a unique
application identifier and appropriate command line to restart
your application with the appropriate data. You may want to
support a command-line parameter for starting up from system
startup. For example:</font></p>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;HKEY_CURRENT_USER</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Software</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp&nbsp;&nbsp;;Microsoft</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentVersion</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RunOnce
WordPad Document 1 = C:\Program Files\WordPad.exe Letter to Bill /R</font>

<p><font size="2">When the system restarts, and the corresponding
user logs on, your command line will be executed. When your
application starts, you can use the command line you stored here
and the state data you stored in your application&#146;s <i>CompanyName</i>\<i>ProductName</i>\<i>Version</i>
subkey to restore the application to its previous state. Once
executed, the <b>RunOnce</b> entry is removed by the system,
which means you have to write this entry into the registry each
time you handle the shutdown message.</font></p>

<p><font size="2">Be careful not to confuse the <b>RunOnce</b>
entry under HKEY_CURRENT_USER with the <b>RunOnce</b> entry
available under HKEY_LOCAL_MACHINE. This latter entry runs the
associated command line <i>before</i> Windows starts and affects <i>all</i>
users who use the computer.</font></p>

<p><font size="2">You need not limit preservation of state to
system shutdown. Recording and restoring the state can be applied
between any opening and closing of a file. Of course, in this
scenario you need to consider further how you will store state.
While you can still use your registry entries, you don&#146;t
want to store state for every file the user opens. Instead, you
might want to cache some limited number, just as the system
retains only a limited number of files for the Documents submenu
in the Start menu. Alternatively, consider storing the state in
the file itself.</font></p>

<p><font size="4" face="verdana"><b>Reopening Secondary
Windows</b></font></p>

<p><font size="2">In general, the principle of returning to the
previous state when a user reopens a window can be applied to
secondary windows as well. For example, if the user displayed a
palette window at a particular location, closed it, and then
reopened it, place it at the same location. Similarly, it is
usually best to set an Open dialog box to the same location as
the last file that was opened. When supporting tabs (tabbed
pages) in property sheets or other secondary windows, it is
usually best to return to the last page a user accessed, rather
than always return to one particular page, because most
property-oriented activities are repetitive.</font></p>

<p><font size="4" face="verdana"><b>Exceptions to the Rule</b></font></p>

<p><font size="2">As with most rules, there are exceptions to the
principle of using persistence to display information. If the
structure of a task benefits users by always starting with a
fixed presentation, it is appropriate to use that model instead.
For example, &quot;wizard&quot; user assistance-style designs (as
you find in Windows 95 when you install a new printer) always
begin at the starting page. For sequential processes, this makes
more sense.</font></p>

<p><font size="2">Similarly, the context of how something appears
may affect how you present information. For example, if the
resolution or orientation of the screen changes, you may need to
adjust where a window appears. Obviously, you don&#146;t want a
window appearing offscreen. Likewise, pop-up context-sensitive
Help windows need to be positioned based on what they describe.
In addition, message box windows are usually better displayed in
a consistent location (centered relative to the screen) than
where the user may have moved the last message box window.</font></p>

<p><font size="4" face="verdana"><b>Continuous Save</b></font></p>

<p><font size="2">For file-oriented applications, you should
consider evolving toward a continuous save model where changes
are automatically saved. For example, no one assumes that you
have to choose a Save command after changing the contents of a
folder to preserve those changes. Similarly, Microsoft Schedule+
presents a model where new entries or changes to existing
appointments are automatically updated. This is a great model
because users never have to think about preserving their changes.
The system automatically handles this for them.</font></p>

<p><font size="2">However, continuous or transparent saving of
changes is not the full story. Applications that attempt
continuous save without supporting the ability to revert may
result in users inadvertently losing data since they often modify
or experiment with existing data. In some scenarios, users may
wish to make changes and still return to their previous state.
For these situations, you will still want to provide users with
the ability to roll back changes either through an Undo facility
or some type of automatic backup support (or both) that allows
them to return to their original or last checkpoint.</font></p>

<p><font size="2">This doesn&#146;t mean that existing
applications looking to evolve toward a continuous save model
need to abandon their existing Save command. The command can
still be used for creating checkpoints and supporting the
transition to a more automated model.</font></p>

<p><font size="4" face="verdana"><b>The Motivation&#151;Ease
of Use</b></font></p>

<p><font size="2">There may be exceptions to automatically
maintaining state, but it is still an important model that needs
to be considered. Too often the easy way out is to ignore the
issue or leave the user with the burden of preserving state. The
objective of good software design should be to improve
users&#146; ease of use and efficiency in accomplishing their
tasks.</font>
<p><font size="2"><i>Tandy Trower was, is, and persistently
continues to be the director of user interface design at
Microsoft, although friends think of him as the Secretary of
State.</i></font>
<p align="center"><font color="#0000ff" size="2" face="Arial">In
the non-PC world, the act of creation implies persistence. </font></p>
<p align="center"><font color="#0000ff" size="2" face="Arial">It
is usually best to set an Open dialog box to the same location as
the last file that was opened.</font></p>

</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How can I integrate the Internet into my application?</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<p><font color="#000000" size="5" face="verdana,arial,helvetica">How
can I integrate the Internet into my application?</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">There
are a number of ways to use Microsoft technology to integrate the
Internet into applications. An upcoming article will explain this
in more depth, with examples. For now, check out the ActiveX
development kit (</font><a
href="http://www.microsoft.com/workshop/prog/sdk/sdk.htm"><font
color="#000000" size="2" face="verdana,arial,helvetica">http://www.microsoft.com/workshop/prog/sdk/sdk.htm</font></a><font
color="#000000" size="2" face="verdana,arial,helvetica">) for
more information. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">The
simplest method is to just fire off the browser with the URL you
want to view and let Windows and the browser take care of it. The
browser runs in a separate frame window as a separate
application, so your application has no control over the browser.
Still, this method is pretty common, and the user will probably
be familiar with the browser's UI. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
more control, you can use the browser's OLE Automation model to
access the browser's capabilities. To do this, create a browser
automation object and call its methods. It's better, but you
still have a separate window and UI for the browser. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dr.
GUI thinks it's even better to tightly integrate the HTML viewer
into your application using ActiveX controls provided by
Microsoft. These controls can be embedded in any Visual C++,
Visual Basic, Visual FoxPro, or Microsoft Access
application&#151;or in any other application that can host
ActiveX controls. For a while now, an HTML control that supports
most of the Internet Explorer 2.0 feature set has been available
as part of the Internet Control Pack (</font><a
href="http://www.microsoft.com/icp/"><font color="#000000"
size="2" face="verdana,arial,helvetica">http://www.microsoft.com/icp/</font></a><font
color="#000000" size="2" face="verdana,arial,helvetica">). You'll
also find there a Visual Basic sample that uses this control. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">But
Dr. GUI's long-term prescription is to use a better HTML
control&#151;the same one that will be used by Internet Explorer
3.0 (and, later, the Nashville shell) to display Web pages. You
can use the very same control&#151;Microsoft will be shipping it
with IE 3.0. (An early version is available now with the ActiveX
Development Kit.) This control, MSHTML, supports all of the cool
IE3 stuff: Hosting of ActiveX controls, documents, frames,
scripting, and so forth. Check the ActiveX Development Kit for
information about redistributing the appropriate code. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">While
we made efforts to make the programming models for the two
controls similar, they're not identical&#151;so if you write your
app using the ICP HTML control and then switch to MSHTML, you're
going to have to make some changes to your app. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">By
the way, the Internet Control Pack also contains controls that
encapsulate various other Internet capabilities: Sockets (TCP,
UDP), higher-level protocols (FTP, HTTP), and messaging protocols
(POP3, SMTP, NNTP). You may want to use these controls for
applications that need to communicate over the Internet but don't
need to display Web pages.</font></p>
</font></body>
</html>

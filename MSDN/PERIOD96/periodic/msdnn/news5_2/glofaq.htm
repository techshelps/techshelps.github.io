<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template"
content="C:\apps\WINWORD\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Globalizing Applications for Windows: FAQ</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">

<p><font size="6" face="verdana">Globalizing Applications
for Windows: More Frequently Asked Questions</font></p>

<p><font size="2"><b>Q: I have the Japanese version of Win32s.
Where can I get Win32s for Taiwan, Korea, and Mainland China?</b></font></p>

<p><font size="2">A: Japanese Win32s is the only localized
version of Win32s for double-byte languages. An unlocalized
version of Win32s that is double-byte-enabled (called &quot;Far
East Win32s&quot;) is available on the MSDN Development Platform.
This version will work for Chinese and Korean. The current
edition, as of January 1996, is 1.30c.</font></p>

<p><font size="2"><b>Q: Can I test double-byte-enabled programs
with Visual Test 4.0?</b></font></p>

<p><font size="2">A: Yes, the U.S. version of Visual Test 4.0 is
fully double-byte-enabled and is also enabled for the Windows 95
Input Method Editor (IME). You can run Visual Test 4.0 on the
Japanese, Chinese, or Korean versions of Windows 95 and Windows
NT to test applications enabled for the double-byte character set
(DBCS).</font></p>

<p><font size="2"><b>Q: The English version of my product has
qualified for the Windows 95 logo. I would now like to get the
logo for the Japanese edition of my product. What should I do?</b></font></p>

<p><font size="2">A: If the product has simply been localized
(that is, major functionality has not been changed), the product
does not need to be retested to get the Windows 95 logo for other
languages. Note that if you do retest, your Japanese Windows
95-based application should run on Japanese Windows NT 3.51, not
on Japanese Windows NT 3.5.</font></p>

<p><font size="2"><b>Q: Can international product developers
expect the backslash and colon hex code points in file paths to
be the same all over the world? I understand the backslash is the
yen symbol in Japan, but the hex code point works OK as the file
path separator. Can the user configure the file path separator?</b></font></p>

<p><font size="2">A: Character 0x5c is always the directory
delimiter, no matter what glyph it is associated with in a
particular code page (for example, the Yen symbol in the Japanese
code page). It&#146;s not user-configurable.</font></p>
<p><font size="2"><b>Q: Will U.S.-only applications run on a
non-U.S.-English version of Windows 95?</b></font></p>

<p><font size="2">A: This shouldn&#146;t be a problem, since the
U.S. ASCII character set is a subset of every code page.
(Actually, cp 932&#151;shift JIS&#151;has a yen mark where the
backslash should be, but people just use the yen mark in path
names as if it were a backslash, so there&#146;s no effective
difference.) Also, non-U.S. English versions of Windows 95 are
all supersets of the U.S. version. However, you should test your
application on a DBCS version of Windows, such as Japanese
Windows 95, just to be sure.</font></p>

<p><font size="4" face="verdana"><b>Unicode</b></font></p>

<p><font size="2"><b>Q: Can I create Unicode-based applications
using Visual Basic 4.0?</b></font></p>

<p><font size="2">A: By default, Visual Basic relies on whichever
code page is loaded for the operating system, but you can handle
Unicode data in Visual Basic 4.0. Visual Basic will convert to or
from Unicode when calling into dynamic-link libraries (DLLs) or
when reading or writing to files. There is also a function called
<b>StrConv</b> that will do ANSI/Unicode translations. You can
always call the Win32 <b>MultiBytetoWideChar </b>function, but to
pass a Unicode string you would need to create a <b>typelib</b>
for the declaration and set the parameter as a <b>BStr</b>.
Visual Basic 4.0, which is 32-bit, uses Unicode internally.</font></p>

<p><font size="2"><b>Q: How do I implement a Unicode application
on all three Win32 platforms (Windows 95, Windows NT, and Windows
3.1 using Win32s)?</b></font></p>

<p><font size="2">A: You can make a single binary that runs on
all three platforms (including Win32s), but it takes some work.
You basically have to write wrapper functions for the Win32 API
functions that deal with strings (hereafter I&#146;ll use <b>CreateWindowU</b>
as an example of these wrapper functions). Inside the function
you&#146;ll detect the platform using <b>GetVersionEx</b>. If
it&#146;s Windows NT, you&#146;ll just call the &quot;W&quot;
version of the functions (e.g., <b>CreateWindowW</b>). </font></p>

<p><font size="2">However, if the platform is Windows 95 or
Win32s, you&#146;ll need to convert the Unicode input/output
string to/from the local code page before/after you call the
&quot;A&quot; (code page) version of the function (e.g., <b>CreateWindowA</b>),
using <b>WideCharToMultiByte/MultiByteToWideChar</b>.</font></p>

<p><font size="4" face="verdana"><b>European Languages</b></font></p>

<p><font size="2"><b>Q: I&#146;m using LCMapString to strip
diacritics from Danish characters, and it is stripping the
accents from &quot;Ø&quot; and &quot;Å&quot;&#151;these letters
are treated as separate letters in Danish and should not be
treated as accented characters. Is this a system bug?</b></font></p>

<p><font size="2">A: <b>LCMapString</b> will always remove
diacritics to get the base characters for ALL languages.
&quot;Ø&quot;, &quot;Å&quot;, and several other characters are
unique to Danish; they are not base characters plus diacritics.
However, Microsoft chose not to implement a language-specific <b>LCMapString</b>
because doing so requires additional, complex code to swap
tables, and other international features took precedence.</font></p>


<p align="center"><font color="#0000ff" size="2" face="Arial">Japanese
Win32s is the only localized version of Win32s for double-byte
languages.</font>
<p align="center"><font color="#0000ff" size="2" face="Arial">You
can run Visual Test 4.0 on the Japanese, Chinese, or Korean
versions of Windows 95 and Windows NT to test DBCS-enabled
applications.</font></p>

<p><font size="2">A complete version of this article can be found
on <i>For Developers Only,</i> Microsoft&#146;s World Wide Web
site, at:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://www.microsoft.com/devonly/tech/global/default.htm">http://www.microsoft.com/devonly/tech/global/default.htm</a></font></p>

</font></body>
</html>

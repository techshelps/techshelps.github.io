<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!	10/26/94	11:28 AM">
<meta name="Template"
content="C:\apps\WINWORD\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Hot Date: How OLE Automation Boosts Functionality in Schedule+</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">A Hot Date: How OLE
Automation Boosts Functionality in Schedule+</font></p>

<p><font size="2"><i>by Kenneth Lassesen</i></font></p>

<p><font size="2">Microsoft Schedule+ for Windows 95 is one of
the first OLE Automation-centric applications. Traditionally, OLE
Automation servers have centered around the user interface, that
is, the OLE Automation command set provided a subset of the
capabilities available in the UI. In Schedule+ 95, however, the
OLE Automation command set provides a superset of the Schedule+
UI capabilities. As a result, you can extend the functionality of
a Schedule+ application beyond the capabilities of its UI.</font></p>

<p><font size="2">This means, for example, that Personal
Information Managers (PIMs) that use Schedule+ can become more
elegant and powerful. This extensibility, however, requires a few
changes in how developers think about OLE Automation.</font></p>

<p><font size="4" face="verdana"><b>Three different views,
three different maps</b></font></p>

<p><font size="2">The model for Schedule+ OLE Automation is
different from the models of other Microsoft OLE Automation
servers (Microsoft Excel, Microsoft Word, or Microsoft
PowerPoint) in that Schedule+ uses <i>object overloading</i> (one
class is used for many named objects) to create a single OLE
Automation server with three different views or appearances. Each
view is represented with a different map: The type library (SPL)
map, the programming model (PM) map, and the internal objects
(IO) map.</font></p>

<p><font size="2">The Schedule+ type library (SPL) exposes only
five objects, as shown in Figure 1. These objects are a
distillation of the entire server. SPL is intended for use by
Visual C++ programmers and experienced Visual Basic for
Applications developers.</font></p>

<p><img src="Image6.gif" width="472" height="280"></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 1: A Map
of the Schedule+ 95 type library (SPL)</i></font></p>

<p><font size="2">The SPL provides Schedule+ constants and should
always be included in your references. The SPL lacks <i>named </i>property
objects but provides <i>methods </i>of manipulating the values of
the property objects. (An extended map of the type library with
examples is available in &quot;Mapping the Schedule+ 95 Type
Library: SPL&quot; in the April 1996 edition of the MSDN
Library.)</font></p>

<p><font size="2">Figure 2 illustrates how the Schedule+ OLE
Automation documentation describes the second view of Schedule+,
which I call the Programming Model (PM). This model displays only
the UI capabilities. PM objects have properties and methods like
other OLE Automation servers, but PM objects such as the Contacts
table and the Tasks table have <i>different sets of properties</i>.
(An extended map is available in &quot;Mapping the Schedule+ 95
OLE Automation Server: Programming Model&quot; in the MSDN
Library.)</font></p>

<p><img src="Image7.gif" width="556" height="856"></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 2: Map
of the Schedule+ OLE Automation Server</i></font></p>

<p><font size="2">The third view is Schedule+ internal objects
(IO). This map is designed for developers who wish to use the
full potential of Schedule+. The object overloading is seen in
the identical sets of properties in the Tasks table and the
Contacts table. Whereas the PM map describes members
corresponding to the UI<i>,</i> the IO map describes all of the
members that are available. The IO map shows that <i>all </i>of
the Property objects are available on all Item objects. You can
manipulate any Property object on an Item object to affect that
Property on all Item objects . (An extended map with examples is
available in &quot;Mapping the Schedule+ 95 OLE Automation
Server: Internal Objects&quot;in the MSDN Library.)</font></p>

<p><font size="2"><img src="Image8.gif" width="550" height="424"></font></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 3: A map
of the Schedule+ 95 Internal Objects</i></font></p>

<p><font size="2" face="verdana">Why are there three maps
and no regular type library for Visual Basic for Applications?</font></p>

<p><font size="2">A type library restricts the developer to the
view exposed. The SPL does allow access to the whole
object&#151;but only in a specified way. The Schedule+ OLE
Automation server is an out-of-process server, and the type
library has some special methods added to improve performance.</font></p>

<p><font size="2">The Schedule+ OLE Automation server does not
use the standard collection object; it uses an object called a
&quot;Table.&quot;</font></p>

<p><font size="4" face="verdana"><b>Programming Schedule+</b></font></p>

<p><font size="2">Here&#146;s a startup routine I use for all
Schedule+ OLE Automation. I initialize module level or global
objects for each Table under the Schedule object. This makes all
of these objects immediately available in the module or
application. </font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim scdapp As SPL.Application</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim scdsch As SPL.Schedule</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;Rem list all of the Tables you are using</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim schtblContacts As SPL.Table</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim schtblTasks As SPL.Table</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Sub Schedule_Init</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set scdapp = CreateObject(&quot;SchedulePlus.Application&quot;)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If scdapp.LoggedOn = False Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;scdapp.Logon</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set scdsch = scdapp.ScheduleLogged</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;Rem initialize all of the Tables you are using</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set schtblTasks = Scdsch.Tasks</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set schtblContacts = Scdsch.Contacts</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End Sub</font></p>

<p><font size="2">I will assume that these objects exist in the
examples in the remainder of this article.</font></p>

<p><font size="4" face="verdana"><b>A sample of a solution</b></font></p>

<p><font size="2">A sampling of reports illustrates some of the
features of Schedule+. Consider the problem of reporting
reimbursable mileage on an expense report. With Schedule+, you
can record mileage in the Task dialog as shown in Figure 4.</font></p>

<p><img src="Image9.gif" width="375" height="388"></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 4:
Schedule+ Task dialog showing mileage</i></font></p>

<p><font size="2">Using this UI, you would have to total all of
your miles manually. With OLE Automation it is easy to extract
this information from Schedule+ and enter it in a Microsoft Excel
worksheet. The information may be stored as part of each contact
record. The contact-cumulative mileage is not visible in the UI,
but can be obtained with OLE Automation.</font></p>

<p><font size="2">The following code totals the last 30 days of
mileage for all contacts in your Schedule+ file:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;FromDate = Now</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Todate = Now - 30</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim ContactSum As Double</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Reset &#145;Move to top of range</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblTasks.SetRange FromDate, Todate</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;While Not schtblContacts.IsEndOfTable</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblTasks.Reset &#145;Move to top of range</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;While Not schtblTasks.IsEndOfTable</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If schtblTasks.Item.ContactItemId = schtblContacts.Item.ItemId Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ContactSum = ContactSum + Val(schtblTasks.Item.Mileage)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblTasks.skip</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Wend</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;Add this information to Mileage ....</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Item.Mileage = schtblContacts.Item.Mileage &amp; vbCr _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&amp; Format(ContactSum, &quot;0.0&quot;) &amp; _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&quot; From &quot; &amp; FromDate &amp; &quot; to &quot; &amp; Todate</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.skip</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Wend</font></p>

<p><font size="2">Most of this example uses the normal OLE
Automation features that mimic the UI, except when it references
schtblContacts.Item.Mileage. This is not part of the UI, but is
available on <i>every </i>Schedule+ Table object: Alarm, Access,
Task, Appointment, SingleAppointment, RecurringAppointment,
Event, SingleEvent, Project, RecurringEvent, and Contacts.</font></p>

<p><font size="2">(A more interesting example is obtaining phone
numbers from the Telephony API and creating an event that records
the numbers and their duration into Schedule+ automatically!)</font></p>

<p><font size="4" face="verdana"><b>Performance boost</b></font></p>

<p><font size="2">There are several ways of manipulating a
property. You need not use the property&#146;s extra methods, but
doing so will provide a significant performance boost. In the
following example, the telephone area code is changed from 206 to
360. The traditional approach is shown below:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Reset &#145;Top of Table</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;While Not schtblContacts.IsEndOfTable</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If Left(schtblContacts.Item.PhoneFax, 3) = &quot;206&quot; Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Item.PhoneFax = &quot;360&quot; + Mid(schtblContacts.Item.PhoneFax, 4)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If Left(schtblContacts.Item.PhoneHome, 3) = &quot;206&quot; Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Item.PhoneHome = &quot;360&quot; + _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Mid(schtblContacts.Item.PhoneHome, 4)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Skip</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Wend</font></p>

<p><font size="2">Now here&#146;s how you would change the area
code using the <b>GetProperties</b> and <b>SetProperties</b>
methods available in Schedule+:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim arrData As Variant &#145;Must do as variant because errors may return</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData = Array(1, 2) &#145;Change 2nd # to match # of Properties</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Reset &#145;Top of Table</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;While Not schtblContacts.IsEndOfTable</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData = schtblContacts.Item.GetProperties(&quot;PhoneHome&quot;,
&quot;PhoneFax&quot;)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;flagUpdate% = False</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;For i% = LBound(arrData, 2) To UBound(arrData, 2)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If IsError(arrData(0, i%)) Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData(0, i%) = &quot;&quot;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;No value has been assigned to property</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ElseIf Left(arrData(0, i%), 3) = &quot;306&quot; Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData(0, i%) = &quot;206&quot; + Mid(arrData(0, i%), 4)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Debug.Print arrData(0, i%)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;flagUpdate% = True</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Next i%</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If flagUpdate% Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Item.SetProperties _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;PhoneHome:=arrData(0, 0), _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;PhoneFax:=arrData(0, 1)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Skip</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Wend</font></p>

<p><font size="2">Although the second way is longer and more
complex, it is much faster than the traditional approach.
Let&#146;s do the numbers. If you assume 20 records that need
updates, and 1/100 second to do each out-of-process OLE
Automation call, you get the following performance (after
counting the number of calls in the above code):</font></p>

<blockquote>
    <p><font size="2">Traditional method: 161 calls or 1.61
    seconds.</font></p>
    <p><font size="2"><b>GetProperties/SetProperties</b> method:
    81 calls or 0.81 seconds.</font></p>
</blockquote>

<p><font size="2">If we had to deal with 10 properties per
record, the calls increase to 641, and the performance changes to
6.41 seconds for the traditional method and stays at 0.81 seconds
for the <b>GetProperties/SetProperties</b> method. The news is
even better if you use the <b>GetRows</b> method instead of <b>GetProperties</b>:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;Code assumes Contacts.Rows &lt; 100</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Reset &#145;Top of Table</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData = Array(schtblContacts.Rows, 2) &#145;Change 2nd # to match # of Properties</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData = schtblContacts.GetRows(schtblContacts.Rows,
&quot;PhoneHome&quot;, &quot;PhoneFax&quot;)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Row% = 0</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Reset &#145;Top of Table</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;While Not schtblContacts.IsEndOfTable</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;flagUpdate% = False</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;For i% = LBound(arrData, 2) To UBound(arrData, 2)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If IsError(arrData(Row%, i%)) Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData(Row%, i%) = &quot;&quot;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&#145;No value has been assigned to property</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ElseIf Left(arrData(Row%, i%), 3) = &quot;360&quot; Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;arrData(Row%, i%) = &quot;206&quot; + Mid(arrData(Row%, i%), 4)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Debug.Print arrData(Row%, i%)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;flagUpdate% = True</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">Next i%</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If flagUpdate% Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Item.SetProperties _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;PhoneHome:=arrData(Row%, 0), _</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;PhoneFax:=arrData(Row%, 1)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;schtblContacts.Skip</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Row% = Row% + 1</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Wend</font></p>

<p><font size="2">The time for the <b>GetRows/SetProperties</b>
method is 0.63 seconds (63 calls), 10 times faster than with the
traditional approach with 10 properties. This increased speed
must be balanced against the cost of using more code with greater
complexities, so each developer must find his/her personal
comfort point. (Other methods of manipulating properties are
covered in &quot;An Extended Introduction to Schedule+ OLE
Automation Programming&quot; in the April 1996 edition of the
MSDN Library.)</font></p>

<p><font size="4" face="verdana"><b>Summary</b></font></p>

<p><font size="2">The Schedule+ Automation servers allow
developers to produce powerful and customizable PIMs. Microsoft
applications such as Word, Microsoft Excel, Microsoft Access, or
Microsoft Project can be integrated within an enterprise-class
PIM that will meet the needs of corporate developers and their
clients. This different, extensible OLE Automation-centric view
of OLE Automation allows better information flow with fewer hours
wasted completing forms across the corporation.</font>
<p align="center"><font color="#0000ff" size="2" face="Arial">You
can extend the functionality of a Schedule+ application beyond
the capabilities of its UI.</font></p>
<p align="center"><font color="#0000ff" size="2" face="Arial">Unlike
other Microsoft OLE Automation servers, Schedule+ uses object
overloading to create a single OLE Automation server with three
different views.</font></p>
<p align="center"><font color="#0000ff" size="2" face="Arial">The
Schedule+ OLE Automation Server uses a special collection object
called a &quot;Table.&quot;</font></p>

</font></body>
</html>

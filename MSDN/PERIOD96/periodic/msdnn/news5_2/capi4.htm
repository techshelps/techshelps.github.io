<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template"
content="C:\apps\WINWORD\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Secure Application with Microsoft CryptoAPI</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">Secure Your Applications
with the Microsoft CryptoAPI</font></p>

<p><font size="2"><i>by Elizabeth Wiewall</i></font></p>

<p><font size="2">Is your app insecure? Maybe it needs a new
companion.</font></p>

<p><font size="2">For software applications to take advantage of
increasingly sophisticated and feature-rich communications
technology, they require an application programming interface
(API) that provides security and encryption services. Anyone
developing Windows-based collaborative workgroup computing
applications, Internet applications, or desktop applications that
need security should look at the Microsoft Cryptographic API
(CryptoAPI), a new Win32 API.</font></p>

<p><font size="2">Some application examples include: </font></p>

<blockquote>
    <p><font size="2">Online conferencing</font></p>
    <p><font size="2">Secure WAN transport</font></p>
    <p><font size="2">Customer authentication</font></p>
    <p><font size="2">Banking applications&#151;especially with
    smart-card technology</font></p>
    <p><font size="2">File encrypt/decrypt utilities</font></p>
    <p><font size="2">E-mail applications </font></p>
    <p><font size="2">Collaborative workgroup applications</font></p>
</blockquote>

<p><font size="2">The services provided by CryptoAPI enable
application developers to add cryptography to their Win32
applications. An application can use the functions in CryptoAPI
without knowing anything about the underlying implementation, in
much the same way that an application can use a graphics library
without knowing anything about the particular graphics hardware
configuration.</font></p>

<p><font size="2">Microsoft&#146;s design goals were to make
crypto-enabled application development functional, flexible,
usable, and exportable for all Windows-based developers. </font></p>

<p><font size="2">The architecture of CryptoAPI is modular; all
of the actual cryptographic operations are performed by
replaceable components known as <i>cryptographic service
providers</i> (CSPs). Each CSP contains the core cryptographic
algorithm and is written independently of the application, so an
application should be able to run with a variety of different
CSPs. This allows end users to choose a CSP that has an
appropriate level of security, without having to modify the
application.</font></p>

<p><font size="2"></font>&nbsp;</p>

<p><font size="4" face="verdana"><b>CryptoAPI Function Calls</b></font></p>

<p><font size="2">The CryptoAPI supports digital signatures,
store-and-forward encryption, and online encryption. It contains
24 function calls that fall into five function groups: Context
management, key generation/management, key exchange, data
encryption/decryption, and hashing/signature functions.</font></p>

<p><font size="2"><b>Context management functions</b></font></p>

<blockquote>
    <blockquote>
        <p><font size="2">Applications use these functions to
        connect to a CSP. The functions enable applications to
        choose a specific CSP by name, or get a CSP with a
        specific class of functionality. </font></p>
    </blockquote>
</blockquote>

<p><font size="2"><b>Key generation functions</b></font></p>

<blockquote>
    <blockquote>
        <p><font size="2">These functions allow applications to
        generate and customize cryptographic keys. Keys can be
        generated randomly or derived from a user password. The
        functions include full support for changing
        initialization vectors, chaining modes, and other
        encryption features. </font></p>
    </blockquote>
</blockquote>

<p><font size="2"><b>Key exchange functions</b></font></p>

<blockquote>
    <blockquote>
        <p><font size="2">These functions allow applications to
        exchange or transmit keys. When encryption keys are
        transferred out of the safety of the CSP, they are
        encrypted with the user&#146;s public key, and stay so
        until they reach the destination user&#146;s application.
        Thus, keys can be transmitted without being compromised.
        Key exchange functions can also be used to implement a
        fully authenticated key-exchange protocol, such as PCT or
        secure sockets layer (see accompanying article,
        &quot;Other Microsoft Security Technologies&quot;).</font></p>
    </blockquote>
</blockquote>

<p><font size="2"><b>Data encryption/decryption functions</b></font></p>

<blockquote>
    <blockquote>
        <p><font size="2">These functions allow applications to
        encrypt or decrypt data. Support is also included for
        simultaneously encrypting and hashing data. </font></p>
    </blockquote>
</blockquote>

<p><font size="2"><b>Hashing/signature functions</b></font></p>

<blockquote>
    <blockquote>
        <p><font size="2">These functions allow applications to
        compute a cryptographically secure digest (or
        &quot;hash&quot;) of data, based on the content of a file
        or message, and enable those hashes to be digitally
        signed. Once a file or message has been signed, anyone
        possessing the signer&#146;s public key can easily verify
        the signer&#146;s identity and verify that the file or
        message has not been modified since it was signed.</font></p>
        <p><font color="#FF0000" size="2"><i></i></font>&nbsp;</p>
    </blockquote>
</blockquote>

<IMG SRC="capifig1.gif" alt="The CryptoAPI System Architecture">
<p><font color="#0000ff" size="1" face="Arial"><i>Figure 1: The
CryptoAPI System Architecture</i></font></p>

<p><font size="2" face="verdana"><b>A job for Cryptographic
Service Provider!</b></font></p>

<p><font size="2">Physically, each CSP is a dynamic-link library
(DLL) with an associated cryptographic signature authorizing it
for use by CryptoAPI. The job of the CSP is to protect private
key information from unintentional exposure.</font></p>

<p><font size="2">Note that applications do not communicate with
CSPs directly. Instead, all cryptographic function calls are
routed through the operating system. Applications with complex
requirements may connect to several CSPs at once, using a
parameter present in each CryptoAPI function to indicate to the
operating system which CSP should be used for the particular
operation.</font></p>

<p><font size="2" face="verdana"><b>CSP partitioning options</b></font></p>

<p><font size="2">Many CSPs will consist of more than just one
DLL, as illustrated in Figure 2.</font></p>
<img src="capifig2.gif" alt="CSP partionting options">
<p><font color="#0000ff" size="1" face="Arial"><i>Figure 2: CSP
partitioning options</i></font></p>

<p><font size="2">Many CSPs will have additional components that
provide a more secure environment&#151;either for cryptographic
computations or for secure key storage. Two examples:</font></p>

<blockquote>
    <p><font size="2">Components running on the same machine but
    in a different address space, connected through a
    communications channel such as RPC.</font></p>
    <p><font size="2">Components running in specialized security
    hardware, such as a smart card. These are also known as
    &quot;hardware tokens,&quot;as shown in the case of CSP #3 in
    Figure 2, and provide much better security than software
    alone. </font></p>
</blockquote>

<p><font size="4" face="verdana"><b>Microsoft RSA base
provider</b></font></p>

<p><font size="2">Microsoft licensed cryptographic technology
from RSA Data Security to create the base or default software CSP
that ships with the operating system. The Microsoft RSA Base
provider consists of a software implementation PROV_RSA_FULL
provider type (see accompanying table of provider types). This
CSP supports both public-key and symmetric (or
&quot;conventional&quot;) cryptography. It is exportable and will
ship everywhere that the CryptoAPI is present.</font></p>

<p><font size="2">You will first see the CryptoAPI in Windows NT
4.0 (the release of the Windows NT operating system with the
Windows 95 shell) and in a future version of Windows 95. The beta
of Windows NT 4.0 was shipped in February to all Microsoft
Developer Network Level 2 and Level 3 members. You can download
CryptoAPI sample code and the <i>Microsoft CryptoAPI Application
Programming Guide</i> from Microsoft&#146;s Internet Development
Toolbox Web site
(http://www.microsoft.com/intdev/security/cryptapi.htm).</font></p>

<p><font size="2">The Microsoft RSA Base Provider uses the RSA
Public-Key algorithm for creating digital signatures and for
encrypting key material so it can be safely transported to
another user (the process known as &quot;key exchange&quot;).
Public keys are limited to 512 bits.</font></p>

<p><font size="2">For bulk data encryption, the base provider
uses either the RC2 block cipher or the RC4 stream cipher. These
are two of the most common encryption algorithms. The encryption
keys are limited to 40 bits.</font></p>

<p><font size="2">For the creation of message digests, or
&quot;hashes,&quot; the base provider supports the MD2, MD5, and
SHA hash algorithms, which are also among the most common hash
algorithms.</font></p>

<p><font size="2" face="verdana"><b>CSP provider types</b></font></p>

<p><font size="2">An application writer creates crypto-enabled
software based on a particular CSP provider type. Once an
application has successfully connected to a CSP of a particular
type&#151;via the <b>CryptAcquireContext </b>function&#151;it can
assume that a certain minimum functionality is supported in each
of the four categories: key exchange, signature, encryption, and
hashing.</font></p>

<p><font size="2">Every CSP of a given provider type must at a
minimum support all of the listed algorithms for that type.
Additional CSP types will be defined as needed. The table lists
some of the CSP types already implemented, as well as some that
Microsoft anticipates at some point in the future.</font></p>
<img src="cpifig12.gif" alt="CSP provider types">
<p><font color="#0000ff" size="1" face="Arial"><i>CSP provider
types</i></font></p>
<p><font size="4" face="verdana"><b>Create your own CSP</b></font></p>

<p><font size="2">As mentioned previously, the Windows NT 4.0
operating system includes a base or default software CSP. This
CSP will be exportable from the U.S. to all countries where the
Windows NT operating system is already available. However, the
CSP can be replaced by the end user. Companies that make hardware
cryptographic devices such as smart cards, or companies that
create cryptographic algorithms may want to create a CSP for
their own architecture.</font></p>

<p><font size="2">If you are interested in creating a CSP, please
consult the Microsoft CryptoAPI Web page in the Internet
Development Toolbox
(http://www.microsoft.com/intdev/security/cryptapi.htm), and
follow the instructions for requesting the developer&#146;s kit,
known as the CSPDK. </font></p>

<p><font size="4" face="verdana"><b>May ease export approval</b></font></p>

<p><font size="2">The Microsoft CryptoAPI eliminates the need for
each ISV to write its own cryptographic code. Instead, each ISV
can simply call replaceable cryptographic service providers,
including a base provider that Microsoft will ship in the
operating system. The base CSP is already cleared for export.</font></p>

<p><font size="2">CryptoAPI also has the potential to ease export
approval for applications that use CryptoAPI CSPs to provide
security. Since the application does not actually contain any
crypto code (remember, the operating system is called via
CryptoAPI), Microsoft expects that U.S. government export
authorities will waive the export approval requirement for
CryptoAPI-enabled applications that do not otherwise implement
secure functions. This would occur as soon as federal regulations
have been amended.</font></p>

<p><font size="2" face="verdana"><b>For additional
information</b></font></p>

<p><font size="2">If you&#146;re planning to develop a
crypto-enabled application or have questions, send e-mail to <a href="mailto://cryptAPI@microsoft.com"><b>cryptAPI@microsoft.com</b></a>,
or see the WinCrypt section in the CompuServe Win32 forum. </font></p>
<p><font size="2"><i>Elizabeth Wiewall is a technical evangelist
in Microsoft&#146;s Developer Division.</i></font></p>
</font></body>
</html>

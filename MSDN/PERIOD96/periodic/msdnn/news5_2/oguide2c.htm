<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\WORD6\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New OLE Guidelines Aim at Internet</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">New OLE Guidelines Aim at
Internet</font></p>

<p><font size="2">Microsoft is updating the OLE Control and
Control Container Guidelines to make the OLE Controls
architecture more flexible and suitable for use on the Internet.
Though the updates are still in the proposal stage, version 2.0
of the guidelines is slated for publication soon with only a few
changes and clarifications. </font></p>

<p><font size="4" face="verdana"><b>So what&#146;s changed?</b></font></p>

<p><font size="2">The updated version reflects a change of
approach from the previous guidelines. The definition of an OLE
Control has been relaxed so that it does not have to support any
unnecessary areas of functionality. Specifically, an OLE Control
needs only to implement the <b>IUnknown</b> interface and be
self-registering (that is, export <b>DLLRegisterServer</b> and <b>DLLUnregisterServer</b>)&#151;that&#146;s
it! Typically an OLE Control will support a number of additional
interfaces to perform its job function, but none of these
interfaces are mandatory.</font></p>

<p><font size="2">Beyond that, the guidelines specify what
support of particular interfaces means in terms of functionality
for a control (and a container).</font></p>

<p><font size="2">The guidelines reference and use the concept of
OLE Component Categories. These are new to OLE and not specific
to OLE Controls. A Component Category is essentially an entry in
the registry that identifies areas of functionality a control
exposes, and determines what container support it requires to be
hosted properly. Previously, the interface signature of a control
indicated the functionality it provided. While this was useful in
some cases, a richer definition of a control&#146;s capabilities
was needed.</font></p>

<p><font size="2">Through its object-selection user interface, a
container can filter all the registered controls on the system
and display only those controls that it can properly host for
selection and insertion.</font></p>

<p><font size="4" face="verdana"><b>Why the change?</b></font></p>

<p><font size="2">An increasing number of containers use OLE
Controls in a wide variety of applications. This has led to some
interesting problems when not all containers offer identical
levels of support, as in the case of data binding. Using OLE
Component Categories addresses the problems that arise from
containers supporting different types of functionality.</font></p>

<p><font size="2">In addition, the increasing emphasis on the
Internet has intensified the demand that controls be small, fast,
and efficient. The new guidelines allow a control to be as small
and efficient as possible by implementing only the exact
functionality that the control requires.</font></p>

<p><font size="4" face="verdana"><b>What about compatibility?</b></font></p>

<p><font size="2">Clearly there can be a compatibility problem.
What happens when a new container hosts older controls, or
conversely, an older container hosts newer controls?</font></p>

<p><font size="2">Hosting an older control should not be a
problem in many cases, because the container will still be
compatible with previous versions of the guidelines. </font></p>

<p><font size="2">In some cases, a container that was created
using version 2.0 of the guidelines may not fully comply with the
previous guidelines. Using OLE Component Categories allows the
container to recognize those older controls and not load them.</font></p>

<p><font size="2">A new control will use OLE Component Categories
to register itself as a control, and then register any additional
functionality it implements and requires. This allows an older
container to host a control by registering the
&quot;Control&quot; key as specified in the previous versions of
the guidelines.</font></p>

<p><font size="4" face="verdana"><b>Where to find version 2.0</b></font></p>

<p><font size="2">A preliminary version of the new OLE Control
and Control Container Guidelines is available online in
Microsoft&#146;s<i> Internet Development Toolbox </i>at
http://www.microsoft.com/intdev/sweeper/ An early release of the
final Component Categories specification can also be found in the
same location. </font></p>

<p><font size="2"><b>Correction: </b>In the January/February
issue of <i>Developer Network News</i>, an article on the OLE
Control and Control Container Guidelines gave incorrect online
addresses for the MFC source code, the built verification
container .EXE, the verification control .OCX, and a setup
program that accompanies the guidelines. There is no \VERIFY
subdirectory for any online address and these items are not
available on the FTP server. All of these can be obtained
at<br></font>
&nbsp;&nbsp;&nbsp;<a href="http://www.microsoft.com/oledev/">http://www.microsoft.com/oledev/.</a></font></p>

</font></body>
</html>

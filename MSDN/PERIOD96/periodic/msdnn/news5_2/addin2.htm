<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\word32\TEMPLATE\NEWSART.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Part II of Extending Visual Basic with Add-ins</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">Part II of Extending Visual Basic with Add-ins</font></p>

<p><font size="2"><i>by Ken Lassesen</i></font></p>

<p><font size="2"><i>This is Part II of a two-part article about
add-ins. The first part, published in the January/Feburary 1996
issue of </i>Developer Network News<i>, discussed add-ins for the
Visual FoxPro Class Browser.</i></font></p>

<p><font size="2"><i>This portion is excerpted from the article
&quot;Building Add-Ins for Visual Basic 4.0.&quot; The complete
article is in the Library in the Technical Articles bin.

<p><font size="2">Introduced in the Visual Basic programming
system version 4.0, add-ins are special-purpose OLE servers that
establish two-way communication between the add-in OLE server and
the Visual Basic Integrated Development Environment (also an OLE
server). Add-ins can do almost anything you can imagine, for
example:</font></p>

<blockquote>
    <p><font size="2">&#149; Automating routine tasks such as
    creating standard menus and standard toolbars or generating
    Help file templates and ToolTips</font></p>
    <p><font size="2">&#149; Automating programming standards </font></p>
    <p><font size="2">&#149; Creating form and application
    wizards </font></p>
</blockquote>

<p><font size="2">An add-in has all the characteristics of a
wizard, except that it has the ability to detect what the
developer is doing and react appropriately. Imagine that you are
creating a new form, and a dialog box automatically appears to
ask whether you want to add the standard menu items (with code)
to the new form or create a set of controls from a database table
automatically.</font></p>

<p><a name="_Toc326638207"><font size="4" face="verdana"><b>Creating
the framework</b></font></a></p>

<p><font size="2">The greatest challenge in building an add-in is
the analysis and design&#151;the coding is simple.The
implementation model uses different classes to handle
user-instigated manipulations of the project, event-instigated
manipulations of the project, and file control events. </font></p>

<p><font size="2"><img src="Image5.gif" width="573" height="291"></font></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 1.
Suggested implementation model for add-ins </i></font></p>

<p><font size="4" face="verdana"><b>The add-in instance</b></font></p>

<p><font size="2">When the Add-In Manager dialog box enables an
add-in, the VBIDE object creates an instance of the add-in OLE
server and then calls the methods or fires the events in the
add-in. The important events are Initialize, ConnectAddIn, and
Timer1<b>_</b>Timer.</font></p>

<p><font size="2">When the VBIDE object creates an instance of
the add-in, this instance may create <i>many other instances </i>as
side effects. The class module should have the <b>Instancing</b>
property set to Creatable MultiUse. The <b>Instancing</b>
property has led me to suggest the following guidelines:</font></p>

<blockquote>
    <p><font size="2">&#149; Do not use global variables.</font></p>
    <p><font size="2">&#149; Do not use module-level variables in
    nonclass modules.</font></p>
    <p><font size="2">&#149; Do not use static variables or
    procedures in nonclass modules.</font></p>
</blockquote>

<p><font size="2">The project creates all forms and class modules
by using a <b>Dim . . . As New . . . </b>statement and uses only
these new instances.</font></p>

<p><font size="2">I create the child instances in the
Declarations section of each file, using <b>Private</b> to
enforce a strict hierarchy and to allow multiple instances with
the same instance name to coexist within different scopes. Child
instances disappear with the parent. I create the other class
instances and the <b>frmStatus</b> form instance with the
following code:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;'In
Declarations of AddIn.Cls</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private
ThisAddInMgr As New clsAddInMgr 'clsfrmONE</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private
ThisTipsHelp As New clsTipsHelp 'clsfrmTWO</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private
ThisForm As New frmStatus</font></p>

<p><font size="2">I place the code to create a form instance in
each child class module under the Declarations section of the
class module or form:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;'In another
class module or form, i.e. frmONE.Cls </font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private
ThisForm As New frmAddInMgr 'frmONE</font></p>

<p><font size="2">Each time the VBIDE creates an instance of the
add-in, the add-in instance in turn creates separate private
instances of any child class or form.</font></p>

<p><font size="2" face="verdana">The ConnectAddIn event</font></p>

<p><font size="2">The <b>ConnectAddIn</b> event passes a pointer
to the instance of the VBIDE that created it. The add-in instance
uses the <b>ConnectAddIn</b> event to add menu items to the VBIDE
menu bar. </font></p>

<p><font size="2">Each menu choice sends a click event without
arguments to a class instance that has an <b>AfterClick</b>
method. </font></p>

<p><font size="2">The class instance receives a pointer to the
instance of the VBIDE object and a pointer to the menu item that
fires it. This class passes these items to the child form so that
the form may manipulate the VBIDE object or the menu item
controlling it.</font>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set
ThisInstance = VBInstance 'Keep a reference.</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set
ThisSubMenu =
ThisInstance.AddInMenu.MenuItems.AddMenu(&quot;&amp;My
Addin&quot;)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set
ThisMenuLine(2) = ThisSubMenu.MenuItems.Add(&quot;&amp;Standard
Code&quot;)</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;hThisMenuLine(2)
= ThisMenuLine(2).ConnectEvents(ThisAddInMgr)</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ThisAddInMgr.MenuLine
= ThisMenuLine(2)</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ThisAddInMgr.VBIDE
= ThisInstance</font></p>
<p><font size="2">The child class instance saves these values and
then passes them on to any child class instances or form
instances.</font></p>
<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Public
Property Let VBIDE(vNewValue)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set
ThisInstance = vNewValue 'Keep a reference locally.</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;ThisForm.VBIDE
= vNewValue 'Pass reference to child.</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End Property</font></p>

<p><font size=4" face="verdana"><b>The Timer1_Timer Event</b></font></p>

<p><font size="2">One problem with doing OLE Automation is
time-outs. I prefer to do asynchronous automation using a timer.
With asynchronous automation, the OLE Automation call sets an
argument&#146;s value, enables a timer, and then returns to the
client. The timer executes the method after the OLE Automation
call finishes and prevents a time-out. For example, when an
instance creates a form instance, <b>Form_Load </b>would fire,
but if this event takes a long time to finish, a time-out may
occur.</font></p>

<p><font size="2">I use a <b>DelayedForm_Load</b> procedure and a
timer set to an arbitrary 3/10 of a second to ensure that the
instance executes <b>DelayedForm_Load</b> procedure once.</font></p>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private Sub
Timer1_Timer()</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;'This allows
return to occur fast!</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Static
fFormLoad As Long 'A flag to prevent multiple execution to occur
fast!</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If Not
fFormLoad Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;fFormLoad =
True 'Set flag and disable timer.</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Timer1.Enabled
= False 'BEFORE calling DelayedForm_Load.</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;DelayedForm_Load
'Otherwise the timer may fire AGAIN during it.</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;'Other uses
of timer may be added here.</font></p>

<p><font size="2">The way I created the instances above allows
easy manipulation of the VBIDE object from an add-in form, for
example, to extract information from the active VBIDE project or
to add or modify a file. The form uses the pointers <b>ThisMenuLine</b>
or <b>ThisInstance</b> to do these manipulations in my model.</font></p>

<p><font size="2">To illustrate the extraction of information
from <b>ThisMenuLine </b>and <b>ThisInstance</b>, I changed the
caption of each form belonging to my add-in so that the user can
identify the project attached to the form instance. The code is a
one-liner:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Me.Caption =
ThisMenuLine.Caption + &quot; : &quot; +
ThisInstance.ActiveProject.FileName</font></p>

<p><font size="2">Although this <i>does </i>get the job done,<b> </b>I
use a nickname for clarity:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Private
ThisProject As VBIDE.ProjectTemplate</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;....</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Set
ThisProject = ThisInstance.Active</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Me.Caption =
ThisMenuLine.Caption + &quot; : &quot; + ThisProject.FileName</font>

<p><font size="2" face="verdana"><b>Adding a file</b></font></p>

<p><font size="2">Although I could blindly copy files from other
projects, I would prefer to see a menu of files, click the item I
want, and have these files added to my project. I create a file
containing the code and then add it. The natural depository for
these files is a database using a memo or equivalent field.</font></p>

<p><font size="2">I place the code I obtained from the database
in a string and call the procedure below. The procedure creates
the full path from the filename so that this new file is in the
same directory as the project file, checks for the existence of
this file, and then adds it to the project. </font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Public Sub
Project_AddFile(ByVal FileCode$, ByVal FileName$, Project </font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;As
VBIDE.ActiveProject)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Dim
FullPath$</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;FullPath$ =
ExtractPath(Project.FileName) + FileName$</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;If
Len(Dir$(FullPath$)) &gt; 0 Then</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;MsgBox
&quot;File [&quot; + FileName$ + &quot; Already exists. Please
delete and try </font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;again.&quot;,
vbCritical, &quot;ERROR&quot;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Exit Sub</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End If</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;fno% =
FreeFile</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Open
FullPath$ For Output As #fno%</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Print #fno%,
FileCode$</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Close fno%</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;FileType$ =
Project.AddFile(FullPath$)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;MsgBox
&quot;The &quot; &amp; FileType$ + &quot; file [&quot; +
FullPath$ + &quot;] has been added&quot;,</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;vbInformation,
&quot;Add File&quot;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End Sub</font></p>

<p><font size="2">This style of add-in allows reuse of standard
forms (log-on, System Information), modules (INI functions,
registry functions), or class modules. What if I just want to
toss in a bunch of procedures into an existing file? (For an
answer to this question, see the full article at the <i>For
Developers Only</i> online address given above.&#151;<i>Editor</i>)</font></p>

<p><font size="2">The implementation of an add-in is simple once
you understand the design and implementation issues. The benefit
is less time coding with better and more consistent code.
It&#146;s time to stop reinventing the wheel!</font></p>

<p><font size="2"><i>Ken Lassesen is known to his colleagues in
the Microsoft Developer Network Technology Group as the Lord of
Lutefisk and Grand Vizier of Visual Basic.</i></font>

<p align="center"><font color="#0000ff" size="2" face="Arial">An
add-in has all the characteristics of a wizard, but can also
detect what the developer is doing and react appropriately.</font>

<p align="center"><font color="#0000ff" size="2" face="Arial">The
greatest challenge in building an add-in is the analysis and
design&#151;the coding is simple.</font>



<p align="center"><font color="#0000ff" size="2" face="Arial">It&#146;s
time to stop reinventing the wheel!</font>



<p align="center"><font color="#0000ff" size="2" face="Arial">One
problem with doing OLE Automation is time-outs. </font></p>
</font></body>
</html>

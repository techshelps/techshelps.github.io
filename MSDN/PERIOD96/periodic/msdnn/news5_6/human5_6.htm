<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Human Factor: Talk to My Agent</title>
<BODY bgcolor=white>

<font face="Verdana">
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<p><font size=5><b>The Human Factor: Talk to My Agent</b></font></p>
<p>
Tandy Trower</p>
<p>
<i>Tandy Trower is director of the Advanced User Interface Design Group at Microsoft and author of </i>The Windows Interface Guidelines for Software Design<i>.</i></p>
<p>
Microsoft has a new ActiveX user interface technology that enables you to add an animated character to Web pages. Microsoft Agent, now in beta, is a set of software services that support animation, speech recognition, and speech output. An ActiveX control in the technology makes the character easy to program.</p>
<p><font size=4><b>Add “Character” to Your Web Site</b></font></p>
<p>
Why include an interactive character in your Web page? Research by Clifford Nass and Byron Reeves at Stanford University in California suggests that users treat computers as they do other people. Nass and Reeves found that we are polite to computers, that we treat computers with female voices differently than those with male voices, and that we react to praise and flattery from a computer. These natural social responses can result from the smallest stimulus, even though the user fully understands that a computer is not human. The tendency to maintain human social programming when interacting with a computer—which seems automatic and unconscious—has tremendous implications for user interface design.</p>
<p><b>New Form of User Interface</b></p>
<p>
Adding an interactive character to an interface can amplify this human social response and enable new enhancements to your interface. With Microsoft Agent, you can easily include a character on your Web site as a guide, a Help interface, or a search interface.</p>
<p>
<img src="humanfig1.gif">
<p>
<b>Figure 1. Example of a Web page using Microsoft Agent as a purchasing guide</b></p>
<p>
Microsoft Agent is like a menu or a control; it provides a mechanism for facilitating communication and interaction with the user. Microsoft Agent isn’t necessarily better or more useful than other interface controls; a lot depends on how you use it.</p>
<p>
By supporting speech input, Microsoft Agent can make your user interface unusual and more natural. However, the quality of PC sound technology varies greatly, so crafting a successful “conversational” interface requires care. Otherwise, the inevitable recognition errors will break down the interaction. Speech-input options provided by Microsoft Agent include confidence ratings, input alternatives, and support for word spotting. Design guidelines are being developed.</p>
<p>
Besides speech input and output, Microsoft Agent allows you to incorporate interaction with the character using conventional Windows interfaces. For example, you can program the character to respond to a button click or menu-command choice. In addition, the character provides its own pop-up window, to which you can add commands.</p>
<p><b>Programming the Agent</b></p>
<p>
The programming interface for Microsoft Agent is very simple, but it requires an understanding of the basics of scripting and use of the Object tag.</p>
<dl>
<dt>
Use the Object tag to provide access to the Agent control. The format for the Object tag includes the class ID (CLSID) for the control and a friendly name that you use to refer to the control.</dt>
<dd>
<pre><font face="new courier" size="4">&lt;OBJECT
   classid=&quot;clsid:855b244c-fc5b-11CF-91fe-00c04fd701a5&quot;
   id=MyAgent
&gt;
&lt;/OBJECT&gt; 
</font></pre>
</dd>
</dl>
<p>
Next, begin entering your script code, which can be done in a variety of ways. (For this article, I use Microsoft Visual Basic Scripting Edition [VBScript].)</p>
<dl>
<dt>
The services are provided by an ActiveX server. This means that multiple clients, one of which may be your Web page, can connect to the server at the same time. However, only the active client can animate the character. To set your page as the active client, set the control’s <b>Active</b> property to True. The following sample script sets the page as the active client when the page loads.</dt>
<dd>
<pre><font face="new courier" size="4">&lt;script LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub window_OnLoad

&#09;'Make this page the active client
&#09;MyAgent.Active = True

End Sub
--&gt;
&lt;/script&gt;</font></pre>
<br>
</dd>
<dt>
Microsoft Agent supports several ways to animate a character. The <b>Play</b> method plays a predefined animation. For example, adding the following line to the above script—after setting the <b>Active</b> property—plays the Greet animation.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Play “Greet”</font></pre>
<br>
</dd>
<dt>
To make the character speak, use the <b>Speak</b> method and include the text you want the character to speak.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Speak “Hello, I am your software assistant.”</font></pre>
</dd>
</dl>
<p>
The position from which the speaking animation plays is based on the last animation set. So if you use the <b>Speak</b> method after the Greet animation, the character speaks from the Greet pose. The character not only lip-syncs to the audio output, but it also provides a captioning word balloon, the kind cartoonists use. A user can choose to turn off either feature.</p>
<dl>
<dt>
To facilitate smooth transition from one animation to another, there is a special animation called the “rest pose.” Typically, you will use this method before calling another animation.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Play “RestPose” </font></pre>
<br>
</dd>
<dt>
You can also use the <b>PlaySequence</b> method, which plays a predefined sequence of animation actions and spoken text. Use this when you want a standard response—one that’s been tailored for the character by its creator—rather than your own text.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.PlaySequence “Acknowledge”</font></pre>
<br>
</dd>
<dt>
The server automatically queues animations unless you set the optional Now parameter to True for a <b>Play</b>, <b>Speak</b>, or <b>PlaySequence</b> method. The following statement will play the animation immediately rather than queuing it:</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Play “Surprised”, True</font></pre>
<br>
</dd>
<dt>
However, use this parameter carefully, since it flushes the animation queue. You can also use the <b>Stop</b> method to flush the animation at the top of the queue or to flush the entire queue.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Stop True</font></pre>
</dd>
</dl>
<p>
A final way to program a character is to use methods defined for specific functions. For example, if you want to move the character to a specific location, use the <b>MoveTo</b> method. This plays the appropriate animation.</p>
<p><font size=4><b>Using the Agent’s Commands Interface</b></font></p>
<p>
To get the character to respond to user input, define its <b>Commands</b> object. The <b>Commands</b> object is a collection of commands.</p>
<dl>
<dt>
For best performance, disable the <b>Commands</b> object, before adding a command to it, by setting its <b>Enabled</b> property to False.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Enabled=False</font></pre>
<br>
</dd>
<dt>
To add a command, use the <b>Add</b> method.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Add “Command1”</font></pre>
<br>
</dd>
<dt>
If you want the command to appear in the character’s pop-up Commands window, include a <b>Caption</b> property when you define the command. Otherwise, you will need to provide your own control for triggering the command.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Add “Command1”, “Sample Command”</font></pre>
</dd>
</dl>
<p>
The Commands window appears when the user clicks on the character or says “Open the Commands window.”</p>
<p>
<p> <img src="humanfig2.gif"></p>
<b>Figure 2. The Commands window</b></p>
<dl>
<dt>
If you want the agent server to respond to voice, include a voice command as the second parameter.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Add “Command1”, “Sample Command”, “sample command”</font></pre>
<br>
</dd>
<dt>
The server will attempt to match the text you put in the voice parameter. By adding a vertical bar character, you can include multiple phrases for matching to the same command.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Add “Command1”, “Sample Command”, “sample command|my command”</font></pre>
<br>
</dd>
<dt>
Including ellipsis tells the server to be more flexible and to ignore any words in a phrase in this position. So the following tells the server to accept phrases like “My sample command,” or “Sample command please,” or “Get the sample command now.” This technique is called <i>word spotting</i>, because the voice-recognition engine looks only for particular words in a spoken phrase.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Add “Command1”, “Sample Command”, “...sample command...”</font></pre>
<br>
</dd>
<dt>
You may want to provide access to your command set in the agent’s pop-up Commands window. To do that, set its <b>Caption</b> property.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Caption=”My Command Set”</font></pre>
</dd>
</dl>
<p>
This allows the user to reactivate your script if another client application of the server becomes active.</p>
<dl>
<dt>
To provide voice access to your <b>Commands</b> object, define its <b>Voice</b> property, much as the <b>Voice</b> property is defined for an individual command.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Voice = “...my command set...”</font></pre>
<br>
</dd>
<dt>
Now, re-enable your Commands object by setting its <b>Enabled</b> property to True.</dt>
<dd>
<pre><font face="new courier" size="4">MyAgent.Commands.Enabled=True</font></pre>
<br>
</dd>
<dt>
When one of your commands is selected, either from the Commands window or by voice, it triggers a Command event that passes back an object containing the name (ID) of the command. Use a conditional statement (for example, IF...THEN) to test for the command.</dt>
<dd>
<pre><font face="new courier" size="4">Sub MyAgent_Command (ByVal UserInput)

&#09;If UserInput.Name = “Command1” Then
&#09;&#09;
&#09;&#09;MyAgent.Speak “You said Sample Command”

&#09;EndIf

End Sub</font></pre>
</dd>
</dl>
<p><b>Not Just for Web pages</b></p>
<p>
Because Microsoft Agent uses ActiveX, access to its services is not limited to Web pages. You can use any programming language that supports ActiveX, such as Microsoft Visual Basic, to program the agent. </p>
</font></body>
</HTML>

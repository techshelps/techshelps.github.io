<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Is Your Client Being Served? A Look Inside the ActiveX Client Arc...</TITLE>
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<!--DocHeaderStart-->
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">

<FONT FACE="ARIAL, HELVETICA" SIZE="2">

<IMG SRC="newshead.gif"
WIDTH="130" HEIGHT="28" BORDER="0">
		


<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<font size=6>Is Your Client Being Served? A Look Inside the ActiveX Client Architecture</font>
<P>by Jason Smith
<P><!--DATE-->May 10, 1996
<P><!--/DATE-->
<P>Ah, the Internet! The much-hyped land of opportunity. But what business opportunities does it present for a developer?
<P>The browser market is extremely competitive, and Internet functionality requires a heavy investment to develop data transfer protocols, URL resolution, hyperlinking, and HTML parsing and viewing. Furthermore, implementing this type of functionality is simply a matter of coding to a predetermined--but rapidly changing--specification. When it has been accomplished by one developer, it's a colossal waste of time for the rest of us to re-implement it.
<P>As luck would have it, the Component Object Model (COM) presents an elegant solution to this problem of code reuse, and Microsoft developers have been busy architecting a browser to this model. By componentizing the Internet browser, they have reaped some of the rewards of using the Component Object Model. Their benefits, however, pale in  comparison to what everyone else gets at the same time: A myriad of performance-minded, high-quality protocol, viewer, and browser objects.
<P><h4>ActiveX client objects</h4>
<P>The ActiveX Object Model, which defines the complete Web browser object, describes a browser object and an HTML viewer object. These two objects comprise (as of this writing) the ActiveX Object Model (for details, see the HTML file included in the <A HREF="http://www.microsoft.com/intdev/sdk/">ActiveX Development Kit</A>.) 
<P>The browser object, known as the IExplorer Browser object, is an ActiveX document container that encapsulates other ActiveX objects to provide support for hyperlinking, URL navigation, safe download services, encryption, and ActiveX controls, but has no document display capabilities. The HTML viewer, also referred to as MSHTML, provides HTML parsing and display functionality in an in-process COM server that can be hosted in ActiveX document containers, such as the IExplorer Browser object, and ActiveX control containers.
<P>So, if the IExplorer Browser object provides navigation and data transfer capabilities and indirectly displays a document's contents by supporting the HTML Viewer object and other ActiveX documents, what else is needed to implement a full-fledged Internet-enabled application? If you guessed &quot;Not much,&quot; you're following along nicely. To further illustrate this point, <A HREF="http://www.microsoft.com/ie/">Internet Explorer version 3.0</A> is simply a wrapper for the Internet Explorer Browser object, which then contains the HTML Viewer object or other ActiveX document object.
<P>Integrating browsing capabilities into an application is simply a matter of reusing the objects that implement the functionality you need. Furthermore, you can select the degree to which you want to implement the minute details defining how these objects work together. You can, for example, simply use the IExplorer Browser object, which encapsulates URL resolution, hyperlinking, and multiple document viewing capabilities. For a simpler browser, such as one that only displays HTML documents, developers can select only the objects that meet their needs: The HTML Viewer and URL moniker objects.
<P><h4>Enabling existing apps for the Internet</h4>
<P>So, how do we want to get to the Internet today? It's a matter of how painlessly we can get there. For example, the easiest way to Internet-enable existing applications is to simply use the Win32 <b>WinExec</b> function to start Internet Explorer in a separate process. While simple to implement, this option suffers from a lack of control because the browser is spawned as a separate process. Some other options:
<P><UL><LI><b> OLE Automation:</b> Because the IExplorer Browser and HTML Viewer  objects implement an OLE Automation interface, Internet Explorer version 3.0 can be driven by a client application.
<LI><b> Create a custom container:</b> Incorporate the IExplorer Browser object into your application by hosting it as an ActiveX document container or as an ActiveX control.
<LI><b> Let the shell do the walking:</b> By implementing your application's documents as ActiveX documents, you can incorporate your application into the browser. That may seem a little backwards, but it is really an elegant way of providing a document-centric view of the world. If you also provide support for hyperlinks, users can jump from an HTML page to a Microsoft Word page to your document and back again, all within the same frame window for a seamless experience.
</UL><h4>More details coming in the 'Toolbox'</h4>
<P>By using COM, every developer can leverage pre-existing code and choose the degree to which he or she wants to combine the various objects into an application. As implementation details become final, you will be able to find development information online in the <A HREF="http://www.microsoft.com/intdev/"><i>Internet Development Toolbox</i> Web site</A>. In the meantime, Microsoft Developer Network Professional Subscription members should be sure to check out the Microsoft ActiveX Development Kit CD they received this spring. 
<P>For a comprehensive discussion of how ActiveX technologies will affect Internet development, read <A HREF="http://www.microsoft.com/msdn/news/devnews/">"Dr. GUI Gets Webbed,"</A> <i>Developer Network News,</i> May 3, 1996.
<P></font></body></html>

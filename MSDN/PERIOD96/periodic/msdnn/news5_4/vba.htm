<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\MSOffice\Templates\NEWNEWS.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VBA: Component Glue for Applications</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">VBA: Component Glue
for Applications</font></p>

<p><font size="1"><i>by Neil Charney</i></font></p>

<p><font size="2">Did the Internet take you entirely by surprise?
If so, you may want help predicting the &quot;Next Big
Thing.&quot; Here is the future in four words:<b> Visual Basic,
Applications Edition </b>(VBA). It will soon be available in
third-party applications that license VBA, such as Visio,
Photoshop, and Autodesk, which means more components will be
accessible to the millions of Visual Basic and Visual Basic for
Applications developers. Add Visual Basic Scripting Edition (see
&quot;VBScript: It&#146;s How Visual Basic Programmers Get
Webbed,&quot; page </font><font color="#FF0000" size="2">XX</font><font
size="2">) to the list and you realize that Visual Basic is
everywhere. If you already develop in Visual Basic or Microsoft
Office then you already know a lot about VBA (and VBScript).</font></p>

<p><font size="2" face="verdana"><b>VBA for the Visual
Basic developer </b></font></p>

<p><font size="2">Rather than working with forms and controls, as
in Visual Basic, VBA works within the context of an application.
Applications supporting VBA &quot;expose&quot; objects or
functionality, such as a chart or pivot table in Microsoft Excel,
a form in Microsoft Access, or a document in Microsoft Word.
There are three basic scenarios in which VBA is used with
applications: customizing a single application by setting methods
and properties of its objects, integrating third-party components
(ActiveX controls) into a custom solution, and integrating
objects from multiple applications into a single, seamless
solution.</font></p>

<p><font size="2" face="verdana"><b>Developing within
the application</b></font></p>

<p><font size="2">Probably the most common VBA scenario involves
programming multiple? objects within a single application. For
example, an accounting department might want a custom application
to integrate multiple spreadsheets into a consolidated online
report, with charts and pivot tables. Using VBA, you can access
each object within Microsoft Excel and provide a friendly and
familiar interface to walk the user through the task of creating
the report. In the simple example below, VBA code is written
within Microsoft Excel to control the Excel Chart object.</font></p>

<p><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;Sub Create_Chart()</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;Dim objXLchart As Chart</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;Dim MyArray As Variant</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;MyArray = Array(1, 2, 3)</font></p>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;With Excel.Application</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;.Workbooks.Add</font>
<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;.Range(&quot;A1:C1&quot;).Value = MyArray</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;.Range(&quot;A1:C1&quot;).Select</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;'Create a Chart and make it visible</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;Set objXLchart = .Charts.Add()</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;.Visible = True</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;End With</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;End Sub</font>

<p><font size="2">VBA was designed for working with objects. Note
the use of the <b>WITH</b> statement to set the properties for
the Microsoft Excel application. By using it, the code is easier
to type, easier to read, and even executes faster. </font></p>

<p><font size="2" face="verdana"><b>Developing within
the application with ActiveX</b></font></p>

<p><font size="2">As with Visual Basic, VBA allows you to add
pre-built software components or ActiveX controls (formerly
called OLE controls) and relieves you of having to write them
from scratch. For example, in Microsoft Access, you may wish to
present the user with a calendar for selecting dates. Rather than
creating one, which you could do with a lot of code, you can
insert the Microsoft Access Calendar control, and work with it
just as if it were another exposed object in the application.
This example uses the Calendar custom control to provide a simple
interface for selecting a date, which is then displayed to the
user in a message box:</font></p>



<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&#145;Present
the chosen date in a message box</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Private Sub
Cal1_Updated(Code As Integer)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Dim
ChosenDate As Date</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&#145;name
of the calander control is &quot;Cal1&quot;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;ChosenDate =
Me.Controls(&quot;Cal1&quot;).Value</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;MsgBox
&quot;You Chose &quot; &amp; ChosenDate</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;End Sub </font>

<p><font size="2">While it is a simple example, it shows you the
ease with which you can integrate a custom control into your
application. Both Microsoft Access and Visual Basic now support
ActiveX controls. All applications in the next release of
Microsoft Office will have ActiveX support, both on the
application documents, and on the new forms that VBA will
provide.</font></p>

<p><font size="2" face="verdana"><b>Developing across
multiple applications </b></font></p>

<p><font size="2">One of the most powerful features of VBA is its
ability to integrate objects from multiple applications into a
single solution. One approach to combining application
functionality is through automation of embedded objects. For
example, you might determine that the most efficient way to
create a sales reporting system is a tool that combines a
Microsoft Access form object with a Microsoft Excel chart object.
However, the form and chart objects exist in the two respective
applications. By using the Microsoft Access Form object as an OLE
container, you can embed Microsoft Excel chart and worksheet
objects to create a single solution&#151;and the user may never
realize that the objects are coming from different Office
applications. You might also wish to include the Calendar control
to make the interface even more user-friendly (see Figure 1). </font></p>

<p><font size="2">&nbsp;&nbsp;&nbsp;&nbsp;<img src="Image4.gif" width="429" height="345" align=right></font></p>

<p><font color="#0000ff" size="2" face="FrnkGothITC Bk BT"><i>Figure
1: The Calendar control</i></font></p>

<p><font size="2">In this example, a Microsoft Access form
contains an embedded Microsoft Excel worksheet and chart as well
as the Calendar custom control. You could activate the embedded
objects and then control them in place through automation.
Automation also allows you to create a new &quot;instance&quot;
of an application and then control it using the same VBA code you
would use within the application itself. Confusing? Not really.
Taking our first example where we created a Microsoft Excel
chart, we could paste that code&#151;with a few minor
changes&#151;into Microsoft Access and achieve the same results:</font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Sub
Create_Chart()</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;'Change 1 -
Add a line to create a variable for Excel</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Dim objXL As
Excel.Application</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Dim
objXLchart As Chart</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Dim MyArray
As Variant</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;MyArray =
Array(1, 2, 3)</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;'Change 2 -
add a line to create an instance of Excel</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Set objXL =
CreateObject(&quot;Excel.Application&quot;)</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;With objXL</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;.Workbooks.Add</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;.Range(&quot;A1:C1&quot;)&nbsp;&nbsp;&nbsp;&nbsp;.Value = MyArray</font>

<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;.Range(&quot;A1:C1&quot;).SELECT</font>
<br><font color="#0000ff" size="2" face="Courier New">
&nbsp;&nbsp;&nbsp;&nbsp;'Create a Chart and make it visible</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;Set
objXLchart = .Charts.Add()</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;.Visible =
True</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;End With</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;End Sub</font>

<br><font size="2" color=black>This is a powerful feature that allows you to
work from within one central application while accessing the
functionality of any other application that supports VBA. With
third-party products incorporating VBA into their applications,
the number of components that can be integrated into a Microsoft
Office solution increases significantly. Keeping up with the
latest on Visual Basic, Applications Edition ensures that
you&#146;ll be ready for the &quot;Next Big Thing.&quot;</font></p>

<p><font size="2" face="verdana" color=black><b>More information
online</b></font></p>

<p><font size="2">More information on Visual Basic for
Applications is available on the Office Developers Forum at:\<br>
<a href="http://www.microsoft.com/officedev/"><b>http://www.microsoft.com/officedev/</b>.</a></font></p>

<p><font size="2"><i>Neil Charney is a product manager in the
Internet Platform and Tools Division and a strong supporter of
Office developers everywhere. </i></font>


<blockquote>
    <p align="center"><font color="#0000ff" size="3"
    face="verdana">VBA allows you to add pre-built
    software components or ActiveX controls and relieves you of
    having to write them from scratch.</font>
    <p align="center"><font color="#0000ff" size="3"
    face="verdana">One of the most powerful features of
    VBA is its ability to integrate objects from multiple
    applications into a single solution. </font></p>
</blockquote>
</font></body>
</html>

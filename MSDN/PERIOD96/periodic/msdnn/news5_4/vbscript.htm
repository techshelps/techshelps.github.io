<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-2">
<meta name="Template" content="C:\MSOffice\Templates\NEWNEWS.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VBScript: It's How Visual Basic Programmers Get Webbed</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">

<p><font size="6" face="verdana">VBScript: It's
How Visual Basic Programmers Get Webbed</font></p>

<p><font size="2"><i>by Scot Hillier and Dan Mezick</i></font></p>

<p><font size="2">Visual Basic Scripting Edition (VBScript)
allows developers to link and automate a wide variety of objects
in World Wide Web pages. Because VBScript is a subset of Visual
Basic for Applications (VBA), many familiar features of VBA are
supported. However, certain key differences exist between the two
programming environments. Here are some major differences: </font></p>

<p><font size="2" face="verdana"><b>Classes, instances,
and OLE Automation</b></font></p>

<p><font size="2">VBScript provides no support for classes as
used in Visual Basic. You cannot use the
&lt;SCRIPT&gt;&lt;/SCRIPT&gt; tag to create anything except
reusable functions and subroutines. Development in VBScript is
purely procedural. The only types of objects provided are in the
OLE interface to the Microsoft Internet Explorer 3.0 browser
itself. VBScript also provides no support for OLE Automation with
other objects in other applications. Although VBScript supports
the <b>CreateObject</b> function, Internet Explorer 3.0 does not
implement it. OLE Automation is not allowed, because downloading
OLE servers provides an easy path for viruses to enter a client
machine. OLE Automation does play a large role in the overall
functionality of the browser, however. Microsoft Internet
Explorer itself is merely an OLE container for the OLE scripting
model, and Internet Explorer 3.0 itself can serve as an OLE
Automation object for other applications.</font></p>

<p><font size="2" face="verdana"><b>Control arrays</b></font></p>

<p><font size="2">VBScript does not support control arrays. This
is unfortunate, because grouping controls into arrays always
simplifies coding. We can work around this limitation, however,
by having controls call a centralized routine whenever their
respective Click events are called. For example, the following
HTML code shows three buttons each calling the same routine, but
passing an index with the call. In the function, we can use a <b>Select
Case</b> statement to figure out which button was pressed. </font></p>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&lt;SCRIPT
LANGUAGE=&quot;VBS&quot;&gt; </font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Sub
WhatButton(intIndex) </font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Select Case
intIndex</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Case 1</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox
&quot;Button2!&quot;</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Case 2</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox
&quot;Button2!&quot;</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;Case 3</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox
&quot;Button3!&quot;</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Select</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;End Sub</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&lt;/SCRIPT&gt;</font>

<p><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&lt;INPUT
TYPE=&quot;BUTTON&quot; OnClick=&quot;WhatButton(2)&quot;&gt;</font>

<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&lt;INPUT
TYPE=&quot;BUTTON&quot; OnClick=&quot;WhatButton(2)&quot;&gt;</font>
<br><font color="#0000ff" size="2" face="Courier New">&nbsp;&nbsp;&nbsp;&lt;INPUT
TYPE=&quot;BUTTON&quot; OnClick=&quot;WhatButton(3)&quot;&gt;</font>

<p><font size="2">Unfortunately, the above technique works only
with controls defined as using HTML. ActiveX controls downloaded
into the Web page do not support attributes such as <b>OnClick</b>.
The events for each ActiveX control are defined as separate
routines. Therefore, no workaround exists for control arrays in
ActiveX components. </font></p>

<p><font size="2" face="verdana"><b>Data access</b></font></p>

<p><font size="2">VBScript does not support data access, either
through the Joint Engine Technology (JET) engine database driver
or the Remote Data Object (RDO). Data access is strictly limited
to back-end processes using the Internet Services API (ISAPI)
provided with the Internet Information server (IIS). </font></p>

<p><font size="2" face="verdana"><b>Debugging</b></font></p>

<p><font size="2">VBScript provides no debugging features. There
are no break points, watches, or debug windows. Additionally, the
Debug object is not supported. VBScript does not allow you to
&quot;step&quot; through code either; however, stepping can be
simulated by using <b>MsgBox</b> statements periodically in your
code to report information. These <b>MsgBox</b> statements can
then be commented out or removed from the final document.</font></p>

<p><font size="2" face="verdana"><b>File operations</b></font></p>

<p><font size="2">VBScript does not support any of the file
operations found in VBA. Once again, the concern here is
accessing the client machine without restriction. Clearly,
allowing direct file I/O from the browser places the client
machine at the mercy of any rogue executable that gets
downloaded.</font></p>

<p><font size="2" face="verdana"><b>Forms</b></font></p>

<p><font size="2">VBScript supports forms. Forms are created
using the &lt;FORM&gt;&lt;/FORM&gt; tag. The fundamental
difference between VBScript forms and VBA forms is that VBScript
forms are not visible as separate windows in the application.
Instead, forms are a way to group controls together for the
purpose of addressing their properties and methods in code or to
submit data to a back-end process.</font></p>

<p><font size="2" face="verdana"><b>Help files </b></font></p>

<p><font size="2">VBScript does not allow access to the Windows
Help file system. Unlike Visual Basic for Applications, VBScript
cannot produce context-sensitive help. Help is limited to the
text placed inside an HTML file. Fortunately, the hypertext links
available in HTML provide a convenient way of publishing help.
For example, the language documentation for VBScript is available
on the companion CD as an HTML file. If you run this HTML file,
you will find that the hypertext links utilized are similar to
any Windows Help file system.</font></p>

<p><font size="2" face="verdana"><b>Intrinsic constants
</b></font></p>

<p><font size="2">VBScript does not support intrinsic constants
(built-in, predefined constants). For example, to create a
message box with Abort, Retry, and Ignore buttons, you would
normally specify the second argument in the <b>MSGBOX</b>
statement as <b>vbAbortRetryIgnore</b>. However, because VBScript
does not recognize intrinsic constants, you must specify the
numeric value directly in code.</font></p>

<p><font size="2" face="verdana"><b>Modules</b></font></p>

<p><font size="2">VBScript supports code modules through the
&lt;SCRIPT&gt;&lt;/SCRIPT&gt; tag. Each SCRIPT section forms an
independent code module that may have its own variables,
function, and subroutines. These modules are similar to the
standard BAS module found in Visual Basic.</font></p>

<p><font size="2" face="verdana"><b>Multiple-document
interface</b></font></p>

<p><font size="2">There is no concept of a multiple document
interface (MDI) application in VBScript. MDI applications are
programs that display multiple forms inside a large parent
window. The child windows are confined to the boundaries of the
parent window. Because VBScript does not present forms as
independent objects, we cannot create MDI applications in a Web
browser.</font></p>

<p><font size="2" face="verdana"><b>Option explicit </b></font></p>

<p><font size="2">Just as with VBA, undeclared variables in
VBScript are automatically dimensioned as variants. Nothing
specifically requires you to declare variables before you use
them. However, failing to declare variables can still lead to
bugs in your code. Although VBScript supports only the <b>Variant</b>
data type, <i>Option Explicit</i> can still be valuable because
it will automatically detect any typographical errors in variable
names. Therefore, we recommend the use of <i>Option Explicit</i>
inside every set of &lt;SCRIPT&gt;&lt;/SCRIPT&gt; tags. Remember
to make it the first line of code in any SCRIPT section, and that
the scope of <i>Option Explicit</i> is only inside of the current
&lt;SCRIPT&gt;&lt;/SCRIPT&gt; tag.</font></p>

<p><font size="2" face="verdana"><b>System objects</b></font></p>

<p><font size="2">Although VBA supports the Screen, Printer, App,
Debug, Err, and Clipboard objects, VBScript supports only the Err
object. Therefore VBScript does not allow you access to such
useful objects as the mouse pointer or clipboard. You can,
however, provide run-time error handling for your applications.</font></p>

<p><font size="2" face="verdana"><b>Variables </b></font></p>

<p><font size="2">Although VBA supports a myriad of data types,
VBScript supports only the <b>Variant</b> data type, which can
contain any kind of variable data (integers, strings, and
objects). In the Windows API, VBScript does not allow Web pages
to make API calls that could jeopardize the security of the
client. Viruses could easily use API calls to damage the client
machine.</font></p>

<p><font size="2"><i>Excerpted from </i>Inside Visual Basic
Scripting Edition<i> (to be published in October by Microsoft
Press, US $39.95). Scot Hillier and Dan Mezick teach Visual Basic
nationwide for New Technology Solutions of North Haven, Conn.,
and are regional directors for Microsoft Developer Days in
Hartford and Boston, respectively. They can be reached at
info@vb-bootcamp.com or at http://www.vb-bootcamp.com.</i></font>
<blockquote>
    <p align="center"><font color="#0000ff" size="3"
    face="verdana">Because VBScript is a subset of
    Visual Basic for Applications (VBA), many familiar features
    of VBA are supported.</font>

    <p align="center"><font color="#0000ff" size="3"
    face="verdana">Unlike VBA forms ,VBScript forms are
    not visible as separate windows in the application. </font></p>

</blockquote>
</font></body>
</html>

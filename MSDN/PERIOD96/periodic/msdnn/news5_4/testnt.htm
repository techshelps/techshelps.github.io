<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\MSOffice\Templates\NEWNEWS.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Testing Windows 95 Applications with Windows NT 4.0</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana, arial, helvetica" color="#000000" size=2> 
<BODY bgcolor="#ffffff" vlink="#666666" link="#ff0000" text="#000000">


<p><font size="6" face="verdana">Testing Windows 95
Applications with Windows NT 4.0</font></p>

<p><font size="2"><i>by Nancy Winnick Cluts</i></font></p>

<p><font size="2">To qualify for the Windows logo, your Windows
95 applications must be able to run under Windows NT.
Microsoft&#146;s new Win32 Development Web site <a href="http://www.microsoft.com/win32dev/">(<b>http://www.microsoft.com/win32dev/</b>)</a>
contains an extensive list of tips for testing your
applications.. Here are some excerpts.</font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 1: Check for the
correct version</b></font></p>

<p><font size="2">Check the operating system version by using the
<b>GetVersion</b> or <b>GetVersionEx</b> functions. These
functions can be used to determine the build number, the major
version (that is, 3), the minor version (that is, 1), whether the
machine is running Win32s, and whether the operating system is
Windows 95. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 2: Install the
correct MFC DLLs</B></font></p>

<p><font size="2">If you have written a Microsoft Foundation
Class Library (MFC)-based application, be sure to install the
correct version of the MFC DLLs in your setup program. If your
application requires <i>any</i> redistributable DLLs, your
installation routine should:</font></p>

<blockquote>
    <p><font size="2">Include the DLLs as part of your
    distribution media</font></p>
    <p><font size="2">Verify the presence of required DLLs and
    replace existing DLLs <i>only</i> if they are older than the
    current redistribution versions you ship (prompt the user
    before replacing any files) </font></p>
    <p><font size="2">Install any needed DLLs that are not
    installed on the user&#146;s machine </font></p>
</blockquote>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 3: Check for large
hard drives</b></font></p>

<p><font size="2">Be sure to use large enough variables when
checking for disk space. Windows NT can support drives larger
than 4 gigabytes. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 4: Windows NT
functions require Unicode strings</b></font></p>

<p><font size="2">Check the Win32 SDK documentation for
information about which flags you need. If you call a function
that returns Unicode and convert the string to ASCIIusing <b>WideCharToMultiByte</b>,
be sure to pass the correct flags. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 5: Be aware of NTFS
compression</b></font></p>

<p><font size="2">Windows NT supports the New Technology file
system (NTFS), which supplies compression. This compression
should be transparent to applications. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 6: The
Printer/Document Properties dialog is different</b></font></p>

<p><font size="2">Under Windows 95, the functionality of <b>PrinterProperties</b>
and <b>DocumentProperties</b> are combined. Windows NT separates
these two functions. </font></p>

<p><font size="2">&nbsp;&nbsp;&nbsp;<img src="Image1.gif" width="401" height="435"></font></p>

<p><font color="#0000ff" size="1" face="Arial"><i>Figure 1:
Document Properties dialog box in Windows NT.</i></font></p>

<p><font size="2">&nbsp;&nbsp;&nbsp;<img src="Image2.gif" width="399" height="438"></font></p>

<p><font color="#0000ff" size="1" face="Arial"><i>Figure 2:
Printer Properties dialog box in Windows NT. </i></font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 7: Check for long
printer names</b></font></p>

<p><font size="2">Use MAX_PATH to allot the correct amount of
space for your buffers. Some applications assume that printer
names will always be short (i.e., 16 or 32 characters in length).
Under Windows NT, printers can have long names. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 8: Long filenames may
include spaces and foreign language characters</b></font></p>

<p><font size="2">Both Windows NT and Windows 95 support long
filenames. If your application assumes short filenames
(8.3-style), it will fail.</font></p>

<p><font size="2">Because Windows NT, and your application, may
be used outside the USA, be sure to test foreign language
characters and Unicode as well as ASCII in filenames and folder
names. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 9: Short filenames
are not created equal</b></font></p>

<p><font size="2">Both Windows NT and Windows 95 save not only
the long version of the filename, but also a short version of the
filename. When creating short filenames, Windows 95 uses a
consecutive-number algorithm. Windows NT uses a combination of
consecutive numbers and random characters. If your application
validates short filenames based on the Windows 95 algorithm or
modifies the directory structure, it may not perform as expected
under Windows NT. The table below shows you the short filenames
that are produced by Windows 95 and Windows NT for the same three
files.</font></p>

<table border="0" cellpadding="7" cellspacing="0" width="590">
    <tr>
        <td width="33%"><font size="2"><b>Long Filename</b></font></td>
        <td width="33%"><font size="2"><b>Windows 95 Short
        Filename</b></font></td>
        <td width="33%"><font size="2"><b>Windows NT Short
        Filename</b></font></td>
    </tr>
    <tr>
        <td width="33%"><font size="2">Maps of Africa.vss</font></td>
        <td width="33%"><font size="2">mapsof~1.vss</font></td>
        <td width="33%"><font size="2">mapsof~1.vss</font></td>
    </tr>
    <tr>
        <td width="33%"><font size="2">Maps of Europe.vss</font></td>
        <td width="33%"><font size="2">mapsof~2.vss</font></td>
        <td width="33%"><font size="2">mapsof~2.vss</font></td>
    </tr>
    <tr>
        <td width="33%"><font size="2">Maps of England.vss</font></td>
        <td width="33%"><font size="2">mapsof~3.vss</font></td>
        <td width="33%"><font size="2">macebf~1.vss</font></td>
    </tr>
</table>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Table 1: Short
filenames produced by Windows 95 and Windows NT</i></font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 10: Beware hard-coded
paths</b></font></p>

<p><font size="2">Windows NT may store system executables in
different locations from Windows 95 or use different names for
them. Call <b>CreateProcess</b> with the filename to launch the
associated executable. The file will run regardless of its
location if the directory in which the file is stored is included
in the current path.</font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 11: Registry keys
differ</b></font></p>

<p><font size="2">Windows 95 and Windows NT do not use the same
registry keys for all objects in the system, such as printers.
Use <b>GetProfileString</b> to find the name of the default
printer and use <b>EnumPrinters</b> to get information about
installed printers. These functions work on both platforms. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 12: The HIWORD on
32-bit handles isn&#146;t bogus</b></font></p>

<p><font size="2">Under Windows 95, the high 16 bits are zero.
Under Windows NT, the high 16 bits are usually non-zero. Windows
NT 3.51 accepted a handle with all zeroes in the high 16 bits by
using that for a &quot;wild card&quot; match. Windows NT 4.0
enforces the full 32-bit rule. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 13: Direct access to
hardware is a No-No</b></font></p>

<p><font size="2"><img src="Image3.gif" width="624" height="106"></font></p>

<p><font color="#0000ff" size="1" face="Arial">&nbsp;&nbsp;&nbsp;<i>Figure 3: This
application attempted to directly access the hard disk</i></font></p>

<p><font size="2">Although the example above comes from a 16-bit
(missing text here? check with author)and 32-bit applications
might attempt direct hardware access. Windows NT will display an
error dialog and your application may fail.</font></p>

<p><font size="2">Even if 16-bit drivers appear to function in
test situations, they&#146;re likely to fail in the more complex
environments that users create.</font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 14: Check for
supported parameters</b></font></p>

<p><font size="2">Under Windows NT and Windows 95, not all
functions support all of the same parameters. Check the operating
system and use only the appropriate parameters. Or test to be
sure all your parameters are valid, even if one of the operating
systems doesn&#146;t use some of them.</font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 15: Large fonts
versus small fonts</b></font></p>

<p><font size="2">Test applications at different font sizes. </font></p>

<p><font size="2">The problem occurs when the bitmap is a static
control on a dialog box. The dialog box resizes with the font
size, even if there are no text controls in it, and the static
bitmap does not resize. This makes the dialog background color
become visible. This is ugly, but it doesn&#146;t change the
functionality. Functional problems occur if, for example, the
screen contains &quot;hot spots.&quot; When the machine is using
large fonts, the dialog resizes and the hot spots no longer
coincide with the language names or the exit text. The
application doesn&#146;t work as expected. Avoid this pitfall by
creating a static window with SS_BITMAP and SS_CENTERIMAGE flags
instead of using a dialog window. Also, large font text may be
clipped if your text windows are too small. </font></p>

<p><font size="2" face="verdana">&nbsp;&nbsp;&nbsp;<b>Tip 16: Be sure you have
the right rights</b></font></p>

<p><font size="2">Your user may not have some rights or
permissions your program needs to install or execute an
application. Document any special rights your user needs
(Administrator, Backup Operator, etc.). </font></p>

<p><font size="2" face="verdana">More information online</font></p>

<p><font size="2">For a comprehensive, much-expanded version of
this article, go to the <i>Win32 Development</i> Web site<b></b><a href="http://www.microsoft.com/win32dev/guidelns/testnt40.htm"><b>(http://www.microsoft.com/win32dev/guidelns/testnt40.htm)</b>.</a>
</font></p>

<p><font size="2"><i>Nancy Winnick Cluts is a Developer Network
technology writer and lead writer on the </i>Win32 Development<i>
site.</i></font>
<blockquote>
    <p align="center"><font color="#0000ff" size="3"
    face="verdana">Microsoft&#146;s new Win32
    Development Web site contains an extensive list of tips for
    testing applications.</font>
    <p align="center"><font color="#0000ff" size="3"
    face="verdana">Test to be sure all your parameters
    are valid, even if one of the operating systems doesn&#146;t
    use some of them.</font></p>
</blockquote>
</font></body>
</html>

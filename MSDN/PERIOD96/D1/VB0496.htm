<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="D:\CDs\templates\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Old Dogs, New Tricks (April)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Old Dogs, New Tricks</b></font></p>
    <p><font size="2">Bill Shadish</font></p>
    <p><font size="2"><i>Learn how to implement the new Training
    Cards feature in Windows 95 Help by using the author&#146;s
    Coach control, a trial copy of which is included with the
    sample code. You can download samples and an evaluation copy
    of Coach from http://www.fo.com or from Pinnacle&#146;s BBS.</i></font></p>
    <p><font size="2">NO, this isn&#146;t an article about my
    mother-in-law. (After all, she really doesn&#146;t know any
    new tricks.) It is, however, an explanation of the slick
    training card features found in the new Windows 95 Help
    engine. </font></p>
    <p><font size="2">TCARDs, or training cards, provide a way to
    more tightly integrate your applications with the help files
    you create. Using training cards allows a program to
    communicate with a help file and lets that help file
    communicate back to the calling program. In other words,
    TCARDs are Extra Special Super Secret ways to provide
    Wizard-like, helping-hand features for the users of your
    Windows 95 apps.</font></p>
    <p><font size="2">The TC-WIZ VB application in Figure 1 shows
    a Candy Store inventory ordering system. As with most
    systems, some areas on the screen may be somewhat unclear,
    especially to novice users. For example, not everyone will
    immediately grasp what the terms under the Units combo box
    (Each, Case, Box, Gross, and Unit) stand for. Come on
    now&#151;are you <i>sure</i> that you know how many are in a <i>Unit</i>?</font></p>
</blockquote>

<p><font size="2" face="Palatino,Book Antiqua"><img
src="Image6.gif" width="532" height="441"></font></p>

<blockquote>
    <p><font size="2"><b>Figure 1.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>TC-WIZ&#146;s underlying order application.</b></font></p>
    <p><font size="2">&quot;Normal&quot; help files can easily
    explain things like this, but TC-WIZ (with a little help from
    training cards) adds something new: they harness the Help
    system to update the information on the main application
    screen, depending upon what the user clicks on in the Help
    file.</font></p>
    <p><font size="5"><b>How TC-WIZ works</b></font></p>
    <p><font size="2">TC-WIZ is a normal-looking order entry
    screen except that the Ins and Del functions are
    disabled&#151;all you can do is <i>change</i> the data. As a
    user clicks on an item in the top list box, details are
    displayed in the frame at the bottom left. The Price,
    Quantity Ordered, and Units data can be changed by the user,
    and clicking on the purple triangle button updates the top
    list box data (the app first asks users to confirm any
    changes before they&#146;re made). The totals on the bottom
    right are updated to reflect any changes that have been made
    to the data in the list box.</font></p>
    <p><font size="2">TC-WIZ provides help on the Quantity
    Ordered, Price Each, and Units entry fields&#151;you click on
    one of these three fields and then press the Help button (see
    Figure 2). At this point, the user can close help or inspect
    the underlined help jumps to find more specific descriptions
    on Each, Box, Case, Unit, or Gross. Once a user selects a
    specific description, they&#146;ll see something like the
    Each topic shown in Figure 2.</font></p>
</blockquote>

<p><font size="2" face="Palatino,Book Antiqua"><img
src="Image7.gif" width="547" height="443"></font></p>

<blockquote>
    <p><font size="2"><b>Figure 2.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>Users make entries from within Help.</b></font></p>
    <p><font size="2">The Each topic includes a help-authorable
    button called Use. If the user clicks on Use, the WinHelp
    engine tells the TC-WIZ application that this button has been
    chosen. WinHelp tells your application about this by sending
    a message to the VB 4.0 application. TC-WIZ can then fire an
    event in the application that interprets this message. This
    means you can change the application screen <i>without the
    user doing anything other than clicking in help.</i> If you
    try running through this process, you&#146;ll find that not
    only is the combo changed to reflect Each, but that the app
    also updates the display and the totals. Users easily see the
    impact of changing the units field all the way through to the
    bottom line. Granted, this is a trivial example, but you can
    imagine how it could be extended to handle modeling or
    financial analysis applications. </font></p>
    <p><font size="2">So what&#146;s really going on when a user
    displays the Each help window and chooses Use? The Use button
    is actually an authorable button on the help screen that
    calls a macro called TCARD(<i>identifier</i>), which sends a
    message back to the calling VB program. This message includes
    a unique identifier that the VB app uses to determine the
    source of the message. The button knows what VB program
    it&#146;s associated with, thanks to the OLE control called
    Coach, in the VB screen that binds the program to the help
    file. When the OLE control receives the message that an
    authorable button has been clicked, an event is fired in the
    control&#151;an event that you can respond to in any way you
    want. The TC-WIZ app responds to the messages it receives by
    updating the information in the item-specific bottom frame.
    Then, after prompting the user to confirm any changes, it
    updates the main list and all relevant totals. The
    information that the authorable button passes back to the VB
    application comes in the form of integers, which you can see
    displayed in the bottom of the TC-WIZ application in the
    boxes labeled command and data (see Figure 3).</font></p>
    <p>&nbsp;</p>
</blockquote>

<p><font size="2" face="Palatino,Book Antiqua"><img
src="Image8.gif" width="196" height="24"></font></p>

<blockquote>
    <p><font size="2"><b>Figure 3.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>Authorable button data.</b></font></p>
    <p><font size="2">To further explain training card
    development, I first need to talk about the Windows 95 Help
    Engine, help-file code, OCX add-ins, and your VB application
    itself.</font></p>
    <p><font size="5"><b>Windows 95 Help Engine</b></font></p>
    <p><font size="2">In Windows 95, the Windows 3.11 API call,
    BOOL WinHelp(hwnd, lpszHelpFile, fuCommand, dwData), has been
    modified to include TCARD support. The real data is passed in
    fuCommand and dwData. The fuCommand parm controls basic
    display information such as which specific help topic is
    displayed, where to position the help window, or to close the
    Help window. The dwData parm contains any supplemental
    information that may be required to complete the command,
    such as the help topic number to display when you want to
    show a specific help topic. This line shows an example of the
    commands that can be passed to WinHelp:</font></p>
    <p><font size="2" face="Courier New">HELP_CONTENTS,
    HELP_SETCONTENTS, _</font></p>
    <p><font size="2" face="Courier New">HELP_CONTEXTPOPUP,
    HELP_KEY, HELP_PARTIALKEY, _</font></p>
    <p><font size="2" face="Courier New">HELP_MULTIKEY,
    HELP_COMMAND, HELP_SETWINPOS, _</font></p>
    <p><font size="2" face="Courier New">HELP_FORCEFILE,
    HELP_HELPONHELP, HELP_TCARD, _</font></p>
    <p><font size="2" face="Courier New">HELP_QUIT</font></p>
    <p><font size="2">Ahhh, you saw the HELP_TCARD in that last
    mess, eh? Well, that&#146;s a new one that&#146;s been added
    for Windows 95 Help. Calling WinHelp with the HELP_TCARD parm
    tells help that you&#146;d like to open your help file with
    training card support. The code that tells the application
    about the Use button being clicked is part of the help file
    itself.</font></p>
    <p><font size="5"><b>Help file code</b></font></p>
    <p><font size="2">Help developers don&#146;t really have to
    do much more to create a training card application than they
    would otherwise. Logically, training cards work like
    pop-ups&#151;they&#146;re relatively self-contained as far as
    their content goes. The VB app calls for a specific card to
    explain one thing, after which the user typically returns to
    the application and goes on to another data entry field.</font></p>
    <p><font size="2">One nice thing about training card help
    files is that you don&#146;t need a contents page for them,
    because the VB application jumps directly to the spot in
    question for you. Because the user doesn&#146;t move through
    an index or search screen to find a topic, all you need is
    the topics themselves. Training cards do require starting on
    a secondary window, because the main help window may be busy
    handling other tasks at the same time.</font></p>
    <p><font size="2">To add buttons to the help topics that
    communicate back to the calling VB program, you create a
    button and then add the TCARD (command) macro. You can also
    add other macros like Next, Close Secondary, and so forth
    where appropriate. The command parm is a unique value
    associated with each button that you pass back to the calling
    application when the button is clicked. I used Blue Sky
    software&#146;s RoboHELP to create the help file.</font></p>
    <p><font size="5"><b>OLE control</b></font></p>
    <p><font size="2">TC-WIZ contains a 32-bit control called
    foCoach.OCX that handles the messages coming back from the
    TCARD macros in the Help file. You can also set properties
    like helpfile and helpwindow. I&#146;ve included a trial copy
    of the Coach control with the sample code on the Companion
    Disk. The Coach control provides the following properties,
    methods and events:</font></p>
    <p><font size="4"><b>PROPERTIES</b></font></p>
    <p><font size="2">HelpFile (String):<b> </b>Sets the help
    file for this control instance.</font></p>
    <p><font size="2">HelpWindow (String): TCARD help requires a
    secondary window. This is the name of the window to use. The
    window must be defined in the help file.</font></p>
    <p><font size="2">Version (String, Readonly): The version and
    copyright notice for the control.</font></p>
    <p><font size="4"><b>METHODS</b></font></p>
    <p><font size="2">In the methods listed below, <i>HelpFile</i>
    (optional) is a String name of the help file. If omitted, the
    HelpFile property is used. If supplied, it also sets the
    HelpFile property. This parameter must be supplied if the
    HelpFile property hasn&#146;t been set. </font></p>
    <p><font size="2">HelpWindow (optional) is a String name of
    the secondary window to use. If omitted, the HelpWindow
    property is used. If supplied, it also sets the HelpWindow
    property. This parameter must be supplied if the HelpWindow
    property hasn&#146;t been set. JumpToContext starts a
    training card session and displays the help files topic
    identified by the ContextID.</font></p>
    <p><font size="2" face="Courier New">JumpToContext ContextID
    [, HelpFile [, HelpWindow]]</font></p>
    <p><font size="2"><i>ContextID</i> is a Long context id
    defined in the help file.</font></p>
    <p><font size="2">JumpToKeyword starts a training card
    session and displays the help file topic identified by the
    Keyword. </font></p>
    <p><font size="2" face="Courier New">JumpToKeyword Keyword [,
    HelpFile [, HelpWindow]]</font></p>
    <p><font size="2"><i>Keyword</i> is a String keyword value
    defined in the help file. If more than one topic has the
    keyword, WinHelp displays a list of topics for the user to
    pick from. You&#146;ll probably want to use unique keywords
    for this application. Keywords appear in the index to the
    help file. </font></p>
    <p><font size="2" face="Courier New">JumpToAltKeyword Keyword
    [, HelpFile [, HelpWindow]]</font></p>
    <p><font size="2"><i>Keyword</i> is a String
    &quot;alternate&quot; keyword value defined in the help file.
    If more than one topic has the keyword, WinHelp displays a
    list of topics for the user to pick from. You may want to use
    unique keywords here, too. Alternate Keywords don&#146;t
    appear in the index to the help file, so these probably make
    better symbolic names for topics than the normal indexed
    keywords. The <i>Close</i> method releases the WinHelp
    application. The <i>AboutBox</i><b> </b>method displays the
    control&#146;s About box.</font></p>
    <p><font size="4"><b>EVENTS</b></font></p>
    <p><font size="2">This event is fired in response to actions
    taken in WinHelp:</font></p>
    <p><font size="2" face="Courier New">Coach(Command As
    Integer, Data As Long)</font></p>
    <p><font size="2">The Command parameter is a predefined
    constant value taken from this list:</font></p>
</blockquote>

<table border="0" cellpadding="7" cellspacing="0" width="295">
    <tr>
        <td width="50%"><font size="1"><b>Parameter</b></font></td>
        <td width="50%"><font size="1"><b>Authorable Button name</b></font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachAbort</i></font></td>
        <td width="50%"><font size="1">TCard(IDABORT)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachCancel</i></font></td>
        <td width="50%"><font size="1">TCard(IDCANCEL)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachData</i></font></td>
        <td width="50%"><font size="1">TCard(x), where <i>x</i>
        is a numeric value. The value of <i>x</i> appears in the
        Data parameter.</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachHelp</i></font></td>
        <td width="50%"><font size="1">TCard(IDHELP)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachIgnore</i></font></td>
        <td width="50%"><font size="1">TCard(IDIGNORE)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachNo</i></font></td>
        <td width="50%"><font size="1">TCard(IDNO)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachOK</i></font></td>
        <td width="50%"><font size="1">TCard(IDOK)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachRetry</i></font></td>
        <td width="50%"><font size="1">TCard(IDRETRY)</font></td>
    </tr>
    <tr>
        <td width="50%"><font size="1"><i>coachYes</i></font></td>
        <td width="50%"><font size="1">TCard(IDYES)</font></td>
    </tr>
</table>

<blockquote>
    <p><font size="2">The <i>coachClose</i> parameter is the
    TCARD instance of WinHelp closed by the user. The Data
    parameter is 0 unless Command is coachData. </font></p>
    <p><font size="5"><b>The VB application</b></font></p>
    <p><font size="2">The final step is to wrap some VB code
    around Coach to set its properties and deal with the messages
    coming back to TC-WIZ from the Help file. Remember how you
    needed to click on Quantity, Price, or Units first, before
    running Help? The reason is that you&#146;re storing the help
    context ID of these fields in a public variable called
    LastControlHelpID. Then, when a user calls for Help, the Help
    button code uses LastControlHelpID to decide which help topic
    to display. There are four steps to set this up:</font></p>
    <p><font size="4"><b>Step 1: Determine HelpIDs</b></font></p>
    <p><font size="2">First, RoboHELP generates a file called
    TC-WIZ.HH that contains a list of the help topics found in
    TC-WIZ.HLP. A portion of TC-WIZ.HH looks like this:</font></p>
    <p><font size="2" face="Courier New">#define Quantity 2</font></p>
    <p><font size="2" face="Courier New">#define Package_Sizes 3</font></p>
    <p><font size="2" face="Courier New">#define Case 4</font></p>
    <p><font size="2" face="Courier New">#define Unit 5</font></p>
    <p><font size="2" face="Courier New">#define Gross 6</font></p>
    <p><font size="2">I converted this file, by running it
    through a little VB filter program, into a .BAS file that I
    added to my example project. The .BAS file (TC-WIZ.BAS) looks
    like this: </font></p>
    <p><font size="2" face="Courier New">Global Const hlpQUANTITY
    = 2</font></p>
    <p><font size="2" face="Courier New">Global Const
    hlpPACKAGE_SIZES = 3</font></p>
    <p><font size="2" face="Courier New">Global Const hlpCASE = 4</font></p>
    <p><font size="2" face="Courier New">Global Const hlpUNIT = 5</font></p>
    <p><font size="2" face="Courier New">Global Const hlpGROSS =
    6</font></p>
    <p><font size="2" face="Courier New">'etc.</font></p>
    <p><font size="2" face="Courier New">Public Const USE_CASE =
    100</font></p>
    <p><font size="2" face="Courier New">Public Const USE_UNIT =
    200</font></p>
    <p><font size="2" face="Courier New">Public Const USE_GROSS =
    300</font></p>
    <p><font size="2" face="Courier New">'etc. </font></p>
    <p><font size="2">It&#146;s not hard to see what happened: I
    switched #define to Public Const, inserted an equal sign
    before the identifier number, upper-cased the text, and
    prepended a lower case &quot;hlp.&quot; The &quot;USE_&quot;
    identifiers are passed back in the TCARD macros when a user
    clicks on USE under the associated help topics. You&#146;ll
    need the USE_ constants in the message-handling section of
    code.</font></p>
    <p><font size="4"><b>Step 2: Load HelpIDs</b></font></p>
    <p><font size="2">In the form_Load event of frmMain, you set
    the properties for the three controls you want to provide
    training card help on with the hlp identifiers I&#146;ve
    shown. The code looks like this:</font></p>
    <p><font size="2" face="Courier New">Private Sub Form_Load()</font></p>
    <p><font size="2" face="Courier New">#If Win16 Then</font></p>
    <p><font size="2" face="Courier New">MsgBox (&quot;This
    example is designed for _</font></p>
    <p><font size="2" face="Courier New">32bit VB 4.0
    only.&quot;)</font></p>
    <p><font size="2" face="Courier New">End</font></p>
    <p><font size="2" face="Courier New">#End If</font></p>
    <p><font size="2" face="Courier New">Me.Enabled = False</font></p>
    <p><font size="2" face="Courier New">Call centerForm(Me)</font></p>
    <p><font size="2" face="Courier New">Dim i%</font></p>
    <p><font size="2" face="Courier New">Dim dTotalPrice As
    Double</font></p>
    <p><font size="2" face="Courier New">cTab$ = Chr$(9)</font></p>
    <p><font size="2" face="Courier New">cTab2$ = cTab$ &amp;
    cTab$</font></p>
    <p><font size="2" face="Courier New">iNbrItems% = 6</font></p>
    <p><font size="2" face="Courier New">mskPrice.HelpContextID =
    hlpPRICE</font></p>
    <p><font size="2" face="Courier New">mskQuantity.HelpContextID
    = hlpQUANTITY</font></p>
    <p><font size="2" face="Courier New">cmbUnits.HelpContextID =
    hlpPACKAGE_SIZES</font></p>
    <p><font size="4"><b>Step 3: Code setup</b></font></p>
    <p><font size="2">When TC-WIZ is running, you set the
    required properties of Coach and load the TC-WIZ.HLP file
    within the TC-WIZ cmdHELP_Click code in TC-WIZ. When a user
    clicks on Help, you load the Helpfile, the secondary help
    window to show (the TCARD), and the topic you want to load in
    Help. The topic you want is whatever the LastControlHelpID
    was set to, so that&#146;s what you pass as a parm to the
    JumpToContext Coach method:</font></p>
    <p><font size="2" face="Courier New">Private Sub
    cmdHelp_Click()</font></p>
    <p><font size="2" face="Courier New">If LastControlHelpID = 0
    Then</font></p>
    <p><font size="2" face="Courier New">MsgBox (&quot;Click on
    the Quantity Ordered, _</font></p>
    <p><font size="2" face="Courier New">Price Each or Units
    field; _</font></p>
    <p><font size="2" face="Courier New">then click on Help
    again.&quot;)</font></p>
    <p><font size="2" face="Courier New">Exit Sub</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">foCoach1.HelpFile =
    App.Path &amp; &quot;\TC-WIZ.HLP&quot;</font></p>
    <p><font size="2" face="Courier New">foCoach1.HelpWindow =
    &quot;tcard&quot;</font></p>
    <p><font size="2" face="Courier New">foCoach1.JumpToContext
    LastControlHelpID</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">LastControlHelpID is set by clicking on a
    control that has a GotFocus event set up:</font></p>
    <p><font size="2" face="Courier New">Private Sub
    cmbUnits_GotFocus()</font></p>
    <p><font size="2" face="Courier New">Me.MousePointer = 99</font></p>
    <p><font size="2" face="Courier New">Me.MouseIcon =
    icoHand.Picture</font></p>
    <p><font size="2" face="Courier New">LastControlHelpID = _</font></p>
    <p><font size="2" face="Courier New">Me.ActiveControl.HelpContextID</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">At this point, WinHelp takes control and
    TC-WIZ waits to see where the user moves to in help. </font></p>
    <p><font size="4"><b>Step 4: event processing</b></font></p>
    <p><font size="2">If a user clicks on a USE button, a message
    is sent back to TC-WIZ and intercepted by the Coach control.
    This is where you can add code via the Coach event. The event
    contains the data from the TCARD macro coded by the help
    developer, so that you&#146;ll know which &quot;Use&quot;
    button the user chose. From that point on it&#146;s all VB
    code (see Listing 1). </font></p>
    <p><font size="2"><b>Listing 1.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>This code shows how I handle the Units combo box
    help and change the screens to reflect the button selected.</b></font></p>
    <p><font size="2" face="Courier New">Private Sub
    foCoach1_Coach(ByVal Command As Integer, ByVal Data As Long)</font></p>
    <p><font size="2" face="Courier New">Dim iCloseHelp%</font></p>
    <p><font size="2" face="Courier New">fraHelpInfo.Visible =
    True</font></p>
    <p><font size="2" face="Courier New">lblCommand =
    Format$(Command)</font></p>
    <p><font size="2" face="Courier New">lblData = Format$(Data)</font></p>
    <p><font size="2" face="Courier New">iCloseHelp% = False</font></p>
    <p><font size="2" face="Courier New">Select Case Command</font></p>
    <p><font size="2" face="Courier New">Case 8 ' help is closing</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close</font></p>
    <p><font size="2" face="Courier New">Case 16 ' information
    was chosen in help</font></p>
    <p><font size="2" face="Courier New">Select Case Data</font></p>
    <p><font size="2" face="Courier New">Case USE_CASE </font></p>
    <p><font size="2" face="Courier New">' USE_CASE, USE_UNIT,
    etc. are the </font></p>
    <p><font size="2" face="Courier New">' constants defined to
    match the TCARD</font></p>
    <p><font size="2" face="Courier New">' codes provided by the
    Help Developer.</font></p>
    <p><font size="2" face="Courier New">Call SetUnits(cmbUnits,
    &quot;Case&quot;)</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close ' close
    the help window</font></p>
    <p><font size="2" face="Courier New">Call
    grpChange_Click(True) ' change the </font></p>
    <p><font size="2" face="Courier New">' screens</font></p>
    <p><font size="2" face="Courier New">iCloseHlp% = True</font></p>
    <p><font size="2" face="Courier New">Case USE_UNIT</font></p>
    <p><font size="2" face="Courier New">Call SetUnits(cmbUnits,
    &quot;Unit&quot;)</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close</font></p>
    <p><font size="2" face="Courier New">Call
    grpChange_Click(True)</font></p>
    <p><font size="2" face="Courier New">iCloseHlp% = True</font></p>
    <p><font size="2" face="Courier New">Case USE_GROSS</font></p>
    <p><font size="2" face="Courier New">Call SetUnits(cmbUnits,
    &quot;Gross&quot;)</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close</font></p>
    <p><font size="2" face="Courier New">Call
    grpChange_Click(True)</font></p>
    <p><font size="2" face="Courier New">iCloseHlp% = True</font></p>
    <p><font size="2" face="Courier New">Case USE_BOX</font></p>
    <p><font size="2" face="Courier New">Call SetUnits(cmbUnits,
    &quot;Box&quot;)</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close</font></p>
    <p><font size="2" face="Courier New">Call
    grpChange_Click(True)</font></p>
    <p><font size="2" face="Courier New">iCloseHlp% = True</font></p>
    <p><font size="2" face="Courier New">Case USE_EACH</font></p>
    <p><font size="2" face="Courier New">Call SetUnits(cmbUnits,
    &quot;Each&quot;)</font></p>
    <p><font size="2" face="Courier New">foCoach1.Close</font></p>
    <p><font size="2" face="Courier New">Call
    grpChange_Click(True)</font></p>
    <p><font size="2" face="Courier New">iCloseHlp% = True</font></p>
    <p><font size="2" face="Courier New">End Select</font></p>
    <p><font size="2" face="Courier New">Case Else</font></p>
    <p><font size="2" face="Courier New">End Select</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">Training cards let you build tightly
    integrated, wizard-like help files that can enhance
    productivity. Updates can happen automatically from the Help
    file without users having to key in data they&#146;ve seen
    displayed. Not only does this save time, it reduces the
    chances for error without something like a foCoach-type
    control, training cards don&#146;t provide callbacks or the
    ability to set properties in their parent application.</font></p>
    <p><font size="5"><b>Limitations</b></font></p>
    <p><font size="2">As written, the</font><font size="3"> </font><font
    size="2">TCARD interface works best with one application at a
    time&#151;you may run into problems if you have two or more
    applications (different executables) trying to use the
    WinHelp training cards at the same time.</font></p>
    <p><font size="2"><i>Bill Shadish is a principal of
    Fundamental Objects Inc., working with OLE controls and OLE
    Server technology. Bill teaches Advanced Visual Basic for
    CorporateU, a Northeast training firm and is coauthor of </i></font><font
    size="2" face="MyriaMMIt_400 RG 600 NO"><i>Using OLE in VB
    4.0</i></font><font size="2"><i>, published by Pinnacle
    Publishing Inc. E-mail bills@fo.com</i></font></p>
    <p>&nbsp;</p>
    <P align="center"><a
    href="http://www.pinppub.com/vbd/"><img src="Pinnacle.gif"
    border="0" width="216" height="72"></a></p>
    <P align="center"><strong>To find out more about
    Visual Basic Developer and Pinnacle Publishing, visit their
    website at</strong><a
    href="http://www.pinpub.com/level3/l3nsmacc.htm"> </a><a
    href="http://www.pinppub.com/vbd/"><strong>http://www.pinppub.com/vbd/
    </strong></a></p>
    <P align="center"><font size="1">Note: This is not
    a Microsoft Corporation website. <br>
    Microsoft is not responsible for its content.</font></p>
    <p><font size="1">This article is reproduced from the April
    1996 issue of Visual Basic Developer. Copyright 1996, by
    Pinnacle Publishing, Inc., unless otherwise noted. All rights
    are reserved. Visual Basic Developer is an independently
    produced publication of Pinnacle Publishing, Inc. No part of
    this article may be used or reproduced in any fashion (except
    in brief quotations used in critical articles and reviews)
    without prior consent of Pinnacle Publishing, Inc. To contact
    Pinnacle Publishing, Inc., please call (800)&nbsp;788-1900 or
    (206)&nbsp;251-1900.</font></p>
</blockquote>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="D:\CDs\templates\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overcoming Single Threads with Asynchronous OLE Automation (May)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Overcoming Single Threads with
    Asynchronous OLE Automation</b></font></p>
    <p><font size="2">Scot Hillier</font></p>
    <p><font size="2"><i>VB4 has taken some knocks because
    it&#146;s not multithreaded. Okay, it&#146;s not
    multithreaded. However, here&#146;s a workaround that you can
    use to mimic multithreading. The trick? Our old friend the
    timer control.</i></font></p>
    <p><font size="2">I hear a lot of talk these days about VB4
    and the subject of &quot;threads.&quot; What&#146;s a thread,
    you ask? Actually, it&#146;s nothing more than techno-jargon
    for the concept of an &quot;execution point&quot; inside your
    code, the line currently being executed by VB. The path that
    the execution follows is called the &quot;thread.&quot; The
    problem is that VB has only one of these threads&#151;that
    is, it can only execute one line of code at a time. That
    makes VB single-threaded&#151;much to the delight of
    competing 32-bit development tool vendors that can lay claim
    to having products that are (get ready), multithreaded.</font></p>
    <p><font size="2">The advantage of multithreaded applications
    is that they can do more than one thing at a time. They can
    print a document while the user is querying a database, for
    example, or they can save a file while accepting user input.
    So, what do you do if you want to do more than one thing at a
    time with VB4? Are you doomed by the inherent single-threaded
    nature of the development tool? Of course not! You conquer
    the problem using the technology of Object Linking and
    Embedding (OLE) and save the day by creating a special kind
    of OLE server known as an <i>asynchronous</i> OLE server.</font></p>
    <p><font size="5"><b>Fun with file input</b></font></p>
    <p><font size="2">Inputting and outputting data is certainly
    a major task in many VB applications. But is it pretty? I
    think not. After all, VB4 doesn&#146;t yet support the
    stylish animated cursors found in Win95 and WinNT, nor does
    it support those cool animations that occur during file
    operations. About the only thing you can do in VB is provide
    a status bar, progress bar, and an hourglass to indicate to
    the user that your program is busy. This might be enough for
    some people, but after seeing the animations in Win95, well.
    . . . </font></p>
    <p><font size="2">Besides&#151;and here&#146;s the
    rub&#151;I&#146;m going to use these fun little animations to
    sneak in a serious discussion about asynchronous OLE. </font></p>
    <p><font size="2">Asynchronous OLE? What&#146;s that, anyway?
    It sounds like something you&#146;d say if you&#146;re woken
    by the phone at 3 a.m. But it&#146;s really not
    difficult&#151;assuming you&#146;ve got a fundamental
    knowledge of creating OLE servers under your belt. If not,
    the exercises here should be simple enough to do anyway, but
    proceed with caution.</font></p>
    <p><font size="2">The strategy I&#146;ll use to create a
    Win95 animation is to simply place a series of image controls
    on a form (see Figure 1) and make them visible sequentially.
    For the series of pictures, I used a combination of icons
    already available in VB4 plus a few I created myself using
    the Image Editor, an application that ships with VB4 that
    lets you draw your own bitmaps, icons, and cursors. You can
    find it in the TOOLS directory on the VB4 CD.</font></p>
</blockquote>

<p><font size="2" face="Palatino,Book Antiqua"><img
src="Image13.gif" width="331" height="131"></font></p>

<blockquote>
    <p><font size="2"><b>Figure 1.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>The form with image controls that will be
    displayed sequentially.</b></font></p>
    <p><font size="2">Generating the animation is simply a matter
    of using a timer control to cycle through the images on the
    form and displaying them one at a time. But here&#146;s the
    catch&#151;you&#146;ll make this little animation app into an
    OLE server that you can call from any application you write.
    Additionally, the animation takes place asynchronously,
    meaning that it runs in a separate memory space from the
    client application so that you can more efficiently use the
    resources of the calling application. </font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO">Listing
    1</font><font size="2"> shows the code for the animation OLE
    server.</font></p>
    <p><font size="2"><b>Listing 1. Form, class, and module
    source code for the animation OLE server.</b></font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'frmAnimate</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">Private Sub
    timAnimate_Timer()</font></p>
    <p><font size="2" face="Courier New">'Author: Scot P. Hillier</font></p>
    <p><font size="2" face="Courier New">'Purpose: Animate the
    File IO</font></p>
    <p><font size="2" face="Courier New">'11/22/95 Original</font></p>
    <p><font size="2" face="Courier New">On Error GoTo TimerErr</font></p>
    <p><font size="2" face="Courier New">Static intSequence As
    Integer</font></p>
    <p><font size="2" face="Courier New">intSequence =
    intSequence + 1</font></p>
    <p><font size="2" face="Courier New">If intSequence &lt; 1
    Then intSequence = 1</font></p>
    <p><font size="2" face="Courier New">If intSequence &gt; 6
    Then intSequence = 1</font></p>
    <p><font size="2" face="Courier New">Select Case intSequence</font></p>
    <p><font size="2" face="Courier New">Case 1</font></p>
    <p><font size="2" face="Courier New">imgFile(6).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(7).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">imgFile(1).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">Case 2</font></p>
    <p><font size="2" face="Courier New">imgFile(1).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(2).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">Case 3</font></p>
    <p><font size="2" face="Courier New">imgFile(2).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(3).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">Case 4</font></p>
    <p><font size="2" face="Courier New">imgFile(3).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(4).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">Case 5</font></p>
    <p><font size="2" face="Courier New">imgFile(4).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(5).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">Case 6</font></p>
    <p><font size="2" face="Courier New">imgFile(5).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(7).Visible =
    False</font></p>
    <p><font size="2" face="Courier New">imgFile(6).Visible =
    True</font></p>
    <p><font size="2" face="Courier New">End Select</font></p>
    <p><font size="2" face="Courier New">TimerExit:</font></p>
    <p><font size="2" face="Courier New">Exit Sub</font></p>
    <p><font size="2" face="Courier New">TimerErr:</font></p>
    <p><font size="2" face="Courier New">'We certainly don't
    expect any errors in</font></p>
    <p><font size="2" face="Courier New">'this simple routine,
    but if we get one,</font></p>
    <p><font size="2" face="Courier New">'we'll only show it if
    this is the Beta</font></p>
    <p><font size="2" face="Courier New">'version.</font></p>
    <p><font size="2" face="Courier New">#If Beta Then</font></p>
    <p><font size="2" face="Courier New">MsgBox Err.Description
    &amp; Chr$(10) &amp; Err.Number</font></p>
    <p><font size="2" face="Courier New">#End If</font></p>
    <p><font size="2" face="Courier New">Resume TimerExit</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'File Class</font></p>
    <p><font size="2" face="Courier New">BEGIN</font></p>
    <p><font size="2" face="Courier New">MultiUse = -1 'True</font></p>
    <p><font size="2" face="Courier New">END</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Name =
    &quot;File&quot;</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Creatable =
    True</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Exposed =
    True</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">'Class Properties are
    implemented as Private</font></p>
    <p><font size="2" face="Courier New">'Variables embedded in
    Property procedures</font></p>
    <p><font size="2" face="Courier New">Private m_Enabled As
    Boolean</font></p>
    <p><font size="2" face="Courier New">Private m_Visible As
    Boolean</font></p>
    <p><font size="2" face="Courier New">Private Sub
    Class_Initialize()</font></p>
    <p><font size="2" face="Courier New">'Load the Animation Form</font></p>
    <p><font size="2" face="Courier New">Load frmAnimate</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    Class_Terminate()</font></p>
    <p><font size="2" face="Courier New">'Unload the Animation
    Form</font></p>
    <p><font size="2" face="Courier New">Unload frmAnimate</font></p>
    <p><font size="2" face="Courier New">Set frmAnimate = Nothing</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Public Property Get
    Enabled() As Boolean</font></p>
    <p><font size="2" face="Courier New">Enabled = m_Enabled</font></p>
    <p><font size="2" face="Courier New">End Property</font></p>
    <p><font size="2" face="Courier New">Public Property Let
    Enabled(blnEnabled As Boolean)</font></p>
    <p><font size="2" face="Courier New">'Change the Timer State
    as save to variable</font></p>
    <p><font size="2" face="Courier New">frmAnimate.timAnimate.Enabled
    = blnEnabled</font></p>
    <p><font size="2" face="Courier New">m_Enabled = blnEnabled</font></p>
    <p><font size="2" face="Courier New">End Property</font></p>
    <p><font size="2" face="Courier New">Public Property Get
    Visible() As Boolean</font></p>
    <p><font size="2" face="Courier New">Visible = m_Visible</font></p>
    <p><font size="2" face="Courier New">End Property</font></p>
    <p><font size="2" face="Courier New">Public Property Let
    Visible(blnVisible As Boolean)</font></p>
    <p><font size="2" face="Courier New">'Show or Hide the Form
    and save</font></p>
    <p><font size="2" face="Courier New">'the state to the
    Private Variable</font></p>
    <p><font size="2" face="Courier New">frmAnimate.Visible =
    blnVisible</font></p>
    <p><font size="2" face="Courier New">m_Visible = blnVisible</font></p>
    <p><font size="2" face="Courier New">End Property</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'modFile Module</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">'Animation Constants</font></p>
    <p><font size="2" face="Courier New">Public Const myFileCopy%
    = 0</font></p>
    <p><font size="2" face="Courier New">Public Sub Main()</font></p>
    <p><font size="2" face="Courier New">'This procedure simply
    gives the OLE</font></p>
    <p><font size="2" face="Courier New">'server a place to
    start. No code is</font></p>
    <p><font size="2" face="Courier New">'executed here.</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">With the code from Listing 1 in your VB
    project, you need to complete the OLE server. This requires
    going to the Tools-Options selection on the VB menu and
    clicking on the Project tab. In the Project options, give
    your OLE server the name ProcessAnimator and the description
    &quot;Displays animations while system processes occur.&quot;
    Also, be sure to change the StartMode option to OLE Server.
    Then save the project and create an executable. Make sure the
    executable is registered with the system registry by running
    the finished app one time from the File Manager. (The
    executable OLE servers you create in VB automatically
    register themselves with the system registry whenever they
    are run directly from Windows. If the server isn&#146;t
    registered, clients can&#146;t call the server.)</font></p>
    <p><font size="5"><b>Using the animation</b></font></p>
    <p><font size="2">To test the new OLE server, create a client
    application (Listing 2) that calls the server. Although the
    client is a simple application that saves some data to a text
    file, it demonstrates how to call the server from any
    application. Be sure to set a Reference to the new OLE server
    by using the Tools-References dialog box. Run the application
    and press the Save button. You&#146;ll start the animation
    process while saving the file.</font></p>
    <p><font size="2"><b>Listing 2.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>The client application.</b></font></p>
    <p><font size="2" face="Courier New">'frmClient</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">Private Sub
    cmdSave_Click()</font></p>
    <p><font size="2" face="Courier New">Dim i As Long</font></p>
    <p><font size="2" face="Courier New">'Turn on the animation</font></p>
    <p><font size="2" face="Courier New">pobjAnimate.Visible =
    True</font></p>
    <p><font size="2" face="Courier New">pobjAnimate.Enabled =
    True</font></p>
    <p><font size="2" face="Courier New">'Now try to save some
    data to a file</font></p>
    <p><font size="2" face="Courier New">Open App.Path &amp;
    &quot;\temp.txt&quot; For Output As #1</font></p>
    <p><font size="2" face="Courier New">For i = 1 To 10000</font></p>
    <p><font size="2" face="Courier New">Print #1, Format$(i)</font></p>
    <p><font size="2" face="Courier New">Next</font></p>
    <p><font size="2" face="Courier New">Close #1</font></p>
    <p><font size="2" face="Courier New">'Turn off animation</font></p>
    <p><font size="2" face="Courier New">pobjAnimate.Visible =
    False</font></p>
    <p><font size="2" face="Courier New">pobjAnimate.Enabled =
    False</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    Form_Unload(Cancel As Integer)</font></p>
    <p><font size="2" face="Courier New">Set pobjAnimate =
    Nothing</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'Main Module</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">Public pobjAnimate As
    ProcessAnimator.File</font></p>
    <p><font size="2" face="Courier New">Public Sub Main()</font></p>
    <p><font size="2" face="Courier New">frmClient.Show</font></p>
    <p><font size="2" face="Courier New">Set pobjAnimate = New
    ProcessAnimator.File</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">The significance of this simple
    demonstration is that by using an OLE server, you effectively
    start a second process. That is, the animation runs in its
    own memory space while the file is being saved. This means
    that you can do more than one thing at a time&#151;like
    saving a file while you print&#151;which isn&#146;t possible
    in a simple single-threaded environment. The key to
    accomplishing the asynchronous action is the timer control.
    The timer control starts the animation for you, like a second
    user starting the process. By using the timer control, you
    can start OLE servers without explicitly writing the code in
    the client. This makes asynchronous OLE possible.</font></p>
    <p><font size="5"><b>Call me sometime</b></font></p>
    <p><font size="2">Asynchronous OLE automation has many more
    powerful uses than merely displaying animations. The height
    of this power is reached when you implement a callback from
    an asynchronous OLE server. This means that you can give a
    chunk of work to an asynchronous OLE server, go away, and the
    server will call your application when it&#146;s done. The
    work you give can be a set of records to commit, a file to
    print, data to save, or virtually anything else you can
    imagine. Now I&#146;ll show you how to use asynchronous OLE
    automation to create a System Resource monitor that calls
    your application if free system resources decrease below a
    certain level.</font></p>
    <p><font size="2">First, let&#146;s review the steps required
    to create an Asynchronous OLE server with a Call Back
    feature:</font></p>
    <blockquote>
        <p><font size="2">Instantiate a &quot;CallBack&quot;
        object in the client application. The CallBack object is
        the object that receives the &quot;phone call&quot; from
        the OLE server. You give this object a method called
        &quot;Low Resources&quot; that is called by the
        asynchronous OLE server.</font></p>
        <p><font size="2">Instantiate the OLE server. Start the
        OLE server, but no monitoring is performed yet.</font></p>
        <p><font size="2">Pass a reference from the CallBack
        object to the server. By passing a reference from the
        client to the server, the OLE server can then use the
        &quot;LowResources&quot; method.&quot;</font></p>
        <p><font size="2">Begin monitoring in the server. In this
        case you build an OLE server that monitors free
        resources. The monitoring is triggered by a timer
        control. Just as with the animation server, the timer
        plays a critical role in starting the second process.</font></p>
        <p><font size="2">Call the client when the server detects
        low resources. By using the reference to the CallBack
        object, the server calls the &quot;LowResources&quot;
        method, notifying the client that the free resources are
        below the allowable threshold.</font></p>
    </blockquote>
    <p><font size="2">This strategy is the same for every
    asynchronous server. To create the resource server, you first
    build a Form called frmMonitor and place a single label on
    it, named lblServer, to display the free resources. The code
    for the server is on the Companion Disk.</font></p>
    <p><font size="2">To complete the OLE server, make sure that
    the Startup Form option is set to Sub Main and the Start Mode
    option is set to OLE Server. Under the Project Name option,
    type ResourceServer as one word and describe your server as
    Free System Resource Server. Run the server and minimize it.</font></p>
    <p><font size="2">Now build a simple client application to
    use the monitor. In a &quot;real world&quot; app, your client
    would probably be a lot more complex. Begin by constructing a
    form similar to the one in Figure 2. Give the controls these
    names:</font></p>
</blockquote>

<table border="0" cellpadding="7" cellspacing="0" width="300">
    <tr>
        <td width="48%"><font size="1">Check1</font></td>
        <td width="52%"><font size="1">chkEnabled</font></td>
    </tr>
    <tr>
        <td width="48%"><font size="1">Check2</font></td>
        <td width="52%"><font size="1">chkVisible</font></td>
    </tr>
    <tr>
        <td width="48%"><font size="1">Command1</font></td>
        <td width="52%"><font size="1">cmdQuit</font></td>
    </tr>
    <tr>
        <td width="48%"><font size="1">Hscroll1</font></td>
        <td width="52%"><font size="1">scrThreshold</font></td>
    </tr>
</table>

<p><font size="2" face="Palatino,Book Antiqua"><img
src="Image14.gif" width="290" height="136"></font></p>

<blockquote>
    <p><font size="2"><b>Figure 2.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>Sample form for accessing the resource monitor.</b></font></p>
    <p><font size="2">Add the code in Listing 3 to the client
    application. Set a reference to the asynchronous OLE server
    by using the Tools-References dialog box, and then run the
    client. You can use the horizontal scroll bar to change the
    low resources threshold and get a message back from the OLE
    server.</font></p>
    <p><font size="2"><b>Listing 3.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>Code that implements the client portion of the
    asynchronous resource monitor. </b></font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'Callback Class</font></p>
    <p><font size="2" face="Courier New">BEGIN</font></p>
    <p><font size="2" face="Courier New">MultiUse = 0 'False</font></p>
    <p><font size="2" face="Courier New">END</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Name =
    &quot;Callback&quot;</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Creatable =
    True</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Exposed =
    True</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">Public Sub
    LowResources()</font></p>
    <p><font size="2" face="Courier New">MsgBox &quot;Low System
    Resources&quot;</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">'frmClient </font></p>
    <p><font size="2" face="Courier New">Attribute VB_Name =
    &quot;frmClient&quot;</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Creatable =
    False</font></p>
    <p><font size="2" face="Courier New">Attribute VB_Exposed =
    False</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">'The object for the OLE
    Server</font></p>
    <p><font size="2" face="Courier New">Public pobjMonitor As
    ResourceServer.Monitor</font></p>
    <p><font size="2" face="Courier New">'The object to receive
    the &quot;Low Resources&quot; Event</font></p>
    <p><font size="2" face="Courier New">Private m_Callback As
    Callback</font></p>
    <p><font size="2" face="Courier New">Private Sub
    chkEnabled_Click()</font></p>
    <p><font size="2" face="Courier New">pobjMonitor.Enabled = -1
    * chkEnabled.Value</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    chkVisible_Click()</font></p>
    <p><font size="2" face="Courier New">pobjMonitor.Visible = -1
    * chkVisible.Value</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    cmdQuit_Click()</font></p>
    <p><font size="2" face="Courier New">Unload frmClient</font></p>
    <p><font size="2" face="Courier New">Set frmClient = Nothing</font></p>
    <p><font size="2" face="Courier New">End</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub Form_Load()</font></p>
    <p><font size="2" face="Courier New">Set pobjMonitor = New
    ResourceServer.Monitor</font></p>
    <p><font size="2" face="Courier New">Set m_Callback = New
    Callback</font></p>
    <p><font size="2" face="Courier New">pobjMonitor.Connect
    m_Callback</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    Form_Unload(Cancel As Integer)</font></p>
    <p><font size="2" face="Courier New">pobjMonitor.Disconnect
    m_Callback</font></p>
    <p><font size="2" face="Courier New">Set pobjMonitor =
    Nothing</font></p>
    <p><font size="2" face="Courier New">Set m_Callback = Nothing</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2" face="Courier New">Private Sub
    scrThreshold_Change()</font></p>
    <p><font size="2" face="Courier New">lblThreshold.Caption =
    Format$(scrThreshold.Value)</font></p>
    <p><font size="2" face="Courier New">pobjMonitor.Threshold =
    scrThreshold.Value</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
    <p><font size="2">Asynchronous OLE automation lets you
    overcome the limitations inherent in single-threaded VB. Once
    you master the technique, you&#146;ll realize that there are
    lots of ways to use this kind of server. You could use an
    async server to monitor a network and redirect traffic to
    different OLE objects based on load, for example, or use it
    to start other OLE servers before they&#146;re needed.
    Experiment!</font></p>
    <p><font size="2"><i>Scot Hillier is a veteran
    developer/instructor who has used Visual Basic since 1993 and
    has taught hundreds of professional developers the ins and
    outs of VB programming. Before joining New Technology
    Solutions, where, among other things, he teaches VB Bootcamp,
    Scot managed multiple projects with million-dollar budgets as
    an engineer in the nuclear power industry (he&#146;s a
    veteran nuclear-class submarine officer and a graduate of the
    Virginia Military Institute). Scot is also the acting
    director of the Connecticut Visual Basic Special Interest
    Group&#146;s Southern District and serves as editor of the
    CTVBSIG newsletter, </i>VB Methods.<i> CompuServe 71773,3612.</i></font></p>
    <p>&nbsp;</p>
    <P align="center"><a
    href="http://www.pinppub.com/vbd/"><img src="Pinnacle.gif"
    border="0" width="216" height="72"></a></p>
    <P align="center"><strong>To find out more about
    Visual Basic Developer and Pinnacle Publishing, visit their
    website at</strong> <a href="http://www.pinppub.com/vbd/"><strong>http://www.pinppub.com/vbd/
    </strong></a></p>
    <P align="center"><font size="1">Note: This is not
    a Microsoft Corporation website. <br>
    Microsoft is not responsible for its content.</font></p>
    <p><font size="1">This article is reproduced from the May
    1996 issue of Visual Basic Developer Copyright 1996, by
    Pinnacle Publishing, Inc., unless otherwise noted. All rights
    are reserved. Visual Basic Developer is an independently
    produced publication of Pinnacle Publishing, Inc. No part of
    this article may be used or reproduced in any fashion (except
    in brief quotations used in critical articles and reviews)
    without prior consent of Pinnacle Publishing, Inc. To contact
    Pinnacle Publishing, Inc., please call (800)&nbsp;788-1900 or
    (206)&nbsp;251-1900.</font></p>
</blockquote>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Forms for the Production Environment (March)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<H1>Forms for the Production Environment</h1>

<P>Mary Chipman and Mike Gunderloy</p>

<P><i>Mary Chipman, MCP, MCT is a senior consultant
with Pyramid Computers. She has material appearing in Access 95
Power Toolkit (Ventana) and is currently at work on a book on
client/server computing with Access 95 and another on the use of
OLE Objects across Microsoft applications. She is also the
principal author of the Access Security Assistant for Access 95
from BackOffice Associates. CompuServe 71760,2432.</i></p>

<P><i>Mike Gunderloy, MCSD, MCSE, MCT, is a
contributing editor for Smart Access and a partner at Pyramid
Computers, a Microsoft Solution Provider located in Brooklyn, New
York. He has material appearing in Microsoft Access 95
Developer's Handbook (Sybex), Access 95 Power Toolkit (Ventana)
and Mastering Microsoft Access 95 (Sybex). He is currently at
work on a book on client/server computing with Access 95 and
another on the use of OLE Objects across Microsoft applications.
CompuServe 72271,275. </i></p>

<P>This article originally appeared in the March 1996
issue of Smart Access, published by Pinnacle Publishing Inc., PO
Box 888, Kent, WA 98035-0888; 800-788-1900; 206-251-1900;
http://www.pinpub.com.</p>

<P>In this article, Mike and Mary discuss several
time-saving techniques for creating highly customized forms in
Access 95. If you would like to enforce a consistent style across
a group of developers or users who will be creating their own
forms and reports, this article will show you how easy it can be
to set up a production environment that enforces your own style
guidelines.</p>

<P>Designing forms in Access 2.0 was reminiscent of the
work of skilled craftsmen in the medieval guilds: each control
had to be carefully designed and placed at the right location,
and its properties individually set. If something went wrong,
about all you could do was delete the control and start over.
Access 95 brings an industrial revolution to this process. You
now have much better tools for modifying controls. More
importantly, by combining Templates and AutoFormat, you have a
virtual assembly line for Access forms. If you're still working
the old way, you should take a few minutes and bring yourself up
to date. It's time that will be well spent.</p>

<H2>Templates: form blueprints</h2>

<P>A template is basically a blueprint that Access uses
whenever you create a form or report. The template defines
certain default characteristics of the form or report, such as
its size, section components and dimensions, color, and so forth.
The other important items saved with a template are the default
Toolbox settings, which control the default properties for all
controls. </p>

<P>The default template, named &quot;Normal,&quot; is
stored in your Utility database (UTILITY.MDA). However, you can
change this by specifying another form name in the Forms/Reports
tab of the Tools, Options dialog. The important thing to remember
is that you need to set up your default template and define its
characteristics <i>before</i> you spend an enormous amount of
time creating forms, since changing the attributes of a template
has no effect on previously created forms based on that template.</p>

<P>A template can't create controls on a new form or
report (you can only define default properties for controls that <i>you</i>
create). If you want a Close button at the same position on every
form you build, for example, templates won't be able to help
you&#151;you'll need to put it there by hand or write a Form
Wizard to create it for you. Since writing Wizards is a difficult
task, most developers opt for the handwork approach here.</p>

<P>Once you create a Normal form to serve as a
template, you need to import it into every database in which you
would like the defaults to appear. If you don't specifically
create or define a form called Normal, or you have another named
form as your template and it isn't present in the current
database, Access uses its own internal Normal template (the one
in the utility database) for any new forms and reports you
create. </p>

<P>All in all, Access templates aren't very powerful
when you compare them to the templates found in Word or Excel,
which support many more features. But for the purpose of setting
a standard, they can be put to good use when you combine them
with the new AutoFormat feature to give your forms and controls a
consistent look and feel. </p>

<P>Back in Access 2.0, when you created a new form
using the Form Wizard, the wizard just ignored your template and
did whatever it wanted in terms of formatting your form. If you
wanted the wizard to use your template instead of the built-in
defaults, you had to modify the wizard. With Access 95, the Form
Wizard uses your template as a starting point to build the form.
It then asks you to select an AutoFormat style, so in the long
run it pays to develop your own templates and AutoFormat styles.</p>

<H2>AutoFormat: adding style to existing forms</h2>

<P>The second step in controlling your creative
environment is AutoFormat, which is found on the Format menu when
you have a form open in Design View; AutoFormat also has its own
toolbar button. AutoFormat loads a wizard that allows you to
choose from a list of styles. Some of the styles are quite nice
looking while other are, well, garish (see Figure 1). Probably
none come close to your own style or those of your clients. For
illustration purposes, we'll use the Standard style. Clicking on
the Option button lets you choose the attributes you want to
apply (font, color, and border). Clicking on the Customize button
is where the power lies. Here are your options:</p>

<p>Create a new AutoFormat based on the Form that you are working
with. If you created a template and set the default properties on
that form for every conceivable control type, you'll want to
choose this option so that you can create a new AutoFormat style
based on your custom template. This will allow you to open
previously created forms and reformat them according to your
template. In one click, you can transfer all the look-and-feel
properties of one form to another!</p>

<p>Update &quot;Standard&quot; with values from the Form that you
are working on.<b> </b>You would choose this option if you are
going to update your AutoFormat style with values from the
currently open form. Later we'll show you how to prevent users
from accidentally destroying your corporate styles with this
option.</p>

<p>Delete &quot;Standard&quot;. This would delete the existing
AutoFormat style.</p>

<P>If you apply an AutoFormat style with the form
selected, then every control will be reformatted and any form
properties, such as wallpaper, will be applied; if you selected a
single control (or a set of controls), then only those controls
will be reformatted.</p>

<P>As you can see, you have quite a bit of flexibility
and control just from the user interface in terms of creating
your own styles. With some tweaking here, every form you create
can look more or less correct on the first try.</p>

<p><img src="SA396F1.gif" width="496" height="274"></p>

<P><b>Figure 1. The AutoFormat Wizard offers several
built-in styles.</b></p>

<H2>The .MDT file</h2>

<P>So you've created your standard templates, but you
want to lock up your environment so that users can't modify your
AutoFormat styles. And just where is this AutoFormat information
being saved, anyway? The answer lies in your WZDAT70.MDT
database, which is installed in your \ACCESS directory. An .MDT
file is a database that is used to store information that is
being used by the wizards in Access 95. In this particular case,
it is instructive to examine part of the database structure,
shown in Figure 2, to see what is going on.</p>

<p><img src="SA396F2.gif" width="530" height="314"></p>

<P><b>Figure 2. The tables in WZDAT70.MDT that store
AutoFormat information.</b></p>

<P>You're primarily interested in the tblStyles table
that contains these key fields:</p>

<p>StyleName is the name that appears on the AutoFormat wizard.</p>

<p>Each row has a unique StyleID.</p>

<p>Default would appear to be setting a default somewhere, but we
can't find anyplace in the wizards where it is actually used.
Setting the default to Yes for any of the items doesn't affect
the behavior of the AutoFormat wizard. You might think this was
the default style to offer, but the wizard simply uses the
last-selected AutoFormat style the next time the wizard is run.
This is set and retrieved from the registry in the following:</p>

<p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Access\7.0\ _</p>

<p>Wizards\Preferences\AutoFormat</p>

<p>ObjectType contains information on whether the format is for a
form or a report (3 for forms, 4 for reports)</p>

<p>AllowDelete controls whether a user can modify or delete an
AutoFormat style. Two built-in AutoFormat styles, Standard and
Corporate, are set to &quot;No.&quot; If you want to modify these
to reflect your own styles, merely change this setting to
&quot;Yes&quot; and open the AutoFormat wizard. When you are
done, changing this setting back to No for these styles (plus any
other styles you may want to lock) will prevent users from
tampering with them.</p>

<p>Picture contains the name of the bitmap that is used for
wallpaper on the form. For the built-in pictures, there is no
path since the wizards will look for them in the
\ACCESS\BITMAPS\STYLES directory. If you add a bitmap manually
through the wizard interface, the path and filename are
hard-coded in this table. If you distribute this it could cause
problems later. The best strategy is to move all custom bitmaps
into the default directory and remove the path part of the
setting.</p>

<P>The simplest way to modify the contents of tblStyles
is to use File, Get External Data, Link Tables to link it to any
of your Access databases. Then you can open it from your database
and change settings in the AllowDelete field or fix up the paths
in the Picture field.</p>

<P>When you distribute your own set of templates and
AutoFormat styles, you need to make sure that the correct
(modified) copy of WZDAT70.MDT is installed on your users'
machines and that any custom bitmaps you used as form pictures
are also available.</p>

<P>It would be nice if these tables supported the
addition of new fields so you could extend the functionality of
AutoFormat, but unfortunately this appears to be impossible in
this version of Access. For example, you might like your
AutoFormat to set the NavigationButtons property of the form to
False. If you could modify the code of the Wizard itself (which
is stored in WZMAIN70.MDA), this would probably be a trivial
change. But in Access 95 WZMAIN is locked, so it can't be
modified.</p>

<H2>Forcing a default</h2>

<P>If you're willing to indulge in a little bit of
registry hacking, you can add a default style to the Form Wizard
used to build new forms. That is, you can make sure the Form
Wizard always comes up with your corporate style first when it's
invoked, no matter what style your user selected during the last
run of the Wizard. Doing this provides additional insurance that
your standards will be followed.</p>

<P>The basic idea is very simple: by changing a few
registry entries, you can make the Form Wizard call your code
first. Your code can do anything it wants before passing control
into the &quot;black box&quot; of locked Wizard code. We've
implemented the default override in WHACK.MDA, which needs to go
into your Access directory. To activate this Form Wizard
interceptor, you'll need to use the RegEdit program (which ships
with Windows 95) to change two registry keys, the Function key
and the Library key. Both are found in the following path: </p>

<P><br>
</p>

<pre> HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Access\7.0\ _
 Wizards\Form Wizards\Form Wizard</pre>

<P>You need to change the value of the Function key to
the following: </p>

<P><br>
</p>

<pre> FormWhackEntry</pre>

<P>And change the value of the Library Key to the
following:</p>

<P><br>
</p>

<pre> c:\msoffice\access\whack.mda;1</pre>

<P>After this change, the Form Wizard will call the
code in WHACK.MDA instead of the existing WZMAIN70.MDA code. The
front-end function in WHACK.MDA is quite simple:</p>

<P><br>
</p>

<pre> Function FormWhackEntry(stRecSrc As String, iDocType As Integer)
    Dim hkey As Long
    If wlib_OpenAccessRegKey(&quot;Wizards&quot;, hkey) = 0 Then
        wlib_ErrWriteRegKey hkey, _  
         &quot;Preferences\AutoFormat&quot;, &quot;&quot;
        wlib_ErrWriteRegVal hkey, _
         &quot;Preferences\AutoFormat&quot;, _
            &quot;FormAutoFormat&quot;, 77, ByVal 4
        wlib_RegCloseKey hkey
    End If
    FormWhackEntry = frui_Entry(stRecSrc, iDocType)
End Function</pre>

<P>The wlib_functions are built into WZLIB70.MDA.
Ordinarily, you wouldn't want to rely on these being present, but
if your designers are using the Form Wizard, this library must be
there. The code first checks to see whether the Preferences key
for the AutoFormat page is there and, if not, creates it. Once
created, it sets it to a hardcoded value. Here 77 is the StyleID
of the Evergreen style in the standard WZDAT70.MDT file. If you
want a different style to be your Form Wizard default, just check
the tblStyles table and substitute the appropriate StyleID in the
WHACK.MDA code.</p>

<P>If you want to put this default in place on other
machines in your organization, you can either modify the
SETUP.STF file that ships with Access 95 to make the appropriate
registry settings, or you can use the remote editing capabilities
of RegEdit to go in and make the changes yourself.</p>

<P>This technique will intercept any of the stock
wizards. You could, for example, modify the BackColor builder for
a section to loop through all sections on a form and set their
BackColor properties uniformly, rather than having to call the
builder once for each section.</p>

<H2>Modifying controls: </h2>

<H2>format painter and control morph</h2>

<P>After you've finished setting up your working
environment, you may want to take advantage of some new tools for
tweaking the look of the forms you've already created using your
templates and AutoFormat styles. In Access 2.0, making one
control look like another was an exercise in tedium. You had to
select the first control, look at its property sheet, remember
the value of a property, switch to the second control, type in
that value, and repeat until everything was the same. Access 95
includes the new Format Painter to eliminate this tedium.</p>

<P>To use the Format Painter, select the source
control, click the Format Painter toolbar button (the picture of
the paintbrush), and then select the target control. That's it!
The Format Painter will copy all of the properties in the
following list from the source to the target: </p>

<p>Visible</p>

<p>Display When</p>

<p>Back Style</p>

<p>Back Color</p>

<p>Special Effect</p>

<p>Border Style</p>

<p>Border Width</p>

<p>Border Color</p>

<p>Fore Color</p>

<p>Font Name</p>

<p>Font Size</p>

<p>Font Weight</p>

<p>Font Italic</p>

<p>Font Underline</p>

<p>Text Align</p>

<P>If you'd like to paint multiple controls, just
double-click the Format Painter after selecting the source. It
will transfer properties to every control you click on, until you
click the toolbar button again to deactivate it. Of course, the
size and positioning properties of two controls can be matched by
the Format, Align and Format, Size commands.</p>

<P>Another thing that's become much easier in Access 95
is to change a control from one type to another. In Access 2.0,
you could either delete the control and create a new one, or use
Ken Getz and Paul Litwin's excellent Control Morph add-in.
Apparently the Access 95 development team liked Ken and Paul's
version so much they decided to incorporate it into the product.
It's now available through the Format, Change To menu item and is
capable of changing controls from one type to another as shown in
Table 1.</p>

<P><b>Table 1. Changes supported by the Format,
Change To command.</b></p>

<table border="1" cols="2">
<COLGROUP><COL WIDTH="221pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <td valign="top"><b>From</b></td>
        <td valign="top"><b>To</b></td>
    </tr>
    <tr>
        <td valign="top">Text Box</td>
        <td valign="top">Label, List Box or Combo Box</td>
    </tr>
    <tr>
        <td valign="top">Label</td>
        <td valign="top">Text Box</td>
    </tr>
    <tr>
        <td valign="top">List Box</td>
        <td valign="top">Text Box or Combo Box</td>
    </tr>
    <tr>
        <td valign="top">Combo Box</td>
        <td valign="top">Text Box or List Box</td>
    </tr>
    <tr>
        <td valign="top">Check Box</td>
        <td valign="top">Toggle Button or Option Button</td>
    </tr>
    <tr>
        <td valign="top">Toggle Button</td>
        <td valign="top">Check Box or Option Button</td>
    </tr>
    <tr>
        <td valign="top">Option Button</td>
        <td valign="top">Check Box or Toggle Button</td>
    </tr>
    <tr>
        <td valign="top">Unbound OLE Object</td>
        <td valign="top">Image</td>
    </tr>
</TBODY></table>

<P><br>
</p>

<H2>Conclusion</h2>

<P>Although at first glance the Access 95 form design
tools appear to have barely changed, the few changes that did
happen add up to substantial power. By combining templates and
AutoFormat, you can make your forms come out right the first
time&#151;or at least much closer to what you wanted. In
addition, you can now enforce a set of style conventions without
having to write a lot of wizard code. This should allow you to
roll out Access 95 to all of your developers without spending a
lot of time developing a policy to ensure stylistic conformity.
These tools make it easier for groups of developers to stick to a
single style when developing forms in multiple applications.
Finally, if you need to tweak a form after it's been built, the
Format Painter and Format, Change To command will save you much
time and tedium. </p>

<P>&nbsp;</p>

<P align="center"><a
href="http://www.pinpub.com/access/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about Smart
Access and Pinnacle Publishing, visit their website at</strong><a
href="http://www.pinpub.com/access/"> <strong>http://www.pinpub.com/access/.
</strong></a></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the March 1996
issue of Smart Access. Copyright 1995, by Pinnacle Publishing,
Inc., unless otherwise noted. All rights are reserved. Smart
Access is an independently produced publication of Pinnacle
Publishing, Inc. No part of this article may be used or
reproduced in any fashion (except in brief quotations used in
critical articles and reviews) without prior consent of Pinnacle
Publishing, Inc. To contact Pinnacle Publishing, Inc., please
call (800)788-1900 or (206)251-1900.</p>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="D:\CDs\templates\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB Programming with ECCO (July)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>VB Programming with ECCO</b></font></p>
    <p><font size="2">John White</font></p>
    <p><font size="2"><i>Why build a group information system
    from scratch when you can leverage a good PIM like ECCO and
    make calls to its API from VB? All it takes is a little DDE.</i></font></p>
    <p><font size="2">PERSONAL Information Managers (PIMs), once
    heralded as single-user niche utilities, are becoming a
    staple in many corporate environments. Why? Three reasons:
    First, most PIMs are network enabled, which means workgroup
    members can share scheduling, task, and contact information.
    Second, most are flexible enough that users can personalize
    the interface to suit personal, functional, or group
    preferences. Third, a handful of enlightened PIM publishers
    are exposing their APIs. The result is that not only are PIMs
    flexible shared information systems, they&#146;re also
    sophisticated development tools&#151;think of them as Lotus
    Notes on a smaller scale.</font></p>
    <p><font size="2">For the past couple of years I&#146;ve been
    &quot;living with&quot; a PIM called ECCO&#151;although
    I&#146;ve bought and tinkered with nearly every Windows-based
    PIM out there. ECCO handles 95 percent of my information
    management needs, but that missing five percent really gets
    to me at times. For example, before I started using ECCO,
    I&#146;d been using a custom phone-call management program
    that I wrote to track call transactions. Because ECCO&#146;s
    phone call logging wasn&#146;t quite what I wanted, I adapted
    my program to work directly in ECCO. I also uploaded my
    program as a freebie for others to use.</font></p>
    <p><font size="2">I was pleasantly surprised with end user
    interest but puzzled by all the &quot;How&#146;d you do
    it?&quot; questions I received. It turns out that although
    DDE programming is straightforward, many programmers think of
    it as a tricky, hard-to-learn &quot;black box.&quot; This is
    unfortunate because ECCO&#146;s DDE API gives you the power
    to create sophisticated custom interfaces and integration
    solutions for clients. You&#146;ll see that after a little
    practice and familiarity with ECCO (or your own favorite
    PIM), developing add-ons or complete solutions isn&#146;t
    necessarily a monumental task.</font></p>
    <p><font size="5"><b>ECCO, outlines, and data</b></font></p>
    <p><font size="2">ECCO was first released by a small company
    called Arabesque in 1993 and was subsequently acquired by
    NetManage in 1994. ECCO&#146;s outline-oriented display was a
    hit with users who were tired of interacting with PIMs that
    reflected their relational database roots via field-oriented
    data entry forms and rigid columnar reports. </font></p>
    <p><font size="2">ECCO uses a hierarchical outline approach
    for managing both structured and unstructured information. It
    has three fundamental units: items, folders, and notepads.
    Items are data elements you add to ECCO (text, Clipboard
    data, OLE objects, and so on). Folders are places you store
    the items, and notepads are malleable, user-defined displays
    of folder information that look and behave like word
    processor outlines. In fact, the appointment calendar/to-do
    list and phone book are actually specialized notepads with
    traditional interface components, such as a monthly calendar
    and contact entry form, for clarity and usability.</font></p>
    <p><font size="2">When you first launch ECCO, a default set
    of folders is created for storing information. The ECCO
    Folder Window displays these folders in an hierarchical
    &quot;tree&quot; (see Figure 1) whose structure is adjustable
    by dragging and dropping. Folders not only hold data, they
    also apply a folder value to each item in the folder. A
    folder of type date, for example&#151;such as ECCO&#146;s
    default Appointments folder&#151;might have the item
    &quot;Meet with Joe&quot; stored there, but it also stores
    this item&#146;s date and time value. So, you not only deal
    with the data item programmatically, but also the folder
    values as well. ECCO folder types include checkmark, date,
    number, text, and pop-up list.</font></p>
    <p><img src="VB796F1.gif" width="642" height="484"></p>
    <p><font size="2"><b>Figure 1.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>View of ECCO showing relationship of PhoneBook
    folders to fields in entry form.</b></font></p>
    <p><font size="2">Like any other PIM, ECCO tracks your
    appointments, to-do list (Ticklers), and contacts. If your
    needs are modest, you can probably use just these modules and
    never explore the power this PIM has to offer. But the
    notepads are where the ECCO model shines when dealing with
    unstructured information. Because items can be assigned to
    multiple folders at once, you can see these multiple
    assignments by showing folders in columnar format&#151;just
    like a spreadsheet. The cell where the item on the left meets
    the folder on the top row displays the value assigned to the
    item. So, a date folder displays the date and a checkmark
    folder displays a checkmark (see Figure 2). By applying
    filters to these views, you can display your data virtually
    any way you like. </font></p>
    <p><img src="VB796F2.gif" width="654" height="432"></p>
    <p><font size="2"><b>Figure 2.</b></font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"><b> </b></font><font
    size="2"><b>ECCO NotePad view illustrating checkmark, date,
    and pop-up folder types</b></font></p>
    <p><font size="2">Given all this power, why should you
    develop applications for use with ECCO? It turns out that not
    all end users can or want to play with all the power ECCO
    provides. Luckily for us, they want someone else to do it for
    them. When ECCO was first released, a market quickly
    developed for ECCO templates, predefined sets of folders,
    views, and filters that might be associated with products
    like the Franklin methods or Covey self-help techniques or
    professions such as lawyers and real estate agents. When
    templates aren&#146;t flexible enough, however, or when a
    client needs to exchange or synchronize information in ECCO
    with another program, users are likely to turn to us
    programmers for custom packages. </font></p>
    <p><font size="2">When you install ECCO 3.0, you can opt for
    VB support, in which case the ECCO installer creates a
    subdirectory off the main ECCO directory called DDE. Two
    subdirectories off that hold VB and Microsoft Word code
    examples (oddly, for Word 2.0). The DDE subdirectory also
    holds an ECCO data file called API.ECO. Unfortunately, at
    least at the time of this writing, the file is an old ECCO
    2.0 version. You&#146;ll need to grab the updated file for
    use with ECCO 3.0 from the CompuServe forum (GO ECCO).</font></p>
    <p><font size="2">Before doing anything else, print out the
    API.ECO file and the VB ECCO_API.BAS file. These two files
    are your sole references to the ECCO programming interface.
    The API.ECO provides a list of DDE pokes, requests, and
    executes, and briefly describes notation and data format. The
    ECCO_API.BAS file provides demonstration function and
    subroutine wrappers for the DDE calls, as well as a few handy
    functions for parsing strings and such.</font></p>
    <p><font size="5"><b>Unwrapping the ECCO API</b></font></p>
    <p><font size="2">ECCO&#146;s DDE provides calls that support
    reading and writing ECCO item or folder information. Although
    ECCO 3.0 introduced a few DDERequests for <i>reading</i>
    existing notepad structures, it doesn&#146;t include
    corresponding DDEPokes for creating or manipulating notepads.
    There are still plenty of DDE calls to master: 27
    DDERequests, 13 DDEPokes, and a DDEExecute.</font></p>
    <p><font size="2">In ECCO&#146;s API, note that discrete
    folders and items are assigned either a FolderID or ItemID,
    respectively, and that ECCO&#146;s default folders (those
    created during start-up) have permanently assigned
    FoldersIDs. Because the documentation mentions these but
    doesn&#146;t elaborate, I&#146;ve provided a list in</font><font
    color="#008080" size="2" face="MyriaMM_565 SB 600 NO"> Table
    1</font><font size="2">. Next, be aware of item and folder
    types. Items can be either text or OLE object types, and
    folders can be either checkmark, date, number, text, or
    pop-up list types. These types are documented and are
    assigned constant values in the ECCO_API.BAS file for
    programming convenience.</font></p>
    <p><font size="2"><b>Table 1. Default FolderID assignments
    found in every ECCO data file. These IDs are the same from
    file to file and never change.</b></font></p>
</blockquote>

<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td width="25%"><font size="1"><b>FolderID</b></font></td>
        <td width="25%"><font size="1"><b>Default Folder Name</b></font></td>
        <td width="25%"><font size="1"><b>FolderID</b></font></td>
        <td width="25%"><font size="1"><b>Default Folder Name</b></font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">1</font></td>
        <td width="25%"><font size="1">Done</font></td>
        <td width="25%"><font size="1">129</font></td>
        <td width="25%"><font size="1">City - Home</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">2</font></td>
        <td width="25%"><font size="1">ECCO Folders</font></td>
        <td width="25%"><font size="1">130</font></td>
        <td width="25%"><font size="1">State - Home</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">4</font></td>
        <td width="25%"><font size="1">Appointments</font></td>
        <td width="25%"><font size="1">131</font></td>
        <td width="25%"><font size="1">Zip - Home</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">11</font></td>
        <td width="25%"><font size="1">Start Dates</font></td>
        <td width="25%"><font size="1">132</font></td>
        <td width="25%"><font size="1">Country - Home</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">12</font></td>
        <td width="25%"><font size="1">Due Dates</font></td>
        <td width="25%"><font size="1">133</font></td>
        <td width="25%"><font size="1">Address 2 - Business</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">13</font></td>
        <td width="25%"><font size="1">Phonebook</font></td>
        <td width="25%"><font size="1">134</font></td>
        <td width="25%"><font size="1">Address 2- Home</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">15</font></td>
        <td width="25%"><font size="1">To-Do&#146;s</font></td>
        <td width="25%"><font size="1">135</font></td>
        <td width="25%"><font size="1">Search Results</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">16</font></td>
        <td width="25%"><font size="1">Phone Log</font></td>
        <td width="25%"><font size="1">136</font></td>
        <td width="25%"><font size="1">Mr./Ms</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">115</font></td>
        <td width="25%"><font size="1">New Columns</font></td>
        <td width="25%"><font size="1">-1*</font></td>
        <td width="25%"><font size="1">Business/Home Flag</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">116</font></td>
        <td width="25%"><font size="1">Job Title</font></td>
        <td width="25%"><font size="1">-2**</font></td>
        <td width="25%"><font size="1">Full Name</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">117</font></td>
        <td width="25%"><font size="1">Company</font></td>
        <td width="25%"><font size="1">-3**</font></td>
        <td width="25%"><font size="1">Last Name</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">118</font></td>
        <td width="25%"><font size="1">Address 1 - Business</font></td>
        <td width="25%"><font size="1">-4**</font></td>
        <td width="25%"><font size="1">First Name</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">119</font></td>
        <td width="25%"><font size="1">City - Business</font></td>
        <td width="25%"><font size="1">-5</font></td>
        <td width="25%"><font size="1">Recurring Note Dates</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">120</font></td>
        <td width="25%"><font size="1">State - Business</font></td>
        <td width="25%"><font size="1">-6</font></td>
        <td width="25%"><font size="1">Expenses Due</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">121</font></td>
        <td width="25%"><font size="1">Zip - Business</font></td>
        <td width="25%"><font size="1">-7</font></td>
        <td width="25%"><font size="1">Billable Hours</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">122</font></td>
        <td width="25%"><font size="1">Country - Business</font></td>
        <td width="25%"><font size="1">-8</font></td>
        <td width="25%"><font size="1">Billing Code</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">123</font></td>
        <td width="25%"><font size="1">Work #</font></td>
        <td width="25%"><font size="1">-9</font></td>
        <td width="25%"><font size="1">Hourly Rate</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">124</font></td>
        <td width="25%"><font size="1">Home #</font></td>
        <td width="25%"><font size="1">-10</font></td>
        <td width="25%"><font size="1">Expense Type</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">125</font></td>
        <td width="25%"><font size="1">Fax #</font></td>
        <td width="25%"><font size="1">-11</font></td>
        <td width="25%"><font size="1">Expense Amount</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">126</font></td>
        <td width="25%"><font size="1">Cell #</font></td>
        <td width="25%"><font size="1">-12</font></td>
        <td width="25%"><font size="1">Expense Date</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">127</font></td>
        <td width="25%"><font size="1">Alt #</font></td>
        <td width="25%"><font size="1">-13</font></td>
        <td width="25%"><font size="1">E-Mail</font></td>
    </tr>
    <tr>
        <td width="25%"><font size="1">128</font></td>
        <td width="25%"><font size="1">Address - Home</font></td>
        <td width="25%"><font size="1">-14</font></td>
        <td width="25%"><font size="1">Net Location (URL)</font></td>
    </tr>
</table>

<blockquote>
    <p><font size="2">Notation is extremely important but is only
    briefly covered in the API.ECO file. ECCO can receive
    multiple values to process if each value is on a separate
    line (as indicated by brackets &lt; &gt; in the
    documentation) or process multiple assignments on one value
    if on the same line (as indicated by parenthesis). You send
    and receive data in string format, with multiple data items
    formatted as comma separated values (CSV)&#151;extracting
    individual data elements is simply a matter of parsing the
    string. In some cases, discrete information is returned from
    ECCO on separate lines. This is often the case when multiple
    ItemIDs are passed to ECCO on separate lines, and relevant
    IDs (folder or item) for each of the passed ItemIDs are
    returned. However, these line-separated elements don&#146;t
    use the traditional carriage return/linefeeds (Chr$(13) &amp;
    Chr$(10)), but linefeed/carriage returns (Chr$(10) &amp;
    Chr$(13)). For example, the GetItemFolders request returns a
    comma-separated list of FolderIDs for the first ItemID
    passed, adds a linefeed/carriage return, then a
    comma-separated list of FolderIDs for the second ItemID, and
    so on. Keep this in mind if you have trouble parsing a
    returned string at some point.</font></p>
    <p><font size="2">Because data is sent or returned in CSV
    string format, you need to be <i>very</i> aware of embedded
    quotes, commas, and carriage returns. Internal quotes in
    strings have to be doubled. Here&#146;s how you might pad a
    contact name (John &quot;Slick&quot; White):</font></p>
    <p><font size="2" face="Courier New">Dim DblQuote$</font></p>
    <p><font size="2" face="Courier New">Dim MyString$</font></p>
    <p><font size="2" face="Courier New">DblQuote$ = Chr$(34)
    &amp; Chr$(34)</font></p>
    <p><font size="2" face="Courier New">MyString$ = &quot;John
    &quot; &amp; DblQuote$ &amp; &quot;Slick&quot; _</font></p>
    <p><font size="2" face="Courier New">&amp; DblQuote$ &amp;
    &quot; White&quot;</font></p>
    <p><font size="2">This method won&#146;t be managable for
    large amounts of text. It&#146;s more efficient to do a
    search on quotes and replace with double quotes before
    sending the string to ECCO with DDE. Embedded commas
    aren&#146;t as troublesome&#151;just wrap your string in
    quotes:</font></p>
    <p><font size="2" face="Courier New">Dim MyString$</font></p>
    <p><font size="2" face="Courier New">MyString$ = &quot;Phone
    call with White, John&quot;</font></p>
    <p><font size="2" face="Courier New">MyString$ = Chr$(34)
    &amp; MyString$ &amp; Chr$(34)</font></p>
    <p><font size="2">Carriage returns, like embedded quotes,
    require some thought and attention. When you retrieve text
    from ECCO that contains carriage returns, there are no
    linefeeds. To display this text in a VB 3.0 text control,
    you&#146;ll have to add linefeeds after each carriage return.
    Conversely, if you plan on sending text from a text control
    to ECCO, you have to strip out the linefeeds. Like embedded
    quotes, this can be a pain for large amounts of text. This
    simple search and replace routine might be quick enough (you
    might also consider the search and replace routines found in
    MicroHelp Muscle or Crescent QuikPak Pro):</font></p>
    <p><font size="2" face="Courier New">Function SrchReplStr$
    (MyString$, SearchStr$, _</font></p>
    <p><font size="2" face="Courier New">ReplaceStr$)</font></p>
    <p><font size="2" face="Courier New">Dim iPos%, iCount%</font></p>
    <p><font size="2" face="Courier New">iPos% = InStr(MyString$,
    SearchStr$)</font></p>
    <p><font size="2" face="Courier New">iCount% = 0</font></p>
    <p><font size="2" face="Courier New">Do While iPos%</font></p>
    <p><font size="2" face="Courier New">iCount% = iCount% + 1</font></p>
    <p><font size="2" face="Courier New">MyString$ =
    Left$(MyString$, iPos% - 1) &amp; _</font></p>
    <p><font size="2" face="Courier New">ReplaceStr$ &amp;
    Mid$(MyString$, iPos% + _</font></p>
    <p><font size="2" face="Courier New">Len(SearchStr$))</font></p>
    <p><font size="2" face="Courier New">iPos% = InStr(iPos +
    Len(SearchStr$), _</font></p>
    <p><font size="2" face="Courier New">MyString$, SearchStr$)</font></p>
    <p><font size="2" face="Courier New">Loop</font></p>
    <p><font size="2" face="Courier New">SrchReplStr$ = MyString$</font></p>
    <p><font size="2" face="Courier New">End Function</font></p>
    <p><font size="2">One more thing&#151;the LastResult command.
    Because you can pass multiple ItemIDs and FolderIDs to ECCO
    in CSV format (or large amounts of text), you might
    unexpectedly run into DDERequest&#146;s limitation of sending
    256 bytes (you can <i>receive</i> up to 32K of information).
    ECCO&#146;s engineers get around this by using a DDEExecute
    to handle the request, then a DDERequest with LastResult to
    retrieve the results. They wrap this up in a convenient
    DDERequest function&#151;I just wanted you to be aware of the
    workaround.</font></p>
    <p><font size="5"><b>Practical examples</b></font></p>
    <p><font size="2">ECCO&#146;s BAS file contains easy-to-use
    wrappers for the various requests, pokes, and executes. Here
    are some examples. To add new contact records to ECCO, for
    instance, you use the CreateItem DDE command:</font></p>
    <p><font size="2" face="Courier New">CreateItem
    &lt;&quot;YourText&quot;, (FolderID, FolderValue)&gt;</font></p>
    <p><font size="2">ECCO contacts are any data item saved to
    the ECCO PhoneBook folder. By default, a new ECCO data file
    will contain 22 other contact-related folders for addresses
    and so on&#151;nested underneath the PhoneBook folder in the
    Folder Window. The format for names is &quot;LastName,
    FirstName.&quot; Note that the name has an embedded comma.
    Remember how ECCO treats embedded commas? You have to enclose
    the name string in quotes, so the embedded comma is treated
    like any other character. Process the contact with the handy
    VB wrapper function for CreateItem:</font></p>
    <p><font size="2" face="Courier New">Dim NewContID&amp;</font></p>
    <p><font size="2" face="Courier New">Dim ContName$</font></p>
    <p><font size="2" face="Courier New">ContName$ = Chr$(34)
    &amp; &quot;White, John&quot; &amp; Chr$(34)</font></p>
    <p><font size="2" face="Courier New">NewContID&amp; =
    CreateItem (ContName$, 13, &quot;1&quot;)</font></p>
    <p><font size="2">Not too painful, thought, right? The
    &quot;13&quot; parameter is the hard-coded folder value for
    the ECCO PhoneBook, and the &quot;1&quot; is to assign a
    checkmark value.</font></p>
    <p><font size="2">Now let&#146;s get a bit bolder. Look at
    the CreateItem command prototype. See the parenthesis around
    the FolderID and FolderValue parameters? As I explained
    earlier, the parenthesis indicate multiple folder assignment
    for a single item&#151;in this case, a contact name. The BAS
    file wrapper, however, in an attempt to simplify the process
    for novices, permits creating only a single item at a time.
    When you look at the VB function in ECCO_API.BAS, you&#146;ll
    notice that the passed parameters are simply concatenated and
    sent directly to the DDERequest function, which <i>will</i>
    accept multiple parameters as a single string. You can add a
    contact record with this more direct method:</font></p>
    <p><font size="2" face="Courier New">Dim NewContID$</font></p>
    <p><font size="2" face="Courier New">Dim ContName$</font></p>
    <p><font size="2" face="Courier New">Dim DDECmd$</font></p>
    <p><font size="2" face="Courier New">Dim ContEMail$</font></p>
    <p><font size="2" face="Courier New">'and so on</font></p>
    <p><font size="2" face="Courier New">ContName$ = Chr$(34)
    &amp; &quot;White, John&quot; &amp; Chr$(34)</font></p>
    <p><font size="2" face="Courier New">ContEMail$ =
    &quot;70401.546@compuserve.com&quot;</font></p>
    <p><font size="2" face="Courier New">' and so on</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">DDECmd$ = ContName$
    &amp; &quot;,&quot; &amp; &quot;13&quot; &amp; &quot;,&quot;
    &amp; &quot;1&quot;</font></p>
    <p><font size="2" face="Courier New">DDECmd$ = DDECmd$ &amp;
    &quot;,&quot; &amp; &quot;117&quot; &amp; &quot;,&quot; &amp;
    ContComp$</font></p>
    <p><font size="2" face="Courier New">DDECmd$ = DDECmd$ &amp;
    &quot;,&quot; &amp; &quot;-13&quot; &amp; &quot;,&quot; &amp;
    ContEMail</font></p>
    <p><font size="2" face="Courier New">NewContID$ =
    DDERequest(&quot;CreateItem&quot;, DDECmd$)</font></p>
    <p><font size="2" face="Courier New">'and so on</font></p>
    <p><font size="2">What happens when you want to add multiple
    names at once? Well, not only will CreateItem handle multiple
    folder assignments for a given item ID (as I just did), but
    also multiple item IDs&#151;just separate each item group
    with carriage returns. Because the CreateItem function in
    ECCO API.BAS is set up for creating only single items,
    you&#146;ll be using DDERequest again. To make the code easy
    to look at I&#146;ll make only make three new entries:</font></p>
    <p><font size="2" face="Courier New">Dim Name1$</font></p>
    <p><font size="2" face="Courier New">Dim Name2$</font></p>
    <p><font size="2" face="Courier New">Dim Name3$</font></p>
    <p><font size="2" face="Courier New">Dim DDECmd$</font></p>
    <p><font size="2" face="Courier New">Dim NewContID$</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">Name1$ = Chr$(34) &amp;
    &quot;Adams, Joe&quot; &amp; Chr$(34) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;,13,1&quot;</font></p>
    <p><font size="2" face="Courier New">' and so on for Name2$
    and Name3$</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">DDECmd$ = Name1$ &amp;
    Chr(13) &amp; Name2$ &amp; _</font></p>
    <p><font size="2" face="Courier New">Chr$(13) &amp; Name3$</font></p>
    <p><font size="2" face="Courier New">NewContID$ =
    DDERequest(&quot;CreateItem&quot;, DDECmd$)</font></p>
    <p><font size="2">With just a little work, I&#146;m sure you
    can come up with routines that combine these techniques to
    make a workable import routine for ECCO.</font></p>
    <p><font size="5"><b>Searching the ECCO data file</b></font></p>
</blockquote>

<p><font size="2" face="Palatino,Book Antiqua">Finding
information with ECCO is straightforward but limited&#151;Boolean
searching, for example, isn&#146;t supported. You can, however,
search for both item text and folder values. Getting a list of
unfinished to-do items is a good example. In brief, you want to
use the GetFolderItems DDE command to search the ECCO
To-Do&#146;s folder, parse any returned CSV ItemIDs, start a
loop, get the text for each ItemID, use this ItemID to check the
FolderValue in the ECCO Done folder, and list the unfinished
To-Do&#146;s in a useful manner. In VB, you could do this:</font></p>

<blockquote>
    <p><font size="2" face="Courier New">Dim Temp$, iCount%, i%</font></p>
    <p><font size="2" face="Courier New">Dim DoneVal$, TaskVal$,
    TaskDate$, _</font></p>
    <p><font size="2" face="Courier New">IDStr$, ListStr$</font></p>
    <p><font size="2" face="Courier New">'get to-do items from
    Jan 1 until present</font></p>
    <p><font size="2" face="Courier New">ListStr$ =
    GetFolderItems(15, &quot;va&quot;, &quot;GE&quot;, _</font></p>
    <p><font size="2" face="Courier New">&quot;19960101&quot;)</font></p>
    <p><font size="2" face="Courier New">iCount% =
    CountItems(ListStr$)</font></p>
    <p><font size="2" face="Courier New">For i% = 1 To iCount%</font></p>
    <p><font size="2" face="Courier New">'parse the ID and get
    the to-do text</font></p>
    <p><font size="2" face="Courier New">IDStr$ =
    GetCSVItem(ListStr$, i%)</font></p>
    <p><font size="2" face="Courier New">Temp$ =
    GetItemText(CLng(IDStr$))</font></p>
    <p><font size="2" face="Courier New">Temp$ =
    StripQuotes(Temp$) </font></p>
    <p><font size="2" face="Courier New">'get the folder value (a
    date) for to-do item</font></p>
    <p><font size="2" face="Courier New">TaskVal$ =
    GetFolderValues(CLng(IDStr$), 15)</font></p>
    <p><font size="2" face="Courier New">'reformat the returned
    date from ECCO</font></p>
    <p><font size="2" face="Courier New">TaskVal$ =
    StripQuotes(TaskVal$)</font></p>
    <p><font size="2" face="Courier New">TaskDate$ =
    Mid$(TaskVal$, 5, 2) &amp; &quot;/&quot; &amp; _</font></p>
    <p><font size="2" face="Courier New">Right$(TaskVal$, 2)</font></p>
    <p><font size="2" face="Courier New">TaskDate$ = TaskDate$
    &amp; &quot;/&quot; &amp; _</font></p>
    <p><font size="2" face="Courier New">Left$(TaskVal$, 4)</font></p>
    <p><font size="2" face="Courier New">TaskDate$ =
    Format$(TaskDate$, &quot;m/d/yy&quot;)</font></p>
    <p><font size="2" face="Courier New">'see if this to-do has
    been completed</font></p>
    <p><font size="2" face="Courier New">DoneVal$ =
    GetFolderValues(CLng(IDStr$), 1)</font></p>
    <p><font size="2" face="Courier New">If DoneVal$ =
    &quot;&quot; Then</font></p>
    <p><font size="2" face="Courier New">List1.AddItem TaskDate$
    &amp; Chr$(9) &amp; Temp$ _</font></p>
    <p><font size="2" face="Courier New">&amp; Chr$(9) &amp;
    IDStr$</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">Next i%</font></p>
    <p><font size="2">Nothing tricky here, but note that ECCO
    returns dates as &quot;yyyymmdd,&quot; which requires a
    little bit of string manipulation to format a date
    acceptably. Also, the ItemID tacked onto the end of each list
    box text string should probably be hidden from
    view&#151;it&#146;s just handy should you want to parse out
    the ID when updating the to-do item.</font></p>
    <p><font size="5"><b>Outlines</b></font></p>
    <p><font size="2">It&#146;s not hard to add bullet items to a
    new top-level-item in ECCO either. Essentially, you need to
    get the ItemID of an existing item (or one just created),
    then insert the a new item underneath the first. You&#146;ll
    find source code illustrating the technique on your Companion
    Disk.</font></p>
    <p><font size="5"><b>ECCO&#146;s not the only PIM</b></font></p>
    <p><font size="2">Although DDE is getting a bit long in the
    tooth, it can help you create useful add-on utilities for
    your favorite PIM. I used my own personal favorite, ECCO, to
    demonstrate DDE techniques for handling DDEPokes,
    DDEExecutes, and DDERequests. However, ECCO certainly
    isn&#146;t the only extensible PIM. </font></p>
    <p><font size="2">If I weren&#146;t using ECCO, I&#146;d be
    building applications with Commence 3.0, from Jensen-Jones
    Inc. Once marketed long ago by IBM as Current, Commence is
    closely modeled after traditional relational DBMSs and is
    heavily marketed towards VARS and the OEMs (you won&#146;t
    find Commence in mall software stores, whereas ECCO is
    targeted towards the masses). Commence is an easy to use PIM
    right out of the box and is also easy to modify, both in
    appearance and in underlying database structure. Tables
    called Categories are linked to other tables via connected
    fields, and anybody with database experience will have no
    trouble customizing the program to their liking. You view
    records with predefined formats called Address Book,
    Calendar, Gantt, and Report. Commence provides control over
    field placement or inclusion on data entry forms as well.
    Throw in macro-like agents and you end up with a very
    powerful product. If you so desire, you could easily
    configure Commence to have no resemblance at all to a
    traditional PIM&#151;and that&#146;s even before touching the
    Commence DDE interface. The DDE API, while robust,
    doesn&#146;t have documentation right out of the
    box&#151;you&#146;ll have to download a help file from the
    Jensen-Jones CompuServe forum (GO JJSUPPORT). Developer
    support in the forum is quite good both through staff and
    Commence users.</font></p>
    <p><font size="2">On-Schedule 2.0, from Odyssey Computing, is
    another well-written application that deserves more market
    share. The DDE API (coined OSAPI) comes on a separate disk
    and is very well documented. In fact, OSAPI may be one of the
    more advanced PIM APIs available for VB programmers. The
    low-level calls for data are there&#151;DDERequest(
    &quot;OSAPI-S Contacts&quot;) returns a list of
    contacts&#151;and OSAPI also lets you call up most of
    On-Schedule&#146;s data entry dialogs, along with the dialer.
    ECCO does not provide DDE access to internal
    dialogs&#151;after seeing On-Schedule&#146;s support for
    internal dialogs, I&#146;m suddenly aware of what I&#146;ve
    been missing.</font></p>
    <p><font size="2">Even shareware programs have DDE APIs.
    I&#146;ve long been a fan of Metz Software&#146;s Metz
    Phones, a rather sophisticated address book. Many end users
    find such a focused product more that sufficient for their
    needs, but sooner or later someone&#146;s going to want some
    added functionality. You have to look for the DDE
    documentation (it&#146;s a section in the help file) but the
    calls are straightforward, even if the examples seem geared
    towards Microsoft Word&#146;s WordBasic. <i>(Editor&#146;s
    note: You can download a free &quot;trial&quot; version of
    Metz Phones from most on-line services such as GO METZ on
    CompuServe).</i></font></p>
    <p><font size="2">Other PIMs use industry standard data
    stores (DBF, DB, or MDB files) that are easily manipulated
    with VB. In fact, should you decide to roll your own PIM, I
    strongly suggest using a well documented data
    format&#151;someone might want to write an add-on to <i>your</i>
    program! This happened to me with a freeware phone-call
    management program I wrote several years ago.</font></p>
    <p><font size="2">Interest in PIMs is growing steadily, and
    the inclusion of Schedule+ 2.0 in Microsoft&#146;s Office 95
    will only fuel that fire. Think about how you can enhance or
    integrate your favorite PIM into a retail office suite, or
    the custom hodgepodge a customer might insist on using. Or
    create a set of tools for other developers to use. Check out
    the online forums and ask questions about the PIM that
    interests you and the developer support you can expect to
    receive. Have fun! </font></p>
    <p><font size="5"><b>DDE Basics</b></font></p>
    <p><font size="2">DDE is merely a standard method for
    allowing two Windows applications to communicate. Windows
    applications do this by establishing a DDE
    &quot;conversation.&quot; The requesting end of the
    conversation is the &quot;client&quot; and the application
    that carries out the request is the &quot;server.&quot; In my
    examples, the PIM is the server, and the VB app is the
    client. You send information to the PIM from your VB program
    with a DDEPoke, receive information with a DDERequest, and
    ask the PIM to perform a task with a DDEExecute.</font></p>
    <p><font size="2">VB DDE clients use a control for handling
    the conversations&#151;there&#146;s no way to handle DDE
    conversations with pure code as you can with Word Basic.
    You&#146;ll use a text control in most cases. You can handle
    large amounts of text (about 32,000 characters worth) through
    a text control, so don&#146;t make the mistake of using a
    label control (which is limited to 256 bytes). Text controls
    can also contain information returned from a server and can
    be useful when debugging your application. A number of
    DDE-specific &quot;link&quot; properties are associated with
    the text control, and assigning them properties values is all
    it takes to get going.</font></p>
    <p><font size="2">In general, you follow a simple series of
    steps in a DDE conversation:</font></p>
    <blockquote>
        <blockquote>
            <p><font size="2">Initiate the conversation with the
            text control&#146;s LinkTopic property.</font></p>
            <p><font size="2">Specify the type of DDE link with
            the LinkMode property.</font></p>
            <p><font size="2">Tell the server application what
            you want with the LinkItem property.</font></p>
            <p><font size="2">Perform the operation with a
            DDEPoke, DDERequest, or DDEExecute.</font></p>
            <p><font size="2">End the conversation with the
            LinkMode property.</font></p>
        </blockquote>
    </blockquote>
    <p><font size="2">VB&#146;s own <i>Visual Basic
    Programmer&#146;s Guide</i> does a good job of explaining
    basic DDE &quot;how to&quot; programming, and I&#146;ve
    always enjoyed Woody Leonard&#146;s dated but still relevant
    (and irreverent!) treatment of DDE in <i>Windows 3.1
    Programming for Mere Mortals</i>. Also refer to Gary Hunter
    and Duane Fahey&#146;s article &quot;DDE: Reliable Work Horse
    or Outmoded Technology?&quot; in the July 1995 issue of <i>Visual
    Basic Developer</i> for a good discussion of controls that
    overcome problems with multiple simultaneous DDE
    conversations. </font></p>
    <p><font size="2">ECCO 3.0 ($139)</font></p>
    <p><font size="2">NetManage Inc., ECCO Division</font></p>
    <p><font size="2">2340 130th Ave. NE</font></p>
    <p><font size="2">Bellevue, WA 98005-1734</font></p>
    <p><font size="2">800-457-4243 or</font></p>
    <p><font size="2">206-885-4272 </font></p>
    <p><font size="2">http://www.netmanage.com </font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="MyriaMM_700 BD 600 NO">Commence 3.0
    ($295, $395 LAN)</font></p>
    <p><font size="2">Jensen-Jones Inc.</font></p>
    <p><font size="2">328 Newman Springs Road</font></p>
    <p><font size="2">Red Bank, NJ 07701</font></p>
    <p><font size="2">800-285-9850 or</font></p>
    <p><font size="2">908-530-4666</font></p>
    <p><font size="2">http://www.commence.com </font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="MyriaMM_700 BD 600 NO">On-Schedule
    2.1 ($99.95)</font></p>
    <p><font size="2">Odyssey Computing Inc.</font></p>
    <p><font size="2">16981 Via Tazon, Suite D</font></p>
    <p><font size="2">San Diego, CA 92127</font></p>
    <p><font size="2">800-965-7224 or </font></p>
    <p><font size="2">619-945-3793</font></p>
    <p><font size="2">http://www.odysseyinc.com </font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="MyriaMM_700 BD 600 NO">Metz Phones
    5.6 ($89)</font></p>
    <p><font size="2">Metz Software</font></p>
    <p><font size="2">P.O. Box 6699</font></p>
    <p><font size="2">Bellevue, WA 98008-0699</font></p>
    <p><font size="2">800-447-1712 or </font></p>
    <p><font size="2">206-641-4525</font></p>
    <p><font size="2">http:///www.metz.com/metz </font></p>
    <p><font size="2"><i>John White is the founder of Ballistic
    Software and developer of Call Commander Pro, a popular phone
    call management add-on package for the ECCO personal
    information manager. CompuServe 70401,546.</i></font></p>
    <p>&nbsp;</p>
    <P align="center"><a
    href="http://www.pinpub.com/vbd/"><img src="Pinnacle.gif"
    border="0" width="216" height="72"></a></p>
    <P align="center"><strong>To find out more about
    Visual Basic Developer and Pinnacle Publishing, visit their
    website at</strong><a href="http://www.pinppub.com/vbd/"> <strong>http://www.pinppub.com/vbd/
    </strong></a></p>
    <P align="center"><font size="1">Note: This is not
    a Microsoft Corporation website. <br>
    Microsoft is not responsible for its content.</font></p>
    <p><font size="1">This article is reproduced from the July
    1996 issue of Visual Basic Developer. Copyright 1996, by
    Pinnacle Publishing, Inc., unless otherwise noted. All rights
    are reserved. Visual Basic Developer is an independently
    produced publication of Pinnacle Publishing, Inc. No part of
    this article may be used or reproduced in any fashion (except
    in brief quotations used in critical articles and reviews)
    without prior consent of Pinnacle Publishing, Inc. To contact
    Pinnacle Publishing, Inc., please call (800)&nbsp;788-1900 or
    (206)&nbsp;251-1900.</font></p>
</blockquote>
</font></body>
</html>

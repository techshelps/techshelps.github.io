<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Practical Disaster Recovery, Part 1 (May)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<H1>Practical Disaster Recovery, Part 1</h1>

<P>Andrew Zanevsky</p>

<P><i>In this article Andrew proposes his view of
different aspects of SQL Server disaster recovery: How to backup
and recover. How to deal with users and vendor support. How to
prepare and when to compromise. Advice and practical tips come
from his personal experience with more than a hundred database
disaster cases.</i></p>

<P>IF you think you're under stress with your normal
day-to-day DBA tasks, wait until a production server goes down.
You'll be in the &quot;limelight&quot; under the scrutiny of your
users and managers as your skills, confidence, and ability to
think quickly and creatively are put to the test. Unless you have
a simple case of a completely reloadable read-only database,
recovery is still a manual operation, and it's no time to be
doing OJT (on-the-job-training). Disaster Day is something you
should have planned for and rehearsed. A wrong direction taken in
the course of recovery may lead to additional loss of data and
time. A simple syntax error in a recovery script left to work
overnight may cost another day of delay. With all due respect to
Microsoft's certification exams, I think the best test of a DBA's
skills is probably how he or she handles a database disaster. </p>

<P>In this article, I'll propose answers to questions
like these: How should you prepare for database disasters? What
can you do to minimize business losses? How can you identify the
middle ground between an acceptable risk and a fast recovery?</p>

<H2>No right to err</h2>

<P>Although it isn't the DBA's fault when hardware
failures occur, it <i>is </i>your fault if you don't know what to
do once you begin recovering the database. Basically, you
shouldn't make any mistakes. That means writing batch scripts on
the fly that run from the first attempt, choosing the quickest
and safest recovery path without time to benchmark and test your
solutions, and the ability to ask technical support engineers the
right questions. This may sound like a difficult guideline to
follow, and clich&#142;;s come to mind, such as &quot;everybody
makes mistakes,&quot; but it's the most important rule. Think
twice&#151;even three or four times&#151;before you click on that
last OK button that launches a half-day-long operation. You may
then realize that &quot;Dump database&quot; radio-button is
checked instead of &quot;Load database.&quot; Miss it and you'll
overwrite the only good dump that you have.</p>

<H2>Plan ahead</h2>

<P>Every organization should have a comprehensive
Disaster Recovery plan for IS and other mission critical portions
of the business, but regardless of how much time system designers
spent detailing recovery scenarios, DBAs should do their own
planning and preparations. </p>

<P>It's important to accept that you must be prepared
to use <i>any and all</i> of the existing tools in a disaster
mode&#151;not just the ones you're most comfortable with. That
may include running scripts in isql from DOS as well as utilizing
the whole GUI administration tools palette. Just keep everything
ready and available and remember the syntax of DISK INIT. How
many options do you have in your particular environment to
restore a database? There should be about half a dozen. </p>

<P>Whenever possible, <i>test recovery plans and
procedures</i> ahead of time. It's horrible to learn that
something wasn't anticipated in your plans when it's too late to
change it. </p>

<P>Time <i>every</i> procedure and technique. Somebody
else's benchmark is probably irrelevant in your environment. Your
network topology, disk configuration, and SQL Server versions may
have unexpected bottlenecks and yield unusual performance on
recovery operations. You need to know how long it takes to do the
following:</p>

<ul>
    <li>Make your databases backup to different media at your
        disposal. [You may also want to consider using a tool
        such as Platinum Technology's Image Analyzer (from
        $1,300), which reportedly detects errors in either
        Microsoft or Sybase SQL Server backups. 800-442-6861 or
        708-620-5000, or fax 708-691-0407. Internet:
        info@platinum.com or http://www.platinum.com. Another
        forthcoming product from Client Server Factory will
        reportedly repair corrupted DBMS files. 800-813-2577 or
        CompuServe 72103,240. Internet http://www.io.org/~tcsf.
        &#151;Ed.] Load from tape, disk dump, or CD.</li>
    <li>Copy files from disk to disk on the same server or across
        the network.</li>
    <li>Create database devices.</li>
    <li>Create databases.</li>
    <li>Bulk-copy data in and out of databases, and compare BCP
        performance when it's initiated on the SQL Server itself,
        on another network server or from a client workstation.</li>
    <li>Make copies of major tables using select into or insert
        with select. [SQL Server 6.5 makes it easier to back up
        single tables.&#151;Ed.]</li>
    <li>Create clustered and non-clustered indexes on major
        tables.</li>
    <li>Re-engineer DDL scripts for all database objects using
        available administration tools and execute these scripts.
        [See Lee Gould's articles for help on that.&#151;Ed.]</li>
    <li>DBCC with different options (the most important to
        benchmark are NEWALLOC, CHECKDB, and CHECKTABLE on the
        largest tables with several indexes; UPDATEUSAGE; and
        maybe even some undocumented options). DBCC NEWALLOC
        requires time linear with the database size. DBCC CHECKDB
        walks through every table and every index (unless you run
        it with a NOINDEX option). It spends most of its energy
        on indexes, because it has to check every row key on
        index pages and read corresponding data pages to ensure
        consistency. The most expensive ones are non-clustered
        indexes since data pages are accessed in a non-sequential
        order. For example, if you have a 10,000,000-rows-table
        that resides on 100,000 data pages, it'll take 100,000
        sequential page reads to check the data (which may
        perform especially well with read-ahead) as opposed to up
        to 10,000,000 page reads (worst case) in a practically
        random order to check a non-clustered index. It's more
        than 100 times longer for just one index and every index
        is checked separately. Don't be surprised if adding a new
        non-clustered index to improve the performance of an
        obscure query costs you an extra hour of time on every
        DBCC CHECKDB execution.</li>
</ul>

<P>All times should be estimated separately for every
database, all major tables, and sometimes individual indexes. Why
is that so important? Because when you evaluate different
recovery options, time means money and depending on how long
it'll take, you may choose one or another path. When a DBA is
able to accurately predict how long will each step take, other
people involved in problem resolution can make more confident
decisions. Remember that uncertainty usually causes more stress
than established known bad news. Depending on recovery time
estimates, executive can make decisions about assigning some
other tasks to users, bringing in additional help, reallocating
hardware resources, or planning overtime work.</p>

<H2>SQL Server is down. What to do first?</h2>

<P>You need a routine for SQL Server problem resolution
that will spare you some time during the first several minutes. I
suggest you take these basic steps:</p>

<ul>
    <li>Make sure that you prevent further damage to the database
        and the server. If that means shutting down SQL Server,
        do it without waiting for someone's approval. It's a
        DBA's call to pull the plug when your experience suggests
        that any delay may worsen the situation. It's best if you
        can document what a DBA is or isn't authorized to do
        independently in a disaster situation, and get this
        approved and standardized in your organization.</li>
    <li>Notify users and immediate managers. At this point you
        can't provide accurate estimates of recovery possibility
        and time. A brief inventory of facts will do. Don't be
        lured into root-cause analysis or a search for a
        scapegoat&#151;you have more important things to do to
        revive the server. There will be time to write reports
        later.</li>
    <li>I strongly recommend calling technical support
        (preferably your vendor) and logging the case regardless
        of how much you know about the scale of damage. Because
        support is usually provided on a call-back basis, several
        hours may elapse before you actually get some help, so
        start early.</li>
    <li>Account for losses. Identify what impact the disaster has
        on your organization business. Is there a data loss? How
        much is lost: a table, a database, the whole server, or
        only the last few hours of work? Some answers may remain
        unknown.</li>
    <li>Devise recovery scenarios and try to foresee different
        turns the plan may take. Ask yourself what you'll do if
        any step fails. </li>
    <li>Evaluate risk, time, and amount of work involved in every
        scenario and each step.</li>
    <li>Choose the plan that looks best, but keep thinking about
        other ones in case if it fails. Present it to people who
        own the database and pay for its usage since in many
        cases their word should be the last in weighting risk vs.
        quick server availability.</li>
</ul>

<P>Unfortunately, there are many situations when the
answers aren't obvious. You may find yourself in a position when
you have to choose between the risk of losing some data and the
ugly reality of keeping the server down for several days.
Recovery purists will say that you shouldn't take chances and
strictly follow recommended procedures. I wish it were that
simple! If you try telling your users that the corruption is
fixed, but it'll take 48 hours to run a complete database
consistency check to be 100 percent sure, they may question your
sanity and will doubt your professional competence.</p>

<H2>$175 Advice: &quot;Restore the database from your
most recent backup&quot;</h2>

<P>One hundred and seventy-five dollars is what
technical support may charge you for this advice. (If you start
selling T-shirts with this imprint at the next conference of
database professionals, please send me 10 percent royalties for
the idea.) Jokes aside, this is the best, most efficient, and
most frequently used recovery procedure. You must always evaluate
it before all other plans because in many cases it'll save you
time and headaches.</p>

<P>What does it take to recover in every particular
situation? Are you ready to go through countless attempts to
restore corrupt data, analyze DBCC reports resembling mainframe
hexadecimal dumps, and execute unsupported and undocumented
commands? If it takes only 30 minutes to restore from a backup,
and there's no serious data loss, then you should go for it.</p>

<P>Unfortunately, the decision isn't so obvious when
you're facing a data loss as a result of restoring from backup.
It may involve several thousand customer orders or payroll
information. Sometimes countless inconsistencies will emerge
after reloading from a dump. The affected server may be in
complicated referential integrity relations with many other
databases and data sources, and restoring this delicate cobweb
may be close to impossible. You may be in an environment where
time is less important then data integrity.</p>

<H2>Put yourself in a tech support engineer's
headphones</h2>

<P>I often hear complaints about the quality and
usefulness of vendors' technical support, but we shouldn't forget
that support engineers are mortals just like us, and we shouldn't
expect miracles. They have to talk to all sorts of sometimes
hysterical folks across the world over the phone without seeing
the system, without knowing anything about the data, application,
and with only limited information about underlying hardware and
network traffic. </p>

<P>Their strength is their experience, their access to
a knowledge base of resolved and reported cases, specialization
in a certain narrow area, and access to internal documentation
and SQL Server product developers. Yes, I've dealt with some
support technicians who had less experience than I wanted them to
have, and have sometimes been extremely frustrated with their
poor directions. </p>

<P>Then I realized that <i>I</i> should always remain
in the driver's seat. It's easy to sit back and try to be a
passenger expecting the support engineer to steer. Ask questions
and don't blindly rush out to try every recommendation. If you
aren't certain what the next action is supposed to serve and how
long it'll take, ask. Explanations will help you to understand
why and where you're going. In many cases, you'll be able to
propose an alternate route. And don't forget that if you feel
that you're getting nowhere with the assigned engineer, you can
ask for another one&#151;or for problem escalation to a support
manager. Another bit of advice: Instead of going through the
recovery step-by-step, write the whole proposed plan down,
analyze it, and voice your concerns, ideas, and suggestions. Ask
for estimates of time and probability of success of every step.
Don't grasp for straws until you run out of reasonable solutions.
Don't do anything unless you have a clear understanding of what
the next step is supposed to do to your system and what the risks
are. For example, when one of several databases is down, but the
others are intact, you shouldn't shut down the server just
because the engineer suggests you do. He or she may not be aware
of all conditions, and when you indicate your desire to keep
other users on the server if possible, may propose other ways to
recover.</p>

<P>I have to credit Microsoft support personnel for
always being friendly and patient. Even when I insisted on a
challenging recovery path that required them to spend hours on
the phone with me, they never expressed their distress with a
demanding customer. Even though support folks are motivated to
resolve as many cases as possible in the shortest time (they'll
be able to close the incident in a matter of minutes when you
agree to restore from the most recent dump), customer
satisfaction means a lot to them. </p>

<H2>Read the fine print</h2>

<P>Read your support agreement carefully. Depending on
your support level and the criticality of your case, you should
expect different response time. Obviously, when disaster occurs,
it's too late to upgrade your support level, but you should
correctly report the importance of fast recovery to your
business. There are several levels of criticality, with
&quot;serious business impact&quot; or &quot;production server
down&quot; being the worst case and &quot;question&quot; being
the easiest. You may be asked to specify how many production
users are affected by the disaster. It's not unusual <i>not</i>
to get support for four hours in a disaster situation. That's why
I suggest to log the problem as soon as you realize that you may
need support. It's possible that you'll recover the database
yourself before the engineer calls you and will nevertheless have
to pay for the call. If your contract requires separate payment
per case, you should consider how important is it not to lose
time during recovery&#151;the price of a false alarm is probably
negligible. My advise is to call even if you aren't sure about
the seriousness of the case. For most companies, unlimited
support is the best choice. Then your SQL Server developers and
administrators won't try to limit calls to the vendor with
questions that can spare your company hours of testing and
experimenting. Non-critical questions are usually answered within
24 hours. Make sure that the operator who logs your case provides
you with an estimate of an expected call-back time. Ask for
explanations if answers don't make sense. You may need to justify
not only your own actions, but also how important it is for your
business to get faster response.</p>

<P>In some cases when there is no solution or
workaround to your particular problem, the vendor may even
release a special patch to the product software. You can insist
on this when a proven vendor's bug causes serious harm to your
business.</p>

<P>When the vendor suggests that you upgrade your
software or hardware to the most recent service pack or
incremental release, you should follow this advice. I see many
problems go away with incremental releases. If they suggest that
you upgrade to the next major version, you may discuss how it can
resolve the problem, but by no means are you obligated to do this
while your server is in a disaster mode. &quot;Latest and
greatest&quot; is in many cases better than &quot;old
reliable,&quot; but upgrading should be taken more seriously and
requires thorough testing. </p>

<P>If the software vendor blames the hardware vendor,
ask them to prove it. They may be right. I learned this the hard
way. A database kept corrupting on a heavy query. The SQL Server
vendor suggested that the problem was with the disk. I took it as
an attempt to throw &quot;hot potato&quot; into someone else's
lap and insisted on researching the problem and attempted to fix
it on the SQL Server level. The engineer wasn't himself convinced
that it was a hardware bug and we went through many unsuccessful
attempts to correct the problem. Three weeks later (it wasn't a
production server) he proposed to run a hardware test, and I
finally agreed. Surprise! The test revealed serious hardware
problems. The story still continues as I write this because now
the hardware vendor isn't convinced that it's their problem. The
essence of the story is -that you shouldn't take the attitude of
&quot;sure they never admit their fault.&quot; If you read
through TechNet articles you'll find many articles where
Microsoft admits bugs and offers temporary workarounds until they
are fixed in Service Packs or new versions.</p>

<P>Last tip: Be nice to engineers. After all, they're
trying to help you; they didn't write that software
themselves&#151;and <i>they</i> aren't getting paid $175 per
call.</p>

<H2>To be continued</h2>

<P>Next month I'll talk about different backup and
recovery techniques in more detail.</p>

<P><b>Be Prepared to Answer Questions</b></p>

<P>In my experience, these are the five most popular
questions users ask once their server is hit by disaster. You
should be ready to answer them. </p>

<H3>Why is the server down?</h3>

<P>Delay the answer until you are sure about the
cause.</p>

<H3>How soon will you recover it? </h3>

<P>Delay the answer until you've estimated the time.
Even then be cautious not to support unrealistic expectations. It
may be tempting to give the answer they hope for and then count
on the best case scenario. Nobody likes to disappoint colleagues
and customers with unpleasant facts. Still, it's worse to seed
unsupported hope. Murphy's law still applies to our work.</p>

<H3>Should we expect more disasters?</h3>

<P>The answer to that is &quot;Yes.&quot; The good
news is that really &quot;bad&quot; corruption happens less and
less often as SQL Server and Windows NT mature.</p>

<H3>Should we switch to Oracle/Access/back to </h3>

<H3>mainframe/paper and pencil/Java?</h3>

<P>The answer is &quot;Let me recover the database
first or you'll have no data to migrate to other platforms&quot;.
No technology or tool is absolutely reliable, usable, and at the
same time cheap. SQL Server fares quite well among it's rivals.
Send users back to original system architecture documents where
advantages and disadvantages of the chosen technology were
explained and evaluated.</p>

<H3>What are the chances of success with your recovery
plan?</h3>

<P>This is the most dangerous question. If you only
knew the right answer! Situations may be very different every
time. In case if you have seen the same error on a number of
other occasions, you may provide some statistics of success. You
may request this information from your technical support, because
they have a much better database of corruption and failure cases.
I wish vendors would publish recoverability statistics for every
kind of error.</p>

<P><i>Andrew Zanevsky is an independent consultant.
He has worked as a DBA and as an applications developer for
several Fortune 500 companies with both MS SQL Server and Sybase.
He is president of the Great Lakes SQL Server Users Group located
in Chicago. 708-609-8783, CompuServe 71232,3446.</i></p>

<P align="center"><a
href="http://www.pinpub.com/sqlpro/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about SQL
Server Professional and Pinnacle Publishing, <br>
visit their website at </strong><a
href="http://www.pinpub.com/sqlpro/"><strong>http://www.pinpub.com/sqlpro/</strong></a><strong>.
</strong></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the May 1996 issue
of SQL Server Professional. Copyright 1996, by Pinnacle
Publishing, Inc., unless otherwise noted. All rights are
reserved. SQL Server Professional is an independently produced
publication of Pinnacle Publishing, Inc. No part of this article
may be used or reproduced in any fashion (except in brief
quotations used in critical articles and reviews) without prior
consent of Pinnacle Publishing, Inc. To contact Pinnacle
Publishing, Inc., please call (800)788-1900 or (206)251-1900.</p>
</font></body>
</html>

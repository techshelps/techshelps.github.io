<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extend the Report Writer with GenRepoX 2.0 (March)</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<font face="verdana,arial,helvetica" size="2">
<H1>Extend the Report Writer with GenRepoX 2.0</h1>

<P>Markus Egger</p>

<P><i>Markus Egger has been involved in the computer
business for more then 10 years. He owns the European software
house EPS-Software and is involved in the American company
MTI-Software. He works with Visual FoxPro and Visual C++. He is
an international speaker and author. His best-known product is
the public-domain tool GenRepoX. CompuServe 100337,1062.</i></p>

<P>This article originally appeared in the March 1996
issue of FoxTalk, published by Pinnacle Publishing Inc., PO Box
888, Kent, WA 98035-0888; 800-788-1900; 206-251-1900;
http://www.pinpub.com.</p>

<P>Just when you thought you were done with tools like
GENSCRNX and GENMENUX, along comes a similar public domain
utility from Austria that does for reports what the first two
add-ons did for screens and menus. GenRepoX performs many of the
same types of functions, but also performs some report-specific
actions and is controlled in a somewhat different fashion due to
FoxPro's non-compilable .FRX structure. The bottom line: easily
enhanced report functionality that should be in every developer's
toolkit.</p>

<P>GENREPOX is a power tool extender similar to
GENSCRNX and GenMenuX. (It extends the Form/Class Designer, the
Menu Designer and, last but not least, the Report Designer.) In
FoxPro 2.x, screens were generated, and as a result, GenScrnX was
one of the most important tools for every developer. In Visual
FoxPro 3.0 it's no longer necessary because there is no more
source generation. We have the same situation with the report
writer because reports have been printed directly from the .FRX
file since reports were introduced to FoxPro. This means that
GenRepoX has to approach the power tool enhancement process
differently. GenRepoX does all its changes on-the-fly. GenRepoX
copies your .FRX file to a temporary one, makes the changes in
this temporary copy, and prints the report from the copy. This
might sound like it would be slow, but since .FRX files are .DBF
tables with a different file extension, GenRepoX can take
advantage of FoxPro's natural table-oriented speed.</p>

<P>If you use GenRepoX, you can use *:-commands in your
comment snippets, just like the other GENX commands. (There are
additional places where you can use these commands, but I'll
cover this later.) For example, you could place the command
*:UNDERLINED in a field to create an underlined font, which is
very useful since this isn't possible in FoxPro 2.x. GenRepoX
works in both Visual FoxPro 3.0 and in FoxPro 2.x. Since it
doesn't rely on Visual FoxPro features, even features like object
orientation and events work in FoxPro 2.x.</p>

<H2>Using GenRepoX</h2>

<P>GenRepoX is a .PRG program. There's no magic
involved. Since there's no generation process in reports, FoxPro
doesn't have a system variable (like _GENSCRN) to define which
program is used to print the report. This means you have to tell
FoxPro directly that you want to use GenRepoX. Normally, you
would call a report like this:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> REPORT FORM Test TO PRINTER</font></pre>

<P>If you want to use GenRepoX, you have to call it,
and pass the original command as a parameter:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> =GENREPOX( &quot;REPORT FORM Test TO PRINTER&quot; )</font></pre>

<P>As you can see, the original command is passed as
the parameter, and it is used to print the report. This means
that GenRepoX is 100 percent compatible with the normal FoxPro
report writer. GenRepoX just takes the command, looks for the
report name, makes a copy of this report, and makes some changes.
Normally, the original report isn't changed at all (there's only
one case, functions, which I'll discuss later). Finally, GenRepoX
uses the original command to print the report.</p>

<P>This also means that you have to include
GENREPOX.PRG in your project. This isn't a problem because
GenRepoX is a public domain tool, and you can copy it and ship it
with your products as much as you want.</p>

<P>Until now, you've seen that you can pass a single
parameter to GenRepoX, identifying the report to run. But there's
more. You can pass three parameters like so:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> =GENREPOX(Command, DoRun, CommentSnippet)</font></pre>

<P>The parameters are as follows:</p>

<ul>
    <li>Command&#151;This is the normal report command that
        you've used so far.</li>
    <li>DoRun&#151;This parameter defines if the report should be
        printed, or if you just want to do a generation run. This
        is useful when you want to make sure that the report was
        created properly and all the functions are up-to-date.</li>
    <li>CommentSnippet&#151;This is only for compatibility to
        version 1.x.</li>
</ul>

<P>Some GenRepoX commands have to be used in the global
comment snippet of the report. Unfortunately, you can't edit this
snippet (unless you open the .FRX directly with a USE-command).
For this reason, you can pass the whole global comment snippet as
a parameter. But make sure to separate every command with a
CHR(13).</p>

<P>You don't need this parameter in version 2.0 since
you can pass all this information in the first parameter. To keep
the compatibility in the original command, GenRepoX cuts all this
additional information off before the report is printed.</p>

<H2>A simple example</h2>

<P>To create a simple report with one field, add the
GenRepoX command &quot;*:UNDERLINED&quot; in the comment snippet
of the field. Now print the report as usual with the REPORT FORM
command. As you see, the report prints as usual without any
underlined fonts, but there are no problems due to the contents
of the comment snippet. Now call GenRepoX and pass the command as
a parameter. The first thing you see is a wait window saying
&quot;Running GenRepoX...&quot; This is a hint for the programmer
that everything is working fine. This window appears only in the
development environment. When you look at the report, you'll see
that the field was printed in an underlined font. <i>Voilà</i>:
that's magic, right?</p>

<P>Well, almost. In fact, GenRepoX just changed some
fields in its copy of the FRX, which enabled some functionality
that the report writer hides because there is no interface for
it. But GenRepoX does more. I'm sure most of you have called a
function in your reports instead of using a simple field or
variable name. This function was stored in a procedure file or
somewhere in your calling stack. This worked fine until you gave
the report to your friend and you forgot the function.</p>

<P>In fashionable coding, we try to create &quot;black
boxes.&quot; These are functions/objects/units that work without
knowing anything about the world outside. Well, these reports
weren't black boxes at all. For this reason I tried to bundle the
functions to the report, like we do with objects today. So with
GenRepoX, you'll code the whole function directly into the
comment snippet of each item using the *:FUNCTION command.
GenRepoX compiles this functions and stores the compiled version
in the report. This is the only case where GenRepoX changes the
original report. But don't panic, it doesn't affect anything.
This technique is very similar to what Visual FoxPro does in
forms/classes and the database container. These functions can't
be changed in the .EXE version. Changes are just ignored since
FoxPro can't compile functions in the runtime version.</p>

<H2>Other features </h2>

<P>Version 1.1, built back in the days of FoxPro 2.x,
was a giant leap from the old way of generating reports. It had a
bunch of really useful features, like coding functions into
reports. You were also able to color fields and change their font
depending on their value. You were able to create underlined
fonts, and you were able to use all possible colors, not only the
16 that were supported by the report writer. There was a feature
that allowed the user to choose which fields should be printed
without anything more then one command. And there was a detail
extender that allowed you to print multible detail bands (for
example, in group footers). And there were a bunch of other
little features (see Table 1 and Table 2 following this article).
Most of these features didn't just enable hidden features, but
they added real functionality to the report writer.</p>

<P>But then, Visual FoxPro came along with a lot of new
features: object orientation, database container, a new event
model, and what about reports? It was time for GenRepoX to grow
up and to do what the developers at Microsoft didn't have time to
do.</p>

<H2>Object-oriented reports</h2>

<P>The most important feature of version 2.0 is object
orientation. GenRepoX has it's own object model, which is similar
to the object model of Visual FoxPro. But it's a completely
independent model in that it handles some things that are not
possible in VFP.</p>

<P>Let's start with the basics. Those of you who used
GenScrnX might know the library concept that Ken Levy used in
GENSCRNX, and they might think &quot;that's an old story. We're
not gonna read this again.&quot; But hey, stop! I'm talking about
something completely different here. </p>

<P>GENSCRNX's library model takes a record and copies
it over an existing one. GenRepoX actually has a real object
model. Every object in a report has properties and methods, and
you can define classes and subclass them. You can also subclass a
subclass, and so on. You don't have a limitation of how deep
subclasses are nested. A subclass inherits everything that's
defined in the ParentClass, except the things that have been
overwritten. For example, if your ParentClass has a PrintWhen
Condition, all the subclasses get the same PrintWhen Condition.
But if you write something into the PrintWhen snippet of your
subclass, you override the PrintWhen Condition of the
ParentClass. However, just as with Visual FoxPro, there are ways
to write something in a subclass's method and still access the
parent class's contents as well. For example, you could put
something in the PrintWhen Snippet and get the PrintWhen Snippet
of the ParentClass as well. As with Visual FoxPro, you can do
this with the &quot;*::&quot; operator.</p>

<P>However, don't mistake this operator as being
identical to Visual FoxPro's &quot;::&quot; operator. You can use
it to reference something in a ParentClass. The difference is
that in Visual FoxPro you can only use it in Methods. In GenRepoX
you can use it in properties as well.</p>

<P>Another difference to note is that you can't leave
some parameters empty. This means, that you override the
properties in the ParentClass by default. You have this problem,
for example, with the Expression and with the Fonts. There is
some added GenRepoX functionality (CLEAR_EXPRESSION,
CLEAR_FONTINFO, CLEAR-FONTSTYLE, and so forth) that deletes this
stuff and the inheritance works fine then.</p>

<P>You define a class using the &quot;*:CLASS
ClassName&quot; command. Then the object automatically becomes a
class, and the report where it is stored becomes it's ClassLib.
But you can still print this ClassLib like a normal report. The
*:CLASS-command doesn't have a meaning then. To create a
subclass, just add &quot;*:AS_CLASS ClassName OF
ClassLib.FRX&quot; to another object/class, and it inherits
everything from the defined class. And as I already said: You can
have multible levels of inheritance and the chain can become as
long as you want. You don't really need to say &quot;...OF
ClassLib.FRX&quot;. You can also define standard classlibs.</p>

<P>One big feature is multiple inheritance. This means,
that a class can have more than one ParentClass. For example you
have a special class for PrintWhen Conditions. You have another
class with some special stuff. You can now create a class that
subclasses from the PrintWhen Class and from the special class as
well. This is a very powerful feature. But sometimes it's
difficult to handle because you don't know what the real
ParentClass is. Anyway, I give you this functionality. If you
like it, use it and enjoy it; if you don't like it or if you are
uncomfortable with it, don't use it. Creating a class that
inherits from two or more (again no limits) other classes is
simple. Just use more then one *:AS_CLASS - statement.</p>

<P>The first class from which you inherit has the
highest priority and is the leading class. For example, if the
first class writes something into the PrintWhen snippet, the
second class can't overwrite this anymore. (Exception: If you use
the *::-operator, the functionality in the second class is added
to the existing functionality.)</p>

<P>As you can already see, GenRepoX's object-model
supports a lot of things that even VFP itself can't do. But in
version 2.0 there is another cool feature besides object
orientation: Events.</p>

<H2>Events</h2>

<P>If you explore the report writer, you can find
events in reports, but all these events are related to the data
environment, so they aren't really part of the functionality of
the report. But wouldn't it be cool to have some events like
GotFocus right before the object is printed, or LostFocus right
afterwards, or maybe an Error-Event to trap errors while the
actual object is printed? Well, with GenRepoX you have those
Events.</p>

<P>Create a simple report with one field and write the
following code into the comment snippet:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> *:EVENT GotFocus
GO 999999999
*:ENDEVENT
*:EVENT Error
ACTIVATE SCREEN
? MESSAGE()
*:ENDEVENT</font></pre>

<P>In this example, you move the record pointer to
record number 999999999 right before the field is printed. This
causes an error (unless your table has that many records), and
this error is handled by the error event, which can be thought of
as the object's private little error handler. In this error
handler, you activate the screen and display the error message.
Then you continue printing the object. Have you seen more
intelligent error handlers than this one? Well, you can use this
event for whatever you want. Think about the error handlers you
could build:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> The driver-model of GenRepoX</font></pre>

<P>Since version 1.1, a driver model is included, which
is very similar to the one in GenScrnX. There are several driver
hooks available. A demo-driver is included (CHECKBOX.PRG). You
can install this driver with the following line in your
CONFIG.FP(W) (or you can pass it as an additional statement in
the command-line):</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> _GRXDRV6=&quot;CHECKBOX.PRG&quot;</font></pre>

<P>This driver creates graphical check boxes in
reports. You may use this driver on logical fields. To create a
check box instead of the usual logical field, add the following
line to your comment-snippet:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> *:CHECKBOX The Text you want</font></pre>

<P>The report shows a hooked check box if .T. If you
want a crossed check box instead of a hooked one, add the keyword
CROSS:</p>

<P><br>
</p>

<pre><font face="Courier New" size="2"> *:CHECKBOX The Text you want CROSS</font></pre>

<P>For version 2.0, there are several drivers that, if
they aren't available as you are reading this, should be
published shortly. There is an HTML-driver that can print in HTML
format (Internet-WWW-Page-format). There will also be a driver
that can print directly to an e-mail address. In fact, there will
be several drivers: one will send the e-mail to MS Mail/ MS
Exchange and another one will directly logon to CompuServe,
Microsoft Network, and the Internet. Someone could even create a
driver that can communicate with Lotus cc:Mail. I''ve also
thought about a driver that prints in .RTF-format, and Steven
Black is considering a driver for his INTL Toolkit.</p>

<P>Some of those drivers are commercial products and
not Public Domain like GenRepoX. If you find a driver somewhere,
please read the license agreement to figure out if you are
allowed to use the driver for free, or not.</p>

<H2>Where to get GenRepoX?</h2>

<P>GenRepoX is public domain and the latest version is
included on this month's Companion Disk. You can download it from
all the FoxPro forums on CompuServe, from the Microsoft Network,
and probably in several locations on the Internet. New versions
are uploaded frequently, so check often.</p>

<P>If you don't have access to online services, ask
your user group if they can put it in their libraries. There are
also some commercial products, like Foxfire!, which ship
including GenRepoX. </p>

<P><b>The .FRX Structure. If you want to create
drivers for GenRepoX, you need to know how the .FRX files are
organized. Therefore I documented the most important things about
the .FRX structure. The following table documents only the most
important things. If you have a special question, feel free to
send me an e-mail.</b></p>

<table border="1" cols="2">
<COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="75%" VALIGN="TOP"><COL WIDTH="5pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <td valign="top"><b>Fieldname</b></td>
        <td valign="top" colspan="2"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">PLATFORM</td>
        <td valign="top" colspan="2">Platform for which this
        record will be used.</td>
    </tr>
    <tr>
        <td valign="top">UNIQUEID</td>
        <td valign="top" colspan="2">That's a unique ID for every
        record. It doesn't have a special meaning. Just make sure
        that this ID is really unique, if you want to add records
        on your own.</td>
    </tr>
    <tr>
        <td valign="top">TIMESTAMP</td>
        <td valign="top" colspan="2">On this field you can see
        when the record was created. But it doesn't have any
        special additional meaning</td>
    </tr>
    <tr>
        <td valign="top">OBJTYPE</td>
        <td valign="top" colspan="2">The first really interesting
        field. It contains information about the kind of stored
        information. Here is a short description of the possible
        values</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">1 = Definition-record. You
        can find this record in every report.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">5 = Label</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">6 = Line</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">7 = Rectangular/ Shape</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">8 = Datafield</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">9 = This record contains
        information about a band, like the detail-band, headings,
        footer, and so forth</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top" colspan="2">17 = Image or OLE-Object</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">18 = Report variable</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">23 = Default values for the report, like
        Fontshape and size.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">25 = That's the data environment (VFP
        only)</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">26 = That's an object (cursor or
        relation) in the data environment. (VFP only)</td>
    </tr>
    <tr>
        <td valign="top">OBJCODE</td>
        <td valign="top">The meaning of this field depends on the
        value in OBJTYPE. Mostly, this values are in combination
        with OBJTYPE = 4. In this case the values have the
        following meaning:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">0 = Report title</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1 = Pageheader</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">3 = Groupheader</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">4 = Detail</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">5 = Groupfooter</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">7 = Pagefooter</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">8 = Summary</td>
    </tr>
    <tr>
        <td valign="top">NAME</td>
        <td valign="top">The information in this field depends on
        the actual object as well. If the actual record describes
        an Image or an OLE-object, this field contains the
        filename or fieldname If the actual record describes the
        data environment (VFP only), the value in this field
        could be &quot;DataEnvironment,&quot; &quot;Cursor,&quot;
        or &quot;Relation.&quot;</td>
    </tr>
    <tr>
        <td valign="top">EXPR</td>
        <td valign="top">Also this field depends on the
        ObjectType. It stores the fieldname of a datafield, the
        displayed text of a label, or the properties of an object
        in the data environment.</td>
    </tr>
    <tr>
        <td valign="top">VPOS</td>
        <td valign="top">This field stores information about the
        vertical position of the actual object. It's important to
        know that this position is the absolute object position
        as it appears on your screen. This means that the height
        of each band counts as well, even if this band is just a
        graphical help in design time. I'll give you a little
        example: If we have a report, which has a Pageheader with
        a height of 0 (that means completely on top) and a field
        about 1 inch below the pageheader, the stored position
        isn't 1 inch; it is 1inch plus the graphical height of
        the band. The stored values are one-thousandth of a cm.</td>
    </tr>
    <tr>
        <td valign="top">HPOS</td>
        <td valign="top">The horizontal position of the object.</td>
    </tr>
    <tr>
        <td valign="top">HEIGHT</td>
        <td valign="top">The height of the object.</td>
    </tr>
    <tr>
        <td valign="top">WIDTH</td>
        <td valign="top">The width of the object.</td>
    </tr>
    <tr>
        <td valign="top">PICTURE</td>
        <td valign="top">This field contains the
        style-information of a field. This information is
        compatible to the picture command of FoxPro.</td>
    </tr>
    <tr>
        <td valign="top">COMMENT</td>
        <td valign="top">This is the comment snippet.</td>
    </tr>
    <tr>
        <td valign="top">ENVIRON</td>
        <td valign="top">This field defines if you want to store
        the DataEnvironment. (FoxPro 2.x only)</td>
    </tr>
    <tr>
        <td valign="top">FILLCHAR</td>
        <td valign="top">This field contains information about
        the fieldtype of the actual object. For example
        &quot;C&quot; for Chars, or &quot;N&quot; for numeric,
        and so forth.</td>
    </tr>
    <tr>
        <td valign="top">TAG</td>
        <td valign="top">This field contains different data
        depending on the actual objectype. In the first record of
        each report, this field contains binary information about
        the used printer driver. This information is compatible
        to the C structure you need to pass to the printer driver
        if you want to print in C.In all other records there is
        written information about the actual object. For example
        &quot;PHEAD&quot; if the actual record is a pageheader.
        If you clear this field in the first record, FoxPro
        forgets about the used printer driver and looks for the
        actual printer. This makes your reports more generic.</td>
    </tr>
    <tr>
        <td valign="top">TAG2</td>
        <td valign="top">In this field you have binary
        information about the printer driver as well. If you
        clear this field in the first record, FoxPro forgets
        about the used printer driver and looks for the actual
        printer. This makes your reports more generic.</td>
    </tr>
    <tr>
        <td valign="top">PENRED, PENGREEN, PENBLUE</td>
        <td valign="top">In this field FoxPro stores information
        about the forecolor of the actual object. These are
        standard rgb-values. In FoxPro 2.x, the dialog only
        allows 16 colors, but you can define all possible values
        in this field, and FoxPro (2.x and 3.0) is able to print
        all of these values.</td>
    </tr>
    <tr>
        <td valign="top">FILLRED, FILLGREEN, FIILLBLUE</td>
        <td valign="top">These are the values for the backcolor.</td>
    </tr>
    <tr>
        <td valign="top">PENSIZE</td>
        <td valign="top">This defines the pensize.</td>
    </tr>
    <tr>
        <td valign="top">PENPAT</td>
        <td valign="top">The line pattern.</td>
    </tr>
    <tr>
        <td valign="top">FILLPAT</td>
        <td valign="top">The fill pattern.</td>
    </tr>
    <tr>
        <td valign="top">FONTFACE</td>
        <td valign="top">The font name of the actual object.
        Note: Use only TrueType-fonts in your reports. All other
        fonts just ask for problems. And as Murphy want's it,
        these problems always occur when the first user tries to
        print. If you create reports only for yourself, or for a
        special user, you can also use printer fonts.</td>
    </tr>
    <tr>
        <td valign="top">FONTSTYLE</td>
        <td valign="top">This field contains codes for
        fontstyles:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">0 = Normal</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1 = Bold</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">2 = Italic</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">3 = Bold and Italic</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">4 = Underlined</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">5 = Bold and underlined</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">6 = Italic and underlined</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">7 = Bold, Italic and Underlined</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">Note: In FoxPro 2.x you can't activate
        underlined attributes. However, they are already
        supported if you enter the underlined codes directly into
        the .FRX.</td>
    </tr>
    <tr>
        <td valign="top">FONTSIZE</td>
        <td valign="top">The fontsize.</td>
    </tr>
    <tr>
        <td valign="top">MODE</td>
        <td valign="top">This field defines if the actual object
        is transparent or not.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1= Transparent</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">2 = Opaque</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">In FoxPro 2.6 there are some problems
        with this field. Sometimes FoxPro just prints black
        blocks instead of fields. In this case, this field is set
        to 2. Just fix this problem manually.</td>
    </tr>
    <tr>
        <td valign="top">RULER, RULERLINES, GRID, GRIDV, GRIDH</td>
        <td valign="top">In this field, FoxPro stores information
        about the ruler and the grid. This information is only
        important at design time and doesn't have a meaning for
        the final printing.</td>
    </tr>
    <tr>
        <td valign="top">FLOAT, STRETCH, STRETCHTOP, TOP, BOTTOM</td>
        <td valign="top">This fields define if the actual object
        floats in the actual band if the band grows (FLOAT =
        .T.), if the field should stretch if the data gets too
        long (STRETCH = .T.), if the field should stretch, but
        keep it's position (STRETCHTOP = .T.) and if the field is
        positioned relative to the top of the band (TOP = .T.) or
        to the bottom (BOTTOM =.T.).</td>
    </tr>
    <tr>
        <td valign="top">NOREPEAT</td>
        <td valign="top">If this field is set to .T., the field
        is only printed once.</td>
    </tr>
    <tr>
        <td valign="top">RESETRPT</td>
        <td valign="top">If this field is set to .T., the report
        will be reset after printing this object.</td>
    </tr>
    <tr>
        <td valign="top">PAGEBREAK</td>
        <td valign="top">.T. means that there will be a pagebreak
        after printing this object.</td>
    </tr>
    <tr>
        <td valign="top">COLBREAK</td>
        <td valign="top">.T. means that there will be a column
        break after printing this object.</td>
    </tr>
    <tr>
        <td valign="top">RESETPAGE</td>
        <td valign="top">This field defines if there should be a
        page reset (_PAGENO = 1) after printing this object.</td>
    </tr>
    <tr>
        <td valign="top">GENERAL</td>
        <td valign="top">This field defines if and how a graphic
        stretches:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">0 = Cut Image</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1 = Stretch proportional</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">2 = Stretch and fill the frame</td>
    </tr>
    <tr>
        <td valign="top">SPACING</td>
        <td valign="top">Defines the line space in textfields:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">0 = normal space (1 line)</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1 = 1 _ lines</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">2 = 2 lines</td>
    </tr>
    <tr>
        <td valign="top">DOUBLE</td>
        <td valign="top">Should a general-field be printed
        centered (.T. = Yes, .F. = No)</td>
    </tr>
    <tr>
        <td valign="top">SWAPHEADER</td>
        <td valign="top">If this field is .T., the header is
        printed on a new page.</td>
    </tr>
    <tr>
        <td valign="top">SWAPFOOTER</td>
        <td valign="top">If this field is .T., the footer is
        printed on a new page.</td>
    </tr>
    <tr>
        <td valign="top">EJECTBEFOR</td>
        <td valign="top">This field defines if there is an eject
        before the report is printed.</td>
    </tr>
    <tr>
        <td valign="top">EJECTAFTER</td>
        <td valign="top">This field defines if there is an eject
        after the report is printed.</td>
    </tr>
    <tr>
        <td valign="top">PLAIN</td>
        <td valign="top">This field defines if the header will be
        printed only on page one or nor (DOS and UNIX only).</td>
    </tr>
    <tr>
        <td valign="top">SUMMARY</td>
        <td valign="top">This field is used in DOS and UNIX and
        defines the kind of summaries.</td>
    </tr>
    <tr>
        <td valign="top">ADDALIAS</td>
        <td valign="top">This field defines if there should be an
        alias added to the fieldnames, or not.</td>
    </tr>
    <tr>
        <td valign="top">OFFSET</td>
        <td valign="top">This field is used for a lot of
        different functions. In DOS and UNIX it is used to store
        report and band information. The usage of this field
        depends on the actual objecttype:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">Images: In this case, this field defines
        the kind of source (bitmap or general).</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">Labels: This field is used to store the
        alignment (I'm not talking about fields!).</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">Shapes: This field is used to store the
        curvature.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">Lines: Is the line horizontal or
        vertical?</td>
    </tr>
    <tr>
        <td valign="top">TOPMARGIN</td>
        <td valign="top">This field is used to store the top
        margin of the report.</td>
    </tr>
    <tr>
        <td valign="top">BOTMARGIN</td>
        <td valign="top">This field is used to store the bottom
        margin (DOS and UNIX).</td>
    </tr>
    <tr>
        <td valign="top">TOTALTYPE</td>
        <td valign="top">This field contains coded information
        about the kind of calculation:</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">0 = Nothing</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">1 = Count</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">2 = Sum</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">3 = Average</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">4 = Lowest</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">5 = Highest</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">6 = Std. Deviation</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">7 = Varianz</td>
    </tr>
    <tr>
        <td valign="top">RESETTOTAL</td>
        <td valign="top">This field defines when the calculation
        should be reset.</td>
    </tr>
    <tr>
        <td valign="top">CURPOS</td>
        <td valign="top">If this field set to .T. (in the first
        record), the cursor position is displayed in the status
        bar (Windows and Mac only). This is only possible at
        design time.</td>
    </tr>
    <tr>
        <td valign="top">SUPALWAYS</td>
        <td valign="top">If this field is set to .T., the line
        isn't printed if it is blank.</td>
    </tr>
    <tr>
        <td valign="top">SUPOVFLOW</td>
        <td valign="top">If this is set to .T., the object is
        printed if the detail band changes to a new page.</td>
    </tr>
    <tr>
        <td valign="top">SUPRPCOL</td>
        <td valign="top">If this field is not 0, the object is
        printed in the first whole band of a new page.</td>
    </tr>
    <tr>
        <td valign="top">SUPGROUP</td>
        <td valign="top">If this field is not 0, the object is
        printed when the group changes. The group is defined by
        the number.</td>
    </tr>
    <tr>
        <td valign="top">SUPVALCHNG</td>
        <td valign="top">If this field is set to .T., the field
        is printed only if it's value changes.</td>
    </tr>
    <tr>
        <td valign="top">SUPEXPR</td>
        <td valign="top">This field contains the
        Print-When-statement.</td>
    </tr>
    <tr>
        <td valign="top">USER</td>
        <td valign="top">This field is reserved for the user and
        it can be used for any reasons. It doesn't affect the
        report at all. (This field is new in VFP.)</td>
    </tr>
</TBODY></table>

<P><br>
</p>

<P>Most of this is undocumented and can be changed by
Microsoft without notice. Also, all these fields have different
meanings on different platforms. In the Visual FoxPro manuals,
you can see which fields are used on which platform, but the
meaning of the fields is undocumented. I tried to list the most
important things, but this list isn't complete. Unfortunately,
most of the fieldnames don't tell what they do or that the radius
of a shape is stored in the field offset.</p>

<P><b>Table 2. Table of commands.</b></p>

<table border="0" cols="1">
<COLGROUP><COL WIDTH="75%" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <td valign="top"><b>Usable in the global comment-snippet:</b></td>
    </tr>
    <tr>
        <td valign="top">*:SORTORDER field1, field2, field3,...</td>
    </tr>
    <tr>
        <td valign="top">This command sorts all fields that are
        passed as parameters in the order they are passed.</td>
    </tr>
    <tr>
        <td valign="top">Use the same names that you define with
        *:SORTOBJ</td>
    </tr>
    <tr>
        <td valign="top">*:SORTCOL NumPos</td>
    </tr>
    <tr>
        <td valign="top">This command defines in which column the
        first *:SORTORDER field appears.</td>
    </tr>
    <tr>
        <td valign="top">*:SORTSPACE NumSpace</td>
    </tr>
    <tr>
        <td valign="top">This command defines the size of the
        space between the *:SORTORDER-fields.</td>
    </tr>
    <tr>
        <td valign="top">*:DOSORT [NameOfSortprog]</td>
    </tr>
    <tr>
        <td valign="top">You can use this command instead of
        *:SORTORDER. The difference is *:SORTORDER defines an
        unchangeable sorting order. With *:DOSORT fields can be
        sorted from the user in a nice screen that can be
        modified.</td>
    </tr>
    <tr>
        <td valign="top">*:MOVEHEAD x [INCHES}</td>
    </tr>
    <tr>
        <td valign="top">This command resizes the header by X
        centimeters or inches. This is very useful if you don't
        know how big your customers' letterhead is. One of them
        has an 3 centimeter header, and the next one is 7
        centimeters high. So you don't reserve space for the
        header at all, and you begin your report at the top-most
        pixel. Then, you move the header depending on a variable
        defined in your options dialog.</td>
    </tr>
    <tr>
        <td valign="top">*:CLASSLIB Drive:\Path\Name.Ext</td>
    </tr>
    <tr>
        <td valign="top">This defines a standardclasslib. You can
        define as many standard classlibs as you want.</td>
    </tr>
    <tr>
        <td valign="top"><b>Usable commands in the local
        comment-snippet</b></td>
    </tr>
    <tr>
        <td valign="top">*:DELETE</td>
    </tr>
    <tr>
        <td valign="top">Deletes the object during generation.</td>
    </tr>
    <tr>
        <td valign="top">*:DELOBJ</td>
    </tr>
    <tr>
        <td valign="top">Deletes the object after generation.</td>
    </tr>
    <tr>
        <td valign="top">*:UNDERLINE</td>
    </tr>
    <tr>
        <td valign="top">Adds the underlined attribute to the
        object.</td>
    </tr>
    <tr>
        <td valign="top">*:RGB_COLOR r,g,b,r,g,b</td>
    </tr>
    <tr>
        <td valign="top">With this command, you can use all the
        possible color-values (1-255)</td>
    </tr>
    <tr>
        <td valign="top">*:DEFI_WHEN_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Generates a class, which contains the
        PrintWhen statement and the RemoveLine Status of the
        current object.</td>
    </tr>
    <tr>
        <td valign="top">*:USE_WHEN_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Uses a defined WhenClass on the object.</td>
    </tr>
    <tr>
        <td valign="top">*:DEFI_EXPR_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Generates a class, which contains the
        Expression statement of the current object.</td>
    </tr>
    <tr>
        <td valign="top">*:USE_EXPR_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Uses a defined ExpressionClass on the
        current object.</td>
    </tr>
    <tr>
        <td valign="top">*:DEFI_PICT_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Generates a class, which contains the
        Picture statement of the current object.</td>
    </tr>
    <tr>
        <td valign="top">*:USE_PICT_CLASS</td>
    </tr>
    <tr>
        <td valign="top">Uses a defined PictureClass on the
        current object.</td>
    </tr>
    <tr>
        <td valign="top">*:FUNCTION</td>
    </tr>
    <tr>
        <td valign="top">With this command, you can define a
        function directly in your report. This function will be
        added to the GenRepoX-function library. GenRepoX compiles
        this functions &quot;on-the-fly.&quot;</td>
    </tr>
    <tr>
        <td valign="top">*:ENDFNCT</td>
    </tr>
    <tr>
        <td valign="top">This command sets the end of a function.
        You don't need to use this command if your don't use
        other comments after your function.</td>
    </tr>
    <tr>
        <td valign="top">*:DEFOBJ</td>
    </tr>
    <tr>
        <td valign="top">With this command, you can define a
        unique name for your object.</td>
    </tr>
    <tr>
        <td valign="top">*:DETAIL DbfName [FOR filter]</td>
    </tr>
    <tr>
        <td valign="top">With this command, you can define a
        detail band for instance in a groupfooter. This command
        activates the detail extender.</td>
    </tr>
    <tr>
        <td valign="top">*:IF_COLOR statement COLOR
        RGB(red,green,blue,red,green,blue)<br>
        FONT &quot;Fontname&quot;, Fontsize STYLE
        &quot;FontStyle&quot;</td>
    </tr>
    <tr>
        <td valign="top">With this command you can change the
        color and the font of the current object depending on
        your statement.</td>
    </tr>
    <tr>
        <td valign="top">*:SORTOBJ Objektname</td>
    </tr>
    <tr>
        <td valign="top">All objects that contain this command
        can be sorted on the fly.</td>
    </tr>
    <tr>
        <td valign="top">*:POSOVER Def-Objektname [LEFT | CENTER
        | RIGHT]</td>
    </tr>
    <tr>
        <td valign="top">This command positions an object above
        the object name that is passed as a parameter.</td>
    </tr>
    <tr>
        <td valign="top">*:AS_CLASS ClassName [OF ClassLib] (new
        in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This defines that this object is a
        SubClass of the Class &quot;ClassName,&quot; which is
        stored in &quot;ClassLib.&quot;</td>
    </tr>
    <tr>
        <td valign="top">*:CLASS ClassName (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This gives an object a ClassName so that
        it can be found by other reports.</td>
    </tr>
    <tr>
        <td valign="top">*:CLEAR_EXPRESSION (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This command clears the expression field
        of the actual object. You need this since the report
        writer doesn't give you the possibility to leave it
        empty.</td>
    </tr>
    <tr>
        <td valign="top">*:CLEAR_FONTFACE (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This command deletes the
        FontFace-information.</td>
    </tr>
    <tr>
        <td valign="top">*:CLEAR_FONTSIZE (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This command deletes the FontSize
        information.</td>
    </tr>
    <tr>
        <td valign="top">*:CLEAR_FONTSTYLE (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This command deletes the FontStyle
        information.</td>
    </tr>
    <tr>
        <td valign="top">*:CLEAR_FONTINFO (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This command deletes all Font
        information.</td>
    </tr>
    <tr>
        <td valign="top">*:EVENT EventName (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">With this command, you can create
        methods that are related to an event.</td>
    </tr>
    <tr>
        <td valign="top">*:ENDEVENT</td>
    </tr>
    <tr>
        <td valign="top">This command defines the end of an
        event.</td>
    </tr>
    <tr>
        <td valign="top"><b>Usable commands in the picture-/
        expression-snippets and other fields</b></td>
    </tr>
    <tr>
        <td valign="top">{{&amp;Variablename}}</td>
    </tr>
    <tr>
        <td valign="top">The value of the variable
        &quot;variablename&quot; will be evaluated and executed.</td>
    </tr>
    <tr>
        <td valign="top">*:: (new in Version 2.0)</td>
    </tr>
    <tr>
        <td valign="top">This is a reference to a method or a
        property in a ParentClass.</td>
    </tr>
</TBODY></table>

<P><br>
</p>

<P align="center"><a
href="http://www.pinpub.com/foxtalk/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about
FoxTalk and Pinnacle Publishing, visit their website at</strong> <br>
<a href="http://www.pinpub.com/foxtalk/"><strong>http://www.pinpub.com/foxtalk/</strong></a></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the March 1996
issue of FoxTalk. Copyright 1995, by Pinnacle Publishing, Inc.,
unless otherwise noted. All rights are reserved. FoxTalk is an
independently produced publication of Pinnacle Publishing, Inc.
No part of this article may be used or reproduced in any fashion
(except in brief quotations used in critical articles and
reviews) without prior consent of Pinnacle Publishing, Inc. To
contact Pinnacle Publishing, Inc., please call (800)788-1900 or
(206)251-1900.</p>
</font></body>
</html>

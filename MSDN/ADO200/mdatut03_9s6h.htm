<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADO Tutorial (VC++)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="mdhowadotutorial(vc)"></a>ADO Tutorial (VC++)</h3>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowADOTutorial(VC)_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowADOTutorial(VC)_S">
</object></p>
<p>
This tutorial features the new Microsoft<sup>®</sup> Visual C++<sup>®</sup> Extensions. The VC++ Extensions eliminate the use of cumbersome VARIANT data types. </p>
<p>
This tutorial also uses the <b>#import</b> directive, which converts the ADO typelib into a header file. That header file makes some ADO functionality similar in use and appearance to its equivalent in Microsoft<sup>®</sup> Visual Basic<sup>®</sup> .</p>
<pre><code>#define INITGUID
#import "c:\Program Files\Common Files\System\ADO\msado15.dll" 
   no_namespace rename("EOF", "EndOfFile")
#include &lt;stdio.h&gt;
#include "icrsint.h"

void dump_com_error(_com_error &amp;e)
   {
   printf("Error\n");
   printf("\a\tCode = %08lx\n", e.Error());
   printf("\a\tCode meaning = %s", e.ErrorMessage());
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
   printf("\a\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\a\tDescription = %s\n", (LPCSTR) bstrDescription);
   }

class CCustomRs : 
   public CADORecordBinding
{
BEGIN_ADO_BINDING(CCustomRs)
   ADO_VARIABLE_LENGTH_BINDING_ENTRY(1, adVarChar, m_szau_lname, 
         sizeof(m_szau_lname), lau_lnameStatus, FALSE)
   ADO_VARIABLE_LENGTH_BINDING_ENTRY(2, adVarChar, m_szau_fname, 
         sizeof(m_szau_fname), lau_fnameStatus, FALSE)
   ADO_FIXED_LENGTH_BINDING_ENTRY(3, adChar, m_szphone, 
         sizeof(m_szphone), lphoneStatus, TRUE)
END_ADO_BINDING()

public:
   CHAR   m_szau_lname[41];
   ULONG   lau_lnameStatus;
   CHAR   m_szau_fname[41];
   ULONG   lau_fnameStatus;
   CHAR   m_szphone[12];
   ULONG   lphoneStatus;
};

VOID   main()
   {
   HRESULT hr;
   IADORecordBinding   *picRs = NULL;
   
   ::CoInitialize(NULL);

   try 
      {
      _ConnectionPtr pConn("ADODB.Connection.1.5");
      _RecordsetPtr pRs("ADODB.Recordset.1.5");
      CCustomRs rs;
</code></pre>
<p class=label>
<b>// Step 1—Open a connection</b></p>
<pre><code>      pConn-&gt;Open("dsn=pubs;uid=sa;pwd=;");
</code></pre>
<p class=label>
<b>//Step 2—Create a command</b></p>
<p class=label>
<b>// Step 3—Execute the command</b></p>
<pre><code>      pRs-&gt;Open("select * from authors", pConn, 
         adOpenDynamic, adLockOptimistic, adCmdUnknown);
      
      if (FAILED(hr = pRs-&gt;QueryInterface(__uuidof(IADORecordBinding), 
            (LPVOID*)&amp;picRs)))
         _com_issue_error(hr);
      
      if (FAILED(hr = picRs-&gt;BindToRecordset(&amp;rs)))
         _com_issue_error(hr);
</code></pre>
<p class=label>
<b>// Step 4—Manipulate the data</b></p>
<pre><code>      pRs-&gt;Fields("au_lname").Optimize = TRUE;
      pRs-&gt;Sort = "au_lname ASCENDING";
      pRs-&gt;Filter = "phone LIKE '415 5*";

      pRs-&gt;MoveFirst();
      while (VARIANT_FALSE == pRs-&gt;EndOfFile)
         {
         printf("\a\tName: %s\t %s\tPhone: %s\n", 
            (lau_fnameStatus == adFldOK ? m_szau_fname : ""), 
            (lau_lnameStatus == adFldOK ? m_szau_lname): ""),
            (lau_lphoneStatus == adFldOK ? m_szphone): ""));

         if (lphoneStatus == adFldOK)
            lmemcpy(m_szphone, "777", 3);
            
         if (FAILED(hr = picRs-&gt;Update(&amp;rs)))
            _com_issue_error(hr);

      // Change the current row of the Recordset. 
      // Recordset data for the new current row will automatically be 
      // extracted and placed in the CCustomRs C++ instance variables.
   
         pRs-&gt;MoveNext();
         }
      pRs-&gt;Filter = adFilterNone;
</code></pre>
<p class=label>
<b>// Step 5—Update the data</b></p>
<pre><code>      pConn-&gt;BeginTrans();
      pRs-&gt;UpdateBatch();
</code></pre>
<p class=label>
<b>// Step 6, part A—Conclude the update </b></p>
<pre><code>      pConn-&gt;CommitTrans();
      }
   catch (_com_error &amp;e)
      {
      dump_com_error(e);
      }
   catch (ADODB.Error &amp;e)
      {
      pRS-&gt;Filter = adConflictingRecords;
      pRs-&gt;MoveFirst();
      while (VARIANT_FALSE == pRs-&gt;EndOfFile)
         {
         printf("\a\tConflict: Name = %s\t %s\n", 
            (lau_fnameStatus == adFldOK ? m_szau_fname : ""), 
            (lau_lnameStatus == adFldOK ? m_szau_lname): ""));
         pRs-&gt;MoveNext();
         }
</code></pre>
<p class=label>
<b>// Step 6, part B—Conclude the update </b></p>
<pre><code>      pConn-&gt;Rollback();
      }

   if (picRs)
      picRs-&gt;Release();

   CoUninitialize();
   }
</code></pre>
<p>
<b>This is the end of the VC++ tutorial. </b></p>
</font></BODY>
</HTML>

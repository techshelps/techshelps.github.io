<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hierarchical Cursors and Data Shaping Summary</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmschierarchicalcursorsdatashapingdetail"></a>Hierarchical Cursors and Data Shaping Summary</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscHierarchicalCursorsDataShapingDetail_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscHierarchicalCursorsDataShapingDetail_S">
</object></p>
<p>
ADO 2.0 introduces the Hierarchical Cursor feature, which enables you to define a child <b>Recordset</b> object as the value of a field in a parent <b>Recordset</b>. </p>
<p>
Here is a useful way to envision Hierarchical Cursors. Imagine a visual control, such as the <b>File Open</b> dialog, that shows files and subdirectories in a hierarchical fashion. Think of each directory as a <b>Recordset</b> object; each file within a directory as a <b>Field</b> object; and each subdirectory within a directory as a <b>Field</b> object whose value is another <b>Recordset</b>. </p>
<p>
ADO 2.0 also introduces a new Shape data manipulation language syntax, which allows you to make queries that result in a hierarchical <b>Recordset</b>. A Shape language command is issued just as you would issue any ADO command string. </p>
<p>
The Shape language is built into the ADO Client Cursor Engine. We will call the process of creating it <i>Data Shaping</i>.</p>
<p>
The Shape language enables you to make hierarchical <b>Recordset </b>objects in two ways. The first appends a child <b>Recordset</b> to the parent <b>Recordset</b>, while the second computes an aggregate operation on a child <b>Recordset</b> and generates a parent <b>Recordset</b>. </p>
<p>
You can nest hierarchical <b>Recordset</b> objects to any depth you require (that is, create children <b>Recordset</b> objects of children <b>Recordset</b> objects, and so on).</p>
<p>
You can access the resulting hierarchical <b>Recordset</b> programmatically or through an appropriate visual control. </p>
<p>
The Shape language is relatively difficult to write. Therefore, Microsoft provides a visual tool that generates Shape commands for you (see the Visual Basic topic, "The Data Environment Designer") and another visual tool that displays hierarchical cursors (see the Visual Basic topic, "Using the Microsoft Hierarchical Flexgrid Control").</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The RDS Programming Model in Detail</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmsctherdsprogrammingmodelindetail"></a>The RDS Programming Model in Detail</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheRDSProgrammingModelInDetail_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheRDSProgrammingModelInDetail_S">
</object></p>
<p>
The following elements are key parts of the RDS programming model:
<ul type=disc>
<li>
RDS.DataSpace<br><br></li>
<li>
RDSServer.DataFactory<br><br></li>
<li>
RDS.DataControl<br><br></li>
<li>
Event</li>
</ul>
<p class=label>
<b>RDS.DataSpace</b></p>
<p>
Your client application must specify the server and the server program to invoke. In return, your application receives a reference to the server program and can treat the reference as if it were the server program itself. </p>
<p>
The RDS object model embodies this functionality with the <a href="mdaobj01_3m79.htm">RDS.DataSpace</a> object.</p>
<p>
The server program is specified with a program identifier, or <i>ProgID</i>. The server uses the ProgID and the server machine's registry to locate information about the actual program to initiate.</p>
<p>
RDS makes a distinction internally depending on whether the server program is on a remote server across the Internet or an intranet; a server on a local area network; or not on a server at all, but instead on a local dynamic-link library (DLL). This distinction determines how information is exchanged between the client and the server, and makes a tangible difference in the type of <i>reference</i> returned to your client application. However, from your point of view, this distinction has no special meaning. All that matters is that you receive a usable program reference.</p>
<p class=label>
<b>RDSServer.DataFactory</b></p>
<p>
RDS provides a default server program that can either perform a SQL query against the data source and return a <b>Recordset</b> object, or take a <b>Recordset</b> object and update the data source. </p>
<p>
The RDS object model embodies this functionality with the <a href="mdaobj01_05bt.htm">RDSServer.DataFactory</a> object.</p>
<p>
In addition, this object has a method for creating an empty <b>Recordset</b> object that you can fill programmatically, and another method for converting a <b>Recordset</b> object into a text string to build a Web page.</p>
<p>
With ADO 2.0, you can override some of the standard connection and command behavior of the <b>RDSServer.DataFactory</b> with a <b>DataFactory</b> handler and a customization file that contains connection, command, and security parameters.</p>
<p>
The server program is sometimes called a <i>business object</i>. You can write your own custom business object that can perform complicated data access, validity checks, and so on. Even when writing a custom business object, you can create an instance of an <b>RDSServer.DataFactory</b> object and use some of its methods to accomplish your own tasks.</p>
<p class=label>
<b>RDS.DataControl</b></p>
<p>
RDS provides a means to combine the functionality of the <b>RDS.DataSpace</b> and <b>RDSServer.DataFactory</b>, and also enable visual controls to easily use the <b>Recordset</b> object returned by a query from a data source. RDS attempts, for the most common case, to do as much as possible to automatically gain access to information on a server and display it in a visual control.</p>
<p>
The RDS object model embodies this functionality with the <a href="mdaobj01_1hyk.htm">RDS.DataControl</a> object.</p>
<p>
The <b>RDS.DataControl</b> has two aspects. One aspect pertains to the data source. If you set the command and connection properties of the <b>RDS.DataControl</b>, it will automatically use the <b>RDS.DataSpace</b> to create a reference to the default <b>RDSServer.DataFactory</b> object. Then the <b>RDSServer.DataFactory</b> will use the connection property value to connect to the data source, use the command property value to obtain a <b>Recordset</b> from the data source, then return the <b>Recordset</b> object to the <b>RDS.DataControl</b>. </p>
<p>
The second aspect pertains to the display of returned <b>Recordset</b> information in a visual control. You can associate a visual control with the <b>RDS.DataControl</b> (in a process called binding) and gain access to the information in the associated <b>Recordset</b> object, displaying query results on a Web page in Internet Explorer. Each <b>RDS.DataControl</b> object binds one <b>Recordset</b> object, representing the results of a single query, to one or more visual controls (for example, a text box, combo box, grid control, and so forth). There may be more than one <b>RDS.DataControl</b> object on each page. Each <b>RDS.DataControl</b> object can be connected to a different data source and contain the results of a separate query.</p>
<p>
The <b>RDS.DataControl</b> object also has its own methods for navigating, sorting, and filtering the rows of the associated <b>Recordset</b> object. These methods are similar, but not the same as the methods on the ADO <b>Recordset</b> object.</p>
<p class=label>
<b>Events</b></p>
<p>
RDS supports two of its own events, which are independent of the ADO Event Model. The <a href="mdaevt01_1an9.htm">onReadyStateChange</a> event is called whenever the <b>RDS.DataControl</b> <a href="mdapro05_6ued.htm">ReadyState</a> property changes, thus notifying you when an asynchronous operation has completed, terminated, or experienced an error. The <a href="mdaevt01_09te.htm">onError</a> event is called whenever an error occurs, even if the error occurs during an asynchronous operation. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The Microsoft Internet Explorer<b> </b>environment provides two additional events to RDS—<b>onDataSetChanged</b> and <b>onDataSetComplete</b>.</p>
<p>
<B><b>Next </b></B>… <a href="mdoverview_96nn.htm">RDS Programming Model with Objects</a>.</p>
</font></BODY>
</HTML>

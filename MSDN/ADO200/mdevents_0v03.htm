<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Parameters</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmsceventparameters"></a>Event Parameters</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscEventParameters_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscEventParameters_S">
</object></p>
<p>
Every event handler has a status<b><i> </i></b>parameter that controls the event handler. Most <b>Complete</b> events have an error parameter to report whether the operation causing the event succeeded, and an object parameter to identify the ADO object to which the operation applied. </p>
<p>
<b>Will</b> events are also passed the parameters to be used in the pending operation. This gives you the opportunity to examine the parameters and determine whether the operation should complete or not.</p>
<p class=label>
<b>Status Parameter</b></p>
<p>
When the event handler routine is called, the status parameter is set to one of the following informational values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Value</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>adStatusOK</b></td>
<td width=50%>The operation that caused the event occurred successfully.</td>
</tr>
<tr valign=top>
<td width=50%><b>adStatusErrorsOccurred</b></td>
<td width=50%>The operation that caused the event occurred unsuccessfully, or a <b>Will</b> event canceled the operation. Check the error parameter for more details. </td>
</tr>
<tr valign=top>
<td width=50%><b>adStatusCantDeny</b></td>
<td width=50%>A <b>Will</b> event cannot request cancellation of the operation about to occur.</td>
</tr>
</table><br>
<p>
Before the event handler routine returns, leave the status parameter unchanged or set it to one of the following request values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Value</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>adStatusUnwantedEvent</b></td>
<td width=50%>Request this event handler receive no further notifications. </td>
</tr>
<tr valign=top>
<td width=50%><b>adStatusCancel</b></td>
<td width=50%>Request cancellation of the operation that is about to occur.</td>
</tr>
</table><br>
<p>
Depending on event type, the status operand can have one of the following values when the event handler is called.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Event Type</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Will </td>
<td width=50%><b>adStatusOK</b>,<b> adStatusCantDeny</b></td>
</tr>
<tr valign=top>
<td width=50%>Complete </td>
<td width=50%><b>adStatusOK</b>,<b> adStatusErrorsOccurred</b></td>
</tr>
</table><br>
<p>
Depending on event type, the status operand can have one of the following values when the event handler returns.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Event Type</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Will</td>
<td width=50%><b>adStatusOK</b>, <b>adStatusCancel</b>,<b> adStatusUnwantedEvent </b></td>
</tr>
<tr valign=top>
<td width=50%>Complete </td>
<td width=50%><b>adStatusOK</b>,<b> adStatusUnwantedEvent </b></td>
</tr>
</table><br>
<p class=label>
<b>Error Parameter</b></p>
<p>
The error parameter is a reference to an ADO <b>Error</b> object containing details about why the operation failed if the status parameter equals <b>adStatusErrorsOccurred</b>. </p>
<p class=label>
<b>Object Parameter</b></p>
<p>
The object parameter is a reference to the ADO object for which the operation applies. For example, you could have several <b>Connection</b> objects open at one time and only one <b>Disconnect</b> event handler. If any one connection closed, the <b>Disconnect</b> event handler would be called with the object parameter set to the <b>Connection</b> object that closed.</p>
<p class=label>
<b>Reason Parameter</b></p>
<p>
Some event handlers have an <b>adReason</b> parameter, which provides additional information about why the event occurred. Methods with an <b>adReason</b> parameter may be called several times—even for the same operation, but for a different reason each time. </p>
<p>
For example, the <b>WillChangeRecord</b> event handler is called for operations that are about to do or undo the insertion, deletion, or modification of a record. Use the <b>adReason</b> parameter as a filter to only process particular events. </p>
<p>
You must return <b>adStatusUnwantedEvent</b> in the <b>adStatus</b> parameter to request that an event handler without an <b>adReason</b> parameter stop receiving event notifications. However, an event handler with an <b>adReason</b> parameter may receive several notifications, each for a different reason. Therefore, you must return <b>adStatusUnwantedEvent</b> for each notification caused by a different reason. </p>
<p>
For example, assume you have a <b>WillChangeRecord</b> event handler coded in Microsoft<sup>® </sup>Visual Basic<sup>®</sup>. If you don't want to receive any further notifications whatsoever, simply code the following:</p>
<pre><code>Set <span class=cfe><b>adStatus</b></span> = adStatusUnwantedEvent
</code></pre>
<p>
However, if you want to process events where the row is about to be deleted, but cancel notifications for all other reasons, then code the following:</p>
<pre><code>if (<span class=cfe><b>adReason</b></span> = adRsnDelete)
' Process an event for this reason.
...
else
' Stop receiving events for any other reason.
Set <span class=cfe><b>adStatus</b></span> = adStatusUnwantedEvent
... 
</code></pre>
</font></BODY>
</HTML>

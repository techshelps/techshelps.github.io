<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Shape Append Command</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmscshapeappendcommand"></a>Shape Append Command</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscShapeAppendCommand_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscShapeAppendCommand_S">
</object></p>
<p>
The Shape <i>APPEND</i> command assigns a child <b>Recordset</b> to the <b>Value</b> property of <b>Field</b> objects in a parent <b>Recordset</b>. </p>
<p class=label>
<b>Syntax</b></p>
<p>
"SHAPE {<i>parent-command</i>} [[AS] <i>table-alias</i>]</p>
<p>
APPEND {<i>child-command</i>} </p>
<p>
RELATE(<i>parent-column</i> TO <i>child-column</i>)"</p>
<p class=label>
<b>Description of parts</b></p>
<p>
The parts of this command are:
<ul type=disc>
<li>
<i>parent-command</i>, <i>child-command</i>—A query command that returns a <b>Recordset</b> object. The command is issued to the underlying data provider, and its syntax depends on the requirements of that provider. This will typically be Structured Query Language (SQL), although ADO doesn't require any particular query language.<br><br></li>
<li>
<i>parent-column</i>—A column in the <b>Recordset</b> returned by the <i>parent-command.</i><br><br></li>
<li>
<i>child-column—</i>A column in the <b>Recordset</b> returned by the <i>child-command</i>.<br><br></li>
<li>
<i>table-alias</i>—An alias used to refer to the <b>Recordset</b> returned by the <i>parent-command.</i></li>
</ul>
<p class=label>
<b>Operation</b></p>
<p>
The Client Cursor Engine will issue the <i>parent-command</i> to the provider, which will return a parent <b>Recordset</b>. Then the <i>child-command</i> will be issued, which will return a child <b>Recordset</b>. </p>
<p>
For example, the <i>parent-command</i> could return a <b>Recordset</b> of customers for a company from a Customers database, and the <i>child-command</i> could return a Recordset of orders for all customers from an Orders database.</p>
<p>
The parent and child <b>Recordset</b> objects must have a column in common. The columns are named in the <b>RELATE</b> clause, <i>parent-column</i> first, then <i>child-column</i>. The columns may have different names in their respective <b>Recordset</b> objects, but must refer to the same information in order to specify a meaningful relation. </p>
<p>
For example, the Customers and Orders recordsets could have CustomerID and BuyerID fields in common.</p>
<p>
The Client Cursor Engine internally creates a new column and literally appends it to the parent <b>Recordset</b>. The values of the fields in the new column are references to rows in the child recordset which satisfy the <b>RELATE</b> clause. </p>
<p>
The appended column will be automatically named "chapter" and be of data type <b>adChapter</b>. If you wish to navigate through the child <b>Recordset</b>, specify the appended column in the <b>Recordset</b> object <b>Fields</b> collection and retrieve the <b>Recordset</b> from the <b>Field</b> object <b>Value</b> property. Assign the retrieved <b>Recordset</b> to an empty <b>Recordset</b> object, then navigate through that <b>Recordset</b> as you would any other.</p>
<p class=label>
<b>Parameterized Commands</b></p>
<p>
<b>Shape</b> commands may be parameterized. For example, you can specify the following:</p>
<pre><code>"SHAPE {SELECT * FROM customer} 
APPEND {SELECT * FROM orders WHERE cust_id = ?} 
RELATE (cust_id TO PARAMETER 0)"
</code></pre>
<p>
In this case, parent and child tables happen to have a column name in common, <i>cust_id. </i>The <i>child-command</i> has a placeholder (that is, "<b>?</b>"), to which the <b>RELATE</b> clause refers (that is, "...PARAMETER 0". In effect, the relation is between the explicitly identified <i>parent-column,</i> and the <i>child-column</i> implicitly identified by the placeholder).</p>
<p>
When the Shape command is executed, this is what happens in effect:
<ul type=disc>
<li>
An empty column is appended to the parent <b>Recordset</b>. <br><br></li>
<li>
The <i>parent-command</i> is executed and returns a row from the <b>customer</b> table. <br><br></li>
<li>
The value of the <b>customer.cust_id</b> column replaces the placeholder and the <i>child-command</i> is executed. <br><br></li>
<li>
All the rows from the <b>orders</b> table where the <b>orders.cust_id</b> column matches the <b>customer.cust_id</b> column are retrieved. <br><br></li>
<li>
A reference to the retrieved child rows is placed in the current row of the column appended to the parent <b>Recordset</b>. <br><br></li>
<li>
Then the next parent row is retrieved from the <b>customer</b> table and the cycle repeats until all rows are retrieved.</li>
</ul>
</font></BODY>
</HTML>

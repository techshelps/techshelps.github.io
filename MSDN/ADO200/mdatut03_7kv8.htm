<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 3: Execute the Command (ADO Tutorial)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="mdhowexecutecommand"></a>Step 3: Execute the Command (ADO Tutorial)</h3>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowExecuteCommand_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowExecuteCommand_S">
</object></p>
<p class=label>
<b>You are Here...</b>
<ul type=disc>
<li>
Make a connection to a data source.<br><br></li>
<li>
Optionally, create an object to represent an SQL query<b> </b>command.<br><br></li>
<li>
Optionally, specify values in the SQL command as variable parameters.<br><br></li>
<li>
<b>Execute the command. If the command is row-returning, store the rows in a storage object.</b><br><br></li>
<li>
Optionally, navigate, examine, manipulate, and edit the data.<br><br></li>
<li>
If appropriate, update the data source with changes from the storage object. Optionally, embed the update in a transaction.<br><br></li>
<li>
If a transaction was used, accept or reject the changes made during the transaction. End the transaction.</li>
</ul>
<p class=label>
<b>Discussion</b></p>
<p>
The three methods that return a <b>Recordset</b> are <b>Connection.Execute</b>, <b>Command</b>.<b>Execute</b>, and <b>Recordset</b>.<b>Open</b>. This is their syntax in <b>Visual Basic</b>:</p>
<pre><code>connection.<span class=cfe><b>Execute</b></span>(<i>CommandText</i>, <i>RecordsAffected</i>, <i>Options</i>)
command.<span class=cfe><b>Execute</b></span>(<i>RecordsAffected</i>, <i>Parameters</i>, <i>Options</i>)
recordset.<span class=cfe><b>Open</b></span> <i>Source</i>, <i>ActiveConnection</i>, <i>CursorType</i>, <i>LockType</i>, <i>Options</i>
</code></pre>
<p>
These methods are optimized to take advantage of the strengths of their particular objects.</p>
<p>
Before you issue a command, you must open a connection. Each method that issues a command represents the connection differently: 
<ul type=disc>
<li>
The <b>Connection.Execute</b> method uses the connection embodied by the <b>Connection</b> object itself. <br><br></li>
<li>
The <b>Command.Execute</b> method uses the <b>Connection</b> object set in its <b>ActiveConnection</b> property. <br><br></li>
<li>
The <b>Recordset.Open</b> method specifies either a connect string or <b>Connection</b> object operand, or uses the <b>Connection</b> object set in its <b>ActiveConnection</b> property.</li>
</ul>
<p>
Another difference is the way the command is specified in the three methods: 
<ul type=disc>
<li>
In the <b>Connection.Execute</b> method, the command is a string. <br><br></li>
<li>
In the <b>Command.Execute</b> method, the command isn't visible—it's specified in the <b>Command.CommandText</b> property. Furthermore, the command can contain parameter symbols (‘<b>?</b>’) which will be replaced by the corresponding parameter in the <i>Parameters</i> VARIANT array argument. <br><br></li>
<li>
In the <b>Recordset.Open</b> method, the command is the <i>Source</i> argument, which can be a string or a <b>Command</b> object.</li>
</ul>
<p>
Each method trades off functionality versus performance: 
<ul type=disc>
<li>
The <b>Execute</b> methods are intended for—but are not limited to—executing commands that don't return data.<br><br></li>
<li>
Both <b>Execute</b> methods return fast but read-only, forward-only <b>Recordset</b> objects. <br><br></li>
<li>
The <b>Command.Execute</b> method allows you to use parameterized commands that can be reused efficiently. <br><br></li>
<li>
On the other hand, the <b>Open</b> method allows you to specify the <b>CursorType</b><i> </i>(strategy and object used to access the data); and <b>LockType</b> (specify the degree of<b><i> isolation</i></b> from other users, and whether the cursor should support updates in <b><i>immediate</i></b> or <b><i>batch</i></b> <b><i>modes</i></b>). <br><br></li>
<li>
We advise you to study these options; they embody much of the functionality of a <a href="mdaobj01_2zdv.htm">Recordset</a>.&nbsp; </li>
</ul>
<p>
This tutorial uses a dynamic cursor to batch any changes to the <b>Recordset</b>. For this reason, use the following:</p>
<pre><code>Recordset rs = New ADODB.Recordset
rs.<span class=cfe><b>Open</b></span> cmd, conn, adOpenDymanic, adLockBatchOptimistic
</code></pre>
<p>
<B><b>Next&nbsp;&nbsp;&nbsp;</b></B><a href="mdatut03_9gm9.htm">Step 4</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADO Event Instantiation by Language</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmscadoeventinstantiation"></a>ADO Event Instantiation by Language</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscADOEventInstantiation_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscADOEventInstantiation_S">
</object></p>
<p>
Each programming language creates instances of ADO events differently. All the examples that follow create a <b>ConnectComplete</b> event handler.</p>
<p class=label>
<b>Visual Basic</b></p>
<pre><code>Dim WithEvent connEvent as Connection
Dim conn as New Connection
set connEvent = conn      'Turn on event support.
conn.Open(...)
...
set connEvent = Nothing   'Turn off event support.
...
Private Sub connEvent_ConnectComplete(ByVal err as ADODB.Error, adStatus as ADODB.EventStatus, ByVal pConnectionas ADODB.Connection)
'Check the error object only if adStatus equals adStatusErrorsOccurred.
...
End Sub
</code></pre>
<p class=label>
<b>Visual C++</b></p>
<p>
This is a schematic description of how to instantiate ADO events in VC++.</p>
<p>
Create classes derived from the <b>ConnectionEventsVt</b> and <b>RecordsetEventsVt</b> interfaces found in file adoint.h. </p>
<pre><code>class CConnEvent : public ConnectionEventsVt
{
   public:
   STDMETHODIMP InfoMessage( 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADOError *pError,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventStatusEnum *adStatus,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _ADOConnection *pConnection);
...
}

class CRstEvent : public RecordsetEventsVt 
{
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; STDMETHODIMP WillChangeField( 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LONG cFields,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VARIANT Fields,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventStatusEnum *adStatus,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _ADORecordset *pRecordset);
...
}
</code></pre>
<p>
Implement each of the event handler methods in both classes. It's sufficient that each method merely return an HRESULT of S_OK. However, when you make it known that your event handlers are available, they will be called continuously by default. Instead, you may want to request no further notification after the first time by setting <b>adStatus</b> to <b>adStatusUnwantedEvent</b>.</p>
<pre><code>STDMETHODIMP CConnEvent::ConnectComplete(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADOError *pError,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventStatusEnum *adStatus,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _ADOConnection *pConnection) 
      {
      *adStatus = adStatusUnwantedEvent;
      return S_OK;
      }
</code></pre>
<p>
The event classes inherit from <b>IUnknown</b>, so you must also implement the <b>QueryInterface</b>, <b>AddRef</b> and <b>Release</b> methods. Also implement class constructors and destructors. Choose the VC++ tools with which you are most comfortable that will simplify this part of the task.</p>
<p>
Make it known that your event handlers are available by issuing <b>QueryInterface</b> on the <b>Recordset</b> and <b>Connection</b> objects for the <b>IConnectionPointContainer</b> and <b>IConnectionPoint</b> interfaces. Then issue <b>IConnectionPoint::Advise</b> for each class.</p>
<p>
For example, assume you're in a Boolean function that returns True if it successfully informs a <b>Recordset</b> object that you have event handlers available.</p>
<pre><code>HRESULT   hr;
DWORD      dwEvtClass;
IConnectionPointContainer   *pCPC = NULL;
IConnectionPoint            *pCP = NULL;
CRstEvent                  *pRStEvent = NULL;
...
_RecordsetPtr    pRs();
pRs.CreateInstance(__uuidof(Recordset));
pRStEvent = New CRstEvent();
if (pRStEvent == NULL) return FALSE;
...
hr = pRs-&gt;QueryInterface(IID_IConnectionPointContainer, &amp;pCPC);
if (FAILED(hr)) return FALSE;
hr = pCPC-&gt;FindConnectionPoint(IID_ADORecordsetEvents, &amp;pCP);
pCPC-&gt;Release();   // Always Release now, even before checking.
if (FAILED(hr)) return FALSE;
hr = pCP-&gt;Advise(pRstEvent, &amp;dwEvtClass);   //Turn on event support.
pCP-&gt;Release();
if (FAILED(hr)) return FALSE;
...
return TRUE;
...
</code></pre>
<p>
At this point, events for the <b>RecordsetEvent</b> family are turned on and your methods will be called as <b>Recordset</b> events occur. </p>
<p>
Later, when you want to make your event handlers unavailable, get the connection point again and issue the <b>IConnectionPoint::UnAdvise</b> method.</p>
<pre><code>...
hr = pCP-&gt;UnAdvise(dwEvtClass);   //Turn off event support.
pCP-&gt;Release();
if (FAILED(hr)) return FALSE;
...
</code></pre>
<p>
Of course, you must release interfaces and destroy class objects as appropriate .</p>
<p class=label>
<b>Visual J++</b></p>
<pre><code>import wfc.data.*;
public class MyClass
{
ConnectionEventHandler handler = 
   new ConnectionEventHandler(this,"onConnectComplete");

public void onConnectComplete(Object sender,ConnectionEvent e)
{
   if (e.adStatus == AdoEnums.EventStatus.ERRORSOCCURRED) 
      System.out.println("Connection failed");
   else
      System.out.println("Connection completed");
   return;
}

void main( void )
{
   Connection conn = new Connection();

   conn.addOnConnectComplete(handler);      // Turn on event support.
   conn.open("DSN=pubs");
   conn.close();
   conn.removeOnConnectComplete(handler);   // Turn off event support.
}
}</code></pre>
<p class=label>
<b>VBScript</b></p>
<p>
VBScript does not support events.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 5: Update the Data (ADO Tutorial)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="mdhowupdatedata"></a>Step 5: Update the Data (ADO Tutorial)</h3>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowUpdateData_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowUpdateData_S">
</object></p>
<p class=label>
<b>You are Here...</b>
<ul type=disc>
<li>
Make a connection to a data source.<br><br></li>
<li>
Optionally, create an object to represent an SQL query command.<br><br></li>
<li>
Optionally, specify values in the SQL command as variable parameters.<br><br></li>
<li>
Execute the command. If the command is row-returning, store the rows in a storage object.<br><br></li>
<li>
Optionally, navigate, examine, manipulate, and edit the data.<br><br></li>
<li>
<b>If appropriate, update the data source with changes from the storage object. Optionally, embed the update in a transaction.</b><br><br></li>
<li>
If a transaction was used, accept or reject the changes made during the transaction. End the transaction.</li>
</ul>
<p class=label>
<b>Discussion</b></p>
<p>
You've just changed the data in several rows of the <b>Recordset</b>. ADO supports two basic concepts for the addition, deletion, and modification of rows of data. </p>
<p>
The first notion is that changes aren't immediately made to the <b>Recordset</b>; instead, they are made to an internal <i>copy buffer</i>. If you decide you don't want the changes, then the modifications in the copy buffer are discarded. If decide you want to keep the changes, then the changes in the copy buffer are applied to the <b>Recordset</b>.</p>
<p>
The second notion is that changes are either propagated to the data source as soon as you declare the work on a row complete (that is, <i>immediate</i> mode) or else all the changes for a set of rows are collected until you declare that the work for the set is complete (that is, <i>batch</i> mode). These modes are governed by the <b>CursorLocation</b> and <b>LockType</b> properties.</p>
<p>
In <i>immediate</i> mode, each invocation of the <b>Update</b> method propagates the changes to the data source. In <i>batch</i> mode, each invocation of <b>Update</b> or movement of the current row position saves the changes to the <b>Recordset</b>, but only the <b>UpdateBatch</b> method propagates the changes to the data source. You opened the <b>Recordset</b> in batch mode, so you'll update in batch mode.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>There is a convenience form of <b>Update</b> in which you apply a change to a field, or an array of changes to an array of fields, then perform the update, all in one step.</p>
<p>
Optionally, you can perform your update in a <i>transaction</i>. In practice, you would use a transaction to ensure that several related operations that depended on each other either all occurred successfully, or else were all canceled. In this case, a transaction isn't really necessary.</p>
<p>
Transactions typically allocate and hold limited resources on the data source for long periods of time. For that reason it is advisable that a transaction exist for as brief a period as possible. (That's why this tutorial didn't begin the transaction as soon as you made a connection.)</p>
<p>
For the tutorial, bracket your batch update in a transaction: </p>
<pre><code>conn.BeginTrans
rs.UpdateBatch
...</code></pre>
<p>
<B><b>Next&nbsp;&nbsp;&nbsp;</b></B><a href="mdatut03_1mxx.htm">Step 6</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ADO Programming Model in Detail</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdmsctheadoprogrammingmodelindetail"></a>The ADO Programming Model in Detail</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheADOProgrammingModelInDetail_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheADOProgrammingModelInDetail_S">
</object></p>
<p>
The following elements are key parts of the ADO programming model:
<ul type=disc>
<li>
Connection<br><br></li>
<li>
Command<br><br></li>
<li>
Parameter<br><br></li>
<li>
Recordset<br><br></li>
<li>
Field<br><br></li>
<li>
Error<br><br></li>
<li>
Property<br><br></li>
<li>
<i>Collection</i><br><br></li>
<li>
<i>Event</i></li>
</ul>
<p class=label>
<b>Connection</b></p>
<p>
Access from your application to a data source is through a <i>connection</i>, the environment necessary for exchanging data. Your application can gain access to a data source directly (sometimes called a two-tier system), or indirectly (sometimes called a three-tier system) through an intermediary like the Microsoft<sup>®</sup> Internet Information Server. </p>
<p>
The object model embodies the concept of a connection with the <a href="mdaobj01_95wu.htm">Connection</a> object.</p>
<p>
A <i>transaction </i>delimits the beginning and end of a series of data access operations that transpire across a connection. ADO ensures that changes to a data source resulting from operations in a transaction either all occur successfully, or not at all. </p>
<p>
If you cancel the transaction or one of its operations fails, then the ultimate result will be as if none of the operations in the transaction had occurred. The data source will be as it was before the transaction began.</p>
<p>
The object model does not explicitly embody the concept of a transaction<i>,</i> but represents it with a set of <b>Connection</b> object methods.</p>
<p>
ADO accesses data and services from OLE DB <a href="mdaprv01_99m7.htm">providers</a>. The <b>Connection</b> object is used to specify a particular provider and any parameters. For example, Remote Data Service (RDS) can be invoked explicitly or it can be invoked implicitly with the "MS Remote" provider. (Please see the <a href="mdatut04_2n8s.htm">RDS Tutorial</a> for an example of invoking RDS via the "MS Remote" provider in step 2.)</p>
<p class=label>
<b>Command</b></p>
<p>
A <i>command</i> issued across an established connection manipulates the data source in some way. Typically the command adds, deletes, or updates data in the data source, or retrieves data in the form of rows in a table.</p>
<p>
The object model embodies the concept of a command with the <a href="mdaobj01_9mn8.htm">Command</a> object. The existence of a <b>Command</b> object gives ADO the opportunity to optimize the execution of the command.</p>
<p class=label>
<b>Parameter</b></p>
<p>
Often, commands require variable parts, <i>parameters,</i> that can be altered before you issue the command. For example, you could issue the same data retrieval command repeatedly, but each time vary your specification of the information to be retrieved. </p>
<p>
Parameters are especially useful for executing commands that behave like functions. In this case you know what the command does, but not necessarily how it works. For example, you issue a bank transfer command that debits one account and credits another. You specify the amount of money to be transferred as a parameter.</p>
<p>
The object model embodies the concept of a parameter with the <a href="mdaobj01_5fsi.htm">Parameter</a> object. </p>
<p class=label>
<b>Recordset</b></p>
<p>
If your command is a query that returns data as rows of information in a table (that is, it is a row-returning query), then those rows are placed in local storage. </p>
<p>
The object model embodies this storage as a <a href="mdaobj01_2zdv.htm">Recordset</a> object. However, there is no object that represents a single row of a <b>Recordset</b>.</p>
<p>
The <b>Recordset</b> is the primary means of examining and modifying data in the rows. The <b>Recordset</b> object allows you to:
<ul type=disc>
<li>
Specify which rows are available for examination.<br><br></li>
<li>
Traverse the rows.<br><br></li>
<li>
Specify the order in which the rows may be traversed.<br><br></li>
<li>
Add, change, or delete rows.<br><br></li>
<li>
Update the data source with changed rows.<br><br></li>
<li>
Manage the overall state of the <b>Recordset</b>.<br><br></li>
</ul>
<p class=label>
<b>Field</b></p>
<p>
A row of a <b>Recordset</b> consists of one or more <i>fields</i>. If you envision the <b>Recordset</b> as a two-dimensional grid, the fields line up to form <i>columns</i>. Each field (column) has among its attributes a name, a data type, and a value. It is this value that contains the actual data from the data source.</p>
<p>
The object model embodies a field as a <a href="mdaobj01_2o9w.htm">Field</a> object. </p>
<p>
In order to modify data in the data source, you modify the value of <b>Field</b> objects in <b>Recordset</b> rows. Ultimately, changes to a <b>Recordset</b> are propagated to the data source. As an option, the transaction management methods on the <b>Connection</b> object can guarantee that the changes succeed or fail in unison. </p>
<p class=label>
<b>Error</b></p>
<p>
Errors can occur at any time in your application, usually as the result of not being able to establish a connection, execute a command, or perform an operation on an object in a suitable state (for example, attempting to use a <b>Recordset</b> object that has not been initialized). </p>
<p>
The object model embodies an error as an <a href="mdaobj01_4sky.htm">Error</a> object. </p>
<p>
Any given error produces one or more <b>Error</b> objects. The next error that occurs will discard the previous set of <b>Error</b> objects.</p>
<p class=label>
<b>Property</b></p>
<p>
Each ADO object has a set of unique <i>properties</i> that either describe or control the behavior of that object. </p>
<p>
There are two types of properties: built-in and dynamic. Built-in properties are part of the ADO object and are always available. Dynamic properties are added to the ADO object's <b>Properties</b> collection by the underlying data provider, and exist only while that provider is being used.</p>
<p>
The object model embodies a property as a <a href="mdaobj01_8z5l.htm">Property</a> object.</p>
<p class=label>
<b>Collection</b></p>
<p>
ADO provides <i>collections</i>, a type of object that conveniently contains other objects of a particular type. The objects in the collection can be retrieved with a collection method either by name, as a text string, or by ordinal, as an integer number. </p>
<p>
ADO provides four types of collections:
<ul type=disc>
<li>
The <b>Connection</b> object has the <a href="mdaobj02_9pwz.htm">Errors</a> collection, which contains all <b>Error</b> objects created in response to a single failure involving the data source.<br><br></li>
<li>
The <b>Command</b> object has the <a href="mdaobj02_94oj.htm">Parameters</a> collection, which contains all <b>Parameter</b> objects that apply to that <b>Command</b> object.<br><br></li>
<li>
The <b>Recordset</b> object has the <a href="mdaobj02_429f.htm">Fields</a> collection, which contains all <b>Field</b> objects that define the columns of that <b>Recordset</b> object.<br><br></li>
<li>
In addition, the <b>Connection</b>, <b>Command</b>, <b>Recordset</b>, and <b>Field</b> objects all have a <a href="mdaobj02_7noz.htm">Properties</a> collection, which contains all the <b>Property</b> objects that apply to their respective containing objects.</li>
</ul>
<p>
ADO objects possess properties where you set or retrieve values with common data types like INTEGER, CHARACTER, or BOOLEAN. However, it's useful to think of certain properties as returning values of data type "COLLECTION OBJECT." The collection object, in turn, has methods to store and retrieve other objects suitable for the collection. </p>
<p>
For example, you can think of the <b>Recordset</b> object as having a <b>Properties</b> property that returns a collection object. That collection object has methods to store and retrieve <b>Property</b> objects describing attributes of that <b>Recordset</b>.</p>
<p class=label>
<b>Events</b></p>
<p>
ADO 2.0 introduces the concept of <i>events </i>to the programming model. Events are notifications that certain operations are about to occur, or have already occurred. You can use events, in general, to efficiently orchestrate an application consisting of several asynchronous tasks. </p>
<p>
The object model does not explicitly embody events<i>,</i> but represents them as calls to <a href="mdevents_2sqh.htm">event handler</a> routines.</p>
<p>
Event handlers called before the operation starts offer you the opportunity to examine or modify the operation parameters, then either cancel or allow the operation to complete.</p>
<p>
Event handlers called after an operation completes notify you at the completion of an asynchronous operation. ADO 2.0 introduces several operations that have been enhanced to optionally execute asynchronously. For example, an application that starts an asynchronous <b>Recordset.Open</b> operation is notified by an execution complete event when the operation concludes.</p>
<p>
There are two families of events:
<ul type=disc>
<li>
<b>ConnectionEvents</b>Events are issued when transactions on a connection begin, are committed, or rolled back; when <b>Commands</b> execute; and when <b>Connections</b> start or end.<br><br></li>
<li>
<b>RecordsetEvents</b>Events are issued to report the progress of data retrieval; when you navigate through the rows of a <b>Recordset</b> object; when you change a field in a row of a recordset, change a row in a recordset, or make any change in the entire recordset.</li>
</ul>
<p>
<B><b>Next </b></B> <a href="mdoverview_696b.htm">ADO Programming Model with Objects</a>.</p>
</font></BODY>
</HTML>

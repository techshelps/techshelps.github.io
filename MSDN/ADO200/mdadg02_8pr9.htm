<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Code to Pass Recordset Objects with a Custom ActiveX DLL</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdhowcode"></a>Writing Code to Pass Recordset Objects with a Custom ActiveX DLL</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowCode_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowCode_S">
</object></p>
<p>
The following client Microsoft<sup>® </sup>Visual Basic<sup>®</sup>, Scripting Edition code performs the same action as the <a href="mdadg02_1duu.htm">previous RDSServer.DataFactory code</a>, except that it uses a custom business object. You still use the <a href="mdaobj01_3m79.htm">RDS.DataSpace</a> object on the client to create an instance of the business object (in this case, MyCustomBusinessObject) on the server.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;!-- RDS.DataControl --&gt;
&lt;OBJECT classid="clsid:BD96C556-65A3-11D0-983A-00C04FC29E33" ID=ADC1&gt;
&lt;/OBJECT&gt;
&lt;!-- RDS.DataSpace --&gt;
&lt;OBJECT ID="ADS1" WIDTH=1 HEIGHT=1
  CLASSID="CLSID:BD96C556-65A3-11D0-983A-00C04FC29E36"&gt;
&lt;/OBJECT&gt;
.
.
.
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Option Explicit
Sub GetRecords()
  Dim objMyCustomBusinessObject, myRS
  Set objMyCustomBusinessObject = _
  ADS1.<span class=cfe><b>CreateObject</b></span>("MyCustomBusinessObject", _
  "http://&lt;%=Request.ServerVariables("SERVER_NAME")%&gt;")
  ' Assume MyCustomBusinessObject has a method called
  ' GetData that takes connection string and SQL 
  ' parameters.
  Set myRS = _
  objCustomBusinessObject.<span class=cfe><b>GetData _</b></span>
<span class=cfe><b>  </b></span>("DSN=pubs;UID=sa;PWD=permission;", _
  "Select * From Authors")
  ' Assign the returned recordset to SourceRecordset.
  ADC1.SourceRecordset = myRS
End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
Assuming you use Visual Basic to create the MyCustomBusinessObject ActiveX DLL that is located on the middle tier, the code in the <b>GetData</b> method of the MyCustomBusinessObject class could look something like this. Notice that you can use ActiveX<sup>®</sup> Data Objects (ADO) directly.</p>
<pre><code>' Returns an ADO resultset.
Public Function GetData(szCnStr As String, szSQL _
  As String) As Object

  Dim cn As New ADODB.Connection
  Dim rs As New ADODB.Recordset

  cn.Open szCnStr
  ' The ADODB.Recordset should generate Recordset 
  ' objects that can be disconnected and later 
  ' reconnected to process batch updates.
  rs.<span class=cfe><b>CursorLocation</b></span> = <span class=cfe><b>adUseClientBatch</b></span>
  ' Using the Unspecified parameters, an ADO/R
  ' recordset is returned.
  rs.Open szSQL, cn, _
  adOpenUnspecified, adLockUnspecified, _
  adCmdUnspecified
  Set GetData = rs
End Function
</code></pre>
<p class=label>
<b>Tips </b>
<ul type=disc>
<li>
Always place one simple method in your server component to test for minimum functionality before attempting to pass <b>Recordset</b> objects back.<br><br></li>
<li>
Build a simple client application to test your server component before deploying and testing it with Internet Explorer. <br><br></li>
<li>
It is easier to develop your application on a local test Web server. You will need to copy and register the .dll on the test server after each compile.<br><br></li>
<li>
The DSN passed to your business object will need to be a System DSN on your server. If it doesn't exist or is set up improperly, your component will fail. It is a good idea to test the DSN on the server with another ODBC application such as MSQuery to make sure the DSN is set up properly.<br><br></li>
<li>
Method names on custom <a href="mdadef01_7qyc.htm">business objects</a> cannot exceed 255 characters. This allows compatibility across all RDS-supported protocols (HTTP, HTTPS, DCOM, and running in-process).<br><br></li>
<li>
If you used Visual Basic to create a custom business object that uses early binding with the ADOR 1.0 type library, you should rebuild your custom business object to use the ADOR 2.0 type library.</li>
</ul>
</font></BODY>
</HTML>

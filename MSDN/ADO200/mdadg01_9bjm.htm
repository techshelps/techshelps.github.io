<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Transaction Server Resource Dispensers</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="mdhowdispenser"></a>Microsoft Transaction Server Resource Dispensers</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowDispenser_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowDispenser_S">
</object></p>
<p>
In a three-tiered environment, clients can share database connections if you use Microsoft Transaction Server on the middle tier. You can use the <a href="mdaobj01_05bt.htm">RDSServer.DataFactory</a> object or create an ActiveX component DLL that can set up ODBC connections for clients to share. The sharing mechanism comes into play when you run the <b>RDSServer.DataFactory</b> or custom business object in the Transaction Server run-time environment. Instead of using thousands of database connections, you could get away with hundreds, still supporting thousands of clients. This is a feature of the ODBC resource dispenser in Microsoft Transaction Server.</p>
<p class=label>
<b>Running Business Objects in Microsoft Transaction Server</b></p>
<p>
Business objects can be executable files (.exe) or dynamic-link libraries (.dll). The configuration you use to run the business object depends on whether the object is a .dll or .exe file:
<ul type=disc>
<li>
Business objects created as .exe files can be called through <a href="mdadef01_2jsd.htm">DCOM</a>. If these business objects are used through Internet Information Server (IIS), they are subject to additional <a href="mdadef01_423w.htm">marshaling</a> of data, which will slow client performance.<br><br></li>
<li>
Business objects created as .dll files can be used via IIS (and therefore HTTP), and over DCOM only via <a href="mdadef01_6qeq.htm">Microsoft Transaction Server</a>. Business object DLLs will need to be registered on the IIS computer to give you accessibility via IIS. The <a href="mdaobj01_05bt.htm">RDSServer.DataFactory</a> object is a DLL that is the default business object provided by Remote Data Service, and it is also subject to the conditions in this section. (For steps on how to configure a DLL to run on DCOM, see the next section, "<a href="mdconfig_9m2b.htm">Enabling a DLL to Run on DCOM</a>.")</li>
</ul>
<p>
By running the <b>RDSServer.DataFactory</b> object or your custom business object in the MTS run-time environment, you can also boost your performance and scalability by using the MTS resource dispenser. Because these business objects call ADO, which indirectly calls ODBC, you can take advantage of the MTS ODBC resource dispenser. </p>
<p>
Resource dispensers automatically pool and recycle resources. Therefore, when <b>RDSServer.DataFactory</b> or your custom business object releases a database connection, the connection is returned to a pool. When a method is called to create a connection again, it requests the same database connection. Instead of creating a new connection, the ODBC resource dispenser recycles the pooled connection, which saves time and server resources.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>When business objects on the middle tier are implemented as Microsoft Transaction Server components (using <b>GetObjectContext</b>, <b>SetComplete</b>, and <b>SetAbort</b>), they can use Transaction Server context objects to maintain their state across multiple client calls. This scenario is possible with DCOM, which is typically implemented between trusted clients and servers (an intranet). In this case, the <b>RDS.DataSpace</b> object and <b>CreateObject</b> method on the client side are replaced by the transaction context object and <b>CreateInstance</b> method (provided by the <b>ITransactionContext </b>interface), implemented by Microsoft Transaction Server.</p>
</font></BODY>
</HTML>

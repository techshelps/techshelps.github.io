<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Int 21h Function 440Dh Minor Code 6Dh (FAT32)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="funcs_0000000101001300"></a>Int 21h Function 440Dh Minor Code 6Dh (FAT32) </h1>
<p>
[Windows 95 only.]</p>
<p>
Enumerates open files on the specified drive. </p>
<pre><code>mov ax, 440Dh           ; generic IOCTL
mov bx, DriveNum        ; see below
mov ch, DeviceCat       ; see below
mov cl, 6Dh             ; Enumerate Open Files  
mov dx, seg PathBuf     ; see below
mov ds, dx
mov dx, offset PathBuf
mov si, FileIndex       ; see below
mov di, EnumType        ; see below
int 21h

jc  error
mov [OpenMode], ax      ; mode file was opened in
mov [FileType], cx      ; normal file or memory-mapped file
</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>DriveNum</i> </dt>
<dd>
Drive on which to enumerate the files. This parameter can be 0 for the default drive, 1 for A, 2 for B, and so on. </dd>
<dt>
<i>DeviceCat</i> </dt>
<dd>
Specifies a FAT16, FAT12 or FAT32 drive. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=43%>08h </td>
<td width=57%>FAT32, FAT16, or FAT12 drive. </td>
</tr>
<tr valign=top>
<td width=43%>48h </td>
<td width=57%>FAT32, FAT16, or FAT12 drive. This value is supported on Windows 95 OEM Service Release 2 and later. </td>
</tr>
</table><br>


<p>
<b>Note:</b> Because this call may be implemented in the device driver, the 48h form of this call may fail on FAT16 or FAT12 media. Therefore, applications making the 48h form of this call must fall back on the 08h form if the 48h call fails. 
</dd>
<dt>
<i>PathBuf</i> </dt>
<dd>
Address of a buffer that receives the path of the open file. The length of the buffer varies depending on the volume. Get Volume Information (<b>Interrupt 21h Function 71A0h</b>) is used to determine the maximum allowed length of a path for the volume. </dd>
<dt>
<i>FileIndex</i> </dt>
<dd>
Index of the file to retrieve the path for. </dd>
<dt>
<i>EnumType</i> </dt>
<dd>
Kind of file to enumerate. This parameter can be 0 to enumerate all open files or 1 to enumerate only open unmovable files, including open memory-mapped files and other open unmovable files (32-bit Windows-based DLLs and executables). </dd>
</dl>
<h4>Return Values</h4>
<p>
Clears the carry flag, copies the path of an open file to the given buffer, and sets the AX and CX registers to the following values if successful: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=10%>AX </td>
<td width=90%>Mode that the file was opened in, which is a combination of access mode, sharing mode, and open flags. It can be one value each from the access and sharing modes and any combination of open flags. </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><b>Access modes</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_ACCESS_READONLY (0000h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_ACCESS_WRITEONLY (0001h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_ACCESS_READWRITE (0002h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_ACCESS_RO_NOMODLASTACCESS (0004h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><b>Share modes</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_SHARE_COMPATIBLE (0000h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_SHARE_DENYREADWRITE (0010h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_SHARE_DENYWRITE (0020h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_SHARE_DENYREAD (0030h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_SHARE_DENYNONE (0040h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><b>Open flags</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_NOINHERIT (0080h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_NO_BUFFERING (0100h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_NO_COMPRESS (0200h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_ALIAS_HINT (0400h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_NOCRITERR (2000h) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>OPEN_FLAGS_COMMIT (4000h) </td>
</tr>
<tr valign=top>
<td width=10%>CX </td>
<td width=90%>File type. It can be one of the following values: </td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=11%>0 </td>
<td width=89%>For normal files </td>
</tr>
<tr valign=top>
<td width=11%>1 </td>
<td width=89%>For a memory-mapped files (memory-mapped files are unmovable) </td>
</tr>
<tr valign=top>
<td width=11%>2 </td>
<td width=89%>For any other unmovable files (32-bit Windows-based DLLs and executables) </td>
</tr>
<tr valign=top>
<td width=11%>4 </td>
<td width=89%>For the swap file </td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=10%></td>
<td width=90%></td>
</tr>
</table><br>
<p>
Note that if a memory-mapped file is returned (CX = 1), the value returned in the AX register is limited to the following values: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=20%></td>
<td width=80%>OPEN_ACCESS_READONLY (0000h) </td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=80%>OPEN_ACCESS_READWRITE (0002h) </td>
</tr>
</table><br>
<p>
Otherwise, the function sets the carry flag and sets the AX register to the following error value: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>ERROR_ACCESS_DENIED </td>
<td width=59%>The value of FileIndex exceeds the number of open files on the drive. </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This function returns information about one file at a time. To enumerate all open files, the function must be called repeatedly with FileIndex set to a new value for each call. FileIndex should be set to zero initially and then incremented by one for each subsequent call. The function returns the ERROR_NO_MORE_FILES error value when all open files on the volume have been enumerated. </p>
<p>
This function may return inconsistent results when used to enumerate files on an active volume 3/4 that is, on a volume where other processes may be opening and closing files. Applications should use Lock Logical Volume (Interrupt 21h Function 440Dh Minor Code 4Ah) to take a level 3 lock before enumerating open files. </p>
<p>&nbsp;</p></body>
</HTML>

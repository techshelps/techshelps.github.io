<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Int 21h Function 7305h Ext_ABSDiskReadWrite (FAT32)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="funcs_0000000101002100"></a>Int 21h Function 7305h Ext_ABSDiskReadWrite (FAT32) </h1>
<p>
[Windows 95 only.]</p>
<p>
Allows absolute disk read/write to FAT32, FAT16, and FAT12 drives. This call replaces Int 25h/26h.</p>
<pre><code>mov  si, 6001h          ;write normal file data. SI=0 for read
                        ;see "In Write Mode" below for more write values

mov  cx, -1             ;cx must be -1
mov  dx, seg Buffer     
mov  ds, dx
mov  bx, offset Buffer  ;See below
mov  dl, DriveNum       ;See below

mov  ax, 7305h          ;Ext_ABSDiskReadWrite
int 21h

jc  error_handler       ;carry set means error
</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Buffer</i> </dt>
<dd>
Points to a DISKIO structure that contains the starting sector, the sector count and an address of the buffer to receive the data. The structure must be initialized according to Int 25h/26h documentation. The DISKIO structure has the following form: 
<pre><code>DISKIO  STRUC
    diStartSector   dd  ?   ;sector number to start
    diSectors       dw  ?   ;number of sectors
    diBuffer        dd  ?   ;address of buffer
DISKIO  ENDS
</code></pre>
</dd>
<dt>
<i>DriveNum</i> </dt>
<dd>
The 1-based drive number (0=default; 1=A, 2=B, and so on). </dd>
<dt>
<b>This function operates the same as Int 25h/26h, with the following exceptions:</b> </dt>
<dd>
CX must equal -1 (only the 32-bit starting sector number form is allowed). 
<p>
The drive number is 1-based (0 = default drive) and is specified in DL instead of AL. 

<p>
This call does not leave a flag word on the stack like Interrupts 25h and 26h. 

<p>
This call modifies only the AX register and the flags. 

<p>
Bit 0 of SI specifies whether the call is to do a READ (INT 0x25) or a WRITE (INT 0x26): 
</dd>
<dt>
<b>Read and Write Modes:</b> </dt>
<dd>

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=50%>SI bit 0 clear</td>
<td width=50%>READ </td>
</tr>
<tr valign=top>
<td width=50%>SI bit 0 set</td>
<td width=50%>WRITE </td>
</tr>
</table><br>

</dd>
<dt>
<b>In Write Mode:</b></dt>
<dd>
When bit 0 of SI is set (that is, WRITE mode), bits 13, 14 and 15 of SI categorize what type of data is being written: 
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=25%>15</th>
<th align=left width=25%>14</th>
<th align=left width=25%>13</th>
<th align=left width=25%>Description </th>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=25%>0</td>
<td width=25%>0</td>
<td width=25%>Other/Unknown. </td>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=25%>0</td>
<td width=25%>1</td>
<td width=25%>FAT data. </td>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=25%>1</td>
<td width=25%>0</td>
<td width=25%>Directory data. </td>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=25%>1</td>
<td width=25%>1</td>
<td width=25%>Normal File data. </td>
</tr>
<tr valign=top>
<td width=25%>1</td>
<td width=25%>x</td>
<td width=25%>x</td>
<td width=25%>Reserved. Bit 15 must be 0. </td>
</tr>
</table><br>


<p>
All other bits of SI (1 through 12) are reserved and must be 0. 

<p>
This provides information to apps (like compression drivers) so that they can write the data properly based upon the data type specified by the above bits. 
</dd>
<dt>
<b>Warnings:</b> </dt>
<dd>
Do not set these flags in an attempt to make a compression driver write uncompressed data onto a compressed drive. Compression drivers are not the only applications use these flags. 
<p>
Do not set the flags improperly, this information is to be used only to indicate what "type" the data is. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function is successful, clears the carry flag. Otherwise, sets the carry flag, and sets the AX register with the error code as it is documented for Int 25h/26h. </p>
<h4>Remarks</h4>
<p>
When calling this function with <b>DeviceIoControl</b>, it is recommended to set the <i>dwloControlCode</i> parameter to VWIN32_DIOC_DOS_DRIVEINFO (defined as 6 in VWIN32.H). For more information on this, see <b>Using VWIN32 to Carry Out MS-DOS Functions</b>. </p>
<p>&nbsp;</p></body>
</HTML>

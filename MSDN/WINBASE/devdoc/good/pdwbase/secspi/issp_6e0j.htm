<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stream Contexts</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_stream_contexts"></a>Stream Contexts</h3>
<p>
Stream contexts are quite different from either connection or datagram contexts. Stream contexts were introduced to handle the secure streams-oriented protocols such as SSL or PCT. </p>
<p>
In the interest of sharing the same interface, similar credential management, and so on, the Security Support Provider Interface has been extended to provide support for stream contexts. The security protocol incorporated both the authentication scheme, and the record formats. This posed a problem to the typical implementation, which required the blocking to be done by the caller.</p>
<p>
To satisfy the requirements of the stream-oriented protocols, a security package that supports stream contexts has the following characteristics:
<ol>
<li>
The package sets the SECPKG_FLAG_STREAM flag to indicate that it supports stream semantics, just as it would set a flag to indicate support for connection and datagram semantics.</li>
<li>
A transport application requests stream semantics by setting the ISC_REQ_STREAM and ASC_REQ_STREAM flags in the calls to the <b>InitializeSecurityContext</b> and <b>AcceptSecurityContext</b> functions.</li>
<li>
The application calls the <b>QueryContextAttributes</b> function with a <a href="issp_888j.htm"><b>SecPkgContext_StreamSizes</b></a> structure to query the security context for the number of buffers to provide, and the sizes to reserve for headers or trailers.</li>
<li>
The application provides buffer descriptors to spare during the actual processing of the data.</li>
</ol>
<p>
Obviously, item 4 is of the most interest. By specifying stream semantics, the caller is indicating a willingness to do extra so the security provider can handle the blocking of the messages.</p>
<p>
In essence, for the <a href="issp_2b51.htm"><b>MakeSignature</b></a> and <a href="issp_0t45.htm"><b>VerifySignature</b></a> functions, the caller passes in a list of buffers. When a message is received from a channel that is stream-oriented (such as a TCP port), the caller passes in a buffer list as follows:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Buffer</th>
<th align=left width=26%>Length</th>
<th align=left width=55%>Buffer Type</th>
</tr>
<tr valign=top>
<td width=19%>1</td>
<td width=26%>MessageLength</td>
<td class=indent1 width=55%>SECBUFFER_DATA</td>
</tr>
<tr valign=top>
<td width=19%>2</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
<tr valign=top>
<td width=19%>3</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
<tr valign=top>
<td width=19%>4</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
<tr valign=top>
<td width=19%>5</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
</table><br>
<p>
The security package then goes to work on the blob. If the function returns successfully, the buffer list looks like this:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Buffer</th>
<th align=left width=26%>Length</th>
<th align=left width=55%>Buffer Type</th>
</tr>
<tr valign=top>
<td width=19%>1</td>
<td width=26%>Header Length</td>
<td class=indent1 width=55%>SECBUFFER_STREAM_HEADER</td>
</tr>
<tr valign=top>
<td width=19%>2</td>
<td width=26%>Data Length</td>
<td class=indent1 width=55%>SECBUFFER_DATA</td>
</tr>
<tr valign=top>
<td width=19%>3</td>
<td width=26%>Trailer Length</td>
<td class=indent1 width=55%>SECBUFFER_STREAM_TRAILER</td>
</tr>
<tr valign=top>
<td width=19%>4</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
<tr valign=top>
<td width=19%>5</td>
<td width=26%>0</td>
<td class=indent1 width=55%>SECBUFFER_EMPTY</td>
</tr>
</table><br>
<p>
The provider could have also returned buffer #4 as follows:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Buffer</th>
<th align=left width=26%>Length</th>
<th align=left width=55%>Buffer Type</th>
</tr>
<tr valign=top>
<td width=19%>4</td>
<td width=26%><i>x</i></td>
<td class=indent1 width=55%>SECBUFFER_EXTRA</td>
</tr>
</table><br>
<p>
This indicates that the data in this buffer is part of the next record, and has not yet been processed. </p>
<p>
Conversely, if the message function returns the SEC_E_INCOMPLETE_MESSAGE error code, the returned buffer list would look like this:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Buffer</th>
<th align=left width=26%>Length</th>
<th align=left width=55%>Buffer Type</th>
</tr>
<tr valign=top>
<td width=19%>1</td>
<td width=26%><i>x</i></td>
<td class=indent1 width=55%>SECBUFFER_MISSING</td>
</tr>
</table><br>
<p>
This indicates that more data was needed to process the record. Unlike most errors returned from a message function, this buffer type does not indicate that the context has been compromised, just that more data is needed. Security providers must not update their state in this condition.</p>
<p>
Similarly, on the send side of the communication, the caller can simply call the <b>MakeSignature</b> function, in which case the security package may need to reallocate the buffer, copy things around, and so on. Or the caller can be more efficient by providing a buffer list as follows:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Buffer</th>
<th align=left width=26%>Length</th>
<th align=left width=55%>Type</th>
</tr>
<tr valign=top>
<td width=19%>1</td>
<td width=26%>Header Length</td>
<td class=indent1 width=55%>SECBUFFER_STREAM_HEADER</td>
</tr>
<tr valign=top>
<td width=19%>2</td>
<td width=26%>Data Length</td>
<td class=indent1 width=55%>SECBUFFER_DATA</td>
</tr>
<tr valign=top>
<td width=19%>3</td>
<td width=26%>Trailer Length</td>
<td class=indent1 width=55%>SECBUFFER_STREAM_TRAILER</td>
</tr>
</table><br>
<p>
This allows the caller to use the buffers more efficiently. By calling the <b>QueryContextAttributes</b> function to determine the amount of space to reserve before calling <b>MakeSignature</b>, the operation is more efficient for the application and the security package.</p>
<p>&nbsp;</p></body>
</HTML>

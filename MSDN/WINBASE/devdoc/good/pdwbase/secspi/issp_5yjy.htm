<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Server Authentication</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_server_authentication"></a>Server Authentication</h3>
<p>
The code in this topic describes the client and server interactions to create a security context. </p>
<p>
The example begins after the client makes its initial call to the <a href="issp_93ec.htm"><b>InitializeSecurityContext</b></a> function and sends the output to the server. The example assumes that the security buffer produced by the client's call to <b>InitializeSecurityContext</b> is in <i>InputSecurityBuffer</i>, and the length of that buffer is in <i>InputSecurityBufferSize</i>. </p>
<p>
The example begins with the server's first call to the <a href="issp_2i2c.htm"><b>AcceptSecurityContext</b></a> function.</p>
<pre><code>CtxtHandle ServerContext;
TimeStamp Expiration;
SecBufferDesc InputBufferDescriptor;
SecBuffer InputSecurityToken;
SecBufferDesc OutputBufferDescriptor;
SecBuffer OutputSecurityToken;
ULONG ContextRequirements;
ULONG ContextAttributes;

//
// Build the input buffer descriptor.
//

InputBufferDescriptor.cBuffers = 1
InputBufferDescriptor.pBuffers = &amp;InputSecurityToken;
InputBufferDescriptor.ulVersion = SECBUFFER_VERSION;

InputSecurityToken.BufferType = SECBUFFER_TOKEN;
InputSecurityToken.cbBuffer = InputSecurityBufferSize;
InputSecurityToken.pvBuffer = InputSecurityBuffer;

//
// Build the output buffer descriptor. We need to allocate a buffer
// to hold this buffer.
//

OutputBufferDescriptor.cBuffers = 1
OutputBufferDescriptor.pBuffers = &amp;OutputSecurityToken;
OutputBufferDescriptor.ulVersion = SECBUFFER_VERSION;

OutputSecurityToken.BufferType = SECBUFFER_TOKEN;
OutputSecurityToken.cbBuffer = PackageInfo-&gt;cbMaxToken;
OutputSecurityToken.pvBuffer = LocalAlloc(0, PackageInfo-&gt;cbMaxToken);

//
// Check for memory allocation failure here.
//

//
// We can pass zero for the context requirements because the buffer 
// from the client will negotiate those requirements.
//

SecStatus = AcceptSecurityContext(
      &amp;ServerCredential,
      NULL,                     // no context handle yet
      &amp;InputBufferDescriptor,
      0,                        // no context requirements
      SECURITY_NATIVE_DREP,
      &amp;ServerContext,           // receives new context handle
      &amp;OutputBufferDescriptor,  // receives output security token
      &amp;ContextAttributes,       // receives context attributes
      &amp;Expiration               // receives context expiration time
      );
 </code></pre>
<p>
If this<b> <a href="issp_2i2c.htm">AcceptSecurityContext</a></b> call is successful, it returns SEC_I_CONTINUE_NEEDED, and the server transmits the output security buffer and length back to the client. If it fails, it returns an error code.</p>
<p>
The client makes a second call to the <a href="issp_93ec.htm"><b>InitializeSecurityContext</b></a> function. The parameters are similar to the first call. The example assumes that the security buffer returned from the server is in <i>InputSecurityBuffer</i>, and the length of that buffer is in <i>InputSecurityBufferSize</i>. </p>
<pre><code>TimeStamp Expiration;
SecBufferDesc OutputBufferDescriptor;
SecBuffer OutputSecurityToken;
SecBufferDesc InputBufferDescriptor;
SecBuffer InputSecurityToken;
ULONG ContextAttributes;

//
// Build the input buffer descriptor.
//

InputBufferDescriptor.cBuffers = 1
InputBufferDescriptor.pBuffers = &amp;InputSecurityToken;
InputBufferDescriptor.ulVersion = SECBUFFER_VERSION;

InputSecurityToken.BufferType = SECBUFFER_TOKEN;
InputSecurityToken.cbBuffer = InputSecurityBufferSize;
InputSecurityToken.pvBuffer = InputSecurityBuffer;

//
// Build the output buffer descriptor.
//

OutputBufferDescriptor.cBuffers = 1
OutputBufferDescriptor.pBuffers = &amp;OutputSecurityToken;
OutputBufferDescriptor.ulVersion = SECBUFFER_VERSION;

OutputSecurityToken.BufferType = SECBUFFER_TOKEN;
OutputSecurityToken.cbBuffer = PackageInfo-&gt;cbMaxToken;
OutputSecurityToken.pvBuffer = 
        LocalAlloc(0, OutputSecurityToken.cbBuffer);

//
// Check for memory allocation failure here.
//


//
// We can ignore the pszTargetName and fContextReq parameters on this
// call, because we passed them on the first call. This time,
// instead of passing NULL for phContext, we pass the context 
// handle received on the first call. 
//

SecStatus = InitializeSecurityContext(
      &amp;ClientCredential
      &amp;ClientContext,
      NULL,                     // no target name this time
      0,                        // no context requirements
      0,                        // reserved parameter
      SECURITY_NATIVE_DREP,     // target data representation
      &amp;InputBufferDescriptor,   // input buffer
      0,                        // reserved parameter
      &amp;ClientContext,           // same as the old context
      &amp;ContextAttributes,       // receives context attributes
      &amp;OutputBufferDescriptor,  // receives output security token
      &amp;Expiration               // receives context expiration time
      );
 </code></pre>
<p>
If this<b> <a href="issp_93ec.htm">InitializeSecurityContext</a></b> call is successful, it returns SEC_E_OK, and the client transmits the output security buffer and buffer length to the server, as it did after the first call to <b>InitializeSecurityContext</b>. If it fails, it returns an error code.</p>
<p>
The client has now finished setting up the security context. The client can begin using the security context in calls to the <a href="issp_2b51.htm"><b>MakeSignature</b></a> and <a href="issp_0t45.htm"><b>VerifySignature</b></a> functions to make and verify message signatures, even though the server has not yet finished authenticating the client.</p>
<p>
The server makes the final call to <a href="issp_2i2c.htm"><b>AcceptSecurityContext</b></a>. The input buffer and buffer size are assumed to be in <i>InputSecurityBuffer</i> and <i>InputSecurityBufferSize</i>. On this call, there is no output message, so we pass NULL for the <i>pOutput</i> parameter.</p>
<pre><code>TimeStamp Expiration;
SecBufferDesc InputBufferDescriptor;
SecBuffer InputSecurityToken;
ULONG ContextAttributes;

//
// Build the input buffer descriptor.
//

InputBufferDescriptor.cBuffers = 1
InputBufferDescriptor.pBuffers = &amp;InputSecurityToken;
InputBufferDescriptor.ulVersion = SECBUFFER_VERSION;

InputSecurityToken.BufferType = SECBUFFER_TOKEN;
InputSecurityToken.cbBuffer = InputSecurityBufferSize;
InputSecurityToken.pvBuffer = InputSecurityBuffer;

//
// This time, instead of passing NULL for phContext, we pass the 
// context handle we received on the first call. 
//

SecStatus = AcceptSecurityContext(
      &amp;ServerCredential
      &amp;ServerContext,
      &amp;InputBufferDescriptor,  // input buffer
      0,                       // no context requirements.
      SECURITY_NATIVE_DREP,    // target data representation
      &amp;ServerContext,          // same as the old context
      &amp;ContextAttributes,      // receives context attributes
      NULL,                    // no output security token 
      &amp;Expiration              // receives context expiration time
      );
 </code></pre>
<p>
This <a href="issp_2i2c.htm"><b>AcceptSecurityContext</b></a> call returns SEC_E_OK if successful, or an error code if it fails. If this succeeds, the client was successfully authenticated. The server can now call the <a href="issp_4tmc.htm"><b>ImpersonateSecurityContext</b></a> function to impersonate the caller, the <a href="issp_12cz.htm"><b>QueryContextAttributes</b></a> function to obtain the caller's identity, as well as the <a href="issp_2b51.htm"><b>MakeSignature</b></a> and <a href="issp_0t45.htm"><b>VerifySignature</b></a> functions to make and verify message signatures.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Authenticating a Connection</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_authenticating_a_connection"></a>Authenticating a Connection</h3>
<p>
The client and server components of a transport application can use a security package to establish a secure connection for transmitting messages. The first step in establishing a secure connection is to create a security context, which is an opaque data structure that contains the security data relevant to a connection, such as a session key, the duration of the session, and so on. A security context is essentially a message from the security package associated with the client to the security package associated with the server. Consequently, creating a security context typically requires both client and server to make calls to their respective security packages. </p>
<p>
The client starts the creation of a security context by calling the <b>InitializeSecurityContext</b> function. Typically, this call to <b>InitializeSecurityContext</b> returns a status code indicating partial success. The client then uses a socket, serial line, or other transport, to transmit the output of this call to the server. </p>
<p>
The server calls the <b>AcceptSecurityContext</b> function, passing as input the output that it received from the client. The security package uses this input to generate the security context and authenticate the message. The <b>AcceptSecurityContext</b> function can generate a reply message that the server must send back to the client. </p>
<p>
The client receives this reply from the server, and then passes it to the security package by making another call to <b>InitializeSecurityContext</b>. Depending on the security package and the context requirements, the <b>InitializeSecurityContext</b> and <b>AcceptSecurityContext</b> calls, and the transmission of messages between the client and server, can go on repeatedly. In general, the client and server should continue to exchange messages until either the context is successfully established, or there is a definite error.</p>
<p>&nbsp;</p></body>
</HTML>

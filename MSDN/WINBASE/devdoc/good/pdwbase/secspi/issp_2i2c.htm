<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AcceptSecurityContext</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_acceptsecuritycontext"></a>AcceptSecurityContext</h1>
<p>
The <b>AcceptSecurityContext</b> function enables the server component of a transport application to establish a security context between the server and a remote client. The remote client uses the <b>InitializeSecurityContext</b> function to start the process of establishing a security context. The server may need one or more reply tokens from the remote client to complete the establishment of the security context.</p>
<pre><code><b>SECURITY_STATUS AcceptSecurityContext(
  PCredHandle</b><i> phCredential</i><b>,  </b>// handle to the credentials
<b>  PCtxtHandle</b><i> phContext</i><b>,     </b>// handle of partially formed context
<b>  PSecBufferDesc</b><i> pInput</i><b>,     </b>// pointer to the input buffers
<b>  ULONG</b><i> fContextReq</i><b>,         </b>// required context attributes
<b>  ULONG</b><i> TargetDataRep</i><b>,       </b>// data representation on the target
<b>  PCtxtHandle</b><i> phNewContext</i><b>,  </b>// receives the new context handle
<b>  PSecBufferDesc</b><i> pOutput</i><b>,    </b>// pointer to the output buffers
<b>  PULONG</b><i> pfContextAttr</i><b>,      </b>// receives the context attributes
<b>  PTimeStamp</b><i> ptsExpiry       </i>// receives the life span of the security 
                             // context
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>phCredential</i></dt>
<dd>
Handle to the server's credentials. The server calls the <b>AcquireCredentialsHandle</b> function to retrieve this handle.</dd>
<dt>
<i>phContext</i></dt>
<dd>
Pointer to a <b>CtxtHandle</b> structure. On the first call to <b>AcceptSecurityContext</b>, this pointer is NULL. On the second call, this the handle to the partially formed context that was returned in the <i>phNewContext</i> parameter by the first call.</dd>
<dt>
<i>pInput</i></dt>
<dd>
Pointer to a <a href="issp_9mar.htm"><b>SecBufferDesc</b></a> structure that contains the input buffer descriptor. Depending on the security package, this parameter may be NULL if no initial token is ready.</dd>
<dt>
<i>fContextReqs</i></dt>
<dd>
A set of bit flags that specify the attributes that the server requires for the context to be established. This value can include a combination of the following flags:
<p>
ASC_REQ_DELEGATE<br>
ASC_REQ_MUTUAL_AUTH<br>
ASC_REQ_REPLAY_DETECT<br>
ASC_REQ_SEQUENCE_DETECT<br>
ASC_REQ_CONFIDENTIALITY<br>
ASC_REQ_USE_SESSION_KEY<br>
ASC_REQ_ALLOCATE_MEMORY<br>
ASC_REQ_USE_DCE_STYLE<br>
ASC_REQ_DATAGRAM<br>
ASC_REQ_CONNECTION<br>
ASC_REQ_CALL_LEVEL<br>
ASC_REQ_EXTENDED_ERROR<br>
ASC_REQ_STREAM<br>
ASC_REQ_INTEGRITY

</dd>
<dt>
<i>TargetDataRep</i></dt>
<dd>
Indicates the data representation (byte ordering, and so on) on the target. You can specify SECURITY_NATIVE_DREP to indicate that the native format is in use.</dd>
<dt>
<i>phNewContext</i></dt>
<dd>
Pointer to a <b>CtxtHandle</b> structure. On the first call to <b>AcceptSecurityContext</b>, this pointer receives the new context handle. On the second call, this parameter can be the same as the handle specified in the <i>phContext</i> parameter.</dd>
<dt>
<i>pOutput</i></dt>
<dd>
Pointer to a <a href="issp_9mar.htm"><b>SecBufferDesc</b></a> structure that contains the output buffer descriptor. </dd>
<dt>
<i>pfContextAttributes</i></dt>
<dd>
Pointer to a variable that receives a set of bit flags indicating the attributes of the established context. For a description of the various attributes, see <a href="issp_2bcj.htm">Context Requirements</a>. This value can include any of the following flags:
<p>
ASC_RET_DELEGATE<br>
ASC_RET_MUTUAL_AUTH<br>
ASC_RET_REPLAY_DETECT<br>
ASC_RET_SEQUENCE_DETECT<br>
ASC_RET_CONFIDENTIALITY<br>
ASC_RET_USE_SESSION_KEY<br>
ASC_RET_ALLOCATED_MEMORY<br>
ASC_RET_USED_DCE_STYLE<br>
ASC_RET_DATAGRAM<br>
ASC_RET_CONNECTION<br>
ASC_RET_CALL_LEVE<br>
ASC_RET_THIRD_LEG_FAILED<br>
ASC_RET_EXTENDED_ERROR<br>
ASC_RET_STREAM<br>
ASC_RET_INTEGRITY

</dd>
<dt>
<i>ptsExpiry</i></dt>
<dd>
Pointer to a <b>PTimeStamp </b>variable that receives the expiration time of the context. The security provider should always return this value in local time. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is one of the following success codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Value</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=51%>SEC_E_OK</td>
<td width=49%>The security context was successfully established. </td>
</tr>
<tr valign=top>
<td width=51%>SEC_I_CONTINUE_NEEDED</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=51%>SEC_I_COMPLETE_NEEDED</td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=51%>SEC_I_COMPLETE_AND_CONTINUE</td>
<td width=49%></td>
</tr>
</table><br>
<p>
If the function fails, the return value is one of the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Meaning</th>
</tr>
<tr valign=top>
<td width=49%>SEC_E_INVALID_TOKEN</td>
<td width=51%>The token passed to the function is invalid.</td>
</tr>
<tr valign=top>
<td width=49%>SEC_E_INVALID_HANDLE</td>
<td width=51%>The handle passed to the function is invalid.</td>
</tr>
<tr valign=top>
<td width=49%>SEC_E_LOGON_DENIED</td>
<td width=51%>The logon failed.</td>
</tr>
<tr valign=top>
<td width=49%>SEC_E_INTERNAL_ERROR</td>
<td width=51%>The Local Security Authority cannot be contacted.</td>
</tr>
<tr valign=top>
<td width=49%>SEC_E_NO_AUTHENTICATING_AUTORITY</td>
<td width=51%>No authority could be contacted for authentication.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>AcceptSecurityContext</b> function is the server counterpart to the <a href="issp_93ec.htm"><b>InitializeSecurityContext</b></a> function.</p>
<p>
When a request comes in, the server uses the <i>fContextReq</i> parameter to specify what it requires of the session. In this fashion, a server can specify that clients must be capable of using a confidential or integrity-checked session, and it can fail clients that cannot meet that demand. As an alternative, a server can require nothing, and whatever the client can provide or requires is returned in the <i>pfContextAttr</i> parameter.</p>
<p>
For a package that supports three-leg mutual authentication, the calling sequence is as follows: 
<ul>
<li>
The client transmits a token to the server.</li>
<li>
The server calls <b>AcceptSecurityContext</b> the first time, generating a reply token. </li>
<li>
The client passes this token in a second call to <b>InitializeSecurityContext</b>, which generates a final token. </li>
<li>
The server uses this token in the final call to <b>AcceptSecurityContext</b> to complete the session.</li>
</ul>
<p>
LAN Manager and Windows NT use another authentication style. 
<ul>
<li>
The client connects to negotiate a protocol.</li>
<li>
The server calls <b>AcceptSecurityContext</b> to set up a context and generate a challenge to the client. </li>
<li>
The client calls <b>InitializeSecurityContext</b> and creates the response. </li>
<li>
The server then calls <b>AcceptSecurityContext</b> the final time to allow the security package to verify that the response is appropriate for the challenge.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="issp_93ec.htm"><b>InitializeSecurityContext</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

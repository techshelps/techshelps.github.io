<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Use and Buffers</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_memory_use_and_buffers"></a>Memory Use and Buffers</h2>
<p>
Memory is handled through a list of descriptors for the buffers being passed to the functions. Because certain protocols, such as OSF DCE, require access to the entire message, the entire message is available. For integrity of the transport application, however, the packages can be prohibited from modifying some areas of the message.</p>
<p>
The context functions use the <a href="issp_33qq.htm"><b>SecBuffer</b></a> and <a href="issp_9mar.htm"><b>SecBufferDesc</b></a> structures to pass memory buffers.</p>
<p>
The transport application or client of this interface creates an array of <b>SecBuffer</b> structures that reference the buffers the transport application will be passing in to the package. Note that the security package may indicate that it will be looking at only the security portion of a message, and the client of this interface need not provide the other sections. This can increase performance.</p>
<p>
The <a href="issp_9mar.htm"><b>SecBufferDesc</b></a> structure is a header that includes a pointer to the array of <a href="issp_33qq.htm"><b>SecBuffer</b></a> structures. This enables the client to allocate the header and buffers on the stack, as shown in the following example:</p>
<pre><code>SecBuffer        Buffers[3];
SecBufferDesc    BufferDesc;
...
BufferDesc.ulVersion = SECBUFFER_VERSION;
BufferDesc.cBuffers = 3;
BufferDesc.pBuffers = &amp;Buffers;
</code></pre>
<p>
The application can then initialize the pointers and sizes in the buffer description to indicate where things may be found:</p>
<pre><code>Buffers[0].cbBuffer = sizeof(Protocol_Header);
Buffers[0].BufferType = SECBUFFER_READONLY | SECBUFFER_DATA;
Buffers[0].pvBuffer = pHeader;

Buffers[1].cbBuffer = pHeader-&gt;MessageSize;
Buffers[1].BufferType = SECBUFFER_DATA;
Buffers[1].pvBuffer = pMessage;

Buffers[2].cbBuffer = pHeader-&gt;TrailerSize;
Buffers[2].BufferType = SECBUFFER_READONLY | SECBUFFER_TOKEN;
Buffers[2].pvBuffer = pSecurityTrailer;
</code></pre>
<p>
For a description of the different buffer types, see <a href="issp_33qq.htm"><b>SecBuffer</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

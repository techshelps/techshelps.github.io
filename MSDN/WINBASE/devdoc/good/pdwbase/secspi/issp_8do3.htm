<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Context Semantics</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_context_semantics"></a>Context Semantics</h2>
<p>
The Security Support Provider Interface model supports three types of security contexts, summarized in the following table.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=22%>Type</th>
<th align=left width=78%>Description</th>
</tr>
<tr valign=top>
<td width=22%><a href="issp_6k1f.htm">Connection</a></td>
<td width=78%>A connection-oriented context is the most common security context, and the simplest to use. The caller is responsible for the overall message format. The caller is responsible for the location of the data in the message. The caller is also responsible for the location of the security-relevant fields within a message, such as the location of the signature data. </td>
</tr>
<tr valign=top>
<td width=22%><a href="issp_5yib.htm">Datagram</a></td>
<td width=78%>A datagram-oriented context has extra support for DCE style datagram communication. It can also be used generically for a datagram-oriented transport application.</td>
</tr>
<tr valign=top>
<td width=22%><a href="issp_6e0j.htm">Stream</a></td>
<td width=78%>A stream-oriented context is responsible for the blocking and message formatting within the security package. The caller is not interested in formatting, but rather a raw stream of data.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

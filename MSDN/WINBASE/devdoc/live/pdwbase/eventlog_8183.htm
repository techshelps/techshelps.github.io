<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Files</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_message_files"></a>Message Files</h3>
<p>
Each <a href="eventlog_6jhv.htm">event sources</a> should register <i>message files</i> that contain description strings for each <a href="eventlog_8uwj.htm">event identifier</a>, <a href="eventlog_3cxf.htm">event category</a>, and <a href="eventlog_8uwj.htm#_win32_description_strings">parameter</a>. Register these files in the <b>EventMessageFile</b>, <b>CategoryMessageFile</b>, and <b>ParameterMessageFile</b> registry values for the event source. You can create one message file that contains descriptions for the event identifiers, categories, and parameters, or create three separate message files. Several applications can share the same message file. </p>
<p>
You should typically create message files as dynamic-link libraries (DLL). Use the following procedure to create these DLLs. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a message file</h5>
<ol>
<li>
Do not include exported functions in the .C file; include only a stub for the <a href="dll_8asu.htm"><b>DllMain</b></a> function. The stub should simply return TRUE. </li>
<li>
Use the following command to compile the .C file: <br>
<b>cl</b> <i>options</i> <b>-fo</b> <i>filename</i><b>.obj</b> <i>filename</i><b>.c</b>.</li>
<li>
Create an .MC file to define the message resource table. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_tools_message_compiler_source_files">
</object><a href=JavaScript:alink_1.Click()>Message Compiler Source Files</a>. </li>
<li>
Use the message compiler to create .RC and .BIN files from the .MC file. Use the following command: <b>mc</b> <i>filename</i><b>.mc</b>. </li>
<li>
Use the resource compiler to create a .RES file. Use the following command: <b>rc -r -fo</b> <i>filename</i><b>.res</b> <i>filename</i><b>.rc</b>. </li>
<li>
Use the linker to create a .DLL file. Use the following command line: <b>link -dll -out:</b><i>filename</i><b>.dll</b> <i>filename</i><b>.obj</b> <i>filename</i><b>.res</b>. </li>
</ol>
<p>
To make it easier for the application to use your message file, create a header file that lists each event. For example, suppose you have defined the following message in your .MC file: </p>
<pre><code>MessageId=0x4
Severity=Error
Facility=System
SymbolicName=MSG_CMD_DELETE
Language=English
File %1 contains %2, which is in error.
 </code></pre>
<p>
Your header file should contain the following code: </p>
<pre><code>//
// MessageId: MSG_CMD_DELETE
// MessageText:
//  File %1 contains %2, which is in error.
//
#define MSG_CMD_DELETE                     ((DWORD)0xC0000004L)
 </code></pre>
<p>
Now the event-viewing application can use the following procedure to gain access to the <a href="eventlog_8uwj.htm#_win32_description_strings">description strings</a> in the message file.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To obtain description strings</h5>
<ol>
<li>
Use the <a href="regapi_0h15.htm"><b>RegOpenKey</b></a> function to open the event source.</li>
<li>
Use the <a href="regapi_3wzc.htm"><b>RegQueryValueEx</b></a> function to obtain the <b>EventMessageFile</b> value for the event source, which is the name of the event message DLL. </li>
<li>
Use the <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a> function to load the event message DLL.</li>
<li>
Use the <a href="strings_0sdh.htm"><b>FormatMessage</b></a> function to obtain the description from the DLL and add the insertion strings. </li>
</ol>
<p>&nbsp;</p></body>
</HTML>

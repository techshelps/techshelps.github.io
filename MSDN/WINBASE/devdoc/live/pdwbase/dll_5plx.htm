<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetModuleHandle</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getmodulehandle"></a>GetModuleHandle</h1>
<p>
The <b>GetModuleHandle</b> function returns a module handle for the specified module if the file has been mapped into the address space of the calling process. </p>
<pre><code><b>HMODULE GetModuleHandle(
  LPCTSTR</b><i> lpModuleName</i>   // address of module name to return handle 
                         // for
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpModuleName</i></dt>
<dd>
Pointer to a null-terminated string that contains the name of the module (either a .DLL or .EXE file). If the filename extension is omitted, the default library extension .DLL is appended. The filename string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process. 
<p>
If this parameter is NULL, <b>GetModuleHandle</b> returns a handle to the file used to create the calling process. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the specified module.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The returned handle is not global, inheritable, or duplicative, and it cannot be used by another process. </p>
<p>
The handles returned by <b>GetModuleHandle</b> and <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> can be used in the same functions — for example, <a href="dll_0f8z.htm"><b>GetProcAddress</b></a>, <a href="dll_3cs9.htm"><b>FreeLibrary</b></a>, or <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_1.Click()><b>LoadResource</b></a>. The difference between the two functions involves the reference count. <b>LoadLibrary</b> maps the module into the address space of the calling process, if necessary, and increments the module's reference count, if it is already mapped. <b>GetModuleHandle</b>, however, returns the handle to a mapped module without incrementing its reference count. </p>
<p>
Note that the reference count is used in <b>FreeLibrary</b> to determine whether to unmap the function from the address space of the process. For this reason, use care when using a handle returned by <b>GetModuleHandle</b> in a call to <b>FreeLibrary</b> because doing so can cause a dynamic-link library (DLL) module to be unmapped prematurely. </p>
<p>
This function must also be used carefully in a multithreaded application. There is no guarantee that the module handle remains valid between the time this function returns the handle and the time it is used by another function. For example, a thread might retrieve a module handle by calling <b>GetModuleHandle.</b> Before the thread uses the handle in another function, a second thread could free the module and the system could load another module, giving it the same handle as the module that was recently freed. The first thread would then be left with a module handle that refers to a module different than the one intended. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="dll_3cs9.htm"><b>FreeLibrary</b></a>, <a href="dll_0ysl.htm"><b>GetModuleFileName</b></a>, <a href="dll_0f8z.htm"><b>GetProcAddress</b></a>, <a href="dll_1o8p.htm"><b>LoadLibrary</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_2.Click()><b>LoadResource</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

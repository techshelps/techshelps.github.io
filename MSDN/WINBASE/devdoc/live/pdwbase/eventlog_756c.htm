<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReportEvent</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_reportevent"></a>ReportEvent</h1>
<p>
The <b>ReportEvent</b> function writes an entry at the end of the specified event log. </p>
<pre><code><b>BOOL ReportEvent(
  HANDLE</b><i> hEventLog</i><b>,    </b>// handle returned by RegisterEventSource
<b>  WORD</b><i> wType</i><b>,          </b>// event type to log
<b>  WORD</b><i> wCategory</i><b>,      </b>// event category
<b>  DWORD</b><i> dwEventID</i><b>,     </b>// event identifier
<b>  PSID</b><i> lpUserSid</i><b>,      </b>// user security identifier (optional)
<b>  WORD</b><i> wNumStrings</i><b>,    </b>// number of strings to merge with message
<b>  DWORD</b><i> dwDataSize</i><b>,    </b>// size of binary data, in bytes
<b>  LPCTSTR</b><i> *lpStrings</i><b>,  </b>// array of strings to merge with message
<b>  LPVOID</b><i> lpRawData</i>     // address of binary data
);
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hEventLog</i></dt>
<dd>
Handle to the event log. This handle is returned by the <a href="eventlog_48px.htm"><b>RegisterEventSource</b></a> function. </dd>
<dt>
<i>wType</i></dt>
<dd>
Specifies the type of event being logged. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Value</th>
<th align=left width=48%>Meaning</th>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_ERROR_TYPE</td>
<td width=48%>Error event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_WARNING_TYPE</td>
<td width=48%>Warning event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_INFORMATION_TYPE</td>
<td width=48%>Information event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_AUDIT_SUCCESS</td>
<td width=48%>Success Audit event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_AUDIT_FAILURE</td>
<td width=48%>Failure Audit event</td>
</tr>
</table><br>


<p>
For more information about event types, see <a href="eventlog_50dv.htm">Event Types</a>. 
</dd>
<dt>
<i>wCategory</i></dt>
<dd>
Specifies the event category. This is source-specific information; the category can have any value. </dd>
<dt>
<i>dwEventID</i></dt>
<dd>
Specifies the event. The event identifier specifies the message that goes with this event as an entry in the message file associated with the event source. </dd>
<dt>
<i>lpUserSid</i></dt>
<dd>
Pointer to the current user's security identifier. This parameter can be NULL if the security identifier is not required. </dd>
<dt>
<i>wNumStrings</i></dt>
<dd>
Specifies the number of strings in the array pointed to by the <i>lpStrings</i> parameter. A value of zero indicates that no strings are present. </dd>
<dt>
<i>dwDataSize</i></dt>
<dd>
Specifies the number of bytes of event-specific raw (binary) data to write to the log. If this parameter is zero, no event-specific data is present. </dd>
<dt>
<i>lpStrings</i></dt>
<dd>
Pointer to a buffer containing an array of null-terminated strings that are merged into the message from the message file before Event Viewer displays the string to the user. This parameter must be a valid pointer (or NULL), even if <i>wNumStrings</i> is zero. Each string has a limit of 32K bytes. </dd>
<dt>
<i>lpRawData</i></dt>
<dd>
Pointer to the buffer containing the binary data. This parameter must be a valid pointer (or NULL), even if the <i>dwDataSize</i> parameter is zero. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero, indicating that the entry was written to the log.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
This function is used to log an event. The entry is written to the end of the configured logfile for the source identified by the <i>hEventLog</i> parameter. The <b>ReportEvent</b> function adds the time, the entry's length, and the offsets before storing the entry in the log. To enable the function to add the username, you must supply the user's SID in the <i>lpUserSid</i> parameter. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="eventlog_2tbb.htm">Event Logging Overview</a>, <a href="eventlog_622b.htm">Event Logging Functions</a>, <a href="eventlog_5xgn.htm"><b>ClearEventLog</b></a>, <a href="eventlog_2z3b.htm"><b>CloseEventLog</b></a>, <a href="eventlog_3elj.htm"><b>OpenEventLog</b></a>, <a href="eventlog_2hif.htm"><b>ReadEventLog</b></a>, <a href="eventlog_48px.htm"><b>RegisterEventSource</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

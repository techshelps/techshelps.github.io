<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DisableThreadLibraryCalls</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_disablethreadlibrarycalls"></a>DisableThreadLibraryCalls</h1>
<p>
The <b>DisableThreadLibraryCalls</b> function disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the dynamic-link library (DLL) specified by <i>hLibModule</i>. This can reduce the size of the working code set for some applications.</p>
<pre><code><b>BOOL DisableThreadLibraryCalls(
  HMODULE</b><i> hLibModule  </i>// dynamic-link library for which calls are to be disabled
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hLibModule</i></dt>
<dd>
Specifies the dynamic-link library module for which the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications are to be disabled.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. The <b>DisableThreadLibraryCalls</b> function fails if the DLL specified by <i>hLibModule</i> has active static thread local storage, or if <i>hLibModule </i>is an invalid module handle. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The <b>DisableThreadLibraryCalls</b> function lets a DLL disable the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notification calls. This can be a useful optimization for multithreaded applications that have many DLLs, frequently create and delete threads, and whose DLLs do not need these thread-level notifications of attachment/detachment. A remote procedure call (RPC) server application is an example of such an application. In these sorts of applications, DLL initialization routines often remain in memory to service DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications. By disabling the notifications, the DLL initialization code is not paged in because a thread is created or deleted, thus reducing the size of the application's working code set. To implement the optimization, modify a DLL's DLL_PROCESS_ATTACH code to call <b>DisableThreadLibraryCalls</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="dll_3wo4.htm"><b>FreeLibraryAndExitThread</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Character Sets Used in Filenames</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_character_sets_used_in_filenames"></a>Character Sets Used in Filenames</h3>
<p>
Window manager and GDI use the ANSI character set; the MS-DOS FAT file system uses the OEM character set. Applications that create MS-DOS files sometimes have to use the <a href="strings_4uul.htm"><b>CharToOem</b></a> and <a href="strings_24du.htm"><b>OemToChar</b></a> functions to translate between these character sets. However, NTFS is capable of storing filenames in Unicode; no translation is necessary with NTFS. </p>
<p>
With Unicode implementations of the file-system functions, it is not necessary to perform translations to and from ANSI and OEM character sets. Instead, you can use a single source file to compile non-Unicode versions of an application by providing macros for functions that are not invoked when compiling for Unicode, such as <b>CharToOem</b> and <b>OemToChar</b>. </p>
<p>
The special filename characters in MS-DOS are unchanged in Unicode filenames: </p>
<p>
"\," "/," ".," "?," "*." </p>
<p>
These special characters are in the ASCII range of characters (0x00 through 0x7F) and their Unicode equivalents are simply the same values in a 2-byte form: 0x0000 through 0x007F. </p>
<p>&nbsp;</p></body>
</HTML>

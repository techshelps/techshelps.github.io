<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ChangeServiceConfig</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_changeserviceconfig"></a>ChangeServiceConfig</h1>
<p>
The <b>ChangeServiceConfig</b> function changes the configuration parameters of a service. </p>
<pre><code><b>BOOL ChangeServiceConfig(
  SC_HANDLE</b><i> hService</i><b>     </b>// handle to service
<b>  DWORD</b><i> dwServiceType</i><b>,   </b>// type of service
<b>  DWORD</b><i> dwStartType</i><b>,     </b>// when to start service
<b>  DWORD</b><i> dwErrorControl</i><b>,  </b>// severity if service fails to start
<b>  LPCTSTR</b><i> lpBinaryPathName</i><b>,  </b>// pointer to service binary file name
<b>  LPCTSTR</b><i> lpLoadOrderGroup</i><b>,  </b>// pointer to load ordering group name
<b>  LPDWORD</b><i> lpdwTagId</i><b>,     </b>// pointer to variable to get tag identifier
<b>  LPCTSTR</b><i> lpDependencies</i><b>,    </b>// pointer to array of dependency names
<b>  LPCTSTR</b><i> lpServiceStartName</i><b>,</b>
<b>                             </b>// pointer to account name of service
<b>  LPCTSTR</b><i> lpPassword</i><b>,   </b>// pointer to password for service account
<b>  LPCTSTR</b><i> lpDisplayName</i>      // pointer to display name
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hService</i></dt>
<dd>
Handle to the service. This handle is returned by the <a href="services_8isl.htm"><b>OpenService</b></a> or <a href="services_3p9h.htm"><b>CreateService</b></a> function and must have SERVICE_CHANGE_CONFIG access. </dd>
<dt>
<i>dwServiceType</i></dt>
<dd>
A set of bit flags that specify the type of service. Specify SERVICE_NO_CHANGE if you are not changing the existing service type; otherwise, specify one of the following flags to indicate the service type. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>SERVICE_WIN32_OWN_PROCESS</td>
<td width=46%>Specifies a Win32-based service that runs in its own process.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_WIN32_SHARE_PROCESS</td>
<td width=46%>Specifies a Win32-based service that shares a process with other services.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_KERNEL_DRIVER</td>
<td width=46%>Specifies a driver service.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_FILE_SYSTEM_DRIVER</td>
<td width=46%>Specifies a file system driver service.</td>
</tr>
</table><br>

</dd>
</dl>
<p>
If you specify either SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS, you can also specify the following flag. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>SERVICE_INTERACTIVE_PROCESS </td>
<td width=46%>Enables a Win32-based service process to interact with the desktop.</td>
</tr>
</table><br>
<dl>
<dt>
<i>dwStartType</i></dt>
<dd>
Specifies when to start the service. Specify SERVICE_NO_CHANGE if you are not changing the existing start type; otherwise, specify one of the following flags to indicate the start type. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Value</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_BOOT_START</th>
<td width=54%>Specifies a device driver started by the system loader. This value is valid only for driver services.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_SYSTEM_START</th>
<td width=54%>Specifies a device driver started by the <b>IoInitSystem</b> function. This value is valid only for driver services.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_AUTO_START</th>
<td width=54%>Specifies a service to be started automatically by the service control manager during system startup.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_DEMAND_START</th>
<td width=54%>Specifies a service to be started by the service control manager when a process calls the <a href="services_8ox1.htm"><b>StartService</b></a> function.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_DISABLED</th>
<td width=54%>Specifies a service that can no longer be started.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwErrorControl</i></dt>
<dd>
Specifies the severity of the error if this service fails to start during startup, and determines the action taken by the startup program if failure occurs. Specify SERVICE_NO_CHANGE if you are not changing the existing error control; otherwise, specify one of the following flags to indicate the error control. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Value</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_IGNORE</td>
<td width=54%>The startup program logs the error but continues the startup operation.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_NORMAL</td>
<td width=54%>The startup program logs the error and puts up a message box pop-up but continues the startup operation.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_SEVERE</td>
<td width=54%>The startup program logs the error. If the last-known-good configuration is being started, the startup operation continues. Otherwise, the system is restarted with the last-known-good configuration.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_CRITICAL</td>
<td width=54%>The startup program logs the error, if possible. If the last-known-good configuration is being started, the startup operation fails. Otherwise, the system is restarted with the last-known good configuration.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpBinaryPathName</i></dt>
<dd>
Pointer to a null-terminated string that contains the fully qualified path to the service binary file. Specify NULL if you are not changing the existing path. If the path contains a space, it must be quoted so that it is correctly interpreted. For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".</dd>
<dt>
<i>lpLoadOrderGroup</i></dt>
<dd>
Pointer to a null-terminated string that names the load ordering group of which this service is a member. Specify NULL if you are not changing the existing group. Specify an empty string if the service does not belong to a group. </dd>
<dt>
<i>lpdwTagId</i></dt>
<dd>
Pointer to a <b>DWORD</b> variable that receives a tag value that is unique in the group specified in the <i>lpLoadOrderGroup</i> parameter. Specify NULL if you are not changing the existing tag. 
<p>
You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the <b>GroupOrderList</b> value of the following registry key: 

<p>
<b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control</b> 

<p>
Tags are only evaluated for driver services that have SERVICE_BOOT_START or SERVICE_SYSTEM_START start types. 
</dd>
<dt>
<i>lpDependencies</i></dt>
<dd>
Pointer to a double null-terminated array of null-separated names of services or load ordering groups that the system must start before this service can be started. (Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group.) Specify NULL if you are not changing the existing dependencies. Specify an empty string if the service has no dependencies. 
<p>
You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished from a service name, because services and service groups share the same name space. 
</dd>
<dt>
<i>lpServiceStartName</i></dt>
<dd>
Pointer to a null-terminated string that names the service. Specify NULL if you are not changing the existing name. If the service type is SERVICE_WIN32_OWN_PROCESS, use an account name in the form <i>DomainName</i>\<i>UserName</i>. The service process will be logged on as this user. If the account belongs to the built-in domain, you can specify .\<i>UserName</i>. If the service type is SERVICE_WIN32_SHARE_PROCESS you must specify the LocalSystem account. 
<p>
If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, the name is the driver object name that the system uses to load the device driver. Specify NULL if the driver is to use a default object name created by the I/O system. 
</dd>
<dt>
<i>lpPassword</i></dt>
<dd>
Pointer to a null-terminated string that contains the password to the account name specified by the <i>lpServiceStartName</i> parameter. Specify NULL if you are not changing the password. Specify an empty string if the service has no password. 
<p>
Passwords are ignored for driver services. 
</dd>
<dt>
<i>lpDisplayName</i></dt>
<dd>
Pointer to a null-terminated string that is to be used by applications to identify the service for its users. This string has a maximum length of 256 characters. The name is case-preserved in the service control manager. Display name comparisons are always case-insensitive. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Errors</h4>
<p>
The following error codes may be set by the service control manager. Other error codes may be set by the registry functions that are called by the service control manager. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=15%>Value</th>
<th align=left width=85%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_ACCESS_DENIED</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>The specified handle was not opened with SERVICE_CHANGE_CONFIG access.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_CIRCULAR_DEPENDENCY</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>A circular service dependency was specified.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_DUP_NAME</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>The display name already exists in the service controller manager database, either as a service name or as another display name.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_INVALID_HANDLE</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>The specified handle is invalid.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_INVALID_PARAMETER</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>A parameter that was specified is invalid.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_INVALID_SERVICE_ACCOUNT</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>The account name does not exist, or a service is specified to share the same binary file as an already installed service but with an account name that is not the same as the installed service.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>ERROR_SERVICE_MARKED_FOR_DELETE</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%>The service has been marked for deletion.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>ChangeServiceConfig</b> function changes the configuration information for the specified service in the service control manager database. You can obtain the current configuration information by using the <a href="services_7yjr.htm"><b>QueryServiceConfig</b></a> function. </p>
<p>
If the configuration is changed for a service that is running, with the exception of <i>lpDisplayName</i>, the changes do not take effect until the service is stopped. </p>
<p>
The startup program uses load ordering groups to load groups of services in a specified order with respect to the other groups in the list. The list of load ordering groups is contained in the <b>ServiceGroupOrder</b> value of the following registry key: </p>
<p>
<b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control</b> </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsvc.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="services_0p0z.htm">Services Overview</a>, <a href="services_2uwj.htm">Service Functions</a>, <a href="services_3p9h.htm"><b>CreateService</b></a>, <a href="services_8isl.htm"><b>OpenService</b></a>, <a href="services_7yjr.htm"><b>QueryServiceConfig</b></a>, <a href="services_8ox1.htm"><b>StartService</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

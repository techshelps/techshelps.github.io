<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WritePrivateProfileString</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_writeprivateprofilestring"></a>WritePrivateProfileString</h1>
<p>
The <b>WritePrivateProfileString</b> function copies a string into the specified section of the specified initialization file. </p>
<p>
This function is provided for compatibility with 16-bit Windows-based applications. WIn32-based applications should store initialization information in the registry. </p>
<pre><code><b>BOOL WritePrivateProfileString(
  LPCTSTR</b><i> lpAppName</i><b>,  </b>// pointer to section name
<b>  LPCTSTR</b><i> lpKeyName</i><b>,  </b>// pointer to key name
<b>  LPCTSTR</b><i> lpString</i><b>,   </b>// pointer to string to add
<b>  LPCTSTR</b><i> lpFileName</i>  // pointer to initialization filename
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpAppName</i></dt>
<dd>
Pointer to a null-terminated string containing the name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters. </dd>
<dt>
<i>lpKeyName</i></dt>
<dd>
Pointer to the null-terminated string containing the name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted. </dd>
<dt>
<i>lpString</i></dt>
<dd>
Pointer to a null-terminated string to be written to the file. If this parameter is NULL, the key pointed to by the <i>lpKeyName</i> parameter is deleted. 
<p>
<b>Windows 95:</b> The system does not support the use of the TAB (\t) character as part of this parameter.
</dd>
<dt>
<i>lpFileName</i></dt>
<dd>
Pointer to a null-terminated string that names the initialization file. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function successfully copies the string to the initialization file, the return value is nonzero.</p>
<p>
If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>Windows 95: </b>Windows 95 keeps a cached version of WIN.INI to improve performance. If all three parameters are NULL, the function flushes the cache. The function always returns FALSE after flushing the cache, regardless of whether the flush succeeds or fails.</p>
<p>
A section in the initialization file must have the following form: </p>
<pre><code><b>[</b>section<b>]</b>
key<b>=</b>string
      .
      .
      . 
 </code></pre>
<p>
If the <i>lpFileName</i> parameter does not contain a full path and filename for the file, <b>WritePrivateProfileString</b> searches the Windows directory for the file. If the file does not exist, this function creates the file in the Windows directory. </p>
<p>
If <i>lpFileName</i> contains a full path and filename and the file does not exist, <a href="regapi_1aav.htm"><b>WriteProfileString</b></a> creates the file. The specified directory must already exist. </p>
<p>
<b>Windows NT: </b>Windows NT maps most .INI file references to the registry, using the mapping defined under the following registry key:</p>
<p class=indent1>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping </b></p>
<p>
Windows NT keeps a cache for the IniFileMapping registry key. Calling <b>WritePrivateProfileStringW</b> with the value of all arguments set to NULL will cause Windows NT to refresh its cache of the IniFileMappingKey for the specified .INI file.</p>
<p>
The Win32 profile functions (<b>Get/WriteProfile*</b>, <b>Get/WritePrivateProfile*</b>) use the following steps to locate initialization information:
<ol>
<li>
Look in the registry for the name of the initialization file, say MYFILE.INI, under <b>IniFileMapping</b>: <p>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping\myfile.ini</b>
</li>
<li>
Look for the section name specified by <i>lpAppName</i>. This will be a named value under <b>myfile.ini</b>, or a subkey of <b>myfile.ini</b>, or will not exist.</li>
<li>
If the section name specified by <i>lpAppName </i>is a named value under <b>myfile.ini</b>, then that value specifies where in the registry you will find the keys for the section.</li>
<li>
If the section name specified by <i>lpAppName </i>is a subkey of <b>myfile.ini</b>, then named values under that subkey specify where in the registry you will find the keys for the section. If the key you are looking for does not exist as a named value, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) that specifies the default location in the registry where you will find the key.</li>
<li>
If the section name specified by <i>lpAppName </i>does not exist as a named value or as a subkey under <b>myfile.ini</b>, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) under <b>myfile.ini</b> that specifies the default location in the registry where you will find the keys for the section.</li>
<li>
If there is no subkey for MYFILE.INI, or if there is no entry for the section name, then look for the actual MYFILE.INI on the disk and read its contents.</li>
</ol>
<p>
When looking at values in the registry that specify other registry locations, there are several prefixes that change the behavior of the .INI file mapping:
<ul>
<li>
! - this character forces all writes to go both to the registry and to the .INI file on disk.</li>
<li>
# - this character causes the registry value to be set to the value in the Windows 3.1 .INI file when a new user logs in for the first time after setup.</li>
<li>
@ - this character prevents any reads from going to the .INI file on disk if the requested data is not found in the registry.</li>
<li>
USR: - this prefix stands for HKEY_CURRENT_USER, and the text after the prefix is relative to that key.</li>
<li>
SYS: - this prefix stands for HKEY_LOCAL_MACHINE\SOFTWARE, and the text after the prefix is relative to that key.</li>
</ul>
<p>
An application using the <b>WritePrivateProfileStringW</b> function to enter .INI file information into the registry should follow these guidelines:
<ul>
<li>
Ensure that no .INI file of the specified name exists on the system. </li>
<li>
Ensure that there is a key entry in the registry that specifies the .INI file. This entry should be under the path <b>HKEY_LOCAL_MACHINE\SOFTWARE \Microsoft\Windows NT\CurrentVersion\IniFileMapping</b>. </li>
<li>
Specify a value for that .INI file key entry that specifies a section. That is to say, an application must specify a section name, as it would appear within an .INI file or registry entry. Here is an example: [My Section]. </li>
<li>
For system files, specify SYS for an added value. </li>
<li>
For application files, specify USR within the added value. Here is an example: "My Section: USR: App Name\Section". And, since USR indicates a mapping under HKEY_CURRENT_USER, the application should also create a key under HKEY_CURRENT_USER that specifies the application name listed in the added value. For the example just given, that would be "App Name". </li>
<li>
After following the preceding steps, an application setup program should call <b>WritePrivateProfileStringW </b>with the first three parameters set to NULL, and the fourth parameter set to the INI filename. For example:<pre><code>WritePrivateProfileStringW( NULL, NULL, NULL, L"appname.ini" ); 
 </code></pre>
</li>
<li>
Such a call causes the mapping of an .INI file to the registry to take effect before the next system reboot. The system rereads the mapping information into shared memory. A user will not have to reboot their computer after installing an application in order to have future invocations of the application see the mapping of the .INI file to the registry.</li>
</ul>
<p>
The following sample code illustrates the preceding guidelines and is based on several assumptions: 
<ul>
<li>
There is an application named <code>App Name</code>. </li>
<li>
That application uses an .INI file named APPNAME.INI. </li>
<li>
There is a section in the .INI file that we want to look like this: <pre><code>[Section1] 
  FirstKey = It all worked out okay. 
  SecondKey = By golly, it works. 
  ThirdKey = Another test. 
 </code></pre>
</li>
<li>
The user will not have to reboot the system in order to have future invocations of the application see the mapping of the .INI file to the registry. </li>
</ul>
<p>
Here is the sample code : </p>
<pre><code>
// include files 
#include &lt;stdio.h&gt; 
#include &lt;windows.h&gt; 
 
// a main function 
main() 
 
{ 
  // local variables 
  CHAR inBuf[80]; 
  HKEY  hKey1, hKey2; 
  DWORD  dwDisposition; 
  LONG   lRetCode; 
 
  // try to create the .INI file key 
  lRetCode = RegCreateKeyEx ( HKEY_LOCAL_MACHINE, 
                              "SOFTWARE\\Microsoft\\Windows NT 
                               \\CurrentVersion\\IniFileMapping\\appname.ini", 
                              0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, 
                              NULL, &amp;hKey1, 
                              &amp;dwDisposition); 
 
  // if we failed, note it, and leave 
  if (lRetCode != ERROR_SUCCESS){ 
    printf ("Error in creating appname.ini key\n"); 
    return (0) ; 
    } 
 
  // try to set a section value 
  lRetCode = RegSetValueEx ( hKey1, 
                             "Section1", 
                             0, 
                             REG_SZ, 
                             "USR:App Name\\Section1", 
                             20); 
 
  // if we failed, note it, and leave 
  if (lRetCode != ERROR_SUCCESS) { 
    printf ( "Error in setting Section1 value\n"); 
    return (0) ; 
    } 
 
  // try to create an App Name key 
  lRetCode = RegCreateKeyEx ( HKEY_CURRENT_USER, 
                              "App Name", 
                              0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, 
                              NULL, &amp;hKey2, 
                              &amp;dwDisposition); 
 
  // if we failed, note it, and leave 
  if (lRetCode != ERROR_SUCCESS) { 
    printf ("Error in creating App Name key\n"); 
    return (0) ; 
    } 
 
  // force the system to re-read the mapping into shared memory 
  //    so that future invocations of the application will see it 
  //    without the user having to reboot the system 
  WritePrivateProfileStringW( NULL, NULL, NULL, L"appname.ini" ); 
 
  // if we get this far, all has gone well 
  // let's write some added values 
  WritePrivateProfileString ("Section1", "FirstKey", 
                             "It all worked out okay.", "appname.ini"); 
  WritePrivateProfileString ("Section1", "SecondKey", 
                             "By golly, it works.", "appname.ini"); 
  WritePrivateProfileSection ("Section1", "ThirdKey = Another Test.", 
                              "appname.ini"); 
 
  // let's test our work 
  GetPrivateProfileString ("Section1", "FirstKey", 
                           "Bogus Value: Get didn't work", inBuf, 80, 
                           "appname.ini"); 
  printf ("%s", inBuf); 
 
  // okay, we are outta here 
  return(0); 
 
} 
 </code></pre>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_7fxj.htm"><b>GetPrivateProfileString</b></a>, <a href="regapi_1aav.htm"><b>WriteProfileString</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

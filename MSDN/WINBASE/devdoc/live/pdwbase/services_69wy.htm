<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>StartServiceCtrlDispatcher</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_startservicectrldispatcher"></a>StartServiceCtrlDispatcher</h1>
<p>
The <b>StartServiceCtrlDispatcher</b> function connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process. </p>
<pre><code><b>BOOL StartServiceCtrlDispatcher(
  LPSERVICE_TABLE_ENTRY</b><i> lpServiceStartTable</i>   // address of service 
                                              // table
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpServiceStartTable</i></dt>
<dd>
Pointer to an array of <a href="services_9xpu.htm"><b>SERVICE_TABLE_ENTRY</b></a> structures containing one entry for each service that can execute in the calling process. The members of the last entry in the table must have NULL values to designate the end of the table. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Errors</h4>
<p>
The following error code can be set by the service control manager. Other error codes can be set by the registry functions that are called by the service control manager. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Value</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>ERROR_INVALID_DATA</td>
<td width=64%>The specified dispatch table contains entries that are not in the proper format.</td>
</tr>
<tr valign=top>
<td width=36%>ERROR_SERVICE_ALREADY_RUNNING</td>
<td width=64%><b>Windows NT 5.0 and later:</b> The process has already called <b>StartServiceCtrlDispatcher</b>. Each process can call <b>StartServiceCtrlDispatcher</b> only one time. </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
When the service control manager starts a service process, it waits for the process to call the <b>StartServiceCtrlDispatcher</b> function. The main thread of a service process should make this call as soon as possible after it starts up. If <b>StartServiceCtrlDispatcher</b> succeeds, it connects the calling thread to the service control manager and does not return until all running services in the process have terminated. The service control manager uses this connection to send control and service start requests to the main thread of the service process. The main thread acts as a dispatcher by invoking the appropriate <a href="services_18oi.htm"><b>Handler</b></a> function to handle control requests, or by creating a new thread to execute the appropriate <a href="services_61pq.htm"><b>ServiceMain</b></a> function when a new service is started. </p>
<p>
The <i>lpServiceStartTable</i> parameter contains an entry for each service that can run in the calling process. Each entry specifies the <b>ServiceMain</b> function for that service. For SERVICE_WIN32_SHARE_PROCESS services, each entry must contain the name of a service. This name is the service name that was specified by the <a href="services_3p9h.htm"><b>CreateService</b></a> function when the service was installed. For SERVICE_WIN32_OWN_PROCESS services, the service name in the table entry is ignored. </p>
<p>
If a service runs in its own process, the main thread of the service process should immediately call <b>StartServiceCtrlDispatcher</b>. All initialization tasks are done in the service's <b>ServiceMain</b> function when the service is started. </p>
<p>
If multiple services share a process and some common process-wide initialization needs to be done before any <b>ServiceMain</b> function is called, the main thread can do the work before calling <b>StartServiceCtrlDispatcher</b>, as long as it takes less than 30 seconds. Otherwise, another thread must be created to do the process-wide initialization, while the main thread calls <b>StartServiceCtrlDispatcher</b> and becomes the service control dispatcher. Any service-specific initialization should still be done in the individual service main functions. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsvc.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="services_0p0z.htm">Services Overview</a>, <a href="services_2uwj.htm">Service Functions</a>, <a href="services_3fs5.htm"><b>ControlService</b></a>, <a href="services_18oi.htm"><b>Handler</b></a>, <a href="services_7t0y.htm"><b>RegisterServiceCtrlHandler</b></a>, <a href="services_61pq.htm"><b>ServiceMain</b></a>, <a href="services_9xpu.htm"><b>SERVICE_TABLE_ENTRY</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

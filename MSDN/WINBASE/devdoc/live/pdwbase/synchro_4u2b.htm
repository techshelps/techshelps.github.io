<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Names</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_object_names"></a>Object Names</h3>
<p>
Named objects provide an easy way for processes to share object handles. The name specified by the creating process is limited to MAX_PATH characters, and can include any character except the backslash path-separator character (\). Once a process has created a named event, mutex, semaphore, or timer object, other processes can use the name to call the appropriate function (<a href="synchro_5myc.htm"><b>OpenEvent</b></a>, <a href="synchro_82pk.htm"><b>OpenMutex</b></a>, <a href="synchro_3y3p.htm"><b>OpenSemaphore</b></a>, or <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a>) to open a handle to the object. Name comparison is case sensitive. </p>
<p>
The names of event, mutex, semaphore, timer, and file-mapping objects share the same name space. If you specify a name that is in use by an object of another type when creating an object, the function succeeds, but <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_ALREADY_EXISTS. Therefore, when creating named objects, use unique names and be sure to check function return values for duplicate-name errors. </p>
<p>
For example, if the name specified in a call to the <a href="synchro_1a2g.htm"><b>CreateMutex</b></a> function matches the name of an existing mutex object, the function returns a handle to the existing object. In this case, the call to <b>CreateMutex</b> is equivalent to a call to the <b>OpenMutex</b> function. Having multiple processes use <b>CreateMutex</b> for the same mutex is therefore equivalent to having one process that calls <b>CreateMutex</b> while the other processes call <b>OpenMutex</b>, except that it eliminates the need to ensure that the creating process is started first. When using this technique for mutex objects, however, none of the calling processes should request immediate ownership of the mutex. If multiple processes do request immediate ownership, it can be difficult to predict which process actually gets the initial ownership. </p>
<p>&nbsp;</p></body>
</HTML>

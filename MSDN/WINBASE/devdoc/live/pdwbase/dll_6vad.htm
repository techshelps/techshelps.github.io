<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LoadModule</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_loadmodule"></a>LoadModule</h1>
<p>
The <b>LoadModule</b> function loads and executes an application or creates a new instance of an existing application. </p>
<p>
This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications should use the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function. </p>
<pre><code><b>DWORD LoadModule(
  LPCSTR</b><i> lpModuleName</i><b>,  </b>// address of filename to load
<b>  LPVOID</b><i> lpParameterBlock</i>   // address of parameter block for new 
                            // module
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpModuleName</i></dt>
<dd>
Pointer to a null-terminated string that contains the filename of the application to run. When specifying a path, be sure to use backslashes (\), not forward slashes (/). If the <i>lpModuleName</i> parameter does not contain a directory path, the system searches for the executable file in this order: 
<ol>
<li>
The directory from which the application loaded. </li>
<li>
The current directory. </li>
<li>
<b>Windows 95 and Windows 98:</b> The Windows system directory. Use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_1.Click()><b>GetSystemDirectory</b></a> function to get the path of this directory.<p>
<b>Windows NT:</b> The 32-bit Windows system directory. Use the <b>GetSystemDirectory</b> function to get the path of this directory. The name of this directory is SYSTEM32.
</li>
<li>
<b>Windows NT:</b> The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</li>
<li>
The Windows directory. Use the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_2.Click()><b>GetWindowsDirectory</b></a> function to get the path of this directory. </li>
<li>
The directories that are listed in the PATH environment variable. </li>
</ol>
</dd>
<dt>
<i>lpParameterBlock</i></dt>
<dd>
Pointer to an application-defined <b>LOADPARMS32</b> structure that defines the new application's parameter block. 
<p>
The <b>LOADPARMS32</b> structure has the following form: 

<pre><code>typedef struct tagLOADPARMS32 { 
    LPSTR lpEnvAddress;  // address of environment strings 
    LPSTR lpCmdLine;     // address of command line 
    LPSTR lpCmdShow;     // how to show new program 
    DWORD dwReserved;    // must be zero 
} LOADPARMS32; 
 </code></pre>

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Member</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%><b>lpEnvAddress</b></td>
<td width=75%>Pointer to an array of null-terminated strings that supply the environment strings for the new process. The array has a value of NULL as its last entry. A value of NULL for this parameter causes the new process to start with the same environment as the calling process.</td>
</tr>
<tr valign=top>
<td width=25%><b>lpCmdLine</b></td>
<td width=75%>Pointer to a Pascal-style string that contains a correctly formed command line. The first byte of the string contains the number of bytes in the string. The remainder of the string contains the command line arguments, excluding the name of the child process. If there are no command line arguments, this parameter must point to a zero length string; it cannot be NULL.</td>
</tr>
<tr valign=top>
<td width=25%><b>lpCmdShow</b></td>
<td width=75%>Pointer to a structure containing two <b>WORD</b> values. The first value must always be set to two. The second value specifies how the application window is to be shown and is used to supply the <b>wShowWindow</b> member of the <a href="prothred_7sdu.htm"><b>STARTUPINFO</b></a> structure to the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a><b> </b>function. See the description of the <i>nCmdShow</i> parameter of the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_showwindow">
</object><a href=JavaScript:alink_3.Click()><b>ShowWindow</b></a> function for a list of acceptable values.</td>
</tr>
<tr valign=top>
<td width=25%><b>dwReserved</b></td>
<td width=75%>This parameter is reserved; it must be zero.</td>
</tr>
</table><br>


<p>
Set all unused members to NULL, except for <b>lpCmdLine</b>, which must point to a null-terminated string if it is not used. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is greater than 31.</p>
<p>
If the function fails, the return value is an error value, which may be one of the following: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Value</th>
<th align=left width=58%>Meaning</th>
</tr>
<tr valign=top>
<td width=42%>0</td>
<td width=58%>The system is out of memory or resources.</td>
</tr>
<tr valign=top>
<td width=42%>ERROR_BAD_FORMAT</td>
<td width=58%>The .EXE file is invalid (non-Win32 .EXE or error in .EXE image).</td>
</tr>
<tr valign=top>
<td width=42%>ERROR_FILE_NOT_FOUND</td>
<td width=58%>The specified file was not found.</td>
</tr>
<tr valign=top>
<td width=42%>ERROR_PATH_NOT_FOUND</td>
<td width=58%>The specified path was not found.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Win32-based applications should use the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function. In the Win32 API, the implementation of the <b>LoadModule</b> function calls <b>CreateProcess</b>. The following section describes how each parameter for <b>CreateProcess</b> is formed: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>CreateProcess parameter</th>
<th align=left width=64%>Value</th>
</tr>
<tr valign=top>
<td width=36%><i>lpszImageName</i></td>
<td width=64%><b>LoadModule</b> <i>lpModuleName</i> parameter.</td>
</tr>
<tr valign=top>
<td width=36%><i>lpszCommandLine</i></td>
<td width=64%><b>LoadModule</b> <i>lpParameterBlock-&gt;lpCmdLine.</i></td>
</tr>
<tr valign=top>
<td width=36%><i>lpsaProcess</i></td>
<td width=64%>NULL.</td>
</tr>
<tr valign=top>
<td width=36%><i>lpsaThread</i></td>
<td width=64%>NULL.</td>
</tr>
<tr valign=top>
<td width=36%><i>fInheritHandles</i></td>
<td width=64%>FALSE.</td>
</tr>
<tr valign=top>
<td width=36%><i>fdwCreate</i></td>
<td width=64%>0.</td>
</tr>
<tr valign=top>
<td width=36%><i>lpvEnvironment</i></td>
<td width=64%><b>LoadModule</b> <i>lpParameterBlock-&gt;lpEnvAddress.</i></td>
</tr>
<tr valign=top>
<td width=36%><i>lpszCurDir</i></td>
<td width=64%>NULL.</td>
</tr>
<tr valign=top>
<td width=36%><i>lpsiStartInfo</i></td>
<td width=64%>The structure is initialized to zero. The <b>cb</b> member is set to the size of the structure, and the <b>wShowWindow</b> member is set to the value of the second word of the <b>LoadModule</b> <i>lpParameterBlock-&gt;lpCmdShow</i> parameter.</td>
</tr>
<tr valign=top>
<td width=36%><i>lppiProcInfo.hProcess</i></td>
<td width=64%>The handle is immediately closed.</td>
</tr>
<tr valign=top>
<td width=36%><i>lppiProcInfo.hThread</i></td>
<td width=64%>The handle is immediately closed.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_4.Click()><b>GetSystemDirectory</b></a>, <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_5.Click()><b>GetWindowsDirectory</b></a>, <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_showwindow">
</object><a href=JavaScript:alink_6.Click()><b>ShowWindow</b></a>, <a href="prothred_7sdu.htm"><b>STARTUPINFO</b></a>, <a href="prothred_36w3.htm"><b>WinExec</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing a Control Handler Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_writing_a_control_handler_function"></a>Writing a Control Handler Function</h2>
<p>
The <code>MyServiceCtrlHandler</code> function in the following example is the <a href="services_18oi.htm"><b>Handler</b></a> function. When this function is called by the dispatcher thread, it handles the control code passed in the <i>Opcode</i> parameter and then calls the <a href="services_90oj.htm"><b>SetServiceStatus</b></a> function to update the service's status. Every time a <b>Handler</b> function receives a control code, it is appropriate to return status with a call to <b>SetServiceStatus</b> regardless of whether the service acts on the control.</p>
<p>
When the pause control is received, <code>MyServiceCtrlHandler</code> simply sets the <i>dwCurrentState</i> field in the SERVICE_STATUS structure to SERVICE_PAUSED. Likewise, when the continue control is received, the state is set to SERVICE_RUNNING. Therefore, <code>MyServiceCtrlHandler</code> is not a good example of how to handle the pause and continue controls. Because <code>MyServiceCtrlHandler</code> is a template for a <b>Handler</b> function, code for the pause and continue controls is included for completeness. A service that supports either the pause or continue control should handle these controls in a way that makes sense. Many services support neither the pause or continue control. If the service indicates that it does not support pause or continue with the <i>dwControlsAccepted</i> parameter, then the SCM will not send pause or continue controls to the service's <b>Handler</b> function. </p>
<p>
To output debugging information, <code>MyServiceCtrlHandler</code> calls <code>SvcDebugOut</code>. The source code for <code>SvcDebugOut</code> is listed in <a href="services_0hm6.htm">Writing a Service Program's main Function</a>.</p>
<pre><code>VOID MyServiceCtrlHandler (DWORD Opcode) 
{ 
    DWORD status; 
 
    switch(Opcode) 
    { 
        case SERVICE_CONTROL_PAUSE: 
        // Do whatever it takes to pause here. 
            MyServiceStatus.dwCurrentState = SERVICE_PAUSED; 
            break; 
 
        case SERVICE_CONTROL_CONTINUE: 
        // Do whatever it takes to continue here. 
            MyServiceStatus.dwCurrentState = SERVICE_RUNNING; 
            break; 
 
        case SERVICE_CONTROL_STOP: 
        // Do whatever it takes to stop here. 
            MyServiceStatus.dwWin32ExitCode = 0; 
            MyServiceStatus.dwCurrentState  = SERVICE_STOPPED_PENDING; 
            MyServiceStatus.dwCheckPoint    = 0; 
            MyServiceStatus.dwWaitHint      = 0; 
 
            if (!SetServiceStatus (MyServiceStatusHandle, 
                &amp;MyServiceStatus))
            { 
                status = GetLastError(); 
                SvcDebugOut(" [MY_SERVICE] SetServiceStatus error 
                    %ld\n",status); 
            } 
 
            SvcDebugOut(" [MY_SERVICE] Leaving MyService \n",0); 
            return; 
 
        case SERVICE_CONTROL_INTERROGATE: 
        // Fall through to send current status. 
            break; 
 
        default: 
            SvcDebugOut(" [MY_SERVICE] Unrecognized opcode %ld\n", 
                Opcode); 
    } 
 
    // Send current status. 
    if (!SetServiceStatus (MyServiceStatusHandle,  &amp;MyServiceStatus)) 
    { 
        status = GetLastError(); 
        SvcDebugOut(" [MY_SERVICE] SetServiceStatus error 
            %ld\n",status); 
    } 
    return; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

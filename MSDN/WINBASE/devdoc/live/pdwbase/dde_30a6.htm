<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initiating a Conversation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_initiating_a_conversation"></a>Initiating a Conversation</h2>
<p>
To initiate a DDE conversation, the client sends a <a href="dde_1f8l.htm">WM_DDE_INITIATE</a> message. Usually, the client broadcasts this message by calling <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_sendmessage">
</object><a href=JavaScript:alink_1.Click()><b>SendMessage</b></a>, with –1 as the first parameter. If the application already has the window handle of the server application, it can send the message directly to that window. The client prepares atoms for the application name and topic name by calling <a href="atoms_7c19.htm"><b>GlobalAddAtom</b></a>. The client can request conversations with any potential server application and for any potential topic by supplying NULL (wildcard) atoms for the application and topic. </p>
<p>
The following example illustrates how the client initiates a conversation, where both the application and topic are specified. </p>
<pre><code>static BOOL fInInitiate = FALSE; 
    char *szApplication; 
    char *szTopic; 
    atomApplication = *szApplication == 0 ? 
        NULL : GlobalAddAtom((LPSTR) szApplication); 
    atomTopic = *szTopic == 0 ? 
        NULL : GlobalAddAtom((LPSTR) szTopic); 
 
    fInInitiate = TRUE; 
    SendMessage((HWND) -1,        // broadcasts message 
        WM_DDE_INITIATE,          // initiates conversation 
        (WPARAM) hwndClientDDE,   // handle of client DDE window 
        MAKELONG(atomApplication, // application-name atom 
            atomTopic));          // topic-name atom 
    fInInitiate = FALSE; 
    if (atomApplication != NULL) 
        GlobalDeleteAtom(atomApplication); 
    if (atomTopic != NULL) 
        GlobalDeleteAtom(atomTopic); 
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;If your application uses NULL atoms, you need not use the <a href="atoms_7c19.htm"><b>GlobalAddAtom</b></a> and <a href="atoms_2i3x.htm"><b>GlobalDeleteAtom</b></a> functions. In this example, the client application creates two global atoms containing the name of the server and the name of the topic, respectively. </p>
<p>
The client application sends a <a href="dde_1f8l.htm">WM_DDE_INITIATE</a> message with these two atoms in the <i>lParam</i> parameter of the message. In the call to the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_sendmessage">
</object><a href=JavaScript:alink_2.Click()><b>SendMessage</b></a> function, the special window handle –1 directs the system to send this message to all other active applications. <b>SendMessage</b> does not return to the client application until all applications that receive the message have, in turn, returned control to the system. This means that all <a href="dde_678r.htm">WM_DDE_ACK</a> messages sent in reply by the server applications are guaranteed to have been processed by the client by the time the <b>SendMessage</b> call has returned. </p>
<p>
After <b>SendMessage</b> returns, the client application deletes the global atoms. </p>
<p>
Server applications respond according to the logic illustrated in the following diagram. </p>
<p>
<img src="images/csdde_01.gif" border=0></p>
<p>
To acknowledge one or more topics, the server must create atoms for each conversation (requiring duplicate application-name atoms if there are multiple topics) and send a <a href="dde_678r.htm">WM_DDE_ACK</a> message for each conversation, as illustrated in the following example. </p>
<pre><code>if ((atomApplication = GlobalAddAtom("Server")) != 0) 
{ 
    if ((atomTopic = GlobalAddAtom(szTopic)) != 0) 
    { 
        SendMessage(hwndClientDDE, 
            WM_DDE_ACK, 
            (WPARAM) hwndServerDDE, 
            MAKELONG(atomApplication, atomTopic)); 
        GlobalDeleteAtom(atomApplication); 
    } 
 
    GlobalDeleteAtom(atomTopic); 
} 
 
if ((atomApplication == 0) || (atomTopic == 0)) 
{ 

    // Handle errors. 

} 
 </code></pre>
<p>
When a server responds with a <a href="dde_678r.htm">WM_DDE_ACK</a> message, the client application should save the handle of the server window. The client receiving the handle as the <i>wParam</i> parameter of the WM_DDE_ACK message then sends all subsequent DDE messages to the server window this handle identifies. </p>
<p>
If your client application uses a NULL atom for the application name or topic name, expect the application to receive acknowledgments from more than one server application. Multiple acknowledgements can also come from multiple instances of a DDE server, even if your client application does not use NULL atoms. A server should always use a unique window for each conversation. The window procedure in the client application can use the handle of the server window (provided as the <i>lParam</i> parameter of <a href="dde_1f8l.htm">WM_DDE_INITIATE</a>) to track multiple conversations. This allows a single client window to process several conversations without needing to terminate and reconnect with a new client window for each conversation. </p>
<p>&nbsp;</p></body>
</HTML>

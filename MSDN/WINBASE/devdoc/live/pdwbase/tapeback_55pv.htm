<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Backing Up and Restoring POSIX File Links</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_backing_up_and_restoring_posix_file_links"></a>Backing Up and Restoring POSIX File Links</h2>
<p>
A backup application can use the <a href="tapeback_3bl1.htm"><b>BackupWrite</b></a> function to recreate POSIX file links. </p>
<p>
The <a href="tapeback_5t0k.htm"><b>BackupRead</b></a> function does not return POSIX file link data. A backup application must maintain the link information itself. The following pseudocode presents algorithms for backing up and restoring POSIX file link data along with other file information.</p>
<p>
<b>PseudoCode Algorithm for Backing Up POSIX File Links</b> </p>
<pre><code>1.  Initialize and empty a list of known links. 
2.  While there are more files to back up 
3.     Read the disk and get the next file. 
4.     Open the file for read. 
5.     Call GetFileInformationByHandle() to get the 
          NumberOfLinks and the FileIndex. 
6.     If the NumberOfLinks is greater than 1 
7.        Search the list of know links looking for 
             the same FileIndex. 
8.           If a match is NOT found 
9.              add the full path of the file and the 
                   FileIndex to the list. 
10.             Call BackupRead() to copy all data to 
                   your backup media. 
10.          Else 
11.             Mark the data as a LINK on your backup media 
11.             store the full path from the list 
                   to your backup media. 
12.          Endif 
13.    Else 
14.       Call BackupRead() to copy all data to your 
             backup media. 
15.    Endif 
16. EndWhile 
 </code></pre>
<p>
<b>PseudoCode Algorithm for Restoring POSIX File Links</b> </p>
<pre><code>1.  While there are more files to restore 
2.     If the file is a LINK 
3.        use the full path which was saved as data 
             to open the file. 
4.        Initialize a WIN32_STREAM_ID structure with 
             dwStreamId equal to BACKUP_LINK. 
5.        Initialize the dwStreamAttributes to 0. 
6.        Initialize the dwStreamNameSize to 0. 
7.        Initialize a buffer containing the full path 
             of the file you are restoring in UNICODE. 
8.        Initialize the dwStreamSizeHigh to 0. 
9.        Initialize the dwStreamSizeLow to the size 
             in bytes of the buffer     containing the full path. 
10.       Call BackupWrite() with the WIN32_STREAM_ID 
11.       Call BackupWrite() with the buffer containing 
             the full path. 
13.          Else 
14.       Call BackupWrite() with the data stored on 
             your backup media. 
15.    Endif 
16. EndWhile 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

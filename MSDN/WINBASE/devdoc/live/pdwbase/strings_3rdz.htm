<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FoldString</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_foldstring"></a>FoldString</h1>
<p>
The <b>FoldString</b> function maps one string to another, performing a specified transformation option. </p>
<pre><code><b>int FoldString(
  DWORD</b><i> dwMapFlags</i><b>,  </b>// mapping transformation options
<b>  LPCTSTR</b><i> lpSrcStr</i><b>,  </b>// pointer to source string
<b>  int</b><i> cchSrc</i><b>,        </b>// size of source string, in bytes or characters
<b>  LPTSTR</b><i> lpDestStr</i><b>,  </b>// pointer to destination buffer
<b>  int</b><i> cchDest</i>        // size of destination buffer, in bytes or characters
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMapFlags</i></dt>
<dd>
A set of bit flags that indicate the type of transformation to be used during mapping. This value can be a combination of the following bit-flag constants: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Option</th>
<th align=left width=59%>Meaning</th>
</tr>
<tr valign=top>
<td width=41%>MAP_FOLDCZONE</td>
<td width=59%>Fold compatibility zone characters into standard Unicode equivalents. For information about compatibility zone characters, see the following Remarks section.</td>
</tr>
<tr valign=top>
<td width=41%>MAP_FOLDDIGITS</td>
<td width=59%>Map all digits to Unicode characters 0 through 9.</td>
</tr>
<tr valign=top>
<td width=41%>MAP_PRECOMPOSED</td>
<td width=59%>Map accented characters to precomposed characters, in which the accent and base character are combined into a single character value. This value cannot be combined with MAP_COMPOSITE.</td>
</tr>
<tr valign=top>
<td width=41%>MAP_COMPOSITE</td>
<td width=59%>Map accented characters to composite characters, in which the accent and base character are represented by two character values. This value cannot be combined with MAP_PRECOMPOSED.</td>
</tr>
<tr valign=top>
<td width=41%>MAP_EXPAND_LIGATURES</td>
<td width=59%>Expand all ligature characters so that they are represented by their two-character equivalent. For example, the ligature 'æ' expands to the two characters 'a' and 'e'. This value cannot be combined with MAP_PRECOMPOSED or MAP_COMPOSITE.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpSrcStr</i></dt>
<dd>
Pointer to the string to be mapped. </dd>
<dt>
<i>cchSrc</i></dt>
<dd>
Specifies the size, in bytes (ANSI version) or characters (Unicode version), of the <i>lpSrcStr</i> buffer. If <i>cchSrc</i> is –1, <i>lpSrcStr</i> is assumed to be null-terminated, and the length is calculated automatically. </dd>
<dt>
<i>lpDestStr</i></dt>
<dd>
Pointer to the buffer to store the mapped string. </dd>
<dt>
<i>cchDest</i></dt>
<dd>
Specifies the size, in bytes (ANSI version) or characters (Unicode version), of the <i>lpDestStr</i> buffer. If <i>cchDest</i> is zero, the function returns the number of bytes or characters required to hold the mapped string, and the buffer pointed to by <i>lpDestStr</i> is not used.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the number of bytes (ANSI version) or characters (Unicode version) written to the destination buffer, or if the <i>cchDest</i> parameter is zero, the number of bytes or characters required to hold the mapped string. </p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. <b>GetLastError</b> may return one of the following error codes:</p>
<p>
ERROR_INSUFFICIENT_BUFFER<br>
ERROR_INVALID_FLAGS<br>
ERROR_INVALID_PARAMETER</p>
<h4>Remarks</h4>
<p>
The mapped string is null-terminated if the source string is null-terminated. </p>
<p>
The <i>lpSrcStr</i> and <i>lpDestStr</i> pointers must not be the same. If they are the same, the function fails and <b>GetLastError</b> returns ERROR_INVALID_PARAMETER. </p>
<p>
The compatibility zone in Unicode consists of characters in the range 0xF900 through 0xFFEF that are assigned to characters from other character-encoding standards but are actually variants of characters that are already in Unicode. The compatibility zone is used to support round-trip mapping to these standards. Applications can use the MAP_FOLDCZONE flag to avoid supporting the duplication of characters in the compatibility zone. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnls.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="strings_70ry.htm">String Manipulation Overview</a>, <a href="strings_97n7.htm">String Manipulation Functions</a>, <a href="nls_5s2v.htm"><b>LCMapString</b></a>, <a href="strings_8lif.htm"><b>CompareString</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

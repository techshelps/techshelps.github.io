<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateIoCompletionPort</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createiocompletionport"></a>CreateIoCompletionPort</h1>
<p>
The <b>CreateIoCompletionPort</b> function can associate an instance of an opened file with a newly created or an existing input/output (I/O) completion port; or it can create an I/O completion port without associating it with a file.</p>
<p>
Associating an instance of an opened file with an I/O completion port lets an application receive notification of the completion of asynchronous I/O operations involving that file. </p>
<pre><code><b>HANDLE CreateIoCompletionPort (
  HANDLE</b><i> FileHandle</i><b>,              </b>// file handle to associate with 
                                  // the I/O completion port
  <b>HANDLE</b> <i>ExistingCompletionPort</i><b>,</b>  // handle to the I/O completion port
<b>  DWORD</b><i> CompletionKey</i><b>,            </b>// per-file completion key for I/O 
                                  // completion packets
<b>  DWORD</b><i> NumberOfConcurrentThreads </i>// number of threads allowed to 
                                  // execute concurrently
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>FileHandle</i></dt>
<dd>
Handle to a file opened for overlapped I/O completion. You must specify the FILE_FLAG_OVERLAPPED flag when using the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function to obtain the handle.
<p>
If <i>FileHandle</i> specifies INVALID_HANDLE_VALUE, <b>CreateIoCompletionPort</b> creates an I/O completion port without associating it with a file. In this case, the <i>ExistingCompletionPort</i> parameter must be NULL, and the <i>CompletionKey</i> parameter is ignored.
</dd>
<dt>
<i>ExistingCompletionPort</i></dt>
<dd>
Handle to the I/O completion port. 
<p>
If this parameter specifies an existing completion port, the function associates it with the file specified by the <i>FileHandle</i> parameter. The function returns the handle of the existing completion port; it does not create a new I/O completion port. 

<p>
If this parameter is NULL, the function creates a new I/O completion port and associates it with the file specified by the <i>FileHandle</i> parameter. The function returns the handle to the new I/O completion port.
</dd>
<dt>
<i>CompletionKey</i></dt>
<dd>
Specifies a per-file completion key that will be included in every I/O completion packet for the specified file. </dd>
<dt>
<i>NumberOfConcurrentThreads</i></dt>
<dd>
Specifies the number of threads that are allowed to execute concurrently.
<p>
If one thread enters a wait state, then another thread is allowed to proceed. There may be brief periods when the number of active threads exceeds the specified value, but the operating system quickly brings the number down.

<p>
A value of 0 for this parameter indicates that the system can allow as many threads as there are processors in the system.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the handle to the I/O completion port that is associated with the specified file. </p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The I/O system can be instructed to send I/O completion notification packets to I/O completion ports, where they are queued. The <b>CreateIoCompletionPort</b> function provides this functionality. </p>
<p>
After an instance of an open file is associated with an I/O completion port, it cannot be used in the <a href="filesio_0660.htm"><b>ReadFileEx</b></a> or <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> function. It is best not to share such an associated file through either handle inheritance or a call to the <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a><b> </b>function. Operations performed with such duplicate handles will generate completion notifications.</p>
<p>
When you perform an I/O operation with a file handle that has an associated I/O completion port, the I/O system sends a completion notification packet to the completion port when the I/O operation completes. The I/O completion port places the completion packet in a first-in-first-out queue. Use the <b>GetQueuedCompletionStatus</b> function to retrieve these queued I/O completion packets.</p>
<p>
Threads in the same process can use the <b>PostQueuedCompletionStatus</b> function to place I/O completion notification packets in a completion port's queue. This allows you to use the port to receive communications from other threads of the process, in addition to receiving I/O completion notification packets from the I/O system.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="filesio_2xm7.htm">File I/O Overview</a>, <a href="filesio_3n5f.htm">File Functions</a>, <a href="filesio_071v.htm"><b>GetQueuedCompletionStatus</b></a>, <a href="filesio_33g3.htm"><b>PostQueuedCompletionStatus</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

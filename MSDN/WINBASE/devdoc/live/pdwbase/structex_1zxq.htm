<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AbnormalTermination</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_abnormaltermination"></a>AbnormalTermination</h1>
<p>
The <b>AbnormalTermination</b> function indicates whether the <b>try</b> block of a <b>try</b>-<b>finally</b> statement terminated normally. The function can be called only from within the <b>finally</b> block of a <b>try</b>-<b>finally</b> statement. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The Microsoft C/C++ Optimizing Compiler interprets this function as a keyword, and its use outside the appropriate exception-handling syntax generates a compiler error. </p>
<pre><b><code>BOOL AbnormalTermination(VOID)
 </code></b></pre>
<h4>Parameters</h4>
<p>
This function has no parameters. </p>
<h4>Return Values</h4>
<p>
If the <b>try</b> block of the <b>try</b>-<b>finally</b> statement terminated abnormally, the return value is nonzero.</p>
<p>
If the <b>try</b> block of the <b>try</b>-<b>finally</b> statement terminated normally, the return value is zero. </p>
<h4>Remarks</h4>
<p>
The <b>try</b> block terminates normally only if execution leaves the block sequentially after executing the last statement in the block. Statements (such as <b>return</b>, <b>goto</b>, <b>continue</b>, or <b>break</b>) that cause execution to leave the <b>try</b> block result in abnormal termination of the block. This is the case even if such a statement is the last statement in the <b>try</b> block. </p>
<p>
Abnormal termination of a <b>try</b> block causes the system to search backward through all stack frames to determine whether any termination handlers must be called. This can result in the execution of hundreds of instructions, so it is important to avoid abnormal termination of a <b>try</b> block due to a <b>return</b>, <b>goto</b>, <b>continue</b>, or <b>break</b> statement. Note that these statements do not generate an exception, even though the termination is abnormal.</p>
<p>
To avoid abnormal termination of the <b>try-finally</b> block, execution should continue to the end of the block. You can also execute the <b>leave</b> statement. The <b>leave</b> statement allows for immediate termination of the <b>try</b> block without causing abnormal termination and its performance penalty. Check your compiler documentation to determine if the <b>leave</b> statement is supported. </p>
<p>
<b>Windows CE:</b> The Excpt.h file has to be explicitly included in order to use this function.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.</p>
<h4>See Also</h4>
<p>
<a href="structex_03xj.htm">Structured Exception Handling Overview</a>, <a href="structex_95kj.htm">Structured Exception Handling Functions</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReadProcessMemoryVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_readprocessmemoryvlm"></a>ReadProcessMemoryVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>ReadProcessMemoryVlm</b> function reads memory in a specified process. </p>
<pre><code><b>BOOL ReadProcessMemoryVlm(
  HANDLE</b><i> hProcess</i><b>,  </b>// handle to the process whose memory is read
<b>  PVOID64</b><i> lpBaseAddress</i><b>,</b>
<b>                    </b>// address to start reading
<b>  PVOID64</b><i> lpBuffer</i><b>, </b>// address of buffer to place read data
<b>  DWORD</b><i> nSize</i><b>,      </b>// number of bytes to read
<b>  LPDWORD</b><i> lpNumberOfBytesRead</i> 
                    // address of number of bytes read
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process whose memory is being read. To obtain a handle to a process, use the <a href="prothred_478z.htm"><b>OpenProcess</b></a> function. The handle must have PROCESS_VM_READ access to the process set when the process is opened. </dd>
<dt>
<i>lpBaseAddress</i></dt>
<dd>
Pointer to the base address in the specified process to read. Before any data transfer occurs, the operating system verifies that all data in the base address and memory of the specified size is accessible for reading. If this is the case, the function proceeds; otherwise, the function fails. The address specified is 64 bits and can therefore be used to access memory in the process allocated using <b>VirtualAllocVlm</b>, or the address can be a sign-extended 32-bit address.</dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to a buffer that receives the contents from the address space of the specified process. </dd>
<dt>
<i>nSize</i></dt>
<dd>
Number of bytes to read from the specified process. </dd>
<dt>
<i>lpNumberOfBytesRead</i></dt>
<dd>
Pointer to the actual number of bytes transferred into the specified buffer. If the <i>lpNumberOfBytesRead</i> parameter is NULL, it is ignored. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<p>
<b>ReadProcessMemoryVlm</b> fails if the requested operation attempts to read an area of the process that is inaccessible. In that event, no data is transferred.</p>
<h4>Remarks</h4>
<p>
<b>ReadProcessMemoryVlm </b>copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call <b>ReadProcessMemoryVlm</b>. The process whose address space is read is typically, but not necessarily, being debugged. </p>
<p>
The entire area to be read in a call to <b>ReadProcessMemoryVlm</b> must be accessible, or the function fails. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To guard against an access violation, use structured exception handling to protect any code that writes to or reads from a memory-mapped view. For more information on structured exception handling, see <a href="fmap3_638n.htm">Reading and Writing</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="memman_5o8d.htm"><b>WriteProcessMemoryVlm</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

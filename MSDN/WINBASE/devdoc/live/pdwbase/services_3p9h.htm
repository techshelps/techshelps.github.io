<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateService</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createservice"></a>CreateService</h1>
<p>
The <b>CreateService</b> function creates a service object and adds it to the specified service control manager database. </p>
<pre><code><b>SC_HANDLE CreateService(
  SC_HANDLE</b><i> hSCManager</i><b>,  </b>// handle to service control manager 
                         // database
<b>  LPCTSTR</b><i> lpServiceName</i><b>, </b>// pointer to name of service to start
<b>  LPCTSTR</b><i> lpDisplayName</i><b>, </b>// pointer to display name
<b>  DWORD</b><i> dwDesiredAccess</i><b>, </b>// type of access to service
<b>  DWORD</b><i> dwServiceType</i><b>,   </b>// type of service
<b>  DWORD</b><i> dwStartType</i><b>,     </b>// when to start service
<b>  DWORD</b><i> dwErrorControl</i><b>,  </b>// severity if service fails to start
<b>  LPCTSTR</b><i> lpBinaryPathName</i><b>,  </b>// pointer to name of binary file
<b>  LPCTSTR</b><i> lpLoadOrderGroup</i><b>,  </b>// pointer to name of load ordering 
                             // group
<b>  LPDWORD</b><i> lpdwTagId</i><b>,     </b>// pointer to variable to get tag identifier
<b>  LPCTSTR</b><i> lpDependencies</i><b>,  </b>// pointer to array of dependency names
<b>  LPCTSTR</b><i> lpServiceStartName</i><b>,</b>
<b>                           </b>// pointer to account name of service
<b>  LPCTSTR</b><i> lpPassword</i>       // pointer to password for service account
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hSCManager</i></dt>
<dd>
Handle to the service control manager database. This handle is returned by the <a href="services_4c36.htm"><b>OpenSCManager</b></a> function and must have SC_MANAGER_CREATE_SERVICE access. </dd>
<dt>
<i>lpServiceName</i></dt>
<dd>
Pointer to a null-terminated string that names the service to install. The maximum string length is 256 characters. The service control manager database preserves the case of the characters, but service name comparisons are always case insensitive. Forward-slash (/) and back-slash (\) are invalid service name characters. </dd>
<dt>
<i>lpDisplayName</i></dt>
<dd>
Pointer to a null-terminated string that is to be used by user interface programs to identify the service. This string has a maximum length of 256 characters. The name is case-preserved in the service control manager. display name comparisons are always case-insensitive. </dd>
<dt>
<i>dwDesiredAccess</i></dt>
<dd>
Specifies the access to the service. Before granting the requested access, the system checks the access token of the calling process. 
<p>
The STANDARD_RIGHTS_REQUIRED constant enables the following service object access types: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Standard rights</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%>DELETE</td>
<td width=54%>Enables calling of the <a href="services_2ujp.htm"><b>DeleteService</b></a> function to delete the service.</td>
</tr>
<tr valign=top>
<td width=46%>READ_CONTROL</td>
<td width=54%>Enables calling of the <a href="acctrlow_1vcp.htm"><b>QueryServiceObjectSecurity</b></a> function to query the security descriptor of the service object.</td>
</tr>
<tr valign=top>
<td width=46%>WRITE_DAC|WRITE_OWNER</td>
<td width=54%>Enables calling of the <a href="acctrlow_2jcp.htm"><b>SetServiceObjectSecurity</b></a> function to modify the security descriptor of the service object.</td>
</tr>
</table><br>


<p>
You can specify any or all of the following service object access types: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=59%>Access</th>
<th align=left width=41%>Description</th>
</tr>
<tr valign=top>
<td width=59%>SERVICE_ALL_ACCESS</td>
<td width=41%>Includes STANDARD_RIGHTS_REQUIRED in addition to all of the access types listed in this table.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_CHANGE_CONFIG</td>
<td width=41%>Enables calling of the <a href="services_5gh3.htm"><b>ChangeServiceConfig</b></a> function to change the service configuration.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_ENUMERATE_DEPENDENTS</td>
<td width=41%>Enables calling of the <a href="services_094j.htm"><b>EnumDependentServices</b></a> function to enumerate all the services dependent on the service.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_INTERROGATE</td>
<td width=41%>Enables calling of the <a href="services_3fs5.htm"><b>ControlService</b></a> function to ask the service to report its status immediately.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_PAUSE_CONTINUE</td>
<td width=41%>Enables calling of the <b>ControlService</b> function to pause or continue the service.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_QUERY_CONFIG</td>
<td width=41%>Enables calling of the <a href="services_7yjr.htm"><b>QueryServiceConfig</b></a> function to query the service configuration.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_QUERY_STATUS</td>
<td width=41%>Enables calling of the <b>QueryServiceStatus</b> function to ask the service control manager about the status of the service.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_START</td>
<td width=41%>Enables calling of the <a href="services_8ox1.htm"><b>StartService</b></a> function to start the service.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_STOP</td>
<td width=41%>Enables calling of the <a href="services_3fs5.htm"><b>ControlService</b></a> function to stop the service.</td>
</tr>
<tr valign=top>
<td width=59%>SERVICE_USER_DEFINED_CONTROL</td>
<td width=41%>Enables calling of the <b>ControlService</b> function to specify a user-defined control code.</td>
</tr>
</table><br>


<p>
You can specify any of the following generic access types: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=34%>Generic access</th>
<th align=left width=66%>Service access</th>
</tr>
<tr valign=top>
<td width=34%>GENERIC_READ</td>
<td width=66%>Combines the following access types: STANDARD_RIGHTS_READ, SERVICE_QUERY_CONFIG, SERVICE_QUERY_STATUS, and SERVICE_ENUMERATE_DEPENDENTS.</td>
</tr>
<tr valign=top>
<td width=34%>GENERIC_WRITE</td>
<td width=66%>Combines the following access types: STANDARD_RIGHTS_WRITE and SERVICE_CHANGE_CONFIG.</td>
</tr>
<tr valign=top>
<td width=34%>GENERIC_EXECUTE</td>
<td width=66%>Combines the following access types: STANDARD_RIGHTS_EXECUTE, SERVICE_START, SERVICE_STOP, SERVICE_PAUSE_CONTINUE, SERVICE_INTERROGATE, and SERVICE_USER_DEFINED_CONTROL.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwServiceType</i></dt>
<dd>
A set of bit flags that specify the type of service. You must specify one of the following service types. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>SERVICE_WIN32_OWN_PROCESS</td>
<td width=46%>Specifies a Win32-based service that runs in its own process.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_WIN32_SHARE_PROCESS</td>
<td width=46%>Specifies a Win32-based service that shares a process with other services.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_KERNEL_DRIVER</td>
<td width=46%>Specifies a driver service.</td>
</tr>
<tr valign=top>
<td width=54%>SERVICE_FILE_SYSTEM_DRIVER</td>
<td width=46%>Specifies a file system driver service.</td>
</tr>
</table><br>


<p>
If you specify either SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS, you can also specify the following flag. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>SERVICE_INTERACTIVE_PROCESS </td>
<td width=46%>Enables a Win32-based service process to interact with the desktop.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwStartType</i></dt>
<dd>
Specifies when to start the service. You must specify one of the following start types. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Value</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_BOOT_START</th>
<td width=54%>Specifies a device driver started by the system loader. This value is valid only for driver services.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_SYSTEM_START</th>
<td width=54%>Specifies a device driver started by the <b>IoInitSystem</b> function. This value is valid only for driver services.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_AUTO_START</th>
<td width=54%>Specifies a service to be started automatically by the service control manager during system startup.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_DEMAND_START</th>
<td width=54%>Specifies a service to be started by the service control manager when a process calls the <a href="services_8ox1.htm"><b>StartService</b></a> function.</td>
</tr>
<tr valign=top>
<th align=left width=46%>SERVICE_DISABLED</th>
<td width=54%>Specifies a service that can no longer be started.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwErrorControl</i></dt>
<dd>
Specifies the severity of the error if this service fails to start during startup, and determines the action taken by the startup program if failure occurs. You must specify one of the following error control flags. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Value</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_IGNORE</td>
<td width=54%>The startup program logs the error but continues the startup operation.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_NORMAL</td>
<td width=54%>The startup program logs the error and puts up a message box pop-up but continues the startup operation.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_SEVERE</td>
<td width=54%>The startup program logs the error. If the last-known-good configuration is being started, the startup operation continues. Otherwise, the system is restarted with the last-known-good configuration.</td>
</tr>
<tr valign=top>
<td width=46%>SERVICE_ERROR_CRITICAL</td>
<td width=54%>The startup program logs the error, if possible. If the last-known-good configuration is being started, the startup operation fails. Otherwise, the system is restarted with the last-known good configuration.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpBinaryPathName</i></dt>
<dd>
Pointer to a null-terminated string that contains the fully qualified path to the service binary file. If the path contains a space, it must be quoted so that it is correctly interpreted. For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".</dd>
<dt>
<i>lpLoadOrderGroup</i></dt>
<dd>
Pointer to a null-terminated string that names the load ordering group of which this service is a member. Specify NULL or an empty string if the service does not belong to a group. </dd>
<dt>
<i>lpdwTagId</i></dt>
<dd>
Pointer to a <b>DWORD</b> variable that receives a tag value that is unique in the group specified in the <i>lpLoadOrderGroup</i> parameter. Specify NULL if you are not changing the existing tag. 
<p>
You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the <b>GroupOrderList</b> value of the following registry key: 

<p>
<b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control</b> 

<p>
Tags are only evaluated for driver services that have SERVICE_BOOT_START or SERVICE_SYSTEM_START start types. 
</dd>
<dt>
<i>lpDependencies</i></dt>
<dd>
Pointer to a double null-terminated array of null-separated names of services or load ordering groups that the system must start before this service. Specify NULL or an empty string if the service has no dependencies. Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group. 
<p>
You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished from a service name, because services and service groups share the same name space. 
</dd>
<dt>
<i>lpServiceStartName</i></dt>
<dd>
Pointer to a null-terminated string that names the service. If the service type is SERVICE_WIN32_OWN_PROCESS, use an account name in the form <i>DomainName</i>\<i>UserName</i>. The service process will be logged on as this user. If the account belongs to the built-in domain, you can specify .\<i>UserName</i>. If the service type is SERVICE_WIN32_SHARE_PROCESS you must specify the LocalSystem account. If you specify NULL, <b>CreateService</b> uses the LocalSystem account. 
<p>
If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, the name is the driver object name that the system uses to load the device driver. Specify NULL if the driver is to use a default object name created by the I/O system. 
</dd>
<dt>
<i>lpPassword</i></dt>
<dd>
Pointer to a null-terminated string that contains the password to the account name specified by the <i>lpServiceStartName</i> parameter. If the pointer is NULL or if it points to an empty string, the service has no password. Passwords are ignored for driver services. If <i>lpServiceStartName</i> is LocalSystem, the password must be NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the service.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Errors</h4>
<p>
The following error codes can be set by the service control manager. Other error codes can be set by the registry functions that are called by the service control manager. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=56%>Value</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=56%>ERROR_ACCESS_DENIED</td>
<td width=44%>The handle to the specified service control manager database does not have SC_MANAGER_CREATE_SERVICE access.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_CIRCULAR_DEPENDENCY</td>
<td width=44%>A circular service dependency was specified.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_DUP_NAME</td>
<td width=44%>The display name already exists in the service control manager database either as a service name or as another display name.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_INVALID_HANDLE</td>
<td width=44%>The handle to the specified service control manager database is invalid.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_INVALID_NAME</td>
<td width=44%>The specified service name is invalid.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_INVALID_PARAMETER</td>
<td width=44%>A parameter that was specified is invalid.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_INVALID_SERVICE_ACCOUNT</td>
<td width=44%>The user account name specified in the <i>lpServiceStartName</i> parameter does not exist.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_SERVICE_EXISTS</td>
<td width=44%>The specified service already exists in this database.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>CreateService</b> function creates a service object and installs it in the service control manager database by creating a key with the same name as the service under the following registry key: </p>
<p>
<b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services</b> </p>
<p>
Information specified for this function is saved as values under this key. Setup programs and the service itself can create subkeys under this key for any service specific information. </p>
<p>
The returned handle is only valid for the process that called <b>CreateService</b>. It can be closed by calling the <b>CloseServiceHandle</b> function. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsvc.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="services_0p0z.htm">Services Overview</a>, <a href="services_2uwj.htm">Service Functions</a>, <a href="services_5gh3.htm"><b>ChangeServiceConfig</b></a>, <a href="services_8qcl.htm"><b>CloseServiceHandle</b></a>, <a href="services_3fs5.htm"><b>ControlService</b></a>, <a href="services_2ujp.htm"><b>DeleteService</b></a>, <a href="services_094j.htm"><b>EnumDependentServices</b></a>, <a href="services_4c36.htm"><b>OpenSCManager</b></a>, <a href="services_7yjr.htm"><b>QueryServiceConfig</b></a>, <a href="acctrlow_1vcp.htm"><b>QueryServiceObjectSecurity</b></a>, <a href="services_8coj.htm"><b>QueryServiceStatus</b></a>, <a href="acctrlow_2jcp.htm"><b>SetServiceObjectSecurity</b></a>, <a href="services_8ox1.htm"><b>StartService</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Functions That Have No Unicode Equivalents</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_functions_that_have_no_unicode_equivalents"></a>Using Functions That Have No Unicode Equivalents</h2>
<p>
Win32 functions that have not been exported in a Unicode version have typically been replaced by more powerful or extended functions that do support Unicode. If you are porting code that calls the <a href="filesio_0cth.htm"><b>OpenFile</b></a> function, for example, you can support Unicode by using the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function instead. </p>
<p>
If a function has no Unicode equivalent, you can map characters to and from 8-bit character sets before and after the function call. For example, the number-formatting functions <b>atoi</b> and <b>itoa</b> use only the digits 0 through 9. Normally, mapping Unicode to 8-bit characters could cause loss of data, but you can avoid this by making your code type independent and conditionalizing the expressions. For example, the following statements are type dependent and should be changed to support Unicode. </p>
<pre><code>char str[4]; 
 
    num = atoi(str); 
 </code></pre>
<p>
These statements could be rewritten as follows to make them type independent. </p>
<pre><code>TCHAR tstr[4]; 
 
    CHAR strTmp[SIZE]; 
 
    #ifdef UNICODE 
 
    wcstombs(strTmp, (const wchar_t *) tstr, sizeof(strTmp)); 
 
    num = atoi(strTmp); 
 
    #else 
 
    num = atoi(tstr); 
 
    #endif 
 </code></pre>
<p>
In this example, the <b>wcstombs</b> function is the standard C function that translates Unicode to ASCII. The example relies on the fact that the digits 0 through 9 can always be translated from Unicode to ASCII, even if some of the surrounding text cannot. The <b>atoi</b> function stops at any character that is not a digit. You can use the <a href="nls_5s2v.htm"><b>LCMapString</b></a> function if you need to process text that includes the native digits provided for some of the scripts in Unicode. </p>
<p>&nbsp;</p></body>
</HTML>

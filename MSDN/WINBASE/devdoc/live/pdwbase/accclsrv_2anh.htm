<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AccessCheckByTypeAndAuditAlarm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_accesscheckbytypeandauditalarm"></a>AccessCheckByTypeAndAuditAlarm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>AccessCheckByTypeAndAuditAlarm</b> function determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. If the security descriptor has a SACL with ACEs that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not supported in the current version of Windows NT. </p>
<pre><code><b>BOOL AccessCheckByTypeAndAuditAlarm(
  LPCTSTR</b><i> SubsystemName</i><b>,            </b>// subsystem name
<b>  LPVOID</b><i> HandleId</i><b>,                  </b>// object's handle identifier
<b>  LPCTSTR</b><i> ObjectTypeName</i><b>,           </b>// type of object
<b>  LPCTSTR</b><i> ObjectName</i><b>,               </b>// name of object
<b>  PSECURITY_DESCRIPTOR</b><i> pSecurityDescriptor</i><b>,   </b>// security descriptor
<b>  PSID</b><i> PrincipalSelfSid</i><b>,            </b>// SID of object being checked
<b>  DWORD</b><i> DesiredAccess</i><b>,              </b>// requested access rights 
<b>  AUDIT_EVENT_TYPE</b><i> AuditType</i><b>,       </b>// type of audit 
<b>  DWORD</b><i> Flags</i><b>,          </b>// allows access check if no audit privilege
<b>  POBJECT_TYPE_LIST</b> <i>ObjectTypeList</i><b>, </b>// array of object types
<b>  DWORD</b> <i>ObjectTypeListLength</i><b>,       </b>// number of object type elements
<b>  PGENERIC_MAPPING</b><i> GenericMapping</i><b>,  </b>// map generic to specific rights
<b>  BOOL</b><i> ObjectCreation</i><b>,       </b>// flag is TRUE if creating an object
<b>  LPDWORD</b><i> GrantedAccess</i><b>,     </b>// retrieves mask of granted rights
<b>  LPBOOL</b><i> AccessStatus     </i>   // retrieves results of access check
<b>  LPBOOL</b><i> pfGenerateOnClose</i>   // retrieves flag for audit generation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>SubsystemName</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</dd>
<dt>
<i>HandleId</i></dt>
<dd>
Pointer to a unique 32-bit value representing the client's handle to the object. If the access is denied, the system ignores this value. </dd>
<dt>
<i>ObjectTypeName</i></dt>
<dd>
Pointer to a null-terminated string specifying the type of object being created or accessed. This string appears in any audit message that the function generates.</dd>
<dt>
<i>ObjectName</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of the object being created or accessed. This string appears in any audit message that the function generates.</dd>
<dt>
<i>pSecurityDescriptor</i></dt>
<dd>
Pointer to a <a href="accctrl_6i5u.htm"><b>SECURITY_DESCRIPTOR</b></a> structure against which access is checked. </dd>
<dt>
<i>PrincipalSelfSid</i></dt>
<dd>
Pointer to a SID. If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10).
<p>
This parameter should be NULL if the protected object does not represent a principal.
</dd>
<dt>
<i>DesiredAccess</i></dt>
<dd>
Access mask that specifies the access rights to check. This mask must have been mapped by the <a href="accclsrv_8757.htm"><b>MapGenericMask</b></a> function to contain no generic access rights.
<p>
If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.
</dd>
<dt>
<i>AuditType</i></dt>
<dd>
Specifies the type of audit to be generated. This can be one of the values from the <a href="accclsrv_7ble.htm"><b>AUDIT_EVENT_TYPE</b></a> enumeration type.</dd>
<dt>
<i>Flags</i></dt>
<dd>
Flag that controls the function's behavior if the calling process does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled. </dd>
<dt>
<i>ObjectTypeList</i></dt>
<dd>
Pointer to an array of <a href="accclsrv_7uuq.htm"><b>OBJECT_TYPE_LIST</b></a> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value indicating the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID. 
<p>
The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeAndAuditAlarm</b> fails and <b>GetLastError</b> returns ERROR_INVALID_PARAMETER.
</dd>
<dt>
<i>ObjectTypeListLength</i></dt>
<dd>
Specifies the number of elements in the <i>ObjectTypeList</i> array.</dd>
<dt>
<i>GenericMapping</i></dt>
<dd>
Pointer to the <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a> structure associated with the object for which access is being checked. </dd>
<dt>
<i>ObjectCreation</i></dt>
<dd>
Specifies a flag that determines whether the calling application will create a new object when access is granted. A value of TRUE indicates the application will create a new object. A value of FALSE indicates the application will open an existing object. </dd>
<dt>
<i>GrantedAccess</i></dt>
<dd>
Pointer to an access mask that receives the granted access rights. If <i>AccessStatus</i> returns FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask. </dd>
<dt>
<i>AccessStatus</i></dt>
<dd>
Pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, <i>AccessStatus</i> returns TRUE. Otherwise, <i>AccessStatus</i> returns FALSE and you can call <b>GetLastError</b> to get extended error information. </dd>
<dt>
<i>pfGenerateOnClose</i></dt>
<dd>
Pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the <a href="accclsrv_2vvx.htm"><b>ObjectCloseAuditAlarm</b></a> function when the object handle is closed. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
If the <i>PrincipalSelfSid </i>and <i>ObjectTypeList</i> parameters are NULL, the <i>AuditType</i> parameter is <i>AuditEventObjectAccess</i>, and the <i>Flags</i> parameter is zero, <b>AccessCheckByTypeAndAuditAlarm</b> performs in the same way as the <a href="accclsrv_5ze5.htm"><b>AccessCheckAndAuditAlarm</b></a> function. </p>
<p>
The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. </p>
<p>
<b>AccessCheckByTypeAndAuditAlarm</b> evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned in the <i>AccessStatus</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object. </p>
<p>
For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see <a href="accctrl_1ynn.htm">Controlling Access to an Object's Properties</a>. </p>
<p>
To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the primary token of the calling process, not the impersonation token of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</p>
<p>
The <b>AccessCheckByTypeAndAuditAlarm</b> function fails if the calling thread is not impersonating a client. </p>
<p>
If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeAndAuditAlarm</b> fails with ERROR_INVALID_SECURITY_DESCR. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="accclsrv_64vg.htm">Client/Server Access Control Overview</a>, <a href="accclsrv_0hv7.htm">Client/Server Access Control Functions</a>, <a href="accclsrv_5jjf.htm"><b>AccessCheck</b></a>, <a href="accclsrv_5ze5.htm"><b>AccessCheckAndAuditAlarm</b></a>, <a href="accclsrv_6739.htm"><b>AccessCheckByType</b></a>, <a href="accclsrv_7w38.htm"><b>AccessCheckByTypeResultList</b></a>, <a href="accclsrv_5d9p.htm"><b>AccessCheckByTypeResultListAndAuditAlarm</b></a>, <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a>, <a href="accclsrv_8757.htm"><b>MapGenericMask</b></a>, <a href="accclsrv_9ss2.htm"><b>PRIVILEGE_SET</b></a>, <a href="accctrl_6i5u.htm"><b>SECURITY_DESCRIPTOR</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

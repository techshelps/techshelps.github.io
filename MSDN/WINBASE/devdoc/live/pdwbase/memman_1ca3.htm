<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapWalk</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heapwalk"></a>HeapWalk</h1>
<p>
The <b>HeapWalk</b> function enumerates the memory blocks in a specified heap.</p>
<pre><code><b>BOOL HeapWalk(
  HANDLE</b><i> hHeap</i><b>,  </b>// handle to the heap to enumerate
<b>  LPPROCESS_HEAP_ENTRY</b><i> lpEntry</i> 
                 // points to structure that maintains enumeration 
                 // state information
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHeap</i></dt>
<dd>
Handle to the heap whose memory blocks you wish to enumerate.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Pointer to a <a href="memman_8iya.htm"><b>PROCESS_HEAP_ENTRY</b></a><b> </b>structure that maintains state informationfor a particular heap enumeration. 
<p>
If the <b>HeapWalk</b> function succeeds, returning the value TRUE, this structure's members contain information about the next memory block in the heap.

<p>
To initiate a heap enumeration, set the <b>lpData</b> field of the <b>PROCESS_HEAP_ENTRY </b>structure to NULL. To continue a particular heap enumeration, call the <b>HeapWalk</b> function repeatedly, with no changes to <i>hHeap</i>, <i>lpEntry</i>, or any of the members of the <b>PROCESS_HEAP_ENTRY</b> structure.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<p>
If the heap enumeration terminates successfully by reaching the end of the heap, the function returns FALSE, and <b>GetLastError </b>returns the error code ERROR_NO_MORE_ITEMS.</p>
<h4>Remarks</h4>
<p>
To initiate a heap enumeration, call <b>HeapWalk</b> with the <b>lpData</b> field of the <b>PROCESS_HEAP_ENTRY </b>structure pointed to by <i>lpEntry</i><b> </b>set to NULL.</p>
<p>
To continue a heap enumeration, call <b>HeapWalk </b>with the same <i>hHeap</i> and <i>lpEntry </i>values, and with the <b>PROCESS_HEAP_ENTRY</b> structure unchanged from the preceding call to<b> HeapWalk</b>. Repeat this process until you have no need for further enumeration, or until the function returns FALSE<b> </b>and <b>GetLastError </b>returns ERROR_NO_MORE_ITEMS, indicating that all of the heap's memory blocks have been enumerated.</p>
<p>
No special call of <b>HeapWalk</b> is needed to terminate the heap enumeration, since no enumeration state data is maintained outside the contents of the <b>PROCESS_HEAP_ENTRY</b> structure.</p>
<p>
<b>HeapWalk</b> can fail in a multithreaded application if the heap is not locked during the heap enumeration. Use the <b>HeapLock</b> and <b>HeapUnlock</b> functions to control heap locking during heap enumeration.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0r3f.htm"><b>HeapLock</b></a>, <a href="memman_0duz.htm"><b>HeapUnlock</b></a>, <a href="memman_53z9.htm"><b>HeapValidate</b></a>, <a href="memman_8iya.htm"><b>PROCESS_HEAP_ENTRY</b></a></p>
<p>&nbsp;</p></body>
</HTML>

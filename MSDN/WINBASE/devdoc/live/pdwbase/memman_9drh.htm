<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualAllocVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualallocvlm"></a>VirtualAllocVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>VirtualAllocVlm</b> function commits a region of pages in the virtual 64-bit address space of the indicated process. </p>
<pre><code><b>PVOID64 VirtualAllocVlm(
  HANDLE</b> <i>hProcess</i>,   // process within which to allocate memory
<b>  PVOID64</b><i> lpAddress</i>, // address of region to reserve or commit
<b>  DWORDLONG</b><i> ullSize</i>, // size of region
<b>  DWORD</b><i> flAllocationType</i><b>,</b>
<b>                     </b>// type of allocation
<b>  DWORD</b><i> flProtect</i>    // type of access protection
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to a process. <b>VirtualAllocVlm</b> allocates memory within the virtual address space of this process. The calling process must have had the PROCESS_VM_OPERATION flag set on a preceding call to the <a href="prothred_478z.htm"><b>OpenProcess</b></a> function, indicating virtual memory access to the target process, or <b>VirtualAllocVlm</b> fails. </dd>
<dt>
<i>lpAddress</i></dt>
<dd>
Starting address of the region to allocate. The system rounds the specified address down to the next 64K boundary. If the <i>lpAddress </i>parameter is NULL, the operating system determines where to allocate the region. </dd>
<dt>
<i>ullSize</i></dt>
<dd>
Size, in bytes, of the region to allocate. If <i>lpAddress</i> is NULL, this size is rounded up to the next page boundary. Otherwise, the allocated pages include all pages containing one or more bytes in the range from the value of <i>lpAddress</i> to the value of <i>lpAddress</i> plus the value of the <i>ullSize</i> parameter. This functionality means that a 2-byte range straddling a page boundary causes both pages to be included in the allocated region. </dd>
<dt>
<i>flAllocationType</i></dt>
<dd>
Type of allocation. You can specify any combination of the following flags. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=26%>Value</th>
<th align=left width=74%>Meaning</th>
</tr>
<tr valign=top>
<td width=26%>MEM_COMMIT</td>
<td width=74%>Allocates for the specified region of pages physical storage in memory or in the paging file on disk.</td>
</tr>
<tr valign=top>
<td width=26%></td>
<td width=74%>An attempt to commit an already committed page does not cause <b>VirtualAllocVlm</b> to fail. Thus, a range of committed or decommitted pages can be committed without causing a failure.</td>
</tr>
<tr valign=top>
<td width=26%>MEM_RESERVE</td>
<td width=74%>Reserves a range of the process's virtual address space without allocating any physical storage. The reserved range cannot be used by any other allocation operations (for example, the <b>malloc</b> function, the <a href="memman_2fxf.htm"><b>LocalAlloc</b></a> function, and so on) until it is released.</td>
</tr>
</table><br>

</dd>
<dt>
<i>flProtect</i></dt>
<dd>
Flag that specifies the type of access for the region to be allocated. You can specify one of the following. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=30%>Value</th>
<th align=left width=70%>Meaning</th>
</tr>
<tr valign=top>
<td width=30%>PAGE_READONLY</td>
<td width=70%>Enables read access to the committed region of pages. An attempt to write to the committed region results in an access violation. If the operating system differentiates between read-only access and execute access, an attempt to execute code in the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=30%>PAGE_READWRITE</td>
<td width=70%>Enables both read and write access to the committed region of pages.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the base address of the allocated region of pages.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>VirtualAllocVlm</b> function is used to allocate and specify an initial protection value for memory regions that can be addressed through 64-bit pointers.</p>
<p>
Memory allocated by <b>VirtualAllocVlm</b> must be physically present in the system. This memory is considered locked down and unavailable to the rest of the virtual memory management system of Windows NT. Programmers using <b>VirtualAllocVlm</b> should understand that this function is allocating dedicated resources. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_6krn.htm"><b>HeapAlloc</b></a>, <a href="memman_2fxf.htm"><b>LocalAlloc</b></a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="memman_5ist.htm"><b>VirtualFreeVlm</b></a>, <a href="memman_3tt7.htm"><b>VirtualLock</b></a>, <a href="memman_07ot.htm"><b>VirtualProtectVlm</b></a>, <a href="memman_8kbx.htm"><b>VirtualQueryVlm</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateFileMapping</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createfilemapping"></a>CreateFileMapping</h1>
<p>
The <b>CreateFileMapping</b> function creates a named or unnamed file-mapping object for the specified file. </p>
<pre><code><b>HANDLE CreateFileMapping(
  HANDLE</b><i> hFile</i><b>,              </b>// handle to file to map
<b>  LPSECURITY_ATTRIBUTES</b><i> lpFileMappingAttributes</i><b>,</b>
<b>                             </b>// optional security attributes
<b>  DWORD</b><i> flProtect</i><b>,           </b>// protection for mapping object
<b>  DWORD</b><i> dwMaximumSizeHigh</i><b>,   </b>// high-order 32 bits of object size
  <b>DWORD </b><i>dwMaximumSizeLow</i><b>,</b>    // low-order 32 bits of object size
<b>  LPCTSTR</b><i> lpName</i>             // name of file-mapping object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hFile</i></dt>
<dd>
Handle to the file from which to create a mapping object. The file must be opened with an access mode compatible with the protection flags specified by the <i>flProtect</i> parameter. It is recommended, though not required, that files you intend to map be opened for exclusive access. 
<p>
If <i>hFile</i> is (HANDLE)0xFFFFFFFF, the calling process must also specify a mapping object size in the <i>dwMaximumSizeHigh</i> and <i>dwMaximumSizeLow</i> parameters. The function creates a file-mapping object of the specified size backed by the operating-system paging file rather than by a named file in the file system. The file-mapping object can be shared through duplication, through inheritance, or by name. 
</dd>
<dt>
<i>lpFileMappingAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpFileMappingAttributes</i> is NULL, the handle cannot be inherited. 
<p>
<b>Windows NT:</b> The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new file-mapping object. If <i>lpFileMappingAttributes</i> is NULL, the file-mapping object gets a default security descriptor. 
</dd>
<dt>
<i>flProtect</i></dt>
<dd>
Specifies the protection desired for the file view, when the file is mapped. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=34%>Value</th>
<th align=left width=66%>Description</th>
</tr>
<tr valign=top>
<td width=34%>PAGE_READONLY</td>
<td width=66%>Gives read-only access to the committed region of pages. An attempt to write to or execute the committed region results in an access violation. The file specified by the <i>hFile</i> parameter must have been created with GENERIC_READ access.</td>
</tr>
<tr valign=top>
<td width=34%>PAGE_READWRITE</td>
<td width=66%>Gives read-write access to the committed region of pages. The file specified by <i>hFile</i> must have been created with GENERIC_READ and GENERIC_WRITE access.</td>
</tr>
<tr valign=top>
<td width=34%>PAGE_WRITECOPY</td>
<td width=66%>Gives copy on write access to the committed region of pages. The files specified by the <i>hFile</i> parameter must have been created with GENERIC_READ and GENERIC_WRITE access.</td>
</tr>
</table><br>


<p>
In addition, an application can specify certain section attributes by combining (using the bitwise OR operator) one or more of the following section attribute values with one of the preceding page protection values: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Value</th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%>SEC_COMMIT</td>
<td width=71%>Allocates physical storage in memory or in the paging file on disk for all pages of a section. This is the default setting.</td>
</tr>
<tr valign=top>
<td width=29%>SEC_IMAGE</td>
<td width=71%>The file specified for a section's file mapping is an executable image file. Because the mapping information and file protection are taken from the image file, no other attributes are valid with SEC_IMAGE.</td>
</tr>
<tr valign=top>
<td width=29%>SEC_NOCACHE</td>
<td width=71%>All pages of a section are to be set as non-cacheable. This attribute is intended for architectures requiring various locking structures to be in memory that is never fetched into the processor's. On 80x86 and MIPS machines, using the cache for these structures only slows down the performance as the hardware keeps the caches coherent. Some device drivers require noncached data so that programs can write through to the physical memory. SEC_NOCACHE requires either the SEC_RESERVE or SEC_COMMIT to also be set.</td>
</tr>
<tr valign=top>
<td width=29%>SEC_RESERVE</td>
<td width=71%>Reserves all pages of a section without allocating physical storage. The reserved range of pages cannot be used by any other allocation operations until it is released. Reserved pages can be committed in subsequent calls to the <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> function. This attribute is valid only if the <i>hFile</i> parameter is (HANDLE)0xFFFFFFFF; that is, a file mapping object backed by the operating sytem paging file.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwMaximumSizeHigh</i></dt>
<dd>
Specifies the high-order 32 bits of the maximum size of the file-mapping object. </dd>
<dt>
<i>dwMaximumSizeLow</i></dt>
<dd>
Specifies the low-order 32 bits of the maximum size of the file-mapping object. If this parameter and <i>dwMaximumSizeHig </i>are zero, the maximum size of the file-mapping object is equal to the current size of the file identified by <i>hFile</i>. </dd>
<dt>
<i>lpName</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of the mapping object. The name can contain any character except the backslash character (\). 
<p>
If this parameter matches the name of an existing named mapping object, the function requests access to the mapping object with the protection specified by <i>flProtect</i>. 

<p>
If this parameter is NULL, the mapping object is created without a name. 

<p>
If <i>lpName</i> matches the name of an existing event, semaphore, mutex, waitable timer, or job, the function fails and the <a href="errors_3uwi.htm"><b>GetLastError</b></a> function returns ERROR_INVALID_HANDLE. This occurs because these objects share the same name space. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the file-mapping object. If the object existed before the function call, the function returns a handle to the existing object (with its current size, not the specified size) and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_ALREADY_EXISTS. </p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <b>GetLastError</b>. </p>
<h4>Remarks</h4>
<p>
After a file-mapping object has been created, the size of the file must not exceed the size of the file-mapping object; if it does, not all of the file's contents will be available for sharing. </p>
<p>
If an application specifies a size for the file-mapping object that is larger than the size of the actual named file on disk, the file on disk is grown to match the specified size of the file-mapping object. If the file cannot be grown, this results in a failure to create the file-mapping object. <b>GetLastError</b> will return <b>ERROR_DISK_FULL</b>.</p>
<p>
The handle that <b>CreateFileMapping</b> returns has full access to the new file-mapping object. It can be used with any function that requires a handle to a file-mapping object. File-mapping objects can be shared either through process creation, through handle duplication, or by name. For information on duplicating handles, see <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a>. For information on opening a file-mapping object by name, see <a href="fmap3_1h7r.htm"><b>OpenFileMapping</b></a>. </p>
<p>
<b>Windows 95:</b> File handles that have been used to create file-mapping objects must <i>not</i> be used in subsequent calls to file I/O functions, such as <b>ReadFile</b> and <b>WriteFile</b>. In general, if a file handle has been used in a successful call to the <b>CreateFileMapping</b> function, do not use that handle unless you first close the corresponding file-mapping object.</p>
<p>
Creating a file-mapping object creates the potential for mapping a view of the file but does not map the view. The <a href="fmap3_8p9h.htm"><b>MapViewOfFile</b></a> and <a href="fmap3_2it4.htm"><b>MapViewOfFileEx</b></a> functions map a view of a file into a process's address space. </p>
<p>
With one important exception, file views derived from a single file-mapping object are coherent, or identical, at a given time. If multiple processes have handles of the same file-mapping object, they see a coherent view of the data when they map a view of the file. </p>
<p>
The exception has to do with remote files. Although <b>CreateFileMapping</b> works with remote files, it does not keep them coherent. For example, if two computers both map a file as writeable, and both change the same page, each computer will only see its own writes to the page. When the data gets updated on the disk, it is not merged. </p>
<p>
A mapped file and a file accessed by means of the input and output (I/O) functions (<a href="filesio_39id.htm"><b>ReadFile</b></a> and <a href="filesio_3kkl.htm"><b>WriteFile</b></a>) are not necessarily coherent. </p>
<p>
To fully close a file mapping object, an application must unmap all mapped views of the file mapping object by calling <a href="fmap3_9011.htm"><b>UnmapViewOfFile</b></a>, and close the file mapping object handle by calling <a href="handobj_289x.htm"><b>CloseHandle</b></a>. The order in which these functions are called does not matter. The call to <b>UnmapViewOfFile</b> is necessary because mapped views of a file mapping object maintain internal open handles to the object, and a file mapping object will not close until all open handles to it are closed. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To guard against an access violation, use structured exception handling to protect any code that writes to or reads from a memory mapped view. For more information, see <a href="fmap3_638n.htm">Reading and Writing</a>.</p>
<p>
<b>Windows CE:</b> Windows CE does not use the <i>lpFileMappingAttributes</i> parameter. It must be NULL.</p>
<p>
This function will not work on a device that does not support Page-In.</p>
<h4>Example</h4>
<p>
To implement a mapping-object creation function that fails if the object already exists, an application can use the following code. </p>
<pre><code>hMap = CreateFileMapping(...); 

if (hMap != NULL &amp;&amp; GetLastError() == ERROR_ALREADY_EXISTS) 
{ 
    CloseHandle(hMap); 
    hMap = NULL; 
} 
return hMap; 
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="fmap3_61d3.htm">File Mapping Overview</a>, <a href="fmap3_0583.htm">File Mapping Functions</a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a>, <a href="fmap3_8p9h.htm"><b>MapViewOfFile</b></a>, <a href="fmap3_2it4.htm"><b>MapViewOfFileEx</b></a>, <a href="memman_2wz1.htm"><b>MapViewOfFileVlm</b></a>, <a href="fmap3_1h7r.htm"><b>OpenFileMapping</b></a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a>, <a href="fmap3_9011.htm"><b>UnmapViewOfFile</b></a>, <a href="memman_4eel.htm"><b>UnmapViewOfFileVlm</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="filesio_3kkl.htm"><b>WriteFile</b></a></p>
<p>&nbsp;</p></body>
</HTML>

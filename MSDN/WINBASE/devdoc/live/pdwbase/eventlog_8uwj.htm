<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Identifiers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_event_identifiers"></a>Event Identifiers</h3>
<p>
<i>Event identifiers</i> uniquely identify a particular event. Each <a href="eventlog_6jhv.htm">event source</a> can define its own numbered events and the description strings to which they are mapped. Event viewers can present these strings to the user. They should help the user understand what went wrong and suggest what actions to take. Direct the description at users solving their own problems, not at administrators or support technicians. Make the description clear and concise and avoid culture-specific phrases. </p>
<p>
The following sections discuss these description strings, and the insertion strings that serve as placeholders in the description strings.</p>

<h4><a name="_win32_description_strings"></a>Description Strings</h4>
<p>
The description strings in the event message file are indexed by event identifier, enabling Event Viewer to display event-specific text for any event based on the event identifier. All descriptions are localized and language dependent. The description strings may contain insertion string placeholders, of the form %<i>n</i>, where %1 indicates the first insertion string, and so on. For example, the following is a sample entry in the .MC file:</p>
<pre><code>MessageId=0x4
Severity=Error
Facility=System
SymbolicName=MSG_CMD_DELETE
Language=English
File %1 contains %2, which is in error.
 </code></pre>
<p>
In this case, the buffer returned by <a href="eventlog_2hif.htm"><b>ReadEventLog</b></a> contains insertion strings. The <b>NumStrings</b> member of the <a href="eventlog_7mcy.htm"><b>EVENTLOGRECORD</b></a> structure indicates the number of insertion strings. The <b>StringOffset</b> member of the <b>EVENTLOGRECORD</b> structure indicates the location of the first insertion string in the buffer.</p>
<p>
The description string can also contain placeholders for parameter strings from the parameter message file. The placeholders are of the form %%<i>n</i>, where %%1 is replaced by the parameter string with the identifier of 1, and so on. In this case, the event viewer uses <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a> and <a href="strings_0sdh.htm"><b>FormatMessage</b></a> to retrieve the insertion string from the file indicated by the source's <b>ParameterMessageFile</b> registry value.</p>

<h4><a name="_win32_insertion_strings"></a>Insertion Strings</h4>
<p>
Insertion strings are optional language-independent strings used to fill in values for placeholders in description strings. Because the strings are not localized, it is critical that these placeholders be used only to represent language-independent strings such as numeric values, file names, user names, and so on. The string length must not exceed 32 kilobytes – 1 characters. </p>
<p>
It is not acceptable to use several strings to create a larger description. The insertion string should be treated as data, not text. For example, the following example is <i>not</i> recommended: </p>
<pre><code>LPSTR pszString1 = "successfully"; 
LPSTR pszString2 = "not"; 
LPSTR pszDescription = "The user was %1 added to the database."; 
 </code></pre>
<p>
It is not acceptable to use <code>pszString1</code> and <code>pszString2</code> to form the strings "The user was successfully added to the database." and "The user was not added to the database." There are three reasons this substitution is not effective: 
<ul>
<li>
The strings "successfully" and "not" should be localized. </li>
<li>
Even if the description strings are obtained from language-dependent message files, this is done when the event is logged, not when it is viewed. When the event is viewed, the language may be wrong. </li>
<li>
Such substitutions of adverbs and adjectives will not work in many other languages. The preceding example should use two separate events, each with its own description string. </li>
</ul>
<p>
In the following example, it is appropriate to use either <code>pszString1</code> or <code>pszString2</code> for the insertion string in <code>pszDescription</code>. </p>
<pre><code>LPSTR pszString1 = "c:\\testapp1.c"; 
LPSTR pszString2 = "c:\\testapp2.c"; 
LPSTR pszDescription = "Access denied. Attempted to open the file %1." 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LDT_ENTRY</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_ldt_entry_str"></a>LDT_ENTRY</h1>
<p>
The <b>LDT_ENTRY</b> structure describes an entry in the descriptor table. This structure is valid only on x86-based systems. </p>
<pre><code>typedef struct _LDT_ENTRY { // ldte 
    WORD LimitLow; 
    WORD BaseLow; 
    union { 
        struct { 
            BYTE BaseMid; 
            BYTE Flags1; 
            BYTE Flags2; 
            BYTE BaseHi; 
        } Bytes; 
        struct { 
            DWORD BaseMid : 8; 
            DWORD Type : 5; 
            DWORD Dpl : 2; 
            DWORD Pres : 1; 
            DWORD LimitHi : 4; 
            DWORD Sys : 1; 
            DWORD Reserved_0 : 1; 
            DWORD Default_Big : 1; 
            DWORD Granularity : 1; 
            DWORD BaseHi : 8; 
        } Bits; 
    } HighWord; 
} LDT_ENTRY, *PLDT_ENTRY; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>LimitLow</b></dt>
<dd>
Contains the low 16 bits of the address of the last byte in the segment. </dd>
<dt>
<b>BaseLow</b></dt>
<dd>
Contains the low 16 bits of the base address of the segment. </dd>
<dt>
<b>HighWord</b></dt>
<dd>
Contains the high two words of the descriptor. This member may be interpreted as bytes or collections of bits, depending on the level of detail required. 
<p>
The members of the <b>Bits</b> structure are as follows: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Member</th>
<th align=left width=76%>Contents</th>
</tr>
<tr valign=top>
<td width=24%><b>BaseMid</b></td>
<td width=76%>Middle bits (16–23) of the base address of the segment.</td>
</tr>
<tr valign=top>
<td width=24%><b>Type</b></td>
<td width=76%>Bitmask that indicates the type of segment. This member can be one of the following values:</td>
</tr>
</table><br>


<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=20%>Value</th>
<th align=left width=80%>Meaning</th>
</tr>
<tr valign=top>
<td width=20%>0</td>
<td width=80%>Read-only data segment</td>
</tr>
<tr valign=top>
<td width=20%>1</td>
<td width=80%>Read-write data segment</td>
</tr>
<tr valign=top>
<td width=20%>2</td>
<td width=80%>Unused segment</td>
</tr>
<tr valign=top>
<td width=20%>3</td>
<td width=80%>Read-write expand-down data segment</td>
</tr>
<tr valign=top>
<td width=20%>4</td>
<td width=80%>Execute-only code segment</td>
</tr>
<tr valign=top>
<td width=20%>5</td>
<td width=80%>Executable-readable code segment</td>
</tr>
<tr valign=top>
<td width=20%>6</td>
<td width=80%>Execute-only "conforming" code segment</td>
</tr>
<tr valign=top>
<td width=20%>7</td>
<td width=80%>Executable-readable "conforming" code segment</td>
</tr>
</table><br>


<table cellspacing=4 cols=2>
<tr valign=top>
<td width=24%><b>Dpl</b></td>
<td width=76%>Privilege level of the descriptor. This member is an integer value in the range 0 (most privileged) through 3 (least privileged).</td>
</tr>
<tr valign=top>
<td width=24%><b>Pres</b></td>
<td width=76%>Present flag. This member is 1 if the segment is present in physical memory or 0 if it is not.</td>
</tr>
<tr valign=top>
<td width=24%><b>LimitHi</b></td>
<td width=76%>High bits (16–19) of the address of the last byte in the segment.</td>
</tr>
<tr valign=top>
<td width=24%><b>Sys</b></td>
<td width=76%>Space that is available to system programmers. This member might be used for marking segments in some system-specific way.</td>
</tr>
<tr valign=top>
<td width=24%><b>Reserved_0</b></td>
<td width=76%>Reserved.</td>
</tr>
<tr valign=top>
<td width=24%><b>Default_Big</b></td>
<td width=76%>Size of segment. If the segment is a data segment, this member contains 1 if the segment is larger than 64 kilobytes (K) or 0 if the segment is smaller than or equal to 64K.</td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=76%>If the segment is a code segment, this member contains 1 if the segment is a code segment and runs with the default (native mode) instruction set. This member contains 0 if the code segment is an 80286 code segment and runs with 16-bit offsets and the 80286-compatible instruction set.</td>
</tr>
<tr valign=top>
<td width=24%><b>Granularity</b></td>
<td width=76%>Granularity. This member contains 0 if the segment is byte granular, 1 if the segment is page granular.</td>
</tr>
<tr valign=top>
<td width=24%><b>BaseHi</b></td>
<td width=76%>High bits (24–31) of the base address of the segment.</td>
</tr>
</table><br>


<p>
The members of the <b>Bytes</b> structure are as follows: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=20%>Member</th>
<th align=left width=80%>Contents</th>
</tr>
<tr valign=top>
<td width=20%><b>BaseMid</b></td>
<td width=80%>Middle bits (16–23) of the base address of the segment.</td>
</tr>
<tr valign=top>
<td width=20%><b>Flags1</b></td>
<td width=80%>Values of the <b>Type</b>, <b>Dpl</b>, and <b>Pres</b> members in the <b>Bits</b> structure.</td>
</tr>
<tr valign=top>
<td width=20%><b>Flags2</b></td>
<td width=80%>Values of the <b>LimitHi</b>, <b>Sys</b>, <b>Reserved_0</b>, <b>Default_Big</b>, and <b>Granularity</b> members in the <b>Bits</b> structure.</td>
</tr>
<tr valign=top>
<td width=20%><b>BaseHi</b></td>
<td width=80%>High bits (24–31) of the base address of the segment.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>GetThreadSelectorEntry</b> function fills this structure with information from an entry in the descriptor table. You can use this information to convert a segment-relative address to a linear virtual address. </p>
<p>
The base address of a segment is the address of offset 0 in the segment. To calculate this value, combine the <b>BaseLow</b>, <b>BaseMid</b>, and <b>BaseHi</b> members. </p>
<p>
The limit of a segment is the address of the last byte that can be addressed in the segment. To calculate this value, combine the <b>LimitLow</b> and <b>LimitHi</b> members. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnt.h.</p>
<h4>See Also</h4>
<p>
<a href="debug_4yxz.htm">Debugging Overview</a>, <a href="debug_8lo3.htm">Debugging Structures</a>, <a href="debug_63cp.htm"><b>GetThreadSelectorEntry</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

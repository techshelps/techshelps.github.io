<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROCESS_HEAP_ENTRY</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_process_heap_entry_str"></a>PROCESS_HEAP_ENTRY</h1>
<p>
The <b>PROCESS_HEAP_ENTRY</b> structure contains information about a heap element. The <a href="memman_1ca3.htm"><b>HeapWalk</b></a> function uses a <b>PROCESS_HEAP_ENTRY </b>structure to enumerate the elements of a heap.</p>
<pre><code>typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lpData</b></dt>
<dd>
Pointer to the data portion of the heap element. 
<p>
To initiate a <b>HeapWalk</b> heap enumeration, set <b>lpData</b> to NULL.

<p>
If the PROCESS_HEAP_REGION bit flag is set in the <b>wFlags</b> member, <b>lpData</b> points to the first virtual address used by the region. 

<p>
If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <b>wFlags</b>, <b>lpData</b> points to the beginning of the range of uncommitted memory. 
</dd>
<dt>
<b>cbData</b></dt>
<dd>
Specifies the size, in bytes, of the data portion of the heap element.
<p>
If the PROCESS_HEAP_REGION bit flag is set in <b>wFlags</b>, <b>cbData</b> specifies the total size, in bytes, of the address space that is reserved for this region. 

<p>
If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <b>wFlags</b>, <b>cbData</b> specifies the size, in bytes, of the range of uncommitted memory. 
</dd>
<dt>
<b>cbOverhead</b></dt>
<dd>
Specifies the size, in bytes, of the data used by the system to maintain information about the heap element. These overhead bytes are in addition to the <b>cbData</b> bytes of the data portion of the heap element.
<p>
If the PROCESS_HEAP_REGION bit flag is set in <b>wFlags</b>, <b>cbOverhead</b> specifies the size, in bytes, of the heap control structures that describe the region. 

<p>
If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <b>wFlags</b>, <b>cbOverhead</b> specifies the size, in bytes, of the control structures that describe this uncommitted range. 
</dd>
<dt>
<b>iRegionIndex</b></dt>
<dd>
Handle to the heap region that contains the heap element. A heap consists of one or more regions of virtual memory, each with a unique region index.
<p>
In the first heap entry returned for most heap regions, <b>HeapWalk</b> sets the PROCESS_HEAP_REGION flag in the <b>wFlags</b> member. When this flag is set, the members of the <b>Region</b> structure contain additional information about the region.

<p>
The <a href="memman_6krn.htm"><b>HeapAlloc</b></a> function sometimes uses the <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> function to allocate large blocks from a growable heap. The heap manager treats such a large block allocation as a separate region with a unique region index. <b>HeapWalk</b> does not set the PROCESS_HEAP_REGION flag in the heap entry returned for a large block region, so the members of the <b>Region</b> structure are not valid. You can use the <a href="memman_6v7d.htm"><b>VirtualQuery</b></a> function to get additional information about a large block region.
</dd>
<dt>
<b>wFlags</b></dt>
<dd>
A set of bit flags that specify properties of the heap element. Some of these flags affect the meaning of other members of this <b>PROCESS_HEAP_ENTRY</b> data structure. The following bit-flag constants are defined: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Value</th>
<th align=left width=45%>Meaning</th>
</tr>
<tr valign=top>
<td width=55%>PROCESS_HEAP_REGION</td>
<td width=45%>If this flag is set, the heap element is located at the beginning of a region of contiguous virtual memory in use by the heap. <p>
If this flag is set, the <b>lpData</b> member of the structure points to the first virtual address used by the region; the <b>cbData</b> member specifies the total size, in bytes, of the address space that is reserved for this region; and the <b>cbOverhead</b> member specifies the size, in bytes, of the heap control structures that describe the region.</p>
<p>
If this flag is set, the <b>Region</b> structure becomes valid. The <b>dwCommittedSize</b>, <b>dwUnCommittedSize</b>, <b>lpFirstBlock</b>, and <b>lpLastBlock</b> members of the structure contain additional information about the region.</p>
</td>
</tr>
<tr valign=top>
<td width=55%>PROCESS_HEAP_UNCOMMITTED_RANGE</td>
<td width=45%>If this flag is set, the heap element is located in a range of uncommitted memory within the heap region. <p>
If this flag is set, the <b>lpData</b> member points to the beginning of the range of uncommitted memory; the <b>cbData</b> member specifies the size, in bytes, of the range of uncommitted memory; and the <b>cbOverhead</b> member specifies the size, in bytes, of the control structures that describe this uncommitted range.</p>
</td>
</tr>
<tr valign=top>
<td width=55%>PROCESS_HEAP_ENTRY_BUSY</td>
<td width=45%>If this flag is set, the heap element is an allocated block. <p>
If both this flag and the PROCESS_HEAP_ENTRY_MOVEABLE flag are set, the <b>Block</b> structure becomes valid. The <b>hMem</b> member of the <b>Block</b> structure contains a handle to the allocated, moveable memory block. </p>
</td>
</tr>
<tr valign=top>
<td width=55%>PROCESS_HEAP_ENTRY_MOVEABLE</td>
<td width=45%>This flag is only valid if the PROCESS_HEAP_ENTRY_BUSY flag is set, indicating that the heap element is an allocated block.<p>
If this flag is valid and set, the block was allocated with the LMEM_MOVEABLE or GMEM_MOVEABLE flag, and the <b>Block</b> structure becomes valid. The <b>hMem</b> member of the <b>Block</b> structure contains a handle to the allocated, moveable memory block. </p>
</td>
</tr>
<tr valign=top>
<td width=55%>PROCESS_HEAP_ENTRY_DDESHARE</td>
<td width=45%>This flag is only valid if the PROCESS_HEAP_ENTRY_BUSY flag is set, indicating that the heap element is an allocated block.<p>
If this flag is valid and set, the block was allocated with the GMEM_DDESHARE flag. For a discussion of the GMEM_DDESHARE flag, see <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>.</p>
</td>
</tr>
</table><br>

</dd>
<dt>
<b>Block</b></dt>
<dd>
This structure is valid only if both the PROCESS_HEAP_ENTRY_BUSY and PROCESS_HEAP_ENTRY_MOVEABLE flags in <b>wFlags</b> are set. 
<p>
The members of the <b>Block</b> structure are as follows: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=34%>Member</th>
<th align=left width=66%>Description</th>
</tr>
<tr valign=top>
<td width=34%><b>hMem</b></td>
<td width=66%>Contains a handle to the allocated, moveable memory block.</td>
</tr>
<tr valign=top>
<td width=34%><b>dwReserved</b></td>
<td width=66%>Reserved; not used.</td>
</tr>
</table><br>

</dd>
<dt>
<b>Region</b></dt>
<dd>
This structure is valid only if the PROCESS_HEAP_REGION flag is set in the <b>wFlags</b> member. 
<p>
The members of the <b>Region</b> structure are as follows: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Member</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%><b>dwCommittedSize</b></td>
<td width=67%>Specifies the number of bytes in the heap region that are currently committed as free memory blocks, busy memory blocks, or heap control structures.<p>
This is an optional field that is set to zero if the number of committed bytes is not available.</p>
</td>
</tr>
<tr valign=top>
<td width=33%><b>dwUnCommittedSize</b></td>
<td width=67%>Specifies the number of bytes in the heap region that are currently uncommitted.<p>
This is an optional field that is set to zero if the number of uncommitted bytes is not available.  </p>
</td>
</tr>
<tr valign=top>
<td width=33%><b>lpFirstBlock</b></td>
<td width=67%>Pointer to the first valid memory block in this heap region.</td>
</tr>
<tr valign=top>
<td width=33%><b>lpLastBlock</b></td>
<td width=67%>Pointer to the first invalid memory block in thisheap region. </td>
</tr>
</table><br>

</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_2rw3.htm">Memory Management Structures</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_6krn.htm"><b>HeapAlloc</b></a>, <a href="memman_1ca3.htm"><b>HeapWalk</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="memman_6v7d.htm"><b>VirtualQuery</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

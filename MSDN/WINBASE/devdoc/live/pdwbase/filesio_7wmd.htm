<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateFile</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createfile"></a>CreateFile</h1>
<p>
The <b>CreateFile</b> function creates or opens the following objects and returns a handle that can be used to access the object: 
<ul>
<li>
files </li>
<li>
pipes </li>
<li>
mailslots </li>
<li>
communications resources </li>
<li>
disk devices (Windows NT only)</li>
<li>
consoles </li>
<li>
directories (open only)</li>
</ul>
<pre><code><b>HANDLE CreateFile(
  LPCTSTR</b><i> lpFileName</i><b>,          </b>// pointer to name of the file
<b>  DWORD</b><i> dwDesiredAccess</i><b>,       </b>// access (read-write) mode
  <b>DWORD</b> <i>dwShareMode</i><b>,</b>           // share mode
<b>  LPSECURITY_ATTRIBUTES</b><i> lpSecurityAttributes</i><b>,</b>
<b>                               </b>// pointer to security attributes
<b>  DWORD</b><i> dwCreationDisposition</i><b>,  </b>// how to create
<b>  DWORD</b><i> dwFlagsAndAttributes</i><b>,  </b>// file attributes
<b>  HANDLE</b><i> hTemplateFile</i>         // handle to file with attributes to 
                               // copy
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpFileName</i></dt>
<dd>
Pointer to a null-terminated string that specifies the name of the object (file, pipe, mailslot, communications resource, disk device, console, or directory) to create or open. 
<p>
If *<i>lpFileName</i> is a path, there is a default string size limit of MAX_PATH characters. This limit is related to how the <b>CreateFile </b>function parses paths. 

<p>
<b>Windows NT: </b>You can use paths longer than MAX_PATH characters by calling the wide (W) version of <b>CreateFile</b> and prepending "\\?\" to the path. The "\\?\" tells the function to turn off path parsing. This lets you use paths that are nearly 32,000 Unicode characters long. However, each component in the path cannot be more than MAX_PATH characters long. You must use fully-qualified paths with this technique. This also works with UNC names. The "\\?\" is ignored as part of the path. For example, "\\?\C:\myworld\private" is seen as "C:\myworld\private", and "\\?\UNC\tom_1\hotstuff\coolapps" is seen as "\\tom_1\hotstuff\coolapps". 
</dd>
<dt>
<i>dwDesiredAccess</i></dt>
<dd>
Specifies the type of access to the object. An application can obtain read access, write access, read-write access, or device query access. This parameter can be any combination of the following values. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Value</th>
<th align=left width=69%>Meaning</th>
</tr>
<tr valign=top>
<td width=31%>0</td>
<td width=69%>Specifies device query access to the object. An application can query device attributes without accessing the device.</td>
</tr>
<tr valign=top>
<td width=31%>GENERIC_READ</td>
<td width=69%>Specifies read access to the object. Data can be read from the file and the file pointer can be moved. Combine with GENERIC_WRITE for read-write access. </td>
</tr>
<tr valign=top>
<td width=31%>GENERIC_WRITE</td>
<td width=69%>Specifies write access to the object. Data can be written to the file and the file pointer can be moved. Combine with GENERIC_READ for read-write access. </td>
</tr>
</table><br>

</dd>
<dt>
<i>dwShareMode</i></dt>
<dd>
Set of bit flags that specifies how the object can be shared. If <i>dwShareMode</i> is 0, the object cannot be shared. Subsequent open operations on the object will fail, until the handle is closed. 
<p>
To share the object, use a combination of one or more of the following values: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Value</th>
<th align=left width=65%>Meaning</th>
</tr>
<tr valign=top>
<td width=35%>FILE_SHARE_DELETE</td>
<td width=65%><b>Windows NT:</b> Subsequent open operations on the object will succeed only if delete access is requested. </td>
</tr>
<tr valign=top>
<td width=35%>FILE_SHARE_READ</td>
<td width=65%>Subsequent open operations on the object will succeed only if read access is requested. </td>
</tr>
<tr valign=top>
<td width=35%>FILE_SHARE_WRITE</td>
<td width=65%>Subsequent open operations on the object will succeed only if write access is requested. </td>
</tr>
</table><br>

</dd>
<dt>
<i>lpSecurityAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is NULL, the handle cannot be inherited. 
<p>
<b>Windows NT:</b> The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the object. If <i>lpSecurityAttributes</i> is NULL, the object gets a default security descriptor. The target file system must support security on files and directories for this parameter to have an effect on files.
</dd>
<dt>
<i>dwCreationDisposition</i></dt>
<dd>
Specifies which action to take on files that exist, and which action to take when files do not exist. For more information about this parameter, see the Remarks section. This parameter must be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>Value</th>
<th align=left width=62%>Meaning</th>
</tr>
<tr valign=top>
<th align=left width=38%>CREATE_NEW</th>
<td width=62%>Creates a new file. The function fails if the specified file already exists.</td>
</tr>
<tr valign=top>
<th align=left width=38%>CREATE_ALWAYS</th>
<td width=62%>Creates a new file. If the file exists, the function overwrites the file and clears the existing attributes.</td>
</tr>
<tr valign=top>
<th align=left width=38%>OPEN_EXISTING</th>
<td width=62%>Opens the file. The function fails if the file does not exist.</td>
</tr>
<tr valign=top>
<td width=38%></td>
<td width=62%>See the Remarks section for a discussion of why you should use the OPEN_EXISTING flag if you are using the <b>CreateFile</b> function for devices, including the console.</td>
</tr>
<tr valign=top>
<td width=38%>OPEN_ALWAYS</td>
<td width=62%>Opens the file, if it exists. If the file does not exist, the function creates the file as if <i>dwCreationDisposition</i> were CREATE_NEW.</td>
</tr>
<tr valign=top>
<td width=38%>TRUNCATE_EXISTING</td>
<td width=62%>Opens the file. Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at least GENERIC_WRITE access. The function fails if the file does not exist.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwFlagsAndAttributes</i></dt>
<dd>
Specifies the file attributes and flags for the file. 
<p>
Any combination of the following attributes is acceptable for the <i>dwFlagsAndAttributes</i> parameter, except all other file attributes override FILE_ATTRIBUTE_NORMAL. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Attribute</th>
<th align=left width=48%>Meaning</th>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_ARCHIVE</td>
<td width=48%>The file should be archived. Applications use this attribute to mark files for backup or removal.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_HIDDEN</td>
<td width=48%>The file is hidden. It is not to be included in an ordinary directory listing.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_NORMAL</td>
<td width=48%>The file has no other attributes set. This attribute is valid only if used alone.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_OFFLINE</td>
<td width=48%>The data of the file is not immediately available. Indicates that the file data has been physically moved to offline storage.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_READONLY</td>
<td width=48%>The file is read only. Applications can read the file but cannot write to it or delete it.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_SYSTEM</td>
<td width=48%>The file is part of or is used exclusively by the operating system.</td>
</tr>
<tr valign=top>
<td width=52%>FILE_ATTRIBUTE_TEMPORARY</td>
<td width=48%>The file is being used for temporary storage. File systems attempt to keep all of the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.</td>
</tr>
</table><br>


<p>
Any combination of the following flags is acceptable for the <i>dwFlagsAndAttributes</i> parameter. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=14%>Flag</th>
<th align=left width=86%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_WRITE_THROUGH</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Instructs the system to write through any intermediate cache and go directly to disk. The system can still cache write operations, but cannot lazily flush them.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_OVERLAPPED</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Instructs the system to initialize the object, so that operations that take a significant amount of time to process return ERROR_IO_PENDING. When the operation is finished, the specified event is set to the signaled state.</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>When you specify FILE_FLAG_OVERLAPPED, the file read and write functions <i>must</i> specify an <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure. That is, when FILE_FLAG_OVERLAPPED is specified, an application <i>must</i> perform overlapped reading and writing.</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>When FILE_FLAG_OVERLAPPED is specified, the system does not maintain the file pointer. The file position must be passed as part of the <i>lpOverlapped</i> parameter (pointing to an <b>OVERLAPPED</b> structure) to the file read and write functions.</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>This flag also enables more than one operation to be performed simultaneously with the handle (a simultaneous read and write operation, for example).</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_NO_BUFFERING</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Instructs the system to open the file with no intermediate buffering or caching. When combined with FILE_FLAG_OVERLAPPED, the flag gives maximum asynchronous performance, because the I/O does not rely on the synchronous operations of the memory manager. However, some I/O operations will take longer, because data is not being held in the cache. <p>
An application must meet certain requirements when working with files opened with FILE_FLAG_NO_BUFFERING:
<ul>
<li>
File access must begin at byte offsets within the file that are integer multiples of the volume's sector size. </li>
<li>
File access must be for numbers of bytes that are integer multiples of the volume's sector size. For example, if the sector size is 512 bytes, an application can request reads and writes of 512, 1024, or 2048 bytes, but not of 335, 981, or 7171 bytes. </li>
<li>
Buffer addresses for read and write operations must be sector aligned (aligned on addresses in memory that are integer multiples of the volume's sector size). </li>
</ul>
<p>
One way to align buffers on integer multiples of the volume sector size is to use <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> to allocate the buffers. It allocates memory that is aligned on addresses that are integer multiples of the operating system's memory page size. Because both memory page and volume sector sizes are powers of 2, this memory is also aligned on addresses that are integer multiples of a volume's sector size. </p>
<p>
An application can determine a volume's sector size by calling the <a href="filesio_2pt1.htm"><b>GetDiskFreeSpace</b></a> function. </p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_RANDOM_ACCESS</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Indicates that the file is accessed randomly. The system can use this as a hint to optimize file caching.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_SEQUENTIAL_SCAN</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Indicates that the file is to be accessed sequentially from beginning to end. The system can use this as a hint to optimize file caching. If an application moves the file pointer for random access, optimum caching may not occur; however, correct operation is still guaranteed.</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Specifying this flag can increase performance for applications that read large files using sequential access. Performance gains can be even more noticeable for applications that read large files mostly sequentially, but occasionally skip over small ranges of bytes.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_DELETE_ON_CLOSE</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Indicates that the operating system is to delete the file immediately after all of its handles have been closed, not just the handle for which you specified FILE_FLAG_DELETE_ON_CLOSE. <p>
Subsequent open requests for the file will fail, unless FILE_SHARE_DELETE is used. </p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_BACKUP_SEMANTICS</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%><b>Windows NT:</b> Indicates that the file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks, provided it has the necessary privileges. The relevant privileges are SE_BACKUP_NAME and SE_RESTORE_NAME.<p>
You can also set this flag to obtain a handle to a directory. A directory handle can be passed to some Win32 functions in place of a file handle.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_POSIX_SEMANTICS</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Indicates that the file is to be accessed according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support such naming. Use care when using this option because files created with this flag may not be accessible by applications written for MS-DOS or 16-bit Windows.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_OPEN_REPARSE_POINT</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Specifying this flag inhibits the reparse behavior of NTFS reparse points. When the file is opened, a file handle is returned, whether the filter that controls the reparse point is operational or not. This flag cannot be used with the CREATE_ALWAYS flag.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>FILE_FLAG_OPEN_NO_RECALL</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=86%>Indicates that the file data is requested, but it should continue to reside in remote storage. It should not be transported back to local storage. This flag is intended for use by remote storage systems or the Hierarchical Storage Management system.</td>
</tr>
</table><br>


<p>
If the <b>CreateFile</b> function opens the client side of a named pipe, the <i>dwFlagsAndAttributes</i> parameter can also contain Security Quality of Service information. For more information, see <a href="accclsrv_701f.htm">Impersonation Levels</a>. When the calling application specifies the SECURITY_SQOS_PRESENT flag, the <i>dwFlagsAndAttributes</i> parameter can contain one or more of the following values: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Value</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td width=50%>SECURITY_ANONYMOUS</td>
<td width=50%>Specifies to impersonate the client at the Anonymous impersonation level.</td>
</tr>
<tr valign=top>
<td width=50%>SECURITY_IDENTIFICATION</td>
<td width=50%>Specifies to impersonate the client at the Identification impersonation level.</td>
</tr>
<tr valign=top>
<td width=50%>SECURITY_IMPERSONATION</td>
<td width=50%>Specifies to impersonate the client at the Impersonation impersonation level.</td>
</tr>
<tr valign=top>
<td width=50%>SECURITY_DELEGATION</td>
<td width=50%>Specifies to impersonate the client at the Delegation impersonation level.</td>
</tr>
<tr valign=top>
<td width=50%>SECURITY_CONTEXT_TRACKING</td>
<td width=50%>Specifies that the security tracking mode is dynamic. If this flag is not specified, Security Tracking Mode is static.</td>
</tr>
<tr valign=top>
<td width=50%>SECURITY_EFFECTIVE_ONLY</td>
<td width=50%>Specifies that only the enabled aspects of the client's security context are available to the server. If you do not specify this flag, all aspects of the client's security context are available.<p>
This flag allows the client to limit the groups and privileges that a server can use while impersonating the client.</p>
</td>
</tr>
</table><br>

</dd>
<dt>
<i>hTemplateFile</i></dt>
<dd>
Specifies a handle with GENERIC_READ access to a template file. The template file supplies file attributes and extended attributes for the file being created. 
<p>
<b>Windows 95:</b> The <i>hTemplateFile</i> parameter must be NULL. If you supply a handle, the call fails and <b>GetLastError</b> returns ERROR_NOT_SUPPORTED.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is an open handle to the specified file. If the specified file exists before the function call and <i>dwCreationDisposition</i> is CREATE_ALWAYS or OPEN_ALWAYS, a call to <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_ALREADY_EXISTS (even though the function has succeeded). If the file does not exist before the call, <b>GetLastError</b> returns zero. </p>
<p>
If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call <b>GetLastError</b>. </p>
<h4>Remarks</h4>
<p>
Use the <a href="handobj_289x.htm"><b>CloseHandle</b></a> function to close an object handle returned by <b>CreateFile</b>. </p>
<p>
As noted above, specifying zero for <i>dwDesiredAccess</i> allows an application to query device attributes without actually accessing the device. This type of querying is useful, for example, if an application wants to determine the size of a floppy disk drive and the formats it supports without having a floppy in the drive. </p>
<h4>Files</h4>
<p>
When creating a new file, the <b>CreateFile</b> function performs the following actions: 
<ul>
<li>
Combines the file attributes and flags specified by <i>dwFlagsAndAttributes</i> with FILE_ATTRIBUTE_ARCHIVE. </li>
<li>
Sets the file length to zero. </li>
<li>
Copies the extended attributes supplied by the template file to the new file if the <i>hTemplateFile</i> parameter is specified. </li>
</ul>
<p>
When opening an existing file, <b>CreateFile</b> performs the following actions: 
<ul>
<li>
Combines the file flags specified by <i>dwFlagsAndAttributes</i> with existing file attributes. <b>CreateFile</b> ignores the file attributes specified by <i>dwFlagsAndAttributes</i>. </li>
<li>
Sets the file length according to the value of <i>dwCreationDisposition</i>. </li>
<li>
Ignores the <i>hTemplateFile</i> parameter. </li>
<li>
Ignores the <b>lpSecurityDescriptor</b> member of the <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure if the <i>lpSecurityAttributes</i> parameter is not NULL. The other structure members are used. The <b>bInheritHandle</b> member is the only way to indicate whether the file handle can be inherited. </li>
</ul>
<p>
If you are attempting to create a file on a floppy drive that does not have a floppy disk or a CD-ROM drive that does not have a CD, the system displays a message box asking the user to insert a disk or a CD, respectively. To prevent the system from displaying this message box, call the <a href="errors_38px.htm"><b>SetErrorMode</b></a> function with SEM_FAILCRITICALERRORS.</p>
<p>
<b>Windows NT: </b>Some file systems, such as NTFS, support compression or encryption for individual files and directories. On volumes formatted for such a file system, a new file inherits the compression and encryption attributes of its directory.</p>
<p>
You cannot use the <b>CreateFile</b> function to set a file's compression or encryption state. Use the <a href="devio_9quk.htm"><b>DeviceIoControl</b></a> function to set a file's compression state. Use the <a href="fsys_41k5.htm"><b>EncryptFile</b></a> function to set a file's encryption state.</p>
<h4>Pipes</h4>
<p>
If <b>CreateFile</b> opens the client end of a named pipe, the function uses any instance of the named pipe that is in the listening state. The opening process can duplicate the handle as many times as required but, once opened, the named pipe instance cannot be opened by another client. The access specified when a pipe is opened must be compatible with the access specified in the <i>dwOpenMode</i> parameter of the <a href="pipes_4w6d.htm"><b>CreateNamedPipe</b></a> function. For more information about pipes, see <a href="pipes_2vqr.htm">Pipes</a>. </p>
<h4>Mailslots</h4>
<p>
If <b>CreateFile</b> opens the client end of a mailslot, the function returns INVALID_HANDLE_VALUE if the mailslot client attempts to open a local mailslot before the mailslot server has created it with the <a href="mailslot_37lg.htm"><b>CreateMailSlot</b></a> function. For more information about mailslots, see <a href="mailslot_7gj7.htm">Mailslots</a>. </p>
<h4>Communications Resources</h4>
<p>
The <b>CreateFile</b> function can create a handle to a communications resource, such as the serial port COM1. For communications resources, the <i>dwCreationDisposition</i> parameter must be OPEN_EXISTING, and the <i>hTemplate</i> parameter must be NULL. Read, write, or read-write access can be specified, and the handle can be opened for overlapped I/O. For more information about communications, see <a href="commun_4m7n.htm">Communications</a>. </p>
<p>
<b>Disk Devices</b></p>
<p>
<b>Windows NT:</b> You can use the <b>CreateFile</b> function to open a disk drive or a partition on a disk drive. The function returns a handle to the disk device; that handle can be used with the <a href="devio_9quk.htm"><b>DeviceIOControl</b></a> function. The following requirements must be met in order for such a call to succeed: 
<ul>
<li>
The caller must have administrative privileges for the operation to succeed on a hard disk drive. </li>
<li>
The <i>lpFileName</i> string should be of the form <b>\\.\PHYSICALDRIVE<i>x</i></b> to open the hard disk <i>x</i>. Hard disk numbers start at zero. For example: </li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>String</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%><b>\\.\PHYSICALDRIVE2</b></td>
<td width=64%>Obtains a handle to the third physical drive on the user's computer.</td>
</tr>
</table><br>
<ul>
<li>
The <i>lpFileName</i> string should be <b>\\.\<i>x</i>:</b> to open a floppy drive <i>x</i> or a partition <i>x</i> on a hard disk. For example: </li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=17%>String</th>
<th align=left width=83%>Meaning</th>
</tr>
<tr valign=top>
<td width=17%>\\<b>.</b>\<b>A:</b></td>
<td width=83%>Obtains a handle to drive A on the user's computer.</td>
</tr>
<tr valign=top>
<td width=17%>\\<b>.</b>\<b>C:</b></td>
<td width=83%>Obtains a handle to drive C on the user's computer.</td>
</tr>
</table><br>
<p>
Note that all I/O buffers must be sector aligned (aligned on addresses in memory that are integer multiples of the volume's sector size), even if the disk device is opened without the FILE_FLAG_NO_BUFFERING flag.</p>
<p>
<b>Windows 95:</b> This technique does not work for opening a logical drive. In Windows 95, specifying a string in this form causes <b>CreateFile</b> to return an error.
<ul>
<li>
The <i>dwCreationDisposition</i> parameter must have the OPEN_EXISTING value. </li>
<li>
When opening a floppy disk or a partition on a hard disk, you must set the FILE_SHARE_WRITE flag in the <i>dwShareMode</i> parameter.</li>
</ul>
<h4>Consoles</h4>
<p>
The <b>CreateFile</b> function can create a handle to console input (CONIN$). If the process has an open handle to it as a result of inheritance or duplication, it can also create a handle to the active screen buffer (CONOUT$). The calling process must be attached to an inherited console or one allocated by the <a href="conchar_6smd.htm"><b>AllocConsole</b></a> function. For console handles, set the <b>CreateFile</b> parameters as follows: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%>Parameters</th>
<th align=left width=68%>Value</th>
</tr>
<tr valign=top>
<td width=32%><i>lpFileName</i></td>
<td width=68%>Use the CONIN$ value to specify console input and the CONOUT$ value to specify console output.</td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=68%>CONIN$ gets a handle to the console's input buffer, even if the <a href="conchar_7y79.htm"><b>SetStdHandle</b></a> function redirected the standard input handle. To get the standard input handle, use the <a href="conchar_7k9x.htm"><b>GetStdHandle</b></a> function.</td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=68%>CONOUT$ gets a handle to the active screen buffer, even if <b>SetStdHandle</b> redirected the standard output handle. To get the standard output handle, use <b>GetStdHandle</b>.</td>
</tr>
<tr valign=top>
<td width=32%><i>dwDesiredAccess</i></td>
<td width=68%>GENERIC_READ | GENERIC_WRITE is preferred, but either one can limit access.</td>
</tr>
<tr valign=top>
<td width=32%><i>dwShareMode</i></td>
<td width=68%>If the calling process inherited the console or if a child process should be able to access the console, this parameter must be FILE_SHARE_READ | FILE_SHARE_WRITE.</td>
</tr>
<tr valign=top>
<td width=32%><i>lpSecurityAttributes</i></td>
<td width=68%>If you want the console to be inherited, the <b>bInheritHandle</b> member of the <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure must be TRUE.</td>
</tr>
<tr valign=top>
<td width=32%><i>dwCreationDisposition</i></td>
<td width=68%>You should specify OPEN_EXISTING when using <b>CreateFile</b> to open the console.</td>
</tr>
<tr valign=top>
<td width=32%><i>dwFlagsAndAttributes</i></td>
<td width=68%>Ignored.</td>
</tr>
<tr valign=top>
<td width=32%><i>hTemplateFile</i></td>
<td width=68%>Ignored.</td>
</tr>
</table><br>
<p>
The following list shows the effects of various settings of <i>fwdAccess</i> and <i>lpFileName</i>.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%><i>lpFileName</i></th>
<th align=left width=36%><i>fwdAccess</i></th>
<th align=left width=43%>Result</th>
</tr>
<tr valign=top>
<td width=21%>CON</td>
<td width=36%>GENERIC_READ</td>
<td width=43%>Opens console for input.</td>
</tr>
<tr valign=top>
<td width=21%>CON</td>
<td width=36%>GENERIC_WRITE</td>
<td width=43%>Opens console for output.</td>
</tr>
<tr valign=top>
<td width=21%>CON</td>
<td width=36%>GENERIC_READ\<br>
GENERIC_WRITE</td>
<td width=43%><b>Windows 95:</b> Causes <b>CreateFile</b> to fail; <b>GetLastError</b> returns ERROR_PATH_NOT_FOUND.<p>
<b>Windows NT:</b>  Causes <b>CreateFile</b> to fail; <b>GetLastError</b> returns ERROR_FILE_NOT_FOUND.</p>
</td>
</tr>
</table><br>
<h4>Directories</h4>
<p>
An application cannot create a directory with <b>CreateFile</b>; it must call <b>CreateDirectory</b> or <b>CreateDirectoryEx</b> to create a directory.</p>
<p>
<b>Windows NT: </b>You can obtain a handle to a directory by setting the FILE_FLAG_BACKUP_SEMANTICS flag. A directory handle can be passed to some Win32 functions in place of a file handle.</p>
<p>
Some file systems, such as NTFS, support compression or encryption for individual files and directories. On volumes formatted for such a file system, a new directory inherits the compression and encryption attributes of its parent directory.</p>
<p>
You cannot use the <b>CreateFile</b> function to set a directory's compression or encryption state. Use the <a href="devio_9quk.htm"><b>DeviceIoControl</b></a> function to set a directory's compression state. Use the <a href="fsys_41k5.htm"><b>EncryptFile</b></a> function to set a directory's encryption state.</p>
<p>
<b>Windows CE:</b> Windows CE uses special device file names to access peripheral devices. For information on the format of these names, see the Windows CE Device Driver Kit documentation.</p>
<p>
The <i>lpSecurityAttributes</i> parameter is ignored and should be set to NULL. </p>
<p>
The following attribute flags are not supported for the <i>dwFlagsAndAttributes</i> parameter:</p>
<p class=indent1>
FILE_ATTRIBUTE_OFFLINE</p>
<p class=indent1>
FILE_ATTRIBUTE_TEMPORARY</p>
<p>
The following file flags are not supported for the <i>dwFlagsAndAttributes</i> parameter:</p>
<p class=indent1>
FILE_FLAG_OVERLAPPED However, multiple reads/writes pending on a device at a time are allowed.</p>
<p class=indent1>
FILE_FLAG_SEQUENTIAL_SCAN</p>
<p class=indent1>
FILE_FLAG_NO_BUFFERING</p>
<p class=indent1>
FILE_FLAG_DELETE_ON_CLOSE</p>
<p class=indent1>
FILE_FLAG_BACKUP_SEMANTICS</p>
<p class=indent1>
FILE_FLAG_POSIX_SEMANTICS</p>
<p>
The <i>dwFlagsAndAttributes</i> parameter does not support the SECURITY_SQOS_PRESENT flag or its corresponding values. </p>
<p>
The <i>hTemplateFile</i> parameter is ignored and as a result <b>CreateFile</b> does not copy the extended attributes to the new file. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="filesio_2xm7.htm">File I/O Overview</a>, <a href="filesio_3n5f.htm">File Functions</a>, <a href="conchar_6smd.htm"><b>AllocConsole</b></a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="pipes_3885.htm"><b>ConnectNamedPipe</b></a>, <a href="filesio_4sft.htm"><b>CreateDirectory</b></a>,<b> <a href="filesio_9veg.htm">CreateDirectoryEx</a></b>,<b> <a href="pipes_4w6d.htm">CreateNamedPipe</a></b>, <a href="devio_9quk.htm"><b>DeviceIOControl</b></a>, <a href="filesio_2pt1.htm"><b>GetDiskFreeSpace</b></a>, <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a>, <a href="conchar_7k9x.htm"><b>GetStdHandle</b></a>, <a href="filesio_0cth.htm"><b>OpenFile</b></a>, <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a>, <a href="errors_38px.htm"><b>SetErrorMode</b></a>, <a href="conchar_7y79.htm"><b>SetStdHandle</b></a> <a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="filesio_3kkl.htm"><b>WriteFile</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

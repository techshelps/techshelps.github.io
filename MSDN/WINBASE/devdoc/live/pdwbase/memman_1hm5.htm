<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WriteFileVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_writefilevlm"></a>WriteFileVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>WriteFileVlm</b> function writes data to a file. <b>WriteFileVlm</b> is designed solely for asynchronous operation. </p>
<pre><code><b>BOOL WriteFileVlm(
  HANDLE</b><i> hFile</i><b>,</b>                 // handle to output file
<b>  PVOID64</b><i> lpBuffer</i><b>,</b>             // pointer to input buffer
<b>  DWORD</b><i> nNumberOfBytesToWrite</i><b>,</b>  // number of bytes to write
  <b>LPDWORD</b> <i>lpReserved,</i>           // reserved, must be NULL
<b>  LPOVERLAPPED</b><i> lpOverlapped</i>     // pointer to async. i/o data
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hFile</i></dt>
<dd>
Open handle that specifies the file to write to. The file handle must have been created (using the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function) with GENERIC_WRITE access to the file. To specify asynchronous I/O, this file handle must have been created with the FILE_FLAG_OVERLAPPED flag. To specify noncached I/O, this file handle must have been created with the FILE_FLAG_NO_BUFFERING flag. </dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to the buffer containing the data to be written to the file. The address specified can be used to access memory in processes allocated using the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. Therefore, the address specified must be a 64-bit address or a sign-extended 32-bit address.
<p>
The buffer pointed to by the <i>lpBuffer </i>parameter must remain valid for the duration of the write operation. The calling process must not use this buffer until the write operation is completed. 
</dd>
<dt>
<i>nNumberOfBytesToWrite</i></dt>
<dd>
Number of bytes to write to the file. If the <i>nNumberOfBtyesToWrite</i> parameter is zero, <b>WriteFileVlm</b> changes the time stamp of the file and<b> </b>does not truncate or otherwise modify the data in the file. </dd>
<dt>
<i>lpReserved</i></dt>
<dd>
Reserved; must be NULL.</dd>
<dt>
<i>lpOverlapped</i></dt>
<dd>
Pointer to an <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure. The <i>lpOverlapped </i>parameter is required and must point to a valid <b>OVERLAPPED</b> structure. The write operation starts at the offset specified in the <b>OVERLAPPED</b> structure, and <b>WriteFileVlm</b> may return before the write operation has been completed. In this case, <b>WriteFileVlm</b> returns FALSE and the <b>GetLastError</b> function returns ERROR_IO_PENDING. This functionality allows the calling process to continue processing while the write operation is being completed. An application can use either the <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a> or <a href="synchro_738k.htm"><b>HasOverlappedIoCompleted</b></a> function to retrieve I/O completion notification. An application can use the <a href="filesio_071v.htm"><b>GetQueuedCompletionStatus</b></a> function to retrieve I/O completion. 
<p>
For files that support byte offsets, you must specify a byte offset at which to start writing to the file. You specify this offset by setting the <b>Offset</b> and <b>OffsetHigh</b> members of the <b>OVERLAPPED</b> structure. For files that do not support byte offsets, <b>Offset</b> and <b>OffsetHigh</b> are ignored. 

<p>
<b>WriteFileVlm</b> uses the <b>Internal</b> and <b>InternalHigh</b> members of the <b>OVERLAPPED</b> structure. A process should not change the value of these members.

<p>
The <b>OVERLAPPED</b> data structure must remain valid for the duration of the write operation. The structure should not be a variable that can go out of scope while the write operation is pending completion.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
If part of the output file is locked by another process and the specified operation writes to the locked portion, <b>WriteFileVlm</b> fails. </p>
<p>
Accessing the output buffer while a write operation is using the buffer may lead to corruption of the data written from that buffer. Applications must not read from, write to, reallocate, or free the output buffer that a write operation is using until the write operation completes.</p>
<p>
<b>WriteFileVlm</b> can fail returning the messages ERROR_INVALID_USER_BUFFER or ERROR_NOT_ENOUGH_MEMORY if there are too many outstanding asynchronous I/O requests. </p>
<p>
To cancel all pending asynchronous I/O operations, use the <a href="filesio_06gf.htm"><b>CancelIo</b></a> function. <b>CancelIo</b> only cancels operations issued by the calling thread for the specified file handle. I/O operations that are canceled complete with the error code ERROR_OPERATION_ABORTED. </p>
<p>
If your application attempts to write to a floppy drive that does not have a floppy disk, the operating system displays a message prompting the user to retry the operation. To prevent the system from displaying this message, call the <a href="errors_38px.htm"><b>SetErrorMode</b></a> function with the SEM_NOOPENFILEERRORBOX flag set for the <i>uMode </i>parameter. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To guard against an access violation, use structured exception handling to protect any code that writes to or reads from a memory-mapped view. For more information on structured exception handling, see <a href="fmap3_638n.htm">Reading and Writing</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="filesio_06gf.htm"><b>CancelIo</b></a>, <a href="filesio_7wmd.htm"><b>CreateFile</b></a>, <a href="filesio_1v1h.htm"><b>FileIOCompletionRoutine</b></a>, <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a>, <a href="filesio_071v.htm"><b>GetQueuedCompletionStatus</b></a>, <a href="synchro_738k.htm"><b>HasOverlappedIoCompleted</b></a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a>, <a href="memman_2fvx.htm"><b>ReadFileVlm</b></a>, <a href="filesio_18bp.htm"><b>SetEndOfFile</b></a>, <a href="errors_38px.htm"><b>SetErrorMode</b></a>, <a href="prothred_0o8o.htm"><b>SleepEx</b></a>, <a href="synchro_5h2s.htm"><b>SignalObjectAndWait</b></a>, <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

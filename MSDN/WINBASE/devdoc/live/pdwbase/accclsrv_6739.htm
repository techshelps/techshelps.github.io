<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AccessCheckByType</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_accesscheckbytype"></a>AccessCheckByType</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>AccessCheckByType</b> function determines whether a security descriptor grants a specified set of access rights to the client identified by an access token. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. Typically, server applications use this function to check access to a private object.</p>
<pre><code><b>BOOL AccessCheckByType(
  PSECURITY_DESCRIPTOR</b><i> pSecurityDescriptor</i><b>,   </b>// security descriptor
<b>  PSID</b><i> PrincipalSelfSid</i><b>,            </b>// SID of object being checked
<b>  HANDLE</b><i> ClientToken</i><b>,               </b>// handle to client access token
<b>  DWORD</b><i> DesiredAccess</i><b>,              </b>// requested access rights 
<b>  POBJECT_TYPE_LIST</b> <i>ObjectTypeList</i><b>, </b>// array of object types
<b>  DWORD</b> <i>ObjectTypeListLength</i><b>,       </b>// number of object type elements
<b>  PGENERIC_MAPPING</b><i> GenericMapping</i><b>,  </b>// map generic to specific rights
<b>  PPRIVILEGE_SET</b><i> PrivilegeSet</i><b>,      </b>// receives privileges used
<b>  LPDWORD</b><i> PrivilegeSetLength</i><b>,       </b>// size of privilege-set buffer
<b>  LPDWORD</b><i> GrantedAccess</i><b>,     </b>// retrieves mask of granted rights
<b>  LPBOOL</b><i> AccessStatus     </i>   // retrieves results of access check
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pSecurityDescriptor</i></dt>
<dd>
Pointer to a <a href="accctrl_6i5u.htm"><b>SECURITY_DESCRIPTOR</b></a> structure against which access is checked. </dd>
<dt>
<i>PrincipalSelfSid</i></dt>
<dd>
Pointer to a SID. If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10).
<p>
This parameter should be NULL if the protected object does not represent a principal.
</dd>
<dt>
<i>ClientToken</i></dt>
<dd>
Handle to an impersonation token that represents the client attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED.</dd>
<dt>
<i>DesiredAccess</i></dt>
<dd>
Access mask that specifies the access rights to check. This mask must have been mapped by the <a href="accclsrv_8757.htm"><b>MapGenericMask</b></a> function to contain no generic access rights.
<p>
If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.
</dd>
<dt>
<i>ObjectTypeList</i></dt>
<dd>
Pointer to an array of <a href="accclsrv_7uuq.htm"><b>OBJECT_TYPE_LIST</b></a> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value indicating the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID. 
<p>
The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByType</b> fails and <b>GetLastError</b> returns ERROR_INVALID_PARAMETER.

<p>
If <i>ObjectTypeList</i> is NULL, <b>AccessCheckByType</b> is the same as the <a href="accclsrv_5jjf.htm"><b>AccessCheck</b></a> function.
</dd>
<dt>
<i>ObjectTypeListLength</i></dt>
<dd>
Specifies the number of elements in the <i>ObjectTypeList</i> array.</dd>
<dt>
<i>GenericMapping</i></dt>
<dd>
Pointer to the <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a> structure associated with the object for which access is being checked. </dd>
<dt>
<i>PrivilegeSet</i></dt>
<dd>
Pointer to a <a href="accclsrv_9ss2.htm"><b>PRIVILEGE_SET</b></a> structure that receives the privileges used to perform the access validation. If no privileges were used, the function sets the <b>PrivilegeCount</b> member to zero.</dd>
<dt>
<i>PrivilegeSetLength</i></dt>
<dd>
Specifies the size, in bytes, of the buffer pointed to by the <i>PrivilegeSet</i> parameter. </dd>
<dt>
<i>GrantedAccess</i></dt>
<dd>
Pointer to an access mask that receives the granted access rights. If <i>AccessStatus</i> returns FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask. </dd>
<dt>
<i>AccessStatus</i></dt>
<dd>
Pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client identified by the access token, <i>AccessStatus</i> returns TRUE. Otherwise, <i>AccessStatus</i> returns FALSE, and you can call <b>GetLastError</b> to get extended error information. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>AccessCheckByType</b> function compares the specified security descriptor with the specified access token and indicates, in the <i>AccessStatus</i> parameter, whether access is granted or denied. </p>
<p>
The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</p>
<p>
The <b>AccessCheckByType</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned in the <i>AccessStatus</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object. </p>
<p>
For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see <a href="accctrl_1ynn.htm">Controlling Access to an Object's Properties</a>. </p>
<p>
If the security descriptor's DACL is NULL, the <i>AccessStatus</i> parameter returns TRUE, indicating that the client has the requested access. </p>
<p>
If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByType</b> fails with ERROR_INVALID_SECURITY_DESCR. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="accclsrv_64vg.htm">Client/Server Access Control Overview</a>, <a href="accclsrv_0hv7.htm">Client/Server Access Control Functions</a>, <a href="accclsrv_5jjf.htm"><b>AccessCheck</b></a>, <a href="accclsrv_5ze5.htm"><b>AccessCheckAndAuditAlarm</b></a>, <a href="accclsrv_2anh.htm"><b>AccessCheckByTypeAndAuditAlarm</b></a>, <a href="accclsrv_7w38.htm"><b>AccessCheckByTypeResultList</b></a>, <a href="accclsrv_5d9p.htm"><b>AccessCheckByTypeResultListAndAuditAlarm</b></a>, <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a>, <a href="accclsrv_8757.htm"><b>MapGenericMask</b></a>, <a href="accclsrv_9ss2.htm"><b>PRIVILEGE_SET</b></a>, <a href="accctrl_6i5u.htm"><b>SECURITY_DESCRIPTOR</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

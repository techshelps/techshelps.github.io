<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring Applications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_monitoring_applications"></a>Monitoring Applications</h2>
<p>
The application programming interface (API) elements of the DDEML can be used to create an application that monitors DDE activity in the system. Like any DDEML application, a DDE monitoring application contains a DDE callback function. The DDEML notifies a monitoring application's DDE callback function whenever a DDE event occurs, passing information about the event to the callback function. The application typically displays the information in a window or writes it to a file. </p>
<p>
To receive notifications from the DDEML, an application must have registered as a DDE monitor by specifying the APPCLASS_MONITOR flag in a call to the <a href="ddemlib_2v6t.htm"><b>DdeInitialize</b></a> function. In this same call, the application can specify one or more monitor flags to indicate the types of events for which the DDEML is to notify the application's callback function. The following monitor flags can be specified by an application: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%>Flag</th>
<th align=left width=73%>Description</th>
</tr>
<tr valign=top>
<td width=27%>MF_CALLBACKS</td>
<td width=73%>Notifies the callback function whenever a transaction is sent to any DDE callback function in the system.</td>
</tr>
<tr valign=top>
<td width=27%>MF_CONV</td>
<td width=73%>Notifies the callback function whenever a conversation is established or terminated.</td>
</tr>
<tr valign=top>
<td width=27%>MF_ERRORS</td>
<td width=73%>Notifies the callback function whenever a DDEML error occurs.</td>
</tr>
<tr valign=top>
<td width=27%>MF_HSZ_INFO</td>
<td width=73%>Notifies the callback function whenever a DDEML application creates, frees, or increments the usage count of a string handle or whenever a string handle is freed as a result of a call to the <a href="ddemlib_346d.htm"><b>DdeUninitialize</b></a> function.</td>
</tr>
<tr valign=top>
<td width=27%>MF_LINKS</td>
<td width=73%>Notifies the callback function whenever an advise loop is started or ended.</td>
</tr>
<tr valign=top>
<td width=27%>MF_POSTMSGS</td>
<td width=73%>Notifies the callback function whenever the system or an application posts a DDE message.</td>
</tr>
<tr valign=top>
<td width=27%>MF_SENDMSGS</td>
<td width=73%>Notifies the callback function whenever the system or an application sends a DDE message.</td>
</tr>
</table><br>
<p>
The following example shows how to register a DDE monitoring application so that its DDE callback function receives notifications of all DDE events.</p>
<pre><code>DWORD idInst; 
PFNCALLBACK lpDdeProc; 
hInst = hInstance; 
 
if (DdeInitialize( 
        (LPDWORD) &amp;idInst,  // instance identifier 
        DDECallback,        // points to callback function 
        APPCLASS_MONITOR |  // this is a monitoring application 
        MF_CALLBACKS     |  // monitor callback functions 
        MF_CONV          |  // monitor conversation data 
        MF_ERRORS        |  // monitor DDEML errors 
        MF_HSZ_INFO      |  // monitor data handle activity 
        MF_LINKS         |  // monitor advise loops 
        MF_POSTMSGS      |  // monitor posted DDE messages 
        MF_SENDMSGS,        // monitor sent DDE messages 
        0))                 // reserved 
{
    return FALSE; 
}
 </code></pre>
<p>
The DDEML informs a monitoring application of a DDE event by sending an <a href="ddemlib_7y5u.htm">XTYP_MONITOR</a> transaction to the application's DDE callback function. During this transaction, the DDEML passes a monitor flag that specifies the type of DDE event that has occurred and a handle of a DDE object that contains detailed information about the event. The DDEML provides a set of structures that the application can use to extract the information from the DDE object. There is a corresponding structure for each type of DDE event.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Structure</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_9kaa.htm"><b>MONCBSTRUCT</b></a></td>
<td width=69%>Contains information about a transaction.</td>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_27aq.htm"><b>MONCONVSTRUCT</b></a></td>
<td width=69%>Contains information about a conversation.</td>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_5p0y.htm"><b>MONERRSTRUCT</b></a></td>
<td width=69%>Contains information about the latest DDE error.</td>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_5lki.htm"><b>MONLINKSTRUCT</b></a></td>
<td width=69%>Contains information about an advise loop.</td>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_5zea.htm"><b>MONHSZSTRUCT</b></a></td>
<td width=69%>Contains information about a string handle.</td>
</tr>
<tr valign=top>
<td width=31%><a href="ddemlib_25te.htm"><b>MONMSGSTRUCT</b></a></td>
<td width=69%>Contains information about a DDE message that was sent or posted.</td>
</tr>
</table><br>
<p>
The following example shows the DDE callback function of a DDE monitoring application that formats information about each string handle event and then displays the information in a window. The function uses the <a href="ddemlib_5zea.htm"><b>MONHSZSTRUCT</b></a> structure to extract the information from the DDE object. </p>
<pre><code>HDDEDATA CALLBACK DDECallback(uType, uFmt, hconv, hsz1, hsz2, 
    hdata, dwData1, dwData2) 
UINT uType; 
UINT uFmt; 
HCONV hconv; 
HSZ hsz1; 
HSZ hsz2; 
HDDEDATA hdata; 
DWORD dwData1; 
DWORD dwData2; 
{ 
    LPVOID lpData; 
    CHAR *szAction; 
    CHAR szBuf[256]; 
    DWORD cb; 
 
    switch (uType) 
    { 
        case XTYP_MONITOR: 
            // Obtain a pointer to the global memory object. 
 
            if (lpData = DdeAccessData(hdata, &amp;cb)) 
            { 
                // Examine the monitor flag. 
 
                switch (dwData2) 
                { 
                    case MF_HSZ_INFO: 
 
#define PHSZS ((MONHSZSTRUCT FAR *)lpData) 
 
                        // The global memory object contains 
                        // string handle data. Use the MONHSZSTRUCT 
                        // structure to access the data. 
 
                        switch (PHSZS-&gt;fsAction) 
                        { 
                            // Examine the action flags to determine
                            // the action performed on the handle.
 
                            case MH_CREATE: 
                                szAction = "Created"; 
                                break; 
 
                            case MH_KEEP: 
                                szAction = "Incremented"; 
                                break; 
 
                            case MH_DELETE: 
                                szAction = "Deleted"; 
                                break; 
 
                            case MH_CLEANUP: 
                                szAction = "Cleaned up"; 
                                break; 
 
                            default: 
                                DdeUnaccessData(hdata); 
                                return (HDDEDATA) 0; 
                        } 
 
                        // Write formatted output to a buffer. 
 
                        wsprintf(szBuf, 
                            "Handle %s, Task: %x, Hsz: %lx(%s)", 
                            (LPSTR) szAction, PHSZS-&gt;hTask, 
                            PHSZS-&gt;hsz, (LPSTR) PHSZS-&gt;str); 
                        // Display text or write to a file. 
 
                        break; 
 
#undef PHSZS 
 
                    // Process other MF_* flags. 
 
                    default: 
                        break; 
                } 
            } 
 
            // Free the global memory object. 
 
            DdeUnaccessData(hdata); 
            break; 
 
        default: 
            break; 
    } 
    return (HDDEDATA) 0; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

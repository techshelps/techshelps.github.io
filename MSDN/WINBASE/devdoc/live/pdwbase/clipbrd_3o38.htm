<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Owner-Display Clipboard Format</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_using_the_owner_display_clipboard_format"></a>Using the Owner-Display Clipboard Format</h3>
<p>
If a window places information on the clipboard by using the CF_OWNERDISPLAY clipboard format, it must do the following: 
<ul>
<li>
Process the <a href="clipbrd_1p0k.htm">WM_PAINTCLIPBOARD</a> message. This message is sent to the clipboard owner when a portion of the clipboard viewer window must be repainted. </li>
<li>
Process the <a href="clipbrd_8c84.htm">WM_SIZECLIPBOARD</a> message. This message is sent to the clipboard owner when the clipboard viewer window has been resized or its content has changed. <p>
Typically, a window responds to this message by setting the scroll positions and ranges for the clipboard viewer window. In response to this message, the Label application also updates a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_size_str">
</object><a href=JavaScript:alink_1.Click()><b>SIZE</b></a> structure for the clipboard viewer window. 
</li>
<li>
Process the <a href="clipbrd_4ndw.htm">WM_HSCROLLCLIPBOARD</a> and <a href="clipbrd_1tus.htm">WM_VSCROLLCLIPBOARD</a> messages. These messages are sent to the clipboard owner when a scroll bar event occurs in the clipboard viewer window. </li>
<li>
Process the <a href="clipbrd_3c11.htm">WM_ASKCBFORMATNAME</a> message. The clipboard viewer window sends this message to an application to retrieve the name of the owner-display format. </li>
</ul>
<p>
The window procedure for the Label application processes these messages, as follows. </p>
<pre><code>LRESULT CALLBACK MainWindowProc(hwnd, msg, wParam, lParam) 
HWND hwnd; 
UINT msg; 
WPARAM wParam; 
LPARAM lParam; 
{ 
    static RECT rcViewer; 
 
    RECT rc; 
    LPRECT lprc; 
    LPPAINTSTRUCT lpps; 
 
    switch (msg) 
    { 
        //
        // Handle other messages.
        //

        case WM_PAINTCLIPBOARD: 
            // Determine the dimensions of the label. 
 
            SetRect(&amp;rc, 0, 0, 
                pboxLocalClip-&gt;rcText.right + CX_MARGIN, 
                pboxLocalClip-&gt;rcText.top * 2 + cyText 
            ); 
 
            // Center the image in the clipboard viewer window. 
 
            if (rc.right &lt; rcViewer.right) 
            { 
                rc.left = (rcViewer.right - rc.right) / 2; 
                rc.right += rc.left; 
            } 
            if (rc.bottom &lt; rcViewer.bottom) 
            { 
                rc.top = (rcViewer.bottom - rc.bottom) / 2; 
                rc.bottom += rc.top; 
            } 
 
            // Paint the image, using the specified PAINTSTRUCT 
            // structure, by calling the application-defined 
            // PaintLabel function. 
 
            lpps = (LPPAINTSTRUCT) GlobalLock((HGLOBAL) lParam); 
            PaintLabel(lpps, pboxLocalClip, &amp;rc); 
            GlobalUnlock((HGLOBAL) lParam); 
            break; 
 
        case WM_SIZECLIPBOARD: 
            // Save the dimensions of the window in a static 
            // RECT structure. 
 
            lprc = (LPRECT) GlobalLock((HGLOBAL) lParam); 
            memcpy(&amp;rcViewer, lprc, sizeof(RECT)); 
            GlobalUnlock((HGLOBAL) lParam); 
 
            // Set the scroll ranges to zero (thus eliminating 
            // the need to process the WM_HSCROLLCLIPBOARD and 
            // WM_VSCROLLCLIPBOARD messages). 
 
            SetScrollRange((HWND) wParam, SB_HORZ, 0, 0, TRUE); 
            SetScrollRange((HWND) wParam, SB_VERT, 0, 0, TRUE); 
 
            break; 
 
        case WM_ASKCBFORMATNAME: 
            LoadString(hinst, IDS_OWNERDISPLAY, 
                (LPSTR) lParam, wParam); 
            break; 
 
        default: 
            return DefWindowProc(hwnd, msg, wParam, lParam); 
    } 
    return 0; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

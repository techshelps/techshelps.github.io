<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateProcessAsUser</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createprocessasuser"></a>CreateProcessAsUser</h1>
<p>
The <b>CreateProcessAsUser</b> function creates a new process and its primary thread. The new process then executes a specified executable file. The <b>CreateProcessAsUser</b> function is similar to the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function, except that the new process runs in the security context of the user represented by the <i>hToken</i> parameter. By default, the new process is non-interactive, that is, it runs on a desktop that is not visible and cannot receive user input. Also, by default, the new process inherits the environment of the calling process, rather than the environment associated with the specified user.</p>
<pre><code><b>BOOL CreateProcessAsUser(
  HANDLE</b><i> hToken</i><b>,         </b>// handle to a token representing the logged-on user
<b>  LPCTSTR</b><i> lpApplicationName</i><b>,  </b>// pointer to name of executable module
<b>  LPTSTR</b><i> lpCommandLine</i><b>,       </b>// pointer to command line string
<b>  LPSECURITY_ATTRIBUTES</b><i> lpProcessAttributes</i><b>, </b>// process security attributes
<b>  LPSECURITY_ATTRIBUTES</b><i> lpThreadAttributes</i><b>,  </b>// thread security attributes
<b>  BOOL</b><i> bInheritHandles</i><b>,         </b>// whether new process inherits handles
<b>  DWORD</b><i> dwCreationFlags</i><b>,        </b>// creation flags
<b>  LPVOID</b><i> lpEnvironment</i><b>,         </b>// pointer to new environment block
<b>  LPCTSTR</b><i> lpCurrentDirectory</i><b>,   </b>// pointer to current directory name
<b>  LPSTARTUPINFO</b><i> lpStartupInfo</i><b>,  </b>// pointer to STARTUPINFO
<b>  LPPROCESS_INFORMATION</b><i> lpProcessInformation</i>  // pointer to PROCESS_INFORMATION
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hToken</i></dt>
<dd>
Handle to a primary token that represents a user. The handle must have TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access. For more information, see <a href="accctrl_2l4j.htm">Access Rights for Access-Token Objects</a>. The user represented by the token must have read and execute access to the application specified by the <i>lpApplicationName</i> or the <i>lpCommandLine</i> parameter.
<p>
If your process has the SE_TCB_NAME privilege, it can call the <a href="accclsrv_9cfm.htm"><b>LogonUser</b></a> function to get a primary token that represents a specified user.

<p>
Alternatively, you can call the <a href="accctrl_9vso.htm"><b>DuplicateTokenEx</b></a> function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client. 

<p>
The other parameters of the <b>CreateProcessAsUser</b> function behave just like the analogous parameters of the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function.
</dd>
<dt>
<i>lpApplicationName</i></dt>
<dd>
Pointer to a null-terminated string specifying the full path and filename of the module to execute. If a partial name is specified, the current drive and current directory are used by default. If this parameter is NULL, the module name must be the first white space-delimited token in the <i>lpCommandLine</i> string. The specified module can be a Win32-based application, or it can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer. </dd>
<dt>
<i>lpCommandLine</i></dt>
<dd>
Pointer to a null-terminated string specifying the command line for the application to be executed. If this parameter is NULL, the <i>lpApplicationName</i> string is used as the command line. If both <i>lpApplicationName</i> and <i>lpCommandLine</i> are non-NULL, <i>lpApplicationName</i> specifies the module to execute and <i>lpCommandLine</i> is used as the command line. The new process can use <a href="prothred_0mzp.htm"><b>GetCommandLine</b></a> to retrieve the entire command line; or C runtime processes can use the <b>argc</b>/<b>argv</b> mechanism. 
<p>
If <i>lpApplicationName</i> is NULL, the first white space-delimited token of the command line specifies the module name. If the filename does not contain an extension, .EXE is assumed. If the filename ends in a period (.) with no extension, or the filename contains a path, .EXE is not appended. If the filename does not contain a directory path, the system searches for the executable file in the following sequence: 

<ol>
<li>
The directory from which the application loaded. </li>
<li>
The current directory. </li>
<li>
The 32-bit Windows system directory. Use the <b>GetSystemDirectory</b> function to get the path of this directory. The name of this directory is SYSTEM32.</li>
<li>
The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</li>
<li>
The Windows directory. Use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_1.Click()><b>GetWindowsDirectory</b></a> function to get the path of this directory. </li>
<li>
The directories that are listed in the PATH environment variable. </li>
</ol>

<p>
If the process to be created is an MS-DOS – based or 16-bit Windows-based application, <i>lpCommandLine</i> should be a full command line in which the first element is the application name. Because this also works well for Win32-based applications, it is the most robust way to set <i>lpCommandLine</i>. 
</dd>
<dt>
<i>lpProcessAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that specifies a security descriptor for the new process and determines whether child processes can inherit the returned handle. If <i>lpProcessAttributes</i> is NULL, the process gets a default security descriptor and the handle cannot be inherited.</dd>
<dt>
<i>lpThreadAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that specifies a security descriptor for the new process and determines whether child processes can inherit the returned handle. If <i>lpThreadAttributes</i> is NULL, the thread gets a default security descriptor and the handle cannot be inherited.</dd>
<dt>
<i>bInheritHandles</i></dt>
<dd>
Indicates whether the new process inherits handles from the calling process. If TRUE, each inheritable open handle in the calling process is inherited by the new process. Inherited handles have the same value and access privileges as the original handles. </dd>
<dt>
<i>dwCreationFlags</i></dt>
<dd>
Specifies additional flags that control the priority class and the creation of the process. The following creation flags can be specified in any combination, except as noted: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Value</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_DEFAULT_ERROR_MODE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The new process does not inherit the error mode of the calling process. Instead, <b>CreateProcessAsUser </b>gives the new process the current default error mode. An application sets the current default error mode by calling <a href="errors_38px.htm"><b>SetErrorMode</b></a>.<p>
This flag is particularly useful for multi-threaded shell applications that run with hard errors disabled. </p>
<p>
The default behavior for <b>CreateProcessAsUser</b> is for the new process to inherit the error mode of the caller. Setting this flag changes that default behavior.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_NEW_CONSOLE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The new process has a new console, instead of inheriting the parent's console. This flag cannot be used with the DETACHED_PROCESS flag.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_NEW_PROCESS_GROUP</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The new process is the root process of a new process group. The process group includes all processes that are descendants of this root process. The process identifier of the new process group is the same as the process identifier, which is returned in the <i>lpProcessInformation</i> parameter. Process groups are used by the <a href="conchar_3qwk.htm"><b>GenerateConsoleCtrlEvent</b></a> function to enable sending a ctrl+c or ctrl+break signal to a group of console processes.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_SEPARATE_WOW_VDM</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>This flag is only valid only starting a 16-bit Windows-based application. If set, the new process is run in a private Virtual DOS Machine (VDM).  By default, all 16-bit Windows-based applications are run in a single, shared VDM.  The advantage of running separately is that a crash only kills the single VDM; any other programs running in distinct VDMs continue to function normally. Also, 16-bit Windows-based applications that are run in separate VDMs have separate input queues. That means that if one application hangs momentarily, applications in separate VDMs continue to receive input.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_SUSPENDED</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The primary thread of the new process is created in a suspended state, and does not run until the <a href="prothred_59no.htm"><b>ResumeThread</b></a> function is called.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CREATE_UNICODE_ENVIRONMENT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If set, the environment block pointed to by <i>lpEnvironment</i> uses Unicode characters. If clear, the environment block uses ANSI characters.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DEBUG_PROCESS</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If set, the calling process is treated as a debugger, and the new process is a process being debugged. The system notifies the debugger of all debug events that occur in the process being debugged. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DEBUG_ONLY_THIS_PROCESS</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If not set and the calling process is being debugged, the new process becomes another process being debugged by the calling process's debugger. If the calling process is not a process being debugged, no debugging-related actions occur.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DETACHED_PROCESS</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>For console processes, the new process does not have access to the console of the parent process. The new process can call the <a href="conchar_6smd.htm"><b>AllocConsole</b></a> function at a later time to create a new console. This flag cannot be used with the CREATE_NEW_CONSOLE flag.</td>
</tr>
</table><br>


<p>
The <i>dwCreationFlags</i> parameter also controls the new process's priority class, which is used in determining the scheduling priorities of the process's threads. If none of the following priority class flags is specified, the priority class defaults to <b>NORMAL_PRIORITY_CLASS</b> unless the priority class of the creating process is <b>IDLE_PRIORITY_CLASS</b>. In this case the default priority class of the child process is <b>IDLE_PRIORITY_CLASS</b>. One of the following flags can be specified: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Priority</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>HIGH_PRIORITY_CLASS</td>
<td width=53%>Indicates a process that performs time-critical tasks that must be executed immediately for it to run correctly. The threads of a high-priority class process preempt the threads of normal-priority or idle-priority class processes. An example is the Task List, which must respond quickly when called by the user, regardless of the load on the operating system. Use extreme care when using the high-priority class, because a high-priority class CPU-bound application can use nearly all available cycles.</td>
</tr>
<tr valign=top>
<td width=47%>IDLE_PRIORITY_CLASS</td>
<td width=53%>Indicates a process whose threads run only when the system is idle and are preempted by the threads of any process running in a higher priority class. An example is a screen saver. The idle priority class is inherited by child processes.</td>
</tr>
<tr valign=top>
<td width=47%>NORMAL_PRIORITY_CLASS</td>
<td width=53%>Indicates a normal process with no special scheduling needs.</td>
</tr>
<tr valign=top>
<td width=47%>REALTIME_PRIORITY_CLASS</td>
<td width=53%>Indicates a process that has the highest possible priority. The threads of a real-time priority class process preempt the threads of all other processes, including operating system processes performing important tasks. For example, a real-time process that executes for more than a very brief interval can cause disk caches not to flush or cause the mouse to be unresponsive.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpEnvironment</i></dt>
<dd>
Pointer to an environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process. 
<p>
An environment block consists of a null-terminated block of null-terminated strings. Each string is in the form: 

<pre><code>name=value 
 </code></pre>

<p>
Because the equal sign is used as a separator, it must not be used in the name of an environment variable. 

<p>
If an application provides an environment block, rather than passing NULL for this parameter, the current directory information of the system drives is not automatically propagated to the new process. For a discussion of this situation and how to handle it, see the following Remarks section. 

<p>
An environment block can contain Unicode or ANSI characters. If the environment block pointed to by <i>lpEnvironment</i> contains Unicode characters, the <i>dwCreationFlags</i> field's CREATE_UNICODE_ENVIRONMENT flag will be set. If the block contains ANSI characters, that flag will be clear.

<p>
Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block.
</dd>
<dt>
<i>lpCurrentDirectory</i></dt>
<dd>
Pointer to a null-terminated string that specifies the current drive and directory for the new process. The string must be a full path and filename that includes a drive letter. If this parameter is NULL, the new process is created with the same current drive and directory as the calling process. This option is provided primarily for shells that need to start an application and specify its initial drive and working directory. </dd>
<dt>
<i>lpStartupInfo</i></dt>
<dd>
Pointer to a <a href="prothred_7sdu.htm"><b>STARTUPINFO</b></a> structure that specifies how the main window for the new process should appear. </dd>
<dt>
<i>lpProcessInformation</i></dt>
<dd>
Pointer to a <a href="prothred_71pu.htm"><b>PROCESS_INFORMATION</b></a> structure that receives identification information about the new process. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
Typically, the process that calls the <b>CreateProcessAsUser</b> function must have the SE_ASSIGNPRIMARYTOKEN_NAME and SE_INCREASE_QUOTA_NAME privileges. However, if <i>hToken</i> is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled, <b>CreateProcessAsUser</b> enables them for the duration of the call. </p>
<p>
<b>CreateProcessAsUser</b> must be able to open the primary token of the calling process for TOKEN_DUPLICATE and TOKEN_IMPERSONATE access. </p>
<p>
By default, <b>CreateProcessAsUser</b> creates the new process on a noninteractive window station with a desktop that is not visible and cannot receive user input. To enable user interaction with the new process, you must specify the name of the default interactive window station and desktop, "winsta0\default", in the <b>lpDesktop</b> member of the <a href="prothred_7sdu.htm"><b>STARTUPINFO</b></a> structure. In addition, before calling <b>CreateProcessAsUser</b>, you must change the discretionary access control list (DACL) of both the default interactive window station and the default desktop. The DACLs for the window station and desktop must grant access to the user or the logon session represented by the <i>hToken</i> parameter.</p>
<p>
<b>CreateProcessAsUser</b> does not load the specified user's profile into the HKEY_USERS registry key. This means that access to information in the HKEY_CURRENT_USER registry key may not produce results consistent with a normal interactive logon. It is your responsibility to load the user's registry hive into HKEY_USERS before calling <b>CreateProcessAsUser</b>.</p>
<p>
If the <i>lpEnvironment</i> parameter is NULL, the new process inherits the environment of the calling process. <b>CreateProcessAsUser</b> does not automatically modify the environment block to include environment variables specific to the user represented by <i>hToken</i>. For example, the USERNAME and USERDOMAIN variables are inherited from the calling process if <i>lpEnvironment</i> is NULL. It is your responsibility to prepare the environment block for the new process and specify it in <i>lpEnvironment</i>.</p>
<p>
<b>CreateProcessAsUser</b> allows you to access the specified directory and executable image in the security context of the caller or the target user. By default, <b>CreateProcessAsUser</b> accesses the directory and executable image in the security context of the caller. In this case, if the caller does not have access to the directory and executable image, the function fails. To access the directory and executable image using the security context of the target user, specify <i>hToken</i> in a call to the <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a> function before calling <b>CreateProcessAsUser</b>. </p>
<p>
The new process and the new thread handles are created with full access rights (PROCESS_ALL_ACCESS and THREAD_ALL_ACCESS). For either handle, if a security descriptor is not provided, the handle can be used in any function that requires an object handle of that type. When a security descriptor is provided, an access check is performed on all subsequent uses of the handle before access is granted. If the access check denies access, the requesting process is not able to use the handle to gain access to the process or thread. </p>
<p>
If the <i>lpProcessAttributes</i> parameter is NULL, the default security descriptor for the user referenced in the <i>hToken</i> parameter will be used. This security descriptor may not allow access for the caller, in which case the process may not be opened again once it is run. The handle returned in the <a href="prothred_71pu.htm"><b>PROCESS_INFORMATION</b></a> structure is valid and will continue to have all access. This is also true for thread attributes.</p>
<p>
Handles in <b>PROCESS_INFORMATION</b> must be closed with <a href="handobj_289x.htm"><b>CloseHandle</b></a> when they are no longer needed.</p>
<p>
The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the process, or specified in the <a href="prothred_478z.htm"><b>OpenProcess</b></a> function to open a handle to the process. The initial thread in the process is also assigned a thread identifier. The identifier is valid until the thread terminates and can be used to uniquely identify the thread within the system. These identifiers are returned in the <b>PROCESS_INFORMATION</b> structure. </p>
<p>
When specifying an application name in the <i>lpApplicationName</i> or <i>lpCommandLine</i> strings, it doesn't matter whether the application name includes the filename extension, with one exception: an MS-DOS – based or Windows-based application whose filename extension is .COM must include the .COM extension. </p>
<p>
The calling thread can use the <a href="prothred_5145.htm"><b>WaitForInputIdle</b></a> function to wait until the new process has finished its initialization and is waiting for user input with no input pending. This can be useful for synchronization between parent and child processes, because <b>CreateProcessAsUser</b> returns without waiting for the new process to finish its initialization. For example, the creating process would use <b>WaitForInputIdle</b> before trying to find a window associated with the new process. </p>
<p>
The preferred way to shut down a process is by using the <a href="prothred_8dv7.htm"><b>ExitProcess</b></a> function, because this function notifies all dynamic-link libraries (DLLs) attached to the process of the approaching termination. Other means of shutting down a process do not notify the attached DLLs. Note that when a thread calls <b>ExitProcess</b>, other threads of the process are terminated without an opportunity to execute any additional code (including the thread termination code of attached DLLs). </p>
<p>
<b>ExitProcess</b>, <a href="prothred_531g.htm"><b>ExitThread</b></a>, <a href="prothred_4084.htm"><b>CreateThread</b></a>, <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a>, and a process that is starting (as the result of a call by <b>CreateProcessAsUser</b>) are serialized between each other within a process. Only one of these events can happen at a time. This means the following restrictions hold: 
<ul>
<li>
During process startup and DLL initialization routines, new threads can be created, but they do not begin execution until DLL initialization is done for the process. </li>
<li>
Only one thread in a process can be in a DLL initialization or detach routine at a time. </li>
<li>
The <b>ExitProcess</b> function does not return until no threads are executing DLL initialization or detach routines. </li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.51 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="conchar_6smd.htm"><b>AllocConsole</b></a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a>, <a href="accctrl_1h9q.htm"><b>CreateRestrictedToken</b></a>, <a href="prothred_4084.htm"><b>CreateThread</b></a>, <a href="accctrl_9vso.htm"><b>DuplicateTokenEx</b></a>, <a href="prothred_8dv7.htm"><b>ExitProcess</b></a>, <a href="prothred_531g.htm"><b>ExitThread</b></a>, <a href="conchar_3qwk.htm"><b>GenerateConsoleCtrlEvent</b></a>, <a href="prothred_0mzp.htm"><b>GetCommandLine</b></a>, <a href="prothred_9gs3.htm"><b>GetEnvironmentStrings</b></a>, <a href="prothred_4k6r.htm"><b>GetExitCodeProcess</b></a>, <a href="filesio_79gl.htm"><b>GetFullPathName</b></a>, <a href="prothred_2x9r.htm"><b>GetStartupInfo</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_2.Click()><b>GetSystemDirectory</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_3.Click()><b>GetWindowsDirectory</b></a>, <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a>, <a href="dll_6vad.htm"><b>LoadModule</b></a>, <a href="accclsrv_9cfm.htm"><b>LogonUser</b></a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="prothred_71pu.htm"><b>PROCESS_INFORMATION</b></a>, <a href="prothred_59no.htm"><b>ResumeThread</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a>, <a href="conchar_599u.htm"><b>SetConsoleCtrlHandler</b></a>, <a href="errors_38px.htm"><b>SetErrorMode</b></a>, <a href="prothred_7sdu.htm"><b>STARTUPINFO</b></a>, <a href="prothred_1bg3.htm"><b>TerminateProcess</b></a>, <a href="prothred_5145.htm"><b>WaitForInputIdle</b></a>, <a href="prothred_36w3.htm"><b>WinExec</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

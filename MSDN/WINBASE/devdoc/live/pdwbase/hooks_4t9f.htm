<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>JournalRecordProc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_journalrecordproc"></a>JournalRecordProc</h1>
<p>
The <b>JournalRecordProc</b> hook procedure is an application-defined callback function used with the <a href="hooks_7vaw.htm"><b>SetWindowsHookEx</b></a> function. The function records messages the system removes from the system message queue. Later, an application can use a <a href="hooks_0aoz.htm"><b>JournalPlaybackProc</b></a> hook procedure to play back the messages. </p>
<p>
The <b>HOOKPROC</b> type defines a pointer to this callback function. <b>JournalRecordProc</b> is a placeholder for the application-defined or library-defined function name. </p>
<pre><code><b>LRESULT CALLBACK JournalRecordProc(
  int</b><i> code</i><b>,       </b>// hook code
<b>  WPARAM</b><i> wParam</i><b>,  </b>// undefined
<b>  LPARAM</b><i> lParam</i>   // address of message being processed
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>code</i></dt>
<dd>
Specifies how to process the message. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Value</th>
<th align=left width=65%>Meaning</th>
</tr>
<tr valign=top>
<td width=35%>HC_ACTION</td>
<td width=65%>The <i>lParam</i> parameter points to an <a href="hooks_5zhu.htm"><b>EVENTMSG</b></a> structure containing information about a message removed from the system queue. The hook procedure must record the contents of the structure by copying them to a buffer or file.</td>
</tr>
<tr valign=top>
<td width=35%>HC_SYSMODALOFF</td>
<td width=65%>A system-modal dialog box has been destroyed. The hook procedure must resume recording.</td>
</tr>
<tr valign=top>
<td width=35%>HC_SYSMODALON</td>
<td width=65%>A system-modal dialog box is being displayed. Until the dialog box is destroyed, the hook procedure must stop recording.</td>
</tr>
</table><br>


<p>
If <i>code</i> is less than zero, the hook procedure must pass the message to the <a href="hooks_57aw.htm"><b>CallNextHookEx</b></a> function without further processing and should return the value returned by <b>CallNextHookEx</b>. 
</dd>
<dt>
<i>wParam</i></dt>
<dd>
Specifies a NULL value. </dd>
<dt>
<i>lParam</i></dt>
<dd>
Pointer to an <a href="hooks_5zhu.htm"><b>EVENTMSG</b></a> structure that contains the message to be recorded. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value is ignored. </p>
<h4>Remarks</h4>
<p>
A <b>JournalRecordProc</b> hook procedure must copy but not modify the messages. After the hook procedure returns control to the system, the message continues to be processed. </p>
<p>
Install the <b>JournalRecordProc</b> hook procedure by specifying the <a href="hooks_36wb.htm">WH_JOURNALRECORD hook</a> type and the address of the hook procedure in a call to the <a href="hooks_7vaw.htm"><b>SetWindowsHookEx</b></a> function. </p>
<p>
A <b>JournalRecordProc</b> hook procedure does not need to live in a dynamic-link library. A <b>JournalRecordProc</b> hook procedure can live in the application itself. </p>
<p>
Unlike most other global hook procedures, the <b>JournalRecordProc</b> and <a href="hooks_0aoz.htm"><b>JournalPlaybackProc</b></a> hook procedures are always called in the context of the thread that set the hook. </p>
<p>
An application that has installed a <b>JournalRecordProc</b> hook procedure should watch for the VK_CANCEL virtual keycode (which is implemented as the ctrl+break key combination on most keyboards). This virtual keycode should be interpreted by the application as a signal that the user wishes to stop journal recording. The application should respond by ending the recording sequence and removing the <b>JournalRecordProc</b> hook procedure. Removal is important. It prevents a journaling application from locking up the system by hanging inside a hook procedure. </p>
<p>
This role as a signal to stop journal recording means that a ctrl+break key combination cannot itself be recorded. Since the ctrl+c key combination has no such role as a journaling signal, it can be recorded. There are two other key combinations that cannot be recorded: ctrl+esc and ctrl+alt+del. Those two key combinations cause the system to stop all journaling activities (record or playback), remove all journaling hooks, and post a <a href="hooks_6g8c.htm">WM_CANCELJOURNAL</a> message to the journaling application. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>User-defined.</p>
<h4>See Also</h4>
<p>
<a href="hooks_9rg3.htm">Hooks Overview</a>, <a href="hooks_31bn.htm">Hook Functions</a>, <a href="hooks_57aw.htm"><b>CallNextHookEx</b></a>, <a href="hooks_5zhu.htm"><b>EVENTMSG</b></a>, <a href="hooks_0aoz.htm"><b>JournalPlaybackProc</b></a>, <a href="hooks_7vaw.htm"><b>SetWindowsHookEx</b></a>, <a href="hooks_6g8c.htm">WM_CANCELJOURNAL</a> </p>
<p>&nbsp;</p></body>
</HTML>

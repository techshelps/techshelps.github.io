<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RegSetValueEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_regsetvalueex"></a>RegSetValueEx</h1>
<p>
The <b>RegSetValueEx</b> function sets the data and type of a specified value under a registry key. </p>
<pre><code><b>LONG RegSetValueEx(
  HKEY</b><i> hKey</i><b>,           </b>// handle to key to set value for
<b>  LPCTSTR</b><i> lpValueName</i><b>, </b>// name of the value to set
  <b>DWORD</b> <i>Reserved</i><b>,</b>      // reserved
<b>  DWORD</b><i> dwType</i><b>,        </b>// flag for value type
<b>  CONST BYTE</b><i> *lpData</i><b>,  </b>// address of value data
<b>  DWORD</b><i> cbData</i>         // size of value data
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hKey</i></dt>
<dd>
Handle to a currently open key or any of the following predefined reserved handle values: 
<p>
<b>HKEY_CLASSES_ROOT</b><br>
<b>HKEY_CURRENT_CONFIG</b><br>
<b>HKEY_CURRENT_USER</b><br>
<b>HKEY_LOCAL_MACHINE</b><br>
<b>HKEY_USERS<br>
Windows NT:</b> <b>HKEY_PERFORMANCE_DATA</b> <br>
<b>Windows 95 and Windows 98:</b> <b>HKEY_DYN_DATA</b> 
</dd>
<dt>
<i>lpValueName</i></dt>
<dd>
Pointer to a string containing the name of the value to set. If a value with this name is not already present in the key, the function adds it to the key.
<p>
If <i>lpValueName</i> is NULL or an empty string, "", the function sets the type and data for the key's unnamed or default value. 

<p>
<b>Windows 95 and Windows 98: </b>On Windows 95, the type of a key's default value is always REG_SZ, so the <i>dwType</i> parameter must specify REG_SZ for an unnamed value. On Windows 98, an unnamed value can be of any type.

<p>
<b>Windows NT:</b> Registry keys do not have default values, but they can have one unnamed value, which can be of any type. 
</dd>
<dt>
<i>Reserved</i></dt>
<dd>
Reserved; must be zero. </dd>
<dt>
<i>dwType</i></dt>
<dd>
Specifies the type of information to be stored as the value's data. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Meaning</th>
</tr>
<tr valign=top>
<td width=49%>REG_BINARY</td>
<td width=51%>Binary data in any form.</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD</td>
<td width=51%>A 32-bit number.</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD_LITTLE_ENDIAN</td>
<td width=51%>A 32-bit number in little-endian format. This is equivalent to REG_DWORD.<p>
In little-endian format, a multi-byte value is stored in memory from the lowest byte (the "little end") to the highest byte. For example, the value 0x12345678 is stored as (0x78 0x56 0x34 0x12) in little-endian format.</p>
<p>
Windows NT, Windows 95, and Windows 98 are designed to run on little-endian computer architectures. A user may connect to computers that have big-endian architectures, such as some UNIX systems. </p>
</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD_BIG_ENDIAN</td>
<td width=51%>A 32-bit number in big-endian format. <p>
In big-endian format, a multi-byte value is stored in memory from the highest byte (the "big end") to the lowest byte. For example, the value 0x12345678 is stored as (0x12 0x34 0x56 0x78) in big-endian format.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>REG_EXPAND_SZ</td>
<td width=51%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions. To expand the environment variable references, use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_expandenvironmentstrings">
</object><a href=JavaScript:alink_1.Click()><b>ExpandEnvironmentStrings</b></a> function.</td>
</tr>
<tr valign=top>
<td width=49%>REG_LINK</td>
<td width=51%>A Unicode symbolic link.</td>
</tr>
<tr valign=top>
<td width=49%>REG_MULTI_SZ</td>
<td width=51%>An array of null-terminated strings, terminated by two null characters.</td>
</tr>
<tr valign=top>
<td width=49%>REG_NONE</td>
<td width=51%>No defined value type.</td>
</tr>
<tr valign=top>
<td width=49%>REG_RESOURCE_LIST</td>
<td width=51%>A device-driver resource list.</td>
</tr>
<tr valign=top>
<td width=49%>REG_SZ</td>
<td width=51%>A null-terminated string. It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.<p>
Do not use the REG_SZ type to store hard-coded paths to the system root directory or to the drive containing the system files. Instead, use the REG_EXPAND_SZ type with environment variables such as "%SystemRoot%". This ensures that the path will be up-to-date even if the user remaps the system drive to a different drive letter.</p>
</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpData</i></dt>
<dd>
Pointer to a buffer containing the data to be stored with the specified value name. </dd>
<dt>
<i>cbData</i></dt>
<dd>
Specifies the size, in bytes, of the information pointed to by the <i>lpData</i> parameter. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is ERROR_SUCCESS.</p>
<p>
If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <a href="strings_0sdh.htm"><b>FormatMessage</b></a> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</p>
<h4>Remarks</h4>
<p>
Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the registry. This helps the registry perform efficiently. Application elements such as icons, bitmaps, and executable files should be stored as files and not be placed in the registry. </p>
<p>
The key identified by the <i>hKey</i> parameter must have been opened with KEY_SET_VALUE access. To open the key, use the <a href="regapi_1woo.htm"><b>RegCreateKeyEx</b></a> or <a href="regapi_7yns.htm"><b>RegOpenKeyEx</b></a> function. </p>
<p>
If <i>dwType</i> is the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type and the ANSI version of this function is used (either by explicitly calling <b>RegSetValueExA</b> or by <i>not</i> defining UNICODE before including the WINDOWS.H file), the data pointed to by the <i>lpData</i> parameter must be an ANSI character string. The string is converted to Unicode before it is stored in the registry. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winreg.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_1woo.htm"><b>RegCreateKeyEx</b></a>, <a href="regapi_6x89.htm"><b>RegFlushKey</b></a>, <a href="regapi_7yns.htm"><b>RegOpenKeyEx</b></a>, <a href="regapi_05np.htm"><b>RegQueryValue</b></a>, <a href="regapi_3wzc.htm"><b>RegQueryValueEx</b></a>, <a href="regapi_6qzp.htm"><b>RegSetValue</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

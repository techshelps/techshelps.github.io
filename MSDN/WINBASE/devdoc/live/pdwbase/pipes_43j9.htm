<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreatePipe</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createpipe"></a>CreatePipe</h1>
<p>
The <b>CreatePipe</b> function creates an anonymous pipe, and returns handles to the read and write ends of the pipe. </p>
<pre><code><b>BOOL CreatePipe(
  PHANDLE</b><i> hReadPipe</i><b>,                       </b>// pointer to read handle
<b>  PHANDLE</b><i> hWritePipe</i><b>,                      </b>// pointer to write handle
<b>  LPSECURITY_ATTRIBUTES</b><i> lpPipeAttributes</i><b>,  </b>// pointer to security attributes
<b>  DWORD</b><i> nSize</i>                              // pipe size
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hReadPipe</i></dt>
<dd>
Pointer to the variable that receives the read handle for the pipe. </dd>
<dt>
<i>hWritePipe</i></dt>
<dd>
Pointer to the variable that receives the write handle for the pipe. </dd>
<dt>
<i>lpPipeAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpPipeAttributes</i> is NULL, the handle cannot be inherited. 
<p>
<b>Windows NT:</b> The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new pipe. If <i>lpPipeAttributes</i> is NULL, the pipe gets a default security descriptor. 
</dd>
<dt>
<i>nSize</i></dt>
<dd>
Specifies the buffer size for the pipe. The size is only a suggestion; the system uses the value to calculate an appropriate buffering mechanism. If this parameter is zero, the system uses the default buffer size. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>CreatePipe</b> creates the pipe, assigning the specified pipe size to the storage buffer. <b>CreatePipe</b> also creates handles that the process uses to read from and write to the buffer in subsequent calls to the <b>ReadFile</b> and <b>WriteFile </b>functions. </p>
<p>
To read from the pipe, a process uses the read handle in a call to the<b> ReadFile </b>function.<b> ReadFile</b> returns when one of the following is true: a write operation completes on the write end of the pipe, the number of bytes requested has been read, or an error occurs.</p>
<p>
When a process uses <b>WriteFile</b> to write to an anonymous pipe, the write operation is not completed until all bytes are written. If the pipe buffer is full before all bytes are written, <b>WriteFile</b> does not return until another process or thread uses <b>ReadFile</b> to make more buffer space available. </p>
<p>
<b>Windows NT:</b> Anonymous pipes are implemented using a named pipe with a unique name. Therefore, you can often pass a handle to an anonymous pipe to a function that requires a handle to a named pipe. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="pipes_2vqr.htm">Pipes Overview</a>, <a href="pipes_0tmb.htm">Pipe Functions</a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a>, <a href="filesio_3kkl.htm"><b>WriteFile</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

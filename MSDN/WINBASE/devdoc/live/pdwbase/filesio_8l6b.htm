<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading, Writing, and Locking Files</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_reading_writing_and_locking_files"></a>Reading, Writing, and Locking Files</h2>
<p>
The <a href="filesio_39id.htm"><b>ReadFile</b></a> function requires a file handle that is open for reading, or reading and writing. <b>ReadFile</b> copies a specified number of bytes, from the current position up to the end of the file, to a specified buffer. The current position is either the current file pointer setting or the <b>Offset</b> and <b>OffsetHigh</b> members of the specified <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure. The function returns the actual number of bytes read in a variable specified by its fourth parameter. </p>
<p>
The <a href="filesio_3kkl.htm"><b>WriteFile</b></a> function requires a file handle that is open for writing, or writing and reading. <b>WriteFile</b> copies a specified number of bytes, from the current position up to the end of the buffer, to a specified file. The function returns the actual number of bytes written in a variable specified by its fourth parameter. </p>
<p>
The following example illustrates a possible flow for using callback completion asynchronous I/O. </p>
<p>
<b>Completion Routine</b>: </p>
<pre><code>VOID IoCompletionRoutine(DWORD dwErrorCode, 
        DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped) 
{ 
    // If an I/O error occurs, display the error and exit. 
 
    if (dwErrorCode) 
    { 
        printf("FATAL I/O Error %ld I/O Context %lx.%lx\n", 
            dwErrorCode, lpOverlapped, lpOverlapped-&gt;hEvent); 
        ExitProcess(dwErrorCode); 
    } 
    LocalFree(lpOverlapped); 
} 
 </code></pre>
<p>
<b>Main Thread</b>: </p>
<pre><code>VOID IoWorkerThread(VOID) 
{ 
    HANDLE HandleVector[2]; 
    DWORD CompletionStatus; 
    PIOREQUEST IoRequestPacket; 
    LPOVERLAPPED Overlapped; 
    BOOL IoOperationStatus; 
 
    HandleVector[0] = IoWorkerListLock; 
    HandleVector[1] = IoWorkerListSemaphore; 
 
    for(;;) 
    { 
 
        // Do an alertable wait on the handle vector. Both objects 
        // being signaled at the same time means that there is an 
        // I/O request in the queue and the caller has exclusive 
        // access to the queue. 
 
        CompletionStatus = WaitForMultipleObjectsEx(2, HandleVector, 
                TRUE, INFINITE, TRUE); 
 
        // If the wait failed, error out. 
 
        if (CompletionStatus == 0xFFFFFFFF) 
        { 
            printf("FATAL WAIT ERROR %ld\n", GetLastError()); 
            ExitProcess(1); 
        } 
        // If an I/O completion occurred, wait for another 
        // I/O request or I/O completion. 
 
        if (CompletionStatus != WAIT_IO_COMPLETION) 
        { 
 
            // The wait was satisfied. Ownership of the I/O 
            // request queue is exclusive, and there is something in 
            // the queue. To insert something in the queue, the 
            // inserter gets the list lock (mutex), inserts an entry, 
            // signals the list semaphore, and finally releases the 
            // list lock. 
 
            IoRequestPacket = RemoveHeadList(&amp;IoRequestList); 
 
            ReleaseMutex(IoWorkerListLock); 
 
            // Allocate an overlapped structure.
 
            Overlapped = LocalAlloc(LMEM_ZEROINIT, 
                    sizeof(OVERLAPPED)); 
 
            if (!Overlapped) 
            { 
                printf("FATAL allocation error\n"); 
                ExitProcess(1); 
            } 
 
            Overlapped-&gt;Offset = IoRequestPacket-&gt;Offset; 
            Overlapped-&gt;OffsetHigh = IoRequestPacket-&gt;OffsetHigh; 
            Overlapped-&gt;hEvent = 
                    IoRequestPacket-&gt;dwAdditionalIoContext; 
 
            if (IoRequestPacket-&gt;bRead) 
            { 
                IoOperationStatus = 
                            ReadFileEx(IoRequestPacket-&gt;hFile, 
                    IoRequestPacket-&gt;lpBuffer, 
                    IoRequestPacket-&gt;dwTransferCount, 
                    Overlapped, IoCompletionRoutine); 
            } 
            else 
            { 
                IoOperationStatus = 
                    WriteFileEx(IoRequestPacket-&gt;hFile, 
                        IoRequestPacket-&gt;lpBuffer, 
                        IoRequestPacket-&gt;dwTransferCount, 
                        Overlapped, 
                        IoCompletionRoutine); 
            } 
 
            // Test to see if the I/O was queued successfully.
 
            if (!IoOperationStatus) 
            { 
                printf("FATAL I/O Error %ld I/O Context %lx.%lx\n", 
                    GetLastError(), Overlapped, Overlapped-&gt;hEvent); 
                ExitProcess(1); 
            } 
 
            // The I/O queued successfully. Go back into the 
            // alertable wait for I/O completion or for 
            // more I/O requests. 
 
        } 
    } 
} 
 </code></pre>
<p>
The <a href="filesio_8iwi.htm"><b>SetFilePointer</b></a> function moves the file pointer a specified number of bytes, relative to the beginning or end of the file, or the file pointer's current position. If a positive number of bytes is specified, <b>SetFilePointer</b> moves the file pointer toward the end of the file; a negative value moves the pointer toward the beginning of the file. </p>
<p>
The following example appends one file to the end of another file. The application opens two files by using <a href="filesio_7wmd.htm"><b>CreateFile</b></a>: ONE.TXT is opened for reading, and TWO.TXT is opened for writing. Then the application appends the contents of ONE.TXT to the end of TWO.TXT by reading and writing 4K blocks by using <a href="filesio_39id.htm"><b>ReadFile</b></a> and <a href="filesio_3kkl.htm"><b>WriteFile</b></a>. Before writing to the second file, the application sets the second file's pointer to the end of the file by using <b>SetFilePointer</b> and locks the area to be written by using <a href="filesio_63xh.htm"><b>LockFile</b></a>. This prevents another process from accessing the area while the write is in progress. After each write operation, <a href="filesio_1jl1.htm"><b>UnlockFile</b></a> unlocks the locked area. </p>
<pre><code>HANDLE hFile; 
 
HANDLE hAppend; 
 
DWORD  dwBytesRead, dwBytesWritten, dwPos; 
 
char   buff[4096]; 
 
// Open the existing file. 
 
hFile = CreateFile("ONE.TXT",     // open ONE.TXT 
    GENERIC_READ,                 // open for reading 
    0,                            // do not share 
    NULL,                         // no security 
    OPEN_EXISTING,                // existing file only 
    FILE_ATTRIBUTE_NORMAL,        // normal file 
    NULL);                        // no attr. template 

if (hFile == INVALID_HANDLE_VALUE) 
{ 
    ErrorHandler("Could not open ONE.");  // process error 
} 
 
// Open the existing file, or if the file does not exist, 
// create a new file. 
 
hAppend = CreateFile("TWO.TXT",   // open TWO.TXT 
    GENERIC_WRITE,                // open for writing 
    0,                            // do not share 
    NULL,                         // no security 
    OPEN_ALWAYS,                  // open or create 
    FILE_ATTRIBUTE_NORMAL,        // normal file 
    NULL);                        // no attr. template 

if (hAppend == INVALID_HANDLE_VALUE) 
{ 
    ErrorHandler("Could not open TWO.");    // process error 
} 
 
// Append the first file to the end of the second file. 
// Lock the second file to prevent another process from 
// accessing it while writing to it. Unlock the 
// file when writing is finished. 
 
do 
{ 
    if (ReadFile(hFile, buff, 4096, &amp;dwBytesRead, NULL)) 
    { 
        dwPos = SetFilePointer(hAppend, 0, NULL, FILE_END); 
        LockFile(hAppend, dwPos, 0, dwPos + dwBytesRead, 0); 
        WriteFile(hAppend, buff, dwBytesRead, 
            &amp;dwBytesWritten, NULL); 
        UnlockFile(hAppend, dwPos, 0, dwPos + dwBytesRead, 0); 
    } 
} while (dwBytesRead == 4096); 
 
// Close both files.
 
CloseHandle(hFile); 
CloseHandle(hAppend); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WaitForMultipleObjectsEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_waitformultipleobjectsex"></a>WaitForMultipleObjectsEx</h1>
<p>
The <b>WaitForMultipleObjectsEx</b> function returns when one of the following occurs:
<ul>
<li>
Either any one or all of the specified objects are in the signaled state.</li>
<li>
An I/O completion routine or asynchronous procedure call (APC) is queued to the thread.</li>
<li>
The time-out interval elapses.</li>
</ul>
<pre><code><b>DWORD WaitForMultipleObjectsEx(
  DWORD</b><i> nCount</i><b>,             </b>// number of handles in handle array
<b>  CONST HANDLE</b><i> *lpHandles</i><b>,  </b>// points to the object-handle array
<b>  BOOL</b><i> fWaitAll</i><b>,            </b>// wait flag
<b>  DWORD</b><i> dwMilliseconds</i><b>,     </b>// time-out interval in milliseconds
<b>  BOOL</b><i> bAlertable</i>           // alertable wait flag
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>nCount</i></dt>
<dd>
Specifies the number of object handles to wait for in the array pointed to by <i>lpHandles</i>. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS. </dd>
<dt>
<i>lpHandles</i></dt>
<dd>
Pointer to an array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. 
<p>
<b>Windows NT:</b> The handles must have SYNCHRONIZE access. For more information, see <a href="accctrl_6gdv.htm">Standard Access Rights</a>. 

<p>
<b>Windows 95:</b> No handle may be a duplicate of another handle created using <b>DuplicateHandle</b>. 
</dd>
<dt>
<i>fWaitAll</i></dt>
<dd>
Specifies the wait type. If TRUE, the function returns when the states all objects in the <i>lpHandles</i> array are set to signaled. If FALSE, the function returns when the state of any one of the objects is set to signaled. In the latter case, the return value indicates the object whose state caused the function to return. </dd>
<dt>
<i>dwMilliseconds</i></dt>
<dd>
Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the criteria specified by the <i>bWaitAll</i> parameter are not met and no completion routines or APCs are queued. If <i>dwMilliseconds</i> is zero, the function tests the states of the specified objects and checks for queued completion routines or APCs and then returns immediately. If <i>dwMilliseconds</i> is INFINITE, the function's time-out interval never elapses. </dd>
<dt>
<i>bAlertable</i></dt>
<dd>
Specifies whether the function returns when the system queues an I/O completion routine or APC. If TRUE, the function returns and the completion routine or APC function is executed. If FALSE, the function does not return and the completion routine or APC function is not executed. 
<p>
A completion routine is queued when the <a href="filesio_0660.htm"><b>ReadFileEx</b></a> or <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> function in which it was specified has completed. The wait function returns and the completion routine is called only if <i>bAlertable</i> is TRUE and the calling thread is the thread that initiated the read or write operation. An APC is queued when you call <a href="synchro_3dk3.htm"><b>QueueUserAPC</b></a>.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value indicates the event that caused the function to return. This value can be one of the following. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Value</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=51%>WAIT_OBJECT_0 to (WAIT_OBJECT_0 + <i>nCount</i> – 1)</td>
<td width=49%>If <i>bWaitAll</i> is TRUE, the return value indicates that the state of all specified objects is signaled. <p>
If <i>bWaitAll</i> is FALSE, the return value minus WAIT_OBJECT_0 indicates the <i>lpHandles</i> array index of the object that satisfied the wait. If more than one object became signalled during the call, this is the array index of the signalled object with the smallest index value of all the signalled objects.</p>
</td>
</tr>
<tr valign=top>
<td width=51%>WAIT_ABANDONED_0 to (WAIT_ABANDONED_0 + <i>nCount</i> – 1)</td>
<td width=49%>If <i>bWaitAll</i> is TRUE, the return value indicates that the state of all specified objects is signaled, and at least one of the objects is an abandoned mutex object. <p>
If <i>bWaitAll</i> is FALSE, the return value minus WAIT_ABANDONED_0 indicates the <i>lpHandles</i> array index of an abandoned mutex object that satisfied the wait.</p>
</td>
</tr>
<tr valign=top>
<td width=51%>WAIT_IO_COMPLETION</td>
<td width=49%>One or more I/O completion routines are queued for execution.</td>
</tr>
<tr valign=top>
<td width=51%>WAIT_TIMEOUT</td>
<td width=49%>The time-out interval elapsed, the conditions specified by the <i>bWaitAll</i> parameter were not satisfied, and no completion routines are queued.</td>
</tr>
</table><br>
<p>
If the function fails, the return value is 0xFFFFFFFF. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>WaitForMultipleObjectsEx</b> function determines whether the wait criteria have been met. If the criteria have not been met, the calling thread enters an efficient wait state, using very little processor time while waiting for the criteria to be met.</p>
<p>
When <i>fWaitAll</i> is TRUE, the function's wait operation is completed only when the states of all objects have been set to signaled. The function does not modify the states of the specified objects until the states of all objects have been set to signaled. For example, a mutex can be signaled, but the thread does not get ownership until the states of the other objects are also set to signaled. In the meantime, some other thread may get ownership of the mutex, thereby setting its state to nonsignaled.</p>
<p>
Before returning, a wait function modifies the state of some types of synchronization objects. Modification occurs only for the object or objects whose signaled state caused the function to return. For example, the count of a semaphore object is decreased by one. When <i>fWaitAll</i> is FALSE, and multiple objects are in the signaled state, the function chooses one of the objects to satisfy the wait; the states of the objects not selected are unaffected. </p>
<p>
The <b>WaitForMultipleObjectsEx</b> function can specify handles of any of the following object types in the <i>lpHandles</i> array: 
<ul>
<li>
Change notification</li>
<li>
Console input</li>
<li>
Event</li>
<li>
Job</li>
<li>
Mutex</li>
<li>
Process</li>
<li>
Semaphore</li>
<li>
Thread</li>
<li>
Waitable timer</li>
</ul>
<p>
For more information, see <a href="synchro_5gqb.htm">Synchronization Objects</a>.</p>
<p>
Use caution when calling the wait functions and code that directly or indirectly creates windows. If a thread creates any windows, it must process messages. Message broadcasts are sent to all windows in the system. A thread that uses a wait function with no time-out interval may cause the system to become deadlocked. Two examples of code that indirectly creates windows are DDE and COM <b>CoInitialize</b>. Therefore, if you have a thread that creates windows, use <a href="synchro_2esz.htm"><b>MsgWaitForMultipleObjects</b></a> or <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, rather than <b>WaitForMultipleObjectsEx</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a>, <a href="synchro_8ub8.htm"><b>CreateEvent</b></a>, <a href="filesio_7wmd.htm"><b>CreateFile</b></a>, <a href="synchro_1a2g.htm"><b>CreateMutex</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a>, <a href="synchro_9zol.htm"><b>CreateSemaphore</b></a>, <a href="synchro_51o2.htm"><b>CreateWaitableTimer</b></a>, <a href="prothred_4084.htm"><b>CreateThread</b></a>, <a href="filesio_9hgu.htm"><b>FindFirstChangeNotification</b></a>, <a href="conchar_7k9x.htm"><b>GetStdHandle</b></a>, <a href="synchro_2esz.htm"><b>MsgWaitForMultipleObjects</b></a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="synchro_5myc.htm"><b>OpenEvent</b></a>, <a href="synchro_82pk.htm"><b>OpenMutex</b></a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="synchro_3y3p.htm"><b>OpenSemaphore</b></a>, <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a>, <a href="synchro_1ylw.htm"><b>PulseEvent</b></a>, <a href="synchro_3dk3.htm"><b>QueueUserAPC</b></a>, <a href="filesio_0660.htm"><b>ReadFileEx</b></a>, <a href="synchro_4f78.htm"><b>ResetEvent</b></a>, <a href="synchro_8ut0.htm"><b>SetEvent</b></a>, <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a>, <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

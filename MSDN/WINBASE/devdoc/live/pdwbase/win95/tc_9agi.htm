<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Types Supported By the Thunk Compiler</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win95_data_types_supported_by_the_thunk_compiler"></a>Data Types Supported By the Thunk Compiler</h3>
<p>
The thunk compiler supports some C data types as parameters, return values, or both. The following data types are supported as function parameters: 
<ul>
<li>
Scalar data types such as <b>int</b>, <b>char</b>, <b>unsigned int</b>, and <b>unsigned long</b>.</li>
<li>
A special type, <b>bool</b>, that is not supported by the C/C++ compiler. You should use <b>bool</b> in your thunk script for functions that use a nonzero value other than 1 to represent TRUE.</li>
<li>
Pointers to scalar data types.</li>
<li>
Structures passed by value or reference. </li>
<li>
Structures within structures. </li>
<li>
Pointers within structures, provided that the data type pointed to does not require repacking. The object can be another structure. </li>
<li>
Arrays of scalar values embedded in structures. </li>
</ul>
<p>
The following data types are supported as function return values: 
<ul>
<li>
Scalar data types such as <b>int</b>, <b>char</b>, <b>unsigned int</b>, and <b>unsigned long</b>.</li>
<li>
A special type, <b>bool</b>, that is not supported by the C/C++ compiler. You should use <b>bool</b> in your thunk script for functions that use a nonzero value other than 1 to represent TRUE.</li>
<li>
Pointers to scalar data types for 32-bit to 16-bit thunks, provided that the data type does not change size. For example, pointers to <b>int</b> are not supported, because an <b>int</b> is 16 bits long in 16-bit code and 32 bits long in 32-bit code.</li>
<li>
Structure pointers for 32-bit to 16-bit thunks, provided that the structure requires no repacking and contains no pointers. The segment address on the 16-bit side is not globally fixed by the thunk compiler. As a general rule, the thunk compiler deallocates the selectors it allocates.</li>
<li>
Arrays of scalar values embedded in structures. </li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>int</b> data type is 16 bits wide in 16-bit code and 32 bits wide in 32-bit code. In 32-bit to 16-bit thunks, variables of type <b>int</b> are first truncated from 32 bits to 16 bits (less than 65536), then sign-extended to 32 bits upon return. Likewise, in 16-bit to 32-bit thunks, variables of type <b>int</b> are first sign-extended to 32 bits, then truncated to 16 bits on return. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows 95 System Services</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win95_windows_95_system_services"></a>Windows 95 System Services</h1>
<h4>File I/O</h4>
<p>
Windows 95 does not support asynchronous file input and output (I/O), except on serial devices. Therefore, the <a href="../filesio_39id.htm"><b>ReadFile</b></a> and <a href="../filesio_3kkl.htm"><b>WriteFile</b></a> functions will fail if you pass in an overlapped region on anything other than a serial device. The <a href="../synchro_75v8.htm"><b>GetOverlappedResult</b></a> function works only on serial devices or on files opened by using the <a href="../devio_9quk.htm"><b>DeviceIoControl</b></a> function.</p>
<p>
In Windows 95, the <a href="../filesio_0660.htm"><b>ReadFileEx</b></a> and <a href="../filesio_8r08.htm"><b>WriteFileEx</b></a> functions will fail if you pass in the handle of a serial device (for example, COM2). <b>ReadFile</b> and <b>WriteFile</b>, however, accept the handle of a serial device. </p>
<p>
In Windows 95, the <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> function does not support the standard "\\.\C:" and "\\.\PhysicalDrive0" formats used to gain access to the logical or physical drives. To gain access, applications must specify a virtual device (VxD) name instead and use the <a href="../devio_9quk.htm"><b>DeviceIoControl</b></a> function to send requests through the VxD to the logical and physical drives. For more information, see <a href="devio_85d8.htm">Device I/O Control</a>.</p>
<p>
In Windows NT, the <a href="../filesio_5n8l.htm"><b>DeleteFile</b></a> function fails if you attempt to delete a file that is open for normal I/O or is opened as a memory mapped file. In Windows 95, <b>DeleteFile</b> deletes such files. Because deleting open files may cause loss of data and application failure, you must take every precaution to close files before attempting to delete them by using <b>DeleteFile</b>.</p>
<h4>Time</h4>
<p>
In Windows NT, the <a href="../time_63hh.htm"><b>FileTimeToDosDateTime</b></a> and <a href="../time_7vhh.htm"><b>DosDateTimeToFileTime</b></a> functions allow dates up to 12/31/2107. In Windows 95, these functions allow dates up to 12/31/2099.</p>
<p>
The precision of the time for a file on a file allocation table (FAT) file system volume is 2 seconds. If Windows 95 is connected through a network to a different file system, the time precision is limited only by the remote device.</p>
<h4>Memory Management</h4>
<p>
In Windows 95, fixed memory blocks cannot be reallocated to be movable. The GMEM_MODIFY and GMEM_MOVEABLE combination of values has no effect when a memory block is reallocated by using the <a href="../memman_0lcz.htm"><b>GlobalReAlloc</b></a> function. Similarly, the LMEM_MODIFY and LMEM_MOVEABLE combination has no effect when a memory block is reallocated by using the <a href="../memman_1nvn.htm"><b>LocalReAlloc</b></a> function.</p>
<p>
In Windows 95, committing memory for a page that is already committed is an expensive operation that has no ultimate effect (it is expensive because additional storage is allocated and subsequently freed for each committed page). When committing memory by using the <a href="../memman_3elf.htm"><b>VirtualAlloc</b></a> function, an application should specify only the pages that actually need to be committed.</p>
<p>
Although applications can request that memory allocation be at a specific virtual address, applications must not depend on any given address range always being available on every operating system. Applications can query the address space by using the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsysteminfo">
</object><a href=JavaScript:alink_1.Click()><b>GetSystemInfo</b></a> function.</p>
<p>
In Windows 95, memory allocated by Win32-based applications falls in the address range 4 megabytes (MB) – 2GB for private memory and 2GB – 3GB for shared memory (shared mapped files). The PAGE_WRITECOPY and PAGE_GUARD access protection values are not supported. Instead of using the PAGE_GUARD value and handling the EXCEPTION_GUARD_PAGE exception, applications can use the PAGE_NOACCESS value and handle the EXCEPTION_ACCESS_VIOLATION exception.</p>
<h4>File Mapping</h4>
<p>
The SEC_IMAGE and SEC_NOCACHE values for the <i>fdwProtect </i>parameter of the <a href="../fmap3_79wn.htm"><b>CreateFileMapping</b></a> function are not supported in Windows 95. In addition, the <i>dwMaximumSizeHigh </i>parameter of <b>CreateFileMapping</b> is ignored in Windows 95, so applications should specify zero for the parameter.</p>
<p>
In Windows 95, shared memory mapped files that are created by using the <a href="../fmap3_2it4.htm"><b>MapViewOfFileEx</b></a> function appear in the same address space across all 32-bit processes in the system. If you pass in a specific base offset in the <i>lpvBase</i> parameter of <b>MapViewOfFileEx</b> and the function succeeds, you are guaranteed that the same memory region is available in every process. This is not true in Windows NT because <b>MapViewOfFileEx</b> fails for any process that already has the given memory region in use.</p>
<p>
Coherence guarantees that the data accessible in a file view is an identical copy of the file's contents on disk. In Windows 95, file views derived from a single file-mapping object are coherent only if the file is accessed through one of the views. A view of a file is not guaranteed to be coherent if the file is accessed by normal file I/O functions, such as <a href="../filesio_39id.htm"><b>ReadFile</b></a> or <a href="../filesio_3kkl.htm"><b>WriteFile</b></a>, or by views created from a different file-mapping object.</p>
<p>
If you close a file handle that was used to create a file mapping object, both Windows NT and Windows 95 hold the file open until you unmap the last view of the file by using the <a href="../fmap3_9011.htm"><b>UnmapViewOfFile</b></a> function. However, Windows NT holds the file open with no sharing restrictions, whereas Windows 95 holds it open using the sharing restrictions of the original file handle. To ensure exclusive access to a file in Windows NT, the file handle must remain open for the life of the file-mapping object. Because Windows 95 retains the sharing restrictions, both the file handle and the handle to the file-mapping object may be closed after calling <a href="../fmap3_8p9h.htm"><b>MapViewOfFile</b></a> and exclusive access to the file is ensured.</p>
<p>
In Windows 95, if the FILE_MAP_COPY value is specified for the <i>fdwAccess</i> parameter of <b>MapViewOfFile </b>(or <a href="../fmap3_2it4.htm"><b>MapViewOfFileEx</b></a>), the <i>hMapObject</i> parameter must have been created with the PAGE_WRITECOPY value. In addition, the <i>dwOffsetHigh</i> parameter of <b>MapViewOfFile </b>(or <b>MapViewOfFileEx</b>) is ignored, so applications should specify zero for the parameter.</p>
<p>
Windows 95 implements copy-on-write file mappings slightly differently than Windows NT. In Windows 95, a call to <b>MapViewOfFile</b> with FILE_MAP_COPY returns an error unless PAGE_WRITECOPY was used with the <a href="../fmap3_79wn.htm"><b>CreateFileMapping</b></a> function. In both Windows NT and Windows 95, creating the map with PAGE_WRITECOPY and the view with FILE_MAP_COPY produces a view to the file that makes the pages swappable and prevents modifications from going to the original data file. In Windows 95, PAGE_WRITECOPY must be passed to <b>CreateFileMapping</b>, but this is optional in Windows NT.</p>
<p>
If you share the mapping between multiple processes by using the <a href="../handobj_2pyd.htm"><b>DuplicateHandle</b></a> or <a href="../fmap3_1h7r.htm"><b>OpenFileMapping</b></a> function and one process writes to a view, the modifications will not be propagated to the other process in Windows NT. However, the modifications will be propagated in Windows 95. The original file, though, will not change on either platform.</p>
<h4>Registry</h4>
<p>
The Windows 95 registry does not allow key names containing control characters. In addition, if the <i>lpszSubKey</i> parameter is an empty string (""), the <a href="../regapi_1po9.htm"><b>RegDeleteKey</b></a> function deletes the key identified by the <i>hKey</i> parameter. </p>
<p>
In Windows 95, the <a href="../regapi_1woo.htm"><b>RegCreateKeyEx</b></a> function creates a non-volatile key even if the REG_OPTION_VOLATILE value is specified.</p>
<h4>Handle Duplication</h4>
<p>
In Windows 95, the <a href="../handobj_2pyd.htm"><b>DuplicateHandle</b></a> function cannot duplicate handles of registry keys as it can in Windows NT. The function returns an error if an application attempts to duplicate the handle of a registry key. In addition, when a file handle is duplicated, the duplicated handle will not be granted more access than the original. </p>
<h4>Thread Locales</h4>
<p>
Thread locales, retrieved and set by using the <a href="../nls_9ko5.htm"><b>GetThreadLocale</b></a> and <a href="../nls_52lh.htm"><b>SetThreadLocale</b></a> functions, are static and can only be changed at system boot time.</p>
<h4>Instruction Cache</h4>
<p>
In Windows 95, the <a href="../debug_89r9.htm"><b>FlushInstructionCache</b></a> function always returns TRUE. Windows 95 supports single processor machines only.</p>
<h4>Resources</h4>
<p>
In Windows 95, a call to the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_freeresource">
</object><a href=JavaScript:alink_2.Click()><b>FreeResource</b></a> function must be included for every call to the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_3.Click()><b>LoadResource</b></a> function. The call to <b>FreeResource</b> allows the system to discard a resource that an application no longer needs. Windows NT automatically frees resources, so a call to <b>FreeResource</b> is not required. </p>
<h4>Access Rights</h4>
<p>
The SYNCHRONIZE standard access rights flag is not supported in Windows 95. The following functions are affected.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="../handobj_2pyd.htm"><b>DuplicateHandle</b></a></td>
<td width=52%><a href="../synchro_3y3p.htm"><b>OpenSemaphore</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="../synchro_2esz.htm"><b>MsgWaitForMultipleObjects</b></a></td>
<td width=52%><a href="../synchro_9xbn.htm"><b>WaitForMultipleObjects</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="../synchro_5myc.htm"><b>OpenEvent</b></a></td>
<td width=52%><a href="../synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="../synchro_82pk.htm"><b>OpenMutex</b></a></td>
<td width=52%><a href="../synchro_4ldg.htm"><b>WaitForSingleObject</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="../prothred_478z.htm"><b>OpenProcess</b></a></td>
<td width=52%><a href="../synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a></td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

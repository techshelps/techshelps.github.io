<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exclusive Use Lock</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_exclusive_use_lock"></a>Exclusive Use Lock</h2>
<p>
To request exclusive use of a volume, an application use either Lock Logical Volume (<a href="95func_9lm0.htm">Interrupt 21h Function 440Dh Minor Code 4Ah</a>) or Lock Physical Volume (<a href="95func_9lns.htm">Interrupt 21h Function 440Dh Minor Code 4Bh</a>). Before issuing an Interrupt 13h function, an application must acquire a physical volume lock. An application that only modifies logical volumes should acquire a logical volume lock. The calling interface for both locks is the same except for how the volume to lock is specified; the physical lock requires an Interrupt 13h device unit number, but the logical lock requires a logical drive number. When an application obtains a lock on a physical drive, the system acquires a logical volume lock for each logical volume on the physical drive. Obtaining a lock on a logical volume that is the parent (or host) drive also locks the child drives. For example, a compressed volume is locked when its host drive is locked.</p>
<p>
The application that owns the lock can carry out direct disk write operations. Only one application at a time can lock the volume. If an application already owns the volume lock, the system fails subsequent calls to lock the volume. </p>
<p>
The volume-locking functions allow the lock owner to control the kind of access that other processes have to the volume. There are three categories of access: <i>read operations</i>, which include opening a file as well as reading from a file; <i>write operations</i>, which include deleting and renaming a file as well as writing to a file; and <i>new file mappings</i>. </p>
<p>
When an application calls either of the lock volume functions, it specifies a <i>lock level </i>and, depending on the level, passes in additional information known as <i>permissions</i>. The lock level and permissions specify what kind of operations the system allows processes other than the lock owner to do on the volume while it is locked. </p>
<p>
When another process attempts to access the volume, the file system will <i>fail </i>the operation and return the ERROR_WRITE_PROTECT error value or it will block<i> </i>the operation, depending on the lock level and permissions. The system queues a blocked operation and puts the process requesting the operation to sleep until the lock is released and the operation can be performed.</p>
<p>
When an application has completed its work, it must unlock the volume. Depending on whether it acquired a logical or physical lock, the application unlocks the volume by calling either Unlock Logical Volume (<a href="95func_9rxk.htm">Interrupt 21h Function 440Dh Minor Code 6Ah</a>) or Unlock Physical Volume (<a href="95func_9rzc.htm">Interrupt 21h Function 440Dh Minor Code 6Bh</a>). Unlocking the volume lets the system perform any blocked operations (in the order that they occurred) and resume normal activity. If an application exits without releasing the lock, the system automatically releases it.</p>
<p>
If an application has a lock and the user attempts to close the virtual machine in which the application is running, the system displays a message warning the user that closing the virtual machine could result in damage to the volume. If the user confirms the closing, the system releases the lock and closes the virtual machine. </p>
<p>
An application can lock volumes on local drives, but not on network drives or on drives that are not managed by the I/O supervisor, a virtual device driver. Also, the lock and unlock volume IOCTL functions are not available in previous versions of Microsoft® MS-DOS®. If the functions are used with a previous version, they return an error value. </p>
<p>
Windows 95 provides 4 levels of exclusive volume locks. The level 0 lock is used alone, and lock levels 1, 2, and 3 form a hierarchy that increasingly restricts access to the file system based on the permissions set when the application obtains the level 1 lock. Although the level 0 lock is not part of the locking hierarchy formed by lock levels 1, 2, and 3, it has a more restrictive sublevel for applications that format volumes. Applications should perform direct disk write operations <i>only</i><b> </b>in either a level 0 or 3 lock. </p>
<p>&nbsp;</p></body>
</HTML>

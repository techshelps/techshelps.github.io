<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About the Thunk Compiler</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win95_about_the_thunk_compiler"></a>About the Thunk Compiler</h1>
<p>
Writing Win32-based applications provides the following advantages over writing 16-bit Windows-based applications: 
<ul>
<li>
The flat address space. Your application can access up to 2 gigabytes of memory. You no longer need to consider the boundaries and limitations imposed by a segmented architecture. In addition, many system resource limits have been increased. </li>
<li>
Better performance. Win32 platforms have faster memory management, networking, file operations, and floating-point operations. Your application can use threads to provide a responsive user interface. The system uses preemptive multitasking to schedule threads. </li>
<li>
Greater robustness. The system does not crash often, but if it does crash, it does not destroy data or cause other executing applications to crash. </li>
</ul>
<p>
Despite these advantages, however, you may have problems porting your application to the Win32 API. For example, when porting your application to take advantage of new system features, you might find you must use features from an existing 16-bit DLL that has not been ported to Win32. Rather than delay the release of your application while waiting for a ported version the 16-bit DLL, you can use the thunk compiler to call the 16-bit DLL from your Win32-based application. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Data Types Not Supported by the Thunk Compiler</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win95_handling_data_types_not_supported_by_the_thunk_compiler"></a>Handling Data Types Not Supported by the Thunk Compiler</h3>
<p>
There are several strategies for handling data types and calling conventions that the thunk compiler does not support. These strategies rely on substituting a supported type for the unsupported type and processing the data manually to obtain the original data. The thunk compiler does not support the following data types:
<ul>
<li>
Arrays of pointers or structures</li>
<li>
Unions</li>
<li>
Floating-point types (such as float or double)</li>
<li>
Pointers from 16-bit to 32-bit thunks</li>
<li>
C++ classes and objects</li>
<li>
Linked lists, binary trees, and other dynamic data structures (the count of items is undetermined at compile time)</li>
</ul>
<p>
Before considering substitution strategies, it is important to understand how the thunk compiler translates data. The thunk compiler uses the following rules to translate data: 
<ul>
<li>
Automatically translate 32-bit pointers into 16-bit far pointers.</li>
<li>
Automatically translate 16-bit far pointers into 32-bit pointers.</li>
<li>
Pass signed and unsigned scalar values unmodified, except for integer values. Because integers are 32 bits wide in 32-bit code and 16 bits wide in 16-bit code, values are truncated on the 16-bit side of the thunk and sign-extended on the 32-bit side.</li>
</ul>
<p>
You should use the following general principles for substituting data types and calling conventions: 
<ul>
<li>
Write wrapper functions around the thunk to handle unsupported calling conventions.</li>
<li>
Substitute supported types for unsupported types in the thunk scripts. The supported type must be the same length as the unsupported type. In general, it should not be a pointer type.</li>
<li>
If the unsupported type is larger than 8 bytes, pass its address to the other side of the thunk and handle its interpretation there.</li>
<li>
To handle unsupported types in the return value, write wrapper functions for both sides of the thunk. Where necessary, give the actual function an extra parameter that points to a dynamically allocated buffer.</li>
</ul>
<h4>Handling Floating-Point Data Types</h4>
<p>
The thunk compiler does not support any floating-point types. There are three floating-point types: <b>float</b>, <b>double</b>, and <b>long double</b>. </p>
<p>
A <b>float</b> is 4 bytes long on both the 16-bit and 32-bit sides of a thunk. To pass a float to a thunk function, declare it as a <b>DWORD</b> value in the thunk script. This causes the thunk compiler to pass a 4-byte value without translating its value.</p>
<p>
A <b>double</b> is 8 bytes long on both the 16-bit and 32-bit sides of the thunk. To pass a double to a thunk function, declare a structure containing two <b>DWORD</b> values in the thunk script, and pass the structure to the function in the thunk script.</p>
<p>
In 16-bit code, a <b>long double</b> is a native 80-bit type of the floating-point processors in the Intel x86 microprocessor family. Because RISC processors do not have a native 80-bit floating point type, 32-bit C and C++ compilers such as Microsoft Visual C++ implement this type as a 64-bit <b>double</b>. If you need additional precision, pass the 80-bit value as a structure consisting of two <b>DWORD</b> members and a <b>WORD</b> member, and handle the value manually on the 32-bit side of the thunk.</p>
<h4>Handling Pointer Types</h4>
<p>
The thunk compiler automatically translates pointers to most types. It properly translates pointers to the following data types:
<ul>
<li>
All scalar data types.</li>
</ul>
<p>
<font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;Structures.
<ul>
<li>
Pointers within structures, provided the data type pointed to does not require repacking. The object can be another structure. </li>
</ul>
<p>
The thunk compiler automatically translates pointers. To pass an address without having it translated, use the <b>DWORD</b> type instead of a pointer type. You can use the untranslated address on the target side of the thunk; however, keep in mind that dereferencing this address on the target side of the thunk will cause an access violation.</p>
<p>
When a pointer is passed from 32-bit to 16-bit code, a single selector with a limit of 64K is allocated in the thunk. If the 16-bit code needs to access more than the first 64K of the block, it must change the base address of the selector or allocate additional selectors to access the block.</p>
<p>
Pointers to pointers are translated partially. The "outside" pointer is translated, but the pointer it points to  —  the "inside" pointer  —  is not translated. The thunk compiler does not handle all cases of pointers used in aggregate types, such as arrays of pointers.</p>
<h4>Handling Unions</h4>
<p>
The thunk compiler does not support unions because it cannot determine which type the union will represent at run time. For example, the following union must be treated differently by the thunk compiler depending on which member the application uses when it makes the thunk call:</p>
<pre><code>union
{
    DWORD dwIntegerValue;
    LPSTR szFileName;
}
</code></pre>
<p>
The problem is that the thunk compiler would have to pass the value unchanged, assuming that the dwIntegerValue member will be used, or translate the value as a pointer, assuming that the szFileName member will be used. Because the thunk compiler cannot make this decision, it cannot generate the correct code to process this union. To handle union types in thunks, declare a structure in the thunk script that is large enough to hold the union, then process the data manually on both sides of the thunk.</p>
<p>&nbsp;</p></body>
</HTML>

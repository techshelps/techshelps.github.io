<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Role of the Thunk Compiler</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_role_of_the_thunk_compiler"></a>Role of the Thunk Compiler</h2>
<p>
The thunk compiler takes a thunk script as input, then produces an assembly-language file that implements one or more thunks. These thunks are code that allows 32-bit code to call 16-bit code and vice-versa. The following steps briefly describe how to use the thunk compiler to create a flat thunk.</p>
<h5><img src="../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a flat thunk</h5>
<ol>
<li>
Create a thunk script. </li>
<li>
Compile the thunk script with the thunk compiler. </li>
<li>
Assemble the .ASM file produced by the thunk compiler twice — once for a 16-bit .OBJ file and the second time for a 32-bit .OBJ file. </li>
<li>
Create a Win32-based thunk DLL and link it with the 32-bit .OBJ file created in step 3. </li>
<li>
Create a 16-bit thunk DLL and link it with the 16-bit .OBJ file created in step 3.</li>
</ol>
<p>
The DLLs you create using these steps implement flat thunks. They can provide multiple thunks. If the DLLs implement thunks from 16-bit code to 32-bit code and thunks from 32-bit code to 16-bit code, you will need to create two thunk scripts, one for each direction. </p>
<p>
To use the thunk DLLs, simply call the function you want to use. For example, suppose your Win32-based application is calling MyFunction, which is implemented in a 16-bit DLL. The application calls a function implemented in the Win32-based thunk DLL that in turn calls the thunk function, MyFunction. When MyFunction is called in the 32-bit thunk DLL, the code generated by the thunk compiler calls the MyFunction implemented in the 16-bit thunk DLL. </p>
<p>&nbsp;</p></body>
</HTML>

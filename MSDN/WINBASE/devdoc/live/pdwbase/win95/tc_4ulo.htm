<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Win32-based Thunk DLL</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_creating_a_win32_based_thunk_dll"></a>Creating a Win32-Based Thunk DLL</h2>
<p>
After you compile the thunk script to create the 32-bit side of the thunk, you must create the Win32-based thunk DLL. To implement the Win32-based thunk DLL, use the following steps: </p>
<h5><img src="../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement the Win32-based thunk DLL</h5>
<ol>
<li>
Add the entry-point function to your 32-bit DLL's entry-point function (named DllMain by default). This function must call the following function created by the thunk compiler: <pre><code>BOOL WINAPI XXX_ThunkConnect32(LPSTR pszDll16, LPSTR pszDll32, 
    DWORD hInst, DWORD dwReason);
</code></pre>
<p>
Here is an example of a DLL entry-point function calling XXX_ThunkConnect32:
<pre><code>BOOL WINAPI DllMain(DWORD hInst, DWORD dwReason, 
    DWORD dwReserved) 
{
    if( !(XXX_ThunkConnect32( "DLL16.DLL",  // name of 16-bit DLL 
        "DLL32.DLL",                        // name of 32-bit DLL 
        hInst, dwReason)) ) 
    {
        return FALSE; 
    } 
    // Process dwReason. 
 
    Return TRUE;
} 
 </code></pre>
</li>
<li>
Add the following export statement to your 32-bit DLL's .DEF file.<pre><code>EXPORTS
XXX_ThunkData32
 </code></pre>
</li>
<li>
Export the function to which you are thunking. </li>
<li>
Build the DLL. Be sure to link with the 32-bit .OBJ file created from the thunk script and THUNK32.LIB. The 32-bit .OBJ file contains the code for XXX_ThunkData32, which is a table of function calls that the thunk compiler uses to implement the thunks. </li>
</ol>
<p>&nbsp;</p></body>
</HTML>

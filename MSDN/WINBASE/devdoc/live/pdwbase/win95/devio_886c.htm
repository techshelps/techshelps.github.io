<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Opening the VxD</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_opening_the_vxd"></a>Opening the VxD</h2>
<p>
You can open a static or dynamically loadable VxD by specifying the module name, filename, or registry entry identifying the VxD in a call to the <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> function. If the VxD exists and it supports the device IOCTL interface, the function returns a device handle that you can use in subsequent calls to the <a href="../devio_9quk.htm"><b>DeviceIoControl</b></a> function. Otherwise, the function fails and sets the last error value to ERROR_NOT_SUPPORTED or ERROR_FILE_NOT_FOUND. You can use the <a href="../errors_3uwi.htm"><b>GetLastError</b></a> function to retrieve the error value.</p>
<p>
When you open a VxD, you must specify a name having the following form.</p>
<pre><code>\\.\VxdName
 </code></pre>
<p>
<i>VxDName</i> can be the module name of the VxD, the name of the VxD file, or the name of a registry entry that specifies the filename.</p>
<p>
<a href="../filesio_7wmd.htm"><b>CreateFile</b></a> checks for a filename extension to determine whether <i>VxDName</i> specifies a file. If a filename extension (such as .VXD) is present, the function looks for the file in the standard search path. In the following example, <b>CreateFile</b> looks for the SAMPLE.VXD file in the standard search path.</p>
<pre><code>HANDLE hDevice;

hDevice = CreateFile("\\\\.\\SAMPLE.VXD", 0, 0, NULL, 0, 
    FILE_FLAG_DELETE_ON_CLOSE, NULL);
 </code></pre>
<p>
If <i>VxDName</i> has no filename extension, <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> checks the registry to see if the name is also a value name under the <b>KnownVxDs</b> key in <b>HKEY_LOCAL_MACHINE</b>\<b>System</b>\<b>CurrentControlSet</b>\<b>Control</b>\<b>SessionManager</b>. If it is a value name, <b>CreateFile</b> uses the current value associated with the name as the full path of the VxD file. This method is useful for specifying VxDs that are not in the standard search path. In the following example, <b>CreateFile</b> searches the registry for the MYVXDPATH value.</p>
<pre><code>hDevice = CreateFile("\\\\.\\MYVXDPATH", 0, 0, NULL, 0, 
    FILE_FLAG_DELETE_ON_CLOSE, NULL);
 </code></pre>
<p>
If <i>VxDName</i> has no filename extension and is not in the registry, <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> assumes that the name is a VxD module name and searches the internally maintained device descriptor blocks for an already loaded VxD having the given name. In the following example, <b>CreateFile</b> opens the standard VxD named VWIN32.VXD.</p>
<pre><code>hDevice = CreateFile("\\\\.\\VWIN32", 0, 0, NULL, 0, 
    0, NULL);
 </code></pre>
<p>
In all cases, if <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> cannot find or load the VxD, it sets the last error value to ERROR_FILE_NOT_FOUND. If the function loads the VxD but the VxD does not support the device IOCTL interface, <b>CreateFile </b>sets the last error value to ERROR_NOT_SUPPORTED. </p>
<p>
You can open the same VxD any number of times. <b>CreateFile</b> provides a unique handle each time you open a VxD, but it makes sure that no more than one copy of the VxD is loaded into memory. To ensure that the system removes the VxD from memory when you close the last instance of the VxD, use the FILE_FLAG_DELETE_ON_CLOSE value when opening dynamically loadable VxDs. Static VxDs cannot be removed from memory.</p>
<p>
Although <a href="../filesio_7wmd.htm"><b>CreateFile</b></a> has several parameters, only the <i>lpName</i> and <i>fdwAttrsAndFlags</i> parameters are useful when opening an VxD. <i>fdwAttrsAndFlags</i> can be zero, the FILE_FLAG_DELETE_ON_CLOSE value, or the FILE_FLAG_OVERLAPPED value. FILE_FLAG_OVERLAPPED is used for asynchronous operation and is described later in this article.</p>
<p>&nbsp;</p></body>
</HTML>

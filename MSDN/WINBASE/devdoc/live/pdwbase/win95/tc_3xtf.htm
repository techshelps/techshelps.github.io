<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Thunk Scripts</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_sample_thunk_scripts"></a>Sample Thunk Scripts</h2>
<p>
Many functions have pointers in their parameter lists. Some pointers are used for input only, some are used for output only, and some are used for both input and output. For example, the following function takes a pointer to an input string, updates a second string, and produces a third string as output: </p>
<pre><code>BOOL WINAPI ThunkIt(LPSTR lpstrInput, LPSTR lpstrInOut, 
    LPSTR lpstrOutput);
 </code></pre>
<p>
The corresponding thunk script for this function follows. </p>
<pre><code>enablemapdirect1632=true;

typedef char *LPSTR;
 
BOOL ThunkIt(LPSTR lpstrInput, LPSTR lpstrInOut, LPSTR lpstrOutput) 
{ 
    lpstrInput = input;   // Optional, as input is the default. 
    lpstrInOut = inout;   // Pointer for input and output. 
    lpstrOutput = output; // Pointer for output. 
}
 </code></pre>
<p>
The following thunk script uses a nested structure as an input-output parameter:</p>
<pre><code>enablemapdirect1632=true;

typedef unsigned int UINT;
typedef char *LPSTR;

typedef struct _POINT
{
    UINT x;
    UINT y;
} POINT;
typedef POINT *LPPOINT;

typedef struct _CIRCLE
{
    POINT center;
    UINT radius;
} CIRCLE, *LPCIRCLE;

void MyThunk32( LPCIRCLE lpCircleInOut )
{
    lpCircleInOut = inout;
}
</code></pre>
<p>&nbsp;</p></body>
</HTML>

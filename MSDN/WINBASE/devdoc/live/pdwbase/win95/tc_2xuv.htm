<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Late Loading</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_late_loading"></a>Late Loading</h2>
<p>
Windows 95 improves system performance by supporting<i> late loading</i> for thunk DLLs. In a 16-bit to 32-bit thunk, the system loads the 32-bit DLL when the application calls the first 16-bit to 32-bit thunk. It does not load the 32-bit DLL when the 16-bit DLL is loaded. </p>
<p>
Late loading has the following implications:
<ul>
<li>
The performance and working set size are improved for 16-bit applications that use only the 16-bit portions of thunk DLLs. These processes do not load the 32-bit DLL. </li>
<li>
The 16-bit DLL must not depend on any action taken by the 32-bit DLL's initialization code until the application has called at least one 16-bit to 32-bit thunk.</li>
<li>
The system cannot detect missing 32-bit DLLs or failure to load a 32-bit DLL until the application makes the first call to a 16-bit to 32-bit thunk. If the 32-bit DLL does not load or fails to initialize, the 16-bit to 32-bit thunk call returns a value of zero. You can change this error code on a thunk-by-thunk basis by including the <b>faulterrorcode</b> keyword in the function prototype in the thunk script. For example, the following function instructs the thunk subsystem to return a  – 1 from the thunk call if it is the first thunk call and the 32-bit DLL cannot finish loading.<pre><code>int Sample(void) 
{
    faulterrorcode = -1;
}
 </code></pre>
</li>
</ul>
<p>
Although late loading is a valuable optimization for a 16-bit DLL that can execute autonomously from its 32-bit counterpart, it does complicate error recovery. You can disable late loading by including the following line in the thunk script: </p>
<pre><code>preload32 = true;
 </code></pre>
<p>
If you use this option, the 16-bit subsystem will be released during the loading of your 16-bit DLL, possibly causing other 16-bit code to be reentered. For this reason, the <b>preload32</b> keyword is not available if your thunk script requires the <b>win31compat</b> keyword. For more information about the <b>win31compat</b> keyword, see <a href="tc_0ak3.htm">Compatibility with Existing 16-Bit DLLs</a>.</p>
<p>
Although the thunk compiler supports a <b>preload16</b> keyword, late loading of 16-bit DLLs is neither currently supported nor planned for a future version of Windows. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiling Flat Thunks</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win95_compiling_flat_thunks"></a>Compiling Flat Thunks</h2>
<p>
Compile your thunk script using the thunk compiler to create an .ASM file containing the flat thunk. The thunk compiler has the following syntax: </p>
<p class=indent1>
<b>thunk</b> [{-|/}<i>options</i>] <i>infile</i>[.<i>ext</i>]</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=21%><b>?</b></td>
<td width=79%>Displays the help screen.</td>
</tr>
<tr valign=top>
<td width=21%><b>h</b></td>
<td width=79%>Displays the help screen.</td>
</tr>
<tr valign=top>
<td width=21%><b>o</b> <i>name</i></td>
<td width=79%>Overrides the default output filename.</td>
</tr>
<tr valign=top>
<td width=21%><b>p</b> <i>n</i></td>
<td width=79%>Changes the 16-bit structure alignment (default = 2).</td>
</tr>
<tr valign=top>
<td width=21%><b>P</b> <i>n</i></td>
<td width=79%>Changes the 32-bit structure alignment (default = 4).</td>
</tr>
<tr valign=top>
<td width=21%><b>t</b> <i>name</i></td>
<td width=79%>Overrides the default base name.</td>
</tr>
<tr valign=top>
<td width=21%><b>N</b><i>x</i> <i>name</i></td>
<td width=79%>Specifies the name segment or class, where <i>x</i> is either C32 (for 32-bit code segment name) or C16 (for 16-bit code segment name).</td>
</tr>
</table><br>
<p>
The .ASM file produced by the thunk compiler contains code for both sides of the thunk. The 16-bit code in the .ASM file includes a jump table containing the 16:16 address of each function named in the thunk scripts. The 16-bit linker must be able to resolve these references; the functions must either be implemented in the 16-bit DLL or be imported by the DLL. The 32-bit code in the .ASM file contains a WINAPI function for each thunk, which converts its parameters to 16-bit values, then calls the 16-bit target referenced in the jump table. When a Win32-based application uses a 16-bit function through the thunk, it calls these compiler-generated functions directly.</p>
<p>
Assemble the resulting .ASM file to create the 16-bit side of the thunk by defining <b>IS_16</b>. For example, using Microsoft MASM version 6.11, you can use the following command line: </p>
<pre><code>ml /DIS_16 /c /W3 /nologo /Fo thk16.obj 16to32.asm
 </code></pre>
<p>
Assemble the resulting .ASM file to create the 32-bit side of the thunk by defining <b>IS_32</b>. For example, using Microsoft MASM version 6.11, you can use the following command line: </p>
<pre><code>ml /DIS_32 /c /W3 /nologo /Fo thk32.obj 16to32.asm
 </code></pre>
<p>
Create the following declaration for the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_lineto">
</object><a href=JavaScript:alink_1.Click()><b>LineTo</b></a> function in the thunk script: </p>
<pre><code>typedef bool         BOOL;
typedef unsigned int UINT; 
typedef UINT         HANDLE; 
typedef HANDLE       HDC; 
 
BOOL LineTo(HDC, int, int) 
{ 
} 
 </code></pre>
<p>
When the thunk compiler processes the thunk script, it generates the following 16-bit code: </p>
<pre><code>externDef LineTo:far16 
 
FT_gdiTargetTable label word 
    dw    offset LineTo 
    dw       seg LineTo
 </code></pre>
<p>
In addition, the thunk compiler generates the following 32-bit code: </p>
<pre><code>public LineTo@12 
LineTo@12: 
    mov    cl,0 
; LineTo(16) = LineTo(32) {} 
; 
; dword ptr [ebp+8]:  param1 
; dword ptr [ebp+12]:  param2 
; dword ptr [ebp+16]:  param3 
; 
public IILineTo@12 
IILineTo@12: 
    call    QT_Entry 
    push    word ptr [ebp+8]     ;param1: dword-&gt;word 
    push    word ptr [ebp+12]    ;param2: dword-&gt;word 
    push    word ptr [ebp+16]    ;param3: dword-&gt;word 
    call    QT_Target_gdi 
    movsx   ebx,ax 
    jmp     QT_Exit12
 </code></pre>
<p>
When a Win32-based application calls the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_lineto">
</object><a href=JavaScript:alink_2.Click()><b>LineTo</b></a> function, it is this routine that is executed. The routine builds a 16-bit call frame, calls a local routine requesting the appropriate address in the jump table, and sign-extends the return value. Each component receives its own set of routines (with the QT_ prefix), which automatically use the correct jump table. </p>
<p>&nbsp;</p></body>
</HTML>

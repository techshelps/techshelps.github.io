<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateFiber</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createfiber"></a>CreateFiber</h1>
<p>
The <b>CreateFiber</b> function allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This function does not schedule the fiber.</p>
<pre><code><b>LPVOID CreateFiber(
  DWORD</b><i> dwStackSize</i><b>,  </b>// initial thread stack size, in bytes
<b>  LPFIBER_START_ROUTINE</b><i> lpStartAddress</i><b>,</b>
<b>                      </b>// pointer to fiber function
<b>  LPVOID</b><i> lpParameter  </i>// argument for new fiber
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwStackSize</i></dt>
<dd>
Specifies the size, in bytes, of the stack for the new fiber. If zero is specified, the stack size defaults to the same size as that of the main thread. The function fails if it cannot commit <i>dwStackSize</i> bytes. Note that the system increases the stack size dynamically, if necessary. For more information, see <a href="prothred_0b8l.htm">Thread Stack Size</a>. </dd>
<dt>
<i>lpStartAddress</i></dt>
<dd>
Pointer to the application-defined function of type LPFIBER_START_ROUTINE to be executed by the fiber and represents the starting address of the fiber. Execution of the newly created fiber does not begin until another fiber calls the <a href="prothred_2wxe.htm"><b>SwitchToFiber</b></a> function with this address. For more information of the fiber callback function, see <a href="prothred_29pf.htm"><b>FiberProc</b></a>. </dd>
<dt>
<i>lpParameter</i></dt>
<dd>
Specifies a single argument that is passed to the fiber. This value can be retrieved by the fiber using the <a href="prothred_15nl.htm"><b>GetFiberData</b></a> function.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the address of the fiber.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
Before a thread can schedule a fiber using the <a href="prothred_2wxe.htm"><b>SwitchToFiber</b></a><b> </b>function, it must call the <a href="prothred_522a.htm"><b>ConvertThreadToFiber</b></a><b> </b>function<b> </b>so there is a fiber associated with the thread.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.51 SP3 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="prothred_522a.htm"><b>ConvertThreadToFiber</b></a>, <a href="prothred_29pf.htm"><b>FiberProc</b></a>, <a href="prothred_15nl.htm"><b>GetFiberData</b></a>, <a href="prothred_2wxe.htm"><b>SwitchToFiber</b></a></p>
<p>&nbsp;</p></body>
</HTML>

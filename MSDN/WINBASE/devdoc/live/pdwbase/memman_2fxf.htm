<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LocalAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_localalloc"></a>LocalAlloc</h1>
<p>
The <b>LocalAlloc</b> function allocates the specified number of bytes from the heap. Win32 memory management does not provide a separate local heap and global heap. </p>
<p>
This function is provided only for compatibility with 16-bit versions of Windows. </p>
<pre><code><b>HLOCAL LocalAlloc(
  UINT</b><i> uFlags</i><b>,  </b>// allocation attributes
<b>  UINT</b><i> uBytes</i>   // number of bytes to allocate
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>uFlags</i></dt>
<dd>
Specifies how to allocate memory. If zero is specified, the default is the LMEM_FIXED flag. Except for the incompatible combinations that are specifically noted, any combination of the following flags can be specified. To indicate whether the function allocates fixed or movable memory, specify one of the first six flags: 
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=36%>Flag</th>
<th align=left colspan=2 width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>LMEM_FIXED</td>
<td width=63%>Allocates fixed memory. The return value is a pointer to the memory object.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_MOVEABLE</td>
<td width=63%>Allocates movable memory. In Win32, memory blocks are never moved in physical memory, but they can be moved within the default heap.<p>
The return value is a handle to the memory object. To translate the handle to a pointer, use the <a href="memman_5j57.htm"><b>LocalLock</b></a> function. </p>
<p>
This flag cannot be combined with the LMEM_FIXED flag. </p>
</td>
</tr>
<tr valign=top>
<td width=36%>LPTR</td>
<td width=63%>Combines the LMEM_FIXED and LMEM_ZEROINIT flags.</td>
</tr>
<tr valign=top>
<td width=36%>LHND</td>
<td width=63%>Combines the LMEM_MOVEABLE and LMEM_ZEROINIT flags.</td>
</tr>
<tr valign=top>
<td width=36%>NONZEROLHND</td>
<td width=63%>Same as the LMEM_MOVEABLE flag.</td>
</tr>
<tr valign=top>
<td width=36%>NONZEROLPTR</td>
<td width=63%>Same as the LMEM_FIXED flag.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_DISCARDABLE</td>
<td width=63%>Ignored. This flag is provided only for compatibility with 16-bit Windows.<p>
In Win32, you must explicitly call the <a href="memman_2l7o.htm"><b>LocalDiscard</b></a> function to discard a block.</p>
<p>
This flag cannot be combined with the LMEM_FIXED flag.</p>
</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_NOCOMPACT</td>
<td width=63%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_NODISCARD</td>
<td width=63%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_ZEROINIT</td>
<td width=63%>Initializes memory contents to zero.</td>
</tr>
</table><br>

</dd>
<dt>
<i>uBytes</i></dt>
<dd>
Specifies the number of bytes to allocate. If this parameter is zero and the <i>uFlags</i> parameter specifies the LMEM_MOVEABLE flag, the function returns a handle to a memory object that is marked as discarded. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the newly allocated memory object.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
If the heap does not contain sufficient free space to satisfy the request, <b>LocalAlloc</b> returns NULL. Because NULL is used to indicate an error, virtual address zero is never allocated. It is, therefore, easy to detect the use of a NULL pointer. </p>
<p>
If this function succeeds, it allocates at least the amount requested. If the amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual number of bytes allocated, use the <a href="memman_4d7p.htm"><b>LocalSize</b></a> function. </p>
<p>
To free the memory, use the <a href="memman_2339.htm"><b>LocalFree</b></a> function. </p>
<p>
<b>Windows CE:</b> Windows CE does not support the following <i>uFlags</i> flags: </p>
<p class=indent1>
LMEM_MOVEABLE </p>
<p class=indent1>
LHND </p>
<p class=indent1>
NONZEROLPTR </p>
<p class=indent1>
LMEM_DISCARDABLE </p>
<p class=indent1>
LMEM_NOCOMPACT </p>
<p class=indent1>
LMEM_NODISCARD </p>
<p class=indent1>
NONZEROLHND </p>
<p>
The local heap for each process cannot exceed 1 megabyte. However, a process can create multiple heaps using the <b>HeapCreate</b> function and each of these heaps can be up to 1 megabyte.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_2339.htm"><b>LocalFree</b></a>, <a href="memman_5j57.htm"><b>LocalLock</b></a>, <a href="memman_1nvn.htm"><b>LocalReAlloc</b></a>, <a href="memman_4d7p.htm"><b>LocalSize</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

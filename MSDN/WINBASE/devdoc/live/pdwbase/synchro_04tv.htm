<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Waitable Timer Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_waitable_timer_objects"></a>Waitable Timer Objects</h3>
<p>
A "waitable" timer object is a synchronization object whose state is set to signaled when the specified due time arrives. There are two types of waitable timers that can be created: manual-reset and synchronization. A timer of either type can also be a periodic timer.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Object</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>manual-reset timer</td>
<td width=69%>A timer whose state remains signaled until <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a><b> </b>is called to establish a new due time.</td>
</tr>
<tr valign=top>
<td width=31%>synchronization timer</td>
<td width=69%>A timer whose state remains signaled until a thread completes a wait operation on the timer object.</td>
</tr>
<tr valign=top>
<td width=31%>periodic timer</td>
<td width=69%>A timer that is reactivated each time the specified period expires, until the timer is reset or canceled. A periodic timer is either a periodic manual-reset timer or a periodic synchronization timer.</td>
</tr>
</table><br>
<p>
A thread uses the <a href="synchro_51o2.htm"><b>CreateWaitableTimer</b></a> function to create a timer object. Specify TRUE for the <i>bManualReset</i> parameter to create a manual-reset timer and FALSE to create a synchronization timer. The creating thread can specify a name for the timer object in the <i>lpTimerName</i> parameter. Threads in other processes can open a handle to an existing timer by specifying its name in a call to the <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a> function. Any thread with a handle to a timer object can use one of the <a href="synchro_5vqr.htm">wait functions</a> to wait for the timer state to be set to signaled.
<ul>
<li>
The thread calls the <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a> function to activate the timer. Note the use of the following parameters for <b>SetWaitableTimer</b>:</li>
<li>
Use the <i>lpDueTime</i> parameter to specify the time at which the timer is to be set to the signaled state. When a manual-reset timer is set to the signaled state, it remains in this state until <b>SetWaitableTimer </b>establishes a new due time. When a synchronization timer is set to the signaled state, it remains in this state until a thread completes a wait operation on the timer object. </li>
<li>
Use the <i>lPeriod</i> parameter of the <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a> function to specify the timer period. If the period is not zero, the timer is a periodic timer; it is reactivated each time the period expires, until the timer is reset or canceled. If the period is zero, the timer is not a periodic timer; it is signaled once and then deactivated.</li>
</ul>
<p>
A thread can use the <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a> function to set the timer to the inactive state. To reset the timer, call <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a>. When you are finished with the timer object, call <a href="handobj_289x.htm"><b>CloseHandle</b></a> to close the handle to the timer object.</p>
<p>&nbsp;</p></body>
</HTML>

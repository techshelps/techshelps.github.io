<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Client Impersonation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_client_impersonation"></a>Client Impersonation</h2>
<p>
<i>Impersonation</i> is the ability of a thread to execute in a security context different from that of the process that owns the thread. Typically, a thread in a server application impersonates a client. This allows the server thread to act on behalf of that client to access objects or validate access to its own objects. </p>
<p>
The Microsoft® Win32® API provides the following functions a thread can use to begin an impersonation:
<ul>
<li>
A DDE server application can call the <a href="ddemlib_2rck.htm"><b>DdeImpersonateClient</b></a> function to impersonate a client. </li>
<li>
A named-pipe server can call  the <a href="accclsrv_8450.htm"><b>ImpersonateNamedPipeClient</b></a> function.</li>
<li>
You can call the <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a> function to impersonate the security context of a logged-on user's access token. </li>
<li>
The <a href="accclsrv_03ja.htm"><b>ImpersonateSelf</b></a> function enables a thread to generate a copy of its own access token. This is useful when an application needs to change the security context of a single thread. For example, sometimes only one thread of a process needs to enable a privilege. </li>
<li>
You can call the <a href="accctrl_5z5a.htm"><b>SetThreadToken</b></a> function to cause the target thread to run in the security context of a specified impersonation token. </li>
<li>
A Microsoft Remote Procedure Call (RPC) server application can call the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_rpcimpersonateclient">
</object><a href=JavaScript:alink_1.Click()><b>RpcImpersonateClient</b></a> function to impersonate a client. </li>
</ul>
<p>
For most of these impersonations, the impersonating thread can revert to its own security context by calling the <a href="accclsrv_3jdy.htm"><b>RevertToSelf</b></a> function. The exception is the RPC impersonation in which the RPC server application calls <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_rpcreverttoself">
</object><a href=JavaScript:alink_2.Click()><b>RpcRevertToSelf</b></a> or <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_rpcreverttoselfex">
</object><a href=JavaScript:alink_3.Click()><b>RpcRevertToSelfEx</b></a> to revert to its own security context. </p>
<p>&nbsp;</p></body>
</HTML>

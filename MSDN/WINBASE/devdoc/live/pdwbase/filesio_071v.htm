<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetQueuedCompletionStatus</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getqueuedcompletionstatus"></a>GetQueuedCompletionStatus</h1>
<p>
The <b>GetQueuedCompletionStatus </b>function attempts to dequeue an I/O completion packet from a specified input/output completion port. If there is no completion packet queued, the function waits for a pending input/output operation associated with the completion port to complete. The function returns when it can dequeue a completion packet, or optionally when the function times out. If the function returns because of an I/O operation completion, it sets several variables that provide information about the operation.</p>
<pre><code><b>BOOL GetQueuedCompletionStatus(
  HANDLE</b><i> CompletionPort</i><b>,       </b>// the I/O completion port of interest
<b>  LPDWORD</b><i> lpNumberOfBytesTransferred</i><b>,</b>
<b>                               </b>// to receive number of bytes 
                               // transferred during I/O
<b>  LPDWORD</b><i> lpCompletionKey</i><b>,     </b>// to receive file's completion key
<b>  LPOVERLAPPED</b><i> *lpOverlapped</i><b>,  </b>// to receive pointer to OVERLAPPED 
                               // structure
<b>  DWORD</b><i> dwMilliseconds         </i>// optional timeout value
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>CompletionPort</i></dt>
<dd>
Handle to the input/output completion port of interest. I/O completion ports are created by the <a href="filesio_4k1g.htm"><b>CreateIoCompletionPort</b></a> function. </dd>
<dt>
<i>lpNumberOfBytesTransferred</i></dt>
<dd>
Pointer to a variable that the function sets to the number of bytes transferred during an I/O operation that has completed. </dd>
<dt>
<i>lpCompletionKey</i></dt>
<dd>
Pointer to a variable that the function sets to the completion key value associated with the file handle whose I/O operation has completed. A completion key is a per-file key that is specified in a call to <a href="filesio_4k1g.htm"><b>CreateIoCompletionPort</b></a>.</dd>
<dt>
<i>lpOverlapped</i></dt>
<dd>
Pointer to a variable that the function sets to the address of the <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure that was specified when the completed input/output operation was started. 
<p>
The following functions can be used to start input/output operations that complete using I/O completion ports. You must pass the function an <b>OVERLAPPED</b> structure and a file handle associated (by a call to <a href="filesio_4k1g.htm"><b>CreateIoCompletionPort</b></a>) with an I/O completion port to invoke the I/O completion port mechanism:

<ul>
<li>
<a href="pipes_3885.htm"><b>ConnectNamedPipe</b></a></li>
<li>
<a href="devio_9quk.htm"><b>DeviceIoControl</b></a></li>
<li>
<a href="filesio_39h4.htm"><b>LockFileEx</b></a></li>
<li>
<a href="filesio_97av.htm"><b>ReadDirectoryChangesW</b></a></li>
<li>
<a href="filesio_39id.htm"><b>ReadFile</b></a></li>
<li>
<a href="memman_2fvx.htm"><b>ReadFileVlm</b></a></li>
<li>
<a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a></li>
<li>
<a href="commun_4bck.htm"><b>WaitCommEvent</b></a></li>
<li>
<a href="filesio_3kkl.htm"><b>WriteFile</b></a></li>
<li>
<a href="memman_1hm5.htm"><b>WriteFileVlm</b></a></li>
</ul>

<p>
Even if you have passed the function a file handle associated with a completion port and a valid <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure, an application can prevent completion port notification. This is done by specifying a valid event handle for the <b>hEvent</b> member of the <b>OVERLAPPED</b> structure, and setting its low-order bit. A valid event handle whose low-order bit is set keeps I/O completion from being queued to the completion port.
</dd>
<dt>
<i>dwMilliseconds</i></dt>
<dd>
Specifies the number of milliseconds that the caller is willing to wait for an completion packet to appear at the I/O completion port. If a completion packet doesn't appear within the specified time, the function times out, returns FALSE, and sets *<i>lpOverlapped</i> to NULL.
<p>
If <i>dwMilliseconds</i> is INFINITE, the function will never time out. If <i>dwMilliseconds</i> is zero and there is no I/O operation to dequeue, the function will time out immediately.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function dequeues a completion packet for a successful I/O operation from the completion port, the return value is nonzero. The function stores information in the variables pointed to by the <i>lpNumberOfBytesTransferred</i>, <i>lpCompletionKey</i>, and <i>lpOverlapped</i> parameters.</p>
<p>
If *<i>lpOverlapped</i> is NULL and the function does not dequeue a completion packet from the completion port, the return value is zero. The function does not store information in the variables pointed to by the <i>lpNumberOfBytesTransferred</i> and <i>lpCompletionKey</i> parameters. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. If the function did not dequeue a completion packet because the wait timed out, <b>GetLastError</b> returns WAIT_TIMEOUT. </p>
<p>
If *<i>lpOverlapped</i> is not NULL and the function dequeues a completion packet for a failed I/O operation from the completion port, the return value is zero. The function stores information in the variables pointed to by <i>lpNumberOfBytesTransferred</i>, <i>lpCompletionKey</i>, and <i>lpOverlapped</i>. To get extended error information, call <b>GetLastError</b>. </p>
<h4>Remarks</h4>
<p>
The I/O system can be instructed to send I/O completion notification packets to input/output completion ports, where they are queued up. The <a href="filesio_4k1g.htm"><b>CreateIoCompletionPort</b></a> function provides a mechanism for this.</p>
<p>
When you perform an input/output operation with a file handle that has an associated input/output completion port, the I/O system sends a completion notification packet to the completion port when the I/O operation completes. The I/O completion port places the completion packet in a first-in-first-out queue. The <b>GetQueuedCompletionStatus</b> function retrieves these queued I/O completion packets.</p>
<p>
A server application may have several threads calling <b>GetQueuedCompletionStatus</b> for the same completion port. As input operations complete, the operating system queues completion packets to the completion port. If threads are actively waiting in a call to this function, queued requests complete their call.</p>
<p>
You can call the <b>PostQueuedCompletionStatus</b> function to post an I/O completion packet to an I/O completion port. The I/O completion packet will satisfy an outstanding call to the <a href="#_win32_getqueuedcompletionstatus"><b>GetQueuedCompletionStatus</b></a> function. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="filesio_2xm7.htm">File I/O Overview</a>, <a href="filesio_3n5f.htm">File Functions</a>, <a href="pipes_3885.htm"><b>ConnectNamedPipe</b></a>, <a href="filesio_4k1g.htm"><b>CreateIoCompletionPort</b></a>, <a href="devio_9quk.htm"><b>DeviceIoControl</b></a>, <a href="filesio_39h4.htm"><b>LockFileEx</b></a>, <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="filesio_33g3.htm"><b>PostQueuedCompletionStatus</b></a>, <a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a>, <a href="commun_4bck.htm"><b>WaitCommEvent</b></a>, <a href="filesio_3kkl.htm"><b>WriteFile</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

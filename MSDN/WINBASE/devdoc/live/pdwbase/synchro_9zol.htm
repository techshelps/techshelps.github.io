<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateSemaphore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createsemaphore"></a>CreateSemaphore</h1>
<p>
The <b>CreateSemaphore</b> function creates a named or unnamed semaphore object. </p>
<pre><code><b>HANDLE CreateSemaphore(
  LPSECURITY_ATTRIBUTES</b><i> lpSemaphoreAttributes</i><b>,</b>
<b>                       </b>// pointer to security attributes
<b>  LONG</b><i> lInitialCount</i><b>,  </b>// initial count
<b>  LONG</b><i> lMaximumCount</i><b>,  </b>// maximum count
<b>  LPCTSTR</b><i> lpName</i>       // pointer to semaphore-object name
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpSemaphoreAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSemaphoreAttributes</i> is NULL, the handle cannot be inherited. 
<p>
<b>Windows NT:</b> The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new semaphore. If <i>lpSemaphoreAttributes</i> is NULL, the semaphore gets a default security descriptor. 
</dd>
<dt>
<i>lInitialCount</i></dt>
<dd>
Specifies an initial count for the semaphore object. This value must be greater than or equal to zero and less than or equal to <i>lMaximumCount</i>. The state of a semaphore is signaled when its count is greater than zero and nonsignaled when it is zero. The count is decreased by one whenever a wait function releases a thread that was waiting for the semaphore. The count is increased by a specified amount by calling the <a href="synchro_1vqd.htm"><b>ReleaseSemaphore</b></a> function. </dd>
<dt>
<i>lMaximumCount</i></dt>
<dd>
Specifies the maximum count for the semaphore object. This value must be greater than zero. </dd>
<dt>
<i>lpName</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of the semaphore object. The name is limited to MAX_PATH characters, and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive. 
<p>
If <i>lpName</i> matches the name of an existing named semaphore object, this function requests SEMAPHORE_ALL_ACCESS access to the existing object. In this case, the <i>lInitialCount</i> and <i>lMaximumCount</i> parameters are ignored because they have already been set by the creating process. If the <i>lpSemaphoreAttributes</i> parameter is not NULL, it determines whether the handle can be inherited, but its security-descriptor member is ignored. 

<p>
If <i>lpName</i> is NULL, the semaphore object is created without a name. 

<p>
If <i>lpName</i> matches the name of an existing event, mutex, waitable timer, job, or file-mapping object, the function fails and the <a href="errors_3uwi.htm"><b>GetLastError</b></a> function returns ERROR_INVALID_HANDLE. This occurs because these objects share the same name space. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the semaphore object. If the named semaphore object existed before the function call, the function returns a handle to the existing object and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_ALREADY_EXISTS. </p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <b>GetLastError</b>. </p>
<h4>Remarks</h4>
<p>
The handle returned by <b>CreateSemaphore</b> has SEMAPHORE_ALL_ACCESS access to the new semaphore object and can be used in any function that requires a handle to a semaphore object. </p>
<p>
Any thread of the calling process can specify the semaphore-object handle in a call to one of the <a href="synchro_5vqr.htm">wait functions</a>. The single-object wait functions return when the state of the specified object is signaled. The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled. When a wait function returns, the waiting thread is released to continue its execution. </p>
<p>
The state of a semaphore object is signaled when its count is greater than zero, and nonsignaled when its count is equal to zero. The <i>lInitialCount</i> parameter specifies the initial count. Each time a waiting thread is released because of the semaphore's signaled state, the count of the semaphore is decreased by one. Use the <a href="synchro_1vqd.htm"><b>ReleaseSemaphore</b></a> function to increment a semaphore's count by a specified amount. The count can never be less than zero or greater than the value specified in the <i>lMaximumCount</i> parameter. </p>
<p>
Multiple processes can have handles of the same semaphore object, enabling use of the object for interprocess synchronization. The following object-sharing mechanisms are available: 
<ul>
<li>
A child process created by the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function can inherit a handle to a semaphore object if the <i>lpSemaphoreAttributes</i> parameter of <b>CreateSemaphore</b> enabled inheritance. </li>
<li>
A process can specify the semaphore-object handle in a call to the <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a> function to create a duplicate handle that can be used by another process. </li>
<li>
A process can specify the name of a semaphore object in a call to the <b>OpenSemaphore</b> or <b>CreateSemaphore</b> function. </li>
</ul>
<p>
Use the <b>CloseHandle</b> function to close the handle. The system closes the handle automatically when the process terminates. The semaphore object is destroyed when its last handle has been closed. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a>, <a href="synchro_3y3p.htm"><b>OpenSemaphore</b></a>, <a href="synchro_1vqd.htm"><b>ReleaseSemaphore</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BackupRead</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_backupread"></a>BackupRead</h1>
<p>
The <b>BackupRead</b> function reads data associated with a specified file or directory into a buffer. You use this function to back up a file or directory.</p>
<pre><code><b>BOOL BackupRead(
  HANDLE</b><i> hFile</i><b>,                </b>// handle to file or directory
<b>  LPBYTE</b><i> lpBuffer</i><b>,             </b>// pointer to buffer to read to
<b>  DWORD</b><i> nNumberOfBytesToRead</i><b>,  </b>// number of bytes to read
<b>  LPDWORD</b><i> lpNumberOfBytesRead</i><b>, </b>// pointer to variable to receive 
                               // number of bytes read
<b>  BOOL</b><i> bAbort</i><b>,                 </b>// termination type
<b>  BOOL</b><i> bProcessSecurity</i><b>,       </b>// process security flag
<b>  LPVOID</b><i> *lpContext</i>            // pointer to pointer to internal 
                               // context information
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hFile</i></dt>
<dd>
Handle to the file or directory being backed up. The function reads data associated with this file. You obtain this handle by calling the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function. 
<p>
The <b>BackupRead</b> function fails if <b>CreateFile</b> was called with the flag FILE_FLAG_NO_BUFFERING. In this case, the <a href="errors_3uwi.htm"><b>GetLastError</b></a><b> </b>function returns the value ERROR_INVALID_PARAMETER.
</dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to a buffer that the function writes data to. </dd>
<dt>
<i>nNumberOfBytesToRead</i></dt>
<dd>
Specifies the length of the buffer.  The buffer size must be greater than the size of a <a href="tapeback_9awi.htm"><b>WIN32_STREAM_ID</b></a> structure. </dd>
<dt>
<i>lpNumberOfBytesRead</i></dt>
<dd>
Pointer to a variable that, when the function returns, contains the number of bytes read. 
<p>
If the function returns a nonzero value, and the variable pointed to by <i>lpNumberOfBytesRead</i> is zero, then all the data associated with the file handle has been read. 
</dd>
<dt>
<i>bAbort</i></dt>
<dd>
Indicates whether <b>BackupRead</b> terminated abnormally. If this value is TRUE, the operation terminates abnormally and all buffers are deallocated.   </dd>
<dt>
<i>bProcessSecurity</i></dt>
<dd>
Indicates whether the function will restore the access-control list (ACL) data for the file or directory. 
<p>
If <i>bProcessSecurity</i> is TRUE, the ACL data will be backed up.  
</dd>
<dt>
<i>lpContext</i></dt>
<dd>
Pointer to a variable that receives and holds a pointer to an internal data structure used by <b>BackupRead </b>to maintain context information during a backup operation.  
<p>
You must set the variable pointed to by <i>lpContext</i> to NULL before the first call to <b>BackupRead </b>for the specified file or directory. The function allocates memory for the data structure, and then sets the variable to point to that structure. You must not change <i>lpContext </i> or the variable that it points to between calls to <b>BackupRead</b>. 

<p>
To release the memory used by the data structure, call <b>BackupRead </b>with the <i>bAbort</i> parameter set to TRUE when the backup operation is complete. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>BackupRead</b> processes all of the data pertaining to an opened object as a series of discrete byte streams. Each stream is preceded by a 32-bit aligned <b>WIN32_STREAM_ID</b> structure. </p>
<p>
Streams must be processed in the same order in which they were written to the tape. This ordering enables applications to compare the data backed up against the data on the source device. The data returned by <b>BackupRead</b> is to be used only as input to the <b>BackupWrite</b> function. This data is returned as one large data stream divided into substreams. The substreams are separated by <b>WIN32_STREAM_ID</b> headers. </p>
<p>
If an error occurs while <b>BackupRead</b> is reading, the calling process can skip the bad data by calling the <b>BackupSeek</b> function. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="tapeback_0rlc.htm">Tape Backup Overview</a>, <a href="tapeback_1rw3.htm">Tape Backup Functions</a>, <a href="tapeback_3bl1.htm"><b>BackupWrite</b></a>, <a href="tapeback_1fhn.htm"><b>BackupSeek</b></a>, <a href="tapeback_9awi.htm"><b>WIN32_STREAM_ID</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

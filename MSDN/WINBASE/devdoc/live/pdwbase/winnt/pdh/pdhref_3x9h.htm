<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PdhGetFormattedCounterValue</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_pdhgetformattedcountervalue"></a>PdhGetFormattedCounterValue</h1>
<p>
The <b>PdhGetFormattedCounterValue</b> function returns the current value of a specified counter in the format requested by the caller.</p>
<pre><code><b>PDH_STATUS PdhGetFormattedCounterValue(
  IN HCOUNTER</b><i> hCounter</i><b>,            </b>// handle of the counter
<b>  IN DWORD</b><i> dwFormat</i><b>,               </b>// formatting flag
<b>  IN LPDWORD</b><i> lpdwType</i><b>,             </b>// counter type
<b>  IN PPDH_FMT_COUNTERVALUE</b><i> pValue  </i>// counter value
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCounter</i></dt>
<dd>
The handle of the counter whose current value is to be formatted and returned.</dd>
<dt>
<i>dwFormat</i></dt>
<dd>
The formatting information sent by the caller to indicate how the data should be returned. This parameter can be one of the following values:
<dl>
<dt>
PDH_FMT_DOUBLE</dt>
<dd>
Return data as a double-precision floating point real.</dd>
<dt>
PDH_FMT_LARGE</dt>
<dd>
Return data as a 64-bit integer.</dd>
<dt>
PDH_FMT_LONG</dt>
<dd>
Return data as a long integer.
</dd>
</dl>
</dd>
</dl>
<p>
The value selected from the previous table can be combined using the <b>OR</b> operator with one of the following scaling flags:
<dl>
<dt>
PDH_FMT_NOSCALE</dt>
<dd>
Do not apply the default scaling factor.</dd>
<dt>
PDH_FMT_1000</dt>
<dd>
Multiply the actual value by 1000.</dd>
<dt>
<i>lpdwType</i></dt>
<dd>
A pointer to a <b>DWORD</b> buffer that will receive the counter type. The possible counter types are described in winperf.h. This parameter is optional.</dd>
<dt>
<i>pValue</i></dt>
<dd>
A pointer to the data buffer that will receive the counter value.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, it returns ERROR_SUCCESS.</p>
<p>
If the function fails, the return value is a PDH error status defined in pdhmsg.h. The following are possible error values:
<dl>
<dt>
PDH_INVALID_ARGUMENT</dt>
<dd>
An argument is not correct or is incorrectly formatted.</dd>
<dt>
PDH_INVALID_DATA</dt>
<dd>
The specified counter does not contain valid data or a successful status code.</dd>
<dt>
PDH_INVALID_HANDLE</dt>
<dd>
The counter handle is not valid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The data for the counter is locked (protected) for the duration of the call to <b>PdhGetFormattedCounterValue</b> to prevent any changes during the processing of the call. Reading the data (calling this function successfully) clears the data-changed flag for the counter.</p>
<h4>See Also</h4>
<p>
<a href="perfdata_4982.htm">Performance Data Helper Overview</a>, <a href="perfdata_5bzn.htm">Performance Data Functions</a>, , <a href="pdhref_9bmt.htm"><b>PdhGetRawCounterValue</b></a>, <a href="pdhref_329e.htm"><b>PdhSetCounterScaleFactor</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

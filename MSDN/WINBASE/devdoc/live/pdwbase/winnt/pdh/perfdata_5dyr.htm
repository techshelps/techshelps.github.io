<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Performance Counters</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_adding_performance_counters"></a>Adding Performance Counters</h1>
<p>
Windows NT provides a mechanism for you to add performance objects and counters for your application and other software components. Performance counters specific to your application can help you tune performance while you develop and debug the application. After your application is complete and installed on target systems, the counters can help system administrators adjust configurable settings for your application.</p>
<p>
To add an extended object and its counters, use the following steps. 
<ol>
<li>
Design the object types and counters for the application. See <a href="perfdata_94xa.htm">Object and Counter Design</a>. </li>
<li>
Create an initialization (.INI) file containing the names and descriptions of the counter objects and counters. See <a href="perfdata_2aux.htm">Adding Counter Names and Descriptions to the Registry</a>.</li>
<li>
Create a header (.H) file containing the relative offsets at which the counter objects and counters will be installed in the registry. See <a href="perfdata_2aux.htm">Adding Counter Names and Descriptions to the Registry</a>.</li>
<li>
Set up the necessary performance monitoring entries in the registry. This includes the following steps. <ol type=a>
<li>
Create a registry key in the<b> Services</b> key for the application. If you do not have such a node, create it under the following registry key: <b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</b>. <a href="perfdata_6awp.htm">Creating the Application's Performance Key</a></li>
<li>
Use the <b>lodctr </b>utility with the .INI and .H files to install the information in the registry. This utility succeeds only if a performance key exists in the <b>Services</b> key for the application. See <a href="perfdata_2aux.htm">Adding Counter Names and Descriptions to the Registry</a>.</li>
</ol>
</li>
<li>
Create a performance DLL containing a set of exported functions that provide the link between the application and a performance monitoring application. See <a href="perfdata_3ung.htm">Creating the Performance DLL</a>. </li>
<li>
Modify the application's setup file to automate adding information to the registry (as described in step 4) and move your performance DLL to the system directory at setup.</li>
</ol>
<p>
To view an extended object, its functions, and its counter, use the extensible counter list utility (EXCTRLST.EXE). For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_tools_exctrlst">
</object><a href=JavaScript:alink_1.Click()>ExCtrLst</a>. </p>
<p>&nbsp;</p></body>
</HTML>

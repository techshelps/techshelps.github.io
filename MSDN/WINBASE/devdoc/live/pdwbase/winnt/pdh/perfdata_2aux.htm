<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Counter Names and Descriptions to the Registry</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_adding_counter_names_and_descriptions_to_the_registry"></a>Adding Counter Names and Descriptions to the Registry</h3>
<p>
The names and descriptions of all performance objects and their counters are stored using the registry. You must add this information for the objects and counters you add to the system. </p>
<p>
The following example shows the registry location where performance counter names and descriptions are stored. </p>
<pre><code>HKEY_LOCAL_MACHINE
    \SOFTWARE
        \Microsoft
            \Windows NT
                \CurrentVersion
                    \Perflib
                        Last Counter = <i>highest counter index</i>
                        Last Help = <i>highest help index</i>
                        \009
                            Counter = 2 System 4 Memory ...
                            Help = 3 The System object type ...
                        \<i>supported language, other than U.S. English</i>
                            Counter = ...
                            Help = ...
 </code></pre>
<p>
To add names and descriptions of the objects and counters for your application, use the <b>lodctr</b> utility included with Windows NT. The <b>lodctr</b> utility takes strings from an .INI file and adds them to the <b>Counter</b> and <b>Help</b> values under the appropriate language subkeys. It also updates the <b>Last Counter</b> and <b>Last Help</b> values. In addition to adding values under the <b>PerfLib</b> key, the <b>lodctr</b> utility also adds the following value entries to the <b>Services</b> node for the application. </p>
<pre><code>\HKEY_LOCAL_MACHINE
    \SYSTEM
        \CurrentControlSet
            \Services
                \<i>Application_Name</i>
                    \Performance
                        First Counter = <i>lowest counter index</i>
                        First Help = <i>lowest help index</i>
                        Last Counter = <i>highest counter index</i>
                        Last Help = <i>highest help index</i>
 </code></pre>
<h4>Using lodctr</h4>
<p>
The command-line syntax for <b>lodctr </b>is:</p>
<p>
<b>lodctr</b> <i>MyApplication</i><b>.ini</b></p>
<h4>Initialization (.INI) File</h4>
<p>
The .INI file used by <b>lodctr</b> has the following format:</p>
<pre><code>[info]
drivername=<i>Application_Name</i>
symbolfile=<i>SymbolFile</i>

// One key (value optional) for each language supported. 
[languages] 
<i>langid</i>=
 .
 .
 .

// Name and description for each counter or counter object
[text]  
<i>offset</i>_<i>langid</i>_NAME=Name         // Counter name string. 
<i>offset</i>_<i>langid</i>_HELP=Description  // Help description string. 
 .
 .
 .
 </code></pre>
<p>
The .INI file entries are variables with the following meanings:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Variable</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%><i>DriverName</i></td>
<td width=75%>The name of the performance key created under the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services key.</td>
</tr>
<tr valign=top>
<td width=25%><i>SymbolFile</i></td>
<td width=75%>An .H file containing symbolic offsets of counters. The performance DLL also uses the offsets in this file along with the <b>First Counter</b> and <b>First Help</b> registry values to determine the indexes of the various counters and counter objects.</td>
</tr>
<tr valign=top>
<td width=25%><i>Langid</i></td>
<td width=75%>An ID corresponding to the language subkey in the registry (for example, 009 for U.S. English).</td>
</tr>
<tr valign=top>
<td width=25%><i>Offset</i></td>
<td width=75%>A symbolic constant defined in <i>SymbolFile</i>. Offsets must be consecutive, even numbers beginning with zero. These offsets determine the order in which the counters are installed in the <b>Counter</b> and <b>Help</b> values in the registry.</td>
</tr>
</table><br>
<p>
The following is an example <i>SymbolFile</i>. </p>
<pre><code>// SYMFILE.H

#define OBJECT_1    0
#define DEVICE_COUNTER_1    2
#define DEVICE_COUNTER_2    4
</code></pre>
<p>
The following is an example .INI file. </p>
<pre><code>// begin .INI file example
[info]
drivername=MyApplication
symbolfile=symfile.h

[languages] 
009=English
011=OtherLanguage

[text]  
OBJECT_1_009_NAME=Device Name
OBJECT_1_009_HELP=Displays performance statistics on Device Name
OBJECT_1_011_NAME=Device Name in other language
OBJECT_1_011_HELP=Displays performance of Device Name in other language

DEVICE_COUNTER_1_009_NAME=Counter A
DEVICE_COUNTER_1_009_HELP=Displays the current value of Counter A
DEVICE_COUNTER_1_011_NAME=Counter A in other language
DEVICE_COUNTER_1_011_HELP=Displays the value of Counter A in other language

DEVICE_COUNTER_2_009_NAME=Counter B
DEVICE_COUNTER_2_009_HELP=Displays the current rate of Device B
DEVICE_COUNTER_2_011_NAME=Counter B in other language
DEVICE_COUNTER_2_011_HELP=Displays the rate of Device B in other language
 </code></pre>
<p>
If you run <b>lodctr</b> to add counters for an application and the application does not have a <b>Services</b> key, <b>lodctr</b> returns without modifying the <b>Perflib</b> values.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The loading function of LODCTR, <b>LoadPerfCounterTextStrings</b>, is declared in LOADPERF.H and exported from LOADPERF.DLL. This allows you to call this function directly from your install program. The syntax for this function is as follows: </p>
<p>
<b>LONG LoadPerfCounterTextStrings(</b></p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><b>LPSTR </b><i>lpCommandLine</i>, </td>
</tr>
<tr valign=top>
<td width=100%>    <b>BOOL </b><i>bQuietModeArg</i></td>
</tr>
<tr valign=top>
<td width=100%>   ); </td>
</tr>
</table><br>
<p>
where <i>lpCommandLine</i> is the name of your initialization file and <i>bQuietModeArg</i> is a Boolean parameter that indicates whether to display output during the loading of the counter text strings. If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in WINERROR.H. </p>
<p>&nbsp;</p></body>
</HTML>

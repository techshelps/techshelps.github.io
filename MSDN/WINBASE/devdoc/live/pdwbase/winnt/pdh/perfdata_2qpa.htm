<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Open Function</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_the_open_function"></a>The Open Function</h3>
<p>
The system calls the Open function whenever an application first connects to the registry to collect performance data. This function performs the initialization required for the application to provide performance data. </p>
<p>
Use the following function prototype for your Open function. </p>
<pre><code>DWORD CALLBACK <i>OpenPerformanceData</i>(LPWSTR <i>lpDeviceNames</i>);
 </code></pre>
<p>
The name <i>OpenPerformanceData</i> is a place-holder for an application-defined name. The <i>lpDeviceNames</i> argument points to a buffer containing the Unicode strings stored in the <b>Export</b> value in the following registry key: </p>
<p>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<br>
<i>Application_Name</i>\Linkage </b></p>
<p>
The strings are REG_MULTI_SZ strings, separated by a UNICODE_NULL, and terminated by two UNICODE_NULL characters. If this entry does not exist, <i>lpDeviceNames</i> should be NULL. The strings are the names of the devices managed by this application. The Open function should call the <a href="../../filesio_7wmd.htm"><b>CreateFile</b></a> function to open a handle to each device named. If <b>CreateFile</b> fails, the Open function should return the error code returned by the <a href="../../errors_3uwi.htm"><b>GetLastError</b></a> function; otherwise, it should return ERROR_SUCCESS. </p>
<p>
The Open function initializes the data structures it returns to the performance monitor application. In particular, it examines the registry to get the <b>Counter</b> and <b>Help</b> indices of the objects and counters supported by the application. It then stores these indices in the appropriate members of the <a href="pdhref_2n02.htm"><b>PERF_OBJECT_TYPE</b></a> and <a href="pdhref_9dgy.htm"><b>PERF_COUNTER_DEFINITION</b></a> structures. </p>
<p>
Other initialization tasks that might be performed by the Open function include the following:
<ul>
<li>
Open and map a file mapping object used by the program to store performance data. Create a mutex to prevent the application from changing a value while the performance DLL is reading it. This is one way to communicate performance data from the application to the performance DLL. If you are using another form of interprocess communication, substitute the appropriate steps to initialize that mechanism. </li>
<li>
Initialize event logging, if the DLL uses event logging to report errors. This is the only way for the performance DLL to report error conditions to the user, other than through a debugger. For more information, see <a href="../../eventlog_2tbb.htm">Event Logging</a>. </li>
<li>
Initialize the object and counter indexes. This must be done each time the performance DLL is loaded, because the indices vary from machine to machine. </li>
<li>
Perform other initialization tasks necessary for the Collect function to collect performance data efficiently.</li>
</ul>
<p>
The Open function should write any error that prevents the function from completing successfully in the system event log. </p>
<p>&nbsp;</p></body>
</HTML>

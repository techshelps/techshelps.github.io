<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryWorkingSet</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_queryworkingset"></a>QueryWorkingSet</h1>
<p>
The <b>QueryWorkingSet</b> function retrieves information about the pages currently added to the working set of the specified process. </p>
<pre><code><b>BOOL QueryWorkingSet(
  HANDLE</b><i> hProcess</i><b>,  </b>// handle to the process
<b>  PVOID</b><i> pv</i><b>,         </b>// buffer that receives the information
<b>  DWORD</b><i> cb          </i>// size of the buffer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process. </dd>
<dt>
<i>pv</i></dt>
<dd>
Pointer to the buffer that receives the information. </dd>
<dt>
<i>cb</i></dt>
<dd>
Specifies the size, in bytes, of the buffer. 
</dd>
</dl>
<h4>Return Value</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="../errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The return buffer consists of a variable number of <b>DWORD</b> values. The first <b>DWORD</b> contains the number of valid <b>DWORD</b> values that follow it in the buffer. Each remaining <b>DWORD</b> represents one page in the process working set, and is composed of an address combined with various flag values.</p>
<p>
To decode these <b>DWORD</b> values, it is necessary to split the high 20 bits from the low 12 bits. The high 20 bits (obtained by using a bitwise AND operator with 0xFFFFF000) contain the address of a page of memory loaded into the specified process. The bottom 12 bits are flag values that can be interpreted as follows. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=23%>Value</th>
<th align=left width=77%>Meaning</th>
</tr>
<tr valign=top>
<td width=23%>0x001</td>
<td width=77%>The page is read-only (if bit 0x004 is not set).</td>
</tr>
<tr valign=top>
<td width=23%>0x002</td>
<td width=77%>The page is executable (code).</td>
</tr>
<tr valign=top>
<td width=23%>0x004</td>
<td width=77%>The page is read/write (if bit 0x001 is not set).</td>
</tr>
<tr valign=top>
<td width=23%>0x005</td>
<td width=77%>The page is copy-on-write (bits 0x001 and 0x004 are both set).</td>
</tr>
<tr valign=top>
<td width=23%>0x100</td>
<td width=77%>The page can be shared across processes.</td>
</tr>
</table><br>
<p>
For example, consider the following <b>DWORD</b> values:</p>
<pre><code>0x00000003
0x00400103
0x00480101
0x00500004
</code></pre>
<p>
Breaking apart the bits, these <b>DWORD</b> values can be interpreted as follows: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=23%>0x00000003</td>
<td width=77%>There are three <b>DWORD</b> values to follow.</td>
</tr>
<tr valign=top>
<td width=23%>0x00400103</td>
<td width=77%>The page at address 0x00400000 has read-only, executable, and shared access. </td>
</tr>
<tr valign=top>
<td width=23%>0x00480101</td>
<td width=77%>The page at address 0x00480000 has read-only and shared access.</td>
</tr>
<tr valign=top>
<td width=23%>0x00500004</td>
<td width=77%>The page at address 0x00500000 has read/write access.</td>
</tr>
</table><br>
<p>
<b>Windows NT Alpha:</b> Split the high 19 bits from the low 13 bits, because pages are 8 KB in size, whereas pages are 4 KB in size on an x86 computer. </p>
<h4>See Also</h4>
<p>
<a href="psapi_25ki.htm">Process Status Helper Overview</a>, <a href="psapi_0bjn.htm">PSAPI Functions</a>, <a href="psapi_5kqb.htm"><b>EnumProcesses</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

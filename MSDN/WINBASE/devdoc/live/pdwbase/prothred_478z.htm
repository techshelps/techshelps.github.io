<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenProcess</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_openprocess"></a>OpenProcess</h1>
<p>
The <b>OpenProcess</b> function returns a handle to an existing process object. </p>
<pre><code><b>HANDLE OpenProcess(
  DWORD</b><i> dwDesiredAccess</i><b>,  </b>// access flag
<b>  BOOL</b><i> bInheritHandle</i><b>,    </b>// handle inheritance flag
<b>  DWORD</b><i> dwProcessId</i>       // process identifier
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwDesiredAccess</i></dt>
<dd>
Specifies the access to the process object. For operating systems that support security checking, this access is checked against any security descriptor for the target process. Any combination of the following access flags can be specified in addition to the STANDARD_RIGHTS_REQUIRED access flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Access</th>
<th align=left width=48%>Description</th>
</tr>
<tr valign=top>
<td width=52%>PROCESS_ALL_ACCESS</td>
<td width=48%>Specifies all possible access flags for the process object.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_CREATE_PROCESS</td>
<td width=48%>Used internally.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_CREATE_THREAD</td>
<td width=48%>Enables using the process handle in the <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a> function to create a thread in the process.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_DUP_HANDLE</td>
<td width=48%>Enables using the process handle as either the source or target process in the <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a> function to duplicate a handle.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_QUERY_INFORMATION</td>
<td width=48%>Enables using the process handle in the <a href="prothred_4k6r.htm"><b>GetExitCodeProcess</b></a> and <a href="prothred_83sj.htm"><b>GetPriorityClass</b></a> functions to read information from the process object.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_SET_INFORMATION</td>
<td width=48%>Enables using the process handle in the <a href="prothred_9z1v.htm"><b>SetPriorityClass</b></a> function to set the priority class of the process.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_TERMINATE</td>
<td width=48%>Enables using the process handle in the <a href="prothred_1bg3.htm"><b>TerminateProcess</b></a> function to terminate the process.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_VM_OPERATION</td>
<td width=48%>Enables using the process handle in the <a href="memman_4iew.htm"><b>VirtualProtectEx</b></a> and <a href="debug_35rt.htm"><b>WriteProcessMemory</b></a> functions to modify the virtual memory of the process.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_VM_READ</td>
<td width=48%>Enables using the process handle in the <a href="debug_2mpl.htm"><b>ReadProcessMemory</b></a> function to read from the virtual memory of the process.</td>
</tr>
<tr valign=top>
<td width=52%>PROCESS_VM_WRITE</td>
<td width=48%>Enables using the process handle in the <a href="debug_35rt.htm"><b>WriteProcessMemory</b></a> function to write to the virtual memory of the process.</td>
</tr>
<tr valign=top>
<td width=52%>SYNCHRONIZE</td>
<td width=48%><b>Windows NT:</b> Enables using the process handle in any of the <a href="synchro_5vqr.htm">wait functions</a> to wait for the process to terminate.</td>
</tr>
</table><br>

</dd>
<dt>
<i>bInheritHandle</i></dt>
<dd>
Specifies whether the returned handle can be inherited by a new process created by the current process. If TRUE, the handle is inheritable. </dd>
<dt>
<i>dwProcessId</i></dt>
<dd>
Specifies the process identifier of the process to open. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is an open handle to the specified process.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The handle returned by the <b>OpenProcess</b> function can be used in any function that requires a handle to a process, such as the <a href="synchro_5vqr.htm">wait functions</a>, provided the appropriate access rights were requested. </p>
<p>
When you are finished with the handle, be sure to close it using the <b>CloseHandle</b> function.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a>, <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a>, <a href="prothred_58kz.htm"><b>GetCurrentProcess</b></a>, <a href="prothred_6nfo.htm"><b>GetCurrentProcessId</b></a>, <a href="prothred_4k6r.htm"><b>GetExitCodeProcess</b></a>, <a href="prothred_83sj.htm"><b>GetPriorityClass</b></a>, <a href="debug_2mpl.htm"><b>ReadProcessMemory</b></a>, <a href="prothred_9z1v.htm"><b>SetPriorityClass</b></a>, <a href="prothred_1bg3.htm"><b>TerminateProcess</b></a>, <a href="memman_4iew.htm"><b>VirtualProtectEx</b></a>, <a href="debug_35rt.htm"><b>WriteProcessMemory</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WriteProcessMemory</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_writeprocessmemory"></a>WriteProcessMemory</h1>
<p>
The <b>WriteProcessMemory</b> function writes memory in a specified process. The entire area to be written to must be accessible, or the operation fails. </p>
<pre><code><b>BOOL WriteProcessMemory(
  HANDLE</b><i> hProcess</i><b>,  </b>// handle to process whose memory is written to
<b>  LPVOID</b><i> lpBaseAddress</i><b>,</b>
                    // address to start writing to
<b>  LPVOID</b><i> lpBuffer</i><b>,  </b>// pointer to buffer to write data to
<b>  DWORD</b><i> nSize</i><b>,      </b>// number of bytes to write
<b>  LPDWORD</b><i> lpNumberOfBytesWritten</i> 
                    // actual number of bytes written
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process whose memory is to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. </dd>
<dt>
<i>lpBaseAddress</i></dt>
<dd>
Pointer to the base address in the specified process to be written to. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access. If this is the case, the function proceeds; otherwise, the function fails. </dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to the buffer that supplies data to be written into the address space of the specified process. </dd>
<dt>
<i>nSize</i></dt>
<dd>
Specifies the requested number of bytes to write into the specified process. </dd>
<dt>
<i>lpNumberOfBytesWritten</i></dt>
<dd>
Pointer to the actual number of bytes transferred into the specified process. This parameter is optional. If <i>lpNumberOfBytesWritten</i> is NULL, the parameter is ignored. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. The function will fail if the requested write operation crosses into an area of the process that is inaccessible. </p>
<h4>Remarks</h4>
<p>
<b>WriteProcessMemory</b> copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. The process whose address space is being written to is typically, but not necessarily, being debugged. </p>
<p>
The entire area to be written to must be accessible. If it is not, the function fails as noted previously. </p>
<p>
<b>Windows CE:</b> The <i>hProcess</i> parameter is the handle returned from the <b>OpenProcess</b> function that provided full access to the process.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="debug_4yxz.htm">Debugging Overview</a>, <a href="debug_6qcz.htm">Debugging Functions</a>, <a href="debug_2mpl.htm"><b>ReadProcessMemory</b></a>, <a href="memman_5o8d.htm"><b>WriteProcessMemoryVlm</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an Exception Handler</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_an_exception_handler"></a>Using an Exception Handler</h2>
<p>
The following example shows a version of the <b>strcpy</b> C run-time library function that can handle an invalid pointer and return NULL if one is encountered. </p>
<p>
<b>Note</b>&nbsp;&nbsp;This exception handler is intended to handle an access-violation exception, but is inappropriate if some other type of exception occurs. Therefore, the filter expression in the example uses the <a href="structex_2fz9.htm"><b>GetExceptionCode</b></a> function to check the exception type before executing the handler. This enables the system to continue its search for an appropriate handler if some other type of exception occurs. </p>
<p>
Also that there is no problem with using a <b>return</b> statement in the <b>try</b> block of a <b>try</b>-<b>except</b> statement. This differs from the use of <b>return</b> in the <b>try</b> block of a <b>try</b>-<b>finally</b> statement, which causes an abnormal termination of the <b>try</b> block. </p>
<pre><code>LPTSTR SafeStrcpy(LPTSTR lpszString1, LPTSTR lpszString2) 
{ 
    try 
    { 
        return strcpy(string1, string2); 
    } 
    except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ? 
                EXCEPTION_EXECUTE_HANDLER : 
                EXCEPTION_CONTINUE_SEARCH ) 
    { 
        return NULL; 
    } 
} 
 </code></pre>
<p>
The following example shows the interaction of nested <b>try</b>-<b>finally</b> and <b>try</b>-<b>except</b> statements. The <a href="structex_2ylq.htm"><b>RaiseException</b></a> function causes an exception in the guarded body of a <b>try</b>-<b>finally</b> termination handler that is inside the guarded body of a <b>try</b>-<b>except</b> exception handler. The exception causes the system to evaluate the <code>FilterFunction</code> function, whose return value in turn causes the exception handler to be invoked. However, before the exception-handler block is executed, the <b>finally</b> block of the termination handler is executed because the flow of control has left the <b>try</b> block of the termination handler. </p>
<pre><code>
DWORD FilterFunction() 
{ 
    printf("1 ");                     // printed first 
    return EXCEPTION_EXECUTE_HANDLER; 
} 
 
VOID main(VOID) 
{ 
    try 
    { 
        try 
        { 
            RaiseException(1,         // exception code 
                0,                    // continuable exception 
                0, NULL);             // no arguments 
        } 
        finally 
        { 
            printf("2 ")              // this is printed second 
        } 
    } 
    except ( FilterFunction() ) 
    { 
        printf("3\n");                // this is printed last 
    } 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processes in the Client's Security Context</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_processes_in_the_client_s_security_context"></a>Processes in the Client's Security Context</h2>
<p>
A server application can call the <a href="prothred_6pf6.htm"><b>CreateProcessAsUser</b></a> function to create a new process that runs in a client's security context. When called with a client's access token, <b>CreateProcessAsUser</b> requires the SE_ASSIGNPRIMARYTOKEN_NAME and SE_INCREASE_QUOTA_NAME privileges, which are held by Win32 services running in the <a href="services_11tg.htm">LocalSystem account</a>.</p>
<p>
<b>CreateProcessAsUser</b> also requires a primary access token. A server can get a primary access token for a client either by <a href="accclsrv_83xv.htm">starting a logon session</a> for the client, or by <a href="accclsrv_690u.htm">impersonating the client</a> and duplicating the impersonation token.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a client process by logging on the client</h5>
<ol>
<li>
Use the client's credentials in a call to the <a href="accclsrv_9cfm.htm"><b>LogonUser</b></a> function to log the client on to the local computer. <b>LogonUser</b> produces a primary token for the client's logon session.</li>
<li>
If the server needs to use the client's security context to get access to the executable file for the client process, it can use the primary token in a call to the <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a> function.</li>
<li>
Use the primary token in a call to the <b>CreateProcessAsUser</b> function to create a process in the client's security context.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a client process by impersonating the client</h5>
<p>
Note that a process created by this technique may not be able to access network resources unless it has the client's credentials.
<ol>
<li>
Use an impersonation function, such as <a href="accclsrv_8450.htm"><b>ImpersonateNamedPipeClient</b></a>, to start the impersonation.</li>
<li>
Call the <a href="accctrl_8bam.htm"><b>OpenThreadToken</b></a> function to get an impersonation token that has the security context of the client.</li>
<li>
Call the <a href="accctrl_9vso.htm"><b>DuplicateTokenEx</b></a> function to convert the impersonation token into a primary token. </li>
<li>
Use the primary token in a call to the <b>CreateProcessAsUser</b> function to create a process in the client's security context.</li>
</ol>
<p>
By default <b>CreateProcessAsUser</b> creates the client process on a noninteractive window station and desktop. To create an interactive process, the server must first set the discretionary access-control lists (DACLs) of the interactive window station and desktop to ensure that the client is allowed access to them. The preferred way to do this is to log the client on, <a href="accclsrv_1pk4.htm">get the security identifier (SID) of the client's logon session</a>, and use that SID in access-allowed ACEs on both the interactive window station and desktop. The server can then call <b>CreateProcessAsUser</b>, specifying the interactive window station and desktop, "winsta0\default". For sample code that shows this procedure, see <a href="accclsrv_627n.htm">Starting an Interactive Client Process</a>. </p>
<p>&nbsp;</p></body>
</HTML>

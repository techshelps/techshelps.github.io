<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CompareString</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_comparestring"></a>CompareString</h1>
<p>
The <b>CompareString</b> function compares two character strings, using the locale specified by the given identifier as the basis for the comparison. </p>
<pre><code><b>int CompareString(
  LCID</b><i> Locale</i><b>,       </b>// locale identifier
<b>  DWORD</b><i> dwCmpFlags</i><b>,  </b>// comparison-style options
<b>  LPCTSTR</b><i> lpString1</i><b>, </b>// pointer to first string
<b>  int</b><i> cchCount1</i><b>,     </b>// size, in bytes or characters, of first string
<b>  LPCTSTR</b><i> lpString2</i><b>, </b>// pointer to second string
<b>  int</b><i> cchCount2</i>      // size, in bytes or characters, of second string
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Locale</i></dt>
<dd>
Specifies the locale used for the comparison. This parameter can be one of the following predefined locale identifiers:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Value</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%>LOCALE_SYSTEM_DEFAULT</td>
<td width=57%>The system's default locale.</td>
</tr>
<tr valign=top>
<td width=43%>LOCALE_USER_DEFAULT</td>
<td width=57%>The current user's default locale.</td>
</tr>
</table><br>


<p>
This parameter can also be a locale identifier created by the <a href="nls_7qck.htm"><b>MAKELCID</b></a> macro.
</dd>
<dt>
<i>dwCmpFlags</i></dt>
<dd>
A set of flags that indicate how the function compares the two strings. By default, these flags are not set. This parameter can specify zero to get the default behavior, or it can be any combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Value</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%>NORM_IGNORECASE</td>
<td width=57%>Ignore case.</td>
</tr>
<tr valign=top>
<td width=43%>NORM_IGNOREKANATYPE</td>
<td width=57%>Do not differentiate between Hiragana and Katakana characters. Corresponding Hiragana and Katakana characters compare as equal.</td>
</tr>
<tr valign=top>
<td width=43%>NORM_IGNORENONSPACE</td>
<td width=57%>Ignore nonspacing characters.</td>
</tr>
<tr valign=top>
<td width=43%>NORM_IGNORESYMBOLS</td>
<td width=57%>Ignore symbols.</td>
</tr>
<tr valign=top>
<td width=43%>NORM_IGNOREWIDTH</td>
<td width=57%>Do not differentiate between a single-byte character and the same character as a double-byte character.</td>
</tr>
<tr valign=top>
<td width=43%>SORT_STRINGSORT</td>
<td width=57%>Treat punctuation the same as symbols.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpString1</i></dt>
<dd>
Pointer to the first string to be compared. </dd>
<dt>
<i>cchCount1</i></dt>
<dd>
Specifies the size, in bytes (ANSI version) or characters (Unicode version), of the string pointed to by the <i>lpString1</i> parameter. If this parameter is  – 1, the string is assumed to be null terminated and the length is calculated automatically. </dd>
<dt>
<i>lpString2</i></dt>
<dd>
Pointer to the second string to be compared. </dd>
<dt>
<i>cchCount2</i></dt>
<dd>
Specifies the size, in bytes (ANSI version) or characters (Unicode version), of the string pointed to by the <i>lpString2</i> parameter. If this parameter is  – 1, the string is assumed to be null terminated and the length is calculated automatically. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is one of the following values: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>Value</th>
<th align=left width=62%>Meaning</th>
</tr>
<tr valign=top>
<td width=38%>CSTR_LESS_THAN</td>
<td width=62%>The string pointed to by the <i>lpString1</i> parameter is less in lexical value than the string pointed to by the <i>lpString2</i> parameter.</td>
</tr>
<tr valign=top>
<td width=38%>CSTR_EQUAL</td>
<td width=62%>The string pointed to by <i>lpString1</i> is equal in lexical value to the string pointed to by <i>lpString2</i>.</td>
</tr>
<tr valign=top>
<td width=38%>CSTR_GREATER_THAN</td>
<td width=62%>The string pointed to by <i>lpString1</i> is greater in lexical value than the string pointed to by <i>lpString2</i>.</td>
</tr>
</table><br>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. <b>GetLastError</b> may return one of the following error codes:</p>
<p>
ERROR_INVALID_FLAGS<br>
ERROR_INVALID_PARAMETER</p>
<h4>Remarks</h4>
<p>
Notice that if the return value is 2, the two strings are "equal" in the collation sense, though not necessarily identical. </p>
<p>
To maintain the C run-time convention of comparing strings, the value 2 can be subtracted from a nonzero return value. The meaning of &lt; <i>0, ==0 and &gt; </i>0 is then consistent with the C run times. </p>
<p>
If the two strings are of different lengths, they are compared up to the length of the shortest one. If they are equal to that point, then the return value will indicate that the longer string is greater. For more information about locale identifiers, see <a href="../pdref/locales_8sj7.htm">Locale Identifiers</a>. </p>
<p>
Typically, strings are compared using what is called a "word sort" technique. In a word sort, all punctuation marks and other nonalphanumeric characters, except for the hyphen and the apostrophe, come before any alphanumeric character. The hyphen and the apostrophe are treated differently than the other nonalphanumeric symbols, in order to ensure that words such as "coop" and "co-op" stay together within a sorted list. </p>
<p>
If the SORT_STRINGSORT flag is specified, strings are compared using what is called a "string sort" technique. In a string sort, the hyphen and apostrophe are treated just like any other nonalphanumeric symbols: they come before the alphanumeric symbols. </p>
<p>
The following table shows a list of words sorted both ways: </p>
<table cellspacing=4 cols=5>
<tr valign=top>
<th align=left width=18%>Word Sort</th>
<th align=left width=20%>String Sort</th>
<th align=left width=6%>     </th>
<th align=left width=18%>Word Sort</th>
<th align=left width=38%>String Sort</th>
</tr>
<tr valign=top>
<td width=18%>billet</td>
<td width=20%>bill's</td>
<td width=6%> </td>
<td width=18%>t-ant</td>
<td width=38%>t-ant </td>
</tr>
<tr valign=top>
<td width=18%>bills</td>
<td width=20%>billet</td>
<td width=6%> </td>
<td width=18%>tanya</td>
<td width=38%>t-aria </td>
</tr>
<tr valign=top>
<td width=18%>bill's</td>
<td width=20%>bills</td>
<td width=6%> </td>
<td width=18%>t-aria</td>
<td width=38%>tanya </td>
</tr>
<tr valign=top>
<td width=18%>cannot</td>
<td width=20%>can't</td>
<td width=6%> </td>
<td width=18%>sued</td>
<td width=38%>sue's </td>
</tr>
<tr valign=top>
<td width=18%>cant</td>
<td width=20%>cannot</td>
<td width=6%> </td>
<td width=18%>sues</td>
<td width=38%>sued </td>
</tr>
<tr valign=top>
<td width=18%>can't</td>
<td width=20%>cant</td>
<td width=6%> </td>
<td width=18%>sue's</td>
<td width=38%>sues </td>
</tr>
<tr valign=top>
<td width=18%>con</td>
<td width=20%>co-op</td>
<td width=6%> </td>
<td width=18%>went</td>
<td width=38%>we're </td>
</tr>
<tr valign=top>
<td width=18%>coop</td>
<td width=20%>con</td>
<td width=6%> </td>
<td width=18%>were</td>
<td width=38%>went </td>
</tr>
<tr valign=top>
<td width=18%>co-op</td>
<td width=20%>coop</td>
<td width=6%> </td>
<td width=18%>we're</td>
<td width=38%>were </td>
</tr>
</table><br>
<p>
The <b>lstrcmp</b> and <b>lstrcmpi</b> functions use a word sort. The <b>CompareString</b> and <b>LCMapString</b> functions default to using a word sort, but use a string sort if their caller sets the SORT_STRINGSORT flag. </p>
<p>
The <b>CompareString</b> function is optimized to run at the highest speed when <i>dwCmpFlags</i> is set to 0 or NORM_IGNORECASE, and <i>cchCount1</i> and <i>cchCount2</i> have the value -1.</p>
<p>
The <b>CompareString </b>function ignores Arabic Kashidas during the comparison. Thus, if two strings are identical save for the presence of Kashidas, <b>CompareString</b> returns a value of 2; the strings are considered "equal" in the collation sense, though they are not necessarily identical.</p>
<p>
<b>Windows CE:</b> Windows CE does not support the ANSI version of this function.</p>
<p>
Windows CE does not support the following values for the <i>dwCmpFlags</i> parameter:</p>
<p class=indent1>
NORM_IGNOREKANATYPE</p>
<p class=indent1>
NORM_IGNORENONSPACE</p>
<p class=indent1>
NORM_IGNORESYMBOLS</p>
<p class=indent1>
NORM_IGNOREWIDTH</p>
<p>
The <i>dwCmpflags</i> parameter always includes the SORT_STRINGSORT value.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnls.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="strings_70ry.htm">String Manipulation Overview</a>, <a href="strings_97n7.htm">String Manipulation Functions</a>, <a href="strings_3rdz.htm"><b>FoldString</b></a>, <a href="nls_85yc.htm"><b>GetSystemDefaultLCID</b></a>, <a href="nls_08tg.htm"><b>GetUserDefaultLCID</b></a>, <a href="nls_5s2v.htm"><b>LCMapString</b></a>, <a href="strings_6g1c.htm"><b>lstrcmp</b></a>, <a href="strings_2ig9.htm"><b>lstrcmpi</b></a>, <a href="nls_7qck.htm"><b>MAKELCID</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

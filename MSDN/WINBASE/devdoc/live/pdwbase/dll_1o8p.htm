<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LoadLibrary</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_loadlibrary"></a>LoadLibrary</h1>
<p>
The <b>LoadLibrary</b> function maps the specified executable module into the address space of the calling process. </p>
<pre><code><b>HINSTANCE LoadLibrary(
  LPCTSTR</b><i> lpLibFileName</i>   // address of filename of executable module
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpLibFileName</i></dt>
<dd>
Pointer to a null-terminated string that names the executable module (either a .DLL or .EXE file). The name specified is the filename of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.DEF) file. 
<p>
If the string specifies a path but the file does not exist in the specified directory, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). 

<p>
If the string does not specify a path, the function uses a standard search strategy to find the file. See the <b>Remarks</b> for more information.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the module.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>LoadLibrary</b> can be used to map a DLL module and return a handle that can be used in <a href="dll_0f8z.htm"><b>GetProcAddress</b></a> to get the address of a DLL function. <b>LoadLibrary</b> can also be used to map other executable modules. For example, the function can specify an .EXE file to get a handle that can be used in <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findresource">
</object><a href=JavaScript:alink_1.Click()><b>FindResource</b></a> or <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_2.Click()><b>LoadResource</b></a>. Do not use <b>LoadLibrary</b> to "run" a .EXE file. </p>
<p>
If the module is a DLL not already mapped for the calling process, the system calls the DLL's <b>DllMain</b> function with the DLL_PROCESS_ATTACH value. If the DLL's entry-point function does not return TRUE, <b>LoadLibrary</b> fails and returns NULL. </p>
<p>
It is not safe to call <b>LoadLibrary</b> from <b>DllMain</b>. For more information, see the Remarks section in <a href="dll_8asu.htm"><b>DllMain</b></a>. </p>
<p>
Module handles are not global or inheritable. A call to <b>LoadLibrary</b> by one process does not produce a handle that another process can use — for example, in calling <b>GetProcAddress</b>. The other process must make its own call to <b>LoadLibrary</b> for the module before calling <b>GetProcAddress</b>. </p>
<p>
If no filename extension is specified in the <i>lpLibFileName</i> parameter, the default library extension .DLL is appended. However, the filename string can include a trailing point character (.) to indicate that the module name has no extension. When no path is specified, the function searches for loaded modules whose base name matches the base name of the module to be loaded. If the name matches, the load succeeds. Otherwise, the function searches for the file in the following sequence: 
<ol>
<li>
The directory from which the application loaded. </li>
<li>
The current directory. </li>
<li>
<b>Windows 95 and Windows 98:</b> The Windows system directory. Use the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_3.Click()><b>GetSystemDirectory</b></a> function to get the path of this directory.<p>
<b>Windows NT:</b> The 32-bit Windows system directory. Use the <b>GetSystemDirectory</b> function to get the path of this directory. The name of this directory is SYSTEM32.
</li>
<li>
<b>Windows NT:</b> The 16-bit Windows system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</li>
<li>
The Windows directory. Use the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_4.Click()><b>GetWindowsDirectory</b></a> function to get the path of this directory. </li>
<li>
The directories that are listed in the PATH environment variable. </li>
</ol>
<p>
The first directory searched is the one directory containing the image file used to create the calling process (for more information, see the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function). Doing this allows private dynamic-link library (DLL) files associated with a process to be found without adding the process's installed directory to the PATH environment variable. </p>
<p>
The Visual C++ compiler supports a syntax that enables you to declare thread-local variables: <b>_declspec(thread)</b>. If you use this syntax in a DLL, you will not be able to load the DLL explicitly using <b>LoadLibrary</b> or <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a>. If your DLL will be loaded explicitly, you must use the thread local storage functions instead of <b>_declspec(thread)</b>. </p>
<p>
<b>Windows 95:</b> If you are using <b>LoadLibrary</b> to load a module that contains a resource whose numeric identifier is greater than 0x7FFF, <b>LoadLibrary</b> fails. </p>
<p>
<b>Windows CE:</b> Two different modules cannot have the same filename, given that the extensions are different. These effectively have the same "module" name. For example, if <b>LoadLibrary</b> is made on "Sample.cpl", the operating system will not load Sample.cpl, but instead will again load Sample.dll. A similar limitation exists for modules with the same name but residing in different directories. For example, if <b>LoadLibrary</b> is called on "\\Windows\Sample.dll", and then <b>LoadLibrary</b> is called on "\\MyDir\Sample.dll", "\\Windows\Sample.dll" will simply be reloaded.</p>
<p>
A search path to the executable module cannot be specified. Unless the full path to the module is given, Windows CE will search the following path for the module:
<ol>
<li>
The root directory of the PC Card RAM expansion card, if one exists.</li>
<li>
The windows directory (\Windows).</li>
<li>
The root directory (\).</li>
</ol>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="dll_8asu.htm"><b>DllMain</b></a>, <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findresource">
</object><a href=JavaScript:alink_5.Click()><b>FindResource</b></a>, <a href="dll_3cs9.htm"><b>FreeLibrary</b></a>, <a href="dll_0f8z.htm"><b>GetProcAddress</b></a>, <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_6.Click()><b>GetSystemDirectory</b></a>, <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_7.Click()><b>GetWindowsDirectory</b></a>, <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a>, <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_8.Click()><b>LoadResource</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

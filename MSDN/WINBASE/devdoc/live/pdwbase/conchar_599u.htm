<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetConsoleCtrlHandler</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setconsolectrlhandler"></a>SetConsoleCtrlHandler</h1>
<p>
The <b>SetConsoleCtrlHandler</b> function adds or removes an application-defined <a href="conchar_5zz9.htm"><b>HandlerRoutine</b></a> function from the list of handler functions for the calling process. </p>
<p>
<b>Windows NT:</b> If no handler function is specified, the function sets an inheritable attribute that determines whether the calling process ignores ctrl+c signals. </p>
<pre><code><b>BOOL SetConsoleCtrlHandler(
  PHANDLER_ROUTINE</b><i> HandlerRoutine</i><b>,  </b>// address of handler function
<b>  BOOL</b><i> Add</i>                          // handler to add or remove
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>HandlerRoutine</i></dt>
<dd>
Pointer to the application-defined <a href="conchar_5zz9.htm"><b>HandlerRoutine</b></a> function to add or remove. 
<p>
<b>Windows NT:</b> This parameter can be NULL.
</dd>
<dt>
<i>Add</i></dt>
<dd>
Specifies whether to add or remove the function pointed to by the <i>HandlerRoutine</i> parameter from the handler list. If this parameter is TRUE, the handler is added; if it is FALSE, the handler is removed. 
<p>
<b>Windows NT: </b>If the <i>HandlerRoutine</i> parameter is NULL, a TRUE value causes the calling process to ignore ctrl+c input, and a FALSE value restores normal processing of ctrl+c input. This attribute of ignoring or processing ctrl+c is inherited by child processes. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
Each console process has its own list of application-defined <a href="conchar_5zz9.htm"><b>HandlerRoutine</b></a> functions that handle ctrl+c and ctrl+break signals. The handler functions also handle signals generated by the system when the user closes the console, logs off, or shuts down the system. Initially, the handler list for each process contains only a default handler function that calls the <a href="prothred_8dv7.htm"><b>ExitProcess</b></a> function. A console process adds or removes additional handler functions by calling the <b>SetConsoleCtrlHandler</b> function, which does not affect the list of handler functions for other processes. When a console process receives any of the control signals, its handler functions are called on a last-registered, first-called basis until one of the handlers returns TRUE. If none of the handlers returns TRUE, the default handler is called. </p>
<p>
For console processes, the ctrl+c and ctrl+break key combinations are typically treated as signals (CTRL_C_EVENT and CTRL_C_BREAK_EVENT). When a console window with the keyboard focus receives ctrl+c or ctrl+break, the signal is typically passed to all processes sharing that console. </p>
<p>
ctrl+break is always treated as a signal, but typical ctrl+c behavior can be changed in three ways that prevent the handler functions from being called:
<ul>
<li>
The <a href="conchar_25b9.htm"><b>SetConsoleMode</b></a> function can disable the <b>ENABLE_PROCESSED_INPUT</b> mode for a console's input buffer, so ctrl+c is reported as keyboard input rather than as a signal. </li>
<li>
<b>Windows NT: </b>Calling <b>SetConsoleCtrlHandler</b> with the NULL and TRUE arguments causes the calling process to ignore ctrl+c signals. This attribute is inherited by child processes, but it can be enabled or disabled by any process without affecting existing processes. </li>
<li>
If a console process is being debugged and ctrl+c signals have not been disabled, the kernel generates a DBG_CONTROL_C exception. This exception is raised only for the benefit of the debugger, and an application should never use an exception handler to deal with it. If the debugger handles the exception, an application will not notice the ctrl+c, with one exception: alertable waits will terminate. If the debugger passes the exception on unhandled, ctrl+c is passed to the console process and treated as a signal, as previously discussed. </li>
</ul>
<p>
A console process can use the <b>GenerateConsoleCtrlEvent</b> function to send a ctrl+c or ctrl+break signal to a console process group. </p>
<p>
The system generates CTRL_CLOSE_EVENT, CTRL_LOGOFF_EVENT, and CTRL_SHUTDOWN_EVENT signals when the user closes the console, logs off, or shuts down the system so that the process has an opportunity to clean up before termination. Console functions, or any C run-time functions that call console functions, may not work reliably during processing of any of the three signals mentioned previously. The reason is that some or all of the internal console cleanup routines may have been called before executing the process signal handler. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincon.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="conchar_4p6c.htm">Consoles and Character-Mode Support Overview</a>, <a href="conchar_3vg3.htm">Console Functions</a>, <a href="prothred_8dv7.htm"><b>ExitProcess</b></a>, <a href="conchar_3qwk.htm"><b>GenerateConsoleCtrlEvent</b></a>, <a href="conchar_7opx.htm"><b>GetConsoleMode</b></a>, <a href="conchar_5zz9.htm"><b>HandlerRoutine</b></a>, <a href="conchar_25b9.htm"><b>SetConsoleMode</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

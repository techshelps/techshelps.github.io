<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualFree</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualfree"></a>VirtualFree</h1>
<p>
The <b>VirtualFree</b> function releases or decommits (or both) a region of pages within the virtual address space of the calling process. </p>
<pre><code><b>BOOL VirtualFree(
  LPVOID</b><i> lpAddress</i><b>,  </b>// address of region of committed pages
<b>  DWORD</b><i> dwSize</i><b>,      </b>// size of region
  <b>DWORD</b> <i>dwFreeType</i>   // type of free operation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpAddress</i></dt>
<dd>
Pointer to the base address of the region of pages to be freed. If the <i>dwFreeType</i> parameter includes the MEM_RELEASE flag, this parameter must be the base address returned by the <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> function when the region of pages was reserved. </dd>
<dt>
<i>dwSize</i></dt>
<dd>
Specifies the size, in bytes, of the region to be freed. If the <i>dwFreeType</i> parameter includes the MEM_RELEASE flag, this parameter must be zero. Otherwise, the region of affected pages includes all pages containing one or more bytes in the range from the <i>lpAddress</i> parameter to (<i>lpAddress</i>+<i>dwSize</i>). This means that a 2-byte range straddling a page boundary causes both pages to be freed. </dd>
<dt>
<i>dwFreeType</i></dt>
<dd>
Specifies the type of free operation. One, but not both, of the following flags can be specified: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Flag</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>MEM_DECOMMIT</td>
<td width=67%>Decommits the specified region of committed pages.</td>
</tr>
<tr valign=top>
<td width=33%></td>
<td width=67%>An attempt to decommit an uncommitted page will not cause the function to fail. This means that a range of committed or uncommitted pages can be decommitted without having to worry about a failure.</td>
</tr>
<tr valign=top>
<td width=33%>MEM_RELEASE</td>
<td width=67%>Releases the specified region of reserved pages. If this flag is specified, the <i>dwSize</i> parameter must be zero, or the function fails.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>VirtualFree</b> can perform one of the following operations: 
<ul>
<li>
Decommit a region of committed or uncommitted pages. </li>
<li>
Release a region of reserved pages. </li>
<li>
Decommit and release a region of committed or uncommitted pages. </li>
</ul>
<p>
To release a region of pages, the entire range of pages must be in the same state (all reserved or all committed) and the entire region originally reserved by the <b>VirtualAlloc</b> function must be released at the same time. If only part of the pages in the original reserved region are committed, you must first call <b>VirtualFree</b> to decommit the committed pages and then call <b>VirtualFree</b> again to release the entire block. </p>
<p>
Pages that have been released are free pages available for subsequent allocation operations. Attempting to read from or write to a free page results in an access violation exception. </p>
<p>
<b>VirtualFree</b> can decommit an uncommitted page; this means that a range of committed or uncommitted pages can be decommitted without having to worry about a failure. Decommitting a page releases its physical storage, either in memory or in the paging file on disk. If a page is decommitted but not released, its state changes to reserved, and it can be committed again by a subsequent call to <b>VirtualAlloc</b>. Attempting to read from or write to a reserved page results in an access violation exception. </p>
<p>
The current state of the entire range of pages must be compatible with the type of free operation specified by the <i>dwFreeType</i> parameter. Otherwise, the function fails and no pages are released or decommitted. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_38kl.htm"><b>GlobalFree</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="memman_5ist.htm"><b>VirtualFreeVlm</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AddAccessDeniedAceEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_addaccessdeniedaceex"></a>AddAccessDeniedAceEx</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>AddAccessDeniedAceEx</b> function adds an access-denied ACE to the end of a DACL. This function is identical to the <a href="acctrlow_9wo5.htm"><b>AddAccessDeniedAce</b></a> function, except that it allows you to also specify flags that control whether the new ACE can be inherited by child objects. </p>
<pre><code><b>BOOL AddAccessDeniedAceEx(
  PACL</b><i> pAcl</i><b>,            </b>// pointer to an ACL
<b>  DWORD</b><i> dwAceRevision</i><b>,  </b>// ACL revision level
<b>  DWORD</b><i> AceFlags</i><b>,       </b>// ACE inheritance flags
<b>  DWORD</b><i> AccessMask</i><b>,     </b>// access mask for the new ACE
<b>  PSID</b><i> pSid</i><b> </b><i>      </i><b>      </b>// SID of the trustee for the new ACE
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pAcl</i></dt>
<dd>
Pointer to a DACL. The <b>AddAccessDeniedAceEx</b> function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an <a href="acctrlow_7she.htm"><b>ACCESS_DENIED_ACE</b></a> structure. </dd>
<dt>
<i>dwAceRevision</i></dt>
<dd>
Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION unless you are sure the ACL contains object-specific ACEs.</dd>
<dt>
<i>AceFlags</i></dt>
<dd>
A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the <a href="accctrl_0gvm.htm"><b>ACE_HEADER</b></a> structure of the new ACE. This parameter can be a combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Value</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>CONTAINER_INHERIT_ACE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The ACE is inherited by container objects.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>INHERIT_ONLY_ACE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The ACE does not apply to the object to which the ACL is assigned, but it can be inherited by child objects.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>INHERITED_ACE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>NO_PROPAGATE_INHERIT_ACE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OBJECT_INHERIT_ACE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The ACE is inherited by noncontainer objects.</td>
</tr>
</table><br>

</dd>
<dt>
<i>AccessMask</i></dt>
<dd>
A set of bit flags that use the <a href="accctrl_1vci.htm"><b>ACCESS_MASK</b></a> format to specify the access rights that the new ACE denies to the specified SID. This mask must use the <a href="accctrl_3wdw.htm">Windows NT access mask format</a>, not the <a href="accctrl_6gfo.htm">provider-independent access-mask format</a>. </dd>
<dt>
<i>pSid</i></dt>
<dd>
Pointer to a <a href="accctrl_5lyq.htm"><b>SID</b></a> structure that identifies the user, group, or logon session to which the new ACE denies access.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. If the <i>AceFlags</i> parameter specifies invalid flags, <b>GetLastError</b> returns ERROR_INVALID_FLAGS.</p>
<h4>Remarks</h4>
<p>
Although the <b>AddAccessDeniedAceEx</b> function adds the new ACE to the end of the DACL, access-denied ACEs should appear at the beginning of a DACL. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see <a href="accctrl_2hik.htm">Order of ACEs in a DACL</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="acctrlow_0xik.htm">Low-Level Access-Control Overview</a>, <a href="acctrlow_6iyb.htm">Low-Level Access Control Functions</a>, <a href="acctrlow_7she.htm"><b>ACCESS_DENIED_ACE</b></a>, <a href="accctrl_0gvm.htm"><b>ACE_HEADER</b></a>, <a href="accctrl_4h6a.htm"><b>ACL</b></a>, <a href="acctrlow_5kxk.htm"><b>AddAccessAllowedAceEx</b></a>, <a href="acctrlow_9wo5.htm"><b>AddAccessDeniedAce</b></a>, <a href="acctrlow_71a0.htm"><b>AddAuditAccessAceEx</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

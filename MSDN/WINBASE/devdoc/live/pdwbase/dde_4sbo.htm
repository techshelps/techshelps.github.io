<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initiating a Data Link with the Paste Link Command</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_initiating_a_data_link_with_the_paste_link_command"></a>Initiating a Data Link with the Paste Link Command</h3>
<p>
Applications that support hot or warm data links typically support a registered clipboard format named Link. When associated with the application's Copy and Paste Link commands, this clipboard format enables the user to establish DDE conversations between applications simply by copying a data item in the server application and pasting it into the client application. </p>
<p>
A server application supports the Link clipboard format by placing in the clipboard a string containing the application, topic, and item names when the user chooses the Copy command from the Edit menu. Following is the standard Link format: </p>
<p>
<i>application</i><b>\0</b><i>topic</i><b>\0</b><i>item</i><b>\0\0</b></p>
<p>
A single null character separates the names, and two null characters terminate the entire string. </p>
<p>
Both the client and server applications must register the Link clipboard format, as shown: </p>
<pre><code>cfLink = RegisterClipboardFormat("Link"); 
 </code></pre>
<p>
A client application supports the Link clipboard format by means of a Paste Link command on its Edit menu. When the user chooses this command, the client application parses the application, topic, and item names from the Link-format clipboard data. Using these names, the client application initiates a conversation for the application and topic, if such a conversation does not already exist. The client application then sends a <a href="dde_73j9.htm">WM_DDE_ADVISE</a> message to the server application, specifying the item name contained in the Link-format clipboard data. </p>
<p>
Following is an example of a client application's response when the user chooses the Paste Link command. </p>
<pre><code>void DoPasteLink(hwndClientDDE) 
HWND hwndClientDDE; 
{ 
    HANDLE hData; 
    LPSTR lpData; 
    HWND hwndServerDDE; 
    CHAR szApplication[APP_MAX_SIZE + 1]; 
    CHAR szTopic[TOPIC_MAX_SIZE + 1]; 
    CHAR szItem[ITEM_MAX_SIZE + 1]; 
    int nBufLen; 
 
    if (OpenClipboard(hwndClientDDE)) 
    { 
        if (!(hData = GetClipboardData(cfLink)) || 
                !(lpData = GlobalLock(hData))) 
        { 
            CloseClipboard(); 
            return; 
        } 
 
        // Parse the clipboard data. 
 
        if ((nBufLen = lstrlen(lpData)) &gt;= APP_MAX_SIZE) 
        { 
            CloseClipboard(); 
            GlobalUnlock(hData); 
            return; 
        } 
        lstrcpy(szApplication, lpData); 
        lpData += (nBufLen + 1); // skips over null 
        if ((nBufLen = lstrlen(lpData)) &gt;= TOPIC_MAX_SIZE) 
        { 
            CloseClipboard(); 
            GlobalUnlock(hData); 
            return; 
        } 
        lstrcpy(szTopic, lpData); 
        lpData += (nBufLen + 1); // skips over null 
        if ((nBufLen = lstrlen(lpData)) &gt;= ITEM_MAX_SIZE) 
        { 
            CloseClipboard(); 
            GlobalUnlock(hData); 
            return; 
        } 
        lstrcpy(szItem, lpData); 
        GlobalUnlock(hData); 
        CloseClipboard(); 
 
        if (hwndServerDDE = 
                FindServerGivenAppTopic(szApplication, szTopic)) 
        { 
            // App/topic conversation is already started. 
 
            if (DoesAdviseAlreadyExist(hwndServerDDE, szItem)) 
            {
                MessageBox(hwndMain, 
                    "Advisory already established", 
                    "Client", MB_ICONEXCLAMATION | MB_OK); 
            }
            else SendAdvise(hwndClientDDE, hwndServerDDE, szItem); 
        } 
        else 
        { 
            // Client must initiate a new conversation first. 
            SendInitiate(szApplication, szTopic); 
            if (hwndServerDDE = 
                    FindServerGivenAppTopic(szApplication, 
                        szTopic)) 
            {
                SendAdvise(hwndClientDDE, hwndServerDDE, szItem); 
            }
        } 
    } 
    return; 
} 
 </code></pre>
<p>
In this example, the client application opens the clipboard and determines whether it contains data in the Link format (that is, cfLink) it had previously registered. If not, or if it cannot lock the data in the clipboard, the client returns. </p>
<p>
After the client application retrieves a pointer to the clipboard data, it parses the data to extract the application, topic, and item names. </p>
<p>
The client application determines whether a conversation on the topic already exists between it and the server application. If a conversation does exist, the client checks whether a link already exists for the data item. If such a link exists, the client displays a message box to the user; otherwise, it calls its own SendAdvise function to send a <a href="dde_73j9.htm">WM_DDE_ADVISE</a> message to the server for the item. </p>
<p>
If a conversation on the topic does not already exist between the client and the server, the client first calls its own SendInitiate function to broadcast the <a href="dde_1f8l.htm">WM_DDE_INITIATE</a> message to request a conversation and, second, calls its own FindServerGivenAppTopic function to establish the conversation with the window that responds on behalf of the server application. After the conversation has begun, the client application calls SendAdvise to request the link. </p>
<p>&nbsp;</p></body>
</HTML>

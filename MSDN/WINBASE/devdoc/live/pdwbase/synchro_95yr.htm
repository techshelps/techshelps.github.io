<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Named Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_named_objects"></a>Using Named Objects</h2>
<p>
The following examples illustrate the use of object names by creating and opening named objects.</p>
<h5>Mutex</h5>
<p>
The first process uses the <a href="synchro_1a2g.htm"><b>CreateMutex</b></a> function to create the mutex object. Note that the function succeeds even if there is an existing object with the same name. </p>
<pre><code>// One process creates the mutex object.

HANDLE hMutex; 
DWORD dwErr; 

hMutex = CreateMutex( 
    NULL,                  // no security descriptor
    FALSE,                 // mutex not owned
    "NameOfMutexObject");  // object name

if (hMutex == NULL) 
    printf("CreateMutex error: %d\n", GetLastError() ); 
else 
    if ( GetLastError() == ERROR_ALREADY_EXISTS ) 
        printf("CreateMutex opened existing mutex\n"); 
    else 
        printf("CreateMutex created new mutex\n"); 
 </code></pre>
<p>
The second process uses the <a href="synchro_82pk.htm"><b>OpenMutex</b></a> function to open a handle to the existing mutex. This function fails if a mutex object with the specified name does not exist. The access parameter requests full access to the mutex object, which is necessary for the handle to be used in any of the wait functions. </p>
<pre><code>// Another process opens a handle to the existing mutex.

HANDLE hMutex; 

hMutex = OpenMutex( 
    MUTEX_ALL_ACCESS,      // request full access
    FALSE,                 // handle not inheritable
    "NameOfMutexObject");  // object name

if (hMutex == NULL) 
    printf("OpenMutex error: %d\n", GetLastError() ); 
 </code></pre>
<h5>Semaphore</h5>
<p>
The following example uses the <a href="synchro_9zol.htm"><b>CreateSemaphore</b></a> function to illustrate a named-object creation operation that fails if the object already exists. </p>
<pre><code>HANDLE CreateNewSemaphore(LPSECURITY_ATTRIBUTES lpsa, 
    LONG cInitial, LONG cMax, LPTSTR lpszName) 
{ 
    HANDLE hSem; 

// Create or open a named semaphore.

    hSem = CreateSemaphore( 
        lpsa,         // security attributes
        cInitial,     // initial count
        cMax,         // maximum count
        lpszName);    // semaphore name

// Close handle, and return NULL if existing semaphore opened.

    if (hSem != NULL &amp;&amp; GetLastError() == ERROR_ALREADY_EXISTS) 
    { 
        CloseHandle(hSem); 
        return NULL; 
    }

// If new semaphore was created, return the handle.

    return hSem; 
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

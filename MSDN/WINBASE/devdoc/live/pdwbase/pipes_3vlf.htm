<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transactions on Named Pipes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_transactions_on_named_pipes"></a>Transactions on Named Pipes</h2>
<p>
A named pipe transaction is a client-server communication that combines a write operation and a read operation into a single network operation. A transaction can be used only on a duplex, message-type pipe. Transactions improve the performance of network communications between a client and a remote server. Processes can use the <a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a> and <a href="pipes_1aed.htm"><b>CallNamedPipe</b></a> functions to perform named pipe transactions. </p>
<p>
The <b>TransactNamedPipe</b> function is most commonly used by a pipe client to write a request message to the named pipe server and read the server's response message. The pipe client must specify GENERIC_READ | GENERIC_WRITE access when it opens its pipe handle by calling the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function. Then, the pipe client sets the pipe handle to message-read mode by calling the <a href="pipes_81r9.htm"><b>SetNamedPipeHandleState</b></a> function. If the read buffer specified in the call to <b>TransactNamedPipe</b> is not large enough to hold the entire message written by the server, the function returns zero and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_MORE_DATA. The client can read the remainder of the message by calling either the <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="filesio_0660.htm"><b>ReadFileEx</b></a>, or <a href="pipes_7bad.htm"><b>PeekNamedPipe</b></a><b> </b>function. </p>
<p>
<b>TransactNamedPipe</b> is typically called by pipe clients, but can also be used by a pipe server. </p>
<p>
The following example shows a pipe client using <b>TransactNamedPipe</b>. The example assumes that the pipe client has used <b>CreateFile</b> to connect to the pipe and <b>SetNamedPipeHandleState</b> to set the pipe handle's read mode, as shown in the pipe client example in the preceding topic. </p>
<pre><code>fSuccess = TransactNamedPipe( 
   hPipe,               // pipe handle 
   lpszWrite,           // message to server 
   strlen(lpszWrite)+1, // message length 
   chReadBuf,           // buffer to receive reply 
   512,                 // size of read buffer 
   &amp;cbRead,             // number of bytes read 
   NULL);               // not overlapped 
 
// Exit if an error occurs, unless the error indicates there is more 
// data in the message. 
 
if (!fSuccess &amp;&amp; (GetLastError() != ERROR_MORE_DATA)) 
{
   MyErrExit("TransactNamedPipe"); 
}
 
while(1) 
{ 
// Data from the pipe is written to STDOUT. 
 
   if (! WriteFile(GetStdHandle(STD_OUTPUT_HANDLE), 
      chReadBuf, cbRead, &amp;cbWritten, NULL) ) 
      break; 
 
// Break if TransactNamedPipe or ReadFile is successful. 
 
   if (fSuccess) 
      break; 
 
// Read from the pipe if there is more data in the message.
 
   fSuccess = ReadFile( 
      hPipe,      // pipe handle 
      chReadBuf,  // buffer to receive reply 
      512,        // size of buffer 
      &amp;cbRead,    // number of bytes read 
      NULL);      // not overlapped 
 
// Exit if an error other than ERROR_MORE_DATA occurs. 
 
   if (! fSuccess &amp;&amp; (GetLastError() != ERROR_MORE_DATA)) 
      break; 
} 
 </code></pre>
<p>
A pipe client uses <a href="pipes_1aed.htm"><b>CallNamedPipe</b></a> to combine the <a href="filesio_7wmd.htm"><b>CreateFile</b></a>, <a href="pipes_7z6t.htm"><b>WaitNamedPipe</b></a> (if necessary), <a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a>, and <a href="handobj_289x.htm"><b>CloseHandle</b></a> function calls into a single call. Because the pipe handle is closed before the function returns, any additional bytes in the message are lost if the message is larger than the specified size of the read buffer. The following example shows the use of <b>CallNamedPipe</b>. </p>
<pre><code>// Combines connect, wait, write, read, and close operations. 
 
fSuccess = CallNamedPipe( 
    lpszPipename,        // pipe name 
    lpszWrite,           // message to server 
    strlen(lpszWrite)+1, // message length 
    chReadBuf,           // buffer to receive reply 
    512,                 // size of read buffer 
    &amp;cbRead,             // number of bytes read 
    20000);              // waits for 20 seconds 
 
if (fSuccess || GetLastError() == ERROR_MORE_DATA) 
{ 
 
// Data from the pipe is written to STDOUT. 
 
   WriteFile(GetStdHandle(STD_OUTPUT_HANDLE), 
      chReadBuf, cbRead, &amp;cbWritten, NULL); 
 
// The pipe is closed, so no more bytes can be read from the 
// message. 
 
   if (! fSuccess) 
      printf("\n...extra data in message was lost\n"); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

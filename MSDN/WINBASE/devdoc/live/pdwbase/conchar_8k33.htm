<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>High-Level Console I/O</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_high_level_console_i_o"></a>High-Level Console I/O</h3>
<p>
The high-level I/O functions provide a simple way to read a stream of characters from console input or to write a stream of characters to console output. A high-level read operation gets input characters from a console's input buffer and stores them in a specified buffer. A high-level write operation takes characters from a specified buffer and writes them to a screen buffer at the current cursor location, advancing the cursor as each character is written. </p>
<p>
High-level I/O gives you a choice between the <a href="filesio_39id.htm"><b>ReadFile</b></a> and <a href="filesio_3kkl.htm"><b>WriteFile</b></a> functions and the <a href="conchar_34h1.htm"><b>ReadConsole</b></a> and <a href="conchar_2679.htm"><b>WriteConsole</b></a> functions. They are identical, except for two important differences. The console functions support the use of either Unicode characters or the ANSI character set; the file I/O functions do not support Unicode. Also, the file I/O functions can be used to access files, pipes, and serial communications devices; the console functions can only be used with console handles. This distinction is important if an application relies on standard handles that may have been redirected. </p>
<p>
When using either set of high-level functions, an application can control the text and background colors used to display characters subsequently written to a screen buffer. An application can also use the console modes that affect high-level console I/O to enable or disable the following properties: 
<ul>
<li>
Echoing of keyboard input to the active screen buffer </li>
<li>
Line input, in which a read operation does not return until the enter key is pressed </li>
<li>
Automatic processing of keyboard input to handle carriage returns, ctrl+c, and other input details </li>
<li>
Automatic processing of output to handle line wrapping, carriage returns, backspaces, and other output details </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

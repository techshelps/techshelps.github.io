<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualQueryVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualqueryvlm"></a>VirtualQueryVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>VirtualQueryVlm</b> function provides information about a range of pages within the virtual address space of a specified process. </p>
<pre><code><b>DWORD VirtualQueryVlm(
  HANDLE</b><i> hProcess</i><b>,    </b>// handle of process
<b>  PVOID64</b><i> lpAddress</i><b>,  </b>// address of region
<b>  PMEMORY_BASIC_INFORMATION_VLM</b><i> lpBuffer</i><b>,</b>
<b>                      </b>// address of information buffer
<b>  DWORD</b><i> dwLength</i>      // size of buffer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process whose memory information is to be queried. The handle must have PROCESS_QUERY_INFORMATION access. </dd>
<dt>
<i>lpAddress</i></dt>
<dd>
Pointer to the base address of the region of pages to be queried. This value is rounded down to the next page boundary. The address specified must be 64 bits and can therefore be used to access memory for any process allocated using the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. If the address specified is zero, then the system sets the address to the lowest possible VLM address and begins the query from this new address.</dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to a <a href="memman_5xbm.htm"><b>MEMORY_BASIC_INFORMATION_VLM</b></a> structure in which information about the specified page range is returned. </dd>
<dt>
<i>dwLength</i></dt>
<dd>
Size, in bytes, of the buffer pointed to by the <i>lpBuffer</i> parameter. </dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the actual number of bytes returned in the buffer in the <i>lpBuffer</i> parameter. </p>
<p>
If the function fails, the return value is zero.</p>
<h4>Remarks</h4>
<p>
<b>VirtualQueryVlm</b> provides information about a region of consecutive pages beginning at a specified address that share the following attributes: 
<ul>
<li>
The state of all pages is the same. In other words, all pages have the MEM_COMMIT, MEM_RESERVE, MEM_FREE, MEM_PRIVATE, MEM_MAPPED, or MEM_IMAGE flag set. </li>
<li>
If the initial page is not free, all pages in the region are part of the same initial allocation of pages reserved by a call to the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. </li>
<li>
The access type of all pages is the same. In other words, all pages have the PAGE_READONLY, PAGE_READWRITE, PAGE_NOACCESS, PAGE_WRITECOPY, PAGE_EXECUTE, PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE, PAGE_EXECUTE_WRITECOPY, PAGE_GUARD, or PAGE_NOCACHE flag set. </li>
</ul>
<p>
<b>VirtualQueryVlm</b> determines the attributes of the first page in the region and then scans subsequent pages. This scan continues until <b>VirtualQueryVlm</b> either scans the entire range of pages or encounters a page with attributes that do not match those of the first page. <b>VirtualQueryVlm</b> returns the attributes and the size, in bytes, of the region of pages with attributes that match those of the first page. For example, if there is a 40-MB region of free memory and <b>VirtualQueryVlm</b> is called for a page that is 10 MB into the region, <b>VirtualQueryVlm</b> retrieves a state of MEM_FREE and a size of 30 MB. </p>
<p>
<b>VirtualQueryVlm</b> is identical to the <a href="memman_6im0.htm"><b>VirtualQueryEx</b></a> function, except that it provides information about memory allocated using <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>. </p>
<p>
<b>VirtualQueryVlm </b>sets all members in the <i>lpBuffer</i> <b>MEMORY_BASIC_INFORMATION_VLM</b> structure in all cases because certain members in the structure depend on the values of other members. For example, the <b>Type </b>member is not filled for a MEM_FREE region, and the <b>Protect </b>member is not filled if region queried is not committed to memory. All members are filled with useful information wherever possible.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsysteminfo">
</object><a href=JavaScript:alink_1.Click()><b>GetSystemInfo</b></a>, <a href="memman_5xbm.htm"><b>MEMORY_BASIC_INFORMATION_VLM</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="memman_6im0.htm"><b>VirtualQueryEx</b></a>, <a href="memman_6v7d.htm"><b>VirtualQuery</b></a></p>
<p>&nbsp;</p></body>
</HTML>

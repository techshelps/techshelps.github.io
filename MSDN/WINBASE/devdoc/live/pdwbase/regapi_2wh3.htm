<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetProfileString</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getprofilestring"></a>GetProfileString</h1>
<p>
The <b>GetProfileString</b> function retrieves the string associated with the specified key in the given section of the WIN.INI file. This function is provided for compatibility with 16-bit Windows-based applications. Win32-based applications should store initialization information in the registry. </p>
<pre><code><b>DWORD GetProfileString(
  LPCTSTR</b><i> lpAppName</i><b>,        </b>// address of section name
<b>  LPCTSTR</b><i> lpKeyName</i><b>,        </b>// address of key name
<b>  LPCTSTR</b><i> lpDefault</i><b>,        </b>// address of default string
<b>  LPTSTR</b><i> lpReturnedString</i><b>,  </b>// address of destination buffer
<b>  DWORD</b><i> nSize</i>               // size of destination buffer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpAppName</i></dt>
<dd>
Pointer to a null-terminated string that specifies the section containing the key. If this parameter is NULL, the function copies all section names in the file to the supplied buffer. </dd>
<dt>
<i>lpKeyName</i></dt>
<dd>
Pointer to a null-terminated string containing the key name whose associated string is to be retrieved. If this parameter is NULL, the function copies all keys in the given section to the supplied buffer. Each string is followed by a null character, and the final string is followed by a second null character. </dd>
<dt>
<i>lpDefault</i></dt>
<dd>
Pointer to a null-terminated default string. If the <i>lpKeyName</i> key cannot be found in the initialization file, <b>GetProfileString</b> copies the default string to the <i>lpReturnedString</i> buffer. This parameter cannot be NULL.
<p>
Avoid specifying a default string with trailing blank characters. The function inserts a null character in the <i>lpReturnedString</i> buffer to strip any trailing blanks.

<p>
<b>Windows 95:</b> Although <i>lpDefault</i> is declared as a constant parameter, the system strips any trailing blanks by inserting a null character into the <i>lpDefault</i> string before copying it to the <i>lpReturnedString</i> buffer. 

<p>
<b>Windows NT:</b> The system does not modify the <i>lpDefault</i> string. This means that if the default string contains trailing blanks, the <i>lpReturnedString</i> and <i>lpDefault</i> strings will not match when compared using the <b>lstrcmp</b> function.
</dd>
<dt>
<i>lpReturnedString</i></dt>
<dd>
Pointer to a buffer that receives the character string. </dd>
<dt>
<i>nSize</i></dt>
<dd>
Specifies the size, in characters, of the buffer pointed to by the <i>lpReturnedString</i> parameter. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value is the number of characters copied to the buffer, not including the null-terminating character. </p>
<p>
If neither <i>lpAppName</i> nor <i>lpKeyName</i> is NULL and the supplied destination buffer is too small to hold the requested string, the string is truncated and followed by a null character, and the return value is equal to <i>nSize</i> minus one. </p>
<p>
If either <i>lpAppName</i> or <i>lpKeyName</i> is NULL and the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two null characters. In this case, the return value is equal to <i>nSize</i> minus two. </p>
<h4>Remarks</h4>
<p>
If the string associated with the <i>lpKeyName</i> parameter is enclosed in single or double quotation marks, the marks are discarded when the <b>GetProfileString</b> function returns the string. </p>
<p>
The <b>GetProfileString</b> function is not case-sensitive; the strings can contain a combination of uppercase and lowercase letters. </p>
<p>
A section in the WIN.INI file must have the following form: </p>
<p>
<b>[</b><i>section</i><b>]</b><br>
<i>key</i><b>=</b><i>string</i><br>
      .<br>
      .<br>
      .</p>
<p>
An application can use the <a href="regapi_7fxj.htm"><b>GetPrivateProfileString</b></a> function to retrieve a string from a specified initialization file. </p>
<p>
The <i>lpDefault</i> parameter must point to a valid string, even if the string is empty (that is, even if its first character is a null character). </p>
<p>
<b>Windows NT: </b>Calls to profile functions may be mapped to the registry instead of to the initialization files. This mapping occurs when the initialization file and section are specified in the registry under the following keys: </p>
<p class=indent1>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping</b></p>
<p>
When the operation has been mapped, the <b>GetProfileString</b> function retrieves information from the registry, not from the initialization file; the change in the storage location has no effect on the function's behavior. </p>
<p>
The Win32 profile functions (<b>Get/WriteProfile*</b>, <b>Get/WritePrivateProfile*</b>) use the following steps to locate initialization information:
<ol>
<li>
Look in the registry for the name of the initialization file, say MYFILE.INI, under <b>IniFileMapping</b>: <p>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping\myfile.ini</b>
</li>
<li>
Look for the section name specified by <i>lpAppName</i>. This will be a named value under <b>myfile.ini</b>, or a subkey of <b>myfile.ini</b>, or will not exist.</li>
<li>
If the section name specified by <i>lpAppName </i>is a named value under <b>myfile.ini</b>, then that value specifies where in the registry you will find the keys for the section.</li>
<li>
If the section name specified by <i>lpAppName </i>is a subkey of <b>myfile.ini</b>, then named values under that subkey specify where in the registry you will find the keys for the section. If the key you are looking for does not exist as a named value, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) that specifies the default location in the registry where you will find the key.</li>
<li>
If the section name specified by <i>lpAppName </i>does not exist as a named value or as a subkey under <b>myfile.ini</b>, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) under <b>myfile.ini</b> that specifies the default location in the registry where you will find the keys for the section.</li>
<li>
If there is no subkey for MYFILE.INI, or if there is no entry for the section name, then look for the actual MYFILE.INI on the disk and read its contents.</li>
</ol>
<p>
When looking at values in the registry that specify other registry locations, there are several prefixes that change the behavior of the .INI file mapping:
<ul>
<li>
! - this character forces all writes to go both to the registry and to the .INI file on disk.</li>
<li>
# - this character causes the registry value to be set to the value in the Windows 3.1 .INI file when a new user logs in for the first time after setup.</li>
<li>
@ - this character prevents any reads from going to the .INI file on disk if the requested data is not found in the registry.</li>
<li>
USR: - this prefix stands for HKEY_CURRENT_USER, and the text after the prefix is relative to that key.</li>
<li>
SYS: - this prefix stands for HKEY_LOCAL_MACHINE\SOFTWARE, and the text after the prefix is relative to that key.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_7fxj.htm"><b>GetPrivateProfileString</b></a>, <a href="regapi_1aav.htm"><b>WriteProfileString</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

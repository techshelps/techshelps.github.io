<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Child Object Creation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_controlling_child_object_creation"></a>Controlling Child Object Creation</h3>
<p>
The system typically assigns the creator of an object as the object's owner, and the owner has implicit rights to control the object. For example, the owner of an object implicitly has the right to modify the object's DACL, which means the owner can control access to the object. You can use the DACL of a container object to control which trustees have the right to create child objects or subcontainers within the container. This allows you to limit what controls access to these child objects.</p>
<p>
The various types of container objects have specific access rights that control the ability to create child objects. For example, registry keys have the KEY_CREATE_SUB_KEY access right that controls the right to create subkeys. The DACL of a registry key can control the creation of subkeys by allowing or denying this access right to specified trustees. Similarly, NTFS directory objects support the FILE_ADD_FILE and FILE_ADD_SUBDIRECTORY access rights.</p>
<p>
Windows NT provides additional support for controlling child object creation in directory service objects, which can contain many different types of child objects. The DACL for a DS object can contain ACEs that allow or deny the right to create all types of child objects. It can also contain <a href="accctrl_17zn.htm">object-specific ACEs</a> that allow or deny the right to create a specified type of child object. This enables you to allow a user to create one type of child object while preventing the user from creating other types of child objects. Use the following procedure to add an object-specific ACE that allows a specified trustee to create or delete a specified type of child object.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add an object-specific ACE</h5>
<ol>
<li>
Use the <b>GetSecurityInfoEx</b> or <b>GetNamedSecurityInfoEx</b> function to get a pointer to an <b>ACTRL_ACCESS</b> buffer that contains the object's DACL information. </li>
<li>
Use the <b>SetEntriesInAccessList</b> function to add the object-specific ACE information to the <b>ACTRL_ACCESS</b> buffer. The <i>lpProperty</i> parameter identifies the type of child object. The <i>pAccessEntryList</i> parameter points to an <b>ACTRL_ACCESS_ENTRY</b> structure that identifies the trustee and specifies a combination of the ACTRL_DS_CREATE_CHILD and ACTRL_DS_DELETE_CHILD access rights.</li>
<li>
Use the <b>SetSecurityInfoEx</b> or <b>SetNamedSecurityInfoEx</b> function to set the object's DACL with the new access-control information. </li>
</ol>
<p>
To allow a specified trustee to create or delete all types of child objects, follow the same steps, but specify NULL for the <i>lpProperty</i> parameter when you call <b>SetEntriesInAccessList</b>. This creates an ACE that applies to the object itself rather than to a specified type of child object.</p>
<p>&nbsp;</p></body>
</HTML>

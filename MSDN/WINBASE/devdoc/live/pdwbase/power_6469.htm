<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System Sleep Criteria</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_system_sleep_criteria"></a>System Sleep Criteria</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
As long as the system determines that there is application activity, it will not put the system or any devices into the sleeping state. The system can detect certain activities, such as user input or network communications. However, there are other activities that the system cannot track. For example, a presentation application requires the screen for display. However, it may appear that the application is idle during the presentation, causing the system to turn off the screen. To notify the system that your application is busy, use the <a href="power_3rz9.htm"><b>SetThreadExecutionState</b></a> function. This function prevents the system from placing the system or any devices into the sleeping state while the application is running. </p>
<p>
Presentation and multimedia applications must call <b>SetThreadExecutionState</b> with ES_DISPLAY_REQUIRED so that the system will know that it should not put the display device into the sleeping state. Event-handling applications, such as utilities for managing incoming faxes, must call <b>SetThreadExecutionState</b> with ES_SYSTEM_REQUIRED, handle the event, then clear the flag so the system can put the system back into the sleeping state. Note that most productivity applications do not need to use <b>SetThreadExecutionState</b> because the system can usually determine activity by user input. </p>
<p>
To maintain the time since the last user input, the system uses a display idle timer and a system idle timer. The system compares the idle timers to the time-out values the user sets for the display and system by using the Power Management control panel application. If the display idle timer value is greater than the display time-out value, and no threads have requested the display by calling <a href="power_3rz9.htm"><b>SetThreadExecutionState</b></a> with ES_DISPLAY_REQUIRED, the system puts the display into the sleeping state. Similarly, if the system idle timer is greater than the system time-out value, and no applications have requested the system by calling <b>SetThreadExecutionState</b> with ES_SYSTEM_REQUIRED, the system puts the system into the sleeping state. </p>
<p>
The system maintains a count of applications that have called <b>SetThreadExecutionState</b>. The system tracks each thread that calls <b>SetThreadExecutionState</b> and adjusts the counter accordingly. If this counter reaches zero and there has not been any user input, the system puts the system into the sleeping state by calling <a href="power_4wv9.htm"><b>SetSystemPowerState</b></a>. </p>
<p>
When you call the <b>SetSystemPowerState</b> function with <i>fForce</i> set to TRUE, the system generally puts the system into the sleeping state. However, if the next scheduled wake-up time is less than 30 seconds from the current time, <b>SetSystemPowerState</b> leaves the system in the working state and returns FALSE, regardless of the value of <i>fForce</i>. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception-Handler Syntax</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_exception_handler_syntax"></a>Exception-Handler Syntax</h3>
<p>
The <b>try</b> and <b>except</b> keywords are used to construct a frame-based exception handler. The following example shows the structure of a <b>try</b>-<b>except</b> exception handler. </p>
<pre><code>try 
{
    // guarded body of code 
 
} 
except (filter-expression) 
{ 
    // exception-handler block 
 
} 
 </code></pre>
<p>
Note that the <b>try</b> block and the exception-handler block require braces ({}). Using a <b>goto</b> statement to jump into the body of a <b>try</b> block or into an exception-handler block is not permitted. This rule applies to both <b>try</b>-<b>except</b> and <b>try</b>-<b>finally</b> statements. </p>
<p>
The <b>try</b> block contains the guarded body of code that the exception handler protects. A function can have any number of <b>try</b>-<b>except</b> statements, and these exception-handling statements can be nested within the same function or in different functions. If an exception occurs within the <b>try</b> block, the system takes control and begins the search for an exception handler. For a detailed description of this search, see <a href="structex_5e93.htm">Exception Handling</a>.</p>
<p>
The exception handler receives only exceptions that occur within a single thread. This means that if a <b>try</b> block contains a call to the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> or <a href="prothred_4084.htm"><b>CreateThread</b></a> function, exceptions that occur within the new process or thread are not dispatched to this handler. </p>
<p>
The system evaluates the filter expression of each exception handler guarding the code in which the exception occurred until either the exception is handled or there are no more handlers. A filter expression must be evaluated as one of the three following values. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>EXCEPTION_EXECUTE_HANDLER</td>
<td width=46%>The system transfers control to the exception handler, and execution continues in the stack frame in which the handler is found.</td>
</tr>
<tr valign=top>
<td width=54%>EXCEPTION_CONTINUE_SEARCH</td>
<td width=46%>The system continues to search for a handler.</td>
</tr>
<tr valign=top>
<td width=54%>EXCEPTION_CONTINUE_EXECUTION</td>
<td width=46%>The system stops its search for a handler and returns control to the point at which the exception occurred. If the exception is noncontinuable, this results in a EXCEPTION_NONCONTINUABLE_EXCEPTION exception.</td>
</tr>
</table><br>
<p>
The filter expression is evaluated in the context of the function in which the <b>try</b>-<b>except</b> statement is located, even though the exception may have occurred in a different function. This means that the filter expression can access the function's local variables. Similarly, the exception-handler block can access the local variables of the function in which it is located. </p>
<p>
For more information about filter expressions and filter functions, see <a href="structex_4vl3.htm">Frame-based Exception Handling</a>.</p>
<p>&nbsp;</p></body>
</HTML>

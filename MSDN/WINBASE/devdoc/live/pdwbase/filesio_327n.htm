<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filename Conventions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_filename_conventions"></a>Filename Conventions</h2>
<p>
Although each file system can have specific rules about the formation of individual components in a directory or filename, all file systems follow the same general conventions: a base filename and an optional extension, separated by a period. For example, the MS-DOS FAT file system supports 8 characters for the base filename and 3 characters for the extension. This is known as an 8.3 filename. The FAT file system and NTFS support filenames that can be up to 255 characters long. This is known as a long filename. To get an MS-DOS filename given a long filename, use the <a href="filesio_0cyt.htm"><b>GetShortPathName</b></a> function. To get the full path of a file, use the <a href="filesio_79gl.htm"><b>GetFullPathName</b></a> function. </p>
<p>
Both file systems use the backslash (\) character to separate directory names and the filename when forming a path. </p>
<p>
General rules for applications creating names for directories and files or processing names supplied by the user include the following: 
<ul>
<li>
Use any character in the current code page for a name, but do not use a path separator, a character in the range 0 through 31, or any character explicitly disallowed by the file system. A name can contain characters in the extended character set (128–255). </li>
<li>
Use the backslash (\), the forward slash (/), or both to separate components in a path. No other character is acceptable as a path separator. </li>
<li>
Use a period (.) as a directory component in a path to represent the current directory. </li>
<li>
Use two consecutive periods (..) as a directory component in a path to represent the parent of the current directory. </li>
<li>
Use a period (.) to separate the base filename from the extension in a directory name or filename. </li>
<li>
Do not use the following characters in directory names or filenames, because they are reserved: <p>
&lt; &gt; : " / \ |
</li>
<li>
Do not use device names, such as <i>aux</i>, <i>con</i>, and <i>prn</i>, as filenames or directory names. </li>
<li>
Process a path as a null-terminated string. The maximum length for a path, including a trailing backslash, is given by MAX_PATH. <p>
The wide (Unicode) versions of the <a href="filesio_4sft.htm"><b>CreateDirectory</b></a>, <a href="filesio_4qcl.htm"><b>FindFirstFile</b></a>, <a href="filesio_9pgz.htm"><b>GetFileAttributes</b></a>, and <a href="filesio_9a2b.htm"><b>SetFileAttributes</b></a> functions permit paths that exceed the MAX_PATH length if the path has the "\\?\" or "\\?\UNC\" prefix. However, each component in the path cannot be more than MAX_PATH characters long. Use the "\\?\" prefix with paths for local storage devices and the "\\?\UNC\" prefix with paths having the Universal Naming Convention (UNC) format.
</li>
<li>
Do not assume case sensitivity. Consider names such as <i>OSCAR</i>, <i>Oscar</i>, and <i>oscar</i> to be the same. </li>
</ul>
<p>
By following the rules listed in this section, an application can create valid names for files and directories regardless of the file system in use. </p>
<p>&nbsp;</p></body>
</HTML>

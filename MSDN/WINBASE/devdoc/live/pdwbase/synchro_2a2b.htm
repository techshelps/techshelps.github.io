<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Critical Section Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_critical_section_objects"></a>Critical Section Objects</h2>
<p>
<i>Critical section</i> objects provide synchronization similar to that provided by mutex objects, except that critical section objects can be used only by the threads of a single process. Event, mutex, and semaphore objects can also be used in a single-process application, but critical section objects provide a slightly faster, more efficient mechanism for mutual-exclusion synchronization. Like a mutex object, a critical section object can be owned by only one thread at a time, which makes it useful for protecting a shared resource from simultaneous access. There is no guarantee about the order in which threads will obtain ownership of the critical section, however, the system will be fair to all threads. </p>
<p>
The process is responsible for allocating the memory used by a critical section. Typically, this is done by simply declaring a variable of type <b>CRITICAL_SECTION</b>. Before the threads of the process can use it, initialize the critical section by using the <a href="synchro_2dke.htm"><b>InitializeCriticalSection</b></a> or <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a><b> </b>function. </p>
<p>
A thread uses the <a href="synchro_3xym.htm"><b>EnterCriticalSection</b></a> or <a href="synchro_7p2m.htm"><b>TryEnterCriticalSection</b></a> function to request ownership of a critical section. It uses the <a href="synchro_0uge.htm"><b>LeaveCriticalSection</b></a> function to release ownership of a critical section. If the critical section object is currently owned by another thread, <b>EnterCriticalSection</b> waits indefinitely for ownership. In contrast, when a mutex object is used for mutual exclusion, the <a href="synchro_5vqr.htm">wait functions</a> accept a specified time-out interval. The <b>TryEnterCriticalSection</b> function attempts to enter a critical section without blocking the calling thread.</p>
<p>
Once a thread owns a critical section, it can make additional calls to <b>EnterCriticalSection</b> or <b>TryEnterCriticalSection</b> without blocking its execution. This prevents a thread from deadlocking itself while waiting for a critical section that it already owns. To release its ownership, the thread must call <b>LeaveCriticalSection</b> once for each time that it entered the critical section.</p>
<p>
A thread uses the <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a> or <a href="synchro_0wvo.htm"><b>SetCriticalSectionSpinCount</b></a> function to specify a spin count for the critical section object. On single-processor systems, the spin count is ignored and the critical section spin count is set to 0. On multiprocessor systems, if the critical section is unavailable, the calling thread will spin <i>dwSpinCount</i> times before performing a wait operation on a semaphore associated with the critical section. If the critical section becomes free during the spin operation, the calling thread avoids the wait operation. </p>
<p>
Any thread of the process can use the <a href="synchro_931q.htm"><b>DeleteCriticalSection</b></a> function to release the system resources that were allocated when the critical section object was initialized. After this function has been called, the critical section object can no longer be used for synchronization. </p>
<p>
When a critical section object is owned, the only other threads affected are those waiting for ownership in a call to <a href="synchro_3xym.htm"><b>EnterCriticalSection</b></a>. Threads that are not waiting are free to continue running. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DebugActiveProcess</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_debugactiveprocess"></a>DebugActiveProcess</h1>
<p>
The <b>DebugActiveProcess</b> function allows a debugger to attach to an active process and then debug it. To stop debugging the process, you must exit the process. Exiting the debugger will also exit the process. </p>
<pre><code><b>BOOL DebugActiveProcess(
  DWORD</b><i> dwProcessId</i>   // process to be debugged
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwProcessId</i></dt>
<dd>
Specifies the identifier for the process to be debugged. The debugger gets debugging access to the process as if it created the process with the DEBUG_ONLY_THIS_PROCESS flag. See the Remarks section for more details.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The debugger must have appropriate access to the target process; it must be able to open the process for PROCESS_ALL_ACCESS access. On Windows 95 and Windows 98, the debugger has appropriate access if the process identifier is valid. However, on Windows NT, <b>DebugActiveProcess</b> can fail if the target process was created with a security descriptor that grants the debugger anything less than full access. Note that if the debugging process has the SE_DEBUG_NAME privilege granted and enabled, it can debug any process.</p>
<p>
After the system checks the process identifier and determines that a valid debugging attachment is being made, the function returns TRUE. The debugger is then expected to wait for debugging events by using the <a href="debug_17jo.htm"><b>WaitForDebugEvent</b></a> function. The system suspends all threads in the process and sends the debugger events representing the current state of the process. </p>
<p>
The system sends the debugger a single CREATE_PROCESS_DEBUG_EVENT debugging event representing the process specified by the <i>dwProcessId</i> parameter. The <b>lpStartAddress</b> member of the <a href="debug_4gs2.htm"><b>CREATE_PROCESS_DEBUG_INFO</b></a> structure is NULL. </p>
<p>
For each thread currently part of the process, the system sends a CREATE_THREAD_DEBUG_EVENT debugging event. The <b>lpStartAddress</b> member of the <a href="debug_9to2.htm"><b>CREATE_THREAD_DEBUG_INFO</b></a> structure is NULL. </p>
<p>
For each dynamic-link library (DLL) currently loaded into the address space of the target process, the system sends a LOAD_DLL_DEBUG_EVENT debugging event. The system arranges for the first thread in the process to execute a breakpoint instruction after it resumes. Continuing this thread causes it to return to whatever it was doing before the debugger was attached. </p>
<p>
After all of this has been done, the system resumes all threads in the process. When the first thread in the process resumes, it executes a breakpoint instruction that causes an EXCEPTION_DEBUG_EVENT debugging event to be sent to the debugger. All future debugging events are sent to the debugger by using the normal mechanism and rules. </p>
<p>
<b>Windows CE:</b> After a successful return from <b>DebugActiveProcess</b>, when the debugger is waiting for debug events using the <b>WaitForDebugEvent</b> function, the system sends a CREATE_PROCESS_DEBUG_EVENT debugging event that identifies the primary thread handle that is currently part of the process. The system sends an individual CREATE_THREAD_DEBUG_EVENT debugging event for each of the secondary thread handles that are currently part of the process. All of these handles have permission (that is, access rights) for getting and setting thread contexts using the <b>GetThreadContext</b> and <b>SetThreadContext</b> functions.  </p>
<p>
For both the CREATE_PROCESS_DEBUG_EVENT and CREATE_THREAD_DEBUG_EVENT debugging events, the <b>lpStartAddress</b> member of the <b>CREATE_PROCESS_DEBUG_INFO</b> structure is NULL.</p>
<p>
Close each of these thread handles using the <b>CloseHandle</b> function.   </p>
<p>
No initial debug breakpoint is set when <b>DebugActiveProcess</b> successfully attaches.</p>
<p>
Windows CE version 2.0 provides built in support for Just-In-Time (JIT) debugging. A JIT debugger is registered by placing the name of your debugger in the string registry value <b>JITDebugger</b> located at <b>HKEY_LOCAL_MACHINE\Debug</b>. To enable JIT, you must perform a warm reset on the Windows CE target platform after the above value is added to the registry. When your debugger is invoked by JIT, the process identifier of the debugee is passed on the command line. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="debug_4yxz.htm">Debugging Overview</a>, <a href="debug_6qcz.htm">Debugging Functions</a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="debug_4gs2.htm"><b>CREATE_PROCESS_DEBUG_INFO</b></a>, <a href="debug_9to2.htm"><b>CREATE_THREAD_DEBUG_INFO</b></a>, <a href="debug_17jo.htm"><b>WaitForDebugEvent</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

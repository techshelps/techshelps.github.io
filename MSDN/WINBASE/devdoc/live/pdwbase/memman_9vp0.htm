<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapCompact</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heapcompact"></a>HeapCompact</h1>
<p>
The <b>HeapCompact</b> function attempts to compact a specified heap. It compacts the heap by coalescing adjacent free blocks of memory and decommitting large free blocks of memory.</p>
<pre><code><b>UINT HeapCompact(
  HANDLE</b><i> hHeap</i><b>,  </b>// handle to the heap to compact
<b>  DWORD</b><i> dwFlags</i>  // bit-flags that control heap access during 
                 // function operation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHeap</i></dt>
<dd>
Handle to the heap that the function will attempt to compact. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
A set of bit flags that control heap access during function operation. The following bit flag has meaning:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Value</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>HEAP_NO_SERIALIZE</td>
<td width=53%>Specifies that mutual exclusion will not be used while the <b>HeapCompact </b>function accesses the heap. </td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the size, in bytes, of the largest committed free block in the heap. This is an unsigned integer value.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<p>
In the unlikely case that there is absolutely no space available in the heap, the function return value is zero, and <b>GetLastError</b> returns the value NO_ERROR.</p>
<h4>Remarks</h4>
<p>
There is no guarantee that an application can successfully allocate a memory block of the size returned by <b>HeapCompact</b>. Other threads or the commit threshold might prevent such an allocation. </p>
<p>
Serialization ensures mutual exclusion when two or more threads attempt to simultaneously allocate or free blocks from the same heap. There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. Setting the HEAP_NO_SERIALIZE flag eliminates mutual exclusion on the heap. Without serialization, two or more threads that use the same heap handle might attempt to allocate or free memory simultaneously, likely causing corruption in the heap. The HEAP_NO_SERIALIZE flag can, therefore, be safely used only in the following situations: 
<ul>
<li>
The process has only one thread. </li>
<li>
The process has multiple threads, but only one thread calls the heap functions for a specific heap. </li>
<li>
The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap. </li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_5z6t.htm"><b>HeapCreate</b></a>, <a href="memman_53z9.htm"><b>HeapValidate</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

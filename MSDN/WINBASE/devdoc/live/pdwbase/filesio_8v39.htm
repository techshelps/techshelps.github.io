<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Testing for the End of the File</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_testing_for_the_end_of_the_file"></a>Testing for the End of the File</h2>
<p>
The <a href="filesio_39id.htm"><b>ReadFile</b></a> function checks for the end-of-file condition (eof) differently for synchronous and asynchronous read operations. When a synchronous read operation reaches the end of a file, <b>ReadFile</b> returns TRUE and sets the variable pointed to by <i>lpNumberOfBytesRead</i> to zero. An asynchronous read operation can encounter the end of a file during the initiating call to <b>ReadFile</b> or during subsequent asynchronous operation. </p>
<p>
The test for end-of-file during a synchronous read operation is simple, as shown in the following example:</p>
<pre><code>// Attempt a synchronous read operation
bResult = ReadFile(hFile, &amp;inBuffer, nBytesToRead, &amp;nBytesRead, NULL);

// Check for eof
if (bResult &amp;&amp;  nBytesRead == 0, ) 
{
    // We're at the end of the file
}
 </code></pre>
<p>
The test for end-of-file during an asynchronous read operation is more difficult. There are three end-of-file indicators for asynchronous read operations:
<ul>
<li>
<a href="filesio_39id.htm"><b>ReadFile</b></a> returns FALSE and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_HANDLE_EOF.</li>
<li>
<b>ReadFile</b> returns FALSE and <b>GetLastError</b> returns ERROR_IO_PENDING.</li>
<li>
<a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a> returns FALSE and <b>GetLastError</b> returns ERROR_HANDLE_EOF.</li>
</ul>
<p>
<b>ReadFileVlm</b> operates in a manner similar to <b>ReadFile</b>, and the same techniques detect the end of the file for both functions.</p>
<p>
The following example shows how to test for an end-of-file during an asynchronous read operation:</p>
<pre><code>// Attempt to initiate an asynchronous read operation.
bResult = ReadFile(hFile, &amp;inBuffer, nBytesToRead, &amp;nBytesRead, NULL);

// Check if there was a problem.
if (!bResult) 
{
    switch (dwError = GetLastError()) 
    {
        case ERROR_HANDLE_EOF: 
        // At the end of the file.
            break;
        case ERROR_IO_PENDING: 
        // I/O pending.
           break;
    }
}

// Check on an asynchronous read operation.
bResult = GetOverlappedResult(hFile, &amp;gOverlapped, &amp;nBytesRead, TRUE);

// Check if there was a problem.
if (!bResult) 
{
    switch (dwError = GetLastError()) 
    {
        case ERROR_HANDLE_EOF:
        // At the end of the file
    }
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

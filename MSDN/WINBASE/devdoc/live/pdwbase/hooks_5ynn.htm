<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hook Procedures</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_hook_procedures"></a>Hook Procedures</h2>
<p>
To take advantage of a particular type of hook, the developer provides a hook procedure and uses the <a href="hooks_7vaw.htm"><b>SetWindowsHookEx</b></a> function to install it into the chain associated with the hook. A hook procedure must have the following syntax: </p>
<pre><code><b>LRESULT CALLBACK</b> <i>HookProc</i><b>(</b>
  <b>int</b> <i>nCode</i><b>,</b> 
  <b>WPARAM</b> <i>wParam</i><b>,</b> 
  <b>LPARAM</b> <i>lParam</i>
);
 </code></pre>
<p>
<i>HookProc</i> is a placeholder for an application-defined name. </p>
<p>
The <i>nCode</i> parameter is a hook code that the hook procedure uses to determine the action to perform. The value of the hook code depends on the type of the hook; each type has its own characteristic set of hook codes. The values of the <i>wParam</i> and <i>lParam</i> parameters depend on the hook code, but they typically contain information about a message that was sent or posted. </p>
<p>
The <a href="hooks_7vaw.htm"><b>SetWindowsHookEx</b></a> function always installs a hook procedure at the beginning of a hook chain. When an event occurs that is monitored by a particular type of hook, the system calls the procedure at the beginning of the hook chain associated with the hook. Each hook procedure in the chain determines whether to pass the event to the next procedure. A hook procedure passes an event to the next procedure by calling the <a href="hooks_57aw.htm"><b>CallNextHookEx</b></a> function. </p>
<p>
Note that the hook procedures for some types of hooks can only monitor messages. the system passes messages to each hook procedure, regardless of whether a particular procedure calls <b>CallNextHookEx</b>. </p>
<p>
A hook procedure can be global, monitoring messages for all threads in the system, or it can be thread specific, monitoring messages for only an individual thread. A global hook procedure can be called in the context of any application, so the procedure must be in a separate dynamic-link library (DLL) module. A thread specific hook procedure is called only in the context of the associated thread. If an application installs a hook procedure for one of its own threads, the hook procedure can be in either the same module as the rest of the application's code or in a DLL. If the application installs a hook procedure for a thread of a different application, the procedure must be in a DLL. For information, see <a href="dll_512r.htm">Dynamic-Link Libraries</a>. </p>
<p>
<b>Note</b>&nbsp;&nbsp;You should use global hooks only for debugging purposes; otherwise, you should avoid them. Global hooks hurt system performance and cause conflicts with other applications that implement the same type of global hook. </p>
<p>&nbsp;</p></body>
</HTML>

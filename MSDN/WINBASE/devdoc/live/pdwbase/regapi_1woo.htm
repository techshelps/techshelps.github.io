<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RegCreateKeyEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_regcreatekeyex"></a>RegCreateKeyEx</h1>
<p>
The <b>RegCreateKeyEx</b> function creates the specified key. If the key already exists in the registry, the function opens it.</p>
<pre><code><b>LONG RegCreateKeyEx(
  HKEY</b><i> hKey</i><b>,                </b>// handle to an open key
<b>  LPCTSTR</b><i> lpSubKey</i><b>,         </b>// address of subkey name
<b>  DWORD</b><i> Reserved</i><b>,           </b>// reserved
<b>  LPTSTR</b><i> lpClass</i><b>,           </b>// address of class string
<b>  DWORD</b><i> dwOptions</i><b>,          </b>// special options flag
<b>  REGSAM</b><i> samDesired</i><b>,        </b>// desired security access
<b>  LPSECURITY_ATTRIBUTES</b><i> lpSecurityAttributes</i><b>,</b>
<b>                            </b>// address of key security structure
<b>  PHKEY</b><i> phkResult</i><b>,          </b>// address of buffer for opened handle
<b>  LPDWORD</b><i> lpdwDisposition</i>   // address of disposition value buffer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hKey</i></dt>
<dd>
Handle to a currently open key or one of the following predefined reserved handle values: 
<p>
<b>HKEY_CLASSES_ROOT</b><br>
<b>HKEY_CURRENT_CONFIG</b><br>
<b>HKEY_CURRENT_USER</b><br>
<b>HKEY_LOCAL_MACHINE</b><br>
<b>HKEY_USERS</b><br>
<b>Windows NT:</b> <b>HKEY_PERFORMANCE_DATA</b> <br>
<b>Windows 95 and Windows 98:</b> <b>HKEY_DYN_DATA</b> 

<p>
The key opened or created by the <b>RegCreateKeyEx</b> function is a subkey of the key identified by the <i>hKey</i> parameter. 
</dd>
<dt>
<i>lpSubKey</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter. This subkey must not begin with the backslash character ('\'). This parameter cannot be NULL. </dd>
<dt>
<i>Reserved</i></dt>
<dd>
Reserved; must be zero. </dd>
<dt>
<i>lpClass</i></dt>
<dd>
Pointer to a null-terminated string that specifies the class (object type) of this key. This parameter is ignored if the key already exists. </dd>
<dt>
<i>dwOptions</i></dt>
<dd>
Specifies special options for the key. This parameter can be one of the following values. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Value</th>
<th align=left width=48%>Meaning</th>
</tr>
<tr valign=top>
<td width=52%>REG_OPTION_NON_VOLATILE</td>
<td width=48%>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <a href="regapi_0b3t.htm"><b>RegSaveKey</b></a> function saves keys that are not volatile. </td>
</tr>
<tr valign=top>
<td width=52%>REG_OPTION_VOLATILE</td>
<td width=48%><b>Windows NT:</b> This key is volatile; the information is stored in memory and is not preserved when the system is restarted. The <b>RegSaveKey</b> function does not save volatile keys. This flag is ignored if the key already exists. <p>
<b>Windows 95:</b> This value is ignored. If REG_OPTION_VOLATILE is specified, the <b>RegCreateKeyEx</b> function creates a nonvolatile key and returns ERROR_SUCCESS.</p>
</td>
</tr>
<tr valign=top>
<td width=52%>REG_OPTION_BACKUP_RESTORE </td>
<td width=48%><b>Windows NT:</b> If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with ACCESS_SYSTEM_SECURITY and KEY_READ access. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with ACCESS_SYSTEM_SECURITY and KEY_WRITE access. If both privileges are enabled, the key has the combined accesses for both privileges. </td>
</tr>
</table><br>

</dd>
<dt>
<i>samDesired</i></dt>
<dd>
Specifies an access mask that specifies the desired security access for the new key. This parameter can be a combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>KEY_ALL_ACCESS</td>
<td width=52%>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, KEY_CREATE_SUB_KEY, KEY_CREATE_LINK, and KEY_SET_VALUE access.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_CREATE_LINK</td>
<td width=52%>Permission to create a symbolic link.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_CREATE_SUB_KEY</td>
<td width=52%>Permission to create subkeys.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_ENUMERATE_SUB_KEYS</td>
<td width=52%>Permission to enumerate subkeys.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_EXECUTE</td>
<td width=52%>Permission for read access.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_NOTIFY</td>
<td width=52%>Permission for change notification.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_QUERY_VALUE</td>
<td width=52%>Permission to query subkey data.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_READ</td>
<td width=52%>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY access.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_SET_VALUE</td>
<td width=52%>Permission to set subkey data.</td>
</tr>
<tr valign=top>
<td width=48%>KEY_WRITE</td>
<td width=52%>Combination of KEY_SET_VALUE and KEY_CREATE_SUB_KEY access.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpSecurityAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is NULL, the handle cannot be inherited. 
<p>
<b>Windows NT: </b>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is NULL, the key gets a default security descriptor.
</dd>
<dt>
<i>phkResult</i></dt>
<dd>
Pointer to a variable that receives a handle to the opened or created key. When you no longer need the returned handle, call the <a href="regapi_5fax.htm"><b>RegCloseKey</b></a> function to close it.</dd>
<dt>
<i>lpdwDisposition</i></dt>
<dd>
Pointer to a variable that receives one of the following disposition values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Value</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>REG_CREATED_NEW_KEY</td>
<td width=53%>The key did not exist and was created.</td>
</tr>
<tr valign=top>
<td width=47%>REG_OPENED_EXISTING_KEY</td>
<td width=53%>The key existed and was simply opened without being changed.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is ERROR_SUCCESS.</p>
<p>
If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <a href="strings_0sdh.htm"><b>FormatMessage</b></a> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</p>
<h4>Remarks</h4>
<p>
The key that the <b>RegCreateKeyEx</b> function creates has no values. An application can use the <a href="regapi_6qzp.htm"><b>RegSetValue</b></a> or <a href="regapi_76bc.htm"><b>RegSetValueEx</b></a> function to set key values. </p>
<p>
The key identified by the <i>hKey</i> parameter must have been opened with KEY_CREATE_SUB_KEY access. To open the key, use the <b>RegCreateKeyEx</b> or <b>RegOpenKeyEx</b> function. </p>
<p>
An application cannot create a key under HKEY_USERS or HKEY_LOCAL_MACHINE. </p>
<p>
An application can use <b>RegCreateKeyEx</b> to temporarily lock a portion of the registry. When the locking process creates a new key, it receives the disposition value REG_CREATED_NEW_KEY, indicating that it "owns" the lock. Another process attempting to create the same key receives the disposition value REG_OPENED_EXISTING_KEY, indicating that another process already owns the lock. </p>
<p>
<b>Windows CE:</b> The <i>dwOptions</i> and <i>samDesired</i> parameters are ignored and should be set to zero to ensure compatibility with future versions of Windows CE.</p>
<p>
The <i>lpSecurityAttributes</i> parameter should be set to NULL. Windows CE automatically assigns the key a default security descriptor.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winreg.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_5fax.htm"><b>RegCloseKey</b></a>, <a href="regapi_7zy1.htm"><b>RegCreateKey</b></a>, <a href="regapi_1po9.htm"><b>RegDeleteKey</b></a>, <a href="regapi_0h15.htm"><b>RegOpenKey</b></a>, <a href="regapi_7yns.htm"><b>RegOpenKeyEx</b></a>, <a href="regapi_0b3t.htm"><b>RegSaveKey</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

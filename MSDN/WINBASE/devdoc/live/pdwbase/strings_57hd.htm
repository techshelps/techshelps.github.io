<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetStringTypeA</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getstringtypea"></a>GetStringTypeA</h1>
<p>
The <b>GetStringTypeA</b> function returns character-type information for the characters in the specified source string. For each character in the string, the function sets one or more bits in the corresponding 16-bit element of the output array. Each bit identifies a given character type, such as whether the character is a letter, a digit, or neither.</p>
<pre><code><b>BOOL GetStringTypeA(
  LCID</b><i> Locale</i><b>,       </b>// locale identifer
<b>  DWORD</b><i> dwInfoType</i><b>,  </b>// information-type options
<b>  LPCSTR</b><i> lpSrcStr</i><b>,   </b>// pointer to the source string
<b>  int</b><i> cchSrc</i><b>,        </b>// size, in bytes, of the source string
<b>  LPWORD</b><i> lpCharType</i>  // pointer to the buffer for output
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Locale</i></dt>
<dd>
Specifies the locale identifier. This value uniquely defines the ANSI code page to use to translate the string pointed to by <i>lpSrcStr</i> from ANSI to Unicode. The function then analyzes each Unicode character for character type information. 
<p>
This parameter can be a locale identifier created by the <a href="nls_7qck.htm"><b>MAKELCID</b></a> macro, or one of the following predefined values:

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=50%>LOCALE_SYSTEM_DEFAULT</td>
<td width=50%>Default system locale</td>
</tr>
<tr valign=top>
<td width=50%>LOCALE_USER_DEFAULT</td>
<td width=50%>Default user locale</td>
</tr>
</table><br>


<p>
Note that the <i>Locale</i> parameter does not exist in the <a href="strings_57hz.htm"><b>GetStringTypeW</b></a> function. Because of that parameter difference, an application cannot automatically invoke the proper <b>A </b>or <b>W </b>version of <b>GetStringType*</b> through the use of the <b>#define UNICODE</b> switch. An application can circumvent this limitation by using <a href="strings_3b5k.htm"><b>GetStringTypeEx</b></a>, which is the recommended Win32 function.
</dd>
<dt>
<i>dwInfoType</i></dt>
<dd>
Specifies the type of character information the user wants to retrieve. The various types are divided into different levels (see the following Remarks section for a list of the information included in each type). This parameter can specify one of the following character type flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=23%>CT_CTYPE1</td>
<td width=77%>Retrieve character type information.</td>
</tr>
<tr valign=top>
<td width=23%>CT_CTYPE2</td>
<td width=77%>Retrieve bidirectional layout information.</td>
</tr>
<tr valign=top>
<td width=23%>CT_CTYPE3</td>
<td width=77%>Retrieve text processing information.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpSrcStr</i></dt>
<dd>
Pointer to the string for which character types are requested. If <i>cchSrc</i> is –1, the string is assumed to be null terminated. This must be an ANSI string. Note that this can be a double-byte character set (DBCS) string if the locale is appropriate for DBCS.</dd>
<dt>
<i>cchSrc</i></dt>
<dd>
Specifies the size, in bytes, of the string pointed to by the <i>lpSrcStr</i> parameter. If this count includes a null terminator, the function returns character type information for the null terminator. If this value is –1, the string is assumed to be null terminated and the length is calculated automatically. </dd>
<dt>
<i>lpCharType</i></dt>
<dd>
Pointer to an array of 16-bit values. The length of this array must be large enough to receive one 16-bit value for each character in the source string. When the function returns, this array contains one word corresponding to each character in the source string. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. <b>GetLastError</b> may return one of the following error codes:</p>
<p>
ERROR_INVALID_FLAGS<br>
ERROR_INVALID_PARAMETER</p>
<h4>Remarks</h4>
<p>
The <i>lpSrcStr</i> and <i>lpCharType</i> pointers must not be the same. If they are the same, the function fails and <b>GetLastError</b> returns ERROR_INVALID_PARAMETER. </p>
<p>
The <i>Locale</i> parameter is only used to perform string conversion to Unicode. It has nothing to do with the CTYPEs the function returns. The CTYPEs are solely determined by Unicode code points, and do not vary on a locale basis. For example, Greek letters are C1_ALPHA for any <i>Locale</i> value.</p>
<p>
The character-type bits are divided into several levels. The information for one level can be retrieved by a single call to this function. Each level is limited to 16 bits of information so that the other mapping routines, which are limited to 16 bits of representation per character, can also return character-type information. </p>
<p>
The character types supported by this function include the following. 
<dl>
<dt>
<b>Ctype 1</b></dt>
<dd>
These types support ANSI C and POSIX (LC_CTYPE) character-typing functions. A combination of these values is returned in the array pointed to by the <i>lpCharType</i> parameter when the <i>dwInfoType</i> parameter is set to CT_CTYPE1. 
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=20%>Name</th>
<th align=left width=14%>Value</th>
<th align=left width=66%>Meaning</th>
</tr>
<tr valign=top>
<td width=20%>C1_UPPER</td>
<td width=14%>0x0001</td>
<td width=66%>Uppercase </td>
</tr>
<tr valign=top>
<td width=20%>C1_LOWER</td>
<td width=14%>0x0002</td>
<td width=66%>Lowercase </td>
</tr>
<tr valign=top>
<td width=20%>C1_DIGIT</td>
<td width=14%>0x0004</td>
<td width=66%>Decimal digits </td>
</tr>
<tr valign=top>
<td width=20%>C1_SPACE</td>
<td width=14%>0x0008</td>
<td width=66%>Space characters </td>
</tr>
<tr valign=top>
<td width=20%>C1_PUNCT</td>
<td width=14%>0x0010</td>
<td width=66%>Punctuation </td>
</tr>
<tr valign=top>
<td width=20%>C1_CNTRL</td>
<td width=14%>0x0020</td>
<td width=66%>Control characters </td>
</tr>
<tr valign=top>
<td width=20%>C1_BLANK</td>
<td width=14%>0x0040</td>
<td width=66%>Blank characters </td>
</tr>
<tr valign=top>
<td width=20%>C1_XDIGIT</td>
<td width=14%>0x0080</td>
<td width=66%>Hexadecimal digits </td>
</tr>
<tr valign=top>
<td width=20%>C1_ALPHA</td>
<td width=14%>0x0100</td>
<td width=66%>Any linguistic character: alphabetic, syllabary, or ideographic </td>
</tr>
</table><br>

</dd>
</dl>
<p>
The following character types are either constant or computable from basic types and do not need to be supported by this function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=22%>Type</th>
<th align=left width=78%>Description</th>
</tr>
<tr valign=top>
<td width=22%>Alphanumeric</td>
<td width=78%>Alphabetic characters and digits (C1_ALPHA and C1_DIGIT)</td>
</tr>
<tr valign=top>
<td width=22%>Printable</td>
<td width=78%>Graphic characters and blanks (all C1_* types except C1_CNTRL)</td>
</tr>
</table><br>
<dl>
<dt>
<b>Ctype 2</b></dt>
<dd>
These types support proper layout of Unicode text. The direction attributes are assigned so that the bidirectional layout algorithm standardized by Unicode produces accurate results. These types are mutually exclusive. For more information about the use of these attributes, see <i>The Unicode Standard: Worldwide Character Encoding, Volumes 1 and 2,</i> Addison Wesley Publishing Company: 1991, 1992, ISBN 0201567881. 
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=41%>Name</th>
<th align=left width=15%>Value</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=41%><b>Strong</b></td>
<td width=15%> </td>
<td width=44%>  </td>
</tr>
<tr valign=top>
<td width=41%>C2_LEFTTORIGHT</td>
<td width=15%>0x0001</td>
<td width=44%>Left to right </td>
</tr>
<tr valign=top>
<td width=41%>C2_RIGHTTOLEFT</td>
<td width=15%>0x0002</td>
<td width=44%>Right to left </td>
</tr>
<tr valign=top>
<td width=41%><b>Weak</b></td>
<td width=15%> </td>
<td width=44%>  </td>
</tr>
<tr valign=top>
<td width=41%>C2_EUROPENUMBER</td>
<td width=15%>0x0003</td>
<td width=44%>European number, European digit </td>
</tr>
<tr valign=top>
<td width=41%>C2_EUROPESEPARATOR</td>
<td width=15%>0x0004</td>
<td width=44%>European numeric separator </td>
</tr>
<tr valign=top>
<td width=41%>C2_EUROPETERMINATOR</td>
<td width=15%>0x0005</td>
<td width=44%>European numeric terminator </td>
</tr>
<tr valign=top>
<td width=41%>C2_ARABICNUMBER</td>
<td width=15%>0x0006</td>
<td width=44%>Arabic number </td>
</tr>
<tr valign=top>
<td width=41%>C2_COMMONSEPARATOR</td>
<td width=15%>0x0007</td>
<td width=44%>Common numeric separator </td>
</tr>
<tr valign=top>
<td width=41%><b>Neutral</b></td>
<td width=15%> </td>
<td width=44%>  </td>
</tr>
<tr valign=top>
<td width=41%>C2_BLOCKSEPARATOR</td>
<td width=15%>0x0008</td>
<td width=44%>Block separator </td>
</tr>
<tr valign=top>
<td width=41%>C2_SEGMENTSEPARATOR</td>
<td width=15%>0x0009</td>
<td width=44%>Segment separator </td>
</tr>
<tr valign=top>
<td width=41%>C2_WHITESPACE</td>
<td width=15%>0x000A</td>
<td width=44%>White space </td>
</tr>
<tr valign=top>
<td width=41%>C2_OTHERNEUTRAL</td>
<td width=15%>0x000B</td>
<td width=44%>Other neutrals </td>
</tr>
<tr valign=top>
<td width=41%><b>Not applicable</b></td>
<td width=15%></td>
<td width=44%></td>
</tr>
<tr valign=top>
<td width=41%>C2_NOTAPPLICABLE</td>
<td width=15%>0x0000</td>
<td width=44%>No implicit directionality (for example, control codes) </td>
</tr>
</table><br>

</dd>
<dt>
<b>Ctype 3</b></dt>
<dd>
These types are intended to be placeholders for extensions to the POSIX types required for general text processing or for the standard C library functions. A combination of these values is returned when <i>dwInfoType</i> is set to CT_CTYPE3. 
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=33%>Name</th>
<th align=left width=14%>Value</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>C3_NONSPACING</td>
<td width=14%>0x0001</td>
<td width=53%>Nonspacing mark </td>
</tr>
<tr valign=top>
<td width=33%>C3_DIACRITIC</td>
<td width=14%>0x0002</td>
<td width=53%>Diacritic nonspacing mark </td>
</tr>
<tr valign=top>
<td width=33%>C3_VOWELMARK</td>
<td width=14%>0x0004</td>
<td width=53%>Vowel nonspacing mark </td>
</tr>
<tr valign=top>
<td width=33%>C3_SYMBOL</td>
<td width=14%>0x0008</td>
<td width=53%>Symbol </td>
</tr>
<tr valign=top>
<td width=33%>C3_KATAKANA</td>
<td width=14%>0x0010</td>
<td width=53%>Katakana character</td>
</tr>
<tr valign=top>
<td width=33%>C3_HIRAGANA</td>
<td width=14%>0x0020</td>
<td width=53%>Hiragana character</td>
</tr>
<tr valign=top>
<td width=33%>C3_HALFWIDTH</td>
<td width=14%>0x0040</td>
<td width=53%>Half-width character</td>
</tr>
<tr valign=top>
<td width=33%>C3_FULLWIDTH</td>
<td width=14%>0x0080</td>
<td width=53%>Full-width character</td>
</tr>
<tr valign=top>
<td width=33%>C3_IDEOGRAPH</td>
<td width=14%>0x0100</td>
<td width=53%>Ideographic character</td>
</tr>
<tr valign=top>
<td width=33%>C3_KASHIDA</td>
<td width=14%>0x0200</td>
<td width=53%>Arabic Kashida character</td>
</tr>
<tr valign=top>
<td width=33%>C3_LEXICAL</td>
<td width=14%>0x0400</td>
<td width=53%>Punctuation which is counted as part of the word (Kashida, hyphen, feminine/masculine ordinal indicators, equal sign, and so forth)</td>
</tr>
<tr valign=top>
<td width=33%>C3_ALPHA</td>
<td width=14%>0x8000</td>
<td width=53%>All linguistic characters (alphabetic, syllabary, and ideographic)</td>
</tr>
<tr valign=top>
<td width=33%><b>Not applicable</b></td>
<td width=14%></td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=33%>C3_NOTAPPLICABLE</td>
<td width=14%>0x0000</td>
<td width=53%>Not applicable </td>
</tr>
</table><br>

</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.5 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnls.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="strings_70ry.htm">String Manipulation Overview</a>, <a href="strings_97n7.htm">String Manipulation Functions</a>, <a href="nls_34rz.htm"><b>GetLocaleInfo</b></a>, <a href="strings_3b5k.htm"><b>GetStringTypeEx</b></a>, <a href="strings_57hz.htm"><b>GetStringTypeW</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

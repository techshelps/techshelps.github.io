<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReadFileVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_readfilevlm"></a>ReadFileVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>ReadFileVlm</b> function reads data from a file asynchronously. <b>ReadFileVlm</b> is designed solely for asynchronous operation, unlike the <a href="filesio_39id.htm"><b>ReadFile</b></a> function, which is designed for both synchronous and asynchronous operation. </p>
<pre><code><b>BOOL ReadFileVlm(
  HANDLE</b> <i>hFile</i><b>,</b>                // handle of file to read 
<b>  PVOID64</b> <i>lpBuffer</i><b>,</b>            // pointer to buffer 
<b>  DWORD</b> <i>nNumberOfBytesToRead</i><b>,</b>  // number of bytes to read
  <b>LPDWORD</b> <i>lpReserved</i>,          // reserved; must be NULL
<b>  LPOVERLAPPED</b> <i>lpOverlapped</i>    // pointer to offset 
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hFile</i></dt>
<dd>
Open handle that specifies the file to read from. To open a file handle, use the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function. To specify asynchronous I/O, this file handle must have been created with the FILE_FLAG_OVERLAPPED flag. To specify noncached I/O, this file handle must have been created with the FILE_FLAG_NO_BUFFERING flag. </dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to a buffer that receives the data read from the file. The address specified can be used to access memory in processes allocated using the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. Therefore, the address specified must be 64 bits or a sign-extended 32-bit address. 
<p>
The buffer pointed to by the <i>lpBuffer </i>parameter must remain valid for the duration of the read operation. The calling process should not use this buffer until the read operation is completed.
</dd>
<dt>
<i>nNumberOfBytesToRead</i></dt>
<dd>
Number of bytes to read from the file. </dd>
<dt>
<i>lpReserved</i></dt>
<dd>
Reserved; must be NULL.</dd>
<dt>
<i>lpOverlapped</i></dt>
<dd>
Pointer to an <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> data structure that supplies data to be used during the overlapped (asynchronous) read operation.
<p>
If the file specified by the <i>hFile</i> parameter supports byte offsets, the process that calls <b>ReadFileVlm</b> must specify a byte offset within the file at which reading should begin. The calling process specifies the byte offset by setting the <b>OVERLAPPED</b> structure's <b>Offset</b> and <b>OffsetHigh</b> members. 

<p>
<b>ReadFileVlm</b> uses the <b>OVERLAPPED</b> structure's <b>Internal</b> and <b>InternalHigh</b> members. An application should not set these members.

<p>
The <b>OVERLAPPED</b> data structure pointed to by the <i>lpOverlapped</i> parameter must remain valid for the duration of the read operation. The structure should not be a variable that can go out of scope while the read operation is in progress.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<p>
If <b>ReadFileVlm</b> attempts to read past the end of the file, the function returns zero, and <b>GetLastError</b> returns the error code ERROR_HANDLE_EOF. </p>
<h4>Remarks</h4>
<p>
If a portion of the file specified by <i>hFile</i> is locked by another process and the portion read by the read operation overlaps the locked portion, a call to <b>ReadFileVlm</b> fails. </p>
<p>
Accessing the input buffer while a read operation is using the buffer may lead to corruption of the data read into that buffer. Applications must not read from, write to, reallocate, or free the input buffer that a read operation is using until the read operation completes.</p>
<p>
To determine whether an asynchronous I/O operation has completed, you can use the <a href="synchro_738k.htm"><b>HasOverlappedIoCompleted</b></a> macro.</p>
<p>
The <b>ReadFileVlm</b> function may fail if there are too many outstanding asynchronous I/O requests. In the event of such a failure, <b>GetLastError</b> can return ERROR_INVALID_USER_BUFFER or ERROR_NOT_ENOUGH_MEMORY. </p>
<p>
To cancel all pending asynchronous I/O operations, use the <a href="filesio_06gf.htm"><b>CancelIo</b></a> function. <b>CancelIo</b> only cancels operations issued by the calling thread for the specified file handle. I/O operations that are canceled complete with the error code ERROR_OPERATION_ABORTED. </p>
<p>
If your application attempts to read from a floppy drive that does not contain a floppy disk, the operating system displays a message prompting the user to retry the operation. To prevent the system from displaying this message, call the <a href="errors_38px.htm"><b>SetErrorMode</b></a> function with the flag SEM_NOOPENFILEERRORBOX set for the <i>uMode </i>parameter. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To guard against an access violation, use structured exception handling to protect any code that writes to or reads from a memory-mapped view. For more information on structured exception handling, see <a href="fmap3_638n.htm">Reading and Writing</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="filesio_06gf.htm"><b>CancelIo</b></a>, <a href="filesio_7wmd.htm"><b>CreateFile</b></a>, <a href="filesio_1v1h.htm"><b>FileIOCompletionRoutine</b></a>, <a href="synchro_738k.htm"><b>HasOverlappedIoCompleted</b></a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="errors_38px.htm"><b>SetErrorMode</b></a>, <a href="prothred_0o8o.htm"><b>SleepEx</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, <a href="memman_1hm5.htm"><b>WriteFileVlm</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

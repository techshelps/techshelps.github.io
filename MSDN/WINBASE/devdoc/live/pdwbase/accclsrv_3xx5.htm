<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ConvertToAutoInheritPrivateObjectSecurity</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_converttoautoinheritprivateobjectsecurity"></a>ConvertToAutoInheritPrivateObjectSecurity</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>ConvertToAutoInheritPrivateObjectSecurity</b> function converts a security descriptor and its ACLs to a format that supports automatic propagation of inheritable ACEs. </p>
<pre><code><b>BOOL ConvertToAutoInheritPrivateObjectSecurity(
  PSECURITY_DESCRIPTOR</b><i> ParentDescriptor</i><b>, </b>
<b>                            </b>// security descriptor of parent object
<b>  PSECURITY_DESCRIPTOR</b><i> CurrentSecurityDescriptor</i><b>, </b>
<b>                            </b>// current security descriptor of object
<b>  PSECURITY_DESCRIPTOR *</b><i> NewSecurityDescriptor</i><b>, </b>
<b>                            </b>// receives new security descriptor
<b>  GUID *</b><i> ObjectType</i><b>,        </b>// type of object
<b>  BOOLEAN</b><i> IsDirectoryObject</i><b>,       </b>// identifies container objects
<b>  PGENERIC_MAPPING</b><i> GenericMapping</i><b>  </b>// map generic to specific rights
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ParentDescriptor</i></dt>
<dd>
Pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL. </dd>
<dt>
<i>CurrentSecurityDescriptor</i></dt>
<dd>
Pointer to the current security descriptor of the object. </dd>
<dt>
<i>NewSecurityDescriptor</i></dt>
<dd>
Pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. It is the caller's responsibility to call the <a href="accclsrv_4ozd.htm"><b>DestroyPrivateObjectSecurity</b></a> function to free this security descriptor.</dd>
<dt>
<i>ObjectType</i></dt>
<dd>
Pointer to a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_guid">
</object><a href=JavaScript:alink_1.Click()><b>GUID</b></a> structure that identifies the type of object associated with <i>CurrentSecurityDescriptor</i>. Set <i>ObjectType</i> to NULL if the object does not have a GUID.</dd>
<dt>
<i>IsDirectoryObject</i></dt>
<dd>
Specifies whether the new object can contain other objects. A value of TRUE indicates that the new object is a container. A value of FALSE indicates that the new object is not a container.</dd>
<dt>
<i>GenericMapping</i></dt>
<dd>
Pointer to a <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a> structure that specifies the mapping from each generic right to specific rights for the object. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>ConvertToAutoInheritPrivateObjectSecurity</b> function attempts to determine whether the ACEs in the DACL and SACL of the current security descriptor were inherited from the parent security descriptor. The function passes the <i>ParentDescriptor</i> parameter to the <b>CreatePrivateObjectSecurityEx</b> function to get ACLs that contain only inherited ACEs. Then it compares these ACEs to the ACEs in the original security descriptor to determine which of the original ACEs were inherited. The ACEs do not need to match one-to-one. For instance, an ACE that allows read and write access to a trustee can be equivalent to two ACEs: an ACE that allows read access and an ACE that allows write access. </p>
<p>
Any ACEs in the original security descriptor that are equivalent to the ACEs inherited from the parent security descriptor are marked with the INHERITED_ACE flag and added to the new security descriptor. All other ACEs in the original security descriptor are added to the new security descriptor as noninherited ACEs. </p>
<p>
If the original DACL does not have any inherited ACEs, the function sets the SE_DACL_PROTECTED flag in the control bits of the new security descriptor. Similarly, the SE_SACL_PROTECTED flag is set if none of the ACEs in the SACL is inherited. </p>
<p>
For DACLs that have inherited ACEs, the function reorders the ACEs into two groups. The first group has ACEs that were directly applied to the object. The second group has inherited ACEs. This ordering ensures that noninherited ACEs have precedence over inherited ACEs. For more information, see <a href="accctrl_2hik.htm">Order of ACEs in a DACL</a>.</p>
<p>
The function sets the SE_DACL_AUTO_INHERITED and SE_SACL_AUTO_INHERITED flags in the control bits of the new security descriptor. </p>
<p>
The function does not change the ordering of access-allowed ACEs in relation to access-denied ACEs in the DACL, because to do so would change the semantics of the resulting security descriptor. If the function cannot convert the DACL without changing the semantics, it leaves the DACL unchanged and sets the SE_DACL_PROTECTED flag. </p>
<p>
The new security descriptor has the same owner and primary group as the original security descriptor.</p>
<p>
The new security descriptor is equivalent to the original security descriptor, so the caller needs no access rights or privileges to update the security descriptor to the new format.</p>
<p>
This function works with ACL_REVISION and ACL_REVISION_DS ACLs.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="accclsrv_64vg.htm">Client/Server Access Control Overview</a>, <a href="accclsrv_0hv7.htm">Client/Server Access Control Functions</a>, <a href="accclsrv_7dfc.htm"><b>CreatePrivateObjectSecurityEx</b></a>, <a href="accclsrv_29rm.htm"><b>GENERIC_MAPPING</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing the Debugger's Main Loop</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_writing_the_debugger_s_main_loop"></a>Writing the Debugger's Main Loop</h3>
<p>
The debugger uses the <a href="debug_17jo.htm"><b>WaitForDebugEvent</b></a> function at the beginning of its main loop. This function blocks the debugger until a debugging event occurs. When the debugging event occurs, the system suspends all threads in the process being debugged and notifies the debugger of the event. The debugger can call the <a href="debug_3s4s.htm"><b>SetDebugErrorLevel</b></a> function to set the minimum error level at which the system will pass the debugging event to it. </p>
<p>
The debugger can interact with the user, or manipulate the state of the process being debugged, by using the <a href="debug_2jqs.htm"><b>GetThreadContext</b></a>, <a href="debug_63cp.htm"><b>GetThreadSelectorEntry</b></a>, <a href="debug_2mpl.htm"><b>ReadProcessMemory</b></a>, <a href="debug_4f04.htm"><b>SetThreadContext</b></a>, and <a href="debug_35rt.htm"><b>WriteProcessMemory</b></a> functions. <b>GetThreadSelectorEntry</b> returns the descriptor table entry for a specified selector and thread. Debuggers use the descriptor table entry to convert a segment-relative address to a linear virtual address. The <b>ReadProcessMemory</b> and <b>WriteProcessMemory</b> functions require linear virtual addresses. </p>
<p>
Debuggers frequently read the memory of the process being debugged and write the memory that contains instructions to the instruction cache. After the instructions are written, the debugger calls <b>FlushInstructionCache</b> to execute the cached instructions. </p>
<p>
The debugger uses the <a href="debug_30qc.htm"><b>ContinueDebugEvent</b></a> function at the end of its main loop. This function allows the process being debugged to continue executing. </p>
<p>&nbsp;</p></body>
</HTML>

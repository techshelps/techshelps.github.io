<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EVENTLOGRECORD</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_eventlogrecord_str"></a>EVENTLOGRECORD</h1>
<p>
The <b>EVENTLOGRECORD</b> structure contains information about an event record returned by the <a href="eventlog_2hif.htm"><b>ReadEventLog</b></a> function. </p>
<pre><code>typedef struct _EVENTLOGRECORD { 
    DWORD  Length; 
    DWORD  Reserved; 
    DWORD  RecordNumber; 
    DWORD  TimeGenerated; 
    DWORD  TimeWritten; 
    DWORD  EventID; 
    WORD   EventType; 
    WORD   NumStrings; 
    WORD   EventCategory; 
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset; 
    DWORD  UserSidLength; 
    DWORD  UserSidOffset; 
    DWORD  DataLength; 
    DWORD  DataOffset; 
    // 
    // Then follow: 
    // 
    // TCHAR SourceName[] 
    // TCHAR Computername[] 
    // SID   UserSid 
    // TCHAR Strings[] 
    // BYTE  Data[] 
    // CHAR  Pad[] 
    // DWORD Length; 
    // 
} EVENTLOGRECORD; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>Length</b></dt>
<dd>
Specifies the length, in bytes, of this event record. Note that this value is stored at both ends of the entry to ease moving forward or backward through the log. The length includes any pad bytes inserted at the end of the record for DWORD alignment. </dd>
<dt>
<b>Reserved</b></dt>
<dd>
Reserved. </dd>
<dt>
<b>RecordNumber</b></dt>
<dd>
Contains a record number that can be used with the EVENTLOG_SEEK_READ flag passed in a call to the <a href="eventlog_2hif.htm"><b>ReadEventLog</b></a> function to begin reading at a specified record. </dd>
<dt>
<b>TimeGenerated</b></dt>
<dd>
The time at which this entry was submitted. This time is measured in the number of seconds elapsed since 00:00:00 January 1, 1970, Universal Coordinated Time. </dd>
<dt>
<b>TimeWritten</b></dt>
<dd>
Specifies the time at which this entry was received by the service to be written to the logfile. This time is measured in the number of seconds elapsed since 00:00:00 January 1, 1970, Universal Coordinated Time. </dd>
<dt>
<b>EventID</b></dt>
<dd>
Specifies the event. This is specific to the source that generated the event log entry, and is used, together with <b>SourceName</b>, to identify a message in a message file that is presented to the user while viewing the log. </dd>
<dt>
<b>EventType</b></dt>
<dd>
Specifies the type of event. This member can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Value</th>
<th align=left width=48%>Meaning</th>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_ERROR_TYPE</td>
<td width=48%>Error event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_WARNING_TYPE</td>
<td width=48%>Warning event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_INFORMATION_TYPE</td>
<td width=48%>Information event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_AUDIT_SUCCESS</td>
<td width=48%>Success Audit event</td>
</tr>
<tr valign=top>
<td width=52%>EVENTLOG_AUDIT_FAILURE</td>
<td width=48%>Failure Audit event</td>
</tr>
</table><br>


<p>
For more information about event types, see <a href="eventlog_2tbb.htm">Event Logging</a>. 
</dd>
<dt>
<b>NumStrings</b></dt>
<dd>
Specifies the number of strings present in the log (at the position indicated by <b>StringOffset</b>). These strings are merged into the message before it is displayed to the user. </dd>
<dt>
<b>EventCategory</b></dt>
<dd>
Specifies a subcategory for this event. This subcategory is source specific. </dd>
<dt>
<b>ReservedFlags</b></dt>
<dd>
Reserved. </dd>
<dt>
<b>ClosingRecordNumber</b></dt>
<dd>
Reserved. </dd>
<dt>
<b>StringOffset</b></dt>
<dd>
Specifies the offset of the strings within this event log entry. </dd>
<dt>
<b>UserSidLength</b></dt>
<dd>
Specifies the length, in bytes, of the <b>UserSid</b> member. This value can be zero if no security identifier was provided. </dd>
<dt>
<b>UserSidOffset</b></dt>
<dd>
Specifies the offset of the security identifier (SID) within this event record. To obtain the user name for this SID, use the <a href="accctrl_9z8k.htm"><b>LookupAccountSid</b></a> function. </dd>
<dt>
<b>DataLength</b></dt>
<dd>
Specifies the length, in bytes, of the event-specific data (at the position indicated by <b>DataOffset</b>). </dd>
<dt>
<b>DataOffset</b></dt>
<dd>
Specifies the offset of the event-specific information within this event record. This information could be something specific (a disk driver might log the number of retries, for example), followed by binary information specific to the event being logged and to the source that generated the entry. </dd>
<dt>
<b>SourceName</b></dt>
<dd>
Contains the variable-length null-terminated string specifying the name of the source (application, service, driver, subsystem) that generated the entry. This is the name used to retrieve from the registry the name of the file containing the message strings for this source. It is used, together with the event identifier, to get the message string that describes this event. </dd>
<dt>
<b>Computername</b></dt>
<dd>
Contains the variable-length null-terminated string specifying the name of the computer that generated this event. There may also be some pad bytes after this field to ensure that the <b>UserSid</b> is aligned on a DWORD boundary. </dd>
<dt>
<b>UserSid</b></dt>
<dd>
Specifies the security identifier of the active user at the time this event was logged. This member may be empty if the <b>UserSidLength</b> member is zero. 
</dd>
</dl>
<p>
The defined members are followed by the replacement strings for the message identified by the event identifier, the binary information, some pad bytes to make sure the full entry is on a <b>DWORD</b> boundary, and finally the length of the log entry again. Because the strings and the binary information can be of any length, no structure members are defined to reference them. </p>
<p>
The event identifier together with <b>SourceName</b> and a language identifier identify a message string that describes the event in more detail. The strings are used as replacement strings and are merged into the message string to make a complete message. The message strings are contained in a message file specified in the source entry in the registry. To obtain the appropriate message string from the message file, load the message file with the <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> function and use the <a href="strings_0sdh.htm"><b>FormatMessage</b></a> function. </p>
<p>
The binary information is information that is specific to the event. It could be the contents of the processor registers when a device driver got an error, a dump of an invalid packet that was received from the network, a dump of all the structures in a program (when the data area was detected to be corrupt), and so on. This information should be useful to the writer of the device driver or the application in tracking down bugs or unauthorized breaks into the application. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnt.h.</p>
<h4>See Also</h4>
<p>
<a href="eventlog_2tbb.htm">Event Logging Overview</a>, <a href="eventlog_5epf.htm">Event Logging Structures</a>, <a href="accctrl_9z8k.htm"><b>LookupAccountSid</b></a>, <a href="eventlog_2hif.htm"><b>ReadEventLog</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

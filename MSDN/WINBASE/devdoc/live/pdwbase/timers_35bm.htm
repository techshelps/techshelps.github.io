<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example: Creating a Timer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_example_creating_a_timer"></a>Example: Creating a Timer</h2>
<p>
The following example uses the <a href="timers_0euq.htm"><b>SetTimer</b></a> function to create two timers. The first timer is set for every 10 seconds, the second for every 5 minutes. </p>
<pre><code>// Set two timers. 
 
SetTimer(hwnd,             // handle of main window 
    IDT_TIMER1,            // timer identifier 
    10000,                 // 10-second interval 
    (TIMERPROC) NULL);     // no timer callback 
 
SetTimer(hwnd,             // handle of main window 
    IDT_TIMER2,            // timer identifier 
    300000,                // 5-minute interval 
    (TIMERPROC) NULL);     // no timer callback 
 </code></pre>
<p>
To process the <a href="timers_1w6q.htm">WM_TIMER</a> messages generated by these timers, add a WM_TIMER case statement to the window procedure for the <i>hwnd </i>parameter. </p>
<pre><code>case WM_TIMER: 
 
    switch (wParam) 
{ 
        case IDT_TIMER1: 

            // Process the 10-second timer. 
 
             return 0; 
 
        case IDT_TIMER2: 

            // Process the 5-minute timer. 

            return 0; 
    } 
 </code></pre>
<p>
An application can also create a timer whose <a href="timers_1w6q.htm">WM_TIMER</a> messages are processed not by the main window procedure but by an application-defined callback function, as in the following code sample, which creates a timer and uses the callback function MyTimerProc to process the timer's WM_TIMER messages. </p>
<pre><code>// Set the timer. 
 
SetTimer(hwnd,                // handle of main window 
    IDT_TIMER3,               // timer identifier 
    5000,                     // 5-second interval 
    (TIMERPROC) MyTimerProc); // timer callback 
 </code></pre>
<p>
The calling convention for MyTimerProc must be based on the <a href="timers_52xv.htm"><b>TimerProc</b></a> callback function. </p>
<p>
If your application creates a timer without specifying a window handle, your application must monitor the message queue for <a href="timers_1w6q.htm">WM_TIMER</a> messages and dispatch them to the appropriate window. </p>
<pre><code>HWND hwndTimer;   // handle of window for timer messages 
MSG msg;          // message structure 
 
    while (GetMessage(&amp;msg, // message structure 
            NULL,           // handle of window to receive the message 
            NULL,           // lowest message to examine 
            NULL))          // highest message to examine 
    { 
 
        // Post WM_TIMER messages to the hwndTimer procedure. 
 
        if (msg.message == WM_TIMER) 
        { 
            msg.hwnd = hwndTimer; 
        } 
 
        TranslateMessage(&amp;msg); // translates virtual-key codes 
        DispatchMessage(&amp;msg);  // dispatches message to window 
    } 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

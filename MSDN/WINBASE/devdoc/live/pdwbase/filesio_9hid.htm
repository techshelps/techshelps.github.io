<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading from and Writing to a File</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_reading_from_and_writing_to_a_file"></a>Reading from and Writing to a File</h3>
<p>
Every open file has a <i>file pointer</i> that specifies the next byte to be read or the location to receive the next byte written. When a file is opened for the first time, the system places the file pointer at the beginning of the file. As each byte is read or written, the system advances the file pointer. An application can also move the file pointer by using the <a href="filesio_8iwi.htm"><b>SetFilePointer</b></a> function. </p>
<p>
An application reads from and writes to a file by using the <a href="filesio_39id.htm"><b>ReadFile</b></a> and <a href="filesio_3kkl.htm"><b>WriteFile</b></a> functions. These functions require a handle to a file to be opened for reading and writing, respectively. <b>ReadFile</b> and <b>WriteFile</b> read and write a specified number of bytes at the location indicated by the file pointer. The data is read and written exactly as specified; the functions do not format the data.</p>
<p>
For Very Large Memory (VLM), <a href="memman_2fvx.htm"><b>ReadFileVlm</b></a> and <a href="memman_1hm5.htm"><b>WriteFileVlm</b></a> may be used similarly to <b>ReadFile </b>and <b>WriteFile</b>. For more information, see <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>.</p>
<p>
An application can implement a scatter-gather scheme with <a href="filesio_2c36.htm"><b>ReadFileScatter</b></a> and <a href="filesio_55iq.htm"><b>WriteFileGather</b></a>. A scatter-gather scheme uses the operating system to deliver in one operation multiple discrete chunks of data (such as database records) from a file to separate, noncontiguous buffers in memory. A scatter-gather scheme also writes the data from noncontiguous buffers in one operation.</p>
<p>
When the file pointer reaches the end of a file and the application attempts to read from the file, no error occurs, but no bytes are read. Therefore, reading zero bytes without an error means the application has reached the end of the file. Writing zero bytes does nothing. </p>
<p>
An application can truncate or extend a file by using the <a href="filesio_18bp.htm"><b>SetEndOfFile</b></a> function. This function sets the end of file to the current position of the file pointer. </p>
<p>
When an application writes to a file, the system usually collects the data being written in an internal buffer and writes the data to the disk on a regular basis. </p>
<p>
An application can force the operating system to write the contents of the buffer to the disk by using the <a href="filesio_8wvn.htm"><b>FlushFileBuffers</b></a> function. Alternatively, an application can specify that write operations are to bypass the internal buffer and write directly to the disk by setting a flag when the file is created or opened by using the <a href="filesio_7wmd.htm"><b>CreateFile</b></a> function. </p>
<p>
If there is data in the internal buffer when the file is closed, the operating system does not automatically write the contents of the buffer to the disk before closing the file. If the application does not force the operating system to write the buffer to disk before closing the file, the caching algorithm determines when the buffer is written.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Accessing the data buffer while a read or write operation is using the buffer may lead to corruption of the data in that buffer. Applications must not read from, write to, reallocate, or free the data buffer that a read or write operation is using until the operation completes.</p>
<p>&nbsp;</p></body>
</HTML>

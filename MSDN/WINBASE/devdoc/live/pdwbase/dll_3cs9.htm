<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FreeLibrary</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_freelibrary"></a>FreeLibrary</h1>
<p>
The <b>FreeLibrary</b> function decrements the reference count of the loaded dynamic-link library (DLL) module. When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid. </p>
<pre><code><b>BOOL FreeLibrary(
  HMODULE</b><i> hLibModule</i>   // handle to loaded library module
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hLibModule</i></dt>
<dd>
Handle to the loaded library module. The <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> or <a href="dll_5plx.htm"><b>GetModuleHandle</b></a> function returns this handle. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
Each process maintains a reference count for each loaded library module. This reference count is incremented each time <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> is called and is decremented each time <b>FreeLibrary</b> is called. A DLL module loaded at process initialization due to load-time dynamic linking has a reference count of one. This count is incremented if the same module is loaded by a call to <b>LoadLibrary</b>. </p>
<p>
Before unmapping a library module, the system enables the DLL to detach from the process by calling the DLL's <a href="dll_8asu.htm"><b>DllMain</b></a> function, if it has one, with the DLL_PROCESS_DETACH value. Doing so gives the DLL an opportunity to clean up resources allocated on behalf of the current process. After the entry-point function returns, the library module is removed from the address space of the current process. </p>
<p>
It is not safe to call <b>FreeLibrary</b> from <b>DllMain</b>. For more information, see the Remarks section in <a href="dll_8asu.htm"><b>DllMain</b></a>. </p>
<p>
Calling <b>FreeLibrary</b> does not affect other processes using the same library module. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="dll_8asu.htm"><b>DllMain</b></a>, <a href="dll_3wo4.htm"><b>FreeLibraryAndExitThread</b></a>, <a href="dll_5plx.htm"><b>GetModuleHandle</b></a>, <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

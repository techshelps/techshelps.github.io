<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Simple Dynamic-Link Library</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_simple_dynamic_link_library"></a>Creating a Simple Dynamic-Link Library</h2>
<p>
The following example, MYPUTS.C, is the source code needed to create a simple DLL, MYPUTS.DLL. The file MYPUTS.C contains a simple string-printing function called myPuts. The MYPUTS DLL does not define an entry-point function, because it is linked with the C run-time library and has no initialization or cleanup functions of its own to perform. </p>
<pre><code>// File: MYPUTS.C.
// The myPuts function writes a null-terminated string to 
// the standard output device.
. 

#include &lt;windows.h&gt; 

VOID myPuts(LPTSTR lpszMsg) 
{ 
    DWORD cchWritten; 
    HANDLE hStdout; 
 
    // Get a handle to the standard output device.
 
    hStdout = GetStdHandle(STD<u>_</u>OUTPUT<u>_</u>HANDLE); 
 
    // Write a null-terminated string to the standard output device.
 
    while (*lpszMsg) 
        WriteFile(hStdout, lpszMsg++, 1, &amp;cchWritten, NULL); 
} 
 </code></pre>
<p>
To build the DLL, follow the directions in the documentation included with your development tools. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Read and Write Operations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_read_and_write_operations"></a>Read and Write Operations</h2>
<p>
The Win32 API supports both synchronous and asynchronous (overlapped) file I/O operations on serial communications resources. Overlapped operations enable the calling thread to perform other tasks while the operation executes in the background. A thread uses the <a href="filesio_39id.htm"><b>ReadFile</b></a> or <a href="filesio_0660.htm"><b>ReadFileEx</b></a> function to read from a communications resource, and the <a href="filesio_3kkl.htm"><b>WriteFile</b></a> or <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> function to write to a communications resource. <b>ReadFile</b> and <b>WriteFile</b> can be performed synchronously or asynchronously. <b>ReadFileEx</b> and <b>WriteFileEx</b> can only be performed asynchronously. </p>
<p>
The behavior of these read and write functions is affected by whether the function is executed as an overlapped operation, whether the time-out parameters are associated with the handle, and whether flow control parameters are associated with the handle. </p>
<p>
A thread can also write to a communications resource by using the <a href="commun_5e0i.htm"><b>TransmitCommChar</b></a> function, which transmits a specified character ahead of any pending data in the output buffer. This function is useful for transmitting a high priority signal character to the receiving system. Transmission of the high priority character is still subject to flow control and write time-outs, and the operation is performed synchronously. </p>
<p>
A thread can use the <a href="commun_3y5p.htm"><b>PurgeComm</b></a> function to discard all characters in a device's output or input buffer. <b>PurgeComm</b> can also terminate pending read or write operations, even if the operations have not been completed. If a thread uses <b>PurgeComm</b> to flush an output buffer, the deleted characters are not transmitted. To empty the output buffer while ensuring that the contents are transmitted, a thread can call the <a href="filesio_8wvn.htm"><b>FlushFileBuffers</b></a> function (a synchronous operation). Note, however, that <b>FlushFileBuffers</b> is subject to flow control but not to write time-outs, and it will not return until all pending write operations have been transmitted. </p>
<p>&nbsp;</p></body>
</HTML>

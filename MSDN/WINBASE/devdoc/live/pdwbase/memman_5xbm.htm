<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MEMORY_BASIC_INFORMATION_VLM</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_memory_basic_information_vlm_str"></a>MEMORY_BASIC_INFORMATION_VLM</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>MEMORY_BASIC_INFORMATION_VLM</b> structure contains information about a range of pages in the virtual address space of a process. The <a href="memman_8kbx.htm"><b>VirtualQueryVlm</b></a> function uses this structure. </p>
<pre><code>typedef struct _MEMORY_BASIC_INFORMATION_VLM {
    union {
        PVOID64 BaseAddress;
        ULONGLONG BaseAddressAsUlongLong;
    };
    union {
        PVOID64 AllocationBase;
        ULONGLONG AllocationBaseAsUlongLong;
    };
    ULONGLONG RegionSize;
    DWORD AllocationProtect;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION_VLM, *PMEMORY_BASIC_INFORMATION_VLM;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>BaseAddress</b></dt>
<dd>
Pointer to the base address of the region of pages. </dd>
<dt>
<b>AllocationBase</b></dt>
<dd>
Pointer to the base address of a range of pages allocated by the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. The page pointed to by the <b>BaseAddress</b> member is contained within this allocation range. </dd>
<dt>
<b>RegionSize</b></dt>
<dd>
Size, in bytes, of the region beginning at the base address in which all pages have identical attributes. </dd>
<dt>
<b>AllocationProtect</b></dt>
<dd>
Access specified when the region was initially allocated. One of the following flags can be present, along with the PAGE_GUARD and PAGE_NOCACHE protection modifier flags. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Value</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>PAGE_EXECUTE</td>
<td width=53%>Enables execute access to the committed region of pages. An attempt to read or write to the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_EXECUTE_READ</td>
<td width=53%>Enables execute and read access to the committed region of pages. An attempt to write to the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_EXECUTE_READWRITE</td>
<td width=53%>Enables execute, read, and write access to the committed region of pages.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_EXECUTE_WRITECOPY</td>
<td width=53%>Enables execute, read, and write access to the committed region of pages. The pages are shared read-on-write and copy-on-write.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_GUARD</td>
<td width=53%>Protects the page with the underlying page protection. However, access to the region causes a "guard page entered" condition to be raised in the subject process. This flag is a page protection modifier, only valid when used with one of the access values other than PAGE_NOACCESS.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_NOACCESS</td>
<td width=53%>Disables all access to the committed region of pages. An attempt to read from, write to, or execute in the committed region results in an access violation exception.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_NOCACHE</td>
<td width=53%>Allows no caching of the committed regions of pages. The hardware attributes for the physical memory should be set to no cache. This flag is not recommended for general usage. However, this flag is useful for device drivers, for example when mapping a video frame buffer with no caching. This flag is a page protection modifier, only valid when used with one of the access values other than PAGE_NOACCESS.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_READONLY</td>
<td width=53%>Enables read access to the committed region of pages. An attempt to write to the committed region results in an access violation. If the operating system differentiates between read-only access and execute access, an attempt to execute code in the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_READWRITE</td>
<td width=53%>Enables both read and write access to the committed region of pages.</td>
</tr>
<tr valign=top>
<td width=47%>PAGE_WRITECOPY</td>
<td width=53%>Gives copy-on-write access to the committed region of pages.</td>
</tr>
</table><br>

</dd>
<dt>
<b>State</b></dt>
<dd>
State of the pages in the region. You can indicate one of the following states.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Value</th>
<th align=left width=71%>Meaning</th>
</tr>
<tr valign=top>
<td width=29%>MEM_COMMIT</td>
<td width=71%>Indicates committed pages for which physical storage has been allocated, either in memory or in the paging file on disk.</td>
</tr>
<tr valign=top>
<td width=29%>MEM_FREE</td>
<td width=71%>Indicates free pages not accessible to the calling process and available to be allocated. For free pages, the information in the <b>AllocationBase</b>, <b>AllocationProtect</b>, <b>Protect</b>, and <b>Type</b> members is undefined.</td>
</tr>
<tr valign=top>
<td width=29%>MEM_RESERVE</td>
<td width=71%>Indicates reserved pages where a range of the process's virtual address space is reserved without allocating any physical storage. For reserved pages, the information in the <b>Protect</b> member is undefined.</td>
</tr>
</table><br>

</dd>
<dt>
<b>Protect</b></dt>
<dd>
Access protection of the pages in the region. One of the flags listed for the <b>AllocationProtect</b> member is specified. </dd>
<dt>
<b>Type</b></dt>
<dd>
Type of pages in the region. The following types are defined: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=26%>Value</th>
<th align=left width=74%>Meaning</th>
</tr>
<tr valign=top>
<td width=26%>MEM_IMAGE</td>
<td width=74%>Indicates that the memory pages within the region are mapped into the view of an image section.</td>
</tr>
<tr valign=top>
<td width=26%>MEM_MAPPED</td>
<td width=74%>Indicates that the memory pages within the region are mapped into the view of a section.</td>
</tr>
<tr valign=top>
<td width=26%>MEM_PRIVATE</td>
<td width=74%>Indicates that the memory pages within the region are private (not shared by other processes).</td>
</tr>
</table><br>

</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winnt.h.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_2rw3.htm">Memory Management Structures</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="memman_0yr6.htm"><b>MEMORY_BASIC_INFORMATION</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="memman_8kbx.htm"><b>VirtualQueryVlm</b></a>  </p>
<p>&nbsp;</p></body>
</HTML>

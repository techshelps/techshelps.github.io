<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WriteProcessMemoryVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_writeprocessmemoryvlm"></a>WriteProcessMemoryVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>WriteProcessMemoryVlm</b> function writes memory in a specified process. The entire area to be written to must be accessible, or the operation fails. </p>
<pre><code><b>BOOL WriteProcessMemoryVlm(
  HANDLE</b><i> hProcess</i><b>,  </b>// handle to process whose memory is written to
<b>  PVOID64</b><i> lpBaseAddress</i><b>,</b>
                    // address to start writing to
<b>  PVOID64</b><i> lpBuffer</i><b>,  </b>// pointer to buffer to write data to
<b>  DWORD</b><i> nSize</i><b>,      </b>// number of bytes to write
<b>  LPDWORD</b><i> lpNumberOfBytesWritten</i> 
                    // actual number of bytes written
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process whose memory is to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. For more information on PROCESS_VM_OPERATION, see <a href="prothred_478z.htm"><b>OpenProcess</b></a>. </dd>
<dt>
<i>lpBaseAddress</i></dt>
<dd>
Pointer to the base address in the specified process to be written to. Before any data transfer occurs, the system verifies that all memory at the indicated base address for the specified size is accessible for write access. If the memory is not accessible for writing, no writing is done and <b>WriteProcessMemoryVlm</b> fails.
<p>
The address specified is 64 bits and can therefore be used to access memory in the process allocated using <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, or the address can be a sign-extended 32-bit address. 
</dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to the buffer in the memory of the calling process that supplies data to be written to the address space of the specified process. </dd>
<dt>
<i>nSize</i></dt>
<dd>
Number of bytes to write to the specified process. </dd>
<dt>
<i>lpNumberOfBytesWritten</i></dt>
<dd>
Pointer to the actual number of bytes transferred into the specified process. The <i>lpNumberOfBytesWritten</i> parameter is optional. If <i>lpNumberOfBytesWritten</i> is NULL, it is ignored. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. The function fails if the requested write operation crosses into an area of the process that is inaccessible. </p>
<h4>Remarks</h4>
<p>
<b>WriteProcessMemoryVlm</b> copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call <b>WriteProcessMemoryVlm</b>. The process whose address space is being written to is typically, but not necessarily, being debugged. </p>
<p>
Before any data transfer occurs, the system verifies that all memory at the given base address for the specified size is accessible for write access. If the memory is not accessible for writing, no writing is done and <b>WriteProcessMemoryVlm</b> fails. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To guard against an access violation, use structured exception handling to protect any code that writes to or reads from a memory-mapped view. For more information on structured exception handling, see <a href="fmap3_638n.htm">Reading and Writing</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="memman_2ei5.htm"><b>ReadProcessMemoryVlm</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a></p>
<p>&nbsp;</p></body>
</HTML>

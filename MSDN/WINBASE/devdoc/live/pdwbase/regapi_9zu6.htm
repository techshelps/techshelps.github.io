<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WritePrivateProfileSection</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_writeprivateprofilesection"></a>WritePrivateProfileSection</h1>
<p>
The <b>WritePrivateProfileSection</b> function replaces the keys and values under the specified section in an initialization file. </p>
<p>
This function is provided for compatibility with 16-bit Windows-based applications. Win32-based applications should store initialization information in the registry. </p>
<pre><code><b>BOOL WritePrivateProfileSection(
  LPCTSTR</b><i> lpAppName</i><b>,  </b>// pointer to string with section name
<b>  LPCTSTR</b><i> lpString</i><b>,   </b>// pointer to string with data
<b>  LPCTSTR</b><i> lpFileName</i>  // pointer to string with filename
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpAppName</i></dt>
<dd>
Pointer to a null-terminated string containing the name of the section in which data is written. This section name is typically the name of the calling application. </dd>
<dt>
<i>lpString</i></dt>
<dd>
Pointer to a buffer containing the new key names and associated values that are written to the named section. </dd>
<dt>
<i>lpFileName</i></dt>
<dd>
Pointer to a null-terminated string containing the name of the initialization file. If this parameter does not contain a full path for the file, the function searches the Windows directory for the file. If the file does not exist and <i>lpFileName</i> does not contain a full path, the function creates the file in the Windows directory. The function does not create a file if <i>lpFileName</i> contains the full path and filename of a file that does not exist. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The data in the buffer pointed to by the <i>lpString</i> parameter consists of one or more null-terminated strings, followed by a final null character. Each string has the following form: </p>
<p>
<i>key</i><b>=</b><i>string</i></p>
<p>
The <b>WritePrivateProfileSection</b> function is not case-sensitive; the string pointed to by the <i>lpAppName</i> parameter can be a combination of uppercase and lowercase letters. </p>
<p>
If no section name matches the string pointed to by the <i>lpAppName</i> parameter, <b>WritePrivateProfileSection</b> creates the section at the end of the specified initialization file and initializes the new section with the specified key name and value pairs. </p>
<p>
<b>WritePrivateProfileSection</b> deletes the existing keys and values for the named section and inserts the key names and values in the buffer pointed to by the <i>lpString</i> parameter. The function does not attempt to correlate old and new key names; if the new names appear in a different order from the old names, any comments associated with preexisting keys and values in the initialization file will probably be associated with incorrect keys and values. </p>
<p>
This operation is atomic; no operations that read from or write to the specified initialization file are allowed while the information is being written.</p>
<p>
<b>Windows 95: </b>Windows 95 keeps a cached version of WIN.INI to improve performance. If all three parameters are NULL, the function flushes the cache. The function always returns FALSE after flushing the cache, regardless of whether the flush succeeds or fails.</p>
<p>
<b>Windows NT: </b>Windows NT maps most .INI file references to the registry, using the mapping defined under the following registry key:</p>
<p class=indent1>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping</b></p>
<p>
This mapping is likely if an application modifies system-component initialization files, such as CONTROL.INI, SYSTEM.INI, and WINFILE.INI. In this case, the <b>WritePrivateProfileSection</b> function writes information to the registry, not to the initialization file; the change in the storage location has no effect on the function's behavior. </p>
<p>
The Win32 profile functions (<b>Get/WriteProfile*</b>, <b>Get/WritePrivateProfile*</b>) use the following steps to locate initialization information:
<ol>
<li>
Look in the registry for the name of the initialization file, say MYFILE.INI, under <b>IniFileMapping</b>: <p>
<b>HKEY_LOCAL_MACHINE</b>\<b>Software</b>\<b>Microsoft</b>\<br>
        <b>Windows NT</b>\<b>CurrentVersion</b>\<b>IniFileMapping\myfile.ini</b>
</li>
<li>
Look for the section name specified by <i>lpAppName</i>. This will be a named value under <b>myfile.ini</b>, or a subkey of <b>myfile.ini</b>, or will not exist.</li>
<li>
If the section name specified by <i>lpAppName </i>is a named value under <b>myfile.ini</b>, then that value specifies where in the registry you will find the keys for the section.</li>
<li>
If the section name specified by <i>lpAppName </i>is a subkey of <b>myfile.ini</b>, then named values under that subkey specify where in the registry you will find the keys for the section. If the key you are looking for does not exist as a named value, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) that specifies the default location in the registry where you will find the key.</li>
<li>
If the section name specified by <i>lpAppName </i>does not exist as a named value or as a subkey under <b>myfile.ini</b>, then there will be an unnamed value (shown as <b>&lt;No Name&gt;</b>) under <b>myfile.ini</b> that specifies the default location in the registry where you will find the keys for the section.</li>
<li>
If there is no subkey for MYFILE.INI, or if there is no entry for the section name, then look for the actual MYFILE.INI on the disk and read its contents.</li>
</ol>
<p>
When looking at values in the registry that specify other registry locations, there are several prefixes that change the behavior of the .INI file mapping:
<ul>
<li>
! - this character forces all writes to go both to the registry and to the .INI file on disk.</li>
<li>
# - this character causes the registry value to be set to the value in the Windows 3.1 .INI file when a new user logs in for the first time after setup.</li>
<li>
@ - this character prevents any reads from going to the .INI file on disk if the requested data is not found in the registry.</li>
<li>
USR: - this prefix stands for HKEY_CURRENT_USER, and the text after the prefix is relative to that key.</li>
<li>
SYS: - this prefix stands for HKEY_LOCAL_MACHINE\SOFTWARE, and the text after the prefix is relative to that key.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_3l4e.htm"><b>GetPrivateProfileSection</b></a>, <a href="regapi_1woo.htm"><b>RegCreateKeyEx</b></a>, <a href="regapi_76bc.htm"><b>RegSetValueEx</b></a>, <a href="regapi_9ktq.htm"><b>WriteProfileSection</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting the Logon SID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_getting_the_logon_sid"></a>Getting the Logon SID</h2>
<p>
A logon security identifier (SID) identifies the logon session associated with an access token. A typical use of a logon SID is in an ACE that allows access for the duration of a client's logon session. For example, a Win32 service can use the <a href="accclsrv_9cfm.htm"><b>LogonUser</b></a> function to start a new logon session. <b>LogonUser</b> returns an access token from which the service can extract the logon SID. The service can then use the SID in an ACE that allows the client's logon session to access the interactive window station and desktop. </p>
<p>
The following example gets the logon SID from an access token. It uses the <a href="accctrl_2jvy.htm"><b>GetTokenInformation</b></a> function to fill a <a href="accctrl_2eia.htm"><b>TOKEN_GROUPS</b></a> buffer with an array of the group SIDs from an access token. This array includes the logon SID, which is identified by the SE_GROUP_LOGON_ID attribute. The example function allocates a buffer for the logon SID; it is the caller's responsibility to free the buffer.</p>
<pre><code>BOOL GetLogonSID (HANDLE hToken, PSID *ppsid) {

BOOL bSuccess = FALSE;
DWORD dwIndex;
DWORD dwLength = 0;
PTOKEN_GROUPS ptg = NULL;

// Get required buffer size and allocate the TOKEN_GROUPS buffer.

if (!GetTokenInformation(
         hToken,         // handle to the access token
         TokenGroups,    // get information about the token's groups 
         (LPVOID) ptg,   // pointer to TOKEN_GROUPS buffer
         0,              // size of buffer
         &amp;dwLength       // receives required buffer size
         )) 
    {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER) 
            goto Cleanup;
        ptg = (PTOKEN_GROUPS)HeapAlloc(GetProcessHeap(),
                 HEAP_ZERO_MEMORY, dwLength);
        if (ptg == NULL)
            goto Cleanup;
    }

// Get the token group information from the access token.

if (!GetTokenInformation(
         hToken,         // handle to the access token
         TokenGroups,    // get information about the token's groups 
         (LPVOID) ptg,   // pointer to TOKEN_GROUPS buffer
         dwLength,       // size of buffer
         &amp;dwLength       // receives required buffer size
         )) 
    goto Cleanup;

// Loop through the groups to find the logon SID.

for (dwIndex = 0; dwIndex &lt; ptg-&gt;GroupCount; dwIndex++) 
    if ((ptg-&gt;Groups[dwIndex].Attributes &amp; SE_GROUP_LOGON_ID)
             ==  SE_GROUP_LOGON_ID) 
    {
        // Found the logon SID; make a copy of it.

        dwLength = GetLengthSid(ptg-&gt;Groups[dwIndex].Sid);
        *ppsid = (PSID) HeapAlloc(GetProcessHeap(),
                    HEAP_ZERO_MEMORY, dwLength);
        if (*ppsid == NULL)
            goto Cleanup;
        if (!CopySid(dwLength, *ppsid, ptg-&gt;Groups[dwIndex].Sid)) {
            HeapFree(GetProcessHeap(), 0, (LPVOID)*ppsid);
            goto Cleanup;
        }
        break;
    }

bSuccess = TRUE;

Cleanup: 

// Free the buffer for the token groups.

if (ptg != NULL)
    HeapFree(GetProcessHeap(), 0, (LPVOID)ptg);

return bSuccess;
}
</code></pre>
<p>
The following function frees the buffer allocated by the GetLogonSID example function.</p>
<pre><code>VOID FreeLogonSID (PSID *ppsid) {
    HeapFree(GetProcessHeap(), 0, (LPVOID)*ppsid);
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

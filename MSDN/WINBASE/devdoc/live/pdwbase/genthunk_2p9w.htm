<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling the DLL Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_calling_the_dll_function_pt"></a>Calling the DLL Function</h2>
<p>
Once you have obtained the address of the target DLL function, you can call it from <code>APP16</code> using the <a href="genthunk_79pw.htm"><b>CallProcEx32W</b></a> or <a href="genthunk_61h0.htm"><b>CallProc32W</b></a> function. You cannot create a prototype for <b>CallProc32W</b> unless you do one of the following: 
<ul>
<li>
Restrict each file so that it only uses calls to functions that contain the same number of parameters. </li>
<li>
Create a prototype <code>CallProc32W</code>_<code>1</code> for functions that use one parameter, <code>CallProc32W_2</code> for functions that use two parameters, and so forth. When linking your application or DLL, use forwarders to map calls to these functions to <b>CallProc32W</b>. </li>
</ul>
<p>
This is a limitation of the Pascal calling convention. For this reason, you may choose to use the <a href="genthunk_79pw.htm"><b>CallProcEx32W</b></a> function, which uses the C calling convention to support a variable number of arguments. </p>
<p>
These examples call <code>MyPrint</code>, passing two arguments, a string and a window handle. All parameters must be 32-bit values. Therefore, the string is declared using a <b>FAR</b> pointer, as shown here: </p>
<pre><code>char FAR *TestString = "Hello there";
 </code></pre>
<p>
You must convert the 16-bit window handle to a 32-bit window handle using the <a href="genthunk_720k.htm"><b>WOWHandle32</b></a> function, as shown here:</p>
<pre><code>// Convert the window handle.
DWORD hWnd32;
hWnd32 = WOWHandle32(hWnd, WOW_TYPE_HWND);
 </code></pre>
<p>
This first example uses <b>CallProcEx32W</b>.</p>
<pre><code>// Call the MyPrint routine in the Win32-based DLL
CallProcEx32W( 2 | CPEX_DEST_STDCALL, 
                                   2, 
                               hProc, 
                  (DWORD) TestString, 
                              hWnd32);
 </code></pre>
<p>
This next example uses <b>CallProc32W</b>:</p>
<pre><code>// Call the MyPrint routine in the Win32-based DLL
CallProc32W( (DWORD) TestString, 
                         hWnd32, 
                          hProc, 
                              2, 
          2 | CPEX_DEST_STDCALL);
 </code></pre>
<p>
A mask of 2 (0x10) is given because we want to pass <code>TestString</code> by reference and <code>hProc</code> by value. The system translates the pointer for us. </p>
<p>
If you are isolating your thunking code into <code>DLL16</code>, put the call to <b>CallProc32W</b> or <b>CallProcEx32W</b> in the <code>MyPrint</code> function of the <code>DLL16</code> code. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>InitializeCriticalSection</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_initializecriticalsection"></a>InitializeCriticalSection</h1>
<p>
The <b>InitializeCriticalSection</b> function initializes a critical section object. </p>
<pre><code><b>VOID InitializeCriticalSection(
  LPCRITICAL_SECTION</b><i> lpCriticalSection</i>   // address of critical 
                                         // section object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpCriticalSection</i></dt>
<dd>
Pointer to the critical section object. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function does not return a value. </p>
<h4>Remarks</h4>
<p>
The threads of a single process can use a critical section object for mutual-exclusion synchronization. There is no guarantee about the order in which threads will obtain ownership of the critical section, however, the system will be fair to all threads. </p>
<p>
The process is responsible for allocating the memory used by a critical section object, which it can do by declaring a variable of type <b>CRITICAL_SECTION</b>. Before using a critical section, some thread of the process must call the <b>InitializeCriticalSection</b> or <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a> function to initialize the object. </p>
<p>
Once a critical section object has been initialized, the threads of the process can specify the object in the <b>EnterCriticalSection, TryEnterCriticalSection,</b> or <b>LeaveCriticalSection</b> function to provide mutually exclusive access to a shared resource. For similar synchronization between the threads of different processes, use a mutex object. </p>
<p>
A critical section object cannot be moved or copied. The process must also not modify the object, but must treat it as logically opaque. Use only the critical section functions provided by the Win32 API to manage critical section objects. </p>
<p>
In low memory situations, <b>InitializeCriticalSection</b> can raise a STATUS_NO_MEMORY exception. </p>
<p>
<b>Windows CE:</b> Use only the functions provided in the Windows CE application programming interface to manage critical section objects.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_1a2g.htm"><b>CreateMutex</b></a>, <a href="synchro_931q.htm"><b>DeleteCriticalSection</b></a>, <a href="synchro_3xym.htm"><b>EnterCriticalSection</b></a>, <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a>, <a href="synchro_0uge.htm"><b>LeaveCriticalSection</b></a>, <a href="synchro_7p2m.htm"><b>TryEnterCriticalSection</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateRemoteThread</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createremotethread"></a>CreateRemoteThread</h1>
<p>
The <b>CreateRemoteThread</b> function creates a thread that runs in the address space of another process. </p>
<pre><code><b>HANDLE CreateRemoteThread(
  HANDLE</b><i> hProcess</i><b>,        </b>// handle to process to create thread in
<b>  LPSECURITY_ATTRIBUTES</b><i> lpThreadAttributes</i><b>,  </b>// pointer to security attributes
<b>  DWORD</b><i> dwStackSize</i><b>,      </b>// initial thread stack size, in bytes
<b>  LPTHREAD_START_ROUTINE</b><i> lpStartAddress</i><b>, </b>// pointer to thread function
<b>  LPVOID</b><i> lpParameter</i><b>,     </b>// argument for new thread
<b>  DWORD</b><i> dwCreationFlags</i><b>,  </b>// creation flags
<b>  LPDWORD</b><i> lpThreadId</i>      // pointer to returned thread identifier
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights.  </dd>
<dt>
<i>lpThreadAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If <i>lpThreadAttributes</i> is NULL, the thread gets a default security descriptor and the handle cannot be inherited.</dd>
<dt>
<i>dwStackSize</i></dt>
<dd>
Specifies the initial commit size of the stack, in bytes. The system rounds this value to the nearest page. If this value is zero, or is smaller than the default commit size, the default is to use the same size as the calling thread. For more information, see <a href="prothred_0b8l.htm">Thread Stack Size</a>. </dd>
<dt>
<i>lpStartAddress</i></dt>
<dd>
Pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. For more information on the thread function, see <a href="prothred_9wkj.htm"><b>ThreadProc</b></a>. </dd>
<dt>
<i>lpParameter</i></dt>
<dd>
Specifies a single 32-bit value passed to the thread function. </dd>
<dt>
<i>dwCreationFlags</i></dt>
<dd>
Specifies additional flags that control the creation of the thread. If the CREATE_SUSPENDED flag is specified, the thread is created in a suspended state and will not run until the <a href="prothred_59no.htm"><b>ResumeThread</b></a> function is called. If this value is zero, the thread runs immediately after creation. </dd>
<dt>
<i>lpThreadId</i></dt>
<dd>
Pointer to a 32-bit variable that receives the thread identifier. 
<p>
<b>Windows NT:</b> If this parameter is NULL, the thread identifier is not returned.

<p>
<b>Windows 95 and Windows 98:</b> This parameter may not be NULL. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the new thread.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>CreateRemoteThread</b> function causes a new thread of execution to begin in the address space of the specified process. The thread has access to all objects opened by the process. </p>
<p>
The new thread handle is created with full access to the new thread. If a security descriptor is not provided, the handle may be used in any function that requires a thread object handle. When a security descriptor is provided, an access check is performed on all subsequent uses of the handle before access is granted. If the access check denies access, the requesting process cannot use the handle to gain access to the thread. </p>
<p>
<b>CreateRemoteThread</b> may succeed even if <i>lpStartAddress</i> points to data, code, or is not accessible. If the start address is invalid when the thread runs, an exception occurs, and the thread terminates. Thread termination due to a invalid start address is handled as an error exit for the thread's process. This behavior is similar to the asynchronous nature of <b>CreateProcess</b>, where the process is created even if it refers to invalid or missing dynamic-link libraries (DLLs). </p>
<p>
The thread is created with a thread priority of THREAD_PRIORITY_NORMAL. Use the <a href="prothred_9uk9.htm"><b>GetThreadPriority</b></a> and <a href="prothred_9f5l.htm"><b>SetThreadPriority</b></a> functions to get and set the priority value of a thread. </p>
<p>
When a thread terminates, the thread object attains a signaled state, satisfying any threads that were waiting for the object. </p>
<p>
The thread object remains in the system until the thread has terminated and all handles to it have been closed through a call to <a href="handobj_289x.htm"><b>CloseHandle</b></a>. </p>
<p>
The <b>ExitProcess</b>, <b>ExitThread</b>, <b>CreateThread</b>, <b>CreateRemoteThread</b> functions, and a process that is starting (as the result of a <b>CreateProcess</b> call) are serialized between each other within a process. Only one of these events can happen in an address space at a time. This means the following restrictions hold: 
<ul>
<li>
During process startup and DLL initialization routines, new threads can be created, but they do not begin execution until DLL initialization is done for the process. </li>
<li>
Only one thread in a process can be in a DLL initialization or detach routine at a time. </li>
<li>
<b>ExitProcess</b> does not return until no threads are in their DLL initialization or detach routines. </li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="handobj_289x.htm"><b>CloseHandle</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="prothred_4084.htm"><b>CreateThread</b></a>, <a href="prothred_8dv7.htm"><b>ExitProcess</b></a>, <a href="prothred_531g.htm"><b>ExitThread</b></a>, <a href="prothred_9uk9.htm"><b>GetThreadPriority</b></a>, <a href="prothred_59no.htm"><b>ResumeThread</b></a>, <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a>, <a href="prothred_9f5l.htm"><b>SetThreadPriority</b></a>, <a href="prothred_9wkj.htm"><b>ThreadProc</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

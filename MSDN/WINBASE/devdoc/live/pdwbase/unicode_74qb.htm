<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32 Data Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_win32_data_types"></a>Win32 Data Types</h3>
<p>
Most string operations for Unicode can be written by using the same logic used for handling the Windows ANSI character set, except that the basic unit of operation is a 16-bit character instead of an 8-bit byte. The Platform SDK header files provide a number of type definitions that make it easy to create sources that can be compiled for Unicode or for the ANSI character set. </p>
<p>
The following example shows the method used in the Platform SDK header files to define three sets of data types: a set of generic type definitions that can compile for either ANSI or Unicode, and two sets of specific type definitions. The first set of specific type definitions is for use with the existing Windows (ANSI) character set, and the other is for use with Unicode (or wide) characters. </p>
<pre><code>// Generic types 
 
#ifdef UNICODE 
    typedef wchar_t TCHAR; 
#else 
    typedef unsigned char TCHAR; 
#endif 
 
typedef TCHAR * LPTSTR, *LPTCH; 
 
// 8-bit character specific 
 
typedef unsigned char CHAR; 
typedef CHAR *LPSTR, *LPCH; 
 
// Unicode specific (wide characters) 
 
typedef unsigned wchar_t WCHAR; 
typedef WCHAR *LPWSTR, *LPWCH; 
 </code></pre>
<p>
The letter <i>T</i> in a type definition designates a generic type that can be compiled for either ANSI or Unicode. The letter <i>W</i> in a type definition designates a wide-character (Unicode) type. For the actual implementation of this method, see the WINNT.H header file. </p>
<p>
An application using generic data types can be compiled for Unicode simply by defining UNICODE before the include statements for the header files, OR DURING COMPILATION. To compile the code for ANSI, omit the UNICODE definition. It is best to use the generic data types, but the specific types exist for applications that require mixed types. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overlapped I/O</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_overlapped_i_o"></a>Overlapped I/O</h3>
<p>
Asynchronous I/O is also called overlapped I/O. The <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="filesio_3kkl.htm"><b>WriteFile</b></a>, <b>ReadFileVlm</b>, and <b>WriteFileVlm</b> functions enable an application to specify an <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure that indicates where to position the file pointer before the read or write operation. The handle of the file being read from or written to must have been opened with the FILE_FLAG_OVERLAPPED flag. You can also create an event and put the handle in the <b>OVERLAPPED</b> structure; the <a href="synchro_5vqr.htm">wait functions</a> can then be used to wait for the I/O operation to complete by waiting on the event handle. </p>
<p>
An application can also wait on the file handle to synchronize the completion of an I/O operation, but doing so requires extreme caution. Each time an I/O operation is started, the operating system sets the file handle to the nonsignaled state. Each time an I/O operation is completed, the operating system sets the file handle to the signaled state. Therefore, if an application starts two I/O operations and waits on the file handle, there is no way to determine which operation is finished when the handle is set to the signaled state. If an application must perform multiple asynchronous I/O operations on a single file, it should wait on the event handle in the <b>OVERLAPPED</b> structure for each I/O operation, rather than on the file handle. </p>
<p>
To cancel all pending asynchronous I/O operations, use the <a href="filesio_06gf.htm"><b>CancelIo</b></a> function. This function only cancels operations issued by the calling thread for the specified file handle. </p>
<p>
The <a href="filesio_0660.htm"><b>ReadFileEx</b></a> and <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> functions enable an application to specify a routine to execute (see <a href="filesio_1v1h.htm"><b>FileIOCompletionRoutine</b></a>) when the asynchronous I/O request is completed. </p>
<p>
For more information, see <a href="synchro_4ur8.htm">Synchronization and Overlapped Input and Output</a>. </p>
<p>&nbsp;</p></body>
</HTML>

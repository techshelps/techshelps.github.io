<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering Window Classes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_registering_window_classes"></a>Registering Window Classes</h2>
<p>
A window class is supported by a window procedure. You can register a window class by using either the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_registerclass">
</object><a href=JavaScript:alink_1.Click()><b>RegisterClassA</b> or <b>RegisterClassW</b></a> function. If you register the window class by using <b>RegisterClassA</b>, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using <b>RegisterClassW</b>, the application requests that the system pass text parameters of messages as Unicode. The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_iswindowunicode">
</object><a href=JavaScript:alink_2.Click()><b>IsWindowUnicode</b></a> function enables applications to query the nature of each window. </p>
<p>
The following example shows how to register an ANSI window class and a Unicode window class and how to write the window procedures for both cases. For the purposes of this example, all functions and structures are shown with the specific A or W data types. Using the techniques explained in <a href="unicode_1cmr.htm">Using Generic Data Types</a>, you could alternatively write this example by using generic data types, so that it could be compiled as either ANSI or Unicode, depending on whether UNICODE is defined. </p>
<pre><code>// Register an ANSI window class. 
 
WNDCLASSA AnsiWndCls; 
 
AnsiWndCls.style         = CS_DBLCLKS | CS_PARENTDC; 
AnsiWndCls.lpfnWndProc   = (WNDPROC)AnsiWndProc; 
AnsiWndCls.cbClsExtra    = 0; 
AnsiWndCls.cbWndExtra    = 0; 
AnsiWndCls.hInstance     = hmodUser; 
AnsiWndCls.hIcon         = NULL; 
AnsiWndCls.hCursor       = LoadCursor(NULL, (LPTSTR)IDC_IBEAM); 
AnsiWndCls.hbrBackground = NULL; 
AnsiWndCls.lpszMenuName  = NULL; 
AnsiWndCls.lpszClassName = "TestAnsi"; 
 
RegisterClassA(&amp;AnsiWndCls); 
 
// Register a Unicode window class. 
 
WNDCLASSW UnicodeWndCls; 
 
UnicodeWndCls.style         = CS_DBLCLKS | CS_PARENTDC; 
UnicodeWndCls.lpfnWndProc   = (WNDPROC)UniWndProc; 
UnicodeWndCls.cbClsExtra    = 0; 
UnicodeWndCls.cbWndExtra    = 0; 
UnicodeWndCls.hInstance     = hmodUser; 
UnicodeWndCls.hIcon         = NULL; 
UnicodeWndCls.hCursor       = LoadCursor(NULL,(LPTSTR)IDC_IBEAM); 
UnicodeWndCls.hbrBackground = NULL; 
UnicodeWndCls.lpszMenuName  = NULL; 
UnicodeWndCls.lpszClassName = L"TestUnicode"; 
 
RegisterClassW(&amp;UnicodeWndCls); 
 </code></pre>
<p>
The following example shows the difference between handling the WM_CHAR message in an ANSI window procedure and a Unicode window procedure. </p>
<pre><code>// ANSI Window Procedure 
 
LONG AnsiWndProc(HWND hwnd, UINT message, 
                 WPARAM wParam, LPARAM lParam) 
{ 
 
    // Dispatch the messages that can be received. 
 
    switch (message) 
    { 
        case WM_CHAR: 
 
            // wParam - the value of the key 
            // lParam - (not used in this example) 
 
            if (lstrcmpA("Q", (LPCSTR) wParam)) 
            { 
                // ...
            } 
            else 
            { 
                // ...
            } 
            break; 
        // Process other messages. 
    } 
} 
 
// Unicode Window Procedure 
 
LONG UniWndProc(HWND hwnd, UINT message, 
    WPARAM wParam, LPARAM lParam) 
{ 
 
    // Dispatch the messages that can be received. 
 
    switch (message) 
    { 
        case WM_CHAR: 
 
            // wParam - the value of the key 
            // lParam - (not used in this example) 
 
            if (lstrcmpW(L"Q", (LPCWSTR) wParam)) 
            { 
                // ...
            } 
            else 
            { 
                // ...
            } 
            break; 
        // Process other messages. 
    } 
} 
 </code></pre>
<p>
All text in messages received by AnsiWndProc will be composed of ANSI characters, and all text in messages received by UniWndProc will be composed of Unicode characters. </p>
<p>&nbsp;</p></body>
</HTML>

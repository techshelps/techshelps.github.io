<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynamic-Link Library Entry-Point Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_dynamic_link_library_entry_point_function"></a>Dynamic-Link Library Entry-Point Function</h2>
<p>
Every DLL must have an entry point, just as an application does. The system calls the entry-point function whenever processes and threads load or unload the DLL. If you are linking your DLL with a library, such as the C run-time library, it may provide an entry-point function for you, and allow you to provide a separate initialization function. Check the documentation for your runtime library for more information.</p>
<p>
If you are providing your own entry-point, see the <a href="dll_8asu.htm"><b>DllMain</b></a> function. The name <b>DllMain</b> is a placeholder for a user-defined function. Earlier versions of the SDK documentation used <b>DllEntryPoint</b> as the entry-point function name. You must specify the actual name you use when you build your DLL. For more information, see the documentation included with your development tools. </p>
<h4>Calling the Entry-Point Function</h4>
<p>
The system calls the entry-point function whenever any one of the following events occurs: 
<ul>
<li>
A process loads the DLL. For processes using load-time dynamic linking, the DLL is loaded during process initialization. For processes using run-time linking, the DLL is loaded before <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> or <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a> returns. </li>
<li>
A process unloads the DLL. The DLL is unloaded when the process terminates or calls the <a href="dll_3cs9.htm"><b>FreeLibrary</b></a> function and the reference count becomes zero. If the process terminates as a result of the <a href="prothred_1bg3.htm"><b>TerminateProcess</b></a> or <a href="prothred_7h2c.htm"><b>TerminateThread</b></a> function, the system does not call the DLL entry-point function. </li>
<li>
A new thread is created in a process that has loaded the DLL. You can use the <a href="dll_6v77.htm"><b>DisableThreadLibraryCalls</b></a> function to disable notification when threads are created.</li>
<li>
A thread of a process that has loaded the DLL terminates normally, not using <b>TerminateThread</b> or <b>TerminateProcess</b>. When a process unloads the DLL, the entry-point function is called only once for the entire process, rather than once for each existing thread of the process. You can use <b>DisableThreadLibraryCalls </b>to disable notification when threads are terminated.</li>
</ul>
<p>
Only one thread at a time can call the entry-point function.</p>
<p>
The system calls the entry-point function in the context of the process or thread that caused the function to be called. This allows a DLL to use its entry-point function for allocating memory in the virtual address space of the calling process or to open handles accessible to the process. The entry-point function can also allocate memory that is private to a new thread by using thread local storage (TLS). For more information about thread local storage, see <a href="prothred_25r9.htm">Thread Local Storage</a>.</p>
<h4>Entry-Point Function Definition</h4>
<p>
The DLL entry-point function must be declared with the standard-call calling convention. </p>
<p class=indent1>
<b>Windows NT:</b> If the DLL entry point is not declared correctly, the DLL is not loaded, and the system displays a message indicating that the DLL entry point must be declared with WINAPI.</p>
<p class=indent1>
<b>Windows 95:</b> If the DLL entry point is not declared correctly, the DLL is not loaded and the system displays a message titled "Error starting program," which instructs the user to check the file to determine the problem.</p>
<p>
In the body of the function, you may handle any combination of the following scenarios in which the DLL entry point has been called:
<ul>
<li>
A process loads the DLL (DLL_PROCESS_ATTACH). </li>
<li>
The current process creates a new thread (DLL_THREAD_ATTACH). </li>
<li>
A thread exits normally (DLL_THREAD_DETACH). </li>
<li>
A process unloads the DLL (DLL_PROCESS_DETACH).</li>
</ul>
<p>
Your function should perform only simple initialization tasks, such as setting up thread local storage (TLS), creating synchronization objects, and opening files. It must not call the <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> function, because this may create dependency loops in the DLL load order. This can result in a DLL being used before the system has executed its initialization code. Similarly, you must not call the <a href="dll_3cs9.htm"><b>FreeLibrary</b></a> function in the entry-point function, because this can result in a DLL being used after the system has executed its termination code. </p>
<p>
Calling Win32 functions other than TLS, synchronization, and file functions may also result in problems that are difficult to diagnose. For example, calling User, Shell, and COM functions can cause access violation errors, because some functions in their DLLs call <b>LoadLibrary</b> to load other system components. </p>
<p>
The following example demonstrates how to structure the DLL entry-point function.</p>
<pre><code>BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpReserved )  // reserved
{
    // Perform actions based on the reason for calling.
    switch( fdwReason ) 
    { 
        case DLL<u>_</u>PROCESS<u>_</u>ATTACH:
         // Initialize once for each new process.
         // Return FALSE to fail DLL load.
            break;

        case DLL<u>_</u>THREAD<u>_</u>ATTACH:
         // Do thread-specific initialization.
            break;

        case DLL<u>_</u>THREAD<u>_</u>DETACH:
         // Do thread-specific cleanup.
            break;

        case DLL<u>_</u>PROCESS<u>_</u>DETACH:
         // Perform any necessary cleanup.
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}
 </code></pre>
<h4>Entry-Point Function Return Value</h4>
<p>
When a DLL entry-point function is called because a process is loading, the function returns TRUE to indicate success. For processes using load-time linking, a return value of FALSE causes the process initialization to fail and the process terminates. For processes using run-time linking, a return value of FALSE causes the <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> or <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a> function to return NULL, indicating failure. The return value of the entry-point function is disregarded when the function is called for any other reason. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RegEnumValue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_regenumvalue"></a>RegEnumValue</h1>
<p>
The <b>RegEnumValue</b> function enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called. </p>
<pre><code><b>LONG RegEnumValue(
  HKEY</b><i> hKey</i><b>,              </b>// handle to key to query
<b>  DWORD</b><i> dwIndex</i><b>,          </b>// index of value to query
<b>  LPTSTR</b><i> lpValueName</i><b>,     </b>// address of buffer for value string
<b>  LPDWORD</b><i> lpcbValueName</i><b>,  </b>// address for size of value buffer
<b>  LPDWORD</b><i> lpReserved</i><b>,     </b>// reserved
<b>  LPDWORD</b><i> lpType</i><b>,         </b>// address of buffer for type code
<b>  LPBYTE</b><i> lpData</i><b>,          </b>// address of buffer for value data
<b>  LPDWORD</b><i> lpcbData</i>        // address for size of data buffer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hKey</i></dt>
<dd>
Handle to a currently open key or one of the following predefined reserved handle values: 
<p>
<b>HKEY_CLASSES_ROOT</b><br>
<b>HKEY_CURRENT_CONFIG</b><br>
<b>HKEY_CURRENT_USER</b><br>
<b>HKEY_LOCAL_MACHINE</b><br>
<b>HKEY_USERS<br>
Windows NT:</b> <b>HKEY_PERFORMANCE_DATA</b> <br>
<b>Windows 95 and Windows 98:</b> <b>HKEY_DYN_DATA</b> 

<p>
The enumerated values are associated with the key identified by <i>hKey</i>. 
</dd>
<dt>
<i>dwIndex</i></dt>
<dd>
Specifies the index of the value to retrieve. This parameter should be zero for the first call to the <b>RegEnumValue</b> function and then be incremented for subsequent calls. 
<p>
Because values are not ordered, any new value will have an arbitrary index. This means that the function may return values in any order. 
</dd>
<dt>
<i>lpValueName</i></dt>
<dd>
Pointer to a buffer that receives the name of the value, including the terminating null character. </dd>
<dt>
<i>lpcbValueName</i></dt>
<dd>
Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueName</i> parameter. This size should include the terminating null character. When the function returns, the variable pointed to by <i>lpcbValueName</i> contains the number of characters stored in the buffer. The count returned does not include the terminating null character. </dd>
<dt>
<i>lpReserved</i></dt>
<dd>
Reserved; must be NULL. </dd>
<dt>
<i>lpType</i></dt>
<dd>
Pointer to a variable that receives the type code for the value entry. The type code can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Meaning</th>
</tr>
<tr valign=top>
<td width=49%>REG_BINARY</td>
<td width=51%>Binary data in any form.</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD</td>
<td width=51%>A 32-bit number.</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD_LITTLE_ENDIAN</td>
<td width=51%>A 32-bit number in little-endian format. This is equivalent to REG_DWORD.<p>
In little-endian format, a multi-byte value is stored in memory from the lowest byte (the "little end") to the highest byte. For example, the value 0x12345678 is stored as (0x78 0x56 0x34 0x12) in little-endian format.</p>
<p>
Windows NT, Windows 95, and Windows 98 are designed to run on little-endian computer architectures. A user may connect to computers that have big-endian architectures, such as some UNIX systems. </p>
</td>
</tr>
<tr valign=top>
<td width=49%>REG_DWORD_BIG_ENDIAN</td>
<td width=51%>A 32-bit number in big-endian format. <p>
In big-endian format, a multi-byte value is stored in memory from the highest byte (the "big end") to the lowest byte. For example, the value 0x12345678 is stored as (0x12 0x34 0x56 0x78) in big-endian format.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>REG_EXPAND_SZ</td>
<td width=51%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions. To expand the environment variable references, use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_expandenvironmentstrings">
</object><a href=JavaScript:alink_1.Click()><b>ExpandEnvironmentStrings</b></a> function.</td>
</tr>
<tr valign=top>
<td width=49%>REG_LINK</td>
<td width=51%>A Unicode symbolic link.</td>
</tr>
<tr valign=top>
<td width=49%>REG_MULTI_SZ</td>
<td width=51%>An array of null-terminated strings, terminated by two null characters.</td>
</tr>
<tr valign=top>
<td width=49%>REG_NONE</td>
<td width=51%>No defined value type.</td>
</tr>
<tr valign=top>
<td width=49%>REG_RESOURCE_LIST</td>
<td width=51%>A device-driver resource list.</td>
</tr>
<tr valign=top>
<td width=49%>REG_SZ</td>
<td width=51%>A null-terminated string. It will be a Unicode or ANSI string, depending on whether you use the Unicode or ANSI functions.</td>
</tr>
</table><br>


<p>
The <i>lpType</i> parameter can be NULL if the type code is not required. 
</dd>
<dt>
<i>lpData</i></dt>
<dd>
Pointer to a buffer that receives the data for the value entry. This parameter can be NULL if the data is not required. </dd>
<dt>
<i>lpcbData</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>lpData</i> parameter. When the function returns, the variable pointed to by the <i>lpcbData</i> parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>lpData</i> is NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is ERROR_SUCCESS.</p>
<p>
If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <a href="strings_0sdh.htm"><b>FormatMessage</b></a> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</p>
<h4>Remarks</h4>
<p>
To enumerate values, an application should initially call the <b>RegEnumValue</b> function with the <i>dwIndex</i> parameter set to zero. The application should then increment <i>dwIndex</i> and call the <b>RegEnumValue</b> function until there are no more values (until the function returns ERROR_NO_MORE_ITEMS). </p>
<p>
The application can also set <i>dwIndex</i> to the index of the last value on the first call to the function and decrement the index until the value with index 0 is enumerated. To retrieve the index of the last value, use the <a href="regapi_5xkp.htm"><b>RegQueryInfoKey</b></a> function. </p>
<p>
While using <b>RegEnumValue</b>, an application should not call any registration functions that might change the key being queried. </p>
<p>
The key identified by the <i>hKey</i> parameter must have been opened with KEY_QUERY_VALUE access. To open the key, use the <b>RegCreateKeyEx</b> or <b>RegOpenKeyEx</b> function. </p>
<p>
To determine the maximum size of the name and data buffers, use the <b>RegQueryInfoKey</b> function. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winreg.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="regapi_9bzt.htm">Registry Overview</a>, <a href="regapi_59mb.htm">Registry Functions</a>, <a href="regapi_1woo.htm"><b>RegCreateKeyEx</b></a>, <a href="regapi_1juh.htm"><b>RegEnumKey</b></a>, <a href="regapi_4854.htm"><b>RegEnumKeyEx</b></a>, <a href="regapi_7yns.htm"><b>RegOpenKeyEx</b></a>, <a href="regapi_5xkp.htm"><b>RegQueryInfoKey</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

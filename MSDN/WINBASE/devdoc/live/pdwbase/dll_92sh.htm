<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynamic-Link Library Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_dynamic_link_library_data"></a>Dynamic-Link Library Data</h2>
<p>
Win32-based DLLs can contain global data or local data.</p>
<h4>Variable Scope</h4>
<p>
The default scope of DLL variables is the same as that of variables declared in the application. Global variables in a DLL source code file are global to each process using the DLL. Static variables have scope limited to the block in which they are declared. As a result, each process has its own instance of the DLL global and static variables by default. </p>
<p>
Your development tools may allow you to override the default scope of global and static variables. For more information, see the documentation included with your development tools. </p>
<h4>Dynamic Memory Allocation</h4>
<p>
When a DLL allocates memory using any of the memory allocation functions (<a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_2fxf.htm"><b>LocalAlloc</b></a>, <a href="memman_6krn.htm"><b>HeapAlloc</b></a>, and <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>), the memory is allocated in the virtual address space of the calling process and is accessible only to the threads of that process. </p>
<p>
A DLL can use file mapping to allocate memory that can be shared among processes. For a general discussion of how to use file mapping to create named shared memory, see <a href="fmap3_61d3.htm">File Mapping</a>. For an example that uses the <a href="dll_8asu.htm"><b>DllMain</b></a> function to set up shared memory using file mapping, see <a href="dll_9khl.htm">Using Shared Memory in a Dynamic-Link Library</a>. </p>
<h4>Thread Local Storage </h4>
<p>
The thread local storage (TLS) functions enable a DLL to allocate an index for storing and retrieving a different value for each thread of a multithreaded process. For example, a spreadsheet application can create a new instance of the same thread each time the user opens a new spreadsheet. A DLL providing the functions for various spreadsheet operations can use TLS to save information about the current state of each spreadsheet (row, column, and so on). For a general discussion of thread local storage, see <a href="prothred_25r9.htm">Thread Local Storage</a>. For an example that uses the <b>DllMain</b> function to set up thread local storage, see <a href="dll_2pdl.htm">Using Thread Local Storage in a Dynamic-Link Library</a>. </p>
<p>
<b>Warning</b>&nbsp;&nbsp;The Visual C++ compiler supports a syntax that enables you to declare thread-local variables: <b>_declspec(thread)</b>. If you use this syntax in a DLL, you will not be able to load the DLL explicitly using <b>LoadLibrary</b> or <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a>. If your DLL will be loaded explicitly, you must use the thread local storage functions instead of <b>_declspec(thread)</b>. </p>
<p>&nbsp;</p></body>
</HTML>

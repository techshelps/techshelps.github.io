<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetExceptionCode</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getexceptioncode"></a>GetExceptionCode</h1>
<p>
The <b>GetExceptionCode</b> function retrieves a code that identifies the type of exception that occurred. The function can be called only from within the filter expression or exception-handler block of a <b>try</b>-<b>except</b> exception handler. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The Microsoft C/C++ Optimizing Compiler interprets this function as a keyword, and its use outside the appropriate exception-handling syntax generates a compiler error. </p>
<pre><b><code>DWORD GetExceptionCode(VOID)
 </code></b></pre>
<h4>Parameters</h4>
<p>
This function has no parameters. </p>
<h4>Return Values</h4>
<p>
The return value identifies the type of exception. Following are the exception codes likely to occur due to common programming errors: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td class=indent1 width=12%><b>Value</b></td>
<th align=left width=88%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_ACCESS_VIOLATION</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to read from or write to a virtual address for which it does not have the appropriate access.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_BREAKPOINT</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>A breakpoint was encountered.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_DATATYPE_MISALIGNMENT</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to read or write data that is misaligned on hardware that does not provide alignment. For example, 16-bit values must be aligned on 2-byte boundaries, 32-bit values on 4-byte boundaries, and so on.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_SINGLE_STEP</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>A trace trap or other single-instruction mechanism signaled that one instruction has been executed.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to access an array element that is out of bounds, and the underlying hardware supports bounds checking.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_DENORMAL_OPERAND</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>One of the operands in a floating-point operation is denormal. A denormal value is one that is too small to represent as a standard floating-point value.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_DIVIDE_BY_ZERO</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to divide a floating-point value by a floating-point divisor of zero.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_INEXACT_RESULT</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The result of a floating-point operation cannot be represented exactly as a decimal fraction.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_INVALID_OPERATION</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>This exception represents any floating-point exception not included in this list.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_OVERFLOW</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The exponent of a floating-point operation is greater than the magnitude allowed by the corresponding type.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_STACK_CHECK</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The stack overflowed or underflowed as the result of a floating-point operation.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_FLT_UNDERFLOW</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The exponent of a floating-point operation is less than the magnitude allowed by the corresponding type.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_INT_DIVIDE_BY_ZERO</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to divide an integer value by an integer divisor of zero.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_INT_OVERFLOW</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The result of an integer operation caused a carry out of the most significant bit of the result.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_PRIV_INSTRUCTION</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to execute an instruction whose operation is not allowed in the current machine mode.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>EXCEPTION_NONCONTINUABLE_EXCEPTION</td>
</tr>
<tr valign=top>
<td width=12%></td>
<td width=88%>The thread attempted to continue execution after a noncontinuable exception occurred.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>GetExceptionCode</b> function can be called only from within the filter expression or exception-handler block of a <b>try</b>-<b>except</b> statement. The filter expression is evaluated if an exception occurs during execution of the <b>try</b> block, and it determines whether the <b>except</b> block is executed. </p>
<p>
The filter expression can invoke a filter function. The filter function cannot call <b>GetExceptionCode</b>. However, the return value of <b>GetExceptionCode</b> can be passed as a parameter to a filter function. The return value of the <a href="structex_50oe.htm"><b>GetExceptionInformation</b></a> function can also be passed as a parameter to a filter function. <b>GetExceptionInformation</b> returns a pointer to a structure that includes the exception-code information. </p>
<p>
The following example shows the structure of a <b>try</b>-<b>except</b> statement. </p>
<pre><code>try 
{ 
 
    // try block 
 
} 
except ( FilterFunction(GetExceptionCode() ) 
{ 
 
    // exception handler block 
 
} 
 </code></pre>
<p>
In the case of nested <b>try</b>-<b>except</b> statements, each statement's filter expression is evaluated until one is evaluated as EXCEPTION_EXECUTE_HANDLER or EXCEPTION_CONTINUE_EXECUTION. Each filter expression can invoke <b>GetExceptionCode</b> to get the exception code. </p>
<p>
The exception code returned is the code generated by a hardware exception, or the code specified in the <b>RaiseException</b> function for a software-generated exception. </p>
<p>
When handling the breakpoint exception, it is important to increment the instruction pointer in the context record to continue from this exception. </p>
<p>
<b>Windows CE:</b> The Excpt.h file has to be explicitly included in order to use <b>GetExceptionCode</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.</p>
<h4>See Also</h4>
<p>
<a href="structex_03xj.htm">Structured Exception Handling Overview</a>, <a href="structex_95kj.htm">Structured Exception Handling Functions</a>, <a href="structex_50oe.htm"><b>GetExceptionInformation</b></a>, <a href="structex_2ylq.htm"><b>RaiseException</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

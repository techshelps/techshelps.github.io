<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualProtectVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualprotectvlm"></a>VirtualProtectVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>VirtualProtectVlm</b> function changes the access type for a region of memory allocated using the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. </p>
<pre><code><b>BOOL VirtualProtectVlm(
  HANDLE</b> <i>hProcess</i><b>,</b>     // process within which to protect memory
<b>  PVOID64</b><i> lpAddress</i>,   // address of region of committed pages
<b>  DWORDLONG</b><i> ullSize</i>,   // size of the region
<b>  DWORD</b><i> flNewProtect</i>,  // desired access protection
<b>  PDWORD</b><i> lpflOldProtect</i> 
                       // address of variable to get old protection
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process whose access attributes are to be changed. The calling process must have had the PROCESS_VM_OPERATION flag set on a preceding call to the <a href="prothred_478z.htm"><b>OpenProcess</b></a> function, indicating virtual memory access to the target process, or <b>VirtualProtectVlm</b> fails. </dd>
<dt>
<i>lpAddress</i></dt>
<dd>
Pointer to the base address of the region of pages whose access attributes are to be changed. 
<p>
Only full 64-bit addresses are supported here — 32-bit sign-extended addresses are not supported. In other words, the 4 GB range surrounding address zero cannot be modified using <b>VirtualProtectVlm</b>.

<p>
All pages in the specified region must have been allocated in a single call to the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function. The pages cannot span adjacent regions that were allocated by separate calls to <b>VirtualAllocVlm</b>.
</dd>
<dt>
<i>ullSize</i></dt>
<dd>
Size, in bytes, of the region whose access attributes are to be changed. The region of affected pages includes all pages containing one or more bytes in the range from the value of <i>lpAddress</i> to the value of <i>lpAddress</i> plus the value of the <i>ullSize</i> parameter. This functionality means that changing the attributes of a 2-byte range straddling a page boundary causes the access attributes of both pages to be changed. </dd>
<dt>
<i>flNewProtect</i></dt>
<dd>
Flag that specifies the new access type. You can specify one of the following flags. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>PAGE_NOACCESS</td>
<td width=67%>Disables all access to the committed region of pages. An attempt to read from, or write to, or execute code in the committed region results in an access violation exception.</td>
</tr>
<tr valign=top>
<td width=33%>PAGE_READONLY</td>
<td width=67%>Enables read access to the committed region of pages. An attempt to write to the committed region results in an access violation. If the operating system differentiates between read-only access and execute access, an attempt to execute code in the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=33%>PAGE_READWRITE</td>
<td width=67%>Enables both read and write access to the committed region of pages.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpflOldProtect</i></dt>
<dd>
Pointer to a variable that <b>VirtualProtectVlm</b> sets to the previous access value of the first page in the specified region of pages. If the <i>lpflOldProtect </i>parameter is NULL or does not point to a valid variable, <b>VirtualProtectVlm</b> fails. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
You can set an access value for pages that have been committed only. If any page in the specified region is not committed, <b>VirtualProtectVlm</b> fails and returns without modifying the access state of any pages in the specified region. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="memman_30l0.htm"><b>VirtualProtect</b></a>, <a href="memman_4iew.htm"><b>VirtualProtectEx</b></a>  </p>
<p>&nbsp;</p></body>
</HTML>

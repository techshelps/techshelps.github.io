<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Thread Local Storage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_thread_local_storage"></a>Thread Local Storage</h3>
<p>
All threads of a process share the virtual address space and the global variables of that process. The local variables of a thread function are local to each thread that runs the function. However, the static or global variables used by that function have the same value for all threads. With thread local storage (TLS), you can create a unique copy of a variable for each thread. Using TLS, one thread allocates an index that can be used by any thread of the process to retrieve its unique copy. </p>
<p>
Use the following steps to implement TLS: 
<ol>
<li>
Use the <a href="prothred_986b.htm"><b>TlsAlloc</b></a> function during process or dynamic-link library (DLL) initialization to allocate a TLS index. </li>
<li>
For each thread that needs to use the TLS index, allocate dynamic storage, then use the <a href="prothred_8jl1.htm"><b>TlsSetValue</b></a> function to associate the index with a pointer to the dynamic storage. </li>
<li>
When you need a thread to access its storage, specify the TLS index in a call to the <a href="prothred_6azp.htm"><b>TlsGetValue</b></a> function to retrieve the pointer. </li>
<li>
When each thread no longer needs the dynamic storage that it has associated with a TLS index, it must free the index. When all threads have finished using a TLS index, use the <a href="prothred_7ns5.htm"><b>TlsFree</b></a> function to free the index. </li>
</ol>
<p>
The constant TLS_MINIMUM_AVAILABLE defines the minimum number of TLS indexes available in each process. This minimum is guaranteed to be at least 64 for all systems. </p>
<p>
It is ideal to use TLS in a DLL. Perform the initial TLS operations in the <a href="dll_8asu.htm"><b>DllMain</b></a> function in the context of the process or thread attaching to the DLL. When a new process attaches to the DLL, call <a href="prothred_986b.htm"><b>TlsAlloc</b></a> in the entry-point function to allocate a TLS index for that process. Then store the TLS index in a global variable that is private to each attached process. When a new thread attaches to the DLL, allocate dynamic memory for that thread in the entry-point function, and use <a href="prothred_8jl1.htm"><b>TlsSetValue</b></a> with the TLS index from <b>TlsAlloc</b> to save private data to the index. Then you can use the TLS index in a call to <a href="prothred_6azp.htm"><b>TlsGetValue</b></a> to access the private data for the calling thread from within any function in the DLL. When a process detaches from the DLL, call <a href="prothred_7ns5.htm"><b>TlsFree</b></a>. </p>
<p>
For an example illustrating the use of thread local storage, see <a href="prothred_9ixx.htm">Using Thread Local Storage</a>. </p>
<p>&nbsp;</p></body>
</HTML>

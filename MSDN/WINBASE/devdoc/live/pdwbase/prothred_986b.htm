<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TlsAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_tlsalloc"></a>TlsAlloc</h1>
<p>
The <b>TlsAlloc</b> function allocates a thread local storage (TLS) index. Any thread of the process can subsequently use this index to store and retrieve values that are local to the thread. </p>
<pre><b><code>DWORD TlsAlloc(VOID)
 </code></b></pre>
<h4>Parameters</h4>
<p>
This function has no parameters. </p>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a TLS index.</p>
<p>
If the function fails, the return value is 0xFFFFFFFF. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The threads of the process can use the TLS index in subsequent calls to the <a href="prothred_7ns5.htm"><b>TlsFree</b></a>, <a href="prothred_8jl1.htm"><b>TlsSetValue</b></a>, or <a href="prothred_6azp.htm"><b>TlsGetValue</b></a> functions. </p>
<p>
TLS indexes are typically allocated during process or dynamic-link library (DLL) initialization. Once allocated, each thread of the process can use a TLS index to access its own TLS storage slot. To store a value in its slot, a thread specifies the index in a call to <b>TlsSetValue</b>. The thread specifies the same index in a subsequent call to <b>TlsGetValue</b>, to retrieve the stored value. </p>
<p>
The constant TLS_MINIMUM_AVAILABLE defines the minimum number of TLS indexes available in each process. This minimum is guaranteed to be at least 64 for all systems. </p>
<p>
TLS indexes are not valid across process boundaries. A DLL cannot assume that an index assigned in one process is valid in another process. </p>
<p>
A DLL might use <b>TlsAlloc</b>, <a href="prothred_8jl1.htm"><b>TlsSetValue</b></a>, <a href="prothred_6azp.htm"><b>TlsGetValue</b></a>, and <a href="prothred_7ns5.htm"><b>TlsFree</b></a> as follows: 
<ol>
<li>
When a DLL attaches to a process, the DLL uses <b>TlsAlloc</b> to allocate a TLS index. The DLL then allocates some dynamic storage and uses the TLS index in a call to <b>TlsSetValue</b> to store the address in the TLS slot. This concludes the per-thread initialization for the initial thread of the process. The TLS index is stored in a global or static variable of the DLL. </li>
<li>
Each time the DLL attaches to a new thread of the process, the DLL allocates some dynamic storage for the new thread and uses the TLS index in a call to <b>TlsSetValue</b> to store the address in the TLS slot. This concludes the per-thread initialization for the new thread. </li>
<li>
Each time an initialized thread makes a DLL call requiring the data in its dynamic storage, the DLL uses the TLS index in a call to <b>TlsGetValue</b> to retrieve the address of the dynamic storage for that thread. </li>
</ol>
<p>
For additional information on thread local storage, see <a href="prothred_25r9.htm">Thread Local Storage</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="prothred_7ns5.htm"><b>TlsFree</b></a>, <a href="prothred_6azp.htm"><b>TlsGetValue</b></a>, <a href="prothred_8jl1.htm"><b>TlsSetValue</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

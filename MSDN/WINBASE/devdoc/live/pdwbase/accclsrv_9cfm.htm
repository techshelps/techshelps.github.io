<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LogonUser</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_logonuser"></a>LogonUser</h1>
<p>
The <b>LogonUser</b> function attempts to log a user on to the local computer, that is, to the computer from which <b>LogonUser</b> was called. You cannot use <b>LogonUser</b> to log on to a remote computer. You specify the user with a user name and domain, and authenticate the user with a clear-text password. If the function succeeds, you receive a handle to a token that represents the logged-on user. You can then use this token handle to impersonate the specified user, or in most cases, to create a process running in the context of the specified user. </p>
<pre><code><b>BOOL LogonUser(
  LPTSTR</b><i> lpszUsername</i><b>,    </b>// string that specifies the user name
<b>  LPTSTR</b><i> lpszDomain</i><b>,      </b>// string that specifies the domain or 
                          // server
<b>  LPTSTR</b><i> lpszPassword</i><b>,    </b>// string that specifies the password
<b>  DWORD</b><i> dwLogonType</i><b>,      </b>// specifies the type of logon operation
<b>  DWORD</b><i> dwLogonProvider</i><b>,  </b>// specifies the logon provider
<b>  PHANDLE</b><i> phToken         </i>// pointer to variable to receive token 
                          // handle
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpszUsername</i></dt>
<dd>
Pointer to a null-terminated string that specifies the user name. This is the name of the user account to log on to.</dd>
<dt>
<i>lpszDomain</i></dt>
<dd>
Pointer to a null-terminated string that specifies the name of the domain or server whose account database contains the <i>lpszUserName</i> account. <b>LogonUser</b> asks the domain controller or server to search for and validate the account. If this parameter is ".", <b>LogonUser</b> validates the account using only the local account database. If this parameter is NULL, <b>LogonUser</b> first searches the local account database and then asks trusted domains to search their account databases until it finds the account or the search is exhausted. </dd>
<dt>
<i>lpszPassword</i></dt>
<dd>
Pointer to a null-terminated string that specifies the clear-text password for the user account specified by <i>lpszUsername</i>. </dd>
<dt>
<i>dwLogonType</i></dt>
<dd>
Specifies the type of logon operation to perform. The following logon types are defined:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=53%>Value</th>
<th align=left width=47%>Meaning</th>
</tr>
<tr valign=top>
<td width=53%>LOGON32_LOGON_BATCH</td>
<td width=47%>This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention; or for higher performance servers that process many clear-text authentication attempts at a time, such as mail or web servers. <b>LogonUser</b> does not cache credentials for this logon type.</td>
</tr>
<tr valign=top>
<td width=53%>LOGON32_LOGON_INTERACTIVE</td>
<td width=47%>This logon type is intended for users who will be interactively using the machine, such as a user being logged on by a terminal server, remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operation, and is therefore inappropriate for some client/server applications, such as a mail server.</td>
</tr>
<tr valign=top>
<td width=53%>LOGON32_LOGON_SERVICE</td>
<td width=47%>Indicates a service-type logon. The account provided must have the service privilege enabled.</td>
</tr>
<tr valign=top>
<td width=53%>LOGON32_LOGON_NETWORK</td>
<td width=47%>This logon type is intended for high performance servers to authenticate clear text passwords. <b>LogonUser</b> does not cache credentials for this logon type. This is the fastest logon path, but there are two limitations. <p>
First, the function returns an impersonation token, not a primary token. You cannot use this token directly in the <a href="prothred_6pf6.htm"><b>CreateProcessAsUser</b></a> function. However, you can call the <a href="accctrl_9vso.htm"><b>DuplicateTokenEx</b></a> function to convert the token to a primary token, and then use it in <b>CreateProcessAsUser</b>. </p>
<p>
Second, if you convert the token to a primary token and use it in <b>CreateProcessAsUser</b> to start a process, the new process will not be able to access other network resources, such as remote servers or printers, through the redirector.</p>
</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwLogonProvider</i></dt>
<dd>
Specifies the logon provider. The following logon providers are defined:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=57%>Value</th>
<th align=left width=43%>Meaning</th>
</tr>
<tr valign=top>
<td width=57%>LOGON32_PROVIDER_DEFAULT</td>
<td width=43%>Use the standard logon provider for the system. This is the recommended value for the <i>dwLogonProvider</i> parameter. It provides maximum compatibility with current and future releases of Windows NT. </td>
</tr>
<tr valign=top>
<td width=57%>LOGON32_PROVIDER_WINNT40</td>
<td width=43%>Use the Windows NT 4.0 logon provider</td>
</tr>
<tr valign=top>
<td width=57%>LOGON32_PROVIDER_WINNT35</td>
<td width=43%>Use the Windows NT 3.5 logon provider. </td>
</tr>
</table><br>

</dd>
<dt>
<i>phToken</i></dt>
<dd>
Pointer to a <b>HANDLE</b> variable that receives a handle to a token that represents the specified user. 
<p>
You can use the returned handle in calls to the <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a> function. 

<p>
In most cases, the returned handle is a primary token that you can use in calls to the <a href="prothred_6pf6.htm"><b>CreateProcessAsUser</b></a> function. However, if you specify the LOGON32_LOGON_NETWORK flag, <b>LogonUser</b> returns an impersonation token that you cannot use in <b>CreateProcessAsUser</b> unless you call <b>DuplicateTokenEx</b> to convert it to a primary token. 

<p>
When you no longer need this handle, close it by calling the <a href="handobj_289x.htm"><b>CloseHandle</b></a> function.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The process that calls <b>LogonUser</b> must have the SE_TCB_NAME privilege. The privilege does not need to be enabled. The <b>LogonUser</b> function enables the privilege as necessary. If the calling process does not have this privilege, <b>LogonUser</b> fails and <b>GetLastError</b> returns ERROR_PRIVILEGE_NOT_HELD. </p>
<p>
In some cases, the process that calls <b>LogonUser</b> must also have the SE_CHANGE_NOTIFY_NAME privilege enabled; otherwise, <b>LogonUser</b> fails and <b>GetLastError</b> returns ERROR_ACCESS_DENIED. This privilege is not required for the local system account or accounts that are members of the administrators group. By default, SE_CHANGE_NOTIFY_NAME is enabled for all users, but some administrators may disable it for everyone. For more information about privileges, see <a href="accctrl_42pf.htm">Privileges</a>. </p>
<p>
A user is considered logged on as long as at least one token exists. If you call <b>CreateProcessAsUser</b> and then close the token, the system considers the user as still logged on until the process (and all child processes) have ended.</p>
<p>
If the <b>LogonUser</b> call is successful, the system notifies network providers that the logon occurred by calling the provider's NPLogonNotify entry-point.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.51 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="accclsrv_64vg.htm">Client/Server Access Control Overview</a>, <a href="accclsrv_0hv7.htm">Client/Server Access Control Functions</a>, <a href="prothred_6pf6.htm"><b>CreateProcessAsUser</b></a>, <a href="accclsrv_0jle.htm"><b>ImpersonateLoggedOnUser</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

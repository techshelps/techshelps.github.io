<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateWaitableTimer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createwaitabletimer"></a>CreateWaitableTimer</h1>
<p>
The <b>CreateWaitableTimer</b> function creates a "waitable" timer object.</p>
<pre><code><b>HANDLE CreateWaitableTimer(
  LPSECURITY_ATTRIBUTES</b><i> lpTimerAttributes</i><b>,</b>
<b>                      </b>// pointer to security attributes
<b>  BOOL</b><i> bManualReset</i><b>,  </b>// flag for manual reset state
<b>  LPCTSTR</b><i> lpTimerName </i>// pointer to timer object name
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpTimerAttributes</i></dt>
<dd>
Pointer to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure that specifies a security descriptor for the new timer object and determines whether child processes can inherit the returned handle. If <i>lpTimerAttributes</i> is NULL, the timer object gets a default security descriptor and the handle cannot be inherited.</dd>
<dt>
<i>bManualReset</i></dt>
<dd>
Specifies the timer type. If <i>bManualReset</i> is TRUE, the timer is a manual-reset notification timer. Otherwise, the timer is a synchronization timer.</dd>
<dt>
<i>lpTimerName</i></dt>
<dd>
Pointer to a null-terminated string specifying the name of the timer object. The name is limited to MAX_PATH characters and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive.
<p>
If the string specified in the <i>lpTimerName</i> parameter matches the name of an existing named timer object, the call returns successfully and the <a href="errors_3uwi.htm"><b>GetLastError</b></a> function returns ERROR_ALREADY_EXISTS.

<p>
If <i>lpTimerName</i> is NULL, the timer object is created without a name.

<p>
If <i>lpTimerName</i> matches the name of an existing event, semaphore, mutex, job, or file-mapping object, the function fails and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_INVALID_HANDLE. This occurs because these objects share the same name space.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the timer object. If the named timer object exists before the function call, the function returns a handle to the existing object and <a href="errors_3uwi.htm"><b>GetLastError</b></a> returns ERROR_ALREADY_EXISTS. </p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <b>GetLastError</b>.</p>
<h4>Remarks</h4>
<p>
The handle returned by <b>CreateWaitableTimer</b> is created with the TIMER_ALL_ACCESS access right. This handle can be used in any function that requires a handle to a timer object. </p>
<p>
Any thread of the calling process can specify the timer object handle in a call to one of the <a href="synchro_5vqr.htm">wait functions</a>. </p>
<p>
Multiple processes can have handles to the same timer object, enabling use of the object for interprocess synchronization. 
<ul>
<li>
A process created by the <a href="prothred_9dpv.htm"><b>CreateProcess</b></a> function can inherit a handle to a timer object if the <i>lpTimerAttributes</i> parameter of <b>CreateWaitableTimer</b> enables inheritance.</li>
<li>
A process can specify the timer object handle in a call to the <b>DuplicateHandle</b> function. The resulting handle can be used by another process.</li>
<li>
A process can specify the name of a timer object in a call to the <b>OpenWaitableTimer</b> or <b>CreateWaitableTimer</b> function.</li>
</ul>
<p>
Use the <b>CloseHandle</b> function to close the handle. The system closes the handle automatically when the process terminates. The timer object is destroyed when its last handle has been closed.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a>,<b> <a href="handobj_289x.htm">CloseHandle</a></b>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="handobj_2pyd.htm"><b>DuplicateHandle</b></a>, <a href="time_0fzm.htm"><b>FILETIME</b></a>, <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a>,<b> <a href="accctrl_8gs2.htm">SECURITY_ATTRIBUTES</a></b>, <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

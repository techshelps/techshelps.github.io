<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Console Input Buffer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_console_input_buffer"></a>Console Input Buffer</h3>
<p>
Each console has an input buffer that contains a queue of input event records. When a console's window has the keyboard focus, a console formats each input event (such as a single keystroke, a movement of the mouse, or a mouse-button click) as an input record that it places in the console's input buffer. </p>
<p>
Applications can access a console's input buffer indirectly by using the high-level console I/O functions, or directly by using the low-level console I/O functions. The high-level input functions filter and process the data in the input buffer, returning only a stream of input characters. The low-level input functions enable applications to read input records directly from a console's input buffer, or to place input records into the input buffer. </p>
<p>
An input record is a structure containing information about the type of event that occurred (keyboard, mouse, window resizing, focus, or menu event) as well as specific details about the event. The <b>EventType</b> member in an <a href="conchar_8p6a.htm"><b>INPUT_RECORD</b></a> structure indicates which type of event is contained in the record. </p>
<p>
Focus and menu events are placed in a console's input buffer for internal use by the system and should be ignored by applications. </p>
<h4>Keyboard Events</h4>
<p>
Keyboard events are generated when any key is pressed or released; this includes control keys. However, the alt key has special meaning to the system when pressed and released without being combined with another character, and it is not passed through to the application. Also, the ctrl+c key combination is not passed through if the input handle is in processed mode. </p>
<p>
If the input event is a keystroke, the <b>Event</b> member in <a href="conchar_8p6a.htm"><b>INPUT_RECORD</b></a> is a <a href="conchar_30j6.htm"><b>KEY_EVENT_RECORD</b></a> structure containing the following information: 
<ul>
<li>
A Boolean value indicating whether the key was pressed or released. </li>
<li>
A repeat count that can be greater than one when a key is held down. </li>
<li>
The virtual-key code, identifying the given key in a device-independent manner. </li>
<li>
The virtual-scan code, indicating the device-dependent value generated by the keyboard hardware. </li>
<li>
The translated Unicode™ or ANSI character. </li>
<li>
A flag variable indicating the state of the control keys (the alt, ctrl, shift, num lock, scroll lock, and caps lock keys) and indicating whether an enhanced key was pressed. Enhanced keys for the IBM® 101-key and 102-key keyboards are the ins, del, home, end, page up, page down, and arrow keys in the clusters to the left of the numeric keypad and the divide (/) and enter keys in the numeric keypad. </li>
</ul>
<h4>Mouse Events</h4>
<p>
Mouse events are generated whenever the user moves the mouse or presses or releases one of the mouse buttons. Mouse events are placed in the input buffer only if the following conditions are met: 
<ul>
<li>
The console input mode is set to ENABLE_MOUSE_INPUT (the default mode). </li>
<li>
The console window has the keyboard focus. </li>
<li>
The mouse pointer is within the borders of the console's window. </li>
</ul>
<p>
If the input event is a mouse event, the <b>Event</b> member in <a href="conchar_8p6a.htm"><b>INPUT_RECORD</b></a> is a <a href="conchar_84xe.htm"><b>MOUSE_EVENT_RECORD</b></a> structure containing the following information: 
<ul>
<li>
The coordinates of the mouse pointer in terms of the character-cell row and column in the screen buffer's coordinate system. </li>
<li>
A flag variable indicating the state of the mouse buttons. </li>
<li>
A flag variable indicating the state of the control keys (alt, ctrl, shift, num lock, scroll lock, and caps lock) and indicating whether an enhanced key was pressed. Enhanced keys for the IBM 101-key and 102-key keyboards are the ins, del, home, end, page up, page down, and arrow keys in the clusters to the left of the numeric keypad and the divide (/) and enter keys in the numeric keypad. </li>
<li>
A flag variable indicating whether the event was a normal button-press or button-release event, a mouse movement event, or the second click of a double-click event. </li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;The mouse position coordinates are in terms of the screen buffer, not the console window. The screen buffer may have been scrolled with respect to the window, so the upper left corner of the window is not necessarily the (0,0) coordinate of the screen buffer. To determine the coordinates of the mouse relative to the coordinate system of the window, subtract the window origin coordinates from the mouse position coordinates. Use the <a href="conchar_34dr.htm"><b>GetConsoleScreenBufferInfo</b></a> function to determine the window origin coordinates. </p>
<p>
The <b>dwButtonState</b> member of the <a href="conchar_84xe.htm"><b>MOUSE_EVENT_RECORD</b></a> structure has a bit corresponding to each mouse button. The bit is 1 if the button is down and 0 if the button is up. A button-release event is detected by a 0 value for the <b>dwEventFlags</b> member of <b>MOUSE_EVENT_RECORD</b> and a change in a button's bit from 1 to 0. The <a href="conchar_2agj.htm"><b>GetNumberOfConsoleMouseButtons</b></a> function retrieves the number of buttons on the mouse. </p>
<h4>Buffer-Resizing Events</h4>
<p>
A console window's menu enables the user to change the size of the active screen buffer; this change generates a buffer-resizing event. Buffer-resizing events are placed in the input buffer if the console's input mode is set to ENABLE_WINDOW_INPUT (that is, the default mode is disabled). </p>
<p>
If the input event is a buffer-resizing event, the <b>Event</b> member of <a href="conchar_8p6a.htm"><b>INPUT_RECORD</b></a> is a <a href="conchar_6u7m.htm"><b>WINDOW_BUFFER_SIZE_RECORD</b></a> structure containing the new size of the screen buffer, expressed in character-cell columns and rows. </p>
<p>
If the user reduces the size of the screen buffer, any data in the discarded portion of the buffer is lost. </p>
<p>
Changes to the screen buffer size as a result of application calls to the <a href="conchar_7sv9.htm"><b>SetConsoleScreenBufferSize</b></a> function are not generated as buffer-resizing events. </p>
<p>&nbsp;</p></body>
</HTML>

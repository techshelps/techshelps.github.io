<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueueUserAPC</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_queueuserapc"></a>QueueUserAPC</h1>
<p>
The <b>QueueUserAPC</b> function adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.</p>
<pre><code><b>DWORD QueueUserAPC(
  PAPCFUNC</b><i> pfnAPC</i><b>, </b>// pointer to APC function
<b>  HANDLE</b><i> hThread</i><b>,  </b>// handle to the thread
<b>  DWORD</b><i> dwData     </i>// argument for the APC function
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pfnAPC</i></dt>
<dd>
Pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation.</dd>
<dt>
<i>hThread</i></dt>
<dd>
Specifies the handle to the thread. The handle must have THREAD_SET_CONTEXT access.  </dd>
<dt>
<i>dwData</i></dt>
<dd>
Specifies a single DWORD argument that is passed to the APC function pointed to by the <i>pfnAPC</i> parameter.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. There are no error values defined for this function that can be retrieved by calling <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The APC support provided in the operating system allows an application to queue an APC object to a thread. Each thread has its own APC queue. The queuing of an APC is a request for the thread to call the APC function. The operating system issues a software interrupt to direct the thread to call the APC function.</p>
<p>
When a user-mode APC is queued, the thread is not directed to call the APC function unless it is in an alertable state. After the thread is in an alertable state, the thread handles all pending APCs in first in, first out (FIFO) order, and the wait operation returns WAIT_IO_COMPLETION. A thread enters an alertable state by using <a href="prothred_0o8o.htm"><b>SleepEx</b></a>, <a href="synchro_5h2s.htm"><b>SignalObjectAndWait</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, or <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a> to perform an alertable wait operation. Note that you can not use <b>WaitForSingleObjectEx</b> to wait on the handle to the object for which the APC is queued. Otherwise, when the asynchronous operation is completed, the handle is set to the signaled state and the thread is no longer in an alertable wait state, so the APC function will not be executed. However, the APC is still queued, so the APC function will be executed if you call another alertable wait function. </p>
<p>
If an application queues an APC before the thread begins running, the thread begins by calling the APC function. Once the thread calls an APC function, it calls the APC functions for all APCs in its APC queue.</p>
<p>
When the thread is terminated using the <a href="prothred_531g.htm"><b>ExitThread</b></a> or <a href="prothred_7h2c.htm"><b>TerminateThread</b></a> function, the APCs in its APC queue are lost. The APC functions are not called.</p>
<p>
Note that the <b>ReadFileEx</b>, <b>SetWaitableTimer</b>, and <b>WriteFileEx</b> functions are implemented using an APC as the completion notification callback mechanism.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="filesio_0660.htm"><b>ReadFileEx</b></a>, <a href="synchro_6f1u.htm"><b>SetWaitableTimer</b></a>, <a href="prothred_0o8o.htm"><b>SleepEx</b></a>, <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, <a href="filesio_8r08.htm"><b>WriteFileEx</b></a></p>
<p>&nbsp;</p></body>
</HTML>

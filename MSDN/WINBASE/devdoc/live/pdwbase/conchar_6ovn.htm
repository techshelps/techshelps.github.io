<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTRL+C and CTRL+BREAK Signals</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_ctrl_c_and_ctrl_break_signals"></a>CTRL+C and CTRL+BREAK Signals</h3>
<p>
The ctrl+c and ctrl+break key combinations receive special handling by console processes. By default, when a console window has the keyboard focus, ctrl+c or ctrl+break is treated as a signal (SIGINT or SIGBREAK) and not as keyboard input. By default, these signals are passed to all console processes that are attached to the console, causing the system to call the control handler function or functions associated with these processes. Detached processes (GUI processes or console processes started with the DETACHED_PROCESS or CREATE_NEW_CONSOLE flag) are not affected. </p>
<p>
ctrl+break is always treated as a signal, but an application can change the default ctrl+c behavior in two ways that prevent the handler functions from being called: 
<ul>
<li>
The <a href="conchar_25b9.htm"><b>SetConsoleMode</b></a> function can disable the ENABLE_PROCESSED_INPUT input mode for a console's input buffer, so ctrl+c is reported as keyboard input rather than as a signal. </li>
<li>
<b>Windows NT: </b>When <a href="conchar_599u.htm"><b>SetConsoleCtrlHandler</b></a> is called with NULL and TRUE values for its parameters, the calling process ignores ctrl+c signals. Normal ctrl+c processing is restored by calling <b>SetConsoleCtrlHandler</b> with NULL and FALSE values. This attribute of ignoring or not ignoring ctrl+c signals is inherited by child processes, but it can be enabled or disabled by any process without affecting existing processes. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

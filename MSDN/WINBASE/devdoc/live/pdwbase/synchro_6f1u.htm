<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetWaitableTimer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setwaitabletimer"></a>SetWaitableTimer</h1>
<p>
The <b>SetWaitableTimer</b> function activates the specified "waitable" timer. When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine.</p>
<pre><code><b>BOOL SetWaitableTimer(
  HANDLE</b><i> hTimer</i><b>,                          </b>// handle to a timer object
<b>  const LARGE_INTEGER</b><i> *pDueTime</i><b>,          </b>// when timer will become signaled
<b>  LONG</b><i> lPeriod</i><b>,                           </b>// periodic timer interval
<b>  PTIMERAPCROUTINE</b><i> pfnCompletionRoutine</i><b>,  </b>// completion routine
<b>  LPVOID</b><i> lpArgToCompletionRoutine</i><b>,        </b>// data for completion routine
<b>  BOOL</b><i> fResume                            </i>// flag for resume state
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hTimer</i></dt>
<dd>
Handle to the timer object. The <a href="synchro_51o2.htm"><b>CreateWaitableTimer</b></a> or <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a> function returns this handle.</dd>
<dt>
<i>pDueTime</i></dt>
<dd>
Specifies when the state of the timer is to be set to signaled, in 100 nanosecond intervals. Use the format described by the <a href="time_0fzm.htm"><b>FILETIME</b></a> structure. Positive values indicate absolute time. Be sure to use a UTC-based absolute time, as the system uses UTC-based time internally. Negative values indicate relative time. The actual timer accuracy depends on the capability of your hardware. For more information about UTC-based time, see <a href="time_5gh1.htm">System Time</a>. </dd>
<dt>
<i>lPeriod</i></dt>
<dd>
Specifies the period of the timer, in milliseconds. If <i>lPeriod</i> is zero, the timer is signaled once. If <i>lPeriod</i> is greater than zero, the timer is periodic. A periodic timer automatically reactivates each time the period elapses, until the timer is canceled using the <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a> function or reset using <b>SetWaitableTimer</b>. If <i>lPeriod</i> is less than zero, the function fails.</dd>
<dt>
<i>pfnCompletionRoutine</i></dt>
<dd>
Pointer to an optional completion routine. The completion routine is application-defined function of type PTIMERAPCROUTINE to be executed when the timer is signaled. For more information on the timer callback function, see <a href="synchro_9ktf.htm"><b>TimerAPCProc</b></a>. </dd>
<dt>
<i>lpArgToCompletionRoutine</i></dt>
<dd>
Pointer to the structure that is passed to the optional completion routine.</dd>
<dt>
<i>fResume</i></dt>
<dd>
Specifies whether to restore a system in suspended power conservation mode when the timer state is set to signaled. If <i>fResume</i> is TRUE on a platform that does not support a restore, the call will succeed, but <b>GetLastError</b> returns ERROR_NOT_SUPPORTED.
</dd>
</dl>
<h4>Return Value</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
Timers are initially inactive. To activate a timer, call <b>SetWaitableTimer</b>. If the timer is already active when you call <b>SetWaitableTimer</b>, the timer is stopped, then it is reactivated. Stopping the timer in this manner does not set the timer state to signaled, so threads blocked in a wait operation on the timer remain blocked.</p>
<p>
When the specified due time arrives, the timer becomes inactive and the APC is queued to the thread that set the timer. The state of the timer is set to signaled, the timer is reactivated using the specified period, and the thread that set the timer calls the completion routine when it enters an alertable wait state. For more information, see <a href="synchro_3dk3.htm"><b>QueueUserAPC</b></a>. </p>
<p>
If the thread that set the timer exits before the timer elapses, the timer is cancelled. If you call <b>SetWaitableTimer</b> on a timer that has been set by another thread and that thread is not in an alertable state, the completion routine is cancelled. </p>
<p>
When a manual-reset timer is set to the signaled state, it remains in this state until <b>SetWaitableTimer </b>is called to reset the timer. As a result, a periodic manual-reset timer is set to the signaled state when the initial due time arrives and remains signaled until it is reset. When a synchronization timer is set to the signaled state, it remains in this state until a thread completes a wait operation on the timer object.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a>,<b> <a href="synchro_51o2.htm">CreateWaitableTimer</a></b>,<b> <a href="time_0fzm.htm">FILETIME</a></b>,<b> <a href="synchro_0lv6.htm">OpenWaitableTimer</a></b>, <a href="synchro_9ktf.htm"><b>TimerAPCProc</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

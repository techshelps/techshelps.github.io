<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SymInitialize</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_syminitialize"></a>SymInitialize</h1>
<p>
The <b>SymInitialize</b> function initializes the symbol handler for a process.</p>
<pre><code><b>BOOL SymInitialize(
  IN HANDLE</b><i> hProcess</i><b>,     </b>
<b>  IN LPSTR</b><i> UserSearchPath</i><b>,  </b>
<b>  IN BOOL</b><i> fInvadeProcess  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to the process for which symbols are to be maintained. If the application is a debugger, use the process handle for the object being debugged, otherwise use the <a href="prothred_58kz.htm"><b>GetCurrentProcess</b></a> function to obtain the process handle. </dd>
<dt>
<i>UserSearchPath</i></dt>
<dd>
Pointer to a null-terminated string that specifies a path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If a value of NULL is used, then ImageHlp attempts to form a symbol path from the following sources:
<ul>
<li>
Current directory</li>
<li>
Environment variable _NT_SYMBOL_PATH</li>
<li>
Environment variable _NT_ALTERNATE_SYMBOL_PATH</li>
<li>
Environment variable SYSTEMROOT</li>
</ul>
</dd>
<dt>
<i>fInvadeProcess</i></dt>
<dd>
If this value is TRUE, ImageHlp enumerates the loaded modules for the process and effectively calls the <a href="imgehlp1_4hnp.htm"><b>SymLoadModule</b></a> function for each module. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE.</p>
<p>
If the function fails, the return value is FALSE. To retrieve extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The <b>SymInitialize</b> function is used to initialize the symbol handler for a process. In the context of the symbol handler, a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and other tools that need to load symbols for a process being debugged. </p>
<p>
The process handle passed to <b>SymInitialize</b> can be any unique value, except in the case when <i>fInvadeProcess</i> is TRUE. The value passed to <b>SymInitialize</b> <i>must</i> be the same value passed to all other ImageHlp symbol handler functions. It is the process handle that ImageHlp uses to identify the caller and locate the correct symbol information. You must call the <b>SymCleanup</b> function to deallocate all resources associated with the process for which symbols are loaded.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in imagehlp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use imagehlp.lib.</p>
<h4>See Also</h4>
<p>
<a href="imgehlp1_3hzz.htm">PE Image Helper (ImageHlp) Overview</a>, <a href="imgehlp1_9uia.htm">Symbol Handler</a>, <a href="imgehlp1_4hnp.htm"><b>SymLoadModule</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReadEventLog</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_readeventlog"></a>ReadEventLog</h1>
<p>
The <b>ReadEventLog</b> function reads a whole number of entries from the specified event log. The function can be used to read log entries in forward or reverse chronological order. </p>
<pre><code><b>BOOL ReadEventLog(
  HANDLE</b><i> hEventLog</i><b>,            </b>// handle to event log
<b>  DWORD</b><i> dwReadFlags</i><b>,           </b>// specifies how to read log
<b>  DWORD</b><i> dwRecordOffset</i><b>,        </b>// number of first record
<b>  LPVOID</b><i> lpBuffer</i><b>,             </b>// address of buffer for read data
<b>  DWORD</b><i> nNumberOfBytesToRead</i><b>,  </b>// number of bytes to read
<b>  DWORD</b><i> *pnBytesRead</i><b>,          </b>// number of bytes read
<b>  DWORD</b><i> *pnMinNumberOfBytesNeeded</i> 
                               // number of bytes required for next 
                               // record
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hEventLog</i></dt>
<dd>
Handle to the event log to read. This handle is returned by the <b>OpenEventLog</b> function. </dd>
<dt>
<i>dwReadFlags</i></dt>
<dd>
Specifies how the read operation is to proceed. This parameter can be any combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Value</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=51%>EVENTLOG_FORWARDS_READ</td>
<td width=49%>The log is read in forward chronological order.</td>
</tr>
<tr valign=top>
<td width=51%>EVENTLOG_BACKWARDS_READ</td>
<td width=49%>The log is read in reverse chronological order.</td>
</tr>
<tr valign=top>
<td width=51%>EVENTLOG_SEEK_READ</td>
<td width=49%>The read operation proceeds from the record specified by the <i>dwRecordOffset</i> parameter. If this flag is used, <i>dwReadFlags</i> must also specify EVENTLOG_FORWARDS_READ or EVENTLOG_BACKWARDS_READ. If the buffer is large enough, more than one record can be read at the specified seek position; the additional flag indicates the direction for successive read operations.</td>
</tr>
<tr valign=top>
<td width=51%>EVENTLOG_SEQUENTIAL_READ</td>
<td width=49%>The read operation proceeds sequentially from the last call to the <b>ReadEventLog</b> function using this handle.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwRecordOffset</i></dt>
<dd>
Specifies the log-entry record number at which the read operation should start. This parameter is ignored unless the <i>dwReadFlags</i> parameter includes the EVENTLOG_SEEK_READ flag. </dd>
<dt>
<i>lpBuffer</i></dt>
<dd>
Pointer to a buffer for the data read from the event log. This parameter cannot be NULL, even if the <i>nNumberOfBytesToRead</i> parameter is zero. 
<p>
The buffer will be filled with an <a href="eventlog_7mcy.htm"><b>EVENTLOGRECORD</b></a> structure. 
</dd>
<dt>
<i>nNumberOfBytesToRead</i></dt>
<dd>
Specifies the size, in bytes, of the buffer. This function will read as many whole log entries as will fit in the buffer; the function will not return partial entries, even if there is room in the buffer. </dd>
<dt>
<i>pnBytesRead</i></dt>
<dd>
Pointer to a variable that receives the number of bytes read by the function. </dd>
<dt>
<i>pnMinNumberOfBytesNeeded</i></dt>
<dd>
Pointer to a variable that receives the number of bytes required for the next log entry. This count is valid only if <b>ReadEventLog</b> returns zero and <b>GetLastError</b> returns ERROR_INSUFFICIENT_BUFFER. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
When this function returns successfully, the read position in the error log is adjusted by the number of records read. Only a whole number of event log records will be returned. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The configured filename for this source may also be the configured filename for other sources (several sources can exist as subkeys under a single logfile). Therefore, this function may return events that were logged by more than one source. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="eventlog_2tbb.htm">Event Logging Overview</a>, <a href="eventlog_622b.htm">Event Logging Functions</a>, <a href="eventlog_5xgn.htm"><b>ClearEventLog</b></a>, <a href="eventlog_2z3b.htm"><b>CloseEventLog</b></a>, <a href="eventlog_7mcy.htm"><b>EVENTLOGRECORD</b></a>, <a href="eventlog_3elj.htm"><b>OpenEventLog</b></a>, <a href="eventlog_756c.htm"><b>ReportEvent</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

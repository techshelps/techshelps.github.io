<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading and Writing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_reading_and_writing"></a>Reading and Writing</h3>
<p>
To read from a file view, a process dereferences the pointer returned by the <a href="fmap3_8p9h.htm"><b>MapViewOfFile</b></a> function:</p>
<pre><code>DWORD dwLength;

dwLength = *((LPDWORD) lpMapAddress);
<b> </b></code></pre>
<p>
The process also uses the pointer returned by <b>MapViewOfFile</b> to write to the file view:</p>
<pre><code>*((LPDWORD) lpMapAddress) = dwLength;
 </code></pre>
<p>
The <a href="fmap3_1wit.htm"><b>FlushViewOfFile</b></a> function copies the specified number of bytes of the file view to the physical file, without waiting for the cached write operation to occur:</p>
<pre><code>if (!FlushViewOfFile(lpMapAddress, dwBytesToFlush)) 
{ 
    ErrorHandler("Could not flush memory to disk."); 
} 
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;Reading from or writing to a file view can cause an exception. For example, accessing a mapped file that resides on a remote server can generate an exception if the connection to the server is lost. Exceptions can also occur because of a full disk, because the file is shared and a different process has locked a byte range, or because of an underlying device failure or memory allocation failure. To guard against access violations, all accesses to memory mapped files should be wrapped in structured exception handlers.</p>
<p>
If you are mapping a compressed or sparse file on an NTFS partition, there is additional potential for an access violation. In this case, the address space mapped by <b>MapViewOfFile</b> may not be backed by allocated disk space. This is because a sparse file can have regions of zeroes for which NTFS does not allocate disk space, and a compressed file can take up less disk space than the actual data that it represents. If you read from or write to a portion of a sparse or compressed file that is not backed by disk space, the system may try to allocate disk space. If the disk is full, this can result in an access violation. </p>
<p>
For more information, see <a href="fsys_99ny.htm">File Compression</a>, <a href="fsys_141f.htm">Sparse Files</a>, and <a href="structex_03xj.htm">Structured Exception Handling</a>.</p>
<p>&nbsp;</p></body>
</HTML>

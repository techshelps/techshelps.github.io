<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_event_objects"></a>Event Objects</h3>
<p>
An <i>event object</i> is a synchronization object whose state can be explicitly set to signaled by use of the <a href="synchro_8ut0.htm"><b>SetEvent</b></a> or <a href="synchro_1ylw.htm"><b>PulseEvent</b></a> function. Following are the two types of event object. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%>Object</th>
<th align=left width=73%>Description</th>
</tr>
<tr valign=top>
<td width=27%>Manual-reset event</td>
<td width=73%>An event object whose state remains signaled until it is explicitly reset to nonsignaled by the <a href="synchro_4f78.htm"><b>ResetEvent</b></a> function. While it is signaled, any number of waiting threads, or threads that subsequently specify the same event object in one of the <a href="synchro_5vqr.htm">wait functions</a>, can be released.</td>
</tr>
<tr valign=top>
<td width=27%>Auto-reset event</td>
<td width=73%>An event object whose state remains signaled until a single waiting thread is released, at which time the system automatically sets the state to nonsignaled. If no threads are waiting, the event object's state remains signaled.</td>
</tr>
</table><br>
<p>
The event object is useful in sending a signal to a thread indicating that a particular event has occurred. For example, in overlapped input and output, the system sets a specified event object to the signaled state when the overlapped operation has been completed. A single thread can specify different event objects in several simultaneous overlapped operations, then use one of the multiple-object <a href="synchro_5vqr.htm">wait functions</a> to wait for the state of any one of the event objects to be signaled. </p>
<p>
A thread uses the <a href="synchro_8ub8.htm"><b>CreateEvent</b></a> function to create an event object. The creating thread specifies the initial state of the object and whether it is a manual-reset or auto-reset event object. The creating thread can also specify a name for the event object. Threads in other processes can open a handle to an existing event object by specifying its name in a call to the <a href="synchro_5myc.htm"><b>OpenEvent</b></a> function. For additional information about names for mutex, event, semaphore, and timer objects, see <a href="synchro_3032.htm">Interprocess Synchronization</a>.</p>
<p>
A thread can use the <a href="synchro_1ylw.htm"><b>PulseEvent</b></a> function to set the state of an event object to signaled and then reset it to nonsignaled after releasing the appropriate number of waiting threads. For a manual-reset event object, all waiting threads are released. For an auto-reset event object, the function releases only a single waiting thread, even if multiple threads are waiting. If no threads are waiting, <b>PulseEvent</b> simply sets the state of the event object to nonsignaled and returns.</p>
<p>&nbsp;</p></body>
</HTML>

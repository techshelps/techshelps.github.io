<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>StartService</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_startservice"></a>StartService</h1>
<p>
The <b>StartService</b> function starts a service. </p>
<pre><code><b>BOOL StartService(
  SC_HANDLE</b><i> hService</i><b>,            </b>// handle of service
<b>  DWORD</b><i> dwNumServiceArgs</i><b>,        </b>// number of arguments
<b>  LPCTSTR</b><i> *lpServiceArgVectors</i>   // array of argument strings 
                                 // string pointers
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hService</i></dt>
<dd>
Handle to the service. This handle is returned by the <a href="services_8isl.htm"><b>OpenService</b></a> or <a href="services_3p9h.htm"><b>CreateService</b></a> function, and it must have SERVICE_START access. </dd>
<dt>
<i>dwNumServiceArgs</i></dt>
<dd>
Specifies the number of argument strings in the <i>lpServiceArgVectors</i> array. If <i>lpServiceArgVectors</i> is NULL, this parameter can be zero. </dd>
<dt>
<i>lpServiceArgVectors</i></dt>
<dd>
Pointer to an array of pointers that point to null-terminated argument strings passed to a service. Driver services do not receive these arguments. If no arguments are passed to the service being started, this parameter can be NULL. The service accesses these arguments through its <a href="services_61pq.htm"><b>ServiceMain</b></a> function. The first argument (argv[0]) is the name of the service by default, followed by the arguments, if any, in the <i>lpServiceArgVectors</i> array. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Errors</h4>
<p>
The following error codes can be set by the service control manager. Others can be set by the registry functions that are called by the service control manager. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=63%>Value</th>
<th align=left width=37%>Meaning</th>
</tr>
<tr valign=top>
<td width=63%>ERROR_ACCESS_DENIED</td>
<td width=37%>The specified handle was not opened with SERVICE_START access.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_INVALID_HANDLE</td>
<td width=37%>The specified handle is invalid.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_PATH_NOT_FOUND</td>
<td width=37%>The service binary file could not be found.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_ALREADY_RUNNING</td>
<td width=37%>An instance of the service is already running.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_DATABASE_LOCKED</td>
<td width=37%>The database is locked.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_DEPENDENCY_DELETED</td>
<td width=37%>The service depends on a service that does not exist or has been marked for deletion.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_DEPENDENCY_FAIL</td>
<td width=37%>The service depends on another service that has failed to start.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_DISABLED</td>
<td width=37%>The service has been disabled.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_LOGON_FAILED</td>
<td width=37%>The service could not be logged on.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_MARKED_FOR_DELETE</td>
<td width=37%>The service has been marked for deletion.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_NO_THREAD</td>
<td width=37%>A thread could not be created for the service.</td>
</tr>
<tr valign=top>
<td width=63%>ERROR_SERVICE_REQUEST_TIMEOUT</td>
<td width=37%>The service did not respond to the start request in a timely fashion.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
When a driver service is started, the <b>StartService</b> function does not return until the device driver has finished initializing. </p>
<p>
When a Win32-based service is started, the service control manager spawns the service process, if necessary. If the specified service shares a process with other services, the required process may already exist. The <b>StartService</b> function does not wait for the first status update from the new service, because it can take a while. Instead, it returns when the service control manager receives notification from the service control dispatcher that the <a href="services_61pq.htm"><b>ServiceMain</b></a> thread for this service was created successfully. </p>
<p>
The service control manager sets the following default status values before returning from <b>StartService</b>: 
<ul>
<li>
Current state of the service is set to SERVICE_START_PENDING. </li>
<li>
Controls accepted is set to none (zero). </li>
<li>
The CheckPoint value is set to zero. </li>
<li>
The WaitHint time is set to 2 seconds. </li>
</ul>
<p>
The calling process can determine if the new service has finished its initialization by calling the <b>QueryServiceStatus</b> function periodically to query the service's status. </p>
<p>
A service cannot call <b>StartService</b> during initialization. The reason is that the service control manager locks the service control database during initialization, so a call to <b>StartService</b> will block. Once the service reports to the service control manager that it has successfully started, it can call <b>StartService</b>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsvc.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="services_0p0z.htm">Services Overview</a>, <a href="services_2uwj.htm">Service Functions</a>, <a href="services_3fs5.htm"><b>ControlService</b></a>, <a href="services_3p9h.htm"><b>CreateService</b></a>, <a href="services_8isl.htm"><b>OpenService</b></a>, <a href="services_8coj.htm"><b>QueryServiceStatus</b></a>, <a href="services_61pq.htm"><b>ServiceMain</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Dynamic-Link Libraries</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_about_dynamic_link_libraries"></a>About Dynamic-Link Libraries</h1>
<p>
Dynamic linking allows a module to include only the information the system needs at load time or run time to locate the code for an exported DLL function. Dynamic linking differs from the more familiar static linking, in which the linker copies a library function's code into each module that calls it.</p>
<h4>Types of Dynamic Linking</h4>
<p>
There are two methods for calling a function in a DLL: 
<ul>
<li>
In <i>load-time dynamic linking</i>, a module makes explicit calls to exported DLL functions. This requires you to link the module with the import library for the DLL. An import library supplies the system with the information needed to load the DLL and locate the exported DLL functions when the application is loaded. For more information, see <u>Load-Time Dynamic Linking</u>. </li>
<li>
In <i>run-time dynamic linking</i>, a module uses the <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> or <a href="dll_4abc.htm"><b>LoadLibraryEx</b></a> function to load the DLL at run time. After the DLL is loaded, the module calls the <a href="dll_0f8z.htm"><b>GetProcAddress</b></a> function to get the addresses of the exported DLL functions. The module calls the exported DLL functions using the function pointers returned by <b>GetProcAddress</b>. This eliminates the need for an import library. For more information, see <u>Using Run-Time Dynamic Linking</u>. </li>
</ul>
<h4>DLLs and Memory Management</h4>
<p>
Every process that loads the DLL maps it into its virtual address space. After the process loads the DLL into its virtual address, it can call the exported DLL functions. </p>
<p>
The system maintains a reference count for each DLL. When a thread loads the DLL, its reference count is incremented by one. When the process terminates, or when the reference count goes to 0 (run-time dynamic linking only), the DLL is unloaded from the virtual address space.</p>
<p>
Like any other function, an exported DLL function runs in the context of the thread that calls it. Therefore, the following conditions apply: 
<ul>
<li>
The threads of the process that called the DLL can use handles opened by a DLL function. Similarly, handles opened by any thread of the calling process can be used in the DLL function. </li>
<li>
The DLL uses the stack of the calling thread and the virtual address space of the calling process. </li>
<li>
The DLL allocates memory from the virtual address space of the calling process. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

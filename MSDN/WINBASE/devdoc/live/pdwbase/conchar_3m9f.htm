<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Characters or Colors to Consecutive Cells</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_writing_characters_or_colors_to_consecutive_cells"></a>Writing Characters or Colors to Consecutive Cells</h2>
<p>
Characters or color attributes can be written to specified character cells in a screen buffer. The following example uses the <a href="conchar_6hma.htm"><b>WriteConsoleOutputCharacter</b></a> function to write a string of characters beginning at the upper left corner of a screen buffer. Then the example uses the <a href="conchar_6rqd.htm"><b>WriteConsoleOutputAttribute</b></a> function to write a string of color attributes to the first 51 cells of the same row. The <i>coord</i> parameter for both functions specifies the character cell in the screen buffer at which writing begins. The location in the console window where these characters or colors appear depends on the current window rectangle of the screen buffer. For additional information about the relationship between a screen buffer and its windows, see <a href="conchar_65wl.htm">Window and Screen Buffer Size</a> and <a href="conchar_4svm.htm">Scrolling the Screen Buffer</a>. </p>
<pre><code>HANDLE hOutput; 
    LPTSTR lpszString = "Character String"; 
    DWORD cWritten; 
    BOOL fSuccess; 
    COORD coord; 
    WORD wColors[3], wColor; 
    CHAR chFillChar; 
 
// Write a string of characters to a screen buffer. 
 
    coord.X = 0;            // start at first cell 
    coord.Y = 0;            //   of first row      
    fSuccess = WriteConsoleOutputCharacter( 
        hOutput,              // screen buffer handle 
        lpszString,           // pointer to source string 
        lstrlen(lpszString),  // length of string 
        coord,                // first cell to write to 
        &amp;cWritten);           // actual number written 
    if (! fSuccess) 
        MyErrorExit("WriteConsoleOutputCharacter"); 
 
// Write a string of colors to a screen buffer. 
 
    wColors[0] = BACKGROUND_RED; 
    wColors[1] = BACKGROUND_RED |     // white background 
                 BACKGROUND_GREEN | 
                 BACKGROUND_BLUE; 
    wColors[2] = BACKGROUND_BLUE; 

    for (;fSuccess &amp;&amp; coord.X &lt; 50; coord.X += 3) 
    {
        fSuccess = WriteConsoleOutputAttribute( 
            hOutput,          // screen buffer handle 
            wColors,          // pointer to source string 
            3,                // length of string 
            coord,            // first cell to write to 
            &amp;cWritten);       // actual number written 
    }
    if (! fSuccess) 
        MyErrorExit("WriteConsoleOutputAttribute"); 
 </code></pre>
<p>
The same character or color attribute can be written to a specified number of consecutive screen buffer cells beginning at a specified location. The following example uses the <a href="conchar_90vm.htm"><b>FillConsoleOutputCharacter</b></a> function to clear a 80-by-50-character screen buffer, and then it uses the <a href="conchar_9azp.htm"><b>FillConsoleOutputAttribute</b></a> function to set the color attributes of the same cells. </p>
<pre><code>// Fill an 80-by-50-character screen buffer with the space character. 
 
    coord.X = 0;            // start at first cell 
    coord.Y = 0;            //   of first row 
    chFillChar = ' '; 
 
    fSuccess = FillConsoleOutputCharacter( 
        hStdout,          // screen buffer handle 
        chFillChar,       // fill with spaces 
        80*50,            // number of cells to fill 
        coord,            // first cell to write to 
        &amp;cWritten);       // actual number written 

    if (! fSuccess) 
        MyErrorExit("FillConsoleOutputCharacter"); 
 
// Set 80-by-50-character screen buffer colors to white text on red. 
 
    wColor = BACKGROUND_RED | 
             FOREGROUND_RED | 
             FOREGROUND_GREEN | 
             FOREGROUND_BLUE; 

    fSuccess = FillConsoleOutputAttribute( 
        hStdout,          // screen buffer handle 
        wColor,           // color to fill with 
        80*50,            // number of cells to fill 
        coord,            // first cell to write to 
        &amp;cWritten);       // actual number written 

    if (! fSuccess) 
        MyErrorExit("FillConsoleOutputAttribute"); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

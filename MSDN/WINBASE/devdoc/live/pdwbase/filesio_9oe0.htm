<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MoveFileEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_movefileex"></a>MoveFileEx</h1>
<p>
The <b>MoveFileEx</b> function renames an existing file or directory. </p>
<pre><code><b>BOOL MoveFileEx(
  LPCTSTR</b><i> lpExistingFileName</i><b>,  </b>// pointer to the name of the existing file
<b>  LPCTSTR</b><i> lpNewFileName</i><b>,       </b>// pointer to the new name for the file
<b>  DWORD</b><i> dwFlags</i>                // flag that specifies how to move file
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpExistingFileName</i></dt>
<dd>
Pointer to a null-terminated string that names an existing file or directory on the local machine. </dd>
<dt>
<i>lpNewFileName</i></dt>
<dd>
Pointer to a null-terminated string that specifies the new name of <i>lpExistingFileName</i> on the local machine.
<p>
When moving a file, the destination can be on a different file system or drive. If the destination is on another drive, you must set the MOVEFILE_COPY_ALLOWED flag in <i>dwFlags</i>.

<p>
When moving a directory, the destination must be on the same drive. 

<p>
If <i>dwFlags</i> specifies MOVEFILE_DELAY_UNTIL_REBOOT, <i>lpNewFileName</i> can be NULL. In this case, <b>MoveFileEx</b> registers the <i>lpExistingFileName</i> file to be deleted when the system reboots. If <i>lpExistingFileName</i> refers to a directory, the system removes the directory at reboot only if the directory is empty.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Set of bit flags that specify how to move the file. You can specify any combination of the following values:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Value</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>MOVEFILE_COPY_ALLOWED</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If the file is to be moved to a different volume, the function simulates the move by using the <a href="filesio_0x9h.htm"><b>CopyFile</b></a> and <a href="filesio_5n8l.htm"><b>DeleteFile</b></a> functions. <p>
This flag cannot be used with the MOVEFILE_DELAY_UNTIL_REBOOT flag.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>MOVEFILE_DELAY_UNTIL_REBOOT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The function does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.<p>
This flag can only be used if the process is in the context of a user who belongs to the administrator group or the LocalSystem account. </p>
<p>
This flag cannot be used with the MOVEFILE_COPY_ALLOWED flag.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>MOVEFILE_REPLACE_EXISTING</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If a file of the name specified by <i>lpNewFileName</i> already exists, the function replaces its contents with those specified by <i>lpExistingFileName</i>.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>MOVEFILE_WRITE_THROUGH</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>The function does not return until the file has actually been moved on the disk. <p>
Setting this flag guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. The flush occurs at the end of the copy operation. </p>
<p>
This flag has no effect if the MOVEFILE_DELAY_UNTIL_REBOOT flag is set. </p>
</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
If the <i>dwFlags</i> parameter specifies MOVEFILE_DELAY_UNTIL_REBOOT, <b>MoveFileEx</b> stores the locations of the files to be renamed at reboot in the following registry value: </p>
<p class=indent1>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations</b></p>
<p>
The function fails if it cannot access the registry. </p>
<p>
The <b>PendingFileRenameOperations</b> value is of type REG_MULTI_SZ. Each rename operation stores a pair of NULL-terminated strings. The system uses these registry entries to complete the operations at reboot in the same order that they were issued. For example, the following code fragment creates registry entries that delete <i>szDstFile</i> and rename <i>szSrcFile</i> to be <i>szDstFile</i> at reboot: </p>
<pre><code>MoveFileEx(szDstFile, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);
MoveFileEx(szSrcFile, szDstFile, MOVEFILE_DELAY_UNTIL_REBOOT);
 </code></pre>
<p>
The system stores the following entries in <b>PendingFileRenameOperations</b>: </p>
<pre><code>szDstFile\0\0
szSrcFile\0szDstFile\0\0
 </code></pre>
<p>
Because the actual move and deletion operations specified with the MOVEFILE_DELAY_UNTIL_REBOOT flag take place after the calling application has ceased running, the return value cannot reflect success or failure in moving or deleting the file. Rather, it reflects success or failure in placing the appropriate entries into the registry.</p>
<p>
The system deletes a directory tagged for deletion with the MOVEFILE_DELAY_UNTIL_REBOOT flag only if it is empty. To ensure deletion of directories, move or delete all files from the directory before attempting to delete it. Files may be in the directory at boot time, but they must be deleted or moved before the system can delete the directory.</p>
<p>
<b>Windows 95 and Windows 98: </b>The <b>MoveFileEx</b> function is not supported. To rename or delete a file at reboot, use the following procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To rename or delete a file on Windows 95 and Windows 98</h5>
<ol>
<li>
Check for the existence of the WININIT.INI file in the Windows directory. </li>
<li>
If WININIT.INI exists, open it and add new entries to the existing [rename] section. If the file does not exist, create the file and create a [rename] section. </li>
<li>
Add lines of the following format to the [rename] section: <pre><code><i>DestinationFileName</i>=<i>SourceFileName</i>
</code></pre>
<p>
Both <i>DestinationFileName</i> and <i>SourceFileName</i> must be short filenames. To delete a file, use NUL as the value for <i>DestinationFileName</i>.
</li>
</ol>
<p>
The system processes WININIT.INI during system boot. After WININIT.INI has been processed, the system names it WININIT.BAK.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="filesio_2xm7.htm">File I/O Overview</a>, <a href="filesio_3n5f.htm">File Functions</a>, <a href="filesio_0x9h.htm"><b>CopyFile</b></a>, <a href="filesio_5n8l.htm"><b>DeleteFile</b></a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_1.Click()><b>GetWindowsDirectory</b></a>, <a href="regapi_2jjb.htm"><b>WritePrivateProfileString</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Global and Local Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_global_and_local_functions"></a>Global and Local Functions</h2>
<p>
The global and local functions are the 16-bit Windows heap functions. Win32 memory management supports these functions for porting from 16-bit Windows, or maintaining source code compatibility with 16-bit Windows. The global and local functions are slower than the new memory management functions and do not provide as many features. Therefore, new applications should not use these functions. </p>
<p>
A process can use the <a href="memman_66qr.htm"><b>GlobalAlloc</b></a> and <a href="memman_2fxf.htm"><b>LocalAlloc</b></a> functions to allocate memory. Win32 memory management does not provide a separate local heap and global heap, as 16-bit Windows does. As a result, there is no difference between the memory objects allocated by these functions. In addition, the change from a 16-bit segmented memory model to a 32-bit virtual memory model has made some of the related global and local functions and their options unnecessary or meaningless. For example, there are no longer near and far pointers, because both local and global allocations return 32-bit virtual addresses. </p>
<p>
Memory objects allocated by <b>GlobalAlloc</b> and <b>LocalAlloc</b> are in private, committed pages with read-write access that cannot be accessed by other processes. Memory allocated by using <b>GlobalAlloc</b> with the GMEM_DDESHARE flag is not actually shared globally as it is in 16-bit Windows. However, this flag is available for compatibility purposes and can be used by some applications to enhance the performance of dynamic data exchange (DDE) operations. Applications requiring shared memory for other purposes must use file-mapping objects. Multiple processes can map a view of the same file-mapping object to provide named shared memory. For more information, see <a href="fmap3_61d3.htm">File Mapping</a>. </p>
<p>
By using <b>GlobalAlloc</b> and <b>LocalAlloc</b>, you can allocate a block of memory of any size that can be represented by 32 bits. You are limited only by the available physical memory, including storage in the paging file on disk. In 16-bit Windows, when you allocate a fixed memory object, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a> and <a href="memman_2fxf.htm"><b>LocalAlloc</b></a> returns a 32-bit pointer that the calling process can immediately use to access the memory. When you allocate memory using GMEM_MOVEABLE, the return value is a handle. To get a pointer to a movable memory object, use the <a href="memman_6omj.htm"><b>GlobalLock</b></a> and <a href="memman_5j57.htm"><b>LocalLock</b></a> functions. </p>
<p>
The actual size of the memory allocated by <b>GlobalAlloc</b> or <b>LocalAlloc</b> can be larger than the requested size. To determine the actual number of bytes allocated, use the <a href="memman_5ip1.htm"><b>GlobalSize</b></a> or <a href="memman_4d7p.htm"><b>LocalSize</b></a> function. If the amount allocated is greater than the amount requested, the process can use the entire amount. </p>
<p>
The <b>GlobalReAlloc</b> and <b>LocalReAlloc</b> functions change the size, in bytes, or the attributes of a memory object allocated by <b>GlobalAlloc</b> and <b>LocalAlloc</b>. The size can increase or decrease. </p>
<p>
The <a href="memman_38kl.htm"><b>GlobalFree</b></a> and <a href="memman_2339.htm"><b>LocalFree</b></a> functions release memory allocated by <b>GlobalAlloc</b>, <b>LocalAlloc</b>, <b>GlobalReAlloc</b>, or <b>LocalReAlloc</b>. </p>
<p>
Other global and local functions include the <a href="memman_1ip0.htm"><b>GlobalDiscard</b></a>, <a href="memman_2l7o.htm"><b>LocalDiscard</b></a>, <a href="memman_36ib.htm"><b>GlobalFlags</b></a>, <a href="memman_9foz.htm"><b>LocalFlags</b></a>, <a href="memman_8u3p.htm"><b>GlobalHandle</b></a>, and <a href="memman_95yd.htm"><b>LocalHandle</b></a> functions. To discard the specified memory object without invalidating the handle, use <b>GlobalDiscard</b> or <b>LocalDiscard</b>. The handle can be used later by <a href="memman_0lcz.htm"><b>GlobalReAlloc</b></a> or <a href="memman_1nvn.htm"><b>LocalReAlloc</b></a> to allocate a new block of memory associated with the same handle. To return information about a specified memory object, use <b>GlobalFlags</b> or <b>LocalFlags</b>. The information includes the object's lock count and indicates whether the object is discardable or has already been discarded. To return a handle to the memory object associated with a specified pointer, use <b>GlobalHandle</b> or <b>LocalHandle</b>. </p>
<p>&nbsp;</p></body>
</HTML>

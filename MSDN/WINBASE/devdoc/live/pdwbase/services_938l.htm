<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Starting a Service</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_starting_a_service"></a>Starting a Service</h2>
<p>
To start a service, the following example opens a handle to an installed database and then specifies the handle in a call to the <a href="services_8ox1.htm"><b>StartService</b></a> function. It can be used to start either a service or a driver service, but this example assumes that a service is being started. After starting the service, the program uses the members of the <a href="services_9s36.htm"><b>SERVICE_STATUS</b></a> structure returned by the <a href="services_8coj.htm"><b>QueryServiceStatus</b></a> function to track the progress of the service. </p>
<pre><code>VOID StartSampleService() 
{ 
    SERVICE_STATUS ssStatus; 
    DWORD dwOldCheckPoint; 
 
    schService = OpenService( 
        schSCManager,          // SCM database 
        TEXT("Sample_Srv"),    // service name
        SERVICE_ALL_ACCESS); 
 
    if (schService == NULL) 
        MyErrorExit("OpenService"); 
 
    if (!StartService(
            schService,  // handle to service 
            0,           // number of arguments 
            NULL) )      // no arguments 
    {
        MyErrorExit("StartService"); 
    }
    else 
        printf("Service start pending\n"); 
 
    // Check the status until the service is no longer start pending. 
 
    if (!QueryServiceStatus( 
            schService,   // handle to service 
            &amp;ssStatus) )  // address of status information
            MyErrorExit("QueryServiceStatus"); 
 
    while (ssStatus.dwCurrentState == SERVICE_START_PENDING) 
    { 
        // Save the current checkpoint. 
 
        dwOldCheckPoint = ssStatus.dwCheckPoint; 
 
        // Wait for the specified interval. 
 
        Sleep(ssStatus.dwWaitHint); 
 
        // Check the status again. 
 
        if (!QueryServiceStatus( 
                schService,   // handle to service 
                &amp;ssStatus) )  // address of status information
            break; 
 
        // Break if the checkpoint has not been incremented. 
 
        if (dwOldCheckPoint &gt;= ssStatus.dwCheckPoint) 
            break; 
    } 
 
    if (ssStatus.dwCurrentState == SERVICE_RUNNING) 
        printf("StartService SUCCESS\n"); 
    else 
    { 
        printf("  Current State: %d\n", 
            ssStatus.dwCurrentState); 
        printf("  Exit Code: %d\n", ssStatus.dwWin32ExitCode); 
        printf("  Service Specific Exit Code: %d\n", 
            ssStatus.dwServiceSpecificExitCode); 
        printf("  Check Point: %d\n", ssStatus.dwCheckPoint); 
        printf("  Wait Hint: %d\n", ssStatus.dwWaitHint); 
    } 
 
    CloseServiceHandle(schService); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

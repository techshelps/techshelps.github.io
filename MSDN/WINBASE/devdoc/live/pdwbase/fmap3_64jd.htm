<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Named Shared Memory</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_creating_named_shared_memory"></a>Creating Named Shared Memory</h3>
<p>
The first process calls the <a href="fmap3_79wn.htm"><b>CreateFileMapping</b></a> function to create a file-mapping object and give it the name <code>MyFileMappingObject</code>. By using the PAGE_READWRITE flag, the processes will have read/write permission to the memory through any file views that are created. </p>
<pre><code>HANDLE hMapFile;

hMapFile = CreateFileMapping(hFile,    // Current file handle. 
    NULL,                              // Default security. 
    PAGE_READWRITE,                    // Read/write permission. 
    0,                                 // Max. object size. 
    0,                                 // Size of hFile. 
    "MyFileMappingObject");            // Name of mapping object. 
 
if (hMapFile == NULL) 
{ 
    ErrorHandler("Could not create file-mapping object."); 
} 
 </code></pre>
<p>
The process then uses the file-mapping object handle returned by <a href="fmap3_79wn.htm"><b>CreateFileMapping</b></a> in the call to <a href="fmap3_8p9h.htm"><b>MapViewOfFile</b></a> to create a view of the file in the process's address space. The <b>MapViewOfFile</b> function returns a pointer to the file view.</p>
<pre><code>LPVOID lpMapAddress;
lpMapAddress = MapViewOfFile(hMapFile, // Handle to mapping object. 
    FILE_MAP_ALL_ACCESS,               // Read/write permission 
    0,                                 // Max. object size. 
    0,                                 // Size of hFile. 
    0);                                // Map entire file. 
 
if (lpMapAddress == NULL) 
{ 
    ErrorHandler("Could not map view of file."); 
} 
 </code></pre>
<p>
The second process calls the <a href="fmap3_1h7r.htm"><b>OpenFileMapping</b></a> function with the name <code>MyFileMappingObject</code> to use the same file-mapping object as the first process. Like the first process, the second process uses the <b>MapViewOfFile</b> function to obtain a pointer to the file view. </p>
<pre><code>HANDLE hMapFile;
LPVOID lpMapAddress;

hMapFile = OpenFileMapping(FILE_MAP_ALL_ACCESS, // Read/write permission. 
    FALSE,                             // Do not inherit the name
    "MyFileMappingObject");            // of the mapping object. 
 
if (hMapFile == NULL) 
{ 
    ErrorHandler("Could not open file-mapping object."); 
} 
 
lpMapAddress = MapViewOfFile(hMapFile, // Handle to mapping object. 
    FILE_MAP_ALL_ACCESS,               // Read/write permission. 
    0,                                 // Max. object size. 
    0,                                 // Size of hFile. 
    0);                                // Map entire file. 
 
if (lpMapAddress == NULL) 
{ 
    ErrorHandler("Could not map view of file."); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

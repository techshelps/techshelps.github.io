<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scrolling the Screen Buffer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_scrolling_the_screen_buffer"></a>Scrolling the Screen Buffer</h3>
<p>
The console window displays a portion of the active screen buffer. Each screen buffer maintains its own current window rectangle that specifies the coordinates of the upper left and lower right character cells to be displayed in the console window. To determine the current window rectangle of a screen buffer, use <a href="conchar_34dr.htm"><b>GetConsoleScreenBufferInfo</b></a>. When a screen buffer is created, the upper left corner of its window is at the upper left corner of the screen buffer at (0,0). </p>
<p>
The window rectangle can change to display different parts of the screen buffer. The window rectangle of a screen buffer can change in the following situations: 
<ul>
<li>
When <a href="conchar_84mn.htm"><b>SetConsoleWindowInfo</b></a> is called to specify a new window rectangle, it scrolls the view of the screen buffer by changing the position of the window rectangle without changing the size of the window. For examples of scrolling the window's contents, see <a href="conchar_4pfb.htm">Scrolling a Screen Buffer's Window</a>. </li>
</ul>
<p>
<img src="images/cscon_01.gif" border=0>
<ul>
<li>
When using the <a href="filesio_3kkl.htm"><b>WriteFile</b></a> function to write to a screen buffer with wrap at end-of-line (EOL) output mode enabled, the window rectangle shifts automatically, so the cursor is always displayed. </li>
<li>
When the <a href="conchar_8wfi.htm"><b>SetConsoleCursorPosition</b></a> function specifies a new cursor position that is outside the boundaries of the current window rectangle, the window rectangle shifts automatically to display the cursor. </li>
<li>
When the user changes the size of the console window or uses the window's scroll bars, the window rectangle of the active screen buffer can change. This change is not reported as a window resizing event in the input buffer. </li>
</ul>
<p>
In each of these situations, the window rectangle shifts to display a different part of the screen buffer, but the contents of the screen buffer remain in the same position. The following situations can cause the screen buffer's contents to shift: 
<ul>
<li>
When the <a href="conchar_6mr6.htm"><b>ScrollConsoleScreenBuffer</b></a> function is called, a rectangular block is copied from one part of a screen buffer to another. </li>
<li>
When using <a href="filesio_3kkl.htm"><b>WriteFile</b></a> to write to a screen buffer with wrap at EOL output mode enabled, the screen buffer's contents scroll automatically when the end of the screen buffer is encountered. This scrolling discards the top row of the screen buffer. </li>
</ul>
<p>
<b>ScrollConsoleScreenBuffer</b> specifies the screen buffer rectangle that is moved and the new upper left coordinates to which the rectangle is copied. This function can scroll a portion or the entire contents of the screen buffer. </p>
<p>
The illustration shows a <a href="conchar_6mr6.htm"><b>ScrollConsoleScreenBuffer</b></a> operation that scrolls the entire contents of the screen buffer up by several rows. The contents of the top rows are discarded, and the bottom rows are filled with a specified character and color. </p>
<p>
<img src="images/cscon_02.gif" border=0></p>
<p>
The effects of <b>ScrollConsoleScreenBuffer</b> can be limited by specifying an optional clipping rectangle so that the contents of the screen buffer outside the clipping rectangle are unchanged. The effect of clipping is to create a subwindow (the clipping rectangle) whose contents are scrolled without affecting the rest of the screen buffer. For an example that uses <b>ScrollConsoleScreenBuffer</b>, see <a href="conchar_11ir.htm">Scrolling a Screen Buffer's Contents</a>. </p>
<h4>Cursor Appearance and Position</h4>
<p>
A screen buffer's cursor can be visible or hidden. When it is visible, its appearance can vary, ranging from from completely filling a character cell to appearing as a horizontal line at the bottom of the cell. To retrieve information about the appearance and visibility of the cursor, use the <a href="conchar_7x7z.htm"><b>GetConsoleCursorInfo</b></a> function. This function reports whether the cursor is visible and describes the appearance of the cursor as the percentage of a character cell that it fills. To set the appearance and visibility of the cursor, use the <a href="conchar_4ltb.htm"><b>SetConsoleCursorInfo</b></a> function. </p>
<p>
Characters written by the high-level console I/O functions are written at the current cursor location, advancing the cursor to the next location. To determine the current cursor position in the coordinate system of a screen buffer, use <a href="conchar_34dr.htm"><b>GetConsoleScreenBufferInfo</b></a>. You can use <a href="conchar_8wfi.htm"><b>SetConsoleCursorPosition</b></a> to set the cursor position and, thereby, control the placement of text that is written or echoed by the high-level I/O functions. If you move the cursor, text at the new cursor location is overwritten. </p>
<p>
The position, appearance, and visibility of the cursor are set independently for each screen buffer. </p>
<h4>Screen Buffer Color Attributes</h4>
<p>
Each screen buffer character cell stores the color attributes for the colors used in drawing the text and background of that cell. An application can set the color data for each character cell individually, storing the data in the <b>Attributes</b> member of the <a href="conchar_8sfm.htm"><b>CHAR_INFO</b></a> structure for each cell. </p>
<p>
The current text attributes of each screen buffer determine the foreground (text) and background colors of characters subsequently written or echoed by the high-level functions. An application can use <a href="conchar_34dr.htm"><b>GetConsoleScreenBufferInfo</b></a> to determine the current text attributes of a screen buffer and the <a href="conchar_2tid.htm"><b>SetConsoleTextAttribute</b></a> function to set the text attributes. Changing a screen buffer's text attributes does not affect the display of characters previously written. These text attributes do not affect characters written by the low-level console I/O functions (such as the <a href="conchar_9ktw.htm"><b>WriteConsoleOutput</b></a> or <a href="conchar_6hma.htm"><b>WriteConsoleOutputCharacter</b></a> function) which either explicitly specify the attributes for each cell that is written or leave the attributes unchanged at the written positions. </p>
<p>
The following attribute constants are defined in the WINCON.H header file: 
<ul>
<li>
FOREGROUND_BLUE </li>
<li>
FOREGROUND_GREEN </li>
<li>
FOREGROUND_RED </li>
<li>
FOREGROUND_INTENSITY </li>
<li>
BACKGROUND_BLUE </li>
<li>
BACKGROUND_GREEN </li>
<li>
BACKGROUND_RED </li>
<li>
BACKGROUND_INTENSITY </li>
</ul>
<p>
The foreground attributes specify the text color, and the background attributes specify the color used to fill the cell's background. An application can combine the constants to achieve different colors. For example, the following combination results in bright cyan text on a blue background. </p>
<pre><code>FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY | BACKGROUND_BLUE 
 </code></pre>
<p>
If no background constant is specified, the background is black, and if no foreground constant is specified, the text is black. For example, the following combination produces black text on a white background. </p>
<pre><code>BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

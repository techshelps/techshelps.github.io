<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restrictions on VLM</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_restrictions_on_vlm"></a>Restrictions on VLM</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
VLM places severe restrictions on the memory that may be addressed by 64-bit pointers. These restrictions limit the use of the VLM application programming interface (API) to certain narrowly defined situations in which applications require high-speed access to large portions of memory. The restrictions are:
<ul>
<li>
VLM is supported only on processors that directly support native 64-bit addressing. At present, these processors include the Digital Equipment Corporation Alpha processor and specifically exclude the 80286, 80386, 80486, and Pentium processors from Intel.</li>
<li>
VLM is supported only on computers that have at least 128 megabytes (MB) of physical memory.</li>
<li>
The memory used by this API is "locked down" (not swapped out by the memory manager) for high-speed access to data. For more information on locking down memory, see <a href="memman_82ur.htm">Virtual Memory Functions</a>.</li>
<li>
All committed memory is backed by physical memory.</li>
<li>
Compilers for VLM-capable processors require some modifications to expose 64-bit addressing.</li>
<li>
VLM is available on Windows NT Server Enterprise Edition, version 5.0.</li>
<li>
Requests for memory must be in multiples of 64 kilobytes (K).</li>
<li>
Requested addresses are rounded <i>down</i> to the nearest multiple of 64K.</li>
<li>
VLM requires Microsoft® Visual C++® version 5.0.</li>
</ul>
<p>
All committed memory must be backed by physical memory that must be available at the time of commitment; paging files are never used to back committed memory. In fact, physical memory at the time of the commitment must exceed the committed memory by at least 16 MB. However, the address space used to map virtual committed memory can be reserved. </p>
<p>
Page faults can only occur in VLM addresses when they are being used to map in an actual data file from disk. Page faults occur only on mapped data files, and each page can only generate a fault once, when it is first accessed. After the first access, a page is locked into memory, never to be trimmed by the usual swapping process. Thus, page faults operate only to bring data into physical memory, never to swap the data out.</p>
<p>
The Microsoft® 32-bit C/C++ Optimizing Compiler that presently supports VLM is distributed with Visual C++ 5.0 and later. Compilers for VLM-capable processors require some modifications to expose 64-bit addressing. These modifications include the new <b>__ptr64 </b>pointer modifier used in type definitions. The use of this modifier follows this syntax:</p>
<p>
<i>name-of-type * </i><b>__ptr64 </b><i>name-of-variable</i> </p>
<p>
where <i>name-of-type </i>is the name of the type used and <i>name-of-variable </i>is the name of the variable to be defined.</p>
<p>
Compilers for VLM-capable processors must also support all the conversions to and from 32- and 64-bit pointers. Conversion support in this case means that 64-bit–to–32-bit conversions are truncated and 32-bit–to–64-bit conversions are sign-extended.</p>
<p>
Although VLM is supported on computers with as little as 128 MB of physical memory, VLM becomes more useful as physical memory exceeds 2 GB. However, for the sake of portability, VLM can be used on computers with as little physical memory as 128 MB.</p>
<pre><code></code></pre>
<p>&nbsp;</p></body>
</HTML>

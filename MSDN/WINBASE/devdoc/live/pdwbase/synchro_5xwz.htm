<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Critical Section Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_critical_section_objects"></a>Using Critical Section Objects</h2>
<p>
The following example shows how a thread initializes, enters, and leaves a critical section. As with the mutex example (see <a href="synchro_3bsj.htm">Using Mutex Objects</a>), this example uses the <b>try</b>-<b>finally</b> structured exception-handling syntax to ensure that the thread calls the <a href="synchro_0uge.htm"><b>LeaveCriticalSection</b></a> function to release its ownership of the critical section object. </p>
<pre><code>CRITICAL_SECTION GlobalCriticalSection; 

// Initialize the critical section.
InitializeCriticalSection(&amp;GlobalCriticalSection); 

// Request ownership of the critical section.
try 
{
    EnterCriticalSection(&amp;GlobalCriticalSection); 
    // Access the shared resource.
}
finally 
{
    // Release ownership of the critical section.
    LeaveCriticalSection(&amp;GlobalCriticalSection);
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

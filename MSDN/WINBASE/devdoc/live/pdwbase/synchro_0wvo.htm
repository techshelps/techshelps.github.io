<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetCriticalSectionSpinCount</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setcriticalsectionspincount"></a>SetCriticalSectionSpinCount</h1>
<p>
The <b>SetCriticalSectionSpinCount</b> function sets the spin count for the specified critical section. </p>
<pre><code><b>DWORD SetCriticalSectionSpinCount(
  LPCRITICAL_SECTION</b><i> lpCriticalSection</i><b>,</b> 
                      // pointer to critical section
<b>  DWORD</b><i> dwSpinCount</i>   // spin count for critical section
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpCriticalSection</i></dt>
<dd>
Pointer to the critical section object. </dd>
<dt>
<i>dwSpinCount</i></dt>
<dd>
Specifies the spin count for the critical section object. On uniprocessor systems, the spin count is ignored and the critical section spin count is set to 0. On multiprocessor systems, if contention for the critical section occurs, the calling thread will spin <i>dwSpinCount</i> times before waiting on a semaphore associated with the critical section. If the critical section becomes free during the spin operation, the wait is avoided. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The function returns the previous spin count for the critical section. </p>
<h4>Remarks</h4>
<p>
The threads of a single process can use a critical section object for mutual-exclusion synchronization. The process is responsible for allocating the memory used by a critical section object, which it can do by declaring a variable of type <b>CRITICAL_SECTION</b>. Before using a critical section, some thread of the process must call the <a href="synchro_2dke.htm"><b>InitializeCriticalSection</b></a> or <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a><b> </b>function to initialize the object. You can subsequently modify the spin count by calling the <b>SetCriticalSectionSpinCount</b> function. </p>
<p>
The spin count is useful for critical sections of short duration that can experience high levels of contention. Consider a worst-case scenario, in which an application on an SMP system has two or three threads constantly allocating and releasing memory from the heap. The application serializes the heap with a critical section. In the worst-case scenario, contention for the critical section is constant, and each thread makes an expensive call to the <b>WaitForSingleObject</b> function. However, if the spin count is set properly, the calling thread will not immediately call <b>WaitForSingleObject</b> when contention occurs. Instead, the calling thread can acquire ownership of the critical section if it is released during the spin operation. </p>
<p>
You can improve performance significantly by choosing a small spin count for a critical section of short duration. The heap manager uses a spin count of roughly 4000 for its per-heap critical sections. This gives great performance and scalability in almost all worst-case scenarios.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_2dke.htm"><b>InitializeCriticalSection</b></a>, <a href="synchro_20ok.htm"><b>InitializeCriticalSectionAndSpinCount</b></a>, <a href="synchro_4ldg.htm"><b>WaitForSingleObject</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

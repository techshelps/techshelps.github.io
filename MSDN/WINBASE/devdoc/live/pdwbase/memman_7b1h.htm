<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapFree</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heapfree"></a>HeapFree</h1>
<p>
The <b>HeapFree</b> function frees a memory block allocated from a heap by the <a href="memman_6krn.htm"><b>HeapAlloc</b></a> or <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a> function. </p>
<pre><code><b>BOOL HeapFree(
  HANDLE</b><i> hHeap</i><b>,  </b>// handle to the heap
<b>  DWORD</b><i> dwFlags</i><b>, </b>// heap freeing flags
<b>  LPVOID</b><i> lpMem</i>   // pointer to the memory to free
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHeap</i></dt>
<dd>
Specifies the heap whose memory block the function frees. This parameter is a handle returned by the <a href="memman_5z6t.htm"><b>HeapCreate</b></a> or <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a> function. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Specifies several controllable aspects of freeing a memory block. Only one flag is currently defined; however, all other flag values are reserved for future use. Specifying this flag will override the corresponding flag specified in the <i>flOptions</i> parameter when the heap was created by using the <b>HeapCreate</b> function: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Flag</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>HEAP_NO_SERIALIZE</td>
<td width=63%>Specifies that mutual exclusion will not be used while <b>HeapFree</b> is accessing the heap. <p>
This flag should not be specified when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap. </p>
</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpMem</i></dt>
<dd>
Pointer to the memory block to free. This pointer is returned by the <b>HeapAlloc</b> or <b>HeapReAlloc</b> function. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. An application can call <a href="errors_3uwi.htm"><b>GetLastError</b></a> for extended error information.</p>
<h4>Remarks</h4>
<p>
Serialization ensures mutual exclusion when two or more threads attempt to simultaneously allocate or free blocks from the same heap. There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. Setting the HEAP_NO_SERIALIZE flag eliminates mutual exclusion on the heap. Without serialization, two or more threads that use the same heap handle might attempt to allocate or free memory simultaneously, likely causing corruption in the heap. The HEAP_NO_SERIALIZE flag can, therefore, be safely used only in the following situations: 
<ul>
<li>
The process has only one thread. </li>
<li>
The process has multiple threads, but only one thread calls the heap functions for a specific heap. </li>
<li>
The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap. </li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a>,<b> <a href="memman_6krn.htm">HeapAlloc</a></b>, <a href="memman_5z6t.htm"><b>HeapCreate</b></a>, <a href="memman_862h.htm"><b>HeapDestroy</b></a>, <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a>, <a href="memman_9l5x.htm"><b>HeapSize</b></a>, <a href="errors_48tu.htm"><b>SetLastError</b></a></p>
<p>&nbsp;</p></body>
</HTML>

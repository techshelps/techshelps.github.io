<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Descriptors for Private Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_security_descriptors_for_private_objects"></a>Security Descriptors for Private Objects</h3>
<p>
To create a security descriptor, a protected server can use the same procedure that an application would use to create a security descriptor for a securable object. For sample code, see <a href="accctrl_1buc.htm">Creating a Security Descriptor for a New Object</a>. </p>
<p>
In addition, the Win32 API provides a set of functions for merging client security information with information inherited from the security descriptor for a parent object or from a default security descriptor. The <a href="accclsrv_5vcp.htm"><b>CreatePrivateObjectSecurity</b></a>, <a href="accclsrv_87p5.htm"><b>GetPrivateObjectSecurity</b></a>, <a href="accclsrv_31mh.htm"><b>SetPrivateObjectSecurity</b></a>, and <a href="accclsrv_4ozd.htm"><b>DestroyPrivateObjectSecurity</b></a> functions provide the ability to retrieve default information from an access token, support inheritance, and manipulate specific parts of the security descriptor. This can be useful when a client creates a private object in a hierarchy of secured objects. For example, you could use the <b>CreatePrivateObjectSecurity</b> function to create a security descriptor that contained ACEs specified by the client, ACEs inherited from a parent object, and the default owner from the creating client's access token. </p>
<p>&nbsp;</p></body>
</HTML>

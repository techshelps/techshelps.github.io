<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SleepEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_sleepex"></a>SleepEx</h1>
<p>
The <b>SleepEx</b> function causes the current thread to enter a wait state until one of the following occurs: 
<ul>
<li>
An I/O completion callback function is called</li>
<li>
An asynchronous procedure call (APC) is queued to the thread.</li>
<li>
The time-out interval elapses</li>
</ul>
<pre><code><b>DWORD SleepEx(
  DWORD</b><i> dwMilliseconds</i><b>,  </b>// time-out interval in milliseconds
<b>  BOOL</b><i> bAlertable</i>        // early completion flag
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMilliseconds</i></dt>
<dd>
Specifies the time, in milliseconds, that the delay is to occur. A value of zero causes the thread to relinquish the remainder of its time slice to any other thread of equal priority that is ready to run. If there are no other threads of equal priority ready to run, the function returns immediately, and the thread continues execution. A value of INFINITE causes an infinite delay. </dd>
<dt>
<i>bAlertable</i></dt>
<dd>
Specifies whether the function may terminate early due to an I/O completion callback function or an APC. If <i>bAlertable</i> is FALSE, the function does not return until the time-out period has elapsed. If an I/O completion callback occurs, the function does not return and the I/O completion function is not executed. If an APC is queued to the thread, the function does not return and the APC function is not executed.
<p>
If <i>bAlertable</i> is TRUE and the thread that called this function is the same thread that called the extended I/O function (<a href="filesio_0660.htm"><b>ReadFileEx</b></a> or <a href="filesio_8r08.htm"><b>WriteFileEx</b></a>), the function returns when either the time-out period has elapsed or when an I/O completion callback function occurs. If an I/O completion callback occurs, the I/O completion function is called. If an APC is queued to the thread (<a href="synchro_3dk3.htm"><b>QueueUserAPC</b></a>), the function returns when either the timer-out period has elapsed or when the APC function is called.

</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value is zero if the specified time interval expired. </p>
<p>
The return value is WAIT_IO_COMPLETION if the function returned due to one or more I/O completion callback functions. This can happen only if <i>bAlertable</i> is TRUE, and if the thread that called the <b>SleepEx</b> function is the same thread that called the extended I/O function. </p>
<h4>Remarks</h4>
<p>
This function can be used with the <b>ReadFileEx</b> or <b>WriteFileEx</b> functions to suspend a thread until an I/O operation has been completed. These functions specify a completion routine that is to be executed when the I/O operation has been completed. For the completion routine to be executed, the thread that called the I/O function must be in an alertable wait state when the completion callback function occurs. A thread goes into an alertable wait state by calling either <b>SleepEx</b>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, or <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, with the function's <i>bAlertable</i> parameter set to TRUE. </p>
<p>
A thread can relinquish the remainder of its time slice by calling this function with a sleep time of zero milliseconds. </p>
<p>
You have to be careful when using <b>SleepEx</b> and code that directly or indirectly creates windows. If a thread creates any windows, it must process messages. Message broadcasts are sent to all windows in the system. If you have a thread that uses <b>SleepEx</b> with infinite delay, the system will deadlock. Two examples of code that indirectly creates windows are DDE and COM <b>CoInitialize</b>. Therefore, if you have a thread that creates windows, use <a href="synchro_2esz.htm"><b>MsgWaitForMultipleObjects</b></a> or <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, rather than <b>SleepEx</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="prothred_86sz.htm">Processes and Threads Overview</a>, <a href="prothred_3mgj.htm">Process and Thread Functions</a>, <a href="synchro_2esz.htm"><b>MsgWaitForMultipleObjects</b></a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a>, <a href="synchro_3dk3.htm"><b>QueueUserAPC</b></a>, <a href="filesio_0660.htm"><b>ReadFileEx</b></a>, <a href="prothred_7jxs.htm"><b>Sleep</b></a>, <a href="synchro_5lbs.htm"><b>WaitForMultipleObjectsEx</b></a>, <a href="synchro_5yrc.htm"><b>WaitForSingleObjectEx</b></a>, <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

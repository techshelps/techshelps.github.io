<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MsgWaitForMultipleObjects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_msgwaitformultipleobjects"></a>MsgWaitForMultipleObjects</h1>
<p>
The <b>MsgWaitForMultipleObjects</b> function returns when one of the following occurs: 
<ul>
<li>
Either any one or all of the specified objects are in the signaled state. The objects can include input event objects, which you specify using the <i>dwWakeMask</i> parameter. </li>
<li>
The time-out interval elapses. </li>
</ul>
<p>
Note that <b>MsgWaitForMultipleObjects</b> does not return if there is unread input of the specified type in the message queue after the thread has called a function to check the queue. This is because functions such as <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_peekmessage">
</object><a href=JavaScript:alink_1.Click()><b>PeekMessage</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getmessage">
</object><a href=JavaScript:alink_2.Click()><b>GetMessage</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getqueuestatus">
</object><a href=JavaScript:alink_3.Click()><b>GetQueueStatus</b></a>, and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_waitmessage">
</object><a href=JavaScript:alink_4.Click()><b>WaitMessage</b></a> check the queue and then change the state information for the queue so that the input is no longer considered new. A subsequent call to <b>MsgWaitForMultipleObjects</b> will not return until new input of the specified type arrives. The existing unread input (received prior to the last time the thread checked the queue) is ignored. </p>
<pre><code><b>DWORD MsgWaitForMultipleObjects(
  DWORD</b><i> nCount</i><b>,          </b>// number of handles in the handle array
<b>  LPHANDLE</b><i> pHandles</i><b>,     </b>// pointer to the object-handle array
<b>  BOOL</b><i> fWaitAll</i><b>,         </b>// wait for all or wait for one
<b>  DWORD</b><i> dwMilliseconds</i><b>,  </b>// time-out interval in milliseconds
<b>  DWORD</b><i> dwWakeMask</i>       // type of input events to wait for
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>nCount</i></dt>
<dd>
Specifies the number of object handles in the array pointed to by <i>pHandles</i>. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. </dd>
<dt>
<i>pHandles</i></dt>
<dd>
Pointer to an array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. 
<p>
<b>Windows NT:</b> The handles must have SYNCHRONIZE access. For more information, see <a href="accctrl_6gdv.htm">Standard Access Rights</a>. 

<p>
<b>Windows 95:</b> No handle may be a duplicate of another handle created using <b>DuplicateHandle</b>. 
</dd>
<dt>
<i>fWaitAll</i></dt>
<dd>
Specifies the wait type. If TRUE, the function returns when the states of all objects in the <i>pHandles</i> array, including input events, have been set to signaled. If FALSE, the function returns when the state of any one of the objects is set to signaled. In the latter case, the return value indicates the object whose state caused the function to return. </dd>
<dt>
<i>dwMilliseconds</i></dt>
<dd>
Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the criteria specified by the <i>fWaitAll</i> or <i>dwWakeMask</i> parameter have not been met. If <i>dwMilliseconds</i> is zero, the function tests the states of the specified objects and returns immediately. If <i>dwMilliseconds</i> is INFINITE, the function's time-out interval never elapses. </dd>
<dt>
<i>dwWakeMask</i></dt>
<dd>
Specifies input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Value</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>QS_ALLEVENTS</td>
<td width=64%>An input, WM_TIMER, WM_PAINT, WM_HOTKEY, or posted message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_ALLINPUT</td>
<td width=64%>Any message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_ALLPOSTMESSAGE</td>
<td width=64%>A posted message (other than those listed here) is in the queue. </td>
</tr>
<tr valign=top>
<td width=36%>QS_HOTKEY</td>
<td width=64%>A WM_HOTKEY message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_INPUT</td>
<td width=64%>An input message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_KEY</td>
<td width=64%>A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_MOUSE</td>
<td width=64%>A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).</td>
</tr>
<tr valign=top>
<td width=36%>QS_MOUSEBUTTON</td>
<td width=64%>A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).</td>
</tr>
<tr valign=top>
<td width=36%>QS_MOUSEMOVE</td>
<td width=64%>A WM_MOUSEMOVE message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_PAINT</td>
<td width=64%>A WM_PAINT message is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_POSTMESSAGE</td>
<td width=64%>A posted message (other than those just listed) is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_SENDMESSAGE</td>
<td width=64%>A message sent by another thread or application is in the queue.</td>
</tr>
<tr valign=top>
<td width=36%>QS_TIMER</td>
<td width=64%>A WM_TIMER message is in the queue.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value indicates the event that caused the function to return. The successful return value is one of the following: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=56%>Value</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=56%>WAIT_OBJECT_0 to <br>
(WAIT_OBJECT_0 + <i>nCount</i> – 1)</td>
<td width=44%>If <i>fWaitAll</i> is TRUE, the return value indicates that the state of all specified objects is signaled. If <i>fWaitAll</i> is FALSE, the return value minus WAIT_OBJECT_0 indicates the <i>pHandles</i> array index of the object that satisfied the wait.</td>
</tr>
<tr valign=top>
<td width=56%>WAIT_OBJECT_0 + <i>nCount</i></td>
<td width=44%>New input of the type specified in the <i>dwWakeMask</i> parameter is available in the thread's input queue. Functions such as <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_peekmessage">
</object><a href=JavaScript:alink_5.Click()><b>PeekMessage</b></a>, <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getmessage">
</object><a href=JavaScript:alink_6.Click()><b>GetMessage</b></a>, and <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_waitmessage">
</object><a href=JavaScript:alink_7.Click()><b>WaitMessage</b></a> mark messages in the queue as old messages. Therefore, after you call one of these functions, a subsequent call to <b>MsgWaitForMultipleObjects</b> will not return until new input of the specified type arrives. <p>
This value is also returned upon the occurrence of a system event that requires the thread's action, such as foreground activation. Therefore, <b>MsgWaitForMultipleObjects</b> can return even though no appropriate input is available and even if <i>dwWaitMask</i> is set to 0. If this occurs, call <b>PeekMessage</b> or <b>GetMessage</b> to process the system event before trying the call to <b>MsgWaitForMultipleObjects</b> again. </p>
</td>
</tr>
<tr valign=top>
<td width=56%>WAIT_ABANDONED_0 to <br>
(WAIT_ABANDONED_0 + <i>nCount</i> – 1)</td>
<td width=44%>If <i>fWaitAll</i> is TRUE, the return value indicates that the state of all specified objects is signaled and at least one of the objects is an abandoned mutex object. If <i>fWaitAll</i> is FALSE, the return value minus WAIT_ABANDONED_0 indicates the <i>pHandles</i> array index of an abandoned mutex object that satisfied the wait.</td>
</tr>
<tr valign=top>
<td width=56%>WAIT_TIMEOUT</td>
<td width=44%>The time-out interval elapsed and the conditions specified by the <i>fWaitAll</i> and <i>dwWakeMask</i> parameters were not satisfied.</td>
</tr>
</table><br>
<p>
If the function fails, the return valueis 0xFFFFFFFF. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>MsgWaitForMultipleObjects</b> function determines whether the wait criteria have been met. If the criteria have not been met, the calling thread enters an efficient wait state, using very little processor time while waiting for the conditions of the wait criteria to be met. </p>
<p>
When <i>fWaitAll</i> is TRUE, the function does not modify the states of the specified objects until the states of all objects have been set to signaled. For example, a mutex can be signaled, but the thread does not get ownership until the states of the other objects have also been set to signaled. In the meantime, some other thread may get ownership of the mutex, thereby setting its state to nonsignaled. </p>
<p>
When <i>fWaitAll</i> is TRUE, the function's wait is completed only when the states of all objects have been set to signaled, including the input events specified by <i>dwWaskMask</i>. Therefore, setting <i>fWaitAll</i> to TRUE prevents input from being processed until the state of all objects in the <i>pHandles</i> array have been set to signaled. For this reason, if you set <i>fWaitAll</i> to TRUE, you should use a short timeout value in <i>dwMilliseconds</i>. If you have a thread that creates windows waiting for all objects in the <i>pHandles</i> array, including input events specified by <i>dwWakeMask</i>, with no timeout interval, the system will deadlock. This is because threads that create windows must process messages. DDE sends message to all windows in the system. Therefore, if a thread creates windows, do not set the <i>fWaitAll</i> parameter to TRUE in calls to <b>MsgWaitForMultipleObjects</b> made from that thread.</p>
<p>
Before returning, a wait function modifies the state of some types of synchronization objects. Modification occurs only for the object or objects whose signaled state caused the function to return. For example, the count of a semaphore object is decreased by one. When <i>fWaitAll</i> is FALSE, and multiple objects are in the signaled state, the function chooses one of the objects to satisfy the wait; the states of the objects not selected are unaffected. </p>
<p>
The <b>MsgWaitForMultipleObjects</b> function can specify handles of any of the following object types in the <i>pHandles</i> array: 
<ul>
<li>
Change notification</li>
<li>
Console input</li>
<li>
Event</li>
<li>
Job</li>
<li>
Mutex</li>
<li>
Process</li>
<li>
Semaphore</li>
<li>
Thread</li>
<li>
Waitable timer</li>
</ul>
<p>
For more information, see <a href="synchro_5gqb.htm">Synchronization Objects</a>.</p>
<p>
The QS_ALLPOSTMESSAGE and QS_POSTMESSAGE flags differ in when they are cleared. QS_POSTMESSAGE is cleared when you call <b>GetMessage</b> or <b>PeekMessage</b>, whether or not you are filtering messages. QS_ALLPOSTMESSAGE is cleared when you call <b>GetMessage</b> or <b>PeekMessage</b> without filtering messages (<i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are 0). This can be useful when you call <b>PeekMessage</b> multiple times to get messages in different ranges. </p>
<p>
<b>Windows CE:</b> The <b>MsgWaitForMultipleObjects</b> function is implemented as a macro that calls <b>MsgWaitForMultipleObjectsEx</b>, passing 0 in the <i>dwFlags</i> parameter. </p>
<p>
Windows CE does not support the QS_HOTKEY value for the <i>dwWakeMask</i> parameter.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use user32.lib.</p>
<h4>See Also</h4>
<p>
<a href="synchro_4q3y.htm">Synchronization Overview</a>, <a href="synchro_08z7.htm">Synchronization Functions</a>, <a href="synchro_9kj6.htm"><b>CancelWaitableTimer</b></a>, <a href="synchro_8ub8.htm"><b>CreateEvent</b></a>, <a href="filesio_7wmd.htm"><b>CreateFile</b></a>, <a href="synchro_1a2g.htm"><b>CreateMutex</b></a>, <a href="prothred_9dpv.htm"><b>CreateProcess</b></a>, <a href="prothred_8b38.htm"><b>CreateRemoteThread</b></a>, <a href="synchro_9zol.htm"><b>CreateSemaphore</b></a>, <a href="prothred_4084.htm"><b>CreateThread</b></a>, <a href="filesio_9hgu.htm"><b>FindFirstChangeNotification</b></a>, <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getqueuestatus">
</object><a href=JavaScript:alink_8.Click()><b>GetQueueStatus</b></a>, <a href="conchar_7k9x.htm"><b>GetStdHandle</b></a>, <a href="synchro_6lh4.htm"><b>MsgWaitForMultipleObjectsEx</b></a> <a href="synchro_5myc.htm"><b>OpenEvent</b></a>, <a href="synchro_82pk.htm"><b>OpenMutex</b></a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="synchro_3y3p.htm"><b>OpenSemaphore</b></a>, <a href="synchro_0lv6.htm"><b>OpenWaitableTimer</b></a>, <a href="synchro_1ylw.htm"><b>PulseEvent</b></a>, <a href="synchro_4f78.htm"><b>ResetEvent</b></a>, <a href="synchro_8ut0.htm"><b>SetEvent</b></a></p>
<p>&nbsp;</p></body>
</HTML>

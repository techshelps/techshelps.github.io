<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualAllocEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualallocex"></a>VirtualAllocEx</h1>
<p>
The <b>VirtualAllocEx</b> function reserves, commits, or both, a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero, unless the MEM_RESET flag is set. </p>
<p>
The difference between the <b>VirtualAllocEx</b> function and the <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> function is that <b>VirtualAlloc</b> allocates memory within the address space of the calling process, while <b>VirtualAllocEx</b> lets you specify a process. </p>
<pre><code><b>LPVOID VirtualAllocEx(
  HANDLE</b><i> hProcess</i><b>,  </b>// process within which to allocate memory
<b>  LPVOID</b><i> lpAddress</i><b>, </b>// desired starting address of allocation
<b>  DWORD</b><i> dwSize</i><b>,     </b>// size, in bytes, of region to allocate
<b>  DWORD</b><i> flAllocationType</i><b>,</b>
<b>                    </b>// type of allocation
<b>  DWORD</b><i> flProtect</i>   // type of access protection
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to a process. The function allocates memory within the virtual address space of this process.
<p>
You must have PROCESS_VM_OPERATION access to the process. If you do not, the function fails.
</dd>
<dt>
<i>lpAddress</i></dt>
<dd>
Pointer that specifies a desired starting address for the region of pages that you want to allocate. 
<p>
If you are reserving memory, the function rounds this address down to the nearest 64-kilobyte boundary. 

<p>
If you are committing memory that is already reserved, the function rounds this address down to the nearest page boundary. To determine the size of a page on the host computer, use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsysteminfo">
</object><a href=JavaScript:alink_1.Click()><b>GetSystemInfo</b></a> function. 

<p>
If <i>lpAddress</i> is NULL, the function determines where to allocate the region. 
</dd>
<dt>
<i>dwSize</i></dt>
<dd>
Specifies the size, in bytes, of the region of memory to allocate. 
<p>
If <i>lpAddress</i> is NULL, the function rounds <i>dwSize</i> up to the next page boundary.

<p>
If <i>lpAddress</i> is not NULL, the function allocates all pages that contain one or more bytes in the range from <i>lpAddress</i> to (<i>lpAddress</i>+<i>dwSize</i>). This means, for example, that a 2-byte range that straddles a page boundary causes the function to allocate both pages.  
</dd>
<dt>
<i>flAllocationType</i></dt>
<dd>
A set of bit flags that specifies the type of memory allocation. You can set one or more of the following flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Flag</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>MEM_COMMIT</td>
<td width=67%>The function allocates actual physical storage in memory or in the paging file on disk for the specified region of memory pages. The function initializes the memory to zero. </td>
</tr>
<tr valign=top>
<td width=33%></td>
<td width=67%>An attempt to commit a memory page that is already committed does not cause the function to fail. This means that you can commit a range of pages without first determining the current commitment state of each page.<p>
If a memory page is not yet reserved, setting this flag causes the function to both reserve and commit the memory page. </p>
</td>
</tr>
<tr valign=top>
<td width=33%>MEM_RESERVE</td>
<td width=67%>The function reserves a range of the process's virtual address space without allocating any actual physical storage in memory or in the paging file on disk. <p>
Other memory allocation functions, such as <b>malloc</b> and <a href="memman_2fxf.htm"><b>LocalAlloc</b></a>, cannot use a reserved range of memory until it is released. </p>
<p>
You can commit reserved memory pages in subsequent calls to the <b>VirtualAllocEx</b> function. </p>
</td>
</tr>
<tr valign=top>
<td width=33%>MEM_RESET</td>
<td width=67%><b>Windows NT:</b> Specifies that memory pages within the range specified by <i>lpAddress</i> and <i>dwSize</i> will not be written to or read from the paging file.<p>
When you set the MEM_RESET flag, you are declaring that the contents of that range are no longer important. The range is going to be overwritten, and the application does not want the memory to migrate out to or in from the paging file.</p>
<p>
Setting this flag does not guarantee that the range operated on with MEM_RESET will contain zeroes. If you want the range to contain zeroes, decommit the memory and then recommit it.</p>
<p>
When you set the MEM_RESET flag, the <b>VirtualAllocEx</b> function ignores the value of <i>fProtect</i>. However, you must still set <i>fProtect</i> to a valid protection value, such as PAGE_NOACCESS.</p>
<p>
<b>VirtualAllocEx</b> returns an error if you set the MEM_RESET flag and the range of memory is mapped to a file. A shared view is only acceptable if it is mapped to a paging file.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>MEM_TOP_DOWN</td>
<td width=67%>The function allocates memory at the highest possible address.</td>
</tr>
</table><br>

</dd>
<dt>
<i>flProtect</i></dt>
<dd>
A set of bit flags that specifies access protection for the region of pages you are allocating. You can specify one of the following flags, along with the PAGE_GUARD and PAGE_NOCACHE protection modifier flags, as desired: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Flag</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<td width=46%>PAGE_READONLY</td>
<td width=54%>Enables read permission to the committed region of pages. An attempt to write to the committed region results in an access violation. If the system differentiates between read-only permission and execute permission, an attempt to execute code in the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_READWRITE</td>
<td width=54%>Enables both read and write permission to the committed region of pages.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_EXECUTE</td>
<td width=54%>Enables execute permission to the committed region of pages. An attempt to read or write to the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_EXECUTE_READ</td>
<td width=54%>Enables execute and read permission to the committed region of pages. An attempt to write to the committed region results in an access violation.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_EXECUTE_READWRITE</td>
<td width=54%>Enables execute, read, and write permission to the committed region of pages.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_GUARD</td>
<td width=54%>Pages in the region become guard pages. Any attempt to read from or write to a guard page causes the system to raise a STATUS_GUARD_PAGE exception and turn off the guard page status. Guard pages thus act as a one-shot access alarm.<p>
The PAGE_GUARD flag is a page protection modifier. An application uses it with one of the other page protection flags, with one exception: It cannot be used with PAGE_NOACCESS. When an access attempt leads the system to turn off guard page status, the underlying page protection takes over.</p>
<p>
If a guard page exception occurs during a system service, the service typically returns a failure status indicator.</p>
</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_NOACCESS</td>
<td width=54%>Disables all access to the committed region of pages. An attempt to read from, write to, or execute in the committed region results in an access violation exception, called a general protection (GP) fault.</td>
</tr>
<tr valign=top>
<td width=46%>PAGE_NOCACHE</td>
<td width=54%>Allows no caching of the committed regions of pages. The hardware attributes for the physical memory should be specified as "no cache." This is not recommended for general usage. It is useful for device drivers; for example, mapping a video frame buffer with no caching. This flag is a page protection modifier, only valid when used with one of the page protections other than PAGE_NOACCESS.</td>
</tr>
</table><br>


<p>
A set of bit flags that specifies access protection for the region of pages you are allocating. You can specify one of the following flags, along with the PAGE_GUARD and PAGE_NOCACHE protection modifier flags, as desired: 

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the base address of the allocated region of pages.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>VirtualAllocEx</b> function can perform the following operations: 
<ul>
<li>
Commit a region of pages reserved by a previous call to the <b>VirtualAllocEx</b>  function. </li>
<li>
Reserve a region of free pages. </li>
<li>
Reserve and commit a region of free pages. </li>
</ul>
<p>
You can use <b>VirtualAllocEx</b> to reserve a block of pages and then make additional calls to <b>VirtualAllocEx</b> to commit individual pages from the reserved block. This lets you reserve a range of a process's virtual address space without consuming physical storage until it is needed. </p>
<p>
Each page of memory in a process's virtual address space is in one of three states: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=18%>State</th>
<th align=left width=82%>Meaning</th>
</tr>
<tr valign=top>
<td width=18%>Free</td>
<td width=82%>The page is not committed or reserved and is not accessible to the process. The <b>VirtualAllocEx</b> function can reserve, or simultaneously reserve and commit, a free page.</td>
</tr>
<tr valign=top>
<td width=18%>Reserved</td>
<td width=82%>The page is reserved. The range of addresses cannot be used by other allocation functions, but the page is not accessible and has no physical storage associated with it. The <b>VirtualAllocEx</b> function can commit a reserved page, but it cannot reserve it a second time. You can use the <a href="memman_5diw.htm"><b>VirtualFreeEx</b></a> function to release a reserved page in a specified process, making it a free page.</td>
</tr>
<tr valign=top>
<td width=18%>Committed</td>
<td width=82%>Physical storage is allocated for the page, and access is controlled by a protection code. The system initializes and loads each committed page into physical memory only at the first attempt to read or write to that page. When the process terminates, the system releases the storage for committed pages. The <b>VirtualAllocEx</b> function can commit an already committed page. This means that you can commit a range of pages, regardless of whether they have already been committed, and the function will not fail. You can use the <a href="memman_5diw.htm"><b>VirtualFreeEx</b></a> function to decommit a committed page in a specified process, or to simultaneously decommit and free a committed page.</td>
</tr>
</table><br>
<p>
If the <i>lpAddress</i> parameter is not NULL, the function uses the <i>lpAddress</i> and <i>dwSize</i> parameters to compute the region of pages to be allocated. The current state of the entire range of pages must be compatible with the type of allocation specified by the <i>flAllocationType</i> parameter. Otherwise, the function fails and none of the pages is allocated. This compatibility requirement does not preclude committing an already committed page; see the preceding list. </p>
<p>
The PAGE_GUARD protection modifier flag establishes guard pages. Guard pages act as one-shot access alarms. For more information, see <a href="memman_214j.htm">Creating Guard Pages</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_6krn.htm"><b>HeapAlloc</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>, <a href="memman_0dr9.htm"><b>VirtualFree</b></a>, <a href="memman_5diw.htm"><b>VirtualFreeEx</b></a>, <a href="memman_3tt7.htm"><b>VirtualLock</b></a>, <a href="memman_30l0.htm"><b>VirtualProtect</b></a>, <a href="memman_6v7d.htm"><b>VirtualQuery</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

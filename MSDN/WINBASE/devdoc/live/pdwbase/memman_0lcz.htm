<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GlobalReAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_globalrealloc"></a>GlobalReAlloc</h1>
<p>
The <b>GlobalReAlloc</b> function changes the size or attributes of a specified global memory object. The size can increase or decrease. </p>
<p>
This function is provided only for compatibility with 16-bit versions of Windows. </p>
<pre><code><b>HGLOBAL GlobalReAlloc(
  HGLOBAL</b><i> hMem</i><b>,  </b>// handle to the global memory object
<b>  DWORD</b><i> dwBytes</i><b>, </b>// new size of the block
<b>  UINT</b><i> uFlags</i>    // how to reallocate object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hMem</i></dt>
<dd>
Handle to the global memory object to be reallocated. This handle is returned by either the <a href="memman_66qr.htm"><b>GlobalAlloc</b></a> or <b>GlobalReAlloc</b> function. </dd>
<dt>
<i>dwBytes</i></dt>
<dd>
Specifies the new size, in bytes, of the memory block. If <i>uFlags</i> specifies the GMEM_MODIFY flag, this parameter is ignored. </dd>
<dt>
<i>uFlags</i></dt>
<dd>
Specifies how to reallocate the global memory object. If the GMEM_MODIFY flag is specified, this parameter modifies the attributes of the memory object, and the <i>dwBytes</i> parameter is ignored. Otherwise, this parameter controls the reallocation of the memory object. 
<p>
The GMEM_MODIFY flag can be combined with either or both of the following flags: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Flag</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%>GMEM_DISCARDABLE</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.<p>
In Win32, you must explicitly call the <a href="memman_1ip0.htm"><b>GlobalDiscard</b></a> function to discard a block.</p>
<p>
In 16-bit Windows, allocates discardable memory, if the GMEM_MODIFY flag is also specified. This flag is ignored if the object was not previously allocated as movable or if the GMEM_MOVEABLE flag is not specified.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_MOVEABLE</td>
<td width=57%>Changes a fixed memory object to a movable memory object, if the GMEM_MODIFY flag is also specified. </td>
</tr>
</table><br>


<p>
If this parameter does not specify GMEM_MODIFY, it can also be any combination of the following flags: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Flag</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%>GMEM_NOCOMPACT</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_ZEROINIT</td>
<td width=57%>Causes the additional memory contents to be initialized to zero if the memory object is growing in size.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the reallocated memory object.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
If <b>GlobalReAlloc</b> reallocates a movable object, the return value is a handle to the memory object. To convert the handle to a pointer, use the <a href="memman_6omj.htm"><b>GlobalLock</b></a> function. </p>
<p>
If <b>GlobalReAlloc</b> reallocates a fixed object, the value of the handle returned is the address of the first byte of the memory block. To access the memory, a process can simply cast the return value to a pointer. </p>
<p>
If <b>GlobalReAlloc</b> fails, the original memory is not freed, and the original handle and pointer are still valid.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_1ip0.htm"><b>GlobalDiscard</b></a>, <a href="memman_6omj.htm"><b>GlobalLock</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

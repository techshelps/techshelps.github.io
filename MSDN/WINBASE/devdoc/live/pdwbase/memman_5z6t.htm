<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapCreate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heapcreate"></a>HeapCreate</h1>
<p>
The <b>HeapCreate</b> function creates a heap object that can be used by the calling process. The function reserves space in the virtual address space of the process and allocates physical storage for a specified initial portion of this block. </p>
<pre><code><b>HANDLE HeapCreate(
  DWORD</b><i> flOptions</i><b>,      </b>// heap allocation flag
<b>  DWORD</b><i> dwInitialSize</i><b>,  </b>// initial heap size
<b>  DWORD</b><i> dwMaximumSize</i>   // maximum heap size
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>flOptions</i></dt>
<dd>
Specifies optional attributes for the new heap. These flags will affect subsequent access to the new heap through calls to the heap functions (<a href="memman_6krn.htm"><b>HeapAlloc</b></a>, <a href="memman_7b1h.htm"><b>HeapFree</b></a>, <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a>, and <a href="memman_9l5x.htm"><b>HeapSize</b></a>). You can specify one or more of the following flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Flag</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td width=50%>HEAP_GENERATE_EXCEPTIONS</td>
<td width=50%>Specifies that the system will raise an exception to indicate a function failure, such as an out-of-memory condition, instead of returning NULL.</td>
</tr>
<tr valign=top>
<td width=50%>HEAP_NO_SERIALIZE</td>
<td width=50%>Specifies that mutual exclusion will not be used when the heap functions allocate and free memory from this heap. The default, when the HEAP_NO_SERIALIZE flag is not specified, is to serialize access to the heap. Serialization of heap access allows two or more threads to simultaneously allocate and free memory from the same heap.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwInitialSize</i></dt>
<dd>
Specifies the initial size, in bytes, of the heap. This value determines the initial amount of physical storage that is allocated for the heap. The value is rounded up to the next page boundary. To determine the size of a page on the host computer, use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsysteminfo">
</object><a href=JavaScript:alink_1.Click()><b>GetSystemInfo</b></a> function. </dd>
<dt>
<i>dwMaximumSize</i></dt>
<dd>
If <i>dwMaximumSize</i> is a nonzero value, it specifies the maximum size, in bytes, of the heap. The <b>HeapCreate </b>function rounds <i>dwMaximumSize</i> up to the next page boundary, and then reserves a block of that size in the process's virtual address space for the heap. If allocation requests made by the <a href="memman_6krn.htm"><b>HeapAlloc</b></a> or <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a><b> </b>functions exceed the initial amount of physical storage specified by <i>dwInitialSize</i>, the system allocates additional pages of physical storage for the heap, up to the heap's maximum size. 
<p>
In addition, if <i>dwMaximumSize</i> is nonzero, the heap cannot grow, and an absolute limitation arises: the maximum size of a memory block in the heap is a bit less than 0x7FFF8 bytes. Requests to allocate larger blocks will fail, even if the maximum size of the heap is large enough to contain the block.

<p>
If <i>dwMaximumSize</i> is zero, it specifies that the heap is growable. The heap's size is limited only by available memory. Requests to allocate blocks larger than 0x7FFF8 bytes do not automatically fail; the system calls <a href="memman_3elf.htm"><b>VirtualAlloc</b></a> to obtain the memory needed for such large blocks. Applications that need to allocate large memory blocks should set <i>dwMaximumSize</i> to zero.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the newly created heap.</p>
<p>
If the function fails, the return value is is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The <b>HeapCreate</b> function creates a private heap object from which the calling process can allocate memory blocks by using the <a href="memman_6krn.htm"><b>HeapAlloc</b></a> function. The initial size determines the number of committed pages that are initially allocated for the heap. The maximum size determines the total number of reserved pages. These pages create a block in the process's virtual address space into which the heap can grow. If requests by <b>HeapAlloc</b> exceed the current size of committed pages, additional pages are automatically committed from this reserved space, assuming that the physical storage is available. </p>
<p>
The memory of a private heap object is accessible only to the process that created it. If a dynamic-link library (DLL) creates a private heap, the heap is created in the address space of the process that called the DLL, and it is accessible only to that process. </p>
<p>
The system uses memory from the private heap to store heap support structures, so not all of the specified heap size is available to the process. For example, if the <a href="memman_6krn.htm"><b>HeapAlloc</b></a> function requests 64 kilobytes (K) from a heap with a maximum size of 64K, the request may fail because of system overhead. </p>
<p>
If the HEAP_NO_SERIALIZE flag is not specified (the simple default), the heap will serialize access within the calling process. Serialization ensures mutual exclusion when two or more threads attempt to simultaneously allocate or free blocks from the same heap. There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. </p>
<p>
Setting the HEAP_NO_SERIALIZE flag eliminates mutual exclusion on the heap. Without serialization, two or more threads that use the same heap handle might attempt to allocate or free memory simultaneously, likely causing corruption in the heap. The HEAP_NO_SERIALIZE flag can, therefore, be safely used only in the following situations: 
<ul>
<li>
The process has only one thread. </li>
<li>
The process has multiple threads, but only one thread calls the heap functions for a specific heap. </li>
<li>
The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap. </li>
</ul>
<p>
<b>Windows CE:</b> Windows CE does not support the HEAP_GENERATE_EXCEPTIONS value for the <i>flOptions</i> parameter. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a>, <a href="memman_3pir.htm"><b>GetProcessHeaps</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsysteminfo">
</object><a href=JavaScript:alink_2.Click()><b>GetSystemInfo</b></a>, <a href="memman_6krn.htm"><b>HeapAlloc</b></a>, <a href="memman_862h.htm"><b>HeapDestroy</b></a>, <a href="memman_7b1h.htm"><b>HeapFree</b></a>, <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a>, <a href="memman_9l5x.htm"><b>HeapSize</b></a>, <a href="memman_53z9.htm"><b>HeapValidate</b></a>, <a href="memman_3elf.htm"><b>VirtualAlloc</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a></p>
<p>&nbsp;</p></body>
</HTML>

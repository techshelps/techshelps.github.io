<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heapalloc"></a>HeapAlloc</h1>
<p>
The <b>HeapAlloc</b> function allocates a block of memory from a heap. The allocated memory is not movable. </p>
<pre><code><b>LPVOID HeapAlloc(
  HANDLE</b><i> hHeap</i><b>,  </b>// handle to the private heap block
<b>  DWORD</b><i> dwFlags</i><b>, </b>// heap allocation control flags
<b>  DWORD</b><i> dwBytes</i>  // number of bytes to allocate
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHeap</i></dt>
<dd>
Specifies the heap from which the memory will be allocated. This parameter is a handle returned by the <a href="memman_5z6t.htm"><b>HeapCreate</b></a> or <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a> function. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Specifies several controllable aspects of heap allocation. Specifying any of these flags will override the corresponding flag specified when the heap was created with <b>HeapCreate</b>. You can specify one or more of the following flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Flag</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td width=50%>HEAP_GENERATE_EXCEPTIONS</td>
<td width=50%>Specifies that the system will raise an exception to indicate a function failure, such as an out-of-memory condition, instead of returning NULL.</td>
</tr>
<tr valign=top>
<td width=50%>HEAP_NO_SERIALIZE</td>
<td width=50%>Specifies that mutual exclusion will not be used while the <b>HeapAlloc</b> function is accessing the heap. <p>
This flag should not be specified when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap. </p>
</td>
</tr>
<tr valign=top>
<td width=50%>HEAP_ZERO_MEMORY</td>
<td width=50%>Specifies that the allocated memory will be initialized to zero. Otherwise, the memory is not initialized to zero.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwBytes</i></dt>
<dd>
Specifies the number of bytes to be allocated. 
<p>
If the heap specified by the <i>hHeap</i> parameter is a "non-growable" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the HeapCreate function with a nonzero value.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a pointer to the allocated memory block. </p>
<p>
If the function fails and you have not specified HEAP_GENERATE_EXCEPTIONS, the return value is NULL. </p>
<p>
If the function fails and you have specified HEAP_GENERATE_EXCEPTIONS, the function may generate the following exceptions:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Value</th>
<th align=left width=56%>Meaning</th>
</tr>
<tr valign=top>
<td width=44%>STATUS_NO_MEMORY</td>
<td width=56%>The allocation attempt failed because of a lack of available memory or heap corruption.</td>
</tr>
<tr valign=top>
<td width=44%>STATUS_ACCESS_VIOLATION</td>
<td width=56%>The allocation attempt failed because of heap corruption or improper function parameters.</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;Heap corruption can lead to either exception. It depends upon the nature of the heap corruption.</p>
<p>
If the function fails, it does not call <b>SetLastError</b>. An application cannot call <b>GetLastError</b> for extended error information.</p>
<h4>Remarks</h4>
<p>
If <b>HeapAlloc</b> succeeds, it allocates at least the amount of memory requested. If the actual amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual size of the allocated block, use the <b>HeapSize</b> function. </p>
<p>
To free a block of memory allocated by <b>HeapAlloc</b>, use the <b>HeapFree</b> function. </p>
<p>
Memory allocated by <b>HeapAlloc</b> is not movable. Since the memory is not movable, it is possible for the heap to become fragmented. </p>
<p>
Serialization ensures mutual exclusion when two or more threads attempt to simultaneously allocate or free blocks from the same heap. There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. Setting the HEAP_NO_SERIALIZE flag eliminates mutual exclusion on the heap. Without serialization, two or more threads that use the same heap handle might attempt to allocate or free memory simultaneously, likely causing corruption in the heap. The HEAP_NO_SERIALIZE flag can, therefore, be safely used only in the following situations: 
<ul>
<li>
The process has only one thread. </li>
<li>
The process has multiple threads, but only one thread calls the heap functions for a specific heap. </li>
<li>
The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap. </li>
</ul>
<p>
<b>Windows CE:</b> Windows CE does not support the HEAP_GENERATE_EXCEPTIONS value for the <i>dwFlags </i>parameter.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a>, <a href="memman_5z6t.htm"><b>HeapCreate</b></a>, <a href="memman_862h.htm"><b>HeapDestroy</b></a>, <a href="memman_7b1h.htm"><b>HeapFree</b></a>, <a href="memman_6ahv.htm"><b>HeapReAlloc</b></a>, <a href="memman_9l5x.htm"><b>HeapSize</b></a>, <a href="errors_48tu.htm"><b>SetLastError</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

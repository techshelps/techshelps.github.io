<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LocalReAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_localrealloc"></a>LocalReAlloc</h1>
<p>
The <b>LocalReAlloc</b> function changes the size or the attributes of a specified local memory object. The size can increase or decrease. </p>
<p>
This function is provided only for compatibility with 16-bit versions of Windows. </p>
<pre><code><b>HLOCAL LocalReAlloc(
  HLOCAL</b><i> hMem</i><b>,  </b>// handle to the local memory object
<b>  UINT</b><i> uBytes</i><b>,  </b>// new size of block
<b>  UINT</b><i> uFlags</i>   // how to reallocate object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hMem</i></dt>
<dd>
Handle to the local memory object to be reallocated. This handle is returned by either the <a href="memman_2fxf.htm"><b>LocalAlloc</b></a> or <b>LocalReAlloc</b> function. </dd>
<dt>
<i>uBytes</i></dt>
<dd>
New size, in bytes, of the memory block. If <i>uFlags</i> specifies the LMEM_MODIFY flag, this parameter is ignored. </dd>
<dt>
<i>uFlags</i></dt>
<dd>
Flag that specifies how to reallocate the local memory object. If the LMEM_MODIFY flag is specified, this parameter modifies the attributes of the memory object, and the <i>uBytes</i> parameter is ignored. Otherwise, this parameter controls the reallocation of the memory object. 
<p>
The LMEM_MODIFY flag can be combined with either or both of the following flags: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Flag</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>LMEM_DISCARDABLE</td>
<td width=64%>Ignored. This flag is provided only for compatibility with 16-bit Windows.<p>
In Win32, you must explicitly call the <a href="memman_2l7o.htm"><b>LocalDiscard</b></a> function to discard a block.</p>
<p>
In 16-bit Windows, this flag allocates discardable memory if the LMEM_MODIFY flag is also specified. This flag is ignored if the object was not previously allocated as movable or if the LMEM_MOVEABLE flag is not specified.</p>
</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_MOVEABLE</td>
<td width=64%>You cannot combine LMEM_MOVEABLE with LMEM_MODIFY to change a fixed memory object into a movable one. If you do so, the function returns an error.</td>
</tr>
</table><br>


<p>
If this parameter does not specify LMEM_MODIFY, this parameter can be any combination of the following flags: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Flag</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>LMEM_MOVEABLE</td>
<td width=64%>In 16-bit Windows, if <i>uBytes</i> is zero, this flag discards a previously movable and discardable memory block. If the object's lock count is not zero or the block is not movable and discardable, the function fails. If <i>uBytes</i> is nonzero, this flag enables the system to move the reallocated block to a new location without changing the movable or fixed attribute of the memory object. If the object is fixed, the handle returned may be different from the handle specified in the <i>hMem</i> parameter. If the object is movable, the block can be moved without invalidating the handle, even if the object is currently locked by a previous call to the <a href="memman_5j57.htm"><b>LocalLock</b></a> function. To get the new address of the memory block, use <b>LocalLock</b>.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_NOCOMPACT</td>
<td width=64%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=36%>LMEM_ZEROINIT</td>
<td width=64%>Causes the additional memory contents to be initialized to zero if the memory object is growing in size.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the reallocated memory object.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <b>GetLastError</b>. </p>
<h4>Remarks</h4>
<p>
If <b>LocalReAlloc</b> fails, the original memory is not freed, and the original handle and pointer are still valid.</p>
<p>
If <b>LocalReAlloc</b> reallocates a movable object, the return value is a handle to the memory object. To convert the handle to a pointer, use the <a href="memman_5j57.htm"><b>LocalLock</b></a> function. </p>
<p>
If <b>LocalReAlloc</b> reallocates a fixed object, the value of the handle returned is the address of the first byte of the memory block. To access the memory, a process can simply cast the return value to a pointer. </p>
<p>
<b>Windows CE:</b> Windows CE does not support the LMEM_DISCARDABLE and LMEM_NOCOMPACT flags for the <i>uFlags</i> parameter. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_2fxf.htm"><b>LocalAlloc</b></a>, <a href="memman_2339.htm"><b>LocalFree</b></a>, <a href="memman_5j57.htm"><b>LocalLock</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

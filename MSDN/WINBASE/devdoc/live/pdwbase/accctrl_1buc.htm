<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Security Descriptor for a New Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_security_descriptor_for_a_new_object"></a>Creating a Security Descriptor for a New Object</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The following example creates a security descriptor for a new registry key. The example initializes an <a href="accctrl_2xgy.htm"><b>ACTRL_ACCESS_ENTRY</b></a> structure with information about an access-allowed ACE for the key's DACL. The <a href="accctrl_8khg.htm"><b>SetEntriesInAccessList</b></a> function creates an <a href="accctrl_91wy.htm"><b>ACTRL_ACCESS</b></a> buffer containing the new ACE information. The example then calls the <a href="accctrl_0nua.htm"><b>ConvertAccessToSecurityDescriptor</b></a> function to create a security descriptor from the <b>ACTRL_ACCESS</b> buffer. Finally, the example assigns the security descriptor to a <a href="accctrl_8gs2.htm"><b>SECURITY_ATTRIBUTES</b></a> structure which is then passed to the <a href="regapi_1woo.htm"><b>RegCreateKeyEx</b></a> function.  </p>
<p>
<b>Note</b>&nbsp;&nbsp;The security functions must use the provider-independent access rights, such as ACTRL_REG_LIST, and <b>RegCreateKeyEx</b> uses the Windows NT-specific access rights, such as KEY_READ.</p>
<pre><code>ACTRL_ACCESS_ENTRY      AccessEntry;
PACTRL_ACCESS           pAccessList;
DWORD                   dwErr, dwDisposition;
PSECURITY_DESCRIPTOR    pSD;
SECURITY_ATTRIBUTES sa;
LONG lRes;
HKEY hk, hkSub;

// Initialize the access list entry.

ZeroMemory (&amp;AccessEntry, sizeof(ACTRL_ACCESS_ENTRY) );
BuildTrusteeWithName(&amp;(AccessEntry.Trustee), "george");
AccessEntry.Inheritance = NO_INHERITANCE;
AccessEntry.fAccessFlags = ACTRL_ACCESS_ALLOWED;

// Set provider-independent rights for registry objects.

AccessEntry.Access = ACTRL_REG_LINK | ACTRL_REG_CREATE_CHILD | 
         ACTRL_REG_LIST | ACTRL_REG_NOTIFY | 
         ACTRL_REG_QUERY | ACTRL_REG_SET;

// Build an access list from the access list entry.

dwErr = SetEntriesInAccessList(
     1,                  // Number of entries in array
     AccessEntry,        // array of entries
     SET_ACCESS,         // replace any existing items
     NULL,               // property name
     NULL,               // existing access list
     &amp;pAccessList);      // receives new access list

// Initialize a security descriptor from the access list.

dwErr = ConvertAccessToSecurityDescriptor(
    pAccessList,    // pointer to the access-control information
    NULL,           // pointer to the audit-control information
    NULL,           // name of the object's owner 
    NULL,           // name of the object's primary group
    &amp;pSD            // receives pointer to security descriptor
   );    

// Initialize a security attributes structure.

sa.nLength = sizeof (SECURITY_ATTRIBUTES);
sa.lpSecurityDescriptor = pSD;
sa.bInheritHandle = TRUE;

// Use the security attributes to create a key.

lRes = RegCreateKeyEx(hk, "mykey", 0, "", 0, 
        KEY_READ | KEY_WRITE, &amp;sa, &amp;hkSub, &amp;dwDisposition); 

// Free the returned buffers.

if (pAccessList) 
    LocalFree(pAccessList);
if (pSD) 
    LocalFree(pSD);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

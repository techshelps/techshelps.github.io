<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Order of ACEs in a DACL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_order_of_aces_in_a_dacl"></a>Order of ACEs in a DACL</h3>
<p>
When a process tries to access a securable object, the system steps through the ACEs in the object<u>'</u>s DACL until it finds ACEs that allow or deny the requested access. The access rights that a DACL allows a user could vary depending on the order of ACEs in the DACL. Consequently, Microsoft defines a preferred order for ACEs in the DACL of a securable object. The preferred order provides a simple framework that makes it easy to be assured that an access-denied ACE actually denies access. For more information about the system<u>'</u>s algorithm for checking access, see <a href="accctrl_6790.htm">Checking a Thread's Access to an Object</a>. </p>
<p>
For Windows NT versions 4.0 and earlier, the preferred order of ACEs is simple: In a DACL, all access-denied ACEs should precede any access-allowed ACEs. The <b>SetEntriesInAcl</b> function creates a DACL with ACEs in this order. However, the low-level functions for adding ACEs to a DACL do not enforce the preferred order. The <b>AddAce</b> function adds ACEs at a specified location in an ACL. Functions such as <b>AddAccessAllowedAce</b> add an ACE to the end of an ACL. It is the caller's responsibility to ensure that the ACEs are added in the preferred order.  </p>
<p>
The following diagram illustrates how the same ACEs can allow different access rights, depending on their order in the DACL. The system denies access to object A when it reads the access-denied ACE; but the out-of-order DACL for Object B causes the system to grant access without reading the access-denied ACE.</p>
<p>
<img src="images/accctrl3.gif" border=0></p>
<p>
For Windows NT version 5.0 and later, the proper order of ACEs is more complicated because of the introduction of object-specific ACEs and automatic inheritance. When called for objects on Windows NT, the <b>SetSecurityInfoEx</b> and <b>SetNamedSecurityInfoEx</b> functions build an object's DACL using the preferred order. For objects on other systems, the ordering of access-control information depends on the provider.</p>
<p>
The following describes the preferred order for Windows NT version 5.0 and later. 
<ul>
<li>
To ensure that noninherited ACEs have precedence over inherited ACEs, place all noninherited ACEs in a group before any inherited ACEs. This ordering ensures, for example, that a noninherited access-denied ACE is enforced regardless of any inherited ACE that allows access. </li>
<li>
Within the groups of noninherited ACEs and inherited ACEs, order ACEs according to ACE type, as shown following: <ol>
<li>
Access-denied ACEs that apply to the object itself</li>
<li>
Access-denied ACEs that apply to a subobject of the object, such as a property set or property</li>
<li>
Access-allowed ACEs that apply to the object itself</li>
<li>
Access-allowed ACEs that apply to a subobject of the object</li>
</ol>
</li>
</ul>
<p>
Of course, not all ACE types are required in an ACL.</p>
<p>
Functions such as <b>AddAccessAllowedAceEx</b> and <b>AddAccessAllowedObjectAce</b> add an ACE to the end of an ACL. It is the caller's responsibility to ensure that the ACEs are added in the proper order. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VirtualFreeVlm</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_virtualfreevlm"></a>VirtualFreeVlm</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>VirtualFreeVlm</b> function decommits a memory region within the VLM address space of the specified process. </p>
<pre><code><b>BOOL VirtualFreeVlm(
  HANDLE</b> <i>hProcess</i><b>,</b>   // process within which to free memory
<b>  PVOID64</b><i> lpAddress</i>, // address of region of pages to free
<b>  DWORDLONG</b><i> ullSize</i>, // size in bytes of region
<b>  DWORD</b><i> dwFreeType</i>   // type of free operation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProcess</i></dt>
<dd>
Handle to a process. <b>VirtualFreeVlm</b> frees memory within the virtual address space of this process. The calling process must have had the PROCESS_VM_OPERATION flag set on a preceding call to the <a href="prothred_478z.htm"><b>OpenProcess</b></a> function, indicating virtual memory access to the target process, or <b>VirtualFreeVlm</b> fails. </dd>
<dt>
<i>lpAddress</i></dt>
<dd>
Pointer to the base address of the region of the memory to free. The <i>lpAddress </i>parameter must point to the base address returned by the <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> function when the region was reserved. </dd>
<dt>
<i>ullSize</i></dt>
<dd>
Size, in bytes, of the region to release. If the <i>dwFreeType</i> parameter includes the MEM_RELEASE flag, the <i>ullSize </i>parameter must be zero. Otherwise, the region of affected pages includes all pages containing one or more bytes in the range from the value of <i>lpAddress</i> to the value of <i>lpAddress</i> plus the value of <i>ullSize</i>. This functionality means that freeing a 2-byte range straddling a page boundary causes both pages to be freed.
<p>
The release can be done only on the whole virtual space region reserved, whereas decommitting can be performed on subareas of a reserved and committed region. Decommitting an uncommitted area has no effect.
</dd>
<dt>
<i>dwFreeType</i></dt>
<dd>
Type of memory deallocation operation. You can specify one of the following flags.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>MEM_DECOMMIT</td>
<td width=67%>Releases the specified region of pages. The pages enter the free state. If you specify this flag and <i>ullSize</i> contains zero, the entire region of pages is decommitted.  Otherwise, you must specify <i>lpAddress</i> and <i>ullSize</i> values that are within the range returned by <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> when the region was reserved.  Note that MEM_DECOMMIT only results in the releasing of pages — the virtual address space remains reserved and cannot be reused unless a MEM_RELEASE flag is passed. For more information on reservation of virtual address space, see the discussion of the MEM_RESERVE flag in the <b>VirtualAllocMem</b> topic.</td>
</tr>
<tr valign=top>
<td width=33%></td>
<td width=67%>An attempt to decommit an uncommitted page does not cause <b>VirtualFreeVlm</b> to fail. Thus, a range of committed or uncommitted pages can be decommitted without causing a failure.</td>
</tr>
<tr valign=top>
<td width=33%>MEM_RELEASE</td>
<td width=67%>Releases the specified region of pages. The pages enter the free state. If you specify this flag, <i>ullSize</i> must be zero and <i>lpAddress</i> must point to the base address returned by <b>VirtualAllocVlm</b> when the region was reserved. <b>VirtualFreeVlm</b> fails if either of these conditions is not met.  If <b>VirtualFreeVlm</b> succeeds, both the pages and the range of virtual address space are relinquished.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
<b>VirtualFreeVlm</b> decommits memory allocated with <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a>. <b>VirtualFreeVlm</b> can perform one of the following operations: 
<ul>
<li>
Decommit a region of committed or uncommitted pages. </li>
<li>
Release a region of reserved pages. </li>
<li>
Decommit and release a region of committed or uncommitted pages. </li>
</ul>
<p>
To release a region of pages, the entire range of pages must be in the same state (all reserved or all committed) and the entire region originally reserved by <b>VirtualAllocVlm</b> must be released at the same time. If only part of the pages in the original reserved region are committed, you must first call <b>VirtualFreeVlm</b> to decommit the committed pages and then call <b>VirtualFreeVlm</b> again to release the entire block. </p>
<p>
Pages that have been released are free and available for subsequent allocation operations. Attempting to read from or write to a free page results in an access violation exception. </p>
<p>
<b>VirtualFreeVlm</b> can decommit an uncommitted page; this means that a range of committed or uncommitted pages can be decommitted without having to worry about a failure. Decommitting a page releases its physical storage from memory. If a page is decommitted but not released, its state changes to reserved and it can be committed again by a subsequent call to <b>VirtualAllocVlm</b>. Attempting to read from or write to a reserved page results in an access violation exception. </p>
<p>
The current state of the entire range of pages to be decommitted must be compatible with the type of free operation specified by the <i>dwFreeType</i> parameter. Otherwise, <b>VirtualFreeVlm</b> fails and no pages are released or decommitted. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_0rz3.htm">Very Large Memory (VLM)</a>, <a href="memman_66qr.htm"><b>GlobalAlloc</b></a>, <a href="memman_38kl.htm"><b>GlobalFree</b></a>, <a href="prothred_478z.htm"><b>OpenProcess</b></a>, <a href="memman_0dr9.htm"><b>VirtualFree</b></a>, <a href="memman_9drh.htm"><b>VirtualAllocVlm</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

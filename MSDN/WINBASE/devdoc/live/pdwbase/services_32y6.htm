<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Main Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_the_main_function"></a>The main Function</h3>
<p>
Service programs are generally written as console applications. The entry point of a console application is the <b>main</b> function. The main function receives arguments from the <b>ImagePath</b> value from the registry key for the service. </p>
<p>
When the SCM starts a service program, it waits for it to call the <a href="services_69wy.htm"><b>StartServiceCtrlDispatcher</b></a> function. Use the following guidelines. 
<ul>
<li>
A service of type SERVICE_WIN32_OWN_PROCESS should call <b>StartServiceCtrlDispatcher</b> immediately, from its main thread. You can perform any initialization after the service starts, as described in <a href="services_81wu.htm">The ServiceMain Function</a>. </li>
<li>
If the service type is SERVICE_WIN32_SHARE_PROCESS and there is common initialization for all services in the program, you can perform the initialization in the main thread before calling <b>StartServiceCtrlDispatcher</b>, as long as it takes less than 30 seconds. Otherwise, you must create another thread to do the common initialization, while the main thread calls <b>StartServiceCtrlDispatcher</b>. You should still perform any service-specific initialization as described in <a href="services_81wu.htm">The ServiceMain Function</a>. </li>
</ul>
<p>
The <a href="services_69wy.htm"><b>StartServiceCtrlDispatcher</b></a> function takes a <a href="services_9xpu.htm"><b>SERVICE_TABLE_ENTRY</b></a> structure for each service contained in the process. Each structure specifies the service name and the entry point for the service. </p>
<p>
If <b>StartServiceCtrlDispatcher</b> succeeds, the calling thread does not return until all running services in the process have terminated. The SCM sends control requests to this thread through a named pipe. The thread acts as a <i>control dispatcher</i>, performing the following tasks: 
<ul>
<li>
Create a new thread to call the appropriate entry point when a new service is started. </li>
<li>
Call the appropriate <a href="services_18oi.htm"><b>Handler</b></a> function to handle service control requests. </li>
</ul>
<p>
For more information, see <a href="services_0hm6.htm">Writing a Service Program's main Function</a>. </p>
<p>&nbsp;</p></body>
</HTML>

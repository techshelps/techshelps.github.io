<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetWindowsHookEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setwindowshookex"></a>SetWindowsHookEx</h1>
<p>
The <b>SetWindowsHookEx</b> function installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the system. </p>
<pre><code><b>HHOOK SetWindowsHookEx(
  int</b><i> idHook</i><b>,        </b>// type of hook to install
<b>  HOOKPROC</b><i> lpfn</i><b>,     </b>// address of hook procedure
<b>  HINSTANCE</b><i> hMod</i><b>,    </b>// handle to application instance
<b>  DWORD</b><i> dwThreadId</i>   // identity of thread to install hook for
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>idHook</i></dt>
<dd>
Specifies the type of hook procedure to be installed. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Value</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>WH_CALLWNDPROC</td>
<td width=57%>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <a href="hooks_8qeb.htm"><b>CallWndProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_CALLWNDPROCRET</td>
<td width=57%>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the <a href="hooks_4kyr.htm"><b>CallWndRetProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_CBT</td>
<td width=57%>Installs a hook procedure that receives notifications useful to a computer-based training (CBT) application. For more information, see the <a href="hooks_6e5f.htm"><b>CBTProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_DEBUG</td>
<td width=57%>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="hooks_6bvn.htm"><b>DebugProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_FOREGROUNDIDLE</td>
<td width=57%>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="hooks_3cmb.htm"><b>ForegroundIdleProc</b></a> hook procedure. </td>
</tr>
<tr valign=top>
<td width=43%>WH_GETMESSAGE</td>
<td width=57%>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="hooks_6q77.htm"><b>GetMsgProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_JOURNALPLAYBACK</td>
<td width=57%>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure. For more information, see the <a href="hooks_0aoz.htm"><b>JournalPlaybackProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_JOURNALRECORD</td>
<td width=57%>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="hooks_4t9f.htm"><b>JournalRecordProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_KEYBOARD</td>
<td width=57%>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="hooks_8k6b.htm"><b>KeyboardProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_KEYBOARD_LL</td>
<td width=57%><b>Windows NT:</b> Installs a hook procedure that monitors low-level keyboard input events. For more information, see the <a href="hooks_6fc3.htm"><b>LowLevelKeyboardProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_MOUSE</td>
<td width=57%>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="hooks_9483.htm"><b>MouseProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_MOUSE_LL</td>
<td width=57%><b>Windows NT:</b> Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="hooks_921v.htm"><b>LowLevelMouseProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_MSGFILTER</td>
<td width=57%>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="hooks_852b.htm"><b>MessageProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_SHELL</td>
<td width=57%>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="hooks_8gpv.htm"><b>ShellProc</b></a> hook procedure.</td>
</tr>
<tr valign=top>
<td width=43%>WH_SYSMSGFILTER</td>
<td width=57%>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the system. For more information, see the <a href="hooks_4zab.htm"><b>SysMsgProc</b></a> hook procedure.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpfn</i></dt>
<dd>
Pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a dynamic-link library (DLL). Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process. </dd>
<dt>
<i>hMod</i></dt>
<dd>
Handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to NULL if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process. </dd>
<dt>
<i>dwThreadId</i></dt>
<dd>
Specifies the identifier of the thread with which the hook procedure is to be associated. If this parameter is zero, the hook procedure is associated with all existing threads. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the handle to the hook procedure. </p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
An error may occur if the <i>hMod</i> parameter is NULL and the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by another process. </p>
<p>
Calling the <a href="hooks_57aw.htm"><b>CallNextHookEx</b></a> function to chain to the next hook procedure is optional, but it is highly recommended; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. You should call <b>CallNextHookEx</b> unless you absolutely need to prevent the notification from being seen by other applications. </p>
<p>
Before terminating, an application must call the <a href="hooks_6fy0.htm"><b>UnhookWindowsHookEx</b></a> function to free system resources associated with the hook. </p>
<p>
The scope of a hook depends on the hook type. Some hooks can be set only with system scope; others can also be set for only a specific thread, as shown in the following list: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=39%>Hook</th>
<th align=left width=61%>Scope</th>
</tr>
<tr valign=top>
<td width=39%>WH_CALLWNDPROC</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_CALLWNDPROCRET</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_CBT</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_DEBUG</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_FOREGROUNDIDLE</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_GETMESSAGE</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_JOURNALPLAYBACK</td>
<td width=61%>System only</td>
</tr>
<tr valign=top>
<td width=39%>WH_JOURNALRECORD</td>
<td width=61%>System only</td>
</tr>
<tr valign=top>
<td width=39%>WH_KEYBOARD</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_KEYBOARD_LL</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_MOUSE</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_MOUSE_LL</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_MSGFILTER</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_SHELL</td>
<td width=61%>Thread or system</td>
</tr>
<tr valign=top>
<td width=39%>WH_SYSMSGFILTER</td>
<td width=61%>System only</td>
</tr>
</table><br>
<p>
For a specified hook type, thread hooks are called first, then system hooks. </p>
<p>
The system hooks are a shared resource, and installing one affects all applications. All system hook functions must be in libraries. System hooks should be restricted to special-purpose applications or to use as a development aid during application debugging. Libraries that no longer need a hook should remove the hook procedure. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use user32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="hooks_9rg3.htm">Hooks Overview</a>, <a href="hooks_31bn.htm">Hook Functions</a>, <a href="hooks_57aw.htm"><b>CallNextHookEx</b></a>, <a href="hooks_8qeb.htm"><b>CallWndProc</b></a>, <a href="hooks_4kyr.htm"><b>CallWndRetProc</b></a>, <a href="hooks_6e5f.htm"><b>CBTProc</b></a>, <a href="hooks_6bvn.htm"><b>DebugProc</b></a>, <a href="hooks_3cmb.htm"><b>ForegroundIdleProc</b></a>, <a href="hooks_6q77.htm"><b>GetMsgProc</b></a>, <a href="hooks_0aoz.htm"><b>JournalPlaybackProc</b></a>, <a href="hooks_4t9f.htm"><b>JournalRecordProc</b></a>, <a href="hooks_6fc3.htm"><b>LowLevelKeyboardProc</b></a>, <a href="hooks_921v.htm"><b>LowLevelMouseProc</b></a> <a href="hooks_8k6b.htm"><b>KeyboardProc</b></a>, <a href="hooks_9483.htm"><b>MouseProc</b></a>, <a href="hooks_852b.htm"><b>MessageProc</b></a>, <a href="hooks_8gpv.htm"><b>ShellProc</b></a>, <a href="hooks_4zab.htm"><b>SysMsgProc</b></a>, <a href="hooks_6fy0.htm"><b>UnhookWindowsHookEx</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

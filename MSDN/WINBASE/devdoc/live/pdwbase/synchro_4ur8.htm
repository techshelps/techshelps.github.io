<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Synchronization and Overlapped Input and Output</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_synchronization_and_overlapped_input_and_output"></a>Synchronization and Overlapped Input and Output</h2>
<p>
The Win32 API supports both synchronous and asynchronous (or overlapped) I/O operations on files, named pipes, and serial communications devices. The <a href="filesio_3kkl.htm"><b>WriteFile</b></a>, <a href="filesio_39id.htm"><b>ReadFile</b></a>, <a href="devio_9quk.htm"><b>DeviceIoControl</b></a>, <a href="commun_4bck.htm"><b>WaitCommEvent</b></a>, <a href="pipes_3885.htm"><b>ConnectNamedPipe</b></a>, and <a href="pipes_7plx.htm"><b>TransactNamedPipe</b></a> functions can be performed either synchronously or asynchronously. The <a href="filesio_0660.htm"><b>ReadFileEx</b></a> and <a href="filesio_8r08.htm"><b>WriteFileEx</b></a> functions can be performed asynchronously only. </p>
<p>
When a function is executed synchronously, it does not return until the operation has been completed. This means that the execution of the calling thread can be blocked for an indefinite period while it waits for a time-consuming operation to finish. Functions called for overlapped operation can return immediately, even though the operation has not been completed. This enables a time-consuming I/O operation to be executed in the background while the calling thread is free to perform other tasks. For example, a single thread can perform simultaneous I/O operations on different handles, or even simultaneous read and write operations on the same handle. </p>
<p>
To synchronize its execution with the completion of the overlapped operation, the calling thread uses the <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a> function or one of the <a href="synchro_5vqr.htm">wait functions</a> to determine when the overlapped operation has been completed. You can also use the <a href="synchro_738k.htm"><b>HasOverlappedIoCompleted</b></a> macro to poll for completion.</p>
<p>
To cancel all pending asynchronous I/O operations, use the <a href="filesio_06gf.htm"><b>CancelIo</b></a> function. This function only cancels operations issued by the calling thread for the specified file handle. </p>
<p>
Overlapped operations require a file, named pipe, or communications device that was created with the FILE_FLAG_OVERLAPPED flag. To call a function to perform an overlapped operation, the calling thread must specify a pointer to an <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure. If this pointer is NULL, the function return value may incorrectly indicate that the operation completed. The <b>OVERLAPPED</b> structure must contain a handle to a manual-reset — not an auto-reset — event object. The system sets the state of the event object to nonsignaled when a call to the I/O function returns before the operation has been completed. The system sets the state of the event object to signaled when the operation has been completed. </p>
<p>
When a function is called to perform an overlapped operation, it is possible that the operation will be completed before the function returns. When this happens, the results are handled as if the operation had been performed synchronously. If the operation was not completed, however, the function's return value is FALSE, and the <a href="errors_3uwi.htm"><b>GetLastError</b></a> function returns ERROR_IO_PENDING. </p>
<p>
A thread can manage overlapped operations by either of two methods: 
<ul>
<li>
Use the <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a> function to wait for the overlapped operation to be completed.</li>
<li>
Specify a handle to the <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure's manual-reset event object in one of the <a href="synchro_5vqr.htm">wait functions</a> and then call <b>GetOverlappedResult</b> after the wait function returns. The <b>GetOverlappedResult</b> function returns the results of the completed overlapped operation, and for functions in which such information is appropriate, it reports the actual number of bytes that were transferred. </li>
</ul>
<p>
When performing multiple simultaneous overlapped operations, the calling thread must specify an <b>OVERLAPPED</b> structure with a different manual-reset event object for each operation. To wait for any one of the overlapped operations to be completed, the thread specifies all the manual-reset event handles as wait criteria in one of the multiple-object <a href="synchro_5vqr.htm">wait functions</a>. The return value of the multiple-object wait function indicates which manual-reset event object was signaled, so the thread can determine which overlapped operation caused the wait operation to be completed. </p>
<p>
If no event object is specified in the <a href="synchro_8tf6.htm"><b>OVERLAPPED</b></a> structure, the system signals the state of the file, named pipe, or communications device when the overlapped operation has been completed. Thus, you can specify these handles as synchronization objects in a wait function, though their use for this purpose can be difficult to manage. When performing simultaneous overlapped operations on the same file, named pipe, or communications device, there is no way to know which operation caused the object's state to be signaled. It is safer to use a separate event object for each overlapped operation. </p>
<p>
For examples that illustrate the use of overlapped operations, completion routines, and the <a href="synchro_75v8.htm"><b>GetOverlappedResult</b></a> function, see <a href="pipes_94xf.htm">Using Pipes</a>.</p>
<p>&nbsp;</p></body>
</HTML>

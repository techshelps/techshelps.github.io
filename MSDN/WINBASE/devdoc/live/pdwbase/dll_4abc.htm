<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LoadLibraryEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_loadlibraryex"></a>LoadLibraryEx</h1>
<p>
The <b>LoadLibraryEx</b> function maps a specified executable module into the address space of the calling process. The executable module can be a .DLL or an .EXE file. The specified module may cause other modules to be mapped into the address space.</p>
<pre><code><b>HINSTANCE LoadLibraryEx(
  LPCTSTR</b><i> lpLibFileName</i><b>,  </b>// points to name of executable module
<b>  HANDLE</b><i> hFile</i><b>,           </b>// reserved, must be NULL
<b>  DWORD</b><i> dwFlags</i>           // entry-point execution flag
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpLibFileName</i></dt>
<dd>
Pointer to a null-terminated string that names the executable module (either a .DLL or an .EXE file). The name specified is the filename of the executable module. This name is not related to the name stored in a library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.DEF) file. 
<p>
If the string specifies a path, but the file does not exist in the specified directory, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). 

<p>
If the string does not specify a path, and the filename extension is omitted, the function appends the default library extension .DLL to the filename. However, the filename string can include a trailing point character (.) to indicate that the module name has no extension. 

<p>
If the string does not specify a path, the function uses a standard search strategy to find the file. See the <b>Remarks</b> for more information.

<p>
If mapping the specified module into the address space causes the system to map in other, associated executable modules, the function can use either the standard search strategy or an alternate search strategy to find those modules. See the <b>Remarks</b> for more information.
</dd>
<dt>
<i>hFile</i></dt>
<dd>
This parameter is reserved for future use. It must be NULL. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Specifies the action to take when loading the module. If no flags are specified, the behavior of this function is identical to that of the <b>LoadLibrary</b> function. This parameter can be one of the following values:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Flag</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%></td>
<td width=63%></td>
</tr>
<tr valign=top>
<td width=37%>DONT_RESOLVE_DLL_<br>
REFERENCE</td>
<td width=63%><b>Windows NT:</b> If this value is used, and the executable module is a DLL, the system does not call <a href="dll_8asu.htm"><b>DllMain</b></a> for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module. <p>
If this value is not used, and the executable module is a DLL, the system calls <b>DllMain</b> for process and thread initialization and termination. The system loads additional executable modules that are referenced by the specified module. </p>
</td>
</tr>
<tr valign=top>
<td width=37%>LOAD_LIBRARY_AS_<br>
DATAFILE</td>
<td width=63%>If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file. You can use the module handle that the function returns with any Win32 functions that operate on resources. Use this flag when you want to load a DLL only to extract messages or resources from it. </td>
</tr>
<tr valign=top>
<td width=37%>LOAD_WITH_ALTERED<br>
_SEARCH_PATH</td>
<td width=63%>If this value is used, and <i>lpLibFileName</i> specifies a path, the system uses the alternate file search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded. <p>
If this value is not used, or if <i>lpLibFileName</i> does not specify a path, the system uses the standard search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded. </p>
</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the mapped executable module.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The calling process can use the handle returned by this function to identify the module in calls to the <a href="dll_0f8z.htm"><b>GetProcAddress</b></a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findresource">
</object><a href=JavaScript:alink_1.Click()><b>FindResource</b></a>, and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_2.Click()><b>LoadResource</b></a> functions. </p>
<p>
The<b> LoadLibraryEx</b> function is very similar to the <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> function. The differences consist of a set of optional behaviors that <b>LoadLibraryEx</b> provides. First, <b>LoadLibraryEx</b> can map a DLL module without calling the <a href="dll_8asu.htm"><b>DllMain</b></a> function of the DLL. Second, <b>LoadLibraryEx</b> can use either of two file search strategies to find executable modules that are associated with the specified module. Third, <b>LoadLibraryEx </b>can load a module in a way that is optimized for the case where the module will never be executed, loading the module as if it were a data file. You select these optional behaviors by setting the <i>dwFlags</i> parameter; if <i>dwFlags</i> is zero, <b>LoadLibraryEx</b> behaves identically to <b>LoadLibrary.</b></p>
<p>
It is not safe to call <b>LoadLibraryEx</b> from <b>DllMain</b>. For more information, see the Remarks section in <a href="dll_8asu.htm"><b>DllMain</b></a>. </p>
<p>
If no path is specified in the <i>lpLibFileName</i> parameter, and the base filename does not match the base filename of a loaded module, the <b>LoadLibraryEx</b> function uses the same standard file search strategy that <a href="dll_1o8p.htm"><b>LoadLibrary</b></a>, <a href="filesio_13vs.htm"><b>SearchPath</b></a>, and <a href="filesio_0cth.htm"><b>OpenFile</b></a> use to find the executable module and any associated executable modules that it causes to be loaded. This standard strategy searches for a file in the following sequence: 
<ol>
<li>
The directory from which the application loaded. </li>
<li>
The current directory. </li>
<li>
<b>Windows 95 and Windows 98:</b> The Windows system directory. Use the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_3.Click()><b>GetSystemDirectory</b></a> function to get the path of this directory.<p>
<b>Windows NT:</b> The 32-bit Windows system directory. Use the <b>GetSystemDirectory</b> function to get the path of this directory. The name of this directory is SYSTEM32.
</li>
<li>
<b>Windows NT:</b> The 16-bit Windows system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</li>
<li>
The Windows directory. Use the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_4.Click()><b>GetWindowsDirectory</b></a> function to get the path of this directory. </li>
<li>
The directories that are listed in the PATH environment variable. </li>
</ol>
<p>
If a path is specified, and the <i>dwFlags</i> parameter is set to LOAD_WITH_ALTERED_SEARCH_PATH, the <b>LoadLibraryEx</b> function uses an alternate file search strategy to find any executable modules that the specified module causes to be loaded. This alternate strategy searches for a file in the following sequence: 
<ol>
<li>
The directory specified by the <i>lpLibFileName</i> path. In other words, the directory that the specified executable module is in. </li>
<li>
The current directory. </li>
<li>
<b>Windows 95 and Windows 98:</b> The Windows system directory. Use the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_5.Click()><b>GetSystemDirectory</b></a> function to get the path of this directory.<p>
<b>Windows NT:</b> The 32-bit Windows system directory. Use the <b>GetSystemDirectory</b> function to get the path of this directory. The name of this directory is SYSTEM32.
</li>
<li>
<b>Windows NT:</b> The 16-bit Windows system directory. There is no function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</li>
<li>
The Windows directory. Use the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_6.Click()><b>GetWindowsDirectory</b></a> function to get the path of this directory. </li>
<li>
The directories that are listed in the PATH environment variable. </li>
</ol>
<p>
Note that the standard file search strategy and the alternate search strategy differ in just one way: the standard strategy starts its search in the calling application's directory, and the alternate strategy starts its search in the directory of the executable module that <b>LoadLibraryEx</b> is loading.</p>
<p>
If you specify the alternate search strategy, its behavior continues until all associated executable modules have been located. Once the system starts processing DLL initialization routines, the system reverts to the standard search strategy.</p>
<p>
The Visual C++ compiler supports a syntax that enables you to declare thread-local variables: <b>_declspec(thread)</b>. If you use this syntax in a DLL, you will not be able to load the DLL explicitly using <a href="dll_1o8p.htm"><b>LoadLibrary</b></a> or <b>LoadLibraryEx</b>. If your DLL will be loaded explicitly, you must use the thread local storage functions instead of <b>_declspec(thread)</b>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="dll_512r.htm">Dynamic-Link Libraries Overview</a>, <a href="dll_0qr7.htm">Dynamic-Link Library Functions</a>, <a href="dll_8asu.htm"><b>DllMain</b></a>, <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findresource">
</object><a href=JavaScript:alink_7.Click()><b>FindResource</b></a>, <a href="dll_3cs9.htm"><b>FreeLibrary</b></a>, <a href="dll_0f8z.htm"><b>GetProcAddress</b></a>, <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getsystemdirectory">
</object><a href=JavaScript:alink_8.Click()><b>GetSystemDirectory</b></a>, <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getwindowsdirectory">
</object><a href=JavaScript:alink_9.Click()><b>GetWindowsDirectory</b></a>, <a href="dll_1o8p.htm"><b>LoadLibrary</b></a>, <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadresource">
</object><a href=JavaScript:alink_10.Click()><b>LoadResource</b></a>, <a href="filesio_0cth.htm"><b>OpenFile</b></a>, <a href="filesio_13vs.htm"><b>SearchPath</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

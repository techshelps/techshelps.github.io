<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Termination Handler</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_a_termination_handler"></a>Using a Termination Handler</h2>
<p>
The following example shows how a <b>try</b>-<b>finally</b> statement is used to ensure that resources are released when execution of a guarded body of code terminates. In this case, a thread uses the <a href="synchro_3xym.htm"><b>EnterCriticalSection</b></a> function to wait for ownership of a critical section object. When the thread is finished executing the code that is protected by the critical section, it must call the <a href="synchro_0uge.htm"><b>LeaveCriticalSection</b></a> function to make the critical section object available to other threads. Using a <b>try</b>-<b>finally</b> statement guarantees that this will happen. </p>
<p>
For more information, see <a href="synchro_2a2b.htm">critical section objects</a>. </p>
<pre><code>LPTSTR lpBuffer = NULL; 
CRITICAL_SECTION csCriticalSection; 
 
try 
{ 
    // EnterCriticalSection synchronizes code with other threads. 
 
    EnterCriticalSection(&amp;CriticalSection); 
 
    // Perform a task that may cause an exception. 
 
    lpBuffer = (LPTSTR) LocalAlloc(LPTR, 10); 
    strcpy(lpBuffer,"Hello");  // possible access violation 
    printf("%s\n",lpBuffer); 
    LocalFree(lpBuffer); 
} 
 
// LeaveCriticalSection is called even if an exception occurred. 
 
finally 
{ 
    LeaveCriticalSection(&amp;CriticalSection); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GlobalAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_globalalloc"></a>GlobalAlloc</h1>
<p>
The <b>GlobalAlloc</b> function allocates the specified number of bytes from the heap. Win32 memory management does not provide a separate local heap and global heap. </p>
<p>
This function is provided only for compatibility with 16-bit versions of Windows. </p>
<pre><code><b>HGLOBAL GlobalAlloc(
  UINT</b><i> uFlags</i><b>,    </b>// allocation attributes
<b>  DWORD</b><i> dwBytes</i>   // number of bytes to allocate
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>uFlags</i></dt>
<dd>
Specifies how to allocate memory. If zero is specified, the default is GMEM_FIXED. This value can be one or more of the following flags, except for the incompatible combinations that are specifically noted. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Flag</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%>GMEM_FIXED</td>
<td width=57%>Allocates fixed memory. The return value is a pointer.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_MOVEABLE</td>
<td width=57%>Allocates movable memory. In Win32, memory blocks are never moved in physical memory, but they can be moved within the default heap. <p>
The return value is a handle to the memory object. To translate the handle into a pointer, use the <a href="memman_6omj.htm"><b>GlobalLock</b></a> function. </p>
<p>
This flag cannot be combined with the GMEM_FIXED flag. </p>
</td>
</tr>
<tr valign=top>
<td width=43%>GPTR</td>
<td width=57%>Combines the GMEM_FIXED and GMEM_ZEROINIT flags.</td>
</tr>
<tr valign=top>
<td width=43%>GHND</td>
<td width=57%>Combines the GMEM_MOVEABLE and GMEM_ZEROINIT flags.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_DDESHARE<br>
GMEM_SHARE</td>
<td width=57%>This flag is provided primarily for compatibility with 16-bit Windows. However, this flag may be used by some applications to enhance the performance of DDE operations and therefore can be specified if the memory is to be used for DDE. .</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_DISCARDABLE</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.<p>
In Win32, you must explicitly call the <a href="memman_1ip0.htm"><b>GlobalDiscard</b></a> function to discard a block.</p>
<p>
This flag cannot be combined with the GMEM_FIXED flag. </p>
</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_LOWER</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_NOCOMPACT</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_NODISCARD</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_NOT_BANKED</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_NOTIFY</td>
<td width=57%>Ignored. This flag is provided only for compatibility with 16-bit Windows.</td>
</tr>
<tr valign=top>
<td width=43%>GMEM_ZEROINIT</td>
<td width=57%>Initializes memory contents to zero.</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwBytes</i></dt>
<dd>
Specifies the number of bytes to allocate. If this parameter is zero and the <i>uFlags</i> parameter specifies the GMEM_MOVEABLE flag, the function returns a handle to a memory object that is marked as discarded. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the newly allocated memory object.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <a href="errors_3uwi.htm"><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
If the heap does not contain sufficient free space to satisfy the request, <b>GlobalAlloc</b> returns NULL. Because NULL is used to indicate an error, virtual address zero is never allocated. It is, therefore, easy to detect the use of a NULL pointer. </p>
<p>
Memory allocated with this function is guaranteed to be aligned on an 8-byte boundary. All memory is created with execute access; no special function is required to execute dynamically generated code. </p>
<p>
If this function succeeds, it allocates at least the amount of memory requested. If the actual amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual number of bytes allocated, use the <a href="memman_5ip1.htm"><b>GlobalSize</b></a> function. </p>
<p>
To free the memory, use the <a href="memman_38kl.htm"><b>GlobalFree</b></a> function. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_1ip0.htm"><b>GlobalDiscard</b></a>, <a href="memman_38kl.htm"><b>GlobalFree</b></a>, <a href="memman_6omj.htm"><b>GlobalLock</b></a>, <a href="memman_5ip1.htm"><b>GlobalSize</b></a></p>
<p>&nbsp;</p></body>
</HTML>

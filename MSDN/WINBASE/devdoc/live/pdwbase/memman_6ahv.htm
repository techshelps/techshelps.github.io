<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HeapReAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_heaprealloc"></a>HeapReAlloc</h1>
<p>
The <b>HeapReAlloc</b> function reallocates a block of memory from a heap. This function enables you to resize a memory block and change other memory block properties. The allocated memory is not movable. </p>
<pre><code><b>LPVOID HeapReAlloc(
  HANDLE</b><i> hHeap</i><b>,  </b>// handle to a heap block
<b>  DWORD</b><i> dwFlags</i><b>, </b>// heap reallocation flags
<b>  LPVOID</b><i> lpMem</i><b>,  </b>// pointer to the memory to reallocate
<b>  DWORD</b><i> dwBytes</i>  // number of bytes to reallocate
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHeap</i></dt>
<dd>
Heap from which the memory will be reallocated. This is a handle returned by the <a href="memman_5z6t.htm"><b>HeapCreate</b></a> or <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a> function. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Specifies several controllable aspects of heap reallocation. Specifying any of these flags overrides the corresponding flag specified in the <i>flOptions</i> parameter when the heap was created by using the <a href="memman_5z6t.htm"><b>HeapCreate</b></a> function. You can specify one or more of the following flags: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Flag</th>
<th align=left width=45%>Meaning</th>
</tr>
<tr valign=top>
<td width=55%>HEAP_GENERATE_EXCEPTIONS</td>
<td width=45%>Specifies that the operating-system raises an exception to indicate a function failure, such as an out-of-memory condition, instead of returning NULL.</td>
</tr>
<tr valign=top>
<td width=55%>HEAP_NO_SERIALIZE</td>
<td width=45%>Specifies that mutual exclusion is not used while <b>HeapReAlloc</b> is accessing the heap. <p>
This flag should not be specified when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap. </p>
</td>
</tr>
<tr valign=top>
<td width=55%>HEAP_REALLOC_IN_PLACE_ONLY</td>
<td width=45%>Specifies that there can be no movement when reallocating a memory block to a larger size. If this flag is not specified and the reallocation request is for a larger size, the function may move the block to a new location. If this flag is specified and the block cannot be enlarged without moving, the function fails, leaving the original memory block unchanged.</td>
</tr>
<tr valign=top>
<td width=55%>HEAP_ZERO_MEMORY</td>
<td width=45%>If the reallocation request is for a larger size, this flag specifies that the additional region of memory beyond the original size be initialized to zero. The contents of the memory block up to its original size are unaffected.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpMem</i></dt>
<dd>
Pointer to the block of memory that the function reallocates. This pointer is returned by an earlier call to the <a href="memman_6krn.htm"><b>HeapAlloc</b></a> or <a href="#_win32_heaprealloc"><b>HeapReAlloc</b></a> function. </dd>
<dt>
<i>dwBytes</i></dt>
<dd>
New size of the memory block, in bytes. A memory block's size can be increased or decreased by using this function. 
<p>
If the heap specified by the <i>hHeap</i> parameter is a "non-growable" heap, <i>dwBytes</i> must be less than 0x7FFF8. You create a non-growable heap by calling the <b>HeapCreate</b> function with a nonzero value.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a pointer to the reallocated memory block. </p>
<p>
If the function fails and you have not specified HEAP_GENERATE_EXCEPTIONS, the return value is NULL. </p>
<p>
If the function fails and you have specified HEAP_GENERATE_EXCEPTIONS, the function may generate the following exceptions: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Value</th>
<th align=left width=55%>Meaning</th>
</tr>
<tr valign=top>
<td width=45%>STATUS_NO_MEMORY</td>
<td width=55%>The reallocation attempt failed for lack of available memory.</td>
</tr>
<tr valign=top>
<td width=45%>STATUS_ACCESS_VIOLATION</td>
<td width=55%>The reallocation attempt failed because of heap corruption or improper function parameters.</td>
</tr>
</table><br>
<p>
If the function fails, it calls <a href="errors_48tu.htm"><b>SetLastError</b></a>. An application can call <a href="errors_3uwi.htm"><b>GetLastError</b></a> for extended error information.</p>
<h4>Remarks</h4>
<p>
If <b>HeapReAlloc</b> succeeds, it allocates at least the amount of memory requested. If the actual amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual size of the reallocated block, use the <a href="memman_9l5x.htm"><b>HeapSize</b></a> function. </p>
<p>
If <b>HeapReAlloc</b> fails, the original memory is not freed, and the original handle and pointer are still valid.</p>
<p>
To free a block of memory allocated by <b>HeapReAlloc</b>, use the <a href="memman_7b1h.htm"><b>HeapFree</b></a> function. </p>
<p>
Serialization ensures mutual exclusion when two or more threads attempt to simultaneously allocate or free blocks from the same heap. There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory from the same heap. Setting the HEAP_NO_SERIALIZE flag eliminates mutual exclusion on the heap. Without serialization, two or more threads that use the same heap handle might attempt to allocate or free memory simultaneously, likely causing corruption in the heap. The HEAP_NO_SERIALIZE flag can, therefore, be safely used only in the following situations: 
<ul>
<li>
The process has only one thread. </li>
<li>
The process has multiple threads, but only one thread calls the heap functions for a specific heap. </li>
<li>
The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap. </li>
</ul>
<p>
<b>Windows CE:</b> Windows CE does not support the HEAP_GENERATE_EXCEPTIONS value for the <i>dwFlags</i> parameter.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use kernel32.lib.</p>
<h4>See Also</h4>
<p>
<a href="memman_6oz8.htm">Memory Management Overview</a>, <a href="memman_60kz.htm">Memory Management Functions</a>, <a href="memman_5u7k.htm"><b>GetProcessHeap</b></a>,<b> <a href="memman_6krn.htm">HeapAlloc</a></b>, <a href="memman_5z6t.htm"><b>HeapCreate</b></a>, <a href="memman_862h.htm"><b>HeapDestroy</b></a>, <a href="memman_7b1h.htm"><b>HeapFree</b></a>, <a href="memman_9l5x.htm"><b>HeapSize</b></a>, <a href="errors_48tu.htm"><b>SetLastError</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

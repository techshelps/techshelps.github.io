<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cache Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_cache_object"></a>Cache Object</h1>
<p>
The Cache performance object consists of counters that monitor the file system cache, an area of physical memory that stores recently used data as long as possible to permit access to the data without having to read from the disk. Because applications typically use the cache, the cache is monitored as an indicator of application I/O operations. When memory is plentiful, the cache can grow, but when memory is scarce, the cache can become too small to be effective.</p>
<p>
<b>Data Maps/sec</b></p>
<p>
Data Maps/sec is the frequency that a file system such as NTFS, maps a page of a file into the file system cache to read the page.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Sync Data Maps/sec</b></p>
<p>
Sync Data Maps/sec counts the frequency that a file system, such as NTFS, maps a page of a file into the file system cache to read the page, and wishes to wait for the page to be retrieved if it is not in main memory.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Async Data Maps/sec</b></p>
<p>
Async Data Maps/sec is the frequency that an application using a file system, such as NTFS, to map a page of a file into the file system cache to read the page, and does not wait for the page to be retrieved if it is not in main memory. </p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Data Map Hits %</b></p>
<p>
Data Map Hits is the percentage of data maps in the file system cache that could be resolved without having to retrieve a page from the disk, because the page was already in physical memory. </p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_SAMPLE_FRACTION</p>
<p>
<b>Data Map Hits %</b></p>
<p>
Data Map Hits is the percentage of data maps in the file system cache that could be resolved without having to retrieve a page from the disk, because the page was already in physical memory.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_SAMPLE_BASE</p>
<p>
<b>Data Map Pins/sec</b></p>
<p>
Data Map Pins/sec is the frequency of data maps in the file system cache that resulted in pinning a page in main memory, an action usually preparatory to writing to the file on disk.  While pinned, a page's physical address in main memory and virtual address in the file system cache will not be altered.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_SAMPLE_FRACTION</p>
<p>
<b>Data Map Pins/sec</b></p>
<p>
Data Map Pins/sec is the frequency of data maps in the file system cache that resulted in pinning a page in main memory, an action usually preparatory to writing to the file on disk.  While pinned, a page's physical address in main memory and virtual address in the file system cache will not be altered.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_SAMPLE_BASE</p>
<p>
<b>Pin Reads/sec</b></p>
<p>
Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. While pinned, a page's physical address in the file system cache will not be altered.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Sync Pin Reads/sec</b></p>
<p>
Sync Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. The file system will not regain control until the page is pinned in the file system cache, in particular if the disk must be accessed to retrieve the page. While pinned, a page's physical address in the file system cache will not be altered.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Async Pin Reads/sec</b></p>
<p>
Async Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk. Pages read in this fashion are pinned in memory at the completion of the read. The file system will regain control immediately even if the disk must be accessed to retrieve the page. While pinned, a page's physical address will not be altered.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Pin Read Hits %</b></p>
<p>
Pin Read Hits is the percentage of pin read requests that hit the file system cache, i.e., did not require a disk read in order to provide access to the page in the file system cache. While pinned, a page's physical address in the file system cache will not be altered. The LAN Redirector uses this method for retrieving data from the cache, as does the LAN Server for small transfers. This is usually the method used by the disk file systems as well.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_FRACTION</p>
<p>
<b>Pin Read Hits %</b></p>
<p>
Pin Read Hits is the percentage of pin read requests that hit the file system cache, i.e., did not require a disk read in order to provide access to the page in the file system cache. While pinned, a page's physical address in the file system cache will not be altered. The LAN Redirector uses this method for retrieving data from the cache, as does the LAN Server for small transfers. This is usually the method used by the disk file systems as well.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_BASE</p>
<p>
<b>Copy Reads/sec</b></p>
<p>
Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the file system cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Sync Copy Reads/sec</b></p>
<p>
Sync Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The file system will not regain control until the copy operation is complete, even if the disk must be accessed to retrieve the page.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Async Copy Reads/sec</b></p>
<p>
Async Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The application will regain control immediately even if the disk must be accessed to retrieve the page.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Copy Read Hits %</b></p>
<p>
Copy Read Hits is the percentage of cache copy read requests that hit the cache, that is, they did not require a disk read in order to provide access to the page in the cache. A copy read is a file read operation that is satisfied by a memory copy from a page in the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_FRACTION</p>
<p>
<b>Copy Read Hits %</b></p>
<p>
Copy Read Hits is the percentage of cache copy read requests that hit the cache, that is, they did not require a disk read in order to provide access to the page in the cache. A copy read is a file read operation that is satisfied by a memory copy from a page in the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_BASE</p>
<p>
<b>MDL Reads/sec</b></p>
<p>
MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the data. The MDL contains the physical address of each page involved in the transfer, and thus can employ a hardware Direct Memory Access (DMA) device to effect the copy. The LAN Server uses this method for large transfers out of the server.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Sync MDL Reads/sec</b></p>
<p>
Sync MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages. The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages. If the accessed page(s) are not in main memory, the caller will wait for the pages to fault in from the disk.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Async MDL Reads/sec</b></p>
<p>
Async MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages. The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages. If the accessed page(s) are not in main memory, the calling application program will not wait for the pages to fault in from disk.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>MDL Read Hits %</b></p>
<p>
MDL Read Hits is the percentage of Memory Descriptor List (MDL) read requests to the file system cache that hit the cache, i.e., did not require disk accesses in order to provide memory access to the page(s) in the cache.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_FRACTION</p>
<p>
<b>MDL Read Hits %</b></p>
<p>
MDL Read Hits is the percentage of Memory Descriptor List (MDL) read requests to the file system cache that hit the cache, i.e., did not require disk accesses in order to provide memory access to the page(s) in the cache.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_SAMPLE_BASE</p>
<p>
<b>Read Aheads/sec</b></p>
<p>
Read Aheads/sec is the frequency of reads from the file system cache in which the cache detects sequential access to a file. The read aheads permit the data to be transferred in larger blocks than those being requested by the application, reducing the overhead per access.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Fast Reads/sec</b></p>
<p>
Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Sync Fast Reads/sec</b></p>
<p>
Sync Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided. If the data is not in the cache, the request (application program call) will wait until the data has been retrieved from disk.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Async Fast Reads/sec</b></p>
<p>
Async Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache. Normally, file I/O requests will invoke the appropriate file system to retrieve data from a file, but this path permits data to be retrieved from the cache directly (without file system involvement) if the data is in the cache. Even if the data is not in the cache, one invocation of the file system is avoided. If the data is not in the cache, the request (application program call) will not wait until the data has been retrieved from disk, but will get control immediately.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Fast Read Resource Misses/sec</b></p>
<p>
Fast Read Resource Misses/sec is the frequency of cache misses necessitated by the lack of available resources to satisfy the request.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Fast Read Not Possibles/sec</b></p>
<p>
Fast Read Not Possibles/sec is the frequency of attempts by an Application Program Interface (API) function call to bypass the file system to get to data in the file system cache that could not be honored without invoking the file system.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Lazy Write Flushes/sec</b></p>
<p>
Lazy Write Flushes/sec is the rate at which the Lazy Writer thread has written to disk. Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding. More than one page can be transferred by each write operation.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Lazy Write Pages/sec</b></p>
<p>
Lazy Write Pages/sec is the rate at which the Lazy Writer thread has written to disk. Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding. More than one page can be transferred on a single disk write operation.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Data Flushes/sec</b></p>
<p>
Data Flushes/sec is the rate at which the file system cache has flushed its contents to disk as the result of a request to flush or to satisfy a write-through file write request. More than one page can be transferred on each flush operation.</p>
<p>
Detail Level: Wizard<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Data Flush Pages/sec</b></p>
<p>
Data Flush Pages/sec is the number of pages the file system cache has flushed to disk as a result of a request to flush or to satisfy a write-through file write request. More than one page can be transferred on each flush operation.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>&nbsp;</p></body>
</HTML>

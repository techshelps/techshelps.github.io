<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Process Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_process_object"></a>Process Object</h1>
<p>
The Process performance object consists of counters that monitor running application program and system processes. All the threads in a process share the same address space and have access to the same data.</p>
<p>
<b>Processor Time</b></p>
<p>
Processor Time is the percentage of elapsed time that all of the threads of this process used the processor to execute instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.</p>
<p>
Detail Level: Novice<br>
Counter Type: PERF_100NSEC_TIMER</p>
<p>
<b>% User Time</b></p>
<p>
User Time is the percentage of elapsed time that this process's threads have spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in User Mode cannot damage the integrity of the Windows NT Executive, Kernel, and device drivers. Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. These subsystem processes provide additional protection. Therefore, some work done by Windows NT on behalf of your application might appear in other subsystem processes in addition to the privileged time in your process.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_100NSEC_TIMER</p>
<p>
<b>% Privileged Time</b></p>
<p>
Privileged Time is the percentage of elapsed time that the threads of the process have spent executing code in privileged mode. When a Windows NT system service is called, the service will often run in Privileged Mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. These subsystem processes provide additional protection. Therefore, some work done by Windows NT on behalf of your application might appear in other subsystem processes in addition to the privileged time in your process. </p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_100NSEC_TIMER</p>
<p>
<b>Virtual Bytes Peak</b></p>
<p>
Virtual Bytes Peak is the maximum number of bytes of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is however finite, and by using too much, the process might limit its ability to load libraries.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Virtual Bytes</b></p>
<p>
Virtual Bytes is the current size in bytes of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and by using too much, the process can limit its ability to load libraries.</p>
<p>
Detail Level: Expert<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Page Faults/sec</b></p>
<p>
Page Faults/sec is the rate of Page Faults by the threads executing in this process. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This will not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.</p>
<p>
Detail Level: Novice<br>
Counter Type: PERF_COUNTER_COUNTER</p>
<p>
<b>Working Set Peak</b></p>
<p>
Working Set Peak is the maximum number of bytes in the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Working Set</b></p>
<p>
Working Set is the current number of bytes in the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.</p>
<p>
Detail Level: Novice<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Page File Bytes Peak</b></p>
<p>
Page File Bytes Peak is the maximum number of bytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory. </p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Page File Bytes</b></p>
<p>
Page File Bytes is the current number of bytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory. </p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Private Bytes</b></p>
<p>
Private Bytes is the current number of bytes this process has allocated that cannot be shared with other processes. </p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Thread Count</b></p>
<p>
The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Priority Base</b></p>
<p>
The current base priority of this process. Threads within a process can raise and lower their own base priority relative to the process's base priority.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Elapsed Time</b></p>
<p>
The total elapsed time (in seconds) this process has been running.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_ELAPSED_TIME</p>
<p>
<b>ID Process</b></p>
<p>
ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.</p>
<p>
Detail Level: Novice<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Pool Paged Bytes</b></p>
<p>
Pool Paged Bytes is the number of bytes in the Paged Pool, a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Paged Pool pages can be paged out to the paging file when not accessed by the system for sustained periods of time.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Pool Nonpaged Bytes</b></p>
<p>
Pool Nonpaged Bytes is the number of bytes in the nonpaged pool, a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Nonpaged pool pages cannot be paged out to the paging file, but instead remain in main memory as long as they are allocated.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>
<b>Handle Count</b></p>
<p>
The total number of handles currently open by this process. This number is the sum of the handles currently open by each thread in this process.</p>
<p>
Detail Level: Advanced<br>
Counter Type: PERF_COUNTER_RAWCOUNT</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateNtmsMediaPool</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_zaw_createntmsmediapool"></a>CreateNtmsMediaPool</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CreateNtmsMediaPool</b> function creates a new application media pool. </p>
<pre><code><b>DWORD WINAPI CreateNtmsMediaPool(
</b>  <b>HANDLE</b> <i>hSession</i><b>,</b> 
  <b>LPCTSTR</b> <i>lpPoolName</i><b>,</b>
  <b>LPNTMS_GUID</b> <i>lpMediaType</i><b>,</b>
  <b>DWORD</b> <i>dwAction</i><b>,</b>
  <b>LPSECURITY_ATTRIBUTES</b> <i>lpSecurityAttributes</i><b>,</b>
  <b>LPNTMS_GUID</b> <i>lpPoolId</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hSession</i></dt>
<dd>
Handle to the session returned by the <a href="ntms_api_3kq6.htm"><b>OpenNtmsSession</b></a> function.</dd>
<dt>
<i>lpPoolName</i></dt>
<dd>
Specifies the name of the new media pool. Media pool names must be unique within the scope of a single RSM database. </dd>
<dt>
<i>lpMediaType</i></dt>
<dd>
Specifies the type of media in this media pool. Use the <b>EnumerateNtmsObject</b> function to get a list of available media types and their attributes. The application can pass a NULL pointer to create a media pool that only contains other media pools.</dd>
<dt>
<i>dwAction</i></dt>
<dd>
This parameter must be one of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>NTMS_OPEN_EXISTING</td>
<td width=52%>Opens an existing media pool by name. Returns ERROR_INVALID_PARAMETER if the pool does not exist.</td>
</tr>
<tr valign=top>
<td width=48%>NTMS_OPEN_ALWAYS</td>
<td width=52%>Opens an existing media pool or creates the pool if it does not exist.</td>
</tr>
<tr valign=top>
<td width=48%>NTMS_CREATE_NEW</td>
<td width=52%>Creates a new media pool. Returns ERROR_ALREADY_EXISTS if the pool exists.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpSecurityAttributes</i></dt>
<dd>
Optional. Specifies the security descriptor used to restrict access to the pool.</dd>
<dt>
<i>lpPoolId</i></dt>
<dd>
Pointer to the unique identifier where the media pool ID is returned after the media pool is successfully created or opened.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
ERROR_ACCESS_DENIED</dt>
<dd>
NTMS_MODIFY_ACCESS to the parent media pool is denied while trying to create a new media pool.</dd>
<dt>
ERROR_ALREADY_EXISTS</dt>
<dd>
Unable to create a new media pool because one already exists with this name.</dd>
<dt>
ERROR_DATABASE_FAILURE</dt>
<dd>
The database is inaccessible or damaged.</dd>
<dt>
ERROR_DATABASE_FULL</dt>
<dd>
The database is full. Other security errors are also possible, but they would indicate a security subsystem error.</dd>
<dt>
ERROR_INVALID_HANDLE</dt>
<dd>
The session handle is invalid or missing.</dd>
<dt>
ERROR_INVALID_MEDIA</dt>
<dd>
The selected media type is not valid.</dd>
<dt>
ERROR_INVALID_NAME</dt>
<dd>
The pool name syntax is invalid. (The name is too long.)</dd>
<dt>
ERROR_INVALID_PARAMETER</dt>
<dd>
The media pool name or media pool ID pointer is missing.</dd>
<dt>
ERROR_OBJECT_NOT_FOUND</dt>
<dd>
Unable to open existing media pool.</dd>
<dt>
ERROR_SUCCESS</dt>
<dd>
The function was successful.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Scratch, Foreign, and Import media pools are created by RSM and cannot be created with the <b>CreateNtmsMediaPool</b> function. </p>
<p>
RSM media pools are organized as a hierarchy separated by the "\" character. The Application, Scratch, Foreign, and Import media pools exist at the root of the hierarchy. RSM creates and manages the Scratch, Foreign, and Import pools. RSM creates a Scratch media pool for each media type available.</p>
<p>
Application-specific media pools are created by applications. Applications create media pools for their own use under the root application pool. These media pools have file system-like names. Only the end-point of the name contains media and policy. An application can define pools such as \MyApp\Pool1 and \MyApp\Pool2. This conveys the hierarchy to the user interface and avoids duplicate names. Each pool level must be created individually; first MyApp and then Pool1 and Pool2, much like folders and files.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ntmsapi.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use ntmsapi.lib.</p>
<h4>See Also</h4>
<p>
<a href="ntms_api_5nz9.htm#_zaw_media_services_functions">Media Services Functions</a>, <a href="ntms_api_6275.htm"><b>AllocateNtmsMedia</b></a><b>, <a href="ntms_api_3e0c.htm">DeleteNtmsMediaPool</a>, <a href="ntms_api_6vw9.htm">GetNtmsObjectSecurity</a>, <a href="ntms_api_4ltl.htm">SetNtmsObjectSecurity</a></b></p>
<p>&nbsp;</p></body>
</HTML>

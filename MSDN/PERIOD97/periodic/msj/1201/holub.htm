<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="C:\MSOffice\Templates\MSJ.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hide Your Data and Make Objects Responsible for Their Own User Interfaces, Part III</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<p><font color="#000000" size="6" face="verdana,arial,helvetica">Hide
Your Data and Make Objects Responsible for Their Own User
Interfaces, Part III</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica">by Allen Holub</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Allen Holub is a programmer,
consultant, and trainer specializing in C++, object-oriented
design, and Microsoft operating systems. He can be reached at
allen@holub.com or http://www.holub.com.</b></font></p>

<blockquote>
    <p><font color="#000080" size="7"
    face="verdana,arial,helvetica">I</font><font color="#000000"
    size="2" face="verdana,arial,helvetica"> presented the basic
    architecture of an OO Forms package in my previous two
    articles. This month, I&#146;ll continue the discussion by
    looking at the lower-level design details and the actual
    implementation. To refresh your memory, last month I
    introduced the idea of a Form, which is really just a surface
    on which an object places a user interface. The Form keeps
    track of where certain attributes of a given class are
    placed, but doesn&#146;t know anything about the object
    it&#146;s displaying beyond the name of the attributes. User
    input flows directly to the object, without the Form getting
    in the way at all (or even knowing that user input is
    occurring). </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The basic goal was to decouple
    the layout of a Form from the classes displayed on the Form.
    With the architecture I developed, you can radically change
    the layout of a Form, and the objects displayed on it will be
    completely unaffected. They don&#146;t even know that the
    Form has been changed. The flip side is also true; you can
    radically change the implementation of some class, and the
    Forms on which objects of that class are displayed are
    equally unaffected. </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Behavior like this is
    impossible using MFC&#146;s CDialog class, which not only
    hardcodes a dialog box with the C++ class that wraps it, but
    also forces you to export data from one object (a CDialog
    derivative) to another (the object that uses the CDialog
    derivative for its I/O). This behavior is at odds with good
    OO design, which mandates that changes to a class should not
    affect any other class in the system if at all possible.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Now for the details.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Shutting
the Form Down</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">A Form is inherently modeless.
    This is Windows, after all, so when you send a
    &quot;display&quot; or &quot;interact&quot; message to the
    Form, it essentially creates a bunch of subwindows that are
    effectively doing their own thing in the background until
    they are closed by the Form shutting down. There&#146;s no
    particular reason for creating a Form on its own thread,
    though a Form can run on its own thread without difficulty.
    In MFC, you&#146;d derive a class from CWinThread and
    activate the Form by sending it a display or interact message
    in the InitInstance function of your derived class. Message
    handlers for the subwindows created by the Form are executed
    on the thread. Don&#146;t confuse the objects linked to the
    Form with the thread. Objects don&#146;t execute on
    threads&#151;functions do. The objects attached to the Form
    get updated the same way, regardless of the number of threads
    that are in use. It doesn&#146;t matter which thread is
    running when the Form is created. It does matter who
    activates the Form, though, because the Windows messages sent
    to the User_interface objects are processed on whichever
    thread executes the CreateWindow function. If the Form&#146;s
    message handlers are running on their own threads in this
    way, the objects attached to the Forms will appear to
    magically change state as the user interacts with the
    attached Proxies.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Windows¨ being Windows, the
    main difference in behavior in a single-threaded scenario is
    that message handlers for the controls won&#146;t be
    activated until whatever function created the Form returns,
    thereby reentering the main thread function&#146;s message
    pump. In a single-threaded application, this is probably the
    message pump in WinMain. Since a Form is typically created
    from a menu handler or equivalent, which does nothing beyond
    creating the Form object and activating it, this behavior is
    typically not a problem. In a multithreaded application, the
    Form can modify the linked objects as soon as it&#146;s
    activated, so the problem doesn&#146;t exist there at all.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">There are problems associated
    with memory management, however. Though you&#146;d like to be
    able to create a Form as a global variable, on the stack, or
    from operator new, I&#146;ve decided to be a coward and only
    support the last of these. A Form must be created using new,
    and the memory will automatically be discarded when the Form
    shuts down. The Form can be shut down by the user, either by
    clicking the close box or by pressing a special button that
    I&#146;ll discuss in a minute. Note that the same Form can be
    used to initialize or display several objects in succession.
    You don&#146;t have to destroy it just because you&#146;re
    finished with it for the time being. Just pass the Form a
    release_proxies request and then reattach the Form to the new
    objects with one or more put_yourself_on_this_form messages.
    Also note that a Form can be passed a hide message, just like
    any other User_interface object. (It sends hide messages to
    all the Proxies in this situation rather than releasing them,
    so be sure to send release_proxies before sending hide if you
    want to disconnect the Form from the Elements before
    it&#146;s hidden.)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Remember that the behavior of
    a Form is nothing like that of an MFC CDialog. The Form
    serves as a conduit from the user directly to the
    User_interface objects contained in the Proxies. You
    don&#146;t put an edit control on a Form; you tell Text to
    display its user interface on the Form. That interface will
    probably look like an edit control&#151;it might even be one
    in reality&#151;but details of implementation are irrelevant.
    When the user types into the Text&#146;s user interface, the
    associated Text is updated right then, as the user types.
    Data validation is also probably being done as the user types
    as well. There&#146;s no need to export data from a control
    and then put the data into a CString or to validate data in
    an OK handler as you would in a standard MFC app. The Form
    itself contains nothing of interest to the user, so
    there&#146;s no reason for a Form object to exist once it
    disappears from the screen.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">But how do you actually shut
    the thing down? The easiest way is to just let the user
    double-click the system box (or click the close box) on a
    Form, effectively releasing all the Proxies and discarding
    the memory for the Form itself and its Fields. If one or more
    of the Proxies was created with the
    notify_me_rather_than_delete_proxy attribute, the associated
    Element is effectively notified when the Form shuts down and
    the release_proxy message is received. In fact, you can
    create a Proxy that doesn&#146;t display an interface at all
    solely to get notified in this way. Proxies are guaranteed to
    be released in the same order that they were added to the
    Form, so you need only label the last proxy as a notifier if
    all you need is a close notification.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">As an aside, other sorts of
    notification must be handled by the Proxy or its underlying
    User_interface object. For example, if you need to be
    notified when a button is pressed, you can derive a class
    from Form::Proxy or User_interface whose handler for the
    interact message displays a button. The Proxy derivative must
    catch the BN_CLICKED notification and do whatever it wants
    with it, presumably notify whatever Element created the Proxy
    by sending a normal C++-style message. This is also how
    you&#146;d handle Proxies that must interact with one another
    to do data validation.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">A special Form::Close_button
    object is supported to make the Form look more like a dialog.
    An object of class Form::Close_button, when passed to the
    Form as a static attribute, causes the Form to be destroyed
    when it&#146;s pushed. You&#146;d put one on a Form like
    this:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Form a_form (
    &quot;a_form&quot;, new Field(
    Form::Close_button(&quot;OKAY&quot;), </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Rect(0,0, 20, 10) ), NULL);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Form will also shut down
    when the user presses the OK button in the upper-left corner
    of the form.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>A
Complete Example</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><b>Figure 1</b> is a simple
    but complete example of a Form. A simple Employee class (that
    has one attribute&#151;a name) is at the top of the listing.
    The name is implemented internally as a Text
    object&#151;remember, Text is a String that exposes a
    User_interface, so it can be used in an attribute proxy as it
    stands. The private section underneath the name declaration
    provides overrides of the two Form::Element virtual functions
    needed to put an Employee on the form. The functions are
    defined just below the class definition.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Employee::give_me_a_proxy_for
    creates a new Form::Proxy that represents the name
    field&#151;the address of this field is just passed into the
    Form::Proxy constructor. I&#146;m ignoring the form_name and
    attribute_id arguments here because the Employee has only one
    attribute, but a more-complicated implementation would
    probably have a lookup table or some similar mechanism to
    decide which attribute the Proxy actually represented. Both
    arguments to the Form::Proxy constructor are used here. The
    second argument tells the Form to send a release_proxy
    message rather than destroying the Proxy internally when the
    Form shuts down.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;1&nbsp;A
Simple Form Class</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;wrappers.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;form.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Employee: public Form::Element</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Text
name;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:
// Form-related functions</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
Form::Proxy *give_me_proxy_for( const String &amp;form_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;attribute_id );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void release_proxy (Form::Proxy *p);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Employee(const
String &amp;in_name): name(in_name){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
print(void) const{ ok_box( name ); }</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Proxy
*Employee::give_me_proxy_for( const String &amp;form_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;attribute_id )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Set things up so input flows directly from the Form into the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Employee's Name field.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Since &quot;this&quot; is passed as a second argument to the
Proxy</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
constructor, the Employee will be notified (with a release_proxy</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
message) when the Form shuts down.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Proxy
*p = new Form::Proxy( &amp;name, this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
p );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
p;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Employee::release_proxy(Form::Proxy *p)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Sent from the form when it shuts down instead of deleting the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
proxy (because we passed our address to the Proxy's constructor).</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ok_box(&quot;Form
has shut down\n&quot;);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
p; // Form does not delete the proxy if</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}
// we're notified. Proxy's destructor</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
never deletes the associated</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
User_interface object.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
*make_form(void)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
I get an internal compiler error if I try to just initialize</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
form, below, with the following new invocation. Putting the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
new in a function call and initializing form with the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
function's return value works fine, though.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
*form = new Form( &quot;Test Form&quot;,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">new
Form::Field( new Text(&quot;Name:&quot;), Rect(0, 0, 50, 20)),</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">new
Form::Field(&quot;Employee&quot;, &quot;Name&quot;, Rect(50,0,
200,20)),</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">new
Form::Field( new Form::Close_button(), Rect(80,25,120,45)),</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">NULL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">form-&gt;debug_print();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
form;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
*form = make_form();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Employee
homer(&quot;Homer&quot;);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CFormsView::OnTest()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">form-&gt;put_me_on_you(
&quot;Employee&quot;, homer ); // Put the employee on</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">form-&gt;interact(NULL,
Rect(0,0,200,200)); // the form &amp; display it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CFormsView::OnReport() </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">homer.print();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The release_proxy function
    comes next in the listing. It&#146;s essentially a one-liner
    that does nothing but delete the Proxy. The callback is
    needed here to prevent the Form object from trying to send
    the address of the Employee&#146;s name field to operator
    delete.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Form is created in the
    make_form function. It has three fields, a label that holds
    the string &quot;Name:&quot;, a placeholder that will be
    filled with the interface for the Employee&#146;s name field,
    and a close button. OnTest (which is called in response to
    picking a menu item) puts the Employee object onto the Form.
    Sending the Form an interact message makes it pop up (see <b>Figure
    2</b>). The contents of the Employee&#146;s name field is
    displayed in the edit control. Text typed in the edit control
    flows directly into the Employee object&#146;s name field
    without the Form being involved at all. Most importantly, the
    Employee is completely isolated from user-interface
    issues&#151;it&#146;s written entirely in terms of Text
    objects with nary a window in site. The architecture, then,
    is essentially platform-independent. The vast bulk of the
    code doesn&#146;t care about the platform at
    all&#151;it&#146;s written in terms of primitives like
    Strings. Changing platforms involves changing two files only
    (wrappers.h and wrappers.cpp, discussed in Part I and below).</font></p>
    <p><img src="holub2.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
2 The Form</b></font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Implementation
Details</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Implementing the foregoing
    design is relatively straightforward. As is usually the case,
    translating a detailed design into code is more a matter of
    rote copying than anything else. Scenario and class diagrams
    are really just graphical ways of representing the same
    concepts that you can express in an OO programming language;
    in fact, there&#146;s a one-to-one correspondence between the
    diagrams and the class definitions.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Before looking at the code, I
    do need to stay in the design realm a moment longer and flesh
    out a few implementation details. The earlier figures were
    the result of what&#146;s usually called the analysis phase.
    They represent the problem in graphical form, but without
    sufficient detail to be implemented. <b>Figures 3</b> and <b>4</b>
    represent the design phase, where you start filling in those
    details. The design-level drawings add information to the
    analysis-level docs; they don&#146;t replace them.
    (That&#146;s one of the main strengths of OO in my
    opinion&#151;the products of the analysis phase are also the
    first part of the design phase, thereby reducing your work
    considerably.)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><b>Figure 3</b> shows the
    relationships between the various support classes and the
    Form class discussed earlier. <b>Figure 4</b> shows the
    runtime interaction as a Form is displayed and closed.</font></p>
    <p><img src="holub3.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;3&nbsp;
Implementation of Closing a Form</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Starting with the
    relationships in <b>Figure 3</b>, the window object is the
    surface on which the Form is drawn. Windows in MFC are odd
    things in that, with a few exceptions, you can&#146;t
    reliably delete them in your program. Usually you create the
    memory for a window with new, activate the window, then
    forget about it. It&#146;s the user who shuts down the
    window, not the program. How then do you delete the memory
    occupied by the C++ window object? The MFC CWnd class has a
    virtual member function called PostNcDestroy (overridden in
    window) that&#146;s called as the absolute last thing when a
    window is destroyed. The override contains the expression
    delete this;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">thereby freeing the memory
    automatically when the window is destroyed. The main problem
    is that you cannot allocate such a window on the stack or as
    a global variable because the delete will fail. Always use
    new. If you need to destroy the window programmatically, send
    it a DestroyWindow message to simulate the user shutting the
    window down.</font></p>
    <blockquote>
        <p><img src="holub4.jpg"></p>
    </blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><b>Figure 4&nbsp; </b></font><font
    color="#000000" size="2" face="BI New Century Schlbk BoldIt"><b>Closing
    a Form at Runtime</b></font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Form uses a Window; this
    is a containment relationship, not derivation. Consequently,
    the Window needs some means to tell the Form that the window
    has shut down. I&#146;ve used the Notifier/Notifiable
    mechanism described in Part I for this purpose. The
    window&#146;s constructor is passed a pointer to a Notifiable
    object to which it passes a notification message when it
    closes. I didn&#146;t want to derive Form from Notifier both
    because I didn&#146;t want to complicate the higher-level
    design and because I might decide that I want the Form to be
    notified about other things in the future. Instead, I&#146;ve
    created a class called Destroyer inside the Form&#146;s
    namespace, declared a Destroyer as a member of the Form, and
    passed a pointer to the Destroyer member to the window at
    create time.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Looking at the lower part of<b>
    Figure 4</b>, Windows sends PostNcDestroy when the window
    shuts down. The window then notifies the Form&#146;s
    Destroyer object by calling its notify override. Notify then
    passes to delete a pointer to the associated Form. The
    Form&#146;s destructor calls release_proxies, which leads to
    the release-proxies process from <b>Figure 5</b>.</font></p>
    <p><img src="holub5.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
5&nbsp; </b></font><font color="#000000" size="2"
face="BI New Century Schlbk BoldIt"><b>Releasing Proxies</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">How does the user shut down
    the window? If the Window is created with a title, there will
    be a title bar with a close box on it, so that&#146;s an
    option. If there&#146;s no title, there&#146;s no title bar
    or close box, which brings me to the Close_button discussed
    earlier. The Close_button class essentially wraps a
    User_interface around a Button object. The Button is a
    wrapper around CButton that uses the Notifier/Notifiable
    mechanism to tell another object when it&#146;s been pressed.
    That is, the constructor is passed a pointer to a Notifiable
    object (in this case, the Close_button that creates it),
    which is notified on a button press. The Close_button keeps
    track of its parent window (a pointer to which is passed with
    the display or interact message), and sends a DestroyWindow
    message to its parent when the button is pressed. This causes
    a PostNcDestroy to be sent to the parent window.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Since the Close_button
    implements a User_interface, it can be used as a static
    attribute in a Form, and that&#146;s how you get the button
    on the Form. When the Form displays the button, it sets
    itself up to be destroyed by the button. Since the button is
    on the Form, it will be destroyed when the Form shuts down,
    just like any other static attribute.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Note that the CloseButton is
    declared in the Form&#146;s namespace, but it actually can be
    used to destroy any Window, so you might want to move the
    definition out to the global level if you want to use
    Close_buttons in other situations.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Form
Class Code</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">So, finally, it&#146;s time to
    look at the code. You ought to have a pretty good idea by now
    how just about everything works. The code is a
    straightforward implementation of the design. A few details
    are worth discussing.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Window and Button classes
    in <b>Figure 6</b> are just extensions of the wrappers.h and
    wrappers.cpp file from Part I (<i>MSJ</i> August 1996). In
    fact, wrappers2.h is just #included at the bottom of
    wrappers.h, so you won&#146;t see a mention of it anywhere
    else in the code (of course, if this wasn&#146;t a three-part
    article, I would have put everything in one file).</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
6&nbsp; Window and Button Classes</b></font></p>

<p><font color="#000000" size="1" face="Courier New">wrappers2.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
wrappers2.h:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This file is an extension of the Wrappers.h file discussed in
Part</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
one of the article. It is included at the end of wrappers.h and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
should not be included directly by you in your programs (include</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
wrappers.h instead). Were this not a two-part article, I would
have</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
just put everything in the current file into wrappers.h and
gotten</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
it over with.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
The following #if makes sure that wrappers2.h is being expanded</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
from within wrappers.h. The test fails if the #include occurs</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
anywhere else.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#if
(!defined(WRAPPERS_H__) || defined(WRAPPERS2_H_))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#error
Do not include wrappers2.h directly, include wrappers.h instead.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
WRAPPERS2_H__</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Window</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Window: public CWnd</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
public Notifier</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_VIRTUAL(Window)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
BOOL PreCreateWindow(CREATESTRUCT&amp; cs);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void PostNcDestroy();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_VIRTUAL</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG(Window)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">static
const String no_title;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Window(
const Rect &amp;position, const String &amp;title = no_title,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify_on_close = &amp;Nobody );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
~Window();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
show( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
hide( void );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
destroy( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify_on_close;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//------------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">inline
void Window::show( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ShowWindow(
SW_SHOW );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//------------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">inline
void Window::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ShowWindow(
SW_HIDE );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//------------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">inline
void Window::destroy( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
A Window must be allocated from new. It is deleted automatically</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
when the user shuts down the window. DO NOT PASS THE Window
POINTER</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
TO DELETE EVER. Instead, call p-&gt;destroy();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DestroyWindow();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Button</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Button : public CButton</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
public Notifier</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
~Button(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Button(
const String &amp;caption, const Rect &amp;position,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify = &amp;Nobody );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
show( Window *parent );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
hide( void );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify_on_press;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">String
caption;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Rect
position;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
ClassWizard generated virtual function overrides</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_VIRTUAL(Button)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_VIRTUAL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG(Button)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnClicked();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">wrappers2.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;stdafx.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;wrappers.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;notify.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Window</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String Window::no_title;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Window::~Window(){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Window::Window(
const Rect &amp;position,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;title, /*= no_title */</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify_on_close /*= &amp;Nobody */ )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">this-&gt;notify_on_close
= notify_on_close;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
It's convenient to have a Create() function IN ADDITION to</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
PreCreateWindow(), but you must have PreCreateWindow too in case</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
someone calls CreateEx() or Create() polymorphically through a</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
CWnd pointer. Note that, since the current window is not a child</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
window, the position is screen relative, not parent-window
relative.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Note that you can use CWnd::Create() to make a child window but</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
not a popup [Create() requires a be a parent window]. Since the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
current example IS a popup, I must use CreateEx(), which is</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
a little more awkward to use, but more functional.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifdef
STD_DEBUG</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;Creating Window&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot;[&quot; &lt;&lt; title</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot;] at &quot; &lt;&lt; position</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot; width=&quot; &lt;&lt; position.Width()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot; height=&quot; &lt;&lt; position.Height()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot;\n&quot; ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Use CreateEx because this is a popup (Create() requires a parent</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
window). The class name is supplied by PreCreateWindow, as are</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
all attributes except the WS_CAPTION attribute. I add six units</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
to the window width to compensate for the border. If the window</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
has a caption bar (has_title is true), add 25 units for it and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
the border, else just add 6 units for the border..</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">bool
has_title = &amp;title != &amp;no_title;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CreateEx(
0, // No extended attributes</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">NULL,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">!has_title
? &quot;&quot;: CString((String &amp;)title),</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">!has_title
? 0 : WS_CAPTION,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">position.left,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">position.top,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">position.Width()
+ 6,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">position.Height()
+ (has_title ? 25 : 6),</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">NULL,
// no parent </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">NULL
// no menu</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Window::PostNcDestroy() </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Called by the framework after the windows object has been</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
destroyed, frees the memory associated with the current window.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
That is, I'm assuming that the window is allocated from new and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
that it will stay around until the user opts to close it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
There will be no delete to match the new.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">notify(
notify_on_close );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWnd::PostNcDestroy();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
this;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
Window::PreCreateWindow(CREATESTRUCT&amp; cs) </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Replace various arguments to Create (or CreateEx) with values</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
that are required by the current window implemenation. The</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
WS_VISIBLE attribute, though not strictly speaking necessary,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
lets the caller dispense with the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
win-&gt;ShowWindow( SW_SHOWNORMAL );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
win-&gt;UpdateWindow();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
calls.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">static
CString class_name;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
class_name.IsEmpty() )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If we haven't registered a class with Windows, yet, do it</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
for now. This call usually establishes cursor, brush, and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
icon all windows of the current class. (Since the windows</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
isn't going to be minimized, I've left out the icon, here).</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">HCURSOR
cursor = AfxGetApp()-&gt;LoadStandardCursor( IDC_ARROW );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">HBRUSH
brush = (HBRUSH) ::GetStockObject( WHITE_BRUSH );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">HICON
icon = 0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class_name
= AfxRegisterWndClass(CS_VREDRAW|CS_HREDRAW,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">cursor,
brush,icon);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Window is initially hidden, if that's not what</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
you want, OR WS_VISIBLE into the file bit.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">cs.style
|= WS_OVERLAPPED|WS_POPUPWINDOW ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">cs.lpszClass
= class_name;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
CWnd::PreCreateWindow(cs);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BEGIN_MESSAGE_MAP(Window,
CWnd)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG_MAP(Window)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG_MAP</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">END_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Button</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//======================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Button::~Button(){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Button::Button(
const String &amp;in_caption,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;in_position,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Notifiable
*notify /*=&amp;Nobody*/): caption ( in_caption )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
position( in_position )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
notify_on_press(notify)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Button::show( Window *parent )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Create(
(const CString)caption,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">WS_CHILD|WS_VISIBLE,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">position,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">parent,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">~0U
); // Button ID</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Button::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DestroyWindow();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Button::OnClicked(void) </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">notify(
notify_on_press );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BEGIN_MESSAGE_MAP(Button,
CButton)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG_MAP(Button)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_CONTROL_REFLECT(BN_CLICKED,
OnClicked)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG_MAP</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">END_MESSAGE_MAP()</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Window class at the top of
    both files derives from MFC&#146;s CWnd, adding Notifier
    functionality to support the notify-on-close message. The
    main issue here, other than the implementation of
    PostNcDestroy discussed above, is the use of PreCreateWindow.
    This function is called during the create process just before
    the Windows CreateWindow call is made. It is passed a
    structure with a field for each argument that will be passed
    to Windows, and gives you a chance to modify any of these
    arguments. In the current code, I&#146;m registering a new
    Window class with Windows (by calling AfxRegisterWndClass)
    and passing the resulting class name to Windows. The Windows
    window is actually created in the Window-class
    constructor&#151;there is no two-part creation as in MFC. The
    window is initially hidden, so passing the window object a
    show message displays it.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Button class, which is a
    very small wrapper around MFC&#146;s CButton, is also
    implemented in </font><font color="#000000" size="1"
    face="verdana,arial,helvetica">Figure 6</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">. All
    it does is catch the OnClicked message that comes in from
    Windows and translates it into a notification. The main
    purpose of this class is platform independence&#151;you can
    write code in terms of Buttons without having to worry about
    Windows messages.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Form and related classes
    are implemented in form.h and form.cpp, shown in <b>Figure 7</b>.
    The main implementation problem worth discussing is in the
    Form&#146;s constructor, which takes a variable number of
    arguments. (The function definition is the second one in
    form.cpp.) Normally, a function like this could get by with
    only one argument, but C++ provides a rather nasty gotcha
    here. The va_start macro initializes the va_list object to
    hold the address on the runtime stack of the argument
    following the first one. A call like</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">va_list field_list;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">va_start( field_list, start);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">expands more or less like
    this:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">char *field_list;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">field_list = (char
    *)&amp;start;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The problem is that the first
    argument to the Form constructor is a reference, and even
    though reference arguments are passed to functions via
    pointers, there&#146;s no way to get the address of that
    pointer. Taking the address of a reference always gives you
    the address of the referenced object&#151;the contents of the
    pointer that&#146;s used internally to represent the
    reference. Consequently, if I were to pass form_name to
    va_start, I&#146;d initialize the field_list to the address
    of whatever String is used to hold the form_name rather than
    to the address, on the stack, of the pointer used to pass the
    form-name reference. I&#146;ve solved the problem by adding a
    second explicitly declared argument to Form::Form, and
    passing that second argument to va_start.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The final issue is the
    relationship between the Form and its window. Normally, the
    Form keeps track of the space required to hold the fields and
    creates a window exactly that size. The Form&#146;s display
    and interact messages interpret a NULL window parameter as a
    create-your-own-window request. You can adjust the size by
    deriving a class from User_interface, whose virtual-function
    overrides literally do nothing, and then installing an object
    of that class in the Form with a position rectangle
    specifying an upper-left corner of (0,0) and a lower-right
    corner specifying the window size. Alternatively, you can
    create a window object that has the desired size and pass a
    pointer to that window object to the Form&#146;s display or
    interact message. The Form will use the indicated window in
    that case.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
7&nbsp; Final Form Classes</b></font></p>

<p><font color="#000000" size="1" face="Courier New">form.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
form.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifndef
FORM_H__</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
FORM_H__</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;mystring.h&quot; // Discussed in Part 1.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;userintf.h&quot; // Discussed in Part 1.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;wrappers.h&quot; // Discussed in Part 1.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Notes:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
(*) The Form::fields member is an array for the time</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
being, it should really be variable-length collection.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
(*) Forms cannot be copied, so the operator= and copy ctor are</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
private. There's not need to define the functions, simple</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
prototypes are sufficient. (The linker kicks out an error</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
if the function isn't defined and someone manages to call</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
it.)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Form : public User_interface</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Field; // These classes are nested inside the Form</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Element; // class's name space, not external</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Proxy; // references. Definitions are below.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Close_button;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">~Form(
void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form(
const String &amp;form_name, Field *first, ... );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
( const Form &amp;r ); // do not define</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
&amp;operator= ( const Form &amp;r ); // do not define</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">bool
add_field ( Field *new_field );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
release_proxies ( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
put_me_on_you ( const String &amp;class_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Element &amp;ele );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
remove_me_from_you ( const String &amp;class_name );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:
// overrides for User_interface base class</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void hide ( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool display ( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool interact ( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">String
name;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Rect
size;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Field
**current;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">enum
{ max_fields = 32 };</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Field
*fields[max_fields];// fields on the form, should be a</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
&quot;collection&quot; instead of an array.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Create an internal class so that the Window can notify us</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
when we're destroyed. Make it a friend so that it can release</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
the proxies.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Destroyer: public Notifiable</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form
*form;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void notify( class Notifier *sender );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Destroyer(Form
*notifiee): form(notifiee) {}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">destroyer;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">friend
class Form::Destroyer;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
debug_print(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#if
(defined(NDEBUG) || !defined(STD_DEBUG)) // not debuggging</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">inline
void Form::debug_print(void){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Field</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
It is a serious error for the same attribute proxy to be used in</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
more than one form. This problem can be solved by reference-</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
counting the proxy, but is not solved in the current
implementation.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
A Field can't be copied.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Form::Field: public User_interface</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">enum
Behavior{ input_output=0, input=0, output=1 };</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">~Field(
void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field(
User_interface *static_attrib,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;position );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field(
const String &amp;class_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;attribute_id,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;position,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Behavior behavior= input_output );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
(const Field &amp;); // Do not define.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Field &amp;operator= (const Field &amp;);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String *if_in_class_return_id (const String &amp;cls_name)const;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
attach_proxy (Proxy *proxy );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
release_proxy (void );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:
// overrides for User_interface base class</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void hide ( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool display ( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool interact( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Behavior
mode;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">String
class_name;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">String
attribute_id;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Rect
position;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Proxy
*proxy; // Supplied by Form::Element if not</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
static, otherwise comes from user</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
via Form::Form or Form::add_field.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:
friend class Form;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;size( void );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">friend
void Form::debug_print(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Form::Proxy : public User_interface</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">~Proxy(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Proxy(
User_interface *attribute_proxy,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Element
*notify_me_rather_than_delete_proxy = NULL);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
release(void);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:
// overrides for User_interface base class</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void hide ( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool display ( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool interact( Window *win, const Rect &amp;rect );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">protected:
User_interface *ui;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:
Form::Element *creator;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">friend
void Form::debug_print(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Elements can be copied, but there's nothing to copy at this
level,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
so leave it up to the derived class. Note that, even though</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
give_me_a_proxy_for(...) doesn't modify the class, it is not</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
const because the returned proxy could modify the class.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Form::Element</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
~Element(void);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:
friend class Form;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
Proxy *give_me_proxy_for(const String &amp;form_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;attribute_id )=0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">private:
friend class Proxy;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void release_proxy(Proxy *p);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">friend
void Form::debug_print(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
Form::Close_button: public User_interface</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
public Notifiable</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Button
*button;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Window
*parent;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">~Close_button(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close_button(void);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void hide ( void );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool display ( Window *win, const Rect &amp;position );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
bool interact( Window *win, const Rect &amp;position );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void notify ( class Notifier *sender );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">friend
void Form::debug_print(void);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//----------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif
FORM_H__</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">form.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
form.cpp</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;stdafx.h&quot; // Needed only to keep compiler happy</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;form.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;stdarg.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Form::~Form( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Delete the fields, first releasing the proxies</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">for(Field
**p=fields; p &lt; &amp;fields[max_fields] &amp;&amp; *p ;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*p)-&gt;release_proxy();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete(
*p++ );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
The initializer-list element &quot;observer(this)&quot; causes
the compiler</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
to kick out a:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
warning C4355: 'this' : used in base member initializer list.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Normally, it would be dangerous for the contained-object</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
constructor to access the container class because the contained</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
objects are initialized before the container is initialized.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
We don't do that here, and it's convient to pass a pointer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
to the container at construction time, so turn off the warning.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#pragma
warning( disable : 4355 )</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Form(
const String &amp;form_name, Field *first, ... )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">:
current ( fields )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
name ( form_name )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
size ( 0, 0, 0, 0 )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
destroyer ( this )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Initialize the Form with its name and fields. Any</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
fields in excess of max_fields are silently discarded.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
There's nothing wrong with any function (including a constructor)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
having a variable number of arguments. The argument passed</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
to va_start MAY NOT be a reference, however becuase taking</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
the address of the reference gets you the referenced thing.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">va_list
field_list;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">va_start(
field_list, first );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">memset(
fields, 0, sizeof(fields) );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
*field = first;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while(
field &amp;&amp; (current &lt; &amp;fields[max_fields]) )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">size.expand_to_include(
field-&gt;size() );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">*current++
= field;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">field
= va_arg(field_list, Field *);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">va_end(
field_list );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#pragma
warning( default : 4355 )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">bool
Form::add_field( Field *new_field )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
new_field );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
current &lt; &amp;fields[max_fields] )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">*current++
= new_field;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">size.expand_to_include(
new_field-&gt;size() );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
true;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
false;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::release_proxies( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
**current = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while(
current &lt; &amp;fields[max_fields] &amp;&amp; *current )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*current++)-&gt;release_proxy();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::put_me_on_you( const String &amp;class_name,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Element &amp;element )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;element );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;class_name );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
**current = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">for(;
current &lt; &amp;fields[max_fields] &amp;&amp; *current;
++current )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String *id = (*current)-&gt;if_in_class_return_id(class_name);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
id )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Element
&amp;e = (Element &amp;)element;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Proxy
*p = e.give_me_proxy_for( name, *id );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
p )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*current)-&gt;attach_proxy(
p );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::remove_me_from_you( const String &amp;class_name )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;class_name );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Remove all proxies on fields associated with given class_name</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
**current = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">for(;
current &lt; &amp;fields[max_fields] &amp;&amp; *current;
++current )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
(*current)-&gt;if_in_class_return_id(class_name) )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*current)-&gt;release_proxy();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
void Form::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
*const *current = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while(
current &lt; &amp;fields[max_fields] )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*current++)-&gt;hide();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::display( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
win );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;rect );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Display the form, either on the indicated Window or on a</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
manufactured popup window if win is NULL. The Rect argument</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
is ignored. (Note that, since the Field's display and interact</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
handlers also ignore the rect argument, I just pass it through</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
to avoid having to create a dummy rectangle).</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If a popup window is created, the form name is used for the</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
title and the windows size is exactly large enough to hold</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
all fields.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Window
*surface= win ? win</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">:
new Window(size, name, &amp;destroyer) ;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
*const *current = fields;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while(
current &lt; &amp;fields[max_fields] )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*current++)-&gt;display(surface,
rect);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
true;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::interact( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;rect );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
See comments in display() function, above.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Window
*surface = win ? win : new Window(size, name, &amp;destroyer);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">surface-&gt;show();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
**fieldv = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while(
*fieldv &amp;&amp; (fieldv &lt; &amp;fields[max_fields]) )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(*fieldv++)-&gt;interact(surface,
rect);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
true;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#if
!defined(NDEBUG) &amp;&amp; defined(STD_DEBUG)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;text.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::debug_print(void)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;Form @&quot; &lt;&lt; this</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot; name[&quot; &lt;&lt; name &lt;&lt; &quot;]&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot; size&quot; &lt;&lt; size</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;&lt;
&quot; fields:\n&quot; ;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Field
**fieldv = fields; </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">for(;
*fieldv &amp;&amp; (fieldv &lt; &amp;fields[max_fields]) ;
++fieldv)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; Field[&quot;&lt;&lt; (fieldv-fields) &lt;&lt;
&quot;]&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; class(&quot; &lt;&lt; (*fieldv)-&gt;class_name
&lt;&lt; &quot;)&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; attrib(&quot; &lt;&lt; (*fieldv)-&gt;attribute_id
&lt;&lt; &quot;)&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; posn&quot; &lt;&lt; (*fieldv)-&gt;position
&lt;&lt; &quot;)&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; proxy @&quot; &lt;&lt; (*fieldv)-&gt;proxy ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
(*fieldv)-&gt;proxy )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; crtr @&quot; &lt;&lt;
(*fieldv)-&gt;proxy-&gt;creator ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Text
*text = dynamic_cast&lt;Text *&gt;( (*fieldv)-&gt;proxy-&gt;ui );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
text )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot; Text(\&quot;&quot; &lt;&lt; *text &lt;&lt;
&quot;)\n&quot; ;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">else
if( dynamic_cast&lt;Form::Close_button *&gt;(
(*fieldv)-&gt;proxy-&gt;ui ) )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;(close button)\n&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;***UNKNOWN PROXY***&quot; ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;\n&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Destroyer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
void Form::Destroyer::notify( class Notifier *sender )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This function is called when the window that the form is</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
using as its drawing surface is shut down by the user. It</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
destroys the associated Form, which causes the proxies to</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
be released.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
dynamic_cast&lt;Window*&gt;(sender) );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
form;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Field</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Form::Field::~Field( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;text.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Field::Field(
User_interface *static_attrib,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;position_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">:
mode ( output )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
class_name ( &quot;&quot; )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
attribute_id ( &quot;&quot; )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
position ( position_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
proxy ( new Proxy(static_attrib) )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#if
(!defined(NDEBUG) &amp;&amp; defined(STD_DEBUG))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;Adding static_attrib @&quot; &lt;&lt;
static_attrib &lt;&lt; &quot;\n&quot;;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Text
*txt = dynamic_cast&lt;Text*&gt;(static_attrib);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
txt )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">std_debug
&lt;&lt; &quot;\t(value is &quot; &lt;&lt; *txt &lt;&lt; &quot;
@&quot; &lt;&lt; txt &lt;&lt; &quot;)\n&quot; ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Field::Field(
const String &amp;class_name_in,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String &amp;attribute_id_in,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;position_in,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Behavior mode_in /*= input_output */ )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">:
mode ( mode_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
class_name ( class_name_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
attribute_id ( attribute_id_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
position ( position_in )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
proxy ( NULL )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
String *Form::Field::</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if_in_class_return_id(const
String &amp;candidate )const</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;candidate );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
(class_name == candidate) ? &amp;attribute_id : NULL;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::Field::attach_proxy(Proxy *proxy)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
proxy );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this-&gt;proxy==NULL ); // Illegal if a proxy already attached</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">this-&gt;proxy
= proxy;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Note for release_proxy, hide, display, interact. It's not an
error</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
if a field that doesn't have a proxy attached to itself is
displayed,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
etc. It's just a no-op.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::Field::release_proxy(void)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
proxy )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">proxy-&gt;release();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">proxy
= NULL;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
void Form::Field::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
proxy )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">proxy-&gt;hide();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::Field::display( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
win );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
proxy ? proxy-&gt;display( win, rect ) : true;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::Field::interact( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Display the current field. The rect argument is ignored in</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
favor of the position rectangle stored in the Field itself.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
win );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
&amp;rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
proxy );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
(proxy==NULL ) ? true :</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(mode
== input) ? proxy-&gt;interact( win, position ) :</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">proxy-&gt;display
( win, position ) ;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">const
Rect &amp;Form::Field::size( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Normally, I wouldn't return a reference to a field in an object</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
because the caller could modify the field. Here, it seems safe</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
because the fuction is private, and called only from the Form</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
class.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
position;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Proxy</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Form::Proxy::~Proxy(void){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Proxy::Proxy(
User_interface *attribute,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Element
*notify_me_rather_than_delete_proxy )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">:
ui ( attribute )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">,
creator ( notify_me_rather_than_delete_proxy /*=NULL*/ )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::Proxy::release( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
creator )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">creator-&gt;release_proxy(this);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
ui )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
ui;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
this;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
void Form::Proxy::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
ui );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ui-&gt;hide();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::Proxy::display( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
ui );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
ui-&gt;display( win, rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
bool Form::Proxy::interact( Window *win, const Rect &amp;rect )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
ui );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
ui-&gt;interact( win, rect );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Element</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
Form::Element::~Element(void){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
void Form::Element::release_proxy(Proxy *p)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Empty on purpose. The default action is to not release</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
anything. The derived class can define an override if it</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
provides proxies that need to be released.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Form::Close_button</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//===================================================================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Close_button::~Close_button(){
if(button) delete button; }</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Form::Close_button::Close_button()
: button(NULL), parent(NULL){}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::Close_button::hide( void )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(
this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if(
button )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">delete
button;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">button
= NULL;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">bool
Form::Close_button::display( Window *win, const Rect
&amp;position )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(this);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(win
);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(&amp;position);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">parent
= win;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">button
= new Button( &quot;Close&quot;, position, this );</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">button-&gt;show(win);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
true;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">bool
Form::Close_button::interact( Window *win, const Rect
&amp;position )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
display(win, position);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//-------------------------------------------------------------------</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*virtual*/</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Form::Close_button::notify( class Notifier *sender )</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This function is called when the window that the form is</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
using as its drawing surface is shut down by the user. It</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
destroys the associated Form, which causes the proxies to</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
be released.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Button
*b = dynamic_cast&lt;Button*&gt;(sender);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(b);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(b==button);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">assert(parent);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">parent-&gt;DestroyWindow();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Making
the Code Useful in the Real World</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The code from this month is a
    start, but a lot needs doing to get it ready for real-world
    use. The main deficiency is the lack of persistence. Several
    changes need to be made for real-world use. The rest of this
    article describes these recommended changes.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Everything needs to be made
    nicer looking on the screen. Text objects, for example, are
    shown with a gray background when sent a display message, but
    the underlying window has a white background. There&#146;s
    lots of little stuff like this that needs fixing.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The next problem is that a
    Form is a very passive container for Fields. I&#146;d like to
    implement dialog-style tabbing and the notion of a default
    button too. This can be done by expanding the User_interface
    class so that it can notify the Form when it detects a press
    of the tab key.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Form and Fields (but not
    the Elements or Proxies) need to be persistent so that their
    lifetimes can be longer than that of the program. Among other
    things, persistence would allow me to make a graphical Forms
    editor that would work like a dialog editor but store Form
    objects on the disk instead of in a .rc file. Persistence is
    easy enough to implement, but I haven&#146;t done it here.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Another useful feature is
    auto-resizing along the lines of Java&#146;sª AWT package.
    Rather than specifying Field positions using absolute
    rectangles, I&#146;d like to represent the position as a
    weighted percentage coverage of the entire Form. This way the
    Proxies could change size when the size of the Form changed.
    This change can be done entirely within the Form if
    you&#146;re willing to hide the Proxy and then redisplay it
    every time the Form changes size. With quite a bit more work,
    you could even allow the user to drag the Proxies around on
    the form at runtime and have the Form remember the new
    position in some persistent way.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I&#146;d also like to clean up
    the memory model, making everything reference-counted much
    like the String developed in Part I and eliminating the
    restrictions that everything must come from new.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Another issue to think about
    at least is the fact that the User_interface objects
    I&#146;ve been using (such as Text) create their user
    interfaces by making windows. If the Form has a lot of
    Fields, this could affect the time it takes for the Form to
    appear on the screen. A better solution might be to use a
    Canvas class that encapsulates the Windows device context
    rather than using a Window class. That is, the
    User_interface&#146;s display and interact messages would be
    passed pointers to canvases (device contexts) on which they
    had to draw themselves. Similarly, the Form would have to
    process all Windows messages for all Fields and route them to
    the correct Proxy. (The easy solution is to add a virtual
    WndProc function to the User_interface and have the
    Form&#146;s WndProc route messages to the Proxy&#146;s
    WndProc when it had the focus.) This routing capability
    would, of course, make the Form implementation more
    complicated.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In spite of all these
    peccadilloes, the Forms package is pretty useful as it stands
    and certainly serves to demonstrate the basic OO principles
    involved. A Form really does solve the problem of an object
    needing to display or load itself in different ways in
    different situations, and it does it in an OO way that
    doesn&#146;t require the object to expose any information at
    all about its internal implementation. Unlike an MFC CDialog,
    you can actually use a Form in an OO design without
    compromising the design at all. </font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>To
obtain complete source code listings, see </b></font><a
href="ednote.htm"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Editor's page</b></font></a><font
color="#000000" size="2" face="verdana,arial,helvetica"><b>.</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>This article is reproduced
    from Microsoft Systems Journal. Copyright © 1997 by Miller
    Freeman, Inc. All rights are reserved. No part of this
    article may be reproduced in any fashion (except in brief
    quotations used in critical articles and reviews) without the
    prior consent of Miller Freeman.</i></font></p>
    <p><font color="#000000" size="2"><i>To contact Miller
    Freeman regarding subscription information, call (800)
    666-1084 in the U.S. and Canada, or (303) 678-0439 in all
    other countries. For other inquiries, call (415) 905-2200.</i></font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
</blockquote>
</font></body>
</html>

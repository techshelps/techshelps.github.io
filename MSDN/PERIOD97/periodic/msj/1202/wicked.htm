<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="C:\MSOffice\Templates\MSJ.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Wicked Code</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<p><font color="#000000" size="6" face="verdana,arial,helvetica">Wicked
Code</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica">by Jeff Prosise</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Jeff Prosise writes extensively
about programming in Windows and is a contributing editor of
several computer magazines. He is the author of Programming
Windows 95 with MFC (Microsoft Press).</b></font></p>

<blockquote>
    <p><font color="#000080" size="7"
    face="B New Century Schlbk Bold">S</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">ometimes
    the simplest things in Windows® turn out to be the most
    difficult. I was reminded of this recently when</font><font
    color="#000080" size="2" face="verdana,arial,helvetica"> </font><font
    color="#000000" size="2" face="verdana,arial,helvetica">I
    received email from a reader who wondered how to implement a
    cancel dialog. He wanted to display a dialog with a Cancel
    button at the outset of a lengthy message-processing
    operation so the user could terminate the operation if it
    took longer than expected.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Sounds simple, right? But as
    this reader had discovered, there&#146;s more to it than
    meets the eye. Simply displaying a dialog with a Cancel
    button won&#146;t cut it, because as long as the application
    that created the dialog isn&#146;t retrieving and dispatching
    messages, WM_COMMAND messages reporting clicks of the Cancel
    button can&#146;t get through (nor can any other messages).
    And if the dialog is modal, control is wrested away from your
    window procedure and handed to the dialog procedure the
    moment the dialog is created.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The classic way to make a
    cancel dialog work is to fake a modal dialog with a modeless
    dialog that disables its owner, and to pump messages to the
    dialog by having the application&#151;which receives control
    again once a modeless dialog is created&#151;periodically
    pause to retrieve and dispatch messages waiting in the
    message queue. It&#146;s not exactly rocket science, but
    it&#146;s not what I&#146;d call straightforward either. In
    fact, every time I do it, I find myself thinking that there
    has to be a better way. The model that I think of is the MFC
    CWaitCursor class, which makes displaying an hourglass cursor
    (and later restoring the original cursor) as simple as adding
    a</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CWaitCursor wait;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">statement to your application.
    It&#146;s easy to display an hourglass cursor. Why
    shouldn&#146;t it be equally easy to display a cancel dialog?</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">It should be. That&#146;s why
    I wrote a handy little CWaitDialog class that you can
    download from <i>MSJ</i>&#146;s Web site, http://www.msj.com.
    CWaitDialog makes it a snap to display a cancel dialog at the
    outset of a time-consuming operation and to have your
    application respond to clicks of the Cancel button. The
    grunge work is hidden inside the class, so about all you have
    to do is construct a CWaitDialog object when you want a
    cancel dialog displayed. The dialog is destroyed
    automatically when the CWaitDialog object goes out of scope.
    As a bonus, the dialog includes a progress control that you
    can step to report the ongoing status of the operation being
    carried out by the main body of the application. Sound
    enticing? Here&#146;s the lowdown on how CWaitDialog
    works&#151;and how you can put it to work in your own
    applications.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Using
the CWaitDialog Class</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Using CWaitDialog is
    simplicity itself. To illustrate, suppose you&#146;re writing
    the world&#146;s next great spreadsheet program. When a
    lengthy recalc operation is begun, you&#146;d like to display
    a cancel dialog so the user can interrupt the recalc if it
    takes longer than expected. Here&#146;s what you do.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Just before *(e recalc
    operation is begun, construct a CWaitDialog object on the
    stack. Pass the constructor the address of a BOOL variable
    that&#146;s initialized to TRUE. If the user clicks the
    Cancel button, the dialog will use this pointer to set the
    variable equal to FALSE.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Begin the recalc operation.
    Periodically call the dialog&#146;s SetPercentComplete
    function to update the progress bar, and call its Pump
    function to pump messages through the message queue. After
    calling Pump, check to see if the BOOL variable initialized
    previously has changed from TRUE to FALSE. If it has,
    terminate the recalc and allow the message handler to return;
    if it hasn&#146;t, then proceed as normal. When the recalc is
    complete, close the dialog by calling its Close function or
    by allowing the CWaitDialog object to go out of scope.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Here&#146;s how it might look
    in code:</font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">BOOL bContinue = TRUE;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CWaitDialog dlg
    (&amp;bContinue);</font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">for (int i=0; i&lt;nNumRows
    &amp;&amp; bContinue; i++) {</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">for (j=0; j&lt;nNumCols
    &amp;&amp; bContinue; j++) {</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">RecalcCell (i, j);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">int nPercent = (((i * j) + j)
    * 100) /</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">(nNumRows * nNumCols);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">dlg.SetPercentComplete
    (nPercent);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">dlg.Pump ();</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The key here is that calling
    Pump enacts a secondary message loop that allows the dialog
    to set bContinue to FALSE when the Cancel button is clicked.
    The more often Pump is called (and the more often bContinue
    is checked), the more responsive the application will be to
    clicks of the Cancel button. If you fail to call Pump or
    check the bContinue flag, the Cancel button will be ignored.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><b>Figure 1</b></font><font
    color="#000000" size="1" face="FranklinGothic"><b> </b></font><font
    color="#000000" size="2" face="verdana,arial,helvetica">shows
    what CWaitDialog&#146;s cancel dialog looks like. The
    progress control is updated each time
    CWaitDialog::SetPercentComplete is called. As the recalc
    operation proceeds, the bar steps from left to right. When
    the recalc is finished, the dialog is destroyed when
    CWaitDialog goes out of scope and its destructor is called.
    If there&#146;s a delay between the time the recalc is
    finished and CWaitDialog goes out of scope, you can destroy
    the dialog manually by calling its Close function. In
    CWaitCursor terms, this is equivalent to calling
    CWaitCursor::Restore to restore the original cursor image
    before a CWaitCursor object goes out of scope.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">wicked1.bmp</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
1 Default caption</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">By default, a
    CWaitDialog&#146;s caption reads &quot;Working,&quot; and the
    text in the body of the dialog says &quot;Click Cancel to
    cancel the operation,&quot; as shown in <b>Figure 1</b>. You
    can specify alternative text strings when you construct a
    CWaitDialog object. The statement</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CWaitDialog dlg
    (&amp;bContinue, &quot;Recalculating&quot;,</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">&quot;Click Cancel to stop
    recalculating&quot;);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">creates a CWaitDialog whose
    caption reads &quot;Recalculating&quot; and whose body
    contains the text &quot;Click Cancel to stop
    recalculating.&quot; If you&#146;d like, you can update the
    text displayed in the body of the dialog box on the fly with
    CWaitDialog::SetMessageText. The statements</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">if (nPercent &gt;= 90)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">dlg.SetMessageText
    (&quot;Almost done!&quot;);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">change the message displayed
    in the dialog to &quot;Almost done!&quot; when the percent
    complete figure reaches 90 percent. For reference, </font><font
    color="#000000" size="1" face="verdana,arial,helvetica">Figure
    2</font><font color="#000000" size="2"
    face="verdana,arial,helvetica"> summarizes all public member
    functions of CWaitDialog, including Pump, Close,
    SetMessageText, SetPercentComplete, and, of course, the class
    constructor.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;2&nbsp;CWaitDialog&#146;s
Public Member Functions</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWaitDialog
(BOOL* pFlag, LPCTSTR pszCaption = NULL, <br>
LPCTSTR pszText = NULL)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Description</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">Constructs
a CWaitDialog object and dialog and displays the dialog on the
screen.</font></p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Parameters</font></p>

<blockquote>
    <blockquote>
        <blockquote>
            <blockquote>
                <p><font color="#000000" size="1"
                face="verdana,arial,helvetica">pFlag Pointer to a
                BOOL flag that the dialog will set to FALSE when
                the Cancel button is clicked.</font></p>
                <p><font color="#000000" size="1"
                face="verdana,arial,helvetica">pszCaption Pointer
                to a text string specifying the dialog caption.
                If this parameter is NULL, the caption defaults
                to &quot;Working.&quot;</font></p>
                <p><font color="#000000" size="1"
                face="verdana,arial,helvetica">pszText Pointer to
                a text string specifying the message text that
                appears above the dialog&#146;s progress control.
                If this parameter is NULL, the message text
                defaults to &quot;Click Cancel to cancel the
                operation.&quot;</font></p>
                <p><font color="#000000"
                face="verdana,arial,helvetica"></font>&nbsp;</p>
            </blockquote>
        </blockquote>
    </blockquote>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
SetPercentComplete (int nPercent)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Description</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">Sets
the dialog&#146;s progress bar to reflect the status of an
ongoing operation.</font></p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Parameters</font></p>

<blockquote>
    <blockquote>
        <blockquote>
            <blockquote>
                <p><font color="#000000" size="1"
                face="verdana,arial,helvetica">nPercent An
                integer from zero to 100 specifying percent
                complete.</font></p>
                <p><font color="#000000"
                face="verdana,arial,helvetica"></font>&nbsp;</p>
            </blockquote>
        </blockquote>
    </blockquote>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
SetMessageText (LPCTSTR pszText)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Description</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">Changes
the message text displayed in the body of the dialog.</font></p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Parameters</font></p>

<blockquote>
    <blockquote>
        <blockquote>
            <blockquote>
                <p><font color="#000000" size="1"
                face="verdana,arial,helvetica">pszText Pointer to
                a text string specifying the message text that
                appears above the dialog&#146;s progress control.</font></p>
                <p><font color="#000000"
                face="verdana,arial,helvetica"></font>&nbsp;</p>
            </blockquote>
        </blockquote>
    </blockquote>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
Pump ()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Description</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">Retrieves
and dispatches messages waiting in the application&#146;s message
queue. Call this function periodically while a CWaitDialog is
displayed to allow the dialog to respond to clicks of its Cancel
button. The more often Pump is called, the more responsive the
application will be.</font></p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Return
Value</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">TRUE
if it&#146;s okay for processing to continue, or FALSE if the
message handler that called Pump should return immediately. A
FALSE return means there&#146;s a WM_QUIT message waiting to be
retrieved from the message queue.</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Close ()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="B Franklin Gothic Demi">Description</font></p>

<p><font color="#000000" size="1" face="verdana,arial,helvetica">Closes
the dialog. If a CWaitDialog object goes out of scope before this
function is called, the dialog is closed automatically.</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><b>Figure 3</b> contains the
    complete source code for an application that uses
    CWaitDialog, as well as the source code for CWaitDialog
    itself. When the left mouse button is clicked in the
    window&#146;s client area, an OnLButtonDown handler draws
    several thousand randomly sized and colored ellipses.
    Depending on the size of the window and the speed of the host
    PC, the drawing loop could require anywhere from a few
    seconds to a couple of minutes to run its course.
    Fortunately, drawing can be interrupted at any time by
    clicking the Cancel button. And because the app calls
    CWaitDialog::Pump and checks the bContinue flag between every
    ellipse, Cancel terminates the loop almost immediately.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;3&nbsp;CWaitDialog</b></font></p>

<p><font color="#000000" size="1" face="Courier New">Demo.rc</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Demo.rc</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;afxres.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;WaitDlg.rc&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Other resources go here...</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">Demo.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***********************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Demo.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***********************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
CMyApp : public CWinApp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
BOOL InitInstance ();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
CMainWindow : public CFrameWnd</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainWindow
();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">protected:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
DrawRandomEllipse (CDC*, CRect&amp;);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnLButtonDown (UINT, CPoint);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_MESSAGE_MAP
()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">Demo.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***********************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Demo.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***********************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;afxwin.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;stdlib.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;WaitDlg.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;Demo.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMyApp
myApp;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/////////////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
CMyApp member functions</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
CMyApp::InitInstance ()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_pMainWnd
= new CMainWindow;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_pMainWnd-&gt;ShowWindow
(m_nCmdShow);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_pMainWnd-&gt;UpdateWindow
();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
TRUE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/////////////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
CMainWindow message map and member functions</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BEGIN_MESSAGE_MAP
(CMainWindow, CFrameWnd)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_WM_LBUTTONDOWN
()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">END_MESSAGE_MAP
()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainWindow::CMainWindow
()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Create
(NULL, &quot;CWaitDialog Demo&quot;);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainWindow::OnLButtonDown (UINT nFlags, CPoint point)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CRect
rect;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GetClientRect
(&amp;rect);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CClientDC
dc (this);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Display a cancel dialog.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
bContinue = TRUE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWaitDialog
dlg (&amp;bContinue);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
nCount = 0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
nPercentComplete = 0;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Draw ellipses until Cancel is clicked or we've reached our</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
quota of ellipses.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while
(bContinue) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DrawRandomEllipse
(&amp;dc, rect);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(++nCount &gt;= 200) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">nCount
= 0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">nPercentComplete
+= 2;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">dlg.SetPercentComplete
(nPercentComplete);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(nPercentComplete == 80)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">dlg.SetMessageText
(&quot;Almost done!&quot;);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(nPercentComplete == 100)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">break;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">dlg.Pump
();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainWindow::DrawRandomEllipse (CDC* pDC, CRect&amp; rect)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
x1 = rand () % rect.right;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
x2 = rand () % rect.right;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
y1 = rand () % rect.bottom;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
y2 = rand () % rect.bottom;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CRect
rcEllipse (x1, y1, x2, y2);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">rcEllipse.NormalizeRect
();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CBrush
brush (RGB (rand () % 255, rand () % 255, rand () % 255));</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CBrush*
pOldBrush = pDC-&gt;SelectObject (&amp;brush);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pDC-&gt;Ellipse
(&amp;rcEllipse);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pDC-&gt;SelectObject
(pOldBrush);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">WaitDlg.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
WaitDlg.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
CWaitDialog : public CDialog</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">protected:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL*
m_pFlag;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWaitDialog
(BOOL*, LPCTSTR = NULL, LPCTSTR = NULL);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
~CWaitDialog ();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
void OnCancel ();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
Pump ();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
SetPercentComplete (int);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
SetMessageText (LPCTSTR);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
Close ();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<blockquote>
    <p><font color="#000000" size="1" face="Courier New">WaitDlg.cpp</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
WaitDlg.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;afxwin.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&lt;afxcmn.h&gt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;WaitRsc.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;WaitDlg.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/////////////////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
CWaitDialog class implementation</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWaitDialog::CWaitDialog
(BOOL* pFlag, LPCTSTR pszCaption, LPCTSTR pszText) :</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CDialog
()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_pFlag
= pFlag;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Disable the main window and create the dialog.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">AfxGetMainWnd
()-&gt;EnableWindow (FALSE);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Create
(IDD_WAITDIALOG);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Initialize the dialog caption and the static text control.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">SetWindowText
((pszCaption == NULL) ? &quot;Working&quot; : pszCaption);</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CStatic*
pCtrl = (CStatic*) GetDlgItem (IDC_MSGCTRL);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCtrl-&gt;SetWindowText
((pszText == NULL) ? &quot;Click Cancel to cancel &quot; \</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;the
operation&quot; : pszText); </font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Display the dialog.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ShowWindow
(SW_SHOW);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CWaitDialog::~CWaitDialog
()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close
();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CWaitDialog::OnCancel ()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">*m_pFlag
= FALSE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close
();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
CWaitDialog::Pump ()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">MSG
msg;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Retrieve and dispatch any waiting messages.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while
(::PeekMessage (&amp;msg, NULL, 0, 0, PM_NOREMOVE)) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(!AfxGetApp ()-&gt;PumpMessage ()) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">::PostQuitMessage
(0);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
FALSE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Simulate the framework's idle processing mechanism.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">LONG
lIdle = 0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">while
(AfxGetApp ()-&gt;OnIdle (lIdle++));</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
TRUE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CWaitDialog::SetPercentComplete (int nPercent)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(::IsWindow (m_hWnd)) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(nPercent &lt; 0)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">nPercent
= 0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">else
if (nPercent &gt; 100)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">nPercent
= 100;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CProgressCtrl*
pCtrl = (CProgressCtrl*) GetDlgItem (IDC_PROGRESSCTRL);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCtrl-&gt;SetPos
(nPercent);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CWaitDialog::SetMessageText (LPCTSTR pszText)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(::IsWindow (m_hWnd)) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CStatic*
pCtrl = (CStatic*) GetDlgItem (IDC_MSGCTRL);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCtrl-&gt;SetWindowText
(pszText);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CWaitDialog::Close ()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(::IsWindow (m_hWnd)) {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">AfxGetMainWnd
()-&gt;EnableWindow (TRUE);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DestroyWindow
();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<blockquote>
    <p><font color="#000000" size="1" face="Courier New">WaitRsc.h</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
WaitRsc.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//***************************************************************************</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
IDD_WAITDIALOG 100</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
IDC_PROGRESSCTRL 200</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
IDC_MSGCTRL 300</font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>CWaitDialog
Internals</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">If you&#146;re curious to know
    more about how CWaitDialog works, check out the source code
    files CWaitDlg.h and CWaitDlg.cpp. One thing you&#146;ll
    discover is that the dialog is modeless, not modal.
    That&#146;s important because it allows Windows to return
    control to the main body of your application as soon as the
    dialog is created&#151;that is, as soon as the call to Create
    in the dialog&#146;s constructor returns. If DoModal was
    called instead of Create, the statement that constructs a
    CWaitDialog object wouldn&#146;t return until after the
    dialog was dismissed.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">A CWaitDialog may be modeless,
    but it disables input to its owner like a modal dialog. The
    secret is the following statement in the class constructor:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">AfxGetMainWnd
    ()-&gt;EnableWindow (FALSE);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Because the application&#146;s
    main window isn&#146;t reenabled until just before the dialog
    is destroyed, the user can&#146;t switch away from the dialog
    and back to the application as long as the dialog is
    displayed on the screen. The MFC CView::OnFilePrint function
    uses similar logic to get modal-like behavior from a modeless
    print-status dialog.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">For a CWaitDialog to function
    properly, WM_COMMAND messages stemming from clicks of the
    Cancel button must be retrieved from the message queue and
    dispatched to the dialog so OnCancel can be activated. Before
    closing the dialog, OnCancel sets the BOOL flag created in
    the main body of the application to FALSE so the application
    will know that Cancel has been clicked. CWaitDialog::Pump
    maintains the message flow by retrieving and dispatching
    messages separate and apart from the application&#146;s
    primary message loop.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I experimented with a
    multithreaded version of CWaitDialog that used a separate
    user interface (UI) thread to process messages to the dialog,
    but gave up on it after learning firsthand that 32-bit
    Windows doesn&#146;t like it when a dialog runs in one thread
    and its owner runs in another. UI threads are fine when each
    thread creates a top-level window, but using multiple UI
    threads for child windows and owned windows can lead to some
    strange behavior. For one thing, a dialog running in thread B
    can&#146;t disable an owner window running in thread A
    because Win32¨ stores activation states and other
    information (such as who has the input focus) on a per-thread
    basis.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Bottom line: using a separate
    input queue for a CWaitDialog would do away with the need for
    CWaitDialog::Pump, but it would invariably complicate your
    application&#146;s code in other ways. The single-threaded
    version of CWaitDialog works fine, and it&#146;s not that big
    a deal to call Pump every now and then since you have to
    pause to check the continuation flag anyway.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Your
Needs, Your Ideas</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Are there tough Win32
    programming questions you&#146;d like to see answered in this
    column? If so, email them to me at the address listed below.
    I regret that time doesn&#146;t permit me to respond
    individually to all questions, but rest assured that
    I&#146;ll read every one and consider each for inclusion in a
    future installment of Wicked Code. </font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>To
obtain complete source code listings, see </b></font><a
href="ednote.htm"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Editor's page</b></font></a><font
color="#000000" size="2" face="verdana,arial,helvetica"><b>.</b></font></p>

<p><font color="#000080" size="1" face="B Franklin Gothic Demi">Have
a tricky issue dealing with Windows? Send your questions via
email to Jeff Prosise: </font><a
href="mailto:72241.44@compuserve.com"><font color="#000080"
size="1" face="B Franklin Gothic Demi">72241.44@compuserve.com</font></a></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>This article is reproduced
    from Microsoft Systems Journal. Copyright © 1997 by Miller
    Freeman, Inc. All rights are reserved. No part of this
    article may be reproduced in any fashion (except in brief
    quotations used in critical articles and reviews) without the
    prior consent of Miller Freeman.</i></font></p>
    <p><font color="#000000" size="2"><i>To contact Miller
    Freeman regarding subscription information, call (800)
    666-1084 in the U.S. and Canada, or (303) 678-0439 in all
    other countries. For other inquiries, call (415) 905-2200.</i></font></p>
</blockquote>
</font></body>
</html>

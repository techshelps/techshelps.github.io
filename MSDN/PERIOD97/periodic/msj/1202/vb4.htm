<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="C:\MSOffice\Templates\MSJ.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building Multitiered Client/Server Apps with Visual Basic 4.0 Enterprise Edition, Part II</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<p><font color="#000000" size="6" face="verdana,arial,helvetica">Building
Multitiered Client/Server Apps with Visual Basic 4.0 Enterprise
Edition, Part II</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica">by Jenny Notestein</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Jenny Notestein is an
enterprise development consultant in the New York financial
district. She can be reached at notestein@msn.com.</b></font></p>

<blockquote>
    <p><font color="#000080" size="7"
    face="verdana,arial,helvetica">T</font><font color="#000000"
    size="2" face="verdana,arial,helvetica">his is the second
    part of a three-part series on enterprise development in the
    corporate world using Microsoft¨ Visual Basic® 4.0
    Enterprise Edition. In this series, I&#146;m examining
    what&#146;s involved in building a robust, multitiered
    client/server application for a corporate client. The
    application I&#146;m building is a data-warehouse-type
    decision support reporting system for line managers that is
    designed to use the features of Visual Basic, ActiveX</font><font
    color="#000000" face="verdana,arial,helvetica">&trade;</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">
    technology, and BackOffice&trade; to provide an elegant
    solution to a real-world business need.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In Part I, &quot;Building
    Multitiered Client/Server Apps with Visual Basic 4.0
    Enterprise Edition&quot; (<i>MSJ,</i> November 1996), I
    looked at developing the architecture of a 32-bit
    application, including the basic properties and methods of
    its components (it&#146;s referred to in this article as the
    Reporting System API). This month I&#146;ll focus on the
    implementation phase, doing some serious development of the
    application&#146;s Request Broker, virtual data object, and
    Report Builder components. I&#146;ll cover implementation
    issues such as security, pool management, optimization, and
    internationalization. Finally, I&#146;ll build support for a
    Web browser viewer that works with Microsoft Internet
    In-formation Server (IIS) to display a finished report as an
    HTML page.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In Part III of this series
    I&#146;ll wrap up the implementation and cover rollout issues
    such as quality assurance, ongoing maintenance, and
    enhancement requests. After I finish the application,
    I&#146;ll take a look at hot-and-fresh Visual Basic 5.0 for
    dessert.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>In
Our Last EpisodeÉ</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Before I jump into
    implementing my application, I&#146;ll briefly review its
    structure. The system is a generic data-warehouse-type
    reporting facility designed as a decision support tool for
    business line managers. It&#146;s written in 32-bit Visual
    Basic 4.0 Enterprise Edition and runs on Windows NT¨ 4.0
    Workstation for the user service component, and Windows NT
    4.0 Advanced Server for the business service components. My
    reporting system extracts data and compiles useful reports
    from a wide variety of existing DBMSs commonly found in
    corporate enterprises.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The standard personnel-type
    reports that are used as examples in this article are just
    that&#151;simple examples. This system is designed with a
    flexible architecture; components can be built to produce
    virtually any business report desired. I chose the Employee
    Info example because it&#146;s a great fit for the demo data
    that I lifted from the Northwind database that ships with
    Microsoft Access.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The basic user service
    component is called the Reporter, which runs locally on
    users&#146; desktops. It includes a wizard interface through
    which the user chooses a report, selects a preferred format
    for viewing the report, and enters any required parameters.
    The data used to populate the wizard pages and the
    information the user enters on those pages are handled by the
    primary business service component&#151;the Request
    Broker&#151;which is an ActiveX server.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Request Broker passes the
    information collected through the wizard to a specific
    virtual data object business service component. A separate
    virtual data object ActiveX server will be prebuilt for each
    of the reports available to the user, although the API for
    every virtual data object remains the same. Each virtual data
    object will connect to the appropriate data services and
    construct the query or queries necessary to build the
    resultset from which the desired report can be built. The
    resultset is then cached in an SQL Serverª 6.5 business
    service component. The virtual data object passes the
    location of this data to the Request Broker.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Request Broker passes the
    location of the resultset to a specific Report Builder
    business service component. A separate Report Builder ActiveX
    server will be prebuilt to format a cached resultset into one
    of the formats offered to the user, such as a Microsoft Excel
    spreadsheet, a comma-delimited file, or an HTML page, again
    using the Reporting System API. The Report Builder deposits
    the completed report in the data cache and passes its
    location to the Request Broker. The Request Broker passes the
    location of the completed report to the Reporter running on
    the user&#146;s workstation, which displays the report to the
    user in a Viewer.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Report
Build Message Object, Unstubbed</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In Part I, I talked about the
    application employing a report build message object, which
    contains the two-way messages used to build the wizard pages
    and collect the data entered in them by the user. The
    wizard-building data was previously stubbed. This stubbed
    information has now been replaced with real, live data.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Since two of my goals are to
    build a thin client and to take advantage of the Services
    model for distributed application design, the data for the
    report build message object has been neatly stored in a
    database out on the business service SQL Server 6.5
    component. Tables in this database provide the originating
    content for the messages, which comes down from the server on
    a per-report basis each time the application is run. <b>Figure
    1</b> shows an entity-relationship diagram of the database
    design.</font></p>
    <p><img src="vb4_1.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
1 Entity relationships</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The major entity for my
    reporting system is, of course, the report. The reports table
    contains the name of each report, its description, and the ID
    of the virtual data object that will retrieve the data for
    the report. The fields table contains the fields that are
    presented to the user through the wizard interface, from
    which the user chooses the filtering values that are built
    into the Where clause of the virtual data object&#146;s SQL
    statement. Each virtual data object is built to contain the
    projection clause of the Select statement used to retrieve
    the necessary resultset or sets from databases across the
    enterprise.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Down the road, I might want to
    add a column to the fields table called UI_Name that includes
    a friendly name more suitable for displaying in the user
    interface than the counterintuitive names commonly found in
    databases&#151;particularly in legacy systems&#151;where the
    attribute names are typically abbreviated, concatenated,
    truncated, oddly prefixed, and otherwise mutilated. At
    present, I&#146;m simply aliasing the names in the Select
    statements against this table.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">New to this version of my
    application are the viewer type components of the report
    build message object, which contain the information on how
    the report is presented to the user. Each report has a number
    of available viewer types, from which the user selects one.
    Behind the scenes, each viewer type corresponds to a Report
    Builder ActiveX server and a viewer component of the Reporter
    application on the client.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">A many-to-many relationship
    exists between the fields and the filters and between the
    reports and the viewer types. The MTM tables in </font><font
    color="#000000" size="1" face="verdana,arial,helvetica">Figure
    1</font><font color="#000000" size="2"
    face="verdana,arial,helvetica"> are the correlative links for
    these relationships.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Building the tables on SQL
    Server 6.5 is a straightforward process using the Manage
    Tables component of the Microsoft SQL Enterprise Manager,
    which provides an interface for defining fields (datatypes,
    lengths, and so on), creating indexes (primary, clustered,
    and so on), and granting permissions (at the user/group or
    object levels). The Generate SQL Scripts applet of the
    Enterprise Manager extracts the data definition language
    (DDL) so that it can be hand-modified and re-executed when
    necessary&#151;for example, to delete a column during
    development or to execute some other functionality that is
    not directly provided by the Manage Tables interface. The DDL
    for the fields table is shown in <b>Figure 2</b>.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;2&nbsp;DLL
of Fields Table</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*
Microsoft SQL Server - Scripting */</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*
Server: MSI_NJ_SERVER */</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*
Database: RequestBroker */</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/*
Creation Date 11/3/96 4:39:03 PM */</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GRANT
CREATE TABLE TO public</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GRANT
CREATE TABLE TO public</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/***
Object: User RequestBroker Script Date: 11/3/96 4:39:04 PM ***/</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
not exists (select * from sysusers where name = 'RequestBroker'
and uid &lt;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">16382)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">EXEC
sp_adduser 'RequestBroker', 'RequestBroker', 'public'</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/***
Object: Table dbo.t_Fields Script Date: 11/3/96 4:39:04 PM ***/</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
exists (select * from sysobjects where id =
object_id(&#145;dbo.t_Fields&#146;) and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sysstat
&amp; 0xf = 3)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">drop
table dbo.t_Fields</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">/***
Object: Table dbo.t_Fields Script Date: 11/3/96 4:39:04 PM ***/</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CREATE
TABLE dbo.t_Fields (</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ID
int NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Report_ID
int NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Name
varchar (255) NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DataType
smallint NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Description
varchar (255) NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Size
smallint NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Value
varchar (255) NULL ,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">SelectedFilter
smallint NULL </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CREATE
UNIQUE CLUSTERED INDEX ID ON dbo.t_Fields(ID)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GRANT
SELECT ON t_Fields TO public</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GO</font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>The
Application in Action</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">When the user clicks the
    Request Wizard button in the Reporter executable, it invokes
    the Request Broker&#146;s GetReportsList method (shown in <b>Figure
    3</b>), which goes out to the SQL Server and looks in the
    reports table for the list of available reports.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;3&nbsp;GetReportsList</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub GetReportsList(asReportList() As String)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Has
been changed from a Test Harness/Stub for Reporter</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
to develop against.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
Now draws data from Data Cache to build message structure.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oResultset As rdoResultset</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnection.OpenResultset(&quot;Select * from _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Reports&quot;,
rdOpenKeyset, rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveLast</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ReDim
asReportList(1, oResultset.RowCount) As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveFirst</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iRowCount As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">asReportList(0,
iRowCount) = oResultset.rdoColumns(&quot;Name&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">asReportList(1,
iRowCount) = _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns(&quot;Description&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iRowCount
= iRowCount + 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveNext</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The user selects a report from
    the Pick a Report listbox of the wizard, which fires the
    click event code shown in <b>Figure 4</b>. The wizard then
    populates the Pick a Viewer Type listbox by calling the
    GetReportDescription method of the Re-quest Broker (see <b>Figure
    5</b>). The name of the selected report and an empty message
    structure are passed in to GetReportDescription.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;4&nbsp;1stReportList</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub lstReportList_Click()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Populate
the ViewerType list on report selection</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sbMain.Panels.Item(1).Text
= asReportsList _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(1,
lstReportList.ListIndex)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">lstViewerType.Clear</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oMessage = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oRequestBroker.GetReportDescription
lstReportList.Text, oMessage</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iLoop As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 1 To oMessage.ViewerTypes.Count</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">lstViewerType.AddItem
oMessage.ViewerTypes.Item(iLoop).Name</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The message structure consists
    of three parts: header information, fields information, and
    viewer type information. The addition of the viewer type
    object doesn&#146;t break the original code from the first
    article; it does change the type library, which means that
    all the components of the reporting system need to be
    recompiled, since they all contain references to the type
    library for early binding.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The header contains the name
    of the report that&#146;s passed in to GetReportDescription.
    In addition, the header generates a unique ID that will let
    me store and identify these message structures on a
    collection queue if the application is changed in the future
    to execute asynchronously.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The header and viewer type
    objects are relatively sparse at present, but they are built
    as objects in order to leave room for expanding properties
    and methods as the application develops in the future.
    Passing them around as variables or arrays would limit my
    ability to expand their richness without breaking existing
    code.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The fields information,
    previously populated with dummy data, is now populated with
    data from the SQL Server 6.5 data cache. The Select statement
    shown in the Load Field Information section of <b>Figure 5</b>
    is used for generating the All Employees report. This is
    where I alias the fields to produce more user-friendly column
    headers when I get the data back.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;5&nbsp;GetReportDescription</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub GetReportDescription(sName As String, oMessage As _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ReportBuildMessage)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Report-building
message structure is built here by using the passed-in</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
report name to query the database</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Load
Header Information ====================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.Header.ReportName
= sName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.Header.ReportID
= sUniqueName</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Load
Field Information =======================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oResultset As rdoResultset</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sSQL As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;select t_Reports.Description as ReportDescription, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Fields.Name
as FieldsName, t_Fields.DataType, &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields.Description
as FieldsDescription, t_Fields.Size, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Fields.Value,
&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields.SelectedFilter,
t_Filters_Selected.Name as _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">FiltersSelectedName,
t_Filters.Name as FiltersName, &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Filters.Description
as FiltersDescription from t_Fields, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Fields_MTM_Filters,
t_Filters, &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Filters
t_Filters_Selected, t_Reports where t_Reports.Name = '&quot; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&amp;
sName &amp; &quot;' and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields.Report_ID
= t_Reports.ID and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields.ID
= t_Fields_MTM_Filters.Field_ID and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields_MTM_Filters.Filter_ID
= t_Filters.ID and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Fields.SelectedFilter
= t_Filters_Selected.ID order by _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Reports.ID,
t_Fields.ID, t_Filters.ID&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnection.OpenResultset(sSQL, rdOpenKeyset, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sCurrentFieldName As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sCurrentFilterName As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Do
While there are records</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
Current name</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sCurrentFieldName
= oResultset.rdoColumns(&quot;FieldsName&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Create
a Field object</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.Fields.Create
sCurrentFieldName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
Field properties</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">With
oMessage.Fields.Item(sCurrentFieldName)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Cast
rdo data types</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Name
= sCurrentFieldName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.DataType
= vFixRDOData(oResultset.rdoColumns(&quot;DataType&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Description
= vFixRDOData _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(oResultset.rdoColumns(&quot;FieldsDescription&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Size
= vFixRDOData(oResultset.rdoColumns(&quot;Size&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Value
= vFixRDOData(oResultset.rdoColumns(&quot;Value&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.SelectedFilter
= vFixRDOData _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(oResultset.rdoColumns(&quot;FiltersSelectedName&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
With</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Do
While We are on the same Field and have records</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
sCurrentFieldName &lt;&gt; oResultset.rdoColumns _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;FieldsName&quot;)
Then Exit Do</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
current filter name</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sCurrentFilterName
= oResultset.rdoColumns(&quot;FiltersName&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Create
the filter object and set its properties</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">With
oMessage.Fields.Item(sCurrentFieldName).Filters</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Create
sCurrentFilterName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">With
.Item(sCurrentFilterName)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Name
= vFixRDOData _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(oResultset.rdoColumns(&quot;FiltersName&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Description
= vFixRDOData _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(oResultset.rdoColumns(&quot;FiltersDescription&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
With</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
With</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Go
to the next record</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveNext</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Load
Viewer Information ======================</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;Select t_ViewerTypes.Name from t_Reports, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Reports_MTM_ViewerTypes,
t_ViewerTypes where &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Reports.Name
= '&quot; &amp; sName &amp; &quot;' and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Reports.ID
= t_Reports_MTM_ViewerTypes.Report_ID and &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;t_Reports_MTM_ViewerTypes.ViewerType_ID
= t_ViewerTypes.ID &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;order
by t_ViewerTypes.Name&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnection.OpenResultset(sSQL, rdOpenKeyset, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.ViewerTypes.Create
(oResultset.rdoColumns(&quot;Name&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.ViewerTypes.Item((oResultset.rdoColumns(&quot;Name&quot;)))
_</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Name
= (oResultset.rdoColumns(&quot;Name&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveNext</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = Nothing</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">At this point, the user
    selects a viewer type to continue with the wizard, which
    looks like <b>Figure 6</b>. The field information is then
    entered as the filter values in the continuing pages of the
    wizard (see <b>Figure 7</b>). After the user clicks the
    Finished button, the code in </font><font color="#000000"
    size="1" face="verdana,arial,helvetica">Figure 8</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">
    executes, which loads a ReportRunning form that is displayed
    while the data is fetched and processed into the report.</font></p>
    <p><img src="vb4_6.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
6 Request Wizard reports and viewers</b></font></p>

<blockquote>
    <p><img src="vb4_7.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
7 Entering more info in the Request Wizard </b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Request Broker now needs
    to hand off the report build information to a virtual data
    object to fetch the desired data. To get the name of the
    virtual data object, the SubmitReportRequest method of the
    Request Broker (shown in <b>Figure 9</b>) does a join between
    the reports table and the virtual data objects table using
    the report name passed in the message. This gives me the name
    of the object I want to create as the virtual data object.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;8&nbsp;Finished</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Finished</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
pbMain.Value = pbMain.Max Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Hide
the Wizard</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Me.Hide</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Load
the ReportRunning form, configure,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
center, then show it</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Load
frmReportRunning</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CenterChild
frmReporter, frmReportRunning</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">frmReportRunning.Message
oMessage.Header.ReportName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">frmReportRunning.Show</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DoEvents</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.ViewerType
= oMessage.Header.ReportType</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.ReportName
= oMessage.Header.ReportName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Submit
the request</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oRequestBroker.SubmitReportRequest
oMessage, oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Being
synchronous, when we hit this point, the report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
is done</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Unload
frmReportRunning</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Unload
Me</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Call
the routine that will look at the oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
message and display the report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ProcessResults
oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Exit
Sub</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I&#146;ve written a relatively
    simple virtual data object called EmployeeFinancial that
    provides a complete illustration of the flow process of the
    Reporting System API as it interacts with the other objects
    in the loop. EmployeeFinancial analyzes the messages it
    receives from the Request Broker, puts together a SQL
    statement, retrieves the data from an ODBC datasource, and
    caches the resultset in the SQL Server 6.5 data cache, again
    using ODBC. It then tells the Request Broker where the
    resultset is, hiding all of the steps necessary to get the
    data from all other components but itself.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;9&nbsp;SubmitReportRequest</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub SubmitReportRequest(oMessage As ReportBuildMessage, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone
As ReportDone)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'It
is here that we Handle a requested Report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oResultset As rdoResultset</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sSQL As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oVDO As Object</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Select
Case oMessage.Header.ReportType</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'In
places like this we should be using the IDs but I've</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
elected to use the string names everywhere to make it</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
easier to follow and understand</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
&quot;Excel&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'To
be added</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
&quot;HTML&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;Select t_VDOs.* from t_Reports, t_VDOs where _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Reports.Name
= '&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oMessage.Header.ReportName
&amp; &quot;' and t_VDOs.ID = _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">t_Reports.VDO_ID
&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnection.OpenResultset(sSQL, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">rdOpenKeyset,
rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oVDO = CreateObject(oResultset.rdoColumns(&quot;Name&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oVDO.BuildResultset
oMessage, oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
oReportDone.ReportError = &quot;&quot; Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Process
Resultset into an HTML Report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
foBuilder = CreateObject(&quot;ReportBuilder&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.ViewerType
&amp; &quot;.ReportBuilder&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">foBuilder.Build
oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oVDO = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
&quot;Tab Delimited&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'To
be added</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Select</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Transfer
the type</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.ViewerType
= oMessage.Header.ReportType</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">From an architectural
    standpoint, the SQL-generating code belongs to the virtual
    data objects and not the Request Broker, since virtual data
    objects are the only ones that know what they have to do to
    build the finished resultset. If, in the future, a group of
    virtual data objects is developed that all login to the same
    set of datasources and provide similar functionality, I could
    migrate out some of the shared functionality into a common
    module that&#146;s used by those objects. But this
    functionality should remain decoupled from the Request Broker
    because a virtual data object might have to do some pretty
    complex things to get the data, such as: running macros that
    insert new operators into the messages as they convert
    user-friendly options from the wizard interface into
    meaningful SQL; translating the SQL for different target
    database engines; and performing complex joins across
    multiple datasources. Only the individual virtual data object
    will understand the business rules required to fulfill the
    request.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">After the Request
    Broker&#146;s SubmitReportRequest method identifies and
    creates the virtual data object, it calls the BuildResultset
    method of the virtual data object (see <b>Figure 10</b>),
    passing it the message object with all of the stuff that it
    has accumulated so far, plus the ReportDone object, which is
    the message I use for conveying information about the
    completion process of the report. This replaces the callback
    function used in the first part of this series. (As a plot
    complication, the callback function turns out to be more
    overhead than necessary since I&#146;ve committed to
    synchronous execution. I&#146;ll go over this more thoroughly
    in the Pool Manager section.)</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;10&nbsp;BuildResultset</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub BuildResultset(oMessage As ReportBuildMessage, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone
As ReportDone)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oResultset As rdoResultset</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnectionSource.OpenResultset _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(GenerateSQL(oMessage),
rdOpenKeyset, rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.Report
= CacheData(oResultset)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">When the virtual data object
    is initialized (see <b>Figure 11</b>), it does what&#146;s
    required to make contact with the ODBC datasource names
    (DSNs) that it&#146;s going to work with. In my
    EmployeeFinancial example, two separate DSNs are
    preconfigured on the business server machine for the virtual
    data object to use, one for the source data and another for
    the target database in the data cache. These two DSNs use
    different user IDs and passwords to connect to different
    databases that both, for my example, reside in the local SQL
    Server 6.5.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;11&nbsp;Class
Initialize</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub Class_Initialize()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oEnvironmentVDO = rdoEngine.rdoCreateEnvironment _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;VDO
Employee Financial&quot;, &quot;VDOEmployeeFinancial&quot;, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;vdoemployeefinancial&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oConnectionSource = oEnvironmentVDO.OpenConnection _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;EmployeeFinancial&quot;,
rdDriverNoPrompt, False, &quot;&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oEnvironmentCache = rdoEngine.rdoCreateEnvironment _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;VDO
Cache&quot;, &quot;VDOCache&quot;, &quot;vdocache&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oConnectionCache = oEnvironmentCache.OpenConnection _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;VDO&quot;,
rdDriverNoPrompt, False, &quot;&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The BuildResultset method of
    the virtual data object then calls the GenerateSQL function
    shown in <b>Figure 12</b>. GenerateSQL takes the message
    object, walks the fields, pulls out the information the user
    has supplied, and builds the SQL statement from it. If the
    field value is nothing, then the user didn&#146;t input any
    data, so it&#146;s ignored. In this relatively simple
    example, the Where clause is built from the field name, the
    selected filter, the field value, and an And operator.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I&#146;m using the real field
    names and filter names in the message object to make
    constructing the SQL statement a clear process. As I
    mentioned earlier with respect to UI names, I might want to
    build in support at the table level for translating the real
    names into something easier for users to digest when
    populating the messages to build the wizard. These
    user-friendly names would then be replaced with the actual
    database field names here in GenerateSQL.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;12&nbsp;GenerateSQL</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Function GenerateSQL(oMessage As ReportBuildMessage) As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sSQL As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iLoop As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oField As Object</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 1 To oMessage.Fields.Count</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oField = oMessage.Fields.Item(iLoop)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
oField.Value &lt;&gt; &quot;&quot; Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Select
Case oField.DataType</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; oField.Name &amp; &quot; &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oField.SelectedFilter
&amp; &quot; '&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oField.Value
&amp; &quot;' and &quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
2, 3</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; oField.Name &amp; &quot; &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oField.SelectedFilter
&amp; &quot; &quot; &amp; oField.Value &amp; &quot; and &quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Select</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Remove
last and</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
iLoop &gt; 0 Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= Left(sSQL, Len(sSQL) - 4)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#If
ACCESS_DB Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;Select * from t_Employees where &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
&amp; &quot; order by LastName, FirstName&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;Select * from dbo.t_Employees where &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
&amp; &quot; order by LastName, FirstName&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">GenerateSQL
= sSQL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Function</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The GenerateSQL function
    includes syntax for conditionally compiling the final SQL
    statement, depending on whether the database engine used is
    Microsoft SQL Server 6.5 or Microsoft Access. I included this
    feature because I figured that most people out in <i>MSJ</i>-land
    have a copy of Microsoft Access hanging around, but might not
    have a copy of SQL Server available for testing the reporting
    system. Accordingly, the project files include an .mdb with
    the tables and data necessary to run the application. Using
    the Upsizing Wizard, this .mdb can be scaled up to SQL Server
    or simply exported, if desired.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">It&#146;s worth mentioning
    that Visual Basic compiler constants declared in code cannot
    be scoped beyond the module in which they are declared. The
    only way to define a compiler constant at the project level
    is through the Options dialog from the Tools menu (see </font><font
    color="#000000" size="1" face="verdana,arial,helvetica">Figure
    13</font><font color="#000000" size="2"
    face="verdana,arial,helvetica">).</font></p>
    <p><img src="vb4_13.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
13 Conditional compilation</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The virtual data object&#146;s
    last job is to cache the data that it retrieves. The
    resultset is passed to the CacheData function, shown in <b>Figure
    14</b>. CacheData calls CreateCacheTable, which is shown in <b>Figure
    15</b>, to create the table in which the data will be stored.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;14&nbsp;CacheData</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Function CacheData(oResultset As rdoResultset) As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'If
we were always in the same datacache we could just do a</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
select into the new table. Since we don't want that limitation</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
we will pump the data</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sTableName As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sInsertStatic As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sInsertDynamic As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iLoop As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sTableName
= CreateCacheTable</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertStatic
= &quot;Insert into &quot; &amp; sTableName &amp; &quot; (&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 0 To oResultset.rdoColumns.Count - 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertStatic
= sInsertStatic &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Item(iLoop).Name
&amp; &quot;,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertStatic
= Left(sInsertStatic, Len(sInsertStatic) - 1) &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;)
Values (&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= &quot;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 0 To oResultset.rdoColumns.Count - 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Select
Case oResultset.rdoColumns.Item(iLoop).Type</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
rdTypeCHAR, rdTypeDATE, rdTypeTIME, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">rdTypeTIMESTAMP,
rdTypeVARCHAR</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
IsNull(oResultset.rdoColumns.Item(iLoop).Value) _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= sInsertDynamic &amp; &quot;Null,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= sInsertDynamic &amp; &quot;'&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Item(iLoop).Value
&amp; &quot;',&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
IsNull(oResultset.rdoColumns.Item(iLoop).Value) _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= sInsertDynamic &amp; &quot;Null,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= sInsertDynamic &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Item(iLoop).Value
&amp; &quot;,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Select</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sInsertDynamic
= Left(sInsertDynamic, Len(sInsertDynamic) - 1) _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&amp;
&quot;)&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oConnectionCache.Execute
sInsertStatic &amp; sInsertDynamic</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveNext</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">fsTableName
= sTableName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CacheData
= sTableName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Function</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;15&nbsp;CreateCacheTable</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Function CreateCacheTable() As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sTableName As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sSQL As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#If
ACCESS_DB Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sTableName
= &quot;t_&quot; &amp; sUniqueName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;CREATE TABLE &quot; &amp; sTableName &amp; &quot; (&quot;
&amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;EmployeeID
int ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;LastName
varchar (20) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;FirstName
varchar (10) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Title
varchar (30) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;TitleOfCourtesy
varchar (25) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;BirthDate
datetime ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;HireDate
datetime ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Address
varchar (60) ,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; &quot;City varchar (15) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Region
varchar (15) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;PostalCode
varchar (10) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Country
varchar (15) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;HomePhone
varchar (24) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Extension
varchar (4) ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;ReportsTo
int ,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; &quot;Salary money ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Bonus
money )&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sTableName
= oEnvironmentCache.UserName &amp; &quot;.t_&quot; &amp;
sUniqueName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;CREATE TABLE &quot; &amp; sTableName &amp; &quot; (&quot;
&amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;EmployeeID
int NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;LastName
varchar (20) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;FirstName
varchar (10) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Title
varchar (30) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;TitleOfCourtesy
varchar (25) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;BirthDate
datetime NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;HireDate
datetime NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Address
varchar (60) NULL ,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; &quot;City varchar (15) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Region
varchar (15) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;PostalCode
varchar (10) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Country
varchar (15) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;HomePhone
varchar (24) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Extension
varchar (4) NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;ReportsTo
int NULL ,&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= sSQL &amp; &quot;Salary money NULL ,&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Bonus
money NULL)&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oConnectionCache.Execute
sSQL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#If
ACCESS_DB Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;GRANT REFERENCES , SELECT , INSERT , DELETE , _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">UPDATE
ON &quot; &amp; sTableName &amp; &quot; TO public&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oConnectionCache.Execute
sSQL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CreateCacheTable
= sTableName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Function</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CreateCacheTable first creates
    a table name by calling the UniqueName function (see <b>Figure
    16</b>), which brings me to that familiar problem of having
    to create persistent storage for objects using a unique name,
    without any help from the user. Inevitably, this leads to
    producing some type of unique name generator. I can&#146;t
    use the Win32¨ GetTempFilename API for two reasons. First,
    the API returns a file name that could be longer than 30
    characters, which SQL Server 6.5 will not like for a table
    name. Secondly, the file name returned has a TMP file name
    extension that I would have to change to HTM, which would no
    longer guarantee my having a unique file name. In Visual
    Basic, I&#146;ve found that a combination of the day, the
    month number, the year, and the number of seconds since
    midnight provides a lot of uniqueness protection. As an extra
    measure, I&#146;ve cast the timer function as a double, which
    also gives me the decimal number of seconds since midnight.
    Server time is used, so it doesn&#146;t matter what time the
    client workstations think it is.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;16&nbsp;UniqueName</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Function sUniqueName() As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'PART
II</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'There
are more precise ways to generate unique names. GUIDs could even </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'be
used. This is good enough for our needs. We might add a unique </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'process
ID for the Request Broker using this to make the name more</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'unique.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sHold As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iPos As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sHold
= Trim(Str(Format(Date, &quot;ddmmyyyy&quot;))) &amp;
Trim(Str(CDbl(Timer)))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Replace
any . with _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iPos
= InStr(1, sHold, &quot;.&quot;)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sUniqueName
= Left(sHold, iPos - 1) &amp; &quot;_&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Right(sHold,
Len(sHold) - iPos)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Function</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">This is more than adequate to
    keep a single process from stepping on its own tables stored
    temporarily (for the life of the process) in the cache. But
    with a high volume of virtual data objects running, there is
    a chance that a collision might occur in the shared cache.
    There are a few ways to handle this.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I could handle it like
    Ethernet and let the failed process try again until it
    succeeds at creating a unique name. Or I could generate a
    unique ID for each process itself at the Request Broker
    level, or even at the virtual data object and Report Builder
    levels, and append this ID to the date-and-timer string. For
    a really good time, I could call UUIDGEN.EXE or GUIDGEN.EXE
    from the OLE2 ToolKit to create a Universally Unique
    Identifier or, as it&#146;s known in COM parlance, a Globally
    Unique Identifier (GUID). GUIDs are 128 bits, which works out
    to 32 hexadecimal characters. NTFS and Microsoft Access have
    no problems with this. However, SQL Server 6.5 currently has
    a 30-character limit on table names, so this option would
    require a little tweaking.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">After getting a table name
    back from the UniqueName function, CreateCacheTable proceeds
    to create the table (see </font><font color="#000000"
    size="1" face="verdana,arial,helvetica">Figure 15</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">).
    Again, I&#146;ve provided the code to do this for both SQL
    Server 6.5 and Microsoft Access, depending on your
    environment. In this relatively simple example, the basic
    differences are that SQL server tables are refer-enced by
    their owners&#151;which is not required, but is good
    practice&#151;and that permissions are granted for SQL Server
    tables. This would be the point to add any amount of
    additional security complexity using SQL Server&#146;s native
    security.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CacheData then pumps the
    resultset data into the table created in the data cache using
    an Insert statement. The Insert statement is basically
    structured as an &quot;Insert into tablename&quot; clause
    followed by fields and then values, with a one-to-one ordinal
    correspondence between the fields and the values. This second
    part of the insert statement can be handled either by
    inserting the fields and the values in complete ordinal
    assembly (paralleling the way the database columns were
    created) or by mapping the values to the fields, with
    separate sections of the Insert statement for the fields and
    the values. This second method is more flexible, particularly
    since the ordinal position of the fields will remain constant
    during the data pumping process. </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">My resulting Insert statement
    looks like</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Insert into tablename
    (fieldname, fieldname, É) values (value, value, É)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Everything up to the actual
    values remains unchanged during the insert process, so that
    information is put together as a static string to which the
    values are appended for each row. As the resultset is
    scrolled through one row at a time during the caching
    process, the values are evaluated to determine if they are
    null or if they are of a datatype that must be delimited with
    single quotes (such as characters, timestamps, and so on). At
    present, the example code is not equipped to handle BLOBS
    (binary large objects), memo fields, or datatypes of similar
    nature; support could be added, if required.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Once the data is completely
    inserted into the data cache, control returns to the Request
    Broker and the virtual data object is set to Nothing. This
    brings me back to the Case &quot;HTML&quot; section of the
    SubmitReportRequest method of the Request Broker shown in <b>Figure
    9</b>, barring any errors (which I&#146;m not trapping for in
    this example because everything always works like a Swiss
    watch in the textbook&#151;right?). The next step is to
    create the Report Builder object and pass it the Report Done
    object that contains the name of the table with the stored
    results in the data cache.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">By design, the only interface
    point for a Report Builder is its Build method, which is
    passed the Report Done object. This Build method (see <b>Figure
    17</b>), will be the same for all Report Builders. Using a
    Select statement, it extracts the data cached by the virtual
    data object in the local SQL Server 6.5, creating a
    resultset. It then passes this resultset to the BuildReport
    method, which manipulates the resultset to produce the report
    in the desired format.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;17&nbsp;Build</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub Build(oReportDone As ReportDone)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
oResultset As rdoResultset</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sSQL As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">fsTableName
= oReportDone.Report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sSQL
= &quot;Select * from &quot; &amp; oReportDone.Report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oResultset = oConnectionSource.OpenResultset _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(sSQL,
rdOpenKeyset, rdConcurReadOnly)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BuildReport
oResultset, oReportDone</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Not
only required because it is a good habit, but</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
when using Access as the DataCache it will lock the table</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
and not allow us to drop it because the resultset is placed</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
on the rdoResultsets collection of the rdoConnection</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
object.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.Close</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;18&nbsp;BuildReport</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub BuildReport(oResultset As rdoResultset, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone
As ReportDone)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iFileHandle As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sOutput As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iLoop As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iColumns As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'If
we compile locally then place the resultant HTM file locally</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#If
ACCESS_DB Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">fsFileName
= &quot;C:\HTM\&quot; &amp; sStripOwner(oReportDone.Report) &amp;
&quot;.htm&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#Else
'If we are on the server put it in the shared directory</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">fsFileName
= &quot;W:\&quot; &amp; sStripOwner(oReportDone.Report) &amp;
&quot;.htm&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iFileHandle
= FreeFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Open/Create
the output file</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Open
fsFileName For Output Access Write Lock Write As iFileHandle</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Start
document and table</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle, &quot;&lt;HTML&gt; &lt;TITLE&gt; &lt;/TITLE&gt;
&lt;BODY&gt; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&lt;TABLE
border&gt; &lt;TR&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
the number of columns</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle, &quot;&lt;TH colspan=&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Count
&amp; &quot;&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
the report name</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle, &quot;&lt;H3&gt;&lt;A
NAME=&quot;&quot;TT&quot;&quot;&gt;&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.ReportName
&amp; &quot;&lt;/a&gt;&lt;/H3&gt; &lt;/TH&gt; &lt;/TR&gt;
&lt;TR&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iColumns
= oResultset.rdoColumns.Count - 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Put
the column headers in</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 0 To iColumns</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutput
= sOutput &amp; &quot;&lt;TH&gt;&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Item(iLoop).Name
&amp; &quot;&lt;/TH&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Finish
the headers</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutput
= sOutput &amp; &quot;&lt;/TR&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle, sOutput</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Populate
the cells</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not oResultset.EOF</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Start
Row</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutput
= &quot;&lt;TR&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Do
the cells</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">For
iLoop = 0 To iColumns</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutput
= sOutput &amp; &quot;&lt;TD&gt;&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.rdoColumns.Item(iLoop).Value
&amp; &quot;&lt;/TD&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Next
iLoop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Finish
Row</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutput
= sOutput &amp; &quot;&lt;/TR&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle, sOutput</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Next
Row</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oResultset.MoveNext</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Finish
the document/report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iFileHandle,
&quot;&lt;/TABLE&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close
iFileHandle</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Depending
on whether we are without or with server</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
set the URL for the report</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#If
ACCESS_DB Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.Report
= &quot;C|/HTM/&quot; &amp; sStripOwner _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(oReportDone.Report)
&amp; &quot;.htm&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oReportDone.Report
= &quot;http://192.168.0.1/vdo/&quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sStripOwner(oReportDone.Report)
&amp; &quot;.htm&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The BuildReport method for my
    example (see<b> Figure 18</b>) converts the resultset into an
    HTML table that it then inserts into a file. The first step
    is to create the file, which needs to be in a directory
    that&#146;s shared on the network as HTM, where both the
    Report Builder and Microsoft Internet Information Server
    (IIS) can get at it since they won&#146;t necessarily be
    running on the same machine. For my example, this shared
    directory is mapped to drive letter W for the Report Builder,
    and it&#146;s mapped to drive letter X for IIS. Within IIS
    this directory is aliased VDO, as <b>Figure 19</b>
    illustrates. <b>Figure 19</b> also indicates a default
    document named default.htm for drive letter X that will be
    displayed if there&#146;s a failure somewhere along the way
    and the user-service viewer tries to get a document that IIS
    can&#146;t find. The file default.htm will simply display
    &quot;Report Not Found.&quot;</font></p>
    <p><img src="vb4_19.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
19 WWW server directories</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">BuildReport then constructs a
    basic HTML table with a header, column headers, and the data.
    Stepping through the resultset one row at a time, it
    encapsulates the data as HTML and shoves it into the file.
    BuildReport then closes the file and sets the Report property
    of the ReportDone object to the location of the file, which
    is a URL composed of the location of IIS, the directory as it
    knows it (VDO, in this case), and the file name. A desktop
    version that runs without IIS stores the HTML-based table in
    a file on the local C drive (see <b>Figure 18</b>).</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Report Done object is
    passed to the Request Broker, which serves it up hot to the
    Reporter client, bringing me back to where ProcessResults is
    called in the Reporter in <b>Figure 8</b>. The present
    version of ProcessResults handles only HTML reports, which it
    accomplishes by passing the URL to the viewer, which displays
    the finished report (see <b>Figure 20</b>).</font></p>
    <p><img src="vb4_20.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
20 HTML Viewer</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The HTML viewer literally
    snaps together. With Internet Explorer 3.0 and the Microsoft
    Internet Controls installed, a reference to the Internet
    Controls is added to the Reporter project. A Web Browser
    ActiveX control is then added to a child form, called
    frmViewerHTML in my example, that is fed the URL on one line
    of code.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Not content to have things
    that easy, I added a small routine called NewShow (see <b>Figure
    21</b>). Due to timing and the way screens are repainted, the
    Web browser object doesn&#146;t smoothly resize to fit the
    screen and impress the user in the Load event, so I shoved
    the code into the NewShow method, which resizes the object
    within the form.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;21&nbsp;NewShow</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Sub NewShow(sURL As String)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Load
Me</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CenterChild
frmReporter, Me</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">wbMain.Navigate
sURL</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DoEvents</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Me.WindowState
= 2</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">wbMain.Top
= 0</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">wbMain.Left
= 0</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Resize</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DoEvents</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Me.Show</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Closing
the Application</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">When the user is done viewing
    the report and has closed the viewer window, the unload event
    fires and calls the Request Broker DestroyReport method. In
    the Request Broker, I dereference the Report Builder by
    setting the object variable to Nothing. In the Report Builder
    terminate event (see <b>Figure 22</b>) the report is
    destroyed, the cache table is destroyed, and the Report
    Builder dies. The Request Broker stays alive until the client
    closes the Reporter and the application is completely shut
    down.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;22&nbsp;Terminate</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub Class_Terminate()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DestroyReport</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DestroyTable</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oEnvironment = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Set
oConnectionSource = Nothing</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub DestroyReport()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
dStartTime As Double</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">dStartTime
= Timer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">On
Error GoTo ERROR_DestroyReport</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Kill
fsFileName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Exit
Sub</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ERROR_DestroyReport:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Apparently
it takes some time for IIS to release the file so we</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
keep trying until it works.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
Otherwise let garbage collection get it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Select
Case Timer - dStartTime</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'30
Second timer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
Is &gt; 30</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Midnight
exception handle</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
Is &lt; 0</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Try
again... maybe IIS has let it go</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Case
Else</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Resume</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Select</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Exit
Sub</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Sub DestroyTable()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">oConnectionSource.Execute
&quot;Drop table &quot; &amp; fsTableName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
Sub</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Report Builder hangs
    around this long so that in a future version of the reporting
    system there&#146;s a link to the resultset cached by the
    virtual data object. This gives me room to give the user the
    option of seeing the data in different layouts while
    incurring the overhead of retrieving potentially massive
    amounts of data from all over the network only once.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In Part I of this series, I
    talked about the Report Builder depositing the finished
    report into the SQL Server 6.5 cache, where it could be
    retrieved by the Reporter for display in a viewer using ODBC.
    While that&#146;s not the case for the HTML example developed
    in this article, the option remains open for other Report
    Builders.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Security</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">My main application security
    is enforced by ACLs. I&#146;ll set all of the remote ActiveX
    servers to the Allow Remote Creates by ACL setting in the
    Remote Automation Connection Manager. The client enforces no
    security. Users are either permissioned at the appropriate
    level within the domain or not. The end result is that, if
    someone doesn&#146;t have clearance, he or she won&#146;t be
    able to create Request Brokers, virtual data objects, and so
    on. Don Box&#146;s article &quot;Introducing Distributed COM
    and the New OLE Features in Windows NT 4.0,&quot; (<i>MSJ</i>
    May 1996) describes the mechanisms used to enforce this
    security.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">With this security model in
    mind, my Visual Basic application will have to trap any
    failures detected by the Automation Manager and return a
    suitable error, informing the user that security clearance is
    not adequate.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Further security granularity
    is enforced by SQL Server logins and permissions. Data is
    partitioned by login and is available to objects on a
    need-to-know basis. The virtual data object uses a data cache
    user ID and password that is shared with the Report Builder,
    and the Request Broker has a separate ID and password that it
    uses to get at its metadata in a separate database. The
    advantage of this is that different groups of developers can
    add virtual data objects and Report Builders to this system
    without being privy to any security other than that of their
    own objects.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The user must be properly
    permissioned to create a virtual data object. The virtual
    data object has its own user IDs and passwords for the remote
    data sources, and these IDs and passwords are, by design,
    limited to Select-only permissions. These objects can&#146;t
    be made to do anything other than what they already do, which
    is read the information. This will help satisfy the Audit
    department&#146;s desire to remove all possibility of
    unauthorized users accessing data, or authorized users
    corrupting accessible data.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Letting Windows NT handle the
    security at the domain level also allows me to take advantage
    of options built into Windows NT domain security, including
    centralized security management and the ability to implement
    more stringent security requirements. For example, Winlogon
    contains a DLL named GINA (graphical identification and
    authentication) that can be modified to accommodate
    smartcards, retinal scanners, or Borg implants at
    authentication.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Execution
Strategies and Pool Management</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">When sketching out the
    prototype architecture in the first article of this series, I
    built a callback class to allow asynchronous execution of the
    reporting system. But the complications involved with
    queueing multiple virtual data objects and Report Builders
    through the Request Broker are more than are necessary at
    this point, so I&#146;ve sidestepped the issue for the
    moment. Visual Basic presently builds only single-threaded
    ActiveX servers, and ActiveX serializes the requests to these
    servers. Originally, the Request Broker was envisioned as a
    solitary multiuse object on the remote server. With that
    scenario, the Request Broker would have to deal with virtual
    data objects and Report Brokers in a pool-management way. But
    at this time, I&#146;ve decided to bypass that complication
    and avoid asynchronous processing, and thus pool management
    as well. At a future point, both issues can be revisited.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In this article, the
    application design has been simplified to be purely
    synchronous, with all of the objects configured as Creatable,
    Singleuse, with the public property still True. If necessary,
    the users can run multiple copies of the application.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Given my application&#146;s
    design, the issue of implementing a pool manager becomes as
    much a business decision as it is a technology decision. The
    two primary benefits of a pool manager are improved
    performance, since the users don&#146;t have to wait for
    objects to be created, and tighter security, since the pool
    manager and its utilities create and own the ActiveX objects
    instead of the users. When a pool manager becomes overloaded,
    it must still turn away requests, or serialize them, which is
    same situation that I&#146;m in without a pool
    manager&#151;waiting until a new object is created or, if the
    server&#146;s run out of resources, waiting until an object
    becomes free. You should carefully evaluate demand and
    distribute users and objects to minimize overload situations.
    In addition, you need to determine which virtual data objects
    should be kept in the pool or pools, given the diversity of
    these objects.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Optimization</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In the old days of
    conventional MS-DOS memory, ex-pensive RAM, and primitive
    hardware, applications were optimized with multiple passes
    spent squeezing every line of code. In today&#146;s
    environment of powerful operating systems, cheap RAM, fast
    hardware, shorter lifecycles for application software
    (&quot;disposacode&quot;), and abstracted development tools
    like MFC and DAO, optimizing is a different process.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Most of the optimization of an
    enterprise application takes place at the architectural
    design level. Two key parts of this process are determining
    the optimal level of granularity for individual components
    (where to draw the lines), and deciding where to position
    these objects in order to get the best performance (run
    locally, run on one remote server, or run across multiple
    servers, depending on processing load and network latency).
    The Application Performance Explorer
    (http://www.microsoft.com/vbasic/download/vbape.htm), which
    is written in Visual Basic, can be a great help in verifying
    these design-and-deployment decisions that affect runtime
    performance.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Once the components are
    developed and the application is put together, the Visual
    Basic Code Profiler (shipped with Visual Basic) does a good
    job of helping you optimize the actual code by identifying
    unused, dead code and resource-intensive routines that are
    good targets for restructuring.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Visual Basic also provides
    some time-saving shortcuts for invoking ActiveX methods or
    setting and reading properties. For example, the WithÉEnd
    With construct allows you to directly grab the reference to
    the last component in an object.component.component.component
    chain without having each intermediate component along the
    chain handle the request as it goes down the hierarchy. For
    example, in my project, the code in <b>Figure 23</b> is used
    to set a series of properties for a field object. </font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;23&nbsp;Setting
Properties</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">With
oMessage.Fields.Item(sCurrentFieldName)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Cast
rdo data types</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Name
= sCurrentFieldName</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.DataType
= vFixRDOData(oResultset.rdoColumns(&quot;DataType&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Description
= vFixRDOData (oResultset.rdoColumns _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;FieldsDescription&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Size
= vFixRDOData(oResultset.rdoColumns(&quot;Size&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.Value
= vFixRDOData(oResultset.rdoColumns(&quot;Value&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">.SelectedFilter
= vFixRDOData(oResultset.rdoColumns _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">(&quot;FiltersSelectedName&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
With</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">My reporting system
    application, which runs synchronously on the client machine,
    brings up another aspect of optimization: the subjective
    perceptions of users. Since the application runs like a batch
    job, it has a potentially long period of apparent inactivity
    from the users&#146; point of view. While the SQL statement
    is generated, the data is fetched from the remote servers,
    and the final report is built, I run the risk of the user
    thinking that the process is hung. With some applications,
    this can result in unexpected problems if the user starts a
    clicking fit or keyboard tantrum, trying to get some kind of
    response out of the application. This won&#146;t affect my
    synchronously executing reporting system.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">One good way to handle this
    situation (in addition to trapping input from the user) is to
    display a message that lets the user know that the job&#146;s
    still running (see <b>Figure 24</b>). It&#146;s helpful to
    have a clock that displays the system time or the elapsed
    time, even if it&#146;s updated only a few times a minute,
    just to let the users know that everything&#146;s fine and
    that the application is still doing what they want it to do.
    Since my users are running Windows NT, they can read their
    email or look at comics or movie reviews on the Web while
    reports are being processed, occasionally checking on the
    progress of the application and getting some kind of
    satisfactory feedback.</font></p>
    <p><img src="vb4_24.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
24 Report Running message</b></font></p>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Microsoft
Access as a Sandbox</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">When used in passthrough query
    mode, Microsoft Access provides an environment for isolated
    testing of the huge-and-hairy SQL statements that are an
    integral part of client/server development. This is
    especially useful for components like the virtual data
    objects, which need to speak in SQL to many different
    datasources, such as Microsoft SQL Server, Sybase, Oracle,
    and so on. Not all SQL is created equal; there are variations
    in an optimized SQL statement that depend on the database
    engine that will be executing it. When testing and
    benchmarking SQL, it&#146;s a lot easier if you don&#146;t
    have to deal with the rest of a developing Visual Basic
    application at the same time.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Microsoft Access also provides
    a separate ODBC connection string for each passthrough query
    created, which lets you test the tuned SQL with the various
    user IDs and passwords the virtual data objects will actually
    use at runtime against the various databases they need to
    hit.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I also like to use Microsoft
    Access as a local backup of SQL Server development data,
    which optimizes the development process by reducing the risk
    of corrupting the living development data by using my own
    local copy. For example, while designing the database that
    supports the report build message objects, columns came and
    went from the tables as I put the picture together. On SQL
    Server, this means dropping and recreating the table, which
    means that all of the data in the table ceases to exist.
    Making up test data with referential integrity is not
    something that you want to do more than once. If the tables
    are imported into Microsoft Access, you can cut and paste the
    data back into the SQL Server tables after they are
    recreated.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">While there are other methods
    available to accomplish these tasks, Microsoft Access
    provides all of these features in one handy package that you
    probably already have on your desktop.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Internationalization</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Successful applications
    deployed in multinational corporations tend to get
    distributed around the globe. There are several ways to
    facilitate converting the application&#151;at least the parts
    of it that the user sees&#151;into different languages. One
    good method involves stripping all of the strings that are
    displayed to the user out of the application code and storing
    them in a single resource file. Icons and bitmaps, which
    might also be swapped out for different locations, can be
    stored in the resource file as well. In addition to getting
    all of the changeable stuff in one basket, resource files
    allow the application to selectively load bitmaps and strings
    as needed on-the-fly, minimizing the performance hit on a
    load event.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Microsoft Developer Studio
    provides a good environment for editing resource files or
    scripts. Saving the file from the Developer Studio produces a
    file with an .rc extension, which includes instructions for
    the resource compiler. Running the resource compiler that
    ships with Microsoft Visual C++¨ on the .rc file produces
    two more files, .res and .h. The .res file is the same for
    Visual C++ or Visual Basic and is simply added to the
    project. The .h file contains the constants used for locating
    items in the .res file, and it needs to be converted into
    something that Visual Basic can use.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I wrote a small standalone
    Visual Basic project called Resource to do this conversion.
    Resource runs at the command line and takes the path to the
    .h file. It then creates a file called resource.bas in the
    same directory as the .h file. The ConvertFile function from
    the Resource project&#151;essentially the heart of the
    project&#151;is shown in <b>Figure 25</b>.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;25&nbsp;ConvertFile
Function</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Private
Function ConvertFile(sFileName As String) As Boolean</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'The
work to convert the header file to a bas file takes place here</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Basically
trap any file or command line errors</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">On
Error GoTo ERROR_ConvertFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Set
successful completion to false</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ConvertFile
= False</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iInFile As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iOutFile As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sInString As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
sOutString As String</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Get
input file handle and open file</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iInFile
= FreeFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Open
sFileName For Input As iInFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Get
output file handle and open file</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Since
VB only allows one resource file we've chosen</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
RESOURCE.BAS as our result name</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iOutFile
= FreeFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Open
ExtractPath(sFileName) &amp; &quot;RESOURCE.BAS&quot; For Output
As iOutFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Put
in the first line required by VB</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iOutFile, &quot;Attribute VB_Name =
&quot;&quot;modResource&quot;&quot;&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Process
the whole file</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Do
While Not EOF(iInFile)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'In
with a row</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Input
#iInFile, sInString</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Looking
at a .h file generated by the Developer Studio Resource</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
editor shows that the first break in lines of text is where</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'
we want to bail out</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">If
Left(sInString, 1) = &quot;&quot; Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Exit
Do</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Else
we ignore comments</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ElseIf
Left(sInString, 1) &lt;&gt; &quot;/&quot; Then</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'If
it is not a comment then replace the #define with _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">&quot;Public
Const&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutString
= &quot;Public Const&quot; &amp; Right(sInString, _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Len(sInString)
- Len(&quot;#define&quot;))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Put
an equal (=) sign between the const name and value</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Dim
iLastSpace As Integer</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">iLastSpace
= FindLastSpace(sOutString)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sOutString
= Left(sOutString, iLastSpace) &amp; &quot;= &quot; &amp; _</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Right(sOutString,
Len(sOutString) - iLastSpace)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Print
result to file</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Print
#iOutFile, sOutString</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">End
If</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Loop</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'Close
files</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close
iInFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Close
iOutFile</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">'If
we made it this far we were successful</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ConvertFile
= True</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Exit
Function</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">As an example of how this
    works, I stripped the strings out of the Resource project
    itself. After feeding the .rc file through the resource
    compiler, the resource.h file looks like <b>Figure 26</b>.
    After running the Resource conversion program on resource.h,
    the resulting resource.bas looks like <b>Figure 27</b>.</font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure&nbsp;26&nbsp;Resource.h</b></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{NO_DEPENDENCIES}}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Microsoft Developer Studio generated include file.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Used by Resource.rc</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
STR_HELP 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
STR_FAIL_PART_1 2</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
STR_FAIL_PART_2 3</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
STR_SUCCESS_PART_1 4</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
STR_SUCCESS_PART_2 5</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
ICON_MAIN 102</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Next default values for new objects</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifdef
APSTUDIO_INVOKED</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifndef
APSTUDIO_READONLY_SYMBOLS</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
_APS_NEXT_RESOURCE_VALUE 103</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
_APS_NEXT_COMMAND_VALUE 40001</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
_APS_NEXT_CONTROL_VALUE 1000</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
_APS_NEXT_SYMED_VALUE 101</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font size="2"><strong>Figure&nbsp;27&nbsp;Resource.bas</strong></font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Attribute
VB_Name = &quot;modResource&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const STR_HELP = 1</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const STR_FAIL_PART_1 = 2</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const STR_FAIL_PART_2 = 3</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const STR_SUCCESS_PART_1 = 4</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const STR_SUCCESS_PART_2 = 5</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">Public
Const ICON_MAIN = 102</font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The resources contained in the
    .res file are actually rolled into the Visual Basic
    executable at build. This means that creating
    different-language versions of the application entails more
    than simply swapping in different resource files at
    deployment. Each language the application is released in will
    require a separate pass through the resource compiler and a
    separately-built executable. The drawbacks to this approach
    are that it involves a fairly tedious (read &quot;vulnerable
    to error&quot;) process, and that it lacks any means of
    centralized control. In addition to adding a layer of
    complexity when adding enhancements or updates to the
    application, this method introduces the risk of divergent
    code paths.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">As alternatives to standard
    resource files, there are a couple of other options for
    adding multilanguage support to my reporting system
    application. Given that the application&#146;s bitmaps and
    icons won&#146;t be changing, I can load all of the strings
    into a central repository. Since the application is designed
    to access a SQL Server 6.5 business service component at
    runtime, a single string table out on the SQL Server, with a
    two-field primary key composed of the string- and language
    identifiers, plus a third field for the text of the string
    itself, would be a good candidate for the string repository.
    The strings would be loaded down from the server at startup.
    As a faster option, the strings could be cached locally on
    the client, in either an .mdb file or, for even better
    performance, in a lightweight flatfile. Down the road, I can
    consider building an ActiveX server component to dynamically
    pass the strings to the application.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">As another option, I can build
    a mechanism to help Visual Basic have some of the flexibility
    of C. C programs are able to dynamically read resource DLLs
    during execution without recompiling. Changing the language
    of the strings or the appearance of the bitmaps and icons
    used by the application can be a simple matter of changing
    the DLLs. For my 32-bit Visual Basic application I can
    consider compiling the resource files, along with routines
    for loading the strings and images, as in-process ActiveX
    DLLs, which can be dynamically replaced. These ActiveX DLLs
    would be like resource files on steroids.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Converting the strings,
    bitmaps, and icons that an application uses doesn&#146;t help
    with error or status messages returned from the Visual Basic
    or operating system runtime DLLs. Fortunately, there are
    versions of Visual Basic and Windows NT in various languages,
    so the application can be rebuilt and setup disks created in
    another language environment from the ground up.</font></p>
</blockquote>

<p><font color="#000000" size="3" face="verdana,arial,helvetica"><b>Summary</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In the first part of this
    series, I examined the architecture of the reporting system
    application and outlined the API for all of its components.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In this article, I focused on
    the implementation and locked down the Reporting System API.
    On the user service front, I built a Web browser viewer that
    displays report data through IIS. I rounded out the business
    service Request Broker and expanded the messaging object that
    carries data between all of the components. I developed a
    complete, functioning virtual data object and an HTML Report
    Builder. And I exploited the ease-of-use and flexibility of
    the Microsoft SQL Server business service component to
    support the application at just about every step, in-cluding
    replacing stubbed info with real data from my friends at
    Northwind. I also looked at design tradeoffs and options in
    security, pool management, optimization, and
    internationalization.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">The Visual Basic components
    that are discussed and built in this article are designed to
    create an Employee Info report that&#146;s displayed as an
    HTML page. But that&#146;s just an example; the real value of
    this system is that the API will remain unchanged for any
    report you wish to create by plugging in new components based
    on the samples in this article. Give it a try!</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In Part III, I&#146;ll wrap up
    the development phase and cover deployment issues such as QA
    testing and handling maintenance issues and enhancement
    requests for the application. And I&#146;ll finally get to
    talk about Visual Basic 5.0. Stay tuned. </font></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>To
obtain complete source code listings, see </b></font><a
href="ednote.htm"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Editor's page</b></font></a><font
color="#000000" size="2" face="verdana,arial,helvetica"><b>.</b></font></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>This article is reproduced
    from Microsoft Systems Journal. Copyright © 1997 by Miller
    Freeman, Inc. All rights are reserved. No part of this
    article may be reproduced in any fashion (except in brief
    quotations used in critical articles and reviews) without the
    prior consent of Miller Freeman.</i></font></p>
    <p><font color="#000000" size="2"><i>To contact Miller
    Freeman regarding subscription information, call (800)
    666-1084 in the U.S. and Canada, or (303) 678-0439 in all
    other countries. For other inquiries, call (415) 905-2200.</i></font></p>
</blockquote>
</font></body>
</html>

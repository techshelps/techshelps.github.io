<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Adobe application">
<meta name="Template" content="C:\MSOffice\Templates\MSJ.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Q &amp; A</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<font face="verdana,arial,helvetica" size="2">

<p><font color="#000000" size="6" face="verdana,arial,helvetica">C++
Q &amp; A</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica">by Paul DiLascia</font></p>

<p align="center"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Paul DiLascia is a freelance
software consultant specializing in training and software
development in C++ and Windows. He is the author of Windows++:
Writing Reusable Code in C++ (Addison-Wesley, 1992).</b></font></p>

<blockquote>
    <p><font color="#000080" size="6"
    face="BI New Century Schlbk BoldIt">Q</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">I&#146;m
    using C++ to build a Web application. My app has several
    static global objects that various parts of the code use.
    Recently, we did some performance-tuning on our app and
    discovered that it takes a long time to start up because
    these global objects (actually, only three of them are
    significant) take a long time to initialize themselves in
    their constructors. I don&#146;t really need to initialize
    the objects until/unless they&#146;re used&#151;that is, when
    someone calls one of the member functions to actually do
    something. If I could defer the initialization, then the app
    will start up quicker. I could always move all initialization
    code from the constructor into some other function like
    CFoo::InitializeObject, and then everywhere do a check to
    initialize the object. For example;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CFoo::SomeFunction()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">{</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">if (!m_bInitialized) {</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">InitializeObject();</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">m_bInitialized = TRUE;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">But this seems dorky and there
    are too many functions I would have to change, some of them
    inline. Is there some easy way I can use C++ to only
    initialize the object when it&#146;s first used?</font></p>
    <p align="right"><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>Jeff Kirpal</i></font></p>
    <p><font color="#000080" size="6"
    face="verdana,arial,helvetica">A</font><font color="#000000"
    size="2" face="verdana,arial,helvetica">Yes, there is. But
    first, let me review the problem briefly just to make sure
    we&#146;re all on the same page. In C++, there are three ways
    you can create an object. You can do it on the stack: </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">void MyFunc()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">{</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CFoo foo; // create CFoo
    object on stack</font></p>
    <blockquote>
        <p><font color="#000000" size="3" face="Courier New">&#149;</font></p>
        <p><font color="#000000" size="3" face="Courier New">&#149;</font></p>
        <p><font color="#000000" size="3" face="Courier New">&#149;</font></p>
    </blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">You can do it by allocating
    the object in memory:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">pFoo = new CFoo(); // allocate
    from heap</font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">And you can create an object
    as a static global variable:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CFoo foo; // outside of any
    function</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In each of these cases, C++
    must generate a call to your CFoo constructor to properly
    initialize the object. In the case of stack and heap objects,
    C++ generates a hidden call to the constructor immediately
    following the allocation (either stack or heap). What about
    static objects? Since the object is instantiated outside of
    any function (outside function scope, as we gurus say),
    there&#146;s no place to call the constructor from. So how do
    these objects get initialized?</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Initialization of C++ static
    objects is accomplished with the help of the startup code
    that comes with your C++ compiler. In C/C++, the main entry
    point of any program is called&#151;what else?&#151;main. In
    Windows</font><font color="#000000" size="1"
    face="verdana,arial,helvetica">¨</font><font color="#000000"
    size="2" face="verdana,arial,helvetica">, it&#146;s WinMain.
    But while these functions are, from your perspective, the
    beginning of all creation, a lot goes on before your main or
    WinMain even gets control. There are libraries to initialize,
    process information to set up, I/O streams to create, and so
    on. And there are static objects that require initialization.
    </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">As the compiler is compiling
    your program, whenever it comes across a static object, it
    adds the object to a list. Actually, the compiler
    doesn&#146;t just add the object, it also adds a pointer to
    one of its constructors and the arguments you called it with,
    if any. Before passing control to your main or WinMain
    function, your compiler-supplied startup code calls a
    function that zips down the list, calling all the
    constructors with their proper arguments, thus initializing
    your global static objects.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">So now you know how C++
    initializes static globals and why, if any of them have
    CPU-hog constructors, it can take a while for your app to
    start, as Jeff discovered. The question is, what can you do
    about it? </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Earlier I said there are three
    ways to instantiate a C++ object: stack, heap, and global
    static objects outside function scope. Well, that&#146;s not
    quite the whole story. You can also create a &quot;local
    static&quot; object inside function scope. </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">void MyFunc()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">{</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">static CFoo foo; // static,
    inside fn!</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">In this case foo is like a
    normal C local static variable. There&#146;s only one
    instance, which lives in fixed memory (not the stack or
    heap). It behaves like any other static variable, which is to
    say its value/state are remembered across multiple
    invocations of MyFunc. All you do by putting foo inside
    MyFunc is prevent other functions from accessing it. So much
    for C. In C++, where objects can have constructors, the
    obvious question is, when does such an object get
    initialized? The rules of C++ state that foo shall be
    initialized the first time control passes through its
    declaration&#151;which is to say, the first time your code
    calls MyFunc. Conceptually, it works as though the code was
    written in C as follows:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">void MyFunc()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">{</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">static int isInitialized = 0;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">static CFoo foo; </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">if (!isInitialized) {</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">// call constructor</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">isInitialized = 1;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="1"
    face="verdana,arial,helvetica">&#149;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Pretty clever, eh? This looks
    sort of like what Jeff was trying to do with his set-a-flag
    fix, but not quite. Nevertheless, local static variables are
    perfect for solving Jeff&#146;s problem. How? Let&#146;s say
    you have some class CFoo, and a global static instance,
    theFoo. All throughout your code in various places, you call
    theFoo.DoThis and theFoo.DoThat to do stuff. Since theFoo is
    a global static (outside function scope), the compiler
    initializes it at startup, which is not what you want. You
    want the compiler to initialize theFoo the first time your
    program calls CFoo::DoThis or CFoo::DoThat. Well, all you
    have to do is write a Get function, and use it instead of
    theFoo.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">class CFoo {</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">public:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CFoo::CFoo();</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">// static fn gets one-and-only
    CFoo object</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">static CFoo&amp; GetTheFoo();</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">};</font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CFoo&amp; CFoo::GetTheFoo()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">{</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">static CFoo _theFoo;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">return _theFoo;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">}</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Now _theFoo lives inside
    CFoo::GetTheFoo, which is a static function (not to be
    confused with a static object) that retrieves it. Instead of
    writing theFoo.DoThis and theFoo.DoThat to call your global
    CFoo object, you now write CFoo::GetTheFoo().DoThis() and
    CFoo::GetTheFoo().DoThat(). </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">&quot;Yuk,&quot; I hear you
    say. &quot;I don&#146;t want to write all that, and I
    don&#146;t want to do a massive search-and-replace on all my
    code!&quot; No problem. You can #define a macro to make the
    new implementation completely invisible to your old code.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">#define theFoo
    CFoo::GetTheFoo()</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">Just recompile your code, and
    no one will ever know the difference. The first function that
    calls any CFoo function will now end up calling
    CFoo::GetTheFoo to get the one-and-only global CFoo object,
    which is the static object _theFoo living inside the function
    scope of GetTheFoo. CFoo::GetTheFoo will initialize _theFoo
    (by calling its constructor) before returning _theFoo as a
    reference. The second time you code accesses theFoo, the
    second time it calls CFoo::GetTheFoo, _theFoo is already
    initialized so CFoo::GetTheFoo just returns it as a
    reference. </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">I made GetTheFoo return a
    reference to CFoo (CFoo&amp;) since the global CFoo object is
    always &quot;there,&quot; and hence there&#146;s no point
    returning a pointer. Or, to put it another way, since there
    is no circumstance under which it would make sense for
    GetTheFoo to return NULL, it should return a reference, not a
    pointer. Got it? Local static variables are just the ticket
    whenever you have a global object that you only want to
    initialized when or if it&#146;s used. I use them frequently.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">One last thing: in case
    you&#146;re wondering if there&#146;s any similar thing for
    destructors, you&#146;re out of luck. Just as C++ initializes
    static objects during its startup processing, before calling
    main, it destroys them from its shutdown code, after main or
    WinMain returns control. All static objects are destroyed
    this way&#151;both global and local. </font></p>
    <p><font color="#000080" size="6"
    face="BI New Century Schlbk BoldIt">Q</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">I&#146;ve
    seen some applications with status bar panes that appear
    out-dented instead of the normal pushed-in look. Is there an
    easy way to do this with MFC?</font></p>
    <p align="right"><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>Gary Greco</i></font></p>
    <p><font color="#000080" size="6"
    face="verdana,arial,helvetica">A</font><font color="#000000"
    size="2" face="verdana,arial,helvetica">Yes. MFC supports
    both styles of status bar panes, as controlled by the style
    flags #defined in afxext.h.</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_NORMAL // default (pushed
    in)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_POPOUT // popped-out</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_NOBORDERS // neither in
    nor out (like prompt)</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_OWNERDRAW // you can draw</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_DISABLED // greyed text</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_STRETCH // stretch to
    fill (like prompt)</font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">SBPS_STRETCH and
    SBPS_NOBORDERS are normally used for the first pane, which is
    the prompt (&quot;Ready&quot; indicator). SBPS_STRETCH tells
    MFC to use all the space remaining after the other fixed
    panes have been drawn. SBPS_NOBORDERS tells MFC to draw the
    pane with no borders&#151;that is, neither pushed in nor
    popped out, but just blended into the background. As you have
    already guessed, SBPS_POPOUT tells MFC to draw the panes with
    the &quot;popped-out&quot; look you want. </font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">How do you change the styles?
    You can access individual status bar pane styles with
    CStatusBar::GetPaneStyle and CStatusBar::SetPaneStyle. For
    example, to get the popped-out look, you could add the
    following lines inside your CMainFrame::OnCreate function,
    after you&#146;ve created the status bar:</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">CStatusBar *psb =
    &amp;m_wndStatusBar;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">UINT uFlags =
    psb-&gt;GetPaneStyle(ID_MY_PANE);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">uFlags |= SBPS_POPOUT;</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">psb-&gt;SetPaneStyle(ID_MY_PANE,
    uFlags);</font></p>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica">You can also do it by using
    the command update mechanism, the same mechanism MFC uses to
    let you control the state of menu items and toolbar buttons.
    In the case of a status bar pane, if you set the checked
    state, MFC gives the pane the SBPS_POPOUT style and draws the
    pane with the popped-out look (see <strong>Figure 1</strong>).
    This approach is better if you want to change the pane style
    dynamically. </font><font color="#000000" size="1"
    face="verdana,arial,helvetica">Figure 2</font><font
    color="#000000" size="2" face="verdana,arial,helvetica">
    shows a program I wrote that has menu commands to let you
    change whether the status bar panes are pushed in or popped
    out. The commands just set a Boolean variable,
    m_bStatusBarOut, which the command update function for the
    CAPS, NUM, and Scroll Lock indicators then uses to set
    whether the indicator pane is checked or not.</font></p>
    <p><img src="cqa1.jpg"></p>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
1 The StatusPlane Menu Options</b></font></p>

<blockquote>
</blockquote>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>Figure
2&nbsp; StatusPane</b></font></p>

<p><font color="#000000" size="1" face="Courier New">StatusPane.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Copyright 1997 Microsoft Systems Journal. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If this program works, it was written by Paul DiLascia.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If not, I don't know who wrote it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This program compiles with Visual C++ 4.1 on Windows 95</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
See StatusPane.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;resource.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
CApp : public CWinApp {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CApp();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
BOOL InitInstance();</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG(CApp)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnAppAbout();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">StatusPane.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
StatusPane Copyright 1997 Microsoft Systems Journal. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If this program works, it was written by Paul DiLascia.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If not, I don't know who wrote it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
StatusPane illustrates how to create a program with</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
popped-out (instead of pushed-in) status bar panes.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
All the action is in MainFrm.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;stdafx.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;StatusPane.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;mainfrm.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifdef
_DEBUG</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
new DEBUG_NEW</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#undef
THIS_FILE</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">static
char THIS_FILE[] = __FILE__;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CApp
NEAR theApp;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BEGIN_MESSAGE_MAP(CApp,
CWinApp)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG_MAP(CApp)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_COMMAND(ID_APP_ABOUT,
OnAppAbout)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG_MAP</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_COMMAND(ID_FILE_NEW,
CWinApp::OnFileNew)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_COMMAND(ID_FILE_OPEN,
CWinApp::OnFileOpen)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">END_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CApp::CApp()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
CApp::InitInstance()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Create main frame window (don't use doc/view stuff)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainFrame*
pMainFrame = new CMainFrame;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(!pMainFrame-&gt;LoadFrame(IDR_MAINFRAME))</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
FALSE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pMainFrame-&gt;ShowWindow(m_nCmdShow);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pMainFrame-&gt;UpdateWindow();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_pMainWnd
= pMainFrame;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
TRUE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CApp::OnAppAbout()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CDialog(IDD_ABOUTBOX,
m_pMainWnd).DoModal();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="1" face="Courier New">MainFrm.h</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Copyright 1997 Microsoft Systems Journal. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If this program works, it was written by Paul DiLascia.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If not, I don't know who wrote it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This program compiles with Visual C++ 4.1 on Windows 95</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
See StatusPane.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">class
CMainFrame : public CFrameWnd {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">public:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainFrame();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">virtual
~CMainFrame();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">protected:</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_DYNAMIC(CMainFrame)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CStatusBar
m_wndStatusBar;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CToolBar
m_wndToolBar;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BOOL
m_bStatusBarOut;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG(CMainFrame)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
int OnCreate(LPCREATESTRUCT lpCreateStruct);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnStatusBarIn();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnStatusBarOut();</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnUpdateStatusBarIn(CCmdUI *pCmdUI);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnUpdateStatusBarOut(CCmdUI *pCmdUI);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">afx_msg
void OnUpdateIndicator(CCmdUI *pCmdUI);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">DECLARE_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">MainFrm.cpp</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">////////////////////////////////////////////////////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Copyright 1997 Microsoft Systems Journal. </font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If this program works, it was written by Paul DiLascia.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
If not, I don't know who wrote it.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
This program compiles with Visual C++ 4.1 on Windows 95</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Illustrates how to create a program with popped-out (instead of
pushed-in)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
status bar panes.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;stdafx.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;StatusPane.h&quot;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#include
&quot;mainfrm.h&quot;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#ifdef
_DEBUG</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#define
new DEBUG_NEW</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#undef
THIS_FILE</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">static
char THIS_FILE[] = __FILE__;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">#endif</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">IMPLEMENT_DYNAMIC(CMainFrame,
CFrameWnd)</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">BEGIN_MESSAGE_MAP(CMainFrame,
CFrameWnd)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//{{AFX_MSG_MAP(CMainFrame)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_WM_CREATE()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_COMMAND(ID_STATUS_BAR_IN,
OnStatusBarIn)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_COMMAND(ID_STATUS_BAR_OUT,
OnStatusBarOut)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_UPDATE_COMMAND_UI(ID_STATUS_BAR_IN,
OnUpdateStatusBarIn)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_UPDATE_COMMAND_UI(ID_STATUS_BAR_OUT,
OnUpdateStatusBarOut)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_UPDATE_COMMAND_UI(ID_INDICATOR_CAPS,
OnUpdateIndicator)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_UPDATE_COMMAND_UI(ID_INDICATOR_NUM,
OnUpdateIndicator)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ON_UPDATE_COMMAND_UI(ID_INDICATOR_SCRL,
OnUpdateIndicator)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//}}AFX_MSG_MAP</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">END_MESSAGE_MAP()</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">static
UINT BASED_CODE indicators[] = {</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ID_SEPARATOR,
// status line indicator</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ID_INDICATOR_CAPS,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ID_INDICATOR_NUM,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">ID_INDICATOR_SCRL,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">};</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainFrame::CMainFrame()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_bStatusBarOut
= FALSE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">CMainFrame::~CMainFrame()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">int
CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(CFrameWnd::OnCreate(lpCreateStruct) == -1)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
-1;</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Create toolbar</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(!m_wndToolBar.Create(this) ||</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">!m_wndToolBar.LoadToolBar(IDR_MAINFRAME))
{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">TRACE0(&quot;Failed
to create toolbar\n&quot;);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
-1; // fail to create</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Create status bar</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">if
(!m_wndStatusBar.Create(this) ||</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">!m_wndStatusBar.SetIndicators(indicators,</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">sizeof(indicators)/sizeof(UINT)))
{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">TRACE(&quot;Failed
to create status bar\n&quot;);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
-1; // fail to create</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
You could also set the status bar pane styles here</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">return
0;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Status Bar In/Status Bar Out commands just toggle a flag</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainFrame::OnStatusBarIn()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_bStatusBarOut
= FALSE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainFrame::OnStatusBarOut()</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">m_bStatusBarOut
= TRUE;</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Set radio button on whichever command is currently in effect.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainFrame::OnUpdateStatusBarIn(CCmdUI *pCmdUI)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCmdUI-&gt;SetRadio(!m_bStatusBarOut);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainFrame::OnUpdateStatusBarOut(CCmdUI *pCmdUI)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCmdUI-&gt;SetRadio(m_bStatusBarOut);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//////////////////</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
Update status pane indicator: set the &quot;checked&quot; state.</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
TRUE = MFC draws it popped out</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//
FALSE = MFC draws it pushed in</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">//</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">void
CMainFrame::OnUpdateIndicator(CCmdUI *pCmdUI)</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">{</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">pCmdUI-&gt;SetCheck(m_bStatusBarOut);</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica">}</font></p>

<p><font color="#000000" size="2" face="verdana,arial,helvetica"><b>To
obtain complete source code listings, see </b></font><a
href="ednote.htm"><font color="#000000" size="2"
face="verdana,arial,helvetica"><b>Editor's page</b></font></a><font
color="#000000" size="2" face="verdana,arial,helvetica"><b>.</b></font></p>

<p><font color="#000080" size="1" face="B Franklin Gothic Demi">Have
a question about programming in C or C++? Send it to Paul
DiLascia at </font><a href="mailto:72400.2702@compuserve.com"><font
color="#000080" size="1" face="B Franklin Gothic Demi">72400.2702@compuserve.com</font></a></p>

<blockquote>
    <p><font color="#000000" size="2"
    face="verdana,arial,helvetica"><i>This article is reproduced
    from Microsoft Systems Journal. Copyright © 1997 by Miller
    Freeman, Inc. All rights are reserved. No part of this
    article may be reproduced in any fashion (except in brief
    quotations used in critical articles and reviews) without the
    prior consent of Miller Freeman.</i></font></p>
    <p><font color="#000000" size="2"><i>To contact Miller
    Freeman regarding subscription information, call (800)
    666-1084 in the U.S. and Canada, or (303) 678-0439 in all
    other countries. For other inquiries, call (415) 905-2200.</i></font></p>
    <p><font color="#000000" size="3" face="Courier New"></font>&nbsp;</p>
</blockquote>
</font></body>
</html>

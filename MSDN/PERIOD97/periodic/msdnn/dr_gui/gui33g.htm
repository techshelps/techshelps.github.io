<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_10/26/94_11:28 AM">
<meta name="Template" content="C:\MSOffice\Templates\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More music: Just an old-fashioned C question...</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">


    <p><font size="5" face="Verdana">More music: Just an
    old-fashioned C question&#133;</font></p>
    <h2><font size="2" face="Verdana">Dear Dr. GUI:</font></h2>
    <p><font size="2" face="Verdana">Here's an old-fashioned C
    question: How can I obtain the offset of a structure
    member&#151;as a <i>constant</i>? I need the offset as a
    constant so that it can be used in an initializer of some
    other static variable.</font></p>
    <p><font size="2">Sample code that doesn't work:</font></p>
    <p><font size="2" face="Courier New">struct xStru { int m1;
    int m2; int m3 };</font></p>
    <p><font size="2" face="Courier New">struct xStru S, *pS;</font></p>
    <p><font size="2" face="Courier New">int m2offset = (char
    *)&amp;S.m2 - (char *)&amp;S,</font></p>
    <p><font size="2" face="Courier New">m3offset = (char
    *)&amp;pS-&gt;m3 - (char *)pS;</font></p>
    <p><font size="2" face="Verdana">With Microsoft C version
    8.00, both the third and fourth lines generate the compiler
    error message &quot;..2099 initializer is not a
    constant&quot;.</font></p>
    <p><font size="2" face="Verdana">If automatic storage class
    variables are initialized as above, the compiler generates
    dumb code such as the following:</font></p>
    <p><font size="2" face="Courier New">mov ax,OFFSET _S+2</font></p>
    <p><font size="2" face="Courier New">sub ax,OFFSET _S</font></p>
    <p><font size="2" face="Courier New">..giving result m2offset</font></p>
    <p><font size="2" face="Courier New">mov ax,OFFSET 4</font></p>
    <p><font size="2" face="Courier New">mov cx,WORD PTR _pS</font></p>
    <p><font size="2" face="Courier New">add cx,ax</font></p>
    <p><font size="2" face="Courier New">sub cx,WORD PTR _pS</font></p>
    <p><font size="2" face="Courier New">..giving result m3offset</font></p>
    <p><font size="2" face="Verdana">(In fairness, this second
    fragment is optimized-away with /Ox.)</font></p>
    <p><font size="2" face="Verdana">In desperation, I have tried
    declarations with <b>__based</b> and <b>const</b> attributes,
    but all to no avail. How can I get the compiler to reveal the
    offsets that it clearly &quot;knows&quot;?</font></p>
    <p><font size="2" face="Verdana">Thanks,</font></p>
    <p><font size="2" face="Verdana"><i>Jim Sack</i></font></p>
    <h2><font size="2" face="verdana">Dr. GUI replies:</font></h2>
    <p><font size="2" face="Verdana">This is kind of an
    addressing question, which is kinda like mail. But out of the
    goodness of his GUI little heart, Dr. GUI will take it for
    you.</font></p>
    <p><font size="2" face="Verdana">As it turns out, there's a
    good old-fashioned solution to the problem. If you want the <i>offset
    of</i> a member of a structure, use the <b>offsetof</b> macro
    (defined in stddef.h.). Here's an example:</font></p>
    <p><font size="2" face="Courier New">#include
    &lt;stddef.h&gt;</font></p>
    <p><font size="2" face="Courier New">#include &lt;stdio.h&gt;</font></p>
    <p><font size="2" face="Courier New">struct S</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">int i;</font></p>
    <p><font size="2" face="Courier New">char c;</font></p>
    <p><font size="2" face="Courier New">float f;</font></p>
    <p><font size="2" face="Courier New">double d;</font></p>
    <p><font size="2" face="Courier New">char c2;</font></p>
    <p><font size="2" face="Courier New">short s;</font></p>
    <p><font size="2" face="Courier New">};</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">// Note that extern
    definitions must be const.</font></p>
    <p><font size="2" face="Courier New">int i = offsetof(struct
    S,i),</font></p>
    <p><font size="2" face="Courier New">j = offsetof(struct
    S,c),</font></p>
    <p><font size="2" face="Courier New">k = offsetof(struct
    S,f),</font></p>
    <p><font size="2" face="Courier New">l = offsetof(struct
    S,d),</font></p>
    <p><font size="2" face="Courier New">m = offsetof(struct
    S,c2),</font></p>
    <p><font size="2" face="Courier New">n = offsetof(struct
    S,s);</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">void main()</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">printf(&quot;%d %d %d %d
    %d %d\n&quot;,i,j,k,l,m,n );</font></p>
    <p><font size="2" face="Courier New">}</font></p>
    <p><font size="2" face="Verdana">Note that the offsets are <i>not</i>
    always what you'd get if you added up the sizes of the
    members, since the compiler pads structures to avoid
    accessing data that is longer than a byte across 32-bit
    boundaries (which is inefficient on Intel and horrendously
    inefficient on most RISC machines). You may want to lay out
    structures so as to minimize the amount of padding&#151;for
    instance, putting the two &quot;char&quot;s and the
    &quot;short&quot; together would result in no padding at all.</font></p>

</font></body>
</html>

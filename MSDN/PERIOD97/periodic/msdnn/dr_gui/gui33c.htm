<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_10/26/94_11:28 AM">
<meta name="Template" content="C:\MSOffice\Templates\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More on decoration</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">


    <p><font size="5" face="Verdana">More on decoration</font></p>
    <h2><font size="2" face="Verdana">Dear Dr. GUI:</font></h2>
    <p><font size="2" face="Verdana">Why is the decoration method
    for C++ names Microsoft proprietary? When I try to compile
    the files below, the function <b>MyFPXInit</b> is decorated
    as ?MyFPXInit@@ZA?EW4FPXStatus@@PEKPED<b><i><u>J</u></i></b>@Z
    in the file a1.cpp but is decorated as
    ?MyFPXInit@@ZA?EW4FPXStatus@@PEKPED<b><i><u>K</u></i></b>@Z
    in file a2.cpp instead and results in a link error. Why are
    the names decorated differently? What is the difference
    between a &quot;J&quot; and a &quot;K&quot; in the decorated
    name? I am using Microsoft Visual C++ 1.52. I use the command
    line cl /c /AL /Fc and am getting the decorated names from
    the .cod file.</font></p>
    <p><font size="2" face="Courier New">File: A1.H</font></p>
    <p><font size="2" face="Courier New">extern FPXStatus
    MyFPXInit (unsigned long *memSizeInBytes, </font></p>
    <p><font size="2" face="Courier New">char
    *requiredVersionName, </font></p>
    <p><font size="2" face="Courier New">unsigned long
    requiredVersionNumber);</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">File: A1.CPP</font></p>
    <p><font size="2" face="Courier New">FPXStatus MyFPXInit
    (unsigned long *memSizeInBytes,</font></p>
    <p><font size="2" face="Courier New">char
    *requiredVersionName,</font></p>
    <p><font size="2" face="Courier New">long
    requiredVersionNumber)</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">return(FPX_OK);</font></p>
    <p><font size="2" face="Courier New">}</font></p>
    <p>&nbsp;</p>
    <p><font size="2" face="Courier New">File: A2.CPP</font></p>
    <p><font size="2" face="Courier New">#include
    &quot;a1.h&quot;</font></p>
    <p><font size="2" face="Courier New">void main()</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">unsigned long
    memoryLimit = 2000000L;</font></p>
    <p><font size="2" face="Courier New">MyFPXInit(&amp;memoryLimit,
    0, 0);</font></p>
    <p><font size="2" face="Courier New">}</font></p>
    <p><font size="2" face="Verdana">Thanks,</font></p>
    <p><font size="2" face="Verdana"><i>David Cook</i></font></p>
    <h2><font size="2" face="verdana">Dr. GUI replies:</font></h2>
    <p><font size="2" face="Verdana">What, you think Dr. GUI is
    an interior decorator now? Puh-leeze! Oh, it's another
    programming question. The good doctor can deal with this.</font></p>
    <p><font size="2" face="Verdana">First, note that there is no
    standard for C++ name decoration. It sometimes even varies
    between versions of the same compiler. So <i>everybody's</i>
    name decoration is <i>proprietary</i> (more accurately, it's <i>unique</i>),
    not just Microsoft's. The reason that the linker is
    complaining is that the function being defined is:</font></p>
    <p><font size="2" face="Courier New">FPXStatus
    MyFPXInit(unsigned long, char, long);</font></p>
    <p><font size="2" face="Verdana">And the one being called is,
    according to the header:</font></p>
    <p><font size="2" face="Courier New">FPXStatus
    MyFPXInit(unsigned long, char, unsigned long);</font></p>
    <p><font size="2" face="Verdana">In other words, when you
    defined the function with a parameter type different from the
    header, you defined an entirely new overload. And you
    provided no definition for the declaration of the other
    function&#151;thus, the linker error.</font></p>
    <p><font size="2" face="Verdana">Then, by deduction, the
    answer to your question is that the difference between a
    &quot;J&quot; and a &quot;K&quot; is &quot;unsigned.&quot;</font></p>
    <p><font size="2" face="Verdana">The Microsoft Knowledge Base
    (KB) has an article, &quot;C++ Name Decoration, Why It's
    Used; How to Get Decorated Names&quot; (Article ID: Q126845),
    which should answer your other question.</font></p>
    <p><font size="2" face="Verdana">Although unnecessary in this
    case, if you wanted to undecorate the symbol name you have a
    couple of options. You could use the Browser Toolkit; it has
    a function that will undecorate the symbol name. If you were
    in Win32, you could use the <b>UnDecorateSymbolName</b> API.
    Since you are in 16-bit land, you should get the .bsc
    library. The details where this can be obtained are in the KB
    article &quot;Browser Toolkits for Microsoft Visual C++&quot;
    (Article ID: Q153393).</font></p>

</font></body>
</html>

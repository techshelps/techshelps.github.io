<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_10/26/94_11:28 AM">
<meta name="Template" content="C:\MSOffice\Templates\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Any more forwarding addresses?</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">


    <p><font size="5" face="Verdana">Any more forwarding
    addresses?</font></p>
    <h2><font size="2" face="Verdana">Dear Dr. GUI:</font></h2>
    <p><font size="2" face="Verdana">As you know, in Win32, a DLL
    can forward a symbol reference onto another DLL. In essence,
    it both imports it from another DLL and exports it from its
    own. For example, in KERNEL32.DLL in Windows NT, the export
    named &quot;HeapAlloc&quot; is forwarded to the string
    &quot;NTDLL.RtlAllocateHeap&quot;. This allows applications
    to use the NT-specific module &quot;NTDLL.DLL&quot; without
    actually containing import references to it. The
    application's import table references only
    &quot;KERNEL32.DLL&quot;. Therefore, the application is not
    specific to Windows NT and can run on any Win32 system.</font></p>
    <p><font size="2" face="Verdana">I need to do something
    similar in a pair of DLLs I am providing but cannot, for the
    life of me, find the directive or option that tells the
    linker or compiler how to do this. Any help would be much
    appreciated.</font></p>
    <p><font size="2" face="Verdana"><i>Gerry Attilio,</i><br>
    Software Jockey</font></p>
    <h2><font size="2" face="verdana">Dr. GUI replies:</font></h2>
    <p><font size="2" face="Verdana">First Nigel, now you. Does
    everyone think that Dr. GUI is a forwarding service? Sheesh.
    And to think I spent big bucks on med school for this! It's
    almost enough to make you go postal.</font></p>
    <p><font size="2" face="Verdana">Oh, this is a programming
    question! That I can do&#151;and it's not too difficult. For
    example, suppose you have two .dlls: dll1.dll and dll2.dll.
    dll2.dll contains a function, <b>foo()</b>. For the sake of
    simplicity, assume that no name decorating is in effect. Thus
    dll2.dll exports &quot;foo&quot;, and we have in our hands
    the import library for dll2.dll. Now if dll1.dll needs to
    forward a call to <b>foo()</b>, all you need to do is add a
    module definition (.def) file to dll1's build project. This
    .def file should contain the following:</font></p>
    <p><font size="2" face="Courier New">EXPORTS</font></p>
    <p><font size="2" face="Courier New">foo = dll2.foo</font></p>
    <p><font size="2" face="Verdana">You must relink dll1.dll
    with the import library of dll2.dll. Now when a client calls <b>foo()</b>
    in dll1 (which has no implementation whatsoever of <b>foo()</b>),
    the call will be automagically forwarded to dll2's <b>foo()</b>.
    This mapping is a one-time translation done by the loader at
    program load time. Note that you'll have to use the decorated
    name rather than &quot;foo&quot; if the compiler decorates
    function names, which it will for C++. You can get the
    decorated name from a full linker map.</font></p>

</font></body>
</html>

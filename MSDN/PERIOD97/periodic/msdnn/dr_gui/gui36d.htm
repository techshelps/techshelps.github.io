<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Safe messaging: Is SendMessage safe?</title>
<meta name=MS-HAID content="msdn_gui36d">

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="msdn_gui36d"></a>Safe messaging: Is SendMessage safe?</h1>
<p>
<b>Dear Dr. GUI,</b></p>
<p>
When I've got two GUI processes talking to each other using a simple private Windows messages protocol, I was wondering how <b>SendMessage</b> works between applications.</p>
<p>
How does a <b>SendMessage</b> call in one process that's obviously running in a separate thread interrupt another process's execution thread and deliver the message?  Interrupting it whatever it is doing obviously would cause synchronization problems, so how does it decide when to interrupt?  Or does the message go through the process's message queue?  I know it works because I've done it in the past but why does it work? Can the return code from <b>SendMessage</b> be relied upon?</p>
<p>
<i>Martin Rolls</i></p>
<p>
<b>Dr. GUI replies:</b></p>
<p>
Dr. GUI salutes your commitment to practicing safer computing. Let the good doctor assure that that your <b>SendMessage</b> technique is safe and effective.</p>
<p>
When sending messages between processes, <b>SendMessage()</b> doesn't interrupt the target thread. The target thread will process the sent message only when it executes its message retrieval loop, specifically when it calls <b>GetMessage()</b> or <b>PeekMessage()</b>. Within these calls, Windows determines if this thread's message queue has sent messages waiting to be processed and, if so, Windows directly calls the window procedure of the thread.</p>
<p>
Thus if the target thread does not make a call to <b>GetMessage()</b>/<b>PeekMessage()</b>, sent messages will not be processed at all. Conversely, since the target thread processes sent messages only when it calls <b>GetMessage()</b>/<b>PeekMessage()</b> the target thread is not &quot;interrupted&quot; in any way.</p>
<p>
Since the sending thread is blocked until the receiving thread processes the message, you can rely on the return code from <b>SendMessage()</b> even when sending a message to another thread or process.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Ask Dr. GUI #36</title>
<meta name=MS-HAID content="msdn_gui36">

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2">
<form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="msdn_gui36"></a>Ask Dr. GUI #36</h1>
<p>
(For some reason, Dr. GUI has been drinking iced instant coffee.)</p>
<p>
September 1997</p>
<p>
<b><i>Dr. GUI's specialists—<BR></i></b>Thanks to Saji Abraham and Rick Caudle for their hard work as specialists for this column!</p>
<h2>Java on My Mind&nbsp;.&nbsp;.&nbsp;.</h2>
<h3>What's New in the Land of GUI</h3>
<p>
Dr. GUI's been playing with two things recently: his Microsoft Windows CE handheld PC and Java. The good doctor’s even been playing with Java on his handheld PC by using a prerelease version of the Java Virtual Machine (VM) for Windows CE. Slimming down the Java VM and runtimes, which are typically quite huge, to fit on a handheld PC is quite an accomplishment!</p>
<p>
Windows CE is a lot of fun to program for and the Microsoft Visual C++ for Windows CE add-on works really well—it even supports Microsoft Foundation Class (MFC) for Windows CE! (And Dr. GUI has heard rumors that support for other languages is in the works.) You don't even need a handheld PC to try it out, since it includes an emulator that runs on your desktop PC.</p>
<p>
Now if someone would just port a Java compiler (they’re small and fast) and a simple development environment to Windows CE, Dr. GUI could hack code while running on a pair of AA cells. The good doctor knows of no such plan, but he can dream, can’t he? (Dr. GUI fondly recalls writing a compiler in Turbo Pascal 1.0.)</p>
<h3>J/Direct</h3>
<p>
Dr. GUI's even more excited about the new J/Direct capability of the Microsoft VM for Java that will ship with Microsoft Internet Explorer 4.0. J/Direct allows you to call almost any function in any dynamic-link library (DLL) directly. The VM takes care of mapping data types (such as strings, pointers, and structures that are in the Microsoft Windows API but not in Java) from Java to C/C++ and back. All you do is put a special comment:</p>
<pre><font face="Courier New" size="3">&#09;/** @dll.import(&quot;DRGUIS.DLL&quot;) */
</font></pre>
<p>
directly in front of the declaration of the function you want to call:</p>
<pre><font face="Courier New" size="3">&#09;static native String reverse(String s);
</font></pre>
<p>
and then you can call it to your heart's content. Here's a great example of how useful this is: Java doesn't have a <b>MessageBox</b> function. (Amazing, but true!) With J/Direct, it's trivial to declare the <b>MessageBox</b> function from USER32.DLL and call directly into the Microsoft Windows operating system. (There's a trick you can use for debugging!)</p>
<p>
These capabilities also work for Windows APIs—in fact, Microsoft even provides all of the declarations, including constants and classes representing Windows structures. Check it out at the Microsoft Java Web site (<a href="http://www.microsoft.com/java/">http://www.microsoft.com/java/</a>).</p>
<h3>Not JavaBeans versus ActiveX—JavaBeans and ActiveX</h3>
<p>
Another really exciting feature of the new Microsoft Java VM is that it provides automatic bidirectional integration between JavaBeans and ActiveX controls. In other words, any ActiveX client (including Microsoft Visual Basic, Visual C++, Visual Basic for Applications, and so on) can automatically use any JavaBean as if it were an ActiveX control. And any Java program can automatically use any ActiveX control as if it were a JavaBean.</p>
<p>
That means that you can pick the language that makes the most sense for you and your component and use the control you write from any client that uses ActiveX controls or JavaBeans. Is that freedom and power, or what?</p>
<h3>Freedom of Choice: Always a Good Thing</h3>
<p>
What really excites Dr. GUI about J/Direct is that it gives him freedom to choose how to write Java. Java isn't the solution to world hunger, but many folks feel that Java's memory management features and tight typing do a lot to improve programmer productivity. Until now, Java didn’t allow you easy access to Windows—nor to a vast array of third-party hardware and software capabilities. With J/Direct, you can get the productivity benefits of Java while exploiting the full power of the Windows API to make maximum use of your customers’ hardware and software investments.</p>
<p>
J/Direct <i>complements</i> the other three ways of calling non-Java code from Java. If your functionality is encapsulated in a Component Object Model (COM) object, just use the really easy Java/COM integration to call it directly. (The automatic bidirectional integration of ActiveX components and JavaBeans will make ActiveX programming in Java a snap in the Microsoft Internet Explorer 4.0 VM!) Microsoft also provides a number of Java classes for using Windows functionality, such as accessing the registry. Finally, when you need all the power you can get, use the Raw Native Interface (RNI)—you'll have to write fairly complex wrapper DLLs, but the extra power and speed is worth it for speed-critical code.</p>
<h3>Cross-Platform Doesn’t Come for Free with Java</h3>
<p>
Please don’t make the mistake of thinking that Java is the only way to write code that’s portable. Nothing could be further from the truth!</p>
<p>
First off, Java’s portability is vastly overstated. As they try to write cross-platform programs, more and more people are realizing that it’s not easy to use Java to port to different platforms. Dr. GUI, as you well know, doesn’t believe in the &quot;write once, run everywhere&quot; religion—he believes in the separation of church and code (See Dr. GUI # 34). At best, Java is &quot;write once, test, debug, and special-case everywhere.&quot;</p>
<p>
You’ll be very lucky (for any nontrivial program) if you can come up with one code base that will run on all platforms. And even so, it won’t run at all well on older platforms such as Windows 3.1 or older Macintoshes with 680x0 processors—older platforms are often 100 times (no, that’s not a typo, it <i>is</i> 100) slower than 32-bit Windows. A speed difference of a factor of 100 is almost like the difference between the Pentium on your desk and the original 4.77 MHz IBM PC.</p>
<p>
Are there better alternatives? You bet!</p>
<p>
If you need cross-platform client capability, nothing beats Hypertext Markup Language (HTML) and script. First off, it works—even on slow platforms such as Windows 3.1 and old Macintoshes. And by adding intelligence to your server, you can do most anything. You say you don't believe the good doctor? Check out the seattle.sidewalk Web site’s Seattle-area traffic congestion map (<a href="http://trafficview.seattle.sidewalk1.com/applet.asp">http://trafficview.seattle.sidewalk1.com/applet.asp</a>). This was originally done only as a Java applet, but Sidewalk added a non-Java version so more people could view it. Dr. GUI used to think that the Java map was a great demonstration of the power of Java, so he's especially chagrined to note that the HTML and script solution provides all of the crucial functionality of the Java applet—in a manner that much better approaches &quot;write once, run anywhere.&quot;</p>
<p>
If you need to write more substantial applications, you'll want to investigate one of the many porting solutions. For instance, if you want your Win32-based apps to run on UNIX and other operating systems, check out packages such as Bristol's Wind/U (http://www.bristol.com) and Mainsoft's MainWin (http://www.mainsoft.com). These products, and others, have been around for years—and they support a much broader range of functionality than does Java. Plus, you don't have to learn a new API just to port your app—and the performance will be better than when running under any VM. These packages aren't for everyone, but if you need to write for both 32-bit Windows and other operating systems, check these out!</p>
<p>
By the way, the portability story is much better when you're using the same VM on the same operating system but on different processors. Being able to compile Java code for Win32 once and have it run on all Microsoft Windows NT computers is a big advantage—not to mention being able to compile Java code for Windows CE handheld PCs once and being able to run on any CE H/PC that supports Java. Don't forget that responsible developers always test on every configuration they intend to support, though!</p>
<p>
Finally, don't forget that gaining portability always means sacrificing functionality—that any portable solution is, by definition, a least-common-denominator solution—one that doesn't take full advantage of every platform. That can be an acceptable trade-off sometimes—but you'll never get the fastest, smallest, coolest programs possible.</p>
<p>
Enough of that. Back to the phones!</p>
<p>
<b>Questions in this issue:</b></p>
<p>
<a href="gui36a.htm">Amnesia case? Who am I?</a></p>
<p>
<a href="gui36b.htm">Had enough shell allocations today?</a></p>
<p>
<a href="gui36c.htm">That's a nasty COFF you have there</a></p>
<p>
<a href="gui36d.htm">Safe messaging: Is SendMessage safe?</a></p>
<p>
<a href="gui36e.htm">I've got a pain in the short file names</a></p>
<p>
<a href="gui36f.htm">Gotta keep your hands off the console windows</a></p>
<p>
<a href="gui36g.htm">VB 4.0 32-bit app on Win16? No thanks&nbsp;.&nbsp;.&nbsp;.&nbsp;.</a></p>
<p>
<a href="gui36h.htm">To OCX or not</a></p>
<p>
<a href="gui36i.htm">The DAO of setup</a></p>
<p>
<a href="gui36j.htm">A special note: Sun's Espresso Man responds</a></p>
</font></BODY>
</HTML>

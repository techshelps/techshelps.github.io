<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Maneuver Your Solution to Microsoft Office 97</title>
<BODY bgcolor=white>

<font face="Verdana">
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<p><font size=5><b><a name="msdn_off97mig"></a>Maneuver Your Solution to Microsoft Office 97</b></font></p>
<p>
Scott Horn<BR>Product Manager, Office 97 Developer Edition</p>
<p>
You’ve heard about Microsoft Office 97 and the new Office 97, Developer Edition. Now you’re eager to start building great new solutions, but what about your solutions that were built with an earlier version of Office? Although most solutions will migrate to Office 97 with no changes, your solution may be one of a small percentage that will need some changes to run under Office 97, or you may even want to update your code just to take advantage of some of the new features in Office 97. This article looks at what you need to know to update your solution to Office 97 and what resources are available to help you.</p>
<p>
Any required solution changes fall into one of three categories: differences between 16-bit and 32-bit platforms; changes needed to support new common Office 97 components; or changes needed to support new Office 97 features. </p>
<p><font size=4><b>Determining Whether Your Solution Will Need Modification</b></font></p>
<p>
The table at the end of this article lists categories of pre-Office 97 solutions that may require some modification to run in Office 97. The following list quickly covers each type of solution and provides pointers for more detailed information. </p>
<h4>Platform Differences</h4>
<p>
<b>API and DLL References:</b> Some solutions created with 16-bit Office applications include references to 16-bit Windows APIs and DLLs. Office 97 is completely 32-bit, so your solution will be running on a 32-bit operating platform if it is running under Windows. If your solution is already running on a 32-bit Windows platform, either Windows 95, Windows NT 3.51, or Windows NT 4.0, this issue doesn’t affect your solution; otherwise all 16-bit API and DLL references must be replaced with equivalent 32-bit API or DLL references. This change is required for all solutions that include 16-bit API or DLL calls.</p>
<h4>New Common Office Components</h4>
<p>
<b>Visual Basic for Applications 5.0 (VBA 5.0)</b> is greatly improved over previous versions and is now included in Microsoft Word, Microsoft PowerPoint, Microsoft Access, and Microsoft Excel. VBA 5.0 provides new capabilities, including a programmable development environment and IntelliSense technology that assists developers in building solutions. Developers who move their solutions to Office 97 are also moving to VBA 5.0 and should be aware of differences between VBA 5.0 and previous VBA versions and VBA variants (Access Basic, WordBasic).</p>
<p>
<b>Solutions written in either Access Basic or WordBasic</b> are automatically converted to VBA 5.0 when a Microsoft Access database (.MDB) or Word document (.DOC) is opened in Microsoft Access 97 or Word 97. The conversion is not permanent until the updated file is saved. Many Access developers migrated their solutions to VBA when they moved to Access 95 and are not affected by moving to VBA 5.0. Microsoft Access and Word conversion has been extensively tested on customer-supplied solutions and converted solutions should run unmodified. It is possible that a small percentage of converted WordBasic code will generate compilation errors due to the stronger type checking in VBA (&quot;type mismatch&quot; errors) and by WordBasic code that was not executed or flagged as a syntax error. Correcting these errors usually involves changing a variable type declaration or adding explicit type conversion to code that has generated a compilation error. </p>
<p>
<b>Previous versions of Microsoft Excel</b> included VBA code in a module within a Microsoft Excel workbook. VBA 5.0 code is now stored in a VBA project within a Microsoft Excel workbook rather than being in a workbook module sheet. All previous VBA modules are automatically converted to VBA 5.0 projects, but solutions that have explicit references to a specific workbook VBA module will need to be updated. </p>
<p>
<b>Microsoft Outlook 97</b> is the new programmable desktop information manager in Office 97. It replaces Schedule+ from Office 95 and adds email, task, and contact management along with scheduling capabilities to Office 97. Developers can continue to use Schedule+, but Outlook has more capabilities and enhanced programmatic control, so developers will benefit from upgrading. Schedule+ information can be easily imported into Outlook and Outlook scheduling works with people who use Schedule+.</p>
<p>
<b>OfficeArt</b> is a new shared graphics and drawing component that is completely programmable, OfficeArt replaces previous drawing tools in Office, including Word Art and the PowerPoint graphics features. Solutions that rely on these older tools will need to be updated using OfficeArt.</p>
<p>
<b>Command Bars</b> is a new shared programmable component that replaces toolbars and menus. Command Bars provide all the features of toolbars and menus, while extending them to add new capabilities such as easily attaching code to toolbar buttons or dynamic menu creation. Solutions that use Windows API calls to manipulate toolbars and menus will need to be updated to use Command Bars. </p>
<h4>New Office 97 Features</h4>
<p>
<b>Microsoft Forms:</b> The new Office forms design environment is included in Visual Basic for Applications 5.0. This environment supports programmable form events and exposes an object model for the design environment. Forms created with Microsoft Forms can be reused across multiple Office applications. Microsoft Forms includes support for the more than 2,000 ActiveX controls (formerly OLE controls) available today and replaces all older dialog and form creation tools such as the Microsoft Word Dialog Editor. Older Word dialog boxes will continue to work in Word 97, but the Word Dialog Editor is not included in Word 97, so developers must use the Microsoft Forms environment to create new dialog boxes or modify older Microsoft Word dialog boxes.</p>
<p>
<b>Microsoft Excel 97:</b> Microsoft Excel 97 adds many new end-user and developer features, including a programmable object model for the Data Map geographical charting component, new chart types, and a finer degree of control over PivotTables. Minor changes have been made to the Microsoft Excel 97 object model to support these new features as well as the addition of common components such as Command Bars. Developers should review the Microsoft Excel 97 migration information referenced below for further details.</p>
<p>
<b>Microsoft PowerPoint 97:</b> The PowerPoint 97 object model has been refined to increase its consistency with other Office 97 object models and to incorporate new components such as OfficeArt and Command Bars. Developers should review the PowerPoint 97 migration information referenced below for further details.</p>
<p><b>What to Do Next</b></p>
<p>
<b>Get More Information:</b> There are a number of resources available to assist developers in moving their solutions to Office 97. The Office Developer Forum (http://www.microsoft.com/officedev/) is a great place to learn about the new developer features in Office 97. It includes a <b>Making the Move to Office 97</b> Web page with free white papers and code samples for migrating solutions. The table below provides pointers on specific migration options to use based on the type of solution involved and a list of helpful papers that are available on the Office Developer Forum. These papers will be also available on an upcoming MSDN library release. </p>
<p>
<b>Review Your Code:</b> Visual code inspection is worth the time it takes to do. Several issues outlined above, including type mismatches and 16-bit references, can be easily detected and corrected during visual code inspection. </p>
<p>
<b>Convert Your Solution and Evaluate:</b> One plan is to just try your code in Office 97. Your solution may not require any changes to run, or it may be converted and need no further changes. But first—MAKE A BACKUP OF YOUR SOLUTION! Then try it under Office 97 and use the enhanced VBA 5.0 development environment to make any changes needed. </p>
<p><b>Welcome to Office 97</b></p>
<p>
Office 97 delivers more new capabilities than any previous release—especially for developers. All the features in Office 97 are programmable and can be reused in custom solutions. VBA 5.0, Outlook 97, and ActiveX control support are just a sample of the new capabilities in Office 97. Developers who migrate their solutions to Office 97 will find that the trip was well worth it. </p>
<p>
<b>Office 97 Solution Migration Resources</b></p>
<table>
<tr valign=top>
<td>
<b>Category</b></td>
<td>
<b>Current Solution:</b></td>
<td>
<b>Use This in Office 97</b></td>
<td>
<b>For More Information</b></td>
</tr>
<tr valign=top>
<td>
<b>Platform Differences</b></td>
<td>
Microsoft Office solution with calls to 16-bit Windows APIs, 16-bit DLLs</td>
<td>
Equivalent 32-bit DLLs or Windows API references</td>
<td>
&quot;Porting Your 16-Bit-Based Microsoft Office-Based Solutions to 32-Bit Office&quot; (paper) </td>
</tr>
<tr valign=top>
<td>
<b>New Common Office Components</b></td>
<td>
Pre-Microsoft Office 97 solution with Visual Basic for Applications code</td>
<td>
&quot;Visual Basic for Applications 5.0 (VBA 5.0) to Excel 97&quot; and &quot;Migrating Solutions&quot;</td>
<td>
&quot;WordBasic Migration to Visual Basic for Applications&quot; and &quot;Migrating Solutions to PowerPoint 97&quot; (papers)</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Schedule+ solution</td>
<td>
Outlook 97, the new desktop information manager in Office 97</td>
<td>
&quot;Microsoft Outlook 97: Interoperability with Microsoft Exchange Client, Microsoft Mail Version 3.X, Microsoft Schedule+ 95, and Microsoft Schedule+ Version 1.0&quot; (paper)</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft Access solution written in Access Basic</td>
<td>
VBA 5.0 </td>
<td>
&quot;Migrating to Access 97&quot; Q&amp;A</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft Word solution written in WordBasic</td>
<td>
VBA 5.0 </td>
<td>
&quot;WordBasic Migration to Visual Basic for Applications&quot; (paper)</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft Word solution that includes Word dialog boxes</td>
<td>
Microsoft Forms (part of Visual Basic for Applications 5.0), the new Office forms design environment</td>
<td>
<i>Office 97 Visual Basic Programmer’s Guide</i> </td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft Excel solution that relies on VBA code residing in a workbook module</td>
<td>
VBA 5.0 as a separate MDI window in Office 97</td>
<td>
“Migrating Solutions to Excel 97”</td>
</tr>
<tr valign=top>
<td>
<b>New Office Features</b></td>
<td>
Pre-Microsoft Office 97 solution using drawing capabilities (Word Art, PowerPoint graphics)</td>
<td>
Office Art, the new shared graphics component in Office 97 </td>
<td>
<i>Office 97 Visual Basic Programmer’s Guide</i>, &quot;Migrating Solutions to Excel 97,&quot; and &quot;Migrating Solutions to PowerPoint 97&quot; </td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft PowerPoint 95 solution that uses the PowerPoint object model</td>
<td>
Object model exposed by PowerPoint 97, improved to accommodate new features and Office components</td>
<td>
&quot;Migrating Solutions to PowerPoint 97&quot; </td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Microsoft Office solution that uses Windows API calls to manipulate application menus or toolbars</td>
<td>
Command Bars, a new common and programmable Office component that replaces menus and toolbars in Office 97 </td>
<td>
&quot;Replacing API Calls That Manipulate Menus&quot; (article)</td>
</tr>
</table>
</font></body>
</HTML>

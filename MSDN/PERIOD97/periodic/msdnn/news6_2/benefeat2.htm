<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Sample is Born, or How to Succeed in Development Without Really Sleeping</title>
<BODY bgcolor=white>

<font face="Verdana">
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<p><font size=5><b><a name="msdn_Benefeat2"></a>A Sample is Born, <i>or</i> How to Succeed in Development Without Really Sleeping</b></font></p>
<p>
Paula Ladenburg</p>
<p>
In September, 1996, the Microsoft Visual Studio testing team was given a mission: go forth and create a sample application that integrates Web programming, Windows client/server application development, enterprise models using multitiered servers, and a database back end that would support several types of databases. Piece of cake, right?</p>
<p><font size=5><b>Who Ya Gonna Call?</b></font></p>
<p>
The impetus behind the assignment began with Chloe Lewis and Simon Poile, the cross-product testers of the various components of Visual Studio. Faced with the daunting task of evaluating all the tools that go into Visual Studio and their interoperability, Chloe and Simon decided to create a sample application incorporating as many of the functions as possible. Their goal: to test the experience of real users of the tools. Simon would work on the servers, Chloe on the Web platform. Just as no good deed goes unpunished, no good idea goes unnoticed, and soon the marketing department got involved. What had begun as a scenario test for Simon and Chloe’s work became a full-fledged application and, soon, more work than two people could do. When their resources were stretched to the limit and it became clear that reinforcements were needed, they called on (who else?) the MSDN Developer Technology team.</p>
<p>
The intrepid developers of MSDN stepped up to receive their assignments. Ken Bergmann, team captain, would provide the overall vision as well as working in the trenches with his team; Robert Coleridge, COM maven, would develop the Visual C++&reg; COM server connecting the front and back ends; Steve Kirk and James Braum, the Visual Basic&reg; guys, would tackle the Visual Basic server; batting cleanup: Fred Pace, bug fixer and tester; and finally, Greg Shumate, handling the remote server pieces. Assignments in hand and a steady supply of soft drinks and takeout food at the ready, they settled in to their task.</p>
<p><font size=5><b>The Benefits Sample</b></font></p>
<p>
The Corporate Benefits System is a comprehensive set of samples that address the various software components that might go into building a real online transaction processing (OLTP) database system. Its purpose is to show the integration of several technologies and to describe the details of working with these technologies. The idea underlying the development of this sample was to implement services and interfaces as a typical business would do. </p>
<p>
But hey, that’s the dry stuff. To learn more about the sample, see the MSDN Library CD, Visual Studio Edition. Let’s look instead at the people behind the sample—their joys and sorrows, their 90-hour weeks, their poor nutritional habits . . .</p>
<p><font size=5><b>Diving into the Deep Blue C</b></font></p>
<p>
Developer Robert Coleridge was assigned to work on the C++ version of the guts of the sample—the COM server that allows the client to talk to the database, either remotely or locally.</p>
<p>
When the team began developing this sample, Visual C++ version 5.0 was still in beta—the light at the end of the tunnel for C/C++ developers. They began writing a Visual C++ 4.2 version but that version was scrapped as version 5.0 neared, and they started from the ground up. Because the server couldn’t be MFC-dependent lest it become too unwieldy (in an application this size, the components had to be as svelte as possible), Robert was faced with the daunting task of writing all the classes—string-handling, date-handling, variant-handling, and much more. At its peak, the project consisted of a massive 47,000 lines of code, although rumor has it that 10,000 or so consisted of exhausted developers writing “All work and no play makes Jack a dull boy.”</p>
<p><font size=4><b>Robert’s Rules of Order</b></font></p>
<p>
Now that it’s all over and Robert has caught up on his sleep, he offers these do’s and don’ts for would-be server writers:</p>
<p>
DO have lots of chocolate-covered coffee beans on hand.</p>
<p>
DON’T eat cold pizza at 2:00 a.m.</p>
<p>
DO use Visual C++ version 5.0.</p>
<p>
DON’T use your keyboard as a pillow.</p>
<p>
DO read Dale Rogerson’s new book <i>Inside COM</i>.</p>
<p>
DON’T read hidden messages into fortune cookie fortunes.</p>
<p><font size=5><b>Your Basic Programmers</b></font></p>
<p><font size=4><b>Stardate: Who Knows?</b></font></p>
<p>
Steve Kirk, Visual Basic developer, stresses the most important lesson he learned from this experience: think ahead! The amount of consistency required in a project of this scope necessitated a clear plan of action from the start. Still, the best laid plans . . .  Because they were working with beta software, features that seemed stable were subject to change—usually at the most inconvenient times. In effect, the developers learned as they went, training themselves on the new versions of the tools as deadlines loomed.</p>
<p>
As for the experience of working so intensively with a team, the ever-diplomatic Steve would only say, “When it comes time to redesign the thing in the middle of the night, different people have different ideas.”</p>
<p><font size=4><b>The Hardest Working Man in . . . <i>Code Business?</i></b></font></p>
<p>
James Braum, the other half of the Visual Basic team, is a little more blunt. “The whole thing was kind of a weird experience,” he says. James worked on all of the Visual Basic elements of the project: the servers, the controls, the client application, the ActiveX document object. In the process, he says, he learned a lot of cool stuff, like how to use Visual Basic version 5.0, how to create a good object model, and a lesson for the future: “spec first, code later.” As for the all-nighters, he advises against them. After a certain number of hours, he says, you reach a point of diminishing returns and productivity starts to drop. </p>
<p>
James is now working on losing the 20 pounds he gained during the course of this project.</p>
<p><font size=5><b>The New Guys</b></font></p>
<p><font size=4><b>Boy Oh Boy!</b></font></p>
<p>
Fred Pace arrived in November, just in time for the “hell phase.” His role on the team: “cleanup boy,” brought in to provide support to the other developers. He almost immediately metamorphosed into “format boy,” as he took on his primary task of formatting the code. This delightful chore led to an epiphany for Fred. Previously an unbeliever, he soon discovered that carpal tunnel syndrome is not just a fad. The brave and hardy Fred fought through his injuries, and went on to become “bug boy,” the team’s bug hunter and fixer. </p>
<p>
Having survived his MSDN trial by fire, Fred is looking forward to reacquainting himself with his kids.</p>
<p><font size=4><b>Everybody Into the Pool!</b></font></p>
<p>
The other new guy, Greg Shumate, also joined the team around Thanksgiving for the final push—and had no idea what he was getting himself into. It was a sink-or-swim situation and he paddled hard. In a very short period of time, he needed to get up to speed with what the other developers were doing and then jump in with both feet to make a contribution. In this intense atmosphere, Greg helped put together the remote server.</p>
<p>
Greg, a veteran developer who has survived many such experiences, says that the best thing about working on the project was the in-depth learning and the opportunity to continually refine the code (well, maybe that wasn’t <i>always</i> such a good thing!).</p>
<p><font size=5><b>The Alpha Geek</b></font></p>
<p>
Ken Bergmann’s philosophy as team leader: “Nobody works longer hours than I do.” Anyone who knows Ken knows that it would be difficult to outwork him. The developers began to get a sense of what they were in for when he advised them to bring sleeping bags to work. Ken was not without sympathy, however. When the nights stretched into early morning, he would call his team into a conference room and pop a tape into the VCR. The bleary-eyed developers would wolf down some food and watch a taped sitcom or a movie, one half hour at a time. At some point in the night, they might bed down on their office floors or on a couch in a lounge and grab a few winks of sleep. But not for long. Ship dates wait for no man. </p>
<p>
Besides the marathon hours, Ken attributes his group’s success to the fact that each developer had a specific section of the sample to work on—a luxury many development teams don’t have. By giving each team member autonomy and responsibility for his code and for solving problems, Ken was able to keep the diverse group focused. Because the sample was intended to show the interchangeability of the technologies, creating the sample required a high degree of consistency among its components. The developers were therefore continually reviewing one another’s code and going over the various processes. By the end of the project, each team member had been involved with and understood each phase of the development—and in the process learned all the new tools. </p>
<p><font size=5><b>Mission DCOMplished</b></font></p>
<p>
As Chloe and Simon pointed out, this experiment was a step toward true distributed computing in two senses: distributing a program among various computers and a programming task among various developers. And all the developers agree that it was both frustrating and exciting to work with evolving software—when their work uncovered a need for more functionality or a bug in a program, they were able to communicate directly with the product teams and therefore play a role in improving the programs. In the end, all the hard work paid off and the sample was born. We offer this saga here so that developers everywhere can share in the knowledge that it took these guys four and a half months to acquire: overtime pay is a very good thing.</p>
</font></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introducing the AFC </title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<Font face="verdana,arial,helvetica" size="2">

<h1><a name="introducingafc"></a>Introducing the AFC</h1>
<p class=indent>
by Al Saganich</p>
<p>
In the past couple of issues of <i>Visual J++ Developer's Journal</i>, we've discussed some new features of the SDK 2.0 beta. These features were common to both Visual J++ and the version 1.1.x JDK from Sun. However, Microsoft's SDK 2.0 beta contains another interesting feature not currently provided in the JDK—the Application Foundation Classes (AFC). It wouldn't surprise us if the new AFC classes become part of the next release of Visual J++ and come standard with future releases of Windows 95 and Windows NT.</p>
<p>
The AFC contains a number of classes, which are designed to help application developers create interesting and full-featured applications, and go beyond the confines of the simple buttons and menus provided by the base Java JDK. Some of these features are
<ul type=disc>
<li>
The com.ms.ui package contains a set of classes that extend the basic Java classes by providing higher-level user interface controls, such as enhanced menus, panels, dialogs, tab dialogs, splitter windows, buttons, and check boxes.<br><br></li>
<li>
The com.ms.fx package contains a set of classes that provide basic effects (Fx!) support, such as colors, fonts, textures, and glyphs.<br><br></li>
<li>
The com.ms.ui.event package includes a set of classes for supporting the Java 1.1 event model within a new UI application and can be used instead of the JDK Event Delegation  Model.<br><br></li>
<li>
Two other packages to access Win32 resource and CAB files.</li>
</ul>
<p>
In this article, we'll introduce the new AFC, from a GUI perspective. We'll also develop robust applications using both the new UI controls and the Event Delegation Model.</p>
<h3>The UI framework</h3>
<p>
We'll begin with the basics of the AFC framework and the AFC component model. The AFC component model is similar to the standard JDK component model. It defines components, their containers, and layout managers to manage the components' positions. </p>
<p>
The differences between AFC versions of the JDK classes primarily deal with providing faster lightweight classes that are based on a peerless implementation. The components' containers and layout managers that are used to develop applications all work within the AFC framework.</p>
<p>
Please note: The AFC classes, in many instances, don't extend the AWT component class but rather provide replacements. As a result, you can't mix AWT and AFC components within a single application. However, the AFC does provide a set of compatibility classes that allows standard JDK-based applications to use some of the new AFC classes.</p>
<h3>The AFC framework</h3>
<p>
The AFC framework is based on several extensions to standard JDK classes. Applications and applets are now derived from either AwtUIFrame or AwtUIApplet. These two classes extend their JDK parents, Frame and Applet, to include functionality for supporting the UI classes provided by the com.ms.ui package. </p>
<p>
In addition to AwtUIFrame and AwtUIApplet, the AFC provides a number of other extensions to existing classes, including
<ul type=disc>
<li>
AwtUIDialog, which extends the Dialog class and provides support for a number of other classes, such as tab dialogs, message boxes, and property sheets.<br><br></li>
<li>
AwtUIWindow, which extends the AWT Window class and provides support for pop-up windows, tool tips, and the like.</li>
</ul>
<p>
Now that we've reviewed the basics, let's look at a skeleton application, which you can run as standalone or from within an HTML page.</p>
<h3><a name="askeletonapplication"></a>A skeleton application</h3>
<p>
All applications begin basically the same way—by deriving a class from AwtUIApplet, then adding functionality to that applet. Our application is no different. Listing A shows a trivial applet that does little more than define a frame and set its color to light gray, as you can see in Figure A. However, our applet does show two important aspects of AFC-based development—the use of AwtUIFrame and AwtUIApplet. (We've highlighted some of the more important features of the listing in bold.) Figure A shows the result of running AFCSkel.java using jview.exe.</p>
<p>
<b>Listing A: AFCSkel.java</b></p>
<pre><code>// AFCSkel.java
import com.ms.ui.*;
import com.ms.fx.*;
import java.awt.*;
import java.awt.event.*;

public class AFCSkel extends AwtUIApplet
{
    // Standalone main
    public static void main(String args[])
    {
        // Create a frame to contain applet
        MyFrame f = new 
MyFrame ("AFC Skeleton");
        f.show ();
        f.setSize (320, 240);

        // Create instance our applet and 
        // add to frame
        AFCSkel applet = new AFCSkel ();
        f.add (applet);
        // We must explicitly call init() 
        applet.init ();
    }

    public void init()
    {
        setBackground (FxColor.lightGray);
add (new MyUIPanel ());
        validate ();
    }
}
// An adapter to handle the user exiting
// via the exit (X) system menu item.
class ShutdownAdapter 
extends WindowAdapter
{
   public void windowClosing(WindowEvent e)
   { 
      System.exit(0); 
   }
}

// Frame extension which uses
// shutdown adapter
class MyFrame extends AwtUIFrame
{
    // Constructor
    public MyFrame(String str)
    {
        super (str);
        addWindowListener(
new ShutdownAdapter());
    }
}
class MyUIPanel extends UIPanel
{

    // Constructor
    public MyUIPanel ()
    {
        setBackground (FxColor.lightGray);
    }
}
</code></pre>
<p>
<b>Figure A</b></p>
<p>
<img src="vjp97c1a.gif" border=0></p>
<p>
<b>This simple AFC-based applet displays a frame and sets its color.</b></p>
<h3>The AwtUIApplet class</h3>
<p>
First and foremost, you'll notice two differences between our new AFC-based application and its JDK cousins. Under the JDK, we derive applets from java.awt.Applet; under the AFC, we derive our applets from com.ms.ui.AwtUIApplet. In fact, AwtUIApplet is derived from Applet! The reason for this new class is to support additional class methods that work with the new UI classes. These new methods, a couple of which are shown below, look and act like their AWT cousins: 
<ul type=disc>
<li>
setLayout (IUILayoutManager) uses the given UI layout manager to lay out components (as opposed to the AWT layout manager).<br><br></li>
<li>
add (IUIComponent) adds the UI component (as opposed to the AWT control) to the container.</li>
</ul>
<p>
These two methods work exactly like their AWT cousins. In fact, programmers familiar with the AWT model will need little coaching to jump into AFC-based programming.</p>
<p>
&nbsp;</p>
<h3>The AwtUIFrame class</h3>
<p>
As with the AwtUIApplet class, the AwtUIFrame class is the starting point for frame-derived classes. The new frame class is very much like AwtUIApplet, containing methods that support AFC UI-based development. The two methods previously mentioned exist with identical signatures in the AwtUIFrame class. When developing AFC-based applications, you always begin with either AwtUIFrame or AwtUIApplet.</p>
<h3>Other points to ponder</h3>
<p>
Our skeleton application contains several other interesting points to examine. The most important point is the use of the Event Delegation Model to handle events. Users more comfortable with the old event model will be happy to note that the AFC supports the JDK 1.02 handleEvent and action methods, as well as the new Event Delegation Model. </p>
<p>
For more information on the Event Delegation Model, refer to the articles "Using The New<i> </i>JDK 1.1 Event Delegation Model With Visual J++" (<i>Visual J++ Developer's Journal</i>, October 1997) and "Working With Inner Classes" (<i>Visual J++ Developer's Journal,</i> November 1997). Both deal with using Java language features and support classes targeted at event handling. </p>
<p>
In our AFCSkel.java example, we used only a single Event Delegation Model method, addWindowListener. This method allows the frame class to respond to window events, such as windowClosing. In "Creating an AFC Application" we examine a broader use of this functionality to handle push button, radio button, and dropdown combo box events.</p>
<p>
The final interesting feature of the skeleton application is that it contains a<code> </code>main method. I always add a main method to my applets because it simplifies testing and allows for easy unit testing. The main method must do the following things to support our applet:
<ol>
<li>
Create a frame—In this example, MyFrame uses ShutdownAdapter to handle closing the frame.<br><br></li>
<li>
Set the frame size and show it.<br><br></li>
<li>
Create an instance of the applet and add it to the frame.<br><br></li>
<li>
Call the applet's init method to start the ball rolling.</li>
</ol>
<h3><a name="movingforward"></a>Moving forward</h3>
<p>
In this article, we've covered the basics of the new AFC. We also used a very simple example to demonstrate the basic structure of an AFC application. </p>
<p>
------------------------</p>
<p>
Al Saganich is an independent software consultant, currently under contract to Digital Equipment Corp. He is co-author of the best-selling <i>Microsoft Visual J++ 1.1 Sourcebook</i> (J. Wiley and Sons, ISBN 0-471-17850-3) and is currently working on the next release of the Java 1.2 for C/C++ programmers to be published in the fall of 1997.</p>
<p>
-----------------------</p>
<p>
This article is reproduced from the December 1997 issue of <i>Visual J++ Developer's Journal</i>. <i>Visual J++ Developer's Journal</i> is an independently produced publication of The Cobb Group. No part of this article may be used or reproduced in any fashion (except in brief quotations used in critical articles and reviews) without prior consent of The Cobb Group. To contact The Cobb Group, please call (800) 223-8720 or (502) 493-3200.</p>
<p>
Copyright © 1997 The Cobb Group, a division of Ziff-Davis Inc. The Cobb Group and The Cobb Group logo are trademarks of Ziff-Davis Inc. All rights reserved. Reproduction in whole or in part in any form or medium without express written permission of Ziff-Davis is prohibited. </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dr. GUI's PDC Prescriptions</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="msdn_guipresc"></a>Dr. GUI's 1997 PDC Prescriptions</h1>
<p>
So, you went to the 1997 PDC, attended dozens of breakout sessions, and brought back a dizzying amount of ideas and information. Now what? How do you take advantage of all the upcoming technologies and features to make your programs easier to write, better functioning, and faster? What should you focus on? What information from the PDC will help? With the help of Cameron Ferroni and Chris Jones, Dr. GUI has compiled a list of the "must-read" slide shows from the PDC (see your PDC discs). See also the corresponding articles in the Archive Section of MSDN Online by the MSDN reporters who covered PDC.</p>
<p>
First, most everyone should read:
<ul>
<li>
SRV 01-03: Building Windows DNA Applications <br><br></li>
<li>
SRV 04: Internet Information Server 4.0 Overview <br><br></li>
<li>
CLT 01: Dynamic HTML <br><br></li>
<li>
CLT 10: Developing Controls for Internet Explorer 4.0 <br><br></li>
<li>
COM 01/02: Developing COM/MTS Components <br><br></li>
<li>
DATA 12/13: Universal Data Access <br><br></li>
<li>
COM 08/09: COM+ Architecture </li>
</ul>
<p>
Then, read slide shows that meet your business needs. </p>
<p>
If you develop . . .</p>
<h4>Components</h4>
<p>
You'll want to extend the browser, so you'll want to take advantage of Internet Explorer services (CLT 10). You may also want to extend the server by writing transacted server components (COM 1, 2), integrating with Internet Information Server (IIS), Active Server Pages (ASP), and ActiveX Data Objects (ADO) (SRV 6). It'll also be wise to learn more about COM (COM 8, 9).</p>
<h4>Development tools</h4>
<p>
You'll want to write tools that target Windows DNA by generating DHTML clients (CLT 1) and COM components, supporting Microsoft Transaction Server (MTS) today and COM+ tomorrow (COM 1, 8, 9).</p>
<p>
You'll also want to leverage Win32 for your authoring solution by writing your client and engine in Win32 client/engine (ZAW 1) and use the Internet for information updates.</p>
<h4>Business solutions (accounting, payroll, small business)</h4>
<p>
To be competitive, you need to do rapid client development by targeting DHTML for all platforms (CLT 1). You should also take advantage of the BackOffice family by using BackOffice applications (SRV 12). Your server applications should be managed by a Microsoft Management Console snap-in (ZAW 7, 8), which you'll write. And of course you'll need to connect to data using IIS and ASP (COM 1, SRV 6) and integrate with existing databases (DATA 12, 13).</p>
<h4>In-house corporate applications (benefits, 401K, employee handbook)</h4>
<p>
You need rapid deployment on heterogeneous machines, so write DHTML to target Windows, Apple Macintosh, and UNIX (CLT 1), then add business logic with transacted server components (COM 1, 2) and integrate the data with your DHTML pages using ADO (DATA 12).</p>
<h4>Desktop applications (word processing, personal finance)</h4>
<p>
Your programs will need universal information access, so write DHTML for clients (CLT 1) and use ADO and IIS to project data (DATA 12, 14). You'll also want a rich user experience, so you'll want to write a Win32 client and publish to Internet Explorer/IIS.</p>
<h4>Collaborative solutions (customer tracking, workflow)</h4>
<p>
You need wide availability, so use ASP to publish to DHTML (SRV 7) and access data with transacted server components and ADO (DATA 12, 14). You may also want a complementary rich client developed with Win32 services. You'll usually also want to integrate with Microsoft Exchange Server for collaboration using CDO (DATA 2).</p>
<h4>Games</h4>
<p>
The most important thing for games is to have a great high-performance UI written using the DirectX API (MM 1). Many games also benefit from a multi-user environment-so you'll want to use the Internet to find other players and store user configurations and high scores on a server. Finally, you'll want to manage updates via the new code download features. </p>
<p>
For the full text of Dr. GUI's wrap-up of what he learned at PDC, see http://www.microsoft.com/msdn/.</p>
</font></BODY>
</HTML>

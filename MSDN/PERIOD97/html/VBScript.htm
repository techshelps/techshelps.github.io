<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Energize Your Active Server Pages with VBScript 2.0</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1>Energize Your Active Server Pages with VBScript 2.0</h1>
<p>
With the release of the Internet Information Server (IIS) and Active Server Pages (ASP), there has been an explosive growth in the use of ASP to create Web-enabled client-server applications on the Internet and corporate intranets. ASP dynamically creates HTML based on server-side scripting to connect to databases, track user state and session information, and connect to various COM-based objects. However, the server-side functionality is directly proportional to the power of the scripting language executing on the Web server. With this in mind, I'll show you some of the new features of VBScript 2.0 and demonstrate how these features can increase the functionality of ASP.</p>
<p>
IIS 3.0, formally known as the Active Server, processes server-side scripts to dynamically generate HTML from a variety of information sources. IIS scripts can be written using VBScript, JScript, or any other scripting language (VBScript is the default). The VBScript language is a subset of Visual Basic® for Applications, which was designed as a macro-like language to provide programming functionality without requiring extensive programming expertise. VBScript 1.0 was released to provide a browser-based, event-driven programming model that resided within the Microsoft® Internet Explorer browser. With the release of ASP and IIS 3.0, VBScript became available as a server-side processing tool. However, even though VBScript 1.0 provided excellent portability into browsers and servers, it lacked some of the basic functionality traditional application developers were accustomed to finding in development environments such as Visual Basic and Visual C++®. To overcome these limitations, VBScript 2.0 has implemented advanced server-side functionality. </p>
<p>
VBScript was initially designed as a safe, interpreted language executed from within the Internet Explorer browser. However, its reach and abilities were limited. For example, to minimize possible client-side security violations, VBScript prevents file input/output and access to the client's operating system. To further prevent intended or accidental destruction, VBScript uses only one datatype, a variant. In Visual Basic, the parent model of Visual Basic for Applications and VBScript, the variant datatype provides the most flexibility because it encompasses all intrinsic datatypes. In the scripting world, however, its use precludes many of the rich type-specific functions needed to create and administrate applications. With the release of VBScript 2.0, the variant datatype now contains subsets called subtypes. These subtypes are similar to normal datatypes like bytes, integers, longs, strings, and so on.</p>
<p>
The identification of subtypes in VBScript 2.0 helps identify the family of functions needed to manipulate the string characteristics of a specific datatype. This subtype classification exposes a set of programming features for manipulating character-based datatypes such as date/time ranges, string expressions, and currency values. </p>
<p>
VBScript 1.0 provided basic functionality in terms of laying a foundation for a scripting language. As you can see from Figure 1, VBScript 1.0 allowed manipulation of variables and array processing through various conversion, operator, and string processing functions. VBScript 2.0 now extends the existing scripting functionality that was limited to the browser onto the server itself via ASP.</p>
<p><img src="vbscriptfig01.gif"></P>
<P><B>Figure 1: Features Added in VBSCript 2.0</b></p>
<p>
In most real-world applications, this ability to manipulate strings, dates, and currency values is essential to the application. To implement these real-world systems, you must understand how to use variables. Variables are used to allocate memory space that can be manipulated, processed, or referred to by the executing code. One of the most common errors in developing applications is improperly tracking the lifetime of a variable. In VBScript, variables can exist at two levels or scopes: at the script level or the procedure level. Scope refers to the lifetime of the variable reference in memory. The scope depends on where the variables are declared or initialized. Script-level code is contained outside of any specific procedure. Procedure-level code is contained within the Function and Sub keywords. Procedure-level code is a subset of script-level code; variables declared within procedure-<br>
level code exist only while the procedure is executing. </p>
<p>
For example, the code shown in Figure 2 demonstrates scoping issues with both script and procedure-level variables. The variable vTotalDays is a script-level variable and can be referred to within any subroutine. However, the variable vSubTotal has a scope or lifetime limited to the subroutine it is declared in.</p>
<p><img src="vbscriptfig02.gif"></P>
<P><B>Figure 2: Scoping</b></p>
<p>
With the basics of variable declaration and scoping covered, I can now focus on several of the new features found in VBScript 2.0, particularly the new string, data, and currency functions. Most of these new features will be illustrated in an online reservation system powered by ASP. In this online reservation system, users can select a vehicle, choose the time frame needed for the rental, calculate the estimated costs, and reserve the vehicle. To highlight the new features in VBScript 2.0, I will focus on the section of the application used to estimate the vehicle cost and create a virtual receipt for the rental vehicle. For simplicity and demonstration purposes, I've also eliminated a key stage-collecting data from in-house COM systems.</p>
<p>
This particular section of the application consists of four pages. The first page is the standard login page, used to identify the person making the transaction (see Figure 3). The second page acts as a consolidation point to house and display the data selected by the user. In this situation, the user selects information from a defined workflow process to supply information needed by the application instead of entering information into a form and submitting it. The selection process allows the user to have straightforward, almost seamless interaction with the application. The elimination of time-consuming form-based data entry also eliminates the need for a validation process. The data collection page is unique because it dynamically changes as the user progresses through the reservation request system. The Web page itself does not actually store the data, but represents a physical display of the server-side variable selected by the user, as seen in Figure 4. This page actually represents the physical display of the server-side variables needed for the ASP application while tightly integrating it with user and application workflow.</p>
<p><img src="vbscriptfig03.gif"></P>
<P><B>Figure 3: Login Page</b></p>
<p>
The third page allows the user to select a date from a dynamically generated HTML calendar based on elements from my article, "Designing Real-World Applications with Active Server Pages," in the March 1997 issue of <i>MIND</i>. However, I extended the functionality shown in my earlier article by integrating the calendar approach with a modal window and writing the selected data back to the calling ASP. The calendar acts like a popup form or window commonly found in traditional desktop applications. The simulated modal form is actually another instance of the browser with many of the display features-such as the status bar and button bar-turned off (see Figure 4).</p>
<p><img src="vbscriptfig04a.gif"></P>
<P><B>Figure 4: Simulate a modal form and write results directly</b></p>
<p>
As the user has selected the desired rental dates and travel destinations, and has completed the necessary electronic paperwork, the user's information is tracked from page to page using new array functionality(see Figure 5). This functionality combines ASP Session Objects and VBScript 2.0 date, time, and currency features to create a virtual rental receipt (see Figure 6).</p>
<p><img src="vbscriptfig05.gif"></P>
<p><img src="vbscriptfig05b.gif"></P>
<P><B>Figure 5: Transferring data between pages with arrays</b></p>
<p><img src="vbscriptfig06.gif"></P>
<P><B>Figure 6: Virtual Rental Receipt</b></p>
<p>
This application also demonstrates the ability to use client-side JavaScript with server-side VBScript 2.0. JavaScript is used to validate the user-entered login name and password on the login page. The preprocessing on the client side saves bandwidth and lets the client send a request for login only if data is entered into the name and password fields. JavaScript is used to ensure the largest client user base because it is the default scripting language for both Microsoft Internet Explorer and Netscape Navigator. JavaScript also opens the popup calendar window (see Figure 7). </p>
<p><img src="vbscriptfig07.gif"></P>
<P><B>Figure 7: Client-side JavaScript</b></p>
<p>
ASP uses VBScript for control logic and string formatting to generate the HTML. VBScript 2.0 contains most of the control logic found in Visual Basic for Applications such as Do...Loop and Select Case statements. However, some Visual Basic for Applications functions-such as GoTo, collection functions, object declarations, and file I/O-are missing from VBScript. VBScript 1.0 contained most of the control logic needed to create an application, including common flow-control operators like IfThenElse. This logic allows workflow processing based on whether a criterion is valid. For example, on the second page of the application, the user can't proceed to the next page until certain criteria are met. In Figure 4, the button on the bottom of the form changes functionality depending on where the user is in the application workflow. String formatting, accomplished with the Trim function, eliminates any leading or trailing spaces from the Session object. The Session object is a server-side object used to track variables for individual users in the ASP application. The following code is the result of combining different VBScript components:</p>
<pre><code>&lt;% If Trim(Session("StartDateMonth"))="" then %&gt;
    &lt;input type="button" name="btnNext" value="Enter a Start Date!"   
     onclick="chkdate(this.form)" ;&gt;
&lt;% Elseif Trim(Session("EndDateMonth"))="" then %&gt;
    &lt;input type="button" name="btnNext" value="Enter an End Date!" 
     onclick="chkdate(this.form)" ;&gt;
&lt;% Else %&gt;
    &lt;input type="button" name="btnNext" value="Next &amp;gt;&amp;gt;" 
     onclick="chkdate(this.form)" ;&gt;
&lt;% End if %&gt;</code></pre>
<p>
The calendar page is activated solely through VBScript server-side processing. Most of this functionality was briefly discussed in my previous article but bears repeating. VBScript offers the ability to group a collection of variables together to form an array. Arrays can also be manipulated by the combination of control logic and string functions. An array is first created and then loaded with data. The array can then be processed by control logic to select, edit, add, or remove information. For example, in Figure 8, an array representing the 12 months is created and then manipulated to display the current month in a dropdown box on the Web page. This example is also interesting because it demonstrates the date and time functionality integrated within a For...Next loop, as shown in Figure 8. In this example, the For...Next loop iterates from 1 to 12, representing the months, and compares it to the result returned from a month(now) statement. Once a match is found, the current month is displayed in the HTML dropdown.</p>
<p><img src="vbscriptfig08.gif"></P>
<P><B>Figure 8: Array Processing and Date Functions</b></p>
<p>
The VBScript date and time functions are used in both the user selection page and the receipt page. The VBScript 2.0 DateDiff function is used to determine the relationship between two dates. It returns the amount of time between two dates based on a specific time interval, which can range from seconds to minutes to years. This comparison is needed to make sure the selected return date occurs after the selected start date. The DateDiff function is also used to calculate the total amount of days requested for the rental. This information is then used to calculate the estimated cost of the rental. </p>
<p>
The syntax of the DateDiff function is</p>
<pre><code>DateDiff(interval, date1, date2)</code></pre>
<p>
Interval is the time needed for the calculation, and date1 and date2 are the date expressions to be evaluated. If the result of the DateDiff function is negative, then date1 occurs after date2; if the result of the DateDiff function is positive, then date1 falls before date2. Also note that date1 and date2 must be date expressions-any combination of expressions or symbols that can be interpreted to represent a date. </p>
<p>
To ensure this proper conversion to the date subtype, use the DateValue function, which translates the string expressions into the date subtype. DateValue is versatile because it can translate various date formats, such as 4/30/98, 4/30/1998, April 30, 1998, and Apr 30, 1998. However, the DateValue function removes the time component from the date subtype and returns only the month, day, and year components. If you try to use a time interval such as hours, minutes, or seconds with the DateDiff function, you will generate a VBScript runtime error. The following code demonstrates the use of the DateDiff and DateValue functions to verify the proper date selection and change the HTML forms to help guide the user through the application:</p>
<pre><code>&lt;% If DateDiff("d", DateValue(vBeginDateStr), 
               DateValue(vEndDateStr)) &gt; 0 then %&gt;
    &lt;input type="button" name="btnNext" value="Next &amp;gt;&amp;gt;" 
     onclick="chkdate(this.form)" ;&gt;
&lt;% Else %&gt;
    &lt;input type="button" name="btnNext" 
     value="The Start Date Selected is AFTER the Return Date!"  
     onclick="alertmsg()" ;&gt;
&lt;% End If %&gt;</code></pre>
<p>
The receipt page combines date/time functions with new formatting functionality from VBScript 2.0, which introduces four new types of formatting functions (see Figure 9). The new formatting features enhance your ability to display currency, date or time values, numbers, and percent values. The receipt page uses the FormatCurrency and FormatDateTime functions to display various data to the user. The FormatCurrency and FormatPercent functions are useful not only to keep a digit place holder, but also to display the system currency symbol and percent sign. The FormatNumber function can be used with numeric expressions to prevent the trailing zeros from being cut off or to include leading zeros. The FormatDateTime function automatically converts a date/time expression into one of five time formats commonly found in Visual Basic (see Figure 10). The available formats include vbGeneralDate, vbLongDate, vbShortDate, vbLongTime, and vbShortTime.</p>
<p><img src="vbscriptfig09.gif"></P>
<P><B>Figure 9: VBScript Formatting Features</b></p>
<p><img src="vbscriptfig10.gif"></P>
<P><B>Figure 10: FormatDateTime Function/b></p>
<h2>More New Features</h2>
<p>
One of the new changes incorporated into VBScript 2.0 is the use of Private and Public variable declarations. Private and Public declarations help maintain the scope of a variable. The Private statement is declared at the script level to allocate memory storage accessible only to calling objects within the script where the variable is declared. The Public statement is used to instantiate variables that can be accessed from all objects in the script page. The Public and Private declarations also apply to the creation of static and dynamic arrays. These zero-based arrays, the only type available in VBScript, can contain up to 60 dimensions. Furthermore, VBScript has introduced the ability to declare constants using the Const statement. A constant is used to replace literal values and can also have public or private scoping. By default, constants declared at the script level are public and can be explicitly declared private with the Private keyword, while those declared at the procedure level are always private and can not be made public. </p>
<p>
In addition to the new formatting functions used to manipulate currency, number, data, time, and percentages, the combination of array handling and string formatting functions play an important part in VBScript 2.0 (see Figure 11).</p>
<p><img src="vbscriptfig11.gif"></P>
<P><B>Figure 11: New Array and String Functions</b></p>
<p>
The Array function is also a new feature of VBScript 2.0 and provides the foundation for most of the new string manipulation features. An exciting feature of the Array function is the ability to store an entire array encapsulated in a single variable of Variant datatype. This helps manage dynamic user content and information, application and session variables, and database collections. This grouping of variables is often implemented when large numbers of variables must be passed from page to page. </p>
<p>
A simplified example illustrating the Array function is seen in the listing below. In this code, the Array function is used to create an array called MyWeek that contains the days of the week. Then that single variable is stored in a session variable to be accessed later.</p>
<pre><code>&lt;%
Private MyWeek
MyWeek = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
Session("MyArray")=MyWeek
%&gt;</code></pre>
<p>
Now that the single variable is stored in a session variable, I can access that variable and its elements by iterating through the array. The iteration process is initiated with a For...Next loop and using the UBound function to determine how many elements exist in the array. Figure 12 shows an example of passing the array into a variable and accessing the array elements.</p>
<p><img src="vbscriptfig12.gif"></P>
<P><B>Figure 12: Passing Array into a Variable</b></p>
<p>
The new Split and Join functions complement each other and provide a transition between strings and array processing. The Split function converts a delimited string into a one-dimensional array, and the Join function converts an array into a string variable. The Split function works by scanning the data string for a delimiter and inserting the processed substring into a new element in the array. This function is particularly useful for separating traditional delimited data feeds, parsing information from a calling URL, or separating data to provide information in a more manageable format. The Split function also provides the option to limit the number of elements returned into the array. If the resulting array is empty, no substrings were found. The following example illustrates the conversion of a string containing user information into an array. </p>
<pre><code>&lt;% 
Public strDataFeed
strDataFeed = "Dave,Wilson,Consultant,(703) 610-6599, 304 Roder Road, 
Suite 1000, Reston, VA, 23043-4563"
%&gt;
&lt;% 
Public strArray 
strArray = Split(strDataFeed,",")
%&gt;
&lt;table cellpadding="2" border="1"&gt;
&lt;% For i = 0 to UBound(strArray) %&gt;
&lt;tr&gt;&lt;td&gt;
&lt;% =strArray(i) %&gt;
&lt;/tr&gt;
&lt;% next %&gt;</code></pre>
<p>
The Join function is the inverse of the Split function; it returns a single variable formed by concatenating elements in a one-dimensional array. The resulting string will consist of substrings separated by delimiters. If no delimiters are specified, the default delimiter for both the Split and Join functions is the space character.</p>
<p>
In addition, the new Filter and Replace functions extend the parsing and processing capabilities in the Join and Split functions by allowing arrays and strings to be searched and manipulated. The Filter function allows you to search a string for a particular pattern and create a new one-dimensional array based on your search criteria. This is different from the Split function because Filter provides the ability to search the data string and form an array, whereas Split only creates an array based on a defined delimiter. The Replace function allows the search and replace functionality within a delimited string. </p>
<p>
The following code finds the total amount of losses for the year by using the Split and Filter functions. Split loads the string data into an array where it can be manipulated. Filter finds all negative values. This array of losses is then summed up to give the total losses during the year.</p>
<pre><code>&lt;body bgcolor="#FFFFFF"&gt;
&lt;% Public strDataFeed, strSingleArray, strOweMoney, iTotal %&gt; 
&lt;% strDataFeed = "Jan,400,Feb,-300,Mar,-100,Apr,500,May,300,Jun,250,Jul,200,
Aug,-650,Sep,100,Oct,230,Nov,50,Dec,-350" %&gt;
&lt;% strSingleArray = Split(strDataFeed,",") %&gt;
&lt;% strOweMoney = Filter(strSingleArray,"-") %&gt;
&lt;center&gt;
Total Losses for September:  
&lt;% Private iArrayCount
iArrayCount =UBound(strOweMoney)%&gt;
&lt;% For i = 0 to iArrayCount %&gt;
    &lt;% iTotal=iTotal + Clng(strOweMoney(i)) %&gt;
&lt;% next %&gt;
&lt;% =FormatCurrency(iTotal, -1,-1,0) %&gt;
&lt;/body&gt;</code></pre>
<p>
One exciting feature in VBScript 2.0 is the ability to create and reference instances of any Automation server using the CreateObject function. CreateObject exposes the properties, methods, and events of any Automation server registered on your Web server to any browser. This function not only allows Web browsers to access existing Automation servers such as Exchange, Index Server, or Lotus Notes, but also gives you the ability to tap into the functionality of your own custom Automation server. Instead of IIS acting as the highest level of authority controlling distribution of Web pages, database access, and application control logic, IIS acts as a translator to remote Automation servers. IIS initiates and makes a request for information from the Automation server, which processes the request and returns the results back to IIS. In turn, IIS converts the returned information into standard HTML format and delivers the results to the client. The translation role is important to ensure that only pure HTML is delivered to the client, reducing or eliminating the possibility of limiting your user group.</p>
<p>
The syntax for the CreateObject is Server.CreateObject<br>
(progID), where progID is the combination of the server and type name in the form servername.typename. This familiar syntax returns a pointer to the instantiated server-side components. IIS 3.0 ships with several components that allow ODBC database connection, browser examination, ad rotation, content-linking, and text-streaming. The following example demonstrates the use of the browser component to determine what browser is requesting the Web page.</p>
<pre><code>&lt;%  Set bc = Server.CreateObject("MSWC.BrowserType") %&gt;
Hello &lt;%= bc.browser  %&gt; &lt;%= " " &amp;bc.version  %&gt; user!</code></pre>
<p>
The text-streaming component introduces another new object to VBScript 2.0, FileSystemObject, which lets you create and open a text file on the file system. FileSystemObject provides uuencode, reading, appending, and overwriting functionality. TextStream then works in conjunction with FileSystemObject to provide read/write capability for sequential file access. Sequential files are typically text files that are not organized into records. The following sample code demonstrates the ability to create a text file and write a line of text to it.</p>
<pre><code>Set fs = CreateObject("Scripting.FileSystemObject")
Set aFile = fs.CreateTextFile("c:\SiteAccessFile.txt", True)
aFile.WriteLine("You just wrote to a text file!")
aFile.Close</code></pre>
<h1>Conclusion</h1>
<p>
VBScript 2.0 provides greater programming flexibility for both client and server-side Web applications than its predecessor. Although it's not as powerful as its parent, Visual Basic, VBScript provides a similar user interface that minimizes the learning curve for Web and application scripting. IIS 3.0, Active Server Pages, VBScript 2.0, and Visual InterDev form a tightly integrated suite that offers the first true application development environment for the Web. </p>
<p>
VBScript 2.0 is available for download on the Microsoft Web site at http://www.microsoft.com/vbscript. The VBScript site is an excellent resource for gathering additional information on release 2.0, providing online reference material, upgrade suggestions, and plenty of client-side examples. You can also learn more about implementing VBScript and Active Server Pages from visiting the Visual InterDev site at http://www.microsoft.com/VinterDev.                                              </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Applet Security: Obtaining a Digital Signature</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">

<h1>Applet Security: Obtaining a Digital Signature</h1>
<p>
<i>by David H. Boydston</i></p>
<p>
In the article "Local File Access from Applets?"in the October 1997 issue of <i>Visual J++ Developer's Journal</i>, we showed you that one can indeed create applets that access the browser's local file system. Now, let's examine the steps involved in creating a digitally signed applet for distribution on the Web. We'll again use our SimpleEdit applet as the example for this explanation. Also, we'll assume you have a copy of Microsoft Internet Explorer 3.0 or later and that your browser does <i>not</i> have the Authenticode 2.0 upgrade installed.</p>
<p>
You'll also need a couple of SDKs from the Microsoft Web site. At the time of this writing, the Microsoft Java developer's kit is available free at http://www.microsoft.com/java. The ActiveX developer's kit is available free from http://www.microsoft.com/msdownload/sbndownload/sbnaxsdk/sbnaxsdk.htm. If you haven't already done so, you may be required to register online before you can download the ActiveX SDK.</p>
<h2>Create the applet/cation</h2>
<p>
To begin, we'll use Visual J++ to create the SimpleEdit applet and the host HTML page. First, launch Developer Studio and choose New… from the File menu. Then, in the New dialog box, select Java Applet Wizard and type <i>SimpleEdit</i> in the Project Name text box. Click OK to launch the wizard.</p>
<p>
Because we won't use any of the Java source code that the wizard generates, simply click Finish at the first wizard screen and click OK to dismiss the resulting New Project Information dialog box. Now, open SimpleEdit.java and delete all the source code. Listing A shows the new code for SimpleEdit.java. You can also obtain this code at http://www.sc-systems.com/public/SimpleEdit. When you've finished SimpleEdit.java, you can compile and run the project as an application, and it will work as expected on your system. However, SimpleEdit won't be able to function as an applet until you obtain a digital signature for it.</p>
<p>
<b>Listing A: SimpleEdit.java</b></p>
<pre>/*---------------------------------------------------------------------------------------------------
<code> * File: SimpleEdit.java</code>
<code> * Function: Demonstration applet for file access on browser's machine</code>
<code> * Author: David H. Boydston</code>
<code> * Company: Solutions Consulting</code>
<code> * URL: http://www.sc-systems.com</code>
<code> *-------------------------------------------------------------------------------------------------*/</code>
<code>/*---------------------------------------------------------------------------------------------------</code>
<code> * Solutions Consulting makes no representations or warranties about the</code>
<code> * suitability of the software, either express or implied, including but</code>
<code> * not limited to the implied warranties of merchantability, fitness for</code>
<code> * a particular purpose, or non-infringement. Solutions Consulting shall</code>
<code> * not be liable for any damages suffered by licensee as a result of</code>
<code> * using, modifying or distributing this software or its derivatives.</code>
<code> *-------------------------------------------------------------------------------------------------*/</code>

<code>import java.awt.*;</code>
<code>import java.applet.*;</code>
<code>import java.io.*;</code>

<code>/**</code>
<code> * This applet demonstrates reading and writing files on the browser's file system.</code>
<code> *</code>
<code> * Note: This applet will fail unless it's downloaded via a mechanism that</code>
<code> * supports digital signatures, the digital signature is valid, and the</code>
<code> * browser accepts the digital signature.</code>
<code> *</code>
<code> * @author David H. Boydston - Solutions Consulting http://www.sc-systems.com</code>
<code> */</code>
<code>public class SimpleEdit extends Applet {</code>

<code>/**</code>
<code> * This method is called when the 'Save' button is clicked</code>
<code> * If there is no text, only a status message is displayed.</code>
<code> * If no file name has been entered, only a status message is displayed.</code>
<code> * If the file exists and there is text to write, the method will save only</code>
<code> * if the 'clobber' option has been set. If all checks pass, the data is</code>
<code> * written to the file.</code>
<code> */</code>
<code>void butSave_Clicked(Event event) {</code>
<code>String saveText = editArea.getText();</code>
<code>int saveLen = saveText.length();</code>
<code>if (saveLen == 0) {</code>
<code>           statusLabel.setText("Nothing to save");</code>
<code>    return;</code>
<code>}</code>
<code>    String localFileName = fileName.getText();</code>
<code>if (localFileName.length() == 0) {</code>
<code>           statusLabel.setText("Enter a file name for the save");</code>
<code>return;</code>
<code>}</code>
<code>        RandomAccessFile raFile = null;</code>
<code>boolean created = false;</code>
<code>try {</code>
<code>File localFile = new File(localFileName);</code>
<code>if (localFile.exists() == true) {</code>
<code>            if (clobber.getState() == false) {</code>
<code>                statusLabel.setText("File exists: Check the box to overwrite");</code>
<code>                return;</code>
<code>            }</code>
<code>            }</code>
<code>            else</code>
<code>                created = true;</code>

<code>        raFile = new RandomAccessFile(localFile, "rw");</code>
<code>        raFile.writeBytes(saveText);</code>
<code>        raFile.close();</code>
<code>        String statusMsg = "Saved "+saveLen+"bytes";</code>
<code>        if (created) statusMsg += " (New file)";</code>
<code>        statusLabel.setText(statusMsg);</code>
<code>    }</code>
<code>    catch (Exception e) {</code>
<code>        statusLabel.setText("File save failed:"+e);</code>
<code>    }</code>
<code>}</code>

<code>/**</code>
<code> * This method is called when the 'Open' button is clicked.</code>
<code> * If no file name has been entered, only a status message is displayed.</code>
<code> * If the file name is a valid file then the contents of the file are</code>
<code> * read into the TextArea, and the length of the file is displayed in</code>
<code> * the status message label.</code>
<code> *</code>
<code> * Note: Apparently there's a bug in MSIE 3.02 JVM. This bug prevents</code>
<code> * the String(byte[], int) constructor from functioning properly, which is why </code>
<code> * the code below builds the String using a StringBuffer.</code>
<code> */</code>
<code>void butOpen_Clicked(Event event) {</code>
<code>    String localFileName = fileName.getText();</code>
<code>    if (localFileName.length() == 0) {</code>
<code>           statusLabel.setText("Enter a file name to open");</code>
<code>           return;</code>
<code>    }</code>
<code>    File localFile = new File(localFileName);</code>
<code>        RandomAccessFile raFile = null;</code>
<code>    try {</code>
<code>        if (localFile.exists() == false) {</code>
<code>            statusLabel.setText("File does not exist");</code>
<code>            return;</code>
<code>        }</code>
<code>        int fileLen = (int)localFile.length();</code>
<code>        byte[] rdBuf = new byte[fileLen];</code>
<code>        raFile = new RandomAccessFile(localFile, "rw");</code>
<code>        raFile.read(rdBuf);</code>
<code>        statusLabel.setText(fileLen+"bytes read");</code>
<code>//        String fileContents = new String(rdBuf, rdBuf.length);</code>
<code>        StringBuffer sBuf = new StringBuffer(fileLen);</code>
<code>    for (int i = 0; i &lt; fileLen; i++)</code>
<code>            sBuf.append((char)rdBuf[i]);</code>
<code>        String fileContents = new String(sBuf);</code>
<code>     editArea.setText(fileContents);</code>
<code>        raFile.close();</code>
<code>    }</code>
<code>    catch (Exception e) {</code>
<code>        statusLabel.setText("File open failed:"+e);</code>
<code>    }</code>
<code>}</code>


<code>public void init() {</code>
<code>super.init();</code>

<code>setLayout(null);</code>
<code>addNotify();</code>
<code>resize(521,377);</code>
<code>editArea = new java.awt.TextArea();</code>
<code>editArea.reshape(12,120,492,240);</code>
<code>add(editArea);</code>
<code>butOpen = new java.awt.Button("Open");</code>
<code>butOpen.reshape(24,48,60,24);</code>
<code>add(butOpen);</code>
<code>butSave = new java.awt.Button("Save");</code>
<code>butSave.reshape(120,48,60,24);</code>
<code>add(butSave);</code>
<code>clobber = new java.awt.Checkbox("Overwrite");</code>
<code>clobber.reshape(204,48,108,24);</code>
<code>add(clobber);</code>
<code>statusLabel = new java.awt.Label("Status: Ready");</code>
<code>statusLabel.reshape(12,84,480,24);</code>
<code>add(statusLabel);</code>
<code>fileName = new java.awt.TextField();</code>
<code>fileName.reshape(120,12,384,24);</code>
<code>add(fileName);</code>
<code>nameLabel = new java.awt.Label("File Name");</code>
<code>nameLabel.reshape(12,12,96,24);</code>
<code>add(nameLabel);</code>
<code>}</code>
<code>/**</code>
<code> * Event handler code</code>
<code> */</code>
<code>public boolean handleEvent(Event event) {</code>
<code>if (event.target == butOpen &amp;&amp; event.id == Event.ACTION_EVENT) {</code>
<code>    butOpen_Clicked(event);</code>
<code>    return true;</code>
<code>}</code>
<code>if (event.target == butSave &amp;&amp; event.id == Event.ACTION_EVENT) {</code>
<code>    butSave_Clicked(event);</code>
<code>    return true;</code>
<code>}</code>
<code>return super.handleEvent(event);</code>
<code>}</code>

<code>/**</code>
<code> * Controls</code>
<code> */</code>
<code>java.awt.TextArea editArea;</code>
<code>java.awt.Button butOpen;</code>
<code>java.awt.Button butSave;</code>
<code>java.awt.Checkbox clobber;</code>
<code>java.awt.Label statusLabel;</code>
<code>java.awt.TextField fileName;</code>
<code>java.awt.Label nameLabel;</code>

<code>}</code></pre>
<h1>Got your keys?</h1>
<p>
Next, you'll use Internet Explorer to purchase a Software Publishers Certificate from VeriSign, Inc. You can contact VeriSign on the Web at http://digitalid.verisign.com.</p>
<p>
Currently, VeriSign offers two types of Software Publisher Certificates--Individual and Organization. An Individual Certificate costs $20 per year; an Organization Certificate costs $400 per year. (If you don't plan to distribute your applet, you can use the makecert utility provided in the ActiveX SDK to create a dummy certificate.)</p>
<p>
Although VeriSign's site is as subject to change as the rest of the Web, the steps we're discussing here should apply generally, even if the specific locations change a bit. On the VeriSign Web site, choose Software Publisher from the dropdown list at the top of the page, as shown in Figure A, and click the Go! button. Now, choose the Microsoft Authenticode link. The rest of the process can take from 15 minutes to 15 hours, depending on how much time you're willing to spend reading. </p>
<p><img src="vjp97a3a.gif">
</p>
<p>
<b>Choose Software Publisher from the Get Your Digital ID Now! dropdown list.</b></p>
<p>
As Figure B shows, VeriSign will prompt you to provide information that can uniquely identify you and also, should the need arise, be used to track you down should your trusted applet prove harmful. After you provide this data--and a billable credit card number--VeriSign will issue your digital certificate.</p>
<p><img src="vjp97a3b.gif">
</p>
<p>
<b>VeriSign requires you to provide a lot of personal information.</b></p>
<p>
The Individual Certificate will be available immediately after VeriSign successfully processes your credit card. The verification process for a Company Certificate takes about a week. </p>
<p>
Note that the certification process installs information in the browser, so you must use Microsoft Internet Explorer for the entire certification process. After you complete the main payment and registration steps, you will receive an E-mail from VeriSign; you must respond to this E-mail in order to finalize the certificate process. </p>
<p>
When certification is complete, you should have a private key, a public key, and a Software Publishers Certificate. For this discussion, we'll assume the private key is in a file named myPvKey.pvk and the Software Publishers Certificate is stored in a file named myCred.spc. (The public key gets installed in both the browser and the certificate).</p>
<h2>Package in the CAB</h2>
<p>
Next, you'll use the cabarc utility provided in the ActiveX SDK to create a CAB file that contains your applet class file(s). If you've built CAB files before, you need to be familiar with only one other switch when you're creating a CAB file that will be signed. Using cabarc with the -s 6144 switch indicates to cabarc that you wish to allocate 6144 bytes in the file for a digital signature. Use the following command to create SimpleEdit.cab:</p>
<pre>cabarc -s 6144 N SimpleEdit.cab SimpleEdit.class</pre>
<h1>Digital ink</h1>
<p>
Finally, you'll use the signcode utility from the ActiveX SDK to digitally sign the CAB file. We used the following command to sign SimpleEdit.cab:</p>
<pre>signcode -prog SimpleEdit.cab -name SimpleEdit 
-info http://www.sc-systems.com/compinfo.html 
-spc myCred.spc -pvk myPvKey.pvk</pre>
<p>
Of course, your signature will vary based on the key and URL you need to provide. The -prog parameter is obvious--it's the name of the file to sign. The -name parameter is the name that will be displayed when the user is prompted with the Software Publishers Certificate. In this case, the name will be SimpleEdit. The<code> -</code>info parameter specifies the URL link for the -name parameter. Publishers typically use this link to provide more information about themselves or about the applet that's requesting trusted access to the browser's machine. The -pvk and -spc parameters are for the private key and certificate respectively. </p>
<h2>Build the HTML host </h2>
<p>
At this stage, you need to wire the CAB file into your HTML page. To do so, return to Developer Studio and open SimpleEdit.html. Again, delete the existing code and insert the HTML shown in Listing B. </p>
<p>
As you can see, using a digitally-signed CAB file is no different from using any other CAB file. You simply add the PARAM tag inside the APPLET tag, as SimpleEditSigned.html demonstrates. You've now built a digitally signed applet that can access files on the browser's file system.  </p>
<h2>A note about Authenticode 2.0</h2>
<p>
Microsoft recently upgraded Authenticode to version 2.0. A major change with this new version is in the behavior of the browser when it encounters a CAB file after the certificate used to sign the file has expired. </p>
<p>
As of June 30, 1997, users see warning messages if they download a CAB file that is signed with Authenticode 1.0 or signed with Authenticode 2.0 without a time stamp. If the browser security is set to high, the warning will indicate that the code is unsafe to download. If security is set to medium, the warning will indicate that the file is out of date. Either message could be misleading.</p>
<p>
Authenticode 2.0 addresses this issue. When you use the signcode utility's timestamper option to sign your code, the signature will indicate that the certificate associated with the applet was valid at the time you signed the applet. Consequently, users should always see that the signature is valid, even after the certificate expires.</p>
<p>
We signed SimpleEdit without the timestamper option for two reasons: First, timestamper wasn't working at the time of this writing. Second, the certificate used to sign SimpleEdit is valid until 2/20/98, which should give you sufficient time to examine the applet.</p>
<h2>Conclusion</h2>
<p>
If you have $20, your applets can be trusted--even if <i>you</i> can't. In this article, we walked you through the process of building an applet that interfaces with the browser machine's file system. Then, we showed you how to obtain a digital certificate to create a trusted applet.  </p>
<p>
<b>Listing B: SimpleEdit.html</b></p>
<pre>&lt;HTML&gt;
<code>&lt;HEAD&gt;</code>
<code>   &lt;TITLE&gt;SimpleEdit&lt;/TITLE&gt;</code>
<code>&lt;/HEAD&gt;</code>
<code>&lt;BODY&gt;</code>
<code>Demonstrate file access on the browser's file system.</code>
<code>&lt;BR&gt;&lt;FONT SIZE=-1&gt;The applet should function only when digitally signed.&lt;/FONT&gt;</code>
<code>&lt;BR&gt;&lt;FONT SIZE=-1&gt;This HTML file loads the class with a digital signature; therefore it</code>
<code>&lt;B&gt;should &lt;/B&gt;work.&lt;/FONT&gt;</code>
<code>&lt;BR&gt;&lt;FONT SIZE=-1&gt;You need to use Internet Explorer 3.0 or later without Authenticode 2.0&lt;/FONT&gt;</code>
<code>&lt;BR&gt;</code>
<code>&lt;HR&gt;&lt;APPLET</code>
<code>    code=SimpleEdit.class</code>
<code>    name=SimpleEdit</code>
<code>    width=520</code>
<code>    height=380 &gt;</code>
<code>    &lt;PARAM name="cabbase"value="SimpleEdit.cab"&gt;</code>
<code>    &lt;/APPLET&gt;</code>
<code>&lt;HR&gt;&lt;A HREF="SimpleEdit.java"&gt;The source.&lt;/A&gt;</code>
<code>&lt;/BODY&gt;</code>
<code>&lt;/HTML&gt;</code>
</pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Can You Use a Second Thread for Sutures?</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="msdn_gui37c"></a>Can You Use a Second Thread for Sutures?</h1>
<p>
<b>Dear Sir,</b></p>
<p>
I am a software engineer with Yokogawa Electric Corporation in Japan.</p>
<p>
I have a question about firing events from a second thread.</p>
<p>
I am going to try to make an ActiveX in-proc server that uses the apartment-threading model, creates a thread, and fires events.</p>
<p>
I read the following article from the Knowledge Base: "FIREEV.EXE Fires Events from a Second Thread" (Article ID: Q157437). </p>
<p>
This article said, "Because MFC ActiveX controls use the apartment-threading model, special consideration must be taken when firing events from a secondary thread. We should not fire events from a second thread. Events must be fired from a main thread."</p>
<p>
Also, I read the following article: "Events: From an ATL Server to a Visual Basic Sink" (Microsoft <i>Developer Network News Online,</i> May 15, 1997).</p>
<p>
A sample program provided in this article fires events from a second thread.</p>
<p>
Is it possible to fire events from a second thread?</p>
<p>
I'm looking forward to the answer from you.</p>
<p>
Thanks in advance.</p>
<p>
Sincerely,<br>
<i>Shinichi Shimizu</i></p>
<p>
<b>Dr. GUI replies:</b></p>
<p>
When sewing a program together, it's important to use the right sutures, or threads. In general, it's best in apartment model to fire events only from the thread on which the control was created. If you start other threads, you should post a message to the main thread to tell it to fire the event.</p>
<p>
The sample that you have found indeed only demonstrates one technique for firing events from a secondary thread. It discusses the method whereby the secondary thread posts a message to the primary thread, which actually fires the event by calling the method in the event sink.</p>
<p>
It is possible, however, to fire an event directly from the secondary thread. As the article mentions, it is necessary to marshal the interface pointer of the event sink (usually received via a call to <b>IConnectionPoint::Advise()</b>) so it is suitable for use by the secondary thread and to pass that pointer to the secondary thread. This is not discussed in detail by the FIREEV.EXE article; however, it is not difficult. The essential API pairs used to accomplish this are <b>CoMarshalInterface()/CoUnMarshalInterface()</b> and <b>CoMarshalInterThreadInterfaceInStream()</b>/<b>CoGetInterfaceAndReleaseStream()</b>. The first API marshals the interface and prepares a stream to be used by the secondary thread when it calls the second API to unmarshal the interface. Once you have done this, the interface is ready to be used to call the event sink directly. An example of using <b>CoMarshalInterface()</b> is in a Platform SDK sample called OLEAPT. <b>CoMarshalInterThreadInterfaceInStream()</b> and its partner are more convenient versions. </p>
<p>
A note: Dr. GUI once had to give mouth-to-mouth resuscitation to a foolish developer who stopped breathing after attempting to pronounce "<b>CoMarshalInterThreadInterfaceInStream</b>" without taking a breath. So don't try this at home.</p>
</font></BODY>
</HTML>

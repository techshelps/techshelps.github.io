<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building Internet applications</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">

<h1>Building Internet applications</h2>
<p>
<i>by Peter Vogel</i></p>
<p>
If you've ever tried to create an interactive, Web-based application, you know that "doing it with HTML" is considerably more difficult than building applications with Visual Basic. Among the problems you may have discovered are maintaining state information (what did the user do last?), getting information from the client browser, and dealing with the capabilities of different browsers. Not to mention that retrieving data from a database is just flat-out impossible. </p>
<p>
If you've despaired of ever moving into the lucrative world of Internet development, there is hope--and it includes using Visual Basic. The solution to your problems is called Active Server Pages (ASP), a product Microsoft announced at the Site Builder Network conference in November 1996. And best of all, you can download the program free from <b>www.microsoft.com/iis/default.asp</b>.</p>
<p>
ASP provides an Internet Information Server development environment for programmatically generating Web pages using ActiveX technologies. ASP is part of the Active Server toolset that, along with Active Desktop, makes up the Active Platform, Microsoft's strategy for delivering Internet and intranet solutions. In this article, we'll offer an introduction to how ASP works.</p>
<h2>Getting started</h2>
<p>
First, you'll be happy to know that if you've been building HTML pages, you already have a lot of the raw material you need for creating Active Server Pages: Simply rename your *.HTM files to *.ASP files. When the Internet Information Server (IIS) receives a request for an ASP file, it invokes special processing that's a superset of standard HTML. This superset includes handling a set of tags delimited by &lt;%..%&gt;--these tags enclose code written in any ActiveX scripting language you care to use. (Presently, you're limited to JScript and VBScript.) </p>
<p>
For example, consider an existing HTM file that looks like this:</p>
<pre>&lt;HTML&gt;
&lt;BODY&gt;
Today's date is 08/01/97
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<p>
Suppose we rename this file to an ASP file and extend it to take advantage of ASP's scripting functionality. We could change it as follows:</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
Today's date is &lt;%=Date()%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
When IIS sees the &lt;%..%&gt; delimiters, it will invoke the current scripting engine to process the text between the tags. The &lt;%=code%&gt; syntax will cause any text generated by the code to be inserted into the Web page before it's sent to the user. In the case of our example, which includes the Date() function, the current date will be inserted into the page. This intermixing of HTML text and code--with the script living on the page rather than in a separate code file--will look familiar to VBScript programmers.</p>
<p>
In the end, it doesn't matter whether the page sent to the user comes from the standard HTML file or the ASP-enhanced version. In either case, the HTML that the browser receives will look like this:</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
Today's date is 08/01/97
&lt;/BODY&gt;
</code></pre>
<p>
And, once the browser processes the HTML tags, the user will see the following line:</p>
<pre><code>Today's date is 08/01/97
</code></pre>
<p>
ASP pages can include VBScript routines and OBJECT tags (which call in ActiveX controls) as part of the HTML sent to the browser. This inclusiveness opens the possibility of dynamically generating the programs sent to run in the client browser. Essentially, ASP could custom generate a VBScript program to execute inside the user's Web browser each time the page is accessed.</p>
<p>
Since the browser sees the same HTML whether the page is generated from a static file or from an ASP-scripted file, Active Server Pages are "browser neutral." An ASP script can generate HTML that any browser from Mosaic 1.0 to Internet Explorer 3.0 can process. Nor do ActiveX scripts have to be recompiled after a change, unlike Perl scripts and other CGI-based methods. Instead, ASP pages take advantage of just-in-time compilation to recompile before use.</p>
<h2>More power</h2>
<p>
ASP can access ActiveX server components (formerly "OLE automation servers") to extend its functionality. One component, for instance, ensures that you don't have to target your HTML for the lowest-common-denominator browser. By accessing the BrowserType object of the MSWC server, ASP allows you to check a browser's capabilities and choose how you want to deal with it. </p>
<p>
The BrowserType object contains a set of properties that let the ASP developer determine which functionality the user's browser supports, as follows:</p>
<pre>&lt;%Set UBrwsr=Server.CreatObject("MSWC.BrowserType")
If UBrwsr.ActiveXControls=False Then%&gt;
&lt;IMG SRC="/Sub.GIF"&gt;
&lt;%End If%&gt;
</pre>
<p>
This sample code accesses the properties of the BrowserType object to see if the user's browser supports ActiveX controls. The text in the If...End If block is included in the page sent to the browser only when the If condition is true. In this case, if the browser doesn't support ActiveX controls, the tag to display a static GIF file is added to the HTML to be returned to the user. Presumably, if the browser does support ActiveX controls, you'd write to the page an OBJECT tag to download a control. </p>
<p>
It's important to realize, however, that the MSWC server doesn't actually query the user's browser. Instead, it uses the User Agent HTTP header sent by the browser to pull information out of the file BROWSCAP.INI. You'll want to be sure that this file contains the latest information on the capabilities of the browsers you expect to hit your site.</p>
<p>
You can also create your own server components using any language that can create an ActiveX server. This, of course, includes VB 4.0 and 5.0. The servers can be implemented as either in-process or out-of-process servers. In fact, thanks to DCOM, these servers don't have to reside on the same computer as IIS, but can be distributed to any other server on the network. Since ASP pages execute in a controlled environment on the server, they aren't implemented in a sandbox model but have full access to all the resources of the server.</p>
<p>
ASP offers a variety of other services to the developer. The Request object provides access to information returned from the browser (for instance, URL parameters and cookies). As an example, if the browser activates your ASP page with the URL www.mysite.com/authors.asp?subject=IDC, one of the pieces of information you'll want is the value of the subject parameter (in this case, IDC). With ASP, you'd use the code</p>
<pre><code>strSubject = Request.QueryString("Subject")
</code></pre>
<p>
The Response object lets you return information to the browser by embedding it in the Web page as follows:</p>
<pre><code>Response.Write "The subject is " &amp; strSubject
</code></pre>
<p>
The &lt;%=..%&gt; syntax is a short form for Response.Write.</p>
<p>
A subject for another article is the Session object, which allows you to maintain server state information over many HTTP requests. Since HTTP is essentially a "stateless" protocol, this object offers a way to overcome one of the biggest problems in creating intranet applications: keeping track of what the user did last.</p>
<h2>Getting data</h2>
<p>
The Active Data Object (ADO) server is one of the more powerful servers on the market. Microsoft also introduced ADO at the Site Builder conference, as part of the Active Server platform. ADO provides automation-based, language-independent access to data. It rides on top of OLE DB as a set of objects for accessing heterogeneous OLE DB components. </p>
<p>
OLE DB, in turn, defines a set of COM interfaces for accessing all types of data, even non-relational sources. While OLE DB includes interfaces to exploit full-featured data stores (for instance, SQL databases), developers can also access Excel spreadsheets through OLE DB and, by extension, through ADO. </p>
<p>
Before you can access any data with ADO, you must set up an ODBC data source on the server using the 32-bit ODBC Administrator (which you can find in the Windows Control Panel). The ODBC source must be a System Data Source Name (DSN). Only by establishing the data source as a System DSN can other Windows NT services, like IIS, use it. For the purposes of this example, we'll assume that you've created an ODBC DSN based on an Access database and called MySource.</p>
<p>
Among others, we'll use the following ADO server objects to get at the data: 
<ul>
<li>
DBConnection--connects to a data source<br><br></li>
<li>
Recordset--processes results for a SQL statement, like the recordset from Jet<br><br></li>
<li>
Field--provides access to a column in a recordset, as in Jet</li>
</ul>
<p>
Let's look at an example using VBScript. To get at a table in the Access database, you must obtain a reference to an ADO DBConnection object. Since VBScript doesn't support any variable type but variants, you can see that no declaration is required here:</p>
<pre><code>Set dbc = Server.CreateObject("ADODB.Connection")
</code></pre>
<p>
Once you have the connection object, you can open the data source. Doing so involves passing an ODBC connection string to the Open method of the dbc object, as follows:</p>
<pre>dbc.Open "DSN=MySource;"
</pre>
<p>
You can supply more parameters in the ODBC connection string if, for instance, the data source requires a password or user ID. </p>
<p>
Now that the data source is open, you can create a recordset from it, using the Execute method:</p>
<pre><code>Set rec = dbc.Execute("Select * from MyTable;")
</code></pre>
<p>
You've probably noticed that ADO has far fewer objects and methods than DAO, the object-based data-access method used by Visual Basic and Access. In this example, dbc--the DBConnection object--fills the place of the DAO Workspace and Database objects. The DBConnection object's Execute method fulfills all the functions of the DAO Database object's OpenRecordset and Execute methods.</p>
<p>
Finally, you move through the records in the recordset and write the data to the page with code something like this:</p>
<pre><code>While not rec.eof
  Response.Write rec("MyField")
  rec.MoveNext
Wend</code></pre>
<h1>Conclusion</h1>
<p>
ASP, combined with VBScript executing in the browser, forms a bridge for VB programmers to start creating true Internet applications. You'll need to develop some familiarity with the server objects that make up this new environment. With that knowledge under your belt, and some understanding of DAO and the CreateObject command, you shouldn't have any trouble turning your VB skills into those Internet skills that employers want their new hires to possess these days. Best of luck! </p>
<p>
<i>Peter Vogel is the applications supervisor at Champion Road Machinery, a professional storyteller, and a Cub leader. You can reach him at </i>peter.vogel@odyssey.on.ca<i>. Peter has written a number of articles on Visual Basic, Access, and Web development, in addition to presenting on Web tools at the VBTeach conference.</i></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Is it Real, or is it . . . </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">
<h1>Is it Real, or is it . . .</h1>
<p>
<i>Gary DeWitt</i></p>
<p>
<i>Trickery and deceit are the keys to getting the most out of the Windows API. Written by and for C programmers, the strict data types of the WinAPI may seem awfully rigid to FoxPro developers. In part 3 of his series, Gary shows how you can use strings (and mirrors) to trick the Windows API into doing what you want.</i></p>
<p>
Classes are such wonderful ways to represent abstract ideas. Named properties can be used to store data, and using those named properties greatly simplifies access to that data. It's so much easier to refer to Sue.Name and Gary.Name than to try to keep track of lcName1 and lcName1, isn't it?</p>
<p>
C-the language of the Windows API-doesn't support classes (though C++ does), but it does support structures, which are similar. Structures are like classes, but with properties only, called member variables. Structures are a neat way to represent multiple related data items. Consequently, you'll frequently encounter them in the Windows API.</p>
<p>
This is the third article of a series, and it covers the last of the three basic skills you'll need to work with the Windows API. In September, I covered declaring and calling external functions; October's issue showed how to pass pointers to API functions. Understanding how to use structures will complete the picture.</p>
<h2>Blocks of memory</h2>
<p>
A structure is a contiguous block of memory that holds multiple variables. You might encounter a definition of a structure that looks like this:</p>
<pre><code>typedef struct _RECT {
  LONG left; 
  LONG top; 
  LONG right; 
  LONG bottom; 
  } RECT;
</code></pre>
<p>
This is the RECT structure used to represent rectangles in the Windows API. This structure has four member variables: left, top, right, and bottom. Each of these member variables is of type LONG, which is a four-byte integer. An instance of RECT will take up exactly 16 bytes of memory-left gets the first four, top the second four, and so on. This is a very simple and efficient way to store related data. A C programmer can easily refer to each member variable by name. If myRect is a pointer to the structure, then each of the members can be reached with myRect-&gt;left, myRect-&gt;top, and so forth.</p>
<p>
Visual FoxPro's memory manager is great at hiding unnecessary complexity from the developer. It allocates and deallocates memory, rearranges that memory for greater efficiency, and cleans up after itself frequently. But as a consequence, the developer can make very few assumptions about the physical allocation of memory in VFP. About the only things you can be sure of are that a string will occupy a contiguous block of memory somewhere in VFP's process and that VFP won't move that string as long as references to it are active. Because structures are contiguous blocks of memory, and strings are about the only way we can create such blocks, we must use strings to represent structures.</p>
<h2>Two-faced strings</h2>
<p>
It's easy to represent a structure with a string. To allocate the 16 bytes of memory required for the RECT structure, simply create a 16-byte string of zeros:</p>
<pre><code>lcRect = REPLICATE(CHR(0), 16)
</code></pre>
<p>
This line of code creates a 16-byte block of memory that can represent a rectangle at the top left corner of the screen with a height and width of zero. Always use CHR(0) to allocate memory for a structure. Allocating the same memory with SPACE() instead will create a rectangle at 538976288, 538976288 with a height and width equal to 538976288. There might not be anything wrong with that, but it's always best to initialize memory to zero to avoid unpredictable results.</p>
<p>
Now let's put the RECT structure to good use. Last month I worked with Microsoft PowerPoint, finding its top-level window on the desktop and bringing it to the top. This month, I'll use the RECT structure and two API functions to manipulate that window some more. Assume that I've already found the window, gotten its handle, and created a string lcRect to imitate the RECT structure:</p>
<pre><code>DECLARE INTEGER GetWindowRect IN Win32API ;
  INTEGER, STRING @
lnSuccess = GetWindowRect(lnHandle, @lcRect)
</code></pre>
<p>
Calling the GetWindowRect() API function will fill in the structure values for the PowerPoint window. To figure out what they mean, I must parse the 16-byte string into 4-byte chunks and convert those chunks from strings to numbers. The mechanics of this conversion are in a function CharToBin(), which I've included with this month's Subscriber Downloads at www.pinpub.com/foxtalk. I've also included the reverse function BinToChar(), which turns numbers into strings for creating structures with values other than zero.</p>
<pre><code>lnLeft   = CharToBin(SUBSTR(lcRect, 1, 4))
lnTop    = CharToBin(SUBSTR(lcRect, 5, 4))
lnRight  = CharToBin(SUBSTR(lcRect, 9, 4))
lnBottom = CharToBin(SUBSTR(lcRect, 13, 4))
</code></pre>
<p>
Suppose the window rectangle has the following values:</p>
<pre><code>lnLeft   = 0
lnTop    = 0
lnRight  = 200
lnBottom = 200
</code></pre>
<p>
I want to move it down and right 20 pixels and bring it to the top, but not activate it. 20 pixels is just about the right distance to cascade windows. Here's the API function that does it:</p>
<pre><code>DECLARE INTEGER SetWindowPos IN Win32API ;
  INTEGER hWnd, INTEGER InsertAfter, ;
  INTEGER left, INTEGER top, ;
  INTEGER width, INTEGER height, ;
  INTEGER flags
SetWindowPos(lnHandle, HWND_TOP, ;
  lnLeft + 20, lnTop + 20, ;
  lnRight + 20, lnBottom + 20, ;
  SWP_NOACTIVATE)
</code></pre>
<p>
HWND_TOP is a constant with the value of 0, meaning put the window on top, and SWP_NOACTIVATE is 16, which means the window won't be activated.</p>
<h2>General fakery</h2>
<p>
You might be asking why I keep insisting that this is all trickery and deceit. The answer is simple: FoxPro doesn't support structures, so by using strings we can create a block of memory that looks just like a structure to the Windows API, causing it to return the results we want. Real support for structures would make things easier on us, but until FoxPro supports them, at least the Windows API doesn't know the difference.</p>
<p>
This is the last of the basics I'll be covering in this column, I promise. In using the techniques that I've introduced in the past three months, you have access to most of the rich set of functions in the Win32API. Now I can start on the fun stuff. In fact, this week a frustrated editor asked me how to determine the version number of an EXE. Next month I'll show you, and along the way you'll learn about the one kind of API function that you can never use in FoxPro. I just hope he can wait until then. s</p>
<p>
Download 11DEWITT.ZIP at www.pinpub.com/foxtalk</p>
<p>
<b><i>Gary DeWitt is senior software magician at Medsoft, Inc., a medical practice management software company in Tahoe City, CA. While Visual FoxPro is his favorite development tool, he also programs in C++, Java, and Visual Basic. Gary is a Microsoft Certified Professional and Microsoft MVP. 73512.57@compuserve.com, gdewitt@sierra.net.</i></b></p>
<P align="center"><a
href="http://www.pinpub.com/foxtalk/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about
FoxTalk and Pinnacle Publishing, visit their website at</strong> <br>
<a href="http://www.pinpub.com/foxtalk/"><strong>http://www.pinpub.com/foxtalk/</strong></a></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the November 1997
issue of FoxTalk. Copyright 1997, by Pinnacle Publishing, Inc.,
unless otherwise noted. All rights are reserved. FoxTalk is an
independently produced publication of Pinnacle Publishing, Inc.
No part of this article may be used or reproduced in any fashion
(except in brief quotations used in critical articles and
reviews) without prior consent of Pinnacle Publishing, Inc. To
contact Pinnacle Publishing, Inc., please call (800)788-1900 or
(206)251-1900.</p>
</font></BODY>
</HTML>

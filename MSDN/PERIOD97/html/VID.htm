<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual InterDev: The New Way to the Web</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1>Visual InterDev: The New Way to the Web</h1>
<p>
To date, most of the content created for the Web has been essentially static. While a static page might contain dynamic elements such as video or animations, a request to a given URL always results in the same information being sent back from the Web server. When used in this capacity, a Web server acts much like a file server with a nice tie.</p>
<p>
To create more sophisticated Web sites, you need the ability to write programs on the server that can dynamically generate Web pages based on information in the HTTP request and from information stored on the server. This approach is typified by CGI scripting. Generating Web pages dynamically through the use of server-side processing represents a fundamental shift in the architecture of the Web; it moves the Web from being essentially a document distribution technology towards an application development technology. </p>
<p>
Unfortunately, the tools currently available for building Web apps are immature, often consisting of little more than text editors. Meanwhile, existing client-server tools are typically based on an infrastructure with reliable connectivity or high-bandwidth, things that can't be assumed in the far-flung architecture of the Web. To address these challenges, Microsoft® developed Visual InterDev™. </p>
<p>
Visual InterDev is a tool for creating dynamic Web applications. A typical Web application created with Visual InterDev consists of server-side scripts, written in VBScript or another language that supports ActiveX™ scripting, that  are executed in response to HTTP requests from a client-side Web browser. These scripts may do complex processing, but more often than not the scripts use server-side runtime ActiveX components to provide system services or implement business rules (see Figure 1). </p>
<p><img src="VIDfig01.gif">
</p>
<p><b>Figure 1: Web scripting architecture</b></p>
<p>
Because Visual InterDev supports components, developers can break up complex problems into more manageable chunks. Furthermore, independent software developers can create Web development components knowing there's a market for them, similar to the growth of high-quality VBX and OLE control building blocks in the past.</p>
<h2>Design Goals</h2>
<p>
Much of the focus of the Visual InterDev 1.0 development teams has been to create a complete development system to support the creation of server-side scripts, especially ones that use components. The Visual InterDev development teams also focused on three other goals for the first release.</p>
<p>
First, we wanted developers to be able to work with existing Web projects and to work concurrently with teams of nontechnical content and document authors. Consequently, Visual InterDev makes it easy to incorporate existing Web content and tools into projects, and we've adopted the same Web project format as Microsoft FrontPage™. Sharing the FrontPage Web project system enables developers to work concurrently with content and document authors. Additionally, when a source code control system is available on the server, the Web project will maintain past revisions and enforce consistency. We support these Web projects on a wide range of Web servers, including not only Microsoft Internet Information Server (IIS), but also Netscape Communications and Commerce servers and Apache servers, as well as on a wide range of operating systems including SunOS, SGI Irix, and Linux. (The complete list is available on Microsoft's Web site at http://www.microsoft.com/kb/articles/q161/1/58.htm.)</p>
<p>
Second, we knew that we could not provide all the design tools that developers would want, particularly for vertical applications, so we worked hard to make the development environment and editors extensible. Accordingly, Visual InterDev is the first Microsoft product that supports ActiveX design-time controls. Design-time controls, discussed in this issue of <i>MIND</i>, are ordinary ActiveX controls that have been extended with a new COM-based interface, and can output text on request based on property settings. This means you can use the power of ActiveX controls as you design your Web application, but when the application is run from a script, the control isn't shown to the user-only the text it produced is, in the form of HTML and script code. This ensures both a sophisticated development environment and the broad runtime reach needed for the Web. While this description might sound complicated, design-time controls are easy to understand and even easier to use, as you'll see. </p>
<p>
Third, we wanted to make the Web development environment familiar to veteran programmers and ensure that they could share projects and components from other development tools such as Microsoft Visual C++®. To achieve this, the Visual InterDev team worked closely with the team that developed the Developer Studio™ environment shared by Visual J++™ and Visual C++ (see Figure 2). Together the two teams made significant enhancements to the Developer Studio shell to support Visual InterDev Web projects. Perhaps more importantly, this enables Visual InterDev to act as an integration and distribution environment for Web application components. In particular, Visual InterDev makes it easy to create Web applications that integrate components and business processes developed using not only simple scripts, but Visual Basic®, Visual C++, Visual J++, Visual FoxPro™, and a variety of third-party development tools that integrate with Developer Studio.</p>
<p><img src="VIDfig02.gif"></p>
<p><b>Figure 2: Developer Studio environment</b></p>
<p>
Since it can be time consuming for developers to create and manage all the tools and components that go into creating a Web server, we wanted to create a single CD that provides everything necessary to set up and immediately start building Web applications. The Visual InterDev CD includes a wealth of materials such as:
<ul>
<li>
The Active Server server-side processing infrastructure (Active Server Pages)<br><br></li>
<li>
Database projects and query and schema designers<br><br></li>
<li>
Web site setup and management tools<br><br></li>
<li>
Hyperlink management<br><br></li>
<li>
Multiple tool project configuration and management tools<br><br></li>
<li>
Source and WYSIWYG HTML editors, including special editors for ActiveX controls, Java applets, and browser plug-ins<br><br></li>
<li>
Content editors and management tools<br><br></li>
<li>
Content and script code wizards</li>
</ul>
<h1>The Active Server and Web Applications</h1>
<p>
To create dynamic Web pages, you need server-side processing capabilities. Initially, developers used CGI for this. While CGI techniques can handle arbitrarily sophisticated processing, the mechanisms used to pass information around on the server, the use of environmental variables, text-based command-line arguments, and so on are essentially ad hoc and are difficult to scale. To address this, Microsoft, Netscape, Borland, and others have been working to augment Web servers with more sophisticated and scalable server scripting architectures. Visual InterDev uses the Active Server Pages technology available with IIS. The Active Server Pages architecture lets developers incorporate server-side scripts directly into HTML content. </p>
<p>
The basic unit of execution within Active Server Pages is the Active Server Page (ASP) file. An ASP file consists of a mixture of HTML and scripting code. The script is delineated either by inline server script tags, &lt;% %&gt;, or by the HTML &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags. When a user requests data from a URL with an ASP file extension, the ActiveX server engine reads through the file from top to bottom, sending the HTML back to the user's browser and executing the script. </p>
<p>
The Active Server Pages architecture uses the ActiveX scripting engine to support both VBScript and JScript™. Because this engine is directly accessible through COM interfaces (see Figure 3), scripting language developers can add support for additional languages such as Perl.</p>
<p><img src="VIDfig03.gif">
</p>
<p><b>Figure 3: ActiveX scripting architecture</b></p>
<p>
To have the ActiveX server engine process a file, just give it an ASP file extension. Since ASP files consist of a mixture of HTML and scripting code, any existing HTML files can simply be renamed from the HTM extension to the ASP extension and voila! They instantly become Active Server Pages, albeit with no server scripting. Developers can then make the HTML dynamic by building ActiveX server scripting code to the ASP page (see Figures 4 and 5). </p>
<p><b>Figure 4: ASP Source Code</b></p> 
<p><img src="VIDfig04.gif"></P>
<p><img src="VIDfig05.gif">
</p>
<p><b>Figure 5: ASP output code and results</b></p>
<p>
The ActiveX server engine gives special handling to one particular Active Server Page, the global.asa file found in the root Web directory. The ActiveX server engine reads this file and calls the script handlers contained within it to handle various events that might occur during the execution of a Web application.</p>
<p>
A Web application designed with Visual InterDev starts the first time a user requests any Web page in the application, and ends when the server shuts down. The ActiveX server engine notifies the application when it has started or stopped by firing the Application_OnStart and Application_OnEnd events. You can specify scripts for these events in the global.asa file. When the application starts, the server reads global.asa and processes the Application_OnStart event script. Similarly, when the application ends, the server processes the Application_OnEnd event script.</p>
<p>
The ActiveX server engine maintains a session for each Web browser that connects to the Web server. Like a server-side cookie, a session identifies and maintains state information about the user connecting to the application. The Web server automatically creates a session when a new user requests any Web page in the application, destroying the session when either it times out or the Abandon method is called. The ActiveX server engine notifies the application when it is creating or destroying a session by calling the Session_OnStart or Session_OnEnd event handlers located in the global.asa file.</p>
<h2>Components</h2>
<p>
Although writing ActiveX server scripts within Visual InterDev is straightforward, writing sophisticated Web applications can still be challenging. To address this, it's possible to break the application down into smaller building blocks called ActiveX server components. ActiveX server components are COM automation servers that extend ActiveX server scripting with capabilities like direct access to the file system and access to machine and network resources. </p>
<p>
The VBScript and JScript code found in ASP or global.asa files can access the methods provided by components. These scripts can execute as either in-process DLLs or out-of-process executables with lightweight components designed as in-process DLLs. Performance is dramatically better than with CGI solutions, since no context switching is incurred between processes when Web users browse pages using the component. For more efficient use of server resources, ActiveX server components can be instantiated once and shared among all users connected to the Web site. Using Visual InterDev, developers can easily integrate ActiveX server components written in Java, Visual Basic (32-bit), C, C++, or other languages that can create COM components.</p>
<p>
With the use of ActiveX server components, Visual InterDev enables developers to create multitier Web applications. For example, a component that provides financial modeling and analysis functions could be used to build portions of a financial services Web application. Using Visual InterDev, developers can create Active Server Pages that execute the component on the Web server. These pages can use the component's methods (which are just functions) to return financial modeling information to users in dynamically constructed HTML pages. Because the component executes on the server, the content it returns is platform-independent HTML that can be used by any browser. </p>
<p>
Among the most important ActiveX server components, Active Data Objects (ADO) enable scripts to access databases. ADO provides flexible and scalable database connectivity within Visual InterDev applications. Specifically designed for Web-based data access, ADO provides an object-based approach to data access over the Web. Connections to any ODBC data source can be established through ActiveX scripting. The ADO component provides a powerful set of database commands for manipulating data and creating data-driven Web pages. ADO allows manipulation of database-defined data types, including binary large objects (BLOBs), so you can store GIF and JPEG images in a database, then retrieve them as needed and dynamically write them into Web pages. ADO also provides a rich set of properties for setting locking levels, cursor options, query and login timeouts, transaction support, resultset scrolling, error handling, and more. Using VBScript or JScript, ADO provides developers with maximum flexibility to develop powerful database functionality within their Web sites. Visual InterDev includes wizards and other tools to automatically generate Active Server Pages that include these database components.</p>
<p>
ActiveX server components provide a convenient and effective way to integrate Web applications with internal and legacy systems. For example, you might have a client-server insurance processing application written in Visual Basic. If you can expose its functionality as a set of ActiveX server components, it can be called directly from a Web page with a server script. With this technique, Visual InterDev helps to protect and extend organizations' investments in existing tools and systems.</p>
<h2>Scalability </h2>
<p>
Because ActiveX server components are COM objects, they can be seamlessly distributed as out-of-process server components over a network using distributed COM (DCOM). If a component requires significant processing energy, it can be deployed on an application server where it can work in conjunction with the Web server. For example, a price lookup component that performs complex pricing calculations can be built with Visual Basic, then distributed through DCOM to execute on a specialized application server. </p>
<p>
One of the advantages of DCOM is that it makes distributed computing transparent to the developer. An ActiveX server script that executes and manipulates the remote component can't tell the difference, and operates as though the component is running side-by-side on the Web server. Distributed solutions built with DCOM components and Visual InterDev offer more effective load balancing, better performing applications, and greater fault tolerance for enterprise-class Web applications. You can optionally manage Active Server components with the Microsoft Distributed Transaction Coordinator (part of Microsoft SQL Server™).</p>
<h2>Database Development </h2>
<p>
Visual InterDev provides both Web-to-database connectivity and high-end visual database design tools. The database components of Visual InterDev include:
<ul>
<li>
Database design-time ActiveX controls <br><br></li>
<li>
Database wizards<br><br></li>
<li>
Integrated Data View<br><br></li>
<li>
The Query Designer<br><br></li>
<li>
The Database Designer<br><br></li>
<li>
The Stored Procedures editor</li></ul><p>
Visual InterDev bases its database connectivity on ODBC. One level above ODBC, these tools use ADO to provide object-based access to ODBC data sources (see Figure 6). In addition, Visual InterDev can use other data-access components developed by third parties, thanks to its COM-based component architecture. Similarly, the visual design tools provided with Visual InterDev work with any databases that support ODBC, including Oracle, Microsoft SQL Server, Microsoft Access, Microsoft Visual FoxPro, Informix, Sybase, IBM DB/2, and others.</p> 
<p><img src="VIDfig06.gif">
</p>
<p><b>Figure 6: Object-based ODBC access</b></p>

<p>
While some Web development platforms offer visual database tools, often these tools do not provide the scalability required for Internet sites or production intranet sites. The Visual InterDev database tools create scalable solutions appropriate for mission-critical, data-driven Web sites. One example is pooling. By default, the database tools automatically generate connections so that IIS can pool these database connections across users. Pooling, connection caching, and timeout values are automatically generated,  though they can also be specified by the developer. Visual InterDev also makes it easier to connect to multiple heterogeneous databases within a Web site, returning or updating data within a single, integrated HTML page.
</p>
<h2>Data View</h2>
<p>
Visual InterDev includes Data View, which provides a graphical interface to all the databases used in a Web site. Data View works together with the Query Designer and Database Designer features to provide developers with database development, administration, and maintenance. Besides depicting each database connection used by the Web application, Data View provides a live connection to each database, letting you work directly with them within the Visual InterDev IDE. </p>
<p>
Within Data View, shown in Figure 7, the developer can perform a variety of tasks, including opening a database to view its tables and defined views, as well as seeing and editing stored procedures. Data View can provide detailed information on objects and properties within each database, including table definitions, field types, key structures, stored procedures, and so on. </p>
<p><img src="VIDfig07.gif">
</p>
<p><b>Figure 7: Data View</b></p>
<h2>Query Designer</h2>
<p>
The SQL Query Designer works with any ODBC data source to help developers visually construct even the most complex SQL statements. It helps the developer generate the correct Data Manipulation Language (DML) code for SELECT, INSERT, UPDATE, and DELETE queries. </p>
<p>
The Query Designer consists of four main windows that the developer can selectively view: the Diagram pane, the SQL pane, the Grid pane, and the Results pane. With the Query Designer, you can open live views of data sources and build queries by dragging tables directly into the Diagram pane. This Diagram pane enables you to create complex queries across multiple tables, automatically creating the proper SQL joins and visually depicting these relationships in the Design pane. </p>
<p>
As the developer selects fields from tables, the SQL pane will display the dynamically constructed SQL statement. If you modify this SQL statement, the changes will be immediately reflected in the Diagram and Grid panes. The live SQL statement pane can be used to create stored procedures, execute arbitrary database definition language (DDL) commands directly against any ODBC data source, and perform ad hoc SQL queries. In addition, the Query Designer lets you execute any SQL statement in the SQL pane to test it, displaying the results in a Results pane. The Grid pane allows developers to specify query options-such as what data columns to display, how to order the results, and what rows to select-by entering choices into a spreadsheet-like grid. The Database wizards and design-time controls use the Query Designer to build the SQL statements that they need to access databases. </p>
<h2>Database Design</h2>
<p>
In addition to the Query Designer, Visual InterDev supplies a complete Database Designer for users of Microsoft SQL Server version 6.5. Other databases typically include tools for schema design along with the databases.</p>
<p>
Using the Database Designer, database administrators and developers can create new SQL Server databases and modify the structure and properties of existing ones. With this tool, database administration operations that used to be difficult to implement can be accomplished with a couple of clicks of the mouse. For example, you can use the Database Designer to change the data type on a SQL field (maybe from type CHAR to type INT) with a simple dropdown selection. Visual InterDev will then automatically change the field type, an operation that previously might have required manual DDL operations to export the entire table, drop it, create a new table with the new data type, and import the data into the new table. The Database Designer can also generate change scripts of DDL that can be reviewed, submitted to database administrators for review, or distributed to multiple production servers.</p>
<p>
The Database Designer can set up complex database designs with unique keys, constraint checking, and various kinds of relationships between tables using foreign keys. Developers can group tables together by functionality, and database diagrams can be dragged into the Query Designer to quickly construct queries against these logical groupings. Visual InterDev also lets users edit SQL Server and Oracle stored procedures with a syntax-colored source editor. </p>
<h2>Wizards and Design-Time Controls</h2>
<p>
Visual InterDev builds on the ADO runtime environment by providing wizards and design-time ActiveX controls to generate much of the server-side scripting. This includes creating ADO calls, which are necessary to establish database connections within a Web site, perform queries, and display results. In many cases you can use wizards and design-time ActiveX controls to create data-driven Web sites with almost no additional coding. For maximum flexibility, Visual InterDev always lets developers directly view and develop ActiveX server scripting code using the ADO component. </p>
<p>
Visual InterDev provides database wizards, like the one shown in Figure 8, that lead the developer through the process of creating custom data-bound HTML forms. After prompting the developer for information, the Data Form Wizard will automatically generate the complex HTML and ActiveX server scripting information required to bind the page to a database. For example, you could use the Data Form Wizard to visually construct a guest book form complete with the logic to accept user input, update a database of registered users, and display a listing of all users registered in the guest book database. Because the wizards generate standard HTML and scripts, you can modify the generated source code as you want.</p>
<p><p><img src="VIDfig08.gif">
</p>
<p><b>Figure 8: Data Form Wizard</b></p>
</p>
<p>
Visual InterDev also includes a variety of design-time controls for database access. One example is the Microsoft Data Command control. With the Data Command control, you can select an ODBC database connection and then visually build a query against it using the Visual InterDev Query Designer. Once tested and completed, the Data Command control generates all of the ActiveX server scripting necessary to perform the query, and automatically adds the scripting information to the appropriate Active Server Page. Data range controls provide similar functionality for visually building complex data queries, but also generate the looping and display logic necessary to page through a resultset as a series of dynamically constructed HTML pages.</p>
<h2>Web Projects</h2>
<p>
Visual InterDev includes extensive Web project and site management features integrated within the Visual InterDev development environment. The Visual InterDev Web Project view presents the live Web site as it exists on the server. Developers can create new Web sites, view content on an existing Web site, and create, add, or modify folders and files on the site. The Web site can be managed with a suite of features, including:
<ul>
<li>
Creation of new sites with site wizards. <br><br></li>
<li>
Direct file manipulation of any item on a Web site. Developers can copy, delete, add, rename, and edit any file in the Web site within the IDE by using the File View feature.<br><br></li>
<li>
Ability to import content files and directory trees into a Web site. You use the Import File and Import Folder commands to import existing content from any local or network resource into the Web site.<br><br></li>
<li>
Copy Web command. An entire Web can be moved from one server to another with this command. This is useful for moving a Web from a staging server to a production server, for example.<br><br></li>
<li>
Object properties. Developers can right-click on any object on the Web site and Visual InterDev will present a property page that contains useful information such as file size, modification date, and all incoming and outgoing links to a file.<p>
Visual InterDev uses the same Web project system as Microsoft FrontPage. Because Visual InterDev and FrontPage projects use the HTTP protocol to access Web project information, developers can work remotely, even across firewalls, to create and manage Web sites. The Web project system supports an extensive set of security and access-control mechanisms to ensure integrity (see Figure 9).
</li>
</ul>
<p><img src="VIDfig09.gif">
</p>
<p><b>Figure 9: Remote development with VisualInterDev</b></p>
<h2>Site Management</h2>
<p>
The Visual InterDev Projects view tracks links within a site to ensure they remain valid. For example, if a developer renames a file, the system will automatically detect all the pages throughout the site that reference that name as a hyperlink and fix them to avoid broken links. In addition, if a file is moved or the site physically restructured using <br>
Visual InterDev, the system will automatically repair affected links. Finally, if a page or file is deleted, Visual InterDev will notify the user of all the now-broken references to that file that exist within the site. </p>
<p>
Visual InterDev provides developers with a Web site visualization tool called Link View (see Figure 10), which presents a graphical view of the site showing the logical relationships between its pages. For example, Link View can visually depict the links from a particular HTML page to other pages inside or outside the Web site. You can expand or collapse the view to any level, showing as many pages or sections of the Web site as you want. </p>
<p><img src="VIDfig10.gif">
</p>
<p><b>Figure 10: Link View</b></p>
<p>
More than just diagramming links, Link View also shows information, such as file type, about each file. Link View will depict all broken links in red, and will show external links in addition to internal links. You can filter the view to see only the information you want, such as HTML pages, multimedia files, executables, documents, external files, or primary and secondary links.</p>
<p>
When working with a Visual InterDev or FrontPage-based Web project, Visual InterDev will use the source rather than the generated HTML page to show the logical relationships of the site. Link View also recognizes HTML pages, Active Server Pages, GIF and JPEG images, ActiveX controls, Java applets, 2.5D Layout files, and even design-time controls. Together, these features let Link View show you your Web site as it will execute. </p>
<p>
Developers can even use the graphical view to launch various editors to work on the files that make up a site. Visual InterDev can be used as a launching pad to edit files located within remote Web projects, and it can be configured to support third-party file-based editors. Visual InterDev also supports ActiveX document interfaces, letting tools that don't ship in the box be seamlessly integrated into the IDE.</p>
<h2>Team Development</h2>
<p>
Visual InterDev provides integrated source management for users of Microsoft Visual SourceSafe™ 5.0. Source management is especially helpful when teams of people will be working on the same Web site, as it provides explicit check-in and check-out capabilities for all files in the site. In addition, the revision tracking and merging features of the source code control system helps developers protect their work by giving them the ability to roll back to an earlier version of a file or to compare in detail the differences between two versions of a file. </p>
<p>
Since Visual InterDev integrates with the source code system on the Web server, it does not require that a source code control system be installed on the developer's workstation. For Visual InterDev projects controlled with Visual SourceSafe,  integration features include the following:
<ul>
<li>
Automatic creation of Web projects with source code control. <br><br></li>
<li>
File check-in and check-out. As developers request individual files in the Web site, Visual InterDev will explicitly check the file out of the source code control system before opening the file. Should another person already have it checked out (for instance, another Visual InterDev user or a FrontPage user working on the same project), the developer will be notified and permitted to have a read-only copy. <br><br></li>
<li>
Automatic addition of elements to the source code control system. As developers create new files for a Web site, Visual InterDev will automatically put these elements under source control. </li>
</ul>
<h1>More Wizards</h1>
<p>
Visual InterDev contains a set of wizards that handle a variety of common tasks such as creating Web projects and data-bound HTML forms. The wizards in Visual InterDev provide a starting point for developers, from which they can customize the resulting Web application. One of the difficulties developers face with applications created by wizards is that the wizards must be run again if changes need to be made to an application, a process that does away with the changes the developer made to the initial applications. </p>
<p>
Consequently, Visual InterDev wizards generate both human-readable HTML and script. But more importantly, the wizards take the important information entered by the developer and package it into design-time controls that can be restarted to make modifications at a later date. </p>
<p>
Today, most controls have a runtime model that is equivalent to what the developer interacts with at design time. Design-time controls are different; they can provide something in addition to themselves at runtime. For example, in the design environment a design-time Web control might look like a typical Visual Basic data-bound grid control. When it executes, however, its runtime might consist of HTML and JavaScript. Because of this design-time/runtime split, developers get all the benefits of controls at design time without sacrificing the broad browser-neutral reach of HTML and script at runtime.</p>
<p>
Additionally, because design-time controls are just ordinary ActiveX controls, they are easy to create, especially with new tools such as Visual Basic Control Creation Edition. To add new kinds of editing features to Visual InterDev, a tool developer can simply create a new design-time control. </p>
<p>
Design-time ActiveX controls are one of the most important features of Visual InterDev. They provide all of the benefits of component software, such as plug-and-play functionality and visual editing at design time. But because design-time ActiveX controls can generate HTML-based content, the resulting Web application can be used on any platform with any browser. Design-time ActiveX controls can also automatically generate the server-side or client-side scripting required to accomplish simple and complex tasks within a Web site. In essence, they are visual helper components that let developers construct dynamic Web applications based on HTML. </p>
<p>
It is hard to overstate the importance of design-time ActiveX controls for Visual InterDev. The product derives maximum extensibility using design-time ActiveX controls; third-party software vendors and corporations can seamlessly extend the tool with specialized functionality by using custom design-time ActiveX controls. Design-time ActiveX controls are based on COM, so they can be shared across tools and applications. Visual InterDev provides several integrated design-time ActiveX controls, such as the Data Command control for visually constructing complex data queries and various other data-access controls. These controls provide a simple, visual mechanism for constructing complex database connectivity logic in a Web site, with the control doing the hard work of generating the HTML and scripting necessary for the application's runtime processing. </p>
<p>
Microsoft plans to supply a healthy set of design-time ActiveX controls on the Visual InterDev Web site. ISVs should provide many new design-time ActiveX controls compatible with Visual InterDev, just as there are hundreds of ActiveX controls available for use with Visual Basic. And it is important to note that Visual InterDev also supports standard ActiveX controls as a way to extend Web pages with client-side software components that execute inside the browser. (This month's <i>MIND</i> takes a deeper look at design-time controls-see the "Preview" column on page 14.</p>
<p>
</p>
<h2>Code Wizard</h2>
<p>
Visual InterDev includes a client-side Script Wizard (see Figure 11), a product first introduced with the ActiveX Control Pad. The Script Wizard makes it easy to add interactivity to Web pages based on actions and events associated with ActiveX controls. The Script Wizard includes a visual interface for easily connecting an event (such as a mouse click) with an action (such as playing a video clip). All of the events associated with a given ActiveX control are listed in the Wizard's Event pane. The developer can select an event in the Event pane and associate it with an action in the Action pane. Multiple actions can be added to a single event without requiring any programming since the Script Wizard generates the actual lines of script code added to the HTML page. </p>
<p><img src="VIDfig11.gif">
</p>
<p><b>Figure 11: Script Wizard</b></p>
<p>
Using the Script Wizard, developers can easily integrate the behavior of multiple controls, creating an integrated application from potentially diverse sets of components by adding either VBScript or JScript code. While aiding you in connecting events to client-side scripts, the Script Wizard's code-entry window always permits you to code directly with VBScript or JScript if desired, or to modify the generated code. All client-side scripts developed with the Script Wizard are embedded as text within the HTML document using the W3C-approved HTML &lt;SCRIPT&gt; tag. </p>
<h2>Integrated Development Environment</h2>
<p>
Now let's look at some of the other components included with Visual InterDev. In particular, Visual InterDev includes both source and WYSIWYG HTML editors, as well as specialized editors for ActiveX controls, Java applet insertion, and plug-in support. You also get content management tools, and content development tools for images and music. </p>
<p>
Visual InterDev includes a version of the FrontPage 97 HTML editor. Teams of developers and business users can share a single, leading-edge HTML editing environment while working in the tools specifically designed to meet their differing needs. This editor provides support to easily insert ActiveX controls, Java applets, and browser plug-ins. You can visually specify characteristics such as the size and position of components and the editor will display the frame for the Java applet or browser plug-in within the document.</p>
<p>
When working with ActiveX controls, developers can use the Object Editor to modify the component in a visual editor. A property table, similar to the one in Visual Basic, enables developers to modify a component's properties without ever needing to see or work with source code. After using the visual editors to work with the component, the Object Editor automatically generates all of the HTML syntax (based on the W3C industry-standard &lt;OBJECT&gt; tag) to bring the component into the Web page and execute it. Perhaps most importantly, ActiveX controls are displayed in true WYSIWYG fashion within the FrontPage editor, and can be dragged, dropped, and sized directly within the page. </p>
<h2>Content Development Tools</h2>
<p>
In addition to focusing on tools for developers, Visual InterDev includes a basic set of multimedia content editing and management tools. Microsoft Media Manager lets the developer track and manage content (including HTML). Microsoft Image Composer provides a sophisticated image editing and manipulation program, and Music Producer lets developers easily generate custom audio tracks for Web pages.</p>
<p>
Microsoft Media Manager is a utility that makes it easy for developers to track and manage dynamic and static media assets such as images, sound clips, video clips, HTML files, and Microsoft Office documents. You can quickly search, preview, play, and retrieve media assets stored in Media Manager libraries. The utility integrates seamlessly with Windows® 95 and Windows NT®, using the familiar Explorer view for navigation. Microsoft Media Manager provides extended search capabilities, thumbnail previews of images, and previews of other media content such as sound clips and video clips directly from the library navigation (Explorer) pane. Media assets can be simply dragged and dropped from a media library into a Visual InterDev project. </p>
<p>
Microsoft Image Composer is an easy-to-use tool for developers who are not graphics professionals yet need to modify or create images for a Web site. It will recognize most popular image formats (including Adobe Photoshop files) while making it easy to save images into GIF or JPEG formats. Users can launch Microsoft Image Composer from Visual InterDev by clicking a toolbar icon or clicking images directly from within the IDE. Image Composer can automatically save images directly to your Microsoft Visual InterDev or FrontPage 97 project. </p>
<p>
You can also use Image Composer alongside Microsoft GIF Animator to create animated GIFs. Because Image Composer manipulates images as sets of sprites, it is easy to move and manipulate individual elements of a picture to create animations. </p>
<p>
Visual InterDev includes a useful utility, Music Producer, for creating audio tracks for use on Web sites. Music Producer employs Microsoft Music Technology (MMT) to generate MIDI audio tracks from music templates and styles. These templates are more versatile and powerful than static music clips because they use styles to define entire musical genres (such as samba or Texas swing) as well as to change tempo, key, and instruments. By making simple changes to style parameters, even first-time users can create useful audio tracks immediately. Music Producer includes over 100 predefined styles, which can generate a nearly infinite number of unique musical tracks for Web sites. The article "The Microsoft Visual InterDev Multimedia Package" page 34 in this issue describes these tools in more detail. For a step-by-step introduction to sprite animation in Image Composer, check out page 54.</p>
<h2>Where to Learn More</h2>
<p>
The release version of Microsoft Visual InterDev will be available later this year. A free beta version of the product, and all the fun tools that go along with it, is available for download at http://www.microsoft.com/vinterdev. This Web site also contains pointers to white papers, sample applications, design-time controls, and other information. And don't forget to check out the other articles, on multimedia tools, data tools, and design-time controls, all in this issue of <i>MIND</i>!                                                                                               </p>
</font></BODY>
</HTML>

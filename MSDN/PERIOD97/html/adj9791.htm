<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allowing Access 2.0 and 97 Users to Work Together</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">
<h1>Allowing Access 2.0 and 97 Users to Work Together</h1>
<p>
<i>by Patrick L. Steiner</i></p>
<p>
In our July 1997 article "Access 97 Conversion Issues," we discussed some conflicts that exist among different Access versions and how you can work around them. This month, we'll address key issues involved in letting Access 2.0 and 97 users work together. By that, we mean giving both types of users the ability to update and use common database tables--even though they'll be working in separate databases. </p>
<p>
If you're fortunate enough to convert all your users to Access 97 simultaneously, you'll still find this article useful in many respects since Access 97's built-in conversion tool rarely converts all database elements properly. You can download our sample files (sept97.zip) from www.cobb.com/adj; click the Source Code link. </p>
<h2>Why not convert everything to Access 97?</h2>
<p>
Many reasons prohibit converting all your databases to Access 97. Following are some situations I've dealt with:
<ul>
<li>
Business-critical applications written in Access 2.0 must be proven to work in Access 97. I've discovered that the VBA code has slightly different interpretations in Access 97--code that runs fine in Access 2.0 sometimes generates different (and undesirable) results in Access 97.<br><br></li>
<li>
You may have too many users to convert simultaneously. The migration process from 16-bit to 32-bit operating systems and application software isn't instantaneous. Some users will be delayed by days, weeks, or months, depending on how many users are affected and where these users are located physically (some may be in remote offices).<br><br></li>
<li>
Upgrades aren't free. Cost can certainly be a reason to spread mass conversions over time.<br><br></li>
<li>
You need an insurance policy: a backup. Then, if your Windows 95 or NT system develops problems, you'll have a reliable backup system if all else fails.</li>
</ul>
<p>
You may be wondering, "Why not have the Access 97 users open and use the 2.0 database?" First, the Access 97 users will be prompted to convert the database when they open it. You don't want this conversion to take place if you still have 2.0 users, since they won't be able to use the 97 database. Second, you'll eventually convert the database to Access 97; the technique we'll demonstrate will let you work out the kinks in 97 while keeping all your users happy.</p>
<h2>An overview of the steps</h2>
<p>
The good news is that your Access 2.0 database will remain the same. You'll use it to create a similar database in Access 97 using the built-in database conversion utility. Next, you'll delete all tables in the Access 97 database, then re-attach (link) them from the Access 2.0 database. Finally, you may need to upgrade some VBA code. We'll highlight the most common issues in this article.</p>
<h2>Step 1: Create the Access 97 database</h2>
<p>
The first step is normally quick and easy. From within Access 97, choose Tools | Database Utilities | Convert Database.... <b>Figure A </b>shows the resulting Database To Convert From dialog box. Locate the directory that contains your Access 2.0 database, then highlight the database and click the Convert button. </p>
<p>
<img src="adj9791a.gif" border=0></p>
<p>
<b>Locate your Access 2.0 database in the Database To Convert From dialog box.</b></p>
<p>
Next you'll see the Convert Database Into dialog box shown in <b>Figure B</b>, prompting you to enter a name for the Access 97 database you're about to create. I prefer to name the 97 database 97_OldDB.MDB, where <i>OldDB</i> is the name of the Access 2.0 database. (In our example, the original 2.0 database is named Convert.MDB, so the new one is named 97_Convert.MDB.) After you enter the name, click Save; Access will automatically convert all objects (tables, queries, forms, and so on) to the equivalent Access 97 structures. </p>
<p>
<img src="adj9791b.gif" border=0></p>
<p>
<b>The Convert Database Into dialog box prompts you for an Access 97 database name.</b></p>
<p>
Access 97 converts, compacts, and compiles the 2.0 database. If your database doesn't convert properly, Access 97 may tell you that it needs to be repaired; however, repairing the database in 2.0 and then reconverting rarely works. In this situation, I've found the best way to isolate the problem(s) is to create a new Access 97 database, then import all objects (tables, queries, and so on) from the 2.0 database. Doing so isolates the object that Access 97 doesn't like. (You reach Access 97's Import command by choosing File | Get External Data | Import... from the main menu.) Depending on the complexity of the object, you can either try to fix it in Access 2.0 or re-create it manually in Access 97. </p>
<h2>Step 2: Use common tables</h2>
<p>
Access 97 can work with Access 2.0 tables. Therefore, you'll delete all the Access 97 tables you imported, then re-attach (link) the Access 2.0 tables. In this way, you'll update all users and let them work with the same tables.</p>
<p>
Deleting the tables is easy. In the database window, highlight each table, then press the [Delete] key (or press [Shift][Delete] to avoid the confirmation dialog box). You can also right-click each table and choose Delete. </p>
<p>
Attached tables are called <i>linked</i> tables in Access 97. To link the Access 2.0 database tables, choose File | Get External Data | Link Tables.... In the resulting Link dialog box, highlight the Access 2.0 database (Convert.MDB) as shown in Figure C and click the Link button. </p>
<p>
<img src="adj9791c.gif" border=0></p>
<p>
<b>The Link dialog box prompts you for the Access 2.0 database name.</b></p>
<p>
Next, the Link Tables box will display the tables available from the 2.0 database, as shown in Figure D. Click the Select All button, then the OK button.</p>
<p>
<img src="adj9791d.gif" border=0> </p>
<p>
<b>In this dialog box you choose which tables to link.</b></p>
<h2>Step 3: Clean up any problems</h2>
<p>
In all fairness, Access 97 does an excellent job of converting your tables, queries, forms, reports, macros, and modules (even though we didn't use the converted tables because we linked them). The biggest problem areas you'll encounter are with VBA (formerly Access Basic) code and 16-bit API calls. </p>
<p>
You'll need to upgrade any 16-bit API calls to their 32-bit equivalents. However, we won't address specifics about the API calls in this article, because there are reference books as thick as <i>War and Peace</i> dealing with this subject.</p>
<p>
In categorizing the VBA code problems, most will fall into the area of recordsets. Linked tables have restrictions on how you work with them in code. This limitation has been the case with all versions of Access, so it's nothing new--but since you've linked all of your tables, your code may need some modifications.</p>
<p>
Listing A shows a function that would work if the Sales table wasn't linked. But since the table <i>is</i> linked, the opentable statement is an invalid operation and runtime error 3219 occurs. One way to correct this problem is to modify the line</p>
<pre>Set RS = DB.OpenRecordset("Sales", dbOpenTable)</pre>
<p>
to read as follows:</p>
<pre>Set RS = DB.OpenRecordset("Sales", _
<code>dbOpenDynaset)</code></pre>
<p>
Listing B demonstrates another technique that involves declaring the database variable (DB), as opposed to the CurrentDB(), to be the database that owns the linked table. I use this technique whenever the attached table includes an index--unlike the code in Listing A, this code works with indexed tables.</p>
<h2>Access security</h2>
<p>
More good news! Access 97 will use the existing SYSTEM.MDA if you implemented security on your Access 2.0 database. Thus, to avoid a time-consuming and potentially frustrating build of a new security file, just point all users to the 2.0 workgroup file. In case you decide to make a new security database (workgroup file), note that Access 97 now uses the default extension MDW rather than the MDA extension used in version 2.0.</p>
<h2>Conclusion</h2>
<p>
In a perfect environment, there'd be no need to support Access 2.0 and 97 users concurrently using the same tables. But Access 2.0 retains a large following, and there are many 16-bit operating systems still chugging along fine (like Windows 3.x). If you're one of the many who has to support this environment, the steps outlined in this article will not only provide you a solution today, but will also take you most of the way towards a completely converted 97 database.</p>
<p>
When all users are running Access 97, simply delete the linked tables from the 97 database, then import them from the 2.0 database into the 97 database. You should manually re-create any table relationships. That's all, folks!  </p>
<p>
<b>Listing A: Example code that will fail on a linked table</b></p>
<pre><code>Function Test1() As Integer

'-----------------------
' Purpose:  Open an attached table and loop
' through records. This will generate a runtime
' error #3219 because the table is linked, and
' the open table statement is invalid with the
' current database.
'-----------------------

Dim DB As Database
Dim RS As Recordset

Dim iRec As Long

Set DB = CurrentDb()
Set RS = DB.OpenRecordset("Sales", dbOpenTable)

iRec = 0
Do Until RS.EOF
  iRec = iRec + 1
  Debug.Print iRec &amp; ": " &amp; RS![Customer]
  RS.MoveNext
Loop

RS.Close
End Function</code></pre>
<p>
<b>Listing B: Opening a linked table by declaring the foreign database instead of CurrentDB(&nbsp;)</b></p>
<pre><code>Function Test1() As Integer

Function Test2() As Integer

'-----------------------
' Purpose:  Open an attached table via opening a
' foreign database (instead of CurrentDB() as in
' most cases).  Loop through all records.
'-----------------------

Dim DB As Database
Dim RS As Recordset

Dim iRec As Long

Set DB = OpenDatabase("D:\Cobb\Conversion97\Convert.Mdb")
Set RS = DB.OpenRecordset("Sales", dbOpenTable)

iRec = 0
Do Until RS.EOF
  iRec = iRec + 1
  Debug.Print iRec &amp; ": " &amp; RS![Customer]
  RS.MoveNext
Loop

RS.Close

End Function
</code></pre>
<p>
<i>Patrick Steiner is the MIS coordinator for marketing services at American Commercial Barge Line Company in Jeffersonville, Indiana. He's been developing Access solutions since the program's initial release in 1992. You can reach Pat online at Hawk812@msn.com.</i></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Active Messaging to Create and Send E-mail Messages </title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<Font face="verdana,arial,helvetica" size="2">

<h1><a name="usingactivemessagingtocreatesendemailmessages"></a>Using Active Messaging to Create and Send E-mail Messages</h1>
<p class=indent>
by Suzie Adams</p>
<p>
In the article, "Using Active Messaging to Retrieve E-mail from the Inbox," we created a simple application to read E-mail from a user's Inbox. Building on that foundation, the next step is to create an application that uses the Active Messaging Library to create and send an E-mail message. In this article, we'll create two pages. The first page will allow the user to enter the <i>from</i>, <i>to</i>, <i>subject</i>, and <i>message</i> contents of the E-mail message. The second page is a non-visual page and will create and send the message itself. When the processing on the non-visual page is complete, the page will call the InBox.asp page, which we created in the previous article. InBox.asp will then display the contents of the inbox that should now include the message we just created.</p>
<h3>Requirements</h3>
<p>
As always, we'll use Visual Interdev to build our ASP application. For this example, you'll need access to an Exchange 5.0 server and an IIS 3.0 Web server. You must also have a valid E-mail account and have installed the Active Messaging DLLs. </p>
<h3>Completing the form</h3>
<p>
To begin, create a new page in the ActiveMessaging project called <i>NewMessages</i>. This page will allow us to enter the from, to, and subject lines, as well as the content of the E-mail we're going to create. You could also use this page to select the recipient of the E-mail by reading the Exchange server's address book. </p>
<p>
The code in Listing A contains the HTML required to accomplish these tasks. The form also contains an HTML button that will submit the form to a new page called SendMessage.asp that we'll create shortly. You should place the HTML displayed in Listing A between BODY and HTML tags in the .asp page you just created.</p>
<p>
<b>Listing A: The NewMessage.asp HTML</b></p>
<pre><code>&lt;Form method="POST" action="SendMessage.asp"&gt;
&lt;center&gt;
&lt;table&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;New Message&lt;/strong&gt;&lt;td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;To:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" size="80" name="Recipient"&gt;&lt;td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;From:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" size="80" name="From"&gt;&lt;td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Subject:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" size="80" name="Subject"&gt;&lt;td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Message:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" size="80" name="MessageText"&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;BR&gt;
&lt;input type="submit" name="Send" value="Send" &gt;
&lt;/center&gt;

&lt;/Form&gt;</code></pre>
<p>
<b>Figure A</b></p>
<p>
<img src="asp97c3a.gif" border=0></p>
<p>
<b>NewMessages.asp allows the user to create a new E-mail message.</b></p>
<h3>Sending the message</h3>
<p>
Next, we'll create the SendMessage.asp page. This page will compose the E-mail message from the values posted to it from the NewMessages.asp form. To begin, create the new ASP page and name it <i>SendMessage.asp</i>. In this page, write the code that will create the MAPI session and then log on to the Exchange Server. You'll find the code we used to accomplish this in Listing A of the article, "Using Active Messaging to retrieve E-mail from the Inbox." The From field in the NewMessages.asp page allows the user to log on to the Exchange Server. </p>
<p>
Next, you need to include the error-checking statements to ensure a successful login, as we also did in the previous example. If the login is successful, add a new message to the messages collection, then set the subject and text properties of the new message. Next, add a new recipient to the recipient's collection and set the recipient to the user in the To field. Then, resolve the recipient's E-mail address to ensure its delivery. Finally, if everything is successful, you can send the message.</p>
<p>
<b>Listing B: The SendMail.asp Active Server script</b></p>
<pre><code>&lt;%
On Error Resume Next

From = Request("From")
sTo = Request("Recipient")
Subject = Request("Subject")
Body = Request("MessageText")

' Hard code this to your Mail server name.
bstrServer = "VIPER"

Dim objSession
Dim bstrProfileInfo

Set objSession=Server.CreateObject("MAPI.Session")
bstrProfileInfo = bstrServer + chr(10) + From

objSession.Logon "","",False,True,0,True,bstrProfileInfo
Set Session("objSession") = objSession

If Err.Number &lt;&gt; 0 Then
   Response.Write("Unable to connect to Mail Server! &lt;BR&gt;")
   Response.Write("Error source: " &amp; Err.Source &amp; "&lt;BR&gt;")
   Response.Write("Error number: " &amp; Err.Number &amp; "&lt;BR&gt;")
   Response.Write("Error description: " &amp; Err.Description &amp; "&lt;BR&gt;")
   Err.Clear
Else
       
    Set objMessage = objSession.Outbox.Messages.Add
    objMessage.Subject=Subject
    objMessage.Text=Body

    Set objonerecip = objmessage.Recipients.Add
    objonerecip.Name = sTo
    objonerecip.Resolve

    objMessage.Send showDialog=False
End if

Response.Redirect "InBox.asp"
%&gt;

</code></pre>
<p>
The complete code for SendMail.asp is shown in Listing B. Notice that, once the mail has been sent, the last line redirects the user to the InBox.asp page we created in the previous article. Depending on the traffic on your network, you should soon see the new message appear in the table. If you don't see it immediately, refresh the page several times, and it will eventually appear, as shown in Figure B. You can also view the message from your exchange client, as Figure C illustrates.</p>
<p>
<b>Figure B </b></p>
<p>
<img src="asp97c3b.gif" border=0></p>
<p>
<b>The new message appears in the InBox table.</b></p>
<p>
<b>Figure C </b></p>
<p>
<img src="asp97c3c.gif" border=0></p>
<p>
<b>You can also view the messages from within the Exchange Client.</b></p>
<h3>Conclusion</h3>
<p>
Active Messaging allows you to easily utilize Exchange Server 5.0's functionality through Active Server pages. In this article, we've shown you a technique for creating and sending E-mail with Active Messaging.</p>
<p>
-----------------------------</p>
<p>
Suzie Adams is a senior consultant with Financial Dynamics, a client/server and Internet solutions consulting firm in McLean, Virginia. She has worked in the application development area for more than 11 years and currently focuses on the design and development of active content Web applications.</p>
<p>
-----------------------------</p>
<p>
This article is reproduced from the December 1997 issue of <i>Active Server Developer's Journal</i>. <i>Active Server Developer's Journal</i> is an independently produced publication of The Cobb Group. No part of this article may be used or reproduced in any fashion (except in brief quotations used in critical articles and reviews) without prior consent of The Cobb Group. To contact The Cobb Group, please call (800) 223-8720 or (502) 493-3200.</p>
<p>
Copyright © 1997 The Cobb Group, a division of Ziff-Davis Inc. The Cobb Group and The Cobb Group logo are trademarks of Ziff-Davis Inc. All rights reserved. Reproduction in whole or in part in any form or medium without express written permission of Ziff-Davis is prohibited. </p>
</font></BODY>
</HTML>

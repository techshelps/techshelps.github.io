<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Publishing Databases on the Intranet Using Personal Web Server and Microsoft Access97</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1>Publishing Databases on the Intranet Using Personal Web Server and Microsoft Access97</h1>
<p>
With Personal Web Server (PWS) for Windows® 95 and Microsoft® Access 97, developers can build small data-based intranets using only basic skills and older machines. PWS is an inexpensive, low-maintenance solution for light-traffic applications such as intranets for small businesses or departments in large businesses. It's also useful for testing HTML code before uploading to the server. </p>
<p>
PWS offers HTTP and FTP services and supports ISAPI extensions and CGI, though it does not support Java™. If your access volume increases or you need additional functionality, you can convert the project to Internet Information Server (IIS) running on Windows NT®, since PWS provides a subset of IIS functionality.</p>
<p>
In this article I will show you how I created a data-based intranet using a 486 as my intranet server. Despite the older hardware, I was able to link to it and run multiple queries from different machines at the same time. The skills I needed to accomplish this were somewhat unusual: a splash of networking and operating-system savvy for PWS, a dash of HTML expertise for publishing static Web pages, and a dollop of database development experience for publishing dynamic pages.</p>
<p>
PWS and Microsoft Access 97 complement each other well. The ISAPI support in PWS enables it to field calls to the IIS Internet Database Connector (IDC), which is used by Microsoft Access to provide dynamic pages to browser clients.</p>
<p>
Microsoft Access 97 replaces the old Internet Assistant and IIS add-in with a new, integrated menu command and an associated Publish to the Web Wizard. With the new command, you can publish static pages over a Web and share dynamic database content with browser clients. In addition, the Microsoft Access 97 enhanced Web functionality lets you create hyperlinks.</p>
<p>
Getting and starting PWS is easy. Simply download and run pws10a.exe from http://www.microsoft.com/ie/download/ieadd.htm. PWS ships free with all new copies of Windows 95 because it's part of the Internet Explorer Starter Kit. You can access the PWS Properties dialog box shown in Figure 1 from the PWS icon in the taskbar or the PWS icon in the Control Panel. You start and stop the server and control its behavior from here.</p>
<p><img src="PWSfig01.gif"></p>
<p><b>Figure 1: PWS Properties</b></p>
<p>
After you start the server, users can access Web pages on your server through the command http://<i>computer</i>, where <i>computer</i> is your machine's name. Your server can be accessed locally from the server's own browser, over a network connection from another computer, or via a telephone line. A skeleton home page called default.htm, which is accessible from the Properties dialog box, gives you a starting point for your own custom home page and shows how to call to a counter that tracks the number of times the page is opened.</p>
<p>
The General tab of the Properties dialog box displays the address of your server and its default home page. Click the More Details button to open HTML-based documentation in your browser. If the online Help doesn't supply enough detail, there's some additional documentation on how to start, configure, remotely administer, and monitor the server; how to share folders, and ensure security at http://www.microsoft.com/kb/articles/q158/7/21.htm.</p>
<p>
The Startup page of the Properties dialog box contains the controls to stop and start PWS (see Figure 2). The Options group lets you turn the automatic PWS launch on or off during the Windows 95 startup. A second check box in the Options group lets you set whether to show the PWS icon in the taskbar. If you clear this check box, you can only access the PWS properties dialog through the Control Panel.</p>
<p><img src="PWSfig02a.gif"></p>
<p><img src="PWSfig02b.gif"></p>
<p><b>Figure 2: The startup and services tabs in the PWS Properties dialog</b></p>
<p>
The Services tab lets you control the availability of HTTP and FTP services on your server. By default, the HTTP service launches when you start your server. Change that by selecting the HTTP service in the Services group and clicking the Properties button. The resulting dialog box also offers controls for setting the HTTP service home root directory and home page. To alter the starting status of the FTP service, select it and click the Properties button. The resulting dialog box also lets you change the FTP service home root.</p>
<p>
The Administration tab includes a single button that you can click to open a set of hyperlinked pages in your browser. These pages control three key functions: WWW administration, FTP administration, and local user administration. When you click on any of these, it brings up a page with a set of pseudo-tabs. The WWW Administration page contains three pseudo-tabs: Service, Directories, and Logging. Click the Service pseudo-tab to control access to the HTTP service through settings for password authentication, the maximum number of users, and the longest connection timeout.</p>
<p>
The Directories pseudo-tab (see Figure 3) lets you control settings for existing directories and add new ones. This is also where you enable your default home page and set file browsing rights for PWS folders. The typical PWS installation sets up two directories: C:\Program Files\Websvr and C:\Webshare. The Websvr directory contains several subdirectories below it, but you can ignore them. The Webshare folder contains three folders. Two of these are the default home root directories for the HTTP service (Wwwroot) and the FTP Service (Ftproot). Store pages that you want to publish over your Web in Wwwroot; store files that you want to make accessible for downloading in Ftproot. The third folder, Scripts, stores user-developed scripts as well as Counter.dll, which records the number of visits to a page. </p>
<p><img src="PWSfig03.gif"></p>
<p><b>Figure 3: The WWW Administrator directory controls</b></p>
<p>
The subdirectories in the Webshare folder have two access properties. Click the Edit hyperlink next to a subdirectory's name to view a form for setting these properties. The Read checkbox determines whether a folder can be browsed. To permit browser access to the HTTP service, select the Wwwroot Read property. The Execute checkbox determines whether script files in a directory run. </p>
<p>
You can also set the Read and Execute properties directly from Windows Explorer. After you install PWS, when you select Sharing from a file's context menu, you'll see a new Web Sharing button in the dialog box (see Figure 4). Click this button if you want to expose the folder through either the HTTP or FTP services. Separate pairs of check boxes let you select the Read or Execute Script properties for either service. </p>
<p><img src="PWSfig04.gif"></p>
<p><b>Figure 4: PWS Wwwroot Properties</b></p>
<p>
The PWS documentation recommends that you place all the files that users can browse in the Wwwroot folder-otherwise it's easy to lose track of them. You can organize your files into subfolders by project. Click the Add hyperlink on the Directories tab to create more folders for browsing. Use the Directory text box to specify the location of the folder. The Browse button next to the checkbox lets you browse to the folder if you prefer. This dialog also permits you to create a new folder. In the Directory Alias on the Directory Add dialog, enter the name by which browsers will be able to access your folder. Click the OK button to update your service and return to the Directories tab. If you later decide that you do not want the file to be browsed, click the Delete hyperlink across from the Directory name. This does not remove the folder from your computer's drive-just from the service.</p>
<p>
The Logging tab permits access to controls that log behavior on your service. The "Enable logging" checkbox invokes this function. Other controls on the tab let you determine the frequency for creating new log files and their storage location. The documentation states that the service log appears in Inetserver_event.log. I also discovered an undocumented service log named in<i>yymm</i>, where <i>yy</i> is the year and <i>mm</i> is the month (for example, in December, 1996, the file name is in9612). The undocumented log, which reported client browser activity and administration dialog behavior, was easier to read and more complete.</p>
<p>
The FTP administration dialogs differ from those for the HTTP service in ways that reflect the special nature of the FTP service. An extra FTP administration tab permits the setting of various messages that an FTP client encounters, such as the Welcome and Exit messages. The Service tab for the FTP service includes a hyperlink to a dialog that shows how many current sessions are running. Use this current sessions dialog to disconnect any individual user or all users.</p>
<h2>PWS Security</h2>
<p>
PWS has a four-tier security model. The tiers pertain to the connection type, user-level security, password authentication, and share permissions. Connection security functions differently for the HTTP service versus the FTP service. Users can connect anonymously with either. This type of connection is available for both HTTP and FTP in their administration Service tabs. The FTP service permits a restriction to anonymous connections, which discourages intruders from trying to gain access to the administrator account. HTTP service does not restrict anonymous connections.</p>
<p>
The second security tier is user-level access security with the HTTP service. With File and Printer sharing enabled, a Webmaster can use pass-through access security to a Windows NT or  NetWare server. To use either, the server must have File and Printer sharing enabled. Access the Network properties dialog from the Network icon in the Control Panel to set File and Printer sharing. If you choose user-level access control with File and Printer sharing enabled, then you must designate either a Windows NT or NetWare server to support pass-through validation.</p>
<p>
When File and Printer sharing are not enabled, PWS can maintain a list of authorized users through the Local User Administration hyperlink on the first administration page. A three-tabbed dialog lets you designate users and groups and assign users to groups. A PWS administrator can set passwords for individuals. Local security, which is incompatible with dial-up networking, supports using PWS for an intranet across a LAN.</p>
<p>
The third security tier specifies the type of password authentication: basic or Windows NT challenge/response. Administrators can choose either option from the Password Authentication group on the HTTP Service tab. To use Windows NT challenge/response authentication, a Webmaster must connect PWS to a Windows NT domain server. Windows NT challenge/response password authentication encrypts the username and password before sending them across the network. But basic password authentication uses only base64 encoding, which anyone with access to the <br>
link between a browser and PWS can decode easily. </p>
<p>
In Figure 4, Cab486, the PWS Webmaster, has full access, but Cab586 has a typical visitor permission of read-only. Both users are on an intranet with local user security.</p>
<p>
The final security tier controls share permissions. With anonymous logins, PWS sets share permissions globally. If PWS employs user-level security, you can set share permissions for individual users. Selecting the Sharing property <br>
for a folder on the Windows Explorer shortcut menu gives access to the share permissions.</p>
<h2>Microsoft Access 97 Hyperlinks</h2>
<p>
With the release of Office 97, Microsoft expanded the notion of a hyperlink. Net surfers use hyperlinks as shortcuts to other URLs or other parts of the same page. Microsoft Access 97, along with the rest of Office 97, lets hyperlinks point at files on a user's hard drive, a network hard drive, or another part of the current file. Each Office component has a slightly different definition of the part of a file to which a hyperlink can jump: Word 97 allows bookmarks, Microsoft Excel offers jumps to worksheet cells, and PowerPoint® lets you pick an individual slide in a presentation. Microsoft Access 97 permits jumps to a database or objects within a database, such as forms and tables.</p>
<p>
Microsoft Access 97 supports two types of hyperlinks: bound and unbound. Bound hyperlinks are stored in the table via the hyperlink datatype. The new hyperlink datatype has three parts: displaytext, address, and subaddress. Each part can contain up to 2,048 characters. The general syntax for representing hyperlinks is displaytext#address#subaddress, but you don't need all three for every hyperlink.</p>
<p>
Each hyperlink must have an address, a subaddress, or both. The address references a URL page or file, and the subaddress points to something within the address, such as a form or table in a database file. If there is only a subaddress, then the hyperlink points to an object in the current database. The displaytext portion of the hyperlink is the label to be used instead of the hyperlink address and subaddress. When the displaytext is missing from a hyperlink, the address and subaddress appear.</p>
<p>
The Insert Hyperlink command offers an easy way to insert hyperlinks. Open a form in design view or a table in datasheet view. Invoke the Insert Hyperlink command to display the Insert Hyperlink dialog (see Figure 5). This dialog includes two browse buttons, one for the address and the other for the subaddress. With these buttons, you can browse your way to the address or subaddress for a hyperlink, then click OK to insert the address in the dialog. After setting the address, the subaddress, or both, click OK to close the dialog and insert the hyperlink in the table or on the form. Change to form view, then click the hyperlink in the table to jump to the address. </p>
<p><img src="PWSfig05.gif"></p>
<p><b>Figure 5: Inserting a hyperlink</b></p>
<p>
The "Use relative path for hyperlink" checkbox on the Insert Hyperlink dialog lets you write hyperlink labels to your database in two formats. You can use relative paths to create hyperlinks to a file in the same folder, with or without this checkbox selected. If you create a hyperlink and leave the checkbox clear, you create what is called an absolute address, and this address portion of the hyperlink label shows a path.  If you create a second hyperlink to the same file with the checkbox selected, the address label does not show a path. Either hyperlink works equally well as long as both files remain in their current locations. If you move the files, the hyperlink with the absolute address fails. The one created with a relative path continues to function.</p>
<p>
Figure 6 shows a pair of forms illustrating different ways of making hyperlinks work on forms. The form on the left illustrates different techniques for jumping to a fixed location. The top hyperlink label on this form includes the complete address of an HTML file on my intranet server. The Insert Hyperlink command created the label. Clicking on the label transfers control to the index.htm file in the HowToSucceed virtual path on my intranet server. Clicking the Back button on Internet Explorer closes the application and returns control to the Microsoft Access file. </p>
<p><img src="PWSfig06.gif"></p>
<p><b>Figure 6: Implementing hyperlinks on forms</b></p>
<p>
The second label in the left form jumps to the same location as the top hyperlink label, but it does not show an address. Since a hyperlink on a form is a label, you can enter any text you want for its Caption property, as is shown in the second hyperlink. All Microsoft Access 97 labels include Hyperlink Address and Hyperlink SubAddress properties. In Figure 6, I inserted the Hyperlink Address property setting from the first label into the second label.</p>
<p>
The third label on the left form in Figure 6 jumps to a PowerPoint 97 file in the My Documents folder. This PowerPoint file generated the files in the HowToSucceed virtual path on my intranet server. The Caption and Hyperlink Address properties of the third label control its display and function. Clicking the label transfers control to the file in the My Documents folder. As before, the Back button on the Web toolbar in PowerPoint does not close PowerPoint as it returns control to Microsoft Access. </p>
<p>
The final control on the left form is a button. Since command buttons have Caption, Hyperlink Address, and Hyperlink SubAddress properties just like labels, they can perform the function of a hyperlink label. Hyperlinks can transfer control to other database objects within a Microsoft  Access app. This is one common use for buttons on forms in Microsoft Access. Hyperlinks are a much more efficient way to do this than using Visual Basic for Applications code because forms without code load much faster than those with code modules. According to the documentation, replacing Visual Basic for Applications navigation code with hyperlink buttons is one way to speed&nbsp;up&nbsp;Microsoft&nbsp;Access&nbsp;97&nbsp;apps.</p>
<p>
All of the hyperlink jumps on the left form in Figure 6 are to a fixed location. The form on the right jumps to any of five different locations. A table stores the hyperlink datatypes that point to the locations. Clicking the built-in navigation buttons at the bottom of the form moves to the appropriate record, updating the table's hyperlinks across the text box. The form is bound to the table of hyperlinks, and the control source for the text box is the hyperlink field in the table. Clicking the button with the Jump To It caption performs a jump to the hyperlink in the text box below it.</p>
<p>
The following event procedure shows the code that controls the hyperlink. A user invokes the procedure by clicking the command button cmdJumpToIt. The HyperlinkPart method parses a hyperlink into its parts. The two references to this method parse the hyperlink in the text box into its hyperlink address and subaddress parts. The FollowHyperlink method follows the hyperlink to the address and subaddress extracted by the two HyperlinkPart calls. Both the HyperlinkPart and FollowHyperlink methods have an implied Application object.</p>
<pre><code>Private Sub cmdJumpToIt_Click()
Dim Address As String
Dim SubAddress As String
Address = HyperlinkPart(Me!txtMyHyperlinks, _
   acAddress)
SubAddress = HyperlinkPart(Me!txtMyHyperlinks, _
    acSubAddress)
FollowHyperlink Address, SubAddress
End Sub
</code></pre>
<p>
Because the form on the right uses a procedure, in theory it should not load as quickly as the one on the left. However, I did not notice any appreciable difference in the load times between the two forms. It is possible that with a long, elaborate event procedure, the form on the right might load more slowly. As the number of hyperlinks in the record source for the form grows, the table load time will slow. With a short list, this technique is effective for giving database users easy access to a collection of hyperlinks.</p>
<h2>Publishing Static Web Pages</h2>
<p>
Microsoft Access makes it easy to publish static pages to the Web (those that don't change until a new publication cycle replaces them). Static reports often make sense when you need a reference point, for example, or when data changes infrequently. Static reports are often faster to work with than dynamic reports because there is no need to recompute queries each time you refer to their contents. Monthly, quarterly, and annual reports for income, expenses, and profits are good examples of reports to publish with static pages. Product catalogs and food menus are other examples of reports that change infrequently.</p>
<p>
There are two means of publishing static Web pages from Microsoft Access databases. Use the File Save As/Export command when you only need to publish a single object. This technique is only appropriate for a single table, query, form datasheet, or report at a time. To publish more than one or two objects to the Web, consider the File Save as HTML command. This command invokes the Publish to the Web Wizard.</p>
<p>
The procedures for using the File Save As/Export command vary slightly for reports versus tables, queries, and form datasheets. Microsoft Access publishes the latter three database objects as a single table no matter how many rows are in the datasheet. Scroll bars on the side of the browser permit users to pass forward and backward over the records in a table. Reports, on the other hand, are normally paginated. Microsoft Access therefore publishes reports as a series of separate pages, and includes hyperlinks to navigate pages.</p>
<p>
The File Save As/Export command displays the Save As dialog. Select the To an External File or Database radio button and click OK. This brings up the Save dialog. Indicate that you want to export the data for viewing with a browser by selecting HTML in the Save as type box. If the Save in box at the top of the dialog does not already point at the correct folder, browse to the one that you want to receive your HTML files. Type a meaningful name in the File name box for your static report. If you are publishing a table, query, or form datasheet, select the Save Formatted As checkbox. Also consider selecting the  AutoStart check box. This will open your static report in the browser immediately after publishing. Do not choose this option for a report object that is more than one page long since it fails to properly format the data for publishing.</p>
<p>
If you click the Export button when the Save Formatted As checkbox is selected, the HTML Output Options dialog box will open before the data has been formatted for static publishing. Microsoft Access 97 offers several standard templates, and any of these will work properly for a single static page. The help file for the File Save As/Export command has hyperlinks that point to a couple of special help screens. These explain how to customize templates for purposes such as including your company's logo on the static&nbsp;report. You can choose one of the standard templates that ship with Microsoft Access 97. After the HTML template text box shows the correct template, click OK to start publishing.</p>
<p>
Figure 7 shows a page from a report based on a custom template. I adapted the template from a mix of a standard HTML&nbsp;template&nbsp;(Gray.html), a special example file (Nwindtem.html) that illustrates how to put a logo on a template page, and a help page that contains examples of the navigation hyperlinks for moving through a multipage report. </p>
<p><img src="PWSfig07.gif"></p>
<p><b>Figure 7: A report that uses a custom template</b></p>
<p>
To start, I copied the BODY tag in the Gray.html template so that the page had a tiled background. Next, I recolored my logo in Paint to match the background before converting the file format from BMP to GIF with Image Composer, a graphics utility that ships with FrontPage™ 97. Finally, I cut and pasted the navigation hyperlinks from a help file. The HTML code for the report template used in Figure 7 is shown in Figure 8.</p>
<p><img src="PWSfig08.gif"></p>
<p>
The Publish to the Web Wizard in Microsoft Access 97 can publish multiple reports in a single pass, as opposed to the File Save As/Export command, which can print only one report at a time. You access the Publish to the Web Wizard with the File Save as HTML command. Then, in typical wizard fashion, it takes you through a sequence of screens that simplify the process.</p>
<p>
One of the formats the wizard can generate is the switchboard table. Figure 9 uses a switchboard table to display a table of contents for the reports in a folder. Clicking the hyperlink in a row jumps to the first page of a report. This switchboard table also reports on the database object type that generated each report, along with the date that object was last modified. Finally, it includes a description for each report.</p>
<p><img src="PWSfig09.gif"></p>
<p><b>Figure 9: Switchboard table structure</b></p>
<p>
A switchboard table makes a great home page for a folder of static Web page reports. I placed all my reports in a folder named Northwind under Wwwroot. Then I assigned the Northwind folder a read status with the administration forms for PWS. I also referenced the switchboard as the home page for my browser. Then, whenever I open my browser, it automatically goes to that page. From there, I click a hyperlink to jump to whatever report I need to view.</p>
<p>
The switchboard table's structure is simple and easy to modify. The Publish to the Web Wizard initially created the switchboard in Figure 9 for two reports. I manually added a third row that references a report generated with the File Save As/Export command. All I had to do was copy the HTML code for a row. Finally, I edited the copied HTML to reflect the contents of the new row.</p>
<h2>Dynamic Web Pages</h2>
<p>
There are situations when only dynamic Web pages will serve your needs. Any kind of decision-support system where users perform ad hoc analyses calls for dynamic Web pages. A typical decision-support need is to get the latest sales figures and compare them to other periods (a week, a month, or a year ago). Customer service systems also require dynamic responses to answer questions about order placement, inventory, and payment history.</p>
<p>
The PWS lets you build dynamic pages with Microsoft Access 97 through the IDC and ODBC data sources. You do not need Microsoft Access 97 on a server to process Microsoft Access databases over a Web. However, having it on your server simplifies database maintenance. The IDC is a DLL called HTTPODBC that resides in the Scripts directory of your PWS server.</p>
<p>
Before you can process any Microsoft Access databases, you must create a 32-bit ODBC data source that points to an MDB file. Two text files control the processing and display of return sets in a browser. Both text files will typically reside in the Scripts directory.</p>
<p>
The first control file is the IDC file, which must include three fields. The first required field points to an ODBC data source. The second field includes a SQL statement that defines the Microsoft Access database processing. The third field points to the second control file (an HTX file) that controls the display of the return set at the browser. With IDC files, you can query, add, delete, and update database records since your only limitations are those of Microsoft Access SQL.</p>
<p>
The File Save As/Export command and the Publish to the Web Wizard in Microsoft Access 97 automatically create and store IDC and HTX files so you can perform simple database queries. One particularly useful feature is the ability to translate Microsoft Access parameter queries into HTML screens. These screens accept input for the parameter query and pass the parameter from the browser to the IDC file. By creating a hyperlink in Microsoft Access to the HTML file, you can create a complete client/server application with just Microsoft Access 97 and PWS. Client workstations running Microsoft Access 97 connect to the PWS server through a hyperlink to the HTML page. Users input some information, such as an order number, and the page automatically calls the correct IDC file. The system responds by running the IDC script and returning data through the associated HTX file.</p>
<p>
Figure 10 shows two Publish to the Web Wizard screens on the way to developing the HTML, IDC, and HTX files for a complete client/server application. Notice from the screen on the left that I selected the Invoices Filter query from the Northwind database. This is a parameter query that prompts for an order number and returns the corresponding invoice information. In the screen on the right, I selected the Dynamic HTX/IDC radio button. </p>
<p><img src="PWSfig10.gif"></p>
<p><b>Figure 10: Publish to the Web Wizard</b></p>
<p>
These two screens display the key choices for creating the HTML, IDC, and HTX files for a complete client/server system. The wizard puts all three files in the same directory. If you accept this option, then you should place all files in the Scripts directory and set permissions so that browsers can read them. If you prefer not to allow browsers to read your Scripts folder, then place the HTML file in another directory. This solution also requires you to edit the HTML code in the page that calls the IDC file. You must edit the HTML to reference the Scripts path from the HTML page's new folder.</p>
<p>
To complete the system, you need to add a hyperlink from Microsoft Access to the HTML page that prompts for an order number. To test the system, I just added another hyperlink to the table used as a record source in Figure 6. This let me start the system by moving to the record with the desired hyperlink and clicking the Run Query button, which brings up the browser with the prompt for an order number (see Figure 11).</p>
<p><img src="PWSfig11.gif"></p>
<p><b>Figure 11: A Web-based form</b></p>
<p>
Figure 12 shows the outcome of the query specified in Figure 11. Notice that the order number input in Figure 11 is 10248. There are three output records with that order number in Figure 12. The screens in Figures 11 and 12 are generated automatically by the Publish to the Web Wizard and the IDC. (Note that I  modified Figure 11 slightly to make it more visually pleasing.) </p>
<p><img src="PWSfig12.gif"></p>
<p><b>Figure 12: Query results</b></p>
<p>
With minimum expense and moderate effort, you can use the synergy between PWS and Microsoft Access 97 to create HTML-based database applications for intranets and low-traffic Internet sites. Whether you're developing an in-house application or testing an upgrade to an Internet site, you'll find PWS and Microsoft Access 97 to be useful additions to your toolbox.                                                                                                  </p>
</font></BODY>
</HTML>

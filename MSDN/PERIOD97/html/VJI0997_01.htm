<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Approaching the AFC: Building a Windows-Style Interface with Microsoft's Application Foundation Classes</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>


<h1>Approaching the AFC: Building a Windows-Style Interface with Microsoft's Application Foundation Classes </h1>
<p>
<i>Luke Cassady-Dorion</i></p>
<p>
Any attempts to argue that Microsoft is not trying to flood the Java market with various forms of Microsoft technology will surely be shot down. Microsoft openly states that its development tools are the best and fastest on the market. Through Java-COM bindings, and Java classes for writing Windows-only applications such as NT services, Microsoft is positioning Java as a great language for writing Windows-only applications. And now, with the release of Application Foundation Classes (AFC), Microsoft has become a prime vendor of pre-built Java widgets. </p>
<h3>AFC Anatomy</h3>
<p>
The AFC comprises two packages: <i>com.ms.ui</i>, which contains User Interface components (buttons, menus, etc.); and <i>com.ms.fx</i>, which contains classes for graphics and visual effects. </p>
<p>
Those familiar with components from Rogue Wave or Symantec (with Visual Café), will find the first package offers a major twist: Its look and feel is similar to that of 32-bit Windows GUIs; all components are built with graphic primitives, not peer classes. </p>
<p>
The second package fills gaps left by the AWT. For example, its classes make it possible to add shading, and to draw with lines thicker than one pixel. For those doing custom drawing in Java, this package is a huge time-saver.</p>
<p>
The AFC differs from Netscape's IFC in that it's not meant to replace AWT, but to complement it. Although plenty of additional functionality is available, the AFC event model is said to be fully compatible with the AWT (1.0.2 and 1.1). However, like Netscape's IFC, the AFC is written in "100% pure" Java, and is therefore available on all platforms.</p>
<p>
To explore the UI classes of the <i>com.ms.ui </i>package, we'll build some small dialog boxes, then move on to a larger toolbar project. We'll address the <i>com.ms.fx </i>package in future articles.</p>
<h3>Building the Perfect Box</h3>
<p>
In this first AFC project, we'll create the dialog box with AWT controls, and the dismissal button with AFC controls. In addition to demonstrating AFC controls, this example will show how easily AFC can coexist with AWT. </p>
<p>
We'll use two classes to build the dialog box. One is <i>UIPushButton</i>, a generic button class offering the following additional benefits:</p>
<p>
its initial look can be configured to be "raised" or "depressed"; and </p>
<p>
in addition to text, it can display any instance of the <i>java.awt.Component </i>class.</p>
<p>
To make our button mirror the Windows OK buttons we all know and love, we'll pilfer the check box that appears in so many Windows dialog boxes, and display it with the word "OK".</p>
<p>
<i>UIStateItem</i>, the second of our two classes and an indirect child of <i>java.awt.Component</i>, allows for the display of an image and a string of text in the same component. The code for the dialog box appears in Figure 1. The important parameters in its constructor are a <i>Vector</i> of <i>String</i> objects that form the text of the error message, a <i>String</i> object to display as the dialog title, and an <i>Image</i> object to use in the OK button.</p>
<p>
The button is instantiated with the following statement:</p>
<pre><code>UIPushButton okButton =
  new UIPushButton(new UIStateItem(pic,"OK"),
                   UIPushButton.RAISED);</code></pre>
<p>
Figure 2 shows the dialog box's appearance in 32-bit Windows.</p>
<pre><code>import com.ms.ui.*;
import java.awt.*;
import java.util.*;

public class ErrorWindow extends Dialog {

  public ErrorWindow(Vector data, String title, 
                     Frame parent, boolean modal, Image pic) {
    super(parent, modal);

      setLayout(new GridLayout(data.size()+1, 1));
      // Add the title
      setTitle(title);

      // Add the body
      for(int i=0; i&lt;data.size(); i++) { 
        Add(new Label((String)data.elementAt(i))); 
      } 

      Panel buttons = new Panel();
      buttons.setLayout(new GridLayout(1,2));
      buttons.Add(new Label(""));
      UIPushButton okButton = new 
        UIPushButton(new UIStateItem(pic,"OK"),
                     UIPushButton.RAISED);
      okButton.setName("OK");
      buttons.Add(okButton);
      Add(buttons);

      pack();
      setVisible(true);
  }

  public Insets getInsets() {
    return new Insets(30,10,30,10);
  }
}</code></pre>
<p>
<b>Figure 1: The code for the dialog box.</b></p>
<p><img src="lc_fig02.gif">
</p>
<p>
<b>Figure 2: An initial development with Microsoft's AFC.</b></p>
<pre><code>import java.awt.*;
import java.util.*;</code></pre>
<pre><code>public class Driver extends Frame {</code></pre>
<pre><code>public Driver() {
    // The Date class constructors used below
    // are deprecated in JDK 1.1.
    Date now = new Date();

    // Create a date object representing 05/08/1998
    Date notifyDate = new Date(98,4,8);</code></pre>
<pre><code>while(! notifyDate.equals(now)) {
      now = new Date();</code></pre>
<p>
}</p>
<pre><code>Vector vec = new Vector(1);</code></pre>
<p>
vec.addElement("Happy Birthday!");</p>
<pre><code>Image okPic =
      Toolkit.getDefaultToolkit().getImage("Ok.gif");
    ErrorWindow win =
      new ErrorWindow(vec, "Happy Birthday",
                      this, true, okPic);
    }</code></pre>
<pre><code>public static void main(String args[]) {
    Driver myDriver = new Driver();
  }</code></pre>
<p>
}</p>
<p>
<b>Figure 3: The code for the birthday notifier.</b></p>
<p><img src="lc_fig04.gif">
</p>
<p>
<b>Figure 4: Java does IE!</b></p>
<h3>Happy Birthday to Me</h3>
<p>
Now let's do something (slightly) useful with dialog boxes. In the next code example, we'll use our dialog class to create a birthday notifier. This simple application will create two <i>Date</i> objects: one representing the current date, and one representing my next birthday (05/08/1998). The application will then enter a loop, and exit only when the current date equals the date of my birthday. Then the application will present a "Happy Birthday" notification to me. The code for this application appears in Figure 3.</p>
<p>
One caveat: For the loop to terminate, its body must construct the new <i>Date</i> object at exactly midnight on May 8, 1998 (or whatever birth date you specify), with millisecond precision. Many system clocks have a granularity of greater than a millisecond, so under these, the loop may never terminate.</p>
<h3>For Our Next Trick</h3>
<p>
After that brief introduction, we'll attempt a more complex UI: a Java version of the Internet Explorer 3.0 toolbar. It is obviously outside the scope of this article to build a full working version of IE, but we can build a subset of its UI.</p>
<p>
The adjustable toolbars present in Internet Explorer (and in Visual Studio 97) use the classes <i>UIBand</i> and <i>UIBandBox</i>. <i>UIBand</i> represents an individual toolbar, while <i>UIBandBox</i> represents a group of <i>UIBand</i> objects. There are three <i>UIBand</i> objects: one containing the navigation icons, one containing the location field, and one containing the commonly used links. The three are grouped into a <i>UIBandBox</i> object.</p>
<p>
In designing the <i>UIBand</i> class, Microsoft engineers paid due attention to the usefulness of inheritance. This thoughtfulness is apparent in the <i>Add</i> method, used to add an entry to a <i>UIBand</i> object. This method accepts any instance of the <i>Component</i> class, allowing for the creation of some nice graphical menus. This and our earlier development suggest that the <i>UIStateItem</i> and <i>UIPushButton</i> classes will prove valuable in building the toolbar. </p>
<p>
The <i>UIPushButton</i> class works wonders for the navigation icons. However, additional work is necessary for the Favorites icon, which drops down a list of selected Web sites. To achieve this effect, we'll use the classes <i>UIMenuButton</i> and <i>UIMenuList</i>. <i>UIMenuButton</i> represents a button that displays a pull-down menu. Obviously, the pull-down menu requires the <i>UIMenuList</i> class. </p>
<p>
Listing One (beginning on page XX) contains the code needed to create the IE-style toolbar, and Figure 4 shows the class in action. The only method omitted from the listing is <i>loadImages</i>, which reads in all images from the hard drive, and forces their loading using the <i>MediaTracker</i> class.</p>
<p>
As you look over the code, note that it uses a slightly different version of the <i>UIStateItem</i> class. By passing in two images, you allow for one to be defined as "standard" display, and one to be defined as "hot" display; the "hot" state is achieved when the mouse pointer is over the <i>UIStateItem</i> object.</p>
<p>
Also, note how the <i>UIMenuButton</i> object is built. You first instantiate a <i>UIMenuList</i> object, then use its <i>Add</i> method to add the menu choices. You then create a <i>UIMenuButton</i> object, and pass the <i>UIMenuList</i> object to its constructor. Once the <i>UIMenuButton</i> is added to the screen, it will display its menu list whenever it's clicked.</p>
<h3>Conclusion</h3>
<p>
I hope this article has provided a good overview of the UI components available in the AFC, and particularly in the <i>com.ms.ui </i>package. In releasing these classes, Microsoft has done everyone a favor. As developers, we have a much easier time developing detailed GUIs, and as users of Java applications, we now can expect GUIs as rich as those of our favorite Win32 applications. </p>
<p><b>Begin Listing One - The IE Toolbar</b></p>
<p>
import com.ms.ui.*;</p>
<p>
import java.awt.*;</p>
<p>
public class BasicBrowser extends UIFrame {</p>
<p>
// Common state</p>
<pre><code>private Image backImage;
  private Image forwardImage;
  private Image stopImage;
  private Image refreshImage;
  private Image favImage;
  private Image printImage;
  private Image fontImage;
</code></pre>
<p>
// Hot state</p>
<pre><code>private Image backHotImage;
  private Image forwardHotImage;
  private Image stopHotImage;
  private Image refreshHotImage;
  private Image favHotImage;
  private Image printHotImage;
  private Image fontHotImage;

  public BasicBrowser() {
    setBackground(Color.lightGray);
    </code></pre>
<p>
// Load all images</p>
<pre><code>loadImages();
    </code></pre>
<p>
// Create the menu list</p>
<pre><code>UIMenuList myMenu = new UIMenuList();</code></pre>
<p>
// Add some favorite sites</p>
<pre><code>myMenu.add("Javasoft");
    myMenu.add("Microsoft");
    myMenu.add("Sun");
    myMenu.add("Informant");
    </code></pre>
<p>
// Create the menu button and associate the menu list</p>
<pre><code>UIMenuButton myLauncher =
      new UIMenuButton(new UIStateItem(favImage,
                       favHotImage, "Favorites", 0,
                       UIItem.ABOVE), myMenu);
    </code></pre>
<p>
// Create the band box</p>
<pre><code>UIBandBox myBox = new UIBandBox();
      </code></pre>
<p>
// Create the band</p>
<pre><code>UIBand menuOptions = new UIBand();
      </code></pre>
<p>
// Add the options to the menu</p>
<pre><code>menuOptions.add(new UIPushButton(
      new UIStateItem(backImage, backHotImage, "Back",
                      0, UIItem.ABOVE)));
    menuOptions.add(new UIPushButton(
      new UIStateItem(forwardImage, forwardHotImage,
                      "Forward", 0, UIItem.ABOVE)));
    menuOptions.add(new UIPushButton(
      new UIStateItem(stopImage, stopHotImage, "Stop", 0,
                      UIItem.ABOVE)));
    menuOptions.add(new UIPushButton(
      new UIStateItem(refreshImage, refreshHotImage,
                      "Refresh", 0, UIItem.ABOVE)));
    menuOptions.add( myLauncher );
    menuOptions.add(new UIPushButton(
      new UIStateItem(printImage, printHotImage, "Print",
                      0, UIItem.ABOVE)));
    menuOptions.add(new UIPushButton(
      new UIStateItem(fontImage, fontHotImage, "Font", 0,
                      UIItem.ABOVE)));
      </code></pre>
<p>
// Add the band to the band box</p>
<pre><code>myBox.add(menuOptions);
      </code></pre>
<p>
// Add the band box to the screen</p>
<pre><code>add("North", myBox);
  }</code></pre>
<p>
private void loadImages() {</p>
<p>
// Obtain references to all images</p>
<p>
backImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Back.gif");</p>
<p>
forwardImage = Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Forward.gif");</p>
<p>
stopImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Stop.gif");</p>
<p>
refreshImage = Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Refresh.gif");</p>
<p>
favImage =     Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Favorites.gif");</p>
<p>
printImage =   Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Print.gif");</p>
<p>
fontImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\Font.gif");</p>
<p>
backHotImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotBack.gif");</p>
<p>
forwardHotImage = Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotForward.gif");</p>
<p>
stopHotImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotStop.gif");</p>
<p>
refreshHotImage = Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotRefresh.gif");</p>
<p>
favHotImage =     Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotFavorites.gif");</p>
<p>
printHotImage =   Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotPrint.gif");</p>
<p>
fontHotImage =    Toolkit.getDefaultToolkit().getImage(</p>
<p>
"Images\\HotFont.gif");</p>
<p>
// Force images to load</p>
<p>
MediaTracker imageTracker = new MediaTracker(this);</p>
<p>
imageTracker.addImage(backImage, 0);</p>
<p>
imageTracker.addImage(forwardImage, 0);</p>
<p>
imageTracker.addImage(stopImage, 0);</p>
<p>
imageTracker.addImage(refreshImage, 0);</p>
<p>
imageTracker.addImage(favImage, 0);</p>
<p>
imageTracker.addImage(printImage, 0);</p>
<p>
imageTracker.addImage(fontImage, 0);</p>
<p>
imageTracker.addImage(backHotImage, 0);</p>
<p>
imageTracker.addImage(forwardHotImage, 0);</p>
<p>
imageTracker.addImage(stopHotImage, 0);</p>
<p>
imageTracker.addImage(refreshHotImage, 0);</p>
<p>
imageTracker.addImage(favHotImage, 0);</p>
<p>
imageTracker.addImage(printHotImage, 0);</p>
<p>
imageTracker.addImage(fontHotImage, 0);</p>
<p>
try { imageTracker.waitForAll(); }</p>
<p>
catch(InterruptedException ie) {}</p>
<p>
}</p>
<p>
public static void main(String args[]) {</p>
<p>
BasicBrowser myControls = new BasicBrowser();</p>
<p>
myControls.pack();</p>
<p>
myControls.show();</p>
<p>
}</p>
<p>
}</p>
<p><b>End Listing One</b></p>
<p>
<i>The files<b> </b>referenced in this article are available for download from the Informant Web site at http://www.informant.com/ji/jinewupl.htm. File name: JI9709LC<b>.</b>ZIP. Microsoft's AFC is available for download at http://www.microsoft.com/java/pre-sdk/default.htm.</i></p>
<p>
<i>Luke Cassady-Dorion is a Software Engineer with Metis LLC (www.metisllc.com), a leading health-care software firm. With the aid of various distributed-object technologies, including CORBA, Luke has deployed a series of enterprise-wide solutions written entirely in Java. He can be reached for comment at </i>luke@luke.org<i>.</i></p>

</font></BODY>
</HTML>

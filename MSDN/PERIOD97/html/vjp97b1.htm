<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Dropdown List Box in Java</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">
<h1>Creating a Dropdown List Box in Java</h1>
<p>
<i>by Shamir Dasgupta</i></p>
<p>
On many Web sites, dropdown list boxes are as common as any other HTML element. Web developers use dropdown boxes in plain HTML forms (or in conjunction with a script) to perform a variety of functions. For instance, if you take a dropdown list box and add navigation ability to each of its items, you have an instant navigation system. Since users are fairly adept at using dropdown boxes, it makes sense to incorporate them liberally throughout any Web-based application.</p>
<p>
In addition to HTML or scripting, you can use Java to create and implement dropdown boxes. The advantage of doing so is that your dropdown box can act as an independent <i>class</i> that you can reuse either by itself or in conjunction with a larger Java applet or application. </p>
<p>
In this article, we'll show you how to build a dropdown list box in Java and incorporate the applet into an HTML page. To make sure our applet is totally configurable, we'll use parameters to define the list items and destination. Our visitors can select a list item and navigate to the corresponding URL. When we're finished, our final product will look like the one in Figure A.</p>
<p><img src="vjp97b1a.gif">
</p>
<p>
<b>Figure A: You can create a functional dropdown navigation box in Java.</b></p>
<h2>Anatomy of a list box</h2>
<p>
Our example is fairly simple. We'll create a dropdown list box containing four items. We'll also create a text box above the list in which we'll display a status message to our users. For instance, if a user selects Microsoft from the list, our applet will display, "You selected: Microsoft".</p>
<p>
We'll use Java's built-in Choice class to build our list and use parameters to supply the list-box items. Finally, we'll add Java's URL class object to give our applet navigation functionality. We'll use the value of the parameters first to create the status-box message, then to construct the corresponding URL. </p>
<p>
For this example, we'll assume that you're using Microsoft Visual J++ version 1.1. You'll find the complete source code for our example in Listing A. Let's get started by creating a skeleton or shell for our applet, using the VJ++ Applet Wizard.</p>
<h2>Create the skeleton</h2>
<p>
In the VJ++ development environment, select New... from the File menu; from the resulting dialog box, select the Projects tab. Next, highlight Java Applet Wizard and enter <i>WBListBox </i>in the Project name input box. VJ++ will automatically create a project folder for you. Next, make sure that the Create New Workspace radio button is checked. At this point, your dialog box should look like Figure B; click OK to create the project.</p>
<p><img src="vjp97b1b.gif">
</p>
<p>
<b>Figure B: It's easy to create an applet framework with the help of the Applet Wizard.</b></p>
<p>
The Applet Wizard will now display the first dialog box in a five-step process. For this project, we'll accept all the default setup properties of steps one through three of the wizard. In the fourth step of the wizard, we'll define the parameters we need. To begin, click on the highlighted section directly under the label Name and enter <i>selection1</i>.</p>
<p>
You'll notice that VJ++ automatically filled in the value for the Member and Type portions of this parameter with <i>m_selection1</i> and <i>String</i> respectively. Next, enter <i>Selection1</i> as the Def-Value of the parameter and leave the Description field to its default value in order to finish defining our first parameter. </p>
<p>
To complete our example, use the same technique to add entries for selection2, selection3, and selection4. When you do, your display should look like Figure C. Click Finish to accept the entries. VJ++ will now display a summary window for the applet listing all the initial properties that we've entered and accepted in this five-step process. </p>
<p><img src="vjp97b1c.gif">
</p>
<p>
<b>Figure C: By using parameters, we can extend the applet's functionality in the future.</b></p>
<p>
Click OK once more to exit the wizard and return to the workspace. You'll notice that VJ++ has added a WBListBox files project definition to our project window on the left pane. Double-click to expand the definition and again double-click on the resulting Source Files folder to expand it further. You'll now see both our Java source file, WBListBox.java, and a WBList.html file generated by the wizard. After you double-click on WBListBox.java to open it in the editor, we'll be ready to add our code.</p>
<h2>It's your choice</h2>
<p>
We'll start by adding the list box to our applet. To begin, we'll include the Choice<i> </i>class and the TextField in our applet by placing the following lines of code in its public class declaration:</p>
<pre>public class WBListBox extends Applet implements Runnable
<code>{</code>
<code>     Choice selection1;</code>
<code>     TextField text1;</code></pre>
<p>
We're using the Choice() method of the Choice class to construct an empty Choice control, which we'll name selection1. Look through the init() section of the code in the source file, and you'll notice that the wizard added all the code necessary to read in our four parameters from the Web page. Now, we'll place additional code in the same section so the Choice control will display each of the list items we defined as a parameter. We'll do so by using the addItem() method of the Choice class, like this:</p>
<pre>selection1 = new Choice();
<code>selection1.addItem(m_Selection1);</code>
<code>selection1.addItem(m_selection2);</code>
<code>selection1.addItem(m_selection3);</code>
<code>selection1.addItem(m_selection4);</code>
<code>add(selection1);</code></pre>
<p>
Next, we'll add the code to display our TextField:</p>
<pre>text1 = new TextField(40);
<code>add(text1);</code></pre>
<p>
Now that we have our list box and the text field added to the applet, it's time for some interaction.</p>
<h2>And now, some action!</h2>
<p>
Before we can add any action, we'll need to trap an event. In this example, the event is the user's selection of a list-box item, so we need to make sure we know when the user is selecting an item. We'll do so by adding the following lines of code:</p>
<pre>public boolean action(Event e, Object o){
<code>if(e.target.equals(selection1)){</code>
<code>...</code>
<code>...</code>
<code>do something</code></pre>
<p>
At this point we've trapped the event, but we haven't defined any action. In this example, we want two things to happen when the user selects an item from the list box. First, we want to display a status message in the text field; second, we want our user to navigate to the corresponding URL. In order to display the status message, let's add these lines of code:</p>
<pre>public boolean action(Event e, Object o){
<code>String caption = (String)o;</code>
<code>    if(e.target.equals(selection1)){</code>

<code>text1.setText("You selected: " + caption);</code></pre>
<p>
As you can see, we're simply grabbing the user's selection and placing it in a string named caption. We can then use the value of this string where we'd normally use the selection itself. Since we don't have to define actions for each individual selection, our code will be very compact. Next, we'll add the navigation function, which is a bit tricky.</p>
<h2>Try, catch, and the ugly exceptions</h2>
<p>
To add the navigation function, we'll add the URL class to our applet. However, before we can do so, we need to import the java.net class and all of its associated files and place it in the top section of our source file. Add the following line of code with the rest of the import statements as we've done here:</p>
<pre>import java.net.*;
</pre>
<p>
Now we can add the URL class to our code and place it in our action segment like this:</p>
<pre>public boolean action(Event e, Object o){
<code>URL url = null;</code>
<code>String caption = (String)o;</code>
<code>    if(e.target.equals(selection1)){</code>
<code>        text1.setText("You selected: " + caption);</code></pre>
<p>
We initially set our URL class' value to null; now, based on the user's selection, we'll assign the actual URL to it. Since loading a URL is subject to many errors, Java provides keywords like try and catch to trap Java exceptions. Exceptions are error conditions, so VJ++ requires you to enclose any URL operations in a try...catch block, just as we've done in the following block of code:</p>
<pre>public boolean action(Event e, Object o){
<code>URL url = null;</code>
<code>String caption = (String)o;</code>
<code>   if(e.target.equals(selection1)){</code>
<code>      text1.setText("You selected: " + caption);</code>
<code>      try {url = new URL("http://www." + caption + ".com");}</code>
<code>      catch (MalformedURLException exp1) {}</code>
<code>  getAppletContext().showDocument(url);</code>
<code>}</code></pre>
<p>
Notice that, once again, we've used the value of caption to construct a URL. At this point, we're finished with our coding and are ready to compile the program. To do so, hit [F7] or select Build WBListBox from the Build menu. After our program is compiled, we'll be ready to modify the HTML document.</p>
<h2>Setting parameters</h2>
<p>
Double-click on the WBListBox.html file from the project window to open it in the editor. You'll notice that VJ++ automatically created the code necessary to add the applet to the page. We simply need to modify the parameter values so they read <i>Microsoft</i>, <i>Netscape</i>, <i>Oracle</i>, and <i>ZDNet</i>, replacing the values Selection1, Selection2, and so forth. Our finished &lt;APPLET&gt; code for the page looks like this:</p>
<pre>&lt;applet
<code>    code=WBListBox.class</code>
<code>    name=WBListBox</code>
<code>    width=320</code>
<code>    height=60 &gt;</code>
<code>    &lt;param name=selection1 value="Microsoft"&gt;</code>
<code>    &lt;param name=selection2 value="Netscape"&gt;</code>
<code>    &lt;param name=selection3 value="Oracle"&gt;</code>
<code>    &lt;param name=selection4 value="ZDNet"&gt;</code>
<code>&lt;/applet&gt;</code></pre>
<p>
Save the file and open it in Internet Explorer to try out the applet. To jazz up the Web page, we've added some extra HTML code so our page looks like the one in Figure A. To test the applet, select <i>ZDNet</i> from the list box. The text field will display <i>You selected: ZDNet,</i> and you'll be on your way to the ZDNet site!</p>
<h2>Developer notes</h2>
<p>
In this example, we've limited the functionality of our applet by using the value of the caption string. While this will work with most URLs, it doesn't have the flexibility to cover complicated Web addresses. However, since the main framework is in the code, you can easily modify it to fit a variety of URLs based on your individual needs.</p>
<h2>Conclusion</h2>
<p>
Dropdown list boxes are simple, but every bit as functional as a complicated navigation system. Since they're very common, you avoid the risk of confusing a novice user. By adding something as simple as a dropdown box, you can make your Web-based Java application easy to use.  </p>
<p>
<b>Listing A: Source code for WBListBox.java</b></p>
<pre>import java.applet.*;
<code>import java.awt.*;</code>
<code>import java.net.*;</code>

<code>public class WBListBox extends Applet implements Runnable</code>
<code>{</code>
<code>Choice selection1;</code>
<code>TextField text1;</code>
<code>private Thread m_WBListBox = null;</code>

<code>private String m_selection1 = "Selection1";</code>
<code>private String m_selection2 = "Selection2";</code>
<code>private String m_selection3 = "Selection3";</code>
<code>private String m_selection4 = "Selection4";</code>

<code>private final String PARAM_selection1 = "selection1";</code>
<code>private final String PARAM_selection2 = "selection2";</code>
<code>private final String PARAM_selection3 = "selection3";</code>
<code>private final String PARAM_selection4 = "selection4";</code>

<code>public WBListBox()</code>
<code>{</code>
<code>}</code>

<code>public String getAppletInfo()</code>
<code>{</code>
<code>return "Name: WBListBox\r\n" +</code>
<code>       "Author: Shamir Dasgupta\r\n" +</code>
<code>       "Created with Microsoft Visual J++ Version 1.1";</code>
<code>}</code>

<code>public String[][] getParameterInfo()</code>
<code>{</code>
<code>String[][] info =</code>
<code>{</code>
<code>{ PARAM_selection1, "String", "Parameter description" },</code>
<code>{ PARAM_selection2, "String", "Parameter description" },</code>
<code>{ PARAM_selection3, "String", "Parameter description" },</code>
<code>{ PARAM_selection4, "String", "Parameter description" },</code>
<code>};</code>
<code>return info;</code>
<code>}</code>

<code>public void init()</code>
<code>{</code>
<code>String param;</code>
<code>param = getParameter(PARAM_selection1);</code>
<code>if (param != null)</code>
<code>m_selection1 = param;</code>
<code>param = getParameter(PARAM_selection2);</code>
<code>if (param != null)</code>
<code>m_selection2 = param;</code>
<code>param = getParameter(PARAM_selection3);</code>
<code>if (param != null)</code>
<code>m_selection3 = param;</code>
<code>param = getParameter(PARAM_selection4);</code>
<code>if (param != null)</code>
<code>m_selection4 = param;</code>

<code>resize(320, 240);</code>
<code>text1 = new TextField(40);</code>
<code>add(text1);</code>
<code>selection1 = new Choice();</code>
<code>selection1.addItem(m_selection1);</code>
<code>selection1.addItem(m_selection2);</code>
<code>selection1.addItem(m_selection3);</code>
<code>selection1.addItem(m_selection4);</code>
<code>add(selection1);</code>
<code>}</code>

<code>public void destroy()</code>
<code>{</code>
<code>}</code>
<code>public boolean action(Event e, Object o){</code>
<code>URL url = null;</code>
<code>String caption = (String)o;</code>
<code>if(e.target.equals(selection1)){</code>
<code>text1.setText("You selected: " + caption);</code>
<code>try {url = new URL("http://www." + caption + ".com");}</code>
<code>catch (MalformedURLException exp1) {}</code>
<code>getAppletContext().showDocument(url);</code>
<code>}</code>
<code>return true;</code>
<code>}</code>
<code>public void start()</code>
<code>{</code>
<code>if (m_WBListBox == null)</code>
<code>{</code>
<code>m_WBListBox = new Thread(this);</code>
<code>m_WBListBox.start();</code>
<code>}</code>
<code>}</code>
<code></code>
<code>public void stop()</code>
<code>{</code>
<code>if (m_WBListBox != null)</code>
<code>{</code>
<code>m_WBListBox.stop();</code>
<code>m_WBListBox = null;</code>
<code>}</code>
<code>}</code>

<code>public void run()</code>
<code>{</code>
<code>while (true)</code>
<code>{</code>
<code>try</code>
<code>{</code>
<code>repaint();</code>
<code>Thread.sleep(50);</code>
<code>}</code>
<code>catch (InterruptedException e)</code>
<code>{</code>
<code>stop();</code>
<code>}</code>
<code>}</code>
<code>}</code>

<code>}</code>

</pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing OLE Automation Using VBA</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">

<h1>Implementing OLE Automation Using VBA</h1>
<p>
<i>by Jane Roseen</i></p>
<p>
If you ever wanted to programmatically control two or more applications at the same time, enabling them to share objects or data--then the OLE automation methods in Visual Basic for Applications fit the bill. Using OLE automation in VBA is a great way to integrate applications and take advantage of the power in each Office application. For example, Excel has superior tools to enable you to work with spreadsheets. On the other hand, Word is an excellent tool for working with documents. But sometimes you may want to place an Excel spreadsheet in a Word document to better explain a topic. Automation is a perfect way to implement this type of process. </p>
<p>
The VBA programming language includes the InsertFile and InsertDatabase methods, which allow us to insert documents, spreadsheets, databases, or portions thereof into other applications. However, once these objects are inserted into the application, you can't effect any changes on them or communicate with them in any way. Once added to a document, they're static and you can't change the information.</p>
<p>
Fortunately, alternatives exist if you want to have more control over the data you add to a document. There are two main ways to exchange data between applications: Dynamic Data Exchange (DDE) and Object Linking and Embedding (OLE). In this article, we'll explore OLE, and you'll discover how you can take advantage of the power and flexibility it adds to your VBA procedures. We'll look at how you can link and embed objects in your Word documents or Excel spreadsheets so you can either modify the original object or make a copy of it. You can download our sample files as part of nov97.zip from <b>www.cobb.com/adj</b>; click the Source Code hyperlink.</p>
<h2>Putting automation to work</h2>
<p>
Creating a procedure that uses the features of an object application is a very straightforward process. Let's work through each of the steps involved.</p>
<p>
To begin, you need to add a reference to the object library. Activate the object library by selecting Tools | References... from the Visual Basic Editor menu, and determine how the commands you want to run translate into the object application's object model. After you activate the object library, you can browse the object properties and methods it exposes by using the Visual Basic Object Browser. </p>
<p>
Note that the object library for each application that supports automation is installed automatically when you run the application's setup program. If you plan to distribute your procedures, be sure that each computer in your workgroup has a copy of the object application software.</p>
<p>
Next, you'll code the procedure. In the procedure in which you plan to use automation, declare and load an Automation object by using the Dim and CreateObject methods. </p>
<p>
Now, you can programmatically manipulate the Automation object using its native methods and properties. When you've finished using the object application, release the object variable to conserve memory.</p>
<p>
While DDE is an important tool, you can have only a single communication line open between two applications at one time. However, by using automation, you can link or embed multiple objects into an application, resulting in more powerful presentations. Let's work through some examples that show you how to create complex documents.</p>
<h2>Retrieving data from Excel</h2>
<p>
Let's consider a short example of embedding an Excel spreadsheet cell item, or object, into a Word memo document. To do so, we'll use the MonthlySales.XLS spreadsheet shown in Figure A.</p>
<p>
<img src="adj97b2a.gif" border=0></p>
<p>
<b>Figure A. We'll embed the cell in H6 from the MonthlySales Excel spreadsheet into a Word document.</b></p>
<p>
Now, create the OLEExcel procedure in Word, as shown in Listing A. You'll recall from our earlier discussion that when you perform OLE automation, you must declare and define an OLE object. In this example, you use the Dim statement to declare the QtrSS object variable. Then you set the QtrSS variable to the MonthlySales spreadsheet and set the celltext variable to the cell located at H6 on sheet1 of the active worksheet. You then close Excel and release the object variable, QtrSS. Finally, you insert the contents of the Excel cell after the current cursor position in your Word document, as shown in Figure B.</p>
<p>
<b>Listing A: Placing an Excel cell item in a memo</b></p>
<pre><code>Sub OLEExcel()
Dim QtrSS As Object
    
Set QtrSS = _
GetObject("c:\test\monthlysales.xls")
    
celltext = _
QtrSS.Worksheets("sheet1").Range("H6")
    
QtrSS.Application.Quit
Set QtrSS = Nothing
    
Selection.InsertAfter celltext

End Sub</code></pre>
<p>
<img src="adj97b2b.gif" border=0></p>
<p>
<b>Figure B. The Word document now contains the contents of the Excel cell.</b></p>
<p>
So far, so good. Now let's send the entire spreadsheet to Word.</p>
<h2>Retrieving an object into Word</h2>
<p>
While you can use automation to retrieve a specific portion of an object into your Word documents, you can also embed entire objects in them. In this example, you're going to embed the entire MonthlySales spreadsheet in your Word memo. The lines of code to complete this task are as follows:</p>
<pre><code>With ActiveDocument
  .InlineShapes.AddOLEObject _
     FileName:="c:\test\monthlysales.xls", _
  Range:=ActiveDocument.Paragraphs(10).Range
 .InlineShapes(1).Activate
End With
</code></pre>
<p>
Notice in this code snippet, you invoke the AddOLEObject method. You insert the file, MonthlySales.XLS, into your document at paragraph 10 as an InlineShape. You then activate the object in your document, as shown in Figure C. Now you can make modifications to the spreadsheet just as if you were working directly in Excel. </p>
<p>
<img src="adj97b2c.gif" border=0></p>
<p>
<b>Figure C. When an OLE embedded spreadsheet is activated in a Word document, all the functionality from Excel is available to the object.</b></p>
<p>
Besides having access to Excel's powerful formulas, you can also view any of the sheets associated with a particular workbook. For instance, the QtrSalesChart sheet contains a chart graphically depicting each salesperson's performance. To view the chart, simply press the QtrSalesChart tab as you normally would if you were working in Excel. You can then resize the chart as needed. Once you're finished, the chart looks similar to Figure D.</p>
<p>
<img src="adj97b2d.gif" border=0></p>
<p>
<b>Figure D. You can access charts associated with a workbook when you use OLE to embed a spreadsheet in Word.</b></p>
<p>
You'll also notice in Figure D that Word's menus and toolbars are modified to allow you to access Excel commands. As a result, you can change text, insert and delete cells and formulas, and so on.</p>
<p>
Note that since you didn't specify a value for the LinkToFile argument of the AddOLEObject method, the spreadsheet is merely a copy. So any changes you make to the spreadsheet embedded in your Word document aren't reflected in MonthlySales.XLS.</p>
<h2>Controlling Excel from Word</h2>
<p>
Now that you've got the basics of OLE automation down, let's look at something a little more involved. In our next example, you're going to pass a value to Excel, place the data in a cell, let the spreadsheet recalculate, return the value to Word, and insert the value into your document. Take a look at the code in Listing B.</p>
<p>
<b>Listing B: Sending a value to Word and returning a recalculated value</b></p>
<pre><code>Sub OLEWordToExcel()
Dim ExcelApp As Object
Dim MonthlySales As Object
Dim ExcelRunning As Boolean
    
CorrectSales = Selection.Range
If CorrectSales = "" Then
  MsgBox _
  "Please select a value before proceeding", _
  vbInformation, "Sales Correction"
  Exit Sub
End If
        
On Error Resume Next
Set ExcelApp = GetObject(, "Excel.Application")
If Err.Number = 0 Then
  ExcelRunning = True
End If
Err.Clear
    
Set MonthlySales = GetObject("c:\test\monthlysales.xls")
    MonthlySales.Worksheets("sheet1").Range("G2")_ 
= CorrectSales
MonthlySales.Save
QtrTotal = _
MonthlySales.Worksheets("sheet1").Range("H6")
    
If ExcelRunning = False Then
  ExcelApp.Application.Quit
End If
    
Set MonthlySales = Nothing
Set ExcelApp = Nothing
    
FindText$ = "Quarterly Sales to "
With Selection
  .HomeKey unit:=wdStory
  .Find.ClearFormatting
  .Find.Text = FindText$
  .Find.Execute
  .InsertAfter QtrTotal
End With

End Sub
</code></pre>
<p>
As you can see, this procedure is a little more involved than the others we've worked with. Let's go through it in more detail and see how it works.</p>
<p>
Initially, you set up your variables. You then set the variable CorrectSales to the value selected in your Word document. If no value is selected, you display a message box notifying the user that she must select something before continuing, then exit the procedure. </p>
<p>
If a value has been selected, you set up some error-capturing code. If an instance of Excel is already running, set the Boolean variable Excel Running to True. Otherwise, this variable retains its default value of False. You then clear the error. </p>
<p>
Your next job is to retrieve the Monthly-Sales spreadsheet using the GetObject method. Set cell G2 to the value selected in the Word document, then save the spreadsheet using the Save method. Set the QtrTotal variable to the Total Sales value from the spreadsheet.</p>
<p>
Now, check the value of the ExcelRunning variable. If Excel was running when you started the procedure, leave it running. If you had to start Excel to work with your spreadsheet, then close it. (It's always good programming practice to leave the user's environment the way you found it.) Then, release the object variables by setting them to Nothing.</p>
<p>
Back in your Word document, find the text Quarterly<i> Sales to</i>. Insert the value retrieved from the spreadsheet into the document. When you do, the Word document will appear as shown in Figure E. Following this example, you can send and retrieve data between applications.</p>
<p>
<img src="adj97b2e.gif" border=0></p>
<p>
<b>Figure E. When you're finished, the Word document contains the recalculated total value from the spreadsheet.</b></p>
<h2>Conclusion</h2>
<p>
Visual Basic for Applications provides several very powerful commands to implement OLE automation. With the ability to programmatically implement automation from the VBA language set, you can dynamically create complex documents and spreadsheets. </p>
<p>
<i>Jane Roseen is a computer consultant specializing in business automation solutions and Help system development. She's co-author of the upcoming book Special Edition Using Microsoft Word 97, published by Que, and is the author of InfoMaker 5: A Guide to Developing Client/Server Applications, published by McGraw-Hill. You can reach Jane via E-mail at jroseen@means.net or visit her Web site at </i>http://www.rrv.net/roseen<i>.</i></p>
</font></BODY>
</HTML>

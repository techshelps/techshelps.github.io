<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Corner Office: You Can Hit the Web Running with Microsoft Access 97</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1>Corner Office: You Can Hit the Web Running with Microsoft Access 97</h1>
<p>
Many of the Web's most attractive features depend on the ability to present, collect, and store information via a lightweight, universally available (or at least free) client. Guest books collect information from site visitors. Online surveys collect opinions and provide instant feedback. Message bases store threaded discussions. Catalogs showcase products for sale. Shopping carts let visitors complete a sales transaction. All these application types and others work best when a database engine stores and serves information in reply to user requests.</p>
<p>
The Microsoft® Active Server Pages (ASP) technology enables more powerful Web development by merging scripting and HTML on the server side of a Web connection. Its database connectivity makes it possible for developers to create dynamic Web sites that spring to life from one or many databases. ASP is available on both Windows NT® and Windows® 95 platforms, running as part of Internet Information Server (IIS) and Personal Web Server (PWS).</p>
<p>
Microsoft Access remains a popular database development platform because of its power and ease of use. Ideal for projects that benefit more from rapid application development than huge scalability, Microsoft Access 97 enhances the database and scripting capabilities of prior versions with tightly integrated Web connectivity. I addressed some of these issues in the April and May issues of <i>MIND</i>. This article builds on the earlier ones by focusing primarily on ASP. Some of my examples will demonstrate how to edit VBScript in wizard-generated pages. Other examples showcase how to complement the Web development capabilities of Microsoft Access 97 with Microsoft Excel 97 and FrontPage® 97. Mastering the techniques presented here will give you the building blocks to develop dynamic, database-driven Web applications that use your existing Microsoft Access and Office development skills.</p>
<h2>Reviewing the Publish to Web Wizard</h2>
<p>
In Microsoft Access 97, you can save table, query, and form datasheets to a Web server with the File | Save As, File | Export, and File | Save As HTML commands. These same three commands also publish forms, which I will discuss later, and reports, which I described previously (see the April issue). I recommend using File | Save As HTML in most cases, and always when you are publishing in ASP format. This is because the File | Save As HTML command invokes the Publish to&nbsp;the&nbsp;Web&nbsp;Wizard, which makes it easier to remember all the components that you need to publish.</p>
<p>
There are as many as eight Publish to the Web Wizard screens when you publish in ASP format. That's why you should develop a profile and use it. Chances are you will be designating the same options to most screens. A profile automates the selection of repetitive choices. A checkbox on the eighth screen will save the current selections as a profile. When developing a profile, you should make the settings as simple as possible. For instance, selecting a single table to use instead of a group of table datasheets makes it easy to unselect it and go about selecting the new tables, queries, reports, and forms that you want to publish. Clicking the Finish button at any wizard screen submits your new replies and any unedited profile screens.</p>
<p>
Figure 1 shows the fourth and fifth Publish to the Web Wizard screens. It's in the fourth screen that you specify whether you want to publish to the Web in static HTML, IDC/HTX, or&nbsp;ASP&nbsp;format.&nbsp;All&nbsp;the&nbsp;examples&nbsp;in&nbsp;this&nbsp;article&nbsp;start&nbsp;by&nbsp;publishing Microsoft Access database objects in ASP. Both the ASP and IDC/HTX formats support dynamic updating of published datasheets based on changes to their underlying database objects, but the IDC/HTX format does not offer as many options as ASP. You must assign Execute Scripts permission to the Web server folder that stores your .asp, .idc, or .htx files.</p>
<p><img src="accessfig01.gif"></p>
<p><b>Figure 1: Publish to the Web Wizard</b></p>
<p>
To use the ASP format, you must have ASP installed on your Web server. IIS 3.0 ships with it. Other Microsoft Web servers, including PWS for Windows 95, require installation of ASP. See Knowledge Base report q162976 (http://www.microsoft.com/kb/articles/q162/9/76.htm) for instructions on downloading and verifying the correct operation of ASP on your server. The installed version also includes browser-accessible documentation that will help you tailor wizard-generated ASP to your requirements. Install either Microsoft Access 97 or the Microsoft Access Desktop Driver on any server publishing Microsoft Access database objects.</p>
<p>
The fifth wizard screen gathers information critical when publishing in ASP format. You must create an ODBC data source with the 32-bit ODBC icon in the Windows 95 or Windows NT Control Panel. Specify either a system or file DSN that points to a database (do not designate a user DSN). Insert the name for the DSN in the Data Source Name text box on the fifth screen. Designating a server URL is not strictly necessary, except when publishing forms with subforms. This is the URL from which you will be publishing the database object. The examples in this article publish database objects from the cabxp5 Web server in my office. I created a folder on this server, named MyASPs, to store all my ASP files.</p>
<h2>Dressing Up Your Published Datasheets</h2>
<p>
Microsoft Access tables include some query-like features, particularly regarding filters. These allow sorting, row exclusion, and other table manipulation features without a query. While you can view filter actions clearly within Microsoft Access,&nbsp;these&nbsp;actions&nbsp;do&nbsp;not&nbsp;appear&nbsp;when&nbsp;you&nbsp;publish&nbsp;a&nbsp;filtered table to the Web. To achieve filter-like outcomes over the Web,&nbsp;you&nbsp;must&nbsp;use queries. One easy way to publish a filtered table is to save its filter with File&nbsp;|&nbsp;Save As Query. This creates a query that includes the same filter actions you created for the table, and will present the same display over the Web. </p>
<p>
After this fix, at least one more difficulty remains: formatting. VBScript is the default scripting language for ASP, but the Publish to the Web Wizard does not know about the VBScript formatting functions for currency, dates, times, and percentages. Your table or query could show a field in Microsoft Access with dollar signs, but on the Web there will be no currency designation. The fix for this problem requires some hand editing of the VBScript for the page.</p>
<p>
My third general point concerning datasheet publishing is about good looks. The default datasheet publishing look is pretty drab-black text on a white background with some contrast for the column titles. In the April issue I described how to enhance the appearance of these datasheets using built-in templates that ship with Microsoft Access 97. You can even customize the look of these templates. The problem is that this approach may require that you learn more about HTML than you want. Even if you know HTML, you may find it more fun and faster to work with a graphical editor. FrontPage 97 comes to the rescue by permitting graphical editing of wizard-generated ASPs. It also automatically copies any image files that you reference to the correct folder (did I hear you say oooooh?).</p>
<p>
Figure 2 compares two published datasheets with identical information. The first version displays a default layout for publishing a filtered table. The second version shows a query-based version of the table. The query displays sales in descending order as in the Microsoft Access database. The table can also display sales in descending order, but its order derives from a filtered table, so sorting appears only when viewed from Microsoft Access, not from its Web version. The moral here is to always publish query instead of table datasheets if you want your pages to look good.</p>
<p><img src="accessfig02.gif"></p>
<p><b>Figure 2: Dull and exciting datasheets</b></p>
<p>
The second version presents sales figures formatted with dollar signs, commas, and two decimal places. Sales figures in the first version do not indicate they represent currency. I achieved the currency look by editing the page's VBScript. A formatcurrency function statement creates the proper look. You get documentation on the formatcurrency function and related functions for controlling the appearance of percentages, dates, times, and general numbers when you install ASP.</p>
<p>
Recall that ASP merges HTML and script code in one document. The script for a datasheet, VBScript by default, has several sections. It establishes the connection to the database, it performs a query to gather the data for the datasheet display, and it formats the collected data <br>
for display with a combination of HTML and script.</p>
<p>
Armed with this knowledge, a developer working with Microsoft Access or Office can insert the formatcurrency function. First, open the .asp file in Notepad or some other text editor (FrontPage 97 also works well here). Second, locate the specific line that publishes sales. In my version, the line appears in a doloop (see Figure 3). Category sales appear as rs.Fields("Category Sales"). rs is the recordset object. An identifier in quotes, like "Category Sales," designates a specific field in the fields collection. The third step is to wrap the data representation in a formatcurrency statement. </p>
<p><img src="accessfig03.gif"></p>
<p><b>Figure 3: Adding currency formatting</b></p>
<p>
The final look of the second version in Figure 2 reflects much more than just sorting and currency formatting. The table has a background image, cell padding, font coloring and sizing, and contrasting border shades. All these changes were made to the .asp file without any direct HTML editing. I used FrontPage&nbsp;97&nbsp;to&nbsp;engineer&nbsp;the&nbsp;custom&nbsp;look&nbsp;for&nbsp;the&nbsp;second&nbsp;version. </p>
<p>
FrontPage 97 makes editing the .asp file very simple. First, open the file. Next, right-click on selected elements of the datasheet and choose a broad category of properties that you want to edit. In Figure 4, I show the selection of the table caption. I'll use the Font Properties command to edit the font color to white. This makes the caption text contrast with the table background. Selecting and editing other table elements is just as simple. Unfortunately, the arrangement of WebBots® for code segments makes the look somewhat less than WYSIWYG. Nevertheless, editing with FrontPage 97 is substantially faster than editing straight HTML code. </p>
<p><img src="accessfig04.gif"></p>
<p><b>Figure 4: Editing the .asp file</b></p>
<h2>Analyze Published Datasheets with Web Queries</h2>
<p>
Publishing dynamic datasheets to the Web offers a key advantage over static HTML pages. The data in tables updates automatically as the database entries change. But viewing a page full of numbers can be very unappealing no matter how much you embellish the display. Even a dynamically updated table does not provide the kind of flexibility that a decision support analyst needs. Such analysts often require the ability to manipulate the data in ad hoc ways. </p>
<p>
Microsoft Excel 97 Web queries address this problem. Web queries can pull a dynamically published .asp file from a URL into a worksheet for ad hoc analysis, carefully prescribed calculations, or some combination of the two. Less experienced developers will be able to code Web queries since they are simple text files. In its most elementary case, a Web query is just a URL. This kind of Web query deposits a complete datasheet in a worksheet. </p>
<p>
The following line shows a Web query for the second datasheet in Figure 2:</p>
<pre><code>http://cabxp5/MyASPs/qryCategorySalesfor1995_1.asp</code></pre>
<p>
By default, Microsoft Excel 97 searches the \Program Files\Microsoft Office\<br>
Queries path for Web queries, which are files with an .iqy extension. The steps to writing a Web query that brings an .asp file into a worksheet are:</p>
<p>
<font face="Symbol">&#221;</font>Create a text file containing the URL that points to the .asp file.</p>
<p>
<font face="Symbol">&#221;</font>Save the text file with an .iqy extension.</p>
<p>
<font face="Symbol">&#221;</font>Place the .iqy file in the \Program Files\Microsoft Office\Queries folder.</p>
<p>
There is a lot more to Web queries and other Microsoft Excel 97 Web functionality than I've introduced here. Visit http://www.microsoft.com/msexcel/webquery/default.htm for an overview and links to related information.</p>
<p>
Once the data is in a spreadsheet, analysts can manipulate it with all of the features of Microsoft Excel 97. A developer can automate the process with Visual Basic for Applications programming. This technique works as well whether the analyst is in the same office as the Web server or on the road.</p>
<p>
Figure 5 shows a finished worksheet that updates its table and chart with the dynamically published datasheet in qryCategorySalesfor1995_1.asp. Clicking the button labeled Refresh Sales Data pulls the most recent data into the workbook. The table and chart automatically update after receiving the new data. Even this simple worksheet offers substantial improvement over the Web datasheet since it calculates total sales, reports percentage of sales by category, and displays results in an attractive pie chart. An analyst can perform other analyses or combine the sales data with other data, such as inventory and cost of goods, for a more comprehensive analysis. Having the data in Microsoft Excel makes it possible for the&nbsp;analyst&nbsp;to&nbsp;do&nbsp;whatever&nbsp;his&nbsp;or&nbsp;her&nbsp;immediate&nbsp;needs&nbsp;dictate.</p>
<p><img src="accessfig05.gif"></p>
<p>
Notice that the sales for Dairy Products is higher in Figure 5 than Figure 2. Clicking the Refresh Sales Data button updates the sales number in the worksheet so that it matches the value in Figure 2, recalculates the total, and recomputes the percentages around the periphery of the pie chart.</p>
<p>
Figure 6 shows the Visual Basic for Applications subroutine, RunWQuery, that imports the data from the URL. This view shows the Visual Basic editor with the Explorer in the left panel and the code in the right panel. The procedure is in a module that belongs to the Microsoft Excel workbook project containing the worksheet with the chart.</p>
<p><img src="accessfig06.gif"></p>
<p>
This procedure assumes that the Web query is already in the workbook on the Raw Data worksheet. Hiding the worksheet with the Web query helps to protect it from inadvertent damage by users. I initially downloaded the Web query data with the command Data | Get External Data | Run Web Query. After incorporating a Web query in a worksheet, you can refresh it at any time by selecting a cell within the range for the downloaded data and issuing the command Data | Refresh Data. I turned the recorder on to capture the Visual Basic for Applications script for the commands to select a worksheet cell in the query table and issue the Refresh Data command.</p>
<p>
The procedure to refresh the data begins by turning off screen updating and making Raw Data visible. Next, it plays back the recorded script for refreshing the data in the previously downloaded Web query. This script begins by&nbsp;selecting cell A3 on the hidden worksheet contained within the downloaded Web query. The BackgroundQuery:=False setting causes the procedure to pause while the Web query executes. This blocks the worksheet from recalculating cells and the chart until after the Web query completely retrieves its data.</p>
<p>
I augmented this recorded code with other manually entered code to manage the hidden worksheet. By controlling screen updating and Raw Data's visibility, I am able to make the hidden worksheet available without the user seeing it, perform the Web query and update the chart, and then hide the Raw Data worksheet again before selecting the worksheet that displays the chart in Figure 5.</p>
<p>
The procedure in Figure 6 has the benefit of being easy and fast to prepare. However, it requires the setup of the Web query in advance. This exposes part of the application to inadvertent damage. A better approach takes advantage of the Add method of the QueryTables collection for a worksheet. This method allows the creation of the Web query within the Visual Basic for Applications procedure, where users are less likely to inadvertently tamper with it. Since this method adds a new Web query to a sheet, it is necessary to perform two related actions when using it to refresh data: delete the old Web query, and write new formulas for the cells showing sales that point back to the most recently imported data.</p>
<p>
Figure 7 displays a Visual Basic for Applications procedure that uses the Add method for the QueryTables collection of a sheet to refresh the display in Figure 5. This procedure uses code identical to Figure 6 to manage the display and hiding of the Raw Data worksheet. However, after displaying the hidden worksheet, the new procedure immediately deletes columns A and B. The old query, if there was one, is in these columns. Next, it uses the Add method to populate columns A and B with the data in the qryCategorySalesfor1995_1.asp file. The HasAutoFormat method of the worksheet sets the column widths so they are wide enough to display the longest entry. If you were showing the Web query, you might decide to use this Microsoft Excel 97 method. When the import is complete, the procedure enters new formulas in the worksheet showing the chart. These formulas refer back to the most recently imported data. Finally, it hides the Raw Data worksheet again.</p>
<p><img src="accessfig07.gif"></p>
<p>
The progression from Figure 6 to Figure 7 shows just one example of the <br>
kinds of enhancements that are possible. Individual developers and power users can choose the proper level of programming and data analysis sophistication for their needs. One clear benefit of Web queries is that it helps decentralized business units make data-based decisions; organizations using Web queries will run better because local decision makers will have improved access to data.</p>
<h2>Creating Parameter Queries</h2>
<p>
Publishing a parameter query with the Publish to the Web Wizard is just as easy as publishing a simple select query. This wizard generates two Web pages. An HTML file collects input from the user in the same manner as the pop-up parameter dialog in Microsoft Access, and it even uses the same prompt: a text box on an HTML form. The form calls the second file generated by the wizard. This can be an .asp file that accepts the user's input, performs the query using that input as a criterion, and presents a return set to the user. You can use IDC/HTX files similarly.</p>
<p>
While the Web version of a parameter query looks the same as one in Microsoft Access, it does not necessarily work identically. This becomes evident when the parameter query uses a Like operator and the * wildcard symbol. In Microsoft Access, a criterion such as Like d* returns all entries in that column beginning with the letter d. This query feature is attractive because the user does not have to know the exact spelling of an entry for which he or she is searching. Parameter queries in Microsoft Access often use this feature. Unfortunately, the syntax for this kind of search is different in .asp files. Naively using a parameter query with a wildcard symbol will generate a syntax error message. By the way, the wizard-generated replica of the parameter query performs identically to the one in Microsoft Access for numeric fields and text fields without wildcard symbols.</p>
<p>
Because the Publish to the Web Wizard does not perform the translation for the wildcard symbol, developers must know about the problem and solve it before users of their systems encounter it. The solution is as simple as replacing the * with a % and rearranging the quotes in the text string for a SQL statement. It helps to know something about the general landscape of the .asp file, although this is the same for a select query as for a parameter query. Before executing the query to develop a return set, the .asp file constructs a text string for its SQL statement. Developers need to replace the * in the clause with a %.</p>
<p>
It is also necessary to rewrite the statement because the number and sequence of delimiters around the wildcard symbol changes from Microsoft Access SQL to ADO SQL, the flavor used by ASP. Figure 8 shows the before and after versions of the two SQL text strings.</p>
<p><img src="accessfig08.gif"></p>
<p>
Figure 9 further illustrates the difference. It shows the initial HTML file with the letter d entered in the Last Name text box. It also shows the result from clicking the Run Query button with both SQL text strings in Figure 8. As you can see from the result with the after SQL text string, the application is an online telephone directory.</p>
<p><img src="accessfig09a.gif"></p>
<p><img src="accessfig09b.gif"></p>
<p>
The same wildcard problem exists when you choose IDC/HTX rather than .asp files for publishing a parameter query. The appropriate fix is slightly different for the two file types. Refer to Knowledge Base article q163893 for a discussion of the problem and its solution when using .idc files.</p>
<h2>Converting a Parameter Query to a Select Box</h2>
<p>
When a list of items is relatively short, but subject to frequent change, a select box (the HTML equivalent of a combobox) is a useful way to choose one item from the group. Users open the select box, choose an item from the dropdown list, and execute some action on it.</p>
<p>
How do you do this with ASP? My sample application builds on the prior parameter query example. The select box sample has two screens. In the first, a user opens the box to select an employee by last name. Clicking the Run Query button opens the second .asp file and presents the last name, first name, and telephone number of the employee selected in the first screen. I used the Northwind Employees table to develop the example.</p>
<p>
The original parameter query model also had two screens, but the first one was simple HTML that invoked an .asp file. The select box example requires two .asp files. The first .asp file uses the Employees table to populate the select box with entries. The need to refer to the Employees table requires the change from an HTML file to an .asp file. The second .asp file accepts the value from the select box in the first file as a criterion&nbsp;to&nbsp;return&nbsp;an&nbsp;employee&nbsp;name&nbsp;and&nbsp;telephone&nbsp;extension.</p>
<p>
Figure 10 shows the first .asp file. At the top, it connects to the Northwind database. Then it executes a simple select statement that pulls all fields from the Employees table. Next, it starts a form. Notice that the &lt;FORM&gt; tag has an action attribute set to an .asp file. This is the second file that lists the name and extension for an employee. The select tag uses its name attribute to provide a reference for itself. The select box stores the value a user chooses. A doloop populates the select box by passing through all the names in the employee list. It adds a two-part value comprised of the EmployeeID and LastName fields. The LastName field shows when the user opens the select box, but when the user makes a selection the EmployeeID saves in the select field, also named EmployeeID. Clicking the Run Query button launches the second .asp file and passes the EmployeeID field for the selected employee to the file.</p>
<p><img src="drgui.gif"></p>
<p><b>Figure 10: First .asp File for Select Box</b></p>
<p>
Figure 11 shows the second file. This file also begins by making a connection with the Northwind database. It needs the Employees table from the database to retrieve the last name, first name, and telephone extension that match the EmployeeID field that the first .asp file passes it. The SQL text string in this file selects just the three fields that it needs for its display. The Where clause uses the Request object's QueryString collection to reference the value that the user selected in the first file. The name of the specific collection item must be the same as the name for the select box in the first file.</p>
<p><img src="drgui.gif"></p>
<p><b>Figure 11: Second .asp File for Select Box</b></p>
<p>
I borrowed the rest of the second file from the parameter query example. Remember that the user could select more than one employee if the partial string they entered matched the last name of two or more employees. Borrowing the code has a couple of advantages. First, it gives you most of the code for the second file in the parameter query example. Second, it works for the select box example. If it were not for the educational value, I would not use a doloop towards the bottom of the second file. Additionally, I might arrange the return set fields vertically instead of horizontally.</p>
<p>
Figure 12 shows the list box in action. I just opened the first file, and it defaults to pointing at the first employee (Davoli). I clicked the box and started to select Buchanan. When I complete the selection and click the Run Query button, the screen shows Buchanan's telephone directory information. The next time I return to the first file, it will default to Buchanan until I make a different selection.</p>
<p><img src="accessfig12.gif"></p>
<h2>Exporting Forms</h2>
<p>
One of the most exciting features about the Publish to the Web Wizard is its ability to export forms to the Web. This functionality is available only on servers running ASP-IDC/HTX files do not support this feature. You also must have the HTML Layout control on the browser workstation. The HTML Layout control is not necessary for viewing dynamically published datasheets.</p>
<p>
The procedure for exporting bound main forms is identical to exporting a datasheet from a table, query, or form. Exported forms behave in many respects like bound forms within Microsoft Access. The forms allow users to add, edit, and delete records in a database. The wizard provides the forms with a set of buttons to facilitate navigation as well as commit, delete, and refresh operations.</p>
<p>
Many standard Microsoft Access controls can be migrated to the Web. These include text boxes, list and combo boxes, label controls, command buttons, option buttons, check boxes, and ActiveX controls. Option groups also transfer to the Web, but the frames around them do not make the transition. There are special rules for hyperlinks that vary by the type of control. Hyperlinks for labels and command buttons can be followed. Text boxes bound to a hyperlink field can be viewed, but not activated.</p>
<p>
Code behind forms and controls does not transfer to HTML. If you need this code, you will have to transfer it manually to VBScript and include it in the ASP scripts. Main/sub forms migrate, but the subform is read-only. You cannot modify the subform's recordset directly from the main/sub sent to the Web by the wizard. A variety of graphic controls, such as lines, rectangles, the picture property of a form, and image controls do not transfer.</p>
<p>
When designing forms within Microsoft Access for the Web, keep these features in mind. Do not bother to put navigational buttons on forms because the wizard will insert them automatically. When you position a subform on a main/sub form, make sure that it serves read-only purposes. Do not put code behind the form and its controls; the code does not migrate. Avoid using text boxes bound to hyperlink fields since users can see them but not follow them.</p>
<p>
Sending a single main form to a Web server with the wizard creates two .asp files. To illustrate how these two files complement each other, I created a bound form to the Northwind Shippers table that comes with Microsoft Access. Then I exported it to a Web server with the wizard. Files named Shippers_1.asp and Shippers_1alx.asp appeared on the server. The file with alx in its name includes a set of ActiveX objects for the controls on the form. This file also contains code defining built-in AfterUpdate and Click event procedures for the controls. The Click event procedures include hyperlink transfers to the form's other file, Shippers_1.asp. It also sends information to the first file by appending it to the first file's URL.</p>
<p>
The Shippers_1.asp file references Shippers_1alx.asp as an ActiveX object. The HTML Layout control is necessary to decipher the layout of the controls on the form. The control in Shippers_1.asp also parses the data sent to it along with the URL. This involves two sets of actions: it updates any fields with changed values and it performs navigation as well as commit, delete, and refresh actions.</p>
<p>
Figure 13 shows how my Shippers form looks on the Web. Notice that there are five navigational buttons in the lower- left corner. The leftmost one moves to the first record. The next one moves to the previous record. When the form is already viewing the first record, the Previous button's default behavior is to continue showing that record without any messages. The third button moves to the next record. When the form is viewing the last record, this form follows the pattern of the Previous button: it does not progress, and it provides no feedback to the user. The fourth button moves directly to the last record in a recordset.</p>
<p><img src="accessfig13.gif"></p>
<p>
The fifth button opens a blank form so that the user can enter a new record. After presenting a blank form for data entry, the other navigational buttons do not function. You must use either the Commit, Delete, or Refresh/Cancel button to exit from a blank entry form. These three buttons facilitate recordset maintenance operations.</p>
<p>
The pair of screen shots in Figure 14 show the behavior of these buttons in two record maintenance situations. The top screen is a completed form for a new shipper after the user clicked the fifth navigational button. The Shipper ID field is blank since it's an autonumber field in Microsoft Access. Clicking Commit adds the record to the recordset and displays the first record in the recordset. Clicking Cancel clears the entry and displays the last record. Note that the caption on the rightmost button changes from Refresh to Cancel after the user inputs the data for one field. Do not click Delete since there is no record to delete until after you commit the entry. Navigational buttons will not function immediately after you click Delete when entering a new record.</p>
<p><img src="accessfig14.gif"></p>
<p>
In the lower screen shot in Figure 14, a record is being edited after its initial entry (the form shows the addition of Inc. to the company name). Click Commit to enter your edit in the form's underlying recordset. Clicking Delete removes the whole record, including the edit. Click Refresh to undo the edit and keep the record.</p>
<p>
I tested the controls to uncover any quirks, and a few emerged. Repeatedly pressing the next record or previous record navigational buttons occasionally results in a move to a new record that does not show the move to last record button. When this happens, clicking the Refresh button restores the screen. After moving to a blank record, I could cause the screen to collapse from three text boxes to one text box by clicking the Delete button followed by the Refresh button. At that point, clicking any navigational button would move me to an appropriate record.</p>
<p>
With a little study, you can come up with lots of modifications to the two files that can improve the look and functionality of wizard-generated forms. The code in Figure 15 shows excerpts from original and modified code from Shippers_1.asp. As originally programmed, the Next button does not change the record when you click it from the Last button. The same holds true when you click the previous record button from the first record. My modification allows users to circle through the records in a recordset. If they click the next record button from the last record, the screen shows the first record. Likewise, when a user clicks the previous record button from the first record, the screen shows the last record. </p>
<p><img src="accessfig15.gif"></p>
<p>
For many cases, you should not show autonumber fields on forms. Users cannot update this field since Microsoft Access controls it. You can remove controls from a form, such as the Shipper ID text box and label from the file containing alx in its name. In the example, the file's name is Shippers_<br>
1alx.asp. All the controls are grouped at the end of this file in a pair of &lt;DIV&gt; tags.</p>
<p>
Figure 16 includes an excerpt from Shippers_1alx.asp that presents the objects representing the Shipper ID text box and label. Notice that the ID for the first object is ShipperID. Other lines in the object explicitly refer to and set the value of rs.Fields("ShipperID"). Just after &lt;/OBJECT&gt; tag closes the definition of the text box, there is another &lt;OBJECT&gt; with an ID set to Label1. The caption property for this label is Shipper ID. By cutting these two controls out of Shippers_1alx.asp, the form in Figure 13 appears without a label or text box for Shipper ID.</p>
<p><img src="accessfig16.gif"></p>
<p>
You can create custom effects by adjusting the two wizard-generated form files. Programmers familiar with Visual Basic and Visual Basic for Applications will be able to quickly learn to modify these files because the language is a subset of the one they use now. Also, content authors who used earlier versions of the HTML Layout control and VBScript for client-side authoring will find the transition easy.</p>
<p>
I did not discuss managing the form graphically with either the HTML Layout control or FrontPage 97. When I tried these tools, it was too easy for me to corrupt my form code. If you decide to experiment with these tools on your own, I urge you to back up your two form files before beginning. This way you can always return to a known point of some value to you.</p>
<h2>Main Forms, Subforms</h2>
<p>
Copying main and subforms to the Web with the Publish to the Web Wizard is only a minor extension of copying bound main forms. Remember that it is imperative to set the Server URL in the fifth wizard screen (see the lower-right screen shot in Figure 1). The format for this setting for script files is http://<i>servername</i>/<i>folder</i>. Even if the server is not available and the folder has not been created at the time you run the wizard, you must specify this box as if they exist.</p>
<p>
The subform appears as another control on the main form, just like a label. Notice that I did not say like a text box. This is because subform controls are read-only. If you want to edit the subform, then you must set up another main form that is bound to the same records as your subform. You can then edit its field from controls on this main bound form.</p>
<p>
There is one extra step beyond single bound forms that you must take to view your subform controls. Subforms will generate a Microsoft VBScript runtime error with an older version of the HTML Layout control. Microsoft offers two solutions to developers. One requires you to download version 1.0.05.0000 of the HTML Layout control, which does not have these problems. You can check your version with Windows Explorer by locating Isctrls.ocx in the \Windows\Systems folder. Right-click the file and choose Properties. Then select the Version tab to determine if your version is recent enough. You can download the updated version from either http://www.microsoft.com/msdownload/ieplatform/iewin95.htm or http://www.microsoft.com/workshop/author/cpad. If you choose not to get the most recent version of the HTML Layout control, you can change your security rating from high to medium. This will allow your subform to show. Your browser will still display an ActiveX warning message as it moves between records.</p>
<p>
I used the wizard to generate a Web version of the Categories form from the Northwind database. Recall that this main/sub form combination has its main form bound to the Categories table and its subform bound to the Products table. Figure 17 shows the raw conversion of this form for the Web. Notice that it does not fit (and this is at an 800&nbsp;<font face="Symbol">&#165;</font>&nbsp;600 resolution). The scroll bar for the subform is off the right edge of the screen, and the navigator buttons at the bottom of the form do not show. Users can get to both of these by scrolling the main window. But every time the user moves to a new record, the scroll resets the form's top-left corner to (0,0) and the clipped image reappears.</p>
<p><img src="drgui.gif"></p>
<p><b>Figure 17: Catagories Form on the Web</b></p>
<p>
You already know the solution to this problem. Edit the controls' sizes and positions so they all fit on the screen. You can do this in a matter of minutes with a series of adjustments made to Categories_1alx.asp file from Notepad, checking the results in your browser each time. Figure 18 shows one solution to this problem. This simple, easy-to-make modification drastically improves the usability of the form.</p>
<p><img src="drgui.gif"></p>
<p><b>Figure 18: Adding a scroll bar to improve readability</b></p>
<h2>Summary</h2>
<p>
As you can see, Microsoft Access 97 and ASP offer many exciting opportunities for Office developers who are doing Web-related projects. If you are still using IDC/HTX technology, you should reconsider your use of that fine, venerable technology. Both IDC/HTX and ASP offer dynamic publishing of table, query, and form datasheets, but only ASP allows dynamic updating of data with forms.</p>
<p>
The Publish to the Web Wizard is a major convenience when you are developing. This is because you are likely to tweak Microsoft Access applications iteratively as you refine your design. By specifying a publication profile for a project, you can drastically reduce the time you take paging through wizard screens. All you need to do after setting up the profile for a project is to pick the database objects that you want to publish and click Finish. The wizard will overwrite previous versions of projects, so rename your old work if you want to retain it.</p>
<p>
Developers working with Microsoft Excel 97 can benefit from the new Web query feature. This allows developers to drop datasheets from the Web directly into a worksheet for local analysis. You can use ASP or IDC/HTX as a data source for Web queries. By tying a Web query to a dynamically published datasheet, you ensure that every use of the worksheet model will have the most current results. Also, it is quick and easy to develop an automated Web query design so that users just click a button or open a file to get the most recent data.</p>
<p>
I recommend learning more about the ASP object model and practicing with VBScript. I gave you several examples of the results that you can achieve with this approach. The Microsoft Access 97 Publish to the Web Wizard will automatically publish many interesting examples that you can cut, paste, and edit into your own custom applications. Still, a few moments spent with the ASP documentation will improve your productivity. You get it for free from ASP, which can be downloaded from the Microsoft Web site.</p>
<p>
This technology has certainly improved in the past year. On the other hand, you are likely to long for an integrated development environment with improved debugging features. Recent statements have suggested that an interim release is imminent. It might be available by the time you read this article. Also, it would be wonderful to have a graphical way to control the positioning and sizing of controls on forms once the wizard converts them for the Web.                                </p>
</font></BODY>
</HTML>

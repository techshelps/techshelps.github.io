<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Office Shortcuts: Customizing Your Right-Click Menus </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">

<h1>Office Shortcuts: Customizing Your Right-Click Menus </h1>
<p>
<i>By David Ringstrom</i></p>
<p>
You've probably used VBA to create custom menus for your spreadsheet applications. However, you might not realize you can also customize the shortcut menus that appear when you right-click on an object. This powerful technique allows you to keep frequently used commands a mere right-click away. </p>
<p>
In this article, we'll examine how to add and remove commands from shortcut menus. Focusing on Excel 97, we'll create an application that allows you to hide and unhide multiple workbook sheets - simply by right-clicking on a sheet tab. This will entail creating a user form that displays the names of any hidden sheets in the active workbook. You'll also be able to select multiple sheets to unhide, a major improvement over the multitude of mouse clicks normally required. </p>
<p>
We'll also demonstrate how to add a submenu to a shortcut menu. In this case, we'll add commands to an Excel shortcut menu that allow you to choose which direction the selection pointer should move, if at all, after pressing J in a worksheet cell.</p>
<h2>A CommandBar Named "Ply"  </h2>
<p>
You're probably familiar with the menu shown in FIGURE 1; it appears whenever you right-click on a sheet's tab. Let's begin by adding two options - Hide and Unhide - to the bottom of this shortcut menu. </p>
<p>
Before you begin, you should decide where you want to store the procedures. Ideally, you should add these to your Excel personal macro workbook, i.e. Personal.xls. (If you're unfamiliar with this file, please see the side bar "Your Personal Macro Workbook," on page XX.)</p>
<p>
To begin, activate the Visual Basic Editor by selecting Tools | Macro | Visual Basic Editor, or by pressing A!_. Next, right-click on VBA Project (PERSONAL.XLS) in the Project Explorer window, then choose Insert Module.</p>
<p>
Now add the <b>AddToPlyMenu</b> procedure, as shown in FIGURE 2. As you can see, every statement in this procedure manipulates the <b>CommandBars</b> collection; specifically, a single CommandBar in the collection named "Ply." </p>
<p>
So what exactly is a CommandBar? And which one is named "Ply?" <b>CommandBars</b> is a collection of CommandBar objects. CommandBar objects come in three types: Normal, MenuBar, and Popup (see FIGURE 3). The CommandBar object is new with Office 97. It's a complex topic, a complete discussion of which is outside the scope of this article. We're interested only in customizing the popup menus already available to Office 97. Which is plenty - there are 45 in Excel 97 alone! The following VBA code will list them all in the Immediate window. </p>
<pre><code>For Each CBar In CommandBars
  If CBar.Type = msoBarTypePopup Then
    Debug.Print CBar.Name
  End If
Next</code></pre>
<h1>Adding Menu Items</h1>
<p>
Returning to the <b>AddToPlyMenu</b> procedure (again, see FIGURE 2), we now know that the first statement refers to the shortcut menu that appears when we right-click in the sheet tab in Excel 97, and all statements within the <b>With...End With</b> block will apply to that menu:</p>
<pre><code>With Application.CommandBars("Ply")</code></pre>
<p>
In this statement, <b>CommandBars</b> appears as a property of the <b>Application</b> object, i.e. Excel 97 in this case. Since <b>Application</b> is the default object of the <b>CommandBars</b> property, the statement could be shortened to:</p>
<pre><code>With CommandBars("Ply")</code></pre>
<p>
Next, the <b>Reset</b> method is called to make sure the menu is reset to its default appearance before we add new menu items to it. This will keep us from adding the same menu items repeatedly. </p>
<p>
The next two statements add menu items to the "Ply" popup menu:</p>
<pre><code>.Controls.Add(Type:=msoControlButton).Caption = _
  "Hide Sheet(s)"
.Controls.Add(Type:=msoControlButton).Caption = _
  "Unhide Sheet(s)..."</code></pre>
<p>
Each <b>CommandBar</b> object has a <b>Controls</b> collection that contains all its associated controls. There are many types of controls available, but to accomplish our task we're interested only in the standard menu item control, which is specified by using the <b>msoControlType</b> constant, <b>msoControlButton</b>. For a complete description of all the types, search on "Type property" in Microsoft Office Visual Basic help. </p>
<p>
The <b>Add</b> method is used to add each new control to the <b>CommandBars.Controls </b>collection. The <b>Add</b> method requires the control type (assigned in parentheses), and in this case, a value for the control's <b>Caption</b> property. The two menu items we're adding have captions of Hide Sheet(s) and Unhide Sheet(s)..., respectively. </p>
<p>
The next statement:</p>
<pre><code>.Controls("Hide Sheet(s)").BeginGroup = True</code></pre>
<p>
inserts a group "break" above the two new menu items. Each menu control has a <b>BeginGroup</b> property that's activated by setting it to True.</p>
<p>
Based on the code we've reviewed so far, the "Ply" popup menu will now appear as shown in FIGURE 4. However, the new menu items won't do anything; functionality still needs to be associated with each menu item. The next two statements begin to address this:</p>
<pre><code>.Controls("Hide Sheet(s)").OnAction = "HideSheet"
.Controls("Unhide Sheet(s)...").OnAction = "UnhideSheet"</code></pre>
<p>
Here the <b>OnAction</b> property of each menu item (control) is associated with a procedure, i.e. when the Hide Sheet(s) menu item is selected, the <b>HideSheet</b> procedure will be called. </p>
<p><img src="dr_fig01.gif">
</p>
<p>
<b>FIGURE 1: The standard shortcut menu for sheet tabs.</b></p>
<p><img src="dr_fig02.gif">
</p>
<p>
<b>FIGURE 2: Working in the Visual Basic Editor. The <i>AddToPlyMenu</i> procedure adds two commands to Excel's worksheet tab menu.</b></p>
<table border=1 cols=3 frame=box rules=all>
<tr valign=top>
<td width=140><b>msoBarType Constant</b></td>
<td width=144><b>Example</b></td>
<td width=168><b>Description</b></td>
</tr>
<tr valign=top>
<td width=140>msoBarTypeNormal</td>
<td width=144>Standard, Format, etc.</td>
<td width=168>The familiar "menu bar." </td>
</tr>
<tr valign=top>
<td width=140>msoBarTypeMenuBar</td>
<td width=144>Worksheet Menu Bar and Chart Menu Bar</td>
<td width=168>Used for creating custom CommandBars.</td>
</tr>
<tr valign=top>
<td width=140>msoBarTypePopup</td>
<td width=144>Ply, Cell, Row, Column, etc.</td>
<td width=168>Popup or "Shortcut" menus, displayed by right-clicking.</td>
</tr>
</table><br>
<p>
<b>FIGURE 3: CommandBar types. </b></p>
<h2>Adding the Functionality</h2>
<p>
We have two pieces of functionality to create. Let's begin with the procedure to hide the selected workbook sheet(s). Just add this simple, single-statement procedure to the module containing the <b>AddToPlyMenu</b> procedure:</p>
<pre><code>Sub HideSheet()

  ActiveWindow.SelectedSheets.Visible = False

End Sub</code></pre>
<p>
That's all there is to it. When this procedure is run, all selected sheets will automatically be hidden. Keep in mind that at least one sheet in a file must be visible. Therefore, if you attempt to hide all sheets within a file, VBA will return an error.</p>
<p>
Although the procedure to hide sheets is simple, its counterpart for unhiding sheets is more complicated. To begin, you must create a user form by right-clicking on VBA Project (PERSONAL.XLS) in the Project Explorer window, then choose Insert | UserForm. Change the <b>Name</b> property to UnhideDlg, then change the <b>Caption</b> property to Unhide.</p>
<p><img src="dr_fig04.gif">
</p>
<p>
<b>FIGURE 4: The modified "Ply" popup menu with its two new menu items. </b></p>
<p>
Next, right-click on UnhideDlg in the Project Explorer window, then choose View Code. The VBA Editor should automatically create a procedure called <b>UserForm_Initialize</b>; modify it to appear as shown in FIGURE 5.</p>
<p>
Add a ListBox control to the form, and change its <b>MultiSelect</b> property to fmMultiSelectMulti. Just above the ListBox, add a Label control that contains the text Unhide sheet(s):. Next, add four CommandButton controls to the UserForm, and change their respective <b>Name</b> properties to CommandButtonOK, CommandButtonCancel, CommandButtonSelectAll, and CommandButtonDeselectAll. Then modify their <b>Caption</b> properties to OK, Cancel, Select All, and Deselect All, respectively. The dialog box should resemble that shown in FIGURE 6. Notice that the dialog box looks similar to Excel's built-in Unhide dialog box, except for the additional Select All and Deselect All CommandButtons. </p>
<p>
Now you're ready to assign procedures to the respective controls. To begin, double-click on the Cancel CommandButton to see the code associated with it. To unload the dialog box, add an <b>Unload</b> statement to the <b>CommandButtonCancel_Click</b> procedure:</p>
<pre><code>Private Sub CommandButtonCancel_Click()

  ' Unload the dialog box.
  Unload UnhideDlg

End Sub</code></pre>
<p>
Double-click the OK CommandButton to view the <b>CommandButtonOK_Click </b>procedure, and modify it to appear as shown in FIGURE 7. This procedure closes the Unhide dialog box, then determines which items in the ListBox the user selected and unhides the corresponding sheets.</p>
<p>
Now, let's write the underlying code for the Select All and Deselect All buttons. These buttons enable you to select or deselect every item in the ListBox - with a single click. This can save multiple mouse clicks if the ListBox contains several items. To proceed, double-click the Select All CommandButton, then insert the code shown here:</p>
<pre><code>Private Sub CommandButtonSelectAll_Click()

  ' Select all items in the ListBox. 
  For i = 0 To ListBox1.ListCount - 1
    ListBox1.Selected(i) = True
  Next

End Sub</code></pre>
<p>
When you've finished, repeat the process for the Deselect All CommandButton, using the following code:</p>
<pre><code>Private Sub CommandButtonDeselectAll_Click()

  ' Deselect all items in the ListBox.
  For i = 0 To ListBox1.ListCount - 1
    ListBox1.Selected(i) = False
  Next

End Sub</code></pre>
<p>
Now, add the <b>UnhideSheet</b> procedure to the module that contains the <b>AddToPlyMenu</b> and <b>HideSheet</b> procedures:</p>
<pre><code>Sub UnhideSheet()
  UnhideDlg.Show
End Sub</code></pre>
<p>
This procedure displays the UnhideDlg UserForm. Because the code for the tasks to be performed by each CommandButton is already assigned to the control, this procedure is only needed to display the dialog box itself.</p>
<p>
You're now ready to test the menu. Use the Project Explorer to switch to Module1, then click on the <b>AddToPlyMenu</b> procedure. Press 5 to run the routine; this will add the new commands to your sheet tabs shortcut menu.</p>
<p>
Now switch to Excel and create a new workbook that contains three sheets. Hold down C, then click on two of the three worksheet tabs. Right-click on one of the selected tabs, then choose Hide Sheet(s), as shown in FIGURE 8. The selected sheets should now be hidden.</p>
<p>
To unhide the sheets, right-click on the remaining sheet tab, and choose Unhide Sheet(s) to display the Unhide dialog box we've created (see FIGURE 9). Click the Select All CommandButton, then click OK. The hidden sheets should reappear. As you can see, this process is much easier than repeatedly selecting Format | Sheet | Unhide to display hidden sheets one at a time.</p>
<p>
</p>
<p>
<b>FIGURE 5: Use the <i>UserForm_Initialize</i> procedure to add the hidden sheet names to the list box.</b></p>
<pre><code>Private Sub UserForm_Initialize()

  ' Clear the listbox.
  ListBox1.Clear
  
  ' Insert hidden sheet names.
  For i = 1 To ActiveWorkbook.Sheets.Count
    If ActiveWorkbook.Sheets(i).Visible = False Then
      ListBox1.AddItem(ActiveWorkbook.Sheets(i).Name)
    End If
  Next

End Sub</code></pre>
<p><img src="dr_fig06.gif"></p>
<p>
<b>FIGURE 6: Select the sheets to unhide from this dialog box.</b></p>
<pre><code>Private Sub CommandButtonOK_Click()

  ' Close the dialog box.
  Unload UnhideDlg
  
  Application.ScreenUpdating = False

  ' Loop through each item in the ListBox.
  For i = 0 To ListBox1.ListCount - 1
    ' If an item is selected, unhide that sheet.
    If ListBox1.Selected(i) = True Then
      With ActiveWorkbook.Sheets(ListBox1.List(i))
        .Visible = True
        .Activate
      End With
    End If
  Next

End Sub</code></pre>
<p>
<b>FIGURE 7: This procedure unhides the selected sheets.</b></p>
<h2>Adding a Submenu to a Shortcut Menu</h2>
<p>
Now that we've discussed how to add commands to a shortcut menu, let's enhance this technique by adding a submenu, specifically, the Excel "Cell" shortcut menu.</p>
<p>
To begin, use the Project Explorer in the Visual Basic Editor to activate Module1 in your Personal.xls workbook. Then, create the procedure shown in FIGURE 10. This procedure adds a Move Selection option to the "Cell" CommandBar, then creates a submenu of selection movement options.</p>
<p>
When you've finished, create the procedures shown in FIGURE 11, which perform the selected tasks.</p>
<p>
Now let's test your handiwork: Run the <b>AddToCellMenu</b> procedure, which will add the new commands to the "Cell" shortcut menu. Next, switch to Excel, right-click on any cell, choose Move Selection, then select an option from the submenu, as shown in FIGURE 12. For instance, if you choose Disabled, the selection pointer will remain in the current cell when you press J. If you choose Left, the selection pointer will move one cell to the left each time you press J. This allows you to easily control the movement of the selection pointer, depending on the task at hand.</p>
<p><img src="dr_fig08.gif">
</p>
<p>
<b>FIGURE 8: Our customized shortcut menu makes quick work of hiding and unhiding sheets.</b></p>
<p><img src="dr_fig09.gif">
</p>
<p>
<b>FIGURE 9: The custom Unhide dialog box in action.</b></p>
<p><img src="dr_fig10.gif">
</p>
<p>
<b>FIGURE 10: The <i>AddToCellMenu</i> procedure adds the <i>Move selection </i>menu item to the Cell right-click menu.</b></p>
<h2>The Finishing Touch</h2>
<p>
Keep in mind that the additional menu options discussed in this article will only appear when you call the procedures. If you saved the procedures to your Personal.xls file, the macros will always be accessible from the Tools | Macros menu option. However, a better solution is to direct Excel to run the macros for you automatically when you launch the program. To do so, return to the Visual Basic Editor, then add the following procedure to Module1 of your Personal.xls workbook:</p>
<pre><code>Sub Auto_Open()

  Call AddToPlyMenu
  Call AddToCellMenu

End Sub</code></pre>
<p>
The <b>Auto_Open</b> procedure will run the menu macros automatically, and ensures that the custom menu commands will always be just a right-click away.</p>
<p>
Remember: Use the <b>Reset</b> method to return customized menus to their default state. The procedures in FIGURES 2 and 10 use this method to clear any modifications to the "Ply" and "Cell" CommandBars before adding new commands. Otherwise, some commands could appear multiple times on the same menu.</p>
<pre><code>Sub selDisabled()
  Application.MoveAfterReturn = False
End Sub

Sub selDown()
  Application.MoveAfterReturn = True
  Application.MoveAfterReturnDirection = xlDown
End Sub

Sub selRight()
  Application.MoveAfterReturn = True
  Application.MoveAfterReturnDirection = xlToRight
End Sub

Sub selUp()
  Application.MoveAfterReturn = True
  Application.MoveAfterReturnDirection = xlUp
End Sub

Sub selLeft()
  Application.MoveAfterReturn = True
  Application.MoveAfterReturnDirection = xlToLeft
End Sub</code></pre>
<p>
<b>FIGURE 11: These procedures specify which direction, if any, the cursor should move when the user presses J while in a cell. </b></p>
<p><img src="dr_fig12.gif">
</p>
<p>
<b>FIGURE 12: This customized shortcut menu makes it a snap to control the selection pointer as you perform different tasks.</b></p>
<h2>Conclusion</h2>
<p>
Modifying right-click menus is a powerful technique you can use to keep frequently used commands just a mouse-click away. We also demonstrated how to streamline certain tasks that the Excel development team chose to make difficult. This included unhiding more than one sheet at a time, and changing the movement direction of the selection pointer.</p>
<p>
As you can see, it's easy to customize the Excel environment to match the way you work. And although this article presented methods and properties specific to Excel 97, the technique of manipulating shortcut menus using the <b>CommandBars</b> property applies equally well to Access 97, PowerPoint 97, and Word 97. </p>
<p>
<i>The source referenced in this article is available for download from the Informant Web site at http://www.informant.com/mod/modnewupl.htm. File name: MOD9710DR.ZIP.</i></p>
<p>
<i>David Ringstrom, CPA, is President of Accounting Advisors, Inc., an Atlanta-based accounting and spreadsheet consulting firm serving clients nationwide. His previously published work includes articles on Lotus 1-2-3, Quattro Pro, and FileMaker Pro. For information concerning Accounting Advisors, Inc.'s consulting services, call (404) 252-3813, or send e-mail to </i>dringstrom@mindspring.com</p>
<h2>Your Personal Macro Workbook</h2>
<p>
If you've ever recorded an Excel macro, a hidden workbook, named Personal.xls, is stored in your \Office\Xlstart folder. This <i>personal macro workbook </i>opens automatically when you launch Excel; thus, any procedures stored in this workbook are always available when you're working in Excel. </p>
<p>
However, you might not have a Personal.xls workbook. To determine if you do, launch Excel, and select Window | Unhide from the menu. If Unhide is disabled, or if the Unhide dialog box (see FIGURE A) doesn't contain Personal.xls, you'll need to create the workbook. The easiest way to do this is to select Tools | Macro from the Excel menu, and click Record New Macro. Then select Personal Macro Workbook from the Store macro in drop-down list, and click OK. Then click the Stop Recording button on the Stop Recording toolbar. You're now ready to work with the Personal.xls workbook.</p>
<p>
<i>- David Ringstrom</i></p>
<p><img src="dr_figa.gif">
</p>
<p>
<b>FIGURE A: Select Window | Unhide to display the Unhide dialog box. </b></p>
</font></BODY>
</HTML>

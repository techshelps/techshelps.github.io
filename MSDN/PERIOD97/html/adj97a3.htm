<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Custom Dialog Box for Changing the Case of Text</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2">

<h1>A Custom Dialog Box for Changing the Case of Text</h1>
<p>
<i>by Stuart Vessels</i></p>
<p>
Spelling errors and typos can damage the professional integrity of any report. Although Excel's spell-checker allows you to quickly find and fix most spelling errors, it doesn't find typos, such as a field title that's entered in a case different from other field titles, or a common name, such as <i>john</i> or <i>smith</i>, that's entered in lowercase letters. </p>
<p>
Unfortunately, Excel doesn't have a command that converts all text strings in a range to the same case (like Word does). Making the changes yourself can take a lot of time and can leave the door open for embarrassing typos. </p>
<p>
You can save time and trouble by creating your own case-manipulation feature: the custom dialog box shown in <b>Figure A</b>. To change the case of a range of text strings using this feature, simply select that range; press a keyboard combination, such as [Ctrl]y, to display your custom dialog box; and choose the case you want to use by clicking one of the radio buttons. Click OK, and the VBA procedure assigned to this dialog box will convert the case of the text strings in the selected range to the one you specified. </p>
<p>
<img src="adj97a3a.gif" border=0></p>
<p>
<b>This custom dialog box lets you change the case of a range of text strings.</b></p>
<h2>Inserting a user form</h2>
<p>
To build the dialog box shown in Figure A, begin by opening the workbook you want to contain it; we'll use a workbook named Macros.xls. (You can download our sample files from <b>www.cobb.com/adj</b>; click on the Source Code hyperlink and download oct97.zip.) This workbook will have to be open in order for you to use the custom dialog box while another workbook is active. </p>
<p>
Now, open the Visual Basic Editor by pressing [Alt][F11]. Choose Insert | User Form; the Editor will open an empty form titled UserForm1. Our Change Case dialog box contains four radio buttons, an OK button, and a Cancel button. To create the radio buttons, click and drag the OptionButton control in the Toolbox onto the empty form; repeat this process three more times. Then, click and drag two CommandButton controls onto the form. The form now looks like the one shown in <b>Figure B</b>; each control displays its default name as its caption.</p>
<p>
<img src="adj97a3b.gif" border=0></p>
<p>
<b>Drag the appropriate controls from the toolbox to the user form. </b></p>
<p>
Table A<b> </b>lists the property values you need to assign to the user form and its six controls. After you do so, resize and move the controls as necessary to make the form look the way you want. If the minimum interval on the form's grid is too small or too large, you can change it by choosing Tools | Options..., clicking the General tab, and specifying new grid unit values in the Width and Height text boxes. </p>
<p>
<b>Table A: User form properties</b></p>
<table border=1 cols=4 frame=box rules=all>
<tr valign=top>
<td width=148><b>Control</b></td>
<td width=148><b>Name</b></td>
<td width=148><b>Property</b></td>
<td width=148><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=148>UserForm1</td>
<td width=148>ChangeCaseDialogBox</td>
<td width=148>Caption</td>
<td width=148>Change Case</td>
</tr>
<tr valign=top>
<td width=148>OptionButton1</td>
<td width=148>OptionTitle</td>
<td width=148>Accelerator<p>
Caption</p>
<p>
TabIndex</p>
<p>
Value</p>
</td>
<td width=148>T<p>
Title Case</p>
<p>
2</p>
<p>
True</p>
</td>
</tr>
<tr valign=top>
<td width=148>OptionButton2</td>
<td width=148>OptionSentence</td>
<td width=148>Accelerator<p>
Caption</p>
<p>
TabIndex</p>
</td>
<td width=148>S<p>
Sentence case</p>
<p>
3</p>
</td>
</tr>
<tr valign=top>
<td width=148>OptionButton3</td>
<td width=148>OptionLower</td>
<td width=148>Accelerator<p>
Caption</p>
<p>
TabIndex</p>
</td>
<td width=148>l<p>
lowercase</p>
<p>
4</p>
</td>
</tr>
<tr valign=top>
<td width=148>OptionButton4</td>
<td width=148>OptionUpper</td>
<td width=148>Accelerator<p>
Caption</p>
<p>
TabIndex</p>
</td>
<td width=148>u<p>
UPPERCASE</p>
<p>
5</p>
</td>
</tr>
<tr valign=top>
<td width=148>CommandButton1</td>
<td width=148>ButtonOK</td>
<td width=148>Caption<p>
Default</p>
<p>
TabIndex</p>
</td>
<td width=148>OK<p>
True</p>
<p>
0</p>
</td>
</tr>
<tr valign=top>
<td width=148>CommandButton2</td>
<td width=148>ButtonCancel</td>
<td width=148>Cancel<p>
Caption</p>
<p>
TabIndex</p>
</td>
<td width=148>True<p>
Cancel</p>
<p>
1</p>
</td>
</tr>
</table><br>
<h1>Coding the user form</h1>
<p>
Now you're ready to create the click event procedures that will make the OK and Cancel buttons work. You create the VBA code in the user form's module (as opposed to an independent module). Double-click on the form's OK button to open its Click event code window and enter the code shown in Listing A. </p>
<p>
<b>Listing A: The OK button's Click event</b></p>
<pre>Private Sub ButtonOK_Click()
<code>Application.ScreenUpdating = False</code>

<code>'Title Case</code>
<code>If OptionTitle Then</code>
<code>  For Each Cell In Selection</code>
<code>    If Not Application.IsNonText(Cell.Value) _</code>
<code>    Then</code>
<code>      Cell.Value = _</code>
<code>      StrConv(Cell.Value, vbProperCase)</code>
<code>    End If</code>
<code>  Next Cell</code>
<code>End If</code>

<code>'Sentence case</code>
<code>If OptionSentence Then</code>
<code>  For Each Cell In Selection</code>
<code>    If Not Application.IsNonText(Cell.Value) _</code>
<code>    Then</code>
<code>      Entry = LCase(Cell.Value)</code>
<code>      FirstChar = UCase(Left(Cell.Value, 1))</code>
<code>      Cell.Value = FirstChar &amp; Mid(Entry, 2, _</code>
<code>      Len(Entry) - 1)</code>
<code>    End If</code>
<code>  Next Cell</code>
<code>End If</code>
<code>    </code>
<code>'lowercase</code>
<code>If OptionLower Then</code>
<code>  For Each Cell In Selection</code>
<code>    If Not Application.IsNonText(Cell.Value) _</code>
<code>    Then</code>
<code>      Cell.Value = LCase(Cell.Value)</code>
<code>    End If</code>
<code>  Next Cell</code>
<code>End If</code>

<code>'UPPERCASE</code>
<code>If OptionUpper Then</code>
<code>  For Each Cell In Selection</code>
<code>    If Not Application.IsNonText(Cell.Value) _</code>
<code>    Then</code>
<code>      Cell.Value = UCase(Cell.Value)</code>
<code>    End If</code>
<code>  Next Cell</code>
<code>End If</code>

<code>Unload ChangeCaseDialogBox</code>

<code>End Sub.</code></pre>
<p>
Then, return to the form, double-click on the Cancel button, and enter the following line of code in its Click event:</p>
<pre><code>Unload ChangeCaseDialogBox</code></pre>
<h1>Displaying the dialog box</h1>
<p>
Now that your dialog box is in working condition, you'll create a simple procedure to display it. You must create this procedure in an independent module, so first choose Insert | Module. Enter the following lines of code:</p>
<pre>Sub ChangeCaseOfText()
'Display Change Case dialog box
ChangeCaseDialogBox.Show
End Sub
</pre>
<p>
In the Properties window, assign the module the name <i>ChangeCaseOfText</i>.</p>
<h2>Running the macro</h2>
<p>
You're now ready to test your dialog box. Switch back to Excel and select a range of text whose case you want to manipulate. For example, Figure C<b> </b>shows a workbook named ChangeCase.xls; we've selected cells A2:C10. To run the procedure that displays the Change Case dialog box, choose Tools | Macro | Macros... or press [Alt][F8]. The Macro dialog box will appear, as shown in Figure D. </p>
<p>
<img src="adj97a3c.gif" border=0></p>
<p>
<b>We want to adjust the case of the text strings in this range of cells.</b></p>
<p>
<img src="adj97a3d.gif" border=0></p>
<p>
<b>You can run the macro by double-clicking on its name in this dialog box. </b></p>
<p>
Double-click on the macro name, and Excel will display your custom dialog box. Choose a letter case by clicking the corresponding radio button; for example, we selected the Title Case button. Then, click OK. The VBA code will change the case of the text strings in the selected range, as shown in Figure E, and close the dialog box.   </p>
<p>
<img src="adj97a3e.gif" border=0></p>
<p>
<b>The macro made several changes in our worksheet's selected cells.</b></p>
</font></BODY>
</HTML>

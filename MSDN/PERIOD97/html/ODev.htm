<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the Web with Office 97 Developer Edition and Visual InterDev</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1>Extending the Web with Office 97 Developer Edition and Visual InterDev</h1>
<p>
Now the developer community has a powerful duo for developing Web sites based on Microsoft® Office documents-Microsoft Office 97 Developer Edition (ODE) and Microsoft Visual InterDev™. ODE gives developers using Office 97 in-depth documentation and advanced functionality in areas that have special interest to them. Many of ODE's features will also appeal to Web developers. Visual InterDev, a core component in Microsoft Visual Studio™ 97, targets team Web site development, and at least some of the content authors and even database contributors are likely to be Microsoft Office 97 users. Many of these will be power users and developers using ODE.</p>
<p>
This article introduces you to both ODE and Visual InterDev. I'll start off with a brief overview of ODE, then take a more detailed look at two of its new capabilities, hyperlink programming and the Web Browser ActiveX™ control. I'll focus on hyperlink programming for Microsoft Excel, PowerPoint, and Word, in particular. Then, I'll show you how to use the Web Browser ActiveX control to bring Web connectivity to custom Office applications. My Visual InterDev discussion focuses on how to use the product with the ODE. The sample applications reveal how to integrate Visual InterDev with Office 97 for Web site development.</p>
<h2>ODE Overview</h2>
<p>
The ODE provides a broad range of tools to support the needs of custom application developers. Some of these include software available only with the ODE (and not Office 97 Professional Edition), and manuals and whitepapers distributed along with the ODE. By using the documentation along with the software tools, you can build more functionality into Office 97 custom applications.</p>
<p>
The Microsoft Office 97 <i>Visual Basic Programmers Guide </i>ships with the ODE. This handy manual introduces the basics of Visual Basic® for Applications programming and shows you how to apply that knowledge to the object model of each Office component. It also presents advanced topics such as programming the Office Assistant, designing custom menus and toolbars, ODBCDirect, and error trapping and debugging. The manual offers a rich selection of code segments and procedures for you to try. It presents Visual Basic for Applications equally well for use with Microsoft Access, Microsoft Excel, PowerPoint®, and Word.</p>
<p>
The second manual in the ODE is <i>Building Applications with Microsoft Access 97</i>. This manual includes more detail on Visual Basic for Applications coding and debugging specific to the Access environment. Other important topics in the manual include security, multiuser development, client/server application design, database replication, and Internet and intranet development.</p>
<p>
A major attraction of both these manuals is that they're available in hard copy, which makes them easy to lug around without worrying about battery life. You can also highlight and underline as your needs dictate. In addition, I discovered <i>Building Applications with Microsoft Access 97</i> available for viewing with a browser on the ValuPack that ships with Office 97 Professional Edition. Since ODE owners get this CD, they have their choice of working with the manual in either format.</p>
<p>
Two additional ODE-only whitepapers further enable developers to take advantage of the Office 97 platform. The Replication Manager whitepaper provides an excellent introduction to this important topic while it describes the enhancements to replication with Microsoft Access 97. You can control replication directly or through Data Access Objects (DAO) from Microsoft Access, Visual Basic, Microsoft Excel, Visual C++®, and Project 97. Developers can also set up replication schemas with the new version of Replication Manager that ships exclusively with the ODE. Office 97 enhances database replication over Office 95 in two areas. First, the new Jet engine performs partial replication. This can dramatically speed up performance for mobile workers and remote sites that don't need to synchronize with a whole database. Second, Jet 3.5 can perform replication over a company intranet or the Internet, thus lowering the communication costs for synchronizing data. A Partial Replica Wizard is available free of charge at http://www.microsoft.com/accessdev/freesoft.htm.</p>
<p>
The second whitepaper introduces the topic of source code control in Microsoft Access 97-an upgrade of the database that targets teams of developers. Source code control tracks changes to and versions of database objects so developers can track the history of database objects and rollback changes to objects (see Figure 1). Even independent developers can benefit from the rollback feature because it lets a developer recover an earlier version of a database object before some program bug corrupted its performance. The checkin and checkout features make it easy for one developer to pass design changes on to other team members. Integrated source code control is available only to ODE users who own a separate source control package.</p>
<p><img src="odevfig01.gif"></p>
<p>
The Microsoft ODE Tools Sampler is a subset of Microsoft Developer Network (MSDN) material that targets the needs of Office developers. After installing the CD, you will be able to browse and search for categories of materials including backgrounders and whitepapers, developer-oriented product documentation, stories from leading periodicals, sample code, and KnowledgeBase articles. Because this product is released concurrently with Office 97, the material refers to earlier versions of Office, which still comes in handy if you need to maintain some older Office applications as you develop new ones with Office 97.</p>
<p>
The new Setup Wizard is a model of simplicity while permitting fine-grained control over how your custom applications will load. The custom setup program it generates can load one or more .mdb files comprising your application, ActiveX controls, the runtime version of Microsoft Access 97, and other supporting files for your custom application. The Microsoft Access 97 runtime version is royalty free, but it's only available as part of the ODE.</p>
<p>
The enhanced Help Workshop for Windows® 95 adds a graphical user interface for constructing Access help files. It runs with Windows 95 as well as Windows NT® versions 3.51 or 4.0. Use the Win32® API Viewer to ease the process for incorporating API declarations in your custom applications. The Viewer facilitates searching the collection of Win32 interfaces so that you can copy one or more to the clipboard. From there, you can easily insert the interfaces in your custom application.</p>
<h2>Hyperlink Programming</h2>
<p>
Hyperlinks in Office 97 can point to a URL, another <br>
Office file, or another part of the same file. The exact object to which a hyperlink can jump varies by component. <br>
For instance, Word permits hyperlinks to bookmarks, <br>
while PowerPoint allows jumps to slides. With Microsoft <br>
Excel, a hyperlink can reference a worksheet or a range <br>
of worksheet cells. Access permits any database object to <br>
be a hyperlink target.</p>
<p>
Using the Hyperlinks collection, you can add and follow hyperlinks in Microsoft Excel, PowerPoint, and Word. (Access 97, however, does not rely on this collection as the basis for programming hyperlinks.) To insert a hyperlink under programmatic control in Microsoft Excel, PowerPoint, or Word, you must specify a hyperlink address and anchor it in an object associated with the hyperlink. PowerPoint objects can have two hyperlinks associated with them: one that activates when the mouse moves over them and another that's invoked by a mouse click. Or you can add a label or graphic to mark the hyperlink. This is especially convenient when you want a user to click a label or graphic to transfer control to the hyperlink address (see <i>MIND</i>, April 1997 for more information on hyperlink programming in Access).</p>
<p>
Figure 2 shows a form designed in Microsoft Excel that lets users jump to any one of a preselected set of hyperlinks. Clicking the combo box opens the list of hyperlinks from which a user can choose. A click to the command button with the caption Jump then causes the browser to open the selected URL. When a user clicks the back button on the URL, the browser closes and control returns to Microsoft Excel.</p>
<p><img src="odevfig02.gif"></p>
<p>
The AddLink procedure adds hyperlinks to the second worksheet in the active workbook. The code inserts four hyperlinks in cells A1 through A4. I attached this public procedure to Sheet 1 to demonstrate the flexibility with which you can deploy procedures throughout an application.</p>
<p>
Public Sub AddLink()</p>
<p>
Dim wrk As Worksheet</p>
<p>
Set wrk = ActiveWorkbook.Sheets(2)</p>
<p>
wrk.Hyperlinks.Add Address:= _</p>
<p>
"http://www.microsoft.com/", _</p>
<p>
Anchor:=wrk.Range("A1"</p>
<p>
wrk.Range("A1").NumberFormat = ";;;"</p>
<p>
wrk.Hyperlinks.Add Address:= _</p>
<p>
"http://www.microsoft.com/mind/", _</p>
<p>
Anchor:=wrk.Range("A2")</p>
<p>
wrk.Range("A2").NumberFormat = ";;;"</p>
<p>
wrk.Hyperlinks.Add Address:= _</p>
<p>
"http://www.microsoft.com/officedev/", _</p>
<p>
Anchor:=wrk.Range("A3")</p>
<p>
wrk.Range("A3").NumberFormat = ";;;"</p>
<p>
wrk.Hyperlinks.Add Address:= _</p>
<p>
"http://www.microsoft.com/vinterdev/", _</p>
<p>
Anchor:=wrk.Range("A4")</p>
<p>
wrk.Range("A4").NumberFormat = ";;;"</p>
<p>
End Sub</p>
<p>
The procedure starts by declaring a reference for a worksheet. Next, it sets the reference to the second worksheet. Then, it uses the Add method of the Hyperlinks collection to attach a hyperlink address in cell A1. Next, the code sets the NumberFormat property of the range equal to ";;;". This hides the cell's contents. These last two lines are repeated for cells A2 through A4.</p>
<p>
I invoke the AddLink procedure from an Auto_Open Visual Basic for Applications script in Module 1 of the Microsoft Excel project:</p>
<pre><code>Sub Auto_Open()
    Sheet1.AddLink
    HyperlinkJumps.Show
    End Sub</code></pre>
<p>
The Auto_Open script performs one other function-it opens the form with the hyperlinks and the command button. It does this by applying the Show method to the form named HyperlinkJumps.</p>
<p>
A private event procedure (UserForm_Initialize) behind the HyperlinkJumps form fires as it opens. The procedure populates the combo box with the AddItem method. It adds hyperlinks from the second sheet to the combo box. The event procedure uses the For Each...Next statement to loop through all the hyperlinks on the sheet.</p>
<pre><code>Private Sub UserForm_Initialize()
Dim hypCurrent As Hyperlink
For Each hypCurrent In ActiveWorkbook.Sheets(2).Hyperlinks
   cboMyHyperlinks.AddItem hypCurrent.Address
Next
End Sub</code></pre>
<p>
The final procedure for this application fires when a user clicks the command button with the caption Jump (cmdJump_Click). The procedure applies the Follow method to a hyperlink in the collection on the second worksheet. The index of the selected item from the combo box serves as a guide to picking a hyperlink. The code adds one to the combo box index since it starts at zero, but the hyperlinks in a collection start with the number one.</p>
<pre><code>Private Sub cmdJump_Click()
ActiveWorkbook.Sheets(2).Hyperlinks _
    (cboMyHyperlinks.ListIndex + 1).Follow
End Sub</code></pre>
<h1>Web Browser ActiveX Control</h1>
<p>
Although the Web Browser ActiveX control ships with the Office 97 Professional edition (and with any Office app that includes the ValuPack), it receives ample coverage in the Microsoft Office 97 <i>Visual Basic Programmers Guide </i>and <i>Building Applications with Microsoft Access 97</i>. I found the Developer Solutions sample database an excellent place to learn the basics of this very interesting control.</p>
<p>
Before using the Web Browser control, you must install Internet Explorer 3.0. This control can open standard Web pages based on HTML code, dynamic Web pages based on either .idc/.htx or .asp files, and most ActiveX documents if it has the corresponding application or file reader registered. The documents it can open include Microsoft Excel workbooks, PowerPoint slide shows, and Word documents. While you cannot open an Access database directly (as you can with the other Office components), you can hyperlink to a database on a remote server. This downloads a copy of the database, then opens it in Access.</p>
<p>
A key Web Browser method is Navigate. This method uses the syntax object.Navigate URL, where the object is a proper reference to the Web Browser, such as Me!ActiveXCtl, and URL is the target for a new address. It can be an Internet site, an intranet address, or even a file on your hard drive or LAN.</p>
<p>
Figure 3 shows the <i>MIND</i> Web site viewed from the Web Browser control in a Microsoft Access app. The Web Browser control, Me!ActiveXCtl, appears below a simple text box control, Me!txtLinks. The Web Browser navigates to a default URL when the form opens. You can jump to a new URL by typing it in the text box.</p>
<p><img src="odev03.gif"></p>
<p>
Two simple event procedures manage the form's behavior. The first uses the Navigate method to point the form at the default URL in Me!txtLinks. The procedure launches as <br>
the form loads and fires whenever a user updates the value in Me!txtlinks. The second procedure again invokes the Navigate method to jump to the new URL indicated in the text box.</p>
<pre><code>Private Sub Form_Load()
    Me!ActiveXCtl.Navigate Me!txtLinks
End Sub

Private Sub txtLinks_AfterUpdate()
    If Len(Me!txtLinks) &gt; 0 Then
        Me!ActiveXCtl.Navigate Me!txtLinks
    End If
End Sub</code></pre>
<p>
The Developer Solutions sample database illustrates a wide variety of techniques for embellishing the behavior of this application. For example, it demonstrates how the GoForward, GoBack, and GoHome Web Browser methods cause the control to navigate among the pages visited during the current surfing session. These and other methods can be assigned to command buttons on a form so that users can readily invoke them. Read the complete documentation for this control at http://www.microsoft.com/intdev/sdk/docs/iexplore. It covers the broad range of properties, methods, and events associated with the Web Browser control.</p>
<p>
Let's take a look at the action of the GoHome method to start you on your way to developing a fully customizable browser that integrates tightly with your corporate Office 97 applications. Figure 4 shows a new button on the browser with a caption of Go Home. Clicking this button invokes the Web Browser's GoHome method, causing the browser to show the default Start Page as specified on the Internet Explorer setting sheet.</p>
<p><img src="odev04.gif"></p>
<p>
My customization (shown below as Go_Home_Click) presents a message box that instructs the user how to change the default Start Page setting. It also places the current Start Page address into the form's text box. Without this closing assignment statement, the text box would be out of synch with the location in the browser's window.</p>
<pre><code>Private Sub Go_Home_Click()
Dim Msg As String
        
    Me!ActiveXCtl.GoHome
    Msg = "Is this where you want to be?  If not, " &amp; _
       "change Internet Explorer (IE) Start Page.  " &amp; _
       "Choose View, Options from the" &amp; _
       "IE menu.  Then, select the Navigation tab.  " &amp; _
       "Edit the Start Page setting on the tab."
    MsgBox Msg
    Me!txtLinks = Me!ActiveXCtl.LocationURL
End Sub</code></pre>
<h1>Office 97 Meets Visual InterDev</h1>
<p>
There are two common ways for Office developers and power users to prepare input for Visual InterDev Web sites. First, they can easily convert their output to HTML with the File|Save as HTML command. Second, they can save their work as a normal ActiveX document, allowing IE 3.0-compatible browser users to view it. The latter technique requires either the corresponding Office component or its free file reader to reside on a client workstation.</p>
<p>
Figure 5 shows a Visual InterDev dialog box that is ready to insert an ActiveX workbook file into one of its Web sites. Choose Project|Add to Project|Files to present this dialog. A developer can use the dialog to navigate visually to the file that needs insertion in a Web site. Be sure to set the file type properly so that you'll be able to view the file that you want to insert. Notice that the Insert Into drop down box permits the option of inserting a file into a different Web server site than the one on which you are currently working.</p>
<p><img src="odev05.gif"></p>
<p>
This file is interesting for several reasons: it includes scripts for automating a task, the script actually calls another Web site to download some information and update its charts, and the file, Pcquote.xls, is free with Microsoft Excel 97. In fact, there is a collection of other workbooks that use the same new technology, called Web queries, to bring different kinds of information over a Web connection into a workbook.</p>
<p>
Office users will feel right at home with the FrontPage™ 97 component of Visual InterDev. This package can be used for many common Web site tasks, such as building and editing lists of hyperlinks. The FrontPage user interface generally mirrors that of Office 97. It even includes the same Insert Hyperlink tool that is available in Office 97 applications. Many efficiencies follow from the fact that FrontPage 97 and Office 97 can share the same spell checker, find and replace function, and thesaurus. <br>
Visual InterDev and Front-Page 97 also share Web sites, so that changes made in one package appear in the other. This permits Office 97 content authors to enjoy the power and team-building capabilities afforded by Visual InterDev while they also enjoy the simplicity of operation in FrontPage.</p>
<p>
Figure 6 presents a hyperlink view of a Web site from FrontPage. My Office Home Page is the default file <br>
for the site MyOfficeSample. It has direct hyperlinks to four other pages. One of them is the Pcquote.xls file selected in Figure 5. Two other files are ActiveX documents from PowerPoint and Word. The last hyper-link from My Office Home Page is to another HTML file. This file is the index file to a PowerPoint slide show that was converted to HTML with the PowerPoint 97 File|Save as HTML wizard.</p>
<p><img src="odev06.gif"></p>
<p>
My Office Home Page is a simple HTML file that I initially created with FrontPage 97. When first developed, it offered hyperlinks to just three other pages. I chose to add the Microsoft Excel file later. Rather than going through the FrontPage Editor to insert a row into the table listing the links, add text for the link, and designate an address, I added the hyperlink with Visual InterDev. This required me to copy a few lines of HTML and edit a text string. It was faster and simpler than performing the same function with FrontPage.</p>
<p>
When it comes to the Web, appearances count a lot. Therefore, I present the MyOfficeSample site to give you an idea of what can be accomplished in a rush by someone with no artistic training or aspirations. Figure 7 shows the default page for the site, which lets visitors jump to other pages.</p>
<p><img src="odev07.gif"></p>
<p>
The header for the page and the individual hyperlinks are in a single column table with five rows. The Table menu command is very similar to the one in Word. A gray textured background, one that ships with FrontPage, shows off the hyperlink labels and title. I used the FrontPage bold tool to make the hyperlink text contrast more with the background. I simply clicked the bullet tool to mark the start of each hyperlink.</p>
<p>
Figure 8 shows the Microsoft Excel document inside an Internet Explorer session. It includes an Update button that visitors can click to get the latest stock data. It also includes a table and a bar chart displaying the results from the return set to the Web query that the Update button launches. A sign below the table marks a hyperlink to the Web site for PcQuote. This worksheet provides a free, timely service to visitors in a visually appealing way and is easy to install on any Web site with Visual InterDev. </p>
<p><img src="odev08.gif"></p>
<p>
Figure 9 displays the first slide in the PowerPoint presentation that you can jump to from the site's home page. Navigator buttons below the slide help visitors select slides for viewing. By clicking the button with an A icon, users can convert the slides from graphics to text. This minimizes the visual impact of a PowerPoint presentation, but visitors on slow links to a site may prefer it. The button marked with an I jumps to the index for the show. This includes a standard hyperlink listing of all slides, contact information for the author, and any other material that the content author chooses to include.</p>
<p><img src="odev09.gif"></p>
<p>
The slide in Figure 9 is part of a show that was converted to HTML format by a PowerPoint wizard. In addition to performing the conversion, the wizard automatically adds all the buttons and the index page with its hyperlinks. PowerPoint users can make design choices at several points in the succession of wizard screens to customize a presentation and the circumstances of that presentation. Unfortunately, users cannot make the choice to preserve animation such as flying bullets. The HTML format converter removes this element of dynamism.</p>
<p>
Figure 10 shows a PowerPoint slide with animation being viewed from a browser. Since there is no conversion needed for this slide, there is no loss of fidelity. The slide depicts a flying bullet with the second word of the last bullet moving in from the right side of the screen, with concurrent playback of audio effects. Hyperlinks can be added to slide shows to facilitate navigation within a show and to other pages on a Web site, such as the home page.</p>
<p><img src="odev10.gif"></p>
<p>
The PowerPoint Animation Player is a way for those who do not have PowerPoint to get full-featured PowerPoint presentations over the Web. As with other ActiveX components, the first time this player is used, the visitor must wait for it <br>
to download.</p>
<p>
Word 97 includes a number of features that are especially well-suited for presentation over a Web. Three that stand out are animated text, textured backgrounds, and hyperlinks to other pages in a site (see Figure 11). Word 97 should definitely be considered as a content authoring tool when text is the major portion of what is needed. The Word format appears with no loss of resolution because it plays in the browser as an ActiveX document. Figure 11 shows three different animation effects: Las Vegas Lights, Blinking Text, and Sparkle Text; the visual effect when viewed in a browser should match the animation names. Though Figure 11 is the only one to show a hyperlink back to the default or home page, the other Office components offer this functionality as well. </p>
<p><img src="odev11.gif"></p>
<h2>Dynamic&nbsp;Data&nbsp;from&nbsp;a&nbsp;Visual&nbsp;InterDev&nbsp;Site</h2>
<p>
There are some ways in which Access <br>
and Visual InterDev were made for each other. This is not surprising considering the source of both products. It also indicates Microsoft's appraisal of Access as a tool that targets both developer needs and "typical" database users.</p>
<p>
The key point is that Visual InterDev is designed to make powerful use of Active Server Pages (.asp files). Visual InterDev is also particularly good at delivering data dynamically over a Web connection. In fact, one of the three ways that Microsoft Access 97 can write data to a Web site is with .asp files. Access does this through a wizard that codes the pages for developers. Access will even write a switchboard HTML page that will let visitors invoke the .asp files through hyperlinks. Since writing .asp files can be a burden for typical Microsoft Access developers and power users, the wizard is very important. The <i>Building Applications with Microsoft Access 97</i> manual even describes how to save an Access form as an .asp file that will let visitors browse, edit, add, and delete live data over a Web (with permissions).</p>
<p>
Visual InterDev also comes with its share of goodies for making life easy for Access developers. First, it includes a wizard of sorts for creating ODBC data source names (DSNs). The Visual InterDev Help files describe a new file-based DSN that offers significant advantages over the machine-dependent DSNs with which you may be familiar. These file DSNs can be used from any machine; you don't have to create a new one for every machine that uses a database file. However, you don't need them after they are used in an app. If the DSNs are accidentally damaged or destroyed, it will not matter after their use. Also, you can use the new DSNs to create an ActiveX Data Object (ADO). These new ADOs eliminate the need for keeping the DSN. As a side point, I noticed that the ADO made it easy to browse my database from within Visual InterDev without having to start an Access session. This is convenient for checking the results of a query.</p>
<p>
A simple three-step process can summarize how to develop dynamic database apps with Microsoft Access and Visual InterDev. First, create a DSN and an ADO in Visual InterDev. Second, generate the .asp files in Access with the Publish to the Web Wizard. (See my article in <i>MIND,</i> April 1997 for a discussion of how to perform a similar process for .idc and .htx files.) Third, test the application with a browser that visits the server and performs all system functions. You can redesign the custom application as needed from either Visual InterDev or Access. If you use Visual InterDev, you'll likely make adjustments with code and special database tools to simplify the process. Making revisions from Access will require saving over old versions of your .asp files.</p>
<p>
To test and demonstrate the potential of the combination of Access and Visual InterDev, I created a new Visual InterDev site with a database connection to the Northwind database. Then, I developed a pair of .asp files from within Microsoft Access. One file lists the contents of the Shippers tables. The second file lists the contents for a select set of fields from the Categories table. I follow the Shippers table example through this example because it is smaller than the Categories table.</p>
<p>
Figure 12 presents a view from Visual InterDev of the application immediately after creation of the ActiveX Data Object. This object opens a live link to all database tables and queries from within Visual InterDev. The window on the left shows all the tables and the first couple of queries in Northwind. The first two rows in this window list the site name and the database name and path. The window on the right shows the contents of the Shippers tables. You can add, edit, and delete rows in the database tables from this view. Tabs at the bottom of the left window let developers show a different view of the project and provide an entry to the Visual InterDev online documentation.</p>
<p><img src="odev12.gif"></p>
<p>
Figure 13 presents the FileView tab contents for the Northwind database. This window lists all the files in the project, similar to the folder view in FrontPage Explorer. The right window shows a browser view of the Shippers_1.asp file. I created this file, as well as Categories_1.asp, with the Publish to the Web Wizard in Access. A page selected in <br>
the left panel appears at the top of the stack of pages on the right side. The default mode of showing an HTML page is as raw code, but developers can bring up a short-cut menu to show the page in browser view.</p>
<p><img src="odev13.gif"></p>
<p>
One key benefit of .asp files is that they can execute all scripts on the server. This in turn can return very simply designed pages that will look the same in multiple browsers. Executing scripts on the server also keeps them confidential, preserving a developer's investment in code.</p>
<p>
Figures 14 and 15 show two different HTML listings for the Shippers_1.asp file. Figure 14 is from the server, and Figure 15 is from a browser that pointed at http://CABCABCAB/MyNorthwind/Ship-pers_1.asp. (My intranet server's name is CABCABCAB.) The site's name is MyNorthwind, and the report's file name is Shipper_1.asp. (Note that in Microsoft Access, only tables, queries, and forms can be exported to .asp. Reports can be saved only as HTML.)</p>
<p><img src="odev14.gif"></p>
<p>
Figure 14 reveals some of the basic syntax of ActiveX Server Pages and database connection coding. Comparing the output HTML file in Figure 15 to the input file in Figure 14 reveals how the code works to generate HTML pages. Notice, for example, that server-side script appears between &lt;% and %&gt; signs. You can use this general background to make changes by hand. A key point, however, is that nearly all of this code was prepared by Visual InterDev and Access. I edited the &lt;BODY&gt; tag to provide a textured background.</p>
<p><img src="odev15.gif"></p>
<p>
Between the &lt;BODY&gt; and &lt;TABLE&gt; tags in Figure 14 are several scripts that establish a database connection and criteria determining what data will be available to report. The table head tag (THEAD) positions column headings for the table. After the heading and body tags, another short block of script sets up some error trapping and starts a loop that passes through all the records in the Shippers table. The three TD cell lines reference fields returned by the database connection recordset. A concluding block of script terminates the loop started before the three TD lines.</p>
<p>
Figure 15 shows the return set that a browser reads. Notice that in this example there is no script in the page returned to the browser. You can use the Script tag to include code that you want to run on a client workstation. You can also pass in ActiveX controls for processing on the client side. This return page is more useful for reading and processing by desktop applications that will not need or use the scripting.</p>
<h2>Are ODE and Visual InterDev an Odd Couple?</h2>
<p>
My answer is a resounding NO! ODE will enable developers and power users to get more from Office 97. The immense popularity of the Internet and intranets makes them a natural target for custom-application development. While you can accomplish much Web-oriented development with the core package and the ODE, it's possible to go much farther with Visual InterDev. Furthermore, Visual InterDev vastly simplifies the process. The availability of FrontPage as part of the Visual InterDev only enhances the overall attractiveness of the total package.                                                                               </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use Visual FoxPro 5.0 as an OLE Server </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1>Use Visual FoxPro 5.0 as an OLE Server</h1>
<p>
John V. Petersen</p>
<p>
<i>One of the most anticipated features of version 5.0 is the ability to create OLE Servers. Now you can create components in Visual FoxPro and use them in other applications such as Visual Basic, Excel, Access, or Visual FoxPro itself. The major benefit to building and using OLE Automation Servers is reusability. This article will try to equip you with the basics you need to understand OLE from the perspective of objects, automation, and servers. In addition, John will cover the steps required to build an OLE Automation Server and implement it in different applications.</i></p>
<p>
OBJECT Linking and Embedding (OLE) is the foundation technology that enables different applications to interoperate. The technology used to be limited to just linking and embedding documents between applications. For example, a Word document could contain an embedded Excel worksheet or a PaintBrush picture. Today, OLE provides much more power through OLE Automation.</p>
<p>
OLE Automation is simply the mechanism whereby one application controls another application, made possible when an application exposes a standard set of properties and methods that can then be accessed by other applications. Code in one application can manipulate those properties and invoke methods. Every OLE Automation scenario involves a client and server. The client is the controlling application; the server provides the services. For example, consider this block of code in Visual FoxPro:</p>
<pre><font face="Courier New" size="3">oExcelApplication = CreateObject(&quot;Excel.Application&quot;)
oExcelApplication.WorkBooks.Add
oExcelApplication.ActiveSheet.Range(&quot;A1&quot;).Value = 1
oExcelApplication.Visible = .T.</font></pre>
<p>
In this scenario, Visual FoxPro creates an instance of the Excel application, adds a workbook, assigns the first cell in the active worksheet the value of 1, and finally makes the Excel application visible. Excel has exposed properties and methods that make it possible for applications such as Visual FoxPro to control it. Excel is the OLE Automation Server because it has provided the interface of properties and methods. Visual FoxPro is the client because it has initiated the process and done the controlling. </p>
<h2>VFP as an OLE Automation Server</h2>
<p>
Visual FoxPro 3.0 is only capable of being an OLE Automation client, because it can control other applications but other applications can’t control it. Version 5.0 has the capability to be both an OLE Automation client and server. </p>
<p>
The following example illustrates how Visual FoxPro can be used as an OLE Automation Server. To effectively use a VFP Application as an OLE Server, you’ll need to understand three methods associated with Visual FoxPro when it’s utilized as an OLE Object (assume that an instance of VFP was created and the variable “o” is used to store the object reference):</p>
<p>
<b>DoCmd()</b>: Executes a Visual FoxPro command for an instance of the Visual FoxPro application automation server. Syntax: ApplicationObject.DoCmd(cCommand)</p>
<pre><font face="Courier New" size="3">&#09;o.DoCmd(&quot;USE Customer SHARED&quot;)</font></pre>
<p>
<b>Eval()</b>: Evaluates an expression and returns the result for an instance of the Visual FoxPro application automation server. Syntax: ApplicationObject.Eval(cExpression)</p>
<pre><font face="Courier New" size="3">&#09;o.Eval(&quot;_TALLY&quot;)</font></pre>
<p>
<b>SetVar()</b>: Creates a variable and stores a value to the variable for an instance of the Visual FoxPro application automation server. Syntax: ApplicationObject.SetVar(cVariableName, eValue)</p>
<pre><font face="Courier New" size="3">&#09;o.SetVar(&quot;X&quot;,1)</font></pre>
<p>
With these basics out of the way, you can now create and examine the code in your Excel/VBA module. (If you don’t want to type the code manually, it’s available at the Subscriber Downloads section of the <i>FoxTalk </i>Web site, www.pinpub.com/foxtalk):</p>
<pre><font face="Courier New" size="3">Sub GetVFPData()
   Dim o As Object
   Dim iCols, iRows, ifCount, iRecs As Integer
   Dim cArgument, cCountry As String
   Set o = CreateObject(&quot;VisualFoxPro.Application&quot;)
   ' Depending on your installation, you may have
   ' to change the directory in the following line. 
   o.docmd (&quot;CD \vfp50\samples\tastrade\data&quot;)
   cCountry = Range(&quot;A1&quot;).Value
   ' There is no line continuation character in VBA. 
   ' While the following line appears to
   ' be on two lines, it's only wrapped 
   ' for publication purposes. 
   cArgument = &quot;SELECT * FROM Customer WHERE Country 
     = '&quot; &amp; Trim(cCountry) &amp; &quot;' INTO CURSOR cTemp&quot;
   o.docmd (cArgument)
   Range(&quot;C1&quot;).Value = o.Eval(&quot;_tally&quot;)
   Range(&quot;D1&quot;).Value = cArgument
   ifCount = o.Eval(&quot;FCOUNT()&quot;)
   iRecs = o.Eval(&quot;RECC()&quot;)
   For iCols = 1 To ifCount
      cArgument = &quot;FIELD(&quot; &amp; Str$(iCols) &amp; &quot;)&quot;
      ActiveSheet.Cells(2, iCols).Value = o.Eval(cArgument)
   Next iCols
   For iRows = 3 To iRecs + 2
      For iCols = 1 To ifCount
         cArgument = &quot;EVAL(FIELD(&quot; &amp; Str$(iCols) &amp; &quot;))&quot;
        ' The next line is again split in two for 
        ' formatting purposes.
         ActiveSheet.Cells(iRows, iCols).Value 
            = o.Eval(cArgument)
      Next iCols
      o.docmd (&quot;SKIP 1&quot;)
   Next iRows
End Sub</font></pre>
<p>
The GetVFPData() VBA function is contained in a module within an Excel WorkBook. The user types the name of a country in the first cell and then presses a CommandButton embedded on the worksheet. The CommandButton has the GetVFPData() function assigned as a macro. When the user clicks the CommandButton, the code inside GetVFPData() executes. Through OLE Automation, a SQL-Select statement runs against the Customer Table of the Tastrade! Database. The number of records found is entered in cell C1 and the passed SQL-Select string is entered in cell D1. The second row of the worksheet contains the name of the columns in the SQL cursor. The remaining rows and columns contain the data (see Figure 1).</p>
<p><img src="01petol1.gif"></p>
<p>
<b>Figure 1. Excel worksheet containing data from Tastrade! Customer Table.</b></p>
<h2>Creating your own OLE Automation Servers</h2>
<p>
Up to this point, I’ve discussed OLE Servers in the context of an entire application. For example, you can create an Excel Object in Visual FoxPro and a Visual FoxPro Object in Excel. While VFP has rich functionality, it doesn’t encompass all of the needs a developer might have. What if you could create your own OLE servers, complete with properties and methods that you define yourself? With version 5.0, you can! Think of an OLE Custom Server as a UDF on steroids. Just as you define the characteristics and behavior of a UDF, you define the behavior and characteristics of a custom OLE Server. The two key differences between a UDF and an OLE Automation Server are: first, the OLE Automation Server is an application-independent object; and second, it can be used by any OLE-enabled client. This means OLE Servers created in Visual FoxPro can be used by applications created in Access, Visual Basic, and Excel, to name a few.</p>
<p>
Creating an OLE Server is very easy. If you know how to create a class and build an application, you’re already 80 percent of the way there. What might you use an OLE Server for? Consider the following scenario. Your organization uses a variety of development tools: Visual FoxPro, Access, Visual Basic, and Excel. You’ve received a request to create a program that will accept a five-digit ZIP code and return the state, city, and county related to the ZIP code. The added twist is that the program you write must be usable by all tools with which your company works. Because of the quantity of data involved, you’ve decided that Visual FoxPro is the perfect tool for the job.</p>
<p>
Now that you have a specification, it’s time to get to work. In the words of Julia Child, “I already have one prepared for you.” All of the following sample code is available at the Subscriber Downloads section of the <i>FoxTalk </i>home page. Your first step is to design a table that will hold the ZIP code data. Here’s the structure of the ZIPLKUP Table:</p>
<table>
<tr valign=top>
<td>
Structure for table:     </td>
<td>
D:\VFP5WORK\OLE\ZIPLKUP.DBF</td>
</tr>
<tr valign=top>
<td>
Number of data records:       </td>
<td>
5001    </td>
</tr>
<tr valign=top>
<td>
Date of last update:          </td>
<td>
09/02/96</td>
</tr>
<tr valign=top>
<td>
Code Page:                   </td>
<td>
1252    </td>
</tr>
<tr valign=top>
<td>
Field   </td>
<td>
Field Name </td>
<td>
Type          </td>
<td>
Width    </td>
<td>
Dec  </td>
<td>
Index  </td>
</tr>
<tr valign=top>
<td>
    1   </td>
<td>
ZIP        </td>
<td>
Character         </td>
<td>
5           </td>
<td>
</td>
<td>
Asc  </td>
</tr>
<tr valign=top>
<td>
    2   </td>
<td>
STATE      </td>
<td>
Character         </td>
<td>
2                </td>
<td>
</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
    3   </td>
<td>
CITY       </td>
<td>
Character        </td>
<td>
30                </td>
<td>
</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
    4   </td>
<td>
COUNTY     </td>
<td>
Character        </td>
<td>
30                </td>
<td>
</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
** Total **                         </td>
<td>
</td>
<td>
</td>
<td>
68</td>
<td>
</td>
<td>
</td>
</tr>
</table><br>
<p>
The table  in our sample file contains 5,000 ZIP codes and one index on the ZIP Field. Because ZIP code data changes only once a quarter (at most) and the user always needs access to the data, the table and index files are included in the project.</p>
<p>
Next, you need to create a class that will open the table, accept a ZIP code parameter, seek the value, and return the needed information. The following is the class definition:</p>
<pre><font face="Courier New" size="3">**ZIPLKUP.PRG
**Class code for zip code lookup OLE Server
**John V. Petersen
**9/2/96

DEFINE CLASS ziplkup AS CUSTOM OLEPUBLIC
   DOCREATE = .T.
   zipcode  = SPACE(0)
   state    = SPACE(0)
   city     = SPACE(0)
   county   = SPACE(0)
   NAME     = &quot;ziplkup&quot;

   PROCEDURE INIT
      * No need to trap for not being able to open 
      * the table because the DBF/CDX will be 
      * bound into the DLL.
      USE ziplkup ORDER zip
      RETURN
   ENDPROC

   PROCEDURE GetData
      LPARAMETERS tcZip
      IF TYPE(&quot;tcZip&quot;) = &quot;C&quot;
        tcZip = ALLTRIM(tcZip)
        IF SEEK(tcZip,&quot;ziplkup&quot;)
           WITH THIS
              .zipcode = ziplkup.zip
              .state   = ziplkup.state
              .city    = ziplkup.city
              .county  = ziplkup.county
           ENDWITH
        ELSE
           WITH THIS
             .state  = SPACE(0)
             .city   = SPACE(0)
             .county = SPACE(0)
           ENDWITH
        ENDIF
      ENDIF   
      RETURN
   ENDPROC
ENDDEFINE</font></pre>
<p>
This class is almost identical to one that could have been defined in version 3.0. The only difference is the OLEPUBLIC keyword. Including this keyword in your class specifies that the class in an custom OLE server can be accessed by an OLE Aautomation client. In this example, the OLE Server created will contain only one class definition, ZIPLKUP. Classes created in the Class Designer can also be specified as OLEPUBLIC in the Class Info dialog box (see Figure 2).</p>
<p><img src="01petol2.gif"></p>
<p>
<b>Figure 2. Class Info dialog box.  </b></p>
<p>
With the class definition in hand, it’s time to create a project using the following steps (see Figures 3 and 4):</p>
<p><img src="01petol3.gif"></p>
<p>
<b>Figure 3. Project Manager-Build dialog box.</b></p>
<p><img src="01petol4.gif"></p>
<p>
<b>Figure 4. Project Manager-Servers Tab of Project Information dialog box.</b></p>
<p>
Create a new project called ZIP.</p>
<p>
Add the ZIPLKUP Program to the ZIP Project.</p>
<p>
Add the ZIPLKUP.DBF/.CDX to the ZIP Project (make sure to include these files).</p>
<p>
Press the Build Button.</p>
<p>
Choose Build OLE DLL.</p>
<p>
By now you’ve already discovered several new features of the Project Manager. It should be noted that OLE Servers can either be .EXE or .DLL files. The following outlines the difference between the two types of OLE Server files:</p>
<p>
<b>.EXE files</b>: These files are known as out-of-process OLE Servers because they run in their own processes. The communication that occurs between an OLE client application and an out-of-process server is known as cross-process communication. Pro: .EXE files can be deployed remotely. Con: Performance hits can occur due to cross-communication overhead.</p>
<p>
<b>.DLL files</b>: These files are known as in-process OLE Servers because they run in the same process space as the OLE client applications that call them. Pro: .DLLs are faster than out-of-process servers due to lack of cross-communication overhead. Con: They can’t be deployed remotely.</p>
<p>
Two additional files are created when a .DLL or .EXE file is created: one has a .VBR extension and the other a .TLB extension. The .TLB file is called a type library; the .VBR file is a registration file. Two files have been created in this example: ZIP.VBR and ZIP.TLB. Here are the specifics on each file: </p>
<p>
<b>.TLB files</b>: These are type library files, containing information regarding the properties and methods that a class has exposed. The Class Browser in version 5.0 is capable of reading .TLB files (see Figure 5). This gives a developer the ability to browse the member methods and properties of an OLE Server. When a .DLL contains more than one type library, its associated type library file will have an .OLB extension.</p>
<p><img src="01petol5.gif"></p>
<p>
<b>Figure 5. Class Browser view of the ZIP.TLB type library.</b></p>
<p>
<b>.VBR files</b>: These files allow you to register the class definitions in the system registry when the executable file is moved to a different computer.</p>
<p>
Building an OLE Server is basically the same as building a Visual FoxPro .APP/.EXE file. The big difference occurs at the end of the build process. When the type library file is built, an entry in the Windows registry is created to store information about the OLE Server just created. The following is a description of the Windows registry from the VFP online help file:</p>
<p>
<i>Windows registry</i>: “A database maintained by Windows that stores configuration information about the operating system, all Windows applications, ActiveX, OLE, and optional components such as ODBC. For example, the registry is where Windows stores the associations between file name extensions and applications, and where Visual FoxPro stores its application-specific configuration information.” </p>
<p>
In order to use your OLE Server, it must be registered in the Windows registry. If you have a problem with “class definition class.method not found” errors, it’s likely that your OLE Server isn’t registered properly. Figure 6 shows the entry for our OLE Server.</p>
<p><img src="01petol6.gif"></p>
<p>
<b>Figure 6. The Windows 95 registry-entry for the ZIPLKUP OLE Automation server.</b></p>
<p>
In addition to the new build options, there’s also a new Servers Page in the Project Information dialog box. The following is from the online help file that accompanies VFP.</p>
<h3>Server classes</h3>
<p>
Displays a list of all the available classes, both .VCX and in code, which are marked as OLEPublic. Each class in the list has a corresponding .PJX file.</p>
<h3>Class library</h3>
<p>
Displays the directory path of the class library in which the selected class is stored.</p>
<h3>Class name</h3>
<p>
Displays the name of the class.</p>
<h3>Instancing</h3>
<p>
<b>Single Use</b>: Specifies that you can create an instance of the class both inside and outside Visual FoxPro using OLE Automation. Each request for an instance of the class by an OLE client outside the project causes a separate copy of the OLE server to start.</p>
<p>
<b>Not Creatable</b>: Specifies that you can create instances of the class only inside Visual FoxPro.</p>
<p>
<b>Multi-Use</b>: Specifies that you can create an instance of the class both inside and outside Visual FoxPro using OLE Automation. Each request for an instance of the class by an OLE client outside the project causes an already running copy of the OLE server to be provided as the source for the new instance.</p>
<h3>Description</h3>
<p>
Displays a small description of the class.</p>
<h3>Help file</h3>
<p>
Displays the Help file associated with the class. Select the dialog button to display the Open dialog box if no file is listed.</p>
<h3>Help context ID</h3>
<p>
Displays the context ID of the Help file associated with the application, if a Help file is distributed with the application.</p>
<h3>Project name</h3>
<p>
Displays the name of the project associated with the server classes.</p>
<h3>Typelib description</h3>
<p>
Displays a description of the class library on which the selected class is based.</p>
<h2>Putting the OLE Server to work</h2>
<p>
Now let’s get to the fun part: putting your new OLE Server to work. The OLE Server I just created will be implemented in Visual FoxPro, Visual Basic, Access, and Excel. The essence of using an OLE Server centers upon instantiating the server and invoking its methods or manipulating its properties. The code in each of the following examples-each in a different application environment-is almost identical. </p>
<p>
Figure 7 illustrates the OLE Server in action with the different tools. In each case, the user enters a ZIP code in a text box (or in the case of Excel, cell A1). Then the user presses a CommandButton which instantiates the OLE Server, makes the call to the GetData() Method, and then updates the interface with state, city, and county information. </p>
<p><img src="01petol7.gif"></p>
<p>
<b>Figure 7. ZIP code OLE Server in use by Visual FoxPro, Visual Basic, Access, and Excel.</b></p>
<h3>Visual FoxPro-Command1.Click()</h3>
<p>
While the “o” variable is declared Local, you don’t have to declare the variable or its data type prior to using it:</p>
<pre><font face="Courier New" size="3">LOCAL o
o = CREATEOBJECT(&quot;zip.ziplkup&quot;)
o.GetData (THIS.PARENT.txtZip.Text)
THIS.PARENT.txtState.Value = o.state
THIS.PARENT.txtCity.Value = o.city
THIS.PARENT.txtCounty.Value = o.county</font></pre>
<h3>Visual Basic-Command1.Click()</h3>
<p>
You must declare and specify the “o” variable as an Object Type prior to storing a reference to the OLE server because Visual Basic is a strongly typed language. The only other notable difference between VB and VFP syntax is the Set keyword when you assign a value to a variable. Also, the city, state, and county information can be assigned directly to the text box. It’s assumed that the Value Property will hold information directly assigned to a text box control:</p>
<pre><font face="Courier New" size="3">Private Sub Command1_Click()
    Dim o As Object
    Set o = CreateObject(&quot;zip.ziplkup&quot;)
    o.GetData (Screen.ActiveForm.txtZip)
    Screen.ActiveForm.txtState = o.state
    Screen.ActiveForm.txtCity = o.city
    Screen.ActiveForm.txtCounty = o.county
End Sub</font></pre>
<h3>Access-Command0_Click()</h3>
<p>
Access Basic is almost identical to Visual Basic. The only difference is that you must first invoke the SetFocus() method of a control before referencing any of its properties. Another interesting  point is the way the argument is passed to the GetData() Method. In Access, you don’t have to use the Text Property as in Visual Basic:</p>
<pre><font face="Courier New" size="3">Private Sub Command0_Click()
   Dim o As Object
   Dim loForm As Object
   Set o = CreateObject(&quot;zip.ziplkup&quot;)
   Set loForm = Screen.ActiveForm
   loForm.txtZip.SetFocus
   o.GetData (Form_Form1.txtZip)
   loForm.txtState.SetFocus
   loForm.txtState = o.State
   loForm.txtCity.SetFocus
   loForm.txtCity = o.City
   loForm.txtCounty.SetFocus
   loForm.txtCounty = o.County
End Sub</font></pre>
<h3>Excel</h3>
<p>
The only difference in the implementation here is the substitution of cells for text boxes. In addition, if you  enter a ZIP code such as 19301 in a cell, it’s assumed to be a numeric value unless you place quotes around the expression. To keep data entry consistent, the Str$() function converts the data in the method code:</p>
<pre><font face="Courier New" size="3">Sub ZipLkUp()
   Dim o As Object
   Set o = CreateObject(&quot;zip.ziplkup&quot;)
   o.GetData (Str$(ActiveSheet.Range(&quot;B1&quot;).Value))
   ActiveSheet.Range(&quot;B2&quot;).Value = o.State
   ActiveSheet.Range(&quot;B3&quot;).Value = o.City
   ActiveSheet.Range(&quot;B4&quot;).Value = o.County
End Sub</font></pre>
<h2>Conclusion</h2>
<p>
The ability to build OLE Servers is a powerful skill to add to your toolkit. The future of development will center on putting different components together to form a single solution. The promise of different applications working together is here, and it works! The client/server arena has the most to gain from OLE Servers. With an OLE Server, true three-tier client/server applications can be written in Visual FoxPro using servers written in Visual FoxPro. Most importantly, however, is that these servers can be used by any OLE-enabled client. </p>
<p>
With this technology firmly in place, Visual FoxPro is finally a full-fledged member of the Visual Development Tools family of Microsoft products and has once again proven itself to be the ideal environment for database application development.</p>
<p>
&#09;&#09;&#09;<b>  03PETERS.EXE at www.pinpub.com/foxtalk</b></p>
<p>
<i>John V. Petersen, MBA, specializes in the development of Visual FoxProÐbased solutions for business. John has written for U.S. publications and has been a speaker at user group meetings and developer conferences. John is a Microsoft Most Valuable Professional (MVP) as well as coauthor of Developing Visual FoxPro 5.0 Enterprise Applications  from Prima Publishing. 610-651-0879, johnpetersen@mail.com. </i></p>
<P align="center"><a
href="http://www.pinpub.com/foxtalk/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about
FoxTalk and Pinnacle Publishing, visit their website at</strong> <br>
<a href="http://www.pinpub.com/foxtalk/"><strong>http://www.pinpub.com/foxtalk/</strong></a></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content..</font></p>

<P>This article is reproduced from the March 1997
issue of FoxTalk. Copyright 1997, by Pinnacle Publishing, Inc.,
unless otherwise noted. All rights are reserved. FoxTalk is an
independently produced publication of Pinnacle Publishing, Inc.
No part of this article may be used or reproduced in any fashion
(except in brief quotations used in critical articles and
reviews) without prior consent of Pinnacle Publishing, Inc. To
contact Pinnacle Publishing, Inc., please call (800)788-1900 or
(206)251-1900.</p>
</font></BODY>
</HTML>

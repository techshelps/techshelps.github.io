<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Create Database Apps with the IDC and VBScript </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1>Create Database Apps with the IDC and VBScript</h1>
<p>
Rick Dobson</p>
<p>
<i>This month, Rick shows you how to build Internet/intranet systems that query, display, and update remote ODBC data sources. His examples reveal how to combine VBScript and the Internet Database Connector (IDC) to accomplish these goals.</i></p>
<p>
THIS is the third installment in a three-part series on VBScript. The first article (December 1996) introduced VBScript and described how it interacts with HTML. The second (February 1997) explained how to make Web pages dynamic and interactive with ActiveX controls.</p>
<p>
This article presents an overview of the process for creating dynamic data-based Web pages with VBScript, the IDC, and ODBC data sources. I’ll describe four prototypical tasks to demonstrate the process in representative situations. My goal in reviewing model tasks is to provide building blocks for your own Web data processing brews. </p>
<h2>HOW IDC generates a dynamic Web app</h2>
<p>
The IDC permits a Web application to generate dynamic HTML pages reflecting the contents of a database on a server. The process starts at the browser by sending a URL (and, optionally, some form fields) to Microsoft’s Internet Information Server (IIS).</p>
<p>
The URL designates an IDC file consisting of several fields. I’ll describe the three required fields in more detail later. The data source field identifies an ODBC resource to process. The SQL statement field is an SQL command string, which depends on the SQL conventions of the database type in the data source field. The template field references an HTX file, a text file that includes standard HTML tags along with other special tags for formatting the return set.</p>
<p>
Figure 1 depicts the overall process. The browser issues a URL and, optionally, some form fields, which will normally be standard HTML form fields. The URL references a server-based IDC file. When the IIS receives the input, it passes control to the IDC that interprets the IDC file along with any form field contents passed by the browser. IDC passes SQL commands to the ODBC driver for processing. When the ODBC driver completes execution of its SQL command string, the IDC uses the HTX file to format the return set so that the IIS can pass an HTML page back to the browser.</p>
<p><img src="vbsidc.gif"></p>
<p>
<b>Figure 1. An overview of the IDC browser/server database processing flows. Numbers mark key points of involvement for an Internet developer using VBScript and the IDC.</b></p>
<p>
Developers manage three key points in this process. First, they write code to pass the URL and form fields to the server. VBScript can help at this point. Second, they write an IDC file to specify processing for a data source. The key SQL Statement field requires some knowledge of SQL. Third, they prepare an HTX file to format the return set for browsers. VBScript can also enhance this effort.</p>
<p>
Developers can also become involved in setting up the data source. You must specify the new system data source type that the 32-bit ODBC driver introduced. If you’re using Access with NT 4.0, you need a special patch file which you can get from www.microsoft.com/kb/deskapps/access/q151186.htm. Unlike other databases, the Access database participates only in designing the system, not managing client contact. Other databases can therefore perform server-side processing permitted by their SQL because the database participates in processing client requests.</p>
<h2>Computing a value</h2>
<p>
For any given screen in an IDC app, you’re likely to have three files-one that lets the browser submit a request, an IDC file that specifies what processing to perform, and an HTX file that formats the results for viewing.</p>
<p>
The following HTML code represents a page for counting the number of orders in a database. The data source points to the Northwind database that ships with Access. Store the HTML file in your server’s Wwwroot directory. The file lets a user perform the count by clicking an anchor or a button. The VBScript code illustrates how to construct and pass a URL to the server:</p>
<pre><font face="Courier New" size="3">&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub ComputeIt_OnClick()
Dim strAnchor
&#09;strAnchor = &quot;/scripts/TNumber.idc&quot;
&#09;Location.HRef = strAnchor
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;H2&gt;
Compute Total Number of Orders as of Right Now
&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;A HREF=&quot;/scripts/TNumber.idc&quot;&gt;Total Number of Orders
&lt;/A&gt;
&lt;HR&gt;
&lt;LI&gt;
&lt;INPUT TYPE=Button NAME=ComputeIt 
     VALUE=&quot;Compute It!&quot;&gt;  
For IE 3.0+ Users Only
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</font></pre>
<p>
The next code sequence shows the IDC file referenced by the URL. The SQL Statement field allows you to divide the command into parts by preceding each part with a plus sign. If you aren’t familiar with SQL, use a tool like the Query-By-Example grid in Access to build queries. Then, just copy and reformat the command for the SQL Statement field:</p>
<pre><font face="Courier New" size="3">Datasource: NorthWind
Template: TNumber.htx
SQLStatement:
+ SELECT Count(Orders.OrderId) 
+     AS TotalNumberOfOrders
+ FROM Orders;</font></pre>
<p>
The following code shows Tnumber.htx, with VBScript time-stamping each page to show a count. The Now function supplies a value for a variable. The code uses the document’s Write method to stamp the HTML page. Bound return fields from the IDC file, such as TotalNumberOfOrders, are in between the percent (%) symbols:</p>
<pre><font face="Courier New" size="3">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;North Wind Sales Information&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H2&gt;NorthWind Count Example&lt;/H2&gt;
&lt;B&gt;Total Number of Sales = &lt;/B&gt; 
&lt;%TotalNumberOfOrders%&gt;
&lt;P&gt;Date of this query: 
&lt;SCRIPT LANGUAGE=&quot;VBS&quot;&gt;
RightNow = Now
Document.Write RightNow
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;/HTML&gt;</font></pre>
<h2>Passing parameters</h2>
<p>
This first application is dynamic because it changes as orders are added or deleted. This provides a clear advantage over static Web pages, but users still can’t control the results directly. The following HTML page provides two text boxes where the user can specify the month and year over which to count orders:</p>
<pre><font face="Courier New" size="3">&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub ComputeIt_OnClick()
Dim strAnchor
'A simple validity check routine
&#09;If IsNumeric(frmMoYr.Month.Value) Then
&#09;&#09;frmMoYr.Submit
&#09;Else
&#09;&#09;msgbox &quot;Fix it, then try again!&quot;
&#09;End If
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;H2&gt;
Compute total number of orders as of right now.
&lt;/H2&gt;&lt;HR&gt;
Start by choosing month and year.
&lt;HR&gt;
&lt;Form NAME=frmMoYR ACTION=&quot;/scripts/TNumMoYr.idc&quot; 
     METHOD=Post&gt;
&lt;UL&gt;
&lt;LI&gt;Indicate the month with a number (1-12): 
&lt;INPUT TYPE=Text NAME=Month SIZE=3 VALUE=&quot;7&quot;&gt;
&lt;LI&gt;Year:
&lt;INPUT TYPE=Text NAME=Year SIZE=4 VALUE=&quot;1993&quot;&gt;
&lt;P&gt;&lt;P&gt;&lt;P&gt;
&lt;HR&gt;
Now that you have chosen the period, compute orders!
&lt;HR&gt;
&lt;LI&gt;
&lt;INPUT TYPE=Button NAME=ComputeIt 
     VALUE=&quot;Compute It!&quot;&gt;
&lt;/UL&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</font></pre>
<p>
I recommend passing parameters to the IDC with HTML forms. Verify the validity of form data with VBScript to avoid unnecessary error messages. When using a form, specify the IDC file’s URL in the form’s ACTION attribute. Use either Post or Get for a METHOD when your IDC file launches a query. Use the Post METHOD for IDC files that change the data source on the server.</p>
<p>
After verifying that the fields contain valid data, invoke the form’s Submit method. Recall from the first installment of this VBScript series (in the December 1996 issue of <i>Visual Basic Developer</i>) that this requires a general-purpose button on the form rather than a Submit button.</p>
<p>
This IDC file is nearly identical to the one in the first application. The only difference is that you bound passed parameters in "%" signs (notice the Month and Year in the following IDC file). The parameter names must match their NAME attribute in the form on the HTML page launching the request:</p>
<pre><font face="Courier New" size="3">Datasource: NorthWind
Template: TNumMoYr.htx
SQLStatement:
+ SELECT Count(Orders.OrderId) AS TotalNumberOfOrders,
+ Month([OrderDate]) AS RetMonth, 
+    Year([OrderDate]) AS RetYear
+ FROM Orders
+ WHERE (((Month([OrderDate]))=%Month%)
+ AND ((Year([OrderDate]))=%Year%))
+ GROUP BY Month([OrderDate]), Year([OrderDate]);</font></pre>
<p>
Recall that the Web is stateless-it has no direct way to remember the passed parameters. Nevertheless, you often need to show these parameters along with your return set. Circumvent this difficulty by including passed parameters in the return set (see the RetMonth and RetYear fields in the preceding SQL Statement).</p>
<p>
The HTX file referenced in the preceding IDC file follows the same format as in the first example. This second HTX file adds an extra line showing the month and year for which it reports a count of orders:</p>
<pre><font face="Courier New" size="3">&lt;P&gt;month = &lt;%RetMonth%&gt; , and year = &lt;%RetYear%&gt;</font></pre>
<h2>Drilling down into a database</h2>
<p>
A drill-down application involves at least two linked screens. Users view a data display with hot spots on it in the first screen. They can "drill down" into the database by clicking on any of these hot spots.</p>
<p>
My first HTML page for the drill-down application has a format that’s almost identical to the preceding example; it lets a user specify a month and year. Clicking the form’s button launches an IDC file. In this instance, however, the ACTION attribute of the form tag specifies a different IDC file. Clicking the form’s button creates a return set listing orders for the month and period specified. Here’s the IDC file that generates the list:</p>
<pre><font face="Courier New" size="3">Datasource: NorthWind
Template: ListOrders.htx
SQLStatement:
+ SELECT orders.OrderID, 
+    Orders.OrderDate as OrderDate, 
+    Orders.CustomerID AS Customer,
+ Sum([Quantity] * [UnitPrice])*100/100 AS Amount
+ FROM Orders INNER JOIN [Order Details]
+ ON Orders.OrderID = [Order Details].OrderID
+ WHERE ((Month([OrderDate])=%Month%) 
+ AND (Year([OrderDate])=%Year%))
+ GROUP BY Orders.OrderID, Orders.OrderDate, 
+    Orders.CustomerID</font></pre>
<p>
The IDC file generates a return set with four columns denoting OrderID, OrderDate, CustomerID, and the sum of Extended Price across all the line items in an order. The extended price total is multiplied and divided by 100, which converts the number so it has just two spaces after the decimal. This feature is particularly beneficial with VBScript because it doesn’t have a built-in currency format conversion function.</p>
<p>
When you pass a table of numbers back, your HTX file must contain two special tags: &lt;%begindetail%&gt; and &lt;%enddetail%&gt;. The following HTX file segment illustrates how to use these tags for the first of two drill-down screens. The tags surround the portion of a table that lists the outcome from a query. Additional special tags support limited branching functions, the number of records returned, and the current record number:</p>
<pre><font face="Courier New" size="3">&lt;TABLE BORDER&gt;
&lt;TR&gt;
&lt;TH&gt;Order Date&lt;/TH&gt;&lt;TH&gt;Order ID&lt;/TH&gt;
&lt;TH&gt;Customer&lt;/TH&gt;&lt;TH&gt;Amount&lt;/TH&gt;
&lt;/TR&gt;
&lt;%begindetail%&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;%OrderDate%&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;A HREF=
     &quot;/scripts/ODetails.idc?OrderID=&lt;%OrderID%&gt;&quot;&gt;
&lt;%OrderID%&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;%Customer%&gt;&lt;/TD&gt;
&lt;TD&gt;$&lt;%Amount%&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;%enddetail%&gt;
&lt;/TABLE&gt;</font></pre>
<p>
A key point to note about the file excerpt is that it includes an anchor to another screen. This anchor is the drill-down point. Clicking the anchor opens a view of the individual line items composing an order.</p>
<p>
The anchor has two parts. First, it includes a reference to a new IDC file followed by an equal sign (=). Second, it includes a parameter, namely a reference to the OrderID field returned by the first IDC file. I bound OrderID in between "%" signs, and I include the whole anchor reference in quotes. In addition, I repeat the reference to the OrderID field so that it shows in the table. The OrderID number appears in the color that your browser uses for showing anchors. This marks the hot spot that a user clicks to view the individual line items in an order.</p>
<p>
When a user clicks an OrderID number, he or she invokes the ODetails.idc file and passes it a parameter, namely the order number. The file uses the order number to extract the line item records comprising that order. The Odetails.idc file looks like this:</p>
<pre><font face="Courier New" size="3">Datasource: NorthWind
Template: ODetails.htx
SQLStatement:
+SELECT Products.ProductID, Products.ProductName, 
+ [Order Details].OrderID, Quantity, 
+ [Order Details].UnitPrice, 
+ Quantity * [Order Details].Unitprice AS Subtotal
+ FROM Products, [Order Details] 
+ WHERE Products.ProductID = [Order Details].ProductID
+ AND OrderID=%OrderID%</font></pre>
<p>
The following HTX file segment formats the output from ODetails.idc for a browser. It starts by displaying the OrderID. Next, it prints a separate line in a table for each record in the return set. Once again, the &lt;%begindetail%&gt; and &lt;%enddetail%&gt; tags indicate where to insert the records in the HTML page:</p>
<pre><font face="Courier New" size="3">Details on Order #&lt;%OrderID%&gt;
&lt;TABLE BORDER&gt;
&lt;TR&gt;
&lt;TH&gt;Product Name&lt;/TH&gt;
&lt;TH&gt;Unit Price&lt;/TH&gt;
&lt;TH&gt;Quantity&lt;/TH&gt;
&lt;TH&gt;Subtotal&lt;/TH&gt;
&lt;/TR&gt;
&lt;%begindetail%&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;%ProductName%&gt;&lt;/TD&gt;
&lt;TD align=&quot;right&quot;&gt;$&lt;%Unitprice%&gt;&lt;/TD&gt;
&lt;TD align=&quot;right&quot;&gt;&lt;%Quantity%&gt;&lt;/TD&gt;
&lt;TD align=&quot;right&quot;&gt;$&lt;%Subtotal%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;%enddetail%&gt;
&lt;/TABLE&gt;</font></pre>
<h2>Appending a table</h2>
<p>
All the applications to this point read from a server-based database. The IDC permits the full range of SQL commands for a database. In the case of Access, this involves appending, updating, and deleting records for an existing table; making a new table; and more. Furthermore, you can have Access write the SQL command string when you set up the query in the Query-By-Example grid.</p>
<p>
I’ll illustrate the simplicity and power of this capability with an application to add new Shippers to the NorthWind Shippers table. This table includes just three fields, one of which is an autonumber field. The other two fields are CompanyName and Phone.</p>
<p>
The following code presents the first page of the application that appends new records to the Shippers table. It includes two text boxes for CompanyName and phone, respectively, and a button. The VBScript OnClick event procedure for the button performs a simple validity check and submits the form to the server. This also invokes the ShipperAd.idc file:</p>
<pre><font face="Courier New" size="3">&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub AddIt_OnClick()
Dim strAnchor
'A simple validity check routine
&#09;If Document.Forms(0).CompanyName.Value &lt;&gt; &quot;&quot; Then
&#09;frmShipperAd.Submit
&#09;Else
&#09;&#09;msgbox &quot;Fix it, then try again!&quot;
&#09;End If
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;H2&gt;Enter Company Name and phone for new Shipper.&lt;/H2&gt;
&lt;HR&gt;
&lt;Form NAME=frmShipperAd ACTION=
     &quot;/scripts/ShipperAd.idc&quot; METHOD=Post&gt;
&lt;UL&gt;
&lt;LI&gt;Company Name:
&lt;INPUT TYPE=Text NAME=CompanyName SIZE=40 
     VALUE=&quot;Company Name goes here.&quot;&gt;
&lt;LI&gt;Telephone:
&lt;INPUT TYPE=Text NAME=Telephone SIZE=24 
     VALUE=&quot;Enter phone # here.&quot;&gt;
&lt;HR&gt;
&lt;LI&gt;&lt;INPUT TYPE=Button NAME=AddIt VALUE=&quot;Add It!&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</font></pre>
<p>
The IDC file is very simple. It uses the Insert Into command to add the CompanyName and Telephone fields from the browser input form to the table. Access automatically adds an appropriate autonumber field:</p>
<pre><font face="Courier New" size="3">Datasource: Northwind
Template: ShipperAd.htx
SQLStatement:
+ INSERT INTO Shippers
+ (CompanyName, Phone)
+ VALUES('%CompanyName%' , '%Telephone%');</font></pre>
<p>
Because the application adds data to a table, there’s no return set to show. However, it would be informative to confirm receipt after the addition has been completed. Recall that the IDC invokes the HTX file only after the SQL statement field in the IDC file is completed. The HTX file in my sample application issues a brief confirmation that the new record was added successfully. I pull the CompanyName for the confirmation message directly from the IDC file. The idc.CompanyName term, bound with "%" signs, accomplishes this task:</p>
<pre><font face="Courier New" size="3">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Shipper Addition Confirmation&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
This is to confirm your addition of a new 
shipper. The shipper name is 
&lt;%idc.CompanyName%&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;</font></pre>
<h2>Summary</h2>
<p>
You now have four basic building blocks and a general introduction to building dynamic Internet or intranet database applications using VBScript and the IDC. The Microsoft Job Access Forum presents a completed application that showcases the full potential of using the IDC with Access (www.microsoft.com/access/internet/jobforum/). A white paper provides a thorough review of the technology in the application and a good general introduction to IDC issues (www.microsoft.com/AccessDev/accwhite/JobForPa.htm). I found the Mastering Internet Development CD (US $99.95) from Microsoft to be a good general Internet resource; chapters six and seven are particularly relevant to the content of this installment. </p>
<p>
<i>Note to Windows NT users:</i> The same IDC/HTX file syntax works with the Internet Database Connection that ships with all versions of Internet Information Server as well as the Personal Web Server for Windows 95.  Your server must be running the HTTPODBC DLL to provide data in response to dynamic visitor requests. Servers running NT 4.0 should get a patch for IDC/HTX files to function properly. The patch is available at www.microsoft.com/kb/articles/q155/2/55.htm.s</p>
<p>
&#09;&#09;&#09;<b>  DOBSON3.ZIP at www.pinpub.com/vbd</b></p>
<p>
<i>Rick Dobson, Ph.D., is president of CAB Inc., a database and Internet application development consultancy. His articles appear in </i>Byte<i> and </i>PC<i>, and he writes the Office Developer column for </i>Access/Visual Basic Advisor<i>. Fax 502-426-3743, rick_dobson@msn.com.</i></p>
    <P align="center"><a
    href="http://www.pinpub.com/vbd/"><img src="Pinnacle.gif"
    border="0" width="216" height="72"></a></p>
    <P align="center"><strong>To find out more about
    Visual Basic Developer and Pinnacle Publishing, visit their
    website at</strong>: <a href="http://www.pinpub.com/vbd/"><strong>http://www.pinppub.com/vbd/</strong></a></p>
    <P align="center"><font size="1">Note: This is not
    a Microsoft Corporation website. <br>
    Microsoft is not responsible for its content.</font></p>
    <p><font size="1">This article is reproduced from the
    March 1997 issue of Visual Basic Developer. Copyright
    1997, by Pinnacle Publishing, Inc., unless otherwise noted.
    All rights are reserved. Visual Basic Developer is an
    independently produced publication of Pinnacle Publishing,
    Inc. No part of this article may be used or reproduced in any
    fashion (except in brief quotations used in critical articles
    and reviews) without prior consent of Pinnacle Publishing,
    Inc. To contact Pinnacle Publishing, Inc., please call
    (800)&nbsp;788-1900 or (206)&nbsp;251-1900.</font></p>
</font></BODY>
</HTML>

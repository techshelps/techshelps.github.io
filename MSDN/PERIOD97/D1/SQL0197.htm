<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Essentials: Privileges, Triggers, and Control Characters </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1>SQL Essentials:</h1>
<h1>Privileges, Triggers, and Control Characters</h1>
<p>
Kalen Delaney</p>
<p>
<i>I read your comments in the October issue of SQL Server &#09;Professional and was curious about your last two SQL statements, granting update privileges to </i>public<i> and revoking update from </i>guest<i>:</i></p>
<pre><font face="Courier New" size="3">grant update on schedule to public
revoke update on schedule from guest</font></pre>
<p>
<i>Since every user of a database receives the permissions of </i>public<i>, wouldn’t this statement have no effect?</i></p>
<p>
This is a good question, and one that gives me an opportunity to talk about a change in behavior in SQL Server 6.5 that’s not very well documented. The short answer to your question is that granting update permission to <i>public</i> does <i>not</i> supersede revoking the permission from <i>guest</i>. The actual reason why this is true changed from SQL Server 6.0 to SQL Server 6.5, but in either version, the earlier two statements would result in the situation where everybody in the database, except someone accessing the database as a <i>guest</i> user, would have permission to update the <i>schedule</i> table.</p>
<p>
In SQL Server 6.0, permissions were always applied based on the order in which they were granted or revoked. If you first granted one user permission, then revoked permission from everyone via the <i>public</i> group, then <i>no one</i> would have permission: </p>
<pre><font face="Courier New" size="3">grant select on employee to joe
revoke select on employee from public</font></pre>
<p>
If these two statements were executed in SQL Server 6.0, no one would have select permission on the <i>employee</i> table, not even <i>joe</i>. If you replaced <i>public</i> with another group of which <i>joe</i> was a member, you’d see similar behavior:</p>
<pre><font face="Courier New" size="3">grant select on employee to joe
revoke select on employee from sales</font></pre>
<p>
If these two statements were executed in SQL Server 6.0, no one in the <i>sales</i> group would have select permission on the <i>employee</i> table, not even <i>joe</i> if he were a member of the <i>sales</i> group.</p>
<p>
However, if the permission statements were executed in the opposite order, you’d get the opposite behavior, because, in SQL Server 6.0 and earlier, permissions are applied in the order the statements are executed:</p>
<pre><font face="Courier New" size="3">revoke select on employee from public
grant select on employee to joe</font></pre>
<p>
Because permission is granted to <i>joe</i> after permission is revoked from <i>public</i>, <i>joe</i> will have select permission but nobody else will. You can be even more complex by assigning permissions both to the <i>public</i> group and to other groups: </p>
<pre><font face="Courier New" size="3">grant select on employee to public
revoke select on employee from sales
grant select on employee to joe</font></pre>
<p>
Again, you’re assuming <i>joe</i> is a member of <i>sales</i>. If these three statements are executed, everybody can select from the <i>employee</i> table except for members of the <i>sales</i> group, with the exception of <i>joe</i>. <i>Joe</i> can select from <i>employee</i>, but nobody else in the <i>sales</i> group can.</p>
<p>
This behavior is applicable only to SQL Server 6.0. In SQL Server 6.5 the behavior changed so that a permission explicitly granted to or revoked from an individual user will override permissions for a group, no matter in what order the statements are executed. So, look again at the first two statements:</p>
<pre><font face="Courier New" size="3">grant update on schedule to public
revoke update on schedule from guest </font></pre>
<p>
In SQL Server 6.5, these result in the same behavior as in SQL Server 6.0-everyone but <i>guest</i> has update permission on <i>schedule</i>. However, if you reverse the order, the results will be the same in SQL Server 6.5, but different in SQL Server 6.0.</p>
<p>
This change in SQL Server 6.5 also applies to permissions applied to groups other than <i>public</i>. Permissions explicitly granted to a user-defined group will always override permissions to <i>public</i>. If you have a combination of grants and revokes to different groups, you may get different behavior in SQL Server 6.0 and 6.5:</p>
<pre><font face="Courier New" size="3">revoke select on employee from public
grant select on employee to sales</font></pre>
<p>
These two statements will result in nobody but members of the <i>sales</i> group having select permission on the <i>employee</i> table, in both versions of SQL Server. But now reverse the order:</p>
<pre><font face="Courier New" size="3">grant select on employee to sales
revoke select on employee from public</font></pre>
<p>
In SQL Server 6.0, these two statements will again result in nobody having select permission on the <i>employee</i> table. But in SQL Server 6.5, the permission for the <i>sales</i> group will override the permission for <i>public</i>, and all members of <i>sales</i> will be able to select from the table.</p>
<p>
<i>I have a trigger on a table for which I sometimes update many rows at a time. Will my trigger fire once for each row affected?</i></p>
<p>
This is a very common source of confusion, but the answer is that the trigger fires once no matter how many rows are affected: one row, 100,000 rows, or zero rows! A lot of people are surprised that the trigger fires at all if no rows are affected, but I don’t make the rules, I just tell you about them. You can run a simple test to prove this to yourself. Create an update trigger on the titles table in the pubs database:</p>
<pre><font face="Courier New" size="3">create trigger update_titles_trg
on titles
for update
as 
print 'You just updated a title!'
return</font></pre>
<p>
Now, execute a legal update statement with a WHERE clause for which no rows qualify:</p>
<pre><font face="Courier New" size="3">-- put all astrology books on sale in the pubs database
update titles
set price = price/2
where type = 'astrology'</font></pre>
<p>
This is a legal update statement; you will <i>not</i> receive an error message but only the information that zero rows were affected. If you have an update trigger on <i>titles</i> it <i>will</i> be fired and the trigger message will print.</p>
<p>
Because a trigger fires once, no matter how many rows are affected, the first thing a trigger should do is check the @@rowcount global variable. At the start of the trigger’s execution, this global variable will hold the count of the number of rows that were affected by the statement that caused the trigger to be fired. Because that variable is very volatile and its value changes after almost every statement executed, you should save it in your own local variable if you need to look at it more than once. Your trigger would then start out something like this: </p>
<pre><font face="Courier New" size="3">create trigger update_titles_trg
on titles
for update
as 
declare @num_rows int
select @num_rows = @@rowcount 
...
/* rest of trigger code */</font></pre>
<p>
The trigger will fire once for every legal update statement. If a rule or constraint is violated or a duplicate value is inserted into a column with a unique index, the update is not considered legal and the trigger will <i>not</i> fire.</p>
<p>
<i>I’d like an insert trigger on a table to update a value in the </i>inserted<i> table. Is this possible? </i></p>
<p>
Technically, this isn’t possible. The <i>inserted</i> and <i>deleted</i> tables that are accessible through triggers are really just views of the transaction log, and you should already be aware that the transaction log isn’t updatable. If you want to update the row that you just inserted you can do that in the original table; you can join with the <i>inserted</i> table to determine which row in the original table is the one you just inserted.</p>
<p>
Suppose you’re inserting new rows into the <i>titles</i> table in the <i>pubs</i> database. If a row is inserted with a null price, you’d like to change the <i>notes</i> field to include the string ÔPrice to be determined.’ Your trigger could look something like the following:</p>
<pre><font face="Courier New" size="3">create trigger insert_titles_trg 
on titles
for insert
as

if @@rowcount = 0 return

update titles
set notes = titles.notes + '  Price to be determined.' 
from titles, inserted
where titles.title_id = inserted.title_id
and titles.price is null

return</font></pre>
<p>
This trigger will work even if multiple rows are inserted, because the join in the update will connect all the rows in <i>inserted</i> to their matching row in <i>titles</i>, based on the primary key of <i>title_id.</i> </p>
<p>
<i>Sometimes control characters become embedded in my character columns (for example, ERwin text values). How can I get rid of these characters?</i></p>
<p>
To start with, you have to know the ASCII codes for the characters that you’re looking for, but after that it’s relatively straightforward. In fact, the most commonly occurring control characters have ASCII codes in sequence, so you can write a loop to increment from the first special character code to the last. Here are the most common ones:</p>
<pre><font face="Courier New" size="3">ASCII VALUE&#09;Meaning
----------- &#09;-------
7&#09;beep
8&#09;backspace
9&#09;tab
10&#09;linefeed
11&#09;vertical tab
12&#09;form feed
13&#09;carriage return</font></pre>
<p>
You can then use the charindex function to determine for each special character the position at which it appears in the string. If charindex returns null, the character doesn’t appear. Once the character is found, it can be removed by concatenating together the piece of the string before the character with the piece of the string after the character. For a line feed, you’ll probably want to include a space between the two pieces of the string. To retrieve the position where a particular character occurs, the charindex function would look like this:</p>
<pre><font face="Courier New" size="3">select @position = charindex(char(@control_char_
       ascii_code),convert(varchar(255),@your_string))</font></pre>
<p>
The value 255 is used here for simplicity as the maximum length of a character column. Alternatively, you could declare another variable for the actual length and use the datalength function to determine the value to assign to the variable. The concatenation of the part of the string before the position, and the part of the string after the position, would look like this:</p>
<pre><font face="Courier New" size="3">SELECT @your_string = substring(@your_string,1,
       (@position - 1)) + substring(@your_string,
       (@position + 1),255)</font></pre>
<p>
Mark Pohto created a complete stored procedure to strip out all the special characters listed earlier. The complete script to create this procedure is included in the file called STRIPOUT.SQL at the <i>SQL Server Professional</i> Web site (www.pinpub.com/sqlpro). s</p>
<p>
<b>&#09;&#09;&#09;   STRIPOUT.SQL at www.pinpub.com/sqlpro</b></p>
<p>
<i>Kalen Delaney started working with SQL Server in 1987 when she worked for Sybase in Technical Support. Since then, she’s done SQL Server training both for Sybase and for Microsoft. Delaney currently provides independent training and consulting from her Seattle-area consultancy. 75050.736@compuserve.com.</i></p>
<P align="center"><a
href="http://www.pinpub.com/sqlpro/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about SQL
Server Professional and Pinnacle Publishing, <br>
visit their website at</strong> <a
href="http://www.pinpub.com/sqlpro/"><strong>http://www.pinpub.com/sqlpro/</strong></a><strong>
</strong></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the January 1997
issue of SQL Server Professional. Copyright 1997, by Pinnacle
Publishing, Inc., unless otherwise noted. All rights are
reserved. SQL Server Professional is an independently produced
publication of Pinnacle Publishing, Inc. No part of this article
may be used or reproduced in any fashion (except in brief
quotations used in critical articles and reviews) without prior
consent of Pinnacle Publishing, Inc. To contact Pinnacle
Publishing, Inc., please call (800)788-1900 or (206)251-1900.</p>
</font></BODY>
</HTML>

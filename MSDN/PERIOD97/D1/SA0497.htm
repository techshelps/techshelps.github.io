<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Sense of Access 97's Command Bars </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1>Making Sense of Access 97’s Command Bars</h1>
<p>
David M. Shank</p>
<p>
<i>In Access 97 all menus, toolbars, and shortcut menus are variations of the new CommandBar object. In this first installment of a two-part series on command bars, David presents an overview of command bars and discusses some of the things to watch for when converting menu bar macros to Access 97 command bars. Next month, David will discuss the programmability aspects of command bars.</i></p>
<p>
IN previous versions of Microsoft Access, the only way to create menu bars, toolbars, or shortcut menus was to use menu bar macros or the Customize Toolbar dialog box. You could create menu bar macros by hand or use the Menu Builder Add-In. Programmatic access to menu or toolbar items was extremely limited. </p>
<p>
All Microsoft Office 97 applications now share the powerful new CommandBar object model. Menus, toolbars, and shortcut menus are all CommandBar objects. You can think of command bars as a combination of traditional menu bars and toolbars. A command bar can contain menu commands, cascading menus, toolbar buttons, text boxes, combo boxes, and other controls. CommandBar objects can contain controls only from the CommandBar object model. You can’t use ActiveX controls or Access controls on a command bar.</p>
<p>
In Access 97 you create menus, toolbars, or shortcut menus from the user interface using the Customize Toolbar dialog box or programmatically using VBA. Although you can still use menu bar macros, there’s no good reason to do so. In addition, you no longer need to create event procedures for the Activate and Deactivate events of a form to show and hide menus and toolbars. Setting an object’s Menubar or Toolbar property to the name of a custom command bar automatically hides the built-in menus or toolbars when the object is opened, and hides custom menus or toolbars when a user closes the object or switches to another object. If you want to manipulate converted menu or toolbar items programmatically, you’ll want to convert them to CommandBar objects. </p>
<h2>Converting applications to Access 97</h2>
<p>
When converting applications created in a prior version of Access to Access 97, keep the following considerations in mind:</p>
<p>
Windows API calls used to manipulate menu or toolbar items will no longer work. You must now manipulate these items using the CommandBar object model. </p>
<p>
The SetMenuItem of the DoCmd object will still work but only with menus created using macros. This method won’t work with built-in or custom command bar menus. </p>
<p>
Before you use VBA to program CommandBars, you must first set a reference to the Microsoft Office 8.0 Object Library. You do this by clicking References on the Tools menu while in module Design view, and selecting the appropriate check box. Once you’ve set a reference to the Microsoft Office object library, you can view the Office objects, properties, and methods in the Object Browser. The objects that you can use to program command bars include the CommandBar, CommandBarControl, CommandBarButton, CommandBarComboBox, and CommandBarPopup objects, as well as the CommandBars and CommandBarControls collections.</p>
<p>
When you convert a database, all DoMenuItem actions in macros are replaced with RunCommand actions the first time that the macros are saved after conversion. DoMenuItem methods used in VBA procedures aren’t changed.</p>
<p>
To convert a macro-defined custom menu to a command bar after you convert your database, select the menu bar macro in the Database window, click Macro on the Tools menu, and select one of the following commands: Create Menu From Macro, Create Toolbar From Macro, or Create Shortcut Menu From Macro. </p>
<p>
After you convert a database, some custom toolbar buttons may appear blank because there’s no equivalent image in the new version. You can replace the missing image with one from Access 97, or you can use an icon editor to re-create the old button image.</p>
<p>
The Menu Builder Add-Inn is no longer included in Access (but a downloadable wizard is availableÑsee the sidebar). In prior versions of Access, you used the Menu Builder to create menu bar macros. This kind of menu bar is no longer the recommended way to create menus. </p>
<p>
When you convert a database, any custom toolbars, as well as built-in toolbars, are automatically converted to the new toolbar type CommandBar. Menu bars based on menu bar macros are displayed as the new-style menu bars when you open the database, but aren’t automatically converted to CommandBar objects. This means you can’t modify them using the Customize dialog box until you convert them to CommandBars. </p>
<h2>Converting menu bar macros</h2>
<p>
You don’t have to convert menu bars or shortcut menus based on macros to command bars to use them in Access 97. However, you should convert them anyway if you want to take full advantage of the power of command bars. Access 97 lets you easily convert existing menu bar and shortcut menu bar macros to CommandBar objects using the tools shown in Figure 1.</p>
<p><img src="cbar1.gif"></p>
<p>
<b>Figure 1. The Macro command on the Tools menu lets you easily convert an existing macro to any kind of command bar.</b></p>
<p>
Once your macros are converted to CommandBar objects, you can modify them from the user interface or using VBA. For example, if you want to move a sub-menu or a control on a menu to another command bar, simply drag the menu or control from one command bar to another. To copy the menu or control from one command bar to another, hold down the <small>CTRL</small> key while you drag the control. When you use this technique to copy a sub-menu, Access creates a new Popup CommandBar object and gives it a default name of “Custom Popup <i>xx</i>” (<i>xx</i> is an integer used to distinguish the name of the menu control from other menu controls). To change the name, open the Customize dialog box and click the Properties button. In the Toolbar Properties dialog box, use the Selected Toolbar combo box to choose the name of the command bar to rename, and then supply a new name in the Toolbar Name text box.</p>
<h2>Creating custom command bars and controls</h2>
<p>
You can create or modify command bars from the Customize Toolbars dialog box or from VBA. (Note: If you have menus that are based on menu bar macros, these menus aren’t available while the Customize dialog box is open.)</p>
<p>
The easiest way to create a new command bar for your application is to use the Customize Toolbars dialog box (see Figure 2).</p>
<p><img src="cbar2.gif"></p>
<p>
<b>Figure 2. The Customize Toolbars dialog box supplies the main user interface to CommandBar objects and their controls.</b></p>
<p>
To create a new command bar, click the “NewÉ” command button and supply a name for the command bar. All new CommandBar objects created from this dialog box are created as Toolbar type command bars by default. To change the command bar into a menu bar or a shortcut menu bar, click the Properties command button and set the Type property to “Menu Bar” or “Popup” (see Figure 3). To delete a custom toolbar or menu bar, select it from the list of toolbars on the Toolbars tab and click the Delete button. You can’t delete built-in command bars. </p>
<p><img src="cbar3.gif"></p>
<p>
<b>Figure 3. Use the Toolbar Properties dialog box to specify whether a command bar will be a menu bar, toolbar, or pop-up menu bar.</b></p>
<p>
After you create a command bar, you can add built-in or custom controls by dragging the desired control or menu from the command well in the Customize dialog box to the new CommandBar object. You can also copy controls from another command bar by holding down the <small>CTRL</small> key and dragging a control from one command bar to another. The Commands tab contains categories for all built-in controls, built-in menus, and existing macros. The controls contained in each category of controls, menus, or macros are displayed in the Commands list.</p>
<p>
To create a custom button, select File in the categories list and then drag the control named “Custom” to the desired menu bar or toolbar. You can then right-click the custom control to set the control’s properties. To delete a control from a menu bar or toolbar, open the Customize dialog box and drag the control off the toolbar and release the mouse button. </p>
<p>
If you’re creating a custom menu bar and want to add sub-menu items (such as the Access menu bar sub-menus for File, Edit, View, Insert, and so on), you can add either built-in or custom sub-menu items. For example, if you want an Edit sub-menu on your menu bar to duplicate the Edit menu on the Access menu bar, open the Customize dialog box, select “Built-In Menus” from the Categories list, and drag the Edit menu to your new menu bar. Be careful about modifying built-in menus! Because built-in menus are just additional instances of their counterparts on the Access menu bar, any changes you make will be reflected in the original menu as well.</p>
<h2>Adding custom menus</h2>
<p>
You use the New Menu control to add a custom menu to a menu bar or toolbar. For example, to add a menu item called “Utilities” that contains a control to execute a custom procedure, select the “New Menu” category in the commands well of the Customize dialog box and then drag the “New Menu” control to the desired location on your menu bar or toolbar. Right-click the New Menu control and change the Name property to “&amp;Utilities.” Notice that when you click on the New Menu control while the Customize dialog box is open, a small tab appears. This is where you drop any controls you want to appear when the menu drops down. To add a control to the “Utilities” menu that runs your custom procedure, drag a “Custom” control from the command well and drop it on the drop-down portion of the menu. Right-click the custom button to rename it. Then select the Properties command and set the control’s OnAction property to the name of the custom procedure you want to run.</p>
<h2>Shortcut menus</h2>
<p>
You create and modify shortcut menu bars in the Access 97 user interface in the same way you create and modify menu bars or toolbars, with a few important differences:</p>
<p>
When you create a new command bar and set its Type property to Popup, the shortcut menu disappears and is added to the “Shortcut Menus” command bar. </p>
<p>
Shortcut menus aren’t listed on the Toolbars tab of the Customize dialog box. Instead, to view a shortcut menu after it has been created, select the “Shortcut Menus” toolbar to display a command bar that contains all built-in and custom shortcut menus in your application. </p>
<p>
You can’t rename or delete a custom shortcut menu as long as its Type property is set to Popup. To rename or delete a custom shortcut menu, select the shortcut menu from the Toolbar Properties dialog box and change its type property to Toolbar or Menu Bar. The command bar will now appear in the list of command bars on the Toolbars tab of the Customize dialog box. You can then use the Rename or Delete commands to make any desired changes.</p>
<h2>To be continued</h2>
<p>
The information in this article should help you start creating and manipulating your own command bars in Access 97. Next month, I’ll present the CommandBar object model and share with you several examples of how to programmatically create and manipulate menu, toolbar, and shortcut menu command bars.</p>
<p>
<b>The New Menu Bar Wizard</b></p>
<p>
Microsoft has created a new menu bar wizard to help you create CommandBar-style menu bars in Access 97. A self-extracting file named WZMENU80.EXE is available for download from the Microsoft ftp server at ftp://ftp.microsoft.com/softlib/mslfiles/wzmenu80.exe. It's also available in this month's Smart Access Subscriber Downloads at www.pinpub.com/access.</p>
<p>
<b>&#09;&#09;&#09;  SHANK02.EXE at www.pinpub.com/access</b></p>
<p>
<i>David Shank works at Microsoft as a technical writer on the Microsoft Access team, creating developer documentation and sample applications. He was also the technical editor for the Access 97 Developer’s Handbook and the VBA Developer’s Handbook. davidsha@microsoft.com or 103176.3264@compuserve.com.</i></p>
<P align="center"><a
href="http://www.pinpub.com/access/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about Smart
Access and Pinnacle Publishing, visit their website at</strong>:</p>

<P align="center"><a
href="http://www.pinpub.com/access/"><strong>http://www.pinpub.com/access/</strong></a></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the April 1997
issue of Smart Access. Copyright 1997, by Pinnacle Publishing,
Inc., unless otherwise noted. All rights are reserved. Smart
Access is an independently produced publication of Pinnacle
Publishing, Inc. No part of this article may be used or
reproduced in any fashion (except in brief quotations used in
critical articles and reviews) without prior consent of Pinnacle
Publishing, Inc. To contact Pinnacle Publishing, Inc., please
call (800)788-1900 or (206)251-1900.</p>
</font></BODY>
</HTML>

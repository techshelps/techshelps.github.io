<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Essentials: Owners, Guests, and Aliases </title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2">
<h1>SQL Essentials:</h1>
<h1>Owners, Guests, and Aliases</h1>
<p>
Kalen Delaney</p>
<p>
<i>I have a user who logs in as Rickey, whose objects in database </i>sales<i> are owned by guest. Another user, who logs in as Melissa, has objects in database </i>sales<i> that are owned by dbo. Where do </i>dbo<i> and </i>guest<i> come from? How can I allow Rickey and Melissa to own objects?</i></p>
<p>
In SQL Server, the only thing your login name allows you to do is just what the name implies: you can "log in." In order to <i>access</i> any of the databases on the SQL Server, you must be mapped to a user name within the database you want to access. </p>
<p>
Login names are stored in the master database in the <i>syslogins</i> table. The <i>name</i> column stores the login name, and the <i>suid</i> column stores the server user id thatís associated with that login name. Each database has a table called <i>sysusers</i>, which contains the user names of all valid users in that database. Associated with each user name in <i>sysusers</i> is a <i>suid</i> value that maps each user back to an associated login name.</p>
<p>
You can add users to a database in one of two ways. Use the Manage Logins screen in the SQL Enterprise Manager where, for any login name, youíre given a list of databases. For each database, you can select whether this user can access that database and, if so, what the associated user name in the database will be. If Enterprise Manager isnít available, or if you prefer to create auditable, reusable T-SQL scripts, you can use the system stored procedure sp_adduser:</p>
<pre><font face="Courier New" size="3">sp_adduser Thomas, Tom</font></pre>
<p>
With the stored procedure approach, you need to be using the database in which you want to add a new user. The above procedure assumes "Thomas" is an existing login name, and will allow someone logged in as Thomas to use the current database under the user name of Tom. A user name can be the same as the associated login name, or it can be different. For ease of management, most system administrators keep the login names and user names the same, but you need to be aware that theyíre really two different things. All object ownership—bear in mind that SQL Server "objects" such as tables and views arenít the same as ActiveX objects or Java applets—relates to your user name in a database, and all permissions are granted to user names, not to login names.</p>
<p>
Two special user names will never match a login name exactly. Every database has a user name "dbo," which means <i>database owner</i>. If Melissa is the login name of the owner of the database <i>sales</i>, her user name will be <i>dbo</i>. Any objects she creates will be owned by <i>dbo</i> and any permissions granted to her within the database must be granted to <i>dbo</i>.</p>
<p>
Every database can also have a user name "guest," which is the only user name that doesnít map directly to a specific login name. If you have a guest user in <i>sysusers</i>, youíll see that its associated suid is -1, which doesnít match any <i>suid</i> in <i>syslogins</i>. You must use the sp_adduser stored procedure to add a guest user name, because thereís no login name to select in the Manage Logins screen:</p>
<pre><font face="Courier New" size="3">sp_adduser guest</font></pre>
<p>
Adding a guest user basically gives the database an "open door" policy. It means that anybody who can log in to SQL Server can use this database, even if they donít have an explicit mapping to a user name in <i>sysusers</i>. Anyone without a mapping in <i>sysusers</i> will use the user name "guest" when accessing the database. Any objects they create will be owned by <i>guest</i>, and the only permissions they have will be those that have been granted to "guest" or to "public" (which means everyone).</p>
<p>
<i>Can two login names share the same database user name? </i></p>
<p>
To answer this question, Iíll have to admit that I wasnít 100 percent correct in my answer to the previous question. Earlier, I said that anyone who doesnít have an explicit mapping to a user name in <i>sysusers</i> can access the database as <i>guest</i>, if a guest user exists. There is one exception, however, which Iíll describe next. </p>
<p>
The <i>sysusers</i> table has a unique index on <i>name</i>, which means that each user name can occur only once and must be mapped to a single login id (<i>suid</i>). However, there also exists in each database a table called <i>sysalternates</i>, which allows additional login names to be aliased to an already existing user name. Only one login name is mapped to a user name in <i>sysusers</i>, but additional login names can share that mapping by being aliased to the same user name. Aliases are valid only in the database where theyíre defined, because thereís a separate sysalternates table in each database.  </p>
<p>
To create an alias in Enterprise Manager, you can use the same Manage Logins screen for the login name youíre working with. Choose the database for which this login is to have access. You must check the first column after the name of the database to permit this login to have access to the database. Then, instead of entering a value in the third column for a (new) user name, youíd use the fourth column. You canít type anything other than a value from the drop-down list, which shows the names of existing users. Choose the one to whom you want this login name to be aliased. For the T-SQL approach, you could execute this statement:</p>
<pre><font face="Courier New" size="3">sp_addalias Rickey, Kyle</font></pre>
<p>
This would allow someone using the login name "Rickey" to access the current database with the user name "Kyle." For this command to work, the user name Kyle must already exist and be mapped to another login name.</p>
<p>
The most common use of aliases is to allow multiple login names to function as the database owner of a database. If Melissa is the owner of the database, you could also give ownership privileges to the login "dan" by executing the following:</p>
<pre><font face="Courier New" size="3">sp_addalias dan, 'dbo'</font></pre>
<p>
Because "dbo" is a reserved word, it must be in quotes.</p>
<p>
To determine what user name youíre currently using, you can examine the value of the user_name( ) function:</p>
<pre><font face="Courier New" size="3">select user_name( )</font></pre>
<p>
<i>If Melissa is the owner of database </i>sales<i>, why canít she access the data in tables owned by users in her database?</i></p>
<p>
By default, only the owner of a table has access to the data in that table, and the owner must grant permission to select, insert, update, or delete data. Even though the database owner has to give the user permission to create a table in the first place, once the user creates the table it belongs to that user. Then user "dbo" must be granted permission like anyone else. The one exception is if the database owner is the system administrator, logging in as "sa." Anybody who uses the login <i>sa</i> has full access to all data in every database, and permissions arenít even checked.</p>
<p>
There <i>is</i> a way around this, though, as you might have guessed. A database owner can impersonate any user in her database by using the setuser command:</p>
<pre><font face="Courier New" size="3">setuser 'Kyle'</font></pre>
<p>
The user name must be a valid user in the database, and also must be in quotes. From this point on the <i>dbo</i> is treated exactly as if she were "Kyle." Any objects she creates are owned by Kyle. When accessing Kyleís objects, she has full permissions and doesnít need to specify the owner name with the table name. This can be very useful during testing, when the database owner—as the developer—wants to test the objects and permissions that have been granted, and make sure Kyle can do everything heís supposed to, and canít do anything he isnít supposed to! When the database owner is through being Kyle, she can issue the setuser command by itself to resume her old identity:</p>
<pre><font face="Courier New" size="3">setuser</font></pre>
<p>
If the setuser command is issued with the WITH NORESET option, however, the database owner wonít be able to return to her true identity during that session.</p>
<pre><font face="Courier New" size="3">setuser 'Kyle' with noreset</font></pre>
<p>
If youíre using <i>setuser</i> with SQL Server version 4.2, or if youíre familiar with it from pre-SQL 6.0 versions, there are some differences you should be aware of. The WITH NORESET option is new in SQL Server 6.0. Also, as of SQL Server 6.0, a database owner doesnít need to issue the setuser command to DROP an object owned by a user in the database—only to access the data.</p>
<p>
Prior to SQL Server 6.0, the "sa" (who always uses the user name <i>dbo</i> in every database) could also issue the setuser command, but the effect would be limited. The <i>sa</i> could create tables owned by another user, but could <i>not</i> test that userís permissions. Why? Because even though setuser had been executed, SQL Server still treated the <i>sa</i> like the <i>sa</i>, and no permissions were checked. As of SQL Server 6.0, if someone whoís logged in as <i>sa</i> issues the setuser command, all <i>sa</i> capabilities are lost until the <i>sa</i> identity is resumed.</p>
<p>
Finally, if you decide to experiment with using the setuser command, you can always verify who SQL Server thinks you are by using the user_name( ) function mentioned earlier. s</p>
<p>
<i>Kalen Delaney started working with SQL Server in 1987 when she worked for Sybase in Tech Support. Since then, sheís done SQL Server training both for Sybase and for Microsoft. Delaney currently provides independent training and consulting from her Seattle-area consultancy, Solid Quality Learning Inc. (www.sqlinc.com). Kalen_Delaney@compuserve.com.</i></p>
<P align="center"><a
href="http://www.pinpub.com/sqlpro/"><img src="Pinnacle.gif"
border="0" width="216" height="72"></a></p>

<P align="center"><strong>To find out more about SQL
Server Professional and Pinnacle Publishing, <br>
visit their website at</strong> <a
href="http://www.pinpub.com/sqlpro/"><strong>http://www.pinpub.com/sqlpro/</strong></a><strong>
</strong></p>

<P align="center"><font size="1">Note: This is not a
Microsoft Corporation website. <br>
Microsoft is not responsible for its content.</font></p>

<P>This article is reproduced from the June 1997
issue of SQL Server Professional. Copyright 1997, by Pinnacle
Publishing, Inc., unless otherwise noted. All rights are
reserved. SQL Server Professional is an independently produced
publication of Pinnacle Publishing, Inc. No part of this article
may be used or reproduced in any fashion (except in brief
quotations used in critical articles and reviews) without prior
consent of Pinnacle Publishing, Inc. To contact Pinnacle
Publishing, Inc., please call (800)788-1900 or (206)251-1900.</p>
</font></BODY>
</HTML>

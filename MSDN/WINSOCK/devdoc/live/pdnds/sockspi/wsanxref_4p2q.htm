<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ATM Data Structures</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_atm_data_structures_2"></a>ATM Data Structures</h2>
<p>
A new address family, AF_ATM, is introduced for native ATM services, and the corresponding "sockaddr" structure, <i>sockaddr_atm</i>, is defined below. To open a socket for native ATM services, parameters in <b>socket</b> should contain "AF_ATM", "SOCK_RAW", and "ATMPROTO_AAL5" or "ATMPROTO_AALUSER", respectively.</p>
<pre><code>struct sockaddr_atm {
    u_short satm_family;        /* address family should be AF_ATM  */
    ATM_ADDRESS satm_number;    /* ATM address                      */
    ATM_BLLI satm_blli;         /* B-LLI                            */
    ATM_BHLI satm_bhli;         /* B-HLI                            */
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>satm_family</b></dt>
<dd>
Identifies the address family, which is AF_ATM in this case.</dd>
<dt>
<b>satm_number</b></dt>
<dd>
Identifies the ATM address which could be either in E.164 or NSAP-style ATM End Systems Address format. See next section for more details about the ATM_ADDRESS structure. This field will be mapped to the Called Party Number IE(Information Element) if it is specified in <b>bind</b>/<b>WSPBind</b> for a listening socket, or<b> </b>in <b>connect</b>/<b>WSAConnect</b>/<b>WSPConnect</b>/<b>WSAJoinLeaf</b>/<b>WSPJoinLeaf</b> for a connecting socket. It will be mapped to the Calling Party Number IE if specified in <b>bind</b>/<b>WSPBind</b> for a connecting socket. </dd>
<dt>
<b>satm_blli</b></dt>
<dd>
Identifies the fields in the B-LLI Information Element which are used along with <i>satm_bhli</i> to identify an application. See the section below for more details about the ATM_BLLI structure. Note that the BLLI layer 2 information is treated as not present if its <i>Layer2Protocol</i> field contains "SAP_FIELD_ABSENT", or wildcard if it contains "SAP_FIELD_ANY". Similarly, the BLLI layer 3 information is treated as not present if its <i>Layer3Protocol</i> field contains "SAP_FIELD_ABSENT", or wildcard if it contains "SAP_FIELD_ANY". </dd>
<dt>
<b>satm_bhli</b></dt>
<dd>
Identifies the fields in the B-HLI Information Element which are used along with <i>satm_blli</i> to identify an application. See the section below for more details about the ATM_BHLI structure. 

<p>
<b>Note</b>&nbsp;&nbsp;<i>Satm_bhli</i> is treated as not present if its <i>HighLayerInfoType</i> field contains "SAP_FIELD_ABSENT", or wildcard if it contains "SAP_FIELD_ANY".

</dd>
</dl>
<p>
For listening sockets, the<i> sockaddr_atm</i> structure is used in <b>bind</b>/<b>WSPBind</b> to register a Service Access Point (SAP) to receive incoming connection requests destined to this SAP. SAP registration is used to match against the SAP specified in an incoming connection request in order to determine which listening socket to receive this request. In current version of this specification, overlapping registration is not allowed. Overlapping registration is defined as having more than one registered SAP to potentially match the SAP specified in any incoming connection request. <b>listen</b>/<b>WSPListen</b> will return the error code WSAEADDRINUSE if the SAP associated with the listening socket overlaps with any currently registered SAPs in the system.</p>
<p>
The fields in a SAP to be registered must contain either a valid value, or one of two special manifest constants: "SAP_FIELD_ABSENT", or "SAP_FIELD_ANY". "SAP_FIELD_ABSENT" simply means that this field is not presented as part of a SAP. "SAP_FIELD_ANY" means wildcarding. Note that the requirement of non-overlapping registration does not preclude wildcarding. For example, it is possible to have two registered SAPs which both contain "SAP_FIELD_ANY" in some fields and different values in other fields. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The called party ATM number is mandatory, thus the <i>satm_number</i> field cannot contain "SAP_FIELD_ABSENT".</p>
<p>
For connecting sockets, the <i>sockaddr_atm</i> structure is used to specify the destination SAP in <b>connect</b>/<b>WSAConnect</b>/<b>WSPConnect</b> for point-to-point connections, and <b>WSAJoinLeaf</b>/<b>WSPJoinLeaf</b> for point-to-multipoint connections. The fields in the destination SAP of a connecting socket must contain either a valid value or "SAP_FIELD_ABSENT", i.e., "SAP_FIELD_ANY" is not allowed. Furthermore, "SAP_FIELD_ABSENT" is not allowed for the<i> satm_number</i> field. The destination SAP is used to match against all the registered SAPs in the destination machine to determine who to forward this connection request to. If each and every field of the destination SAP of an incoming request either equals to the corresponding field of a registered SAP, or the corresponding field contains the "SAP_FIELD_ANY", the listening socket associated with this registered SAP will receive the incoming connection request.</p>
<p>
If <b>bind</b>/<b>WSPBind</b> is used on a connecting socket to specify the calling party ATM address, the <i>satm_blli</i> and <i>satm_bhli</i> fields should be ignored and the ones specified in <b>connect</b>/<b>WSAConnect</b>/<b>WSPConnect</b> will be used.</p>
<p>&nbsp;</p></body>
</HTML>

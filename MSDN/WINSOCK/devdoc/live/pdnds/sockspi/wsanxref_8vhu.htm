<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Structures (WS2DNET.H)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_data_structures_ws2dnet.h__2"></a>Data Structures (WS2DNET.H)</h3>
<p>
This section lists address type information for the header files.</p>

<h4><a name="_win32_decnet_node_address_2"></a>DECnet node address</h4>
<pre><code>// if a_len = 2, DECnet NSP transport &amp; DECnet routing
// if a_len &gt; 2, DECnet NSP transport &amp; OSI routing
struct dn_naddr {
  unsigned short  a_len;    // address length - set to DN_ADDL
  unsigned char   a_addr[DN_MAXADDL]; // DECnet address
};
 </code></pre>

<h4><a name="_win32_decnet_socket_2"></a>DECnet socket</h4>
<pre><code>// DECnet uses object names &amp; numbers instead of ports
struct sockaddr_dn {
  unsigned short   sdn_family;    // AF_DECnet
  unsigned char    sdn_flags;         // Reserved - set to zero
  unsigned char    sdn_objnum;    // DECnet object number
  unsigned short   sdn_objnamel;  // DECnet object name length
  unsigned char    sdn_objname[DN_MAXOBJL]; // DECnet object name
  struct dn_naddr  sdn_add;         // DECnet address
};
 </code></pre>

<h4><a name="_win32_decnet_node_entity_2"></a>DECnet node entity</h4>
<pre><code>struct nodeent_f {
  char FAR *n_name;              // pointer to name of DECnet node 
  unsigned short n_addrtype;     // address type   
  unsigned short n_length;       // address length
  unsigned char FAR *n_addr;     // pointer to DECnet address
  unsigned char FAR *n_params; 
  unsigned char  n_reserved[16]; // Reserved
};
 </code></pre>

<h4><a name="_win32_decnet_optional_data_2"></a>DECnet optional data</h4>
<pre><code>struct optdata_dn { 
  unsigned short  opt_status;          // status return
  unsigned short  opt_optl;            // length of data
  unsigned char   opt_data[DN_MAXOPTL]; // Optional data  
};
 </code></pre>

<h4><a name="_win32_decnet_outgoing_access_control_data_2"></a>DECnet outgoing access control data</h4>
<pre><code>struct accessdata_dn {
  unsigned short  acc_accl;             // account length
  unsigned char   acc_acc[DN_MAXACCL];  // account string          
  unsigned short  acc_passl;            // password length
  unsigned char   acc_pass[DN_MAXACCL]; // password string 
  unsigned short  acc_userl;            // user length 
  unsigned char   acc_user[DN_MAXACCL]; // user string 
};
 </code></pre>

<h4><a name="_win32_decnet_incoming_access_control_2"></a>DECnet incoming access control</h4>
<pre><code>//  DECnet incoming access control information
struct dnet_accent
{
  unsigned char dac_status;       
  unsigned char dac_type;  // DN_NONE, etc.      
  char dac_username[DN_MAXACCL];  
  char dac_password[DN_MAXACCL]; 
};
 </code></pre>

<h4><a name="_win32_decnet_call_data_2"></a>DECnet call data</h4>
<pre><code>struct  calldata_dn {
struct optdata_dn { 
  unsigned short  opt_status;  
  unsigned short  opt_optl;     
  unsigned char   opt_data[DN_MAXOPTL]; 
};
struct accessdata_dn {
  unsigned short  acc_accl;   
  unsigned char   acc_acc[DN_MAXACCL];
  unsigned short  acc_passl;  
  unsigned char   acc_pass[DN_MAXACCL]; 
  unsigned short  acc_userl;    
  unsigned char   acc_user[DN_MAXACCL]; 
}
};
 </code></pre>

<h4><a name="_win32_decnet_logical_link_2"></a>DECnet logical link</h4>
<pre><code>struct linkinfo_dn {
  unsigned short  idn_segsize;
  unsigned char   idn_linkstate;    
};
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

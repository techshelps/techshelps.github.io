<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPv6 Support</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_ipv6_support_2"></a>IPv6 Support</h3>
<p>
If TCP/IP service provider supports IPv6 addressing, it must install itself twice: once for IPv4 and once for IPv6 address family. So, <a href="../../../good/pdnds/sock2/wsapiref_0f76.htm"><b>WSAEnumProtocols</b></a> will return two <a href="../../../good/pdnds/sock2/strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a><b> </b>structures for each of the supported socket types (SOCK_STREAM, SOCK_DGRAM, SOCK_RAW). The <i>iAddressFamily</i> must by set to AF_INET for IPv4 addressing, and to AF_INET6 for IPv6 addressing.</p>
<p>
The IPv6 addresses are described in the following structures:</p>
<pre><code>struct sockaddr_in6 {
      short             sin6_family;     /* AF_INET6 */
      u_short           sin6_port;       /* Transport level port number */
      u_long            sin6_flowinfo;    /* IPv6 flow information */
      struct in_addr6   sin6_addr; /* IPv6 address */
   };

    struct    in_addr6 {
        u_char    s6_addr[16];    /* IPv6 address */
    };
 </code></pre>
<p>
If an application uses Windows Sockets 1.1 functions and wants to use IPv6 addresses, it may continue to use all the old functions which take<code> </code>struct<code> sockaddr</code> as one of the parameters (<a href="../../../good/pdnds/sock2/wsapiref_6vzm.htm"><b>bind</b></a>,<b> <a href="../../../good/pdnds/sock2/wsapiref_8m7m.htm">connect</a></b>,<b> <a href="../../../good/pdnds/sock2/wsapiref_4sqa.htm">sendto</a></b>,<b> <a href="../../../good/pdnds/sock2/wsapiref_88oi.htm">recvfrom</a></b>,<b> <a href="../../../good/pdnds/sock2/wsapiref_13aq.htm">accept</a></b>, etc.). The only change that is required is to use <code>struct sockaddr_in6 </code>instead of <code>struct sockaddr</code>. However, all the name resolution functions (<a href="../../../good/pdnds/sock2/wsapiref_0q5u.htm"><b>gethostbyname</b></a>, <a href="../../../good/pdnds/sock2/wsapiref_7wj6.htm"><b>gethostbyaddr</b></a>, etc.) and address conversion functions (<b>inet_addr</b>,<b> inet_ntoa</b>) can not be reused because they assume an IP address of 4 bytes in length. An application which wants to do name resolution and address conversion for IPv6 addresses must use Windows Sockets 2 specific functions (<a href="../../../good/pdnds/sock2/wsapiref_54z6.htm"><b>WSAStringToAddress</b></a>,<b> <a href="../../../good/pdnds/sock2/wsapiref_5ib6.htm">WSAAddressToString</a></b>, etc.)</p>
<p>
The multicast for IPv6 has to be specified in more details in a later version.</p>
<p>&nbsp;</p></body>
</HTML>

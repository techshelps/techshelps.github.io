<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connections Using Accept/WSAAccept/ WSPAccept</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_connections_using_accept_wsaaccept_wspaccept_2"></a>Connections Using Accept/WSAAccept/ WSPAccept</h3>
<p>
This section describes various data connections for accept functions.</p>
<h4>Immediate Accept with no optional or access data</h4>
<p>
In order to accept a connection on a DECnet socket, the parameter <i>addr</i> should point to a <i>sockaddr_dn</i> structure.</p>
<pre><code>#include &lt;ws2dnet.h&gt;

SOCKET WSAAPI accept ( SOCKET <i>s</i>, struct sockaddr_dn FAR * <i>addr,</i> int FAR * <i>addrlen </i>);

SOCKET WSAAPI WSAAccept ( SOCKET <i>s</i>, struct sockaddr_dn FAR * <i>addr,</i> int FAR * <i>addrlen</i>, LPCONDITIONPROC <i>lpfnCondition, </i>DWORD<i> dwCallbackData </i>);

SOCKET WSPAPI WSPAccept( SOCKET <i>s</i>, struct sockaddr_dn FAR * <i>addr,</i> int FAR * <i>addrlen</i>, LPCONDITIONPROC <i>lpfnCondition</i>, DWORD <i>dwCallbackData</i>, 
int FAR * <i>lpErrno</i> );
 </code></pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=13%><i>addr</i></td>
<td width=87%>A pointer to a <i>sockaddr_dn</i> structure which receives the address of the connecting entity, as known to the communications layer.</td>
</tr>
</table><br>
<h4>Deferred accept with optional and access data</h4>
<p>
DECnet sockets support both immediate and deferred accepts. It also supports the exchange of up to 16 bytes of optional data on <a href="../../../good/pdnds/sock2/wsapiref_13aq.htm"><b>accept</b></a> and connect. It also supports the receipt of DECnet access control information by the server from the client on a connect request.</p>
<pre><code>#include &lt;ws2dnet.h&gt;

SOCKET WSAAPI WSAAccept ( SOCKET <i>s</i>, struct sockaddr_dn FAR * <i>addr,</i> int FAR * <i>addrlen</i>, LPCONDITIONPROC <i>lpfnCondition, </i>DWORD<i> dwCallbackData </i>);

SOCKET WSPAPI WSPAccept( SOCKET <i>s</i>, struct sockaddr_dn FAR * <i>addr,</i> int FAR * <i>addrlen</i>, LPCONDITIONPROC <i>lpfnCondition</i>, DWORD <i>dwCallbackData</i>, 
int FAR * <i>lpErrno</i> );
 </code></pre>
<p class=indent1>
DECnet optional data is passed in an <i>optdata_dn</i> structure. Access control data is passed in an <i>accessdata_dn</i> structure.</p>
<p class=indent1>
In the CALLBACK function, the <i>lpCallerData</i> should point to a <i>calldata_dn</i> structure which contains concatenated <i>opdata_dn</i> and <i>accessdata_dn</i> structures. If <i>lpCallerData</i> is set to NULL, no additional data will be read from the caller. If either the <i>opdata_dn.opt_optl</i> or the <i>accessdata_dn</i>.<i>acc_userl </i>are set to zero, that portion of the structure will be ignored.</p>
<p class=indent1>
<i>The accept </i>only reads accessdata_dn, it does not write it, so only <i>optdata_dn</i> will be returned by the server. The <i>lpCalleeData</i> pointer should point to a buffer containing the <i>opdata_dn</i> structure. If <i>lpCalleeData</i> is set to NULL no optional data will be read from the server. </p>
<p>&nbsp;</p></body>
</HTML>

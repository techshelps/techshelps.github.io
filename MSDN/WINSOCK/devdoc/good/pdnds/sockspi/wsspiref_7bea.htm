<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSCInstallProvider</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wscinstallprovider_2"></a>WSCInstallProvider</h1>
<p>
The <b>WSCInstallProvider</b> function installs the specified transport provider into the system configuration database.</p>
<pre><code><b>int WSCInstallProvider (
  const LPGUID</b><i> lpProviderId</i><b>,</b>                      
<b>  const LPWSTR</b><i> lpszProviderDllPath</i><b>,</b>               
<b>  const LPWSAPROTOCOL_INFOW</b><i> lpProtocolInfoList</i><b>,</b>   
<b>  DWORD</b><i> dwNumberOfEntries</i><b>,</b>                        
<b>  LPINT</b><i> lpErrno</i>                                   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpProviderId</i></dt>
<dd>
[in] A pointer to a provider-selected, globally unique identifier (GUID).</dd>
<dt>
<i>lpszProviderDllPath</i></dt>
<dd>
[in] A pointer to a string containing the load path to the provider's DLL. This string observes the usual rules for path resolution, and can contain embedded environment strings (such as %SystemRoot%); and such environment strings are expanded whenever the WS2_32.DLL needs to subsequently load the provider DLL on behalf of an application. After any embedded environment strings are expanded, the WS2_32.DLL passes the resulting string into the <b>LoadLibrary</b> function to load the provider into memory. For more information, see <b>LoadLibrary</b>. </dd>
<dt>
<i>lpProtocolInfoList</i></dt>
<dd>
[in] Points to an array of <b>WSAPROTOCOL_INFOW</b> structures. Each structure defines a protocol,address_family, and socket_type supported by the provider.</dd>
<dt>
<i>dwNumberOfEntries</i></dt>
<dd>
[in] Contains the number of entries in the <i>lpProtocolInfoList</i> array.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This routine creates the necessary common Windows Sockets 2 configuration information for the specified provider. It is applicable to base protocols, layered protocols and protocol chains. After this routine completes successfully, the protocol information provided in <i>lpProtocolInfoList</i> will be returned by the <b>WSAEnumProtocols</b>. Note that in Win32 environments, only instances of the WS2_32.DLL created after a successful completion of this function will include the new entries in <b>WSAEnumProtocols</b>.</p>
<p>
Any file installation or service provider specific configuration must be performed by the caller.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSCInstallProvider</b> returns zero. Otherwise, it returns SOCKET_ERROR, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=31%>WSAEFAULT</td>
<td width=69%>One of more of the arguments<i> </i>is not in a valid part of the user address space.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_6anm.htm"><b>WSCDeinstallProvider</b></a>, <a href="wsspiref_5qeq.htm"><b>WSCEnumProtocols</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

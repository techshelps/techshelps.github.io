<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Event Objects</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_using_event_objects_2"></a>Using Event Objects</h3>
<p>
Windows Sockets event objects are fairly simple constructs which can be created and closed, set and cleared, waited upon and polled. The general usage model is for clients to create an event object and supply the handle as a parameter (or as a component of a parameter structure) in functions such as <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> and <a href="wsspiref_3p0y.htm"><b>WSPEventSelect</b></a>. When the nominated condition has occurred, the service provider uses the handle to set the event object by calling <a href="wsspiref_7roy.htm"><b>WPUSetEvent</b></a>. Meanwhile, the Windows Sockets SPI client may either block and wait or poll until the event object becomes set (or as it is sometimes called: signaled). The client may subsequently clear or reset the event object and use it again.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSPCancelBlockingCall</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wspcancelblockingcall_2"></a>WSPCancelBlockingCall</h1>
<p>
The <b>WSPCancelBlockingCall</b> function cancels a blocking call which is currently in progress.</p>
<pre><code><b>int WSPCancelBlockingCall (
  LPINT</b><i> lpErrno  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This function cancels any outstanding blocking operation for this thread. It is normally used in two situations:
<ol>
<li>
A Windows Sockets SPI client is processing a message which has been received while a service provider is implementing pseudo blocking. In this case, <b>WSAIsBlocking</b> will be true.</li>
<li>
A blocking call is in progress, and the Windows Sockets service provider has called back to the Windows Sockets SPI client's "blocking hook" function (through the callback function retrieved from <a href="wsspiref_25iq.htm"><b>WPUQueryBlockingCallback</b></a>), which in turn is invoking this function. Such a situation might arise, for instance, in implementing a Cancel option for an operation which require an extended time to complete.</li>
</ol>
<p>
In each case, the original blocking call will terminate as soon as possible with the error WSAEINTR. (In (1), the termination will <i>not</i> take place until Windows message scheduling has caused control to revert back to the pseudo blocking routine in Windows Sockets. In (2), the blocking call will be terminated as soon as the blocking hook function completes.)</p>
<p>
In the case of a blocking <b>WSPConnect</b> operation, Windows Sockets will terminate the blocking call as soon as possible, but it cannot be possible for the socket resources to be released until the connection has completed (and then been reset) or timed out. This is likely to be noticeable only if the Windows Sockets SPI client immediately tries to open a new socket (if no sockets are available), or to <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a> to the same peer.</p>
<p>
Canceling an <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a> or a <a href="wsspiref_2q2a.htm"><b>WSPSelect</b></a> call does not adversely impact the sockets passed to these calls. Only the particular call fails; any operation that was legal before the cancel is legal after the cancel, and the state of the socket is not affected in any way.</p>
<p>
Canceling any operation other than <b>WSPAccept</b> and <b>WSPSelect</b> can leave the socket in an indeterminate state. If a Windows Sockets SPI client cancels a blocking operation on a socket, the only operation that the Windows Sockets SPI client can depend on being able to perform on the socket is a call to <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a>, although other operations can work on some Windows Sockets service providers. If a Windows Sockets SPI client requires maximum portability, it must be careful not to depend on performing operations after a cancel. A Windows Sockets SPI client can reset the connection by setting the time-out on SO_LINGER to zero and calling <b>WSPCloseSocket</b>.</p>
<p>
If a cancel operation compromised the integrity of a SOCK_STREAM's data stream in any way, the Windows Sockets provider will reset the connection and fail all future operations other than <b>WSPCloseSocket</b> with WSAECONNABORTED.</p>
<h4>Return Values</h4>
<p>
The value returned by <b>WSPCancelBlockingCall</b> is zero if the operation was successfully canceled. Otherwise, the value SOCKET_ERROR is returned, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Comments</h4>
<p>
Note it is acceptable for <b>WSPCancelBlockingCall</b> to return successfully if the blocking network operation completes prior to being canceled. In this case, the blocking operation will return successfully as if <b>WSPCancelBlockingCall</b> had never been called. The only way for the Windows Sockets SPI client to know with certainty that an operation was actually canceled is to check for a return code of WSAEINTR from the blocking call.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINVAL</td>
<td width=63%>Indicates that there is no outstanding blocking call.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<p>&nbsp;</p></body>
</HTML>

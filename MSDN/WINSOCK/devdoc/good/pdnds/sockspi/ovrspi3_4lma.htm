<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Blocking I/O</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_blocking_i_o_2"></a>Blocking I/O</h3>
<p>
The simplest form of I/O in Windows Sockets 2 is blocking I/O. As mentioned in section <a href="ovrspi3_60ky.htm">Socket Attribute Flags and Modes</a>, sockets are created in blocking mode by default. Any I/O operation with a blocking socket will not return until the operation has been fully completed. Thus, any thread can only execute one I/O operation at a time. For example, if a thread issues a receive operation and no data is currently available, the thread will block until data becomes available and is placed into the thread's buffer. Although this is simple, it is not necessarily the most efficient way to do I/O in all versions of Windows. In Win16 environments for example, blocking is strongly discouraged due to the non-preemptive nature of the operating system (see section <a href="ovrspi3_7sdu.htm">Pseudo vs. True Blocking</a> for more information).</p>
<p>&nbsp;</p></body>
</HTML>

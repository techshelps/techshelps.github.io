<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NSPLookupServiceBegin</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_nsplookupservicebegin_2"></a>NSPLookupServiceBegin</h1>
<p>
The <b>WSALookupServiceBegin</b> function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure.</p>
<p>
<b>WSALookupServiceBegin</b> only returns a handle, which should be used by subsequent calls to <b>WSALookupServiceNext</b> to get the actual results. Since this operation can not be canceled, it should be implemented to execute quickly. While it is acceptable to initiate a network query, this function should not require a response in order to return successfully.</p>
<pre><code><b>int NSPLookupServiceBegin (
  LPGUID</b><i> lpProviderId</i><b>,</b>                         
<b>  LPWSAQUERYSETW</b><i> lpqsRestrictions</i><b>,</b>             
<b>  LPWSASERVICECLASSINFOW</b><i> lpServiceClassInfo</i><b>,</b>   
<b>  DWORD</b><i> dwControlFlags</i><b>,</b>                        
<b>  LPHANDLE</b><i> lphLookup</i>                           
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpProviderId </i></dt>
<dd>
[in] Contains the specific provider ID that should be used for the query.</dd>
<dt>
<i>lpqsRestrictions </i></dt>
<dd>
[in] Contains the search criteria. See below for more information.</dd>
<dt>
<i>lpServiceClassInfo</i></dt>
<dd>
[in] A <b>WSASERVICECLASSINFOW </b>structure which contains all of the schema information for the service.</dd>
<dt>
<i>dwControlFlags</i></dt>
<dd>
[in] Controls the depth of the search:
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=47%>LUP_DEEP</td>
<td width=53%>Query deep as opposed to just the first level.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_CONTAINERS</td>
<td width=53%>Return containers only</td>
</tr>
<tr valign=top>
<td width=47%>LUP_NOCONTAINERS</td>
<td width=53%>Do not return any containers</td>
</tr>
<tr valign=top>
<td width=47%>LUP_FLUSHCACHE</td>
<td width=53%>If the provider has been caching information, ignore the cache and go query the name space itself.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_FLUSHPREVIOUS</td>
<td width=53%>Used as a value for the <i>dwControlFlags </i>argument in <a href="wsspiref_8x9u.htm"><b>NSPLookupServiceNext</b></a>. Setting this flag instructs the provider to discard the last result set, which was too large for the supplied buffer, and move on to the next result set.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_NEAREST</td>
<td width=53%>If possible, return results in the order of distance. The measure of distance is provider specific.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_RES_RESERVICE</td>
<td width=53%>This indicates whether prime response is in the remote or local part of <a href="../sock2/strucetc_4zua.htm"><b>CSADDR_INFO</b></a> structure. The other part needs to ber"usable" in either case.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_ALIASES</td>
<td width=53%>Any available alias information is to be returned in successive calls to <a href="wsspiref_8x9u.htm"><b>NSPLookupServiceNext</b></a>, and each alias returned will have the RESULT_IS_ALIAS flag set.</td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_NAME</td>
<td width=53%>Retrieve the name as <i>lpszServiceInstanceName.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_TYPE</td>
<td width=53%>Retrieve the type as <i>lpServiceClassId.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_WSAVERSION</td>
<td width=53%>Retrieve the version as <i>lpVersion.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_COMMENT</td>
<td width=53%>Retrieve the comment as <i>lpszComment.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_ADDR</td>
<td width=53%>Retrieve the addresses as <i>lpcsaBuffer.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_BLOB</td>
<td width=53%>Retrieve the private data as <i>lpBlob.</i></td>
</tr>
<tr valign=top>
<td width=47%>LUP_RETURN_ALL</td>
<td width=53%>Retrieve all of the information.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lphLookup</i></dt>
<dd>
[out] Handle to be used in subsequent calls to <b>NSPLookupServiceNext</b> in order to retrieve the results set.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If LUP_CONTAINERS is specified in a call, all other restriction values should be avoided. If any are supplied, it is up to the name service provider to decide if it can support this restriction over the containers. If it cannot, it should return an error.</p>
<p>
Some name service providers may have other means of finding containers. For example, containers can all be of some well-known type, or of a set of well-known types, and therefore a query restriction could be created for finding them. No matter what other means the name service provider has for locating containers, LUP_CONTAINERS and LUP_NOCONTAINERS take precedence. Hence, if a query restriction is given that includes containers, specifying LUP_NOCONTAINERS will prevent the container items from being returned. Similarly, no matter the query restriction, if LUP_CONTAINERS is given, only containers should be returned. If a name space does not support containers, and LUP_CONTAINERS is specified, it should simply return WSANO_DATA.</p>
<p>
The preferred method of obtaining the containers within another container, is the call:</p>
<pre><code>dwStatus = NSPLookupServiceBegin(
    lpqsRestrictions,
    LUP_CONTAINERS,
    lphLookup);
 </code></pre>
<p>
followed by the requisite number of <b>NSPLookupServiceNext</b> calls. This will return all containers contained immediately within the starting context; that is, it is not a deep query. With this, one can map the address space structure by walking the hierarchy, perhaps enumerating the content of selected containers. Subsequent uses of <b>NSPLookupServiceBegin</b> use the containers returned from a previous call.</p>
<h4>Forming Queries</h4>
<p>
As mentioned above, a WSAQUERYSET structure is used as an input parameter to <b>NSPLookupServiceBegin</b> in order to qualify the query. The following table indicates how the WSAQUERYSET is used to construct a query. When a field is marked as <i>(Optional) </i>a NULL pointer can be supplied, indicating that the field will <i>not</i> be used as a search criteria. See section <a href="../sock2/ovrvw4_0yya.htm#_win32_query_related_data_structures_2">Query-Related Data Structures</a> for additional information.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>WSAQUERYSET Field Name</th>
<th align=left width=56%>Query Interpretation</th>
</tr>
<tr valign=top>
<td width=44%><i>dwSize</i></td>
<td width=56%>Will be set to sizeof(WSAQUERYSET). This is a versioning mechanism.</td>
</tr>
<tr valign=top>
<td width=44%><i>dwOuputFlags</i></td>
<td width=56%>Ignored for queries.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpszServiceInstanceName</i></td>
<td width=56%><i>(Optional) </i>Referenced string contains service name. The semantics for wildcarding within the string are not defined, but can be supported by certain name space providers.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpServiceClassId</i></td>
<td width=56%>(<i>Required) </i>The GUID corresponding to the service class.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpVersion</i></td>
<td width=56%><i>(Optional)</i> References desired version number and provides version comparison semantics (that is, version must match exactly, or version must be not less than the value supplied).</td>
</tr>
<tr valign=top>
<td width=44%><i>lpszComment</i></td>
<td width=56%>Ignored for queries.</td>
</tr>
<tr valign=top>
<td width=44%><i>dwNameSpace</i></td>
<td width=56%>Identifier of a single name space in which to constrain the search, or NS_ALL to include all name spaces.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpNSProviderId</i></td>
<td width=56%><i>(Optional) </i>References the GUID of a specific name space provider, and limits the query to this provider only.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpszContext</i></td>
<td width=56%><i>(Optional) </i>Specifies the starting point of the query in a hierarchical name space.</td>
</tr>
<tr valign=top>
<td width=44%><i>dwNumberOfProtocols</i></td>
<td width=56%>Size of the protocol constraint array, can be zero.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpafpProtocols</i></td>
<td width=56%><i>(Optional) </i>References an array of AFPROTOCOLS structure. Only services that utilize these protocols will be returned. It is legal for the value AF_UNSPEC to appear as a protocol family value, signifying a wild card. Name space providers may supply information on any service that uses the corresponding protocol, regardless of address family.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpszQueryString</i></td>
<td width=56%><i>(Optional) </i>Some namespaces (such as whois++) support enriched SQL like queries which are contained in a simple text string. This parameter is used to specify that string.</td>
</tr>
<tr valign=top>
<td width=44%><i>dwNumberOfCsAddrs</i></td>
<td width=56%>Ignored for queries.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpcsaBuffer</i></td>
<td width=56%>Ignored for queries.</td>
</tr>
<tr valign=top>
<td width=44%><i>lpBlob</i></td>
<td width=56%><i>(Optional) </i>This is a pointer to a provider-specific entity.</td>
</tr>
</table><br>
<h4>Return Values</h4>
<p>
The function should return NO_ERROR (zero) if the routine succeeds. It should return SOCKET_ERROR (-1) if the routine fails and it must set the appropriate error code using <b>SetLastError</b>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>WSAEINVAL</td>
<td width=52%>One or more parameters were invalid for this provider or missing.</td>
</tr>
<tr valign=top>
<td width=48%>WSANO_DATA</td>
<td width=52%>The name was found in the database but it does not have the correct associated data being resolved for.</td>
</tr>
<tr valign=top>
<td width=48%>WSASERVICE_NOT_FOUND</td>
<td width=52%>No such service is known. The service cannot be found in the specified name space.</td>
</tr>
<tr valign=top>
<td width=48%>WSA_NOT_ENOUGH_MEMORY </td>
<td width=52%>Not enough free memory available to perform this operation.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<p>&nbsp;</p></body>
</HTML>

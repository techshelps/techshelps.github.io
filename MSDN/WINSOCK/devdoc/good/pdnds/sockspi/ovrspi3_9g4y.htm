<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Handles to a Single Socket</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_multiple_handles_to_a_single_socket_2"></a>Multiple Handles to a Single Socket</h3>
<p>
Since what is duplicated are the socket descriptors and not the underlying socket, all of the state associated with a socket is held in common across all the descriptors. For example a <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a> operation performed using one descriptor is subsequently visible using a <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a> from any or all descriptors. </p>
<p>
Notification on shared sockets is subject to the usual constraints of <a href="wsspiref_74du.htm"><b>WSPAsyncSelect</b></a> and <a href="wsspiref_3p0y.htm"><b>WSPEventSelect</b></a>. Issuing either of these calls using any of the shared descriptors cancels any previous event registration for the socket, regardless of which descriptor was used to make that registration. Thus, for example, it would not be possible to have process A receive FD_READ events and process B receive FD_WRITE events. For situations when such tight coordination is required, it is suggested that developers consider using threads instead of separate processes. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Descriptor Allocation</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_descriptor_allocation_2"></a>Descriptor Allocation</h3>
<p>
While Windows Sockets service providers are encouraged to implement sockets as installable file system (IFS) objects, the Windows Sockets architecture also accommodates service providers whose socket handles are not IFS objects. Providers with IFS handles indicate this via the XP1_IFS_HANDLES attribute bit in the WSAPROTOCOL_INFOW struct. (Note: the XP1_IFS_HANDLES attribute bit was not included in release 2.0.8 of the API specification, but has since been added via the errata mechanism.) Windows Sockets SPI clients may take advantage of providers whose socket descriptors are IFS handles by using these descriptors with standard Win32 I/O facilities such as <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_readfile">
</object><a href=JavaScript:alink_1.Click()><b>ReadFile</b></a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_writefile">
</object><a href=JavaScript:alink_2.Click()><b>WriteFile</b></a>. </p>
<p>
Whenever an IFS provider creates a new socket descriptor, it is <b>mandatory</b> that the provider call <a href="wsspiref_30mq.htm"><b>WPUModifyIFSHandle</b></a> prior to supplying the new handle to a Windows Sockets SPI client. This function takes a provider ID and a proposed IFS handle from the provider as input and returns a (possibly) modified handle. The IFS provider must supply only the modified handle to its client, and all requests from the client will reference only this modified handle. The modified handle is guaranteed to be indistinguishable from the proposed handle as far as the operating system is concerned. Thus in most instances, the service provider will simply choose to use only the modified handle in all of its internal processing. The purpose of this modification function is to allow the WS2_32.DLL to greatly streamline the process of identifying the service provider associated with a given socket. </p>
<p>
Providers that do not return IFS handles <b>must</b> obtain a valid handle from the WS2_32.DLLvia the <a href="wsspiref_8m0i.htm"><b>WPUCreateSocketHandle</b></a> call. The non-IFS provider must offer only a WinSock 2 DLL-supplied handle to its client, and all requests from the client will reference only these handles. As a convenience to service provider implementors, one of the input parameters supplied by a provider in <b>WPUCreateSocketHandle</b> is a DWORD context value. The WS2_32.DLLassociates this context value with the allocated socket handle and allows a service provider to retrieve the context value at any time via the <a href="wsspiref_66wi.htm"><b>WPUQuerySocketHandleContext</b></a> call. A typical use for this context value would be to store a pointer to a service provider maintained data structure used to store socket state information. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Socket Options and IOCTLs</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_socket_options_and_ioctls_2"></a>Socket Options and IOCTLs</h2>
<p>
The socket options for Winsock 2 are summarized in the following table. More detailed information is provided in section 4 under <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a> and/or <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a>. There are other new protocol-specific socket options which can be found in the protocol-specific annex. </p>
<p>
A Windows Sockets service provider must recognize all of these options, and (for <b>WSPGetSockOpt</b>) return plausible values for each. The default value for each option is shown in the following table.</p>
<table cellspacing=4 cols=5>
<tr valign=top>
<th align=left width=23%>Value</th>
<th align=left width=22%>Type</th>
<th align=left width=24%>Meaning</th>
<th align=left width=19%>Default</th>
<th align=left width=12%>Note</th>
</tr>
<tr valign=top>
<td width=23%>SO_ACCEPTCONN</td>
<td width=22%>BOOL</td>
<td width=24%>Socket is <b>WSPListen</b>ing.</td>
<td width=19%>FALSE unless a <b>WSPListen</b> has been performed</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_BROADCAST</td>
<td width=22%>BOOL</td>
<td width=24%>Socket is configured for the transmission of broadcast messages.</td>
<td width=19%>FALSE</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_DEBUG</td>
<td width=22%>BOOL</td>
<td width=24%>Debugging is enabled. </td>
<td width=19%>FALSE</td>
<td width=12%>(i)</td>
</tr>
<tr valign=top>
<td width=23%>SO_DONTLINGER</td>
<td width=22%>BOOL</td>
<td width=24%>If true, the SO_LINGER option is disabled.</td>
<td width=19%>TRUE</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_DONTROUTE</td>
<td width=22%>BOOL</td>
<td width=24%>Routing is disabled.</td>
<td width=19%>FALSE</td>
<td width=12%>(i)</td>
</tr>
<tr valign=top>
<td width=23%>SO_ERROR</td>
<td width=22%>int</td>
<td width=24%>Retrieve error status and clear.</td>
<td width=19%>0</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_GROUP_ID</td>
<td width=22%>GROUP</td>
<td width=24%>Reserved for future use with socket groups. The identifier of the group to which this socket belongs.</td>
<td width=19%>NULL</td>
<td width=12%>get only</td>
</tr>
<tr valign=top>
<td width=23%>SO_GROUP<br>
_PRIORITY</td>
<td width=22%>int</td>
<td width=24%>Reserved for future use with socket groups. The relative priority for sockets that are part of a socket group.</td>
<td width=19%>0</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_KEEPALIVE</td>
<td width=22%>BOOL</td>
<td width=24%>Keepalives are being sent.</td>
<td width=19%>FALSE</td>
<td width=12%>(i)</td>
</tr>
<tr valign=top>
<td width=23%>SO_LINGER</td>
<td width=22%>struct linger</td>
<td width=24%>Returns the current linger options.</td>
<td width=19%>l_onoff is 0</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_MAX_MSG<br>
_SIZE</td>
<td width=22%>int</td>
<td width=24%>Maximum outbound size of a message for message socket types. There is no provision to determine the maximum inbound message size. Has no meaning for stream-oriented sockets.</td>
<td width=19%>Implementation dependent</td>
<td width=12%>get only</td>
</tr>
<tr valign=top>
<td width=23%>SO_OOBINLINE</td>
<td width=22%>BOOL</td>
<td width=24%>Out-of-band data is being received in the normal data stream. </td>
<td width=19%>FALSE</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_PROTOCOL<br>
_INFOW</td>
<td width=22%>struct WSAPROTOCOL<br>
_INFOW</td>
<td width=24%>Description of protocol info for protocol that is bound to this socket.</td>
<td width=19%>protocol dependent</td>
<td width=12%>get only</td>
</tr>
<tr valign=top>
<td width=23%>SO_RCVBUF</td>
<td width=22%>int</td>
<td width=24%>Buffer size for receives</td>
<td width=19%>Implementation dependent</td>
<td width=12%>(i)</td>
</tr>
<tr valign=top>
<td width=23%>SO_REUSEADDR</td>
<td width=22%>BOOL</td>
<td width=24%>The address to which this socket is bound can be used by others.</td>
<td width=19%>FALSE</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>SO_SNDBUF</td>
<td width=22%>int</td>
<td width=24%>Total per-socket buffer space reserved for sends. This is unrelated to SO_MAX_MSG<br>
_SIZE or the size of a TCP window.</td>
<td width=19%>Implementation dependent</td>
<td width=12%>(i)</td>
</tr>
<tr valign=top>
<td width=23%>SO_TYPE</td>
<td width=22%>int</td>
<td width=24%>The type of the socket (e.g. SOCK_STREAM).</td>
<td width=19%>As created via socket</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>PVD_CONFIG</td>
<td width=22%>char FAR *</td>
<td width=24%>An opaque data structure object containing configuration information of the service provider.</td>
<td width=19%>Implementation dependent</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td width=23%>TCP_NODELAY</td>
<td width=22%>BOOL</td>
<td width=24%>Disables the Nagle algorithm for send coalescing.</td>
<td width=19%>Implementation dependent</td>
<td width=12%></td>
</tr>
<tr valign=top>
<td colspan=5 width=100%>(i)&nbsp;&nbsp;&nbsp;&nbsp;A service provider may silently ignore this option on <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a> and return a constant value for <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a>, or it may accept a value for <b>WSPSetSockOpt</b> and return the corresponding value in <b>WSPGetSockOpt</b> without using the value in any way.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSPAsyncSelect</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wspasyncselect_2"></a>WSPAsyncSelect</h1>
<p>
The <b>WSPAsyncSelect</b> function requests Windows message-based event notification of network events for a socket.</p>
<pre><code><b>int WSPAsyncSelect (
  SOCKET</b><i> s</i><b>,</b>            
<b>  HWND</b><i> hWnd</i><b>,</b>           
<b>  unsigned int</b><i> wMsg</i><b>,</b>   
<b>  long</b><i> lEvent</i><b>,</b>         
<b>  LPINT</b><i> lpErrno        </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying the socket for which event notification is required.</dd>
<dt>
<i>hWnd</i></dt>
<dd>
[in] A handle identifying the window which should receive a message when a network event occurs.</dd>
<dt>
<i>wMsg</i></dt>
<dd>
[in] The message to be sent when a network event occurs.</dd>
<dt>
<i>lEvent</i></dt>
<dd>
[in] A bitmask which specifies a combination of network events in which the Windows Sockets SPI client is interested.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<p>
This function is used to request that the service provider send a Window message to the client's window <i>hWnd</i> whenever it detects any of the network events specified by the <i>lEvent</i> parameter. The service provider should use the <a href="wsspiref_06wi.htm"><b>WPUPostMessage</b></a> function to post the message. The message to be sent is specified by the <i>wMsg</i> parameter. The socket for which notification is required is identified by <i>s</i>.</p>
<p>
This function automatically sets socket <i>s</i> to nonblocking mode, regardless of the value of <i>lEvent</i>. See <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> about how to set the socket back to blocking mode.</p>
<p>
The <i>lEvent</i> parameter is constructed by or'ing any of the values specified in the following list.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Value</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>FD_READ</td>
<td width=63%>Issue notification of readiness for reading</td>
</tr>
<tr valign=top>
<td width=37%>FD_WRITE</td>
<td width=63%>Issue notification of readiness for writing</td>
</tr>
<tr valign=top>
<td width=37%>FD_OOB</td>
<td width=63%>Issue notification of the arrival of out-of-band data</td>
</tr>
<tr valign=top>
<td width=37%>FD_ACCEPT</td>
<td width=63%>Issue notification of incoming connections</td>
</tr>
<tr valign=top>
<td width=37%>FD_CONNECT</td>
<td width=63%>Issue notification of completed connection</td>
</tr>
<tr valign=top>
<td width=37%>FD_CLOSE</td>
<td width=63%>Issue notification of socket closure</td>
</tr>
<tr valign=top>
<td width=37%>FD_QOS</td>
<td width=63%>Issue notification of socket Quality of Service (QOS) changes</td>
</tr>
<tr valign=top>
<td width=37%>FD_GROUP_QOS</td>
<td width=63%>Reserved for future use with socket groups: Issue notification of socket group Quality of Service (QOS) changes</td>
</tr>
<tr valign=top>
<td width=37%>FD_ROUTING<br>
_INTERFACE_CHANGE</td>
<td width=63%>Issue notification of routing interface change for the specified destination</td>
</tr>
<tr valign=top>
<td width=37%>FD_ADDRESS_LIST<br>
_CHANGE</td>
<td width=63%>Issue notification of local address list change for the socket's protocol family</td>
</tr>
</table><br>
<p>
Invoking <b>WSPAsyncSelect</b> for a socket cancels any previous <b>WSPAsyncSelect</b> or <a href="wsspiref_3p0y.htm"><b>WSPEventSelect</b></a> for the same socket. For example, to receive notification for both reading and writing, the Windows Sockets SPI client must call <a href="#_win32_wspasyncselect_2"><b>WSPAsyncSelect</b></a> with both FD_READ and FD_WRITE, as follows:</p>
<pre><code>rc = WSPAsyncSelect(s, hWnd, wMsg, FD_READ|FD_WRITE, &amp;error);
 </code></pre>
<p>
It is not possible to specify different messages for different events. The following code will <i>not</i> work; the second call will cancel the effects of the first, and only FD_WRITE events will be reported with message wMsg2:</p>
<pre><code>rc = WSPAsyncSelect(s, hWnd, wMsg1, FD_READ, &amp;error);
rc = WSPAsyncSelect(s, hWnd, wMsg2, FD_WRITE, &amp;error);
 </code></pre>
<p>
To cancel all notification (for example, to indicate that the service provider should send no further messages related to network events on the socket) <i>lEvent</i> will be set to zero.</p>
<pre><code>rc = WSPAsyncSelect(s, hWnd, 0, 0, &amp;error);
 </code></pre>
<p>
Since a socket created by <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a> has the same properties as the listening socket used to accept it, any <b>WSPAsyncSelect</b> events set for the listening socket apply to the accepted socket. For example, if a listening socket has <b>WSPAsyncSelect</b> events FD_ACCEPT, FD_READ, and FD_WRITE, then any socket accepted on that listening socket will also have FD_ACCEPT, FD_READ, and FD_WRITE events with the same <i>wMsg</i> value used for messages. If a different <i>wMsg</i> or events are needed, the Windows Sockets SPI client must call <b>WSPAsyncSelect</b>, passing the accepted socket and the new information.</p>
<p>
When one of the nominated network events occurs on the specified socket <i>s</i>, the service provider uses <a href="wsspiref_06wi.htm"><b>WPUPostMessage</b></a> to send message <i>wMsg </i>to the Windows Sockets SPI client's window <i>hWnd</i>. The <i>wParam</i> argument identifies the socket on which a network event has occurred. The low word of <i>lParam</i> specifies the network event that has occurred. The high word of <i>lParam</i> contains any error code. The error code be any error as defined in WS2SPI.H.</p>
<p>
The possible network event codes which can be indicated are as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Value</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>FD_READ</td>
<td width=63%>Socket <i>s</i> ready for reading</td>
</tr>
<tr valign=top>
<td width=37%>FD_WRITE</td>
<td width=63%>Socket <i>s</i> ready for writing</td>
</tr>
<tr valign=top>
<td width=37%>FD_OOB</td>
<td width=63%>Out-of-band data ready for reading on socket <i>s</i></td>
</tr>
<tr valign=top>
<td width=37%>FD_ACCEPT</td>
<td width=63%>Socket <i>s</i> ready for accepting a new incoming connection</td>
</tr>
<tr valign=top>
<td width=37%>FD_CONNECT</td>
<td width=63%>Connection initiated on socket <i>s</i> completed</td>
</tr>
<tr valign=top>
<td width=37%>FD_CLOSE</td>
<td width=63%>Connection identified by socket <i>s</i> has been closed</td>
</tr>
<tr valign=top>
<td width=37%>FD_QOS</td>
<td width=63%>Quality of Service associated with socket <i>s</i> has changed</td>
</tr>
<tr valign=top>
<td width=37%>FD_GROUP_QOS</td>
<td width=63%>Reserved for future use with socket groups: Quality of Service associated with the socket group to which <i>s</i> belongs has changed</td>
</tr>
<tr valign=top>
<td width=37%>FD_ROUTING<br>
_INTERFACE_CHANGE</td>
<td width=63%>Local interface that should be used to send to the specified destination has changed</td>
</tr>
<tr valign=top>
<td width=37%>FD_ADDRESS_LIST<br>
_CHANGE</td>
<td width=63%>The list of addresses of the socket's protocol family to which the Windows Socket SPI client can bind has changed</td>
</tr>
</table><br>
<h4>Return Values</h4>
<p>
The return value is zero if the Windows Sockets SPI client's declaration of interest in the network event set was successful. Otherwise, the value SOCKET_ERROR is returned, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Comments</h4>
<p>
Although <b>WSPAsyncSelect</b> can be called with interest in multiple events, the service provider issues the same Windows message for each event.</p>
<p>
A Windows Sockets 2 provider shall not continually flood a Windows Sockets SPI client with messages for a particular network event. Having successfully posted notification of a particular event to a Windows Sockets SPI client window, no further message(s) for that network event will be posted to the Windows Sockets SPI client window until the Windows Sockets SPI client makes the function call which implicitly re-enables notification of that network event.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Event</th>
<th align=left width=63%>Re-enabling function</th>
</tr>
<tr valign=top>
<td width=37%>FD_READ</td>
<td width=63%><a href="wsspiref_854i.htm"><b>WSPRecv</b></a> or <a href="wsspiref_6lbm.htm"><b>WSPRecvFrom</b></a></td>
</tr>
<tr valign=top>
<td width=37%>FD_WRITE</td>
<td width=63%><a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> or <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a></td>
</tr>
<tr valign=top>
<td width=37%>FD_OOB</td>
<td width=63%><a href="wsspiref_854i.htm"><b>WSPRecv</b></a> or <a href="wsspiref_6lbm.htm"><b>WSPRecvFrom</b></a></td>
</tr>
<tr valign=top>
<td width=37%>FD_ACCEPT</td>
<td width=63%><a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a> unless the error code returned is WSATRY_AGAIN indicating that the condition function returned CF_DEFER</td>
</tr>
<tr valign=top>
<td width=37%>FD_CONNECT</td>
<td width=63%>NONE</td>
</tr>
<tr valign=top>
<td width=37%>FD_CLOSE</td>
<td width=63%>NONE</td>
</tr>
<tr valign=top>
<td width=37%>FD_QOS</td>
<td width=63%><a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> with SIO_GET_QOS</td>
</tr>
<tr valign=top>
<td width=37%>FD_GROUP_QOS</td>
<td width=63%>Reserved for future use with socket groups: <b>WSPIoctl</b> with SIO_GET_GROUP_QOS</td>
</tr>
<tr valign=top>
<td width=37%>FD_ROUTING<br>
_INTERFACE_CHANGE</td>
<td width=63%><b>WSPIoctl</b> with command SIO_ROUTING_INTERFACE_CHANGE</td>
</tr>
<tr valign=top>
<td width=37%>FD_ADDRESS_LIST<br>
_CHANGE</td>
<td width=63%><b>WSPIoctl</b> with command SIO_ADDRESS_LIST_CHANGE</td>
</tr>
</table><br>
<p>
Any call to the re-enabling routine, even one which fails, results in re-enabling of message posting for the relevant event.</p>
<p>
For FD_READ, FD_OOB, and FD_ACCEPT events, message posting is "level-triggered." This means that if the re-enabling routine is called and the relevant condition is still met after the call, a <b>WSPAsyncSelect</b> message is posted to the Windows Sockets SPI client.</p>
<p>
The FD_QOS and FD_GROUP_QOS events are considered edge triggered. A message will be posted exactly once when a QOS change occurs. Further messages will <i>not</i> be forthcoming until either the provider detects a further change in QOS or the Windows Sockets SPI client renegotiates the QOS for the socket.</p>
<p>
The FD_ROUTING_INTERFACE_CHANGE and FD_ADDRESS_LIST_CHANGE events are considered "edge triggered" as well. A message will be posted exactly once when a change occurs after the Windows Socket 2 SPI client has request the notification by issuing <b>WSPIoctl</b> with SIO_ROUTING_INTERFACE_CHANGE or SIO_ADDRESS_LIST_CHANGE correspondingly. Further messages will not be forthcoming until the SPI client reissues the IOCTL <i>and</i> another change is detected since the IOCTL has been issued.</p>
<p>
If any event has already happened when the Windows Sockets SPI client calls <b>WSPAsyncSelect</b> or when the re-enabling function is called, then a message is posted as appropriate. For example, consider the following sequence: 1) a SPI client calls <a href="wsspiref_1n8y.htm"><b>WSPListen</b></a>, 2) a connect request is received but not yet accepted, 3) the Windows Sockets SPI client calls <b>WSPAsyncSelect</b> specifying that it wants to receive FD_ACCEPT messages for the socket. Due to the persistence of events, the Windows Sockets service provider posts an FD_ACCEPT message immediately.</p>
<p>
The FD_WRITE event is handled slightly differently. An FD_WRITE message is posted when a socket is first connected with <b>WSPConnect</b> (after FD_CONNECT, if also registered) or accepted with <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a>, and then after a <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> or <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a> fails with WSAEWOULDBLOCK and buffer space becomes available. Therefore, a Windows Sockets SPI client can assume that sends are possible starting from the first FD_WRITE message and lasting until a send returns WSAEWOULDBLOCK. After such a failure the Windows Sockets SPI client will be notified that sends are again possible with an FD_WRITE message.</p>
<p>
The FD_OOB event is used only when a socket is configured to receive out-of-band data separately. If the socket is configured to receive out-of-band data in-line, the out-of-band (expedited) data is treated as normal data and the Windows Sockets SPI client must register an interest in FD_READ events, not FD_OOB events.</p>
<p>
The error code in an FD_CLOSE message indicates whether the socket close was graceful or abortive. If the error code is zero, then the close was graceful; if the error code is WSAECONNRESET, then the socket's virtual circuit was reset. This only applies to connection-oriented sockets such as SOCK_STREAM.</p>
<p>
The FD_CLOSE message is posted when a close indication is received for the virtual circuit corresponding to the socket. In TCP terms, this means that the FD_CLOSE is posted when the connection goes into the TIME WAIT or CLOSE WAIT states. This results from the remote end performing a <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a> on the send side or a <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a>. FD_CLOSE shall only be posted after all data is read from a socket.</p>
<p>
In the case of a graceful close, the service provider should only send an FD_CLOSE message to indicate virtual circuit closure after all the received data has been read. It should <i>not</i> send an FD_READ message to indicate this condition.</p>
<p>
The FD_QOS or FD_GROUP_QOS message is posted when any field in the flow specification associated with socket <i>s</i> or the socket group that <i>s</i> belongs to has changed, respectively. The service provider must update the QOS information available to the client through <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> with SIO_GET_QOS and/or SIO_GET_GROUP_QOS.</p>
<p>
The FD_ROUTING_INTERFACE_CHANGE message is posted when the local interface that should be used to reach the destination specified in <b>WSPIoctl</b> with SIO_ROUTING_INTERFACE_CHANGE changes AFTER such IOCTL has been issued.</p>
<p>
The FD_ADDRESS_LIST_CHANGE message is posted when the list of addresses to which the Windows Socket 2 SPI client can bind changes AFTER <b>WSPIoctl</b> with SIO_ADDRESS_LIST_CHANGE has been issued.</p>
<p>
Here is a summary of events and conditions for each asynchronous notification message:
<ul>
<li>
<b>FD_READ</b>: <ol>
<li>
when <b>WSPAsyncSelect</b> is called, if there is data currently available to receive, </li>
<li>
when data arrives, if FD_READ not already posted, </li>
<li>
after <a href="wsspiref_854i.htm"><b>WSPRecv</b></a> or <a href="wsspiref_6lbm.htm"><b>WSPRecvfrom</b></a> called (with or without MSG_PEEK), if data is still available to receive.</li>
</ol>
</li>
</ul>
<p>
<b>Note</b>  When <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a> SO_OOBINLINE is enabled, "data" includes both normal data and out-of-band (OOB) data in the instances noted above.</p>
<ul>
<li>
<b>FD_WRITE</b>: <ol>
<li>
when <b>WSPAsyncSelect</b> called, if a <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> or <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a> is possible,</li>
<li>
after <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a> or <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a> called, when connection established,</li>
<li>
after <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> or <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a> fail with WSAEWOULDBLOCK, when <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a> or <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a> are likely to succeed, </li>
<li>
after <b>WSPBind </b>on a datagram socket. FD_WRITE may or may not occur at this time (implementation dependent). In any case, a connectionless socket is always writeable immediately after <a href="wsspiref_2iuq.htm"><b>WSPBind</b></a>.</li>
</ol>
</li>
<li>
<b>FD_OOB</b>: Only valid when <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a> SO_OOBINLINE is disabled (default).<ol>
<li>
when <b>WSPAsyncSelect</b> called, if there is OOB data currently available to receive with the MSG_OOB flag, </li>
<li>
when OOB data arrives, if FD_OOB not already posted, </li>
<li>
after <a href="wsspiref_854i.htm"><b>WSPRecv</b></a> or <a href="wsspiref_6lbm.htm"><b>WSPRecvfrom</b></a> called with <i>or without</i> MSG_OOB flag, if OOB data is still available to receive.</li>
</ol>
</li>
<li>
<b>FD_ACCEPT</b>: <ol>
<li>
when <b>WSPAsyncSelect</b> called, if there is currently a connection request available to accept, </li>
<li>
when a connection request arrives, if FD_ACCEPT not already posted, </li>
<li>
after <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a> called, if there is another connection request available to accept.</li>
</ol>
</li>
<li>
<b>FD_CONNECT</b>: <ol>
<li>
when <b>WSPAsyncSelect</b> called, if there is currently a connection established, </li>
<li>
after <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a> called, when connection is established (even when <b>WSPConnect</b> succeeds immediately, as is typical with a datagram socket, and even when it fails immediately).</li>
<li>
after <a href="../sock2/wsapiref_7dv6.htm"><b>WSAJoinLeaf</b></a> called, when join operation completes.</li>
<li>
after <a href="../sock2/wsapiref_8m7m.htm"><b>connect</b></a>, <a href="../sock2/wsapiref_8kc2.htm">WSAConnect</a>, or <a href="../sock2/wsapiref_7dv6.htm"><b>WSAJoinLeaf</b></a> was called with a nonblocking, connection-oriented socket. The initial operation returned with a specific error of WSAEWOULDBLOCK, but the network operation went ahead. Whether the operation eventually succeeds or not, when the outcome has been determined, FD_CONNECT happens. The client should check the error code to determine whether the outcome was success or failure.</li>
</ol>
</li>
<li>
<b>FD_CLOSE</b>: Only valid on connection-oriented sockets (for example, SOCK_STREAM) <ol>
<li>
when <b>WSPAsyncSelect</b> called, if socket connection has been closed,</li>
<li>
after remote system initiated graceful close, when no data currently available to receive (note: if data has been received and is waiting to be read when the remote system initiates a graceful close, the FD_CLOSE is not delivered until all pending data has been read),</li>
<li>
after local system initiates graceful close with <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a> and remote system has responded with "End of Data" notification (for example, TCP FIN), when no data currently available to receive, </li>
<li>
when remote system terminates connection (for example, sent TCP RST), and <i>lParam</i> will contain WSAECONNRESET error value.<p>
<b>Note</b>  FD_CLOSE is <i>not</i> posted after <b>WSPClosesocket</b> is called.
</li>
</ol>
</li>
<li>
<b>FD_QOS</b> Reserved for future use with socket groups:<ol>
<li>
when <b>WSPAsyncSelect</b> called, if the QOS associated with the socket has been changed, </li>
<li>
after <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> with SIO_GET_QOS called, when the QOS is changed.</li>
</ol>
</li>
<li>
<b>FD_GROUP_QOS</b>: <ol>
<li>
when <b>WSPAsyncSelect</b> called, if the group QOS associated with the socket has been changed, </li>
<li>
after <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> with SIO_GET_GROUP_QOS called, when the group QOS is changed.</li>
</ol>
</li>
<li>
FD_ROUTING_INTERFACE_CHANGE: <ol>
<li>
after <b>WSPIoctl</b> with SIO_ROUTING_INTERFACE_CHANGE called, when the local interface that should be used to reach the destination specified in the IOCTL changes.</li>
</ol>
</li>
<li>
FD_ADDRESS_LIST_CHANGE: <ol>
<li>
after <b>WSPIoctl</b> with SIO_ADDRESS_LIST_CHANGE called, when the list of local addresses to which the Windows Socket 2 SPI client can bind changes.</li>
</ol>
</li>
</ul>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINVAL</td>
<td width=63%>Indicates that one of the specified parameters was invalid such as the window handle not referring to an existing window, or the specified socket is in an invalid state.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINPROGRESS</td>
<td width=63%>A blocking Windows Sockets call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOTSOCK</td>
<td width=63%>The descriptor is not a socket.</td>
</tr>
</table><br>
<p>
Additional error codes can be set when the service provider issues a message to a Windows Sockets SPI client's window. This error code is embedded in the <i>lParam</i> field of the message. Possible error codes for each network event are:</p>
<p>
Event: FD_CONNECT</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Error Code</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>WSAEAFNOSUPPORT</td>
<td width=63%>Addresses in the specified family cannot be used with this socket.</td>
</tr>
<tr valign=top>
<td width=37%>WSAECONNREFUSED</td>
<td width=63%>The attempt to connect was forcefully rejected.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENETUNREACH</td>
<td width=63%>The network cannot be reached from this host at this time.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEFAULT</td>
<td width=63%>The namelen argument is incorrect.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINVAL</td>
<td width=63%>The socket is already bound to an address.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEISCONN</td>
<td width=63%>The socket is already connected.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEMFILE</td>
<td width=63%>No more file descriptors are available.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOBUFS</td>
<td width=63%>No buffer space is available. The socket cannot be connected.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOTCONN</td>
<td width=63%>The socket is not connected.</td>
</tr>
<tr valign=top>
<td width=37%>WSAETIMEDOUT</td>
<td width=63%>Attempt to connect timed out without establishing a connection.</td>
</tr>
</table><br>
<p>
Event: FD_CLOSE</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Error Code</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=37%>WSAECONNRESET</td>
<td width=63%>The connection was reset by the remote side.</td>
</tr>
<tr valign=top>
<td width=37%>WSAECONNABORTED</td>
<td width=63%>The connection was terminated due to a time-out or other failure.</td>
</tr>
</table><br>
<p>
Event: FD_READ</p>
<p>
Event: FD_WRITE</p>
<p>
Event: FD_OOB</p>
<p>
Event: FD_ACCEPT</p>
<p>
Event: FD_QOS</p>
<p>
Event: FD_GROUP_QOS</p>
<p>
Event: FD_ADDRESS_LIST_CHANGE</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Error Code</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
</table><br>
<p>
Event: FD_ROUTING_INTERFACE_CHANGE</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Error Code</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>WSAENETUNREACH</td>
<td width=63%>The specified destination is no longer reachable</td>
</tr>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_2q2a.htm"><b>WSPSelect</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Byte Ordering Assumptions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_byte_ordering_assumptions_2"></a>Byte Ordering Assumptions</h2>
<p>
A service provider should treat all sockaddr components exclusive of the address family field as if they are in the network byte order, and the address family field as in the local machine's byte order. It is the Windows Sockets application's responsibility to make sure that addresses contained in sockaddr structs are properly arranged. The Windows Sockets API provides a number of conversion routines to simplify this task. Currently these routines understand conversion between the local host's natural byte order and either "big-endian" or "little-endian" network byte ordering. Windows Sockets's architecture is such that other byte ordering schemes could be introduced in the future. </p>
<p>&nbsp;</p></body>
</HTML>

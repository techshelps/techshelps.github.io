<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upcalls exposed by Windows Sockets 2 DLL</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_upcalls_exposed_by_windows_sockets_2_dll_2"></a>Upcalls exposed by Windows Sockets 2 DLL</h3>
<p>
This section lists the "upcalls" that service providers may make into the Windows Sockets client. Service providers receive an upcall dispatch table as a parameter to WSPStartup(), and use entries in this table to make the upcalls. Therefore, a client does not need to export its "WPU" functions.</p>
<p>
It is not mandatory that providers utilize all of these upcalls. The following table indicates which upcalls must be used and which are optional.</p>
<p>
This section describes the "upcalls" that service providers may make into the Windows Sockets client. Service providers receive an upcall dispatch table as a parameter to WSPStartup(), and use entries in this table to make the upcalls. Therefore, a client does not need to export its "WPU" functions.</p>
<p>
It is not mandatory that providers utilize all of these upcalls. The following table indicates which upcalls must be used and which are optional.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<td width=39%><a href="wsspiref_4582.htm"><b>WPUCloseEvent</b></a></td>
<td width=22%>Close an open event object handle</td>
<td width=16%>Optional.</td>
<td width=23%>The provider may use an appropriate OS call instead.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_2z5e.htm"><b>WPUCloseSocketHandle</b></a></td>
<td width=22%>Close a socket handle allocated by the Windows Sockets DLL</td>
<td width=16%>Required.</td>
<td width=23%>The WS2_32.DLLneeds to query and/or modify internal state information associated with the socket handle.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_1dgy.htm"><b>WPUCloseThread</b></a></td>
<td width=22%>Close a thread Id for an internal service thread</td>
<td width=16%></td>
<td width=23%></td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_32ia.htm"><b>WPUCompleteOverlappedRequest</b></a></td>
<td width=22%>Deliver overlapped I/O completion notification where the completion mechanism is something other than user mode APC</td>
<td width=16%></td>
<td width=23%></td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_0gz6.htm"><b>WPUCreateEvent</b></a></td>
<td width=22%>Create a new event object</td>
<td width=16%>Optional</td>
<td width=23%>The provider may use an appropriate OS call instead.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_8m0i.htm"><b>WPUCreateSocketHandle</b></a></td>
<td width=22%>Create a new socket handle for non-IFS providers</td>
<td width=16%>Required for non-IFS providers.</td>
<td width=23%>The WS2_32.DLLneeds to query and/or modify internal state information associated with the socket handle.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_1ywi.htm"><b>WPUFDIsSet</b></a></td>
<td width=22%>Check the membership of the specified socket handle</td>
<td width=16%>Optional.</td>
<td width=23%>This is just a convenience function that knows how to dig through fd set structures. A provider may need to dig through these structures explicitly anyway. </td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_7b76.htm"><b>WPUGetProviderPath</b></a></td>
<td width=22%>Retrieve the DLL path for the specified provider</td>
<td width=16%>Required.</td>
<td width=23%>Only the WS2_32.DLLwould know where an adjacent protocol layer (potentially from another vendor) has been installed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_30mq.htm"><b>WPUModifyIFSHandle</b></a></td>
<td width=22%>Receive a (possibly) modified IFS handle from the Windows Sockets DLL</td>
<td width=16%>Required for IFS providers.</td>
<td width=23%> The WS2_32.DLLneeds to query and/or modify internal state information associated with the socket handle.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_06wi.htm"><b>WPUPostMessage</b></a></td>
<td width=22%>Performs the standard PostMessage function in a way that maintains backward compatibility</td>
<td width=16%>Required</td>
<td width=23%>NT only. Win95 allows post message from kernel mode.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_25iq.htm"><b>WPUQueryBlockingCallback</b></a></td>
<td width=22%>Return a pointer to a thread's blocking hook function</td>
<td width=16%>Required</td>
<td width=23%>There is no corresponding OS functionality. Only the WS2_32.DLLhas the information to accomplish this.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_66wi.htm"><b>WPUQuerySocketHandleContext</b></a></td>
<td width=22%>Get a socket's context value (non-IFS providers only)</td>
<td width=16%>Required for non-IFS providers.</td>
<td width=23%>The WS2_32.DLLneeds to query and/or modify internal state information associated with the socket handle.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_0wvm.htm"><b>WPUQueueApc</b></a></td>
<td width=22%>Queue a user-mode APC to the specified thread</td>
<td width=16%>Optional. </td>
<td width=23%>Win 32's QueueUserApc() may also be used.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_0v76.htm"><b>WPUResetEvent</b></a></td>
<td width=22%>Reset an event object</td>
<td width=16%>Optional. </td>
<td width=23%>The provider may use an appropriate OS call instead.</td>
</tr>
<tr valign=top>
<td width=39%><a href="wsspiref_7roy.htm"><b>WPUSetEvent</b></a></td>
<td width=22%>Set an event object</td>
<td width=16%>Optional.</td>
<td width=23%>The provider may use an appropriate OS call instead.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

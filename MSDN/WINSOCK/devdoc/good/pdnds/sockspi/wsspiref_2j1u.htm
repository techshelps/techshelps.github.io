<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSPAccept</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wspaccept_2"></a>WSPAccept</h1>
<p>
The <b>WSPAccept</b> function conditionally accepts a connection based on the return value of a condition function, and optionally creates or joins a socket group.</p>
<pre><code><b>SOCKET WSPAccept (
  SOCKET</b><i> s</i><b>,                    </b>
<b>  struct sockaddr FAR *</b><i> addr</i><b>,  </b>
<b>  LPINT</b><i> addrlen</i><b>,</b>               
<b>  LPCONDITIONPROC</b><i> lpfnCondition</i><b>,  </b>
<b>  DWORD</b><i> dwCallbackData</i><b>,</b>        
<b>  LPINT</b><i> lpErrno                </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a socket that is listening for connections after a <a href="wsspiref_1n8y.htm"><b>WSPListen</b></a>.</dd>
<dt>
<i>addr</i></dt>
<dd>
[out] An optional pointer to a buffer that receives the address of the connecting entity, as known to the service provider. The exact format of the <i>addr</i> argument is determined by the address family established when the socket was created.</dd>
<dt>
<i>addrlen</i></dt>
<dd>
[in/out] An optional pointer to an integer that contains the length of the <i>addr </i>parameter.</dd>
<dt>
<i>lpfnCondition</i></dt>
<dd>
[in] The procedure instance address of an optional condition function furnished by the Windows Sockets application. This function is used in the accept or reject decision based on the caller information passed in as parameters. Optionally, it is used to create or join a socket group by assigning an appropriate value to the result parameter, <i>g</i>, of this function.</dd>
<dt>
<i>dwCallbackData</i></dt>
<dd>
[in] Callback data to be passed back to the Windows Socket 2 client as the value of the <i>dwCallbackData</i> parameter of the condition function. This parameter is not interpreted by the service provider.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSPAccept</b> function extracts the first connection on the queue of pending connections on socket <i>s</i>, and checks it against the condition function, provided the condition function is specified (that is, not NULL). The condition function must be executed in the same thread as this routine. If the condition function returns CF_ACCEPT, <b>WSPAccept</b> creates a new socket and performs any socket grouping as indicated by the result parameter, <i>g,</i> in the condition function. Newly created sockets have the same properties as the socket <i>s,</i> including network events registered with <a href="wsspiref_74du.htm"><b>WSPAsyncSelect</b></a> or with <a href="wsspiref_3p0y.htm"><b>WSPEventSelect</b></a>, but not including the listening socket's group ID, if any. As is described <a href="ovrspi3_46eq.htm">Descriptor Allocation</a>, when new socket descriptors are allocated IFS providers must call <a href="wsspiref_30mq.htm"><b>WPUModifyIFSHandle</b></a> and non-IFS providers must call <a href="wsspiref_8m0i.htm"><b>WPUCreateSocketHandle</b></a>.</p>
<p>
If the condition function returns CF_REJECT, <b>WSPAccept</b> rejects the connection request. If the application's accept/reject decision cannot be made immediately, the condition function will return CF_DEFER to indicate that no decision has been made. No action about this connection request is to be taken by the service provider. When the application is ready to take action on the connection request, it will invoke <b>WSPAccept</b> again and return either CF_ACCEPT or CF_REJECT as a return value from the condition function.</p>
<p>
For sockets that are in the (default) blocking mode, if no pending connections are present on the queue, <b>WSPAccept</b> blocks the caller until a connection is present. For sockets in a nonblocking mode, if this function is called when no pending connections are present on the queue, <b>WSPAccept</b> returns the error code WSAEWOULDBLOCK as described below. The accepted socket cannot be used to accept more connections. The original socket remains open.</p>
<p>
The argument <i>addr</i> is a result parameter that is filled with the address of the connecting entity, as known to the service provider. The exact format of the <i>addr</i> parameter is determined by the address family in which the communication is occurring. The <i>addrlen</i> is a value-result parameter; it will initially contain the amount of space pointed to by <i>addr</i>. On return, it must contain the actual length (in bytes) of the address returned by the service provider. This call is used with connection-oriented socket types such as SOCK_STREAM. If <i>addr</i> and/or <i>addrlen</i> are equal to NULL, then no information about the remote address of the accepted socket is returned. Otherwise, these two parameters shall be filled in regardless of whether the condition function is specified or what it returns.</p>
<p>
The prototype of the condition function is as follows:</p>
<pre><code><b>int CALLBACK 
</b>ConditionFunc (
 IN       LPWSABUF <i>lpCallerId</i>, 
 IN       LPWSABUF <i>lpCallerData</i>, 
 IN OUT   LPQOS <i>lpSQOS</i>, 
 IN OUT   LPQOS <i>lpGQOS</i>,
 IN       LPWSABUF <i>lpCalleeId</i>, 
 IN       LPWSABUF <i>lpCalleeData</i>, 
 OUT      GROUP FAR * <i>g</i>, 
 IN       DWORD <i>dwCallbackData</i> 
);
 </code></pre>
<p>
The <i>lpCallerId</i> and <i>lpCallerData</i> are value parameters that must contain the address of the connecting entity and any user data that was sent along with the connection request. If no caller ID or caller data is available, the corresponding parameter will be NULL. Many network protocols do not support connect-time caller data. Most conventional network protocols can be expected to support caller ID information at connection-request time. The <i>buf</i> part of the WSABUF pointed to by <i>lpCallerId</i> points to a SOCKADDR. The SOCKADDR is interpreted according to its address family (typically by casting the SOCKADDR to some type specific to the address family).</p>
<p>
The <i>lpSQOS</i> parameter references the flow specifications for socket <i>s</i> specified by the caller, one for each direction, followed by any additional provider-specific parameters. The sending or receiving flow specification values will be ignored as appropriate for any unidirectional sockets. A NULL value for <i>lpSQOS</i> indicates that there is no caller supplied QOS and that no negotiation is possible. A non-NULL lpSQOS pointer indicates that a QOS negotiation is to occur or that the provider is prepared to accept the QOS request without negotiation.</p>
<p>
Reserved for future use with socket groups: The <i>lpGQOS</i> parameter references the flow specifications for the socket group the caller is to create, one for each direction, followed by any additional provider-specific parameters. A NULL value for <i>lpGQOS</i> indicates no caller-supplied group QOS. QOS information can be returned if a QOS negotiation is to occur.</p>
<p>
The <i>lpCalleeId</i> is a value parameter which contains the local address of the connected entity. The <i>buf</i> part of the WSABUF pointed to by <i>lpCalleeId</i> points to a SOCKADDR. The SOCKADDR is interpreted according to its address family (typically by casting the SOCKADDR to some type specific to the address family).</p>
<p>
The <i>lpCalleeData</i> is a result parameter used by the condition function to supply user data back to the connecting entity. The storage for this data must be provided by the service provider. <i>lpCalleeData-&gt;len</i> initially contains the length of the buffer allocated by the service provider and pointed to by <i>lpCalleeData-&gt;buf</i>. A value of zero means passing user data back to the caller is not supported. The condition function will copy up to <i>lpCalleeData-&gt;len</i> bytes of data into <i>lpCalleeData-&gt;buf</i>, and then update <i>lpCalleeData-&gt;len</i> to indicate the actual number of bytes transferred. If no user data is to be passed back to the caller, the condition function will set <i>lpCalleeData-&gt;len</i> to zero. The format of all address and user data is specific to the address family to which the socket belongs.</p>
<p>
Reserved for future use with socket groups: The result parameter<i> g</i> is assigned within the condition function to indicate the following actions:</p>
<p>
if &amp;<i>g</i> is an existing socket group ID, add <i>s</i> to this group, provided all the requirements set by this group are met; or</p>
<p>
if &amp;<i>g</i> = SG_UNCONSTRAINED_GROUP, create an unconstrained socket group and have <i>s</i> as the first member; or</p>
<p>
if &amp;<i>g</i> = SG_CONSTRAINED_GROUP, create a constrained socket group and have <i>s</i> as the first member; or</p>
<p>
if &amp;<i>g</i> = zero, no group operation is performed.</p>
<p>
Any set of sockets grouped together must be implemented by a single service provider. For unconstrained groups, any set of sockets can be grouped together. A constrained socket group can consist only of connection-oriented sockets, and requires that connections on all grouped sockets be to the same address on the same host. For newly created socket groups, the new group ID must be available for the Windows Sockets SPI client to retrieve by calling <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a> with option SO_GROUP_ID. A socket group and its associated ID remain valid until the last socket belonging to this socket group is closed. Socket group IDs are unique across all processes for a given service provider.</p>
<p>
The <i>dwCallbackData</i> parameter value passed to the condition function is the value passed as the <i>dwCallbackData</i> parameter in the original <b>WSPAccept</b> call. This value is interpreted only by the Windows Sockets 2 client. This allows a client to pass some context information from the <b>WSPAccept</b> call site through to the condition function, which provides the condition function with any additional information required to determine whether to accept the connection or not. A typical usage is to pass a (suitably cast) pointer to a data structure containing references to application-defined objects with which this socket is associated.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSPAccept</b> returns a value of type SOCKET that is a descriptor for the accepted socket. Otherwise, a value of INVALID_SOCKET is returned, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=37%>WSAECONNREFUSED</td>
<td width=63%>The connection request was forcefully rejected as indicated in the return value of the condition function (CF_REJECT).</td>
</tr>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEFAULT</td>
<td width=63%>The <i>addrlen </i>argument is too small or the <i>lpfnCondition</i> is not part of the user address space.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINTR</td>
<td width=63%>The (blocking) call was canceled through <a href="wsspiref_1njm.htm"><b>WSPCancelBlockingCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINPROGRESS</td>
<td width=63%>A blocking Windows Sockets call is in progress.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINVAL</td>
<td width=63%><a href="wsspiref_1n8y.htm"><b>WSPListen</b></a> was not invoked prior to <b>WSPAccept</b>, parameter <i>g</i> specified in the condition function is not a valid value, the source address of the incoming connection request is not consistent with that of the constrained group the parameter <i>g</i> is referring to, the return value of the condition function is not a valid one, or any case where the specified socket is in an invalid state.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEMFILE</td>
<td width=63%>The queue is nonempty upon entry to <b>WSPAccept</b> and there are no socket descriptors available.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOBUFS</td>
<td width=63%>No buffer space is available.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOTSOCK</td>
<td width=63%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEOPNOTSUPP</td>
<td width=63%>The referenced socket is not a type that supports connection-oriented service.</td>
</tr>
<tr valign=top>
<td width=37%>WSATRY_AGAIN</td>
<td width=63%>The acceptance of the connection request was deferred as indicated in the return value of the condition function (CF_DEFER).</td>
</tr>
<tr valign=top>
<td width=37%>WSAEWOULDBLOCK</td>
<td width=63%>The socket is marked as nonblocking and no connections are present to be accepted.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEACCES</td>
<td width=63%>The connection request that was offered has timed out or been withdrawn.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="#_win32_wspaccept_2"><b>WSPAccept</b></a>, <a href="wsspiref_2iuq.htm"><b>WSPBind</b></a>, <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a>, <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a>, <a href="wsspiref_1n8y.htm"><b>WSPListen</b></a>, <a href="wsspiref_2q2a.htm"><b>WSPSelect</b></a>, <a href="wsspiref_46ia.htm"><b>WSPSocket</b></a>, <a href="wsspiref_74du.htm"><b>WSPAsyncSelect</b></a>, <a href="wsspiref_3p0y.htm"><b>WSPEventSelect</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

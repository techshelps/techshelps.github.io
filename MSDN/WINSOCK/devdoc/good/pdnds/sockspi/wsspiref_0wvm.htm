<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WPUQueueApc</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wpuqueueapc_2"></a>WPUQueueApc</h1>
<p>
The <b>WPUQueueApc</b> function queues a user-mode asynchronous procedure call (APC) to the specified thread in order to facilitate invocation of overlapped I/O completion routines.</p>
<pre><code><b>int WPUQueueApc (
  LPWSATHREADID</b><i> lpThreadId</i><b>,</b>   
<b>  LPWSAUSERAPC</b><i> lpfnUserApc</i><b>,</b>   
<b>  DWORD</b><i> dwContext</i><b>,</b>            
<b>  LPINT</b><i> lpErrno</i>               
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpThreadId</i></dt>
<dd>
[in] A pointer to a <b>WSATHREADID</b> structure that identifies the thread context. A pointer to this structure is supplied to the service provider by the WS2_32.DLL as in input parameter to an overlapped operationThe provider should store the <b>WSATHREADID</b> structure locally and provide a pointer to this local store. The local copy of <b>WSATHREADID</b> is no longer needed once <b>WPUQueueApc</b> returns.</dd>
<dt>
<i>lpfnUserApc</i></dt>
<dd>
[in] Points to the APC function to be called.</dd>
<dt>
<i>dwContext</i></dt>
<dd>
[in] A 32-bit context value which is subsequently supplied as an input parameter to the APC function.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This function queues an APC function against the specified thread. Under Win32, this will be done using a user mode asynchronous procedure call (APC). The APC will only execute when the specified thread is blocked in an alertable wait. For Win16, a callback will be made directly. In Win16 environments, this call is safe for use within "interrupt context".</p>
<p>
<b>LPWSAUSERAPC</b> is defined as follows:</p>
<pre><code>typedef <b>void</b> ( CALLBACK FAR * <b>LPWSAUSERAPC </b>)( <b>DWORD </b><i>dwContext </i>);
 </code></pre>
<p>
Because the APC mechanism supports only a single 32 bit context value, <i>lpfnUserApc</i> cannot itself be the client-specified completion routine, which involves more parameters. The service provider must instead supply a pointer to its own APC function which uses the supplied <i>dwContext</i> value to access the needed result information for the overlapped operation, and then invokes the client-specified completion routine.</p>
<p>
For service providers where a user-mode component implements overlapped I/O a typical usage of the APC mechanism is as follows. When the I/O operation completes, the provider allocates a small buffer and packs it with a pointer to the client-supplied completion procedure and parameter values to pass to the procedure. It queues an APC, specifying the pointer to the buffer as the <i>dwContext</i> value and its own intermediate procedure as the target procedure <i>lpfnUserApc</i>. When the target thread eventually enters alertable wait state, the service provider's intermediate procedure is called in the proper thread context. The intermediate procedure simply unpacks parameters, deallocates the buffer, and calls the client-supplied completion procedure.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WPUQueueApc</b> returns zero and queues the completion routine for the specified thread. Otherwise, it returns SOCKET_ERROR, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=27%>WSAEFAULT</td>
<td width=73%><i>dwThreadId</i> does not specify a valid thread.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_2dpu.htm"><b>WSPSend</b></a>, <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a>, <a href="wsspiref_854i.htm"><b>WSPRecv</b></a>, <a href="wsspiref_6lbm.htm"><b>WSPRecvFrom</b></a>, <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

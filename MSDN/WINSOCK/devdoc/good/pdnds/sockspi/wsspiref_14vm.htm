<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NSPStartup</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_nspstartup_2"></a>NSPStartup</h1>
<p>
The <b>NSPStartup</b> function retrieves the dynamic information about a provider, such as the list of the DLL entry points.</p>
<p>
This function is called by the client upon initialization. <b>NSPStartup</b> and <a href="wsspiref_0bn6.htm"><b>NSPCleanup</b></a> must be called as pairs. All of the NSP functions must be called from within a <b>NSPStartup/NSPCleanup</b> pair. WSC functions do not need to be called from within a <b>NSPStartup/NSPCleanup</b> pair either.</p>
<pre><code><b>int NSPStartup (
  LPGUID</b><i> lpProviderId</i><b>,</b>          
<b>  LPNSP_ROUTINE</b><i> lpnspRoutines</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpProviderId</i></dt>
<dd>
[in] Indicates the desired provider for which to return the entry points.</dd>
<dt>
<i>lpnspRoutines</i></dt>
<dd>
[out] Pointer to all of the Provider entry points.
</dd>
</dl>
<h4>Data Types</h4>
<p>
The following data types are needed for this call.
<dl>
<dt>
NSP_ROUTINE</dt>
<dd>
The <b>NSP_ROUTINE</b> structure contains information regarding all of the functions implemented by a given provider.
<pre><code>typedef struct _NSP_ROUTINE { 
    DWORD        <i>cbSize;</i>
    DWORD        <i>dwMajorVersion;</i>
    DWORD        <i>dwMinorVersion;</i>
    INT ( *NSPCleanup) ;
    INT ( *NSPLookupServiceBegin) ;
    INT ( *NSPLookupServiceNext) ;
    INT ( *NSPLookupServiceEnd) ;
    INT ( *NSPSetService) ;
    INT ( *NSPInstallServiceClass) ;
    INT ( *NSPRemoveServiceClass) ;
    INT ( *NSPGetServiceClassInfo) ;
} NSP_ROUTINE, *PNSP_ROUTINE, *LPNSP_ROUTINE; 
 </code></pre>
</dd>
<dt>
<i>cbSize</i></dt>
<dd>
Size of this structure.</dd>
<dt>
<i>dwMajorVersion</i></dt>
<dd>
The major version of the service provider specification supported by this provider.</dd>
<dt>
<i>dwMinorVersion</i></dt>
<dd>
The minor version of the service provider specification supported by this provider.</dd>
<dt>
<i>*NSP*.*</i></dt>
<dd>
Pointers to the various NSP functions. Every entry must point to a valid function. If the provider does not implement this function, it should simply return WSAENOTIMPLEMENTED.
<p>
<b>Note</b>  In the header file this structure contains complete prototypes for all of the <b>NSP </b>pointers.

</dd>
</dl>
<h4>Return Values</h4>
<p>
The function should return NO_ERROR (zero) if the routine succeeds. It should return SOCKET_ERROR (-1) if the routine fails and it must set the appropriate error code using <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=49%>WSAEINVAL</td>
<td width=51%>One or more parameters were invalid or missing for this provider.</td>
</tr>
<tr valign=top>
<td width=49%>WSA_NOT_ENOUGH_MEMORY </td>
<td width=51%>Not enough free memory available to perform this operation.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<p>&nbsp;</p></body>
</HTML>

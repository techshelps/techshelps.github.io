<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSPSocket</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wspsocket_2"></a>WSPSocket</h1>
<p>
The <b>WSPSocket</b> function creates a socket, optionally creates and/or joins a socket group.</p>
<pre><code><b>SOCKET WSPSocket (
  int</b><i> af</i><b>,</b>                               
<b>  int</b><i> type</i><b>,</b>                             
<b>  int</b><i> protocol</i><b>,</b>                         
<b>  LPWSAPROTOCOL_INFOW</b><i> lpProtocolInfo</i><b>,</b>   
<b>  GROUP</b><i> g</i><b>,</b>                              
<b>  DWORD</b><i> dwFlags</i><b>,</b>                        
<b>  LPINT</b><i> lpErrno                         </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>af</i></dt>
<dd>
[in] An address family specification.</dd>
<dt>
<i>type</i></dt>
<dd>
[in] A type specification for the new socket.</dd>
<dt>
<i>protocol</i></dt>
<dd>
[in] A particular protocol to be used with the socket which is specific to the indicated address family.</dd>
<dt>
<i>lpProtocolInfo</i></dt>
<dd>
[in] A pointer to a <b>WSAPROTOCOL_INFOW</b> structure that defines the characteristics of the socket to be created.</dd>
<dt>
<i>g</i></dt>
<dd>
[in] Reserved for future use with socket groups: The identifier of the socket group which the new socket is to join.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The socket attribute specification.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>WSPSocket</b> causes a socket descriptor and any related resources to be allocated. By default, the created socket will <i>not</i> have the overlapped attribute. Windows Sockets providers are encouraged to be realized as Windows installable file systems, and supply system file handles as socket descriptors. These providers must call <b>WPUModifyIFSHandle</b> prior to returning from this function. For non-file-system Windows Sockets providers, <b>WPUCreateSocketHandle</b> must be used to acquire a unique socket descriptor from the WS2_32.DLL prior to returning from this function. See section <a href="ovrspi3_46eq.htm"><i>Descriptor Allocation</i></a> for more information.</p>
<p>
The values for <i>af, type </i>and <i>protocol </i>are those supplied by the application in the corresponding API functions <b>socket</b> or <b>WSASocket</b>. A service provider is free to ignore or pay attention to any or all of these values as is appropriate for the particular protocol. However, the provider must be willing to accept the value of zero for <i>af </i>and <i>type</i>, since the WS2_32.DLL considers these to be wild card values. Also the value of manifest constant FROM_PROTOCOL_INFO must be accepted for any of <i>af, type </i>and <i>protocol. </i>This value indicates that the Windows Sockets 2 application needs to use the corresponding values from the indicated <b>WSAPROTOCOL_INFOW</b> structure: (<i>iAddressFamily, iSocketType, iProtocol</i>).</p>
<p>
Reserved for future use with socket groups: Parameter <i>g</i> is used to indicate the appropriate actions on socket groups:</p>
<p>
if <i>g</i> is an existing socket group ID, join the new socket to this group, provided all the requirements set by this group are met; or</p>
<p>
if <i>g</i> = SG_UNCONSTRAINED_GROUP, create an unconstrained socket group and have<i> </i>the new socket be<i> </i>the first member; or</p>
<p>
if <i>g</i> = SG_CONSTRAINED_GROUP, create a constrained socket group and have the new socket be the first member; or</p>
<p>
if <i>g</i> = zero, no group operation is performed</p>
<p>
Any set of sockets grouped together must be implemented by a single service provider. For unconstrained groups, any set of sockets can be grouped together. A constrained socket group can consist only of connection-oriented sockets, and requires that connections on all grouped sockets be to the same address on the same host. For newly created socket groups, the new group ID must be available for the Windows Sockets SPI client to retrieve by calling <b>WSPGetSockOpt</b> with option SO_GROUP_ID. A socket group and its associated ID remain valid until the last socket belonging to this socket group is closed. Socket group IDs are unique across all processes for a given service provider.</p>
<p>
The <i>dwFlags</i> parameter can be used to specify the attributes of the socket by OR-ing any of the following Flags:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Flag</th>
<th align=left width=48%>Meaning</th>
</tr>
<tr valign=top>
<td width=52%>WSA_FLAG_OVERLAPPED</td>
<td width=48%>This flag causes an overlapped socket to be created. Overlapped sockets can utilize <b>WSPSend</b>, <b>WSPSendTo</b>, <b>WSPRecv</b>, <b>WSPRecvFrom</b> and <b>WSPIoctl</b> for overlapped I/O operations, which allows multiple operations to be initiated and in progress simultaneously. All functions that allow overlapped operation also support non-overlapped usage on an overlapped socket if the values for parameters related to overlapped operation are NULL.</td>
</tr>
<tr valign=top>
<td width=52%>WSA_FLAG_MULTIPOINT_C_ROOT</td>
<td width=48%>Indicates that the socket created will be a c_root in a multipoint session. Only allowed if a rooted control plane is indicated in the protocol's <b>WSAPROTOCOL_INFOW</b> structure.</td>
</tr>
<tr valign=top>
<td width=52%>WSA_FLAG_MULTIPOINT_C_LEAF</td>
<td width=48%>Indicates that the socket created will be a c_leaf in a multicast session. Only allowed if XP1_SUPPORT_MULTIPOINT is indicated in the protocol's <b>WSAPROTOCOL_INFOW</b> structure.</td>
</tr>
<tr valign=top>
<td width=52%>WSA_FLAG_MULTIPOINT_D_ROOT</td>
<td width=48%>Indicates that the socket created will be a d_root in a multipoint session. Only allowed if a rooted data plane is indicated in the protocol's <b>WSAPROTOCOL_INFOW</b> structure.</td>
</tr>
<tr valign=top>
<td width=52%>WSA_FLAG_MULTIPOINT_D_LEAF</td>
<td width=48%>Indicates that the socket created will be a d_leaf in a multipoint session. Only allowed if XP1_SUPPORT_MULTIPOINT is indicated in the protocol's <b>WSAPROTOCOL_INFOW </b>structure.</td>
</tr>
</table><br>
<p>
<b>Important</b>  For multipoint sockets, exactly one of WSA_FLAG_MULTIPOINT_C_ROOT or WSA_FLAG_MULTIPOINT_C_LEAF must be specified, and exactly one of WSA_FLAG_MULTIPOINT_D_ROOT or WSA_FLAG_MULTIPOINT_D_LEAF must be specified. Refer to <a href="ovrspi3_8jg2.htm">SPI: Protocol-Independent Multicast and Multipoint</a> for additional information.</p>
<p>
Connection-oriented sockets such as SOCK_STREAM provide full-duplex connections, and must be in a connected state before any data can be sent or received on them. A connection to another socket is created with a <b>WSPConnect</b> call. Once connected, data can be transferred using <b>WSPSend</b> and <b>WSPRecv</b> calls. When a session has been completed, a <b>WSPCloseSocket</b> must be performed.</p>
<p>
The communications protocols used to implement a reliable, connection-oriented socket ensure that data is not lost or duplicated. If data for which the peer protocol has buffer space cannot be successfully transmitted within a reasonable length of time, the connection is considered broken and subsequent calls will fail with the error code set to WSAETIMEDOUT.</p>
<p>
Connectionless, message-oriented sockets allow sending and receiving of datagrams to and from arbitrary peers using <b>WSPSendTo</b> and <b>WSPRecvFrom</b>. If such a socket is <b>WSPConnect</b>ed to a specific peer, datagrams can be sent to that peer using <b>WSPSend</b> and can be received from (only) this peer using <b>WSPRecv</b>.</p>
<p>
Support for sockets with type SOCK RAW is not required but service providers are encouraged to support raw sockets whenever it makes sense to do so.
<dl>
<dt>
<b>Shared Sockets</b></dt>
<dd>
When a special <b>WSAPROTOCOL_INFOW</b> structure (obtained through the <b>WSPDuplicateSocket</b> function and used to create additional descriptors for a shared socket) is passed as an input parameter to <b>WSPSocket</b>, the <i>g</i> and <i>dwFlags </i>parameters are <b>ignored</b>.
</dd>
</dl>
<h4>Layered Service Provider considerations</h4>
<p>
A layered service provider supplies an implementation of this function, but it is also a client of this function if and when it calls <b>WSPSocket</b> of the next layer in the protocol chain. Some special considerations apply to this function's <i>lpProtocolInfo</i> parameter as it is propagated down through the layers of the protocol chain.</p>
<p>
If the next layer in the protocol chain is another layer then when the next layer's <b>WSPSocket</b> is called, this layer must pass to the next layer a <i>lpProtocolInfo</i> that references the same unmodified <b>WSAPROTOCOL_INFOW</b> structure with the same unmodified chain information. However, if the next layer is the base protocol (that is, the last element in the chain), this layer performs a substitution when calling the base provider's <b>WSPSocket</b>. In this case, the base provider's <b>WSAPROTOCOL_INFOW</b> structure should be referenced by the <i>lpProtocolInfo</i> parameter.</p>
<p>
One vital benefit of this policy is that base service providers do not have to be aware of protocol chains.</p>
<p>
This same propagation policy applies when propagating a <b>WSAPROTOCOL_INFOW</b> structure through a layered sequence of other functions such as <b>WSPAddressToString</b>, <b>WSPDuplicateSocket</b>, <b>WSPStartup</b>, or <b>WSPStringToAddress</b>.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSPSocket</b> returns a descriptor referencing the new socket. Otherwise, a value of INVALID_SOCKET is returned, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=43%>WSAENETDOWN</td>
<td width=57%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEAFNOSUPPORT</td>
<td width=57%>The specified address family is not supported.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEINPROGRESS</td>
<td width=57%>A blocking Windows Sockets call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEMFILE</td>
<td width=57%>No more socket descriptors are available.</td>
</tr>
<tr valign=top>
<td width=43%>WSAENOBUFS</td>
<td width=57%>No buffer space is available. The socket cannot be created.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEPROTONOSUPPORT</td>
<td width=57%>The specified protocol is not supported.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEPROTOTYPE</td>
<td width=57%>The specified protocol is the wrong type for this socket.</td>
</tr>
<tr valign=top>
<td width=43%>WSAESOCKTNOSUPPORT</td>
<td width=57%>The specified socket type is not supported in this address family.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEINVAL</td>
<td width=57%>The parameter <i>g</i> specified is not valid.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a>, <a href="wsspiref_2iuq.htm"><b>WSPBind</b></a>, <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a>, <a href="wsspiref_092q.htm"><b>WSPGetSockName</b></a>, <a href="wsspiref_53w2.htm"><b>WSPGetSockOpt</b></a>, <a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a>, <a href="wsspiref_1n8y.htm"><b>WSPListen</b></a>, <a href="wsspiref_854i.htm"><b>WSPRecv</b></a>, <a href="wsspiref_6lbm.htm"><b>WSPRecvFrom</b></a>, <a href="wsspiref_2dpu.htm"><b>WSPSend</b></a>, <a href="wsspiref_68he.htm"><b>WSPSendTo</b></a>, <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a>, <a href="wsspiref_9baq.htm"><b>WSPIoctl</b></a>, <a href="wsspiref_8m0i.htm"><b>WPUCreateSocketHandle</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

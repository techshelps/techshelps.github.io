<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Name Space Service Providers</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_name_space_service_providers_2"></a>Name Space Service Providers</h3>
<p>
A name space provider implements an interface mapping between the Windows Sockets 2 name space SPI and the native programmatic interface of an existing name service such as DNS, X.500, Netware Directory Services (NDS), etc. While a name space provider supports exactly one name space, it is possible for multiple providers for a given name space to be installed. It is also possible for a single DLL to instantiate multiple different name space providers. As name space providers are installed, a catalog of WSANAMESPACE_INFO structures is maintained. An application may use <b>WSAEnumNameSpaceProviders</b> to discover which name spaces are supported on a machine. Refer to <i>Section Name Resolution Service Provider Requirements </i>for detailed information.<i> </i></p>

<h4><a name="_win32_legacy_getxbyy_service_providers_2"></a>Legacy GetXbyY Service Providers</h4>
<p>
Windows Sockets 2 fully supports the TCP/IP-specific name resolution facilities found in Windows Sockets version 1.1. It does this by including the set of GetXbyY functions in the SPI, however the treatment of this set of functions is somewhat different from the rest of the SPI functions. The GetXbyY functions appearing in the SPI are prefaced with GETXBYYSP_, and are summarized as follows:</p>
<p>
<b>Berkeley style functions</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=60%>SPI Function Name</th>
<th align=left width=40%>Description</th>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_gethostbyaddr</b></td>
<td width=40%>Supply a hostent structure for the specified host address</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_gethostbyname</b></td>
<td width=40%>Supply a hostent structure for the specified host name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_getprotobyname</b></td>
<td width=40%>Supply a protoent structure for the specified protocol name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_getprotobynumber</b></td>
<td width=40%>Supply a protoent structure for the specified protocol number</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_getservbyname</b></td>
<td width=40%>Supply a servent structure for the specified service name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_getservbyport</b></td>
<td width=40%>Supply a servent structure for the service at the specified port</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_gethostname</b></td>
<td width=40%>Return the standard host name for the local machine</td>
</tr>
</table><br>
<p>
<b>Async style functions</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=60%>SPI Function Name</th>
<th align=left width=40%>Description</th>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetHostByAddr</b></td>
<td width=40%>Supply a hostent structure for the specified host address</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetHostByName</b></td>
<td width=40%>Supply a hostent structure for the specified host name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetProtoByName</b></td>
<td width=40%>Supply a protoent structure for the specified protocol name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetProtoByNumber</b></td>
<td width=40%>Supply a protoent structure for the specified protocol number</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetServByName</b></td>
<td width=40%>Supply a servent structure for the specified service name</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSAAsyncGetServByPort</b></td>
<td width=40%>Supply a servent structure for the service at the specified port</td>
</tr>
<tr valign=top>
<td width=60%><b>GETXBYYSP_WSACancelAsyncRequest</b></td>
<td width=40%>Cancel an asynchronous GetXbyY operation</td>
</tr>
</table><br>
<p>
The syntax and semantics of these GetXbyY functions are exactly the same as is documented in the Windows Sockets 2 API Specification and are, therefore, not repeated in this document. </p>
<p>
The Windows Sockets 2 DLL allows exactly one service provider to offer these services. Therefore, there is no need to include pointers to these functions in the proc table received from service providers at startup time. In 32 bit environments the path to the DLL which implements these functions is retrieved from the registry key named:</p>
<pre><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\WinSock2\
    Parameters\GetXByYLibraryPath 
 </code></pre>
<p>
<b>Warning</b>  How the path is obtained in 16 bit environments has not yet been determined.</p>

<h4><a name="_win32_built_in_default_getxbyy_service_provider_2"></a>Built-In Default GetXbyY Service Provider</h4>
<p>
A default GetXbyY service provider is integrated into the standard Windows Sockets 2 runtime components. This default provider implements all of the the above functions, thus it is not required for these functions to be implemented by any name space provider. However, a name space proivder is free to provide any or all of these functions (and thus override the defaults) by simply storing the string which is the path to the DLL which implements these functions in the indicated registry key. Any of the GetXbyY functions not exported by the named provider DLL will be supplied via the built-in defaults. Note, however, that if a provider elects to supply any of the async version of the GetXbyY functions, he should supply all of the async functions so that the cancel operation will work appropriately. </p>
<p>
For 32 bit environments, the current implementation of the default GetXbyY service provider resides within Microsoft's WSOCK32.DLL. Depending on how the TCP/IP settings have been established via the control panel, name resolution will occur using either DNS or local host files. When DNS is used, the default GetXbyY service provider uses standard Windows Sockets 1.1 API calls to communicate with the DNS server. These transactions will occur using whatever TCP/IP stack is configured as the default TCP/IP stack. Two special cases occurs, however, deserve special mention. </p>
<p>
The default implementation of <b>GETXBYYSP_gethostname</b> obtains the local host name from the registry. This will correspond to the name assigned to "my computer". The default implementation of <b>GETXBYYSP_gethostbyname</b> and <b>GETXBYYSP_WSAAsyncGetHostByName</b> always compares the supplied host name with the local host name. If they match, the default implementation uses a private interface to probe the Microsoft TCP/IP stack in order to discover its local IP address. Thus, in order to be completely independent of the Microsoft TCP/IP stack, a name space provider <b>must</b> implement both <b>GETXBYYSP_gethostbyname</b> and <b>GETXBYYSP_WSAAsyncGetHostByName</b>. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transport Mapping Between API and SPI Functions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_transport_mapping_between_api_and_spi_functions"></a>Transport Mapping Between API and SPI Functions</h3>
<p>
The Windows Sockets Transport SPI is similar to the Windows Sockets API in that all the basic socket functions appear. When a new Windows Sockets 2 version of a function and the original Windows Sockets 1.1 version of a function both exist in the API, only the new version will show up in the SPI. For example, <a href="../sock2/wsapiref_8m7m.htm"><b>connect</b></a> and <a href="../sock2/wsapiref_8kc2.htm"><b>WSAConnect</b></a> both map to <a href="wsspiref_0meq.htm"><b>WSPConnect</b></a>, <a href="../sock2/wsapiref_13aq.htm"><b>accept</b></a> and <a href="../sock2/wsapiref_3fn6.htm"><b>WSAAccept</b></a> map to <a href="wsspiref_2j1u.htm"><b>WSPAccept</b></a>, and <a href="../sock2/wsapiref_2qr6.htm"><b>socket</b></a> and <a href="../sock2/wsapiref_533m.htm"><b>WSASocket</b></a> map to <a href="wsspiref_46ia.htm"><b>WSPSocket</b></a>. Other API functions that are collapsed into the enhanced versions in SPI include <a href="../sock2/wsapiref_6quq.htm"><b>send</b></a>, <a href="../sock2/wsapiref_4sqa.htm"><b>sendto</b></a>, <a href="../sock2/wsapiref_2i9e.htm"><b>recv</b></a>, <a href="../sock2/wsapiref_88oi.htm"><b>recvfrom</b></a>, and <a href="../sock2/wsapiref_7dde.htm"><b>ioctlsocket</b></a>. </p>
<p>
Support functions like <a href="../sock2/wsapiref_39te.htm"><b>htonl</b></a>, <a href="../sock2/wsapiref_3vxu.htm"><b>htons</b></a>, <a href="../sock2/wsapiref_0tte.htm"><b>ntohl</b></a>, and <a href="../sock2/wsapiref_1fxu.htm"><b>ntohs</b></a> are implemented in the WS2_32.DLL, and are not passed down to service providers. The same holds true for the WSA versions of these functions. </p>
<p>
Windows Sockets service provider enumeration and the blocking hook related functions are realized in the WS2_32.DLL, thus <a href="../sock2/wsapiref_0f76.htm"><b>WSAEnumProtocols</b></a>, <a href="../sock2/wsapiref_4t82.htm"><b>WSAIsBlocking</b></a>, <a href="../sock2/wsapiref_49gy.htm"><b>WSASetBlockingHook</b></a>, and <a href="../sock2/wsapiref_53w2.htm"><b>WSAUnhookBlockingHook</b></a> do not appear as SPI functions. </p>
<p>
Since error codes are returned along with SPI functions, equivalents of <a href="../sock2/wsapiref_2tiq.htm"><b>WSAGetLastError</b></a> and <a href="../sock2/wsapiref_7a42.htm"><b>WSASetLastError</b></a> are not needed in the SPI. </p>
<p>
The event object manipulation and wait functions including <a href="../sock2/wsapiref_4esz.htm"><b>WSACreateEvent</b></a>, <a href="../sock2/wsapiref_2bxu.htm"><b>WSACloseEvent</b></a>, <a href="../sock2/wsapiref_9s6q.htm"><b>WSASetEvent</b></a>, <a href="../sock2/wsapiref_91wy.htm"><b>WSAResetEvent</b></a>, and <a href="../sock2/wsapiref_1p4i.htm"><b>WSAWaitForMultipleEvents</b></a> are mapped directly to native OS services and thus are not present in the SPI. </p>
<p>
All the TCP/IP specific name conversion and resolution functions in Windows Sockets 1.1 such as <b>getXbyY</b>, <b>WSAAsyncGetXByY</b> and <a href="../sock2/wsapiref_2qya.htm"><b>WSACancelAsyncRequest</b></a>, as well as <a href="../sock2/wsapiref_1koi.htm"><b>gethostname</b></a> are implemented within the WS2_32.DLL in terms of the new name resolution facilities. See Windows Sockets 1.1 Compatibile Name Resolution for TCP/IP for details. Conversion functions such as <a href="../sock2/wsapiref_4esy.htm"><b>inet_addr</b></a> and <a href="../sock2/wsapiref_0elu.htm"><b>inet_ntoa</b></a> are implemented within the WS2_32.DLL. </p>
<p>&nbsp;</p></body>
</HTML>

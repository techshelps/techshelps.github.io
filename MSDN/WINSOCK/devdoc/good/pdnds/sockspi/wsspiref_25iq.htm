<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WPUQueryBlockingCallback</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wpuqueryblockingcallback_2"></a>WPUQueryBlockingCallback</h1>
<p>
The <b>WPUQueryBlockingCallback</b> function returns a pointer to a callback function the service provider should invoke periodically while servicing blocking operations.</p>
<pre><code><b>int WPUQueryBlockingCallback (
  DWORD</b><i> dwCatalogEntryId</i><b>,</b>                    
<b>  LPBLOCKINGCALLBACK FAR *</b><i> lplpfnCallback</i><b>,</b>   
<b>  LPDWORD</b><i> lpdwContext</i><b>,</b>                       
<b>  LPINT</b><i> lpErrno</i>                              
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCatalogEntryId</i></dt>
<dd>
[in] A descriptor identifying the calling service provider.</dd>
<dt>
<i>lplpfnCallback</i></dt>
<dd>
[out] A pointer that receives to the blocking callback function.</dd>
<dt>
<i>lpdwContext</i></dt>
<dd>
[out] A pointer that receives a context value that the service provider must pass into the blocking callback.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WPUQueryBlockingCallback </b>function returns a pointer to a callback function in <i>lpfnCallback</i> to be invoked periodically during blocking operations. This function also returns a context value in <i>lpdwContext</i> to be passed into the blocking callback.</p>
<p>
Under Win32, this function can return NULL in <i>lpfnCallback</i>, indicating that no user-defined blocking hook is installed. In this case, the service provider should use the native Win32 synchronization objects to implement blocking.</p>
<p>
<b>LPBLOCKINGCALLBACK</b> is defined as follows:</p>
<pre><code>typedef <b>BOOL</b> ( CALLBACK FAR * <b>LPBLOCKINGCALLBACK </b>)( <b>DWORD</b> <i>dwContext</i> );
 </code></pre>
<p>
The blocking callback will return TRUE if the service provider is to continue waiting for the blocking operation to complete, FALSE if the blocking operation has been canceled with the <a href="wsspiref_1njm.htm"><b>WSPCancelBlockingCall</b></a>.</p>
<p>
Any missing components of the address will be default to a reasonable values if possible. For example, a missing port number will default to zero.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WPUQueryBlockingCallback</b> returns zero and stores a pointer to a blocking callback function in <i>lpfnCallback</i> and an associated context value in <i>lpdwContext</i>. Otherwise, it returns SOCKET_ERROR, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=27%>WSAEFAULT</td>
<td width=73%>The <i>lpfnCallback</i> or the <i>lpdwContext</i> argument is not a valid part of the process address space.</td>
</tr>
<tr valign=top>
<td width=27%>WSAEINVAL</td>
<td width=73%><i>dwCatalogEntryId</i> is invalid.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_1njm.htm"><b>WSPCancelBlockingCall</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSPGetSockOpt</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wspgetsockopt_2"></a>WSPGetSockOpt</h1>
<p>
The <b>WSPGetSockOpt</b> function retrieves a socket option.</p>
<pre><code><b>int WSPGetSockOpt (
  SOCKET</b><i> s</i><b>,</b>            
<b>  int</b><i> level</i><b>,</b>           
<b>  int</b><i> optname</i><b>,</b>         
<b>  char FAR *</b><i> optval</i><b>,</b>   
<b>  LPINT</b><i> optlen</i><b>,</b>        
<b>  LPINT</b><i> lpErrno        </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a socket.</dd>
<dt>
<i>level</i></dt>
<dd>
[in] The level at which the option is defined; the supported <i>levels</i> include SOL_SOCKET (See annex for more protocol-specific <i>levels</i>.) </dd>
<dt>
<i>optname</i></dt>
<dd>
[in] The socket option for which the value is to be retrieved.</dd>
<dt>
<i>optval</i></dt>
<dd>
[out] A pointer to the buffer in which the value for the requested option is to be returned.</dd>
<dt>
<i>optlen</i></dt>
<dd>
[in/out] A pointer to the size of the <i>optval</i> buffer.</dd>
<dt>
<i>lpErrno</i></dt>
<dd>
[out] A pointer to the error code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>WSPGetSockOpt</b> retrieves the current value for a socket option associated with a socket of any type, in any state, and stores the result in <i>optval</i>. Options can exist at multiple protocol levels, but they are always present at the uppermost "socket'' level. Options affect socket operations, such as the routing of packets and out-of-band data transfer.</p>
<p>
The value associated with the selected option is returned in the buffer <i>optval</i>. The integer pointed to by <i>optlen</i> should originally contain the size of this buffer; on return, it will be set to the size of the value returned. For SO_LINGER, this will be the size of a structure linger; for most other options it will be the size of an integer.</p>
<p>
The Windows Sockets SPI client is responsible for allocating any memory space pointed to directly or indirectly by any of the parameters it specifies.</p>
<p>
If the option was never set with <b>WSPSetSockOpt</b>, then <b>WSPGetSockOpt</b> returns the default value for the option.</p>
<p>
<b><i>level</i> = SOL_SOCKET</b></p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=31%>Value</th>
<th align=left width=18%>Type</th>
<th align=left width=29%>Meaning</th>
<th align=left width=22%>Default</th>
</tr>
<tr valign=top>
<td width=31%>SO_ACCEPTCONN</td>
<td width=18%>BOOL</td>
<td width=29%>Socket is WSPListening.</td>
<td width=22%>FALSE unless a <b>WSPListen</b> has been performed</td>
</tr>
<tr valign=top>
<td width=31%>SO_BROADCAST</td>
<td width=18%>BOOL</td>
<td width=29%>Socket is configured for the transmission of broadcast messages.</td>
<td width=22%>FALSE </td>
</tr>
<tr valign=top>
<td width=31%>SO_DEBUG</td>
<td width=18%>BOOL</td>
<td width=29%>Debugging is enabled. </td>
<td width=22%>FALSE </td>
</tr>
<tr valign=top>
<td width=31%>SO_DONTLINGER</td>
<td width=18%>BOOL</td>
<td width=29%>If true, the SO_LINGER option is disabled.</td>
<td width=22%>TRUE</td>
</tr>
<tr valign=top>
<td width=31%>SO_DONTROUTE</td>
<td width=18%>BOOL</td>
<td width=29%>Routing is disabled.</td>
<td width=22%>FALSE </td>
</tr>
<tr valign=top>
<td width=31%>SO_ERROR</td>
<td width=18%>int</td>
<td width=29%>Retrieve error status and clear.</td>
<td width=22%>0</td>
</tr>
<tr valign=top>
<td width=31%>SO_GROUP_ID</td>
<td width=18%>GROUP</td>
<td width=29%>Reserved for future use with socket groups: The identifier of the group to which this socket belongs.</td>
<td width=22%>NULL</td>
</tr>
<tr valign=top>
<td width=31%>SO_GROUP_PRIORITY</td>
<td width=18%>int</td>
<td width=29%>Reserved for future use with socket groups: The relative priority for sockets that are part of a socket group.</td>
<td width=22%>0</td>
</tr>
<tr valign=top>
<td width=31%>SO_KEEPALIVE</td>
<td width=18%>BOOL</td>
<td width=29%>Keepalives are being sent.</td>
<td width=22%>FALSE</td>
</tr>
<tr valign=top>
<td width=31%>SO_LINGER</td>
<td width=18%>struct linger</td>
<td width=29%>Returns the current linger options.</td>
<td width=22%>1 is on (default), 0 is off</td>
</tr>
<tr valign=top>
<td width=31%>SO_MAX_MSG_SIZE</td>
<td width=18%>unsigned int</td>
<td width=29%>Maximum size of a message for message-oriented socket types (for example, SOCK_DGRAM). Has no meaning for stream oriented sockets.</td>
<td width=22%>Implementation dependent</td>
</tr>
<tr valign=top>
<td width=31%>SO_OOBINLINE</td>
<td width=18%>BOOL</td>
<td width=29%>Out-of-band data is being received in the normal data stream. </td>
<td width=22%>FALSE</td>
</tr>
<tr valign=top>
<td width=31%>SO_PROTOCOL_INFO</td>
<td width=18%>WSA<br>
PROTOCOL<br>
_INFO</td>
<td width=29%>Description of protocol info for protocol that is bound to this socket.</td>
<td width=22%>protocol dependent</td>
</tr>
<tr valign=top>
<td width=31%>SO_RCVBUF</td>
<td width=18%>int</td>
<td width=29%>Total per-socket buffer space reserved for receives. This is unrelated to SO_MAX_MSG_SIZE or the size of a TCP window.</td>
<td width=22%>Implementation dependent</td>
</tr>
<tr valign=top>
<td width=31%>SO_REUSEADDR</td>
<td width=18%>BOOL</td>
<td width=29%>The socket can be bound to an address which is already in use.</td>
<td width=22%>FALSE</td>
</tr>
<tr valign=top>
<td width=31%>SO_SNDBUF</td>
<td width=18%>int</td>
<td width=29%>Total per-socket buffer space reserved for sends. This is unrelated to SO_MAX_MSG_SIZE or the size of a TCP window.</td>
<td width=22%>Implementation dependent</td>
</tr>
<tr valign=top>
<td width=31%>SO_TYPE</td>
<td width=18%>int</td>
<td width=29%>The type of the socket (for example, SOCK_STREAM).</td>
<td width=22%>As created with <b>socket</b>.</td>
</tr>
<tr valign=top>
<td width=31%>PVD_CONFIG</td>
<td width=18%>Service Provider Dependent</td>
<td width=29%>An "opaque" data structure object from the service provider associated with socket <i>s</i>. This object stores the current configuration information of the service provider. The exact format of this data structure is service provider specific.</td>
<td width=22%>Implementation dependent</td>
</tr>
</table><br>
<p>
Calling <b>WSPGetSockOpt</b> with an unsupported option will result in an error code of WSAENOPROTOOPT being returned in <i>lpErrno</i>.
<dl>
<dt>
<b>SO_DEBUG</b></dt>
<dd>
Windows Sockets service providers are encouraged (but not required) to supply output debug information if the SO_DEBUG option is set by a Windows Sockets SPI client. The mechanism for generating the debug information and the form it takes are beyond the scope of this specification.</dd>
<dt>
<b>SO_ERROR </b></dt>
<dd>
The SO_ERROR option returns and resets the per-socket based error code (which is not necessarily the same as the per-thread error code that is maintained by the WS2_32.DLL). A successful Windows Sockets call on the socket does not reset the socket-based error code returned by the SO_ERROR option.</dd>
<dt>
<b>SO_GROUP_ID</b></dt>
<dd>
Reserved for future use with socket groups: This is a get-only socket option which supplies the identifier of the group this socket belongs to. Note that socket group IDs are unique across all processes for a give service provider. If this socket is not a group socket, the value is NULL.</dd>
<dt>
<b>SO_GROUP_PRIORITY</b></dt>
<dd>
Reserved for future use with socket groups: Group priority indicates the priority of the specified socket relative to other sockets within the socket group. Values are non-negative integers, with zero corresponding to the highest priority. Priority values represent a hint to the service provider about how potentially scarce resources should be allocated. For example, whenever two or more sockets are both ready to transmit data, the highest priority socket (lowest value for SO_GROUP_PRIORITY) should be serviced first, with the remainder serviced in turn according to their relative priorities.
</dd>
</dl>
<p>
The WSAENOPROTOOPT error code is indicated for non group sockets or for service providers which do not support group sockets.
<dl>
<dt>
<b>SO_KEEPALIVE</b></dt>
<dd>
A Windows Sockets SPI client can request that a TCP/IP service provider enable the use of "keep-alive" packets on TCP connections by turning on the SO_KEEPALIVE socket option. A Windows Sockets provider need not support the use of keep-alives: if it does, the precise semantics are implementation-specific but should conform to section 4.2.3.6 of RFC 1122: <i>Requirements for Internet Hosts — Communication Layers</i>. If a connection is dropped as the result of "keep-alives" the error code WSAENETRESET is returned to any calls in progress on the socket, and any subsequent calls will fail with WSAENOTCONN.</dd>
<dt>
<b>SO_LINGER</b></dt>
<dd>
SO_LINGER controls the action taken when unsent data is queued on a socket and a <b>WSPCloseSocket</b> is performed. See <b>WSPCloseSocket</b> for a description of the way in which the SO_LINGER settings affect the semantics of <b>WSPCloseSocket</b>. The Windows Sockets SPI client obtains the desired behavior by creating a <i>struct linger</i> (pointed to by the <i>optval</i> argument) with the following elements:
<pre><code>struct linger {
    u_short    l_onoff;
    u_short    l_linger;
}
 </code></pre>
</dd>
<dt>
<b>SO_MAX_MSG_SIZE</b></dt>
<dd>
This is a get-only socket option which indicates the maximum size of an outbound send message for message-oriented socket types (for example, SOCK_DGRAM) as implemented by the service provider. It has no meaning for byte stream oriented sockets. There is no provision to determine the maximum inbound message size.</dd>
<dt>
<b>SO_PROTOCOL_INFOW</b></dt>
<dd>
This is a get-only option which supplies the <a href="../sock2/strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure associated with this socket. See <a href="wsspiref_5qeq.htm"><b>WSCEnumProtocols</b></a> for more information about this structure.</dd>
<dt>
<b>SO_SNDBUF</b></dt>
<dd>
When a Windows Sockets service provider supports the SO_RCVBUF and SO_SNDBUF options, a Windows Sockets SPI client can use <b>WSPSetSockOpt</b> to request different buffer sizes (larger or smaller). The call can succeed even though the service provider did not make available the entire amount requested. A Windows Sockets SPI client must call this function with the same option to check the buffer size actually provided.</dd>
<dt>
<b>SO_REUSEADDR</b></dt>
<dd>
By default, a socket can not be bound (see <b>WSPBind</b>) to a local address which is already in use. On occasion, however, it may be desirable to "re-use" an address in this way. Since every connection is uniquely identified by the combination of local and remote addresses, there is no problem with having two sockets bound to the same local address as long as the remote addresses are different. To inform the Windows Sockets provider that a <b>WSPBind</b> on a socket should be allowed to bind to a local address that is already in use by another socket, the Windows Sockets SPI client should set the SO_REUSEADDR socket option for the socket before issuing the <b>WSPBind</b>. Note that the option is interpreted only at the time of the <b>WSPBind</b>: it is therefore unnecessary (but harmless) to set the option on a socket which is not to be bound to an existing address, and setting or resetting the option after the <b>WSPBind</b> has no effect on this or any other socket.</dd>
<dt>
<b>PVD_CONFIG</b></dt>
<dd>
This option retrieves an "opaque" data structure object from the service provider associated with socket <i>s</i>. This object stores the current configuration information of the service provider. The exact format of this data structure is service provider specific.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSPGetSockOpt</b> returns zero. Otherwise, a value of SOCKET_ERROR is returned, and a specific error code is available in <i>lpErrno</i>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=37%>WSAENETDOWN</td>
<td width=63%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEFAULT</td>
<td width=63%>One of the <i>optval </i>or the <i>optlen </i>arguments is not a valid part of the user address space, or the <i>optlen</i> argument is too small.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINVAL</td>
<td width=63%><i>level</i> is unknown or invalid.</td>
</tr>
<tr valign=top>
<td width=37%>WSAEINPROGRESS</td>
<td width=63%>The function is invoked when a callback is in progress.</td>
</tr>
<tr valign=top>
<td width=37%>WSAENOPROTOOPT</td>
<td width=63%>The option is unknown or unsupported by the indicated protocol family. </td>
</tr>
<tr valign=top>
<td width=37%>WSAENOTSOCK</td>
<td width=63%>The descriptor is not a socket.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in ws2spi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsspiref_5hte.htm"><b>WSPSetSockOpt</b></a>, <a href="wsspiref_46ia.htm"><b>WSPSocket</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

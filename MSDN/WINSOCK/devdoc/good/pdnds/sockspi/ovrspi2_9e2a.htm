<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPI: Function Extension Mechanism</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_spi_function_extension_mechanism_2"></a>SPI: Function Extension Mechanism</h3>
<p>
Since the WinSock DLL itself is no longer supplied by each individual stack vendor, it is no longer possible for a stack vendor to offer extended functionality by just adding entry points to the WinSock DLL. To overcome this limitation, Windows Sockets 2 takes advantage of the new <a href="../sock2/wsapiref_6ik2.htm"><b>WSAIoctl</b></a> function to accommodate service providers who wish to offer provider-specific functionality extensions. This mechanism presupposes, of course, that an application is aware of a particular extension and understands both the semantics and syntax involved. Such information would typically be supplied by the service provider vendor. </p>
<p>
In order to invoke an extension function, the application must first ask for a pointer to the desired function. This is done via the <a href="../sock2/wsapiref_6ik2.htm"><b>WSAIoctl</b></a> function using the SIO_GET_EXTENSION_FUNCTION_POINTER command code. The input buffer to the <b>WSAIoctl</b> function contains an identifier for the desired extension function and the output buffer will contain the function pointer itself. The application can then invoke the extension function directly without passing through the WS2_32.DLL. </p>
<p>
The identifiers assigned to extension functions are globally unique identifiers (GUIDs) that are allocated by service provider vendors. Vendors who create extension functions are urged to publish full details about the function including the syntax of the function prototype. This makes it possible for common and/or popular extension functions to be offered by more than one service provider. An application can obtain the function pointer and use the function without needing to know anything about the particular service provider that implements the function.</p>
<p>&nbsp;</p></body>
</HTML>

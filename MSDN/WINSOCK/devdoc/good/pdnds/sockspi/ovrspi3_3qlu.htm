<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connection Shutdown</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_connection_shutdown_2"></a>Connection Shutdown</h3>
<p>
The paragraphs which follow will describe operations incident to shutting down an established socket connection.</p>

<h4><a name="_win32_initiating_shutdown_sequence_2"></a>Initiating Shutdown Sequence</h4>
<p>
A socket connection can be taken down in one of several ways. <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a> (with <i>how</i> equal to SD_SEND or SD_BOTH), and <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> may be used to initiate a graceful connection shutdown. <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a> can be used to initiate either a graceful or an abortive shutdown depending on the linger options as a side effect of closing a socket. See below for more information about graceful and abortive shutdown, and linger options.</p>

<h4><a name="_win32_indicating_remote_shutdown_2"></a>Indicating Remote Shutdown</h4>
<p>
Service providers indicate connection teardown that is initiated by the remote party via the FD_CLOSE network event. Graceful shutdown is also be indicated via <a href="wsspiref_854i.htm"><b>WSPRecv</b></a> when the number of bytes read is 0 for byte-stream protocols, or via a return error code of WSAEDISCON for message-oriented protocols. In any case, a <a href="wsspiref_854i.htm"><b>WSPRecv</b></a> return error code of WSAECONNRESET indicates an abortive shutdown.</p>

<h4><a name="_win32_exchanging_user_data_at_shutdown_time_2"></a>Exchanging User Data at Shutdown Time</h4>
<p>
At connection teardown time, it is also possible (for protocols that support this) to exchange user data between the endpoints. The end that initiates the teardown can call <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> to indicate that no more data is to be sent and cause the connection teardown sequence to be initiated. For certain protocols, part of this teardown sequence is the delivery of disconnect data from the teardown initiator. After receiving notice that the remote end has initiated the teardown sequence (typically via the FD_CLOSE indication), the <a href="wsspiref_5fjm.htm"><b>WSPRecvDisconnect</b></a> function may be called to receive the disconnect data (if any). </p>
<p>
To illustrate how disconnect data might be used, consider the following scenario. The client half of a client/server application is responsible for terminating a socket connection. Coincident with the termination it provides (via disconnect data) the total number of transactions it processed with the server. The server in turn responds back with the cumulative grand total of transactions that it has processed with all clients. The sequence of calls and indications might occur as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Client Side</th>
<th align=left width=52%>Server Side</th>
</tr>
<tr valign=top>
<td width=48%>(1) invoke <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> to conclude session and supply transaction total</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(2) get FD_CLOSE, or WSPRecv with a return value of zero or WSAEDISCON indicating graceful shutdown in progress</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(3) invoke <a href="wsspiref_5fjm.htm"><b>WSPRecvDisconnect</b></a> to get client's transaction total</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(4) Compute cumulative grand total of all transactions</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(5) invoke <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> to transmit grand total</td>
</tr>
<tr valign=top>
<td width=48%>(6) receive FD_CLOSE indication</td>
<td width=52%>(5') invoke <a href="wsspiref_533m.htm"><b>WSPClosesocket</b></a></td>
</tr>
<tr valign=top>
<td width=48%>(7) invoke <a href="wsspiref_5fjm.htm"><b>WSPRecvDisconnect</b></a> to receive and store cumulative grand total of transactions</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(8) invoke <a href="wsspiref_533m.htm"><b>WSPClosesocket</b></a></td>
</tr>
</table><br>
<p>
Step (5') must follow step (5), but has no timing relationship with step (6), (7), or (8).</p>

<h4><a name="_win32_spi_graceful_shutdown_linger_options_and_socket_closure_2"></a>SPI: Graceful Shutdown, Linger Options and Socket Closure</h4>
<p>
It is important to distinguish the difference between shutting down a socket connection and closing a socket. Shutting down a socket connection involves an exchange of protocol messages between the two endpoints which is hereafter referred to as a shutdown sequence. Two general classes of shutdown sequences are defined: graceful and abortive (also referred to as "hard"). In a graceful shutdown sequence, any data that has been queued but not yet transmitted can be sent prior to the connection being closed. In an abortive shutdown, any unsent data is lost. The occurrence of a shutdown sequence (graceful or abortive) can also be used to provide an FD_CLOSE indication to the associated applications signifying that a shutdown is in progress. Closing a socket, on the other hand, causes the socket handle to become deallocated so that the application can no longer reference or use the socket in any manner. </p>
<p>
In Windows Sockets, both the <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a> function, and the <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> function can be used to initiate a shutdown sequence, while the <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a> function is used to deallocate socket handles and free up any associated resources. Some amount of confusion arises, however, from the fact that the <b>WSPCloseSocket</b> function will implicitly cause a shutdown sequence to occur if it has not already happened. In fact, it has become a rather common programming practice to rely on this feature and use <b>WSPCloseSocket</b> to both initiate the shutdown sequence and deallocate the socket handle. </p>
<p>
To facilitate this usage, the sockets interface provides for controls via the socket option mechanism that allows the programmer to indicate whether the implicit shutdown sequence should be graceful or abortive, and also whether the <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a> function should linger (i.e. not complete immediately) to allow time for a graceful shutdown sequence to complete. </p>
<p>
By establishing appropriate values for the socket options SO_LINGER and SO_DONTLINGER, the following types of behavior can be obtained with the <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a> function.
<ul>
<li>
Abortive shutdown sequence, immediate return from <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a>.</li>
<li>
Graceful shutdown, delay return until either shutdown sequence completes or a specified time interval elapses. If the time interval expires before the graceful shutdown sequence completes, an abortive shutdown sequence occurs and <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a> returns.</li>
<li>
Graceful shutdown, return immediately and allow the shutdown sequence to complete in the background. This is the default behavior. Note, however, that the application has no way of knowing when (or whether) the graceful shutdown sequence completes.</li>
</ul>
<p>
One technique that can be used to minimize the chance of problems occurring during connection teardown is to not rely on an implicit shutdown being initiated by <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a>. Instead one of the two explicit shutdown functions ( <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a> or <a href="wsspiref_01gy.htm"><b>WSPSendDisconnect</b></a> ) are used. This in turn will cause an FD_CLOSE indication to be received by the peer application indicating that all pending data has been received. To illustrate this, the following table shows the functions that would be invoked by the client and server components of an application, where the client is responsible for initiating a graceful shutdown. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Client Side</th>
<th align=left width=52%>Server Side</th>
</tr>
<tr valign=top>
<td width=48%>(1) Invoke <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a>(<i>s, SD_SEND)</i> to signal end of session and that client has no more data to send.</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(2) Receive FD_CLOSE, indicating graceful shutdown in progress and that all data has been received.</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>(3) Send any remaining response data.</td>
</tr>
<tr valign=top>
<td width=48%>(5') Get FD_READ and invoke recv to get any response data sent by server</td>
<td width=52%>(4) Invoke <a href="wsspiref_4dma.htm"><b>WSPShutdown</b></a>(<i>s, SD_SEND</i>) to indicate server has no more data to send.</td>
</tr>
<tr valign=top>
<td width=48%>(5) Receive FD_CLOSE indication</td>
<td width=52%>(4') Invoke <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a></td>
</tr>
<tr valign=top>
<td width=48%>(6) Invoke <a href="wsspiref_533m.htm"><b>WSPCloseSocket</b></a></td>
<td width=52%></td>
</tr>
</table><br>
<p>
The timing sequence is maintained from step (1) to step (6) between the client and the server, except for step (4') and (5') which only has local timing significance in the sense that step (5) follows step (5') on the client side while step (4') follows step (4) on the server side, with no timing relationship with the remote party. </p>
<p>&nbsp;</p></body>
</HTML>

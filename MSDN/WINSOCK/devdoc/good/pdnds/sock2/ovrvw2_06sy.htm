<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Backward Compatibility For Windows Sockets 1.1 Applications</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_backward_compatibility_for_windows_sockets_1.1_applications_2"></a>Backward Compatibility For Windows Sockets 1.1 Applications</h3>
<p>
Windows Sockets 2 has been made backward compatible with Windows Sockets 1.1 on two levels: source and binary. This maximizes interoperability between Windows Sockets applications of any version and Windows Sockets implementations of any version. It also minimizes problems for users of Windows Sockets applications, network stacks, and service providers. Current Windows Sockets 1.1-compliant applications will run over a Windows Sockets 2 implementation without modification of any kind, as long as at least one TCP/IP service provider is properly installed.</p>

<h4><a name="_win32_source_code_compatibility_2"></a>Source Code Compatibility</h4>
<p>
Source code compatibility in Windows Sockets 2 means, with few exceptions, that all the Windows Sockets 1.1 functions are preserved in Windows Sockets 2. Windows Sockets 1.1 applications that make use of blocking hooks will need to be modified since blocking hooks are no longer supported in Windows Sockets 2. (For more information, see <a href="ovrvw3_7gfm.htm">Windows Sockets 1.1 Blocking routines &amp; EINPROGRESS</a>.)  </p>
<p>
Thus, existing Windows Sockets 1.1 application source code can easily be moved to the Windows Sockets 2 system by including the new header file, WINSOCK2.H, and performing a straightforward relink with the appropriate Windows Sockets 2 libraries. Application developers are encouraged to view this as the first step in a full transition to Windows Sockets 2 because there are numerous ways in which a Windows Sockets 1.1 application can be improved by exploring and using the new functionality in Windows Sockets 2.</p>

<h4><a name="_win32_binary_compatibility_2"></a>Binary Compatibility</h4>
<p>
A major design goal for Windows Sockets 2 was to enable existing Windows Sockets 1.1 applications to work, unchanged at a binary level, with Windows Sockets 2. Since Windows Sockets 1.1 applications are TCP/IP-based, binary compatibility implies that TCP/IP-based Windows Sockets 2 Transport and Name Resolution Service Providers are present in the Windows Sockets 2 system. In order to enable Windows Sockets 1.1 applications in this scenario, the Windows Sockets 2 system has an additional "shim" component supplied with it: a Version 1.1-compliant WINSOCK.DLL. </p>
<p>
Installation guidelines for Windows Sockets 2 ensure there will be no negative impact to existing Windows Sockets-based applications on an end user system by the introduction of any Windows Sockets 2 components. </p>
<p>
<img src="images/ovrw2_2a.gif" border=0></p>
<p>
<b>Windows Sockets 1.1 Compatibility Architecture</b></p>
<p>
<b>Important</b>  To obtain information about the underlying TCP/IP stack, Windows Sockets 1.1 applications currently use certain members of the <a href="strucetc_42uq.htm"><b>WSAData</b></a> structure (obtained through a call to <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a>). These members include:<i> iMaxSockets, iMaxUdpDg, </i>and<i> lpVendorInfo</i>. </p>
<p>
While Windows Sockets 2 applications ignore these values (since they cannot uniformly apply to all available protocol stacks), safe values are supplied to avoid breaking Windows Sockets 1.1 applications.</p>
<p>&nbsp;</p></body>
</HTML>

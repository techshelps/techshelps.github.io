<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSASendTo</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsasendto_2"></a>WSASendTo</h1>
<p>
The Windows Sockets <b>WSASendTo</b> function sends data to a specific destination, using overlapped I/O where applicable.</p>
<pre><code><b>int WSASendTo (
  SOCKET</b><i> s</i><b>,                                               </b>
<b>  LPWSABUF</b><i> lpBuffers</i><b>,                                     </b>
<b>  DWORD</b><i> dwBufferCount</i><b>,                                    </b>
<b>  LPDWORD</b><i> lpNumberOfBytesSent</i><b>,                            </b>
<b>  DWORD</b><i> dwFlags</i><b>,                                          </b>
<b>  const struct sockaddr FAR *</b><i> lpTo</i><b>,                       </b>
<b>  int</b><i> iToLen</i><b>,                                             </b>
<b>  LPWSAOVERLAPPED</b><i> lpOverlapped</i><b>,                           </b>
<b>  LPWSAOVERLAPPED_COMPLETION_ROUTINE</b><i> lpCompletionROUTINE  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a (possibly connected) socket.</dd>
<dt>
<i>lpBuffers</i></dt>
<dd>
[in] A pointer to an array of <a href="strucetc_5ape.htm"><b>WSABUF</b></a> structures. Each <b>WSABUF</b> structure contains a pointer to a buffer and the length of the buffer. This array must remain valid for the duration of the send operation.</dd>
<dt>
<i>dwBufferCount</i></dt>
<dd>
[in] The number of <a href="strucetc_5ape.htm"><b>WSABUF</b></a> structures in the <i>lpBuffers</i> array.</dd>
<dt>
<i>lpNumberOfBytesSent</i></dt>
<dd>
[out] A pointer to the number of bytes sent by this call if the I/O operation completes immediately.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
[in] An indicator specifying the way in which the call is made.</dd>
<dt>
<i>lpTo</i></dt>
<dd>
[in] An optional pointer to the address of the target socket.</dd>
<dt>
<i>iToLen</i></dt>
<dd>
[in] The size of the address in <i>lpTo</i>.</dd>
<dt>
<i>lpOverlapped</i></dt>
<dd>
[in] A pointer to a <a href="strucetc_0gz6.htm"><b>WSAOVERLAPPED</b></a> structure (ignored for nonoverlapped sockets).</dd>
<dt>
<i>lpCompletionRoutine</i></dt>
<dd>
[in] A pointer to the completion routine called when the send operation has been completed (ignored for nonoverlapped sockets).
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSASendTo</b> function provides functionality over and above the standard <a href="wsapiref_4sqa.htm"><b>sendto</b></a> function in two important areas:
<ol>
<li>
It can be used in conjunction with overlapped sockets to perform overlapped send operations.</li>
<li>
It allows multiple send buffers to be specified making it applicable to the scatter/gather type of I/O.</li>
</ol>
<p>
The <b>WSASendTo</b> function is normally used on a connectionless socket specified by <i>s</i> to send a datagram contained in one or more buffers to a specific peer socket identified by the <i>lpTo</i> parameter. Even if the connectionless socket has been previously connected using the <a href="wsapiref_8m7m.htm"><b>connect</b></a> function to a specific address, <i>lpTo</i> overrides the destination address for that particular datagram only. On a connection-oriented socket, the <i>lpTo</i> and <i>iToLen </i>parameters are ignored; in this case, the <b>WSASendTo</b> is equivalent to <a href="wsapiref_97n6.htm"><b>WSASend</b></a>.</p>
<p>
For overlapped sockets (created using <b>WSASocket</b> with flag WSA_FLAG_OVERLAPPED) sending data uses overlapped I/O, unless both <i>lpOverlapped</i> and <i>lpCompletionRoutine</i> are NULL in which case the socket is treated as a nonoverlapped socket. A completion indication will occur (invoking the completion routine or setting of an event object) when the supplied buffer(s) have been consumed by the transport. If the operation does not complete immediately, the final completion status is retrieved through the completion routine or <a href="wsapiref_5kky.htm"><b>WSAGetOverlappedResult</b></a>.</p>
<p>
If both <i>lpOverlapped</i> and <i>lpCompletionRoutine</i> are NULL, the socket in this function will be treated as a non-overlapped socket.</p>
<p>
For nonoverlapped sockets, the last two parameters (<i>lpOverlapped, lpCompletionRoutine</i>) are ignored and <b>WSASendTo</b> adopts the same blocking semantics as <a href="wsapiref_6quq.htm"><b>send</b></a>. Data is copied from the supplied buffer(s) into the transport's buffer. If the socket is nonblocking and stream oriented, and there is not sufficient space in the transport's buffer, <b>WSASendTo</b> returns with only part of the application's buffers having been consumed. Given the same buffer situation and a blocking socket, <b>WSASendTo</b> will block until all of the application's buffer contents have been consumed.</p>
<p>
The array of <a href="strucetc_5ape.htm"><b>WSABUF</b></a> structures indicated by the <i>lpBuffers</i> parameter is transient. If this operation is completed in an overlapped manner, it is the sercvice provider's responsibility to capture these <b>WSABUF</b> structures before returning from this call. This enables applications to build stack-based <a href="strucetc_5ape.htm"><b>WSABUF</b></a> arrays.</p>
<p>
For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport, which can be obtained by getting the value of socket option SO_MAX_MSG_SIZE. If the data is too long to pass atomically through the underlying protocol the error WSAEMSGSIZE is returned, and no data is transmitted.</p>
<p>
The successful completion of a <b>WSASendTo</b> does not indicate that the data was successfully delivered.</p>
<p>
The <i>dwFlags</i> parameter can be used to influence the behavior of the function invocation beyond the options specified for the associated socket. That is, the semantics of this function are determined by the socket options and the <i>dwFlags</i> parameter. The latter is constructed by or-ing any of the following values:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>MSG_DONTROUTE</td>
<td width=67%>Specifies that the data should not be subject to routing.  A Windows Socket service provider may choose to ignore this flag.</td>
</tr>
<tr valign=top>
<td width=33%>MSG_OOB</td>
<td width=67%>Send out-of-band data (stream-style socket such as SOCK_STREAM only).</td>
</tr>
<tr valign=top>
<td width=33%>MSG_PARTIAL</td>
<td width=67%>Specifies that <i>lpBuffers</i> only contains a partial message. Note that the error code WSAEOPNOTSUPP will be returned by transports that do not support partial message transmissions.</td>
</tr>
</table><br>
<h4>Overlapped socket I/O</h4>
<p>
If an overlapped operation completes immediately, <b>WSASendTo</b> returns a value of zero and the <i>lpNumberOfBytesSent</i> parameter is updated with the number of bytes sent. If the overlapped operation is successfully initiated and will complete later, <b>WSASendTo</b> returns SOCKET_ERROR and indicates error code WSA_IO_PENDING. In this case, <i>lpNumberOfBytesSent</i> is not updated. When the overlapped operation completes the amount of data transferred is indicated either through the <i>cbTransferred</i> parameter in the completion routine (if specified), or through the <i>lpcbTransfer</i> parameter in <b>WSAGetOverlappedResult</b>.</p>
<p>
The <b>WSASendTo</b> function can be called from within the completion routine of a previous <b>WSARecv</b>, <b>WSARecvFrom</b>, <b>WSASend</b> or <b>WSASendTo</b> function. This permits time-sensitive data transmissions to occur entirely within a preemptive context.</p>
<p>
The <i>lpOverlapped</i> parameter must be valid for the duration of the overlapped operation. If multiple I/O operations are simultaneously outstanding, each must reference a separate <a href="strucetc_0gz6.htm"><b>WSAOVERLAPPED</b></a> structure. </p>
<p>
If the <i>lpCompletionRoutine</i> parameter is NULL, the <i>hEvent</i> field of <i>lpOverlapped</i> is signaled when the overlapped operation completes if it contains a valid event object handle. An application can use <a href="wsapiref_1p4i.htm"><b>WSAWaitForMultipleEvents</b></a> or <a href="wsapiref_5kky.htm"><b>WSAGetOverlappedResult</b></a> to wait or poll on the event object.</p>
<p>
If <i>lpCompletionRoutine</i> is not NULL, the <i>hEvent</i> field is ignored and can be used by the application to pass context information to the completion routine. A caller that passes a non-NULL <i>lpCompletionRoutine</i> and later calls <b>WSAGetOverlappedResult</b> for the same overlapped IO request may not set the <i>fWait</i> parameter for that invocation of <b>WSAGetOverlappedResult</b> to TRUE. In this case the usage of the <i>hEvent</i> field is undefined, and attempting to wait on the <i>hEvent</i> field would produce unpredictable results.</p>
<p>
The completion routine follows the same rules as stipulated for Win32 file I/O completion routines. The completion routine will <i>not</i> be invoked until the thread is in an alertable wait state such as can occur when the function <a href="wsapiref_1p4i.htm"><b>WSAWaitForMultipleEvents</b></a> with the <i>fAlertable</i> parameter set to TRUE is invoked.</p>
<p>
Transport providers allow an application to invoke send and receive operations from within the context of the socket I/O completion routine, and guarantee that, for a given socket, I/O completion routines will <i>not</i> be nested. This permits time-sensitive data transmissions to occur entirely within a preemptive context.</p>
<p>
The prototype of the completion routine is as follows:</p>
<pre><code><b>void CALLBACK CompletionROUTINE(
  IN DWORD </b><i>dwError</i><b>,</b>
<b>  IN DWORD </b><i>cbTransferred</i><b>,</b>
<b>  IN LPWSAOVERLAPPED </b><i>lpOverlapped</i><b>,</b>
<b>  IN DWORD </b><i>dwFlags</i>
<b>);</b>
</code></pre>
<p>
The <b>CompletionRoutine</b> function is a placeholder for an application-defined or library-defined function name. The <i>dwError</i> paramter specifies the completion status for the overlapped operation as indicated by <i>lpOverlapped</i>. The <i>cbTransferred</i> parameter specifies the number of bytes sent. Currently there are no flag values defined and <i>dwFlags</i> will be zero. This function does not return a value.</p>
<p>
Returning from this function allows invocation of another pending completion routine for this socket. All waiting completion routines are called before the alertable thread's wait is satisfied with a return code of WSA_IO_COMPLETION. The completion routines can be called in any order, not necessarily in the same order the overlapped operations are completed. However, the posted buffers are guaranteed to be sent in the same order they are supplied.</p>
<h4>Return Values</h4>
<p>
If no error occurs and the send operation has completed immediately, <b>WSASendTo</b> returns zero. In this case, the completion routine will have already been scheduled to be called once the calling thread is in the alertable state. Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling <b>WSAGetLastError</b>. The error code WSA_IO_PENDING indicates that the overlapped operation has been successfully initiated and that completion will be indicated at a later time. Any other error code indicates that the overlapped operation was not successfully initiated and no completion indication will occur.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=46%>WSANOTINITIALISED</td>
<td width=54%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=46%>WSAENETDOWN</td>
<td width=54%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEACCES</td>
<td width=54%>The requested address is a broadcast address, but the appropriate flag was not set.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEINTR</td>
<td width=54%>A blocking Windows Socket 1.1 call was canceled through <a href="wsapiref_704y.htm"><b>WSACancelBlockingCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEINPROGRESS</td>
<td width=54%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEFAULT</td>
<td width=54%>The <i>lpBuffers</i>, <i>lpTo</i>, <i>lpOverlapped</i>, <i>lpNumberOfBytesSent</i>, or <i>lpCompletionRoutine</i> parameters are not part of the user address space, or the <i>lpTo</i> argument is too small.</td>
</tr>
<tr valign=top>
<td width=46%>WSAENETRESET</td>
<td width=54%>The connection has been broken due to "keep-alive" activity detecting a failure while the operation was in progress.</td>
</tr>
<tr valign=top>
<td width=46%>WSAENOBUFS</td>
<td width=54%>The Windows Sockets provider reports a buffer deadlock.</td>
</tr>
<tr valign=top>
<td width=46%>WSAENOTCONN</td>
<td width=54%>The socket is not connected (connection-oriented sockets only)</td>
</tr>
<tr valign=top>
<td width=46%>WSAENOTSOCK</td>
<td width=54%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEOPNOTSUPP</td>
<td width=54%>MSG_OOB was specified, but the socket is not stream-style such as type SOCK_STREAM, out-of-band data is not supported in the communication domain associated with this socket, MSG_PARTIAL is not supported, or the socket is unidirectional and supports only receive operations.</td>
</tr>
<tr valign=top>
<td width=46%>WSAESHUTDOWN</td>
<td width=54%>The socket has been shut down; it is not possible to <b>WSASendTo</b> on a socket after <a href="wsapiref_60z6.htm"><b>shutdown</b></a> has been invoked with how set to SD_SEND or SD_BOTH.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEWOULDBLOCK</td>
<td width=54%>Overlapped sockets: There are too many outstanding overlapped I/O requests. Nonoverlapped sockets: The socket is marked as nonblocking and the send operation cannot be completed immediately.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEMSGSIZE</td>
<td width=54%>The socket is message oriented, and the message is larger than the maximum supported by the underlying transport.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEINVAL</td>
<td width=54%>The socket has not been bound with <b>bind</b>, or the socket is not created with the overlapped flag.</td>
</tr>
<tr valign=top>
<td width=46%>WSAECONNABORTED</td>
<td width=54%>The virtual circuit was terminated due to a time-out or other failure.</td>
</tr>
<tr valign=top>
<td width=46%>WSAECONNRESET</td>
<td width=54%>The virtual circuit was reset by the remote side.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEADDRNOTAVAIL</td>
<td width=54%>The remote address is not a valid address (such as ADDR_ANY).</td>
</tr>
<tr valign=top>
<td width=46%>WSAEAFNOSUPPORT</td>
<td width=54%>Addresses in the specified family cannot be used with this socket.</td>
</tr>
<tr valign=top>
<td width=46%>WSAEDESTADDRREQ</td>
<td width=54%>A destination address is required.</td>
</tr>
<tr valign=top>
<td width=46%>WSAENETUNREACH</td>
<td width=54%>The network cannot be reached from this host at this time.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_IO_PENDING</td>
<td width=54%>An overlapped operation was successfully initiated and completion will be indicated at a later time.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_OPERATION_ABORTED</td>
<td width=54%>The overlapped operation has been canceled due to the closure of the socket, or the execution of the SIO_FLUSH command in <a href="wsapiref_6ik2.htm"><b>WSAIoctl</b></a>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_2bxu.htm"><b>WSACloseEvent</b></a>, <a href="wsapiref_4esz.htm"><b>WSACreateEvent</b></a>, <a href="wsapiref_5kky.htm"><b>WSAGetOverlappedResult</b></a>, <a href="wsapiref_533m.htm"><b>WSASocket</b></a>, <a href="wsapiref_1p4i.htm"><b>WSAWaitForMultipleEvents</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

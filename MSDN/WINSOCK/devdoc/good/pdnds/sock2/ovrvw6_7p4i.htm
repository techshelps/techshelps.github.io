<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Socket Option for NT 4.0 and Win95</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_socket_option_for_nt_4.0_and_win95_2"></a>Socket Option for NT 4.0 and Win95</h3>
<p>
SO_SNDTIMEO</p>
<p>
SO_RCVTIMEO</p>

<h4><a name="_win32_details_on_so_sndtimeo_and_so_rcvtimeo_2"></a>Details on SO_SNDTIMEO and SO_RCVTIMEO</h4>
<p>
These two options set up timeouts for the <a href="wsapiref_6quq.htm"><b>send</b></a>, <a href="wsapiref_4sqa.htm"><b>sendto</b></a>, <a href="wsapiref_2i9e.htm"><b>recv</b></a>, and <a href="wsapiref_88oi.htm"><b>recvfrom</b></a> functions. You can obtain the same functionality by calling <a href="wsapiref_1ab6.htm"><b>select</b></a> with a timeout just before the I/O call, but these options offer a significant improvement in performance by avoiding a kernel transition and the other overhead of the <b>select</b> call. For any code whose performance is very critical, applications should use these timeout options rather than <b>select</b>.</p>
<p>
You can set these options on any type of socket in any state. The default value for these options is zero, which refers to an infinite timeout. Any other setting is the timeout, in milliseconds. It is valid to set the timeout to any value, but values less than 500 milliseconds (half a second) are interpreted to be 500 milliseconds.</p>
<p>
To set a send timeout, use</p>
<pre><code>int timeout = TIMEOUT_VALUE;
int err;
SOCKET s;

s = socket( ... );
err = setsockopt( 
        s, 
        SOL_SOCKET, 
        SO_SNDTIMEO, 
        (char *)&amp;timeout, 
        sizeof(timeout));
if (err != NO_ERROR) {
    /* failed for some reason... */
}
 </code></pre>
<p>
The TIMEOUT_VALUE is the needed timeout in milliseconds. To set a receive timeout, substitute SO_RCVTIMEO for SO_SNDTIMEO in the preceding example. </p>
<p>
After setting one of these options to a nonzero value, I/O through the Windows Sockets calls fails with the error WSAETIMEDOUT if the request cannot be satisfied within the specified timeout. If a request times out, an application has no guarantees as to how much data was actually sent or received in the I/O call.</p>
<p>
The following socket option is used in conjunction with the MS Extension function AcceptEx.</p>
<p>
SO_UPDATE_ACCEPT_CONTEXT</p>
<p>&nbsp;</p></body>
</HTML>

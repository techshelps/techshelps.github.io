<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Protocol-Independent Name Resolution</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_protocol_independent_name_resolution_2"></a>Protocol-Independent Name Resolution</h2>
<p>
In developing a protocol-independent client/server application, there are two basic requirements that exist with respect to name resolution and registration: 
<ul>
<li>
The ability of the server half of the application (hereafter referred to as a service) to register its existence within (or become accessible to) one or more name spaces</li>
<li>
The ability of the client application to find the service within a name space and obtain the required transport protocol and addressing information </li>
</ul>
<p>
For those accustomed to developing TCP/IP based applications, this may seem to involve little more than looking up a host address and then using an agreed upon port number. Other networking schemes, however, allow the location of the service, the protocol used for the service, and other attributes to be discovered at run-time. To accommodate the broad diversity of capabilities found in existing name services, the Windows Sockets 2 interface adopts the model described below.</p>
<p>&nbsp;</p></body>
</HTML>

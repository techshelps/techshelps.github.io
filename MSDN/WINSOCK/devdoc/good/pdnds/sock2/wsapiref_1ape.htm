<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSADuplicateSocket</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsaduplicatesocket_2"></a>WSADuplicateSocket</h1>
<p>
The Windows Sockets <b>WSADuplicateSocket</b> function returns a <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure that can be used to create a new socket descriptor for a shared socket.</p>
<pre><code><b>int WSADuplicateSocket (
  SOCKET</b><i> s</i><b>,                          </b>
<b>  DWORD</b><i> dwProcessId</i><b>,                 </b>
<b>  LPWSAPROTOCOL_INFO</b><i> lpProtocolInfo  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying the local socket.</dd>
<dt>
<i>dwProcessId</i></dt>
<dd>
[in] The process ID of the target process in which the duplicated socket will be used.</dd>
<dt>
<i>lpProtocolInfo</i></dt>
<dd>
[out] A pointer to a buffer allocated by the client that is large enough to contain a <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. The service provider copies the protocol info structure contents to this buffer.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSADuplicateSocket</b> function is used to enable socket sharing between processes. A source process calls <b>WSADuplicateSocket</b> to obtain a special <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. It uses some interprocess communications (IPC) mechanism to pass the contents of this structure to a target process, which in turn uses it in a call to <a href="wsapiref_533m.htm"><b>WSASocket</b></a> to obtain a descriptor for the duplicated socket. The special <b>WSAPROTOCOL_INFO</b> structure can only be used once by the target process.</p>
<p>
Sockets can be shared among threads in a given process without using the <b>WSADuplicateSocket</b> function because a socket descriptor is valid in all threads of a process</p>
<p>
One possible scenario for establishing and handing off a shared socket is illustrated below:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=48%>Source Process</th>
<th align=left width=20%>IPC</th>
<th align=left width=32%>Destination Process</th>
</tr>
<tr valign=top>
<td width=48%>1) WSASocket, WSAConnect</td>
<td width=20%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=48%>2) Request target process ID</td>
<td width=20%><font face="Symbol">Þ</font></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=20%></td>
<td width=32%>3) Receive process ID request and respond</td>
</tr>
<tr valign=top>
<td width=48%>4) Receive process ID</td>
<td width=20%><font face="Symbol">Ü</font></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=48%>5) Call WSADuplicateSocket to get a special <b>WSAPROTOCOL_INFO</b> structure</td>
<td width=20%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=48%>6) Send <b>WSAPROTOCOL_INFO</b> structure to target</td>
<td width=20%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=20%><font face="Symbol">Þ</font></td>
<td width=32%>7) Receive <b>WSAPROTOCOL_INFO</b> structure</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=20%></td>
<td width=32%>8) Call WSASocket to create shared socket descriptor.</td>
</tr>
<tr valign=top>
<td width=48%>10) closesocket</td>
<td width=20%></td>
<td width=32%>9)Use shared socket for data exchange</td>
</tr>
</table><br>
<p>
The descriptors that reference a shared socket can be used independently for I/O. However, the Windows Sockets interface does not implement any type of access control so it is up to the processes involved to coordinate their operations on a shared socket. Shared sockets are typically used to have one process that is responsible for creating sockets and establishing connections, and other processes that are responsible for information exchange.</p>
<p>
All of the state information associated with a socket is held in common across all the descriptors because the socket descriptors are duplicated and not the actual socket. For example, a <a href="wsapiref_94aa.htm"><b>setsockopt</b></a> operation performed using one descriptor is subsequently visible using a <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a> from any or all descriptors. A process can call <a href="wsapiref_714i.htm"><b>closesocket</b></a> on a duplicated socket and the descriptor will become deallocated. The underlying socket, however, will remain open until <b>closesocket</b> is called by the last remaining descriptor.</p>
<p>
Notification on shared sockets is subject to the usual constraints of <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a> and <a href="wsapiref_34aa.htm"><b>WSAEventSelect</b></a>. Issuing either of these calls using any of the shared descriptors cancels any previous event registration for the socket, regardless of which descriptor was used to make that registration. Thus, for example, a shared socket cannot deliver FD_READ events to process A and FD_WRITE events to process B. For situations when such tight coordination is required, developers would be advised to use threads instead of separate processes.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSADuplicateSocket</b> returns zero. Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling <b>WSAGetLastError</b>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINVAL</td>
<td width=59%>Indicates that one of the specified parameters was invalid.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEMFILE</td>
<td width=59%>No more socket descriptors are available.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOBUFS</td>
<td width=59%>No buffer space is available. The socket cannot be created.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTSOCK</td>
<td width=59%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEFAULT</td>
<td width=59%>The <i>lpProtocolInfo</i> argument is not a valid part of the user address space.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_533m.htm"><b>WSASocket</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>closesocket</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_closesocket_2"></a>closesocket</h1>
<p>
The Windows Sockets <b>closesocket</b> function closes an existing socket.</p>
<pre><code><b>int closesocket (
  SOCKET</b><i> s  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a socket to close.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>closesocket</b> function closes a socket. Use it to release the socket descriptor <i>s</i> so further references to <i>s</i> will fail with the error WSAENOTSOCK. If this is the last reference to an underlying socket, the associated naming information and queued data are discarded. Any pending blocking, asynchronous calls issued by any thread in this process are canceled without posting any notification messages. </p>
<p>
Any pending overlapped send and receive operations (<a href="wsapiref_97n6.htm"><b>WSASend</b></a>/<a href="wsapiref_752q.htm"><b>WSASendTo</b></a>/<a href="wsapiref_4z1u.htm"><b>WSARecv</b></a>/<a href="wsapiref_4wky.htm"><b>WSARecvFrom</b></a> with an overlapped socket) issued by any thread in this process are also canceled. Any event, completion routine, or completion port action specified for these overlapped operations is performed. The pending overlapped operations fail with the error status WSA_OPERATION_ABORTED. </p>
<p>
An application should always have a matching call to <b>closesocket</b> for each successful call to <a href="wsapiref_2qr6.htm"><b>socket</b></a> to return any socket resources to the system.</p>
<p>
The semantics of <b>closesocket</b> are affected by the socket options SO_LINGER and SO_DONTLINGER as follows (SO_DONTLINGER is enabled by default; SO_LINGER is disabled):</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=31%>Option</th>
<th align=left width=18%>Interval</th>
<th align=left width=24%>Type of close</th>
<th align=left width=27%>Wait for close?</th>
</tr>
<tr valign=top>
<td width=31%>SO_DONTLINGER</td>
<td width=18%>Do not care</td>
<td width=24%>Graceful</td>
<td width=27%>No</td>
</tr>
<tr valign=top>
<td width=31%>SO_LINGER</td>
<td width=18%>Zero</td>
<td width=24%>Hard</td>
<td width=27%>No</td>
</tr>
<tr valign=top>
<td width=31%>SO_LINGER</td>
<td width=18%>Nonzero</td>
<td width=24%>Graceful</td>
<td width=27%>Yes</td>
</tr>
</table><br>
<p>
If SO_LINGER is set with a zero time-out interval (that is, the <a href="strucetc_5roy.htm"><b>LINGER</b></a> structure members <b>l_onoff</b> is not zero and <b>l_linger </b>is zero), <b>closesocket</b> is not blocked even if queued data has not yet been sent or acknowledged. This is called a "hard" or "abortive" close, because the socket's virtual circuit is reset immediately, and any unsent data is lost. Any <b>recv</b> call on the remote side of the circuit will fail with WSAECONNRESET.</p>
<p>
If SO_LINGER is set with a nonzero time-out interval on a blocking socket, the <b>closesocket</b> call blocks on a blocking socket until the remaining data has been sent or until the time-out expires. This is called a graceful disconnect. If the time-out expires before all data has been sent, the Windows Sockets implementation terminates the connection before <b>closesocket</b> returns.</p>
<p>
Enabling SO_LINGER with a nonzero time-out interval on a nonblocking socket is not recommended. In this case, the call to <b>closesocket</b> will fail with an error of <a href="errors_0oaa.htm#_win32_wsaewouldblock_2">WSAEWOULDBLOCK</a> if the close operation cannot be completed immediately. If <b>closesocket</b> fails with WSAEWOULDBLOCK the socket handle is still valid, and a disconnect is not initiated. The application must call <b>closesocket</b> again to close the socket.If SO_DONTLINGER is set on a stream socket by setting the <b>l_onoff </b>member of the <a href="strucetc_5roy.htm"><b>LINGER</b></a> structure to zero, the <b>closesocket</b> call will return immediately and does not receive WSAWOULDBLOCK whether the socket is blocking or nonblocking. However, any data queued for transmission will be sent, if possible, before the underlying socket is closed. This is also called a graceful disconnect. In this case, the Windows Sockets provider cannot release the socket and other resources for an arbitrary period, thus affecting applications that expect to use all available sockets. This is the default behavior (SO_DONTLINGER is set by default).</p>
<p>
<b>Note</b>  To assure that all data is sent and received on a connection, an application should call <a href="wsapiref_60z6.htm"><b>shutdown</b></a> before calling <b>closesocket</b> (see <a href="ovrvw3_3she.htm">Graceful shutdown, linger options and socket closure</a> for more information). Also note, an FD_CLOSE network event will<i> not</i> be posted after <b>closesocket</b> is called.</p>
<p>
Here is a summary of <b>closesocket</b> behavior:
<ul>
<li>
if SO_DONTLINGER enabled (the default setting) it always returns immediately – connection is gracefully closed "in the background"</li>
<li>
if SO_LINGER enabled with a zero time-out: it always returns immediately - connection is reset/terminated</li>
<li>
if SO_LINGER enabled with nonzero time-out:<p>
– with blocking socket it blocks until all data sent or time-out expires
<p>
– with nonblocking socket it returns immediately indicating failure
</li>
</ul>
<p>
For additional information please see <a href="ovrvw3_3she.htm">Graceful shutdown, linger options and socket closure</a> for more information.</p>
<p>
<b>Windows CE:</b> Windows CE does not support the WSAEINTR error value.</p>
<p>
For IrSocket implementation: 
<ul>
<li>
The Af_irda.h file must be explicitly included.</li>
<li>
The WSAENETDOWN error value is not supported.</li>
<li>
The standard linger options are supported.<p>
Although IrDA does not provide a graceful close, IrSockets will defer closing until receive queues are purged. Thus, an application can send data and immediately call the <b>socket</b> function confident that the receiver will copy the data before receiving an FD_CLOSE message.
</li>
</ul>
<p>
.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>closesocket</b> returns zero. Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTSOCK</td>
<td width=59%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINTR</td>
<td width=59%>The (blocking) Windows Socket 1.1 call was canceled through <a href="wsapiref_704y.htm"><b>WSACancelBlockingCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEWOULDBLOCK</td>
<td width=59%>The socket is marked as nonblocking and SO_LINGER is set to a nonzero time-out value.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Use version 1.0 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_13aq.htm"><b>accept</b></a>, <a href="wsapiref_7dde.htm"><b>ioctlsocket</b></a>, <a href="wsapiref_94aa.htm"><b>setsockopt</b></a>, <a href="wsapiref_2qr6.htm"><b>socket</b></a>, <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a>, <a href="wsapiref_1ape.htm"><b>WSADuplicateSocket</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

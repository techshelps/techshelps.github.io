<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSACancelAsyncRequest</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsacancelasyncrequest_2"></a>WSACancelAsyncRequest</h1>
<p>
The Windows Sockets <b>WSACancelAsyncRequest</b> function cancels an incomplete asynchronous operation.</p>
<pre><code><b>int WSACancelAsyncRequest (
  HANDLE</b><i> hAsyncTaskHandle  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hAsyncTaskHandle</i></dt>
<dd>
[in] The handle that specifies the asynchronous operation to be canceled.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSACancelAsyncRequest</b> function is used to cancel an asynchronous operation that was initiated by one of the WSAAsyncGetXByY functions such as <a href="wsapiref_7bhu.htm"><b>WSAAsyncGetHostByName</b></a>. The operation to be canceled is identified by the <i>hAsyncTaskHandle</i> parameter, which should be set to the asynchronous task handle as returned by the initiating WSAAsyncGetXByY function.</p>
<p>
An attempt to cancel an existing asynchronous WSAAsyncGetXByY operation can fail with an error code of WSAEALREADY for two reasons. First, the original operation has already completed and the application has dealt with the resultant message. Second, the original operation has already completed but the resultant message is still waiting in the application window queue.</p>
<h4>Return Values</h4>
<p>
The value returned by <b>WSACancelAsyncRequest</b> is zero if the operation was successfully canceled. Otherwise, the value SOCKET_ERROR is returned, and a specific error number can be retrieved by calling <b>WSAGetLastError</b>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <b>WSAStartup</b> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINVAL</td>
<td width=59%>Indicates that the specified asynchronous task handle was invalid</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEALREADY</td>
<td width=59%>The asynchronous routine being canceled has already completed.</td>
</tr>
</table><br>
<p>
<b>Note</b>  It is unclear whether the application can usefully distinguish between WSAEINVAL and WSAEALREADY, since in both cases the error indicates that there is no asynchronous operation in progress with the indicated handle. [Trivial exception: zero is always an invalid asynchronous task handle.] The Windows Sockets specification does not prescribe how a conformant Windows Sockets provider should distinguish between the two cases. For maximum portability, a Windows Sockets application should treat the two errors as equivalent.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_4hv6.htm"><b>WSAAsyncGetHostByAddr</b></a>, <a href="wsapiref_7bhu.htm"><b>WSAAsyncGetHostByName</b></a>, <a href="wsapiref_99bm.htm"><b>WSAAsyncGetProtoByName</b></a>, <a href="wsapiref_2xo2.htm"><b>WSAAsyncGetProtoByNumber</b></a>, <a href="wsapiref_3she.htm"><b>WSAAsyncGetServByName</b></a>, <a href="wsapiref_5jle.htm"><b>WSAAsyncGetServByPort</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSAQuerySet</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsaqueryset_2"></a>WSAQuerySet</h1>
<pre><code>typedef struct _WSAQuerySetW {
    DWORD           dwSize;
    LPWSTR          lpszServiceInstanceName;
    LPGUID          lpServiceClassId;
    LPWSAVERSION    lpVersion;
    LPWSTR          lpszComment;
    DWORD           dwNameSpace;
    LPGUID          lpNSProviderId;
    LPWSTR          lpszContext;
    DWORD           dwNumberOfProtocols;
    LPAFPROTOCOLS   lpafpProtocols;
    LPWSTR          lpszQueryString;
    DWORD           dwNumberOfCsAddrs;
    LPCSADDR_INFO   lpcsaBuffer;
    DWORD           dwOutputFlags;
    LPBLOB          lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;
</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwSize</i></dt>
<dd>
Must be set to sizeof(<b>WSAQUERYSET</b>). This is a versioning mechanism.</dd>
<dt>
dwOutputflags</dt>
<dd>
Ignored for queries.</dd>
<dt>
<i>lpszServiceInstanceName</i></dt>
<dd>
(Optional) Referenced string contains service name. The semantics for wildcarding within the string are not defined, but can be supported by certain name space providers.</dd>
<dt>
<i>lpServiceClassId</i></dt>
<dd>
(Required) The GUID corresponding to the service class.</dd>
<dt>
<i>lpVersion</i></dt>
<dd>
(Optional) References desired version number and provides version comparison semantics (that is, version must match exactly, or version must be not less than the value supplied).</dd>
<dt>
<i>lpszComment</i></dt>
<dd>
Ignored for queries.</dd>
<dt>
<i>dwNameSpace<sup>1</sup></i></dt>
<dd>
Identifier of a single name space in which to constrain the search, or NS_ALL to include all name spaces.</dd>
<dt>
<i>lpNSProviderId</i></dt>
<dd>
(Optional) References the GUID of a specific name space provider, and limits the query to this provider only.</dd>
<dt>
<i>lpszContext</i></dt>
<dd>
(Optional) Specifies the starting point of the query in a hierarchical name space.</dd>
<dt>
<i>dwNumberOfProtocols</i></dt>
<dd>
Size of the protocol constraint array, can be zero.</dd>
<dt>
<i>lpafpProtocols</i></dt>
<dd>
(Optional) References an array of AFPROTOCOLS structure. Only services that utilize these protocols will be returned.</dd>
<dt>
<i>lpszQueryString</i></dt>
<dd>
<i>(Optional) </i>Some namespaces (such as whois++) support enriched SQL like queries that are contained in a simple text string. This parameter is used to specify that string.</dd>
<dt>
<i>dwNumberOfCsAddrs</i></dt>
<dd>
Ignored for queries.</dd>
<dt>
<i>lpcsaBuffer</i></dt>
<dd>
Ignored for queries.</dd>
<dt>
<i>lpBlob</i></dt>
<dd>
<i>(Optional) </i>This is a pointer to a provider-specific entity.
</dd>
</dl>
<p>
1&nbsp;&nbsp;&nbsp;&nbsp;See the Important note below</p>
<p>
<b>Important</b>  In most instances, applications interested in only a particular transport protocol should constrain their query by address family and protocol rather than by name space. This would allow an application that needs to locate a TCP/IP service, for example, to have its query processed by all available name spaces such as the local hosts file, DNS, and NIS.</p>
<p>&nbsp;</p></body>
</HTML>

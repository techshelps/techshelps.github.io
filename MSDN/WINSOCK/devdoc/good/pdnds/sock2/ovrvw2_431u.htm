<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Flow Specification Quality of Service</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_flow_specification_quality_of_service_2"></a>Flow Specification Quality of Service</h2>
<p>
The basic Quality of Service (QOS) mechanism in Windows Sockets 2 descends from the flow specification as described in RFC 1363, dated September 1992. Following is a brief overview of this concept: </p>
<p>
Flow specifications describe a set of characteristics about a proposed, unidirectional flow through the network. An application can associate a pair of flow specifications with a socket (one for each direction) at the time a connection request is made using <a href="wsapiref_8kc2.htm"><b>WSAConnect</b></a>, or at other times using <a href="wsapiref_6ik2.htm"><b>WSAIoctl</b></a> with the SIO_SET_QOS/SIO_SET_GROUP_QOS command. Flow specifications indicate parametrically what level of service is required and provide a feedback mechanism for applications to use in adapting to network conditions.</p>
<p>
This is the usage model for QOS in Windows Sockets 2: An application can establish its QOS requirements at any time with <b>WSAIoctl</b> or coincident with the connect operation with <b>WSAConnect</b>. For connection-oriented transports, it is often most convenient for an application to use the <b>WSAConnect</b> function because any QOS values supplied at connect time supersede those supplied earlier with the <b>WSAIoctl</b> function. If the <b>WSAConnect</b> function completes successfully, the application knows that its QOS request has been honored by the network. The application is then free to use the socket for data exchange. If the connect operation fails because of limited resources, an appropriate error indication is given. At this point, the application can scale down its service request and try again, or it can give up.</p>
<p>
Transport providers update the associated <a href="strucetc_77qq.htm">flowspec</a> structures after every connection attempt (successful or otherwise) in order to indicate, as well as possible, the existing network conditions. (Updating with the <a href="ovrvw2_48du.htm"><b>Default Values</b></a> will indicate that information about the current network conditions is not available.) This update from the service provider about current network conditions is especially useful when the application's QOS request consists entirely of the default (unspecified) values, which any service provider should be able to meet.</p>
<p>
Applications expect to use this information about current network conditions to guide their use of the network, including any subsequent QOS requests. However, the information provided by the transport in the updated flowspec structure is only an indication. It might be little more than a rough estimate that only applies to the first hop and not to the complete, end-to-end connection. The application must take appropriate precautions in interpreting this information.</p>
<p>
Connectionless sockets can also use the <a href="wsapiref_8kc2.htm"><b>WSAConnect</b></a> function to establish a specified QOS level to a single designated peer. Otherwise, connectionless sockets use the <a href="wsapiref_6ik2.htm"><b>WSAIoctl</b></a> function to stipulate the initial QOS request, and any subsequent QOS renegotiations.</p>
<p>
Even after a flow is established, conditions in the network can change or one of the communicating parties might invoke a QOS renegotiation that results in a reduction (or increase) in the available service level. A notification mechanism is included that utilizes the usual Windows Sockets notification techniques (FD_QOS and FD_GROUP_QOS events) to indicate to the application that QOS levels have changed.</p>
<p>
A service provider generates FD_QOS/FD_GROUP_QOS notifications when the current level of service supported is significantly different (especially in the negative direction) from what was last reported as a basic guideline. The application should use the <b>WSAIoctl</b> function with SIO_GET_QOS and/or SIO_GET_GROUP_QOS to retrieve the corresponding <a href="strucetc_77qq.htm">flowspec</a> structure and examine them in order to discover what aspect of the service level has changed. The QOS structures will be updated where appropriate. regardless of whether FD_QOS/FD_GROUP_QOS is registered and generated.</p>
<p>
If the updated level of service is not acceptable, the application can adjust itself to accommodate it, attempt to renegotiate QOS, or close the socket. If a renegotiation is attempted, a successful return from the <b>WSAIoctl</b> function indicates that the revised QOS request was accepted., Otherwise, an appropriate error will be indicated. </p>
<p>
The flow specifications proposed for Windows Sockets 2 divide QOS characteristics into the following general areas:
<dl>
<dt>
Source Traffic Description</dt>
<dd>
The manner in which the application's traffic will be injected into the network. This includes specifications for the token rate, the token bucket size, and the peak bandwidth. Though the bandwidth requirement is expressed in terms of a token rate, a service provider need not implement token buckets. Any traffic management scheme that yields equivalent behavior is permitted.</dd>
<dt>
Latency</dt>
<dd>
Upper limits on the amount of delay and delay variation that are acceptable.</dd>
<dt>
Level of service guarantee</dt>
<dd>
Whether or not an absolute guarantee is required as opposed to best effort. Providers that have no feasible way to provide the level of service requested are expected to fail the connection attempt.</dd>
<dt>
Provider-specific parameters</dt>
<dd>
The flow specification itself can be extended in ways that are particular to specific providers.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

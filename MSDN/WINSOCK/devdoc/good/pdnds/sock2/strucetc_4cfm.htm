<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSAPROTOCOL_INFO</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsaprotocol_info_2"></a>WSAPROTOCOL_INFO</h1>
<pre><code>typedef struct _WSAPROTOCOL_INFOW {
    DWORD dwServiceFlags1;
    DWORD dwServiceFlags2;
    DWORD dwServiceFlags3;
    DWORD dwServiceFlags4;
    DWORD dwProviderFlags;
    GUID ProviderId;
    DWORD dwCatalogEntryId;
    WSAPROTOCOLCHAIN ProtocolChain;
    int iVersion;
    int iAddressFamily;
    int iMaxSockAddr;
    int iMinSockAddr;
    int iSocketType;
    int iProtocol;
    int iProtocolMaxOffset;
    int iNetworkByteOrder;
    int iSecurityScheme;
    DWORD dwMessageSize;
    DWORD dwProviderReserved;
    WCHAR szProtocol[WSAPROTOCOL_LEN+1];
} WSAPROTOCOL_INFOW, FAR * LPWSAPROTOCOL_INFOW;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwServiceFlags1</b></dt>
<dd>
A bitmask describing the services provided by the protocol. The following values are possible:
<dl>
<dt>
XP1_CONNECTIONLESS</dt>
<dd>
The protocol provides connectionless (datagram) service. If not set, the protocol supports connection-oriented data transfer.</dd>
<dt>
XP1_GUARANTEED_DELIVERY</dt>
<dd>
The protocol guarantees that all data sent will reach the intended destination.</dd>
<dt>
XP1_GUARANTEED_ORDER</dt>
<dd>
The protocol guarantees that data will only arrive in the order in which it was sent and that it will not be duplicated. This characteristic does not necessarily mean that the data will always be delivered, but that any data that is delivered is delivered in the order in which it was sent.</dd>
<dt>
XP1_MESSAGE_ORIENTED</dt>
<dd>
The protocol honors message boundaries, as opposed to a stream-oriented protocol where there is no concept of message boundaries.</dd>
<dt>
XP1_PSEUDO_STREAM</dt>
<dd>
This is a message oriented protocol, but message boundaries will be ignored for all receives. This is convenient when an application does not desire message framing to be done by the protocol.</dd>
<dt>
XP1_GRACEFUL_CLOSE</dt>
<dd>
The protocol supports two-phase (graceful) close. If not set, only abortive closes are performed.</dd>
<dt>
XP1_EXPEDITED_DATA</dt>
<dd>
The protocol supports expedited (urgent) data.</dd>
<dt>
XP1_CONNECT_DATA</dt>
<dd>
The protocol supports connect data.</dd>
<dt>
XP1_DISCONNECT_DATA</dt>
<dd>
The protocol supports disconnect data.</dd>
<dt>
XP1_INTERRUPT</dt>
<dd>
This bit is reserved.</dd>
<dt>
XP1_SUPPORT_BROADCAST</dt>
<dd>
The protocol supports a broadcast mechanism.</dd>
<dt>
XP1_SUPPORT_MULTIPOINT</dt>
<dd>
The protocol supports a multipoint or multicast mechanism. Control and data plane attributes are indicated below.  </dd>
<dt>
XP1_MULTIPOINT_CONTROL_PLANE</dt>
<dd>
Indicates whether the control plane is rooted (value = 1) or non-rooted (value = 0).</dd>
<dt>
XP1_MULTIPOINT_DATA_PLANE</dt>
<dd>
Indicates whether the data plane is rooted (value = 1) or non-rooted (value = 0).</dd>
<dt>
XP1_QOS_SUPPORTED</dt>
<dd>
The protocol supports quality of service requests.</dd>
<dt>
XP1_UNI_SEND</dt>
<dd>
The protocol is unidirectional in the send direction.</dd>
<dt>
XP1_UNI_RECV</dt>
<dd>
the protocol is unidirectional in the recv direction.</dd>
<dt>
XP1_IFS_HANDLES</dt>
<dd>
The socket descriptors returned by the provider are operating system Installable File System (IFS) handles.</dd>
<dt>
XP1_PARTIAL_MESSAGE</dt>
<dd>
The MSG_PARTIAL flag is supported in <b>WSASend</b> and <b>WSASendTo</b>.
</dd>
</dl>
</dd>
</dl>
<p>
Note that only one of XP1_UNI_SEND or XP1_UNI_RECV may be set. If a protocol can be unidirectional in either direction, two <b>WSAPROTOCOL_INFOW</b> structures should be used. When neither bit is set, the protocol is considered to be bi-directional.
<dl>
<dt>
<b>dwServiceFlags2</b></dt>
<dd>
Reserved for additional protocol attribute definitions.</dd>
<dt>
<b>dwServiceFlags3</b></dt>
<dd>
Reserved for additional protocol attribute definitions.</dd>
<dt>
<b>dwServiceFlags4</b></dt>
<dd>
Reserved for additional protocol attribute definitions.</dd>
<dt>
<b>dwProviderFlags</b></dt>
<dd>
Provide information about how this protocol is represented in the protocol catalog. The following flag values are possible:
<dl>
<dt>
PFL_MULTIPLE_PROTO_ENTRIES</dt>
<dd>
Indicates that this is one of two or more entries for a single protocol (from a given provider) which is capable of implementing multiple behaviors. An example of this is SPX which, on the receiving side, can behave either as a message oriented or a stream oriented protocol.</dd>
<dt>
PFL_RECOMMENDED_PROTO_ENTRY</dt>
<dd>
Indicates that this is the recommended or most frequently used entry for a protocol which is capable of implementing multiple behaviors.</dd>
<dt>
PFL_HIDDEN</dt>
<dd>
Set by a provider to indicate to the WS2_32.DLL that this protocol should not be returned in the result buffer generated by <b>WSAEnumProtocols</b>. Obviously, a Windows Sockets 2 application should never see an entry with this bit set.</dd>
<dt>
PFL_MATCHES_PROTOCOL_ZERO</dt>
<dd>
Indicates that a value of zero in the <i>protocol</i> parameter of <b>socket</b> or <b>WSASocket</b> matches this protocol entry.</dd>
</dl>
</dd>
<dt>
<b>ProviderId</b></dt>
<dd>
A globally unique identifier assigned to the provider by the service provider vendor. This value is useful for instances where more than one service provider is able to implement a particular protocol. An application may use the <i>dwProviderId </i>value to distinguish between providers that might otherwise be indistinguishable.</dd>
<dt>
<b>dwCatalogEntryId</b></dt>
<dd>
A unique identifier assigned by the WS2_32.DLL for each <b>WSAPROTOCOL_INFOW</b> structure.
<p>
<a href="strucetc_9w1e.htm">WSAPROTOCOLCHAIN</a> ProtocolChain;

<p>
If the length of the chain is 0, this <b>WSAPROTOCOL_INFOW</b> entry represents a layered protocol which has Windows Sockets 2 SPI as both its top and bottom edges. If the length of the chain equals 1, this entry represents a base protocol whose Catalog Entry ID is in the <i>dwCatalogEntryId</i> field of the <b>WSAPROTOCOL_INFOW</b> structure. If the length of the chain is larger than 1, this entry represents a protocol chain which consists of one or more layered protocols on top of a base protocol. The corresponding Catalog Entry IDs are in the ProtocolChain.ChainEntries array starting with the layered protocol at the top (the zero element in the ProtocolChain.ChainEntries array) and ending with the base protocol. Refer to the Windows Sockets 2 Service Provider Interface specification for more information on protocol chains.
</dd>
<dt>
<b>iVersion</b></dt>
<dd>
Protocol version identifier.</dd>
<dt>
<b>iAddressFamily</b></dt>
<dd>
The value to pass as the address family parameter to the <b>socket</b>/<b>WSASocket</b> function in order to open a socket for this protocol. This value also uniquely defines the structure of protocol addresses (SOCKADDRs) used by the protocol.</dd>
<dt>
<b>iMaxSockAddr</b></dt>
<dd>
The maximum address length.</dd>
<dt>
<b>iMinSockAddr</b></dt>
<dd>
The minimum address length.</dd>
<dt>
<b>iSocketType</b></dt>
<dd>
The value to pass as the socket type parameter to the <b>socket</b> function in order to open a socket for this protocol.</dd>
<dt>
<b>iProtocol</b></dt>
<dd>
The value to pass as the protocol parameter to the <b>socket</b> function in order to open a socket for this protocol.</dd>
<dt>
<b>iProtocolMaxOffset</b></dt>
<dd>
The maximum value that may be added to <i>iProtocol</i> when supplying a value for the <i>protocol</i> parameter to <b>socket</b> and <b>WSASocket</b>. Not all protocols allow a range of values. When this is the case <i>iProtocolMaxOffset </i>will be zero.</dd>
<dt>
<b>iNetworkByteOrder</b></dt>
<dd>
Currently these values are manifest constants (BIGENDIAN and LITTLEENDIAN) that indicate either "big-endian" or "little-endian" with the values 0 and 1 respectively.</dd>
<dt>
<b>iSecurityScheme</b></dt>
<dd>
Indicates the type of security scheme employed (if any). A value of SECURITY_PROTOCOL_NONE is used for protocols that do not incorporate security provisions.</dd>
<dt>
<b>dwMessageSize</b></dt>
<dd>
The maximum message size supported by the protocol. This is the maximum size that can be sent from any of the host's local interfaces. For protocols which do not support message framing, the actual maximum that can be sent to a given address may be less. There is no standard provision to determine the maximum inbound message size. The following special values are defined:
<dl>
<dt>
0</dt>
<dd>
The protocol is stream-oriented and hence the concept of message size is not relevant.</dd>
<dt>
0x1</dt>
<dd>
The maximum outbound (send) message size is dependent on the underlying network MTU (maximum sized transmission unit) and hence cannot be known until after a socket is bound. Applications should use <b>getsockopt</b> to retrieve the value of SO_MAX_MSG_SIZE after the socket has been bound to a local address.</dd>
<dt>
0xFFFFFFFF</dt>
<dd>
The protocol is message-oriented, but there is no maximum limit to the size of messages that may be transmitted.</dd>
</dl>
</dd>
<dt>
<b>dwProviderReserved</b></dt>
<dd>
Reserved for use by service providers.</dd>
<dt>
<b>szProtocol</b></dt>
<dd>
An array of characters that contains a human-readable name identifying the protocol, for example "SPX2". The maximum number of characters allowed is WSAPROTOCOL_LEN, which is defined to be 255.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

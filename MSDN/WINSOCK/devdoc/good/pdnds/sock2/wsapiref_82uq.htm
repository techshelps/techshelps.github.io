<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSASetService</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsasetservice_2"></a>WSASetService</h1>
<p>
The Windows Sockets <b>WSASetService</b> function registers or deregisters a service instance within one or more name spaces. This function can be used to affect a specific name space provider, all providers associated with a specific name space, or all providers across all name spaces.</p>
<pre><code><b>INT WSASetService(
  LPWSAQUERYSET</b><i> lpqsRegInfo</i><b>,  </b>
<b>  WSAESETSERVICEOP</b><i> essOperation</i><b>,  </b>
<b>  DWORD</b><i> dwControlFlags        </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpqsRegInfo</i></dt>
<dd>
[in] A pointer to the service information for registration or deregistration.</dd>
<dt>
<i>essOperation</i></dt>
<dd>
[in] An enumeration whose values include:
<dl>
<dt>
RNRSERVICE_REGISTER</dt>
<dd>
Register the service. For SAP, this means sending out a periodic broadcast. This is a NOP for the DNS name space. For persistent data stores, this means updating the address information.</dd>
<dt>
RNRSERVICE_DEREGISTER</dt>
<dd>
Deregister the service. For SAP, this means stop sending out the periodic broadcast. This is a NOP for the DNS name space. For persistent data stores this means deleting address information.</dd>
<dt>
RNRSERVICE_DELETE</dt>
<dd>
Delete the service from dynamic name and persistent spaces. For services represented by multiple <a href="strucetc_4zua.htm"><b>CSADDR_INFO</b></a> structures (using the SERVICE_MULTIPLE flag), only the supplied address will be deleted, and this much match exactly the corresponding CSADD_INFO structure that was supplied when the service was registered.</dd>
</dl>
</dd>
<dt>
<i>dwControlFlags</i></dt>
<dd>
[in] The meaning of <i>dwControlFlags</i> is dependent on the following values:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Flag</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>SERVICE MULTIPLE</td>
<td width=67%>Controls scope of operation. When clear, service addresses are managed as a group. A register or deregister invalidates all existing addresses before adding the given address set. When set, the action is only performed on the given address set. A register does not invalidate existing addresses and a deregister only invalidates the given set of addresses.</td>
</tr>
</table><br>

</dd>
</dl>
<p>
The available values for essOperation and dwControlFlags combine to give meanings as shown in the following table:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=24%>Operation</th>
<th align=left width=21%>Flags</th>
<th align=left width=27%>Service already exists</th>
<th align=left width=28%>Service does not exist</th>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_REGISTER</td>
<td width=21%>none</td>
<td width=27%>Overwrite the object. Use only addresses specified. Object is REGISTERED.</td>
<td width=28%>Create a new object. Use only addresses specified. Object is REGISTERED.</td>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_REGISTER</td>
<td width=21%>SERVICE<br>
_MULTIPLE</td>
<td width=27%>Update object. Add new addresses to existing set. Object is REGISTERED.</td>
<td width=28%>Create a new object. Use all addresses specified. Object is REGISTERED.</td>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_DEREGISTER</td>
<td width=21%>none</td>
<td width=27%>Remove all addresses, but do not remove object from name space. Object is DEREGISTERED.</td>
<td width=28%>WSASERVICE<br>
_NOT_FOUND</td>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_DEREGISTER</td>
<td width=21%>SERVICE<br>
_MULTIPLE</td>
<td width=27%>Update object. Remove only addresses that are specified. Only mark object as DEREGISTERED if no addresses present. Do not remove from the name space.</td>
<td width=28%>WSASERVICE<br>
_NOT_FOUND</td>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_DELETE</td>
<td width=21%>none</td>
<td width=27%>Remove object from the name space.</td>
<td width=28%>WSASERVICE<br>
_NOT_FOUND</td>
</tr>
<tr valign=top>
<td width=24%>RNRSERVICE<br>
_DELETE</td>
<td width=21%>SERVICE<br>
_MULTIPLE</td>
<td width=27%>Remove only addresses that are specified. Only remove object from the name space if no addresses remain.</td>
<td width=28%>WSASERVICE<br>
_NOT_FOUND</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
SERVICE_MULTIPLE lets an application manage its addresses independently. This is useful when the application wants to manage its protocols individually or when the service resides on more than one machine. For instance, when a service uses more than one protocol, it may find that one listening socket aborts but the others remain operational. In this case, the service could deregister the aborted address without affecting the other addresses.</p>
<p>
When using SERVICE_MULTIPLE, an application must not let stale addresses remain in the object. This can happen if the application aborts without issuing a DEREGISTER request. When a service registers, it should store its addresses. On its next invocation, the service should explicitly deregister these old stale addresses before registering new addresses.</p>
<h4>Service Properties</h4>
<p>
The following table describes how service property data is represented in a <b>WSAQUERYSET</b> structure. Fields labeled as <i>(Optional) </i>can be supplied with a NULL pointer.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>WSAQUERYSET Field Name</th>
<th align=left width=54%>Service Property Description</th>
</tr>
<tr valign=top>
<td width=46%>Field Name</td>
<td width=54%>Service Property Description</td>
</tr>
<tr valign=top>
<td width=46%><i>dwSize</i></td>
<td width=54%>Must be set to sizeof(<b>WSAQUERYSET</b>). This is a versioning mechanism.</td>
</tr>
<tr valign=top>
<td width=46%><i>DwOutputFlags</i></td>
<td width=54%>Not applicable and ignored.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpszServiceInstanceName</i></td>
<td width=54%>Referenced string contains the service instance name.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpServiceClassId</i></td>
<td width=54%>The GUID corresponding to this service class.</td>
</tr>
<tr valign=top>
<td width=46%><i>lpVersion</i></td>
<td width=54%><i>(Optional)</i> Supplies service instance version number.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpszComment</i></td>
<td width=54%><i>(Optional) </i>An optional comment string.</td>
</tr>
<tr valign=top>
<td width=46%><i>DwNameSpace</i></td>
<td width=54%>See table below.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpNSProviderId</i></td>
<td width=54%>See table below.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpszContext</i></td>
<td width=54%><i>(Optional) </i>Specifies the starting point of the query in a hierarchical name space.</td>
</tr>
<tr valign=top>
<td width=46%><i>DwNumberOfProtocols</i></td>
<td width=54%>Ignored.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpafpProtocols</i></td>
<td width=54%>Ignored.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpszQueryString</i></td>
<td width=54%>Ignored.</td>
</tr>
<tr valign=top>
<td width=46%><i>DwNumberOfCsAddrs</i></td>
<td width=54%>The number of elements in the array of CSADDRO_INFO structures referenced by <i>lpcsaBuffer</i>.</td>
</tr>
<tr valign=top>
<td width=46%><i>LpcsaBuffer</i></td>
<td width=54%>A pointer to an array of CSADDRO_INFO structures that contain the address(es) that the service is listening on.</td>
</tr>
<tr valign=top>
<td width=46%><i>lpBlob</i></td>
<td width=54%><i>(Optional) </i>This is a pointer to a provider-specific entity.</td>
</tr>
</table><br>
<p>
As illustrated below, the combination of the <i>dwNameSpace</i> and <i>lpNSProviderId </i>parameters determine that name space providers are affected by this function.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=36%><i>dwNameSpace</i></th>
<th align=left width=27%><i>lpNSProviderId</i></th>
<th align=left width=37%>Scope of Impact</th>
</tr>
<tr valign=top>
<td width=36%>Ignored</td>
<td width=27%>Non-NULL</td>
<td width=37%>The specified name space provider</td>
</tr>
<tr valign=top>
<td width=36%>a valid name space ID</td>
<td width=27%>NULL </td>
<td width=37%>All name space providers that support the indicated name space</td>
</tr>
<tr valign=top>
<td width=36%>NS_ALL</td>
<td width=27%>NULL</td>
<td width=37%>All name space providers</td>
</tr>
</table><br>
<h4>Return Values</h4>
<p>
The return value for <b>WSASetService</b> is zero if the operation was successful. Otherwise, the value SOCKET_ERROR is returned, and a specific error number can be retrieved by calling <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=47%>WSAEACCES</td>
<td width=53%>The calling routine does not have sufficient privileges to install the Service.</td>
</tr>
<tr valign=top>
<td width=47%>WSAEINVAL</td>
<td width=53%>One or more required parameters were invalid or missing.</td>
</tr>
<tr valign=top>
<td width=47%>WSANOTINITIALIZED</td>
<td width=53%>The WiS2_32.DLL has not been initialized.  The application must first call <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> before calling any Windows Sockets functions</td>
</tr>
<tr valign=top>
<td width=47%>WSA NOT ENOUGH MEMORY</td>
<td width=53%>There was insufficient memory to perform the operation.</td>
</tr>
<tr valign=top>
<td width=47%>WSASERVICE NOT FOUND</td>
<td width=53%>No such service is known. The service cannot be found in the specified name space.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSAStartup</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsastartup_2"></a>WSAStartup</h1>
<p>
The Windows Sockets <b>WSAStartup</b> function initiates use of WS2_32.DLL by a process.</p>
<pre><code><b>int WSAStartup (
  WORD</b><i> wVersionRequested</i><b>,  </b>
<b>  LPWSADATA</b><i> lpWSAData  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>wVersionRequested</i></dt>
<dd>
[in] The highest version of Windows Sockets support that the caller can use. The high order byte specifies the minor version (revision) number; the low-order byte specifies the major version number.</dd>
<dt>
<i>lpWSAData</i></dt>
<dd>
[out] A pointer to the <a href="strucetc_42uq.htm"><b>WSADATA</b></a> data structure that is to receive details of the Windows Sockets implementation.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSAStartup</b> function <i>must</i> be the first Windows Sockets function called by an application or DLL. It allows an application or DLL to specify the version of Windows Sockets required and to retrieve details of the specific Windows Sockets implementation. The application or DLL can only issue further Windows Sockets functions after a successfully calling <b>WSAStartup</b>.</p>
<p>
In order to support future Windows Sockets implementations and applications that can have functionality differences from current version of Windows Sockets, a negotiation takes place in <b>WSAStartup</b>. The caller of <b>WSAStartup</b> and the WS2_32.DLL indicate to each other the highest version that they can support, and each confirms that the other's highest version is acceptable. Upon entry to <b>WSAStartup</b>, the WS2_32.DLL examines the version requested by the application. If this version is equal to or higher than the lowest version supported by the DLL, the call succeeds and the DLL returns in <i>wHighVersion </i>the highest version it supports and in <i>wVersion</i> the minimum of its high version and <i>wVersionRequested. </i>The WS2_32.DLL then assumes that the application will use <i>wVersion. </i>If the <i>wVersion</i> field of the <a href="strucetc_42uq.htm"><b>WSADATA</b></a> structure is unacceptable to the caller, it should call <a href="wsapiref_120i.htm"><b>WSACleanup</b></a> and either search for another WS2_32.DLL or fail to initialize.</p>
<p>
It is legal and possible for an application written to this version of the specification to successfully negotiate a higher version number than the version of this specification. In such a case, the application is only guaranteed access to higher-version functionality that fits within the syntax defined in this version, such as new Ioctl codes and new behavior of existing functions. New functions, for example, may be inaccessible. To be guaranteed full access to new syntax of a future version, the application must fully conform to that future version, such as compiling against a new header file, linking to a new library, or other special cases.</p>
<p>
This negotiation allows both a WS2_32.DLL and a Windows Sockets application to support a range of Windows Sockets versions. An application can  use WS2_32.DLL if there is any overlap in the version ranges. The following chart gives examples of how <b>WSAStartup</b> works in conjunction with different application and WS2_32.DLL versions:</p>
<table cellspacing=4 cols=6>
<tr valign=top>
<th align=left width=14%>App versions</th>
<th align=left width=15%>DLL Versions</th>
<th align=left width=17%><i>wVersion<br>
Requested</i></th>
<th align=left width=16%><i>wVersion</i></th>
<th align=left width=15%><i>wHigh<br>
Version</i></th>
<th align=left width=23%>End Result </th>
</tr>
<tr valign=top>
<td width=14%>1.1</td>
<td width=15%>1.1</td>
<td width=17%>1.1</td>
<td width=16%>1.1</td>
<td width=15%>1.1</td>
<td width=23%>use 1.1</td>
</tr>
<tr valign=top>
<td width=14%>1.0 1.1</td>
<td width=15%>1.0</td>
<td width=17%>1.1</td>
<td width=16%>1.0</td>
<td width=15%>1.0</td>
<td width=23%>use 1.0 </td>
</tr>
<tr valign=top>
<td width=14%>1.0</td>
<td width=15%>1.0 1.1</td>
<td width=17%>1.0</td>
<td width=16%>1.0</td>
<td width=15%>1.1</td>
<td width=23%>use 1.0</td>
</tr>
<tr valign=top>
<td width=14%>1.1</td>
<td width=15%>1.0 1.1</td>
<td width=17%>1.1</td>
<td width=16%>1.1</td>
<td width=15%>1.1</td>
<td width=23%>use 1.1</td>
</tr>
<tr valign=top>
<td width=14%>1.1</td>
<td width=15%>1.0</td>
<td width=17%>1.1</td>
<td width=16%>1.0</td>
<td width=15%>1.0</td>
<td width=23%>Application fails</td>
</tr>
<tr valign=top>
<td width=14%>1.0</td>
<td width=15%>1.1</td>
<td width=17%>1.0</td>
<td width=16%>---</td>
<td width=15%>---</td>
<td width=23%>WSAVERNOT<br>
SUPPORTED</td>
</tr>
<tr valign=top>
<td width=14%>1.0 1.1</td>
<td width=15%>1.0 1.1</td>
<td width=17%>1.1</td>
<td width=16%>1.1</td>
<td width=15%>1.1</td>
<td width=23%>use 1.1</td>
</tr>
<tr valign=top>
<td width=14%>1.1 2.0</td>
<td width=15%>1.1</td>
<td width=17%>2.0</td>
<td width=16%>1.1</td>
<td width=15%>1.1</td>
<td width=23%>use 1.1</td>
</tr>
<tr valign=top>
<td width=14%>2.0</td>
<td width=15%>2.0</td>
<td width=17%>2.0</td>
<td width=16%>2.0</td>
<td width=15%>2.0</td>
<td width=23%>use 2.0</td>
</tr>
</table><br>
<p>
The following code fragment demonstrates how an application that supports only version 2.2 of Windows Sockets makes a <b>WSAStartup</b> call:</p>
<pre><code>WORD wVersionRequested;
WSADATA wsaData;
int err;
 
wVersionRequested = MAKEWORD( 2, 2 );
 
err = WSAStartup( wVersionRequested, &amp;wsaData );
if ( err != 0 ) {
    /* Tell the user that we could not find a usable */
    /* WinSock DLL.                                  */
    return;
}
 
/* Confirm that the WinSock DLL supports 2.2.*/
/* Note that if the DLL supports versions greater    */
/* than 2.2 in addition to 2.2, it will still return */
/* 2.2 in wVersion since that is the version we      */
/* requested.                                        */
 
if ( LOBYTE( wsaData.wVersion ) != 2 ||
        HIBYTE( wsaData.wVersion ) != 2 ) {
    /* Tell the user that we could not find a usable */
    /* WinSock DLL.                                  */
    WSACleanup( );
    return; 
}
 
/* The WinSock DLL is acceptable. Proceed. */
 </code></pre>
<p>
Once an application or DLL has made a successful <b>WSAStartup</b> call, it can proceed to make other Windows Sockets calls as needed. When it has finished using the services of the WS2_32.DLL, the application or DLL must call <a href="wsapiref_120i.htm"><b>WSACleanup</b></a> in order to allow the WS2_32.DLL to free any resources for the application.</p>
<p>
Details of the actual Windows Sockets implementation are described in the <a href="strucetc_42uq.htm"><b>WSADATA</b></a><b> </b>structure.</p>
<p>
An application or DLL can call <b>WSAStartup</b> more than once if it needs to obtain the WSAData structure information more than once. On each such call the application can specify any version number supported by the DLL.</p>
<p>
An application must call one <b>WSACleanup</b> call for every successful <b>WSAStartup</b> call to allow third-party DLLs to make use of a WS2_32.DLL on behalf of an application. This means, for example, that if an application calls <b>WSAStartup</b> three times, it must call <b>WSACleanup</b> three times. The first two calls to <b>WSACleanup</b> do nothing except decrement an internal counter; the final <b>WSACleanup</b> call for the task does all necessary resource deallocation for the task.</p>
<h4>Return Values</h4>
<p>
The <b>WSAStartup</b> function returns zero if successful. Otherwise, it returns one of the error codes listed below. </p>
<p>
An application cannot call <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a> to determine the error code as is normally done in Windows Sockets is <b>WSAStartup</b> fails. The WS2_32.DLL will <i>not</i> have been loaded in the case of a failure so the client data area where the "last error" information is stored could not be established.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=43%>WSASYSNOTREADY</td>
<td width=57%>Indicates that the underlying network subsystem is not ready for network communication.</td>
</tr>
<tr valign=top>
<td width=43%>WSAVERNOTSUPPORTED</td>
<td width=57%>The version of Windows Sockets support requested is not provided by this particular Windows Sockets implementation.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEINPROGRESS</td>
<td width=57%>A blocking Windows Sockets 1.1 operation is in progress.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEPROCLIM</td>
<td width=57%>Limit on the number of tasks supported by the Windows Sockets implementation has been reached.</td>
</tr>
<tr valign=top>
<td width=43%>WSAEFAULT</td>
<td width=57%>The <i>lpWSAData</i> is not a valid pointer.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Use version 1.0 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_6quq.htm"><b>send</b></a>, <a href="wsapiref_4sqa.htm"><b>sendto</b></a>, <a href="wsapiref_120i.htm"><b>WSACleanup</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

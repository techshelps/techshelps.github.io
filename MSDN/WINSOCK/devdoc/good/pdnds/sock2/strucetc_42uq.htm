<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSADATA</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsadata_2"></a>WSADATA</h1>
<pre><code>typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;
        char                    szDescription[WSADESCRIPTION_LEN+1];
        char                    szSystemStatus[WSASYS_STATUS_LEN+1];
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char FAR *              lpVendorInfo;
} WSADATA, FAR * LPWSADATA; 
</code></pre>
<p>
The members of this structure are:</p>
<h4>Parameters</h4>
<dl>
<dt>
wVersion</dt>
<dd>
The version of the Windows Sockets specification that the WS2_32.DLL expects the caller to use.</dd>
<dt>
wHighVersion</dt>
<dd>
The highest version of the Windows Sockets specification that this DLL can support (also encoded as above). Normally this will be the same as <i>wVersion</i>.</dd>
<dt>
szDescription</dt>
<dd>
A null-terminated ASCII string into which the WS2_32.DLL copies a description of the Windows Sockets implementation. The text (up to 256 characters in length) can contain any characters except control and formatting characters: the most likely use that an application will put this to is to display it (possibly truncated) in a status message.</dd>
<dt>
szSystemStatus</dt>
<dd>
A null-terminated ASCII string into which the WS2_32.DLL copies relevant status or configuration information. The WS2_32.DLL should use this field only if the information might be useful to the user or support staff: it should not be considered as an extension of the <i>szDescription</i> field.</dd>
<dt>
iMaxSockets</dt>
<dd>
This field is retained for backward compatibility, but should be ignored for version 2 and later as no single value can be appropriate for all underlying service providers.</dd>
<dt>
iMaxUdpDg</dt>
<dd>
This value should be ignored for version 2 and onward. It is retained for compatibility with Windows Sockets specification 1.1, but should not be used when developing new applications. For the actual maximum message size specific to a particular Windows Sockets service provider and socket type, applications should use <b>getsockopt</b> to retrieve the value of option SO_MAX_MSG_SIZE after a socket has been created.</dd>
<dt>
lpVendorInfo</dt>
<dd>
This value should be ignored for version 2 and onward. It is retained for compatibility with Windows Sockets specification 1.1. Applications needing to access vendor-specific configuration information should use <b>getsockopt</b> to retrieve the value of option PVD_CONFIG. The definition of this value (if utilized) is beyond the scope of this specification.


<p>
<b>Note</b>  An application should ignore the <i>iMaxsockets</i>, <i>iMaxUdpDg</i>, and <i>lpVendorInfo</i> fields in WSAData if the value in <i>wVersion</i> after a successful call to <b>WSAStartup</b> is at least 2. This is because the architecture of Windows Sockets has been changed in version 2 to support multiple providers, and WSAData no longer applies to a single vendor's stack. Two new socket options are introduced to supply provider-specific information: SO_MAX_MSG_SIZE (replaces the <i>iMaxUdpDg</i> element) and PVD_CONFIG (allows any other provider-specific configuration to occur).

</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

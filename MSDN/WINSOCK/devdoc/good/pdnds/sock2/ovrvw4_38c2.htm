<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary of Name Resolution Functions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_summary_of_name_resolution_functions_2"></a>Summary of Name Resolution Functions</h3>
<p>
The name resolution functions can be grouped into three categories: Service installation, client queries, and helper functions (and macros). The sections that follow identify the functions in each category and briefly describe their intended use. Key data structures are also described.</p>

<h4><a name="_win32_service_installation_2"></a>Service Installation</h4>
<ul>
<li>
<a href="wsapiref_0f77.htm"><b>WSAInstallServiceClass</b></a></li>
<li>
<a href="wsapiref_0e0i.htm"><b>WSARemoveServiceClass</b></a></li>
<li>
<a href="wsapiref_82uq.htm"><b>WSASetService</b></a></li>
</ul>
<p>
When the required service class does not already exist, an application uses <b>WSAInstallServiceClass</b> to install a new service class by supplying a service class name, a GUID for the service class ID, and a series of WSANSCLASSINFO structures. These structures are each specific to a particular name space, and supply common values such as recommended TCP port numbers or Netware SAP Identifiers. A service class can be removed by calling <b>WSARemoveServiceClass</b> and supplying the GUID corresponding to the class ID.</p>
<p>
Once a service class exists, specific instances of a service can be installed or removed via <b>WSASetService</b>. This function takes a WSAQUERYSET structure as an input parameter along with an operation code and operation flags. The operation code indicates whether the service is being installed or removed. The WSAQUERYSET structure provides all of the relevant information about the service including service class ID, service name (for this instance), applicable name space identifier and protocol information, and a set of transport addresses at which the service listens. Services should invoke <a href="wsapiref_82uq.htm">WSASetService</a> when they initialize in order to advertise their presence in dynamic name spaces.</p>

<h4><a name="_win32_client_query_2"></a>Client Query</h4>
<ul>
<li>
<a href="wsapiref_25bm.htm"><b>WSAEnumNameSpaceProviders</b></a></li>
<li>
<a href="wsapiref_6sfm.htm"><b>WSALookupServiceBegin</b></a></li>
<li>
<a href="wsapiref_14z6.htm"><b>WSALookupServiceNext</b></a></li>
<li>
<a href="wsapiref_88he.htm"><b>WSALookupServiceEnd</b></a></li>
</ul>
<p>
The <a href="wsapiref_25bm.htm"><b>WSAEnumNameSpaceProviders</b></a> function allows an application to discover which name spaces are accessible via Windows Sockets's name resolution facilities. It also allows an application to determine whether a given name space is supported by more than one name space provider, and to discover the provider ID for any particular name space provider. Using a provider ID, the application can restrict a query operation to a specified name space provider.</p>
<p>
Windows Sockets' name space query operations involves a series of calls: <a href="wsapiref_6sfm.htm"><b>WSALookupServiceBegin</b></a>, followed by one or more calls to <a href="wsapiref_14z6.htm"><b>WSALookupServiceNext</b></a> and ending with a call to <a href="wsapiref_88he.htm"><b>WSALookupServiceEnd</b></a>. <b>WSALookupServiceBegin</b> takes a WSAQUERYSET structure as input in order to define the query parameters along with a set of flags to provide additional control over the search operation. It returns a query handle which is used in the subsequent calls to <b>WSALookupServiceNext</b> and <b>WSALookupServiceEnd</b>. </p>
<p>
The application invokes <b>WSALookupServiceNext</b> to obtain query results, with results supplied in an application-supplied WSAQUERYSET buffer. The application continues to call <b>WSALookupServiceNext</b> until the error code WSA_E_NO_MORE is returned indicating that all results have been retrieved. The search is then terminated by a call to <b>WSALookupServiceEnd</b>. The <b>WSALookupServiceEnd</b> function can also be used to cancel a currently pending <b>WSALookupServiceNext</b> when called from another thread.</p>
<p>
In Windows Socket 2, conflicting error codes are defined for WSAENOMORE (10102) and WSA_E_NO_MORE (10110). The error code WSAENOMORE will be removed in a future version and only WSA_E_NO_MORE will remain. For Windows Socket 2, however, applications should check for both WSAENOMORE and WSA_E_NO_MORE for the widest possible compatibility with Name Space Providers that use either one.</p>

<h4><a name="_win32_helper_functions_2"></a>Helper Functions</h4>
<ul>
<li>
<a href="wsapiref_8f76.htm"><b>WSAGetServiceClassNameByClassId</b></a></li>
<li>
<a href="wsapiref_5ib6.htm"><b>WSAAddressToString</b></a></li>
<li>
<a href="wsapiref_54z6.htm"><b>WSAStringToAddress</b></a></li>
<li>
<a href="wsapiref_2xrm.htm"><b>WSAGetServiceClassInfo</b></a></li>
</ul>
<p>
The name resolution helper functions include a function to retrieve a service class name given a service class ID, a pair of functions used to translate a transport address between a <b>sockaddr</b> struct and an ASCII string representation, a function to retrieve the service class schema information for a given service class, and a set of macros for mapping well known services to pre-allocated GUIDs.</p>
<p>
The following macros from winsock2.h aid in mapping between well known service classes and these name spaces.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=59%>SVCID_TCP(Port)<p>
SVCID_UDP(Port)</p>
<p>
SVCID_NETWARE(Object Type)</p>
</td>
<td width=41%>Given a port for TCP/IP or UDP/IP or the object type in the case of Netware, return the GUID (port number in host order)</td>
</tr>
<tr valign=top>
<td width=59%>IS_SVCID_TCP(GUID)<br>
IS_SVCID_UDP(GUID)<br>
IS_SVCID_NETWARE(GUID)</td>
<td width=41%>Returns TRUE if the GUID is within the allowable range</td>
</tr>
<tr valign=top>
<td width=59%>SET_TCP_SVCID(GUID, port)<br>
SET_UDP_SVCID(GUID, port)</td>
<td width=41%>Initializes a GUID structure with the GUID equivalent for a TCP or UDP port number (port number must be in host order)</td>
</tr>
<tr valign=top>
<td width=59%>PORT_FROM_SVCID_TCP(GUID)<p>
PORT_FROM_SVCID_UDP(GUID)</p>
<p>
SAPID_FROM_SVCID_NETWARE(GUID)</p>
</td>
<td width=41%>Returns the port or object type associated with the GUID (port number in host order)</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

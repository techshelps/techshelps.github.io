<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>setsockopt</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setsockopt_2"></a>setsockopt</h1>
<p>
The Windows Sockets <b>setsockopt</b> function sets a socket option.</p>
<pre><code><b>int setsockopt (
  SOCKET</b><i> s</i><b>,                 </b>
<b>  int</b><i> level</i><b>,                </b>
<b>  int</b><i> optname</i><b>,              </b>
<b>  const char FAR *</b><i> optval</i><b>,  </b>
<b>  int</b><i> optlen                </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a socket.</dd>
<dt>
<i>level</i></dt>
<dd>
[in] The level at which the option is defined; the supported <i>level</i>s include SOL_SOCKET and IPPROTO_TCP. See the Windows Sockets 2 Protocol-Specific Annex<i> </i>(a separate document included with the Platform SDK) for more information on protocol-specific levels.</dd>
<dt>
<i>optname</i></dt>
<dd>
[in] The socket option for which the value is to be set.</dd>
<dt>
<i>optval</i></dt>
<dd>
[in] A pointer to the buffer in which the value for the requested option is supplied.</dd>
<dt>
<i>optlen</i></dt>
<dd>
[in] The size of the <i>optval</i> buffer.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>setsockopt</b> function sets the current value for a socket option associated with a socket of any type, in any state. Although options can exist at multiple protocol levels, they are always present at the uppermost "socket'' level. Options affect socket operations, such as whether expedited data (OOB data for example) is received in the normal data stream, and whether broadcast messages can be sent on the socket.</p>
<p>
There are two types of socket options: Boolean options that enable or disable a feature or behavior, and options that require an integer value or structure. To enable a Boolean option, <i>optval</i> points to a nonzero integer. To disable the option <i>optval</i> points to an integer equal to zero. The <i>optlen</i> parameter should be equal to <b>sizeof(int)</b> for Boolean options. For other options, <i>optval</i> points to the an integer or structure that contains the desired value for the option, and <i>optlen</i> is the length of the integer or structure.</p>
<p>
The following options are supported for <b>setsockopt</b>. For default values of these options, see the description. The Type identifies the type of data addressed by <i>optval</i>.</p>
<p>
<b><i>level = </i>SOL_SOCKET</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=23%>Type</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>SO_BROADCAST</td>
<td width=23%>BOOL</td>
<td width=44%>Allow transmission of broadcast messages on the socket.</td>
</tr>
<tr valign=top>
<td width=33%>SO_DEBUG</td>
<td width=23%>BOOL</td>
<td width=44%>Record debugging information.</td>
</tr>
<tr valign=top>
<td width=33%>SO_DONTLINGER</td>
<td width=23%>BOOL</td>
<td width=44%>Do not block close waiting for unsent data to be sent. Setting this option is equivalent to setting SO_LINGER with <i>l_onoff</i> set to zero.</td>
</tr>
<tr valign=top>
<td width=33%>SO_DONTROUTE</td>
<td width=23%>BOOL</td>
<td width=44%>Do not route: send directly to interface.</td>
</tr>
<tr valign=top>
<td width=33%>SO_GROUP_PRIORITY</td>
<td width=23%>int</td>
<td width=44%>Reserved for future use with socket groups. Specify the relative priority to be established for sockets that are part of a socket group.</td>
</tr>
<tr valign=top>
<td width=33%>SO_KEEPALIVE</td>
<td width=23%>BOOL</td>
<td width=44%>Send keepalives</td>
</tr>
<tr valign=top>
<td width=33%>SO_LINGER</td>
<td width=23%>struct <a href="strucetc_5roy.htm">LINGER</a> </td>
<td width=44%>Linger on close if unsent data is present.</td>
</tr>
<tr valign=top>
<td width=33%>SO_OOBINLINE</td>
<td width=23%>BOOL</td>
<td width=44%>Receive out-of-band data in the normal data stream. (See section <a href="../../../live/pdnds/sockspi/wsanxref_9fqq.htm">DECnet Out-Of-band data</a> for a discussion of this topic.)</td>
</tr>
<tr valign=top>
<td width=33%>SO_RCVBUF</td>
<td width=23%>int</td>
<td width=44%>Specify the total per-socket buffer space reserved for receives.  This is unrelated to SO_MAX_MSG_SIZE or the size of a TCP window.</td>
</tr>
<tr valign=top>
<td width=33%>SO_REUSEADDR</td>
<td width=23%>BOOL</td>
<td width=44%>Allow the socket to be bound to an address that  is already in use. (See <a href="wsapiref_6vzm.htm"><b>bind</b></a>.) </td>
</tr>
<tr valign=top>
<td width=33%>SO_SNDBUF</td>
<td width=23%>int</td>
<td width=44%>Specify the total per-socket buffer space reserved for sends.  This is unrelated to SO_MAX_MSG_SIZE or the size of a TCP window.</td>
</tr>
<tr valign=top>
<td width=33%>PVD_CONFIG</td>
<td width=23%>Service Provider Dependent</td>
<td width=44%>This object stores the configuration information for the service provider associated with socket <i>s</i>. The exact format of this data structure is service provider specific.</td>
</tr>
</table><br>
<p>
<b><i>level =</i> IPPROTO_TCP</b>1</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=33%>TCP_NODELAY</td>
<td width=23%>BOOL</td>
<td width=44%>Disables the Nagle algorithm for send coalescing.</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%>1<b>&nbsp;&nbsp;&nbsp;&nbsp;</b>included for backward compatibility with Windows Sockets 1.1</td>
</tr>
</table><br>
<p>
BSD options not supported for <b>setsockopt</b> are:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=36%>Value</th>
<th align=left width=26%>Type</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>SO_ACCEPTCONN</td>
<td width=26%>BOOL</td>
<td width=38%>Socket is listening</td>
</tr>
<tr valign=top>
<td width=36%>SO_RCVLOWAT</td>
<td width=26%>int</td>
<td width=38%>Receive low water mark</td>
</tr>
<tr valign=top>
<td width=36%>SO_RCVTIMEO</td>
<td width=26%>int</td>
<td width=38%>Receive time-out (available in Microsoft implementation of Windows Sockets 2)</td>
</tr>
<tr valign=top>
<td width=36%>SO_SNDLOWAT</td>
<td width=26%>int</td>
<td width=38%>Send low water mark</td>
</tr>
<tr valign=top>
<td width=36%>SO_SNDTIMEO</td>
<td width=26%>int</td>
<td width=38%>Send time-out (available in Microsoft implementation of Windows Sockets 2)</td>
</tr>
<tr valign=top>
<td width=36%>SO_TYPE</td>
<td width=26%>int</td>
<td width=38%>Type of the socket</td>
</tr>
</table><br>
<dl>
<dt>
SO_DEBUG</dt>
<dd>
Windows Sockets service providers are encouraged (but not required) to supply output debug information if the SO_DEBUG option is set by an application. The mechanism for generating the debug information and the form it takes are beyond the scope of this document.</dd>
<dt>
SO_GROUP_PRIORITY</dt>
<dd>
Reserved for future use with socket groups. Group priority indicates the relative priority of the specified socket relative to other sockets within the socket group. Values are non-negative integers, with zero corresponding to the highest priority. Priority values represent a hint to the underlying service provider about how potentially scarce resources should be allocated. For example, whenever two or more sockets are both ready to transmit data, the highest priority socket (lowest value for SO_GROUP_PRIORITY) should be serviced first with the remainder serviced in turn according to their relative priorities.
<p>
The <a href="errors_0oaa.htm#_win32_wsaenoprotoopt_2">WSAENOPROTOOPT</a> error is indicated for nongroup sockets or for service providers that do not support group sockets.
</dd>
<dt>
SO_KEEPALIVE</dt>
<dd>
An application can request that a TCP/IP provider enable the use of "keep-alive" packets on TCP connections by turning on the SO_KEEPALIVE socket option. A Windows Sockets provider need not support the use of keep-alives. If it does, the precise semantics are implementation-specific but should conform to section 4.2.3.6 of RFC 1122: <i>Requirements for Internet Hosts — Communication Layers</i>. If a connection is dropped as the result of "keep-alives" the error code <a href="errors_0oaa.htm#_win32_wsaenetreset_2">WSAENETRESET</a> is returned to any calls in progress on the socket, and any subsequent calls will fail with WSAENOTCONN.</dd>
<dt>
SO_LINGER</dt>
<dd>
The SO_LINGER option controls the action taken when unsent data is queued on a socket and a <b>closesocket</b> is performed. See <a href="wsapiref_714i.htm"><b>closesocket</b></a> for a description of the way in which the SO_LINGER settings affect the semantics of <b>closesocket</b>. The application sets the desired behavior by creating a <a href="strucetc_5roy.htm"><b>LINGER</b></a> structure (pointed to by the <i>optval</i> parameter) with these members <b>l_onoff</b> and <b>l_linger </b>set appropriately.</dd>
<dt>
SO_REUSEADDR</dt>
<dd>
By default, a socket cannot be bound (see <a href="wsapiref_6vzm.htm"><b>bind</b></a>) to a local address that is already in use. On occasion, however, it can be necessary to "re-use" an address in this way. Since every connection is uniquely identified by the combination of local and remote addresses, there is no problem with having two sockets bound to the same local address as long as the remote addresses are different. To inform the Windows Sockets provider that a <b>bind</b> on a socket should not be disallowed because the desired address is already in use by another socket, the application should set the SO_REUSEADDR socket option for the socket before issuing the <b>bind</b>. The option is interpreted only at the time of the <a href="wsapiref_6vzm.htm"><b>bind</b></a>. It is therefore unnecessary and harmless to set the option on a socket that is not to be bound to an existing address. Setting or resetting the option after the <b>bind</b> has no effect on this or any other socket.</dd>
<dt>
SO_RCVBUF and SO_SNDBUF</dt>
<dd>
When a Windows Sockets implementation supports the SO_RCVBUF and SO_SNDBUF options, an application can request different buffer sizes (larger or smaller). The call to <b>setsockopt</b> can succeed even when the implementation did not provide the whole amount requested. An application must call <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a> with the same option to check the buffer size actually provided.</dd>
<dt>
PVD_CONFIG</dt>
<dd>
This object stores the configuration information for the service provider associated with the socket specified in the <i>s </i>parameter. The exact format of this data structure is specific to each service provider.</dd>
<dt>
TCP_NODELAY</dt>
<dd>
The TCP_NODELAY option is specific to TCP/IP service providers. The Nagle algorithm is disabled if the TCP_NODELAY option is enabled (and vice versa). The process involves buffering send data when there is unacknowledged data already "in flight" or buffering send data until a full-size packet can be sent. It is highly recommended that TCP/IP service providers enable the Nagle Algorithm by default, and for the vast majority of application protocols the Nagle Algorithm can deliver significant performance enhancements. However, for some applications this algorithm can impede performance, and TCP_NODELAY can be used to turn it off. These are applications where many small messages are sent, and the time delays between the messages are maintained. Application writers should not set TCP_NODELAY unless the impact of doing so is well-understood and desired because setting TCP_NODELAY can have a significant negative impact on network and application performance.</dd>
</dl>
<p>
<b>Windows CE:</b> The SO_RCVBUF option is not supported. If you attempt to use this option <b>setsockopt</b> returns WSAEOPNOTSUPP.</p>
<p>
To set the socket to secure mode, the option level parameter, <i>level,</i> must set to SO_SOCKET, the option name, <i>optname</i> to SO_SECURE, and the option value, <i>optval</i>, must be a pointer to a DWORD containing SO_SEC_SSL. These settings ensure that the Unified Secure Sockets Layer (SSL) package be used. For example,</p>
<pre><code>DWORD optval = SO_SEC_SSL;
err = setsockopt(
    Socket,
    SOL_SOCKET,
    SO_SECURE,
    &amp;optval,
    sizeof(optval)
    );.</code></pre>
<p>
In addition to the normal error values, the <b>setsockopt</b> function can return an additional error code, namely, WSAEISCONN, to signify that the socket can not switch to secure mode once it has been connected. </p>
<p>
When used in the context of SSL, the WSAENOPROTOOP error code acquires additional meaning, to indicate that the option level does not equal to SO_SOCKET.</p>
<p>
For IrSocket implementation, Af_irda.h must be explicitly included.</p>
<p>
The WSAENETDOWN return value is not supported for IrSockets.</p>
<p>
IrSockets provides two settable socket options:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=28%>Value</th>
<th align=left width=23%>Type</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=28%>IRLMP_IAS_SET</td>
<td width=23%>* IAS_SET</td>
<td width=49%>Sets IAS attributes.</td>
</tr>
<tr valign=top>
<td width=28%>IRLMP_IRLPT_MODE</td>
<td width=23%>* int</td>
<td width=49%>In non-zero, enables IrLPT mode for printing to IrDA printers.</td>
</tr>
</table><br>
<p>
The IRLMP_IAS_SET socket option allows the application to set a single attribute of a single class in the local IAS. The application specifies the class to set and the attribute and attribute type. It is expected that the application allocate a buffer of the necessary size for the passed parameters.</p>
<p>
The IRLMP_RAW_MODE socket option allows the application to switch between TinyTP mode and unreliable IrLMP mode. If it is not set, IrSockets are assumed to use TinyTP. This option is only available after issuing the socket function and before issuing any other Windows Sockets function.</p>
<p>
Many SO_ level socket options are not meaningful to IrSockets. Only SO_LINGER is specifically supported.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>setsockopt</b> returns zero. Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEFAULT</td>
<td width=59%><i>optval</i> is not in a valid part of the process address space or <i>optlen</i> parameter is too small.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINVAL</td>
<td width=59%><i>level</i> is not valid, or the information in <i>optval </i>is not valid.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETRESET</td>
<td width=59%>Connection has timed out when SO_KEEPALIVE is set.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOPROTOOPT</td>
<td width=59%>The option is unknown or unsupported for the specified provider or socket (see SO_GROUP_PRIORITY limitations).</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTCONN</td>
<td width=59%>Connection has been reset when SO_KEEPALIVE is set.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTSOCK</td>
<td width=59%>The descriptor is not a socket.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Use version 1.0 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_6vzm.htm"><b>bind</b></a>, <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a>, <a href="wsapiref_7dde.htm"><b>ioctlsocket</b></a>, <a href="wsapiref_2qr6.htm"><b>socket</b></a>, <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a>, <a href="wsapiref_34aa.htm"><b>WSAEventSelect</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

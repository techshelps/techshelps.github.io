<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSARecvEx</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsarecvex_2"></a>WSARecvEx</h1>
<p>
<b>Notice</b>  This function is a Microsoft-specific extension to the Windows Sockets specification. For more information, see <a href="ovrvw1_6582.htm">Microsoft Extensions and Windows Sockets 2</a>. </p>
<p>
The Windows Sockets <b>WSARecvEx</b> function is identical to the <b>recv</b> function, except the <i>flags</i> parameter is an in-out parameter. When a partial message is received while using datagram protocol, the MSG_PARTIAL bit is set in the <i>flags</i> parameter on return from the function.</p>
<pre><code><b>int PASCAL FAR WSARecvEx (
  SOCKET</b><i> s</i><b>,         </b>
<b>  char FAR *</b><i> buf</i><b>,</b>   
<b>  int</b><i> len</i><b>,</b>          
<b>  int</b><i> *flags        </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a connected socket.</dd>
<dt>
<i>buf</i></dt>
<dd>
[out] A buffer for the incoming data.</dd>
<dt>
<i>len</i></dt>
<dd>
[in] The length of <i>buf</i>.</dd>
<dt>
<i>flags</i></dt>
<dd>
[in/out] An indicator specifying whether the message is fully or partially received for datagram sockets.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSARecvEx</b> function that is part of the Microsoft implementation of Windows Sockets 2 is similar to the more common <a href="wsapiref_2i9e.htm"><b>recv</b></a> function except that the <i>flags</i> parameter is an in-out parameter, not just an in parameter. The additional out parameter is used to indicate whether a partial or complete message was received when a message-oriented protocol is being used. </p>
<p>
The <b>WSARecvEx </b>and <a href="wsapiref_2i9e.htm"><b>recv</b></a> function identically for stream oriented protocols.</p>
<p>
Making the <i>flags </i>parameter an in and out parameter accomodates two common situations in which a partial message will be received: when the application's data buffer size is smaller than the message size and the message coincidentally arrives in two pieces; and when the message is rather large and must arrive in several pieces. The MSG_PARTIAL bit is set in the <i>flags</i> parameter on return from <b>WSARecvEx </b>when a partial message was received. If a complete message was received, MSG_PARTIAL is not set in <i>flags.</i></p>
<p>
The Windows Sockets <a href="wsapiref_2i9e.htm"><b>recv</b></a> function is different than <b>WSARecvEx</b> in that the <b>recv</b> function always receives a single message for each call for message-oriented transport protocols. The <a href="wsapiref_2i9e.htm"><b>recv</b></a> function does not have a means to indicate to the application that the data received is only a partial message. An application must build its own protocol for checking whether a message is partial or complete by checking for the error code WSAEMSGSIZE after each call to <b>recv. </b>When the application buffer is smaller than the data being sent, as much of the message as will fit is copied into the user's buffer and <b>recv</b> returns with the error code WSAEMSGSIZE. A subsequent call to <b>recv</b> will get the next part of the message. </p>
<p>
Applications written for message-oriented transport protocols should be coded for this possibility if message sizing is not guaranteed by the application's data transfer protocol. An application can use <b>recv </b>and manage the protocol itself. Alternatively, an applications can use <b>WSARecvEx </b>and check the for the  MSG_PARTIAL bit is set in the <i>flags</i> parameter. </p>
<p>
The <b>WSARecvEx</b> function provide the developer with a more effective way of checking whether a message received is partial or complete when a very large message arrives a little at a time. For example, if an application sends a 1-megabyte message, the transport protocol must break up the message in order to send it over the physical network. It is theoretically possible for the transport protocol on the receiving side to buffer all the data in the message, but this would be quite expensive in terms of resources. Instead, <b>WSARecvEx </b>can be used, minimizing overhead and eliminating the need for an application-based protocol.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSARecvEx </b>returns the number of bytes received. If the connection has been closed, it returns zero. Additionally, if a partial message was received, the MSG_PARTIAL bit is set in the <i>flags</i> parameter. If a complete message was received, MSG_PARTIAL is not set in <i>flags.</i></p>
<p>
Otherwise, a value of SOCKET_ERROR is returned, and a specific error code can be retrieved by calling <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a>.</p>
<p>
<b>Important</b>  For a stream oriented transport protocol, MSG_PARTIAL is never set on return from <b>WSARecvEx</b>. This function behaves identically to the Windows Sockets <b>recv</b> function for stream transport protocols.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEFAULT</td>
<td width=59%>The <i>buf</i> parameter is not completely contained in a valid part of the user address space.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTCONN</td>
<td width=59%>The socket is not connected.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINTR</td>
<td width=59%>The (blocking) call was canceled through <a href="wsapiref_704y.htm"><b>WSACancelBlockingCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETRESET</td>
<td width=59%>The connection has been broken due to the remote host resetting.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTSOCK</td>
<td width=59%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEOPNOTSUPP</td>
<td width=59%>MSG_OOB was specified, but the socket is not stream-style such as type SOCK_STREAM, out-of-band data is not supported in the communication domain associated with this socket, or the socket is unidirectional and supports only send operations.</td>
</tr>
<tr valign=top>
<td width=41%>WSAESHUTDOWN</td>
<td width=59%>The socket has been shut down; it is not possible to use <a href="#_win32_wsarecvex_2"><b>WSARecvEx</b></a> on a socket after <a href="wsapiref_60z6.htm"><b>shutdown</b></a> has been invoked with <i>how</i> set to SD_RECEIVE or SD_BOTH.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEWOULDBLOCK</td>
<td width=59%>The socket is marked as nonblocking and the receive operation would block.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINVAL</td>
<td width=59%>The socket has not been bound with <a href="wsapiref_6vzm.htm"><b>bind</b></a>, or an unknown flag was specified, or MSG_OOB was specified for a socket with SO_OOBINLINE enabled or (for byte stream sockets only) <i>len</i> was zero or negative.</td>
</tr>
<tr valign=top>
<td width=41%>WSAECONNABORTED</td>
<td width=59%>The virtual circuit was terminated due to a time-out or other failure. The application should close the socket as it is no longer usable.</td>
</tr>
<tr valign=top>
<td width=41%>WSAETIMEDOUT</td>
<td width=59%>The connection has been dropped because of a network failure or because the peer system failed to respond.</td>
</tr>
<tr valign=top>
<td width=41%>WSAECONNRESET</td>
<td width=59%>The virtual circuit was reset by the remote side executing a "hard" or "abortive" close. The application should close the socket as it is no longer usable. On a UDP datagram socket this error would indicate that a previous send operation resulted in an ICMP "Port Unreachable" message.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in mswsock.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with mswsock.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_88oi.htm"><b>recvfrom</b></a>, <a href="wsapiref_1ab6.htm"><b>select</b></a>, <a href="wsapiref_6quq.htm"><b>send</b></a>, <a href="wsapiref_2qr6.htm"><b>socket</b></a>, <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a></p>
<p>&nbsp;</p></body>
</HTML>

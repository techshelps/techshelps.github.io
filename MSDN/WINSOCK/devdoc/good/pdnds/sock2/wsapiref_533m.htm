<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSASocket</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsasocket_2"></a>WSASocket</h1>
<p>
The Windows Sockets <b>WSASocket</b> function creates a socket that is bound to a specific transport service provider, and optionally creates and/or joins a socket group.</p>
<pre><code><b>SOCKET WSASocket (
  int</b><i> af</i><b>,                             </b>
<b>  int</b><i> type</i><b>,                           </b>
<b>  int</b><i> protocol</i><b>,                       </b>
<b>  LPWSAPROTOCOL_INFO</b><i> lpProtocolInfo</i><b>,  </b>
<b>  GROUP</b><i> g</i><b>,                            </b>
<b>  DWORD</b><i> dwFlags                       </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>af</i></dt>
<dd>
[in] An address family specification.</dd>
<dt>
<i>type</i></dt>
<dd>
[in] A type specification for the new socket.</dd>
<dt>
<i>protocol</i></dt>
<dd>
[in] A particular protocol to be used with the socket that is specific to the indicated address family.</dd>
<dt>
<i>lpProtocolInfo</i></dt>
<dd>
[in] A pointer to a <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure that defines the characteristics of the socket to be created.</dd>
<dt>
<i>g</i></dt>
<dd>
[in] Reserved for future use with socket groups. The identifier of the socket group.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
[in] A flag that specifies the socket attribute.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>WSASocket </b>function causes a socket descriptor and any related resources to be allocated and associated with a transport service provider. By default, the socket will <i>not</i> have an overlapped attribute. If<i> lpProtocolInfo</i> is NULL, the WS2_32.DLL uses the first three parameters (<i>af, type, protocol</i>) to determine which service provider is used by selecting the first transport provider able to support the stipulated address family, socket type and protocol values. If the <i>lpProtocolInfo </i>is not NULL, the socket will be bound to the provider associated with the indicated <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. In this instance, the application can supply the manifest constant FROM_PROTOCOL_INFO as the value for any of <i>af, type </i>or <i>protocol.</i> This indicates that the corresponding values from the indicated <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure (iAddressFamily, iSocketType, iProtocol) are to be assumed. In any case, the values supplied for <i>af, type </i>and <i>protocol </i>are supplied unmodified to the transport service provider.</p>
<p>
When selecting a protocol and its supporting service provider based on <i>af</i>, <i>type</i> and <i>protocol</i>, this procedure will only choose a base protocol or a protocol chain, not a protocol layer by itself. Unchained protocol layers are not considered to have "partial matches" on <i>type</i> or <i>af</i> either. That is, they do not lead to an error code of WSAEAFNOSUPPORT or WSAEPROTONOSUPPORT if no suitable protocol is found.</p>
<p>
<b>Note</b>  The manifest constant AF_UNSPEC continues to be defined in the header file but its use is <b>strongly</b> <b>discouraged</b>, as this can cause ambiguity in interpreting the value of the <i>protocol </i>parameter.</p>
<p>
Reserved for future use with socket groups. Parameter <i>g</i> is used to indicate the appropriate actions on socket groups:
<ol>
<li>
If <i>g</i> is an existing socket group ID, join the new socket to this group, provided all the requirements set by this group are met; or</li>
<li>
If <i>g</i> = SG_UNCONSTRAINED_GROUP, create an unconstrained socket group and have<i> </i>the new socket be<i> </i>the first member; or</li>
<li>
If <i>g</i> = SG_CONSTRAINED_GROUP, create a constrained socket group and have the new socket be the first member; or</li>
<li>
If <i>g</i> = zero, no group operation is performed.</li>
</ol>
<p>
For unconstrained groups, any set of sockets can be grouped together as long as they are supported by a single service provider. A constrained socket group can consist only of connection-oriented sockets, and requires that connections on all grouped sockets be to the same address on the same host. For newly created socket groups, the new group ID can be retrieved by using <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a> with option SO_GROUP_ID, if this operation completes successfully. A socket group and its associated ID remain valid until the last socket belonging to this socket group is closed. Socket group IDs are unique across all processes for a given service provider.</p>
<p>
The <i>dwFlags</i> parameter can be used to specify the attributes of the socket by or-ing any of the following Flags:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Flag</th>
<th align=left width=54%>Meaning</th>
</tr>
<tr valign=top>
<td width=46%>WSA_FLAG_OVERLAPPED</td>
<td width=54%>This flag causes an overlapped socket to be created. Overlapped sockets can utilize <a href="wsapiref_97n6.htm"><b>WSASend</b></a>, <a href="wsapiref_752q.htm"><b>WSASendTo</b></a>, <a href="wsapiref_4z1u.htm"><b>WSARecv</b></a>, <a href="wsapiref_4wky.htm"><b>WSARecvFrom</b></a> and <a href="wsapiref_6ik2.htm"><b>WSAIoctl</b></a> for overlapped I/O operations, which allows multiple these operations to be initiated and in progress simultaneously. All functions that allow overlapped operation (<b>WSASend</b>, <b>WSARecv</b>,<b>WSASendTo</b>, <b>WSARecvFrom</b>, <b>WSAIoctl</b>) also support non-overlapped usage on an overlapped socket if the values for parameters related to overlapped operation are NULL.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_FLAG_MULTIPOINT_C_ROOT</td>
<td width=54%>Indicates that the socket created will be a c_root in a multipoint session. Only allowed if a rooted control plane is indicated in the protocol's <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. Refer to <a href="ovrvw5_5mya.htm">Multipoint and Multicast Semantics</a> for additional information.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_FLAG_MULTIPOINT_C_LEAF</td>
<td width=54%>Indicates that the socket created will be a c_leaf in a multicast session. Only allowed if XP1_SUPPORT_MULTIPOINT is indicated in the protocol's <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. Refer to <a href="ovrvw5_5mya.htm">Multipoint and Multicast Semantics</a> for additional information.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_FLAG_MULTIPOINT_D_ROOT</td>
<td width=54%>Indicates that the socket created will be a d_root in a multipoint session. Only allowed if a rooted data plane is indicated in the protocol's <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. Refer to <a href="ovrvw5_5mya.htm">Multipoint and Multicast Semantics</a> for additional information.</td>
</tr>
<tr valign=top>
<td width=46%>WSA_FLAG_MULTIPOINT_D_LEAF</td>
<td width=54%>Indicates that the socket created will be a d_leaf in a multipoint session. Only allowed if XP1_SUPPORT_MULTIPOINT is indicated in the protocol's <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure. Refer to <a href="ovrvw5_5mya.htm">Multipoint and Multicast Semantics</a> for additional information.</td>
</tr>
</table><br>
<p>
<b>Important</b>  For multipoint sockets, exactly one of WSA_FLAG_MULTIPOINT_C_ROOT or WSA_FLAG_MULTIPOINT_C_LEAF <i>must</i> be specified, and exactly one of WSA_FLAG_MULTIPOINT_D_ROOT or WSA_FLAG_MULTIPOINT_D_LEAF <i>must</i> be specified. Refer to <a href="ovrvw5_5mya.htm">Multipoint and Multicast Semantics</a> for additional information.</p>
<p>
Connection-oriented sockets such as SOCK_STREAM provide full-duplex connections, and must be in a connected state before any data can be sent or received on them. A connection to another socket is created with a <a href="wsapiref_8m7m.htm"><b>connect</b></a>/<a href="wsapiref_8kc2.htm"><b>WSAConnect</b></a> call. Once connected, data can be transferred using <a href="wsapiref_6quq.htm"><b>send</b></a>/<a href="wsapiref_97n6.htm"><b>WSASend</b></a> and <a href="wsapiref_2i9e.htm"><b>recv</b></a>/<a href="wsapiref_4z1u.htm"><b>WSARecv</b></a> calls. When a session has been completed, a <a href="wsapiref_714i.htm"><b>closesocket</b></a> must be performed.</p>
<p>
The communications protocols used to implement a reliable, connection-oriented socket ensure that data is not lost or duplicated. If data for which the peer protocol has buffer space cannot be successfully transmitted within a reasonable length of time, the connection is considered broken and subsequent calls will fail with the error code set to WSAETIMEDOUT.</p>
<p>
Connectionless, message-oriented sockets allow sending and receiving of datagrams to and from arbitrary peers using <a href="wsapiref_4sqa.htm"><b>sendto</b></a><b>/<a href="wsapiref_752q.htm">WSASendTo</a></b> and <a href="wsapiref_88oi.htm"><b>recvfrom</b></a><b>/<a href="wsapiref_4wky.htm">WSARecvFrom</a></b>. If such a socket is connected to a specific peer, datagrams can be sent to that peer using <a href="wsapiref_6quq.htm"><b>send</b></a>/<a href="wsapiref_97n6.htm"><b>WSASend</b></a> and can be received from (only) this peer using <a href="wsapiref_2i9e.htm"><b>recv</b></a>/<a href="wsapiref_4z1u.htm"><b>WSARecv</b></a>.</p>
<p>
Support for sockets with type RAW is not required, but service providers are encourages to support raw sockets whenever it makes sense to do so.
<dl>
<dt>
<b>Shared Sockets</b></dt>
<dd>
When a special <a href="strucetc_4cfm.htm"><b>WSAPROTOCOL_INFO</b></a> structure (obtained through the <a href="wsapiref_1ape.htm"><b>WSADuplicateSocket</b></a> function and used to create additional descriptors for a shared socket) is passed as an input parameter to <b>WSASocket</b>, the <i>g</i> and <i>dwFlags </i>parameters are <i>ignored</i>. Such a <b>WSAPROTOCOL_INFO</b> struct may only be used once, otherwise the error code WSAEINVAL will result.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSASocket</b> returns a descriptor referencing the new socket. Otherwise, a value of INVALID_SOCKET is returned, and a specific error code can be retrieved by calling <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a>.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=42%>WSANOTINITIALISED</td>
<td width=58%>A successful <a href="wsapiref_1v8y.htm"><b>WSAStartup</b></a> must occur before using this function.</td>
</tr>
<tr valign=top>
<td width=42%>WSAENETDOWN</td>
<td width=58%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEAFNOSUPPORT</td>
<td width=58%>The specified address family is not supported.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEINPROGRESS</td>
<td width=58%>A blocking Windows Sockets 1.1 call is in progress, or the service provider is still processing a callback function.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEMFILE</td>
<td width=58%>No more socket descriptors are available.</td>
</tr>
<tr valign=top>
<td width=42%>WSAENOBUFS</td>
<td width=58%>No buffer space is available. The socket cannot be created.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEPROTONOSUPPORT</td>
<td width=58%>The specified protocol is not supported.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEPROTOTYPE</td>
<td width=58%>The specified protocol is the wrong type for this socket.</td>
</tr>
<tr valign=top>
<td width=42%>WSAESOCKTNOSUPPORT</td>
<td width=58%>The specified socket type is not supported in this address family.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEINVAL</td>
<td width=58%>The parameter <i>g</i> specified is not valid, or the <b>WSAPROTOCOL_INFO</b> structure that <i>lpProtocolInfo</i> points to is incomplete, the contents are invalid or the <b>WSAPROTOCOL_INFO</b> structurehas already been used in an earlier duplicate socket operation.</td>
</tr>
<tr valign=top>
<td width=42%>WSAEFAULT</td>
<td width=58%><i>lpProtocolInfo</i> argument is not in a valid part of the process address space. </td>
</tr>
<tr valign=top>
<td width=42%>WSAINVALIDPROVIDER</td>
<td width=58%>The service provider returned a version other than 2.2. </td>
</tr>
<tr valign=top>
<td width=42%>WSAINVALIDPROCTABLE</td>
<td width=58%>The service provider returned an invalid or incomplete procedure table to the WSPStartup.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_13aq.htm"><b>accept</b></a>, <a href="wsapiref_6vzm.htm"><b>bind</b></a>, <a href="wsapiref_8m7m.htm"><b>connect</b></a>, <a href="wsapiref_273m.htm"><b>getsockname</b></a>, <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a>, <a href="wsapiref_7dde.htm"><b>ioctlsocket</b></a>, <a href="wsapiref_07hu.htm"><b>listen</b></a>, <a href="wsapiref_2i9e.htm"><b>recv</b></a>, <a href="wsapiref_88oi.htm"><b>recvfrom</b></a>, <a href="wsapiref_1ab6.htm"><b>select</b></a>, <a href="wsapiref_6quq.htm"><b>send</b></a>, <a href="wsapiref_4sqa.htm"><b>sendto</b></a>, <a href="wsapiref_94aa.htm"><b>setsockopt</b></a>, <a href="wsapiref_60z6.htm"><b>shutdown</b></a></p>
<p>&nbsp;</p></body>
</HTML>

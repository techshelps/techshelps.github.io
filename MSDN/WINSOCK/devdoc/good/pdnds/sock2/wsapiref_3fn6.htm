<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSAAccept</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_wsaaccept_2"></a>WSAAccept</h1>
<p>
The Windows Sockets <b>WSAAccept</b> function conditionally accepts a connection based on the return value of a condition function, optionally creates or joins a socket group, provides QOS flowspecs, and allows transfer of connection data.</p>
<pre><code><b>SOCKET WSAAccept (
  SOCKET</b><i> s</i><b>,                    </b>
<b>  struct sockaddr FAR *</b><i> addr</i><b>,  </b>
<b>  LPINT</b><i> addrlen</i><b>,               </b>
<b>  LPCONDITIONPROC</b><i> lpfnCondition</i><b>,  </b>
<b>  DWORD</b><i> dwCallbackData         </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>s</i></dt>
<dd>
[in] A descriptor identifying a socket that is listening for connections after a call to the <a href="wsapiref_07hu.htm"><b>listen</b></a> function.</dd>
<dt>
<i>addr</i></dt>
<dd>
[out] An optional pointer to a buffer that receives the address of the connecting entity, as known to the communications layer. The exact format of the <i>addr</i> parameter is determined by the address family established when the socket was created.</dd>
<dt>
<i>addrlen</i></dt>
<dd>
[in/out] An optional pointer to an integer that contains the length of the address <i>addr</i>.</dd>
<dt>
<i>lpfnCondition</i></dt>
<dd>
[in] The procedure instance address of the optional, application-supplied condition function that will make an accept/reject decision based on the caller information passed in as parameters, and optionally create or join a socket group by assigning an appropriate value to the result parameter <i>g</i> of this function.</dd>
<dt>
<i>dwCallbackData</i></dt>
<dd>
[in] The callback data passed back to the application as the value of the  <i>dwCallbackData</i> parameter of the condition function.  This parameter is not interpreted by Windows Sockets.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <a href="#_win32_wsaaccept_2"><b>WSAAccept</b></a> function extracts the first connection on the queue of pending connections on socket <i>s</i>, and checks it against the condition function, provided the condition function is specified (that is, not NULL). If the condition function returns CF_ACCEPT, <b>WSAAccept</b> creates a new socket and performs any socket grouping as indicated by the result parameter <i>g</i> in the condition function. The newly created socket has the same properties as socket <i>s</i> including asynchronous events registered with <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a> or with <a href="wsapiref_34aa.htm"><b>WSAEventSelect</b></a>, but not including the listening socket's group ID, if any. If the condition function returns CF_REJECT, <b>WSAAccept</b> rejects the connection request. The condition function runs in the same thread as this function does, and should return as soon as possible. If the decision cannot be made immediately, the condition function should return CF_DEFER to indicate that no decision has been made, and no action about this connection request should be taken by the service provider. When the application is ready to take action on the connection request, it will invoke <b>WSAAccept</b> again and return either CF_ACCEPT or CF_REJECT as a return value from the condition function.</p>
<p>
A socket in the default mode (blocking) will block until a connection is present when an application calls <b>WSAAccept </b>and no connections are pendng on the queue.</p>
<p>
A socket in the nonblocking mode (blocking) fails with the error WSAEWOULDBLOCK when an application calls <b>WSAAccept</b> and no connections are pendng on the queue. After <b>WSAAccept</b> succeeds and returns a new socket handle, the accepted socket cannot be used to accept any more connections. The original socket remains open and listens for new connection requests.</p>
<p>
The <i>addr</i> parameter is a result parameter that is filled in with the address of the connecting entity, as known to the communications layer. The exact format of the <i>addr</i> parameter is determined by the address family in which the communication is occurring. The <i>addrlen</i> is a value-result parameter; it should initially contain the amount of space pointed to by <i>addr</i>. On return, it will contain the actual length (in bytes) of the address returned. This call is used with connection-oriented socket types such as SOCK_STREAM. If <i>addr</i> and/or <i>addrlen</i> are equal to NULL, then no information about the remote address of the accepted socket is returned. Otherwise, these two parameters will be filled in regardless of whether the condition function is specified or what it returns.</p>
<p>
A prototype of the condition function is as follows:</p>
<pre><code><b>int CALLBACK ConditionFunc(
  IN LPWSABUF </b><i>lpCallerId</i><b>,</b>
<b>  IN LPWSABUF </b><i>lpCallerData</i><b>,</b>
<b>  IN OUT LPQOS </b><i>lpSQOS</i><b>,</b>
<b>  IN OUT LPQOS<i> </i></b><i>lpGQOS</i><b>,</b>
<b>  IN LPWSABUF </b><i>lpCalleeId</i><b>,</b>
<b>  OUT LPWSABUF </b><i>lpCalleeData</i><b>,</b>
<b>  OUT GROUP FAR * </b><i>g</i><b>,</b>
<b>  IN DWORD </b><i>dwCallbackData</i>
<b>);</b>
</code></pre>
<p>
The <b>ConditionFunc</b> is a placeholder for the application-supplied callback function. The actual condition function must reside in a DLL or application module. It is exported in the module definition file. Use <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_makeprocinstance">
</object><a href=JavaScript:alink_1.Click()><b>MakeProcInstance</b></a> to get a procedure-instance address for the callback function.</p>
<p>
The <i>lpCallerId </i>parameter is a value parameter that contains the address of the connecting entity. The <i>lpCallerData</i> is a value parameter that contains any user data. The information in these parameters is sent along with the connection request. If no caller identification or caller data is available, the corresponding parameters will be NULL. Many network protocols do not support connect-time caller data. Most conventional network protocols can be expected to support caller ID information at connection-request time. The buf portion of the WSABUF pointed to by <i>lpCallerId</i> points to a SOCKADDR. The SOCKADDR is interpreted according to its address family (typically by casting the SOCKADDR to some type specific to the address family).</p>
<p>
The <i>lpSQOS</i> parameter references the <b>FLOWSPEC</b> structures for socket <i>s</i> specified by the caller, one for each direction, followed by any additional provider-specific parameters. The sending or receiving flow specification values will be ignored as appropriate for any unidirectional sockets. A NULL value for indicates that there is no caller supplied QOS and that no negotiation is possible. A non-NULL <i>lpSQOS</i> pointer indicates that a QOS negotiation is to occur or that the provider is prepared to accept the QOS request without negotiation.</p>
<p>
The <i>lpGQOS</i> parameter (reserved for future use with socket groups) references the <b>FLOWSPEC</b> structures for the socket group the caller is to create, one for each direction, followed by any additional provider-specific parameters. A NULL value for <i>lpGQOS</i> indicates no caller-supplied group quality of service. quality of service information can be returned if negotiation is to occur.</p>
<p>
The <i>lpCalleeId</i> is a value parameter that contains the local address of the connected entity. The <i>buf</i> portion of the WSABUF pointed to by <i>lpCalleeId</i> points to a SOCKADDR. The SOCKADDR is interpreted according to its address family (typically by casting the SOCKADDR to some type specific to the address family).</p>
<p>
The <i>lpCalleeData</i> is a result parameter used by the condition function to supply user data back to the connecting entity. The <i>lpCalleeData-&gt;len</i> initially contains the length of the buffer allocated by the service provider and pointed to by <i>lpCalleeData-&gt;buf</i>. A value of zero means passing user data back to the caller is not supported. The condition function should copy up to <i>lpCalleeData-&gt;len</i> bytes of data into <i>lpCalleeData-&gt;buf</i>, and then update <i>lpCalleeData-&gt;len</i> to indicate the actual number of bytes transferred. If no user data is to be passed back to the caller, the condition function should set <i>lpCalleeData-&gt;len</i> to zero. The format of all address and user data is specific to the address family to which the socket belongs.</p>
<p>
Reserved for future use with socket groups: The result parameter<i> g</i> is assigned within the condition function to indicate the following actions:
<ol>
<li>
if &amp;<i>g</i> is an existing socket group ID, add <i>s</i> to this group, provided all the requirements set by this group are met; or</li>
<li>
if &amp;<i>g</i> = SG_UNCONSTRAINED_GROUP, create an unconstrained socket group and have <i>s</i> as the first member; or</li>
<li>
if &amp;<i>g</i> = SG_CONSTRAINED_GROUP, create a constrained socket group and have <i>s</i> as the first member; or</li>
<li>
if &amp;<i>g</i> = zero, no group operation is performed.</li>
</ol>
<p>
For unconstrained groups, any set of sockets can be grouped together as long as they are supported by a single service provider. A constrained socket group can consist only of connection-oriented sockets, and requires that connections on all grouped sockets be to the same address on the same host. For newly created socket groups, the new group ID can be retrieved by using <b>getsockopt</b> with option SO_GROUP_ID, if this operation completes successfully. A socket group and its associated ID remain valid until the last socket belonging to this socket group is closed. Socket group IDs are unique across all processes for a given service provider.</p>
<p>
The <i>dwCallbackData</i> parameter value passed to the condition function is the value passed as the <i>dwCallbackData</i> parameter in the original <b>WSAAccept</b> call. This value is interpreted only by the Windows Socket version 2 client. This allows a client to pass some context information from the <b>WSAAccept</b> call site through to the condition function.  This also provides the condition function with any additional information required to determine whether to accept the connection or not. A typical usage is to pass a (suitably cast) pointer to a data structure containing references to application-defined objects with which this socket is associated.</p>
<h4>Return Values</h4>
<p>
If no error occurs, <b>WSAAccept</b> returns a value of type SOCKET that is a descriptor for the accepted socket. Otherwise, a value of INVALID_SOCKET is returned, and a specific error code can be retrieved by calling <b>WSAGetLastError</b>.</p>
<p>
The integer referred to by <i>addrlen</i> initially contains the amount of space pointed to by <i>addr</i>. On return it will contain the actual length in bytes of the address returned.</p>
<h4>Error Codes</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>WSANOTINITIALISED</td>
<td width=59%>A successful <b>WSAStartup</b> <i>must</i> occur before using this function.</td>
</tr>
<tr valign=top>
<td width=41%>WSAECONNREFUSED</td>
<td width=59%>The connection request was forcefully rejected as indicated in the return value of the condition function (CF_REJECT).</td>
</tr>
<tr valign=top>
<td width=41%>WSAENETDOWN</td>
<td width=59%>The network subsystem has failed.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEFAULT</td>
<td width=59%>The <i>addrlen </i>parameter is too small or the <i>addr</i> or <i>lpfnCondition</i> are not part of the user address space.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINTR</td>
<td width=59%>A blocking Windows Sockets 1.1 call was canceled through <a href="wsapiref_704y.htm"><b>WSACancelBlockingCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINPROGRESS</td>
<td width=59%>A blocking Windows Sockets 1.1 call is in progress.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEINVAL</td>
<td width=59%><b>listen</b> was not invoked prior to <b>WSAAccept</b>, parameter <i>g</i> specified in the condition function is not a valid value, the source address of the incoming connection request is not consistent with that of the constrained group the parameter <i>g</i> is referring to, the return value of the condition function is not a valid one, or any case where the specified socket is in an invalid state.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEMFILE</td>
<td width=59%>The queue is nonempty upon entry to <b>WSAAccept</b> and there are no socket descriptors available.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOBUFS</td>
<td width=59%>No buffer space is available.</td>
</tr>
<tr valign=top>
<td width=41%>WSAENOTSOCK</td>
<td width=59%>The descriptor is not a socket.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEOPNOTSUPP</td>
<td width=59%>The referenced socket is not a type that supports connection-oriented service.</td>
</tr>
<tr valign=top>
<td width=41%>WSATRY_AGAIN</td>
<td width=59%>The acceptance of the connection request was deferred as indicated in the return value of the condition function (CF_DEFER).</td>
</tr>
<tr valign=top>
<td width=41%>WSAEWOULDBLOCK</td>
<td width=59%>The socket is marked as nonblocking and no connections are present to be accepted.</td>
</tr>
<tr valign=top>
<td width=41%>WSAEACCES</td>
<td width=59%>The connection request that was offered has timed out or been withdrawn.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in winsock2.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with ws2_32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_13aq.htm"><b>accept</b></a>, <a href="wsapiref_6vzm.htm"><b>bind</b></a>, <a href="wsapiref_8m7m.htm"><b>connect</b></a>, <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a>, <a href="wsapiref_07hu.htm"><b>listen</b></a>, <a href="wsapiref_1ab6.htm"><b>select</b></a>, <a href="wsapiref_2qr6.htm"><b>socket</b></a>, <a href="wsapiref_6jn6.htm"><b>WSAAsyncSelect</b></a>, <a href="wsapiref_8kc2.htm"><b>WSAConnect</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

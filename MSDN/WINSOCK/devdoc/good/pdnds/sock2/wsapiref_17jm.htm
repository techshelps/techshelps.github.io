<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AcceptEx</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_acceptex_2"></a>AcceptEx</h1>
<p>
<b>Notice</b>  This function is a Microsoft-specific extension to the Windows Sockets specification. For more information, see <a href="ovrvw1_6582.htm">Microsoft Extensions and Windows Sockets 2</a>. </p>
<p>
The Windows Sockets <b>AcceptEx</b> function accepts a new connection, returns the local and remote address, and receives the first block of data sent by the client application.</p>
<pre><code><b>BOOL AcceptEx ( 
  SOCKET</b><i> sListenSocket</i><b>,      </b>
<b>  SOCKET</b><i> sAcceptSocket</i><b>,      </b>
<b>  PVOID</b><i> lpOutputBuffer</i><b>,      </b>
<b>  DWORD</b><i> dwReceiveDataLength</i><b>,  </b>
<b>  DWORD</b><i> dwLocalAddressLength</i><b>,  </b>
<b>  DWORD</b><i> dwRemoteAddressLength</i><b>,  </b>
<b>  LPDWORD</b><i> lpdwBytesReceived</i><b>,  </b>
<b>  LPOVERLAPPED</b><i> lpOverlapped  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>sListenSocket</i></dt>
<dd>
[in] A descriptor identifying a socket that has already been called with the <a href="wsapiref_07hu.htm"><b>listen</b></a> function. A server application waits for attempts to connect on this socket.</dd>
<dt>
<i>sAcceptSocket</i></dt>
<dd>
[in] A descriptor identifying a socket on which to accept an incoming connection. This socket must not be bound or connected.</dd>
<dt>
<i>lpOutputBuffer</i></dt>
<dd>
[in] A pointer to a buffer that receives the first block of data sent on a new connection, the local address of the server, and the remote address of the client. The receive data is written to the first part of the buffer starting at offset zero, while the addresses are written to the latter part of the buffer. This parameter must be specified.</dd>
<dt>
<i>dwReceiveDataLength</i></dt>
<dd>
[in] The number of bytes in the buffer that will be used for receiving data. If this parameter is specified as zero, then no receive operation is performed in conjunction with accepting the connection. Instead, the <b>AcceptEx</b> function completes as soon as a connection arrives without waiting for any data.</dd>
<dt>
<i>dwLocalAddressLength</i></dt>
<dd>
[in] The number of bytes reserved for the local address information. This must be at least 16 bytes more than the maximum address length for the transport protocol in use.</dd>
<dt>
<i>dwRemoteAddressLength</i></dt>
<dd>
[in] The number of bytes reserved for the remote address information. This must be at least 16 bytes more than the maximum address length for the transport protocol in use. </dd>
<dt>
<i>lpdwBytesReceived</i></dt>
<dd>
[out] A pointer to a DWORD that receives the count of bytes received. This is set only if the operation completes synchronously. If it returns ERROR_IO_PENDING and is completed later, then this DWORD is never set and you must obtain the number of bytes read from the completion notification mechanism.</dd>
<dt>
<i>lpOverlapped</i></dt>
<dd>
[in] An OVERLAPPED structure that is used to process the request. This parameter <i>must</i> be specified; it cannot be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If no error occurs, the <b>AcceptEx</b> function completed successfully and a value of TRUE is returned. </p>
<p>
If the function fails, <b>AcceptEx</b> returns FALSE. The <a href="wsapiref_2tiq.htm"><b>WSAGetLastError</b></a> function can then be called to return extended error information. If <b>WSAGetLastError</b> returns ERROR_IO_PENDING, then the operation was successfully initiated and is still in progress.</p>
<h4>Remarks</h4>
<p>
The <b>AcceptEx</b> function combines several socket functions into a single API/kernel transition. The <b>AcceptEx</b> function, when successful, performs three tasks: a new connection is accepted, both the local and remote addresses for the connection are returned, and the first block of data sent by the remote is received. A program will make a connection to a socket more quickly using <b>AcceptEx</b>instead of the <a href="wsapiref_13aq.htm"><b>accept</b></a> function.</p>
<p>
A single output buffer receives the data, the local socket address (the server), and the remote socket address (the client). Using a single buffer improves performance, but the <a href="wsapiref_5svm.htm"><b>GetAcceptExSockaddrs</b></a> function must be called to parse the buffer into its three distinct parts.</p>
<p>
The buffer size for the local and remote address must be 16 bytes more than the size of the <b>SOCKADDR</b> structure for the transport protocol in use because the addresses are written in an internal format. For example, the size of a SOCKADDR_IN (the address structure for TCP/IP) is 16 bytes. Therefore, a buffer size of at least 32 bytes must be specified for the local and remote addresses. </p>
<p>
The <b>AcceptEx</b> function uses overlapped I/O, unlike the Windows Sockets 1.1 <b>accept</b> function. If your application uses <b>AcceptEx</b>, it can service a large number of clients with a relatively small number of threads. As with all overlapped Win32 functions, either Win32 events or completion ports can be used as a completion notification mechanism.</p>
<p>
Another key difference between the <b>AcceptEx</b> function and the Windows Sockets 1.1 <a href="wsapiref_13aq.htm"><b>accept</b></a> function is that the <b>AcceptEx</b> function requires the caller to already have two sockets: one that specifies the socket on which to listen and one that specifies the socket on which to accept the connection. The <i>sAcceptSocket</i> parameter must be an open socket that is neither bound nor connected. </p>
<p>
The <i>lpNumberOfBytesTransferred</i> parameter of the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getqueuedcompletionstatus">
</object><a href=JavaScript:alink_1.Click()><b>GetQueuedCompletionStatus</b></a> function or the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getoverlappedresult">
</object><a href=JavaScript:alink_2.Click()><b>GetOverlappedResult</b></a> function indicates the number of bytes received in the request.</p>
<p>
When this operation is successfully completed, <i>sAcceptHandle</i> can be passed only to the following functions:
<dl>
<dt>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_readfile">
</object><a href=JavaScript:alink_3.Click()><b>ReadFile</b></a></dt>
<dt>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_writefile">
</object><a href=JavaScript:alink_4.Click()><b>WriteFile</b></a></dt>
<dt>
<a href="wsapiref_6quq.htm"><b>send</b></a></dt>
<dt>
<a href="wsapiref_2i9e.htm"><b>recv</b></a></dt>
<dt>
<a href="wsapiref_3pwy.htm"><b>TransmitFile</b></a></dt>
<dt>
<a href="wsapiref_714i.htm"><b>closesocket</b></a></dt>
<dd>

<p>
<b>Note</b>  If you have called the <a href="wsapiref_3pwy.htm"><b>TransmitFile</b></a> function with both the TF_DISCONNECT and TF_REUSE_SOCKET flags, the specified socket has been returned to a state in which it is neither bound nor connected. You can then pass the handle of the socket to the <b>AcceptEx</b> function in the <i>sAcceptSocket </i>parameter.

</dd>
</dl>
<p>
When the <b>AcceptEx</b> function returns, the socket <i>sAcceptSocket</i> is in the default state for a connected socket. The socket <i>sAcceptSocket</i> does not inherit the properties of the socket associated with <i>sListenSocket</i> parameter until SO_UPDATE_ACCEPT_CONTEXT is set on the socket. Use the <a href="wsapiref_94aa.htm"><b>setsockopt</b></a> function to set the SO_UPDATE_ACCEPT_CONTEXT option, specifying <i>sAcceptSocket</i> as the socket handle and <i>sListenSocket</i> as the option value. </p>
<p>
For example:</p>
<pre><code>err = setsockopt( sAcceptSocket, 
    SOL_SOCKET, 
    SO_UPDATE_ACCEPT_CONTEXT, 
    (char *)&amp;sListenSocket, 
    sizeof(sListenSocket) ); 
 </code></pre>
<p>
Use the <a href="wsapiref_8qcy.htm"><b>getsockopt</b></a> function with the SO_CONNECT_TIME option to check whether a connection has been accepted. If it has been accepted, you can determine how long the connection has been established. The return value is the number of seconds that the socket has been connected. If the socket is not connected, the <b>getsockopt</b> returns 0xFFFFFFFF. Checking a connection like this is necessary in order to check for connections that have been established for a while, but no data has been received. It is recommended that you terminate those connections.</p>
<p>
For example:</p>
<pre><code>INT seconds;
INT bytes = sizeof(seconds);
err = getsockopt( sAcceptSocket, SOL_SOCKET, SO_CONNECT_TIME,
                      (char *)&amp;seconds, (PINT)&amp;bytes );
if ( err != NO_ERROR ) {
    printf( "getsockopt(SO_CONNECT_TIME) failed: %ld\n", WSAGetLastError( ) );
    exit(1);
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in mswsock.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with mswsock.lib.</p>
<p>&nbsp;</p></body>
</HTML>

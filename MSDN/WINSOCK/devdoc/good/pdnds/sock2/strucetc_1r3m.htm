<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROTOCOL_INFO</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_protocol_info_str"></a>PROTOCOL_INFO</h1>
<p>
The <b>PROTOCOL_INFO</b> structure contains information about a protocol. </p>
<pre><code>typedef  struct _PROTOCOL_INFO { 
    DWORD  dwServiceFlags; 
    INT  iAddressFamily; 
    INT  iMaxSockAddr; 
    INT  iMinSockAddr; 
    INT  iSocketType; 
    INT  iProtocol; 
    DWORD  dwMessageSize; 
    LPTSTR  lpProtocol; 
} PROTOCOL_INFO; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwServiceFlags</b></dt>
<dd>
A set of bit flags that specify the services provided by the protocol. One or more of the following bit flags may be set:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Meaning</th>
</tr>
<tr valign=top>
<td width=49%>XP_CONNECTIONLESS</td>
<td width=51%>If this flag is set, the protocol providesconnectionless (datagram) service. If this flag is clear, the protocol provides connection-oriented data transfer. </td>
</tr>
<tr valign=top>
<td width=49%>XP_GUARANTEED_DELIVERY</td>
<td width=51%>If this flag is set, the protocol guarantees that all data sent will reach the intended destination. If this flag is clear, there is no such guarantee.</td>
</tr>
<tr valign=top>
<td width=49%>XP_GUARANTEED_ORDER</td>
<td width=51%>If this flag is set, the protocol guarantees that data will arrive in the order in which it was sent. Note that this characteristic does not guarantee delivery of the data, but guarantees only its order. If this flag is clear, the order of data sent is not guaranteed.</td>
</tr>
<tr valign=top>
<td width=49%>XP_MESSAGE_ORIENTED</td>
<td width=51%>If this flag is set, the protocol is message-oriented. A message-oriented protocol honors message boundaries. If this flag is clear, the protocol is stream-oriented, and the concept of message boundaries is irrelevant.</td>
</tr>
<tr valign=top>
<td width=49%>XP_PSEUDO_STREAM</td>
<td width=51%>If this flag is set, the protocol is a message-oriented protocol that ignores message boundaries for all receive operations. <p>
This optional capability is useful when you do not want the protocol to frame messages. An application that requires stream-oriented characteristics can open a socket with type SOCK_STREAM for transport protocols that support this functionality, regardless of the value of <b>iSocketType</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>XP_GRACEFUL_CLOSE</td>
<td width=51%>If this flag is set, the protocol supports two-phase close operations, also known as "graceful" close operations. If this flag is clear, the protocol supports only abortive close operations.</td>
</tr>
<tr valign=top>
<td width=49%>XP_EXPEDITED_DATA</td>
<td width=51%>If this flag is set, the protocol supports expedited data, also known as "urgent data."</td>
</tr>
<tr valign=top>
<td width=49%>XP_CONNECT_DATA</td>
<td width=51%>If this flag is set, the protocol supports connect data.</td>
</tr>
<tr valign=top>
<td width=49%>XP_DISCONNECT_DATA</td>
<td width=51%>If this flag is set, the protocol supports disconnect data.</td>
</tr>
<tr valign=top>
<td width=49%>XP_SUPPORTS_BROADCAST</td>
<td width=51%>If this flag is set, the protocol supports a broadcast mechanism.</td>
</tr>
<tr valign=top>
<td width=49%>XP_SUPPORTS_MULTICAST</td>
<td width=51%>If this flag is set, the protocol supports a multicast mechanism.</td>
</tr>
<tr valign=top>
<td width=49%>XP_BANDWIDTH_ALLOCATION</td>
<td width=51%>If this flag is set, the protocol supports a mechanism for allocating a guaranteed bandwidth to an application.</td>
</tr>
<tr valign=top>
<td width=49%>XP_FRAGMENTATION</td>
<td width=51%>If this flag isset, the protocol supports message fragmentation; physical network MTU is hidden from applications.</td>
</tr>
<tr valign=top>
<td width=49%>XP_ENCRYPTS</td>
<td width=51%>If this flag is set, the protocol supports data encryption.</td>
</tr>
</table><br>

</dd>
<dt>
<b>iAddressFamily</b></dt>
<dd>
Specifies the value to pass as the <i>af</i> parameter when you call the <b>socket</b> function to open a socket for the protocol. This address family value uniquely defines the structure of Protocol addresses, also known as SOCKADDRs, used by the protocol.</dd>
<dt>
<b>iMaxSockAddr</b></dt>
<dd>
Specifies the maximum length of a socket address supported by the protocol.</dd>
<dt>
<b>iMinSockAddr</b></dt>
<dd>
Specifies the minimum length of a socket address supported by the protocol.</dd>
<dt>
<b>iSocketType</b></dt>
<dd>
Specifies the value to pass as the <i>type</i> parameter when you call the <b>socket</b> function to open a socket for the protocol.
<p>
Note that if XP_PSEUDO_STREAM is set in <b>dwServiceFlags</b>, the application can specify SOCK_STREAM as the <i>type</i> parameter to <b>socket</b>, regardless of the value of <b>iSocketType</b>.
</dd>
<dt>
<b>iProtocol</b></dt>
<dd>
Specifies the value to pass as the <i>protocol</i> parameter when you call the <b>socket </b>function to open a socket for the protocol.</dd>
<dt>
<b>dwMessageSize</b></dt>
<dd>
Specifies the maximum message size supported by the protocol. This is the maximum size of a message that can be sent from or received by the host. For protocols that do not support message framing, the actual maximum size of a message that can be sent to a given address may be less than this value. 
<p>
The following special message size values are defined:


<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=19%>Value</th>
<th align=left width=81%>Meaning</th>
</tr>
<tr valign=top>
<td width=19%>0</td>
<td width=81%>The protocol is stream-oriented; the concept of message size is not relevant.</td>
</tr>
<tr valign=top>
<td width=19%>0xFFFFFFFF</td>
<td width=81%>The protocol is message-oriented, but there is no maximum message size.</td>
</tr>
</table><br>

</dd>
<dt>
<b>lpProtocol</b></dt>
<dd>
Points to a zero-terminated string that supplies a name for the protocol; for example, "SPX2."
</dd>
</dl>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows:</b> Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in nspapi.h.</p>
<h4>See Also</h4>
<p>
<a href="wsapiref_7ieq.htm"><b>EnumProtocols</b></a>, <a href="wsapiref_2qr6.htm"><b>socket</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

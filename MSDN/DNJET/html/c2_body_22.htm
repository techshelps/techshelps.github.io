<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Referring to Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2referring_to_objects"></a>Referring to Objects</h4>
<p>
When you refer to objects in code, specify the hierarchical path that points to the object to which you want to refer. In general, start with the <b>DBEngine</b> object and work your way through the object hierarchy, as shown in the following syntax:</p>
<p>
<b>DBEngine.</b><i>ParentCollection</i><b>.</b><i>ChildCollection</i><b>(&quot;</b><i>ObjectName</i><b>&quot;)</b></p>
<p>
For example, in the following code, the <code>dbs</code> object variable represents the <b>DBEngine</b> object. The code sets the value of a <b>Field</b> object variable to the CompanyName field (a member of the <b>Fields</b> collection) in the Customers table (a member of the <b>TableDefs</b> collection):</p>
<pre><FONT FACE="Courier New" SIZE="3">Set fld = dbs.TableDefs(&quot;Customers&quot;).Fields(&quot;CompanyName&quot;)</font></pre>
<p>
<b>See Also   </b>For more information about using object variables to refer to objects, see “Using Object Variables” later in this chapter.</p>
<p>
There are three ways to refer to an object in a collection:
<ul>
<li>
<i>Collection</i><b>(&quot;</b><i>name</i><b>&quot;)</b><br><br></li>
<li>
<i>Collection</i><b>(</b><i>expression</i><b>)</b> where <i>expression</i> is a string variable containing the name of the object<br><br></li>
<li>
<i>Collection</i><b>(</b><i>index</i><b>)</b> where <i>index</i> is the object’s position within the collection</li>
</ul>
<p>
The first way to refer to an object is to use the <i>Collection</i><b>(&quot;</b><i>name</i><b>&quot;)</b> syntax. In the following example, <code>strDbPath</code> is the path to the NorthwindTables database, which contains the Customers table:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef

Set dbs = OpenDatabase(strDbPath)
' Return reference to Customers table.
Set tdf = dbs.TableDefs(&quot;Customers&quot;)</font></pre>
<p>
The second way to refer to an object is to use the <i>Collection</i><b>(</b><i>expression</i><b>)</b> syntax. You can use this technique to refer to an object by using a variable. In this example, <code>strDbPath</code> is the path to the database, and <code>strTableName</code> is the name of a table in that database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef

Set dbs = OpenDatabase(strDbPath)
' Return reference to table specified by value of variable.
Set tdf = dbs.TableDefs(strTableName)</font></pre>
<p>
The value of <code>strDbPath</code> in the preceding example may be <code>&quot;C:\JetBook\Samples\NorthwindTables.mdb&quot;</code>, and the value of <code>strTableName</code> may be <code>&quot;Customers&quot;</code>.</p>
<p>
By using the <i>Collection</i><b>(</b><i>index</i><b>)</b> syntax, you can refer to an object according to its position in a collection. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef

Set dbs = OpenDatabase(strDbPath)
' Return reference to first TableDef in TableDefs collection.
Set tdf = dbs.TableDefs(0)</font></pre>
<p>
Indexes on DAO collections are always zero-based. This means that the first element in the collection has an index number of zero. This is important to note if you’re used to working with one-based indexes, where the first element has an index number of one.</p>
<p>
It’s important to note that an object’s position within a collection isn’t fixed. It can change as objects are added to and removed from the collection. You shouldn’t refer to objects according to their position within a collection except when referring to all members within a loop.</p>
<h5>Using the ! and . (Dot) Operator Syntax</h5>
<p>
In DAO syntax, you separate parts of your object references by using either the<b> ! </b>operator or the<b> . </b>(dot) operator. When to use the <b>! </b>operator and when to use the<b> .&nbsp;</b>(dot) operator depends on the context of its use. In general:
<ul>
<li>
Use the<b> . </b>(dot) operator when what follows is an item created by Microsoft Jet.<br><br></li>
<li>
Use the <b>! </b>operator when what follows is a user-defined item.</li>
</ul>
<p>
For example, to refer to the <b>Name</b> property of a <b>TableDef</b> object (a property created by Microsoft Jet), use the<b> . </b>(dot) operator, as show in the following line of code:</p>
<pre><FONT FACE="Courier New" SIZE="3">dbs.TableDefs(&quot;Customers&quot;).Name</font></pre>
<p>
However, to refer to a field in a <b>TableDef</b> object (an item that you create), use the <b>! </b>operator, as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">dbs.TableDefs(&quot;Customers&quot;)!CustomerID</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Temporary QueryDef Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2temporary_querydef_objects"></a>Temporary QueryDef Objects</h3>
<p>
It’s not always necessary to create a permanent <b>QueryDef</b> object in order to execute an SQL statement, or to create a <b>Recordset</b> object in code. For example, you can pass an SQL string directly to the <b>Execute</b> method of a <b>Database</b> object in order to delete or insert records in a table. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database

Set dbs = OpenDatabase(strDbPath)
dbs.Execute &quot;DELETE FROM Orders WHERE OrderDate &lt; #9/1/94#;&quot;</font></pre>
<p>
Microsoft Jet automatically parses the SQL statement and creates a temporary <b>QueryDef</b> object in the database, executes the temporary <b>QueryDef </b>object, and then deletes the <b>QueryDef</b> object.</p>
<p>
The advantage to this method is that you avoid adding many permanent <b>QueryDef</b> objects to the database. The code becomes more readable because you don’t have to refer to an external tool such as Microsoft Access to find out what the <b>QueryDef</b> object is supposed to accomplish.</p>
<p>
However, when you use a temporary <b>QueryDef</b> object, you can’t take advantage of certain properties of a permanent <b>QueryDef</b> object, such as the <b>RecordsAffected</b> property. To work around this problem, you can use the <b>RecordsAffected</b> property on the <b>Database</b> object. In addition, there is a slight decrease in performance each time the temporary <b>QueryDef</b> object is created and deleted; it must be parsed and “compiled” into its internal storage format each time this code is executed. A permanent <b>QueryDef</b> object is parsed and compiled once, when it’s first executed, so subsequent executions can begin more quickly. Also, because the temporary <b>QueryDef</b> object is not named, it can’t be used in a SELECT statement to join to another table or <b>QueryDef</b> object.</p>
<p>
For multiuser databases, there are advantages to creating a <b>QueryDef</b> object that is not permanently saved in a database. You may want to do this, for example, if you are building up a SELECT query on the fly in code based on user input. This way, you don’t need to create uniquely named <b>QueryDef</b> objects in a multiuser database. To create a temporary <b>QueryDef</b> object, you simply supply a zero-length string (&quot;&quot;) for the <i>name</i> argument of the <b>CreateQueryDef</b> method. You can specify the SQL statement in the <i>sqltext</i> argument of the <b>CreateQueryDef</b> method or as the <b>SQL</b> property setting of the newly created <b>QueryDef</b> object.</p>
<p>
A common situation in which it’s to your advantage to create a temporary <b>QueryDef</b> object is when you have to execute it repeatedly, but it’s not needed on a permanent basis. The following example creates a temporary parameter <b>QueryDef</b> object that repeatedly builds a <b>Recordset</b> object until the user clicks <b>Cancel</b>. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim qdf As QueryDef
Dim rst As Recordset
Dim strCust As String, strMsg As String

Set dbs = OpenDatabase(strDbPath)

' Create temporary QueryDef object.
Set qdf = dbs.CreateQueryDef(&quot;&quot;)

' Construct SQL string.
qdf.SQL = &quot;PARAMETERS [Which CustomerID] Text; &quot; &amp; _
&#09;&quot;SELECT Count(*) AS RecordCount, Orders.CustomerID &quot; &amp; _
&#09;&quot;FROM Orders GROUP BY Orders.CustomerID &quot; &amp; _
&#09;&quot;HAVING Orders.CustomerID Like [Which CustomerID];&quot;

' Initialize variable.
strCust = &quot; &quot;

' Prompt user for input.
Do While Len(strCust) &gt; 0
&#09;strCust = InputBox(&quot;Enter first letter or letters of customer name.&quot;)
&#09;If Len(strCust) &gt; 0 Then
&#09;&#09;' Append wildcard character to input.
&#09;&#09;strCust = strCust &amp; &quot;*&quot;
&#09;&#09;' Provide value for paramter.
&#09;&#09;qdf![Which CustomerID] = strCust
&#09;&#09;' Open Recordset object on QueryDef object.
&#09;&#09;Set rst = qdf.OpenRecordset
&#09;&#09;strMsg = strMsg &amp; vbCrLf &amp; &quot;Orders for Customer(s) like &quot; &amp; strCust &amp; &quot;: &quot;
&#09;&#09;' Loop through Recordset object to append values to string.
&#09;&#09;Do Until rst.EOF
&#09;&#09;&#09;strMsg = strMsg &amp; vbCrLf &amp; rst!CustomerID &amp; &quot;: &quot; &amp; rst!RecordCount
&#09;&#09;&#09;rst.MoveNext
&#09;&#09;Loop
&#09;&#09;strMsg = strMsg &amp; vbCrLf
&#09;End If
Loop

' Display string if it is not empty.
If Len(strMsg) &gt; 0 Then
&#09;MsgBox strMsg
End If</font></pre>
<p>
If the action specified by the <b>QueryDef</b> object is going to be performed only once, there is no need to create a temporary <b>QueryDef</b> object. You can pass the SQL statement directly to the <b>Execute</b> method of a <b>Database</b> object, for example, or use the SQL SELECT statement as the argument to an <b>OpenRecordset</b> method. In the following example, <code>strDbPath</code> is the path to the database and <code>strTableName</code> is the name of the table whose records are to be counted:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim rst As Recordset

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;SELECT Count(*) AS RecordCount FROM &quot; _
&#09;&amp; strTableName &amp; &quot;;&quot;)</font></pre>
</BODY>
</HTML>

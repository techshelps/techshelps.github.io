<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 3 Data Definition and Integrity</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->
<h1><a name="jb2data_definition_and_integrity"></a>Chapter 3 Data Definition and Integrity</h1>
<p>
This chapter discusses how to create, delete, and maintain tables, indexes, queries, relationships, and referential integrity rules with the Microsoft Jet database engine.</p>
<p>
As discussed in Chapter&nbsp;2, “Introducing Data Access Objects,” Microsoft Jet tables, queries, and other objects are exposed to programming languages through a hierarchical system of objects and collections of objects referred to as Data Access Objects (DAO). For example, a <b>Database</b> object contains a collection of <b>TableDef</b> objects, which further contain collections of <b>Field</b> objects, which in turn contain collections of <b>Property</b> objects, and so on. The DAO object model maps those objects onto a programming interface you can control by using Microsoft Visual Basic, Visual Basic for Applications, Microsoft Visual&nbsp;C++, or Microsoft Visual&nbsp;J++.</p>
<p>
You can create tables and define relationships between tables entirely through the native DAO interface. Using DAO gives you a great deal of flexibility and control over how your database objects are created. With DAO, you write code to create a new object, assign values to that object’s properties to specify a data type, length, validation rule, and so on, and then append that object to a collection within the database’s object hierarchy.</p>
<p>
Many people are familiar with the industry-standard Structured Query Language (SQL) and its data definition language (DDL) subset. Microsoft Jet supports an SQL dialect that is compliant with the SQL ANSI-89 standard, with a few enhancements. Many of the features of Microsoft Jet that can be manipulated through DAO can also be controlled with SQL DDL statements. This chapter shows both methods and explains the differences.</p>
<p>
<a href="c3_body_1.htm">Creating a Database</a> </p>
<p>
<a href="c3_body_4.htm">Creating and Modifying Tables</a> </p>
<p>
<a href="c3_body_19.htm"'>Creating and Modifying Table Indexes</a> </p>
<p>
<a href="c3_body_29.htm">Microsoft Jet QueryDef Objects</a> </p>
<p>
<a href="c3_body_35.htm">Referential Integrity and Relationships</a> </p>
<h5>Using the Code Examples in This Chapter</h5>
<p>
You can use the code examples in this chapter to help you understand the concepts discussed, or you can modify them and use them in your own applications.</p>
<p>
The code examples are located in the JetBook\Samples subfolder on the companion CD-ROM. The code examples for Microsoft Access&nbsp;97 are in JetSamples.mdb, and the corresponding code examples for Microsoft Visual Basic version&nbsp;5.0 and other applications that support Visual Basic for Applications are referenced in JetSamples.vbp. Both JetSamples.mdb and JetSamples.vbp use tables and queries in NorthwindTables.mdb, also located in the JetBook\Samples subfolder.</p>
<p>
To use the code examples, copy the sample files to your hard disk. Be sure to copy NorthwindTables.mdb as well so that you can use the code examples to work with data.</p>
<p>
<b>See Also   </b>For more information about copying and using the code examples from the companion CD-ROM, see “Using the Companion CD-ROM” in the Preface.</p>
</font></BODY>
</HTML>

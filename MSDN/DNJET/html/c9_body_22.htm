<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing a Recordset Type</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2choosing_a_recordset_type"></a>Choosing a Recordset Type</h3>
<p>
This section discusses the types of <b>Recordset</b> objects available through Microsoft Jet and how each type affects the performance and operation of your application. For information on ODBCDirect <b>Recordset</b> objects, see “Using Cursors in ODBCDirect Workspaces” later in this chapter.</p>
<p>
There are four types of <b>Recordset</b> objects: table-type, which are a representation of actual database tables; dynaset-type, which can be updated; snapshot-type, which cannot be updated; and forward-only-type, which can’t be updated and can only be scrolled forward. Since you cannot create a table-type <b>Recordset</b> object based on a remote data source through ODBC, the remainder of the discussion focuses on dynaset-type, snapshot-type, and forward-only-type <b>Recordset</b> objects.</p>
<p>
If you do not explicitly specify what type of <b>Recordset</b> objects to use in your code, by default Microsoft Jet uses the one with the most functionality. For remote databases, this is a dynaset-type <b>Recordset</b> object. If you don’t need to update your data, you will get better performance by explicitly creating a snapshot-type <b>Recordset</b> object.</p>
<p>
The decision to use a dynaset-type versus a snapshot-type or forward-only-type <b>Recordset</b> object is based on resource, speed, and performance considerations in addition to the basic needs of the application (such as the ability to update remote data). For example, if your application doesn’t need update capabilities and the <b>Recordset</b> object you want to use contains fewer than 500 records, a snapshot-type <b>Recordset</b> object improves the overall data access speed of your application. However, if the <b>Recordset</b> object you’re using is large or contains Memo or Long Binary (OLE Object) fields, using a dynaset may be more efficient. Also, if you only need to move forward through the <b>Recordset</b> object, you can achieve even better performance by using a forward-only-type <b>Recordset</b> object.</p>
</BODY>
</HTML>

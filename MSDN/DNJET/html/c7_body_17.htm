<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Ring Topology</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2ring_topology"></a>Ring Topology</h3>
<p>
In the ring topology, (see Figure&nbsp;7.2) A synchronizes with B, B synchronizes with C, C synchronizes with D, and D synchronizes with A. The main advantage of the ring is that each computer handles approximately the same load. For more information, see “Synchronizing the Ring Topology” later in this chapter.</p>
<p>
Latency times for a ring topology can be greater than latency times for a star topology. This is because data might have to travel multiple “hops” before it disperses to every replica. For a large number of replicas, it might take a while to disperse data throughout the replica set.</p>
<p>
Another potential problem with simple ring implementations is that if any of the databases is unavailable, data fails to disperse throughout the application. This can be handled in your code, however, by routing information around the failure point instead of through it.</p>
<p>
Ring topologies can be expanded by adding additional rings and connecting two or more of the replicas within each ring.</p>
</BODY>
</HTML>

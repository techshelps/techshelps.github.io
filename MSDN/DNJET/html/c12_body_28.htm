<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Implementation Specifics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2sql_implementation_specifics"></a>SQL Implementation Specifics</h4>
<p>
This section describes how the Desktop Database Drivers implement SQL statements and clauses through Microsoft Jet, particularly when they are not SQL-92 compliant or there are limitations to their use.</p>
<h5>Aggregate Functions</h5>
<p>
An aggregate function and a non-aggregate field (column) reference cannot both be used in the clauses of a single SQL statement.</p>
<h5>Between…And Operator (BETWEEN Predicate)</h5>
<p>
ODBC SQL supports the same <b>Between…And</b> Operator syntax as ANSI, as follows:</p>
<p>
<i>expression1</i> <b>Between </b><i>expression2</i> <b>And </b><i>expression3</i></p>
<p>
The semantics of this syntax are different for the Desktop Database Drivers and Microsoft Jet SQL. When the Desktop Database Drivers are used, this statement returns TRUE only if <i>expression1</i> is greater than or equal to <i>expression2</i>, and <i>expression1</i> is less than or equal to <i>expression3</i>. This is different from Microsoft Jet SQL, in which <i>expression2</i> can be greater than <i>expression3</i>, so that the statement would return TRUE only if <i>expression1</i> is greater than or equal to <i>expression3</i>, and <i>expression1</i> is less than or equal to <i>expression2</i>.</p>
<h5>Data Conversion</h5>
<p>
Each driver converts the C data types used by ODBC applications to the SQL data types used in Microsoft Jet, and vice versa. The drivers convert the data types in two steps.
<ol>
<li>
A generic conversion function in ODBCTL32.DLL converts the C data types to an SQL data type that is common to all drivers.<br><br></li>
<li>
Each driver’s code within ODBCJT32.DLL converts the common SQL data types to the driver-specific SQL data type used by Microsoft Jet.</li>
</ol>
<p>
ODBCTL32.DLL also contains a generic conversion function for parsing SQL strings that are passed in ODBC escape sequences, such as date literals, procedure calls, scalar functions, and outer join calls. Like data conversion, this is a two-step process, in which the generic conversion process performs parsing that is common to all drivers, and each driver performs its own additional parsing as required.</p>
<h5>Datetime Values</h5>
<p>
For maximum interoperability, applications should pass datetime literals using the ODBC escape-clause syntax. Pass date literals using {d ‘<i>value</i>’}, where <i>value</i> is of the form “<i>yyyy</i>-<i>mm</i>-<i>dd</i>.” Pass time literals using {t ‘<i> value</i> ‘}, where <i>value</i> is of the form “<i>hh</i>-<i>mm</i>-<i>ss</i>,” and timestamp literals using {ts ‘<i> value</i> ‘}, where <i>value</i> is of the form “<i>yyyy</i>-<i>mm</i>-<i>dd hh</i>-<i>mm</i>-<i>ss</i>[<i>.f…</i>].” Datetime literals can also be delimited by the Microsoft Jet-specific datetime delimiter (“#”), which is not portable. If a datetime literal is not passed using the ODBC escape clause or the datetime delimiter, the literal will be treated as an arithmetic expression without raising a warning or error. For example, an application should represent the date “February 7, 1997” as {d&nbsp;‘1997-02-07’} or #02-07-1997#. If the application submits only 02-07-1997, it will be evaluated as 2 minus 7 minus 1997.</p>
<p>
Neither the SQL_DATE nor the SQL_TIMESTAMP data type can be converted to another data type (or itself) by the CONVERT function in escape-clause syntax.</p>
<p>
The Desktop Database Drivers support adding or subtracting an integer from an SQL_DATE field. The integer specifies the number of days to add or subtract. Date arithmetic is not supported for adding (or subtracting) an SQL_DATE data type to (or from) another SQL_DATE data type.</p>
<h5>DISTINCT Predicate</h5>
<p>
The Desktop Database Drivers do not support the DISTINCT predicate for binary data, Memo (Long Text) fields in Microsoft Access, or Memo fields in dBASE or FoxPro. The drivers also do not support the DISTINCT predicate in the set functions (<b>Avg</b>, <b>Max</b>, <b>Min</b>, and <b>Sum</b>).</p>
<h5>Identifier Quote Character</h5>
<p>
The identifier quote character allows strings or characters that would normally be invalid to be used in identifiers. For the Desktop Database Drivers, a valid identifier is a string of no more than 64 characters. The first character of a valid identifier cannot be a space. Valid identifiers cannot include control characters or special characters (`|#*?[].!$\), or the reserved words listed in Appendix&nbsp;C of the <i>Microsoft ODBC&nbsp;3.0 Software Development Kit and Programmer’s Reference.</i> If an identifier (field or table name) violates any of these rules, the identifier must be enclosed in the identifier quote character to be used. For the Desktop Database Drivers, this character is a back quote (`). Note that for many other SQL processors, the identifier quote character is a forward quote character.</p>
<h5>Like Operator (LIKE Predicate)</h5>
<p>
The Desktop Database Drivers support the <b>Like</b> operator, but do not support the use of escape clauses with a <b>Like</b> operator. A <b>Like</b> operator used in a procedure is supported only with literals. The drivers support ANSI <b>Like</b> pattern matching. If data in a Long Text (Memo) field is longer than 255 characters, the <b>Like</b> comparison is based only on the first 255 characters.</p>
<h5>Multiple SQL Statements</h5>
<p>
Microsoft Jet can perform neither ad-hoc nor stored queries consisting of multiple SQL statements. Only single SQL statements are supported.</p>
<h5>NULL/NOT NULL</h5>
<p>
The Desktop Database Drivers do not support the NOT NULL constraint in a CREATE TABLE statement. A Microsoft Access application can create a field that does not allow <b>Null</b> values by creating an index on a field with the DISALLOW NULL option. However, an application using the Desktop Database Drivers is unable to detect whether a field can contain <b>Null</b> values, because <b>SQLColumns</b> returns SQL_NULLABLE in the NULLABLE field of its result set for all fields (even if <b>Null</b> values are disallowed by virtue of an index), or for a table that has a field for which the <b>Required</b> property has been set to Yes.</p>
<h5>ORDER BY Clause</h5>
<p>
The fields in the ORDER BY clause do not have to be in the SELECT statement’s field list. Expressions can be used in the ORDER BY clause. If a SELECT statement contains a GROUP BY clause and an ORDER BY clause, the ORDER BY clause can contain only a field in the result set or an expression that also appears in the GROUP BY clause.</p>
<h5>OUTER JOIN Clauses</h5>
<p>
The Desktop Database Drivers support left and right outer joins, as well as inner joins. You can use the right table in a left outer join, or the left table in a right outer join, in an inner join. The Desktop Database Drivers do not support full or nested outer joins.</p>
<p>
A SELECT statement can contain a list of OUTER JOIN clauses. The field names in the ON clause of the outer join do not have to be in the same order as their respective table names in the OUTER JOIN clause. The comparison operator in the ON clause can be any of the ODBC comparison operators.</p>
<p>
To create an outer join, execute an ODBC OUTER JOIN statement in the ODBC escape clause, or use Microsoft Jet syntax. The ODBC OUTER JOIN syntax is as follows:</p>
<p>
<b>{oj</b> <i>tablename1</i> [<b>LEFT </b>or <b>RIGHT</b>] <b>OUTER JOIN </b><i>tablename2</i> <b>ON <BR><font face="Symbol"><span style="font-family:symbol">&#250;</span></font></b><i>tablename1</i>.<i>field</i>=<i>tablename2</i>.<i>field</i><b>}</b></p>
<p>
<b>See Also   </b>Appendix&nbsp;B, “SQL Reference,” shows the syntax of join statements in Microsoft Jet.</p>
<h5>Procedure Invocation</h5>
<p>
To invoke procedures by using the Microsoft Access driver, call the <b>SQLExecDirect</b> or <b>SQLPrepare</b> function with the following escape-clause syntax</p>
<p>
<b>{CALL </b><i>procedure-name</i> [<b>(</b><i>parameter</i>[<b>,</b><i>parameter</i>]...<b>)</b>]<b>}</b></p>
<p>
where <i>procedure-name</i> specifies the name of a procedure stored on the data source and <i>parameter</i> specifies a procedure parameter. This escape clause acts as an indicator to the driver that it must translate the statement within it from ODBC standard syntax to DBMS-specific syntax.</p>
<p>
To use a parameter query with the same syntax, pass markers (“?”) for parameters in the CALL statement and use <b>SQLBindParameter</b> to bind the parameter markers. The Desktop Database Drivers do not support expressions and constants as parameters to a called procedure. An input parameter must be a parameter marker; the drivers support only bound parameters. If a procedure name includes a hyphen, it must be delimited by the identifier quote character, a back quote (`).</p>
<h5>ODBC Scalar Functions</h5>
<p>
This section describes the ODBC string functions, numeric functions, time and date functions, and data type conversion functions supported by the Desktop Database Drivers. System scalar functions are not supported. The Desktop Database Drivers do not support user-defined functions.</p>
<p>
The Desktop Database Drivers support the following ODBC string functions:</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
ASCII</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LENGTH</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
RTRIM</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
CHAR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LOCATE</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SPACE</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
CONCAT </font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LTRIM</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SUBSTRING</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LCASE </font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
RIGHT</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
UCASE</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LEFT</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
</table><br>
<p>
The Desktop Database Drivers support the following ODBC numeric functions:</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
ABS</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
FLOOR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SIGN</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
ATAN</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
LOG</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SIN</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
CEILING</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
MOD</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQRT</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
COS</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
POWER</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
TAN</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
EXP</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
RAND</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
</table><br>
<p>
The Desktop Database Drivers support the following ODBC time and date functions:</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
DAYOFMONTH</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
HOUR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SECOND</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
DAYOFWEEK</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
MINUTE</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
WEEK</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
DAYOFYEAR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
MONTH</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
YEAR</font></td>
</tr>
</table><br>
<p>
The Microsoft Access, Microsoft Excel, and Text drivers support the following additional ODBC time and date functions:</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
CURDATE</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
NOW</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
CURTIME</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
</table><br>
<p>
Explicit data-type conversions, using the CONVERT function in an ODBC escape sequence, can be performed on the following ODBC data types:</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_BINARY</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_NUMERIC</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_CHAR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_REAL</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_DATE</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_SMALLINT</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_DOUBLE</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_TIME</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_FLOAT</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_TIMESTAMP</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_INTEGER</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_TINYINT</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_LONGVARBINARY</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_VARBINARY</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
    SQL_LONGVARCHAR</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
SQL_VARCHAR</font></td>
</tr>
</table><br>
<p>
Explicit data-type conversions cannot be performed on the following ODBC data types:</p>
<p>
SQL_BIGINT</p>
<p>
SQL_BIT</p>
<p>
SQL_DECIMAL</p>
<p>
<b>See Also   </b>For more information about the ODBC scalar functions that Microsoft Jet supports, see Appendix&nbsp;E, “Scalar Functions,” of the <i>Microsoft ODBC&nbsp;3.0 Software Development Kit and Programmer’s Reference</i>.</p>
<h5>Search Conditions</h5>
<p>
The maximum number of fields in a WHERE clause is 40. The maximum number of search conditions in a HAVING clause is 40.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hello DAO</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h2><a name="jb2hello_dao"></a>Hello DAO</h2>
<p>
“Hello World” is the first code example in the now-classic book, <i>The C Programming Language</i>, by Brian Kernighan and Dennis Ritchie. The following examples show you how to perform a simple task with DAO using Hello World. But instead of printing a string variable to the screen, our version searches for a value in a table and retrieves a message for display.</p>
<p>
The NorthwindTables database includes a table with one text field, Greeting, that contains different greetings. The following table shows the data that the Greeting field contains.</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Greeting</b></font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Bonjour</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Buenos dias</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Hello World!</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Hi</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Howdy</font></td>
</tr>
</table><br>
<p>
The following code shows one way to retrieve the greeting. In this example, <code>strDbPath</code> is the path to the NorthwindTables database, and <code>strGreeting</code> is the string for which you are searching:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim rst As Recordset

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;Greetings&quot;, dbOpenTable)

With rst
&#09;.Index = &quot;GreetingIndex&quot;
&#09;.Seek &quot;=&quot;, strGreeting
&#09;If Not .NoMatch Then
&#09;&#09;MsgBox !Greeting
&#09;Else
&#09;&#09;MsgBox &quot;Could not find &quot; &amp; strGreeting &amp; &quot;.&quot;
&#09;End If
End With
Set rst = Nothing
Set dbs = Nothing</font></pre>
<p>
The following explains what’s happening when this code runs:
<ol>
<li>
First, two object variables named <code>dbs</code> and <code>rst</code> are declared. These are used to point to the actual <b>Database</b> and <b>Recordset</b> objects used in the example.<br><br></li>
<li>
The <b>Set</b> statement and the <b>OpenDatabase</b> method return a reference to the NorthwindTables database, represented by the variable <code>strDbPath</code>, and assign the variable dbs to the database. If you install the sample databases to the default folder, then the value of <code>strDbPath</code> is <code>&quot;C:\JetBook\Samples\NorthwindTables.mdb&quot;</code>. If you open NorthwindTables.mdb in Microsoft Access and paste this code into a module, you can set the <b>Database</b> object variable by using the <b>CurrentDb</b> function.<br><br></li>
<li>
The <b>Set</b> statement is used again, this time to assign the rst object variable to the table named Greetings. This is done by using the <b>OpenRecordset</b> method of the <b>Database</b> object. This method tells DAO to look in the NorthwindTables database (NorthwindTables.mdb) for the Greetings table.<br><br></li>
<li>
Next, the code tells DAO which index to use when searching the table. This is done by setting the <b>Index</b> property of the <b>Recordset</b> object to the value <code>&quot;GreetingIndex&quot;</code>. This index exists on the Greeting field in the Greetings table.<br><br></li>
<li>
Then the <b>Recordset</b> object’s <b>Seek</b> method is called to find the record where the value of the indexed field is equal to value of <code>strGreeting</code>. You can experiment with searching for other values in the table by using the <b>Seek</b> method to look for other values in the table.<br><br></li>
<li>
Next, the <b>NoMatch</b> property of the <b>Recordset</b> object is checked to see if a match was found. If a match was found, the value of the Greeting field is displayed. If not, an error message is displayed.<br><br></li>
<li>
Finally, the <b>Set</b> statement is used at the end of the procedure to set the value of the <b>Database</b> and <b>Recordset</b> object variables to <b>Nothing</b>, freeing up any memory that they may have used while they existed.</li>
</ol>
<p>
The end result is a program that displays one of the greetings (such as “Hello World!”) stored in the Greetings table of the NorthwindTables database. The key concepts in this example are:
<ul>
<li>
DAO is a hierarchy of objects. The Greetings <b>TableDef</b> object is in the <b>TableDefs</b> collection of the <b>Database</b> object, and the GreetingIndex <b>Index</b> object is in the <b>Indexes</b> collection of the Greetings <b>TableDef</b> object.<br><br></li>
<li>
Methods initiate actions on objects. This example uses methods to open a database and a table, and to find a record.<br><br></li>
<li>
Properties define characteristics of objects. In this example, the value of the <b>Index</b> property of the <b>Recordset</b> object is set to tell DAO how to order the records that you are going to search.</li>
</ul>
<p>
As you progress through the rest of this chapter, you’ll see how these elements work together to form a cohesive DAO object model that provides flexible access to the objects and data in your database.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User and Group Examples</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2user_and_group_examples"></a>User and Group Examples</h4>
<p>
Now that you understand the conceptual points of working with users and groups, here are some specific examples.</p>
<h5>Adding a New User to an Existing Group</h5>
<p>
This example shows how to create a new user. The important step to note is adding the new user to the default Users group. Unlike creating a new user with the Microsoft Access user interface, this is not done automatically by Microsoft Jet: Your code must handle adding new users to the default Users group, along with any other group. The code works by first creating a new user with the <b>CreateUser</b> method of the <b>Workspace</b> object. It then appends this new user to the <b>Users</b> collection to make it a permanent part of security. Finally, it adds the default Users group to the collection of groups associated with this user.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function AddUser(strWorkgroup As String, strUser As String, _
&#09;strPID As String, strPwd As String) As Boolean
&#09;&#09;
&#09;Dim wrk As Workspace
&#09;Dim usr As User, grp As Group
&#09;
&#09;On Error GoTo Err_AddUser
&#09;DBEngine.SystemDB = strWorkgroup
&#09;Set wrk = DBEngine(0)
&#09;' Create user and append to default Workspace object.
&#09;Set usr = wrk.CreateUser(strUser, strPID, strPwd)
&#09;wrk.Users.Append usr
&#09;
&#09;' Add user to Users group.
&#09;Set grp = usr.CreateGroup(&quot;Users&quot;)
&#09;usr.Groups.Append grp
&#09;usr.Groups.Refresh
&#09;AddUser = True
&#09;&#09;
Exit_AddUser:
&#09;Exit Function
&#09;
Err_AddUser:
&#09;MsgBox &quot;Error: &quot; &amp; Err.Number &amp; vbCrLf &amp; Err.Description
&#09;AddUser = False
&#09;Resume Exit_AddUser
End Function</font></pre>
<h5>Removing a User from a Group</h5>
<p>
The following example removes a user from a specified group. It works by first checking to see if the specified user is actually a member of the specified group. It does this by disabling error handling and assigning a temporary string to the group name you want to check. If the string is assigned, the user is a member of the group. In this case, the <b>Delete</b> method is used on the user’s <b>Groups</b> collection. If the string is not assigned, this indicates that the user is not a member of the specified group, and the code displays an error message.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub RemoveUserFromGroup(strWorkgroup As String, strUser As String, _
&#09;&#09;strGroup As String)
&#09;Dim usr As User
&#09;Dim strTemp As String

&#09;DBEngine.SystemDB = strWorkgroup
&#09;Set usr = DBEngine.Workspaces(0).Users(strUser)

&#09;On Error Resume Next
&#09;' If user does not belong to specified group, then
&#09;' strTemp will be an empty string.
&#09;strTemp = usr.Groups(strGroup).Name
&#09;If strTemp = strGroup Then
&#09;&#09;usr.Groups.Delete strGroup
&#09;Else
&#09;&#09;Debug.Print &quot;User &quot; &amp; strUser &amp; _
&#09;&#09;&#09;&quot; is not a member of group &quot; &amp; strGroup
&#09;End If
End Sub </font></pre>
<p>
You can remove a user account altogether by removing the user from the <b>Users</b> collection of the default <b>Workspace</b> object.</p>
<p>
Microsoft Jet maintains information about user and group accounts in the workgroup information file, but a user’s or group’s permissions for an object are stored in the database that contains that object. When you remove a user account by using DAO, it’s important to keep in mind that permissions for that user remain on the objects in the database. If someone knew the PID for the user account that you removed, he or she could re-create the user account and access the objects in your database with the same permissions that that user account had previously. To ensure that the database remains secure when you remove a user account, remove the user from any groups the user belongs to, revoke the user’s permissions for all objects in the database, and then remove the user account.</p>
<h5>Determining If a User Has a Password</h5>
<p>
You can determine if a user has a password by attempting to log on to a new <b>Workspace</b> object as that user and supplying a blank password. If the user has no password, this will succeed. If the user does have a password, this will return a trappable error.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function UserHasPassword(strWorkgroup As String, strUser As String) As Boolean
&#09;Dim wrk As Workspace
&#09;Const errBadPassword As Integer = 3029

&#09;On Error GoTo Err_UserHasPassword
&#09;DBEngine.SystemDB = strWorkgroup

&#09;' Attempt to log on to a new Workspace object<b> </b>with a blank password.
&#09;' If an error occurs error handler will set return value to True.
&#09;Set wrk = DBEngine.CreateWorkspace(&quot;NewWorkspace&quot;, strUser, &quot;&quot;)
&#09;UserHasPassword = False

UserHasPasswordExit:
&#09;Exit Function

Err_UserHasPassword:
&#09;Select Case Err
&#09;&#09;Case errBadPassword
&#09;&#09;&#09;UserHasPassword = True
&#09;&#09;Case Else
&#09;&#09;&#09;' Unexpected error.
&#09;&#09;&#09;MsgBox Err &amp; &quot;: &quot; &amp; Err.Description
&#09;End Select
&#09;Resume UserHasPasswordExit
End Function</font></pre>
<h5>Changing a User’s Password</h5>
<p>
To change another user’s password, you must be logged on as a member of the Admins group. To change a password, use the <b>NewPassword</b> method on the user’s <b>User</b> object. If the current password is unknown, you can use a zero-length string (<code>&quot;&quot;</code>) for the current password. This enables you to easily manage situations where users have forgotten their passwords.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub ChangePwd(strWorkgroup As String, strUser As String, _
&#09;&#09;strOld As String, strNew As String)
&#09;Dim usr As User
&#09;
&#09;DBEngine.SystemDB = strWorkgroup
&#09;Set usr = DBEngine.Workspaces(0).Users(strUser)
&#09;usr.NewPassword strOld, strNew
End Sub</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Deleting Relationships by Using SQL DDL</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2creating_and_deleting_relationships_by_using_sql_ddl"></a>Creating and Deleting Relationships by Using SQL DDL</h3>
<p>
In the section “Creating and Modifying Table Indexes,” one form of the CONSTRAINT clause used in the SQL DDL language was discussed. In those examples, CONSTRAINT clauses are used to create single-field or multifield indexes for a table, either at the time the table is created (with CREATE TABLE) or after the fact (with ALTER TABLE).</p>
<p>
Another use of the CONSTRAINT clause is to create a relationship (or reference) from a foreign key of one table to the primary key of another table. With this constraint in place, it’s impossible to enter a value in the foreign key field of a table that doesn’t already exist in the primary key field of the primary table.</p>
<p>
In the following example, two indexes are created. The first is the primary key index for TaskID, and the second is a foreign key index for the EmployeeID field:</p>
<pre><FONT FACE="Courier New" SIZE="3">CREATE TABLE Tasks
&#09;(TaskID INTEGER CONSTRAINT PrimaryKey PRIMARY KEY,
&#09;&#09;EmployeeID INTEGER
&#09;CONSTRAINT FK_EmployeeID REFERENCES Employees
&#09;&#09;(EmployeeID),
&#09;DeptID TEXT (10),
&#09;TaskCompleted DateTime);</font></pre>
<p>
The next example creates a new table called Departments. The DeptID field is the primary key for the Departments table. The DeptID field is the foreign key in the Tasks table used in the example above:</p>
<pre><FONT FACE="Courier New" SIZE="3">CREATE TABLE Departments
&#09;(DeptID TEXT (10) CONSTRAINT PrimaryKey PRIMARY KEY,
&#09;Description TEXT (50) );</font></pre>
<p>
When these statements are executed, Microsoft Jet creates two new indexes, PrimaryKey and FK_EmployeeID, in the <b>Indexes</b> collection of the newly created Tasks <b>TableDef</b> object. In addition to the new foreign key indexes, a new <b>Relation</b> object is created in the database. As discussed in Chapter&nbsp;2, “Introducing Data Access Objects,” a database contains a <b>Relations</b> collection, which stores information about all the inter-table relationships defined for your database. Each <b>Relation</b> object contains several properties, such as <b>Table</b> and <b>ForeignTable</b>, which identify the tables that participate in the relationship. Each <b>Relation</b> object also contains a <b>Fields</b> collection, which identifies the <b>Field</b> objects that make up the <b>Relation</b> object.</p>
<p>
You can create a relationship for an existing table by using the ALTER TABLE statement. The following example creates a new relationship between the Tasks table and the Departments table:</p>
<pre><FONT FACE="Courier New" SIZE="3">ALTER TABLE Tasks
&#09;ADD CONSTRAINT FK_DeptID 
&#09;FOREIGN KEY (DeptID) REFERENCES Departments (DeptID);</font></pre>
<p>
Setting a referential integrity foreign key constraint is the only form of relationship that can be established through SQL DDL. To set other <b>Relation</b> object types, such as cascading updates or cascading deletes, you must create the <b>Relation</b> object through DAO.</p>
<p>
There is no way to modify an existing relationship. You must delete the relationship and then re-create it.</p>
<p>
To delete a relationship by using SQL DDL, use an ALTER TABLE statement with the DROP CONSTRAINT clause. The following SQL DDL statement deletes the relationship created between the Tasks table and the Departments table in the previous example:</p>
<pre><FONT FACE="Courier New" SIZE="3">ALTER TABLE Tasks
&#09;DROP CONSTRAINT FK_DeptID </font></pre>
</BODY>
</HTML>

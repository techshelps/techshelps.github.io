<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Permissions for Databases</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2permissions_for_databases"></a>Permissions for Databases</h4>
<p>
As with other objects, the database itself has its own unique permissions. Permissions for the database itself are set by modifying the <b>Document</b> object in the <b>Container</b> object named “Databases.” While this may seem to be counterintuitive at first, it does make sense when you remember that all permission settings work at the <b>Containers</b> and <b>Documents</b> level. To work the database itself into this scheme, Microsoft Jet defines a database <b>Document</b> object called MSysDb. By setting the <b>Permissions</b> property of this document, you are in effect setting the permissions for the database itself. The following permissions are defined for this document.</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Constant</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Value</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Description</b></font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>dbSecDBOpen</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
&amp;H2</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Defines the permission to open the database. If a user does not have this permission, the user cannot open the database. This is the most restrictive form of permissions.</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>dbSecDBOpenExclusive</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
&amp;H4</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Defines the permission to open the database exclusively. This permission is useful in multiuser environments where you want to deny users permission to open a shared database exclusively. If a user could open a shared database exclusively, your multiuser system would quickly become a single-user system.</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>dbSecDBAdmin</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
&amp;H8</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Defines users’ permission to change a database password and make a database replicable. In Microsoft Access, this also defines users’ permissions to change settings in the <b>Startup</b> dialog box (<b>Tools</b> menu, <b>Startup</b>).</font></td>
</tr>
</table><br>
<p>
As an example, assume that you don’t want user Hannah to have permission to open a database, but you want to allow user Jayne to open it exclusively. The following code accomplishes this. Note that user accounts named Hannah and Jayne must exist in order for this code to run. In this example, <code>strDbPath</code> is the path to the database, and <code>strWorkgroup</code> is the path to the workgroup information file:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim doc As Document
Dim dbs As Database
Dim strUser As String

DBEngine.SystemDb = strWorkgroup
Set dbs = OpenDatabase(strDbPath)
Set doc = dbs.Containers!Databases!MSysDB

With doc
&#09;' Remove Hannah's permission to open the database.
&#09;strUser = &quot;Hannah&quot;
&#09;.UserName = strUser
&#09;.Permissions = .Permissions And _
&#09;&#09;Not dbSecDBOpen

&#09;' Give Jayne the ability to open the database exclusively.
&#09;strUser = &quot;Jayne&quot;
&#09;.UserName = strUser
&#09;.Permissions = .Permissions Or _
&#09;&#09;dbSecDBExclusive Or dbSecDBOpen
End With</font></pre>
<h5>Preventing Users from Creating Databases</h5>
<p>
You can also use Microsoft Jet to prevent users from creating databases. Because this permission is applied to users and not to a specific database, the permission is stored in the <b>Container</b> object named “Databases” in the workgroup information file. By default, anyone in the Admins group or the Users group has this permission, which is represented by the constant <b>dbSecDBCreate</b>.</p>
<p>
It may not be necessary to set this permission in most circumstances. However, removing this permission is the only way you can prevent users from owning a database. For example, you can remove this permission if you’re concerned that users might create a new database and import the objects in your database into the new database, which they own. Since you can’t revoke ownership of a database, you can remove database creation permissions to prevent users from creating a new database in the first place.</p>
<p>
To reference the path to a workgroup information file in your code, you use the <b>SystemDB</b> property. The following code denies a user or group the permission to create databases:</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub RemoveCreatePerms(strWorkgroup As String, strUser As String)
&#09;Dim dbs As Database
&#09;Dim ctr As Container
&#09;
&#09;' Set SystemDB property to name of workgroup information file.
&#09;DBEngine.SystemDB = strWorkgroup
&#09;' Open workgroup information file.
&#09;Set dbs = OpenDatabase(strWorkgroup)
&#09;Set ctr = dbs.Containers!Databases
&#09;With ctr
&#09;&#09;' Revoke database creation permissions for user or group
&#09;&#09;' in workgroup information file.
&#09;&#09;.UserName = strUser
&#09;&#09;.Permissions = .Permissions And Not dbSecDBCreate
&#09;End With
End Sub</font></pre>
<h5>Database Passwords</h5>
<p>
In some cases, the only security a developer needs is the ability to prevent unauthorized users from opening the database; after the user has the database open, no other security is needed. To meet this need, Microsoft Jet&nbsp;3.0 and 3.5 enable you to password-protect the database itself.</p>
<p>
The database password is stored in the database header pages of the database itself. Setting a database password has no effect on the workgroup information file.</p>
<p>
<b>Caution   </b>If you lose the password to your database, you can never open the database again! Make sure you have adequate safeguards: Always have hard copies of your database passwords stored in a secure place.</p>
<p>
<b>Setting the Database Password</b></p>
<p>
The database password can be set either through the Microsoft Access user interface using the <b>Set Database Password</b> command (<b>Tools</b> menu, <b>Security</b> submenu), or through DAO with the <b>NewPassword</b> method. When using either method, the database must be opened exclusively.</p>
<p>
The following code opens the Orders database and assigns the password “topsecret” to it. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database

' Open database in exclusive mode.
Set dbs = OpenDatabase(strDbPath, True)
' Assign new password.
dbs.NewPassword &quot;&quot;, &quot;topsecret&quot;
dbs.Close</font></pre>
<p>
<b>Opening a Password-Protected Database</b></p>
<p>
After a database password has been set, all attempts to open that database fail unless the correct password is given. To open a password-protected database using DAO, you specify the password as the <i>connect</i> argument of the <b>OpenDatabase</b> method. For example, the following code opens the password-protected Orders database. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database

' Open database with password parameter.
Set dbs = OpenDatabase(strDbPath, _
&#09;False, False, &quot;;pwd=topsecret&quot;)</font></pre>
<p>
<b>Changing the Database Password</b></p>
<p>
To change the database password, you must supply both the existing and new passwords to the <b>NewPassword</b> method. The following example changes the password of the Orders database from “topsecret” to “ultrasecret”:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim strDbPath As String

Set dbs = OpenDatabase(strDbPath, True, _
&#09;False, &quot;;pwd=topsecret&quot;)
dbs.NewPassword &quot;topsecret&quot;, &quot;ultrasecret&quot;</font></pre>
<p>
You can remove the database password by using the <b>NewPassword</b> method to set the password to a zero-length string (<code>&quot;&quot;</code>), or through the Microsoft Access user interface by using the <b>Unset Database Password</b> command (<b>Tools</b> menu, <b>Security</b> submenu).</p>
<p>
<b>Note   </b>This new capability increases the chance that generic <b>OpenDatabase</b> method code will stop working. Always check to see if your attempt to open a database has succeeded. Given that your code may encounter a password-protected database, it should have the flexibility to handle such cases.</p>
<p>
<b>Preventing Users from Setting a Database Password</b></p>
<p>
In an unsecured environment, any user can set a database password. This can create problems for your application because you and other users won’t be able to open it. You can prevent users from doing this by removing Administer permissions from the <b>Database</b> object.</p>
<p>
If you want to make it impossible for users to set a database password, follow the steps to secure a database using the User-Level Security Wizard in the “Securing Your Database with Microsoft Access” section earlier in this chapter. This will prevent all users who aren’t members of the Admins group from setting the database password.</p>
<p>
If, however, you just want to make it difficult for users to set a database password, you don’t need to fully implement security. Simply remove Administer permissions from the <b>Database</b> object for the Admin user, the Users group, and the Admins group. All users who try to set the database password will fail and receive a permission denied error: Before they could set the password, they would first have to explicitly grant themselves permission to do so. For many applications, that is security enough.</p>
</BODY>
</HTML>

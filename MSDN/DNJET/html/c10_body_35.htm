<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Showing All Permissions for All Objects for All Users and Groups</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2showing_all_permissions_for_all_objects_for_all_users_and groups"></a>Showing All Permissions for All Objects for All Users and&nbsp;Groups</h4>
<p>
This example iterates through each <b>Users</b> and <b>Groups</b> collection. Within those collections it iterates through all the <b>Containers</b> and <b>Documents</b> collections in the </p>
<p>
current database and displays the permissions. This approach is useful if you want to see permissions for all the objects in the database, not just the default table and query objects that Microsoft Jet recognizes. For example, this code could be used on a database created with Microsoft Access to show permissions on not only the Microsoft Jet objects, but also the application-specific Microsoft Access objects such as forms, reports, macros, and modules.</p>
<p>
In this example, <code>strDbPath</code> is the path to the database. Note that if there are many objects in the database, this procedure may take a while to run.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub ShowPermissions(strDbPath As String)
&#09;Dim wrk As Workspace, dbs As Database
&#09;Dim usr As User, grp As Group
&#09;Dim ctr As Container, doc As Document
  
&#09;Set wrk = DBEngine.Workspaces(0)
&#09;Set dbs = OpenDatabase(strDbPath)
  
&#09;For Each usr In wrk.Users
&#09;&#09;Debug.Print &quot;User: &quot; &amp; usr.Name
&#09;&#09;Debug.Print &quot;----------------------&quot;
&#09;&#09;For Each ctr In dbs.Containers
&#09;&#09;&#09;Debug.Print &quot;  container: &quot; &amp; ctr.Name
&#09;&#09;&#09;For Each doc In ctr.Documents
&#09;&#09;&#09;&#09;doc.UserName = usr.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;    Document: &quot; &amp; doc.Name &amp; _
&#09;&#09;&#09;&#09;&#09;&quot; Permissions: &quot; &amp; doc.Permissions
&#09;&#09;&#09;Next doc
&#09;&#09;Next ctr
&#09;Next usr
  
&#09;For Each grp In wrk.Groups
&#09;&#09;Debug.Print &quot;Group: &quot; &amp; grp.Name
&#09;&#09;Debug.Print &quot;----------------------&quot;
&#09;&#09;For Each ctr In dbs.Containers
&#09;&#09;&#09;Debug.Print &quot;  container: &quot; &amp; ctr.Name
&#09;&#09;&#09;For Each doc In ctr.Documents
&#09;&#09;&#09;&#09;doc.UserName = grp.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;    Document: &quot; &amp; doc.Name &amp; _
&#09;&#09;&#09;&#09;&#09;&quot; Permissions: &quot; &amp; doc.Permissions
&#09;&#09;&#09;Next doc
&#09;&#09;Next ctr
&#09;Next grp
End Sub</font></pre>
<h5>A Better Solution</h5>
<p>
The main problem with the ShowPermissions code is that it returns only a numeric permission value for each object. The following three procedures produce a much more readable output.</p>
<p>
First, the ShowPermissions procedure is modified to call a function to decode the value of an object’s <b>Permissions</b> property:</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub ShowPermissionsAsText(strDbPath As String)
&#09;Dim wrk As Workspace, dbs As Database
&#09;Dim usr As User, grp As Group
&#09;Dim ctr As Container, doc As Document
&#09;Dim intType As Integer
  
&#09;Set wrk = DBEngine.Workspaces(0)
&#09;Set dbs = OpenDatabase(strDbPath)
&#09;
&#09;For Each usr In wrk.Users
&#09;&#09;Debug.Print &quot;User: &quot; &amp; usr.Name
&#09;&#09;Debug.Print &quot;----------------------&quot;
&#09;&#09;For Each ctr In dbs.Containers
&#09;&#09;&#09;Debug.Print &quot;  Container: &quot; &amp; ctr.Name
&#09;&#09;&#09;Select Case ctr.Name
&#09;&#09;&#09;&#09;Case &quot;Tables&quot;: intType = 1
&#09;&#09;&#09;&#09;Case &quot;Databases&quot;: intType = 2
&#09;&#09;&#09;&#09;Case Else: intType = -1
&#09;&#09;&#09;End Select
&#09;&#09;&#09;For Each doc In ctr.Documents
&#09;&#09;&#09;&#09;doc.UserName = usr.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;    Document: &quot; &amp; doc.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;      Permissions: &quot; &amp; _
&#09;&#09;&#09;&#09;&#09;DecodePerms(intType, doc.Permissions)
&#09;&#09;&#09;Next doc
&#09;&#09;Next ctr
&#09;Next usr
&#09;
&#09;For Each grp In wrk.Groups
&#09;&#09;Debug.Print &quot;Group: &quot; &amp; grp.Name
&#09;&#09;Debug.Print &quot;----------------------&quot;
&#09;&#09;For Each ctr In dbs.Containers
&#09;&#09;&#09;Debug.Print &quot;  Container: &quot; &amp; ctr.Name
&#09;&#09;&#09;Select Case ctr.Name
&#09;&#09;&#09;&#09;Case &quot;Tables&quot;: intType = 1
&#09;&#09;&#09;&#09;Case &quot;Databases&quot;: intType = 2
&#09;&#09;&#09;&#09;Case Else: intType = -1
&#09;&#09;&#09;End Select
&#09;&#09;&#09;For Each doc In ctr.Documents
&#09;&#09;&#09;&#09;doc.UserName = grp.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;    Document: &quot; &amp; doc.Name
&#09;&#09;&#09;&#09;Debug.Print &quot;      Permissions: &quot; &amp; _
&#09;&#09;&#09;&#09;&#09;DecodePerms(intType, doc.Permissions)
&#09;&#09;&#09;Next doc
&#09;&#09;Next ctr
&#09;Next grp
End Sub</font></pre>
<p>
Next, two new procedures are added to perform the actual conversion:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function DecodePerms(intType As Integer, lngPerms As Long) As String
&#09;Dim strPerms As String
  
&#09;' Decode the common permissions.
&#09;If (lngPerms And dbSecNoAccess) = dbSecNoAccess Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecNoAccess&quot;)
&#09;
&#09;If (lngPerms And dbSecFullAccess) = dbSecFullAccess Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecFullAccess&quot;)
  
&#09;If (lngPerms And dbSecDelete) = dbSecDelete Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecDelete&quot;)
&#09;
&#09;If (lngPerms And dbSecReadSec) = dbSecReadSec Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecReadSec&quot;)
  
&#09;If (lngPerms And dbSecWriteSec) = dbSecWriteSec Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecWriteSec&quot;)
  
&#09;If (lngPerms And dbSecWriteOwner) = dbSecWriteOwner Then _
&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecWriteOwner&quot;)

&#09;' Decode specific permissions.
&#09;Select Case intType
&#09;&#09;Case 1
&#09;&#09;&#09;' Object is table or query.
&#09;&#09;&#09;If (lngPerms And dbSecReadDef) = dbSecReadDef Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecReadDef&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecWriteDef) = dbSecWriteDef Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecWriteDef&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecRetrieveData) = dbSecRetrieveData Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecRetrieveData&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecInsertData) = dbSecInsertData Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecInsertData&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecReplaceData) = dbSecReplaceData Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecReplaceData&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecDeleteData) = dbSecDeleteData Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecDeleteData&quot;)
&#09;
&#09;&#09;Case 2
&#09;&#09;&#09;' Object is database.
&#09;&#09;&#09;If (lngPerms And dbSecDBOpen) = dbSecDBOpen Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecDBOpen&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecDBExclusive) = dbSecDBExclusive Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecDBExclusive&quot;)

&#09;&#09;&#09;If (lngPerms And dbSecDBAdmin) = dbSecDBAdmin Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecDBAdmin&quot;)
&#09;&#09;&#09;
&#09;&#09;Case 3
&#09;&#09;&#09;' Object is container.
&#09;&#09;&#09;If (lngPerms And dbSecWriteOwner) = dbSecWriteOwner Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecWriteOwner&quot;)
&#09;
&#09;&#09;&#09;If (lngPerms And dbSecCreate) = dbSecCreate Then _
&#09;&#09;&#09;&#09;strPerms = AddString(strPerms, &quot;dbSecCreate&quot;)
&#09;&#09;&#09;
&#09;&#09;Case Else
&#09;&#09;&#09;' Unknown object, pass the permissions back.
&#09;&#09;&#09;strPerms = CStr(lngPerms)
&#09;End Select
&#09;
&#09;DecodePerms = strPerms
End Function

Function AddString(strCurrent As String, strIn As String) As String
&#09;Dim strPerms As String

&#09;If strCurrent = &quot;&quot; Then
&#09;&#09;&#09;strPerms = strIn
&#09;Else
&#09;&#09;&#09;strPerms = strCurrent &amp; &quot;,&quot; &amp; strIn
&#09;End If
 
&#09;AddString = strPerms
End Function</font></pre>
<p>
This works as follows:
<ol>
<li>
The ShowPermissionsAsText procedure iterates through each object and retrieves the value of the <b>Permissions</b> property.<br><br></li>
<li>
This value is sent to the DecodePerms function, which compares it to the permission constants for that particular object type.<br><br></li>
<li>
The DecodePerms function calls the AddString function to add the text representation of the permission name to a string, and returns it to the DecodePerms function.<br><br></li>
<li>
The DecodePerms function takes the final concatenated string and passes it back to the ShowPermissionsAsText procedure for display.</li>
</ol>
<p>
<b>Note   </b>The DecodePerms function decodes permissions only for Microsoft Jet-specific objects. You can modify it to include other application-defined permissions, such as those defined by Microsoft Access for Microsoft Access-specific objects.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Identifying Users</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2identifying_users"></a>Identifying Users</h3>
<p>
In your multiuser application, you may want to programmatically identify the user currently logged on to the system. This is useful for administrative functions such as storing the user’s name with edited records to create an audit trail. Several methods are available to achieve this functionality. One involves Microsoft Jet user-level security, another requires you to maintain your own user information, and another requires using utilities on the CD-ROM included with this book.</p>
<p>
When you establish user-level security for your database, you force the user to log on to your application with a predefined user name and password. The user name is then available to your application through the <b>UserName</b> property of the <b>Workspace</b> object. The following procedure writes the user’s name and the current date and time to fields. In this example, <code>strDbPath</code> is the path to the database.</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset

Set dbs = OpenDatabase(strDbPath)
' Open recordset.
Set rst = dbs.OpenRecordset(&quot;AuditTrail&quot;)
With rst
&#09;' Add new record.
&#09;.AddNew
&#09;' Write name of current user to table.
&#09;!UserLastModified = Workspaces(0).UserName
&#09;' Write time to table.
&#09;!DateLastModified = Now
&#09;.Update
End With</font></pre>
<p>
<b>See Also   </b>For more information about users and passwords, see Chapter&nbsp;10, “<a href="c10_body.htm">Managing Security</a>.”</p>
<p>
If you don’t want to implement security, but still want to identify users, you can have your application prompt the user for a name and password at startup and store those values in code variables or a temporary table. This way, you still have access to the user’s name, but don’t have to implement a secured database.</p>
<p>
A new (currently unsupported) way to get this information is to use the graphical 32-bit-only Ldbview.exe or programmatic 32-bit Msldbusr.dll utilities. These are found on the CD-ROM that comes with this guide.</p>
<p>
<b>See Also   </b>For information about how to use Ldbview.exe and Msldbusr.dll to view information about users, see the “Understanding Microsoft Jet Locking” white paper in the Papers folder on the companion CD-ROM. Its file name is Jetlock.doc.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2creating_your_own_properties"></a>Creating Your Own Properties</h4>
<p>
Earlier, this chapter introduced user-defined properties, which you can use to store and retrieve your own information about an object. DAO is extensible by using these properties. The following function tries to set a property on an object. If the property doesn’t exist in that object’s <b>Properties</b> collection, then the function creates the property and appends it to the collection:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function SetCustomProperty(obj As Object, strName As String, _
&#09;&#09;intType As Integer, varSetting As Variant) As Boolean
&#09;' This procedure attempts to set a property on an object.
&#09;' If the property does not exist in the object's Properties collection,
&#09;' then the procedure creates the object.
&#09;Dim prp As Property
&#09;Const conPropNotFound As Integer = 3270

&#09;On Error GoTo ErrorSetCustomProperty
&#09;' Explicitly refer to Properties collection.
&#09;obj.Properties(strName) = varSetting
&#09;obj.Properties.Refresh
&#09;SetCustomProperty = True

ExitSetCustomProperty:
&#09;Exit Function
    
ErrorSetCustomProperty:
&#09;If Err = conPropNotFound Then

&#09;&#09;' Create property, denote type, and set initial value.
&#09;&#09;Set prp = obj.CreateProperty(strName, intType, varSetting)
&#09;&#09;' Append Property object to Properties collection.
&#09;&#09;obj.Properties.Append prp
&#09;&#09;obj.Properties.Refresh
&#09;&#09;SetCustomProperty = True
&#09;&#09;Resume ExitSetCustomProperty
&#09;Else
&#09;&#09;MsgBox Err &amp; &quot;: &quot; &amp; vbCrLf &amp; Err.Description
&#09;&#09;SetCustomProperty = False
&#09;&#09;Resume ExitSetCustomProperty
&#09;End If
End Function</font></pre>
<p>
For example, to create a property called DateLastModified on each table in a database, you may call this function from the following code, which creates the property on each table that isn’t a system object. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, tdf As TableDef
' Define constant to specify system object.
Const conSystemObject As Long = -2147483648

Set dbs = OpenDatabase(strDbPath)
For Each tdf In dbs.TableDefs
&#09;' Check to see whether table is system object or hidden.
&#09;If Not (tdf.Attributes And conSystemObject) = conSystemObject Then
&#09;&#09;If Not (tdf.Attributes And dbHiddenObject) = dbHiddenObject Then
&#09;&#09;&#09;' Set property.
&#09;&#09;&#09;SetCustomProperty tdf, &quot;DateLastModified&quot;, dbDate, Now
&#09;&#09;End If
&#09;End If
Next tdf</font></pre>
<p>
Of course, simply adding a property doesn’t automatically update and maintain it. In the previous example, the DateLastModified property is added to the <b>TableDef</b> object, but that’s the extent of what the code does. Your application must programmatically update the value of this property when appropriate.</p>
</BODY>
</HTML>

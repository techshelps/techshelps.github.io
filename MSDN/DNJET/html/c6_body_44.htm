<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Minimizing Network Traffic for Data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2minimizing_network_traffic_for_data"></a>Minimizing Network Traffic for Data</h3>
<p>
Most of the optimizations you perform for data access in a single-user environment create equal, if not greater, improvements in multiuser environments. When you optimize a single-user application, you’re concerned only with that application’s performance on a local machine. When you optimize a multiuser application, reductions in network traffic help not only the individual user, but all users of the application.</p>
<p>
For example, consider the case where your application has to search for a record in a table that has no indexes. In this scenario, Microsoft Jet must perform a <i>sequential scan</i> of the entire table to find a match. This means that the entire table must be sent from the server to the workstation’s copy of the engine. If the table is large, this can be a quite lengthy operation. The problem is further compounded because the user running the search is waiting a long time for a response, and the high volume of network traffic is in turn slowing down other users. This situation can be alleviated by adding indexes to the table for the fields on which your application searches. However, keep in mind that having indexes may cause increased network traffic and may reduce concurrency and efficient performance.</p>
<p>
<b>See Also   </b>For more information about when to use indexes, see “Other Optimization Tips and Techniques” in Chapter&nbsp;13, “Optimizing Performance.”</p>
<p>
In another example, assume that your application uses a set of tables containing lookup data that represents postal codes or lists of part numbers&nbsp;— data that doesn’t change often. By moving this type of data to the local workstation, you can eliminate network access that may be made hundreds of times during the application’s typical execution.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting to the Employee Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2connecting_to_the_employee_database"></a>Connecting to the Employee Database</h4>
<p>
The Employee application displays a dialog box that prompts for the location of Employee.mdb. The application uses this information to connect to the database and open a table-type <b>Recordset</b> object on the Employees table. The application is positioned on the first record in the table. Note that this application is designed to work only with Employee.mdb; specifying another database causes an error (unless that database happens to have a table named Employees). The following code contains the <b>ConnectToDatabase</b> function:</p>
<pre><FONT FACE="Courier New" SIZE="3">BOOL CDAOEMPDoc::ConnectToDatabase()
{
&#09;CFileDialog&#09;&#09;cOpenFile(&#09;TRUE, 
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;_T(&quot;MDB&quot;), 
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;_T(&quot;employee.mdb&quot;), 
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, 
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;(_T(&quot;Access Files (*.mdb) | *.mdb ||&quot;)));



&#09;//Get the location of database (assume it's the Employee example).
&#09;cOpenFile.DoModal();

&#09;//Open the database and the recordset.
&#09;try
&#09;&#09;{
&#09;&#09;//NOTE: Using the default collection rather than Workspaces.Items.
&#09;&#09;m_cEmpDatabase = m_cDBEngine.OpenDatabase(cOpenFile.m_ofn.lpstrFile);
&#09;&#09;m_cEmpRecordSet = m_cEmpDatabase.OpenRecordset(_T(&quot;Employees&quot;));
&#09;&#09;m_cEmpRecordSet.MoveFirst();
&#09;&#09;}

&#09;catch (CdbException dbExcept)
&#09;&#09;{
&#09;&#09;CdbLastOLEError exError;
&#09;&#09;TCHAR szBuf[256];

&#09;&#09;//If error is &quot;No Current Record,&quot; assume it's an empty table.
&#09;&#09;if(dbExcept.m_hr == E_DAO_NoCurrentRecord)
&#09;&#09;&#09;{
&#09;&#09;&#09;m_bEmptyTable = TRUE;
&#09;&#09;&#09;}
&#09;&#09;else
&#09;&#09;&#09;{
&#09;&#09;&#09;wsprintf(szBuf, _T(&quot;Error %d : %s\n&quot;), DBERR(dbExcept.m_hr),
&#09;&#09;&#09;&#09; (LPCTSTR) exError.GetDescription());
&#09;&#09;&#09;AfxMessageBox(szBuf);
&#09;&#09;&#09;return (FALSE);
&#09;&#09;&#09;}
&#09;&#09;}


&#09;return TRUE;
}</font></pre>
<p>
The C++ calls to the <b>OpenDatabase</b> and <b>OpenRecordset</b> methods are similar to equivalent methods called in Visual Basic. The dbDAO variables behave like objects with associated properties and methods. Collections are also supported; for example, the call to the <b>OpenDatabase</b> method could be rewritten using the <b>Workspaces</b> collection as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">m_cEmpDatabase = m_cDBEngine.Workspaces[0L].OpenDatabase(cOpenFile.m_ofn.lpstrFile);</font></pre>
<p>
Note that the index is cast as <b>LONG</b>; otherwise, the compiler interprets the “0” as NULL.</p>
<p>
<b>See Also   </b>For more information about dbDAO properties, methods, and collections, see “dbDAO Syntax” later in this chapter.</p>
<p>
To handle exceptions raised by errors, the dbDAO code is nested in a <b>try-catch</b> block. For example, if the Employees table is not found in the database, the call to the <b>OpenRecordset</b> method throws an exception. Execution immediately switches to the <b>catch</b> block, which in this case displays a dialog box containing information about the error. The <b>DBERR</b> macro is used to convert the error from an HRESULT to a Visual Basic error number. For more information about errors, see “Handling dbDAO Errors” later in this chapter.</p>
<p>
Strings in the <b>ConnectToDatabase</b> function are wrapped in the <b>_T</b> macro. Using this macro allows the code to compile for both ANSI and Unicode. The dbDAO class run-time libraries are available in both ANSI and Unicode versions. For more information, see “ANSI and Unicode Strings” later in this chapter.</p>
</BODY>
</HTML>

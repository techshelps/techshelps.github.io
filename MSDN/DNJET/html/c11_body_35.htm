<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Records from the Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2reading_records_from_the_database"></a>Reading Records from the Database</h3>
<p>
When the page containing the simpledao.java applet first appears on the screen, the applet’s <b>start</b> method is called. In this sample, this method creates the form, moves to the first field in the recordset, and then displays the field values.</p>
<pre><FONT FACE="Courier New" SIZE="3">public void start()
{
&#09;// Create the form, passing it the recordset.
&#09;m_form = new SimpleForm(recordset);

&#09;// Add it to the applet.
&#09;add(&quot;Center&quot;, m_form);

&#09;// Get the first record in the recordset.
&#09;recordset.MoveFirst();

&#09;// Display that record.
&#09;m_form.showData();

}</font></pre>
<p>
Reading data and displaying the results is done in the SimpleForm class. The fields on the form are created in the SimpleForm constructor. The <b>showData</b> method displays the value for each field in the recordset in the corresponding field on the form.</p>
<pre><FONT FACE="Courier New" SIZE="3">// Show the data in the form.
void showData()
{
&#09;// Get the fields in the recordset.
&#09;Fields fields = m_recordset.getFields();
&#09;_Field f;

&#09;// Create a Variant to get the value of each field.
&#09;Variant value;

&#09;// Get the first field.
&#09;f = fields.getItem(name1);
&#09;// Get its value.
&#09;value = f.getValue();
&#09;// Set the field in the form.
&#09;field1.setText(value.toString());

&#09;// Repeat for the other fields.
&#09;f = fields.getItem(name2);
&#09;value = f.getValue();
&#09;field2.setText(value.toString());

&#09;f = fields.getItem(name3);
&#09;value = f.getValue();
&#09;field3.setText(value.toString());

&#09;f = fields.getItem(name4);
&#09;value = f.getValue();
&#09;field4.setText(value.toString());

&#09;f = fields.getItem(name5);
&#09;value = f.getValue();
&#09;field5.setText(value.toString());

&#09;f = fields.getItem(name6);
&#09;value = f.getValue();
&#09;field6.setText(value.toString());

&#09;f = fields.getItem(name7);
&#09;value = f.getValue();
&#09;field7.setState(value.getBoolean());
}</font></pre>
<p>
The <b>getItem</b> method is used to retrieve a field from the <b>fields</b> collection. The Java Type Library Wizard generated the <b>getItem</b> method from the declaration of the <b>Item</b> method. All methods declared with the <b>propget</b> or <b>propput</b> attributes are exposed with the get or put prefixes attached to their names. The following Object Description Language (ODL) for the <b>Item</b> method shows the <b>Item</b> method declared with <b>propget</b>.</p>
<pre><FONT FACE="Courier New" SIZE="3">[id(00000000), propget, hidden]
HRESULT _stdcall Item(
                [in] VARIANT Index, 
                [out, retval] Field** ppfld);</font></pre>
<p>
<b>Note   </b>To browse the DAO version&nbsp;3.5 object library, use the OLE\COM Object Viewer. In Microsoft Developer Studio, click <b>OLE\COM Object Viewer</b> on the <b>Tools</b> menu. In the OLE\COM Object Viewer, click <b>View TypeLib</b> on the <b>File</b> menu. In the <b>File Open</b> dialog box, select \Program Files\Common Files\Microsoft Shared\DAO\dao350.dll.</p>
<p>
If you are familiar with using DAO from within Visual Basic, you will not recognize <b>Item</b> as a property of the <b>Fields</b> collection. The Java expression:</p>
<p>
<code>Fields.getItem(name5)</code></p>
<p>
is equivalent to the Visual Basic expression:</p>
<p>
<code>Fields(name5)</code>.</p>
<p>
Because the <b>Item</b> method is marked as hidden, Visual Basic will not display it as a property of the <b>Fields</b> collection. Also, because <b>Item</b> is the default property, as identified by <code>id(00000000)</code>, it is not necessary to explicitly reference it in Visual Basic.</p>
<p>
The <b>Item</b> method takes a variant parameter that can be either the name or the ordinal position of the <b>Field</b> object to return. In this sample, the variant variables that contain the names of the fields (<code>name1..name5) </code>are initialized in the constructor for SimpleForm.</p>
<p>
The variables fields and f are not explicitly released at the end of the method. The function relies on Java’s garbage collection to clean things up. In this example, it is fine to let Java clean things up. However, there may be instances when you want to explicitly release an object. The following code uses the ComLib object found in com.ms.com to release the fields object.</p>
<pre><FONT FACE="Courier New" SIZE="3">ComLib.release(fields);</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Stored Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2working_with_stored_procedures"></a>Working with Stored Procedures</h3>
<p>
You can use ODBCDirect <b>QueryDef</b> objects to run stored procedures. ODBCDirect <b>QueryDef</b> objects support stored procedures that have both input parameters and return values. Input parameters are the parameter values supplied to the procedure at run time. The procedure’s return value is the value that it returns when it has finished running. For example, a stored procedure may return the number of records that have been affected.</p>
<p>
The following example creates a stored procedure named GetEmps on the server, where strSQL is a string variable and cnn is a <b>Connection</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">strSQL = &quot;CREATE PROCEDURE GetEmps AS &quot; _
&#09;&amp; &quot;SELECT * FROM EMPLOYEE;&quot;
cnn.Execute strSQL</font></pre>
<p>
If there is already a stored procedure named GetEmps on the server, you can use the DROP statement to delete it before creating a new one, as shown in the following example.</p>
<pre><FONT FACE="Courier New" SIZE="3">strSQL = &quot;DROP PROCEDURE GetEmps;&quot;
cnn.Execute strSQL</font></pre>
<p>
You can run the stored procedure by using the <b>Execute</b> method of a <b>Connection</b> object. To retrieve the return value, create a <b>QueryDef</b> object and open a recordset on it. In this example, qdf is a <b>QueryDef</b> object and rst is a <b>Recordset</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">Set qdf = cnn.CreateQueryDef(&quot;qry&quot;, &quot;{ call GetEmps() }&quot;)
Set rst = qdf.OpenRecordset</font></pre>
<p>
Use the <b>Parameter</b> object to work with parameters. The <b>Direction</b> property of a <b>Parameter</b> object tells DAO how the parameter will function. The ODBC driver tries to determine the parameter direction, but the <b>Direction</b> property is read/write, so you can set it if you need to. The following example creates a simple stored procedure with an input parameter and a return value. It then runs the procedure and retrieves the return value into a variable of type <b>Variant</b>, varX.</p>
<pre><FONT FACE="Courier New" SIZE="3">' Create stored procedure on the server.
strSQL = &quot;CREATE PROCEDURE UpdateEmps (@invar int) AS RETURN @invar;&quot;
cnn.Execute strSQL

' Create QueryDef object to run stored procedure.
Set qdf = cnn.CreateQueryDef(&quot;qry&quot;, &quot;{ ? = call UpdateEmps(?) }&quot;)

' Handle parameters.
qdf.Parameters(0).Direction = dbParamReturnValue
qdf.Parameters(1) = 10
qdf.Execute

' Get return value.
varX = qdf.Parameters(0).Value</font></pre>
</BODY>
</HTML>

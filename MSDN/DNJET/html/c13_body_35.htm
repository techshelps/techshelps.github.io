<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use SQL DDL Statements Instead of DAO Looping Routines</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2use_sql_ddl_statements_instead_of_dao_looping_routines"></a>Use SQL DDL Statements Instead of DAO Looping Routines</h4>
<p>
In most cases when using Microsoft Jet&nbsp;3.5, it is better to use a single SQL data definition language (DDL) statement than a DAO looping routine. The following example runs an update first by using a recordset, then by executing an SQL DDL statement. Both updates are wrapped in transactions and rolled back after they have been timed.</p>
<p>
In this example, updating with the SQL DDL statement is only slightly faster than the recordset update, but the difference becomes significant for large data sets. In this example, strDbPath is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim wrk As Workspace
Dim dbs As Database
Dim rst As Recordset
Dim lngTimer As Long
Dim strDbPath As String, strSQL As String

' Return reference to default workspace.
Set wrk = DBEngine(0)
Set dbs = OpenDatabase(strDbPath)
strSQL = &quot;UPDATE [Order Details] SET UnitPrice &quot; _
&#09;&amp; &quot;= UnitPrice*1.1, Discount = Discount+0.1;&quot;

' Begin transaction.
wrk.BeginTrans
' Begin timing.
lngTimer = Timer
Set rst = dbs.OpenRecordset(&quot;Order Details&quot;)
' Update each record in the recordset.
Do Until rst.EOF
&#09;rst.Edit
&#09;rst!UnitPrice = rst!UnitPrice * 1.1
&#09;rst!Discount = rst!Discount + 0.1
&#09;rst.Update
&#09;rst.MoveNext
Loop
Debug.Print &quot;Elapsed time for recordset update = &quot; &amp; Timer - lngTimer
' Roll back changes.
wrk.Rollback

' Perform same operation with SQL DDL query.
wrk.BeginTrans
lngTimer = Timer
dbs.Execute strSQL, dbFailOnError
Debug.Print &quot;Elapsed time for DDL update = &quot; &amp; Timer - lngTimer
wrk.Rollback</font></pre>
<p>
There are two reasons that the SQL DDL update is faster than the recordset update:
<ul>
<li>
Microsoft Jet&nbsp;3.5 removed implicit transactions for SQL DDL statements.<br><br></li>
<li>
In this example, string values are being manipulated. Visual Basic uses the Unicode format and DAO inherently uses Visual Basic; however, Microsoft Jet only stores string data in ANSI format for U.S. code pages. This requires Visual Basic to translate from ANSI to Unicode and then back to ANSI whenever string data passes through DAO. This translation, especially for long string types, can slow down performance. Because the query optimizer in Microsoft Jet does not process string data through Visual Basic (unless expressions are being used), performing bulk type operations from SQL can be significantly faster when manipulating string data.</li>
</ul>
<p>
<b>See Also   </b>For more information on SQL DDL statements, see “Removal of Implicit Transactions for SQL DDL Statements” earlier in this chapter.</p>
</BODY>
</HTML>

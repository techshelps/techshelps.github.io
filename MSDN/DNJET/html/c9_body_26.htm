<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance Characteristics of Dynasets and Snapshots</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2performance_characteristics_of_dynasets_and_snapshots"></a>Performance Characteristics of Dynasets and Snapshots</h4>
<p>
Dynaset-type <b>Recordset</b> objects differ from snapshot-type and forward-only-type <b>Recordset</b> objects in the way they retrieve and cache data. They also differ in performance and data accessibility. Frequently, the needs of your application will dictate which <b>Recordset</b> type you can use. Ask yourself the following questions about your application and use the answers that follow as a guide to help you choose the right <b>Recordset</b> type for your application and to help you understand the tradeoffs between the two types.
<ul>
<li>
<b>Do you need to update the remote data?</b><p>
If you need to update the remote data, you must use a dynaset-type <b>Recordset</b> object. If you don’t need to update data or see changes made by other users, use a snapshot-type or forward-only-type <b>Recordset</b> object. Snapshot-type and forward-only-type <b>Recordset</b> objects are faster to open and scroll through than dynaset-type <b>Recordset</b> objects.</p>
</li>
<li>
<b>Is your result set large?</b><p>
If your result set contains a large number of records, a dynaset-type <b>Recordset</b> object is faster and more efficient than a snapshot-type or forward-only-type <b>Recordset</b> object. The performance difference in large <b>Recordset</b> objects occurs because your application must retrieve all records in a snapshot-type or forward-only-type <b>Recordset</b> object when you move from the first record to the last. In a dynaset-type <b>Recordset</b> object, your application only needs to retrieve the bookmark fields initially. As each record, or group of records, in the dynaset-type <b>Recordset</b> object is visited, the application retrieves the data from the server that corresponds to the bookmarks.</p>
<p>
If your result set contains a small number of records, a snapshot-type or forward-only-type <b>Recordset</b> object is faster and more efficient than a dynaset-type <b>Recordset</b> object. The performance difference in small <b>Recordset</b> objects occurs because your application can retrieve and hold a few hundred complete records more easily than it can retrieve and hold a few hundred bookmarks and subsequently retrieve the data from the server that corresponds to the bookmarks at the application’s request. This is especially true of scrolling speed: Snapshot-type or forward-only-type <b>Recordset</b> objects are faster because all the data is cached locally.</p>
</li>
<li>
<b>Do you need to retrieve data from all fields in the remote table?</b><p>
If your application doesn’t need all fields in the remote table, you can improve opening and scrolling performance in all types of <b>Recordset</b> objects by limiting the fields retrieved from the server.</p>
<p>
<b>See Also   </b>For more information about limiting the fields retrieved from the server, see “Limiting Returned Data” earlier in this chapter.</p>
</li>
<li>
<b>Does your Recordset contain Long Binary (OLE Object) or Memo fields?</b><p>
For dynaset-type <b>Recordset</b> objects, if your application retrieves records that include Long Binary (OLE Object) or Memo fields and you don’t need to view or update these objects, you can improve performance by ensuring that they aren’t retrieved. Microsoft Jet only retrieves Long Binary (OLE Object) and Memo records if they are visible through the user interface of your application (a Microsoft Access form or report, for example) when the rest of the record is retrieved. You can remove the objects from the form and add a button to expose the Long Binary (OLE Object) or Memo records as needed. This will let your users retrieve the Long Binary (OLE Object) or Memo records at will, without the burden of displaying this information when it isn’t needed.</p>
<p>
It’s also important to understand that Memo fields are cached in a snapshot-type or forward-only-type <b>Recordset</b> object. Long Binary (OLE Object) fields are not.</p>
</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running Asynchronous Queries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2running_asynchronous_queries"></a>Running Asynchronous Queries</h4>
<p>
Creating and running queries in an ODBCDirect workspace is similar to creating and running queries in a Microsoft Jet workspace. You create the query by invoking the <b>CreateQueryDef</b> method on a <b>Connection</b> object, and then use the <b>Execute</b> or <b>OpenRecordset</b> methods on the resulting query.</p>
<p>
You can use asynchronous queries so that users can continue using your application while the query runs. You can also give users the ability to cancel asynchronous queries if they are taking too long. The following example runs an asynchronous query.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function DeleteLargeSales() As Boolean
&#09;Dim wrk As Workspace, rst As Recordset
&#09;Dim cnn As Connection, qdf As QueryDef
&#09;Dim strConnect As String, strSQL As String
&#09;Dim errObj As Error

&#09;On Error GoTo Err_DeleteLargeSales
&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace(&quot;ODBC&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
&#09;' Create connection string.
&#09;strConnect = &quot;ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs&quot;
&#09;' Open connection on workspace.
&#09;Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)

&#09;' Create QueryDef.
&#09;Set qdf = cnn.CreateQueryDef(&quot;DeleteLargeSales&quot;)
&#09;strSQL = &quot;DELETE FROM sales WHERE qty &gt; 100&quot;
&#09;qdf.SQL = strSQL

&#09;' Run query asynchronously.
&#09;qdf.Execute dbRunAsync

&#09;Do Until Not qdf.StillExecuting
&#09;' Additional code runs here while query runs.
&#09;' Check StillExecuting property to determine whether query has finished.
&#09;Loop

&#09;DeleteLargeSales = True

Exit_DeleteLargeSales:
&#09;On Error Resume Next
&#09;cnn.Close
&#09;wrk.Close
&#09;Exit Function

Err_DeleteLargeSales:
&#09;For Each errObj In Errors
&#09;&#09;Debug.Print errObj.Number, errObj.Description
&#09;Next errObj
&#09;DeleteLargeSales = False
&#09;Resume Exit_DeleteLargeSales
End Function</font></pre>
<p>
The preceding example uses a <b>QueryDef</b> object on a <b>Connection</b> object to run an asynchronous query. You can also use the <b>Execute</b> method directly on the <b>Connection</b> object, as shown in the following example.</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim wrk As Workspace, cnn As Connection
Dim strConnect As String

' Create ODBCDirect workspace.
Set wrk = DBEngine.CreateWorkspace(&quot;ODBC&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
strConnect = &quot;ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs&quot;
' Open connection.
Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)
' Execute SQL statement.
cnn.Execute &quot;DELETE FROM sales WHERE qty &gt; 100&quot;, dbRunAsync
cnn.Close</font></pre>
<p>
When you run a query asynchronously, you can use the <b>StillExecuting</b> property to determine if the query has completed. If the value of the <b>StillExecuting</b> property is <b>True</b>, the query has not yet completed. If you want to cancel an asynchronous query, use the <b>Cancel</b> method, as shown in the following example.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function CancelAsynchQuery() As Boolean
&#09;Dim wrk As Workspace, cnn As Connection, strConnect As String
&#09;Dim errObj As Error

&#09;On Error GoTo Err_CancelAsynchQuery
&#09;Set wrk = DBEngine.CreateWorkspace(&quot;ODBCDirect&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
&#09;strConnect = &quot;ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs&quot;
&#09;Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)

&#09;' Start transaction in order to roll back if needed.
&#09;wrk.BeginTrans
&#09;cnn.Execute &quot;DELETE FROM sales WHERE qty &gt; 100&quot;, dbRunAsync

&#09;' Perform other operations.
&#09;&#09;.
&#09;&#09;.
&#09;&#09;.

&#09;' If query is still running, cancel and roll back.
&#09;If cnn.StillExecuting Then
&#09;&#09;cnn.Cancel
&#09;&#09;wrk.Rollback
&#09;' If query is complete, commit transaction.
&#09;Else
&#09;&#09;wrk.CommitTrans
&#09;End If
&#09;CancelAsynchQuery = True

Exit_CancelAsynchQuery:
&#09;On Error Resume Next
&#09;cnn.Close
&#09;wrk.Close
&#09;Exit Function

Err_CancelAsynchQuery:
&#09;For Each errObj In Errors
&#09;&#09;Debug.Print errObj.Number, errObj.Description
&#09;Next errObj
&#09;CancelAsynchQuery = False
&#09;Resume Exit_CancelAsynchQuery
End Function</font></pre>
<p>
You can use the <b>StillExecuting</b> property and the <b>Cancel</b> method with <b>QueryDef</b>, <b>Connection</b>, and <b>Recordset</b> objects.</p>
<p>
A <b>Connection</b> object can support only one asynchronous operation at a time. Also, you can’t perform another DAO operation, such as recordset manipulation, on a <b>Connection</b> object while an asynchronous query runs on the same <b>Connection</b> object. After an asynchronous query is complete, you can then begin running another asynchronous query on the same <b>Connection</b> object. You must first test the value of the <b>StillExecuting</b> property to determine whether you can start the next asynchronous operation. Depending on the capabilities of your servers, to run multiple asynchronous queries at the same time, you may need to create separate <b>Connection</b> objects and run each asynchronous query on its own <b>Connection</b> object.</p>
<p>
When running an action query as an asynchronous query, you’ll generally want to run it as part of a transaction. Be aware, however, that if you call the <b>CommitTrans</b> method while the asynchronous query is still running, your code will pause at the <b>CommitTrans</b> method until the query finishes. For this reason, it is more efficient to periodically check the <b>StillExecuting</b> property and continue to perform other work while the query runs. Once the <b>StillExecuting</b> property returns <b>False</b>, you can then call the <b>CommitTrans</b> method. This prevents your code from pausing at the <b>CommitTrans</b> method.</p>
<p>
<b>Note   </b>If you cancel an action query that is not part of a transaction, the query updates records up to the point where you called the <b>Cancel</b> method. The operation will be partially complete and will not be rolled back. For this reason, you should use the <b>Cancel</b> method on an action query only within the scope of a transaction. Additionally, if you start an asynchronous query in a procedure and the procedure exits before the query has completed, the query will continue to run.</p>
<p>
To improve performance when you’re retrieving data from an ODBC data source, you can cache records locally. A cache is a space in local memory that holds the data most recently retrieved from the server. If you’re performing repeated operations on a set of data, caching that data makes those operations faster because you don’t have to retrieve the data from the server each time you need it.</p>
<p>
In ODBCDirect queries, use the <b>CacheSize</b> property of the <b>QueryDef</b> object to specify the number of records to cache. The default cache size is 100 records. The following example shows how to reset the cache size to 200 records.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub SetCacheSize()
&#09;Dim wrk As Workspace, qdf As QueryDef, rst As Recordset
&#09;Dim cnn As Connection, strConnect As String

&#09;Set wrk = CreateWorkspace(&quot;ODBCDirect&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
&#09;strConnect = &quot;ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs&quot;
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)
&#09;' Create temporary QueryDef.
&#09;Set qdf = cnn.CreateQueryDef(&quot;tempquery&quot;)
&#09;With qdf
&#09;&#09;.SQL = &quot;SELECT * FROM roysched&quot;
&#09;&#09;.CacheSize = 40
&#09;&#09;Set rst = .OpenRecordset()
&#09;End With
&#09;' Print recordset to Debug window.
&#09;PrintRecordset rst
&#09;rst.Close
&#09;cnn.Close
End Sub</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Collisions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2handling_collisions"></a>Handling Collisions</h4>
<p>
When you attempt to update a group of records in a single batch operation, it is possible that other users are editing one or more records you are trying to update, causing a <i>collision</i>. A collision occurs when a batch update attempts to update a record after another user has changed the record.</p>
<p>
When you call the <b>Update</b> method, you can choose either to force all the changes you have made into the database automatically, or to examine each conflicting record and determine whether to overwrite the changed value with your new value, keep the changed value, or return to the original value that the record had before it was edited. To force all changes, call the <b>Update</b> method with the <i>force</i> argument set to <b>True</b>. To examine each conflicting record and decide which value to keep, call the <b>Update</b> method with the <i>force</i> argument set to <b>False</b> (the default value). You can then use the <b>BatchCollisions</b> and <b>BatchCollisionCount</b> properties to handle any collisions.</p>
<p>
If you’ve decided to handle collisions, examine the <b>BatchCollisions</b> property on the <b>Recordset</b> object. The <b>BatchCollisions</b> property returns an array that stores bookmarks pointing to records in the <b>Recordset</b> object on which a collision occurred. Each time a collision occurs during a batch update, a bookmark for the record is added to the array returned by the <b>BatchCollisions</b> property. You can then move to each of these bookmarks and examine the following properties of the <b>Field</b> object of the current record.</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Property</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Description</b></font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Value</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
The current value of the field in your <b>Recordset</b> object. This corresponds to the value of the field after the <b>Update</b> method was called.</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>OriginalValue</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
The value of the field in your <b>Recordset</b> object before the <b>Update</b> method was called.</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>VisibleValue</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
The value of the field as it is stored in the database.</font></td>
</tr>
</table><br>
<p>
<b>Caution   </b>Calling the <b>Update</b> method and specifying the <b>dbUpdateBatch</b> constant for the <i>type</i> argument and <b>True</b> for the <i>force</i> argument forces all your changes into the data source and overwrites any changes that other users made to the records. For this reason, it is safer to call the <b>Update</b> method without specifying the <i>force</i> argument, and then resolve collisions individually by using the array returned by the <b>BatchCollisions</b> property along with the <b>Value</b>, <b>OriginalValue</b>, and <b>VisibleValue</b> properties.</p>
<p>
The following example shows how to use the array returned by the <b>BatchCollisions</b> property to examine conflicting records after a batch update.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function BatchNoForceChanges()
&#09;Dim wrk As Workspace
&#09;Dim rst As Recordset, cnn As Connection
&#09;Dim fld As Field
&#09;Dim strConnect As String, intI As Integer
&#09;Dim varCollision As Variant

&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace(&quot;ODBCDirect&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
&#09;' Set default cursor driver to dbUseClientBatchCursor.
&#09;wrk.DefaultCursorDriver = dbUseClientBatchCursor
&#09;' Create connection string.
&#09;strConnect = &quot;ODBC;DSN=Pubs;DATABASE=Pubs;UID=sa;PWD=;&quot;
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)

&#09;' Open recordset for batch optimistic updating.
&#09;Set rst = _
&#09;&#09;cnn.OpenRecordset(&quot;SELECT * FROM sales&quot;, dbOpenDynaset, 0, dbOptimisticBatch)
&#09;' Change all records in local recordset.
&#09;Do Until rst.EOF
&#09;&#09;rst.Edit
&#09;&#09;rst!qty = rst!qty + 1
&#09;&#09;rst.Update
&#09;&#09;rst.MoveNext
&#09;Loop

&#09;' Update with force argument of False (default).
&#09;' If another user has made changes since the updated records were
&#09;' edited, update fails, and the BatchCollisionCount and BatchCollisions
&#09;' properties will indicate the number of conflicts and the conflicting records.
&#09;rst.Update dbUpdateBatch, False

&#09;' Check for collisions.
&#09;For intI = 0 To rst.BatchCollisionCount - 1
&#09;&#09;rst.Bookmark = rst.BatchCollisions(intI)
&#09;&#09;&#09;For Each fld In rst.Fields
&#09;&#09;&#09;&#09;If fld.OriginalValue &lt;&gt; fld.VisibleValue Then
&#09;&#09;&#09;&#09;&#09;Debug.Print fld.Value
&#09;&#09;&#09;&#09;&#09;Debug.Print &quot;OriginalValue: &quot; &amp; fld.OriginalValue
&#09;&#09;&#09;&#09;&#09;Debug.Print &quot;VisibleValue: &quot; &amp; fld.VisibleValue
&#09;&#09;&#09;&#09;&#09;Debug.Print &quot;Value: &quot; &amp; fld.Value
&#09;&#09;&#09;&#09;&#09;.
&#09;&#09;&#09;&#09;&#09;.&#09;' Handle the collision as you want to.
&#09;&#09;&#09;&#09;&#09;.
&#09;&#09;&#09;&#09;End If
&#09;&#09;Next fld
&#09;Next intI
End Function </font></pre>
<p>
<b>Note   </b>If a collision occurs because the primary key field has been modified by another user, using the <b>OriginalValue</b> and <b>VisibleValue</b> properties to view the field value will fail and return errors. This is because querying these properties implicitly re-queries the recordset and marks the copy of the record as deleted in the client batch cursor.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Parameter Queries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_parameter_queries"></a>Using Parameter Queries</h3>
<p>
In many situations, you’ll want a user or another program to provide parameters to your stored queries and <b>Recordset</b> objects. Microsoft Jet provides the means to do this. You first create a <b>QueryDef</b> object, specifying which parameters are to be provided by the end user. When you open a <b>Recordset </b>object based on the <b>QueryDef</b> object, the application opens a dialog box that prompts the user to enter a value, such as the criteria for a WHERE clause or the field on which to sort the selected records.</p>
<p>
The following example creates a temporary query that returns the name and hire date of each employee hired after a certain date. Before running the query, the program calls the<b> InputBox</b> function to prompt the user for a threshold date. The names are then shown in the Debug window, starting with the most recent hire. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset
Dim qdf As QueryDef
Dim strSQL As String, strInput As String

Set dbs = OpenDatabase(strDbPath)
' Create SQL statement with parameters.
strSQL = &quot;PARAMETERS BeginningDate DateTime; &quot; &amp; _
&#09;&quot;SELECT FirstName, LastName, HireDate FROM Employees &quot; &amp; _
&#09;&quot;WHERE HireDate &gt;= BeginningDate &quot; &amp; _
&#09;&quot;ORDER BY HireDate ASC;&quot;
' Create temporary QueryDef.
Set qdf = dbs.CreateQueryDef(&quot;&quot;, strSQL)
' Prompt user for input.
strInput = InputBox(&quot;Enter the earliest hire date:&quot;)
If Len(strInput) = 0 Then Exit Sub
If Not IsDate(strInput) Then Exit Sub
' Set parameter value.
qdf.Parameters(&quot;BeginningDate&quot;) = strInput
' Open recordset.
Set rst = qdf.OpenRecordset()
With rst
&#09;If .BOF Then
&#09;&#09;MsgBox &quot;No employees hired after date: &quot; &amp; strInput
&#09;&#09;Exit Sub
&#09;End If
&#09;Do While Not .EOF
&#09;&#09;Debug.Print !FirstName &amp; &quot; &quot; &amp; !LastName &amp; &quot; was hired on: &quot; &amp; !HireDate
&#09;&#09;.MoveNext
&#09;Loop
&#09;.Close
End With</font></pre>
<p>
Most of the database maintenance tasks described in the rest of this chapter can be accomplished by using stored parameter queries.</p>
</BODY>
</HTML>

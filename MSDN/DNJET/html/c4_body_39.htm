<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pass-Through Queries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2pass-through_queries"></a>Pass-Through Queries</h4>
<p>
Microsoft Jet is designed to work transparently, for the most part, with a wide variety of data sources, whether they’re native Microsoft Jet databases, installable ISAM data sources such as Microsoft FoxPro or Paradox, or ODBC data sources such as SQL&nbsp;Server. Microsoft Jet supports the concept of <i>linked tables</i>&nbsp;— tables that physically reside in an external database, but are treated as though they’re local. When you design a SELECT or UPDATE query, you generally don’t have to worry about whether the tables in the query are native Microsoft Jet tables or are in another data format.</p>
<p>
Many data sources have no native SQL interface. Microsoft Jet translates your SQL statement into direct data-manipulation functions that are specific to that data source. Other data sources, such as SQL&nbsp;Server, support the use of SQL by definition, although the dialect of SQL can differ radically from one database management system to another. Even when you create an SQL statement and save it in a <b>QueryDef</b> object, Microsoft Jet transforms the “native” Microsoft Jet SQL statement into a format that you may barely recognize.</p>
<p>
Occasionally, you may want to get Microsoft Jet out of the way and directly communicate with your back-end SQL database system. You can use a pass-through query to send any SQL statement to your server. Microsoft Jet does no translation or error checking of any kind: It simply passes the text of the query on to the back-end server for processing.</p>
<p>
To create a pass-through query, you create a <b>QueryDef</b> object and set its <b>Connect</b> property to a connection string that contains information about an ODBC data source.</p>
<p>
Your SQL statement must conform to the rules of the server you’re using. For example, while Microsoft Jet uses the asterisk (*) character with the <b>Like</b> operator, SQL&nbsp;Server uses the ANSI-standard percent (%) character:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT * 
FROM Products 
WHERE ProductName Like 'M%'</font></pre>
<p>
This query acts like a normal SELECT query. It returns records and can be used to create a <b>Recordset</b> object, but it isn’t updatable.</p>
<p>
If you save this pass-through query as a permanent <b>QueryDef</b> object, it can even be used to join to other tables or queries. For example, if you save this pass-through query with the name SQLPassThrough, it can be used to build another query, as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT 
&#09;SQLPassThrough.ProductID, 
&#09;SQLPassThrough.ProductName, 
&#09;SQLPassThrough.SupplierID, 
&#09;SQLPassThrough.CategoryID, 
&#09;[Order Details].OrderID
FROM SQLPassThrough, [Order Details];</font></pre>
<p>
In this example, the pass-through query SQLPassThrough is executed on the server, which retrieves all records from the Products table whose ProductName field begins with an “M.” The result of the SQLPassThrough query is joined with the Order Details table, and the final result is created transparently.</p>
<p>
Anything that the back-end server can interpret can be successfully used in a pass-through query. This includes DDL statements that create and delete tables, or DML DELETE and INSERT INTO statements that don’t return records but instead act directly on the back-end server database.</p>
<p>
The following code creates a <b>QueryDef</b> object for a pass-through query and sets the <b>QueryDef</b> object’s <b>Connect</b> property. In this example, <code>strDbPath</code> is the path to the database, <code>strQueryName</code> is the name for the new query, <code>strSQL</code> is the SQL statement that defines the <b>QueryDef</b> object, and <code>strConnect</code> is the connection string information used to connect to the ODBC data source:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, qdf As QueryDef
    
Set dbs = OpenDatabase(strDbPath)
' Create new QueryDef object.
Set qdf = dbs.CreateQueryDef(strQueryName, strSQL)
' Setting Connect property indicates that query
' is a pass-through query.
qdf.Connect = strConnect</font></pre>
<p>
An SQL pass-through query may return records to the client computer, or it may perform an operation on the server and not return any records to the client. For example, a SELECT query returns records, while an action query performs an operation on the server and does not return any records. The <b>ReturnsRecords</b> property indicates whether the query is expected to return records. By default Microsoft Jet assumes that a pass-through query will return records, and the <b>ReturnsRecords</b> property is set to <b>True</b>. If a pass-through query will not return records but simply performs an operation on the server, you must set the <b>ReturnsRecords</b> property to <b>False</b>. If you try to run an action query whose <b>ReturnsRecords</b> property is set to <b>True</b>, an error occurs.</p>
<p>
The contents of a pass-through query don’t have to be an SQL statement. You can execute stored procedures. If a stored procedure returns records, the pass-through query that executes it can be used to create a <b>Recordset</b> object. For example, if this query were saved as a pass-through <b>QueryDef</b> object called SQLPassThroughStoredProc, it could be used in another query:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT SQLPassThroughStoredProc.*
FROM SQLPassThroughStoredProc
WHERE SQLPassThroughStoredProc.Status = 'sleeping'; </font></pre>
<p>
You can supply parameters to a stored procedure by concatenating the value of the parameter with the call to the stored procedure. The following example creates a simple SQL Server stored procedure with an input parameter and a return value. It then runs the procedure and retrieves the return value. In this example, <code>strSQL</code> is the remote query definition, <code>cnn</code> is a variable that represents an ODBCDirect <b>Connection</b> object, <code>qdf</code> is the <b>QueryDef</b> object, and <code>var</code> is a variant that contains the value of the parameter for the <b>QueryDef</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">' Create stored procedure on the server.
strSQL = &quot;CREATE PROCEDURE UpdateEmps (@invar int) AS RETURN @invar;&quot;
cnn.Execute strSQL

' Create QueryDef object to run stored procedure.
Set qdf = cnn.CreateQueryDef(&quot;qry&quot;, &quot;{ ? = call UpdateEmps(?) }&quot;)

' Handle parameters.
qdf.Parameters(0).Direction = dbParamReturnValue
qdf.Parameters(1) = 10
qdf.Execute

' Get return value.
var = qdf.Parameters(0).Value</font></pre>
<p>
<b>See Also   </b>For more information about ODBC, see Chapter&nbsp;12, “ODBC Desktop Database Drivers.”</p>
</BODY>
</HTML>

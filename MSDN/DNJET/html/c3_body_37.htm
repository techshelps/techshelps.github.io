<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Deleting Relationships by Using DAO</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2creating_and_deleting_relationships_by_using_dao"></a>Creating and Deleting Relationships by Using DAO</h3>
<p>
<b>Relation</b> objects can be created by using DAO in much the same way you can create an <b>Index</b> object or a <b>TableDef</b> object. You can append a new <b>Relation</b> object to the <b>Relations</b> collection of the database after first appending one or more <b>Field</b> objects to the <b>Fields</b> collection of the new <b>Relation</b> object. In addition, you can set the appropriate <b>Attributes</b> property for the <b>Relation</b> object to specify that the <b>Relation</b> object perform cascading updates or cascading deletes to maintain referential integrity.</p>
<p>
The following example deletes and re-creates the relationship between the Employees table and the Orders table in the NorthwindTables database. In the following example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim rel As Relation
Dim fld As Field

Set dbs = OpenDatabase(strDbPath)

' Delete existing relationship.
On Error Resume Next
For Each rel In dbs.Relations
&#09;If rel.Table = &quot;Employees&quot; And rel.ForeignTable = &quot;Orders&quot; Then
&#09;&#09;dbs.Relations.Delete rel.Name
&#09;End If
Next rel
On Error GoTo 0

Set rel = dbs.CreateRelation(&quot;EmployeesOrders&quot;)
With rel
&#09;' Set Table property to table on &quot;one&quot; side of relation.
&#09;.Table = &quot;Employees&quot;
&#09;' Set ForeignTable property to table on &quot;many&quot; side of relation.
&#09;.ForeignTable = &quot;Orders&quot;
End With

Set fld = rel.CreateField(&quot;EmployeeID&quot;)
' Specify name of foreign key field in foreign table.
fld.ForeignName = &quot;EmployeeID&quot;

rel.Fields.Append fld
dbs.Relations.Append rel</font></pre>
<p>
This code first creates a new <b>Relation</b> object by using the <b>CreateRelation</b> method of the <b>Database</b> object. The <b>Table</b> property specifies the “one” table in the one-to-many relationship; the <b>ForeignTable</b> property specifies the “many” table. Setting these two properties ensures that no EmployeeID value can be entered in the Orders table if that value doesn’t already exist in the Employees table.</p>
<p>
You can also set the <b>Attributes</b> property for a <b>Relation</b> object when you create the <b>Relation</b> object. For example, the NorthwindTables database includes a Suppliers table and a Products table. A relationship based on the SupplierID field exists between the two tables. To specify that cascading deletes be performed when a record is deleted from the Suppliers table, set the <b>Attributes</b> property to the built-in constant value <b>dbRelationDeleteCascade</b>. This attribute specifies that if a record is deleted from the Suppliers table, all records in the Products table that have a matching SupplierID field are also deleted. In this way, if a supplier goes out of business, you can automatically delete that supplier’s products from the Products table when you delete the supplier from the Suppliers table. To specify cascading updates, set the <b>Attributes</b> property to <b>dbRelationUpdateCascade</b>.</p>
<p>
Multiple attributes can be specified for a relationship by adding the various constant values used to set the <b>Attributes</b> property. For example, the following code specifies an optional left join between two tables, where <code>rel</code> is the name of a relationship:</p>
<pre><FONT FACE="Courier New" SIZE="3">rel.Attributes = dbRelationLeft + dbRelationUnique + _
&#09;dbRelationDontEnforce</font></pre>
<p>

<p>
<b>Microsoft Access Users   </b>Designating a <b>Relation</b> object attribute as “left” or “right” has no effect on referential integrity. It’s used in Microsoft Access to show the type of join that’s created by default when the tables are added to a new query in Design view.</p>
<p>
In the SQL DDL example shown earlier in this chapter, creating a new relationship between two tables involves creating an index on the foreign key field. When you create a new <b>Relation</b> object by using DAO, Microsoft Jet automatically creates an index on the foreign key field or fields, even if one already exists. If you create a relationship between two tables with referential integrity enforced, avoid creating an index on the foreign key, as it will be a duplicate index. The foreign key index is necessary for enforcing referential integrity, so don’t delete it. The index that’s created on the foreign key when you create a relationship appears in the <b>Indexes</b> collection of the foreign table.</p>
<p>

<p>
<b>Microsoft Access Users   </b>Because the foreign key index that Microsoft Jet creates is associated with a relationship, it’s not displayed in the <b>Indexes</b> dialog box when you view the table in Design view in Microsoft Access.</p>
<p>
It’s possible to create a relationship that’s based on more than one field. To create a <b>Relation</b> object with two fields, create two <b>Field</b> objects in the <b>Fields</b> collection of the new <b>Relation</b> object. Set the <b>ForeignName</b> property of each <b>Field</b> object to the name of the corresponding field in the foreign table, then append both fields to the <b>Fields</b> collection of the <b>Relation</b> object. For example, suppose you have two tables that both contain FieldA and FieldB. You can create a relationship based on both fields if you want to enforce referential integrity for both fields at the same time. You would create both fields in the <b>Fields</b> collection of a <b>Relation</b> object, and set the <b>ForeignName</b> property appropriately.</p>
<p>
Note that the primary key in the primary table does not necessarily need to include both FieldA and FieldB. The primary key can be based on both fields, or on just one of the fields.</p>
<p>
You can’t modify an existing relationship from DAO. You must delete the relationship and then re-create it. To delete a relationship, use the <b>Delete</b> method on the database’s <b>Relations</b> collection.</p>
</BODY>
</HTML>

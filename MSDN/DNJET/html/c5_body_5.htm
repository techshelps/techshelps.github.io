<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Default Recordset Object Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2default_recordset_object_types"></a>Default Recordset Object Types</h4>
<p>
Because Microsoft Jet automatically chooses the default <b>Recordset</b> object type depending on the data source and how the <b>Recordset</b> object is opened, you don’t need to specify a <b>Recordset</b> object type. However, you can force Microsoft Jet to create specific <b>Recordset</b> objects by specifying the <i>type</i> argument of the <b>OpenRecordset</b> method.</p>
<p>
The following list describes the available types and the default type, depending on how you open the <b>Recordset</b> object:
<ul>
<li>
<b>OpenRecordset</b> method from a <b>Database</b> object:<p>
<b>Set</b> <i>rst</i> <b>=</b> <i>dbs</i><b>.OpenRecordset(</b><i>datasource</i><b>)</b></p>
<p>
If <i>datasource</i> is a table local to the database, all <b>Recordset</b> object types except the dynamic type are available, and the default type is table. The dynamic-type <b>Recordset</b> object is available only in ODBCDirect workspaces. If <i>datasource</i> is not a local table, only the dynaset, snapshot, or forward-only <b>Recordset</b> object types are available, and dynaset is the default.</p>
</li>
<li>
<b>OpenRecordset</b> method from a <b>TableDef</b> object:<p>
<b>Set</b> <i>rst</i> <b>=</b> <i>tdf</i><b>.OpenRecordset()</b></p>
<p>
If <i>tdf</i> refers to a table in a Microsoft Jet database or to an external ISAM database opened directly, all <b>Recordset</b> object types except the dynamic type are available and table is the default type. If <i>tdf</i> is in an ODBC database or is a linked table in an external database, only the dynaset, snapshot, and forward-only <b>Recordset</b> object types are available and dynaset is the default.</p>
</li>
<li>
<b>OpenRecordset</b> method from a <b>QueryDef</b> object or an SQL string argument:<p>
<b>Set</b> <i>rst</i> <b>=</b> <i>qdf</i><b>.OpenRecordset()</b></p>
<p>
Only the dynaset, snapshot, and forward-only <b>Recordset</b> object types are available, and the default is dynaset.</p>
</li>
<li>
<b>OpenRecordset</b> method from an existing <b>Recordset</b> object:<p>
<b>Set</b> <i>rstNew</i> <b>=</b> <i>rstExisting</i><b>.OpenRecordset()</b></p>
<p>
Only the dynaset, snapshot, and forward-only <b>Recordset</b> object types are available. The default is the <b>Recordset</b> object type of the source <b>Recordset</b> object. For example, in the preceding example, if <i>rstExisting</i><code> </code>is a snapshot-type <b>Recordset</b> object, <i>rstNew</i> will also be a snapshot-type <b>Recordset</b> object.</p>
<p>

</li>
</ul>
<p>
<b>Microsoft Access Users   </b>To create a <b>Recordset</b> object based on a Microsoft Access form, you can use the <b>RecordsetClone</b> property of the form. This creates a dynaset-type <b>Recordset</b> object that refers to the same underlying query or data as the form’s <b>RecordSource</b> property. If a form is based on a query, for example, referring to the form’s <b>RecordsetClone</b> property is the equivalent of creating a dynaset with the same query. You can use the <b>RecordsetClone</b> property when you want to apply a method that can’t be used with forms, such as the <b>FindFirst</b> method. The <b>RecordsetClone</b> property provides access to all the methods and properties that you can use with a dynaset-type <b>Recordset</b> object. The syntax for the<b> RecordsetClone</b> property is:</p>
<p>
<b>Set</b> <i>recordset</i> <b>=</b> <i>form</i><b>.RecordsetClone</b></p>
<p>
The <i>form</i> argument is the name of an open Microsoft Access form.</p>
<p>
The following example returns a <b>Recordset</b> object variable from the record source of a form. It then searches for the specified record in the recordset, and if the record exists, the form’s <b>Bookmark</b> property is set to the value of the recordset’s <b>Bookmark</b> property. Setting the form’s <b>Bookmark</b> property displays the corresponding record.</p>
<p>
In this example, <code>strFormName</code> is the name of a form, <code>strFieldName</code> is the name of a field on a form, and <code>strFieldValue</code> is the value to search for in the recordset.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub FindFormRecord(strFormName As String, strFieldName As String, _
&#09;strFieldValue As String)

&#09;Dim rst As Recordset
&#09;Dim frm As Form
&#09;
&#09;' Open the specified form.
&#09;DoCmd.OpenForm strFormName
&#09;Set frm = Forms(strFormName)
&#09;' Open a recordset based on the form's RecordSource property.
&#09;Set rst = frm.RecordsetClone
&#09;With rst
&#09;&#09;' Search for the specified value.
&#09;&#09;.FindFirst strFieldName &amp; &quot; Like &quot;&quot;&quot; &amp; strFieldValue &amp; &quot;*&quot; &amp; &quot;&quot;&quot;&quot;
&#09;&#09;' If value is not found, display message.
&#09;&#09;If .NoMatch Then
&#09;&#09;&#09;MsgBox &quot;No record found for &quot; &amp; strFieldName &amp; &quot;: &quot; &amp; strFieldValue
&#09;&#09;' If value is found, set form's Bookmark property to value of recordset's
&#09;&#09;' Bookmark property.
&#09;&#09;Else
&#09;&#09;&#09;frm.Bookmark = .Bookmark
&#09;&#09;End If
&#09;&#09;.Close
&#09;End With
End Sub</font></pre>
<p>
The <b>RecordsetClone</b> property always creates the type of <b>Recordset</b> object being cloned (the type of <b>Recordset</b> object on which the <i>form</i> is based); no other types are available.</p>
<p>
<b>Visual Basic Users   </b>You can create a <b>Recordset</b> object from a <b>Data</b> control by setting a new <b>Recordset</b> object variable equal to the value of the control’s <b>Recordset object</b> property. For more information, see the <i>Microsoft Visual Basic Programmer’s Guide</i>.</p>
</BODY>
</HTML>

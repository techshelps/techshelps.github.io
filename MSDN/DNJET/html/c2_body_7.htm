<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Container Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2container_objects"></a>Container Objects</h4>
<p>
The <b>DBEngine</b> object is application independent. This means that the engine isn’t specifically tied to any one host application. However, Microsoft Jet does provide a generic collection and object type so that an application can create and store its own objects in a database. This generic object is known as a container. The <b>Containers</b> collection holds all <b>Container</b> objects for a <b>Database</b> object.</p>
<p>
As an example, Microsoft Access relies on Microsoft Jet to store its application-specific objects such as forms, reports, macros, and modules. Microsoft Jet keeps track of these foreign objects through the <b>Containers</b> collection. It’s the <b>Container</b> object that enables Microsoft Jet to store application-specific objects without violating its application independence. You can use the <b>Container</b> object to set security to control access to all database objects of a particular type.</p>
</BODY>
</HTML>

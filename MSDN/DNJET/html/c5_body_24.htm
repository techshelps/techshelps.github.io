<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Jet Transactions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h2><a name="jb2microsoft_jet_transactions"></a>Microsoft Jet Transactions</h2>
<p>
Defined as a “logical unit of work,” a transaction is one of the features common to most database management systems. By wrapping multiple database operations into a single unit, transactions offer the developer the ability to enforce data integrity by making sure multiple operations can be treated by the engine as an “all or nothing” proposition, thereby never allowing the database to end up in an inconsistent state.</p>
<p>
The most common example of transaction processing involves a bank’s automated teller machine. The processes of dispensing cash and then debiting the user’s account are considered a logical unit of work and are wrapped in a transaction: The cash is not dispensed unless the system is also able to debit the account. By using a transaction, the entire operation either succeeds or fails. This maintains the consistent state of the ATM database.</p>
<p>
Transactions can be defined by what are known as the <i>ACID</i> properties. The following attributes of transactions make up the ACID acronym:
<ul>
<li>
<i>Atomic</i> denotes that transactions are all-or-nothing operations. Each operation wrapped in a transaction must be successful for all operations to be committed.<br><br></li>
<li>
<i>Consistent</i> denotes that a transaction enables data operations to transform the database from one consistent state to another, even though at any point during the transaction the database may be inconsistent.<br><br></li>
<li>
<i>Isolated</i> denotes that all transactions are “invisible” to other transactions. That is, no transaction can see another transaction’s updates to the database until the transaction is committed.<br><br></li>
<li>
<i>Durable</i> denotes that after a transaction commits, its updates survive&nbsp;— even if there is a subsequent system crash.</li>
</ul>
<p>
<b>See Also   </b>For information about transaction usage and behavior with ODBC data sources, see Chapter&nbsp;9, “<a href="c9_body.htm">Developing Client/Server Applications</a>.”</p>
<p>
With file-server databases such as Microsoft Jet, the concept of durability becomes somewhat complicated. There are currently no file-server based database engines that can fully support this criterion of true transactions. For example, a database connected to a file server cannot be expected to fully support the durability rule if the file-server crashes before a transaction has had time to commit its changes. If you require true transaction support with respect to durability, you should investigate the use of a client/server architecture.</p>
<p>
<b>Note   </b>The behavior of transactions with Microsoft Jet databases differs from the behavior of ODBC data sources such as Microsoft SQL&nbsp;Server.</p>
</BODY>
</HTML>

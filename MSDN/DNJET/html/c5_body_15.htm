<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bookmark Scope</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2bookmark_scope"></a>Bookmark Scope</h4>
<p>
When you close a <b>Recordset </b>object, any bookmarks you saved become invalid. You can’t use a bookmark from one <b>Recordset </b>object in another <b>Recordset </b>object, even if both <b>Recordset</b> objects are based on the same underlying table or query. However, you can use a bookmark on the duplicate (clone) of a <b>Recordset </b>object, as shown in the following example. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rstOrig As Recordset
Dim rstClone As Recordset, varPlace As Variant

Set dbs = OpenDatabase(strDbPath)
Set rstOrig = dbs.OpenRecordset(&quot;Customers&quot;, dbOpenDynaset)
rstOrig.MoveLast
' Save current record location.
varPlace = rstOrig.Bookmark
' Create duplicate recordset.
Set rstClone = rstOrig.Clone
MsgBox &quot;Before setting bookmark: Current Record CompanyName = &quot; _
&#09;&amp; rstClone!CompanyName
' Go to saved record.
rstClone.Bookmark = varPlace
MsgBox &quot;After setting bookmark: Current Record CompanyName = &quot; _
&#09;&amp; rstClone!CompanyName</font></pre>
<p>

<p>
<b>Microsoft Access Users   </b>You can also use the <b>Bookmark</b> property on the <b>Recordset </b>object underlying a form. With this property, your code can mark which record is currently displayed on the form, and then change the record being displayed. For example, on a form containing employee information, you may want a button that a user can click to show the record for an employee’s supervisor. The following example illustrates the event procedure you would use for the button’s Click event:</p>
<pre><FONT FACE="Courier New" SIZE="3">Private Sub cmdShowSupervisor_Click()
    Dim rst As Recordset
    Dim varOrigin As Variant, strEmployee As String
    Dim strSuper As String

    ' Open Recordset object.
    Set rst = Me.RecordsetClone
    
    ' Store bookmark for current record.
    varOrigin = Me.Bookmark
    ' Store first and last name of employee.
    strEmployee = Me!FirstName &amp; &quot; &quot; &amp; Me!LastName
    ' Check whether employee reports to anyone.
    If Not IsNull(Me!ReportsTo) Then
        ' Search for first record matching value of ReportsTo field.
        rst.FindFirst &quot;EmployeeID = &quot; &amp; Me!ReportsTo
        ' Check whether record for supervisor exists in table.
        If rst.NoMatch Then
            MsgBox &quot;Couldn't find &quot; &amp; strEmployee &amp; &quot;'s supervisor.&quot;
        Else
            ' If supervisor record exists, set form's bookmark.
            ' Current record is now supervisor's record.
            Me.Bookmark = rst.Bookmark
            ' Store supervisor's first and last name.
            strSuper = Me!FirstName &amp; &quot; &quot; &amp; Me!LastName
            ' Display supervisor's name.
            MsgBox strEmployee &amp; &quot;'s supervisor is &quot; &amp; _
                strSuper &amp; &quot;.&quot;
            ' Move back to employee's record.
            Me.Bookmark = varOrigin
        End If
    Else
        MsgBox strEmployee &amp; &quot; has no supervisor.&quot;
    End If
    rst.Close
End Sub</font></pre>
<h5>Why Use Bookmarks Instead of Record Numbers?</h5>
<p>
If you have used another database or programming environment, you may be accustomed to referring to record numbers. For example, you may have written code that opens a text file and thereafter refers to specific records by their relative position in the file. The first record in the file would be record 1, the second would be record 2, and so on.</p>
<p>
In Microsoft Jet databases, your view of records (a <b>Recordset </b>object) is usually a subset of the records in one or more tables. Because the actual number of records in a <b>Recordset </b>object can change at any time, especially in a multiuser environment, there’s no absolute record number you can always use to refer to a particular record. The <b>AbsolutePosition</b> property is not the same as a record number, because this property changes if a lower-numbered record is deleted.</p>
<p>
Furthermore, records returned in a <b>Recordset</b> object appear in no particular order, unless the <b>Recordset </b>object was created with a query that includes an ORDER BY clause, or is a table-type <b>Recordset </b>object with an index. For this reason, record numbers are meaningless in a <b>Recordset</b> object.</p>
<p>
Instead of record numbers, Microsoft Jet provides bookmarks so that you can uniquely identify a particular record. A given record retains its unique bookmark for the life of the <b>Recordset </b>object.</p>
<p>
<b>Visual C++ Users   </b>Bookmarks are especially useful in conjunction with the <b>GetRowsEx</b> method in the DAO Software Development Kit (SDK). If you choose dbBindBookmark as one of the fields to be bound, it will retrieve a bookmark as a pseudo-field. This enables you to combine the speed and convenience of the <b>GetRowsEx</b> method with easy updating.</p>
<p>
For example, you could have retrieved code to fill a list box that looks something like:</p>
<pre><FONT FACE="Courier New" SIZE="3">// Structure for DoGetRowsEx
typedef struct
&#09;{
&#09;LONG&#09;&#09;lEmpId;
&#09;LPVOID&#09;&#09;lpbm;
&#09;TCHAR&#09;&#09;*lpstrLastName;
&#09;TCHAR&#09;&#09;strFirstName[20];
&#09;} EMP, *LPEMP ;

// Employee table binding
DAORSETBINDING&#09;Bindings[] = 
{
//Index Type&#09;&#09;&#09;Column&#09;&#09;&#09;Type&#09;&#09;&#09;&#09;Offset&#09;&#09;&#09;&#09;&#09;&#09;&#09;Size
{dbBindIndexINT,&#09;EMP_ID,&#09;&#09;dbBindI4,&#09;&#09;offsetof(EMP,lEmpId),&#09;&#09;sizeof(LONG)},
{dbBindIndexINT,&#09;NULL,&#09;&#09;dbBindBookmark,&#09;offsetof(EMP,lpbm),&#09;&#09;&#09;sizeof(LPVOID)},
{dbBindIndexINT,&#09;EMP_LNAME,&#09;dbBindLPSTRING,&#09;offsetof(EMP,lpstrLastName),sizeof(TCHAR *)},
{dbBindIndexINT,&#09;EMP_FNAME,&#09;dbBindSTRING,&#09;offsetof(EMP,strFirstName),&#09;sizeof(TCHAR) * 20}
};

// Perform C++ GetRowsEx against the Employee table.
void CDlg::DoGetRowsEx() 
{
&#09;LPEMP&#09;&#09;&#09;pEmpRows = new EMP[MAX_EMP_REC];
&#09;CString&#09;&#09;&#09;strLBRow;
&#09;TCHAR&#09;&#09;&#09;szId[16];
&#09;LONG&#09;&#09;&#09;lNumRecords;
&#09;LONG&#09;&#09;&#09;lCount;
&#09;LONG&#09;&#09;&#09;cbBuf = ( MAX_EMP_REC * sizeof(TCHAR) * 15 ); // Allow average of 15 chars/name.
&#09;LPVOID&#09;&#09;&#09;pvBuf = new LPVOID[cbBuf]; 
&#09;//Perform GetRows on Employee table.
&#09;//This GetRows uses a specific C++ structure.
&#09;lNumRecords = m_rs.GetRowsEx(pEmpRows, sizeof(EMP),
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&amp;Bindings[0], sizeof(Bindings) / sizeof(DAORSETBINDING),
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;pvBuf, cbBuf,
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;MAX_EMP_REC); //Arbitrarily get MAX_EMP_REC rows.
&#09;
//Step through the returned rows. 
&#09;for (lCount = 0; lCount &lt; lNumRecords; lCount++)
&#09;&#09;{
&#09;&#09;strLBRow.Empty();
&#09;&#09;wsprintf(szId, _T(&quot;%d,  &quot;), pEmpRows[lCount].lEmpId);
&#09;&#09;strLBRow += szId;
&#09;&#09;strLBRow += pEmpRows[lCount].lpstrLastName;
&#09;&#09;strLBRow += _T(&quot;, &quot;);
&#09;&#09;strLBRow += (LPCTSTR) pEmpRows[lCount].strFirstName;
&#09;&#09;//Put the bookmark in the global array.
&#09;&#09;m_rgbm[lCount] = CdbBookmark((LPSAFEARRAY)pEmpRows[lCount].lpbm );

&#09;&#09;// Put a pointer to it in the ItemData for the list box entry.
&#09;&#09;m_lstEmps.SetItemData( m_lstEmps.AddString(strLBRow),
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;(DWORD)&amp;m_rgbm[lCount] );
&#09;&#09;}
&#09;delete [] pEmpRows;
&#09;delete [] pvBuf;
}</font></pre>
<p>
<b>See Also   </b>For more information about the <b>GetRowsEx</b> method, see Chapter&nbsp;11, “Programming with DAO in C++ and Java.” For a complete sample program, see the Visual C++ project file in the \Program&nbsp;Files\DevStudio\DAOSDK\SAMPLES\GETROWS folder of the DAO SDK, which is installed with Microsoft Visual C++.</p>
<p>
The prior code example could be combined with selection code that moves the current record as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">void CDlg::OnSelchangeListEmployees() 
{
&#09;// Cast the dword held in ItemData back into a pointer to a
&#09;// bookmark. The actual bookmarks are being held in m_rgbm
&#09;// and will automatically deallocate the system safe arrays and
&#09;// destruct on CDlg destruction.
&#09;CdbBookmark *pbm = (CdbBookmark *)m_lstEmps.GetItemData(m_lstEmps.GetCurSel());
&#09;m_rs.SetBookmark( *pbm );
&#09;m_strMoreInfo.Format(
&#09;&#09;_T(&quot;Notes:  %s\n&quot;), 
&#09;&#09;(LPCTSTR)( m_rs[15].GetValue().bstrVal ) );
&#09;UpdateData( FALSE );&#09;
}</font></pre>
</BODY>
</HTML>

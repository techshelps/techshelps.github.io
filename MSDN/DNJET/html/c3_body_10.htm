<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Built-in vs. Application-Defined Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2built-in_vs._application-defined_properties"></a>Built-in vs. Application-Defined Properties</h4>
<p>
The <b>ValidationRule</b> property, along with other properties such as <b>Size</b>, <b>Required</b>, and <b>DefaultValue</b>, are known as built-in properties.</p>
<p>
In addition to these built-in properties, you can specify a variety of other custom properties, which you define yourself, or application-defined properties, which are defined by an application that’s using Microsoft Jet, such as Microsoft Access. For example, when you build a table by using the Microsoft Access user interface, you may want to set the <b>Caption</b> property or <b>Description</b> property for a field. However, because these properties aren’t part of the built-in properties available in a <b>Field</b> object’s <b>Properties</b> collection, DAO may return an error if you try to set these properties from Visual Basic. In the following example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef, fld As Field

Set dbs = OpenDatabase(strDbPath)
Set tdf = dbs.CreateTableDef(&quot;CustomerSurvey&quot;)
Set fld = tdf.CreateField(&quot;ID&quot;, dbLong)
fld.Attributes = dbAutoIncrField
fld.Description = &quot;Survey Identification Number&quot; '&lt;&lt;&lt;Error occurs here.
tdf.Fields.Append fld
 
dbs.TableDefs.Append tdf</font></pre>
<p>
This code doesn’t execute as written because there is no built-in <b>Description</b> property for a <b>Field</b> object in a Microsoft Jet table. This property is set by Microsoft Access whenever a user enters a field description in a table’s Design view, though it’s not created by default. If you want to use DAO to create a <b>Description</b> property for a field, you must use the <b>CreateProperty</b> method to create the property, and then append the new property to the <b>Properties</b> collection of the field.</p>
<p>
The following procedure creates a new table and calls the SetCustomProperty function to set the <b>Description</b> property for a field. The SetCustomProperty function attempts to set the property, and if necessary creates a new <b>Property</b> object and appends it to the <b>Properties</b> collection:</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub SetFieldDescription()
&#09;Dim dbs As Database, tdf As TableDef, fld As Field
&#09;Dim strValue As String, strDbPath As String
&#09;
&#09;strDbPath = &quot;C:\JetBook\Samples\NorthwindTables.mdb&quot;

&#09;' Return reference to current database.
&#09;Set dbs = OpenDatabase(strDbPath)

&#09;' Create new table.
&#09;Set tdf = dbs.CreateTableDef(&quot;Inventory&quot;)
&#09;Set fld = tdf.CreateField(&quot;ID&quot;, dbLong)
&#09;fld.Attributes = dbAutoIncrField
&#09;tdf.Fields.Append fld
&#09;dbs.TableDefs.Append tdf
&#09;
&#09;strValue = &quot;Survey ID Number&quot;
&#09;If SetCustomProperty(fld, &quot;Description&quot;, dbText, strValue) Then
&#09;&#09;Debug.Print &quot;Property set successfully.&quot;
&#09;Else
&#09;&#09;Debug.Print &quot;Property not set successfully.&quot;
&#09;End If
&#09;dbs.Close
&#09;Set dbs = Nothing
End Sub

Function SetCustomProperty(obj As Object, strName As String, _
&#09;&#09;intType As Integer, varSetting As Variant) As Boolean
&#09;Dim prp As Property
&#09;Const conPropNotFound As Integer = 3270

&#09;On Error GoTo Error_SetCustomProperty

&#09;' Explicitly refer to Properties collection.
&#09;obj.Properties(strName) = varSetting
&#09;obj.Properties.Refresh
&#09;SetCustomProperty = True
&#09;
Exit_SetCustomProperty:
&#09;Exit Function
&#09;
Error_SetCustomProperty:
&#09;If Err = conPropNotFound Then
&#09;&#09;' Create property, denote type, and set initial value.
&#09;&#09;Set prp = obj.CreateProperty(strName, intType, varSetting)
&#09;&#09;' Append Property object to Properties collection.
&#09;&#09;obj.Properties.Append prp
&#09;&#09;obj.Properties.Refresh
&#09;&#09;SetCustomProperty = True
&#09;Else
&#09;&#09;MsgBox &quot;Error: &quot; &amp; Err &amp; vbCrLf &amp; Err.Description
&#09;&#09;SetCustomProperty = False
&#09;End If
&#09;Resume Exit_SetCustomProperty
End Function&#09;</font></pre>
<p>
<b>See Also   </b>For a complete discussion of built-in, user-defined, and application-defined properties, see “DAO Properties” in Chapter&nbsp;2, “Introducing Data Access Objects.”</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Properties Collection</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2the_properties_collection"></a>The Properties Collection</h4>
<p>
Each DAO object has an associated <b>Properties</b> collection. This collection contains the <b>Property</b> objects that identify each characteristic of the object. Like other collections, you can iterate through the collection and refer to specific elements. You refer to <b>Property</b> objects and <b>Properties</b> collections by using the same syntax as you do for other DAO collections:
<ul>
<li>
<b>Properties(&quot;</b><i>PropertyName</i><b>&quot;)</b><br><br></li>
<li>
<b>Properties(</b><i>expression</i><b>)</b> where <i>expression</i> is a string expression or variable that is the name of a property<br><br></li>
<li>
<b>Properties(</b><i>index</i><b>)</b> where <i>index</i> is the property’s position within the collection</li>
</ul>
<p>
For example, to refer to the value of the <b>Type</b> property of the CustomerID field in the Customers table, you could use any of the following lines of code, where <code>dbs</code> is a <b>Database</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">dbs.TableDefs(&quot;Customers&quot;).Fields(&quot;CustomerID&quot;).Properties(&quot;Type&quot;).Value
dbs.TableDefs(&quot;Customers&quot;).Fields(&quot;CustomerID&quot;).Properties(strType).Value
dbs.TableDefs(&quot;Customers&quot;).Fields(&quot;CustomerID&quot;).Properties(3).Value</font></pre>
<p>
In the second line of code, a string variable, <code>strType</code>, is set to the value of <code>&quot;Type&quot;</code>.</p>
<p>
In the last line, the code assumes that the <b>Type</b> property is always going to be in the fourth position in the <b>Properties</b> collection. As mentioned earlier in the “Objects and Collections” section, you should not rely on an object’s position within its collection. The only time you would refer to a property by its index number is when you are iterating through all the <b>Properties</b> in a collection.</p>
</BODY>
</HTML>

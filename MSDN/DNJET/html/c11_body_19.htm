<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling dbDAO Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2handling_dbdao_errors"></a>Handling dbDAO Errors</h3>
<p>
The dbDAO classes use exception handling to let you know when an error has occurred. The <b>CdbException</b> class provides minimal exception handling (it only has an HRESULT member). The <b>CdbLastOLEError</b> and <b>CdbError</b> classes offer more detailed error handling.</p>
<p>
To catch an exception for dbDAO, use the <b>CdbException</b> class in your catch statement:</p>
<pre><FONT FACE="Courier New" SIZE="3">try
&#09;{
&#09;// Make some dbDAO function calls.
&#09;}
catch (CdbException e)
&#09;{
&#09;// Handle the exception.
&#09;}</font></pre>
<p>
In many cases, you’ll just want your exception handling code to examine the HRESULT returned. In that case, the only thing you need is the <b>CdbException</b> object. The only member of <b>CdbException</b> is <i>m_hr</i>, the HRESULT. Error constants that can be returned by dbDAO member functions are defined in Dbdaoerr.h. To determine exactly what the error was, you can compare the HRESULT in <b>CdbException</b> with values defined in Dbdaoerr.h:</p>
<pre><FONT FACE="Courier New" SIZE="3">#include &lt;dbdao.h&gt;
#include &lt;dbdaoerr.h&gt;

void OpenADatabase(CString stDBName)
&#09;{
&#09;CdbDBEngine dben;
&#09;CdbDatabase db;

&#09;try
&#09;&#09;{
&#09;&#09;db = dben.OpenDatabase(stDBName);
&#09;&#09;}
&#09;catch (CdbException e)
&#09;&#09;{
&#09;&#09;assert (e.m_hr == E_DAO_FileNotFound);
&#09;&#09;// Inform the user that the file specified doesn't exist.
&#09;&#09;// E_DAO_FileNotFound is a constant defined in dbdaoerr.h.
&#09;&#09;}
&#09;}</font></pre>
<p>
DAO returns numeric error values in two forms. One is in the form of an HRESULT. This is the form familiar to OLE programmers. The other form is a long integer. This error number is the same number as is returned by the <b>Err.Number</b> property in Visual Basic. To read the HRESULT, examine the <i>m_hr</i> member of the <b>CdbException</b> object. To get the equivalent Visual Basic error number wrap the <i>m_hr</i> member of <b>CdbException</b> in a <b>DBERR</b> macro (defined in Dbdao.h).</p>
<p>
For more involved error handling, you may want to use the <b>CdbError</b> class. This class is associated with the <b>CdbDBEngine</b> object’s <b>CdbErrors</b> collection. It holds the last DAO errors that have occurred. The <b>CdbErrors</b> collection may hold more than one error if there is more information that can be passed. For example, an ODBC error usually results in more than one error in this collection. The members of this class contain the following elements:
<ul>
<li>
The number value associated with the error.<br><br></li>
<li>
The DAO description for that error.<br><br></li>
<li>
The object on which the error occurred (in the form DAO.<i>object</i>&nbsp;— for example, DAO.Database).<br><br></li>
<li>
The DAO Help file and Help context for obtaining more information about the error.</li>
</ul>
<p>
The number value stored in the <b>CdbError</b> object is in the form of an IDA rather than an HRESULT, as in the <b>CdbException</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">void OpenADatabase(CString stDBName)
&#09;{
&#09;CdbDBEngine dben;
&#09;CdbDatabase db;

&#09;try
&#09;&#09;{
&#09;&#09;db = dben.OpenDatabase(stDBName);
&#09;&#09;}
&#09;catch (CdbException e)
&#09;&#09;{
&#09;&#09;int iError, cError;
&#09;&#09;CString stError = _T(&quot;&quot;);

&#09;&#09;cError = dben.Errors.GetCount();
&#09;&#09;for (iError = 0; iError &lt; cError; iError++)
&#09;&#09;&#09;{
&#09;&#09;&#09;stError += dben.Errors[iError].GetDescription();
&#09;&#09;&#09;stError += dben.Errors[iError].GetNumber();
&#09;&#09;&#09;stError += _T(&quot;\n&quot;);
&#09;&#09;&#09;}
&#09;&#09;//Inform the user of the error with stError.
&#09;&#09;}
&#09;}</font></pre>
<p>
The <b>CdbLastOLEError</b> class can be used to get extended error information, including the error description, on the last OLE error to occur. This class can be used regardless of whether the last error to occur was a DAO or an OLE error.</p>
<pre><FONT FACE="Courier New" SIZE="3">void OpenADatabase(CString stDBName)
&#09;{
&#09;CdbDBEngine dben;
&#09;CdbDatabase db;

&#09;try
&#09;&#09;{
&#09;&#09;db = dben.OpenDatabase(stDBName);
&#09;&#09;}
&#09;catch (CdbException e)
&#09;&#09;{
&#09;&#09;CdbLastOLEError ex;
&#09;&#09;CString stError;

&#09;&#09;stError.Format(&quot;0x%lx : %s&quot;, e.m_hr,
&#09;&#09;&#09;&#09;(LPCTSTR)ex.GetDescription());
&#09;&#09;//Inform the user of the error with stError.
&#09;&#09;}
&#09;}</font></pre>
</BODY>
</HTML>

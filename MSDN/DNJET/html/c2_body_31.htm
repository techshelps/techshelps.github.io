<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Bitwise Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2setting_bitwise_properties"></a>Setting Bitwise Properties</h4>
<p>
Some properties store bitwise values. To compare bitwise values you use the bitwise comparison operators: <b>And</b>, <b>Eqv</b>, <b>Not</b>, <b>Or</b>, <b>Xor</b>, and <b>Imp</b>. A <i>bitwise comparison</i> is a bit-by-bit comparison of the individual bits of a value, rather than the value as a whole. To correctly store and retrieve values for these properties, you must use bitwise operators. For example, the <b>Attributes</b> property of a <b>TableDef</b> object defines certain characteristics such as how the table is linked. To check this property for a <b>TableDef</b> object, you may use the following line of code, where <code>tdf</code> represents the <b>TableDef</b> object.</p>
<pre><FONT FACE="Courier New" SIZE="3">If (tdf.Attributes And dbAttachedTable) = dbAttachedTable Then
&#09;' Perform some action on TableDef object.
&#09;.
&#09;.
&#09;.
End If
&#09;</font></pre>
<p>
If the result is a nonzero value, then the attribute <b>dbAttachedTable</b> is set for the table. If the result is zero, then that particular attribute isn’t set.</p>
<p>
The previous example uses the <b>And</b> operator to retrieve bitwise values. You can use the <b>Or</b> operator to set bitwise values, and the <b>And</b> and the <b>Not</b> operators together to clear them.</p>
<p>

<p>
<b>Microsoft Access Users   </b>When you create an object through DAO by using Microsoft Jet, only the standard built-in properties are created in the new object’s <b>Properties</b> collection. However, when Microsoft Access creates a Microsoft Jet object, it may add several user-defined properties to objects. These properties are a special case of user-defined properties known as <i>application-defined</i> properties. For example, when you create a table in the Microsoft Access user interface, and type a value in the Description field, it automatically adds a new property to the <b>TableDef</b> object to represent the description.</p>
<p>
Microsoft Access doesn’t automatically add these application-defined properties to new objects. For example, when you create a new table through the user interface in Microsoft Access, the <b>Description</b> and <b>Format</b> properties are not created unless you type a value in the Description and Format fields. This can cause a problem because when you try to read the value of these properties on a table where they have not been specified, a run-time error occurs. The technique for avoiding this problem, and for writing more robust property-retrieval code in general, is to trap for errors when looking at <b>Property</b> objects. For more information, see “Retrieving Properties” later in this chapter.</p>
<p>
You can add properties not created by Microsoft Access through the user interface, by using the user interface, or by creating the property in code and appending it to the appropriate object’s <b>Properties</b> collection. For example, if you want to include a <b>Description</b> property in tables you create from code, you must add it to the <b>Properties</b> collection by using the <b>CreateProperty</b> method of the <b>TableDef</b> object.</p>
</BODY>
</HTML>

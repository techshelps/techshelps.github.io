<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Referencing Field Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2referencing_field_objects"></a>Referencing Field Objects</h3>
<p>
A <b>Field</b> object can be identified by its <b>Name</b> property, which corresponds to the field name in the table from which the data in the field was retrieved. Because the <b>Fields</b> collection is the default collection of a <b>Recordset</b> object, you can use either of the following syntax forms to return the field’s current value:</p>
<pre><FONT FACE="Courier New" SIZE="3">rst!LastName
rst.Fields(&quot;LastName&quot;)</font></pre>
<p>
Within the <b>Fields</b> collection, each <b>Field</b> object can also be identified by its index:</p>
<pre><FONT FACE="Courier New" SIZE="3">rst.Fields(0)</font></pre>
<p>
The index enables you to walk through the collection in a loop, replacing the index with a variable that is incremented with each pass through the loop. Object numbers in the collection are zero-based, so the first <b>Field</b> in the collection is number 0, the second is 1, and so on. The field order is determined by the underlying table. Fields are usually numbered in the order that they are retrieved when the <b>Recordset </b>object is opened. One drawback to using the index to identify a field is that you can’t be certain which field will be referenced, because the underlying table structure may change, fields may be added or deleted, and so on.</p>
<p>
The <b>Field</b> object also provides two properties that indicate its position relative to the other fields in the collection&nbsp;— the <b>OrdinalPosition</b> property and the <b>CollectionIndex</b> property. These properties are closely related, yet subtly different. <b>CollectionIndex</b> is a read-only number that indicates the <b>Field</b> object’s absolute position within the collection as determined by the collection population. The <b>OrdinalPosition</b> property, in contrast, is a read-write property that you can set to any positive integer to change the field order when data is displayed in a form or copied to an array or a Microsoft Excel worksheet, and so on. The value of the <b>OrdinalPosition</b> property usually corresponds to the value of the field’s <b>CollectionIndex</b> property.</p>
<p>
When you write a loop to walk through the <b>Fields</b> collection, the loop counter always identifies fields in the same sequence, which corresponds to the <b>CollectionIndex</b> property, regardless of the <b>OrdinalPosition</b> property’s value.</p>
<p>
<b>Caution   </b>The <b>CollectionIndex</b> property is not exposed to DAO users through the Object Browser. Although <b>CollectionIndex</b> is available, its use is discouraged because at the present time Microsoft is not committed to maintaining it in future versions of DAO. Consequently, this feature is not tested to the same reliability level as other DAO features, and assistance on its use is not available through Microsoft Technical Support.</p>
<p>
<b>Microsoft Excel Users   </b>You can also copy individual fields from a <b>Recordset </b>object to a <b>ListBox</b> control by using the <b>ListBox</b> control’s <b>AddItem</b> method. For more information, see the Microsoft Excel Visual Basic Help file.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sorting and Filtering Records</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2sorting_and_filtering_records"></a>Sorting and Filtering Records</h4>
<p>
Unless you open a table-type <b>Recordset</b> object and set its <b>Index</b> property, you can’t be sure records will appear in any specific order. Most of the time, however, you want to retrieve records in some specific order. For example, you may want to view invoices arranged by increasing invoice number or retrieve employee records arranged alphabetically by last name.</p>
<p>
To sort non-table <b>Recordset</b> object data, use an ORDER BY clause in the SQL query that constructs the <b>Recordset</b> object, whether that clause is contained in a <b>QueryDef</b> object, a stored query in a database, or in an SQL string passed to the <b>OpenRecordset</b> method.</p>
<p>
With any type of <b>Recordset</b> object, use an SQL WHERE clause in a query to filter data (to restrict the result set to records that meet some criteria).</p>
<p>
The following example opens a dynaset-type <b>Recordset</b> object, and uses an SQL statement to filter and sort a <b>Recordset</b> object by using the WHERE and ORDER BY clauses. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;SELECT FirstName, &quot; &amp; _
&#09;&quot;LastName FROM Employees WHERE Title = &quot;&quot;Sales Representative&quot;&quot; &quot; &amp; _
&#09;&quot;ORDER BY LastName&quot;)
With rst
&#09;Do While Not .EOF
&#09;&#09;Debug.Print !FirstName &amp; &quot; &quot; &amp; !LastName
&#09;&#09;.MoveNext
&#09;Loop
End With</font></pre>
<p>

<p>
<b>Microsoft Access Users   </b>One drawback of executing an SQL query in an <b>OpenRecordset</b> method is that it has to be compiled every time you run it. If this query is to be used frequently, you can improve performance by creating a stored query that contains the same SQL statement, and then opening a <b>Recordset</b> object against the query. In the following example, Sales Representatives is a saved query:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As RecordsetSet 

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;Sales Representatives&quot;)</font></pre>
<p>
For even greater flexibility and control at run time, you can use query parameters to determine the sort order and filter criteria. This is discussed in more detail in the “Using Parameter Queries” section later in this chapter.</p>
<h5>Re-creating a Query from a Recordset Object</h5>
<p>
A <b>Recordset</b> object opened from a <b>QueryDef</b> object can also be used as a template to re-create the <b>QueryDef</b> object using the <b>CopyQueryDef</b> method. This is useful in situations where a <b>Recordset</b> object variable created from a <b>QueryDef</b> is passed to a function, and the function must re-create the SQL equivalent of the query and possibly modify it.</p>
<h5>Modifying a Query from a Recordset Object</h5>
<p>
You can use the <b>Requery</b> method on any <b>Recordset</b> object except a table-type <b>Recordset</b> object when you want to re-execute the underlying query after changing a parameter. This is more convenient than opening a new <b>Recordset</b> object, and the query also executes faster.</p>
<p>
The following procedure takes a <b>Recordset</b> object that was opened on a <b>QueryDef</b> object and uses the <b>CopyQueryDef</b> method to extract the underlying query’s SQL string, prompts the user to add an additional WHERE clause to the query, and requeries the <b>Recordset</b> object based on the altered query:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function AddQueryFilter(rst As Recordset) As Recordset
&#09;Dim qdf As QueryDef
&#09;Dim strNewFilter As String, strQuery As String
&#09;Dim varPosition As Variant, intLength As Integer
&#09;Const conOperationNotSupported As Integer = 3251

&#09;On Error GoTo Err_AddQueryFilter
&#09;Set qdf = rst.CopyQueryDef
&#09;strNewFilter = InputBox(&quot;Enter new constraint for WHERE clause, &quot; _
&#09;&#09;&amp; &quot;e.g., ProductName Like 'M*'&quot;)

&#09;' Create new query string with added restriction.
&#09;strQuery = qdf.SQL
&#09;' Return string length.
&#09;intLength = Len(strQuery)
&#09;' Check for WHERE clause in string.
&#09;varPosition = InStr(strQuery, &quot;WHERE&quot;)
&#09;If varPosition &gt; 0 Then
&#09;&#09;' Append new restriction to existing WHERE clause.
&#09;&#09;strQuery = Left(strQuery, varPosition + 5) &amp; strNewFilter &amp; &quot; AND &quot; _
&#09;&#09;&#09;&amp; Right(strQuery, intLength - (varPosition + 5))
&#09;&#09;qdf.SQL = strQuery
&#09;Else
&#09;&#09;' If no WHERE clause, alert user and exit function.
&#09;&#09;' You could also add code to handle this situation.
&#09;&#09;MsgBox &quot;The SQL statement you supplied did not include a WHERE clause.&quot;
&#09;&#09;GoTo Exit_AddQueryFilter
&#09;End If
&#09;&#09;
&#09;' Requery recordset.
&#09;rst.Requery qdf
&#09;Set AddQueryFilter = rst
&#09;
Exit_AddQueryFilter:
&#09;Exit Function

Err_AddQueryFilter:
&#09;If Err = conOperationNotSupported Then
&#09;&#09;Dim strMsg As String
&#09;&#09;strMsg = &quot;This recordset was not opened on a QueryDef object. &quot; &amp; _
&#09;&#09;&#09;&quot;You can call this function only with a recordset opened &quot; &amp; _
&#09;&#09;&#09;&quot;on a QueryDef object.&quot;
&#09;&#09;MsgBox strMsg, vbOKOnly
&#09;Else
&#09;&#09;MsgBox Err &amp; &quot;: &quot; &amp; vbCrLf &amp; Err.Description
&#09;End If
&#09;Set AddQueryFilter = Nothing
&#09;Resume Exit_AddQueryFilter
End Function</font></pre>
<p>
<b>Note   </b>To execute the <b>Requery</b> method, the<b> Recordset</b> object’s <b>Restartable</b> property must be set to <b>True</b>. The <b>Restartable</b> property is always <b>True</b> when the <b>Recordset</b> object is created from a query other than a crosstab query based on tables in a Microsoft Jet database. SQL pass-through queries are not restartable. Queries against linked tables in another database format may or may not be restartable. To determine whether a <b>Recordset</b> object can re-execute its query, check the <b>Restartable</b> property.</p>
<h5>The Sort and Filter Properties</h5>
<p>
Another approach to sorting and filtering recordsets is to set the <b>Sort</b> and <b>Filter</b> properties on an existing <b>Recordset</b> object, and then open a new <b>Recordset</b> object from the existing one. However, this is usually much slower than just including the sort and filter criteria in the original query or changing the query parameters and re-executing the query with the <b>Requery</b> method. The <b>Sort</b> and <b>Filter</b> properties are useful when you want to allow a user to sort or restrict a result set but the original data source is unavailable for a new query&nbsp;— for example, when a <b>Recordset</b> object variable is passed to a function, and the function must reorder records or restrict the records in the set. With this approach, performance is likely to be slow if more than 100&nbsp;records are in the <b>Recordset</b> object. Using the <b>CopyQueryDef</b> method described in the previous section is preferable.</p>
</BODY>
</HTML>

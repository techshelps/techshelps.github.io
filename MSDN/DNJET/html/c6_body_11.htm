<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Two-Database Approach</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2the_two-database_approach"></a>The Two-Database Approach</h3>
<p>
When developing multiuser applications with Microsoft Jet, you may find it helpful to split your objects into two databases. This approach offers many advantages. These two databases are known as the <i>front-end</i> database and the <i>back-end</i> database.</p>
<p>
The front-end database has three basic characteristics:
<ul>
<li>
It contains non-data objects such as saved queries. If you’re a Microsoft Access user, it also contains your forms, reports, macros, and modules.<br><br></li>
<li>
It serves as an area for managing temporary objects. Most multiuser applications perform some type of data access that is temporary in nature: creating tables with transient data, for example.<br><br></li>
<li>
You distribute a copy for each user to run from his or her workstation.</li>
</ul>
<p>
The back-end database contains the tables that hold your application’s data. The tables in this database are accessed by your application through links in the front-end database. Figure&nbsp;6.4 illustrates the two-database approach.</p>
<p>
<b>Figure&nbsp;6.4   The two-database approach</b></p>
<p>
<img src="jet0604.gif" border=0></p>
<p>
<b>See Also   </b>For more information about linking tables, see Chapter&nbsp;8, “<a href="c8_body.htm">Accessing External Data</a>.”</p>
<p>
The advantages of the two-database approach become obvious in multiuser environments. First, by storing the front-end database on the user’s workstation, there is no contention for temporary objects because your application doesn’t have to worry about creating a temporary table that may conflict with another user. Second, by storing application-specific objects that are typically static in nature at the local level, the amount of network traffic that occurs while your application runs is minimized.</p>
</BODY>
</HTML>

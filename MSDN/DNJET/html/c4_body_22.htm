<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameter Queries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2parameter_queries"></a>Parameter Queries</h4>
<p>
With Microsoft Jet, you can specify one or more query parameters. The parameters are used to accept input values at run time from the user. This user-supplied data is then merged with a <b>QueryDef</b> object. Parameters are commonly used to supply selection criteria, but they can also be used to specify terms in an expression.</p>
<p>
You declare parameters with the PARAMETERS declaration, which specifies the names and data types of the parameters. The following example takes an EmployeeID value as a parameter, which causes the query to return values for only the selected employee, and another parameter whose value will be multiplied by the employee’s current salary to calculate a proposed new salary. The first parameter, EmployeeIDSelect, is used as part of the selection criteria; the second parameter, SalaryIncreaseFactor, is used as part of an expression:</p>
<pre><FONT FACE="Courier New" SIZE="3">PARAMETERS EmployeeIDSelect Long, SalaryIncreaseFactor Single;
SELECT 
&#09;Employees.LastName, 
&#09;Employees.FirstName, 
&#09;Employees.Salary, 
&#09;CCur(Employees.Salary*SalaryIncreaseFactor) AS NewSalary
FROM Employees
WHERE Employees.EmployeeID = EmployeeIDSelect;</font></pre>
<p>
How does your program supply the parameter values? If you’re working with Microsoft Access, you may be familiar with the way it prompts the user to supply missing parameter values.</p>
<p>
This behavior isn’t built into Microsoft Jet, however. It’s a function performed by Microsoft Access, and then only when the parameter query is executed through the user interface. Microsoft Access prompts the user for parameter values for forms, reports, and datasheets based on parameter queries.</p>
<p>
If you want to supply parameter values to an existing <b>QueryDef</b> object that’s being executed programmatically, you have to do so explicitly, as in the following example. Assume that you have saved the parameter query shown previously as a permanent <b>QueryDef</b> object. In this example, <code>strDbPath</code> is the path to the NorthwindTables database, <code>strQueryName</code> is the name of the query under which you have saved the preceding SQL statement, <code>lngEmpID</code> is the <b>Long</b> value you supply for the EmployeeIDSelect parameter, and <code>sngIncFact</code> is the <b>Single</b> value you supply for the SalaryIncreaseFactor parameter.</p>
<p>
For example, to increase the salary for the first employee in the Employees table by 10 percent, you would supply a value of 1 for EmployeeIDSelect and a value of 1.1 for SalaryIncreaseFactor:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim qdf As QueryDef
Dim rst As Recordset
Dim strMsg As String

Set dbs = OpenDatabase(strDbPath)
' Return reference to parameter QueryDef object.
Set qdf = dbs.QueryDefs(strQueryName)

' Supply values for parameters.
qdf.Parameters(&quot;EmployeeIDSelect&quot;) = lngEmpID
qdf.Parameters(&quot;SalaryIncreaseFactor&quot;) = sngIncFact

' Open recordset.
Set rst = qdf.OpenRecordset()
With rst
&#09;If .RecordCount &lt;&gt; 0 Then
&#09;&#09;MsgBox &quot;The proposed new salary is: $&quot; &amp; !NewSalary
&#09;&#09;' Check whether recordset is updatable.
&#09;&#09;If .Updatable Then
&#09;&#09;&#09;' Prompt to update salary.
&#09;&#09;&#09;strMsg = &quot;Would you like to update the salary for &quot; _
&#09;&#09;&#09;&#09;&amp; !FirstName &amp; &quot; &quot; &amp; !LastName &amp; &quot; from $&quot; _
&#09;&#09;&#09;&#09;&amp; !Salary &amp; &quot; to $&quot; &amp; !NewSalary &amp; &quot;?&quot;
&#09;&#09;&#09;' Update salary field.
&#09;&#09;&#09;If MsgBox(strMsg, vbYesNo) = vbYes Then
&#09;&#09;&#09;&#09;.Edit
&#09;&#09;&#09;&#09;!Salary = !NewSalary
&#09;&#09;&#09;&#09;.Update
&#09;&#09;&#09;End If
&#09;&#09;End If
&#09;End If
End With</font></pre>
<p>
This method assumes that you know the names of the parameters at the time your code is written. One way to avoid the need to explicitly specify parameters is to iterate through all the parameters in the <b>Parameters</b> collection of the <b>QueryDef</b> object and prompt the user for values, thus emulating the behavior inherent in Microsoft Access. In the following example, <code>strDbPath</code> is the path to the database, and <code>strQueryName</code> is the name of the query:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim qdf As QueryDef
Dim rst As Recordset
Dim prm As Parameter

Set dbs = OpenDatabase(strDbPath)
Set qdf = dbs.QueryDefs(strQueryName)

For Each prm In qdf.Parameters
&#09;prm.Value = InputBox(&quot;Enter parameter value: &quot; &amp; prm.Name)
Next prm
Set rst = qdf.OpenRecordset()</font></pre>
<p>
Although Microsoft Jet includes the PARAMETERS declaration in order for you to name and type your <b>QueryDef</b> object parameters explicitly, it actually treats any unrecognized term as a parameter. If you make a spelling error when specifying a field name, for example, Microsoft Jet treats the misspelled field name as a parameter.</p>
<p>
It’s a good idea to get into the habit of specifying the names and data types of your parameters rather than relying on the implicit parameter behavior of Microsoft Jet.</p>
<p>
You can also use the Microsoft Jet PARAMETERS declaration to create a temporary <b>QueryDef</b> object that prompts the user to supply parameter values when your code executes. For more information and an example, see “Temporary QueryDef Objects” in Chapter&nbsp;3, “Data Definition and Integrity.”</p>
<p>
<b>Important   </b>You should not use a parameter query to search for <b>Null</b> values. A parameter of <code>Null</code> will never find a <b>Null</b> record because no two <b>Null</b> values match. If you want to find records that contain fields with <b>Null</b> values, you can use a non-parameter SELECT query. For example, the following SQL statement returns a list of all customers that don’t have a fax number: </p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT * FROM Customers WHERE Fax = Null;</font></pre>
<p>
<b>See Also   </b>For a discussion of the various database object collections, including <b>QueryDefs</b> and <b>Parameters</b>, see Chapter&nbsp;3, “<a href="c1_body_7.htm">Data Definition and Integrity</a>.”</p>
</BODY>
</HTML>

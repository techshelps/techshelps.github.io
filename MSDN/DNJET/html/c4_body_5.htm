<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The WHERE Clause</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2the_where_clause"></a>The WHERE Clause</h4>
<p>
You use the WHERE clause to restrict the records returned by your query to those matching your criteria specified by the WHERE clause. The WHERE clause evaluates each record in the set of input records and decides whether the expression contained in the WHERE clause evaluates to <b>True</b>. If it does, the record is selected. If not, the record is omitted from the query’s result set.</p>
<p>
While it’s beyond the scope of this chapter to give a complete tutorial on SQL, the following representative examples point out some of the unique features of the Microsoft Jet version of SQL.</p>
<p>
<b>See Also   </b>For more information about SQL syntax, see Appendix&nbsp;B, “<a href="apb_body.htm">SQL Reference</a>.”</p>
<h5>Selecting Matching Values</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Products.* 
FROM Products
WHERE Products.CategoryID = 2;</font></pre>
<p>
For each record in the Products table where the CategoryID field is equal to the literal value 2, the record is selected.</p>
<h5>Selecting by Using Partial String Matching</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Products.* 
FROM Products
WHERE Products.ProductName Like 'CH*';</font></pre>
<p>
Microsoft Jet uses partial match (or “wildcard”) characters with the <b>Like</b> operator that are different from those used in most SQL dialects. The asterisk (*) character matches zero or more characters and is equivalent to the percent (%) character in ANSI SQL. The other Microsoft Jet partial match characters are the question mark (?), which matches any character in a single field, and the number sign (#), which matches any digit in a single field.</p>
<p>
Some SQL dialects require you to enclose text literals within single quotation marks. However, Microsoft Jet accepts literals enclosed in either single or double quotation marks.</p>
<h5>Selecting Boolean Values</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Products.* 
FROM Products
WHERE Products.Discontinued = True;</font></pre>
<p>
Microsoft Jet stores Boolean values as either &nbsp;–&nbsp;1 or 0. The constant value <b>True</b> is equal to &nbsp;–&nbsp;1; <b>False</b> is equal to 0. You can substitute Yes for <b>True</b> and No for <b>False</b> within the text of the SQL statement. Note, however, that if you refer to Boolean recordset values within your VBA code, you must use the values &nbsp;–&nbsp;1 for <b>True</b> and 0 for <b>False</b>, because Yes and No aren’t recognized there.</p>
<h5>Selecting by Using Date Literals and the Between...And Operator</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Orders.* 
FROM Orders
WHERE Orders.OrderDate Between #3/1/96# And #6/30/96#;</font></pre>
<p>
The convention Microsoft Jet uses to search for DATETIME values is to enclose literal search values in number signs (#). The literal either can include the date only, as in the following example, or it can be fully qualified with the date and time:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Orders.* 
FROM Orders 
WHERE Orders.OrderDate &gt; #5/24/96#;</font></pre>
<p>
Note that this date literal must always be expressed in MM/DD/YY order. To avoid the ambiguity of the meaning of stored queries, Microsoft Jet doesn’t follow the international date format settings specified in the user’s Control Panel.</p>
<h5>Selecting by Using the IN Clause and a Value List</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Orders.* 
FROM Orders
WHERE Orders.ShipCity IN ('London','Madrid','Rome');</font></pre>
<p>
The previous code selects a single value in the underlying table from a list of literal values. The IN clause can be combined with NOT:</p>
<pre><FONT FACE="Courier New" SIZE="3">...WHERE Orders.ShipVia NOT IN (1,3);</font></pre>
<h5>Combining More Than One Expression</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Orders.* 
FROM Orders
WHERE Orders.OrderDate &gt; #3/1/96# AND Orders.ShipVia = 2;</font></pre>
<p>
A WHERE clause can consist of more than one <b>Sub</b> procedure that combines various AND and OR clauses. The truth of the entire WHERE clause is evaluated by using standard rules of Boolean logic. You can use parentheses with the <b>Sub</b> procedure to ensure the order of evaluation. Note, however, that the absence or presence of parentheses doesn’t affect the order in which joins are performed; parentheses affect only the order in which Boolean expressions are evaluated.</p>
<h5>Selecting Unique Values</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT DISTINCT Employees.Title
FROM Employees;</font></pre>
<p>
Although not related to the WHERE clause, you can use the DISTINCT predicate of the SELECT clause to limit output records to specific unique combinations of output fields. In the previous example, one occurrence of each unique Title field value used in the Employees table is retrieved. If the output contains more than one field, only records unique across all selected fields are output, as in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT DISTINCT 
&#09;Employees.Title, 
&#09;Employees.TitleOfCourtesy
FROM Employees;</font></pre>
<h5>Selecting Unique Records</h5>
<p>
The DISTINCTROW predicate omits data based on entire duplicate records, not just duplicate fields. For example, you could create a query that joins the Customers and Orders tables on the CustomerID field. The Customers table contains no duplicate CustomerID fields, but the Orders table does because each customer can have many orders. The following SQL statement shows how you can use DISTINCTROW to produce a list of companies that have at least one order but without any details about those orders:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT DISTINCTROW CompanyName
FROM Customers INNER JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
ORDER BY CompanyName;</font></pre>
<p>
If you omit DISTINCTROW, this query produces multiple rows for each company that has more than one order. DISTINCTROW has an effect only when you select fields from some, but not all, of the tables used in the query.</p>
<p>
<b>Note   </b>DISTINCTROW is ignored if your query includes only one table, or if you output fields from all tables.</p>
<p>

<p>
<b>Microsoft Access Users   </b>The DISTINCTROW predicate is the SQL equivalent of setting the Microsoft Access <b>UniqueRecords</b> property in a query to <b>True</b>. In Microsoft Access&nbsp;97, the default setting for the <b>UniqueRecords</b> property in a query is <b>False</b>, which eliminates DISTINCTROW from the query’s SQL statement; in prior versions of Microsoft Access, the default setting for the <b>UniqueRecords</b> property is <b>True</b>, which adds DISTINCTROW to the query’s SQL statement. Three types of queries are affected by this change: UPDATE queries, DELETE queries, and SELECT queries.
<ul>
<li>
<b>UPDATE queries   </b>If you run an UPDATE query that you imported from a Microsoft Access 2.0 or 95 database, or if you run an existing UPDATE query in a database that you converted to Microsoft Access&nbsp;97 from an earlier version, you may receive the following error message: “Operation must use an updatable query.”<br><br></li>
<li>
To resolve this error message, set the query’s <b>UniqueRecords</b> property to <b>False</b>.<br><br></li>
<li>
<b>DELETE queries   </b>When a DELETE query contains more than one table (for example, a query that deletes duplicate records from one of the tables), the <b>UniqueRecords</b> property must be set to <b>True</b> for all versions of Microsoft Access. However, because the default value for the <b>UniqueRecords</b> property is <b>False</b> in Microsoft Access&nbsp;97, you must set the value of this property manually when you create a new DELETE query in Microsoft Access&nbsp;97.<br><br></li>
<li>
<b>SELECT queries   </b>Some SELECT queries that are updatable in Microsoft Access 2.0 or 95 may display the following message in the status bar when you try to update them in Microsoft Access&nbsp;97: “This recordset is not updatable.”<p>
To resolve this error, set the query’s <b>UniqueRecords</b> property to <b>False</b>.</p>
</li>
</ul>
<h5>Selecting by Using Nested Subqueries</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT Orders.* 
FROM Orders
WHERE Orders.CustomerID IN 
(SELECT CustomerID FROM Customers WHERE City = 'London');</font></pre>
<p>
This example matches each CustomerID value in the Orders table against a list that’s created by selecting the CustomerID values of all customers whose city is London. Although this is a standard SQL query, and legal in Microsoft Jet SQL, this particular search may be executed more efficiently by directly joining the Orders table to the Customers table.</p>
<h5>Selecting by Using Correlated Subqueries</h5>
<pre><FONT FACE="Courier New" SIZE="3">SELECT 
&#09;T1.LastName, 
&#09;T1.FirstName, 
&#09;T1.Title, 
&#09;T1.Salary
FROM Employees AS T1
WHERE T1.Salary &gt;=
&#09;(SELECT Avg(Salary) 
&#09;FROM Employees 
&#09;WHERE Employees.Title = T1.Title)
ORDER BY T1.Title;</font></pre>
<p>
A correlated subquery is evaluated once for each record processed by the main SELECT query. In this example, the Salary field of each input record in the Employees table (here given the alias name T1) is compared to the results of a sub-SELECT query. The sub-SELECT query uses the value in the main Title field as a selection criterion. Because the Title field in the main Employees table can change for each record processed, the sub-SELECT query must be re-executed for each record of the main table that’s processed. For example, if there are three employees with the title of Sales Representative, and the average of their three salaries is equal to $100,000 dollars, the main query will return only employees whose salary is greater than or equal to $100,000.</p>
<p>
In addition to the features shown in the previous examples, Microsoft Jet supports a variety of other predicates for subqueries, including EXISTS, ANY, and ALL.</p>
</BODY>
</HTML>

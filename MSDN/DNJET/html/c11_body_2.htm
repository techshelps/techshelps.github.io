<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAO Automation Interfaces</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2dao_automation_interfaces"></a>DAO Automation Interfaces</h3>
<p>
DAO provides a vtable-based implementation of Automation. The DAO Software Development Kit (SDK) provides header files for use with C++; they describe the vtable interfaces for DAO, eliminating the need to use <b>IDispatch</b>. After the initial creation of an instance of the <b>DBEngine</b> object, instances of objects are created through their parent objects, using the same object hierarchy as described in Chapter&nbsp;2, “Introducing Data Access Objects.” Because these objects are typical Component Object Model (COM) objects, you are responsible for explicitly releasing the objects when they are no longer needed.</p>
<p>
If you use C++ and are familiar with COM programming, the DAO interfaces may be all you need. Even so, programming with these interfaces requires the declaration of many temporary variables in order to work down the DAO hierarchy to the object you want to work with.</p>
<p>
<b>See Also   </b>For information about using Automation, see the <i>OLE Automation Programmer’s Reference</i> published by Microsoft Press.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting to the Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2connecting_to_the_database"></a>Connecting to the Database</h3>
<p>
The <b>init</b> method is the entry point for the simpledao.java applet. It instantiates the dao_dbengine class, and then opens the database and the recordset using the related parameter values.</p>
<pre><FONT FACE="Courier New" SIZE="3">public void init()
{
&#09;if (!m_fStandAlone)
&#09;&#09;GetParameters(null);
   // If you use a ResourceWizard-generated &quot;control creator&quot; class to
   // arrange controls in your applet, you may want to call its
   // CreateControls method from within this method. Remove the following
   // call to resize before adding the call to CreateControls;
   // CreateControls does its own resizing.
   //----------------------------------------------------------------------
&#09;resize(320, 200);
&#09;// Set the name of the database (parameter).
&#09;if (m_fStandAlone)
&#09;&#09;// Use the value on the command line for the MDB filename.
&#09;&#09;filename = m_Database;
&#09;else
&#09;try {
&#09;&#09;// Otherwise, generate it relative to the applet.
&#09;&#09;java.net.URL fn;
&#09;&#09;fn = new java.net.URL(getDocumentBase(), m_Database);
&#09;&#09;// Strip away the &quot;file:/&quot; from the URL.
&#09;&#09;filename = fn.getFile().substring(1);
&#09;} catch(Exception e) {
&#09;&#09;showStatus(&quot;Error: &quot; + e.getMessage());
&#09;}
    _DBEngine idbengine = (_DBEngine) dao_dbengine.create();
    // Open the database.
   Variant vExclusive = new Variant();
   Variant vReadOnly = new Variant();
   Variant vConnect = new Variant();
   vExclusive.putBoolean(false);
   vReadOnly.putBoolean(readOnly);
   vConnect.putString(&quot;&quot;);
   database = idbengine.OpenDatabase(filename, vExclusive, vReadOnly, vConnect);
    // Create a new recordset.
   Variant vOpenType = new Variant();
   Variant vOptions = new Variant();
   vOpenType.putShort((short)RecordsetTypeEnum.dbOpenDynaset);
   vOptions.putShort((short)(readOnly ? RecordsetOptionEnum.dbReadOnly : 0));
   recordset = database._30_OpenRecordset(m_Recordset, vOpenType, vOptions);
}</font></pre>
<p>
For each variant parameter for the <b>OpenDatabase</b> and <b>OpenRecordset</b> methods, there is a corresponding variant variable. The variant data type maps to the Java com.ms.com.variant class. Use the methods of the class to set the contents of the variable.</p>
<p>
In Java, optional parameters are exposed as ordinary parameters. Therefore, a variant object must be specified even if the parameter is declared as optional in the component’s type library. It is possible to omit a specific value for a parameter by using the <b>noParam</b> method of the Java variant class. The <b>noParam</b> method makes the variant object act as a placeholder for a missing optional parameter. For example, the following code demonstrates how to call the <b>OpenDatabase</b> method without specifying values for the optional parameters vExclusive, vReadOnly, and vConnect.</p>
<pre><FONT FACE="Courier New" SIZE="3">Variant vOptParam = new Variant();
vOptParam.noParam();
database = idbengine.OpenDatabase(filename, vOptParam, vOptParam, vOptParam);</font></pre>
</BODY>
</HTML>

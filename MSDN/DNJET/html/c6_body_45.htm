<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Minimizing Network Traffic for Static Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2minimizing_network_traffic_for_static_objects"></a>Minimizing Network Traffic for Static Objects</h3>
<p>
As discussed earlier in this chapter, the location of objects in a multiuser application has a direct effect on the application’s performance. Consider the following worst-case scenario.</p>
<p>
A user has a workstation with 8&nbsp;MB of RAM and a 200&nbsp;MB hard disk, of which 100&nbsp;MB is unused. The software on this machine consists of MS-DOS&reg; and the necessary network software to connect to the file server. The user runs your multiuser application completely from the network. This means that he or she has to load Microsoft Windows, Microsoft Jet, and your application from the network. Additionally, every&nbsp;byte of data access, whether it’s from a live data table or from a static object such as a query, has to come across the network. Finally, the user is using a temporary swap file mapped to a network drive.</p>
<p>
Obviously, this user is not going to be happy with your application’s performance. In fact, it would be surprising if the user could even run your application. To understand how to minimize network traffic for static objects, it’s useful to work backward from this worst-case scenario and address the individual problems.</p>
<p>
You know that the user has the necessary disk space to allow you to move your application to the local level. Start by moving the support software to the user’s workstation. This includes installing the operating system, such as Microsoft Windows, on the workstation, setting a permanent swap file on the local drive, and installing the Microsoft Jet components locally. Next, consider whether or not to install the workgroup information file for your application at the local level.</p>
<p>
Then, install your application on the user’s local drive. If your application is based on Microsoft Access, install it locally. If your application is based on Visual Basic or some other language, install the necessary resources such as executable files and dynamic-link libraries locally. Figure&nbsp;6.6 illustrates this optimization technique.</p>
<p>
<b>Figure&nbsp;6.6   Optimizing a workstation</b></p>
<p>
<img src="jet0606.gif" border=0></p>
<p>
Finally, investigate bottlenecks occurring on your LAN that are due to hardware. You might want to try the following:
<ul>
<li>
Segment the LAN into subnets. Typically, a server has only one network interface card (NIC) with many nodes connected to it. To reduce this bottleneck, add multiple NICs to the server and spread the nodes across those segments. This is probably the cheapest and biggest performance win because it substantially reduces collisions on the wire and gives each station a larger slice of bandwidth to communicate with the server.<br><br></li>
<li>
Add a better NIC to the server. Practically all Pentium systems now come with PCI slots. By using PCI NICs you can experience significantly faster throughput while keeping the CPU utilization lower. Also, many PCI NICs offer a multi-ported design, thus allowing you to do multiple segments from one PCI NIC. An example of this is a server with two PCI slots that uses two four-port PCI NICs. This creates eight segments that go to 36 nodes to reduce collisions on the wire and increase the bandwidth that each node has when communicating with the server. This would allow you to focus on performance issues that are software-related instead of hardware-related.<p>
Another option with PCI NICs is the 100&nbsp;MB Ethernet standard. While the 100&nbsp;MB hubs required to accompany the 100&nbsp;MB NICs are expensive, they do provide an alternative to finding workarounds for performance issues over the wire, and they can use existing cabling.</p>
</li>
<li>
Add faster disk drives and host adapters to the server. Again, moving to PCI- or EISA-based host adapters can have a significant impact on performance. To eliminate this bottleneck, one approach is to configure&nbsp;the server to use an EISA SCSI RAID controller using eight 1-GB SCSI drives. This increases performance because the EISA card reduces CPU processing by handling some processing itself, and because the RAID configuration allows reads and writes to be spread across the eight disk drives, thus reducing contention issues when trying to access a drive. This is probably the most expensive solution, but it makes a big performance improvement over a one ISA card-one disk solution.</li>
</ul>
<p>
<b>See Also   </b>For more information about other performance optimizations, see Chapter&nbsp;13, “<a href="c13_body.htm">Optimizing Performance</a>.”</p>
</BODY>
</HTML>

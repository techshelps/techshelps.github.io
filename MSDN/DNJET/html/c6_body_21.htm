<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Exclusive Mode</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_exclusive_mode"></a>Using Exclusive Mode</h3>
<p>
As previously mentioned, exclusive mode is the most restrictive way you can open a database. It prevents all other users from opening the database. This is generally useful for administrative or bulk changes to the database, such as repair or compact operations, or when making structural changes to the database’s schema.</p>
<p>
When you access a database in a single-user environment, you typically open it in exclusive mode. This may provide better performance because Microsoft Jet doesn’t have to lock and unlock objects or refresh its cache. When you deploy your application in a multiuser environment, exclusive mode is no longer an option; you must open the database in shared mode.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To open a database in exclusive mode</b>
<ol>
<li>
Declare a database variable using the <b>Dim</b> statement.<br><br></li>
<li>
Use the <b>OpenDatabase</b> method to open the database, specifying a value of <b>True</b> for the <i>options</i> argument.<br><br></li>
<li>
Close the database object when finished to allow it to be accessed by other users.</li>
</ol>
<p>
The following code checks to see whether a database can be opened exclusively, using the CanOpenDbExclusively function defined in Chapter&nbsp;2, “Introducing Data Access Objects.” If this function returns true, then the following code opens the database exclusively. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function OpenDatabaseExclusive(strDbPath As String) As Database
&#09;Dim dbs As Database
&#09;  
&#09;' Check whether database can be opened exclusively.
&#09;If CanOpenDbExclusively(strDbPath) Then
&#09;&#09;' Open database exclusively and return reference.
&#09;&#09;Set dbs = OpenDatabase(strDbPath, True)
&#09;&#09;Set OpenDatabaseExclusive = dbs
&#09;Else
&#09;&#09;MsgBox &quot;Cannot open database exclusively.&quot; _
&#09;&#09;&#09;&amp; &quot;You or another user may already have it open.&quot;
&#09;&#09;' Return Nothing.
&#09;&#09;Set OpenDatabaseExclusive = Nothing
&#09;End If
End Function</font></pre>
<p>
You may want to prevent your application’s users from opening a shared database in exclusive mode. This is particularly useful if your users use applications such as Microsoft Access that allow databases to be opened exclusively through the user interface. You can accomplish this if you have established Microsoft Jet user-level security. Once user-level security is established, you can use the Microsoft Access user interface to prevent a user from opening a database in exclusive mode by removing that user’s Open Exclusive permission for the <b>Database</b> object. If you have defined user-level security groups, you can remove the Open Exclusive permission for the <b>Database</b> object for any group that user belongs to. Note that you probably want to allow administrative users the option of opening the database exclusively. You can set this permission using DAO by setting the <b>Permissions</b> property of the Databases <b>Container</b> object for that user or group to the <b>dbSecDBExclusive</b> constant.</p>
<p>
<b>See Also   </b>For more information about establishing user-level security and setting permissions, see Chapter&nbsp;10, “<a href="c10_body.htm">Managing Security</a>.”</p>
<p>
When you are setting locks in code with any level of locking, it’s important that you handle any errors that occur. In Microsoft Jet, you don’t check to see if a lock can be set before doing it. Instead, you try the operation and check to see if it succeeded. This approach makes it unnecessary for Microsoft Jet to supply a large number of status functions that usually must be invoked before attempting an operation.</p>
<p>
The typical approach to locking is a four-step process:
<ol>
<li>
Turn off error handling.<br><br></li>
<li>
Attempt the operation.<br><br></li>
<li>
Check to see if an error occurred. If so, handle the error based on the error number.<br><br></li>
<li>
Turn on error handling.</li>
</ol>
<p>
This approach works well because you don’t have to anticipate every possible error before attempting to set a lock; you handle the error only if it occurs. When writing multiuser code, you should handle the error by displaying an informational message and giving the user an opportunity to retry the operation.</p>
<p>
The OpenDatabaseExclusive procedure shown earlier in this section uses this technique.</p>
</BODY>
</HTML>

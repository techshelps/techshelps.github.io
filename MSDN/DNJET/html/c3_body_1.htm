<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h2><a name="jb2creating_a_database"></a>Creating a Database</h2>
<p>
As a developer, you may be familiar with creating a new Microsoft Jet database file either interactively through the Microsoft Access user interface, or through the Visual Data Manager utility (Visdata.exe) that ships with Visual Basic. You can also create a new Microsoft Jet database file programmatically by using DAO.</p>
<p>
For example, your application may need to build a new database when it’s first installed, or perhaps your application needs to create a database to archive or export data. The following code fragment creates a new database by using Visual Basic, where <code>strNewDbName</code> is the path and name for the new database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Set dbs = CreateDatabase(strNewDbName, dbLangGeneral, dbVersion30)</font></pre>
<p>
<b>Note   </b>The previous example is taken from the CreateNewDatabase function, which is available on the companion CD-ROM.</p>
<p>
This example uses the <b>CreateDatabase</b> method to build a new, empty database. The arguments to <b>CreateDatabase</b> specify the path and name for the new database, the language used for sorting and string comparison, and the version of the new database.</p>
<p>
The version argument is specified as <b>dbVersion30</b> when a Microsoft Jet version&nbsp;3.5 database is created because it uses the same file and table format as Microsoft Jet version&nbsp;3.0. However, databases created with the Microsoft Access&nbsp;97 user interface can’t be opened with Microsoft Access&nbsp;95. This is because a Microsoft Access&nbsp;97 database’s Visual Basic for Applications <i>project</i> (the set of all code modules in a database, which includes modules associated with forms and reports, as well as standard and class modules) can’t run in the version of Visual Basic for Applications used in Microsoft Access&nbsp;95. Additionally, some database objects created with Microsoft Access&nbsp;97 may use application-defined properties and have features that are not supported in earlier versions of Microsoft Access.</p>
<p>
If you use the <b>CreateDatabase</b> method to create a database specified as <b>dbVersion30</b> and use only DAO methods to create tables, relationships, and queries, both Microsoft Access&nbsp;95 and 97 treat the database as a native database the first time it’s opened. However, both versions of Microsoft Access add an application-defined property named <b>AccessVersion</b> to the <b>Properties</b> collection of a database the first time it’s opened. Microsoft Access&nbsp;97 also adds a system table named MSysModules2 to contain the database’s Visual Basic for Applications project, which is treated as an invalid database object by Microsoft Access&nbsp;95. After the first time a database is opened in either version, it’s no longer treated as a native database in the other version.</p>
<p>
For a Microsoft Access version&nbsp;2.0 database, the <b>AccessVersion</b> property returns “02.00.” For a Microsoft Access&nbsp;95 database, the <b>AccessVersion</b> property returns a string that always begins with “06” followed by a period and two digits. For a Microsoft Access&nbsp;97 database, the <b>AccessVersion</b> property always begins with “07” followed by a period and two digits. In both Microsoft Access&nbsp;95 and 97, the final two digits returned by the <b>AccessVersion</b> property may vary depending on the dynamic-link library (DLL) used to create a database’s Visual Basic for Applications project. For this reason, if you want to determine the version that produced or is using a database, your code should ignore the final two digits. The following function returns the version of Microsoft Access used to create or open a database by examining only the first two digits returned for the <b>AccessVersion</b> property. This function takes a <b>String</b> argument that specifies the path to the database.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function FindVersion(strDbPath As String) As String
&#09;Dim dbs As Database
&#09;Dim strVersion As String
&#09;Const conPropertyNotFound As Integer = 3270

&#09;On Error GoTo Err_FindVersion

&#09;' Open the database and return a reference to it.
&#09;Set dbs = OpenDatabase(strDbPath)
&#09;' Check the value of the AccessVersion property.
&#09;strVersion = dbs.Properties(&quot;AccessVersion&quot;)
&#09;' Return the two leftmost digits of the value of the AccessVersion property.
&#09;strVersion = Left(strVersion, 2)

&#09;' Based on the value of the AccessVersion property, return a string indicating
&#09;' the version of Microsoft Access used to create or open the database.
&#09;Select Case strVersion
&#09;&#09;Case &quot;02&quot;
&#09;&#09;&#09;FindVersion = &quot;2.0&quot;
&#09;&#09;Case &quot;06&quot;
&#09;&#09;&#09;FindVersion = &quot;7.0&quot;
&#09;&#09;Case &quot;07&quot;
&#09;&#09;&#09;FindVersion = &quot;8.0&quot;
&#09;End Select

Exit_FindVersion:
&#09;On Error Resume Next
&#09;dbs.Close
&#09;Set dbs = Nothing
&#09;Exit Function

Err_FindVersion:
&#09;If Err.Number = conPropertyNotFound Then
&#09;&#09;MsgBox &quot;This database hasn't previously been opened with Microsoft Access.&quot;
&#09;Else
&#09;&#09;MsgBox &quot;Error: &quot; &amp; Err &amp; vbCrLf &amp; Err.Description
&#09;End If
&#09;Resume Exit_FindVersion
End Function</font></pre>
<p>
If you create a <b>dbVersion30 </b>database by using DAO methods and then add forms and reports by using the <b>CreateForm</b> or <b>CreateReport</b> functions (these functions are available only in code run from Microsoft Access), a Visual Basic for Applications project is added that corresponds to the version of Microsoft Access used to run the code. You can also add modules and insert code in a database by using Visual Basic code in Microsoft Access&nbsp;97. Doing so also creates a Visual Basic for Applications project that is specific to Microsoft Access&nbsp;97.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Partial Replicas</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2creating_partial_replicas"></a>Creating Partial Replicas</h3>
<p>
A partial replica is a database that contains a subset of the data contained in the Design Master. You create a partial replica by using either the Partial Replica Wizard or DAO code. It may be easier to create a partial replica by using the wizard and then make modifications to it as needed.</p>
<p>
<b>Note   </b>The Partial Replica Wizard is available at no cost from the Microsoft Access Developer Forum Web site at http://www.microsoft.com/accessdev/accwhite/prtlrepl.htm. This wizard is also included in the PrtlReplWiz folder on the companion CD-ROM.</p>
<p>
The Partial Replica Wizard is a Microsoft Access add-in that displays several dialog boxes to prompt you through the steps required to create a partial replica. You run the add-in from within the Design Master or a full replica that contains the data you want to filter.</p>
<p>
The data in a partial replica is defined by an SQL WHERE clause (without the WHERE keyword) on a single table in the Design Master. You can filter records from multiple tables only by using DAO code. When you define the criteria that will make up the WHERE clause, the following restrictions apply:
<ul>
<li>
Enclose date values with the number sign (#). For example:<pre><FONT FACE="Courier New" SIZE="3">[Order Date] &gt; #12/31/95# AND [Order Date] &lt; #1/1/97#</font></pre>
</li>
<li>
Surround the contents of Text or Memo fields with quotation marks. For example:<pre><FONT FACE="Courier New" SIZE="3">FirstName = &quot;Nancy&quot; AND LastName = &quot;Davolio&quot;</font></pre>
</li>
<li>
Enter numeric values using the field name and the value. For example:<pre><FONT FACE="Courier New" SIZE="3">CategoryID = 1</font></pre>
</li>
<li>
You cannot use user-defined or aggregate functions nor can you prompt the user at run-time to enter a parameter value.</li>
</ul>
<p>
Using DAO code to create a partial replica gives you much more flexibility and much more control over how you filter the data in the Design Master. Creating a partial replica by using DAO code involves four basic steps:
<ol>
<li>
Create an empty partial replica database. When this step is completed, you have a “template” database, but no data. You create an empty partial replica by using the <b>MakeReplica</b> method of the <b>Database</b> object that refers to the Design Master database, specifying <b>dbRepMakePartial</b> in the <i>options</i> argument. When you create a partial replica in this manner, the partial replica at first contains all the replicable tables in the Design Master but none of the data.<p>
In the following code, <code>strDMPath</code> is the path to the Design Master database, and <code>strDbPartial</code> is the path to the new partial replica:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, tdf As TableDef

Set dbs = OpenDatabase(strDMPath)
dbs.MakeReplica Name:=strDbPartial, Options:= dbRepMakePartial</font></pre>
</li>
<li>
Define filters for the partial replica. There are two types of filters. One type is an SQL WHERE clause (without the WHERE keyword) that contains the selection criteria that defines the records that will appear in a specific table in the partial replica. Define the filter by using the <b>ReplicaFilter</b> property of a <b>TableDef</b> object in the new partial replica. For example, the following code fragment uses the <b>ReplicaFilter</b> property to define a filter based on the EmployeeID field in the Orders table:<pre><FONT FACE="Courier New" SIZE="3">Set tdf = dbs.TableDefs(&quot;Orders&quot;) 
tdf.ReplicaFilter = &quot;EmployeeID = 3&quot;</font></pre>
<p>
You can use intersection expressions in a single <b>ReplicaFilter</b> property setting. For example, you can create a partial replica containing all orders that fall within a specified starting and ending date. The following code fragment defines a filter that returns all records that occurred between 1/1/95 and 1/31/95:</p>
<pre><FONT FACE="Courier New" SIZE="3">tdf.ReplicaFilter = _
&#09;&quot;OrderDate &gt;= #1/1/96# AND OrderDate &lt;= #12/31/96#&quot;</font></pre>
<p>
You can create these types of filters on one or more tables in the database. Synchronizing partial replicas will be significantly faster when you create filters that reference indexed fields. For example, in most circumstances you should define the criteria for the <b>ReplicaFilter</b> property based on a table’s primary key. In the previous example, you’d want to make sure that the OrderDate field is indexed.</p>
<p>
The other type of filter is a Boolean. You set the <b>ReplicaFilter</b> property to <b>True</b> to get all the records and to <b>False</b> to get none.</p>
</li>
<li>
Decide which records you want from related tables. There are two scenarios that you should take into consideration: the relationships in which your filtered table is on the “many” side, and those in which your table is on the “one” side. Note that this applies only to enforced relationships between tables.<p>
If your filtered table is on the “many” side of a relationship, Microsoft Jet automatically includes records from tables when required by referential integrity. For example, suppose you set the <b>ReplicaFilter</b> property on the Orders table, as shown in the previous example. The Orders table participates in one-to-many relationships with the Employees, Customers, and Shippers tables; the Orders table is on the “many” side of each of these relationships. Because you cannot have a record in the Orders table that refers to an employee, a customer, or a shipper that doesn’t exist, Microsoft Jet automatically includes all the employees, customers, and shippers in their respective tables for the orders that your filter specifies.</p>
<p>
If your filtered table is on the “one” side of a relationship, referential integrity does not require that records be included from tables on the “many” side. In the case where you have set a filter on the Orders table, which is on the “one” side, Microsoft Jet does not require any of the records in the Order Details table, which is on the “many” side, to be present. However, when you’re creating a partial replica, it’s likely that you’ll want records from the Order Details table as well.</p>
<p>
To include records from the Order Details table, you can set the <b>PartialReplica</b> property on the relationship between the Orders and Order Details tables. The <b>PartialReplica</b> property alerts Microsoft Jet to include records from the “many” side of a one-to-many relationship, if there’s a filter on the “one” side. You must set the <b>PartialReplica</b> property for every enforced relationship for which you want to include records from the table on the “many” side.</p>
<p>
For example, the following code fragment sets the <b>PartialReplica</b> property on the relationship between the Orders table and the Order Details table. In this example, <code>rel</code> is a <b>Relation</b> object:</p>
<pre><FONT FACE="Courier New" SIZE="3">If rel.Table = &quot;Orders&quot; And rel.ForeignTable = &quot;Order Details&quot; Then
&#09;rel.PartialReplica = True
End If</font></pre>
</li>
<li>
Fill the partial replica with data. You use the <b>PopulatePartial</b> method of the <b>Database</b> object that represents the partial replica database. If the database is not opened exclusively, an error occurs when you try to execute this method. Use this method to populate the new partial replica with data before synchronizing for the first time and after you change any partial replica filters. The following code fragment fills a partial replica with data from the full replica specified in the <i>strDMPath</i> argument, which contains the name of the Design Master. In this example, <code>strDbPartial</code> is the path to the partial replica:<pre><FONT FACE="Courier New" SIZE="3">Set dbs = OpenDatabase(strDbPartial, True)
dbs.PopulatePartial strDMPath</font></pre>
<p>
The <b>PopulatePartial</b> method works only with direct connections. It does not support indirect, or Internet/intranet synchronization. If you change the filter for a partial replica, you must use the <b>PopulatePartial</b> method to remove records from the partial replica that matched the old filter and add all records that comply with the new filter.</p>
</li>
</ol>
<p>
The following example shows one way to create a partial replica and fill it with data from a Design Master. When you run this function, you’ll see that all replicable tables in the Design Master exist in the partial replica, but that the Orders table contains only those orders entered by the employee whose employee ID is 3, and that this employee is the only employee in the Employees table. The tables whose data is required for referential integrity contain data. Those whose data isn’t required for referential integrity don’t contain data.</p>
<p>
To call this function, pass in the name of the Design Master and the name for the new partial replica:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function CreatePartialReplica(strDMPath As String, _
&#09;&#09;strDbPartial As String) As Boolean
&#09;Dim dbs As Database
&#09;Dim tdf As TableDef
&#09;Dim rel As Relation

&#09;On Error GoTo Err_CreatePartialReplica

&#09;' Set a reference to the Design Master.
&#09;Set dbs = OpenDatabase(strDMPath)
&#09;' Create a new partial replica and then close the Design Master.
&#09;With dbs
&#09;&#09;.MakeReplica strDbPartial, _
&#09;&#09;&#09;&quot;Partial replica of &quot; &amp; strDMPath, dbRepMakePartial
&#09;&#09;.Close
&#09;End With
&#09;Set dbs = Nothing

&#09;' Create a reference to the new partial replica.
&#09;Set dbs = OpenDatabase(strDbPartial, True)
&#09;Set tdf = dbs.TableDefs(&quot;Orders&quot;)
&#09;' Set the filter for the new partial replica.
&#09;tdf.ReplicaFilter = &quot;EmployeeID = 3&quot;

&#09;' Specify that Microsoft Jet include records from the &quot;many&quot; side 
&#09;' of a one-to-many relationship.
&#09;For Each rel In dbs.Relations
&#09;&#09;If rel.Table = &quot;Employees&quot; And rel.ForeignTable = &quot;Orders&quot; Then
&#09;&#09;&#09;rel.PartialReplica = True
&#09;&#09;&#09;Exit For
&#09;&#09;End If
&#09;Next rel

&#09;' Fill the partial replica with data.
&#09;dbs.PopulatePartial strDMPath
&#09;CreatePartialReplica = True

Exit_CreatePartialReplica:
&#09;On Error Resume Next
&#09;dbs.Close
&#09;Set dbs = Nothing
&#09;Exit Function

Err_CreatePartialReplica:
&#09;MsgBox &quot;Error: &quot; &amp; Err.Number &amp; &quot; - &quot; &amp; Err.Description
&#09;CreatePartialReplica = False
&#09;Resume Exit_CreatePartialReplica
End Function </font></pre>
</BODY>
</HTML>

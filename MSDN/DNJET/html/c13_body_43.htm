<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ShowPlan Function</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2using_the_showplan_function"></a>Using the ShowPlan Function</h4>
<p>
When the <b>ShowPlan</b> function is activated, Microsoft Jet appends text to a file called <i>Showplan.out</i> when a query is compiled. This text contains the plan that the query optimizer has generated for that query.</p>
<p>
<b>Note   </b>If you have the <b>ShowPlan</b> function activated, Microsoft Jet will append query plans to the Showplan.out text file every time a query is compiled. As such, the file can grow quite large. You should only turn this feature on during your development and debugging processes. Never leave it on for production databases.</p>
<p>
The following text shows the query plan for the Invoices query stored in the Northwind.mdb sample database included with Microsoft Access&nbsp;97:</p>
<pre><FONT FACE="Courier New" SIZE="3">---------------------------------------------
DATE: 01/19/97
VER:  3.50.3428

NOTE: Currently does not handle subqueries, vt [virtual table] parameters, and subqueries
NOTE: You may see ERROR messages in these cases

--- Invoices ---

- Inputs to Query -
Table 'Orders'
Table 'Order Details'
&#09;Using index 'OrdersOrder Details'
&#09;Having Indexes:
&#09;OrdersOrder Details 2155 entries, 8 pages, 830 values
&#09;  which has 1 column, fixed
&#09;OrderID 2155 entries, 8 pages, 830 values
&#09;  which has 1 column, fixed
Table 'Customers'
&#09;Using index 'PrimaryKey'
&#09;Having Indexes:
&#09;PrimaryKey 91 entries, 1 page, 91 values
&#09;  which has 1 column, fixed, unique, primary-key, no-nulls
&#09;PostalCode 91 entries, 1 page, 87 values
&#09;  which has 1 column, fixed
&#09;CompanyName 91 entries, 3 pages, 91 values
&#09;  which has 1 column, fixed
&#09;City 91 entries, 1 page, 69 values
&#09;  which has 1 column, fixed
Table 'Employees'
Table 'Products'
Table 'Shippers'
- End inputs to Query -

01) Sort table 'Orders'
02) Inner Join table 'Shippers' to result of '01)'
&#09;  using temporary index
&#09;  join expression &quot;Shippers.ShipperID=Orders.ShipVia&quot;
03) Sort table 'Employees'
04) Inner Join result of '02)' to result of '03)'
&#09;  using temporary index
&#09;  join expression &quot;Orders.EmployeeID=Employees.EmployeeID&quot;
05) Inner Join result of '04)' to table 'Customers'
&#09;  using index 'Customers!PrimaryKey'
&#09;  join expression &quot;Orders.CustomerID=Customers.CustomerID&quot;
06) Inner Join result of '05)' to table 'Order Details'
&#09;  using index 'Order Details!OrdersOrder Details'
&#09;  join expression &quot;Orders.OrderID=[Order Details].OrderID&quot;
07) Sort table 'Products'
08) Inner Join result of '06)' to result of '07)'
&#09;  using temporary index
&#09;  join expression &quot;[Order Details].ProductID=Products.ProductID&quot;

--- temp query ---

- Inputs to Query -
Table 'Customers'
&#09;Using index 'CompanyName'
&#09;Having Indexes:
&#09;CompanyName 91 entries, 3 pages, 91 values
&#09;  which has 1 column, fixed
&#09;City 91 entries, 1 page, 69 values
&#09;  which has 1 column, fixed
- End inputs to Query -

01) Scan table 'Customers'
&#09;Using index 'CompanyName'

--- temp query ---

- Inputs to Query -
Table 'Products'
&#09;Using index 'ProductName'
&#09;Having Indexes:
&#09;ProductName 77 entries, 1 page, 77 values
&#09;  which has 1 column, fixed
&#09;PrimaryKey 77 entries, 1 page, 77 values
&#09;  which has 1 column, fixed, unique, clustered and/or counter, primary-key, no-nulls
&#09;CategoryID 77 entries, 1 page, 8 values
&#09;  which has 1 column, fixed
&#09;CategoriesProducts 77 entries, 1 page, 8 values
&#09;  which has 1 column, fixed
- End inputs to Query -

01) Scan table 'Products'
&#09;Using index 'ProductName'</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an SQL Pass-Through Query with a Stored QueryDef Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2using_an_sql_pass-through_query_with_a_stored_querydef_object"></a>Using an SQL Pass-Through Query with a Stored QueryDef Object</h4>
<p>
One way to create and execute an SQL pass-through query is to create a <b>QueryDef</b> object.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create and execute an SQL pass-through query using a QueryDef object</b>
<ol>
<li>
Use the <b>CreateQueryDef</b> method of the <b>Database</b> object to create a new <b>QueryDef</b> object. If you plan to use the <b>QueryDef</b> object again, save it in the database by assigning a name; if you plan to use the query one time, pass an empty string (&quot;&quot;) for the <i>name</i> argument.<br><br></li>
<li>
Set the <b>Connect</b> property of the <b>QueryDef</b> object to a valid ODBC connection string. This identifies the query as an SQL pass-through query to the Microsoft Jet database engine. Microsoft Jet will not parse the SQL code in the query when you specify an ODBC connection string.<br><br></li>
<li>
Set the <b>SQL</b> property of the <b>QueryDef</b> object to the SQL statement you want to execute against the remote database. The syntax of the SQL statement must conform to the syntax of the remote database server. If the remote database server cannot execute the statement, a trappable error occurs.<br><br></li>
<li>
If your query returns a set of records, you must also set the <b>ReturnsRecords</b> property of the <b>QueryDef</b> object to <b>True</b>. This instructs Microsoft Jet to prepare a <b>Recordset</b> object to hold the query results. If you don’t set the <b>ReturnsRecords</b> property to <b>True</b> for a query that returns records, a trappable error results.<p>
<b>Note   </b>You can return multiple result sets from a single query. For information, see “Processing Multiple Result Sets” later in this chapter.</p>
</li>
<li>
Use the <b>OpenRecordset</b> method of the <b>QueryDef</b> object to open the result set.</li>
</ol>
<p>
This example shows how to create and execute a simple SQL pass-through query named Total Orders. It uses the VerboseErrorHandler function to display any errors that occur, including all ODBC errors.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub SQLPassThroughQueryDef(strDbPath As String)
&#09;Dim dbs As Database, qdf As QueryDef
&#09;Dim rst As Recordset, intN As Integer

&#09;Set dbs = OpenDatabase(strDbPath)

&#09;On Error GoTo Err_SQLPassThroughQueryDef
&#09;Set qdf = dbs.CreateQueryDef(&quot;Total Orders&quot;)

&#09;' Set QueryDef's Connect, SQL, and ReturnsRecords properties.
&#09;With qdf
&#09;&#09;.Connect = &quot;ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Pubs&quot;
&#09;&#09;.SQL = &quot;SELECT * FROM Sales&quot;
&#09;&#09;.ReturnsRecords = True
&#09;End With
&#09;' Open snapshot on query.
&#09;Set rst = qdf.OpenRecordset(dbOpenSnapshot)

&#09;intN = rst.RecordCount
&#09;MsgBox intN &amp; &quot; records were returned by this query.&quot;

Exit_SQLPassThroughQueryDef:
&#09;On Error Resume Next
&#09;rst.Close
&#09;dbs.Close
&#09;Set dbs = Nothing
&#09;Exit Sub

Err_SQLPassThroughQueryDef:
&#09;' Call error handling function to display ODBC errors.
&#09;VerboseErrorHandler
&#09;Resume Exit_SQLPassThroughQueryDef
End Sub</font></pre>
<p>
The VerboseErrorHandler function is a simple error handler that exposes errors at each level in the client/server system. This function handles errors in many of the code examples found throughout this chapter.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function VerboseErrorHandler()
&#09;' Handles single or multiple Jet errors.
&#09;Dim errX As Error

&#09;' Check whether ODBC errors have occurred.
&#09;If Errors.Count &gt; 1 Then
&#09;&#09;' Loop through Errors collection.
&#09;&#09;For Each errX In Errors
&#09;&#09;&#09;MsgBox &quot;Error &quot; &amp; errX.Number &amp; _
&#09;&#09;&#09;&#09;&#09;&quot;: &quot; &amp; errX.Description
&#09;&#09;Next errX
&#09;Else
&#09;&#09;' Display single VBA error.
&#09;&#09;MsgBox &quot;Error &quot; &amp; Err.Number &amp; _
&#09;&#09;&#09;&quot;: &quot; &amp; Err.Description
&#09;End If
End Function</font></pre>
</BODY>
</HTML>

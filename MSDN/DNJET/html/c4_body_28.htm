<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>One-to-Many Joins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2one-to-many_joins"></a>One-to-Many Joins</h4>
<p>
There is no logical difference between a “many-to-one” join, as described previously, and a “one-to-many” join, except from the point of view of the user. A one-to-many join is sometimes referred to as a master/detail relationship. A single record in the “one” or “master” table is related to one or more records in the “many” or “detail” table. Updatable multiple-table joins are especially useful with these types of one-to-many relationships.</p>
<p>
The following query joins the Orders table to the Order Details table in a classic one-to-many relationship:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT 
&#09;Orders.*, 
&#09;[Order Details].*
FROM Orders 
INNER JOIN [Order Details] 
ON Orders.OrderID = [Order Details].OrderID;</font></pre>
<p>
Fields in the Orders table focus on the order itself: the customer who placed the order, the employee who took the order, the date the order was taken, and so on. Fields derived from the Order Details table specify the actual items that were ordered: the product’s ID and pricing details. Just as with the many-to-one example shown previously, changes to fields from the “one” table on any given record are automatically made for all other records based on the same value in the “one” table. For example, if the user changes the CustomerID field, which is drawn from the “master” Orders table, for any given record, the change is automatically reflected in all other records for this same order.</p>
<p>
Updatable multiple-table joins aren’t limited to a single-level hierarchy. For example, the following query links from the Employees table to the Orders table to the Order Details table:</p>
<pre><FONT FACE="Courier New" SIZE="3">SELECT 
&#09;Employees.EmployeeID, 
&#09;Employees.LastName, 
&#09;Orders.OrderID, 
&#09;Orders.OrderDate, 
&#09;[Order Details].ProductID
FROM (Employees 
&#09;INNER JOIN Orders 
&#09;ON Employees.EmployeeID = Orders.EmployeeID) 
INNER JOIN [Order Details] 
ON Orders.OrderID = [Order Details].OrderID;</font></pre>
<p>
Fields from all three of these joined tables can be updated in the resulting recordset.</p>
</BODY>
</HTML>

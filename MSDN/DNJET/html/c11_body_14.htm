<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2properties"></a>Properties</h4>
<p>
Properties in the dbDAO classes are defined differently from the way they are defined in Visual Basic. The <b>PropName</b> type library property, for example, is exposed as two methods: <b>GetPropName</b> and <b>SetPropName</b>. If the property is read-only, only the <b>Get</b> method is exposed. If the property is write-only, only the <b>Set</b> method is exposed. The <b>Get</b> method takes no arguments and returns the value of the property, using the appropriate C data type where possible. The <b>Set</b> method takes a single argument&nbsp;— the new value to which you want to set the property&nbsp;— again using the appropriate C data type where possible.</p>
<p>
One example of a read/write property is the <b>Name</b> property. It is mapped to the <b>GetName</b> and <b>SetName</b> methods. Therefore, its C prototypes are as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">CString&#09;&#09;GetName (VOID);
VOID&#09;&#09;SetName (LPCTSTR pstr);</font></pre>
<p>
Some properties return data of various types. The most obvious of these are the <b>Value</b> properties of <b>Field</b> objects. These have to return variants because the data type of the return value isn’t known until run time.</p>
<p>
Visual Basic has default properties. For example, the following code:</p>
<pre><FONT FACE="Courier New" SIZE="3">a = rst!FirstName</font></pre>
<p>
is equivalent to:</p>
<pre><FONT FACE="Courier New" SIZE="3">a = rst!FirstName.Value</font></pre>
<p>
Here, <b>Value</b> is the default property of the <b>Field</b> object. Because C++ has no equivalent syntax, you have to ask for the default property by name:</p>
<pre><FONT FACE="Courier New" SIZE="3">a = rst.Fields[&quot;FirstName&quot;].GetValue();</font></pre>
<p>
<b>Note   </b>For this particular call, the performance of this code could be improved by using the dbDAO <b>GetField</b> method, as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">a = rst.GetField(&quot;FirstName&quot;);</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSI and Unicode Strings</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2ansi_and_unicode_strings"></a>ANSI and Unicode Strings</h3>
<p>
All 16-bit applications use ANSI strings. 32-bit applications can use either ANSI or Unicode strings. ANSI applications store strings as <b>unsigned char</b>, each byte containing a different character. Unicode applications store strings as <b>unsigned short</b>, each short integer value containing a different character.</p>
<p>
To specify ANSI, declare the following statement in your project settings:</p>
<pre><FONT FACE="Courier New" SIZE="3">#define OLE2ANSI</font></pre>
<p>
To specify Unicode, declare the following statement in your project settings:</p>
<pre><FONT FACE="Courier New" SIZE="3">#define _UNICODE</font></pre>
<p>
The advantage of using Unicode in your applications is that it enables you to easily localize your application into languages such as Chinese, where two bytes are required to store characters. ANSI applications require special double-byte character set (DBCS) functions to be localized into such languages.</p>
<p>
The advantage of using ANSI strings is that the Windows system calls take ANSI strings in Windows&nbsp;95. In contrast, if you use Unicode strings, you must convert them to ANSI strings before calling these functions.</p>
<p>
You can compile your application in ANSI or Unicode by using the <b>_T</b> macro. The <b>_T</b> macro is defined by Visual&nbsp;C++ and is used to wrap all string literals. In ANSI, this macro does nothing. In Unicode, it appends the <b>L</b> keyword to inform the compiler that the literal is to be read in as Unicode.</p>
<pre><FONT FACE="Courier New" SIZE="3">void OpenADatabase()
&#09;{
&#09;CdbDBEngine dben;
&#09;CdbDatabase db;

&#09;db = dben.OpenDatabase(_T(&quot;MyDB.MDB&quot;));
&#09;}</font></pre>
<p>
The preceding code will compile for both ANSI and Unicode applications.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining the Boundaries of Collections</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2determining_the_boundaries_of_collections"></a>Determining the Boundaries of Collections</h4>
<p>
To work effectively with collections, it’s important to understand how collections are ordered and how to determine their boundaries. To determine the boundaries of a collection, use the <b>Count</b> property of the collection. The value of the <b>Count</b> property reflects the number of objects in the collection. For example, if a collection’s <b>Count</b> property returns 5, then there are five objects in that collection.</p>
<p>
However, remember that DAO collections are zero-based. This means that members of DAO collections are indexed starting with 0, with the first object in the collection having an index number of 0. Therefore, when your code compares the value of the <b>Count</b> property to the current index position of the collection, it must subtract one. For example, the following code illustrates how to use the <b>Count</b> property to determine the number of <b>TableDef</b> objects in a database and to print the name of each table. In this code, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim intX As Integer

Set dbs = OpenDatabase(strDbPath)
For intX = 0 To dbs.TableDefs.Count - 1
&#09;Debug.Print dbs.TableDefs(intX).Name
Next intX</font></pre>
<p>
You can see how this example subtracts one from the <b>Count</b> property to make sure the comparison works.</p>
<p>
You can simplify your code by using the <b>For Each…Next</b> statement instead of a <b>For...Next</b> statement. The following code accomplishes the same task, but without requiring you to handle collection boundaries. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef

Set dbs = OpenDatabase(strDbPath)
For Each tdf In dbs.TableDefs
&#09;Debug.Print tdf.Name
Next tdf</font></pre>
<p>
The first example above shows how you can refer to an object by using its location within a collection. When you add or delete objects from a collection, the <b>Count</b> property changes and no longer provides a reliable means of specifying an object’s location in a collection. Therefore, you should not use the <b>Count</b> property to determine the boundaries of a collection with code that loops through and deletes objects.</p>
</BODY>
</HTML>

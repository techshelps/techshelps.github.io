<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Records from the Employee Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2reading_records_from_the_employee_database"></a>Reading Records from the Employee Database</h4>
<p>
After the connection is made, the first record from the Employees table is displayed on the Employee form. Reading data and displaying the results on the form occur in the view portion of the code. The application updates the view whenever the position in the recordset is changed in response to one of the four commands available from the toolbar or <b>Edit</b> menu. Each command invokes a related function within the document. (Because the recordset contains the data, it is associated with the document and not the view.) For example, clicking the <b>Next</b> command calls the <b>OnEditNext</b> function:</p>
<pre><FONT FACE="Courier New" SIZE="3">void CDAOEMPDoc::OnEditNext() 
{
&#09;if(!OKToMove()) 
&#09;&#09;return;

&#09;m_cEmpRecordSet.MoveNext();

&#09;//Watch for end of recordset.
&#09;if(m_cEmpRecordSet.GetEOF())
&#09;&#09;{
&#09;&#09;MessageBeep(0);
&#09;&#09;m_cEmpRecordSet.MovePrevious();
&#09;&#09;}
&#09;else
&#09;&#09;{
&#09;&#09;UpdateAllViews(NULL);
&#09;&#09;}
&#09;
}</font></pre>
<p>
The <b>OnEditNext</b> function first calls the <b>OKToMove</b> function, which checks to see if the recordset is empty or if the record has been updated. (Record updates are discussed in “Updating Records from the Employee Database” later in this chapter.) The <b>MoveNext</b> method then positions the recordset to the next record. The end-of-file condition is checked. If it occurs, the application moves back to the previous record; otherwise, the view is updated. If the end of the recordset is reached, there is no need to update the view, and the application moves back to the last record displayed.</p>
<p>
In terms of actually reading data, the application calls the <b>OnUpdate</b> member function to update the form view’s appearance:</p>
<pre><FONT FACE="Courier New" SIZE="3">void CDAOEMPView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint) 
{
&#09;CDAOEMPDoc* pDoc = GetDocument();
&#09;ASSERT_VALID(pDoc);

&#09;if (pDoc-&gt;m_bEmptyTable)
&#09;&#09;return;

&#09;try
&#09;&#09;{
&#09;&#09;m_nEmpNum = VTOLONG(pDoc-&gt;m_cEmpRecordSet.Fields[EMP_EMPLOYEE_ID].GetValue());
&#09;&#09;
&#09;&#09;//Convert the variant strings into Cstrings.
&#09;&#09;VarToCStr(&amp;m_strFirstName,
&#09;&#09;&#09;&#09;&#09;&amp;pDoc-&gt;m_cEmpRecordSet.Fields[EMP_FIRST_NAME].GetValue());
&#09;&#09;VarToCStr(&amp;m_strHomePhone,
&#09;&#09;&#09;&#09;&#09;&amp;pDoc-&gt;m_cEmpRecordSet.Fields[EMP_HOME_PHONE].GetValue());
&#09;&#09;VarToCStr(&amp;m_strLastName,&#09;
&#09;&#09;&#09;&#09;&#09;&amp;pDoc-&gt;m_cEmpRecordSet.Fields[EMP_LAST_NAME].GetValue());
&#09;&#09;VarToCStr(&amp;m_strNotes,&#09;
&#09;&#09;&#09;&#09;&#09;&amp;pDoc-&gt;m_cEmpRecordSet.Fields[EMP_NOTES].GetValue());

&#09;&#09;//ColeDateTime: 
&#09;&#09;m_HireDate = pDoc-&gt;m_cEmpRecordSet.Fields[EMP_HIRE_DATE].GetValue();
&#09;&#09;}
&#09;catch (CdbException dbExcept)
&#09;&#09;{
&#09;&#09;CdbLastOLEError exError;
&#09;&#09;TCHAR szBuf[256];

&#09;&#09;//If error is &quot;No Current Record,&quot; assume empty table and clear members.
&#09;&#09;if(dbExcept.m_hr == E_DAO_NoCurrentRecord)
&#09;&#09;&#09;{
&#09;&#09;&#09;pDoc-&gt;m_bEmptyTable = TRUE;

&#09;&#09;&#09;m_nEmpNum&#09;&#09;= 0;
&#09;&#09;&#09;m_strFirstName&#09;= &quot;&quot;;
&#09;&#09;&#09;m_strHomePhone&#09;= &quot;&quot;;
&#09;&#09;&#09;m_strLastName&#09;= &quot;&quot;;
&#09;&#09;&#09;m_strNotes&#09;&#09;= &quot;&quot;;
&#09;&#09;&#09;m_HireDate&#09;&#09;= COleDateTime(1990,1,1,0,0,0);
&#09;&#09;&#09;}
&#09;&#09;else
&#09;&#09;&#09;{
&#09;&#09;&#09;wsprintf(szBuf, _T(&quot;Error %d : %s\n&quot;), DBERR(dbExcept.m_hr), (LPCTSTR) exError.GetDescription());
&#09;&#09;&#09;AfxMessageBox(szBuf);
&#09;&#09;&#09;return;
&#09;&#09;&#09;}
&#09;&#09;}

&#09;UpdateData(FALSE); //Invoke Data Exchange (copy member data to form controls).

&#09;Invalidate(); //Repaint.
}</font></pre>
<p>
Data is returned as variants, so you must convert returned values to member variables’ data types. Daoemp.h defines several useful macros for handling data conversion, such as <b>VTOLONG</b>, which converts a variant to a <b>LONG</b> data type:</p>
<pre><FONT FACE="Courier New" SIZE="3">#define VTOLONG(v)   ((v).vt==VT_I4 ? (LONG)(v).iVal:0L)</font></pre>
<p>
Note that this conversion converts a null value represented by VT_NULL into the long value 0L, which may not always be what you want.</p>
<p>
Although not shown in the Employee application, the dbDAO <b>GetRowsEx</b> method provides an alternate method of reading data directly as native C data types. Although it involves writing more code, the <b>GetRowsEx</b> method improves performance because it bypasses this extra data conversion.</p>
<p>
<b>See Also   </b>For more information about the <b>GetRowsEx</b> method, see “Performing Bulk Fetches with GetRows and GetRowsEx” later in this chapter.</p>
<p>
The final step is to update the form controls themselves by calling the <b>UpdateData</b> member function with an argument of <b>FALSE</b>. The <b>UpdateData</b> function uses DDX to maintain mappings between data of the <b>CDAOEMPView</b> class and the controls in the dialog box template resource for this form view.</p>
</BODY>
</HTML>

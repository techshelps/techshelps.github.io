<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Temporary Queries with DAO</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2creating_temporary_queries_with_dao"></a>Creating Temporary Queries with DAO</h4>
<p>
You can create temporary <b>QueryDef</b> objects that you can use in code. You create a temporary <b>QueryDef</b> object in your code by using a zero-length string (&quot;&quot;) in place of the query name. You can then execute the <b>QueryDef</b> object and close it. Temporary <b>QueryDef</b> objects are well-suited to creating and running update, parameterized, and pass-through queries.</p>
<p>
The following example shows how you may use a temporary <b>QueryDef</b> object to execute an action query that updates data as defined by an SQL statement passed to the procedure in the <code>strSQL</code> variable. In this example, <code>strDbPath</code> is the path to the database, and <code>strSQL</code> is an SQL statement for an update query:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim qdf As QueryDef

Set dbs = OpenDatabase(strDbPath)
Set qdf = dbs.CreateQueryDef(&quot;&quot;, strSQL)
qdf.Execute
qdf.Close</font></pre>
<p>
For example, you may supply the following values for <code>strDbPath</code> and <code>strSQL</code>:</p>
<pre><FONT FACE="Courier New" SIZE="3">strDbPath = &quot;C:\JetBook\Samples\NorthwindTables.mdb&quot;
strSQL = &quot;UPDATE Products INNER JOIN Suppliers &quot; &amp; _
&#09;&quot;ON Products.SupplierID = Suppliers.SupplierID &quot; &amp; _
&#09;&quot;SET Products.UnitPrice = [UnitPrice]*1.1 &quot; &amp; _
&#09;&quot;WHERE Suppliers.CompanyName=&quot;&quot;Exotic Liquids&quot;&quot;;</font></pre>
<p>
This update query increases the unit price of all Exotic Liquids products in the Products table by 10 percent. After you run the update query, close the temporary <b>QueryDef</b> object because it’s no longer needed.</p>
<p>
Note that if the SQL statement specified a select query rather than an update query, you need to open a <b>Recordset</b> object on the <b>QueryDef</b> object in order to view the result set. For example, suppose you specified a value for <code>strSQL</code> as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">strSQL = &quot;SELECT ProductName, UnitPrice FROM Products &quot; &amp; _
&#09;&quot;WHERE UnitPrice &gt;= 40 ORDER BY ProductName;&quot;</font></pre>
<p>
Rather than executing the temporary <b>QueryDef</b> object, you can open a <b>Recordset</b> object on it, then close the temporary <b>QueryDef</b> object and manipulate the <b>Recordset</b> object, as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim qdf As QueryDef
Dim rst As Recordset, fld As Field

Set dbs = OpenDatabase(strDbPath)
Set qdf = dbs.CreateQueryDef(&quot;&quot;, strSQL)
Set rst = qdf.OpenRecordset
qdf.Close
Do Until rst.EOF
&#09;For Each fld In rst.Fields
&#09;&#09;Debug.Print fld.Value
&#09;Next fld
&#09;rst.MoveNext
Loop&#09;</font></pre>
</BODY>
</HTML>

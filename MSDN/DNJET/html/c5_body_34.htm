<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Copying Entire Records to an Array</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2copying_entire_records_to_an_array"></a>Copying Entire Records to an Array</h3>
<p>
To copy one or more entire records, you can create a two-dimensional array and copy records one at a time. You increment the first subscript for each field and the second subscript for each record.</p>
<p>
A fast way to do this is with the <b>GetRows</b> method. The <b>GetRows </b>method returns a two-dimensional array. The first subscript (an index into the array) identifies the field, and the second identifies the record number, as follows:</p>
<pre><FONT FACE="Courier New" SIZE="3">varRecords(intField, intRecord)</font></pre>
<p>
The following example uses an SQL statement to retrieve three fields from a table called Employees and place them in a <b>Recordset</b> object. It then uses the <b>GetRows</b> method to retrieve the first three records of the <b>Recordset </b>object, and stores the selected records in a two-dimensional array. Each record is then printed, one field at a time, by using the two array indexes to select specific fields and records.</p>
<p>
To clearly illustrate how the array indexes are used, the following example uses a separate statement to identify and print each field of each record. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim rst As Recordset
Dim varRecords As Variant
Dim intNumReturned As Integer, intNumFields As Integer
Dim intField As Integer, intRecord As Integer
Dim strSQL As String

Set dbs = OpenDatabase(strDbPath)
strSQL = &quot;SELECT FirstName, &quot; &amp; _
&#09;&quot;LastName, Title FROM Employees&quot;
' Open snapshot-type recordset.
Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)

' Return array using GetRows.
varRecords = rst.GetRows(3)
' Determine upper bound of second dimension.
intNumReturned = UBound(varRecords, 2)
' Determine upper bound of first dimension.
intNumFields = UBound(varRecords, 1)

' Print each value in array.
For intRecord = 0 To intNumReturned
&#09;For intField = 0 To intNumFields
&#09;&#09;Debug.Print varRecords(intField, intRecord)
&#09;Next intField
&#09;Debug.Print
Next intRecord</font></pre>
<p>
You can use subsequent calls to the <b>GetRows</b> method if more records are available. Because the array is filled as soon as you call the <b>GetRows </b>method, this approach is much faster than using assignment statements to copy one field at a time.</p>
<p>
Note also that you don’t have to dimension the <b>Variant</b> variable as an array, because this is done automatically when the <b>GetRows</b> method returns records. This enables you to use fixed-length array dimensions without knowing how many records or fields will be returned, instead of using variable-length dimensions that take up more memory.</p>
<p>
If you’re trying to retrieve all the records by using multiple calls to the <b>GetRows</b> method, use the <b>EOF</b> property to be sure that you’re at the end of the <b>Recordset</b> object. The <b>GetRows</b> method returns fewer than the number requested if it’s at the end of the <b>Recordset</b> object or if it cannot retrieve a record in the range requested. For example, if the fifth record cannot be retrieved in a group of ten records that you’re trying to retrieve, the <b>GetRows</b> method returns four records and leaves the current record position on the record that caused a problem&nbsp;— and does not generate a run-time error. This situation may occur if a record in a dynaset was deleted by another user. If fewer records were returned than the number requested and you’re not at the end-of-file position, you will need to read each field in the current record to determine what error the <b>GetRows</b> method encountered.</p>
<p>
Because the <b>GetRows</b> method always returns all the fields in the <b>Recordset </b>object, you may want to create a query that returns just the fields you need. This is especially important for Memo and Long Binary (OLE Object) fields.</p>
<p>
<b>Microsoft Excel Users   </b>You can import the contents of a <b>Recordset</b> object into a range on a Microsoft Excel worksheet with the <b>CopyFromRecordset</b> method. This method begins to copy at the current record of the result set; when the transfer is completed, the <b>Recordset</b> object pointer is positioned just past the last record, or at the end-of-file position. For more information, see the Microsoft Excel Visual Basic Help file.</p>
</BODY>
</HTML>

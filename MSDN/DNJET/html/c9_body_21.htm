<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Stored Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_stored_procedures"></a>Using Stored Procedures</h3>
<p>
If you are using an existing client/server database, you’ll likely find that the administrator has created many stored procedures that you can use. <i>Stored procedures</i> are compiled code written in the server’s native programming language (generally the server-specific dialect of SQL) stored on the server that are used for a wide variety of operations. Their main purpose is to build logic into the processing of SQL statements. For instance, if you want to select data from one of two tables on the server, depending upon a value from a third table, a stored procedure would be an ideal candidate. Pass-through queries allow you to use stored procedures.</p>
<p>
Stored procedures on the server are generally faster than dynamic SQL statements, just as stored queries in Microsoft Jet are faster than dynamic SQL. That is, a stored procedure is usually a precompiled execution plan. No parsing needs to occur, only execution.</p>
<p>
When your application is waiting for user input, it isn’t worth the added complication of stored procedures to increase the speed, because neither the user nor the server benefits from the increased speed. Stored procedures really become useful when more complex logic is required&nbsp;— for example, when satisfying a business rule that a particular book has to be in stock and then checking to see if more books should be ordered on each purchase.</p>
<p>
You can add records by using DAO code that uses the <b>Edit</b> or <b>AddNew</b> method along with the <b>Update</b> method on a dynaset-type <b>Recordset</b> object. When combined with the <b>dbAppendOnly</b> constant in the <i>options</i> argument of the <b>OpenRecordset</b> method, this is an efficient and simple technique. For specialized scenarios, however, you may find that it’s worth creating your own stored procedures.</p>
<p>
The BookSalesOptimized sample application creates the following stored procedure on the SQL Server when you run it:</p>
<pre><FONT FACE="Courier New" SIZE="3">CREATE PROCEDURE InsertSale(@stor_id char(4), 
@ord_num varchar(20), 
@ord_date datetime, 
@qty smallint, 
@payterms varchar(12), 
@title_id varchar(6))
AS
BEGIN
INSERT INTO sales VALUES (@stor_id, @ord_num, @ord_date, @qty, @payterms, @title_id)
RETURN
END</font></pre>
<p>
This stored procedure adds a new record to the Sales table. You can call this procedure by using the <b>Execute</b> method of a <b>Database</b> object with the <b>dbSQLPassThrough</b> constant specified in the <i>options</i> argument, and supplying a value for each of the six parameters. The values you supply for parameters are inserted into fields in the table.</p>
<p>
For example, you could call the InsertSales stored procedure as follows, where <code>dbs</code> is a <b>Database</b> object representing the remote database, and <code>strStoredProcCall</code> is a string variable:</p>
<pre><FONT FACE="Courier New" SIZE="3">strStoredProcCall = &quot;InsertSale '6380', 'SALES2', '5/6/97 7:16:12 PM'&quot;, _
&#09;&amp; &quot;1, 'Net 30', 'PS2091'&quot;
dbs.Execute strStoredProcCall, dbSQLPassThrough</font></pre>
<p>
<b>See Also   </b>For more information about queries, see “Using SQL Pass-Through Queries” earlier in this chapter. You can use input parameters and return values with stored procedures when using ODBCDirect <b>QueryDef</b> objects. For more information, see “The Parameter Object and the Parameters Collection” and “Working with Stored Procedures” later in this chapter.</p>
</BODY>
</HTML>

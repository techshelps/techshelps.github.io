<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Table-Level Validation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2table-level_validation"></a>Table-Level Validation</h4>
<p>
You may want to create a validation rule for a particular field that depends on the values of one or more of the other fields in the table. You can create a table-level validation rule to compare one field to another.</p>
<p>
Suppose you want to specify a rule for a Marketing Survey table that requires that all surveys using the name TestAccount have a Class field value of X. You can’t validate the Name field without knowing the value of the Class field, and vice versa. Only when a record is either updated or inserted is all the information available to evaluate the rule.</p>
<p>
The validation rule must contain an expression that can be evaluated as either <b>True</b> or <b>False</b>. If the expression evaluates to <b>True</b>, the update is allowed. If the expression evaluates to <b>False</b>, Microsoft Jet generates a trappable run-time error.</p>
<p>
The following example uses DAO to add a table-level validation rule, where <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Function AddTableLevelValidationRule() As Boolean
&#09;' This procedure checks for an existing table-level validation rule and
&#09;' validation text on the Orders table and prompts the user to create new ones.
&#09;Dim dbs As Database, tdf As TableDef
&#09;Dim strValRule As String, strValText As String
&#09;Dim strDbPath As String
&#09;
&#09;On Error GoTo Err_AddTableLevelValidationRule
&#09;
&#09;Set dbs = OpenDatabase(&quot;C:\JetBook\Samples\NorthwindTables.mdb&quot;)
&#09;Set tdf = dbs.TableDefs(&quot;Orders&quot;)

&#09;If Len(tdf.ValidationRule) Then
&#09;&#09;If MsgBox(&quot;The following validation rule already exists: &quot; &amp; vbCrLf _
&#09;&#09;&#09;&amp; vbCrLf &amp; tdf.ValidationRule &amp; vbCrLf &amp; vbCrLf _
&#09;&#09;&#09;&amp; &quot;Delete this rule and create a new one?&quot;, vbYesNo) = vbYes Then
&#09;&#09;&#09;&#09;tdf.ValidationRule = &quot;&quot;
&#09;&#09;Else
&#09;&#09;&#09;GoTo Exit_AddTableLevelValidationRule
&#09;&#09;End If
&#09;End If
&#09;strValRule = &quot;([RequiredDate]&gt;=[OrderDate]) And ([ShippedDate]&gt;=[OrderDate])&quot;
&#09;tdf.ValidationRule = strValRule

&#09;If Len(tdf.ValidationText) Then
&#09;&#09;If MsgBox(&quot;The following validation text already exists: &quot; &amp; vbCrLf _
&#09;&#09;&#09;&amp; vbCrLf &amp; tdf.ValidationText &amp; vbCrLf &amp; vbCrLf _
&#09;&#09;&#09;&amp; &quot;Delete this validation text and create new text?&quot;, vbYesNo) = _
&#09;&#09;&#09;&#09;vbYes Then tdf.ValidationText = &quot;&quot;
&#09;&#09;Else
&#09;&#09;&#09;GoTo Exit_AddTableLevelValidationRule
&#09;&#09;End If
&#09;End If
&#09;strValText = &quot;Both the Required Date and the Shipped Date must be &quot; &amp; _
&#09;&#09;&quot;the same date or later than the Order Date.&quot;
&#09;tdf.ValidationText = strValText
&#09;AddTableLevelValidationRule = True

Exit_AddTableLevelValidationRule:
&#09;On Error Resume Next
&#09;dbs.Close
&#09;Set dbs = Nothing
&#09;Exit Function

Err_AddTableLevelValidationRule:
&#09;MsgBox &quot;Error: &quot; &amp; Err &amp; vbCrLf &amp; Err.Description
&#09;AddTableLevelValidationRule = False
&#09;Resume Exit_AddTableLevelValidationRule
End Function</font></pre>
<p>
Note that you can test the properties as well as set them from DAO code. The previous example checks that no current table-level validation rule and validation text exist before adding the new ones.</p>
<p>
Because table-level validation rules can’t be evaluated until all the fields in a new record are populated, the validation rule is not checked until just before the new record is inserted in the table, or just before the existing record is updated.</p>
<p>
The validation rule in the previous example uses the built-in <b>IIf</b> (Immediate If) function. While you can’t use your own custom functions within a validation rule, you can make use of a wide variety of built-in functions, including date functions and string-manipulation functions such as <b>InStr</b>, <b>Len</b>, and <b>Mid</b>.</p>
</BODY>
</HTML>

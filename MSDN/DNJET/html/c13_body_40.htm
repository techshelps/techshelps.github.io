<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ISAMStats Function</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2the_isamstats_function"></a>The ISAMStats Function</h3>
<p>
You can use the <b>ISAMStats</b> function, which returns information about the raw disk reads, writes, locks, and caching, to analyze and tune the performance of your application. If you want to get every last bit of performance out of your database, you may find the <b>ISAMStats</b> function useful when trying to substantiate timing results based on various ways of manipulating data in the database. Some typical scenarios in which you might use the <b>ISAMStats</b> function include:
<ul>
<li>
When you’re trying to tune a query and you’re not sure how to reduce network traffic.<br><br></li>
<li>
When you’re looking at the effect of placing explicit transactions versus letting Microsoft Jet use its internal transactions.<br><br></li>
<li>
When you have adjusted the registry settings and you want to see how they affect the number of reads and writes to the database.<br><br></li>
<li>
When you want to validate timings, which may vary due to external circumstances that Microsoft Jet does not control, such as varying traffic on the LAN, different processes running on the machine, and disk fragmentation. Although elapsed time for a computer may vary, the number of reads or writes generally stays the same.</li>
</ul>
<p>
The syntax for the <b>ISAMStats</b> function is:</p>
<p>
<b>ISAMStats</b> (<i>StatNum</i> <b>As Long</b> [, <i>Reset</i> <b>As Boolean</b>]) <b>As Long</b></p>
<p>
This function returns the value of a given engine statistic as defined by <i>StatNum</i>. The following table lists and describes the values you can use for<i> StatNum</i>.</p>
<table>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>StatNum</b></font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<b>Description</b></font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
0</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of disk reads</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
1</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of disk writes</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
2</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of reads from cache</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
3</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of reads from read-ahead cache</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
4</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of locks placed</font></td>
</tr>
<tr valign=top>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
5</font></td>
<td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
Number of release lock calls</font></td>
</tr>
</table><br>
<p>
If the optional <i>Reset</i> argument is supplied, then the statistic defined by <i>StatNum</i> is reset and no value is returned. A <i>Reset</i> value of <b>False</b> is equivalent to not supplying the argument. The statistics returned apply to the whole engine, regardless of how many databases or sessions are active, including temporary databases.</p>
<p>
The following may help you interpret the statistics returned by the <b>ISAMStats</b> function:
<ul>
<li>
The number of disk reads and writes includes all reads and writes in all circumstances, including background read-ahead cache reads in separate threads. One read or write doesn’t necessarily equal one page: One read or write could represent many pages that were read or written simultaneously. An example of this is commands wrapped in a transaction.<br><br></li>
<li>
There are two types of cached reads returned. The regular cache is a set of pages. For example, after executing an SQL DML statement, it’s likely that the pages read would remain in the cache. The read-ahead cache statistic shows reads that occurred so that they would be available if needed. For example, in certain scenarios, Microsoft Jet&nbsp;3.5 issues a read request for more pages than it actually needs. In this way, pages can be used without actually going to disk again. The number of cache reads doesn’t include read-ahead cache reads.<br><br></li>
<li>
The number of locks placed and released may not balance. A single call to release a lock may result in the release of many locks.</li>
</ul>
<p>
The following procedure uses the <b>ISAMStats</b> function to return statistics on a query. The first procedure calls two procedures shown earlier in this chapter, ResetISAMStats and PrintISAMStats:</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub ShowStats(strDbPath As String)
&#09;Dim dbs As Database
&#09;Dim strSQL As String
&#09;Dim lngVersion As Long

&#09;' If you are using Visual Basic, make sure that the database
&#09;' is open or that the engine is initialized before issuing
&#09;' any ISAMStats calls. This example uses DBEngine.Version to
&#09;' initialize the database.
&#09;lngVersion = DBEngine.Version

&#09;' Explicitly set the counters to zero.
&#09;ResetISAMStats
&#09;' Open the database.
&#09;Set dbs = OpenDatabase(strDbPath), _
&#09;&#09;False, False)
&#09;' Prompt user to enter SQL statement.
&#09;strSQL = InputBox(&quot;Enter a SQL string&quot;, &quot;SQL Box&quot;, _
&#09;&#09;&quot;UPDATE Customers SET ContactName = ContactName&quot;)
&#09;' Execute query.
&#09;dbs.Execute strSQL, dbFailOnError
&#09;' Print the values to the Debug window.
&#09;PrintISAMStats strSQL
&#09;' Reset each value.
&#09;ResetISAMStats
End Sub</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Structural Changes by Using SQL DDL</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2making_structural_changes_by_using_sql_ddl"></a>Making Structural Changes by Using SQL DDL</h4>
<p>
By using SQL DDL, you can remove a table from the database with the following statement:</p>
<pre><FONT FACE="Courier New" SIZE="3">DROP TABLE MyTable;</font></pre>
<p>
Note that this action is subject to all the security restrictions and referential integrity constraints that are established for the database. If the table is part of one or more relationships that are defined in the database, you can’t delete the table until you have deleted the relationship. For more information, see the “Creating and Deleting Relationships by Using SQL DDL” section later in this chapter.</p>
<p>
Similarly, you can add or remove a field (column) from an existing table by using the following statements:</p>
<pre><FONT FACE="Courier New" SIZE="3">ALTER TABLE MyTable ADD COLUMN NewColumn TEXT (20);
ALTER TABLE MyTable DROP COLUMN NewColumn;</font></pre>
<p>
When you use SQL DDL statements, you have no control over the order in which new fields are added to a table. Fields are inserted at the end of the list of fields when an ALTER TABLE ADD COLUMN statement is used. Each additional field created by an ALTER TABLE ADD COLUMN statement that follows the original CREATE TABLE statement is placed after the most recently created existing field.</p>
<pre><FONT FACE="Courier New" SIZE="3">CREATE TABLE YourTable (A CHAR (10));</font></pre>
<p>
yields the field A in the first field slot.</p>
<pre><FONT FACE="Courier New" SIZE="3">ALTER TABLE YourTable ADD COLUMN G CHAR(10);</font></pre>
<p>
yields the field A in the first field slot and G in the second slot.</p>
<pre><FONT FACE="Courier New" SIZE="3">ALTER TABLE YourTable ADD COLUMN F CHAR(10);</font></pre>
<p>
yields the field A in the first field slot, G in the second slot, and F in the third slot.</p>
<p>
You can’t alter the data type of a field once it’s created, or change its name. The only way to convert an existing field from one data type to another is to add a new field, run an update query to populate the field with values from the original field, and then drop the original field. The same limitation applies to changes made through DAO; you can change a field’s name through DAO, but not its data type, and you can work around this limitation by using the same method.</p>
</BODY>
</HTML>

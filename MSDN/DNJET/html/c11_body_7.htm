<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up the Employee Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2setting_up_the_employee_application"></a>Setting Up the Employee Application</h4>
<p>
To install the DAO SDK, run the Setup program. For more information about installing the DAO SDK, see “DAO SDK Files” later in this chapter. Using Visual&nbsp;C++, open the Employee.dsw project workspace file, which is located in the \Samples\Employee folder. This file contains all the settings needed for the Employee application. To create the application, Employee.exe, click the <b>Build</b> command on the <b>Build</b> menu.</p>
<p>
<b>See Also   </b>For more information, see “Installing DAO on Another Machine” in the DAO SDK Help.</p>
<p>
<b>Note   </b>To run this application, the DAO run-time libraries must be properly installed. By default, the DAO SDK Setup program installs those libraries. Setup can also be modified to install them without including the other SDK contents (such as header files and import libraries, which only the application developer would require).</p>
<p>
The DAO SDK Setup program adds header, library, and source file directories to your Visual&nbsp;C++ environment. The Employee.dsw project workspace file contains the specific settings for building the Employee application.</p>
<p>
In addition to the corresponding header files for each source file, the Setup program installs the following files:
<ul>
<li>
<b>Dbdao.h</b>   Contains the dbDAO class definitions.<br><br></li>
<li>
<b>Stdafx.h</b>   Includes other necessary header files for using Win32&reg;, OLE, and MFC.</li>
</ul>
<p>
Because the dbDAO classes use MFC classes (such as <b>CObject</b> and <b>COleVariant</b>), your application must include the appropriate files for them. Likewise, because the dbDAO classes are built on top of the DAO Automation interfaces, the various OLE header files must be included. Stdafx.h includes all the necessary header files for building your dbDAO application.</p>
<p>
The Employee application uses the MFC document/view architecture. The document portion manipulates the data, so most of the dbDAO code resides there. The view portion contains display code. The Employee application is form-based and derives from the MFC <b>CFormView</b> class. The focus of this discussion is the dbDAO code, so details about using MFC are not provided.</p>
<p>
<b>See Also   </b>For more information about the MFC document/view architecture, see the MFC documentation that comes with Visual&nbsp;C++.</p>
<p>
The document (Daoemdoc.cpp) holds the database connection and defines the following member variables:</p>
<pre><FONT FACE="Courier New" SIZE="3">public:
&#09;CdbRecordset&#09;&#09;m_cEmpRecordSet;
&#09;BOOL&#09;&#09;&#09;&#09;m_bConnected;
&#09;BOOL&#09;&#09;&#09;&#09;m_bEmptyTable;
protected:
&#09;CdbDBEngine&#09;&#09;m_cDBEngine;
&#09;CdbDatabase&#09;&#09;m_cEmpDatabase;
&#09;CdbBookmark&#09;&#09;m_cLastGoodRecord;</font></pre>
<p>
These declarations are similar to Visual Basic declarations using the <b>Dim</b> statement. Note that dbDAO classes in the preceding declarations are prefaced by the <b>Cdb</b> prefix.</p>
<p>
The document contains member variables for the engine, the database connection, and the recordset that is displayed by the form&nbsp;— that is, <i>m_cDBEngine</i>, <i>m_cEmpDatabase</i>, and <i>m_cEmpRecordSet</i>, respectively. The <i>m_bConnected</i> member variable is a <b>Boolean</b> value that is TRUE if the connection to Employee.mdb is open; otherwise, it is FALSE. The <i>m_bEmptyTable</i> member variable is a <b>Boolean</b> value that is TRUE if the Employees table does not contain any records; otherwise, it is FALSE.</p>
<p>
A bookmark, the <i>m_cLastGoodRecord</i> member variable, is defined for use by the various positioning functions to keep track of the last record visited. Note that dbDAO defines the <b>CdbBookmark</b> class for bookmarks, whereas bookmarks are typed as <b>Variant</b> in Visual Basic.</p>
<p>
Because various code modules use the recordset, connected, and empty table flags, they are given public access. The engine, database, and bookmark member variables are given protected access, so that other code modules cannot modify their values.</p>
<p>
The member variables are initialized upon creation of the document. The <b>OnNewDocument</b> member function is overridden in order to perform the initialization. This function also initializes the <b>DBEngine</b> object. For more information about other ways of initializing the engine, see “Initializing CdbDBEngine” later in this chapter. The <b>OnNewDocument</b> function calls the <b>ConnectToDatabase</b> function, which is described in the following section.</p>
</BODY>
</HTML>

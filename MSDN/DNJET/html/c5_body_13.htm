<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Finding a Record in a Dynaset- or Snapshot-Type Recordset Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2finding_a_record_in_a_dynaset-_or_snapshot-type_recordset_object"></a>Finding a Record in a Dynaset- or Snapshot-Type Recordset Object</h3>
<p>
You can use the following methods to locate a record in a non-table-type <b>Recordset </b>object. (To locate a record in a table-type <b>Recordset </b>object, use the <b>Seek</b> method, which is described in the previous section.) Microsoft Jet supports four Find methods:
<ul>
<li>
The <b>FindFirst</b> method finds the first record satisfying the specified criteria.<br><br></li>
<li>
The <b>FindLast</b> method finds the last record satisfying the specified criteria.<br><br></li>
<li>
The <b>FindNext</b> method finds the next record satisfying the specified criteria.<br><br></li>
<li>
The <b>FindPrevious</b> method finds the previous record satisfying the specified criteria.</li>
</ul>
<p>
When you use the Find methods, you specify the search criteria, which is typically an expression equating a field name with a specific value. If no record matching the specified criteria is found, the <b>Recordset</b> object’s <b>NoMatch</b> property is set to <b>True</b>.</p>
<p>
The following example looks up phone numbers in an Employees table. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset
Dim strName As String, strCriteria As String
Dim strSQL As String, strInput As String
Dim strMsg As String

Set dbs = OpenDatabase(strDbPath)
strSQL = &quot;SELECT FirstName, LastName, HomePhone &quot; _
&#09;&amp; &quot;FROM Employees ORDER BY LastName&quot;
' Open snapshot-type recordset.
Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)

strInput = &quot;Enter the first few letters of the last &quot; _
&#09;&amp; &quot;name of the employee you want to find: &quot;
' Prompt user for input.
strName = InputBox(strInput)
' Check for input.
If Len(strName) = 0 Then Exit Sub
' Append asterisk to user's input.
strCriteria = &quot;LastName Like &quot;&quot;&quot; &amp; strName &amp; &quot;*&quot;&quot;&quot;

With rst
&#09;' Find first instance of criteria.
&#09;.FindFirst strCriteria
&#09;Do
&#09;&#09;' Check for match.
&#09;&#09;If Not .NoMatch Then
&#09;&#09;&#09;strMsg = &quot;The number for &quot; &amp; !FirstName &amp; _
&#09;&#09;&#09;&#09;&quot; &quot; &amp; !LastName &amp; &quot; is &quot; &amp; _
&#09;&#09;&#09;&#09;!HomePhone &amp; &quot;. Search again?&quot;
&#09;&#09;&#09;' Display result and prompt user to search again.
&#09;&#09;&#09;If MsgBox(strMsg, vbYesNo) = vbYes Then
&#09;&#09;&#09;&#09;strName = InputBox(strInput)
&#09;&#09;&#09;&#09;If Len(strName) = 0 Then Exit Sub
&#09;&#09;&#09;&#09;strCriteria = &quot;LastName Like &quot;&quot;&quot; &amp; strName &amp; &quot;*&quot;&quot;&quot;
&#09;&#09;&#09;&#09;.FindFirst strCriteria
&#09;&#09;&#09;Else
&#09;&#09;&#09;&#09;Exit Sub
&#09;&#09;&#09;End If
&#09;&#09;Else
&#09;&#09;&#09;strMsg = &quot;There was no match found for &quot; _
&#09;&#09;&#09;&#09;&amp; &quot; an employee last name like '&quot; &amp; _
&#09;&#09;&#09;&#09;strName &amp; &quot;*'&quot;
&#09;&#09;&#09;MsgBox strMsg, vbOKOnly, &quot;Find Home Phone&quot;
&#09;&#09;&#09;Exit Sub
&#09;&#09;End If
&#09;Loop
&#09;.Close
End With
dbs.Close
Set dbs = Nothing</font></pre>
<p>
You can locate the matching records in reverse order by finding the last occurrence with the <b>FindLast</b> method and then using the <b>FindPrevious</b> method instead of the <b>FindNext </b>method.</p>
<p>
Microsoft Jet sets the <b>NoMatch</b> property to <b>True</b> whenever a Find method fails and the current record position is undefined. There may be a current record, but you have no way to tell which one. If you want to be able to return to the previous current record following a failed Find method, use a bookmark (as described in the following section).</p>
<p>
The<b> NoMatch</b> property is <b>False</b> whenever the operation succeeds. In this case, the current record position is the record found by one of the Find methods.</p>
<p>
The following example illustrates how you can use the <b>FindNext</b> method to find all records in the Customers table that contain a <b>Null</b> value in the Fax field. It then prompts the user to enter a fax number for the customer. In this example, <code>strDbPath</code> is the path to the database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset
Dim strCriteria As String, varNewFax As Variant
Dim strMsg As String
&#09;
Set dbs = OpenDatabase(strDbPath)
' Open dynaset-type recordset.
Set rst = dbs.OpenRecordset(&quot;Customers&quot;, dbOpenDynaset)
' Check for Null value in Fax field.
strCriteria = &quot;Fax Is Null&quot;
With rst
&#09;' Find first Null value.
&#09;.FindFirst strCriteria
&#09;Do Until .NoMatch
&#09;&#09;' Prompt user to enter fax number.
&#09;&#09;varNewFax = InputBox(!CompanyName &amp; &quot; is missing &quot; &amp; _
&#09;&#09;&#09;&quot;a fax number. Please enter the fax number now.&quot;)
&#09;&#09;If Len(varNewFax) = 0 Then
&#09;&#09;&#09;strMsg = &quot;Do you want to find &quot; _
&#09;&#09;&#09;&#09;&amp; &quot;the next missing fax number?&quot;
&#09;&#09;&#09;If MsgBox(strMsg, vbYesNo, &quot;Continue Search?&quot;) = vbNo Then
&#09;&#09;&#09;&#09;Exit Sub
&#09;&#09;&#09;Else
&#09;&#09;&#09;&#09;varNewFax = Null
&#09;&#09;&#09;End If
&#09;&#09;End If
&#09;&#09;' Edit and update record.
&#09;&#09;.Edit
&#09;&#09;!Fax = varNewFax
&#09;&#09;.Update
&#09;&#09;' Find next Null value.
&#09;&#09;.FindNext strCriteria
&#09;Loop
&#09;.Close
End With</font></pre>
<p>
If you need to frequently search a large number of records in a dynaset, you may get better performance by creating a temporary indexed table and using the <b>Seek</b> method instead.</p>
</BODY>
</HTML>

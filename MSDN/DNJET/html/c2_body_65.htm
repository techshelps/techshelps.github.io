<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Field Object Variables to Refer to Fields In Loops</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_field_object_variables_to_refer_to_fields_in_loops"></a>Using Field Object Variables to Refer to Fields In Loops</h3>
<p>
To speed up iterative processes through large numbers of records by using DAO, declare object variables to refer to <b>Field</b> objects. The following example doesn’t use <b>Field</b> object variables to refer to <b>Field</b> objects. Instead, it refers to <b>Field</b> objects in the <b>Fields</b> collection. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;Products&quot;)

Do Until rst.EOF
&#09;With rst
&#09;&#09;.Edit
&#09;&#09;.Fields!UnitPrice = rst!UnitPrice * 1.1
&#09;&#09;.Update
&#09;&#09;.MoveNext
&#09;End With
Loop</font></pre>
<p>
This code performs better if you use <b>Field</b> object variables to refer to fields, as shown in the following example. In the following code, a <b>Field</b> object variable refers to the UnitPrice field in the recordset. When you return a reference to the field and assign it to a <b>Field</b> object variable, Visual Basic stores a reference to the field in the variable. The code runs more quickly because Visual Basic doesn’t have to return the reference each time the loop iterates. Again, the difference in performance is more noticeable for large recordsets than for small ones:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset
Dim fld As Field

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;Products&quot;)
Set fld = rst!UnitPrice

Do Until rst.EOF
&#09;With rst
&#09;&#09;.Edit
&#09;&#09;fld = fld * 1.1
&#09;&#09;.Update
&#09;&#09;.MoveNext
&#09;End With
Loop</font></pre>
<p>
Note that this operation is even faster if you use an update query rather than updating a field in the recordset, record by record. The following example uses an update query to accomplish the same task, where <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, strSQL As String

Set dbs = OpenDatabase(strDbPath)
strSQL = &quot;UPDATE Products SET Products.UnitPrice = UnitPrice *1.1;&quot;
dbs.Execute strSQL</font></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using dbDAO in a DLL</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_dbdao_in_a_dll"></a>Using dbDAO in a DLL</h3>
<p>
Although many people use DAO from an executable file, you may want to create dynamic-link libraries (DLLs) for distribution so that others can use them in their applications. If you use a DLL, you must start DAO from inside the DLL. Various restrictions on DLLs prevent this from being done automatically while the DLL loads, and the dbDAO classes will not handle it for you. Instead, you must explicitly force the load.</p>
<p>
For example, the following code works fine inside an executable, but the same code does not work as a DLL:</p>
<pre><FONT FACE="Courier New" SIZE="3">class CMyObj
&#09;{
public:
&#09;CMyObj();
 &#09;~CMyObj();
private:
&#09;CdbDBEngine m_cDBEng;
&#09;};

CMyObj::CMyObj()
&#09;{
&#09;}

CMyObj::~CMyObj()
&#09;{
&#09;delete m_cDBEng;
&#09;}

// Globally instantiated object - the cause of the DLL problem.
CMyObj myObj;

#ifdef MAKE_AS_DLL
// Exported function that is called by some console application.
// This case hangs.
__declspec(dllexport) void hello()
&#09;{
&#09;}

#else
// When this is built as a console application, it works fine.
void main()
&#09;{
&#09;return;
&#09;}
#endif // MAKE_AS_DLL</font></pre>
<p>
The line causing the problem is the declaration:</p>
<pre><FONT FACE="Courier New" SIZE="3">CMyObj myObj;</font></pre>
<p>
When the DLL is loaded and the class is instantiated, an attempt is made to start DAO. To work around this problem, you must create an entry point in your routine that explicitly creates DAO, and have your DLL users call that entry point. For example, you could do this as part of another initialization&nbsp;— for example, declaring the global variable as a pointer to <b>CdbDBEngine</b> and then constructing the class in your initialization function.</p>
</BODY>
</HTML>

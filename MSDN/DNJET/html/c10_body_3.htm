<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advantages of User-Level Security</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2advantages_of_user-level_security"></a>Advantages of User-Level Security</h4>
<p>
To see the advantages of user-level security, consider this example: Suppose you have a Salary table and two groups of people who use that table&nbsp;— managers who can update the table and workers who can view but not update the table. In a user-level system such as one created with Microsoft Jet, you can assign update permissions for the Salary table to the managers group and read permissions to the workers group. Then you add each user in your system into one of these two groups. Once this is done, users log on using their user account name and password. They need to perform no other action to use the application. They are granted the appropriate level of access to objects based on the permissions settings stored with each object and their group membership as established when logging on to the system. The users manage their own passwords, and their passwords are used to verify their identity rather than to identify a permission for an object.</p>
<p>
In a share-level system, two passwords would be used to implement this scheme: an update password and a read password, both applied directly to the Salary table. In this scenario, you would have to provide the passwords directly to the appropriate people. This is even more complicated if you have to change a password; you must have administrative mechanisms in place to make sure that all users get their appropriate updated passwords. Also, any time a user is moved from the managers group to the workers group, the password for the managers group must be changed to maintain security.</p>
<p>
You can see that even in this simple scenario, the administrative overhead associated with share-level security can be substantial. When you imagine a real application with many tables, users, and groups, you can quickly see that share-level security is a cumbersome solution.</p>
</BODY>
</HTML>

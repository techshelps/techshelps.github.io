<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Microsoft Foundation Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_microsoft_foundation_classes"></a>Using Microsoft Foundation Classes</h3>
<p>
The <b>CRecordset</b> C++ class provided with Microsoft Foundation Classes (MFC) uses the <b>SQLPrepare</b> function to prepare queries before execution. You can use the <b>CRecordset::Requery</b> function to re-execute the query for the <b>CRecordset</b> class without requiring the ODBC driver to re-parse the SQL statement, because the statement has already been prepared.</p>
<p>
By default, MFC library classes load the Cursor Library. The Cursor Library permits updatable snapshots. To get updatable recordsets, but not use the Cursor Library, use the dynaset <b>Crecordset</b> class. To specify it, pass <b>CRecordset::dynaset</b> for the first argument of <b>CRecordset::Open</b>. With the 32-bit MFC library database classes, it’s not enough to pass <b>CRecordset::dynaset</b> to <b>CRecordset::Open</b>. You must pass FALSE for the last argument of <b>CDatabase::Open</b>. This prevents the Cursor Library from loading. The code looks like this:</p>
<pre><FONT FACE="Courier New" SIZE="3">CDatabase db;
db.Open(&quot;DataSourceName&quot;,FALSE,FALSE,&quot;ODBC;&quot;,FALSE);
CYourRecordset rs(&amp;db);
rs.Open(CRecordset::dynaset);</font></pre>
<p>
To use dynasets, the DYNSET.EXE code, or 32-bit classes use the <b>SQLSetPos</b> functionality of the Microsoft Access Desktop Database Driver when you are performing updates, deletions, or insertions. As mentioned previously, this greatly increases the speed of an application.</p>
<p>
The Microsoft Access Desktop Database Driver does not support MFC transactions. The MFC classes require ODBC drivers to support <b>Recordset</b> object cursor preservation across rollbacks and commits of transactions.</p>
<p>
The Microsoft Access Desktop Database Driver does not guarantee this cursor preservation; however, you can use transactions if you requery after any transaction so that the cursor is restored to the first record in the <b>Recordset</b> object. Force the m_bTransactions member variable of the <b>Database</b> object to <b>True</b> before using the <b>BeginTrans</b> method. The code could look like this:</p>
<pre><FONT FACE="Courier New" SIZE="3">class CTransactDatabase: public CDatabase
{
    public:
    void SetTransactions(){ m_bTransactions=TRUE;}
};
.
.
.
CTransactDatabase db;
db.Open(&quot;SomeDataSourceName&quot;,FALSE,FALSE,&quot;ODBC;&quot;,FALSE);
db.SetTransactions();
db.BeginTrans();
CRecordSet rs(&amp;db);
rs.Open(CRecordset::dynaset);
.
// Manipulate data.
.
db.CommitTrans(); // or db.Rollback()
::SQLFreeStmt(rs.m_hstmt, SQL_CLOSE);
db.BeginTrans();
rs.Requery();
.
// Manipulate data.
.
db.CommitTrans() // or db.Rollback()
rs.Close();
db.Close();
.</font></pre>
<p>
<b>See Also   </b>For more information, see the documentation for <b>SQLGetInfo</b> and the SQL_CURSOR_COMMIT_BEHAVIOR and SQL_CURSOR_ROLLBACK_<BR>BEHAVIOR parameters in the <i>Microsoft</i> <i>ODBC&nbsp;3.0 Software Development Kit and Programmer’s Reference</i>.</p>
</BODY>
</HTML>

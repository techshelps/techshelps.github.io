<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Multiple Result Sets</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2processing_multiple_result_sets"></a>Processing Multiple Result Sets</h4>
<p>
SQL pass-through queries can return more than one result set. When you assign the result set to a <b>Recordset</b> object or display the results using a Microsoft Visual Basic <b>Data</b> control or a Microsoft Access datasheet, form, or report, only the first result set from the query is processed. To remedy this situation, you must use a make-table query, that is, a SELECT INTO SQL statement, to capture the additional result sets into Microsoft Jet tables.</p>
<p>
When Microsoft Jet returns the result sets from your query, it writes the results into new tables. The names of these new tables are derived from the table name you specify in the make-table query with ascending integer values following the initial table name. For example, if your query returns two result sets to the Results table, the first table would be named Results and the second would be named Results1. The following code fragment creates and runs a query that returns two result sets. This function calls the <b>PrintRecordset</b> procedure to print the recordset to the Debug window.</p>
<pre><FONT FACE="Courier New" SIZE="3">Sub ProcessMultipleResultSets(strDbPath As String)
&#09;Dim dbs As Database, qdf As QueryDef, rst As Recordset

&#09;Set dbs = OpenDatabase(strDbPath)
&#09;' Create saved QueryDef.
&#09;Set qdf = dbs.CreateQueryDef(&quot;GetAuthorsTitles&quot;)

&#09;' Set query properties.
&#09;With qdf
&#09;&#09;.Connect = &quot;ODBC;DSN=Pubs;UID=sa;PWD=;DATABASE=pubs&quot;
&#09;&#09;.ReturnsRecords = True
&#09;&#09;.SQL = &quot;SELECT * FROM authors; SELECT * FROM titles;&quot;
&#09;End With

&#09;' Execute SQL statement to create new tables.
&#09;dbs.Execute &quot;SELECT * INTO Results FROM GetAuthorsTitles&quot;

&#09;' Open recordset on first results table.
&#09;Set rst = dbs.OpenRecordset(&quot;Results&quot;)
&#09;' Call the PrintRecordset function to print the recordset.
&#09;PrintRecordset rst
&#09;Debug.Print

&#09;' Open recordset on second results table.
&#09;Set rst = dbs.OpenRecordset(&quot;Results1&quot;)
&#09;' Call the PrintRecordset function to print the recordset.
&#09;PrintRecordset rst
End Sub

Function PrintRecordset(rst As Recordset) As Boolean
&#09;Dim fld As Field

&#09;On Error GoTo Err_PrintRecordset

&#09;With rst
&#09;&#09;Do Until .EOF
&#09;&#09;&#09;For Each fld In .Fields
&#09;&#09;&#09;&#09;Debug.Print fld.Value
&#09;&#09;&#09;Next fld
&#09;&#09;&#09;Debug.Print
&#09;&#09;&#09;.MoveNext
&#09;&#09;Loop
&#09;End With
&#09;PrintRecordset = True

Exit_PrintRecordset:
&#09;Exit Function

Err_PrintRecordset:
&#09;MsgBox &quot;Error: &quot; &amp; Err &amp; vbCrLf &amp; Err.Description
&#09;PrintRecordset = False
&#09;Resume Exit_PrintRecordset
End Function</font></pre>
<p>
The tables returned support all the normal table operations. Normally you would use these tables to browse the data returned and then delete them in preparation for the next time you run the SELECT INTO query. Note that you only need to create the GetAuthorsTitles query once. For this reason, you may choose to save the SELECT INTO query rather than having it embedded in code. Also, you must use <code>&quot;SELECT&nbsp;*&quot;</code> to have multiple tables returned&nbsp;— you can’t select specific fields, even if they occur in all the result sets.</p>
<p>
<b>Note   </b>The previous example uses a SELECT INTO statement to create temporary tables in a Microsoft Jet database. If you use a similar procedure that creates temporary tables on the server database instead, the ODBC connection to the server may hang. This happens if you use Microsoft SQL Server version&nbsp;6.0 with the <b>Select Into/Bulk Copy</b> option set for the server database and the DSN that is used to connect to the database has the <b>Generate stored procedure for prepared statements</b> option set. To work around this problem, use the ODBC Data Source Administrator to modify the DSN and clear the <b>Generate stored procedure for prepared statements</b> option. This isn’t a problem when using a Microsoft SQL Server 6.5 database.</p>
<p>
<b>See Also   </b>When using an ODBCDirect <b>Workspace</b> object, you can use the <b>NextRecordset</b> method to loop through multiple result sets returned from your server. For more information, see “Retrieving Multiple Result Sets” later in this chapter.</p>
</BODY>
</HTML>

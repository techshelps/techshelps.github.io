<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Counting the Number of Records in a Recordset</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2counting_the_number_of_records_in_a_recordset"></a>Counting the Number of Records in a Recordset</h3>
<p>
You may want to know the number of records in a <b>Recordset</b> object. For example, you may want to create a form that shows how many records are in each of the tables in a database. Or you may want to change the appearance of a form or report based on the number of records it includes.</p>
<p>
The <b>RecordCount</b> property for a table-type <b>Recordset</b> object contains the number of records in the table. The <b>RecordCount</b> property for any other type of <b>Recordset</b> object contains the number of records that have been actually been visited. A <b>Recordset</b> object with no records has a <b>RecordCount</b> property value of 0.</p>
<p>
The <b>RecordCount</b> property value equals the number of records actually visited. For example, when you first create a non-table-type <b>Recordset</b> object, you have accessed (or “visited”) only the first record. If you check the <b>RecordCount</b> property immediately after creating this <b>Recordset</b> object (assuming it has at least one record), the value is 1. To visit all the records, use the <b>MoveLast</b> method immediately after opening the <b>Recordset </b>object, then use <b>MoveFirst</b> to return to the first record. This is not done automatically, because it may be slow, especially for large result sets. Opening a table-type <b>Recordset</b> object effectively visits all of the records in the underlying table, and <b>RecordCount</b> totals the number of records in the table as soon as the <b>Recordset </b>object is opened. Aborted transactions may make the <b>RecordCount</b> property value out of date in some multiuser situations. Compacting the database restores the table’s record count to the correct value.</p>
<p>
The following example creates a dynaset-type <b>Recordset </b>object (because it’s based on an SQL statement) from the Employees table, and then determines the number of records in the <b>Recordset </b>object. In this example, <code>strDbPath</code> is the path to the NorthwindTables database:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database, rst As Recordset

Set dbs = OpenDatabase(strDbPath)
Set rst = dbs.OpenRecordset(&quot;SELECT LastName, &quot; _
&#09;&amp; &quot;FirstName FROM Employees&quot;)
With rst
&#09;.MoveLast
&#09;MsgBox &quot;There are &quot; &amp; .RecordCount &amp; &quot; records in this recordset.&quot;
End With</font></pre>
<p>
As records in a dynaset-type <b>Recordset </b>object are deleted by your application, the value of the <b>RecordCount</b> property decreases. However, in a multiuser environment, records deleted by other users aren’t reflected in the value of the <b>RecordCount</b> property until the current record position is a deleted record. At that time, the setting of the <b>RecordCount</b> property decreases by 1. Using the <b>Requery</b> method on a <b>Recordset </b>object, followed by the <b>MoveLast</b> method, sets the <b>RecordCount</b> property to the current total number of records in the <b>Recordset </b>object.</p>
<p>
A snapshot-type or forward-only-type <b>Recordset </b>object is static and its <b>RecordCount</b> property value doesn’t change when other users add or delete records in the underlying table.</p>
</BODY>
</HTML>

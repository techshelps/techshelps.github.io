<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating Data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2manipulating_data"></a>Manipulating Data</h3>
<p>
You can use DAO to manipulate data in your database. In DAO, you use the <b>Recordset</b> object to interact with data stored in the database. <b>Recordset</b> objects are extremely powerful because they provide a great deal of flexibility in working with data.</p>
<p>
<b>Recordset</b> objects are different from most other DAO objects in that they exist only as temporary objects. Even though the method you use to create <b>Recordset</b> objects is called <b>OpenRecordset</b>, you don’t actually open existing <b>Recordset</b> objects; you create new ones. After you close a <b>Recordset</b> object, it no longer exists.</p>
<p>
To create a <b>Recordset</b>, you use the <b>OpenRecordset</b> method based on a <b>Database</b> object. The syntax for the <b>OpenRecordset</b> method is:</p>
<p>
<b>Set</b> <i>recordset</i> <b>=</b> <i>object</i><b>.OpenRecordset(</b><i>source</i><b>[,</b> <i>type</i><b>[,</b> <i>options</i><b>[,</b> <i>lockedits</i><b>]]])</b></p>
<p>
In this syntax, <i>recordset</i> is an object variable that represents the <b>Recordset</b> object you want to open. <i>Object </i>is an object variable that represents an existing object from which you want to create the new <b>Recordset</b> object. The<i> source</i> argument is the source of the data, such as a table name, a query name, or an SQL statement that returns records. You can open <b>Recordset</b> objects:
<ul>
<li>
Directly on tables in the database.<br><br></li>
<li>
On tables in other databases.<br><br></li>
<li>
On tables linked to external data sources such as ODBC or ISAM.<br><br></li>
<li>
On queries.<br><br></li>
<li>
Based on SQL strings that you dynamically create in code.<br><br></li>
<li>
On other <b>Recordset</b> objects.</li>
</ul>
<p>
The<i> type</i> argument is a numeric constant denoting the type of <b>Recordset</b> to open. There are five types of <b>Recordset</b> objects:
<ul>
<li>
Table-type <b>Recordset</b> object. A representation in code of a table in the current database. You can use table-type <b>Recordset</b> objects to retrieve, add, change, or delete records.<br><br></li>
<li>
Dynaset-type <b>Recordset</b> object. The result of a query that can have updatable records. A dynaset is a dynamic set of records that you can use to add, change, or delete records from an underlying database table or tables. A dynaset can contain fields from one or more tables in a database.<br><br></li>
<li>
Snapshot-type <b>Recordset</b> object. A static copy of a set of records that you can use to find data or generate reports. A snapshot can contain fields from one or more tables in a database, but it can’t be updated.<br><br></li>
<li>
Forward-only-type <b>Recordset</b> object. This type of <b>Recordset</b> object is identical to a snapshot-type <b>Recordset</b> object, except that you can only scroll forward through its records. This improves performance in situations where you only need to make a single pass through a result set.<p>
<b>Note   </b>DAO 3.5 introduced the <b>dbOpenForwardOnly</b> constant as a new value for the <i>type</i> argument of the <b>OpenRecordset</b> method. This <b>Recordset</b> object behaves the same as a DAO 3.0 snapshot-type <b>Recordset</b> object opened with the <b>dbForwardOnly</b> option.</p>
</li>
<li>
Dynamic-type <b>Recordset</b> object. This type of <b>Recordset</b> object represents a query result set from one or more base tables in which you can add, change, or delete records from a row-returning query. Further, records that users add, delete, or edit in the base tables also appear in your <b>Recordset</b> object. This <b>Recordset</b> object is similar to an ODBC dynamic cursor and is available in ODBCDirect workspaces only.</li>
</ul>
<p>
You can set the <i>options </i>argument<i> </i>to a combination of constants that specify characteristics of the new <b>Recordset</b> object. For example, with the <i>options</i> argument, you can specify:
<ul>
<li>
That users can’t modify or add records in the table or tables you are accessing.<br><br></li>
<li>
That users can’t view records (table-type <b>Recordset</b> only).<br><br></li>
<li>
That users can append new records, but can’t edit or delete existing records (dynaset-type <b>Recordset</b> only).<br><br></li>
<li>
That inconsistent updates are allowed (dynaset-type <b>Recordset</b> only).<br><br></li>
<li>
That only consistent updates are allowed (dynaset-type <b>Recordset</b> only).</li>
</ul>
<p>
<b>Note   </b>When you don’t use the <i>options</i> argument, you must specify 0 for it.</p>
<p>
The <i>lockedits</i> argument determines the locking for the new <b>Recordset</b> object. For example, you can:
<ul>
<li>
Prevent users from making changes to the <b>Recordset</b> object (default setting for ODBCDirect workspaces).<br><br></li>
<li>
Use pessimistic locking to determine how changes are made to the <b>Recordset</b> object in a multiuser environment. The page containing the record you’re editing is locked as soon as you use the <b>Edit</b> method (default for Microsoft Jet workspaces).<br><br></li>
<li>
Use optimistic locking to determine how changes are made to the <b>Recordset</b> object in a multiuser environment. The page containing the record you’re editing isn’t locked until the <b>Update</b> method executes.</li>
</ul>
</BODY>
</HTML>
